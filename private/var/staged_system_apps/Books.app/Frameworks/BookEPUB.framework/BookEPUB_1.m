double UIEdgeInsets.adding(insets:)(double a1, double a2, double a3, double a4, double a5)
{
  return a1 + a5;
}

void sub_965E0(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = objc_msgSend(*a1, "fontsByLanguage");
  if (v3)
  {
    v4 = v3;
    v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String, &type metadata for String, &protocol witness table for String);

  }
  else
  {
    v5 = 0;
  }
  *a2 = v5;
}

void sub_96650(_QWORD *a1, void **a2)
{
  void *v2;
  NSDictionary v3;
  Class isa;

  v2 = *a2;
  if (*a1)
    v3.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  else
    v3.super.isa = 0;
  isa = v3.super.isa;
  objc_msgSend(v2, "setFontsByLanguage:");

}

void sub_966B8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = objc_msgSend(*a1, "identifier");
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

id BookTheme.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id BookTheme.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for BookTheme();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for BookTheme()
{
  return objc_opt_self(BookTheme);
}

id BookTheme.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BookTheme();
  return objc_msgSendSuper2(&v2, "dealloc");
}

const char *sub_96864()
{
  return "multipleColumnMode";
}

id sub_96870@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "multipleColumnMode");
  *a2 = (_WORD)result;
  return result;
}

id sub_968A0(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, "setMultipleColumnMode:", *a1);
}

const char *sub_968B4()
{
  return "fontsByLanguage";
}

const char *sub_968C8()
{
  return "hasCustomLayout";
}

id sub_968D4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "hasCustomLayout");
  *a2 = (_BYTE)result;
  return result;
}

id sub_96904(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setHasCustomLayout:", *a1);
}

const char *sub_96918()
{
  return "identifier";
}

void sub_96928(uint64_t a1, void **a2)
{
  void *v2;
  id v3;

  v2 = *a2;
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setIdentifier:", v3);

}

const char *sub_96978()
{
  return "isFontBolded";
}

id sub_96984@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isFontBolded");
  *a2 = (_BYTE)result;
  return result;
}

id sub_969B4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setIsFontBolded:", *a1);
}

const char *sub_969C8()
{
  return "justify";
}

id sub_969D4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "justify");
  *a2 = (_BYTE)result;
  return result;
}

id sub_96A04(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setJustify:", *a1);
}

const char *sub_96A18()
{
  return "letterSpacing";
}

id sub_96A24@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "letterSpacing");
  *a2 = v4;
  return result;
}

id sub_96A54(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setLetterSpacing:", *a1);
}

const char *sub_96A68()
{
  return "lineHeight";
}

id sub_96A74@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "lineHeight");
  *a2 = v4;
  return result;
}

id sub_96AA4(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setLineHeight:", *a1);
}

const char *sub_96AB8()
{
  return "wordSpacing";
}

id sub_96AC4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "wordSpacing");
  *a2 = v4;
  return result;
}

id sub_96AF4(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setWordSpacing:", *a1);
}

const char *sub_96B08()
{
  return "marginAdjustment";
}

id sub_96B14@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "marginAdjustment");
  *a2 = v4;
  return result;
}

id sub_96B44(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setMarginAdjustment:", *a1);
}

uint64_t sub_96B58()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3B9100);
  sub_555F0(v0, (uint64_t)qword_3B9100);
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v1 = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD000000000000021, 0x80000000002C9460);
  return Logger.init(_:)(v1);
}

uint64_t sub_96BFC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2E87F0);
  v2 = swift_getKeyPath(&unk_2E8818);
  static Published.subscript.getter(&v4, v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

uint64_t sub_96C74(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_2E87F0);
  v4 = swift_getKeyPath(&unk_2E8818);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

void (*sub_96CE0(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2E87F0);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2E8818);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_3A1B8;
}

uint64_t sub_96D58(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet, v3, 33, 0);
  v1 = sub_319AC((uint64_t *)&unk_3B9170);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_96DBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v4 = sub_319AC(&qword_3B8318);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v8);
  v11 = &v17[-v10 - 8];
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12(&v17[-v10 - 8], a1, v4, v9);
  v13 = *a2;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v12)(v7, v11, v4);
  swift_beginAccess(v13 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet, v17, 33, 0);
  v14 = sub_319AC((uint64_t *)&unk_3B9170);
  Published.projectedValue.setter(v7, v14);
  swift_endAccess(v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t sub_96ECC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet, v3, 33, 0);
  v1 = sub_319AC((uint64_t *)&unk_3B9170);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_96F2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v11[24];

  v3 = sub_319AC(&qword_3B8318);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v4 + 16))(v7, a1, v3, v5);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet, v11, 33, 0);
  v8 = sub_319AC((uint64_t *)&unk_3B9170);
  Published.projectedValue.setter(v7, v8);
  swift_endAccess(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

void (*sub_97000(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3B8318);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC((uint64_t *)&unk_3B9170);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_3A5BC;
}

double sub_970C8()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_unknownObjectRetain(*(_QWORD *)(v0
                                                           + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager)).n128_u64[0];
  return result;
}

double StylesheetProvider.Layout.contentSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void StylesheetProvider.Layout.contentSize.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
}

uint64_t ContentLayoutProvider.bookType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t StylesheetProvider.Layout.useNewTextStyling.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

uint64_t (*StylesheetProvider.Layout.useNewTextStyling.modify())()
{
  return address(of:);
}

uint64_t StylesheetProvider.Layout.init(key:contentSize:useNewTextStyling:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(double *)(a4 + 24) = a6;
  *(_BYTE *)(a4 + 32) = a3;
  return result;
}

void sub_9711C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  char v5;
  char v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[2];
  __int128 v36;
  char v37;
  char v38;
  char v39;
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  char v48;
  char v49;
  char v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v2 = *a1;
  v3 = a1[1];
  v4 = *((_OWORD *)a1 + 1);
  v5 = *((_BYTE *)a1 + 32);
  v6 = *((_BYTE *)a1 + 40);
  v7 = *((_BYTE *)a1 + 41);
  v8 = *((_BYTE *)a1 + 42);
  v9 = *((_OWORD *)a1 + 3);
  v10 = *((_OWORD *)a1 + 4);
  v11 = *((_OWORD *)a1 + 5);
  v12 = a1[12];
  v13 = a1[13];
  v14 = v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 104) != v13)
  {
    v29 = a1[12];
    v30 = *((_BYTE *)a1 + 42);
    v31 = *((_OWORD *)a1 + 5);
    v32 = *((_OWORD *)a1 + 4);
    v33 = *((_OWORD *)a1 + 3);
    v34 = *((_OWORD *)a1 + 1);
    if (qword_3B5700 != -1)
      swift_once(&qword_3B5700, sub_96B58);
    v15 = type metadata accessor for Logger(0);
    sub_555F0(v15, (uint64_t)qword_3B9100);
    v16 = swift_retain(v1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v28 = v7;
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v19 = 134217984;
      v45 = *(_QWORD *)(v14 + 104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v19 + 4);
      swift_release();
      _os_log_impl(&dword_0, v17, v18, "got new filter mode: %lu", v19, 0xCu);
      v20 = v19;
      v7 = v28;
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_release();
    }

    v9 = v33;
    v4 = v34;
    v11 = v31;
    v10 = v32;
    v8 = v30;
    v12 = v29;
  }
  v45 = v2;
  v46 = v3;
  v47 = v4;
  v48 = v5;
  v49 = v6;
  v50 = v7;
  v51 = v8;
  v52 = v9;
  v53 = v10;
  v54 = v11;
  v55 = v12;
  v56 = v13;
  v21 = *(_QWORD *)(v14 + 8);
  v22 = *(_BYTE *)(v14 + 32);
  v23 = *(_BYTE *)(v14 + 40);
  v24 = *(_BYTE *)(v14 + 41);
  v25 = *(_BYTE *)(v14 + 42);
  v35[0] = *(_QWORD *)v14;
  v35[1] = v21;
  v36 = *(_OWORD *)(v14 + 16);
  v37 = v22;
  v38 = v23;
  v39 = v24;
  v40 = v25;
  v26 = *(_OWORD *)(v14 + 64);
  v41 = *(_OWORD *)(v14 + 48);
  v42 = v26;
  v27 = *(_OWORD *)(v14 + 96);
  v43 = *(_OWORD *)(v14 + 80);
  v44 = v27;
  if ((sub_99644((double *)&v45, (uint64_t)v35) & 1) == 0)
    sub_97974();
}

uint64_t StylesheetProvider.__allocating_init<A, B, C>(bookEntity:imageFilterMode:layoutProvider:styleManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v18;
  __n128 v19;

  swift_allocObject(v9, *(unsigned int *)(v9 + 48));
  v18 = sub_9A980(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_unknownObjectRelease(a4);
  v19 = swift_unknownObjectRelease(a3);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(a5 - 8) + 8))(a1, a5, v19);
  return v18;
}

uint64_t StylesheetProvider.init<A, B, C>(bookEntity:imageFilterMode:layoutProvider:styleManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  __n128 v14;

  v13 = sub_9A980(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_unknownObjectRelease(a3);
  v14 = swift_unknownObjectRelease(a4);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(a5 - 8) + 8))(a1, a5, v14);
  return v13;
}

__n128 sub_97488@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t (*v10)(uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  __n128 result;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __n128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v10 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a4 + 184);
  v11 = swift_unknownObjectRetain(a1);
  v12 = v10(a3, a4, v11);
  v14 = v13;
  v15 = (*(double (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  v17 = v16;
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 152))(a3, a4);
  v19 = swift_unknownObjectRelease(a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(a4 + 160))(&v27, a3, a4, v19);
  swift_unknownObjectRelease(a1);
  v20 = v27;
  v21 = BYTE1(v27);
  v22 = BYTE2(v27);
  v23 = v31;
  result = v28;
  v25 = v29;
  v26 = v30;
  *(_QWORD *)a5 = v12;
  *(_QWORD *)(a5 + 8) = v14;
  *(double *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 24) = v17;
  *(_BYTE *)(a5 + 32) = v18 & 1;
  *(_BYTE *)(a5 + 40) = v20;
  *(_BYTE *)(a5 + 41) = v21;
  *(_BYTE *)(a5 + 42) = v22;
  *(__n128 *)(a5 + 48) = result;
  *(_OWORD *)(a5 + 64) = v25;
  *(_OWORD *)(a5 + 80) = v26;
  *(_QWORD *)(a5 + 96) = v23;
  *(_QWORD *)(a5 + 104) = a2;
  return result;
}

double sub_9758C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  double result;
  uint64_t v32[2];
  __int128 v33;
  char v34;
  char v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;

  v6 = v3 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state;
  v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 104);
  swift_unknownObjectRetain(a1);
  sub_97488(v8, v7, a2, a3, (uint64_t)v42);
  v9 = v42[1];
  v10 = v44;
  v11 = v45;
  v12 = v46;
  v13 = v47;
  v14 = *(_QWORD *)v6;
  v15 = *(_QWORD *)(v6 + 8);
  v16 = *(_BYTE *)(v6 + 32);
  v17 = *(_BYTE *)(v6 + 40);
  v18 = *(_BYTE *)(v6 + 41);
  v19 = *(_BYTE *)(v6 + 42);
  *(_QWORD *)v6 = v42[0];
  *(_QWORD *)(v6 + 8) = v9;
  v20 = v43;
  *(_BYTE *)(v6 + 32) = v10;
  *(_BYTE *)(v6 + 40) = v11;
  *(_BYTE *)(v6 + 41) = v12;
  *(_BYTE *)(v6 + 42) = v13;
  v21 = v48;
  v22 = v49;
  v23 = v50;
  v24 = v51;
  v32[0] = v14;
  v32[1] = v15;
  v25 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)(v6 + 16) = v20;
  v33 = v25;
  v34 = v16;
  v35 = v17;
  v36 = v18;
  v37 = v19;
  v26 = *(_OWORD *)(v6 + 48);
  v27 = *(_OWORD *)(v6 + 64);
  v28 = *(_QWORD *)(v6 + 48);
  *(_OWORD *)(v6 + 48) = v21;
  *(_OWORD *)(v6 + 64) = v22;
  v38 = v26;
  v39 = v27;
  v29 = *(_OWORD *)(v6 + 80);
  v30 = *(_OWORD *)(v6 + 96);
  *(_OWORD *)(v6 + 80) = v23;
  *(_OWORD *)(v6 + 96) = v24;
  v40 = v29;
  v41 = v30;
  sub_9711C(v32);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v28).n128_u64[0];
  return result;
}

id sub_97684(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  id v12;
  uint64_t v14[2];
  __int128 v15;
  char v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = *((_QWORD *)a2 + 7);
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 104);
  v14[0] = *(_QWORD *)a1;
  v14[1] = v3;
  v15 = *(_OWORD *)(a1 + 16);
  v16 = v4;
  v17 = v5;
  v18 = v6;
  v19 = v7;
  v10 = *(_OWORD *)(a2 + 24);
  v20 = *(_OWORD *)(a2 + 8);
  v21 = v10;
  v22 = *(_OWORD *)(a2 + 40);
  v11 = v20;
  v23 = v8;
  v24 = v9;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v3);
  v12 = sub_9773C(v14);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v11);
  return v12;
}

id sub_9773C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  __int128 v21;
  __int128 v22;
  uint64_t KeyPath;
  id v24;
  void *v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  char v38;
  char v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = *((_BYTE *)a1 + 32);
  v7 = *((_BYTE *)a1 + 40);
  v8 = *((_BYTE *)a1 + 41);
  v9 = *((_BYTE *)a1 + 42);
  v10 = a1[6];
  v11 = a1[7];
  v13 = a1[8];
  v12 = a1[9];
  v14 = a1[10];
  v15 = a1[11];
  v16 = a1[12];
  v17 = a1[13];
  v46 = *a1;
  v47 = v2;
  v48 = v4;
  v49 = v5;
  v50 = v6;
  v51 = v7;
  v52 = v8;
  v53 = v9;
  v54 = v10;
  v55 = v11;
  v56 = v13;
  v57 = v12;
  v34 = v14;
  v35 = v12;
  v58 = v14;
  v59 = v15;
  v32 = v16;
  v33 = v15;
  v60 = v16;
  v61 = v17;
  v31 = v17;
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 8);
  LOBYTE(v16) = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 32);
  LOBYTE(v17) = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 40);
  v19 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 41);
  v20 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 42);
  v36[0] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state);
  v36[1] = v18;
  v37 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 16);
  v38 = v16;
  v39 = v17;
  v40 = v19;
  v41 = v20;
  v21 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 64);
  v42 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 48);
  v43 = v21;
  v22 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 96);
  v44 = *(_OWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 80);
  v45 = v22;
  if ((sub_99644((double *)&v46, (uint64_t)v36) & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_2E87F0);
    swift_getKeyPath(&unk_2E8818);
    static Published.subscript.getter(&v46, v1, KeyPath);
    swift_release();
    swift_release();
    return (id)v46;
  }
  else
  {
    v29 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book + 24);
    v30 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book + 32);
    v28 = sub_472D0((_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book), v29);
    sub_34450(0, (unint64_t *)&unk_3B91D8, &off_3764D8);
    v46 = v3;
    v47 = v2;
    v48 = v4;
    v49 = v5;
    v50 = v6;
    v51 = v7;
    v52 = v8;
    v53 = v9;
    v54 = v10;
    v55 = v11;
    v56 = v13;
    v57 = v35;
    v58 = v34;
    v59 = v33;
    v60 = v32;
    v61 = v31;
    v25 = *(void **)(v1 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager);
    swift_bridgeObjectRetain(v10);
    swift_unknownObjectRetain(v25);
    swift_bridgeObjectRetain(v2);
    v26 = sub_319AC((uint64_t *)&unk_3B9350);
    v24 = sub_9A150((uint64_t)v28, (uint64_t)&v46, v25, v29, v26, v30);
    swift_unknownObjectRelease(v25);
  }
  return v24;
}

uint64_t sub_97960()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 104);
}

void sub_97974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  id v19;
  __n128 v20;
  uint64_t KeyPath;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  char v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book + 24);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book + 32);
  v4 = sub_472D0((_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book), v2);
  v5 = sub_34450(0, (unint64_t *)&unk_3B91D8, &off_3764D8);
  v6 = *(_QWORD *)(v2 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v26 - v8;
  (*(void (**)(char *, _QWORD *, uint64_t, __n128))(v6 + 16))((char *)v26 - v8, v4, v2, v7);
  v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 8);
  v11 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 32);
  v12 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 40);
  v13 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 41);
  v14 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 42);
  v26[0] = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state);
  v26[1] = v10;
  v27 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 16);
  v28 = v11;
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v15 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 64);
  v32 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 48);
  v33 = v15;
  v16 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 96);
  v34 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 80);
  v35 = v16;
  v17 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager);
  swift_bridgeObjectRetain(v32);
  swift_unknownObjectRetain(v17);
  swift_bridgeObjectRetain(v10);
  v18 = sub_319AC((uint64_t *)&unk_3B9350);
  v19 = sub_9A150((uint64_t)v9, (uint64_t)v26, v17, v2, v18, v3);
  v20 = swift_unknownObjectRelease(v17);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v9, v2, v20);
  KeyPath = swift_getKeyPath(&unk_2E87F0);
  swift_getKeyPath(&unk_2E8818);
  static Published.subscript.getter(v26, v0, KeyPath);
  swift_release();
  swift_release();
  v22 = (void *)v26[0];
  v23 = static NSObject.== infix(_:_:)(v19, v26[0]);

  if ((v23 & 1) != 0)
  {

  }
  else
  {
    v24 = swift_getKeyPath(&unk_2E87F0);
    v25 = swift_getKeyPath(&unk_2E8818);
    v26[0] = v19;
    swift_retain(v1);
    static Published.subscript.setter(v26, v1, v24, v25);
  }
}

uint64_t StylesheetProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet;
  v2 = sub_319AC((uint64_t *)&unk_3B9170);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_34488((_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager));
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 8));
  swift_bridgeObjectRelease(v3);
  return v0;
}

uint64_t StylesheetProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet;
  v2 = sub_319AC((uint64_t *)&unk_3B9170);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_34488((_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager));
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 8));
  swift_bridgeObjectRelease(v3);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_97C9C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  int64_t v14;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[2];
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = objc_msgSend(a1, "fontFaceMappings");
  if (v1)
  {
    v2 = v1;
    v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    if (qword_3B5728 == -1)
      goto LABEL_3;
LABEL_29:
    swift_once(&qword_3B5728, sub_98154);
LABEL_3:
    v20 = qword_3B9158;
    v21 = unk_3B9160;
    v4 = v3 + 64;
    v5 = 1 << *(_BYTE *)(v3 + 32);
    v6 = -1;
    if (v5 < 64)
      v6 = ~(-1 << v5);
    v7 = v6 & *(_QWORD *)(v3 + 64);
    v8 = (unint64_t)(v5 + 63) >> 6;
    swift_bridgeObjectRetain(unk_3B9160);
    swift_bridgeObjectRetain(v3);
    v9 = 0;
    if (v7)
    {
LABEL_6:
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_20;
    }
    while (1)
    {
      if (__OFADD__(v9++, 1))
      {
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      if (v9 >= v8)
        goto LABEL_26;
      v13 = *(_QWORD *)(v4 + 8 * v9);
      if (!v13)
      {
        v14 = v9 + 1;
        if (v9 + 1 >= v8)
          goto LABEL_26;
        v13 = *(_QWORD *)(v4 + 8 * v14);
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v8)
            goto LABEL_26;
          v13 = *(_QWORD *)(v4 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v8)
              goto LABEL_26;
            v13 = *(_QWORD *)(v4 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v8)
              {
LABEL_26:
                swift_release();
                swift_bridgeObjectRelease(v3);
                return;
              }
              v13 = *(_QWORD *)(v4 + 8 * v14);
              if (!v13)
              {
                while (1)
                {
                  v9 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    goto LABEL_28;
                  if (v9 >= v8)
                    goto LABEL_26;
                  v13 = *(_QWORD *)(v4 + 8 * v9);
                  ++v14;
                  if (v13)
                    goto LABEL_19;
                }
              }
            }
          }
        }
        v9 = v14;
      }
LABEL_19:
      v7 = (v13 - 1) & v13;
      v11 = __clz(__rbit64(v13)) + (v9 << 6);
LABEL_20:
      sub_3F110(*(_QWORD *)(v3 + 48) + 40 * v11, (uint64_t)v17);
      sub_344A8(*(_QWORD *)(v3 + 56) + 32 * v11, (uint64_t)v18 + 8);
      v15[2] = v18[0];
      v15[3] = v18[1];
      v16 = v19;
      v15[0] = v17[0];
      v15[1] = v17[1];
      sub_99B74((uint64_t)&v20, (uint64_t)v15);
      sub_9B180((uint64_t)v15);
      if (v7)
        goto LABEL_6;
    }
  }
  __break(1u);
  swift_bridgeObjectRelease(v21);
  sub_9B180((uint64_t)v15);
  swift_release();
  __break(1u);
}

uint64_t sub_97F00(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  void *object;
  Swift::String v21;
  Swift::String v22;
  void *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = *((_BYTE *)a2 + 32);
  v11 = *((_BYTE *)a2 + 41);
  v28 = *((_BYTE *)a2 + 42);
  v29 = *((_BYTE *)a2 + 40);
  v12 = a2[7];
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[10];
  v16 = a2[11];
  v26 = a2[12];
  v27 = a2[6];
  v25 = a2[13];
  v36 = v6;
  v37 = v7;
  v33 = v6;
  v38 = v8;
  v39 = v9;
  v40 = v10;
  v41 = v29;
  v42 = v11;
  v43 = v28;
  v44 = v27;
  v45 = v12;
  v46 = v13;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  v50 = v26;
  v51 = v25;
  v52 = sub_9818C(a1, (uint64_t)&v36, a4, a6);
  v53 = v17;
  v18._countAndFlagsBits = 10;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v36 = v6;
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v40 = v10;
  v41 = v29;
  v42 = v11;
  v43 = v28;
  v44 = v27;
  v45 = v12;
  v46 = v13;
  v47 = v14;
  v48 = v15;
  v49 = v16;
  v50 = v26;
  v51 = v25;
  v19._countAndFlagsBits = sub_98750(a1, (uint64_t)&v36, a3, a4, a5, a6);
  object = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(object);
  v21._countAndFlagsBits = 10;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  v36 = v33;
  v37 = v7;
  v38 = v8;
  v39 = v9;
  v40 = v10;
  v22._countAndFlagsBits = sub_99F04((uint64_t)&v36);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  return v52;
}

uint64_t sub_98074()
{
  uint64_t result;
  uint64_t v1;

  result = sub_99854(0xD000000000000014, 0x80000000002C9520);
  qword_3B9118 = result;
  unk_3B9120 = v1;
  return result;
}

uint64_t sub_980AC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_99854(0xD00000000000001CLL, 0x80000000002C9440);
  qword_3B9128 = result;
  unk_3B9130 = v1;
  return result;
}

uint64_t sub_980E4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_99854(0xD00000000000001BLL, 0x80000000002C9420);
  qword_3B9138 = result;
  unk_3B9140 = v1;
  return result;
}

uint64_t sub_9811C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_99854(0xD000000000000018, 0x80000000002C9490);
  qword_3B9148 = result;
  unk_3B9150 = v1;
  return result;
}

uint64_t sub_98154()
{
  uint64_t result;
  uint64_t v1;

  result = sub_99854(0xD000000000000015, 0x80000000002C9500);
  qword_3B9158 = result;
  unk_3B9160 = v1;
  return result;
}

uint64_t sub_9818C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  Swift::String v28;
  Swift::String v29;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *(unsigned __int8 *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain(v5);
  BookThemeEntity.backgroundColor.getter();
  v7 = v6;
  v8 = sub_99078();
  v32 = v9;
  v33 = v8;

  BookThemeEntity.textColor.getter();
  v11 = v10;
  v29._countAndFlagsBits = sub_99078();
  v29._object = v12;

  BookThemeEntity.linkColor.getter();
  v14 = v13;
  v28._countAndFlagsBits = sub_99078();
  v28._object = v15;

  if ((BookThemeEntity.hasDarkBackground.getter() & 1) != 0)
  {
    if (qword_3B5718 != -1)
      swift_once(&qword_3B5718, sub_980E4);
    v16 = &qword_3B9138;
  }
  else
  {
    if (qword_3B5710 != -1)
      swift_once(&qword_3B5710, sub_980AC);
    v16 = &qword_3B9128;
  }
  v34 = *v16;
  swift_bridgeObjectRetain(v16[1]);
  _StringGuts.grow(_:)(122);
  v17._countAndFlagsBits = 0xD00000000000001ALL;
  v17._object = (void *)0x80000000002C9350;
  String.append(_:)(v17);
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v28._object);
  v18._countAndFlagsBits = 0xD000000000000014;
  v18._object = (void *)0x80000000002C9370;
  String.append(_:)(v18);
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v29._object);
  v19._countAndFlagsBits = 0xD000000000000043;
  v19._object = (void *)0x80000000002C9390;
  String.append(_:)(v19);
  v20._countAndFlagsBits = v33;
  v20._object = v32;
  String.append(_:)(v20);
  v21._countAndFlagsBits = 8194619;
  v21._object = (void *)0xE300000000000000;
  String.append(_:)(v21);
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.append(_:)(v22);
  v23 = swift_bridgeObjectRelease(0xE000000000000000);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a4 + 184))(a3, a4, v23);
  if (v25)
  {
    v26 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0)
      v26 = v24 & 0xFFFFFFFFFFFFLL;
    if (v26)
    {
      (*(void (**)(uint64_t, uint64_t))(a4 + 168))(a3, a4);
      swift_bridgeObjectRelease(v5);
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease(v25);
  }
  swift_bridgeObjectRelease(v32);
  swift_bridgeObjectRelease(v5);
  return v34;
}

uint64_t sub_98750(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  double v15;
  unsigned int v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  double v24;
  _BOOL4 v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  int v36;
  double v37;
  double v38;
  void *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  __n128 v64;
  _BOOL4 v65;
  int v66;
  uint64_t v67;
  void *v68;
  _BOOL4 v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  void *object;
  Swift::String v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  Swift::String v91;
  int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  Swift::String v96;
  const char *v98;
  const char *v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  Swift::String v103;
  int v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  id v109;
  unsigned int v110;

  v8 = *(unsigned __int8 *)(a2 + 32);
  v9 = *(char *)(a2 + 40);
  v10 = *(unsigned __int8 *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 56);
  v105 = *(_QWORD *)(a2 + 88);
  v13 = *(double *)(a2 + 64);
  v14 = *(double *)(a2 + 72);
  v15 = *(double *)(a2 + 80);
  swift_bridgeObjectRetain(v11);
  v109 = a3;
  v16 = objc_msgSend(a3, "languageIsSimplifiedChinese");
  v17 = "'Songti TC', 'Songti SC'";
  if (v16)
    v17 = "'Songti SC', 'Songti TC'";
  v18 = v17 - 32;
  v106 = v12;
  v19 = (v12 >> 8) & 1;
  v110 = v10;
  v104 = v19;
  if (v8 == 1)
  {
    v98 = v17 - 32;
    v20 = sub_319AC(&qword_3B66F8);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_2E5F80;
    v22 = v10 != 0;
    if (v11)
      v22 = v19;
    v23 = !v22;
    if (v22)
      v24 = v13;
    else
      v24 = 0.0;
    if (!v11 && v10)
      v24 = dbl_2E8928[(char)(v10 - 1)];
    *(_QWORD *)(v21 + 56) = &type metadata for Double;
    *(_QWORD *)(v21 + 64) = &protocol witness table for Double;
    *(double *)(v21 + 32) = v24;
    v103._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v21);
    v103._object = v34;
    v35 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_2E5F80;
    if (v11)
      v36 = v23;
    else
      v36 = 1;
    v37 = v15 * 100.0;
    if (v36)
      v37 = 0.0;
    *(_QWORD *)(v35 + 56) = &type metadata for Double;
    *(_QWORD *)(v35 + 64) = &protocol witness table for Double;
    *(double *)(v35 + 32) = v37;
    if (v36)
      v38 = 0.0;
    else
      v38 = v14 * 100.0;
    v101._countAndFlagsBits = String.init(format:_:)(0x252566322E25, 0xE600000000000000, v35);
    v101._object = v39;
    v40 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v40 + 16) = xmmword_2E5F80;
    *(_QWORD *)(v40 + 56) = &type metadata for Double;
    *(_QWORD *)(v40 + 64) = &protocol witness table for Double;
    *(double *)(v40 + 32) = v38;
    v100 = String.init(format:_:)(0x252566322E25, 0xE600000000000000, v40);
    v33 = v41;
    v18 = v98;
  }
  else
  {
    if (v11)
      v25 = v19;
    else
      v25 = v10 != 0;
    v26 = v13 == 0.0 && v11 != 0;
    v27 = 0xE600000000000000;
    v28 = 0x6C616D726F6ELL;
    if (v25 && !v26)
    {
      v99 = v18;
      v29 = sub_319AC(&qword_3B66F8);
      v30 = swift_allocObject(v29, 72, 7);
      *(_OWORD *)(v30 + 16) = xmmword_2E5F80;
      if (!v11)
        v13 = dbl_2E8950[v9];
      *(_QWORD *)(v30 + 56) = &type metadata for Double;
      *(_QWORD *)(v30 + 64) = &protocol witness table for Double;
      *(double *)(v30 + 32) = v13;
      v28 = String.init(format:_:)(1714564645, 0xE400000000000000, v30);
      v27 = v31;
      v18 = v99;
    }
    v103._countAndFlagsBits = v28;
    v103._object = (void *)v27;
    if (v25)
    {
      if (!v11)
      {
        v33 = (void *)0xE600000000000000;
        v100 = 0x6C616D726F6ELL;
        v101._countAndFlagsBits = 0x6C616D726F6ELL;
        v101._object = (void *)0xE600000000000000;
        goto LABEL_46;
      }
      if (v15 == 0.0)
      {
        v101._object = (void *)0xE600000000000000;
        v32 = 0x6C616D726F6ELL;
      }
      else
      {
        v42 = v18;
        v43 = sub_319AC(&qword_3B66F8);
        v44 = swift_allocObject(v43, 72, 7);
        *(_OWORD *)(v44 + 16) = xmmword_2E5F80;
        v45 = v15 * 100.0;
        if ((v106 & 0x100) == 0)
          v45 = 0.0;
        *(_QWORD *)(v44 + 56) = &type metadata for Double;
        *(_QWORD *)(v44 + 64) = &protocol witness table for Double;
        *(double *)(v44 + 32) = v45;
        v32 = String.init(format:_:)(0x252566322E25, 0xE600000000000000, v44);
        v18 = v42;
        v101._object = v46;
      }
    }
    else
    {
      v101._object = (void *)0xE600000000000000;
      v32 = 0x6C616D726F6ELL;
      if (!v11)
      {
        v100 = 0x6C616D726F6ELL;
        v33 = (void *)0xE600000000000000;
        v101._countAndFlagsBits = 0x6C616D726F6ELL;
        goto LABEL_46;
      }
    }
    v33 = (void *)0xE600000000000000;
    v101._countAndFlagsBits = v32;
    if ((v106 & 0x100) == 0 || v14 == 0.0)
    {
      v100 = 0x6C616D726F6ELL;
    }
    else
    {
      v47 = v18;
      v48 = sub_319AC(&qword_3B66F8);
      v49 = swift_allocObject(v48, 72, 7);
      *(_OWORD *)(v49 + 16) = xmmword_2E5F80;
      *(_QWORD *)(v49 + 56) = &type metadata for Double;
      *(_QWORD *)(v49 + 64) = &protocol witness table for Double;
      *(double *)(v49 + 32) = v14 * 100.0;
      v50 = String.init(format:_:)(0x252566322E25, 0xE600000000000000, v49);
      v18 = v47;
      v100 = v50;
      v33 = v51;
    }
  }
LABEL_46:
  v52 = (void *)((unint64_t)v18 | 0x8000000000000000);
  v53 = BookThemeEntity.fontFamily.getter();
  v55 = v54;
  v102 = sub_99208(v53, v54, v109);
  v57 = v56;
  swift_bridgeObjectRelease(v55);
  v58 = sub_6EF84();
  v60 = v59;
  v61 = HIBYTE(v59) & 0xF;
  if ((v59 & 0x2000000000000000) == 0)
    v61 = v58 & 0xFFFFFFFFFFFFLL;
  if (!v61)
  {
    swift_bridgeObjectRelease(v59);
    v60 = 0xE800000000000000;
    v58 = 0x66697265732D6975;
  }
  v107 = sub_99208(v58, v60, v109);
  v63 = v62;
  v64 = swift_bridgeObjectRelease(v60);
  v65 = ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(a6 + 136))(a4, a6, v64) & 1) == 0;
  v66 = ((*(uint64_t (**)(uint64_t, uint64_t))(a6 + 128))(a4, a6) & 1) == 0 || v65;
  if (v66)
    v67 = 1952867692;
  else
    v67 = 0x7468676972;
  if (v66)
    v68 = (void *)0xE400000000000000;
  else
    v68 = (void *)0xE500000000000000;
  v69 = v110 != 0;
  if (v11)
    v69 = v104;
  if (v69)
  {
    if (v11)
    {
      if ((v105 & 1) == 0)
        goto LABEL_67;
    }
    else if (v110 <= 4 && v110 != 1)
    {
      goto LABEL_67;
    }
    swift_bridgeObjectRelease(v68);
    v68 = (void *)0xE700000000000000;
    v67 = 0x7966697473756ALL;
  }
LABEL_67:
  _StringGuts.grow(_:)(276);
  v70._countAndFlagsBits = 0xD00000000000001DLL;
  v70._object = (void *)0x80000000002C91E0;
  String.append(_:)(v70);
  v71._countAndFlagsBits = v67;
  v71._object = v68;
  String.append(_:)(v71);
  swift_bridgeObjectRelease(v68);
  v72._object = (void *)0x80000000002C9200;
  v72._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v72);
  String.append(_:)(v103);
  swift_bridgeObjectRelease(v103._object);
  v73._countAndFlagsBits = 0xD000000000000019;
  v73._object = (void *)0x80000000002C9220;
  String.append(_:)(v73);
  String.append(_:)(v101);
  swift_bridgeObjectRelease(v101._object);
  v74._countAndFlagsBits = 0xD00000000000001BLL;
  v74._object = (void *)0x80000000002C9240;
  String.append(_:)(v74);
  v75._countAndFlagsBits = v100;
  v75._object = v33;
  String.append(_:)(v75);
  swift_bridgeObjectRelease(v33);
  v76._object = (void *)0x80000000002C9260;
  v76._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v76);
  v77._countAndFlagsBits = v102;
  v77._object = v57;
  String.append(_:)(v77);
  swift_bridgeObjectRelease(v57);
  v78._countAndFlagsBits = 0xD000000000000021;
  v78._object = (void *)0x80000000002C9280;
  String.append(_:)(v78);
  v79._countAndFlagsBits = v107;
  v79._object = v63;
  String.append(_:)(v79);
  swift_bridgeObjectRelease(v63);
  v80._countAndFlagsBits = 0xD00000000000001ALL;
  v80._object = (void *)0x80000000002C92B0;
  String.append(_:)(v80);
  v81._countAndFlagsBits = 0xD000000000000018;
  v81._object = v52;
  String.append(_:)(v81);
  swift_bridgeObjectRelease(v52);
  v82._countAndFlagsBits = 0xD000000000000014;
  v82._object = (void *)0x80000000002C92D0;
  String.append(_:)(v82);
  v83._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 192))(a4, a6);
  object = v83._object;
  String.append(_:)(v83);
  swift_bridgeObjectRelease(object);
  v85._countAndFlagsBits = 0xD000000000000015;
  v85._object = (void *)0x80000000002C92F0;
  String.append(_:)(v85);
  v86 = objc_msgSend(v109, "autoHyphenation");
  v87 = v86 == 0;
  if (v86)
    v88 = 1869903201;
  else
    v88 = 0x6C61756E616DLL;
  if (v87)
    v89 = 0xE600000000000000;
  else
    v89 = 0xE400000000000000;
  v90 = v89;
  String.append(_:)(*(Swift::String *)&v88);
  swift_bridgeObjectRelease(v89);
  v91._object = (void *)0x80000000002C9310;
  v91._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v91);
  if (v11)
  {
    v92 = v106 & 1;
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    swift_bridgeObjectRelease(0);
    v92 = v110 == 3;
  }
  if (v92)
    v93 = 1684828002;
  else
    v93 = 0x6C616D726F6ELL;
  if (v92)
    v94 = 0xE400000000000000;
  else
    v94 = 0xE600000000000000;
  v95 = v94;
  String.append(_:)(*(Swift::String *)&v93);
  swift_bridgeObjectRelease(v94);
  v96._countAndFlagsBits = 8194619;
  v96._object = (void *)0xE300000000000000;
  String.append(_:)(v96);
  return 0;
}

uint64_t sub_99078()
{
  void *v0;
  double v1;
  double v2;
  double v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  uint64_t v17;
  double v18;
  double v19;
  double v20;

  v19 = 0.0;
  v20 = 0.0;
  v17 = 0;
  v18 = 0.0;
  objc_msgSend(v0, "getRed:green:blue:alpha:", &v20, &v19, &v18, &v17);
  v1 = round(v20 * 100.0 * 1000.0) / 1000.0;
  v2 = round(v19 * 100.0 * 1000.0) / 1000.0;
  v3 = round(v18 * 100.0 * 1000.0) / 1000.0;
  _StringGuts.grow(_:)(19);
  v4 = swift_bridgeObjectRelease(0xE000000000000000);
  v5._countAndFlagsBits = Double.description.getter(v4, v1);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 11301;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v9._countAndFlagsBits = Double.description.getter(v8, v2);
  v10 = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = 11301;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  v13._countAndFlagsBits = Double.description.getter(v12, v3);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 691088421;
  v15._object = (void *)0xE400000000000000;
  String.append(_:)(v15);
  return 0x2861626772;
}

uint64_t sub_99208(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  NSString v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  int64_t v15;
  void **v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;

  v49 = a1;
  v50 = a2;
  v47 = (_QWORD *)&stru_20;
  v48 = 0xE100000000000000;
  v45 = 95;
  v46 = 0xE100000000000000;
  v4 = sub_5C170();
  v5 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v47, &v45, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
  v7 = v6;
  v49 = v5;
  v50 = v6;
  v47 = (_QWORD *)(&stru_20 + 14);
  v48 = 0xE100000000000000;
  v45 = 95;
  v46 = 0xE100000000000000;
  v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v47, &v45, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v4, v4, v4);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(a3, "fallbackFontFamiliesForFontFamily:", v11);

  v13 = _swiftEmptyArrayStorage;
  if (v12)
  {
    v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for String);

    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v44 = v10;
      v47 = _swiftEmptyArrayStorage;
      sub_F508C(0, v15, 0);
      v13 = v47;
      v43 = v14;
      v16 = (void **)(v14 + 40);
      do
      {
        v17 = (uint64_t)*(v16 - 1);
        v18 = *v16;
        v49 = 39;
        v50 = 0xE100000000000000;
        swift_bridgeObjectRetain(v18);
        v19._countAndFlagsBits = v17;
        v19._object = v18;
        String.append(_:)(v19);
        v20._countAndFlagsBits = 39;
        v20._object = (void *)0xE100000000000000;
        String.append(_:)(v20);
        swift_bridgeObjectRelease(v18);
        v22 = v49;
        v21 = v50;
        v47 = v13;
        v24 = v13[2];
        v23 = v13[3];
        if (v24 >= v23 >> 1)
        {
          sub_F508C(v23 > 1, v24 + 1, 1);
          v13 = v47;
        }
        v16 += 2;
        v13[2] = v24 + 1;
        v25 = &v13[2 * v24];
        v25[4] = v22;
        v25[5] = v21;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease(v43);
      v10 = v44;
    }
    else
    {
      swift_bridgeObjectRelease(v14);
    }
  }
  v26 = sub_319AC(&qword_3BBEB0);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_2E5F80;
  v49 = 0x5F736B6F6F4269;
  v50 = 0xE700000000000000;
  v28._countAndFlagsBits = v8;
  v28._object = v10;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v10);
  v29 = v50;
  *(_QWORD *)(v27 + 32) = v49;
  *(_QWORD *)(v27 + 40) = v29;
  v49 = v27;
  sub_666B8((uint64_t)v13);
  v30 = v49;
  v31 = sub_319AC((uint64_t *)&unk_3B8C90);
  v32 = sub_41BF4();
  v33 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v31, v32);
  v35 = v34;
  swift_bridgeObjectRelease(v30);
  if (qword_3B56E8 != -1)
    swift_once(&qword_3B56E8, sub_72938);
  v36 = type metadata accessor for Logger(0);
  sub_555F0(v36, (uint64_t)qword_3CEF38);
  v37 = swift_bridgeObjectRetain_n(v35, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v49 = v41;
    *(_DWORD *)v40 = 136315138;
    swift_bridgeObjectRetain(v35);
    v47 = (_QWORD *)sub_33524(v33, v35, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40 + 4);
    swift_bridgeObjectRelease_n(v35, 3);
    _os_log_impl(&dword_0, v38, v39, "Theme using font %s", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v35, 2);
  }
  return v33;
}

uint64_t sub_99644(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  int v8;
  char v9;
  char v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  int v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  char v30;
  char v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[8];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[8];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v7 = a1[2];
  v6 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *((_BYTE *)a1 + 40);
  v10 = *((_BYTE *)a1 + 41);
  v11 = *((_BYTE *)a1 + 42);
  v12 = *((_OWORD *)a1 + 3);
  v13 = *((_OWORD *)a1 + 4);
  v14 = *((_OWORD *)a1 + 5);
  v15 = *((_QWORD *)a1 + 12);
  v16 = *((_QWORD *)a1 + 13);
  v17 = *(_QWORD *)(a2 + 8);
  v19 = *(double *)(a2 + 16);
  v18 = *(double *)(a2 + 24);
  v20 = *(unsigned __int8 *)(a2 + 32);
  v21 = *(_BYTE *)(a2 + 40);
  v22 = *(_BYTE *)(a2 + 41);
  v23 = *(_BYTE *)(a2 + 42);
  v24 = *(_OWORD *)(a2 + 48);
  v25 = *(_OWORD *)(a2 + 64);
  v26 = *(_OWORD *)(a2 + 80);
  v28 = *(_QWORD *)(a2 + 96);
  v27 = *(_QWORD *)(a2 + 104);
  if (*(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v17)
  {
    result = 0;
    if (v7 != v19 || v6 != v18 || ((v8 ^ v20) & 1) != 0)
      return result;
LABEL_11:
    v44[0] = v9;
    v44[1] = v10;
    v44[2] = v11;
    v45 = v12;
    v46 = v13;
    v47 = v14;
    v48 = v15;
    v39[0] = v21;
    v39[1] = v22;
    v39[2] = v23;
    v40 = v24;
    v41 = v25;
    v42 = v26;
    v43 = v28;
    return _s8BookEPUB0A11ThemeEntityV2eeoiySbAC_ACtFZ_0((uint64_t)v44, (uint64_t)v39) & (v16 == v27);
  }
  v31 = *(_BYTE *)(a2 + 40);
  v32 = *(_OWORD *)(a2 + 80);
  v33 = *(_OWORD *)(a2 + 64);
  v34 = *(_OWORD *)(a2 + 48);
  v35 = v15;
  v36 = v14;
  v37 = v13;
  v38 = v12;
  v30 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v17, 0);
  result = 0;
  if ((v30 & 1) != 0 && v7 == v19 && v6 == v18)
  {
    v13 = v37;
    v12 = v38;
    v14 = v36;
    v15 = v35;
    v25 = v33;
    v24 = v34;
    v26 = v32;
    v21 = v31;
    if (((v8 ^ v20) & 1) == 0)
      goto LABEL_11;
  }
  return result;
}

uint64_t _s8BookEPUB18StylesheetProviderC6LayoutV2eeoiySbAE_AEtFZ_0(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  int v12;
  char v14;
  uint64_t result;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v7 = a1[2];
  v6 = a1[3];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = *(_QWORD *)(a2 + 8);
  v11 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 24);
  v12 = *(unsigned __int8 *)(a2 + 32);
  if (*(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v9)
  {
    if (v7 != v11 || v6 != v10)
      return 0;
    return v8 ^ v12 ^ 1u;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v9, 0);
  result = 0;
  if ((v14 & 1) != 0 && v7 == v11 && v6 == v10)
    return v8 ^ v12 ^ 1u;
  return result;
}

uint64_t sub_99854(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSString v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = BookEPUBBundle();
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "pathForResource:ofType:", v9, v10);

  if (v11)
  {
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v21 = String.init(contentsOfFile:)(v12, v14);
    v23 = v22;
    v24 = swift_bridgeObjectRelease(v14);
    v31 = v21;
    v32 = v23;
    static CharacterSet.newlines.getter(v24);
    v25 = sub_5C170();
    v26 = StringProtocol.components(separatedBy:)(v7, &type metadata for String, v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRelease(v32);
    v31 = v26;
    v27 = sub_319AC((uint64_t *)&unk_3B8C90);
    v28 = sub_41BF4();
    v29 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v27, v28);
    swift_bridgeObjectRelease(v26);
  }
  else
  {
    if (qword_3B56E8 != -1)
      swift_once(&qword_3B56E8, sub_72938);
    v15 = type metadata accessor for Logger(0);
    sub_555F0(v15, (uint64_t)qword_3CEF38);
    v16 = swift_bridgeObjectRetain_n(a2, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v31 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain(a2);
      v33 = sub_33524(a1, a2, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl(&dword_0, v17, v18, "Did not load %s.css from bundle", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return 0;
  }
  return v29;
}

void sub_99B74(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  _UNKNOWN **v10;
  uint64_t v11;
  void *object;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  void *v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40[2];
  _QWORD v41[5];
  uint64_t v42;

  v3 = a2 + 40;
  sub_3F110(a2, (uint64_t)v40);
  sub_344A8(v3, (uint64_t)v41);
  if ((swift_dynamicCast(&v38, v40, &type metadata for AnyHashable, &type metadata for String, 6) & 1) != 0)
  {
    v4 = v39;
    v32 = v38;
    sub_34488(v41);
    sub_3F110(a2, (uint64_t)v40);
    sub_344A8(v3, (uint64_t)v41);
    v5 = sub_319AC(&qword_3B9398);
    if ((swift_dynamicCast(&v38, v41, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
    {
      v6 = v38;
      sub_3F14C((uint64_t)v40);
      v7 = 0;
      v8 = 0;
      v31 = v6;
      do
      {
        v9 = v7;
        if (*(_QWORD *)(v6 + 16))
        {
          v10 = &off_378E10 + 2 * v8;
          v11 = (uint64_t)v10[4];
          object = v10[5];
          swift_bridgeObjectRetain(object);
          v13 = sub_3B8A0(v11, (uint64_t)object);
          if ((v14 & 1) != 0)
          {
            v15 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v13);
            v16 = (void *)v15[1];
            v42 = *v15;
            v33 = v16;
            v40[0]._countAndFlagsBits = 0;
            v40[0]._object = (void *)0xE000000000000000;
            swift_bridgeObjectRetain(v16);
            _StringGuts.grow(_:)(76);
            v17._countAndFlagsBits = 0xD000000000000022;
            v17._object = (void *)0x80000000002C94B0;
            String.append(_:)(v17);
            v38 = v32;
            v39 = v4;
            v36 = 32;
            v37 = 0xE100000000000000;
            v34 = 95;
            v35 = 0xE100000000000000;
            v18 = sub_5C170();
            v19 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v36, &v34, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v18, v18, v18);
            v21 = v20;
            v38 = v19;
            v39 = v20;
            v36 = 46;
            v37 = 0xE100000000000000;
            v34 = 95;
            v35 = 0xE100000000000000;
            v22 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v36, &v34, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v18, v18, v18);
            v24 = v23;
            swift_bridgeObjectRelease(v21);
            v25._countAndFlagsBits = v22;
            v25._object = v24;
            String.append(_:)(v25);
            v6 = v31;
            swift_bridgeObjectRelease(v24);
            v26._countAndFlagsBits = 0x203A6372730A3B27;
            v26._object = (void *)0xEF27286C61636F6CLL;
            String.append(_:)(v26);
            v27._countAndFlagsBits = v42;
            v27._object = v33;
            String.append(_:)(v27);
            swift_bridgeObjectRelease(v33);
            v28._countAndFlagsBits = 0xD000000000000011;
            v28._object = (void *)0x80000000002C94E0;
            String.append(_:)(v28);
            v29._countAndFlagsBits = v11;
            v29._object = object;
            String.append(_:)(v29);
            swift_bridgeObjectRelease(object);
            v30._countAndFlagsBits = 175966779;
            v30._object = (void *)0xE400000000000000;
            String.append(_:)(v30);
            object = v40[0]._object;
            String.append(_:)(v40[0]);
          }
          swift_bridgeObjectRelease(object);
        }
        v7 = 1;
        v8 = 1;
      }
      while ((v9 & 1) == 0);
      swift_arrayDestroy("normal", 2, &type metadata for String);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v4);
    }
    else
    {
      swift_bridgeObjectRelease(v4);
      sub_3F14C((uint64_t)v40);
    }
  }
  else
  {
    sub_34488(v41);
  }
}

uint64_t sub_99F04(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  id v4;
  id v5;
  void *v6;
  char *v7;
  double v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  void *object;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;
  Swift::String v21;
  void *v22;
  Swift::String v23;

  v1 = 0x2030207870303232;
  v3 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  v4 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v5 = objc_msgSend(v4, "userInterfaceIdiom");
  if (objc_msgSend(v4, "orientation") == (char *)&dword_0 + 1)
  {
    if (v5)
    {
      v6 = (void *)0xEF30207870303031;
LABEL_10:
      v8 = v3;
      goto LABEL_11;
    }
LABEL_9:
    v1 = 0x2030207870303031;
    v6 = (void *)0xEE00302078703035;
    goto LABEL_10;
  }
  v7 = (char *)objc_msgSend(v4, "orientation");
  if (!v5)
    goto LABEL_9;
  if (v7 == (_BYTE *)&dword_0 + 2)
    v8 = v3;
  else
    v8 = v3 * 1.4;
  v6 = (void *)0xEF30207870303031;
LABEL_11:
  _StringGuts.grow(_:)(82);
  v9._countAndFlagsBits = 0xD000000000000016;
  v9._object = (void *)0x80000000002C9180;
  String.append(_:)(v9);
  v11._countAndFlagsBits = Double.description.getter(v10, v3 + -10.0);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._object = (void *)0x80000000002C91A0;
  v13._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  v15._countAndFlagsBits = Double.description.getter(v14, v2 + -10.0);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._countAndFlagsBits = 0x616D2D2D0A3B7870;
  v17._object = (void *)0xEE00203A6E696772;
  String.append(_:)(v17);
  v18._countAndFlagsBits = v1;
  v18._object = v6;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v6);
  v19._countAndFlagsBits = 0x632D64742D2D0A3BLL;
  v19._object = (void *)0xEE00203A706D616CLL;
  String.append(_:)(v19);
  v21._countAndFlagsBits = Double.description.getter(v20, v8);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v23._countAndFlagsBits = 0x7D0A3B7870;
  v23._object = (void *)0xE500000000000000;
  String.append(_:)(v23);

  return 0;
}

id sub_9A150(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t inited;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  Class isa;
  Class v50;
  Class v51;
  Class v52;
  id v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[128];
  uint64_t v71[4];
  char v72;
  char v73;
  char v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v9 = *(_QWORD *)(a2 + 8);
  v65 = *(_QWORD *)a2;
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v61 = *(_BYTE *)(a2 + 32);
  v62 = *(unsigned __int8 *)(a2 + 40);
  v63 = *(_BYTE *)(a2 + 42);
  v64 = *(_BYTE *)(a2 + 41);
  v12 = *(_QWORD *)(a2 + 48);
  v59 = *(_QWORD *)(a2 + 64);
  v60 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 80);
  v58 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 88);
  v15 = *(_QWORD *)(a2 + 96);
  v16 = *(_QWORD *)(a2 + 104);
  v17 = *(unsigned __int8 (**)(uint64_t, uint64_t))(a6 + 104);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v9);
  if (v17(a4, a6))
  {
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease_n(v9, 2);
    v18 = _swiftEmptyArrayStorage;
    v19 = sub_37F24((uint64_t)_swiftEmptyArrayStorage);
    v20 = _swiftEmptyArrayStorage;
    v21 = v68;
  }
  else
  {
    v55 = v16;
    v56 = v13;
    v57 = a1;
    v22 = sub_319AC(&qword_3BBEB0);
    v20 = (_QWORD *)swift_allocObject(v22, 80, 7);
    *((_OWORD *)v20 + 1) = xmmword_2E6940;
    if (qword_3B5708 != -1)
      swift_once(&qword_3B5708, sub_98074);
    v23 = unk_3B9120;
    v20[4] = qword_3B9118;
    v20[5] = v23;
    swift_bridgeObjectRetain(v23);
    sub_97C9C(a3);
    v20[6] = v24;
    v20[7] = v25;
    if (qword_3B5720 != -1)
      swift_once(&qword_3B5720, sub_9811C);
    v26 = unk_3B9150;
    v20[8] = qword_3B9148;
    v20[9] = v26;
    v27 = qword_3B5700;
    swift_bridgeObjectRetain(v26);
    if (v27 != -1)
      swift_once(&qword_3B5700, sub_96B58);
    v28 = type metadata accessor for Logger(0);
    sub_555F0(v28, (uint64_t)qword_3B9100);
    swift_bridgeObjectRetain_n(v12, 3);
    v29 = swift_bridgeObjectRetain(v9);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(32, -1);
      v71[0] = swift_slowAlloc(96, -1);
      *(_DWORD *)v32 = 136315650;
      swift_bridgeObjectRetain(v9);
      v69 = sub_33524(v65, v9, v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70, v32 + 4);
      swift_bridgeObjectRelease_n(v9, 3);
      *(_WORD *)(v32 + 12) = 2080;
      __asm { BR              X9 }
    }

    swift_bridgeObjectRelease_n(v12, 4);
    swift_bridgeObjectRelease_n(v9, 2);
    v18 = (_QWORD *)swift_allocObject(v22, 48, 7);
    *((_OWORD *)v18 + 1) = xmmword_2E5F80;
    v71[0] = v65;
    v71[1] = v9;
    v71[2] = v10;
    v71[3] = v11;
    v72 = v61;
    v73 = v62;
    v74 = v64;
    v75 = v63;
    v76 = v12;
    v77 = v60;
    v78 = v59;
    v79 = v58;
    v80 = v56;
    v81 = v14;
    v82 = v15;
    v83 = v55;
    v33 = sub_97F00(v57, v71, a3, a4, a5, a6);
    v35 = v34;
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v9);
    v18[4] = v33;
    v18[5] = v35;
    v36 = sub_319AC((uint64_t *)&unk_3B9360);
    inited = swift_initStackObject(v36, v70);
    *(_OWORD *)(inited + 16) = xmmword_2E5F70;
    *(_QWORD *)(inited + 32) = 0xD00000000000001CLL;
    *(_QWORD *)(inited + 40) = 0x80000000002C9140;
    sub_18308C((char *)v71);
    v38 = BookFontTable.rawValue.getter();
    v40 = v39;
    if (v38 == 24938 && v39 == 0xE200000000000000)
    {
      swift_bridgeObjectRelease(0xE200000000000000);
      v41 = 0xE400000000000000;
      v42 = 1702195828;
    }
    else
    {
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, 24938, 0xE200000000000000, 0);
      swift_bridgeObjectRelease(v40);
      if ((v43 & 1) != 0)
        v42 = 1702195828;
      else
        v42 = 0x65736C6166;
      v41 = 0xE500000000000000;
      if ((v43 & 1) != 0)
        v41 = 0xE400000000000000;
    }
    *(_QWORD *)(inited + 48) = v42;
    *(_QWORD *)(inited + 56) = v41;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = 0xD00000000000001BLL;
    *(_QWORD *)(inited + 88) = 0x80000000002C9160;
    sub_18308C((char *)v71);
    v44 = LOBYTE(v71[0]) - 23;
    v45 = v44 >= 3;
    if (v44 >= 3)
      v46 = 0x65736C6166;
    else
      v46 = 1702195828;
    v47 = 0xE500000000000000;
    *(_QWORD *)(inited + 120) = &type metadata for String;
    if (!v45)
      v47 = 0xE400000000000000;
    *(_QWORD *)(inited + 96) = v46;
    *(_QWORD *)(inited + 104) = v47;
    v19 = sub_37F24(inited);
    v21 = v68;
  }
  v48 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v21));
  isa = Array._bridgeToObjectiveC()().super.isa;
  v50 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  v51 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  v52 = Dictionary._bridgeToObjectiveC()().super.isa;
  v53 = objc_msgSend(v48, "initWithMainframeOnlyStylesheets:allFrameStylesheets:variableStylesheets:documentAttributes:", isa, v50, v51, v52, swift_bridgeObjectRelease(v19).n128_f64[0]);

  return v53;
}

id sub_9A8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  uint64_t v12[2];
  __int128 v13;
  char v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  char v26;
  char v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v6 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state + 104);
  swift_unknownObjectRetain(a1);
  sub_97488(v7, v6, a2, a3, (uint64_t)&v22);
  v8 = v23;
  v12[0] = v22;
  v12[1] = v23;
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = v28;
  v11 = v29;
  v18 = v29;
  v19 = v30;
  v20 = v31;
  v21 = v32;
  v9 = sub_9773C(v12);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v11);
  return v9;
}

uint64_t sub_9A980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  __int128 v37;
  char v38;
  char v39;
  char v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v34 = a2;
  v35 = a6;
  v32 = a1;
  v33 = a9;
  v14 = sub_319AC((uint64_t *)&unk_3B9170);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = v9 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet;
  v36[0] = objc_msgSend(objc_allocWithZone((Class)BEWebViewFactoryStylesheetSet), "init");
  v19 = sub_34450(0, (unint64_t *)&unk_3B91D8, &off_3764D8);
  Published.init(initialValue:)(v36, v19);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v18, v17, v14);
  v20 = (_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_book);
  v20[3] = a5;
  v20[4] = a8;
  v21 = sub_9B1C0(v20);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 16))(v21, v32, a5);
  swift_unknownObjectRetain(a3);
  sub_97488(v22, v34, v35, v33, (uint64_t)v36);
  v23 = v36[1];
  v24 = v38;
  v25 = v39;
  v26 = v40;
  v27 = v41;
  v28 = v9 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider_state;
  *(_QWORD *)v28 = v36[0];
  *(_QWORD *)(v28 + 8) = v23;
  *(_OWORD *)(v28 + 16) = v37;
  *(_BYTE *)(v28 + 32) = v24;
  *(_BYTE *)(v28 + 40) = v25;
  *(_BYTE *)(v28 + 41) = v26;
  *(_BYTE *)(v28 + 42) = v27;
  v29 = v43;
  *(_OWORD *)(v28 + 48) = v42;
  *(_OWORD *)(v28 + 64) = v29;
  v30 = v45;
  *(_OWORD *)(v28 + 80) = v44;
  *(_OWORD *)(v28 + 96) = v30;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager) = a4;
  swift_unknownObjectRetain(a4);
  sub_97974();
  return v9;
}

uint64_t sub_9AB34()
{
  return type metadata accessor for StylesheetProvider(0);
}

uint64_t type metadata accessor for StylesheetProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3B91C0;
  if (!qword_3B91C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StylesheetProvider);
  return result;
}

void sub_9AB78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  sub_9AC64(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_2E8898;
    v4[2] = &unk_2E88B0;
    v4[3] = &unk_2E88C8;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t method lookup function for StylesheetProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StylesheetProvider);
}

uint64_t dispatch thunk of StylesheetProvider.stylesheetSet.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of Stack.stackContents.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of StylesheetProvider.$stylesheetSet.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SearchBarResponderState.$becomeFirstResponder.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of StylesheetProvider.__allocating_init<A, B, C>(bookEntity:imageFilterMode:layoutProvider:styleManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of StylesheetProvider.generateStylesheetSet(layout:theme:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PagePaginationEntity.mediaEntityReferences.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

void sub_9AC64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3B91D0)
  {
    v2 = sub_34450(255, (unint64_t *)&unk_3B91D8, &off_3764D8);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3B91D0);
  }
}

uint64_t destroy for BookThemeEntity(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for StylesheetProvider.Layout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for StylesheetProvider.Layout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for StylesheetProvider.Layout(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for StylesheetProvider.Layout(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for StylesheetProvider.Layout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StylesheetProvider.Layout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StylesheetProvider.Layout()
{
  return &type metadata for StylesheetProvider.Layout;
}

uint64_t destroy for StylesheetProvider.State(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for StylesheetProvider.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for StylesheetProvider.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

__n128 initializeWithTake for StylesheetProvider.State(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for StylesheetProvider.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for StylesheetProvider.State(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StylesheetProvider.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StylesheetProvider.State()
{
  return &type metadata for StylesheetProvider.State;
}

uint64_t sub_9B180(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC(&qword_3B9390);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_9B1C0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t ReadingSettingsViewModel.isVerticalText.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E8980);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 16, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_9B27C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v6[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E8980);
  v6[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 16, v6, 0, 0);
  *a2 = *(_BYTE *)(v3 + 16);
}

double sub_9B308(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E8980);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9B500, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

unint64_t sub_9B39C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BBB00;
  if (!qword_3BBB00)
  {
    v1 = type metadata accessor for ReadingSettingsViewModel(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ReadingSettingsViewModel, v1);
    atomic_store(result, &qword_3BBB00);
  }
  return result;
}

uint64_t type metadata accessor for ReadingSettingsViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_3B93D0;
  if (!qword_3B93D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ReadingSettingsViewModel);
  return result;
}

double ReadingSettingsViewModel.isVerticalText.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E8980);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9B500, &v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_9B4B0(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(a1 + 16, v5, 1, 0);
  *(_BYTE *)(a1 + 16) = a2;
  return result;
}

uint64_t sub_9B500()
{
  return sub_9E39C();
}

void (*ReadingSettingsViewModel.isVerticalText.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E8980);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E8980);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 16, v4, 33, 0);
  return sub_9B5F0;
}

void sub_9B5F0(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E8980);
}

uint64_t ReadingSettingsViewModel.themes.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E89A8);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 24, v4, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_9B680@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E89A8);
  v8[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 24, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = v6;
  return swift_bridgeObjectRetain(v6);
}

double sub_9B710(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E89A8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_9B39C();
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_9E414, v7, (char *)&type metadata for () + 8, v5);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.themes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E89A8);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9B8AC, &v6, (char *)&type metadata for () + 8, v4);
  swift_release();
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

uint64_t sub_9B848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1 + 24, v6, 1, 0);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_9B8AC()
{
  uint64_t v0;

  return sub_9B848(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void (*ReadingSettingsViewModel.themes.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E89A8);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E89A8);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 24, v4, 33, 0);
  return sub_9B9A0;
}

void sub_9B9A0(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E89A8);
}

uint64_t ReadingSettingsViewModel.currentTheme.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_2E89A8);
  v8[0] = v0;
  v3 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v3);
  swift_release();
  swift_beginAccess(v0 + 24, v8, 0, 0);
  v4 = *(_QWORD *)(v0 + 24);
  swift_retain();
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_9DC40(v5, v1);
  swift_bridgeObjectRelease(v4);
  swift_release();
  return v6;
}

uint64_t ReadingSettingsViewModel.currentThemeType.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E89D0);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 40, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 40);
}

id ReadingSettingsViewModel.contentSizeCategory.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E89F8);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 32, v4, 0, 0);
  return *(id *)(v0 + 32);
}

id sub_9BB60@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  void *v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E89F8);
  v8[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 32, v8, 0, 0);
  v6 = *(void **)(v3 + 32);
  *a2 = v6;
  return v6;
}

void sub_9BBE8(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E89F8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_9B39C();
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_9E400, v7, (char *)&type metadata for () + 8, v5);
  swift_release();

}

void ReadingSettingsViewModel.contentSizeCategory.setter(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_2E89F8);
  v6 = v1;
  v7 = a1;
  v8 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_9DF8C, &v5, (char *)&type metadata for () + 8, v4);
  swift_release();

}

void sub_9BD14(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  _BYTE v6[24];

  swift_beginAccess(a1 + 32, v6, 1, 0);
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2;
  v5 = a2;

}

void (*ReadingSettingsViewModel.contentSizeCategory.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E89F8);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E89F8);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 32, v4, 33, 0);
  return sub_9BE4C;
}

void sub_9BE4C(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E89F8);
}

void sub_9BE58(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v6[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E89D0);
  v6[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 40, v6, 0, 0);
  *a2 = *(_BYTE *)(v3 + 40);
}

double sub_9BEE0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E89D0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9DFA4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.currentThemeType.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E89D0);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9DFA4, &v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_9C000(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(a1 + 40, v5, 1, 0);
  *(_BYTE *)(a1 + 40) = a2;
  return result;
}

void (*ReadingSettingsViewModel.currentThemeType.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E89D0);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E89D0);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 40, v4, 33, 0);
  return sub_9C12C;
}

void sub_9C12C(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E89D0);
}

uint64_t ReadingSettingsViewModel.pageNavigationStyle.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E8A20);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 41, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 41);
}

void sub_9C1B8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v6[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E8A20);
  v6[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 41, v6, 0, 0);
  *a2 = *(_BYTE *)(v3 + 41);
}

double sub_9C240(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E8A20);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_422DC, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.pageNavigationStyle.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E8A20);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_422DC, &v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void (*ReadingSettingsViewModel.pageNavigationStyle.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E8A20);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E8A20);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 41, v4, 33, 0);
  return sub_9C43C;
}

void sub_9C43C(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E8A20);
}

uint64_t ReadingSettingsViewModel.showContentSizeIndicators.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E8A48);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 42, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 42);
}

void sub_9C4C8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v6[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E8A48);
  v6[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 42, v6, 0, 0);
  *a2 = *(_BYTE *)(v3 + 42);
}

double sub_9C550(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E8A48);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9DFC8, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.showContentSizeIndicators.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E8A48);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9DFC8, &v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_9C670(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(a1 + 42, v5, 1, 0);
  *(_BYTE *)(a1 + 42) = a2;
  return result;
}

void (*ReadingSettingsViewModel.showContentSizeIndicators.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E8A48);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E8A48);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 42, v4, 33, 0);
  return sub_9C79C;
}

void sub_9C79C(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E8A48);
}

uint64_t ReadingSettingsViewModel.contentSizeIndicatorIndex.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E8A70);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 48, v4, 0, 0);
  return *(_QWORD *)(v0 + 48);
}

void sub_9C82C(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  char v6;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E8A70);
  v7[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 48, v7, 0, 0);
  v6 = *(_BYTE *)(v3 + 56);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 48);
  *(_BYTE *)(a2 + 8) = v6;
}

double sub_9C8BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  double result;
  _QWORD v8[4];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E8A70);
  v8[2] = v4;
  v8[3] = v2;
  v9 = v3;
  v10 = v4;
  v6 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_9DFE4, v8, (char *)&type metadata for () + 8, v6);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.contentSizeIndicatorIndex.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_2E8A70);
  v9 = v2;
  v10 = a1;
  v11 = a2 & 1;
  v12 = v2;
  v6 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_9DFE4, &v8, (char *)&type metadata for () + 8, v6);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_9C9E8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  _BYTE v7[24];

  result = swift_beginAccess(a1 + 48, v7, 1, 0);
  *(_QWORD *)(a1 + 48) = a2;
  *(_BYTE *)(a1 + 56) = a3 & 1;
  return result;
}

void (*ReadingSettingsViewModel.contentSizeIndicatorIndex.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E8A70);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E8A70);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 48, v4, 33, 0);
  return sub_9CB20;
}

void sub_9CB20(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E8A70);
}

uint64_t ReadingSettingsViewModel.numberOfContentSizeIndicators.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E8A98);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 64, v4, 0, 0);
  return *(_QWORD *)(v0 + 64);
}

void sub_9CBAC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v6[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E8A98);
  v6[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 64, v6, 0, 0);
  *a2 = *(_QWORD *)(v3 + 64);
}

double sub_9CC34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E8A98);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_9E000, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.numberOfContentSizeIndicators.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E8A98);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9E000, &v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_9CD4C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(a1 + 64, v5, 1, 0);
  *(_QWORD *)(a1 + 64) = a2;
  return result;
}

void (*ReadingSettingsViewModel.numberOfContentSizeIndicators.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E8A98);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E8A98);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 64, v4, 33, 0);
  return sub_9CE78;
}

void sub_9CE78(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E8A98);
}

uint64_t ReadingSettingsViewModel.canIncreaseContentSize.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E8AC0);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 72, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 72);
}

void sub_9CF04(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v6[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E8AC0);
  v6[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 72, v6, 0, 0);
  *a2 = *(_BYTE *)(v3 + 72);
}

double sub_9CF8C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E8AC0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9E01C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.canIncreaseContentSize.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E8AC0);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9E01C, &v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_9D0AC(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(a1 + 72, v5, 1, 0);
  *(_BYTE *)(a1 + 72) = a2;
  return result;
}

void (*ReadingSettingsViewModel.canIncreaseContentSize.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E8AC0);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E8AC0);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 72, v4, 33, 0);
  return sub_9D1D8;
}

void sub_9D1D8(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E8AC0);
}

uint64_t ReadingSettingsViewModel.canDecreaseContentSize.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E8AE8);
  v4[0] = v0;
  v2 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 73, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 73);
}

void sub_9D264(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v6[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E8AE8);
  v6[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 73, v6, 0, 0);
  *a2 = *(_BYTE *)(v3 + 73);
}

double sub_9D2EC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E8AE8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9E038, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.canDecreaseContentSize.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E8AE8);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9E038, &v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_9D40C(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(a1 + 73, v5, 1, 0);
  *(_BYTE *)(a1 + 73) = a2;
  return result;
}

void (*ReadingSettingsViewModel.canDecreaseContentSize.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E8AE8);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E8AE8);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 73, v4, 33, 0);
  return sub_9D538;
}

void sub_9D538(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E8AE8);
}

uint64_t ReadingSettingsViewModel.fontDownloadAlert.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];

  KeyPath = swift_getKeyPath(&unk_2E8B10);
  v16[0] = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v4);
  swift_release();
  swift_beginAccess(v1 + 80, v16, 0, 0);
  v5 = *(_BYTE *)(v1 + 81);
  v6 = *(_BYTE *)(v1 + 82);
  v7 = *(_BYTE *)(v1 + 83);
  v8 = *(_BYTE *)(v1 + 84);
  v9 = *(_BYTE *)(v1 + 85);
  v10 = *(_BYTE *)(v1 + 86);
  v12 = *(_QWORD *)(v1 + 88);
  v11 = *(_QWORD *)(v1 + 96);
  v13 = *(_QWORD *)(v1 + 104);
  v14 = *(_QWORD *)(v1 + 112);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 80);
  *(_BYTE *)(a1 + 1) = v5;
  *(_BYTE *)(a1 + 2) = v6;
  *(_BYTE *)(a1 + 3) = v7;
  *(_BYTE *)(a1 + 4) = v8;
  *(_BYTE *)(a1 + 5) = v9;
  *(_BYTE *)(a1 + 6) = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v14;
  swift_bridgeObjectRetain(v11);
  return swift_bridgeObjectRetain(v14);
}

uint64_t sub_9D618@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E8B10);
  v17[0] = v3;
  v5 = sub_9B39C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, KeyPath, v5);
  swift_release();
  swift_beginAccess(v3 + 80, v17, 0, 0);
  v6 = *(_BYTE *)(v3 + 81);
  v7 = *(_BYTE *)(v3 + 82);
  v8 = *(_BYTE *)(v3 + 83);
  v9 = *(_BYTE *)(v3 + 84);
  v10 = *(_BYTE *)(v3 + 85);
  v11 = *(_BYTE *)(v3 + 86);
  v13 = *(_QWORD *)(v3 + 88);
  v12 = *(_QWORD *)(v3 + 96);
  v14 = *(_QWORD *)(v3 + 104);
  v15 = *(_QWORD *)(v3 + 112);
  *(_BYTE *)a2 = *(_BYTE *)(v3 + 80);
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v7;
  *(_BYTE *)(a2 + 3) = v8;
  *(_BYTE *)(a2 + 4) = v9;
  *(_BYTE *)(a2 + 5) = v10;
  *(_BYTE *)(a2 + 6) = v11;
  *(_QWORD *)(a2 + 8) = v13;
  *(_QWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v15;
  swift_bridgeObjectRetain(v12);
  return swift_bridgeObjectRetain(v15);
}

double sub_9D6EC(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v2;
  v10 = *(_QWORD *)(a1 + 32);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E8B10);
  v7[2] = v3;
  v7[3] = v9;
  v8 = v3;
  sub_9E188((uint64_t)v9);
  v5 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_9E3EC, v7, (char *)&type metadata for () + 8, v5);
  sub_9E06C((uint64_t)v9);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double ReadingSettingsViewModel.fontDownloadAlert.setter(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t KeyPath;
  unint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  v2 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v2;
  v11 = *(_QWORD *)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8B10);
  v7 = v1;
  v8 = v10;
  v9 = v1;
  v4 = sub_9B39C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_9E054, &v6, (char *)&type metadata for () + 8, v4);
  sub_9E06C((uint64_t)v10);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_9D83C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  double result;
  _BYTE v8[24];

  swift_beginAccess(a1 + 80, v8, 1, 0);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 96) = v6;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 32);
  sub_9E188(a2);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

void (*ReadingSettingsViewModel.fontDownloadAlert.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E8B10);
  v4[4] = OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_9B39C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E8B10);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 80, v4, 33, 0);
  return sub_9D99C;
}

void sub_9D99C(_QWORD *a1, uint64_t a2)
{
  sub_9D9A8(a1, a2, (uint64_t)&unk_2E8B10);
}

void sub_9D9A8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t KeyPath;

  v4 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  v5 = v4[5];
  *v4 = v4[3];
  KeyPath = swift_getKeyPath(a3);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v4, KeyPath, v5);
  swift_release(KeyPath);
  free(v4);
}

uint64_t ReadingSettingsViewModel.__allocating_init(isInternalInstall:contentSizeCategory:currentThemeType:pageNavigationStyle:)(char a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48));
  ReadingSettingsViewModel.init(isInternalInstall:contentSizeCategory:currentThemeType:pageNavigationStyle:)(a1, a2, a3, a4);
  return v9;
}

uint64_t ReadingSettingsViewModel.init(isInternalInstall:contentSizeCategory:currentThemeType:pageNavigationStyle:)(char a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v19[8];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 56) = 1;
  *(_QWORD *)(v4 + 64) = 1;
  *(_WORD *)(v4 + 72) = 0;
  ObservationRegistrar.init()();
  *(_QWORD *)(v4 + 32) = a2;
  *(_BYTE *)(v4 + 40) = a3;
  *(_BYTE *)(v4 + 41) = a4;
  sub_70404(0, 0, 0, 0, a1, 0, (uint64_t)v19);
  v9 = v19[1];
  v10 = v19[2];
  v11 = v19[3];
  v12 = v19[4];
  v13 = v19[5];
  v14 = v19[6];
  v15 = v20;
  v16 = v21;
  v17 = v22;
  *(_BYTE *)(v4 + 80) = v19[0];
  *(_BYTE *)(v4 + 81) = v9;
  *(_BYTE *)(v4 + 82) = v10;
  *(_BYTE *)(v4 + 83) = v11;
  *(_BYTE *)(v4 + 84) = v12;
  *(_BYTE *)(v4 + 85) = v13;
  *(_BYTE *)(v4 + 86) = v14;
  *(_OWORD *)(v4 + 88) = v15;
  *(_QWORD *)(v4 + 104) = v16;
  *(_QWORD *)(v4 + 112) = v17;
  return v4;
}

uint64_t ReadingSettingsViewModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(v1);
  v2 = v0 + OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  v3 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return v0;
}

uint64_t ReadingSettingsViewModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease(v1);
  v2 = v0 + OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  v3 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_9DC40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  unint64_t v7;
  uint64_t v8;
  _BYTE v11[24];
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v8 = a1;
    else
      v8 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    if (_CocoaArrayWrapper.endIndex.getter(v8))
    {
LABEL_3:
      swift_beginAccess(a2 + 40, v11, 0, 0);
      if ((a1 & 0xC000000000000001) != 0)
      {
        v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      }
      else
      {
        v4 = *(_QWORD *)(a1 + 32);
        swift_retain();
      }
      v5 = *(unsigned __int8 *)(v4 + 48);
      KeyPath = swift_getKeyPath(&unk_2E89D0);
      v12 = a2;
      v7 = sub_9B39C();
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v7);
      swift_release();
      __asm { BR              X9 }
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(a1);
    if (v3)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease(a1);
  return 0;
}

void sub_9DF8C()
{
  uint64_t v0;

  sub_9BD14(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_9DFA4()
{
  return sub_9E34C();
}

uint64_t sub_9DFC8()
{
  return sub_9E2FC();
}

uint64_t sub_9DFE4()
{
  return sub_9E2A8();
}

uint64_t sub_9E000()
{
  return sub_9E25C();
}

uint64_t sub_9E01C()
{
  return sub_9E20C();
}

uint64_t sub_9E038()
{
  return sub_9E1BC();
}

double sub_9E054()
{
  uint64_t v0;

  return sub_9D83C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_9E06C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_9E0A0()
{
  return type metadata accessor for ReadingSettingsViewModel(0);
}

uint64_t sub_9E0A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = &unk_2E8BE0;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_2E8BF8;
  v4[3] = &unk_2E8C10;
  v4[4] = &unk_2E8C28;
  v4[5] = &unk_2E8BE0;
  v4[6] = &unk_2E8C40;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_2E8BE0;
  v4[9] = &unk_2E8BE0;
  v4[10] = &unk_2E8C58;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ReadingSettingsViewModel(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ReadingSettingsViewModel);
}

uint64_t dispatch thunk of ReadingSettingsViewModel.__allocating_init(isInternalInstall:contentSizeCategory:currentThemeType:pageNavigationStyle:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t sub_9E188(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_9E1BC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess(v1 + 73, v4, 1, 0);
  *(_BYTE *)(v1 + 73) = v2;
  return result;
}

uint64_t sub_9E20C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess(v1 + 72, v4, 1, 0);
  *(_BYTE *)(v1 + 72) = v2;
  return result;
}

uint64_t sub_9E25C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  result = swift_beginAccess(v2 + 64, v4, 1, 0);
  *(_QWORD *)(v2 + 64) = v1;
  return result;
}

uint64_t sub_9E2A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  _BYTE v5[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  result = swift_beginAccess(v1 + 48, v5, 1, 0);
  *(_QWORD *)(v1 + 48) = v2;
  *(_BYTE *)(v1 + 56) = v3;
  return result;
}

uint64_t sub_9E2FC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess(v1 + 42, v4, 1, 0);
  *(_BYTE *)(v1 + 42) = v2;
  return result;
}

uint64_t sub_9E34C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess(v1 + 40, v4, 1, 0);
  *(_BYTE *)(v1 + 40) = v2;
  return result;
}

uint64_t sub_9E39C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess(v1 + 16, v4, 1, 0);
  *(_BYTE *)(v1 + 16) = v2;
  return result;
}

double sub_9E3EC()
{
  return sub_9E054();
}

void sub_9E400()
{
  sub_9DF8C();
}

uint64_t sub_9E414()
{
  return sub_9B8AC();
}

uint64_t dispatch thunk of ThemeOptionsEventHandling.didTapDownload(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didTapToggleLoupe()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t sub_9E438(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v22 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject(&unk_37E2D0, v14 + v11);
  *(_QWORD *)(v15 + 16) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_A30E4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_37E2E8;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = swift_release();
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_319AC(&qword_3B96F0);
  v20 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v3, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v8, v24);
}

double sub_9E6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  void (*v9)(_BYTE *, _QWORD);
  _BYTE v10[32];
  _BYTE v11[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = *(_QWORD *)(Strong + 32);
    swift_retain();
    swift_release();
    KeyPath = swift_getKeyPath(&unk_2E8E30);
    v8 = swift_getKeyPath(&unk_2E8E58);
    v9 = (void (*)(_BYTE *, _QWORD))static Published.subscript.modify(v10, v6, KeyPath, v8);
    FontDownloadAlert.updateFrom(path:)(a2);
    v9(v10, 0);
    swift_release();
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_9E784(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  if (swift_weakLoadStrong(v2))
  {
    sub_A2310();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_9E7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t KeyPath;
  uint64_t v11;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  char v23;
  id v24;
  _QWORD v25[4];
  _BYTE v26[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v26, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    Notification.object.getter(v25);
    if (v25[3])
    {
      v6 = sub_319AC((uint64_t *)&unk_3B96A0);
      if ((swift_dynamicCast(&v24, v25, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
      {
        v7 = v24;
        v8 = *(_QWORD *)(v5 + 32);
        v9 = objc_msgSend(v24, "isUnavailable");
        KeyPath = swift_getKeyPath(&unk_2E8E30);
        v11 = swift_getKeyPath(&unk_2E8E58);
        v12 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v25, v8, KeyPath, v11);
        *(_BYTE *)(v13 + 5) = v9;
        v12(v25, 0);
        swift_release();
        swift_release();
        v14 = swift_getKeyPath(&unk_2E8D98);
        swift_getKeyPath(&unk_2E8DC0);
        static Published.subscript.getter(v25, v8, v14);
        swift_release();
        swift_release();
        v15 = v25[0];
        swift_unknownObjectRetain(v7);
        v16 = sub_A29A8(v15, v7);
        swift_bridgeObjectRelease(v15);
        swift_unknownObjectRelease(v7);
        if (v16)
        {
          v17 = sub_CCAB4(v7);
          v19 = v18;
          v20 = swift_getKeyPath(&unk_2E8E78);
          __chkstk_darwin(v20);
          v22[2] = v16;
          v22[3] = v17;
          v23 = v19 & 1;
          v25[0] = v16;
          v21 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v25, v20, sub_A3178, v22, (char *)&type metadata for () + 8, v21);
          swift_release();
          swift_unknownObjectRelease(v7);
          swift_release();
          *(_QWORD *)&result = swift_release().n128_u64[0];
        }
        else
        {
          swift_release();
          *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
        }
      }
      else
      {
        *(_QWORD *)&result = swift_release().n128_u64[0];
      }
    }
    else
    {
      swift_release();
      sub_4E27C((uint64_t)v25);
    }
  }
  return result;
}

double sub_9EA68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t KeyPath;
  uint64_t v11;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_QWORD *, _QWORD);
  uint64_t v26;
  _QWORD v27[4];
  char v28;
  id v29;
  _QWORD v30[4];
  _BYTE v31[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v31, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    Notification.object.getter(v30);
    if (v30[3])
    {
      v6 = sub_319AC((uint64_t *)&unk_3B96A0);
      if ((swift_dynamicCast(&v29, v30, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
      {
        v7 = v29;
        v8 = *(_QWORD *)(v5 + 32);
        v9 = objc_msgSend(v29, "isUnavailable");
        KeyPath = swift_getKeyPath(&unk_2E8E30);
        v11 = swift_getKeyPath(&unk_2E8E58);
        v12 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v30, v8, KeyPath, v11);
        *(_BYTE *)(v13 + 5) = v9;
        v12(v30, 0);
        swift_release();
        swift_release();
        v14 = swift_getKeyPath(&unk_2E8D98);
        swift_getKeyPath(&unk_2E8DC0);
        static Published.subscript.getter(v30, v8, v14);
        swift_release();
        swift_release();
        v15 = v30[0];
        swift_unknownObjectRetain(v7);
        v16 = sub_A29A8(v15, v7);
        swift_bridgeObjectRelease(v15);
        swift_unknownObjectRelease(v7);
        if (v16)
        {
          v17 = sub_CCAB4(v7);
          v19 = v18;
          v20 = swift_getKeyPath(&unk_2E8E78);
          __chkstk_darwin(v20);
          v27[2] = v16;
          v27[3] = v17;
          v28 = v19 & 1;
          v30[0] = v16;
          v21 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v30, v20, sub_A3178, v27, (char *)&type metadata for () + 8, v21);
          swift_release();
          swift_release();
        }
        v22 = *(_QWORD *)(v5 + 32);
        v23 = swift_getKeyPath(&unk_2E8E30);
        v24 = swift_getKeyPath(&unk_2E8E58);
        swift_retain();
        v25 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v30, v22, v23, v24);
        *(_BYTE *)(v26 + 3) = 1;
        v25(v30, 0);
        swift_release();
        swift_unknownObjectRelease(v7);
        swift_release();
        swift_release();
      }
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
    else
    {
      swift_release();
      sub_4E27C((uint64_t)v30);
    }
  }
  return result;
}

double sub_9ED50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t KeyPath;
  uint64_t v11;
  void (*v12)(_QWORD *, _QWORD);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  char v23;
  id v24;
  _QWORD v25[4];
  _BYTE v26[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v26, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    Notification.object.getter(v25);
    if (v25[3])
    {
      v6 = sub_319AC((uint64_t *)&unk_3B96A0);
      if ((swift_dynamicCast(&v24, v25, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
      {
        v7 = v24;
        v8 = *(_QWORD *)(v5 + 32);
        v9 = objc_msgSend(v24, "isUnavailable");
        KeyPath = swift_getKeyPath(&unk_2E8E30);
        v11 = swift_getKeyPath(&unk_2E8E58);
        v12 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v25, v8, KeyPath, v11);
        *(_BYTE *)(v13 + 5) = v9;
        v12(v25, 0);
        swift_release();
        swift_release();
        v14 = swift_getKeyPath(&unk_2E8D98);
        swift_getKeyPath(&unk_2E8DC0);
        static Published.subscript.getter(v25, v8, v14);
        swift_release();
        swift_release();
        v15 = v25[0];
        swift_unknownObjectRetain(v7);
        v16 = sub_A29A8(v15, v7);
        swift_bridgeObjectRelease(v15);
        swift_unknownObjectRelease(v7);
        if (v16)
        {
          v17 = sub_CCAB4(v7);
          v19 = v18;
          v20 = swift_getKeyPath(&unk_2E8E78);
          __chkstk_darwin(v20);
          v22[2] = v16;
          v22[3] = v17;
          v23 = v19 & 1;
          v25[0] = v16;
          v21 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v25, v20, sub_44660, v22, (char *)&type metadata for () + 8, v21);
          swift_release();
          swift_unknownObjectRelease(v7);
          swift_release();
          *(_QWORD *)&result = swift_release().n128_u64[0];
        }
        else
        {
          swift_release();
          *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
        }
      }
      else
      {
        *(_QWORD *)&result = swift_release().n128_u64[0];
      }
    }
    else
    {
      swift_release();
      sub_4E27C((uint64_t)v25);
    }
  }
  return result;
}

void sub_9EFE0()
{
  sub_A24D8();
}

void sub_9F000()
{
  UIAccessibilityPostNotification(UIAccessibilityScreenChangedNotification, 0);
}

_QWORD *sub_9F014()
{
  _QWORD *v0;

  NWPathMonitor.cancel()();
  sub_47418((uint64_t)(v0 + 2));
  swift_release();
  swift_unknownObjectRelease(v0[5]);
  swift_release();
  sub_47418((uint64_t)(v0 + 8));
  swift_release();
  swift_release();
  swift_unknownObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  return v0;
}

uint64_t sub_9F084()
{
  uint64_t v0;

  sub_9F014();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for ThemeOptionsPresenter()
{
  return objc_opt_self(_TtC8BookEPUB21ThemeOptionsPresenter);
}

double sub_9F0C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  char v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8DE8);
  v3 = swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter(&v12, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  if (!(_BYTE)v12)
  {
    v5 = swift_getKeyPath(&unk_2E8DE8);
    v6 = swift_getKeyPath(&unk_2E8E10);
    v11 = 2;
    swift_retain(v1);
    static Published.subscript.setter(&v11, v1, v5, v6);
    Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v0 + 24);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
      *(_QWORD *)&result = swift_unknownObjectRelease(v8).n128_u64[0];
    }
  }
  return result;
}

double sub_9F1B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t KeyPath;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8DE8);
  swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter(&v16, v4, KeyPath);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  if (!(_BYTE)v16)
  {
    v7 = swift_getKeyPath(&unk_2E8DE8);
    v8 = swift_getKeyPath(&unk_2E8E10);
    v15 = 1;
    swift_retain();
    static Published.subscript.setter(&v15, v4, v7, v8);
    v9 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 1, 1, v9);
    v10 = swift_allocObject(&unk_37E258, 24);
    swift_weakInit(v10 + 16, v0);
    type metadata accessor for MainActor(0);
    swift_retain();
    v11 = swift_retain();
    v12 = static MainActor.shared.getter(v11);
    v13 = (_QWORD *)swift_allocObject(&unk_37E2A8, 48);
    v13[2] = v12;
    v13[3] = &protocol witness table for MainActor;
    v13[4] = v10;
    v13[5] = v4;
    swift_release();
    sub_67B40((uint64_t)v3, (uint64_t)&unk_3B96C8, (uint64_t)v13);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_9F360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[39] = a4;
  v5[40] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[41] = v6;
  v5[42] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[43] = v7;
  v5[44] = v8;
  return swift_task_switch(sub_9F3D0, v7, v8);
}

uint64_t sub_9F3D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 312) + 16;
  swift_beginAccess(v1, v0 + 240, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    goto LABEL_5;
  v3 = *(_QWORD *)(Strong + 32);
  swift_retain();
  swift_release();
  KeyPath = swift_getKeyPath(&unk_2E8DE8);
  swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter((_QWORD *)(v0 + 488), v3, KeyPath);
  swift_release();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v0 + 488) != 1)
  {
LABEL_5:
    swift_release();
LABEL_6:
    if (qword_3B5798 != -1)
      swift_once(&qword_3B5798, sub_11374C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_555F0(v19, (uint64_t)qword_3CF0D8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_0, v21, v22, "Unexpected editing state changed during save", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 312) + 16;
  swift_beginAccess(v5, v0 + 216, 0, 0);
  v6 = swift_weakLoadStrong(v5);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 320);
    v7 = *(_QWORD *)(v0 + 328);
    v9 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v0 + 360) = v9;
    swift_unknownObjectRetain(v9);
    swift_release();
    v10 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter((_QWORD *)(v0 + 88), v8, v10);
    swift_release();
    swift_release();
    v11 = *(_OWORD *)(v0 + 112);
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 384) = v11;
    *(_OWORD *)(v0 + 400) = *(_OWORD *)(v0 + 128);
    v12 = *(void **)(v0 + 152);
    *(_QWORD *)(v0 + 416) = *(_QWORD *)(v0 + 144);

    v13 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter((_QWORD *)(v0 + 16), v8, v13);
    swift_release();
    swift_release();
    *(_BYTE *)(v0 + 491) = *(_BYTE *)(v0 + 16);
    v14 = *(_QWORD *)(v0 + 24);

    swift_bridgeObjectRelease(v14);
    *(_QWORD *)(v0 + 424) = static MainActor.shared.getter(v15);
    v16 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 432) = v16;
    *(_QWORD *)(v0 + 440) = v17;
    return swift_task_switch(sub_9F818, v16, v17);
  }
  swift_release();
  v24 = *(_QWORD *)(v0 + 312) + 16;
  swift_beginAccess(v24, v0 + 264, 0, 0);
  v25 = swift_weakLoadStrong(v24);
  if (!v25)
    goto LABEL_6;
  v26 = *(_QWORD *)(v25 + 32);
  swift_retain();
  swift_release();
  v27 = swift_getKeyPath(&unk_2E8DE8);
  swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter((_QWORD *)(v0 + 489), v26, v27);
  swift_release();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v0 + 489) != 1)
    goto LABEL_6;
  v28 = *(_QWORD *)(v0 + 312) + 16;
  swift_beginAccess(v28, v0 + 288, 0, 0);
  v29 = swift_weakLoadStrong(v28);
  if (v29)
  {
    v30 = v29;
    v31 = *(_QWORD *)(v0 + 320);
    v32 = swift_getKeyPath(&unk_2E8DE8);
    v33 = swift_getKeyPath(&unk_2E8E10);
    *(_BYTE *)(v0 + 490) = 2;
    swift_retain();
    static Published.subscript.setter(v0 + 490, v31, v32, v33);
    v34 = swift_unknownObjectWeakLoadStrong(v30 + 16);
    if (v34)
    {
      v35 = v34;
      v36 = *(_QWORD *)(v30 + 24);
      ObjectType = swift_getObjectType(v34);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(ObjectType, v36);
      swift_unknownObjectRelease(v35);
    }
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9F818(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[41];
  v1[56] = *(_QWORD *)(v1[45] + OBJC_IVAR____TtC8BookEPUB22ThemeOptionsInteractor_dataManager);
  v1[57] = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[58] = v3;
  v1[59] = v4;
  return swift_task_switch(sub_9F88C, v3, v4);
}

uint64_t sub_9F88C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 416);
  v9 = *(_OWORD *)(v0 + 384);
  v10 = *(_OWORD *)(v0 + 400);
  v8 = *(_OWORD *)(v0 + 368);
  v2 = (_QWORD *)(*(_QWORD *)(v0 + 448) + OBJC_IVAR____TtC8BookEPUB23ThemeOptionsDataManager_themeDatabaseManager);
  v3 = v2[3];
  v4 = v2[4];
  sub_472D0(v2, v3);
  *(_OWORD *)(v0 + 160) = v8;
  *(_OWORD *)(v0 + 176) = v9;
  *(_OWORD *)(v0 + 192) = v10;
  *(_QWORD *)(v0 + 208) = v1;
  v5 = *(int **)(v4 + 16);
  *(_QWORD *)&v10 = (char *)v5 + *v5;
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v0 + 480) = v6;
  *v6 = v0;
  v6[1] = sub_9F954;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v10)(v0 + 160, *(unsigned __int8 *)(v0 + 491), v3, v4);
}

uint64_t sub_9F954()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 480));
  return swift_task_switch(sub_9F9A0, *(_QWORD *)(v1 + 464), *(_QWORD *)(v1 + 472));
}

uint64_t sub_9F9A0()
{
  uint64_t v0;

  swift_release();
  return swift_task_switch(sub_9F9D8, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440));
}

uint64_t sub_9F9D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[45];
  v2 = v0[46];
  swift_release();
  swift_unknownObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_9FA24, v0[43], v0[44]);
}

uint64_t sub_9FA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;

  swift_release();
  v1 = *(_QWORD *)(v0 + 312) + 16;
  swift_beginAccess(v1, v0 + 264, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    goto LABEL_7;
  v3 = *(_QWORD *)(Strong + 32);
  swift_retain();
  swift_release();
  KeyPath = swift_getKeyPath(&unk_2E8DE8);
  swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter((_QWORD *)(v0 + 489), v3, KeyPath);
  swift_release();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v0 + 489) == 1)
  {
    v5 = *(_QWORD *)(v0 + 312) + 16;
    swift_beginAccess(v5, v0 + 288, 0, 0);
    v6 = swift_weakLoadStrong(v5);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(v0 + 320);
      v9 = swift_getKeyPath(&unk_2E8DE8);
      v10 = swift_getKeyPath(&unk_2E8E10);
      *(_BYTE *)(v0 + 490) = 2;
      swift_retain();
      static Published.subscript.setter(v0 + 490, v8, v9, v10);
      v11 = swift_unknownObjectWeakLoadStrong(v7 + 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)(v7 + 24);
        ObjectType = swift_getObjectType(v11);
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(ObjectType, v13);
        swift_unknownObjectRelease(v12);
      }
      swift_release();
    }
  }
  else
  {
LABEL_7:
    if (qword_3B5798 != -1)
      swift_once(&qword_3B5798, sub_11374C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_555F0(v15, (uint64_t)qword_3CF0D8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_0, v17, v18, "Unexpected editing state changed during save", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_9FC60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  double result;
  void *v6;
  NSString v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, _QWORD);
  uint64_t v17;
  _QWORD v18[9];

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v2 = *(_QWORD *)(a1 + 64);
    Strong = swift_unknownObjectWeakLoadStrong(v1 + 64);
    if (Strong)
    {
      v6 = (void *)Strong;
      v7 = String._bridgeToObjectiveC()();
      v8 = objc_msgSend(v6, "fontForFontFamily:", v7);
      swift_unknownObjectRelease(v6);

      if (v8)
      {
        v9 = objc_msgSend(v8, "isAvailable");
        v10 = *(_QWORD *)(v1 + 32);
        if (v9)
        {
          KeyPath = swift_getKeyPath(&unk_2E8D50);
          swift_getKeyPath(&off_2E8D78);
          static Published.subscript.getter(v18, v10, KeyPath);
          swift_release();
          swift_release();
          v12 = v18[1];
          v13 = BYTE2(v18[0]);

          swift_bridgeObjectRelease(v12);
          swift_bridgeObjectRetain(v2);
          sub_A2C34(v1, v13, v3, v2);
          swift_unknownObjectRelease(v8);
          *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
        }
        else
        {
          v14 = swift_getKeyPath(&unk_2E8E30);
          v15 = swift_getKeyPath(&unk_2E8E58);
          v16 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v18, v10, v14, v15);
          *(_BYTE *)(v17 + 3) = 1;
          v16(v18, 0);
          swift_unknownObjectRelease(v8);
          swift_release();
          *(_QWORD *)&result = swift_release().n128_u64[0];
        }
      }
    }
  }
  return result;
}

void sub_9FDFC(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;

  v3 = *(_QWORD **)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v35, v3, KeyPath);
  swift_release();
  swift_release();
  v6 = v36;
  v5 = v37;
  v7 = v38;
  v9 = v39;
  v8 = v40;
  v10 = v41;
  v11 = v42;

  if (!v6)
  {
    v12 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v35, v3, v12);
    swift_release();
    swift_release();
    v13 = v35;

    sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    __asm { BR              X9 }
  }
  v32 = v8;
  v33 = v6;
  v31 = v11;
  v34 = v9;
  if (((v5 >> 8) & 1) != 0)
    v14 = 256;
  else
    v14 = 0;
  v15 = v14 & 0xFFFFFFFFFFFFFFFELL | a2 & 1;
  v16 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v35, v3, v16);
  swift_release();
  swift_release();
  v17 = v35;
  v18 = BYTE1(v35);
  v19 = BYTE2(v35);
  v29 = BYTE1(v35);
  v30 = BYTE2(v35);
  v20 = v36;

  swift_bridgeObjectRelease(v20);
  v21 = v3[15];
  v22 = v3[16];
  v23 = sub_472D0(v3 + 12, v21);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v35) = v17;
  BYTE1(v35) = v18;
  BYTE2(v35) = v19;
  v36 = v33;
  v37 = v15;
  v38 = v7;
  v39 = v34;
  v40 = v32;
  v41 = v10 & 0xFF01;
  v42 = v31;
  swift_bridgeObjectRetain(v33);
  sub_DDBB8((uint64_t)v23, (uint64_t)&v35, v21, v22);
  v25 = v24;
  v26 = swift_getKeyPath(&unk_2E8D50);
  v27 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v35) = v17;
  BYTE1(v35) = v29;
  BYTE2(v35) = v30;
  v36 = v33;
  v37 = v15;
  v38 = v7;
  v39 = v34;
  v40 = v32;
  v41 = v10 & 0xFF01;
  v42 = v31;
  v43 = v25;
  v28 = v25;
  swift_retain();
  static Published.subscript.setter(&v35, v3, v26, v27);
  sub_DC47C();

}

void sub_A0124(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t KeyPath;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;

  v3 = *(_QWORD **)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  v5 = v3;
  static Published.subscript.getter(&v42, v3, KeyPath);
  swift_release();
  swift_release();
  v6 = v43;
  v7 = v44;
  v8 = v45;
  v10 = v46;
  v9 = v47;
  v11 = v48;
  v12 = v49;

  if (!v6)
  {
    v17 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v42, v5, v17);
    swift_release();
    swift_release();
    v18 = v42;

    sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    __asm { BR              X9 }
  }
  v40 = v12;
  v41 = v6;
  v13 = v11 & 1;
  v14 = v7 & 1;
  v15 = v11 & 0xFF00;
  v38 = v9;
  v16 = v10;
  v19 = 256;
  if ((a2 & 1) == 0)
    v19 = 0;
  v20 = v19 | v14;
  v39 = v15 | v13;
  v21 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  v22 = v5;
  static Published.subscript.getter(&v42, v5, v21);
  swift_release();
  swift_release();
  v23 = v42;
  v24 = BYTE1(v42);
  v36 = BYTE1(v42);
  v37 = v42;
  v25 = BYTE2(v42);
  v35 = BYTE2(v42);
  v26 = v43;

  swift_bridgeObjectRelease(v26);
  v27 = v22[15];
  v28 = v22[16];
  v29 = sub_472D0(v22 + 12, v27);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v42) = v23;
  BYTE1(v42) = v24;
  BYTE2(v42) = v25;
  v43 = v41;
  v44 = v20;
  v45 = v8;
  v46 = v16;
  v47 = v38;
  v48 = v39;
  v49 = v40;
  swift_bridgeObjectRetain(v41);
  sub_DDBB8((uint64_t)v29, (uint64_t)&v42, v27, v28);
  v31 = v30;
  v32 = swift_getKeyPath(&unk_2E8D50);
  v33 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v42) = v37;
  BYTE1(v42) = v36;
  BYTE2(v42) = v35;
  v43 = v41;
  v44 = v20;
  v45 = v8;
  v46 = v16;
  v47 = v38;
  v48 = v39;
  v49 = v40;
  v50 = v31;
  v34 = v31;
  swift_retain();
  static Published.subscript.setter(&v42, v22, v32, v33);
  sub_DC47C();

}

void sub_A045C(uint64_t a1, double a2)
{
  _QWORD *v3;
  uint64_t KeyPath;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned int v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;

  v3 = *(_QWORD **)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v43, v3, KeyPath);
  swift_release();
  swift_release();
  v5 = v44;
  v6 = v45;
  v8 = v47;
  v7 = v48;
  v10 = v49;
  v9 = v50;

  if (v5)
  {
    v40 = v9;
    v41 = v5;
    v11 = v10 & 1;
    v12 = (v6 >> 8) & 1;
    v39 = v7;
    v13 = v6 & 1;
    v14 = v10 & 0xFF00;
    v42 = v8;
  }
  else
  {
    v15 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v43, v3, v15);
    swift_release();
    swift_release();
    v16 = v43;
    v17 = v44;

    v41 = sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    v13 = v16 == 3;
    LODWORD(v12) = v16 != 0;
    v11 = v16 > 4 || (v16 & 0x1F) == 1;
    swift_bridgeObjectRelease(v17);
    v39 = 0;
    v40 = 0;
    v42 = 0;
    v14 = 256;
  }
  v19 = 256;
  if (!(_DWORD)v12)
    v19 = 0;
  v20 = v19 | v13;
  v21 = v14 | v11;
  v22 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v43, v3, v22);
  swift_release();
  swift_release();
  v23 = v43;
  v24 = BYTE1(v43);
  v37 = BYTE1(v43);
  v38 = v43;
  v25 = BYTE2(v43);
  v36 = BYTE2(v43);
  v26 = v44;

  swift_bridgeObjectRelease(v26);
  v27 = v3[15];
  v28 = v3[16];
  v29 = sub_472D0(v3 + 12, v27);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v43) = v23;
  BYTE1(v43) = v24;
  BYTE2(v43) = v25;
  v44 = v41;
  v45 = v20;
  v30 = v20;
  v46 = a2;
  v47 = v42;
  v48 = v39;
  v49 = v21;
  v50 = v40;
  swift_bridgeObjectRetain(v41);
  sub_DDBB8((uint64_t)v29, (uint64_t)&v43, v27, v28);
  v32 = v31;
  v33 = swift_getKeyPath(&unk_2E8D50);
  v34 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v43) = v38;
  BYTE1(v43) = v37;
  BYTE2(v43) = v36;
  v44 = v41;
  v45 = v30;
  v46 = a2;
  v47 = v42;
  v48 = v39;
  v49 = v21;
  v50 = v40;
  v51 = v32;
  v35 = v32;
  swift_retain();
  static Published.subscript.setter(&v43, v3, v33, v34);
  sub_DC47C();

}

void sub_A0764(uint64_t a1, double a2)
{
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;

  v3 = *(_QWORD **)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v36, v3, KeyPath);
  swift_release();
  swift_release();
  v5 = v37;
  v6 = v38;
  v7 = v39;
  v9 = v41;
  v8 = v42;
  v10 = v43;

  if (!v5)
  {
    v11 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v36, v3, v11);
    swift_release();
    swift_release();
    v12 = v36;

    sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    __asm { BR              X9 }
  }
  v34 = v10;
  v35 = v5;
  v33 = v9;
  v13 = 256;
  if (((v6 >> 8) & 1) == 0)
    v13 = 0;
  v14 = v13 | v6 & 1;
  v32 = v14;
  v15 = v8 & 0xFF01;
  v16 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v36, v3, v16);
  swift_release();
  swift_release();
  v17 = v36;
  v18 = BYTE1(v36);
  v30 = BYTE1(v36);
  v31 = v36;
  v19 = BYTE2(v36);
  v29 = BYTE2(v36);
  v20 = v37;

  swift_bridgeObjectRelease(v20);
  v21 = v3[15];
  v22 = v3[16];
  v23 = sub_472D0(v3 + 12, v21);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v36) = v17;
  BYTE1(v36) = v18;
  BYTE2(v36) = v19;
  v37 = v35;
  v38 = v14;
  v39 = v7;
  v40 = a2;
  v41 = v33;
  v42 = v15;
  v43 = v34;
  swift_bridgeObjectRetain(v35);
  sub_DDBB8((uint64_t)v23, (uint64_t)&v36, v21, v22);
  v25 = v24;
  v26 = swift_getKeyPath(&unk_2E8D50);
  v27 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v36) = v31;
  BYTE1(v36) = v30;
  BYTE2(v36) = v29;
  v37 = v35;
  v38 = v32;
  v39 = v7;
  v40 = a2;
  v41 = v33;
  v42 = v15;
  v43 = v34;
  v44 = v25;
  v28 = v25;
  swift_retain();
  static Published.subscript.setter(&v36, v3, v26, v27);
  sub_DC47C();

}

void sub_A0A94(uint64_t a1, double a2)
{
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  id v44;

  v3 = *(_QWORD **)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v36, v3, KeyPath);
  swift_release();
  swift_release();
  v5 = v37;
  v6 = v38;
  v7 = v39;
  v8 = v40;
  v9 = v42;
  v10 = v43;

  if (!v5)
  {
    v11 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v36, v3, v11);
    swift_release();
    swift_release();
    v12 = v36;

    sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    __asm { BR              X9 }
  }
  v34 = v10;
  v35 = v5;
  v33 = v8;
  v13 = 256;
  if (((v6 >> 8) & 1) == 0)
    v13 = 0;
  v14 = v13 | v6 & 1;
  v32 = v14;
  v15 = v9 & 0xFF01;
  v16 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v36, v3, v16);
  swift_release();
  swift_release();
  v17 = v36;
  v18 = BYTE1(v36);
  v30 = BYTE1(v36);
  v31 = v36;
  v19 = BYTE2(v36);
  v29 = BYTE2(v36);
  v20 = v37;

  swift_bridgeObjectRelease(v20);
  v21 = v3[15];
  v22 = v3[16];
  v23 = sub_472D0(v3 + 12, v21);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v36) = v17;
  BYTE1(v36) = v18;
  BYTE2(v36) = v19;
  v37 = v35;
  v38 = v14;
  v39 = v7;
  v40 = v33;
  v41 = a2;
  v42 = v15;
  v43 = v34;
  swift_bridgeObjectRetain(v35);
  sub_DDBB8((uint64_t)v23, (uint64_t)&v36, v21, v22);
  v25 = v24;
  v26 = swift_getKeyPath(&unk_2E8D50);
  v27 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v36) = v31;
  BYTE1(v36) = v30;
  BYTE2(v36) = v29;
  v37 = v35;
  v38 = v32;
  v39 = v7;
  v40 = v33;
  v41 = a2;
  v42 = v15;
  v43 = v34;
  v44 = v25;
  v28 = v25;
  swift_retain();
  static Published.subscript.setter(&v36, v3, v26, v27);
  sub_DC47C();

}

void sub_A0DD4(uint64_t a1, double a2)
{
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  id v43;
  uint64_t v44;

  v3 = *(_QWORD **)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v35, v3, KeyPath);
  swift_release();
  swift_release();
  v5 = v36;
  v6 = v37;
  v7 = v38;
  v9 = v39;
  v8 = v40;
  v10 = v41;

  if (!v5)
  {
    v11 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v35, v3, v11);
    swift_release();
    swift_release();
    v12 = v35;

    sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    __asm { BR              X9 }
  }
  v33 = v8;
  v34 = v5;
  v44 = v9;
  v13 = 256;
  if (((v6 >> 8) & 1) == 0)
    v13 = 0;
  v14 = v13 | v6 & 1;
  v15 = v10 & 0xFF01;
  v16 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v35, v3, v16);
  swift_release();
  swift_release();
  v17 = v35;
  v18 = BYTE1(v35);
  v31 = BYTE1(v35);
  v32 = v35;
  v19 = BYTE2(v35);
  v30 = BYTE2(v35);
  v20 = v36;

  swift_bridgeObjectRelease(v20);
  v21 = v3[15];
  v22 = v3[16];
  v23 = sub_472D0(v3 + 12, v21);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v35) = v17;
  BYTE1(v35) = v18;
  BYTE2(v35) = v19;
  v36 = v34;
  v37 = v14;
  v38 = v7;
  v39 = v44;
  v40 = v33;
  v41 = v15;
  v24 = v15;
  v42 = a2;
  swift_bridgeObjectRetain(v34);
  sub_DDBB8((uint64_t)v23, (uint64_t)&v35, v21, v22);
  v26 = v25;
  v27 = swift_getKeyPath(&unk_2E8D50);
  v28 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v35) = v32;
  BYTE1(v35) = v31;
  BYTE2(v35) = v30;
  v36 = v34;
  v37 = v14;
  v38 = v7;
  v39 = v44;
  v40 = v33;
  v41 = v24;
  v42 = a2;
  v43 = v26;
  v29 = v26;
  swift_retain();
  static Published.subscript.setter(&v35, v3, v27, v28);
  sub_DC47C();

}

void sub_A1110(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t KeyPath;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;

  v3 = *(_QWORD **)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v43, v3, KeyPath);
  swift_release();
  swift_release();
  v5 = v44;
  v6 = v45;
  v7 = v46;
  v9 = v47;
  v8 = v48;
  v10 = v49;
  v11 = v50;

  if (v5)
  {
    v41 = v11;
    v42 = v5;
    v12 = (v6 >> 8) & 1;
    v13 = v6 & 1;
    v14 = v10 & 0xFF00;
    v39 = v9;
    v40 = v8;
  }
  else
  {
    v15 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v43, v3, v15);
    swift_release();
    swift_release();
    v16 = (char)v43;
    v13 = (char)v43 == 3;
    LODWORD(v12) = (char)v43 != 0;
    v17 = v44;

    v42 = sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    v7 = qword_2E8EA8[v16];
    swift_bridgeObjectRelease(v17);
    v40 = 0;
    v41 = 0;
    v39 = 0;
    v14 = 256;
  }
  v18 = v13;
  v19 = 256;
  if (!(_DWORD)v12)
    v19 = 0;
  v20 = v19 | v13;
  v38 = v19 | v18;
  v21 = v14 | a2 & 1;
  v22 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v43, v3, v22);
  swift_release();
  swift_release();
  v23 = v43;
  v24 = BYTE1(v43);
  v36 = BYTE1(v43);
  v37 = v43;
  v25 = BYTE2(v43);
  v35 = BYTE2(v43);
  v26 = v44;

  swift_bridgeObjectRelease(v26);
  v27 = v3[15];
  v28 = v3[16];
  v29 = sub_472D0(v3 + 12, v27);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v43) = v23;
  BYTE1(v43) = v24;
  BYTE2(v43) = v25;
  v44 = v42;
  v45 = v20;
  v46 = v7;
  v47 = v39;
  v48 = v40;
  v49 = v21;
  v50 = v41;
  swift_bridgeObjectRetain(v42);
  sub_DDBB8((uint64_t)v29, (uint64_t)&v43, v27, v28);
  v31 = v30;
  v32 = swift_getKeyPath(&unk_2E8D50);
  v33 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v43) = v37;
  BYTE1(v43) = v36;
  BYTE2(v43) = v35;
  v44 = v42;
  v45 = v38;
  v46 = v7;
  v47 = v39;
  v48 = v40;
  v49 = v21;
  v50 = v41;
  v51 = v31;
  v34 = v31;
  swift_retain();
  static Published.subscript.setter(&v43, v3, v32, v33);
  sub_DC47C();

}

void sub_A1408(uint64_t a1, unsigned __int8 a2)
{
  _QWORD *v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;

  v3 = *(_QWORD **)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v37, v3, KeyPath);
  swift_release();
  swift_release();
  v6 = v38;
  v5 = v39;
  v7 = v40;
  v9 = v41;
  v8 = v42;
  v10 = v43;
  v11 = v44;

  if (!v6)
  {
    v12 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v37, v3, v12);
    swift_release();
    swift_release();
    v13 = v37;

    sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    __asm { BR              X9 }
  }
  v34 = v8;
  v35 = v6;
  v33 = v11;
  v36 = v9;
  v14 = 256;
  if (((v5 >> 8) & 1) == 0)
    v14 = 0;
  v15 = v14 | v5 & 1;
  v16 = v10 & 1 | ((unint64_t)a2 << 8);
  v17 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v37, v3, v17);
  swift_release();
  swift_release();
  v18 = v37;
  v19 = BYTE1(v37);
  v30 = BYTE1(v37);
  v31 = v37;
  v20 = BYTE2(v37);
  v32 = BYTE2(v37);
  v21 = v38;

  swift_bridgeObjectRelease(v21);
  v22 = v3[15];
  v23 = v3[16];
  v24 = sub_472D0(v3 + 12, v22);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v37) = v18;
  BYTE1(v37) = v19;
  BYTE2(v37) = v20;
  v38 = v35;
  v39 = v15;
  v40 = v7;
  v41 = v36;
  v42 = v34;
  v43 = v16;
  v44 = v33;
  swift_bridgeObjectRetain(v35);
  sub_DDBB8((uint64_t)v24, (uint64_t)&v37, v22, v23);
  v26 = v25;
  v27 = swift_getKeyPath(&unk_2E8D50);
  v28 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v37) = v31;
  BYTE1(v37) = v30;
  BYTE2(v37) = v32;
  v38 = v35;
  v39 = v15;
  v40 = v7;
  v41 = v36;
  v42 = v34;
  v43 = v16;
  v44 = v33;
  v45 = v26;
  v29 = v26;
  swift_retain();
  static Published.subscript.setter(&v37, v3, v27, v28);
  sub_DC47C();

}

uint64_t sub_A1738(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(_QWORD *, _QWORD);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v3 = *(void **)(a1 + 16);
  if (!objc_msgSend(v3, "isDownloadable"))
    goto LABEL_4;
  v4 = *(_QWORD *)(v1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8E30);
  v6 = swift_getKeyPath(&unk_2E8E58);
  static Published.subscript.getter(v22, v4, KeyPath);
  swift_release(KeyPath);
  swift_release(v6);
  v7 = v22[0];
  v8 = BYTE1(v22[0]);
  v9 = BYTE2(v22[0]);
  v10 = v23;
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v10);
  if ((v7 & 1) != 0 || (v8 & v9 & 1) != 0)
  {
    v17 = swift_getKeyPath(&unk_2E8E30);
    v18 = swift_getKeyPath(&unk_2E8E58);
    static Published.subscript.getter(v22, v4, v17);
    swift_release(v17);
    swift_release(v18);
    v19 = BYTE1(v22[0]);
    v20 = v23;
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v20);
    objc_msgSend(v3, "downloadWithAllowCellular:", v19);
    v16 = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 80) = 0;
  }
  else
  {
LABEL_4:
    v11 = *(_QWORD *)(v1 + 32);
    v12 = swift_getKeyPath(&unk_2E8E30);
    v13 = swift_getKeyPath(&unk_2E8E58);
    v14 = (void (*)(_QWORD *, _QWORD))static Published.subscript.modify(v22, v11, v12, v13);
    *(_BYTE *)(v15 + 3) = 1;
    v14(v22, 0);
    swift_release(v12);
    swift_release(v13);
    v16 = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 80) = a1;
    swift_retain(a1);
  }
  return swift_release(v16);
}

double sub_A18F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t KeyPath;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v1);
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *(_QWORD *)(v0 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8DE8);
  swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter(&v16, v4, KeyPath);
  swift_release();
  *(_QWORD *)&result = swift_release().n128_u64[0];
  if (!(_BYTE)v16)
  {
    if (*(_QWORD *)(v4 + 40))
    {
      v7 = swift_getKeyPath(&unk_2E8DE8);
      v8 = swift_getKeyPath(&unk_2E8E10);
      v15 = 3;
      swift_retain();
      static Published.subscript.setter(&v15, v4, v7, v8);
      v9 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v3, 1, 1, v9);
      v10 = swift_allocObject(&unk_37E258, 24);
      swift_weakInit(v10 + 16, v0);
      type metadata accessor for MainActor(0);
      swift_retain();
      v11 = swift_retain();
      v12 = static MainActor.shared.getter(v11);
      v13 = (_QWORD *)swift_allocObject(&unk_37E280, 48);
      v13[2] = v12;
      v13[3] = &protocol witness table for MainActor;
      v13[4] = v10;
      v13[5] = v4;
      swift_release();
      sub_67B40((uint64_t)v3, (uint64_t)&unk_3B96B8, (uint64_t)v13);
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_A1AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[30] = a4;
  v5[31] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[32] = v6;
  v5[33] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[34] = v7;
  v5[35] = v8;
  return swift_task_switch(sub_A1B1C, v7, v8);
}

uint64_t sub_A1B1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 240) + 16;
  swift_beginAccess(v1, v0 + 168, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    goto LABEL_5;
  v3 = *(_QWORD *)(Strong + 32);
  swift_retain();
  swift_release();
  KeyPath = swift_getKeyPath(&unk_2E8DE8);
  swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter((_QWORD *)(v0 + 360), v3, KeyPath);
  swift_release();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v0 + 360) != 3)
  {
LABEL_5:
    swift_release();
LABEL_6:
    if (qword_3B5798 != -1)
      swift_once(&qword_3B5798, sub_11374C);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_555F0(v16, (uint64_t)qword_3CF0D8);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_0, v18, v19, "Unexpected editing state changed during reset", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 240) + 16;
  swift_beginAccess(v5, v0 + 144, 0, 0);
  v6 = swift_weakLoadStrong(v5);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 248);
    v7 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v6 + 40);
    *(_QWORD *)(v0 + 288) = v9;
    swift_unknownObjectRetain(v9);
    swift_release();
    v10 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter((_QWORD *)(v0 + 16), v8, v10);
    swift_release();
    swift_release();
    *(_BYTE *)(v0 + 363) = *(_BYTE *)(v0 + 16);
    v11 = *(_QWORD *)(v0 + 24);

    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(v0 + 296) = static MainActor.shared.getter(v12);
    v13 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 304) = v13;
    *(_QWORD *)(v0 + 312) = v14;
    return swift_task_switch(sub_A1EF4, v13, v14);
  }
  swift_release();
  v21 = *(_QWORD *)(v0 + 240) + 16;
  swift_beginAccess(v21, v0 + 192, 0, 0);
  v22 = swift_weakLoadStrong(v21);
  if (!v22)
    goto LABEL_6;
  v23 = *(_QWORD *)(v22 + 32);
  swift_retain();
  swift_release();
  v24 = swift_getKeyPath(&unk_2E8DE8);
  swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter((_QWORD *)(v0 + 361), v23, v24);
  swift_release();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v0 + 361) != 3)
    goto LABEL_6;
  v25 = *(_QWORD *)(v0 + 240) + 16;
  swift_beginAccess(v25, v0 + 216, 0, 0);
  v26 = swift_weakLoadStrong(v25);
  if (v26)
  {
    v27 = v26;
    v28 = *(_QWORD *)(v0 + 248);
    v29 = swift_getKeyPath(&unk_2E8DE8);
    v30 = swift_getKeyPath(&unk_2E8E10);
    *(_BYTE *)(v0 + 362) = 2;
    swift_retain();
    static Published.subscript.setter(v0 + 362, v28, v29, v30);
    v31 = swift_unknownObjectWeakLoadStrong(v27 + 16);
    if (v31)
    {
      v32 = v31;
      v33 = *(_QWORD *)(v27 + 24);
      ObjectType = swift_getObjectType(v31);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(ObjectType, v33);
      swift_unknownObjectRelease(v32);
    }
    swift_release();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_A1EF4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[32];
  v1[40] = *(_QWORD *)(v1[36] + OBJC_IVAR____TtC8BookEPUB22ThemeOptionsInteractor_dataManager);
  v1[41] = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[42] = v3;
  v1[43] = v4;
  return swift_task_switch(sub_A1F68, v3, v4);
}

uint64_t sub_A1F68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 320) + OBJC_IVAR____TtC8BookEPUB23ThemeOptionsDataManager_themeDatabaseManager);
  v2 = v1[3];
  v3 = v1[4];
  sub_472D0(v1, v2);
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_QWORD *)(v0 + 136) = 0;
  *(_OWORD *)(v0 + 88) = 0u;
  v4 = *(int **)(v3 + 16);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 352) = v5;
  *v5 = v0;
  v5[1] = sub_A2010;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v7)(v0 + 88, *(unsigned __int8 *)(v0 + 363), v2, v3);
}

uint64_t sub_A2010()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 352));
  return swift_task_switch(sub_A205C, *(_QWORD *)(v1 + 336), *(_QWORD *)(v1 + 344));
}

uint64_t sub_A205C()
{
  uint64_t v0;

  swift_release();
  return swift_task_switch(sub_A2094, *(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 312));
}

uint64_t sub_A2094()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[36];
  swift_release();
  swift_unknownObjectRelease(v1);
  return swift_task_switch(sub_A20D4, v0[34], v0[35]);
}

uint64_t sub_A20D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;

  swift_release();
  v1 = *(_QWORD *)(v0 + 240) + 16;
  swift_beginAccess(v1, v0 + 192, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (!Strong)
    goto LABEL_7;
  v3 = *(_QWORD *)(Strong + 32);
  swift_retain();
  swift_release();
  KeyPath = swift_getKeyPath(&unk_2E8DE8);
  swift_getKeyPath(&unk_2E8E10);
  static Published.subscript.getter((_QWORD *)(v0 + 361), v3, KeyPath);
  swift_release();
  swift_release();
  swift_release();
  if (*(_BYTE *)(v0 + 361) == 3)
  {
    v5 = *(_QWORD *)(v0 + 240) + 16;
    swift_beginAccess(v5, v0 + 216, 0, 0);
    v6 = swift_weakLoadStrong(v5);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)(v0 + 248);
      v9 = swift_getKeyPath(&unk_2E8DE8);
      v10 = swift_getKeyPath(&unk_2E8E10);
      *(_BYTE *)(v0 + 362) = 2;
      swift_retain();
      static Published.subscript.setter(v0 + 362, v8, v9, v10);
      v11 = swift_unknownObjectWeakLoadStrong(v7 + 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)(v7 + 24);
        ObjectType = swift_getObjectType(v11);
        (*(void (**)(uint64_t, uint64_t))(v13 + 8))(ObjectType, v13);
        swift_unknownObjectRelease(v12);
      }
      swift_release();
    }
  }
  else
  {
LABEL_7:
    if (qword_3B5798 != -1)
      swift_once(&qword_3B5798, sub_11374C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_555F0(v15, (uint64_t)qword_3CF0D8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_0, v17, v18, "Unexpected editing state changed during reset", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_A2310()
{
  uint64_t v0;
  _QWORD *v1;
  char v2;
  uint64_t KeyPath;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;

  v1 = *(_QWORD **)(v0 + 32);
  ThemeAppearanceManager.themeVariant.getter();
  v25 = v2 & 1;
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v26, v1, KeyPath);
  swift_release();
  swift_release();
  v4 = v26;
  v22 = v26;
  v5 = BYTE2(v26);
  v20 = BYTE2(v26);
  v6 = v28;
  v21 = v27;
  v7 = v29;
  v8 = v30;
  v19 = v29;
  v9 = v31;
  v23 = v32;
  v10 = v33;

  v11 = v1[15];
  v24 = v1[16];
  v18 = sub_472D0(v1 + 12, v11);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v26) = v4;
  BYTE1(v26) = v25;
  BYTE2(v26) = v5;
  v27 = v21;
  v28 = v6;
  v12 = v6;
  v29 = v7;
  v30 = v8;
  v31 = v9;
  v32 = v23;
  v33 = v10;
  swift_bridgeObjectRetain(v21);
  sub_DDBB8((uint64_t)v18, (uint64_t)&v26, v11, v24);
  v14 = v13;
  v15 = swift_getKeyPath(&unk_2E8D50);
  v16 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v26) = v22;
  BYTE1(v26) = v25;
  BYTE2(v26) = v20;
  v27 = v21;
  v28 = v12;
  v29 = v19;
  v30 = v8;
  v31 = v9;
  v32 = v23;
  v33 = v10;
  v34 = v14;
  v17 = v14;
  swift_retain();
  static Published.subscript.setter(&v26, v1, v15, v16);
  sub_DC47C();

}

void sub_A24D8()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 64);
  if (!Strong
    || (v2 = Strong,
        v3 = objc_msgSend(Strong, "fonts"),
        swift_unknownObjectRelease(v2),
        !v3))
  {
    v6 = *(_QWORD *)(v0 + 32);
    KeyPath = swift_getKeyPath(&unk_2E8D98);
    v18 = swift_getKeyPath(&unk_2E8DC0);
    v21 = (unint64_t)_swiftEmptyArrayStorage;
LABEL_21:
    swift_retain();
    static Published.subscript.setter(&v21, v6, KeyPath, v18);
    return;
  }
  v4 = sub_319AC((uint64_t *)&unk_3B96A0);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  v6 = *(_QWORD *)(v0 + 32);
  v21 = (unint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v5 >> 62))
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v5);
    if (v7)
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease(v5);
    v19 = _swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease(v5);
    KeyPath = swift_getKeyPath(&unk_2E8D98);
    v18 = swift_getKeyPath(&unk_2E8DC0);
    v21 = (unint64_t)v19;
    goto LABEL_21;
  }
  if (v5 < 0)
    v20 = v5;
  else
    v20 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v20);
  if (!v7)
    goto LABEL_19;
LABEL_5:
  if (v7 >= 1)
  {
    v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      }
      else
      {
        v9 = *(_QWORD *)(v5 + 8 * v8 + 32);
        swift_unknownObjectRetain(v9);
      }
      v10 = type metadata accessor for ThemeFontViewModel(0);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48));
      swift_unknownObjectRetain(v9);
      v12 = sub_CCB3C(v11);
      swift_unknownObjectRelease(v9);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
      v15 = *(_QWORD *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFFF8));
      v14 = *(_QWORD *)((char *)&dword_18 + (v21 & 0xFFFFFFFFFFFFFF8));
      if (v15 >= v14 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
      ++v8;
      v16 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
      specialized Array._endMutation()(v16);
      swift_unknownObjectRelease(v9);
    }
    while (v7 != v8);
    swift_bridgeObjectRelease(v5);
    v19 = (_QWORD *)v21;
    goto LABEL_20;
  }
  __break(1u);
}

double sub_A272C()
{
  return sub_9F0C4();
}

double sub_A274C()
{
  return sub_9F1B0();
}

void sub_A276C(char a1)
{
  uint64_t *v1;

  sub_9FDFC(*v1, a1);
}

void sub_A279C(char a1)
{
  uint64_t *v1;

  sub_A0124(*v1, a1);
}

void sub_A27CC(double a1)
{
  uint64_t *v1;

  sub_A045C(*v1, a1);
}

void sub_A27F8(double a1)
{
  uint64_t *v1;

  sub_A0764(*v1, a1);
}

void sub_A2824(double a1)
{
  uint64_t *v1;

  sub_A0A94(*v1, a1);
}

void sub_A2850(double a1)
{
  uint64_t *v1;

  sub_A0DD4(*v1, a1);
}

void sub_A287C(char a1)
{
  uint64_t *v1;

  sub_A1110(*v1, a1);
}

void sub_A28AC(unsigned __int8 *a1)
{
  uint64_t *v1;

  sub_A1408(*v1, *a1);
}

double sub_A28E0(uint64_t a1)
{
  return sub_9FC60(a1);
}

id sub_A2900(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 16), "cancelDownload");
}

uint64_t sub_A2910(uint64_t a1)
{
  return sub_A1738(a1);
}

double sub_A2930()
{
  return sub_A18F4();
}

double sub_A2950()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  if (*(_QWORD *)(*(_QWORD *)v0 + 80))
  {
    v1 = swift_retain();
    sub_A1738(v1);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_A2990()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  *(_QWORD *)(*(_QWORD *)v0 + 80) = 0;
  return swift_release(v1);
}

uint64_t sub_A29A8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_23;
  v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    v4 = 4;
    while (1)
    {
      v5 = v4 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, a1);
      v7 = v4 - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_22;
LABEL_11:
      v8 = *(_QWORD *)(v6 + 64);
      v20 = *(_QWORD *)(v6 + 56);
      swift_bridgeObjectRetain(v8);
      v9 = objc_msgSend(a2, "familyName");
      if (v9)
      {
        v10 = v9;
        v11 = v3;
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v14 = v13;

        if (v20 == v12 && v8 == v14)
        {
          swift_bridgeObjectRelease(a1);
          swift_bridgeObjectRelease(v8);
LABEL_21:
          swift_bridgeObjectRelease(v8);
          return v6;
        }
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v8, v12, v14, 0);
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v14);
        if ((v16 & 1) != 0)
        {
          v8 = a1;
          goto LABEL_21;
        }
        swift_release(v6);
        v3 = v11;
      }
      else
      {
        swift_release(v6);
        swift_bridgeObjectRelease(v8);
      }
      ++v4;
      if (v7 == v3)
        goto LABEL_27;
    }
    v6 = *(_QWORD *)(a1 + 8 * v4);
    swift_retain(v6);
    v7 = v4 - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_11;
LABEL_22:
    __break(1u);
LABEL_23:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v17);
  }
LABEL_27:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_A2B8C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_A2BB4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_3B96B4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_3F0C0;
  return sub_A1AAC(a1, v4, v5, v7, v6);
}

void sub_A2C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t KeyPath;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;

  v6 = *(_QWORD *)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  static Published.subscript.getter(&v44, v6, KeyPath);
  swift_release();
  swift_release();
  v9 = v45;
  v8 = v46;
  v10 = v47;
  v11 = v48;
  v12 = v49;
  v13 = v50;
  v14 = v51;

  if (!v9)
  {
    v15 = swift_getKeyPath(&unk_2E8D50);
    swift_getKeyPath(&off_2E8D78);
    static Published.subscript.getter(&v44, v6, v15);
    swift_release();
    swift_release();
    v16 = v44;

    sub_387A4((uint64_t)_swiftEmptyArrayStorage);
    __asm { BR              X9 }
  }
  v40 = v11;
  v41 = v14;
  v39 = v12;
  swift_bridgeObjectRetain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  v44 = v9;
  sub_17DF58(a3, a4, a2, isUniquelyReferenced_nonNull_native);
  v43 = v44;
  swift_bridgeObjectRelease(0x8000000000000000);
  v18 = 256;
  if (((v8 >> 8) & 1) == 0)
    v18 = 0;
  v19 = v18 | v8 & 1;
  v20 = v13 & 0xFF01;
  v38 = v20;
  v21 = swift_getKeyPath(&unk_2E8D50);
  swift_getKeyPath(&off_2E8D78);
  v22 = v6;
  static Published.subscript.getter(&v44, v6, v21);
  swift_release();
  swift_release();
  v23 = v44;
  v24 = BYTE1(v44);
  v35 = BYTE1(v44);
  v36 = v44;
  v25 = BYTE2(v44);
  v37 = BYTE2(v44);
  v26 = v45;

  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(v6 + 120);
  v28 = *(_QWORD *)(v6 + 128);
  v29 = sub_472D0((_QWORD *)(v22 + 96), v27);
  sub_34450(0, (unint64_t *)&qword_3B9698, off_3764C8);
  LOBYTE(v44) = v23;
  BYTE1(v44) = v24;
  BYTE2(v44) = v25;
  v45 = v43;
  v46 = v19;
  v47 = v10;
  v48 = v40;
  v49 = v39;
  v50 = v20;
  v51 = v41;
  swift_bridgeObjectRetain(v43);
  sub_DDBB8((uint64_t)v29, (uint64_t)&v44, v27, v28);
  v31 = v30;
  v32 = swift_getKeyPath(&unk_2E8D50);
  v33 = swift_getKeyPath(&off_2E8D78);
  LOBYTE(v44) = v36;
  BYTE1(v44) = v35;
  BYTE2(v44) = v37;
  v45 = v43;
  v46 = v19;
  v47 = v10;
  v48 = v40;
  v49 = v39;
  v50 = v38;
  v51 = v41;
  v52 = v31;
  v34 = v31;
  swift_retain();
  static Published.subscript.setter(&v44, v22, v32, v33);
  sub_DC47C();

}

uint64_t sub_A2FBC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_A2FF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_3B96C4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_6B4A4;
  return sub_9F360(a1, v4, v5, v7, v6);
}

uint64_t sub_A3070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for NWPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_A30E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWPath(0) - 8) + 80);
  return sub_9E6AC(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_A3114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_A3124(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_A312C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8510;
  if (!qword_3B8510)
  {
    v1 = sub_31A38(&qword_3B96F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_3B8510);
  }
  return result;
}

uint64_t sub_A3178()
{
  return sub_44660();
}

_QWORD *sub_A318C(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_F5114(0, v1, 0);
    v3 = (_QWORD *)(a1 + 32);
    do
    {
      v4 = v3[3];
      v5 = v3[4];
      sub_472D0(v3, v4);
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_F5114(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v8 = _swiftEmptyArrayStorage[2];
      v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1)
        sub_F5114(v7 > 1, v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      _swiftEmptyArrayStorage[v8 + 4] = v6;
      v3 += 5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t BookContentInteractor.__allocating_init(contentHostEnvironmentProvider:dataManager:currentLocationProvider:currentLocationController:pageTurnController:initialContentLayoutProvider:readingSettingsProvider:layoutModeProvider:contentSizeCategoryProvider:annotationProviderService:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, uint8_t *a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v17 = a3[3];
  v16 = a3[4];
  v18 = sub_A33E0((uint64_t)a3, v17);
  v19 = sub_A8750(a1, a2, v18, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, v21, v17, v16);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a4);
  swift_unknownObjectRelease(a6);
  swift_unknownObjectRelease(a9);
  swift_unknownObjectRelease(a10);
  swift_unknownObjectRelease(a11);
  swift_unknownObjectRelease(a12);
  swift_unknownObjectRelease(a13);
  sub_34488(a3);
  return v19;
}

uint64_t sub_A33E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_A3408()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 160, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 160);
}

double sub_A344C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  _BYTE v6[24];

  swift_beginAccess(v2 + 160, v6, 1, 0);
  *(_QWORD *)(v2 + 168) = a2;
  swift_unknownObjectWeakAssign(v2 + 160, a1);
  *(_QWORD *)&result = swift_unknownObjectRelease(a1).n128_u64[0];
  return result;
}

void (*sub_A34AC(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 160, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 160);
  v5 = *(_QWORD *)(v1 + 168);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_A3518;
}

void sub_A3518(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 168) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 160, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t sub_A3588()
{
  return sub_A35A0(&OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider);
}

uint64_t sub_A3594()
{
  return sub_A35A0(&OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController);
}

uint64_t sub_A35A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];

  v2 = v1 + *a1;
  swift_beginAccess(v2, v4, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v2);
}

uint64_t sub_A35E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  _QWORD v5[2];

  CurrentValueSubject.value.getter(v5);
  v1 = v5[0];
  v0 = v5[1];
  ObjectType = swift_getObjectType(v5[0]);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 24))(ObjectType, v0);
  swift_unknownObjectRelease(v1);
  return v3;
}

uint64_t sub_A3644()
{
  uint64_t v1;

  CurrentValueSubject.value.getter(&v1);
  return v1;
}

uint64_t sub_A367C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_319AC(&qword_3B7028);
  v1 = sub_3DCC0(&qword_3B7030, &qword_3B7028, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t BookContentInteractor.init(contentHostEnvironmentProvider:dataManager:currentLocationProvider:currentLocationController:pageTurnController:initialContentLayoutProvider:readingSettingsProvider:layoutModeProvider:contentSizeCategoryProvider:annotationProviderService:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint8_t *a17, uint64_t a18)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v47 = a7;
  v48 = a8;
  v45 = a5;
  v46 = a6;
  v44 = a2;
  v43 = a9;
  v40 = a11;
  v41 = a10;
  v38 = a13;
  v39 = a12;
  v37 = a14;
  v22 = a3[3];
  v21 = a3[4];
  v23 = sub_A33E0((uint64_t)a3, v22);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v36 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v27 + 16))(v26, v24);
  v34 = v22;
  v35 = v21;
  v28 = v38;
  v29 = v40;
  v30 = v43;
  v31 = v46;
  v32 = sub_A7E3C(a1, v44, (uint64_t)v26, a4, v45, v46, v47, v48, v43, v41, v40, v39, v38, v37, a15, a16, a17, a18, v42,
          v34,
          v35);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a4);
  swift_unknownObjectRelease(v31);
  swift_unknownObjectRelease(v30);
  swift_unknownObjectRelease(v29);
  swift_unknownObjectRelease(v28);
  swift_unknownObjectRelease(a15);
  swift_unknownObjectRelease(a17);
  sub_34488(a3);
  return v32;
}

double sub_A388C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[3];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, (char *)v8 + 1, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    v7 = sub_319AC(&qword_3B9B88);
    NSKeyValueObservedChange.newValue.getter(v8, v7);
    if (LOBYTE(v8[0]) != 2)
      *(_BYTE *)(v6 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePage) = v8[0] & 1;
    *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  }
  return result;
}

id sub_A3910@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "BEDocumentExternalLoadApprovalCacheDidReset");
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_A3940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __n128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = sub_A9158;
  v22 = a3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_37E560;
  v12 = _Block_copy(aBlock);
  v13 = v22;
  swift_retain(a3);
  v14 = swift_release(v13);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_6B3E4();
  v16 = sub_319AC(&qword_3B96F0);
  v17 = sub_3DCC0((unint64_t *)&qword_3B8510, &qword_3B96F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

double sub_A3B24(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v4 = Strong;
    v5 = Strong + 160;
    swift_beginAccess(Strong + 160, &v9, 0, 0);
    v6 = swift_unknownObjectWeakLoadStrong(v5);
    v7 = *(_QWORD *)(v4 + 168);
    swift_release(v4);
    if (v6)
    {
      ObjectType = swift_getObjectType(v6);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(ObjectType, v7);
      *(_QWORD *)&result = swift_unknownObjectRelease(v6).n128_u64[0];
    }
  }
  return result;
}

void sub_A3BC4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  __n128 v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  char *v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __int128 v122[2];
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126[8];

  v1 = v0;
  v2 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v119 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_319AC(&qword_3B9AF0);
  v111 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v121 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_319AC(&qword_3B9AF8);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115);
  v113 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_319AC(&qword_3B9B00);
  v117 = *(_QWORD *)(v8 - 8);
  v118 = v8;
  __chkstk_darwin(v8);
  v116 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_319AC(&qword_3B9B08);
  v10 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112);
  v120 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_319AC(&qword_3B9B10);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider;
  swift_beginAccess(v16, v126, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v16);
  if (Strong)
  {
    v18 = Strong;
    v109 = v3;
    v19 = *((_QWORD *)v16 + 1);
    v20 = (char *)v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_readingSettingsProvider;
    v21 = swift_unknownObjectWeakLoadStrong((char *)v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_readingSettingsProvider);
    if (v21)
    {
      v101 = *((_QWORD *)v20 + 1);
      v110 = v21;
      v108 = v13;
      v106 = v10;
      v22 = v1[5];
      v23 = v1[6];
      sub_472D0(v1 + 2, v22);
      v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
      v26 = v25;
      ObjectType = swift_getObjectType(v24);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v26 + 8))(&v125, ObjectType, v26);
      swift_unknownObjectRelease(v24);
      CurrentValueSubject.value.getter(v122);
      v28 = v122[0];
      v29 = swift_getObjectType(*(_QWORD *)&v122[0]);
      v105 = (*(uint64_t (**)(uint64_t, _QWORD))(*((_QWORD *)&v28 + 1) + 152))(v29, *((_QWORD *)&v28 + 1));
      swift_unknownObjectRelease(v28);
      v30 = swift_getObjectType(v18);
      *(_QWORD *)&v122[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v30, v19);
      KeyPath = swift_getKeyPath(&unk_2E90E0);
      v32 = sub_319AC(&qword_3B9B18);
      v103 = v2;
      v33 = v32;
      v34 = sub_3DCC0(&qword_3B9B20, &qword_3B9B18, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.map<A>(_:)(KeyPath, v33, v34);
      swift_release(KeyPath);
      swift_release(*(_QWORD *)&v122[0]);
      v35 = v1[15];
      v36 = swift_getObjectType(v1[14]);
      v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 16))(v36, v35);
      *(_QWORD *)&v122[0] = v100;
      v37 = sub_189BBC(v30, v19);
      v99 = v5;
      v38 = v37;
      v124 = v37;
      v39 = v1[17];
      v40 = swift_getObjectType(v1[16]);
      v41 = sub_B3344(v40, v39);
      v123 = v41;
      v98 = sub_319AC((uint64_t *)&unk_3BCEA0);
      v107 = v18;
      v97 = sub_319AC(&qword_3B9B28);
      v104 = v12;
      v42 = sub_319AC((uint64_t *)&unk_3BC540);
      v102 = v15;
      v43 = v42;
      v44 = sub_3DCC0(&qword_3B9B30, &qword_3B9AF0, (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
      v45 = sub_3DCC0(&qword_3B9B38, (uint64_t *)&unk_3BCEA0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v46 = sub_3DCC0(&qword_3B9B40, &qword_3B9B28, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v47 = sub_3DCC0((unint64_t *)&unk_3C00D0, (uint64_t *)&unk_3BC540, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v95 = v46;
      v48 = v113;
      v49 = v99;
      v50 = v44;
      v51 = v121;
      Publisher.combineLatest<A, B, C>(_:_:_:)(v122, &v124, &v123, v99, v98, v97, v43, v50, v45, v95, v47);
      swift_release(v100);
      swift_release(v38);
      v52 = swift_release(v41);
      (*(void (**)(char *, uint64_t, __n128))(v111 + 8))(v51, v49, v52);
      v53 = swift_getObjectType(v110);
      v54 = v101;
      v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 40))(v53, v101);
      *(_QWORD *)&v122[0] = v55;
      v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 24))(v53, v54);
      v124 = v56;
      v57 = sub_319AC(&qword_3B9B48);
      v58 = sub_319AC((uint64_t *)&unk_3BE750);
      v59 = sub_3DCC0(&qword_3B9B50, &qword_3B9AF8, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>);
      v60 = sub_3DCC0((unint64_t *)&unk_3BE780, &qword_3B9B48, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v61 = sub_3DCC0(&qword_3B9B58, (uint64_t *)&unk_3BE750, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v62 = v116;
      v63 = v115;
      Publisher.combineLatest<A, B>(_:_:)(v122, &v124, v115, v57, v58, v59, v60, v61);
      swift_release(v55);
      v64 = swift_release(v56);
      (*(void (**)(char *, uint64_t, __n128))(v114 + 8))(v48, v63, v64);
      v65 = v119;
      static NSRunLoop.SchedulerTimeType.Stride.milliseconds(_:)(50);
      v66 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
      *(_QWORD *)&v122[0] = v66;
      v67 = sub_34450(0, &qword_3B9B60, NSRunLoop_ptr);
      v68 = sub_3DCC0(&qword_3B9B68, &qword_3B9B00, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
      v69 = sub_A9064();
      v70 = v120;
      v71 = v118;
      Publisher.throttle<A>(for:scheduler:latest:)(v65, v122, 1, v118, v67, v68, v69);

      (*(void (**)(char *, uint64_t))(v109 + 8))(v65, v103);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v62, v71);
      sub_49F1C((uint64_t)&v125, (uint64_t)v122);
      v72 = swift_allocObject(&unk_37E520, 57, 7);
      sub_3F1CC(v122, v72 + 16);
      *(_BYTE *)(v72 + 56) = v105 & 1;
      v73 = sub_319AC(&qword_3B7038);
      v74 = sub_3DCC0(&qword_3B9B78, &qword_3B9B08, (uint64_t)&protocol conformance descriptor for Publishers.Throttle<A, B>);
      v75 = v102;
      v76 = v112;
      Publisher.map<A>(_:)(sub_A90E0, v72, v112, v73, v74);
      v77 = swift_release(v72);
      (*(void (**)(char *, uint64_t, __n128))(v106 + 8))(v70, v76, v77);
      v78 = swift_allocObject(&unk_37E548, 24, 7);
      swift_weakInit(v78 + 16, v1);
      v79 = sub_3DCC0(&qword_3B9B80, &qword_3B9B10, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      v80 = v104;
      v81 = Publisher<>.sink(receiveValue:)(sub_A9110, v78, v104, v79);
      v82 = swift_release(v78);
      (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v75, v80, v82);
      v83 = (char *)v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_cancellables;
      v84 = swift_beginAccess((char *)v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_cancellables, v122, 33, 0);
      AnyCancellable.store(in:)(v83, v84);
      swift_endAccess(v122);
      swift_release(v81);
      v85 = v1[10];
      v86 = v1[11];
      sub_472D0(v1 + 7, v85);
      *(_QWORD *)&v122[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v86 + 24))(v85, v86);
      v87 = swift_allocObject(&unk_37E548, 24, 7);
      swift_weakInit(v87 + 16, v1);
      v88 = sub_319AC((uint64_t *)&unk_3BE7C0);
      v89 = sub_3DCC0(&qword_3B7010, (uint64_t *)&unk_3BE7C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v90 = Publisher<>.sink(receiveValue:)(sub_A9118, v87, v88, v89);
      swift_release(v87);
      swift_release(*(_QWORD *)&v122[0]);
      v91 = swift_beginAccess(v83, v122, 33, 0);
      AnyCancellable.store(in:)(v83, v91);
      swift_endAccess(v122);
      swift_unknownObjectRelease(v107);
      swift_unknownObjectRelease(v110);
      swift_release(v90);
      sub_34488(&v125);
      return;
    }
    swift_unknownObjectRelease(v18);
  }
  v92 = Logger.logObject.getter(Strong);
  v93 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v92, v93))
  {
    v94 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v94 = 0;
    swift_slowDealloc(v94, -1, -1);
  }

}

uint64_t sub_A45C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  __int128 v17;
  __int128 v18;
  void *v19;
  uint64_t ObjectType;
  unint64_t v21;
  uint64_t v22;
  _BYTE v24[8];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];

  v6 = *(double *)a1;
  v7 = *(double *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 32);
  v19 = *(void **)(a1 + 40);
  v9 = *(double *)(a1 + 48);
  v10 = *(_BYTE *)(a1 + 56);
  v11 = *(_BYTE *)(a1 + 57);
  v12 = *(_BYTE *)(a1 + 58);
  v13 = *(_QWORD *)(a1 + 64);
  v17 = *(_OWORD *)(a1 + 88);
  v18 = *(_OWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 104);
  v15 = *(_QWORD *)(a1 + 112);
  ObjectType = swift_getObjectType(v8);
  type metadata accessor for ContentLayoutProvider(0);
  sub_49F1C(a2, (uint64_t)v30);
  v24[0] = v10;
  v24[1] = v11;
  v24[2] = v12;
  v25 = v13;
  v26 = v18;
  v27 = v17;
  v28 = v14;
  v29 = v15;
  swift_bridgeObjectRetain(v13);
  swift_unknownObjectRetain(v8);
  result = ContentLayoutProvider.__allocating_init<A>(bookEntity:availableSize:layout:layoutEnvironment:fontSizeCategory:textZoomFactor:useNewTextStyling:theme:)(v30, v21, v8, v19, a3, (uint64_t)v24, ObjectType, v22, v6, v7, v9);
  *a4 = result;
  a4[1] = (uint64_t)&protocol witness table for ContentLayoutProvider;
  return result;
}

double sub_A46F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    sub_A4760(v2, v3);
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

void sub_A4760(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int16 v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[3];
  uint64_t v94;
  uint64_t v95;
  _OWORD v96[3];
  uint64_t v97;

  v3 = v2;
  v5 = a1;
  v6 = (uint64_t)v2 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage;
  if (*((_BYTE *)v2 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage) == 1)
  {
    v7 = swift_unknownObjectRetain_n(a1, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter();
    v80 = a2;
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v95 = v11;
      *(_DWORD *)v10 = 136315138;
      ObjectType = swift_getObjectType(v5);
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 184))(ObjectType, a2);
      v15 = v14;
      v92 = sub_33524(v13, v14, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v10 + 4);
      swift_unknownObjectRelease_n(v5, 2);
      swift_bridgeObjectRelease(v15);
      v16 = "Content is currently showing fullscreen. Blocking repagination & configuration update with %s";
LABEL_4:
      _os_log_impl(&dword_0, v8, v9, v16, v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
LABEL_12:

      CurrentValueSubject.value.getter(&v95);
      v31 = v95;
      v32 = *(_QWORD *)(v6 + 8);
      if (v32)
      {
        v33 = *(_QWORD *)(v6 + 16);
      }
      else
      {
        v33 = *(_QWORD *)&v96[0];
        swift_unknownObjectRetain(v95);
        v32 = v31;
      }
      *(_QWORD *)(v6 + 8) = v32;
      *(_QWORD *)(v6 + 16) = v33;
      v34 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = v5;
      *(_QWORD *)(v6 + 32) = v80;
      swift_unknownObjectRetain(v5);
      swift_unknownObjectRelease(v31);
LABEL_27:
      swift_unknownObjectRelease(v34);
      return;
    }
    goto LABEL_11;
  }
  if (*(_BYTE *)(v6 + 1) == 1)
  {
    v17 = swift_unknownObjectRetain_n(a1, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v95 = v21;
      *(_DWORD *)v20 = 136315138;
      v22 = swift_getObjectType(v5);
      v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 184))(v22, a2);
      v25 = v24;
      v92 = sub_33524(v23, v24, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v20 + 4);
      swift_unknownObjectRelease_n(v5, 2);
      swift_bridgeObjectRelease(v25);
      _os_log_impl(&dword_0, v18, v19, "Reading settings are presented. Blocking repagination & configuration update with %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n(v5, 2);
    }

    CurrentValueSubject.value.getter(&v95);
    v35 = v95;
    v36 = *(_QWORD *)(v6 + 8);
    if (v36)
    {
      v37 = *(_QWORD *)(v6 + 16);
    }
    else
    {
      v37 = *(_QWORD *)&v96[0];
      swift_unknownObjectRetain(v95);
      v36 = v35;
    }
    *(_QWORD *)(v6 + 8) = v36;
    *(_QWORD *)(v6 + 16) = v37;
    v50 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = v5;
    *(_QWORD *)(v6 + 32) = a2;
    swift_unknownObjectRetain(v5);
    swift_unknownObjectRelease(v35);
    swift_unknownObjectRelease(v50);
    v51 = v3 + 2;
    v53 = v3[5];
    v52 = v3[6];
    sub_472D0(v51, v53);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 16))(v53, v52);
    v55 = v54;
    v56 = swift_getObjectType(v34);
    LOBYTE(v95) = 2;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v55 + 64))(v5, a2, &v95, v56, v55);
    v95 = v5;
    *(_QWORD *)&v96[0] = a2;
    v57 = swift_unknownObjectRetain(v5);
    CurrentValueSubject.value.setter(&v95, v57);
    goto LABEL_27;
  }
  if (*(_BYTE *)(v6 + 2) == 1)
  {
    v26 = swift_unknownObjectRetain_n(a1, 2);
    v8 = Logger.logObject.getter(v26);
    v9 = static os_log_type_t.info.getter();
    v80 = a2;
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v95 = v11;
      *(_DWORD *)v10 = 136315138;
      v27 = swift_getObjectType(v5);
      v28 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 184))(v27, a2);
      v30 = v29;
      v92 = sub_33524(v28, v29, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v10 + 4);
      swift_unknownObjectRelease_n(v5, 2);
      swift_bridgeObjectRelease(v30);
      v16 = "In an interactive state. Blocking repagination & configuration update with %s";
      goto LABEL_4;
    }
LABEL_11:
    swift_unknownObjectRelease_n(v5, 2);
    goto LABEL_12;
  }
  CurrentValueSubject.value.getter(&v95);
  v38 = v95;
  v39 = *(_QWORD *)&v96[0];
  v40 = swift_getObjectType(v95);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 184))(v40, v39);
  v43 = v42;
  swift_unknownObjectRelease(v38);
  v44 = swift_getObjectType(v5);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 184))(v44, a2);
  if (v41 == v45 && v43 == v46)
  {
    swift_bridgeObjectRelease_n(v43, 2);
  }
  else
  {
    v48 = v46;
    v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v45, v46, 0);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v48);
    if ((v49 & 1) == 0)
    {
      sub_A7890(v5, a2, 0);
      return;
    }
  }
  v58 = swift_retain_n(v3, 2);
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v59, v60))
  {
    v77 = v44;
    v61 = (uint8_t *)swift_slowAlloc(12, -1);
    v76 = swift_slowAlloc(32, -1);
    v92 = v76;
    *(_DWORD *)v61 = 136315138;
    CurrentValueSubject.value.getter(&v95);
    v62 = v95;
    v63 = *(_QWORD *)&v96[0];
    v64 = swift_getObjectType(v95);
    v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 184))(v64, v63);
    v66 = v5;
    v67 = a2;
    v69 = v68;
    swift_unknownObjectRelease(v62);
    v95 = sub_33524(v65, v69, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v61 + 4);
    swift_release_n(v3, 2);
    v70 = v69;
    a2 = v67;
    v5 = v66;
    swift_bridgeObjectRelease(v70);
    _os_log_impl(&dword_0, v59, v60, "Already configured for #contentConfig:%s", v61, 0xCu);
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    v71 = v61;
    v44 = v77;
    swift_slowDealloc(v71, -1, -1);
  }
  else
  {
    swift_release_n(v3, 2);
  }

  CurrentValueSubject.value.getter(&v95);
  v72 = v95;
  v73 = *(_QWORD *)&v96[0];
  v74 = swift_getObjectType(v95);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v73 + 160))(&v95, v74, v73);
  swift_unknownObjectRelease(v72);
  LOWORD(v92) = v95;
  BYTE2(v92) = BYTE2(v95);
  v79 = *(_QWORD *)&v96[0];
  v93[0] = v96[0];
  v93[1] = v96[1];
  v93[2] = v96[2];
  v94 = v97;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 160))(&v87, v44, a2);
  v81 = v87;
  v82 = BYTE2(v87);
  v78 = v88;
  v83 = v88;
  v84 = v89;
  v85 = v90;
  v86 = v91;
  LOBYTE(v72) = _s8BookEPUB0A11ThemeEntityV2eeoiySbAC_ACtFZ_0((uint64_t)&v92, (uint64_t)&v81);
  swift_bridgeObjectRelease(v78);
  swift_bridgeObjectRelease(v79);
  if ((v72 & 1) == 0)
  {
    v95 = v5;
    *(_QWORD *)&v96[0] = a2;
    v75 = swift_unknownObjectRetain(v5);
    CurrentValueSubject.value.setter(&v95, v75);
  }
}

double sub_A4FCC(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  if ((*a1 & 1) != 0)
  {
    swift_beginAccess(v2, v7, 0, 0);
    Strong = swift_weakLoadStrong(v2);
    if (!Strong)
      return result;
    v5 = Strong;
    _s8BookEPUB0A17ContentInteractorC24contentDidExitFullscreenyyF_0();
  }
  else
  {
    swift_beginAccess(v2, v7, 0, 0);
    v6 = swift_weakLoadStrong(v2);
    if (!v6)
      return result;
    v5 = v6;
    *(_BYTE *)(v6 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 2) = 1;
  }
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

double _s8BookEPUB0A17ContentInteractorC24contentDidExitFullscreenyyF_0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t (*v8)(uint64_t, uint64_t, __n128);
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  double result;

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage;
  v2 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 1);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 8);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 16);
  v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 24);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 32);
  *(_WORD *)v1 = 0;
  *(_BYTE *)(v1 + 2) = 0;
  *(_OWORD *)(v1 + 8) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  if (v3)
  {
    if (!v5)
    {
LABEL_12:
      v20 = v3;
      goto LABEL_13;
    }
    ObjectType = swift_getObjectType(v3);
    v8 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v4 + 184);
    swift_unknownObjectRetain(v3);
    v9 = swift_unknownObjectRetain(v5);
    v10 = v8(ObjectType, v4, v9);
    v12 = v11;
    v13 = swift_getObjectType(v5);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 184))(v13, v6);
    if (v10 == v14 && v12 == v15)
    {
      swift_bridgeObjectRelease_n(v12, 2);
      swift_unknownObjectRelease(v3);
      swift_unknownObjectRelease(v5);
      if ((v2 & 1) != 0)
        goto LABEL_8;
    }
    else
    {
      v17 = v15;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v15, 0);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v17);
      swift_unknownObjectRelease(v3);
      swift_unknownObjectRelease(v5);
      if (v2 & 1 | ((v18 & 1) == 0))
      {
LABEL_8:
        swift_unknownObjectRetain(v5);
        sub_A7890(v19, v6, 0);
        swift_unknownObjectRelease_n(v5, 2);
        goto LABEL_12;
      }
    }
    swift_unknownObjectRelease(v5);
    goto LABEL_12;
  }
  v20 = v5;
LABEL_13:
  *(_QWORD *)&result = swift_unknownObjectRelease(v20).n128_u64[0];
  return result;
}

void sub_A51C4()
{
  qword_3CF008 = 0x4024000000000000;
}

uint64_t sub_A51D4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  char v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  _BYTE v12[24];

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_ignoreAllPageTurns) & 1) != 0)
  {
    v2 = Logger.logObject.getter(a1);
    v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_0, v2, v3, "Intentionally ignore page drag", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    v5 = 0;
  }
  else
  {
    v6 = v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider, v12, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v6);
    if (Strong)
    {
      v8 = Strong;
      v9 = *(_QWORD *)(v6 + 8);
      ObjectType = swift_getObjectType(Strong);
      LOBYTE(v9) = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 120))(ObjectType, v9);
      swift_unknownObjectRelease(v8);
      v5 = v9 ^ 1;
    }
    else
    {
      v5 = 1;
    }
  }
  return v5 & 1;
}

uint64_t sub_A52EC(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  char v7;
  _BYTE v9[8];
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_49F1C(v1 + 56, (uint64_t)v11);
  v3 = v12;
  v4 = v13;
  sub_472D0(v11, v12);
  if ((sub_A56DC() & 1) != 0)
  {
    if (qword_3B5830 != -1)
      swift_once(&qword_3B5830, sub_185970);
    v5 = &word_3BF2F8;
  }
  else
  {
    if (qword_3B5838 != -1)
      swift_once(&qword_3B5838, sub_1859EC);
    v5 = &word_3BF308;
  }
  v6 = *((_QWORD *)v5 + 1);
  v7 = *((_BYTE *)v5 + 1);
  v9[0] = *(_BYTE *)v5;
  v9[1] = v7;
  v10 = v6;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 40))(v9, a1 & 1, v3, v4);
  return sub_34488(v11);
}

uint64_t sub_A53E8(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  char v7;
  _BYTE v9[8];
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  sub_49F1C(v1 + 56, (uint64_t)v11);
  v3 = v12;
  v4 = v13;
  sub_472D0(v11, v12);
  if ((sub_A56DC() & 1) != 0)
  {
    if (qword_3B5838 != -1)
      swift_once(&qword_3B5838, sub_1859EC);
    v5 = &word_3BF308;
  }
  else
  {
    if (qword_3B5830 != -1)
      swift_once(&qword_3B5830, sub_185970);
    v5 = &word_3BF2F8;
  }
  v6 = *((_QWORD *)v5 + 1);
  v7 = *((_BYTE *)v5 + 1);
  v9[0] = *(_BYTE *)v5;
  v9[1] = v7;
  v10 = v6;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v4 + 40))(v9, a1 & 1, v3, v4);
  return sub_34488(v11);
}

void sub_A54E4(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_A5514()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 *v3;
  uint64_t v4;
  char v5;
  char v6;
  _BYTE v8[8];
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  sub_49F1C(v0 + 56, (uint64_t)v10);
  v1 = v11;
  v2 = v12;
  sub_472D0(v10, v11);
  if ((sub_A56DC() & 1) != 0)
  {
    if (qword_3B5830 != -1)
      swift_once(&qword_3B5830, sub_185970);
    v3 = &word_3BF2F8;
  }
  else
  {
    if (qword_3B5838 != -1)
      swift_once(&qword_3B5838, sub_1859EC);
    v3 = &word_3BF308;
  }
  v4 = *((_QWORD *)v3 + 1);
  v5 = *((_BYTE *)v3 + 1);
  v8[0] = *(_BYTE *)v3;
  v8[1] = v5;
  v9 = v4;
  v6 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v2 + 32))(v8, v1, v2);
  sub_34488(v10);
  return v6 & 1;
}

uint64_t sub_A561C(double a1, double a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[10];
  v6 = v2[11];
  sub_472D0(v2 + 7, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double))(v6 + 56))(v5, v6, a1, a2);
}

uint64_t sub_A5678(uint64_t a1, double a2, double a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;

  v7 = v3[10];
  v8 = v3[11];
  sub_472D0(v3 + 7, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double))(v8 + 64))(a1, v7, v8, a2, a3);
}

uint64_t sub_A56DC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v1 = 0xEB00000000746665;
  v2 = v0[5];
  v3 = v0[6];
  sub_472D0(v0 + 2, v2);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  v6 = v5;
  ObjectType = swift_getObjectType(v4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 8))(v12, ObjectType, v6);
  swift_unknownObjectRelease(v4);
  v8 = v13;
  v9 = v14;
  sub_472D0(v12, v13);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 128))(v8, v9) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    v1 = 0xEB00000000746867;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69526F547466656CLL, 0xEB00000000746867, 0x4C6F547468676972, 0xEB00000000746665, 0);
  }
  swift_bridgeObjectRelease(v1);
  sub_34488(v12);
  return v10 & 1;
}

uint64_t sub_A57DC(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;

  v9 = v4[10];
  v10 = v4[11];
  sub_472D0(v4 + 7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v10 + 72))(v9, v10, a1, a2, a3, a4);
}

uint64_t sub_A5850(double a1, double a2, double a3, double a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;

  v9 = v4[10];
  v10 = v4[11];
  sub_472D0(v4 + 7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v10 + 80))(v9, v10, a1, a2, a3, a4);
}

uint64_t sub_A58C4(uint64_t a1, double a2, double a3, double a4, double a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;

  v11 = v5[10];
  v12 = v5[11];
  sub_472D0(v5 + 7, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v12 + 88))(a1, v11, v12, a2, a3, a4, a5);
}

uint64_t sub_A5940()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[10];
  v2 = v0[11];
  sub_472D0(v0 + 7, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t sub_A5984(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_ignoreAllPageTurns) = result;
  return result;
}

BOOL sub_A5994(double a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v14;
  uint64_t v15;

  CurrentValueSubject.value.getter(&v14);
  v5 = v14;
  v6 = v15;
  ObjectType = swift_getObjectType(v14);
  v8 = (*(double (**)(uint64_t, uint64_t))(v6 + 64))(ObjectType, v6);
  swift_unknownObjectRelease(v5);
  CurrentValueSubject.value.getter(&v14);
  v10 = v14;
  v9 = v15;
  v11 = swift_getObjectType(v14);
  v12 = (*(double (**)(uint64_t, uint64_t))(v9 + 80))(v11, v9);
  swift_unknownObjectRelease(v10);
  return v12 - v8 - a3 < a1 || v8 + a3 > a1;
}

BOOL sub_A5A5C(double a1, double a2)
{
  if (qword_3B5730 != -1)
    swift_once(&qword_3B5730, sub_A51C4);
  return sub_A5994(a1, a2, *(double *)&qword_3CF008);
}

void sub_A5AAC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  CGFloat y;
  CGFloat x;
  CGFloat width;
  CGFloat height;
  _QWORD *v33;
  double v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  unint64_t v49;
  unint64_t v50;
  int64_t v51;
  unint64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  BOOL v57;
  uint64_t v58;
  CGFloat v59;
  CGFloat v60;
  CGFloat v61;
  CGFloat v62;
  _QWORD *v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[4];
  CGPoint v75;
  CGPoint v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;
  CGRect v83;
  CGRect v84;
  CGRect v85;
  CGRect v86;

  v2 = *a1;
  v3 = *((double *)a1 + 1);
  v4 = *((double *)a1 + 2);
  v5 = v1[5];
  v6 = v1[6];
  sub_472D0(v1 + 2, v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  v9 = v8;
  ObjectType = swift_getObjectType(v7);
  v11 = (double *)(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
  swift_unknownObjectRelease(v7);
  v71 = v2;
  v74[0] = v2;
  v12 = BookPaginationEntity.document(with:)(v74);
  swift_release();
  if (!v12)
  {
    v36 = Logger.logObject.getter(v13);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v74[0] = v39;
      *(_DWORD *)v38 = 136315138;
      v40 = sub_5D6E8(v71, v3, v4);
      v42 = v41;
      v72 = sub_33524(v40, v41, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v38 + 4);
      swift_bridgeObjectRelease(v42);
      _os_log_impl(&dword_0, v36, v37, "Failed to get document for document point: %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }

    return;
  }
  v14 = (_QWORD *)(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName);
  swift_beginAccess(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName, v74, 0, 0);
  v66 = *v14 + 64;
  v15 = 1 << *(_BYTE *)(*v14 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(*v14 + 64);
  v67 = (unint64_t)(v15 + 63) >> 6;
  v69 = *v14;
  swift_bridgeObjectRetain_n(*v14, 2);
  v18 = 0;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_25;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
      goto LABEL_95;
    if (v21 >= v67)
      break;
    v22 = *(_QWORD *)(v66 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v67)
        break;
      v22 = *(_QWORD *)(v66 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v67)
          break;
        v22 = *(_QWORD *)(v66 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v67)
            break;
          v22 = *(_QWORD *)(v66 + 8 * v18);
          if (!v22)
          {
            v18 = v21 + 4;
            if (v21 + 4 >= v67)
              break;
            v22 = *(_QWORD *)(v66 + 8 * v18);
            if (!v22)
            {
              v23 = v21 + 5;
              if (v23 >= v67)
                break;
              v22 = *(_QWORD *)(v66 + 8 * v23);
              if (!v22)
              {
                while (1)
                {
                  v18 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    goto LABEL_97;
                  if (v18 >= v67)
                    goto LABEL_48;
                  v22 = *(_QWORD *)(v66 + 8 * v18);
                  ++v23;
                  if (v22)
                    goto LABEL_24;
                }
              }
              v18 = v23;
            }
          }
        }
      }
    }
LABEL_24:
    v17 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_25:
    v24 = *(_QWORD *)(*(_QWORD *)(v69 + 56) + 8 * v20);
    v11 = *(double **)(v24 + 32);
    v25 = *((_QWORD *)v11 + 2);
    v26 = v25 != 0;
    v27 = v25 == 0;
    if (!v25)
      goto LABEL_100;
    v28 = *((_QWORD *)v11 + 4);
    x = v11[5];
    y = v11[6];
    width = v11[7];
    height = v11[8];
    if (v25 != v26)
    {
      if (v25 > v26)
      {
        v33 = v11 + 4;
        swift_bridgeObjectRetain(*(_QWORD *)(v24 + 32));
        while (1)
        {
          if (v27)
          {
            v34 = x;
          }
          else
          {
            v34 = 0.0;
            if (v33[5 * v26] == v28)
            {
              v77.origin.x = x;
              v77.origin.y = y;
              v77.size.width = width;
              v77.size.height = height;
              v78 = CGRectUnion(v77, *(CGRect *)&v33[5 * v26 + 1]);
              x = v78.origin.x;
              y = v78.origin.y;
              width = v78.size.width;
              height = v78.size.height;
              if (v26 + 1 == v25)
              {
LABEL_41:
                swift_bridgeObjectRelease(v11);
                goto LABEL_42;
              }
              v35 = (uint64_t)&v11[5 * v26++ + 13];
              while (*(_QWORD *)(v35 - 32) == v28)
              {
                v79.origin.x = x;
                v79.origin.y = y;
                v79.size.width = width;
                v79.size.height = height;
                v80 = CGRectUnion(v79, *(CGRect *)(v35 - 24));
                x = v80.origin.x;
                y = v80.origin.y;
                width = v80.size.width;
                height = v80.size.height;
                ++v26;
                v35 += 40;
                if (v25 == v26)
                  goto LABEL_41;
              }
            }
            v28 = 0;
            y = 0.0;
            width = 0.0;
            height = 0.0;
          }
          ++v26;
          v27 = 1;
          x = v34;
          if (v26 == v25)
            goto LABEL_99;
        }
      }
      __break(1u);
LABEL_94:
      __break(1u);
LABEL_95:
      __break(1u);
LABEL_96:
      __break(1u);
LABEL_97:
      __break(1u);
      goto LABEL_98;
    }
LABEL_42:
    if (v28 == v71)
    {
      v81.origin.x = x;
      v81.origin.y = y;
      v81.size.width = width;
      v81.size.height = height;
      v75.x = v3;
      v75.y = v4;
      if (CGRectContainsPoint(v81, v75))
        break;
    }
  }
LABEL_48:
  swift_release();
  swift_bridgeObjectRelease(v69);
  v43 = v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName;
  swift_beginAccess(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName, &v72, 0, 0);
  v44 = *(_QWORD *)v43;
  v68 = *(_QWORD *)v43 + 64;
  v45 = 1 << *(_BYTE *)(*(_QWORD *)v43 + 32);
  v46 = -1;
  if (v45 < 64)
    v46 = ~(-1 << v45);
  v47 = v46 & *(_QWORD *)(*(_QWORD *)v43 + 64);
  v70 = (unint64_t)(v45 + 63) >> 6;
  swift_bridgeObjectRetain_n(v44, 2);
  v48 = 0;
LABEL_51:
  if (v47)
  {
    v49 = __clz(__rbit64(v47));
    v47 &= v47 - 1;
    v50 = v49 | (v48 << 6);
LABEL_71:
    v54 = *(_QWORD *)(*(_QWORD *)(v44 + 56) + 8 * v50);
    v11 = *(double **)(v54 + 32);
    v55 = *((_QWORD *)v11 + 2);
    v56 = v55 != 0;
    v57 = v55 == 0;
    if (!v55)
      goto LABEL_102;
    v58 = *((_QWORD *)v11 + 4);
    v60 = v11[5];
    v59 = v11[6];
    v61 = v11[7];
    v62 = v11[8];
    if (v55 == v56)
      goto LABEL_88;
    if (v55 <= v56)
      goto LABEL_94;
    v63 = v11 + 4;
    swift_bridgeObjectRetain(*(_QWORD *)(v54 + 32));
    while (1)
    {
      if (v57)
      {
        v64 = v60;
      }
      else
      {
        v64 = 0.0;
        if (v63[5 * v56] == v58)
        {
          v82.origin.x = v60;
          v82.origin.y = v59;
          v82.size.width = v61;
          v82.size.height = v62;
          v83 = CGRectUnion(v82, *(CGRect *)&v63[5 * v56 + 1]);
          v60 = v83.origin.x;
          v59 = v83.origin.y;
          v61 = v83.size.width;
          v62 = v83.size.height;
          if (v56 + 1 == v55)
          {
LABEL_87:
            swift_bridgeObjectRelease(v11);
LABEL_88:
            if (v58 == v71)
            {
              v86.origin.x = v60;
              v86.origin.y = v59;
              v86.size.width = v61;
              v86.size.height = v62;
              v76.x = v3;
              v76.y = v4;
              if (CGRectContainsPoint(v86, v76))
              {
LABEL_90:
                swift_release();
                swift_release();
                swift_bridgeObjectRelease(v44);
                return;
              }
            }
            goto LABEL_51;
          }
          v65 = (uint64_t)&v11[5 * v56++ + 13];
          while (*(_QWORD *)(v65 - 32) == v58)
          {
            v84.origin.x = v60;
            v84.origin.y = v59;
            v84.size.width = v61;
            v84.size.height = v62;
            v85 = CGRectUnion(v84, *(CGRect *)(v65 - 24));
            v60 = v85.origin.x;
            v59 = v85.origin.y;
            v61 = v85.size.width;
            v62 = v85.size.height;
            ++v56;
            v65 += 40;
            if (v55 == v56)
              goto LABEL_87;
          }
        }
        v58 = 0;
        v59 = 0.0;
        v61 = 0.0;
        v62 = 0.0;
      }
      ++v56;
      v57 = 1;
      v60 = v64;
      if (v56 == v55)
        goto LABEL_101;
    }
  }
  v51 = v48 + 1;
  if (__OFADD__(v48, 1))
    goto LABEL_96;
  if (v51 >= v70)
    goto LABEL_90;
  v52 = *(_QWORD *)(v68 + 8 * v51);
  ++v48;
  if (v52)
    goto LABEL_70;
  v48 = v51 + 1;
  if (v51 + 1 >= v70)
    goto LABEL_90;
  v52 = *(_QWORD *)(v68 + 8 * v48);
  if (v52)
    goto LABEL_70;
  v48 = v51 + 2;
  if (v51 + 2 >= v70)
    goto LABEL_90;
  v52 = *(_QWORD *)(v68 + 8 * v48);
  if (v52)
    goto LABEL_70;
  v48 = v51 + 3;
  if (v51 + 3 >= v70)
    goto LABEL_90;
  v52 = *(_QWORD *)(v68 + 8 * v48);
  if (v52)
    goto LABEL_70;
  v48 = v51 + 4;
  if (v51 + 4 >= v70)
    goto LABEL_90;
  v52 = *(_QWORD *)(v68 + 8 * v48);
  if (v52)
  {
LABEL_70:
    v47 = (v52 - 1) & v52;
    v50 = __clz(__rbit64(v52)) + (v48 << 6);
    goto LABEL_71;
  }
  v53 = v51 + 5;
  if (v53 >= v70)
    goto LABEL_90;
  v52 = *(_QWORD *)(v68 + 8 * v53);
  if (v52)
  {
    v48 = v53;
    goto LABEL_70;
  }
  while (1)
  {
    v48 = v53 + 1;
    if (__OFADD__(v53, 1))
      break;
    if (v48 >= v70)
      goto LABEL_90;
    v52 = *(_QWORD *)(v68 + 8 * v48);
    ++v53;
    if (v52)
      goto LABEL_70;
  }
LABEL_98:
  __break(1u);
LABEL_99:
  swift_bridgeObjectRelease(v11);
LABEL_100:
  __break(1u);
LABEL_101:
  swift_bridgeObjectRelease(v11);
LABEL_102:
  __break(1u);
}

uint64_t sub_A637C(double a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  unint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v2 = v1;
  CurrentValueSubject.value.getter(v39);
  v4 = v39[0];
  v5 = v39[1];
  ObjectType = swift_getObjectType(v39[0]);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(ObjectType, v5);
  swift_unknownObjectRelease(v4);
  if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 2)
    goto LABEL_4;
  v9 = (char *)v2 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider;
  swift_beginAccess((char *)v2 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider, v39, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    v11 = Strong;
    v12 = *((_QWORD *)v9 + 1);
    v13 = swift_getObjectType(Strong);
    LOBYTE(v12) = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 120))(v13, v12);
    swift_unknownObjectRelease(v11);
    if ((v12 & 1) != 0)
    {
LABEL_4:
      v14 = Logger.logObject.getter(v8);
      v15 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        v17 = "#unhandled_tap This tap should not turn the page";
LABEL_9:
        _os_log_impl(&dword_0, v14, v15, v17, v16, 2u);
        swift_slowDealloc(v16, -1, -1);
        goto LABEL_10;
      }
      goto LABEL_10;
    }
  }
  sub_A66D0(&v37, a1);
  if (v37 == 2)
  {
    v14 = Logger.logObject.getter(v18);
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      v17 = "#unhandled_tap No movement for this tap";
      goto LABEL_9;
    }
LABEL_10:

    return 0;
  }
  v21 = v38;
  v22 = v37 & 1;
  v23 = v37 & 0x100;
  v24 = Logger.logObject.getter(v18);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = v21;
    v36 = swift_slowAlloc(32, -1);
    v27 = v36;
    *(_DWORD *)v26 = 136315138;
    LOBYTE(v37) = v22;
    v28 = v23 >> 8;
    BYTE1(v37) = v28;
    v38 = v35;
    v29 = LocationMovement.description.getter();
    v31 = v30;
    v37 = sub_33524(v29, v30, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v26 + 4);
    swift_bridgeObjectRelease(v31);
    _os_log_impl(&dword_0, v24, v25, "#unhandled_tap Turning %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    v32 = v27;
    v21 = v35;
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    v28 = v23 >> 8;
  }
  v33 = v2[10];
  v34 = v2[11];
  sub_472D0(v2 + 7, v33);
  LOBYTE(v37) = v22;
  BYTE1(v37) = v28;
  v38 = v21;
  v19 = 1;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v34 + 40))(&v37, 1, v33, v34);
  return v19;
}

void sub_A66D0(uint64_t *a1@<X8>, double a2@<D0>)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  char *v24;
  uint64_t Strong;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  v6 = 0xEB00000000746665;
  v7 = v2[5];
  v8 = v2[6];
  sub_472D0(v2 + 2, v7);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
  v11 = v10;
  ObjectType = swift_getObjectType(v9);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 8))(&v36, ObjectType, v11);
  swift_unknownObjectRelease(v9);
  v13 = v38;
  v14 = v39;
  sub_472D0(&v36, v38);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 128))(v13, v14) & 1) != 0)
  {
    v15 = 1;
  }
  else
  {
    v6 = 0xEB00000000746867;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69526F547466656CLL, 0xEB00000000746867, 0x4C6F547468676972, 0xEB00000000746665, 0);
  }
  swift_bridgeObjectRelease(v6);
  sub_34488(&v36);
  CurrentValueSubject.value.getter(&v36);
  v16 = v36;
  v17 = v37;
  v18 = swift_getObjectType(v36);
  v19 = (*(double (**)(uint64_t, uint64_t))(v17 + 80))(v18, v17);
  swift_unknownObjectRelease(v16);
  CurrentValueSubject.value.getter(&v36);
  v20 = v36;
  v21 = v37;
  v22 = swift_getObjectType(v36);
  v23 = (*(double (**)(uint64_t, uint64_t))(v21 + 64))(v22, v21);
  swift_unknownObjectRelease(v20);
  if (qword_3B5730 != -1)
    swift_once(&qword_3B5730, sub_A51C4);
  if (v23 + *(double *)&qword_3CF008 <= a2)
  {
    if (v19 - v23 - *(double *)&qword_3CF008 >= a2)
    {
      v32 = 0;
      v35 = 2;
      goto LABEL_24;
    }
    if ((v15 & 1) == 0)
      goto LABEL_13;
  }
  else if ((v15 & 1) != 0)
  {
    goto LABEL_13;
  }
  v24 = (char *)v3 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_readingSettingsProvider;
  Strong = swift_unknownObjectWeakLoadStrong(v24);
  if (!Strong
    || (v26 = Strong,
        v27 = *((_QWORD *)v24 + 1),
        v28 = swift_getObjectType(Strong),
        LOBYTE(v27) = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(v28, v27),
        swift_unknownObjectRelease(v26),
        (v27 & 1) == 0))
  {
    if (qword_3B5830 != -1)
      swift_once(&qword_3B5830, sub_185970);
    v29 = &word_3BF2F8;
    goto LABEL_19;
  }
LABEL_13:
  if (qword_3B5838 != -1)
    swift_once(&qword_3B5838, sub_1859EC);
  v29 = &word_3BF308;
LABEL_19:
  v30 = *(unsigned __int8 *)v29;
  v31 = *((unsigned __int8 *)v29 + 1);
  v32 = *((_QWORD *)v29 + 1);
  v33 = v31 == 0;
  v34 = 256;
  if (v33)
    v34 = 0;
  v35 = v34 | v30;
LABEL_24:
  *a1 = v35;
  a1[1] = v32;
}

double sub_A6984(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t Strong;
  double result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  _BOOL4 v18;
  double v19;
  double v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  _QWORD v27[3];
  char v28;
  _QWORD v29[2];
  _QWORD v30[11];
  char v31;
  char v32;
  _BYTE v33[32];

  v2 = v1;
  v3 = *(double *)a1;
  v4 = a1[1];
  v5 = a1[8];
  v6 = *((double *)a1 + 9);
  v7 = *((double *)a1 + 10);
  v8 = *((_BYTE *)a1 + 88);
  v9 = *((_BYTE *)a1 + 137);
  v10 = v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController;
  swift_beginAccess(v10, v33, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v10);
  if (!Strong)
    return result;
  v13 = Strong;
  v24 = v5;
  v25 = v7;
  v14 = *(_QWORD *)(v10 + 8);
  v15 = *(_QWORD *)(v2 + 104);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 96));
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 16))(v30, ObjectType, v15);
  v18 = v30[0] == *(_QWORD *)&v3 && v30[1] == v4;
  if ((v31 & 1) == 0 && (v8 & 1) == 0)
  {
    if (!v18)
      goto LABEL_20;
    v19 = vabdd_f64(*(double *)&v30[9], v6);
    v20 = vabdd_f64(*(double *)&v30[10], v25);
    if (v19 <= v20)
      v19 = v20;
    if ((v32 & (v9 ^ 1) & 1) != 0 || v19 > 100.0)
      goto LABEL_20;
LABEL_19:
    swift_unknownObjectRelease(v13);
    sub_49900((uint64_t)v30);
    return result;
  }
  if (v18 && (v32 != 1 || (v9 & 1) != 0))
    goto LABEL_19;
LABEL_20:
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 1) == 1)
  {
    sub_49900((uint64_t)v30);
    v21 = 2;
  }
  else if (v30[3])
  {
    sub_49900((uint64_t)v30);
    v21 = 1;
  }
  else
  {
    v22 = v30[6];
    sub_49900((uint64_t)v30);
    if (v22)
      v21 = 1;
    else
      v21 = v32;
  }
  v23 = swift_getObjectType(v13);
  *(double *)v29 = v3;
  v29[1] = v4;
  v27[0] = v24;
  *(double *)&v27[1] = v6;
  *(double *)&v27[2] = v25;
  v28 = v8;
  v26 = v21;
  (*(void (**)(_QWORD *, _QWORD *, char *, uint64_t, uint64_t))(v14 + 112))(v29, v27, &v26, v23, v14);
  *(_QWORD *)&result = swift_unknownObjectRelease(v13).n128_u64[0];
  return result;
}

void sub_A6B60(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  _BYTE v7[24];

  if ((a1 & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_lastKnownPastEnd) & 1) == 0)
    {
      *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_lastKnownPastEnd) = 1;
      v2 = v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController;
      swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController, v7, 0, 0);
      Strong = swift_unknownObjectWeakLoadStrong(v2);
      if (Strong)
      {
        v4 = Strong;
        v5 = *(_QWORD *)(v2 + 8);
        ObjectType = swift_getObjectType(Strong);
        (*(void (**)(uint64_t, uint64_t))(v5 + 48))(ObjectType, v5);
        swift_unknownObjectRelease(v4);
      }
    }
  }
  else
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_lastKnownPastEnd) = 0;
  }
}

uint64_t sub_A6BF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController, v5, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
    __asm { BR              X9 }
  return result;
}

uint64_t sub_A6D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t ObjectType;
  _BYTE v7[24];

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(v1 + 8);
    v5 = URL.pathQueryAndFragmentWithoutLeadingSlash()();
    ObjectType = swift_getObjectType(v3);
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v4 + 72))(v5._countAndFlagsBits, v5._object, ObjectType, v4);
    swift_unknownObjectRelease(v3);
    swift_bridgeObjectRelease(v5._object);
    return 1;
  }
  return result;
}

void sub_A6F3C(char *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD v26[5];
  char v27;
  _BYTE v28[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[32];

  v25 = *a1;
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 4);
  v7 = *((_QWORD *)a1 + 5);
  v8 = *((_QWORD *)a1 + 6);
  v9 = *((_QWORD *)a1 + 7);
  v10 = *((_QWORD *)a1 + 8);
  v11 = *((_QWORD *)a1 + 9);
  v12 = *((_QWORD *)a1 + 10);
  v13 = *((_QWORD *)a1 + 11);
  v23 = a2[1];
  v24 = *a2;
  v21 = a2[3];
  v22 = a2[2];
  v20 = a2[4];
  v14 = v2 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController;
  v15 = *((_BYTE *)a2 + 40);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController, v40, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v14);
  if (Strong)
  {
    v17 = Strong;
    v18 = *(_QWORD *)(v14 + 8);
    ObjectType = swift_getObjectType(Strong);
    v28[0] = v25;
    v29 = v3;
    v30 = v4;
    v31 = v5;
    v32 = v6;
    v33 = v7;
    v34 = v8;
    v35 = v9;
    v36 = v10;
    v37 = v11;
    v38 = v12;
    v39 = v13;
    v26[0] = v24;
    v26[1] = v23;
    v26[2] = v22;
    v26[3] = v21;
    v26[4] = v20;
    v27 = v15;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t, uint64_t))(v18 + 120))(v28, v26, ObjectType, v18);
    swift_unknownObjectRelease(v17);
  }
}

uint64_t sub_A706C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = v2[10];
  v6 = v2[11];
  sub_472D0(v2 + 7, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, a2, v5, v6);
}

_QWORD *BookContentInteractor.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  sub_34488(v0 + 2);
  sub_34488(v0 + 7);
  swift_unknownObjectRelease(v0[12]);
  swift_unknownObjectRelease(v0[14]);
  swift_unknownObjectRelease(v0[16]);
  sub_47418((uint64_t)(v0 + 18));
  sub_47418((uint64_t)(v0 + 20));
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_centerTapTimestamp;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  sub_47418((uint64_t)v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider);
  sub_47418((uint64_t)v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController);
  v3 = *(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 24);
  swift_unknownObjectRelease(*(_QWORD *)((char *)v0
                                       + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage
                                       + 8));
  swift_unknownObjectRelease(v3);
  swift_release();
  sub_47418((uint64_t)v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_readingSettingsProvider);
  v4 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_log;
  v5 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_cancellables));
  return v0;
}

uint64_t BookContentInteractor.__deallocating_deinit()
{
  uint64_t v0;

  BookContentInteractor.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_A7220(uint64_t a1, uint64_t a2)
{
  return sub_A7238(a1, a2, &OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider);
}

uint64_t sub_A722C(uint64_t a1, uint64_t a2)
{
  return sub_A7238(a1, a2, &OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController);
}

uint64_t sub_A7238(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v4 = v3 + *a3;
  swift_beginAccess(v4, v6, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v4);
}

Swift::Void __swiftcall BookContentInteractor.forceRepaginate()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  _QWORD v25[19];

  v1 = v0[13];
  ObjectType = swift_getObjectType(v0[12]);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v1 + 16))(v25, ObjectType, v1);
  v3 = v0[5];
  v4 = v0[6];
  sub_472D0(v0 + 2, v3);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  v7 = v6;
  v8 = swift_getObjectType(v5);
  v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v8, v7) + 40);
  swift_bridgeObjectRetain(v9);
  swift_release();
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v22 = v9;
    else
      v22 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v10 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v9);
  }
  else
  {
    v10 = *(_QWORD *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8));
  }
  swift_bridgeObjectRelease(v9);
  swift_unknownObjectRetain_n(v5, 2);
  v11 = sub_49BD8((uint64_t)v25);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = v10;
    v15 = swift_slowAlloc(32, -1);
    v16 = swift_slowAlloc(32, -1);
    v24[0] = v16;
    *(_DWORD *)v15 = 134349570;
    sub_49900((uint64_t)v25);
    v23 = v25[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v15 + 4);
    sub_49900((uint64_t)v25);
    *(_WORD *)(v15 + 12) = 2050;
    v23 = v14;
    v17 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v15 + 14);
    *(_WORD *)(v15 + 22) = 2082;
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 104))(v8, v7, v17);
    v20 = v19;
    v23 = sub_33524(v18, v19, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v15 + 24);
    swift_unknownObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl(&dword_0, v12, v13, "User forced repagination: ordinal %{public}ld/%{public}ld -- %{public}s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    sub_49900((uint64_t)v25);

    sub_49900((uint64_t)v25);
    swift_unknownObjectRelease_n(v5, 2);
  }
  CurrentValueSubject.value.getter(v24);
  v21 = v24[0];
  sub_A7890(v24[0], v24[1], 1);
  swift_unknownObjectRelease(v5);
  swift_unknownObjectRelease(v21);
}

Swift::Void __swiftcall BookContentInteractor.contentDidEnterFullscreen()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage) = 1;
}

Swift::Void __swiftcall BookContentInteractor.readingSettingsPresentationChanged(presented:)(Swift::Bool presented)
{
  uint64_t v1;

  if (presented)
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage + 1) = 1;
  else
    _s8BookEPUB0A17ContentInteractorC24contentDidExitFullscreenyyF_0();
}

uint64_t sub_A75D0()
{
  _BYTE *v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  _BYTE v30[16];
  _BYTE v31[16];
  _QWORD v32[2];
  uint64_t v33;
  unint64_t v34;

  v1 = 0x7D656E6F6E7BLL;
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(161);
  v2._countAndFlagsBits = 60;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0xD00000000000003BLL;
  v3._object = (void *)0x80000000002C99E0;
  String.append(_:)(v3);
  v4._object = (void *)0x80000000002C9A20;
  v4._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v4);
  if ((*v0 & 1) != 0)
    v5 = 1702195828;
  else
    v5 = 0x65736C6166;
  if ((*v0 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0xD000000000000024;
  v8._object = (void *)0x80000000002C9A40;
  String.append(_:)(v8);
  if ((v0[1] & 1) != 0)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if ((v0[1] & 1) != 0)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._object = (void *)0x80000000002C9A70;
  v12._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v12);
  if ((v0[2] & 1) != 0)
    v13 = 1702195828;
  else
    v13 = 0x65736C6166;
  if ((v0[2] & 1) != 0)
    v14 = 0xE400000000000000;
  else
    v14 = 0xE500000000000000;
  v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v14);
  v16._object = (void *)0x80000000002C9A90;
  v16._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v16);
  sub_A901C((uint64_t)(v0 + 8), (uint64_t)v31);
  sub_A901C((uint64_t)v31, (uint64_t)v32);
  if (v32[0])
  {
    v17 = v32[1];
    ObjectType = swift_getObjectType(v32[0]);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 184))(ObjectType, v17);
    v21 = v20;
  }
  else
  {
    v21 = 0xE600000000000000;
    v19 = 0x7D656E6F6E7BLL;
  }
  v22 = v21;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease(v21);
  v23._object = (void *)0x80000000002C9AB0;
  v23._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v23);
  sub_A901C((uint64_t)(v0 + 24), (uint64_t)v30);
  sub_A901C((uint64_t)v30, (uint64_t)&v33);
  if (v33)
  {
    v24 = v34;
    v25 = swift_getObjectType(v33);
    v1 = (*(uint64_t (**)(uint64_t, unint64_t))(v24 + 184))(v25, v24);
    v27 = v26;
  }
  else
  {
    v27 = (void *)0xE600000000000000;
  }
  v28._countAndFlagsBits = v1;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  return 0;
}

uint64_t sub_A7858()
{
  return sub_A75D0();
}

double sub_A7890(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  __n128 v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  double result;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[16];
  uint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;

  v4 = v3;
  swift_retain_n(v3, 2);
  v7 = swift_unknownObjectRetain_n(a1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = a2;
    v50 = swift_slowAlloc(64, -1);
    v53 = v50;
    *(_DWORD *)v10 = 136315394;
    CurrentValueSubject.value.getter(&v55);
    v13 = v55;
    v12 = v56[0];
    ObjectType = swift_getObjectType(v55);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 184))(ObjectType, v12);
    v17 = v16;
    swift_unknownObjectRelease(v13);
    v55 = sub_33524(v15, v17, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v10 + 4);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v10 + 12) = 2080;
    v18 = swift_getObjectType(a1);
    a2 = v11;
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 184))(v18, v11);
    v21 = v20;
    v55 = sub_33524(v19, v20, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v10 + 14);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v21);
    _os_log_impl(&dword_0, v8, v9, "Updating from (%s) to #contentConfig:(%s)", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(a1, 2);
    swift_release_n(v3, 2);
  }

  v22 = v4[5];
  v23 = v4[6];
  sub_472D0(v4 + 2, v22);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
  v26 = v25;
  v27 = swift_getObjectType(v24);
  v52 = v26;
  if ((a3 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v26 + 72))(v27, v26);
  }
  else
  {
    LOBYTE(v55) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(v26 + 64))(a1, a2, &v55, v27, v26);
  }
  v28 = v4[5];
  v29 = v4[6];
  sub_472D0(v4 + 2, v28);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
  v32 = v31;
  v33 = swift_getObjectType(v30);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v32 + 8))(&v55, v33, v32);
  swift_unknownObjectRelease(v30);
  v34 = v57;
  v35 = v58;
  sub_472D0(&v55, v57);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 64))(v34, v35);
  v37 = sub_A318C(v36);
  swift_bridgeObjectRelease(v36);
  sub_34488(&v55);
  if (*((_BYTE *)v4 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_onlyPaginateLiveContent) == 1)
  {
    swift_bridgeObjectRelease(v37);
    v37 = _swiftEmptyArrayStorage;
  }
  v55 = a1;
  v56[0] = a2;
  v38 = swift_unknownObjectRetain(a1);
  CurrentValueSubject.value.setter(&v55, v38);
  v39 = swift_bridgeObjectRetain_n(v37, 2);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v55 = v43;
    *(_DWORD *)v42 = 136315138;
    v44 = swift_bridgeObjectRetain(v37);
    v45 = Array.description.getter(v44, &type metadata for Int);
    v47 = v46;
    swift_bridgeObjectRelease(v37);
    v53 = sub_33524(v45, v47, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v42 + 4);
    swift_bridgeObjectRelease_n(v37, 2);
    swift_bridgeObjectRelease(v47);
    _os_log_impl(&dword_0, v40, v41, "Requesting background pagination for #contentConfig ordinals: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v37, 2);
  }

  v48 = swift_getObjectType(v24);
  (*(void (**)(_QWORD *, uint64_t))(v52 + 112))(v37, v48);
  swift_unknownObjectRelease(v24);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v37).n128_u64[0];
  return result;
}

uint64_t sub_A7D88()
{
  uint64_t result;
  uint64_t v1;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("_BCWWebRepExternalLoadApprovalCacheClear"));
  qword_3B96F8 = result;
  unk_3B9700 = v1;
  return result;
}

uint64_t sub_A7E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint8_t *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __objc2_meth_list **p_opt_class_meths;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t ObjectType;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  id v76;
  uint64_t KeyPath;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint8_t *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  char v112[24];
  char v113[24];
  _QWORD v114[5];

  v107 = a7;
  v108 = a8;
  v106 = a6;
  v90 = a5;
  v89 = a4;
  v86 = a2;
  v87 = a1;
  v101 = a17;
  v100 = a18;
  v99 = a16;
  v98 = a15;
  v97 = a14;
  v96 = a13;
  v95 = a11;
  v93 = a12;
  v91 = a10;
  v22 = sub_319AC((uint64_t *)&unk_3BE6F0);
  v103 = *(_QWORD *)(v22 - 8);
  v104 = v22;
  __chkstk_darwin(v22);
  v102 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for Date(0);
  v92 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114[3] = a20;
  v114[4] = a21;
  v26 = sub_9B1C0(v114);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a20 - 8) + 32))(v26, a3, a20);
  v88 = a19 + 144;
  *(_QWORD *)(a19 + 152) = 0;
  swift_unknownObjectWeakInit(a19 + 144, 0);
  *(_QWORD *)(a19 + 168) = 0;
  swift_unknownObjectWeakInit(a19 + 160, 0);
  *(_BYTE *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePage) = 0;
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePageObservation) = 0;
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_approvalCacheDidChangeObservation) = 0;
  v27 = a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider;
  *(_QWORD *)(v27 + 8) = 0;
  swift_unknownObjectWeakInit(v27, 0);
  v28 = a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController;
  *(_QWORD *)(v28 + 8) = 0;
  swift_unknownObjectWeakInit(v28, 0);
  v29 = OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_onlyPaginateLiveContent;
  v105 = (id)objc_opt_self(NSUserDefaults);
  v30 = objc_msgSend(v105, "standardUserDefaults");
  v31 = String._bridgeToObjectiveC()();
  v32 = objc_msgSend(v30, "BOOLForKey:", v31);

  *(_BYTE *)(a19 + v29) = v32;
  v33 = a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage;
  *(_WORD *)v33 = 0;
  *(_BYTE *)(v33 + 2) = 0;
  *(_OWORD *)(v33 + 8) = 0u;
  *(_OWORD *)(v33 + 24) = 0u;
  *(_BYTE *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_ignoreAllPageTurns) = 0;
  v34 = a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_readingSettingsProvider;
  *(_QWORD *)(v34 + 8) = 0;
  swift_unknownObjectWeakInit(v34, 0);
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v35 = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD000000000000024, 0x80000000002C6FF0);
  Logger.init(_:)(v35);
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_cancellables) = &_swiftEmptySetSingleton;
  *(_BYTE *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_lastKnownPastEnd) = 0;
  swift_beginAccess(v27, v113, 1, 0);
  *(_QWORD *)(v27 + 8) = v86;
  swift_unknownObjectWeakAssign(v27, v87);
  sub_49F1C((uint64_t)v114, a19 + 16);
  v36 = v89;
  v37 = v90;
  *(_QWORD *)(a19 + 96) = v89;
  *(_QWORD *)(a19 + 104) = v37;
  swift_beginAccess(v28, v112, 1, 0);
  v38 = v106;
  *(_QWORD *)(v28 + 8) = v107;
  swift_unknownObjectWeakAssign(v28, v38);
  sub_49F1C((uint64_t)v108, a19 + 56);
  v39 = v91;
  v110 = a9;
  v111 = v91;
  v40 = sub_319AC(&qword_3B7028);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48));
  swift_unknownObjectRetain(v36);
  swift_unknownObjectRetain(a9);
  p_opt_class_meths = &OBJC_PROTOCOL___UITextInteractionDelegatePrivate.opt_class_meths;
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentLayoutProviderSubject) = CurrentValueSubject.init(_:)(&v110);
  *(_QWORD *)(v34 + 8) = v93;
  swift_unknownObjectWeakAssign(v34, v95);
  v42 = v96;
  v43 = v97;
  *(_QWORD *)(a19 + 112) = v96;
  *(_QWORD *)(a19 + 120) = v43;
  v44 = v98;
  v45 = v99;
  *(_QWORD *)(a19 + 128) = v98;
  *(_QWORD *)(a19 + 136) = v45;
  *(_QWORD *)(a19 + 152) = v100;
  swift_unknownObjectWeakAssign(v88, v101);
  swift_unknownObjectRetain(v42);
  v46 = swift_unknownObjectRetain(v44);
  static Date.distantPast.getter(v46);
  (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_centerTapTimestamp, v25, v94);
  ObjectType = swift_getObjectType(a9);
  v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 32))(ObjectType, v39);
  v50 = v49;
  v51 = swift_getObjectType(v48);
  LOBYTE(v50) = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v51, v50);
  swift_unknownObjectRelease(v48);
  v52 = 200.0;
  if ((v50 & 1) != 0)
    v52 = 150.0;
  *(double *)(a19 + 176) = v52;
  v53 = swift_retain_n(a19, 2);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    *(_DWORD *)v56 = 136315138;
    v109 = v57;
    v101 = v56 + 4;
    CurrentValueSubject.value.getter(&v110);
    v58 = v110;
    v59 = v111;
    v60 = swift_getObjectType(v110);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 184))(v60, v59);
    v63 = v62;
    swift_unknownObjectRelease(v58);
    v110 = (id)sub_33524(v61, v63, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111, v101);
    swift_release_n(a19);
    v64 = v63;
    p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___UITextInteractionDelegatePrivate + 48);
    swift_bridgeObjectRelease(v64);
    _os_log_impl(&dword_0, v54, v55, "Initialized with configuration: %s #contentConfig", v56, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {
    swift_release_n(a19);
  }

  v65 = swift_getObjectType(v106);
  v110 = *(id *)((char *)p_opt_class_meths[225] + a19);
  v66 = sub_3DCC0(&qword_3B7030, &qword_3B7028, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v110 = (id)Publisher.eraseToAnyPublisher()(v40, v66);
  v67 = sub_319AC((uint64_t *)&unk_3BE710);
  v68 = sub_3DCC0((unint64_t *)&unk_3BD180, (uint64_t *)&unk_3BE710, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v69 = v102;
  Publisher.dropFirst(_:)(1, v67, v68);
  swift_release();
  v70 = sub_3DCC0((unint64_t *)&unk_3BE720, (uint64_t *)&unk_3BE6F0, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v71 = v104;
  v72 = Publisher.eraseToAnyPublisher()(v104, v70);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v69, v71);
  v73 = v107;
  v74 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 136);
  v75 = sub_319AC(&qword_3B7038);
  v74(v72, v75, v65, v73);
  swift_release();
  sub_A3BC4();
  v76 = v105;
  v110 = objc_msgSend(v105, "standardUserDefaults");
  KeyPath = swift_getKeyPath(&unk_2E9118);
  v78 = swift_allocObject(&unk_37E548, 24);
  swift_weakInit(v78 + 16, a19);
  v79 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 5, sub_556C8, v78, &protocol witness table for NSObject);
  swift_release();
  swift_release();

  v80 = *(void **)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePageObservation);
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePageObservation) = v79;

  v110 = objc_msgSend(v76, "standardUserDefaults");
  v81 = swift_getKeyPath(&unk_2E9140);
  v82 = swift_allocObject(&unk_37E548, 24);
  swift_weakInit(v82 + 16, a19);
  v83 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v81, 0, sub_556E0, v82, &protocol witness table for NSObject);
  swift_release();
  swift_release();

  v84 = *(void **)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_approvalCacheDidChangeObservation);
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_approvalCacheDidChangeObservation) = v83;

  sub_34488(v108);
  sub_34488(v114);
  return a19;
}

uint64_t sub_A8750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, uint8_t *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v33 = a7;
  v34 = a8;
  v31 = a5;
  v32 = a6;
  v30 = a4;
  v28 = a10;
  v29 = a9;
  v26 = a12;
  v27 = a11;
  v20 = *(_QWORD *)(a16 - 8);
  __chkstk_darwin(a1);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BookContentInteractor(0);
  v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48));
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a3, a16);
  return sub_A7E3C(a1, a2, (uint64_t)v22, v30, v31, v32, v33, v34, (void *)v29, *((uint64_t *)&v29 + 1), v28, *((uint64_t *)&v28 + 1), v27, *((uint64_t *)&v27 + 1), v26, *((uint64_t *)&v26 + 1), a13, a14, v24,
           a16,
           a17);
}

void sub_A8870(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 3 || a3 == 2)
  {
    swift_bridgeObjectRelease(a2);
  }
  else if (!a3)
  {
    swift_unknownObjectRelease(a1);
  }
}

uint64_t sub_A8898@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7[24];

  v3 = *a1;
  v4 = *a1 + 160;
  swift_beginAccess(v4, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  v6 = *(_QWORD *)(v3 + 168);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_A88F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = *a2 + 160;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v4 + 168) = v3;
  return swift_unknownObjectWeakAssign(v5, v2);
}

uint64_t sub_A8948@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_A896C(a1, &OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider, a2);
}

uint64_t sub_A8954(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_A89CC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider);
}

uint64_t sub_A8960@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_A896C(a1, &OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController, a2);
}

uint64_t sub_A896C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7[24];

  v4 = *a1 + *a2;
  swift_beginAccess(v4, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  v6 = *(_QWORD *)(v4 + 8);
  *a3 = result;
  a3[1] = v6;
  return result;
}

uint64_t sub_A89C0(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_A89CC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController);
}

uint64_t sub_A89CC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = *a1;
  v6 = a1[1];
  v7 = *a2 + *a5;
  swift_beginAccess(v7, v9, 1, 0);
  *(_QWORD *)(v7 + 8) = v6;
  return swift_unknownObjectWeakAssign(v7, v5);
}

double sub_A8A28@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  CurrentValueSubject.value.getter(&v3);
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_A8A6C(__int128 *a1)
{
  __n128 v1;
  __int128 v3;

  v3 = *a1;
  v1 = swift_unknownObjectRetain(v3);
  return CurrentValueSubject.value.setter(&v3, v1);
}

uint64_t dispatch thunk of PageTurnControlling.scroll(to:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.readingSettingsExit()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of ContentLoading.peripheralAccessoryView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of BookContentInteracting.hasInteractiveContent(at:mediaOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of BookContentInteracting.handleVisibleCFIUpdate(update:documentRelativeRect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

uint64_t dispatch thunk of Paginating.pageOffsetForBookProgress(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of BookContentInteracting.contentDidExitFullscreen()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of BookContentInteracting.readingSettingsPresentationChanged(presented:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 240))();
}

uint64_t sub_A8AF4()
{
  return type metadata accessor for BookContentInteractor(0);
}

uint64_t type metadata accessor for BookContentInteractor(uint64_t a1)
{
  uint64_t result;

  result = qword_3B9790;
  if (!qword_3B9790)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookContentInteractor);
  return result;
}

uint64_t sub_A8B38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[22];

  v5[0] = &unk_2E8FD8;
  v5[1] = &unk_2E8FD8;
  v5[2] = &unk_2E8FF0;
  v5[3] = &unk_2E8FF0;
  v5[4] = &unk_2E8FF0;
  v5[5] = &unk_2E9008;
  v5[6] = &unk_2E9008;
  v5[7] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v5[8] = *(_QWORD *)(result - 8) + 64;
    v5[9] = &unk_2E9020;
    v5[10] = &unk_2E9038;
    v5[11] = &unk_2E9038;
    v5[12] = &unk_2E9008;
    v5[13] = &unk_2E9008;
    v5[14] = &unk_2E9020;
    v5[15] = &unk_2E9050;
    v5[16] = (char *)&value witness table for Builtin.NativeObject + 64;
    v5[17] = &unk_2E9020;
    v5[18] = &unk_2E9008;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v5[19] = *(_QWORD *)(result - 8) + 64;
      v5[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v5[21] = &unk_2E9020;
      return swift_updateClassMetadata2(a1, 256, 22, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t method lookup function for BookContentInteractor(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookContentInteractor);
}

uint64_t dispatch thunk of ContentSizeCategoryManager.canIncreaseContentSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of BookContentInteractor.externalLoadEventHandler.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of DocumentEntity.nonLinear.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of BookContentLayoutController.adjustContentForSingleFirstPageVisibility.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of ReadingSettingsManager.textZoomFactor.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of ContentLayoutProvider.spreadPagesAllowedForViewport.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of BookContentInteractor.contentLayoutProvider.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of ReadingSettingsManager.readingLoupeAllowable.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of BookContentInteractor.__allocating_init(contentHostEnvironmentProvider:dataManager:currentLocationProvider:currentLocationController:pageTurnController:initialContentLayoutProvider:readingSettingsProvider:layoutModeProvider:contentSizeCategoryProvider:annotationProviderService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t dispatch thunk of BookContentInteractor.canDragPage.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of ReadingLoupeStateController.readingLoupeGesture.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of BookContentInteractor.bkaxHandleSwipeRight(animated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of ReadingSettingsManager.canChangeCurrentThemeType(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of BookContentInteractor.bkaxScroll(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of BookContentInteractor.bkaxScroll(to:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of SearchViewModel.hasResultsOrIsSearching.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of SearchViewModel.hasRecents.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.isVerticalDocument.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of SearchViewModel.layoutManagerConfiguration.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of BookContentInteractor.movementStatePublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of BookContentInteractor.handleIgnorePageTurn(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of BookContentInteractor.isEdgeTouch(_:bleed:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of BookContentInteractor.isEdgeTouch(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t dispatch thunk of BookContentInteractor.hasInteractiveContent(at:mediaOnly:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of BookContentInteractor.handleTapIfNeeded(point:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of BookContentInteractor.handleScroll(toLocation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of BookContentInteractor.handleScroll(pastEnd:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of ReadingLoupeStateController.slideCompletedPublisher.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

uint64_t dispatch thunk of ReadingLoupeStateController.slideCompletedPublisher.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of PaginatingService.annotation(for:in:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of BookContentInteractor.setScrollContainerHost(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

double destroy for BookContentInteractor.ConfigurationStorage(uint64_t a1)
{
  double result;

  swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
  *(_QWORD *)&result = swift_unknownObjectRelease(*(_QWORD *)(a1 + 24)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for BookContentInteractor.ConfigurationStorage(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v5;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for BookContentInteractor.ConfigurationStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  *(_QWORD *)(a1 + 16) = v5;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_unknownObjectRetain(v7);
  swift_unknownObjectRelease(v9);
  *(_QWORD *)(a1 + 32) = v8;
  return a1;
}

uint64_t assignWithTake for BookContentInteractor.ConfigurationStorage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookContentInteractor.ConfigurationStorage(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BookContentInteractor.ConfigurationStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookContentInteractor.ConfigurationStorage()
{
  return &type metadata for BookContentInteractor.ConfigurationStorage;
}

uint64_t sub_A901C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3B9AE8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_A9064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9B70;
  if (!qword_3B9B70)
  {
    v1 = sub_34450(255, &qword_3B9B60, NSRunLoop_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSRunLoop, v1);
    atomic_store(result, (unint64_t *)&qword_3B9B70);
  }
  return result;
}

uint64_t sub_A90BC()
{
  uint64_t v0;

  sub_34488((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_A90E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_A45C4(a1, v2 + 16, *(_BYTE *)(v2 + 56), a2);
}

uint64_t sub_A90EC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_A9110(uint64_t *a1)
{
  uint64_t v1;

  return sub_A46F4(a1, v1);
}

double sub_A9118(_BYTE *a1)
{
  uint64_t v1;

  return sub_A4FCC(a1, v1);
}

id sub_A9128@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "BEDocumentExternalLoadApprovalCacheDidReset");
  *a2 = (_BYTE)result;
  return result;
}

double sub_A9158()
{
  uint64_t v0;

  return sub_A3B24(v0);
}

uint64_t sub_A9160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_A9170(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t dispatch thunk of ReadingSettingsManaging.attemptDownload(themeType:allowCellularDownload:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of SearchEventHandling.didSelect(page:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(a6 + 56))(a1, a2, a3, a4 & 1);
}

double sub_A9190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  if (swift_weakLoadStrong(v2))
  {
    sub_A91FC();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_A91FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v1 = v0;
  v2 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v7 = (char *)&v39 - v6;
  v8 = *(_QWORD *)(v0 + 24);
  v9 = OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager;
  v10 = objc_msgSend(*(id *)(*(_QWORD *)(v8 + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager)+ OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController), "searchString", sub_6C380());
  v40 = v4;
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = 0xE000000000000000;
  }
  v15 = *(_QWORD *)(v8 + v9);
  v16 = *(_QWORD *)(v1 + 16);
  v17 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v15 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 56))(ObjectType, v17) & 1) != 0)
  {
    v19 = *(_QWORD *)(v15 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider + 8);
    v20 = swift_getObjectType(*(_QWORD *)(v15 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider));
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 8))(v41, v20, v19);
    v21 = v42;
    v22 = v43;
    sub_472D0(v41, v42);
    v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 304))(v21, v22);
    swift_bridgeObjectRetain(v14);
    v24 = sub_AA5B0(v23, v12, v14);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v14);
    sub_34488(v41);
    if (v24)
    {
      v25 = *(_QWORD *)(v24 + 32);
      v26 = *(_QWORD *)(v24 + 40);
      swift_bridgeObjectRetain(v26);
      swift_release();
      v24 = 0;
      v27 = 1;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      v27 = -1;
    }
  }
  else
  {
    v25 = sub_45908(v12, v14);
    v26 = v28;
    v24 = v29;
    v27 = v30;
  }
  KeyPath = swift_getKeyPath(&unk_2E92D8);
  v32 = swift_getKeyPath(&unk_2E9300);
  v41[0] = v25;
  v41[1] = v26;
  v41[2] = v24;
  LOBYTE(v42) = v27;
  swift_retain();
  static Published.subscript.setter(v41, v16, KeyPath, v32);
  sub_A9528((uint64_t)v7);
  v33 = swift_getKeyPath(&unk_2E9320);
  v34 = swift_getKeyPath(&unk_2E9348);
  v35 = (uint64_t)v40;
  sub_AA740((uint64_t)v7, (uint64_t)v40);
  swift_retain();
  static Published.subscript.setter(v35, v16, v33, v34);
  sub_AA788((uint64_t)v7);
  sub_A96E4((uint64_t)v7);
  swift_bridgeObjectRelease(v14);
  v36 = swift_getKeyPath(&unk_2E9368);
  v37 = swift_getKeyPath(&unk_2E9390);
  sub_AA740((uint64_t)v7, v35);
  swift_retain();
  static Published.subscript.setter(v35, v16, v36, v37);
  return sub_AA788((uint64_t)v7);
}

double sub_A9528@<D0>(uint64_t a1@<X8>)
{
  Swift::String_optional v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;

  v2 = String.urlQueryEscaped(excludingCharacters:)((Swift::String_optional)0);
  if (!v2.value._object)
    goto LABEL_8;
  v3 = ((unint64_t)v2.value._object >> 56) & 0xF;
  if (((uint64_t)v2.value._object & 0x2000000000000000) == 0)
    v3 = v2.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v3)
  {
    swift_bridgeObjectRelease(v2.value._object);
LABEL_8:
    v8 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
    return result;
  }
  v4 = (_QWORD *)static Locale.preferredLanguages.getter();
  v5 = v4;
  if (v4[2])
  {
    v7 = v4[4];
    v6 = v4[5];
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    v6 = 0xE200000000000000;
    v7 = 28261;
  }
  swift_bridgeObjectRelease(v5);
  v10 = sub_AA7D0(2, v7, v6);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  swift_bridgeObjectRelease(v6);
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  v17._countAndFlagsBits = static String._fromSubstring(_:)(v10, v12, v14, v16);
  object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(object);
  v19._object = (void *)0x80000000002C9B50;
  v19._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v19);
  String.append(_:)(v2.value);
  swift_bridgeObjectRelease(v2.value._object);
  URL.init(string:)(0x2F2F3A7370747468, 0xE800000000000000);
  *(_QWORD *)&result = swift_bridgeObjectRelease(0xE800000000000000).n128_u64[0];
  return result;
}

uint64_t sub_A96E4@<X0>(uint64_t a1@<X8>)
{
  Swift::String_optional v2;
  unint64_t v3;
  uint64_t v5;

  v2 = String.urlQueryEscaped(excludingCharacters:)((Swift::String_optional)0);
  if (v2.value._object)
  {
    v3 = ((unint64_t)v2.value._object >> 56) & 0xF;
    if (((uint64_t)v2.value._object & 0x2000000000000000) == 0)
      v3 = v2.value._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    if (v3)
    {
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease(0xE000000000000000);
      String.append(_:)(v2.value);
      swift_bridgeObjectRelease(v2.value._object);
      URL.init(string:)(0xD000000000000010, 0x80000000002C9B30);
      return swift_bridgeObjectRelease(0x80000000002C9B30);
    }
    swift_bridgeObjectRelease(v2.value._object);
  }
  v5 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, 1, 1, v5);
}

void sub_A97E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(v0 + 16);
  KeyPath = swift_getKeyPath(&unk_2E9200);
  swift_getKeyPath(&unk_2E9228);
  static Published.subscript.getter(&v6, v1, KeyPath);
  swift_release();
  swift_release();
  v4 = v6;
  v3 = v7;
  swift_bridgeObjectRelease(v7);
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v4 & 0xFFFFFFFFFFFFLL;
  if (v5)
    sub_4548C();
}

double sub_A987C()
{
  uint64_t v0;
  uint64_t Strong;
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager)+ OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController), "pauseSearch");
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 40);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(v0 + 48);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(ObjectType, v4);
    *(_QWORD *)&result = swift_unknownObjectRelease(v3).n128_u64[0];
  }
  return result;
}

uint64_t sub_A9900(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v5 = *(_QWORD *)(v2 + 16);
  KeyPath = swift_getKeyPath(&unk_2E9200);
  v7 = swift_getKeyPath(&unk_2E9228);
  v13[0] = a1;
  v13[1] = a2;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  static Published.subscript.setter(v13, v5, KeyPath, v7);
  sub_A97E4();
  v8 = swift_getKeyPath(&unk_2E9248);
  swift_getKeyPath(&unk_2E9270);
  static Published.subscript.getter(v13, v5, v8);
  swift_release();
  swift_release();
  v9 = v13[0];
  v10 = swift_getKeyPath(&unk_2E9290);
  v11 = swift_getKeyPath(&off_2E92B8);
  LOBYTE(v13[0]) = 1;
  return static Published.subscript.setter(v13, v9, v10, v11);
}

double sub_A9A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t Strong;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v20;
  _QWORD v21[2];
  char v22;

  v2 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager);
  v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v4
                                                             + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController), "searchString"));
  if (v5)
  {
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v9 = v8;

    v10 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchRecentsPersistence);
    v11 = *(_QWORD *)(v4 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchRecentsPersistence + 8);
    ObjectType = swift_getObjectType(v10);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 24))(v7, v9, ObjectType, v11);
    swift_bridgeObjectRelease(v9);
  }
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 40);
  if (Strong)
  {
    v15 = Strong;
    v16 = *(_QWORD *)(v2 + 48);
    v17 = swift_getObjectType(Strong);
    v18 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for SearchResultEntity(0) + 20));
    v21[0] = v18;
    v21[1] = 0;
    v22 = 0;
    v19 = *(void (**)(_QWORD *, uint64_t, uint64_t, __n128))(v16 + 8);
    v20 = swift_unknownObjectRetain(v18);
    v19(v21, v17, v16, v20);
    swift_unknownObjectRelease(v18);
    *(_QWORD *)&result = swift_unknownObjectRelease(v15).n128_u64[0];
  }
  return result;
}

void sub_A9B20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;

  v5 = v4;
  v10 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager);
  v11 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v10 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider));
  if ((a4 & 1) != 0)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 56))(ObjectType, v11) & 1) != 0)
    {
      v22 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider + 8);
      v23 = swift_getObjectType(*(_QWORD *)(v10 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider));
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v22 + 8))(&v33, v23, v22);
      v24 = v36;
      v25 = v37;
      sub_472D0(&v33, v36);
      v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 304))(v24, v25);
      swift_bridgeObjectRetain(a2);
      v27 = sub_AA5B0(v26, a1, a2);
      sub_AA70C(a1, a2, a3, 1);
      swift_bridgeObjectRelease(v26);
      sub_34488(&v33);
      if (v27)
      {
        v29 = *(_QWORD *)(v27 + 16);
        v28 = *(_QWORD *)(v27 + 24);
        swift_bridgeObjectRetain(v28);
        swift_release();
        Strong = swift_unknownObjectWeakLoadStrong(v5 + 40);
        if (!Strong)
        {
          swift_bridgeObjectRelease(v28);
          return;
        }
        v19 = Strong;
        v31 = *(_QWORD *)(v5 + 48);
        v32 = swift_getObjectType(Strong);
        v33 = v29;
        v34 = v28;
        v35 = 2;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 8))(&v33, v32, v31);
        swift_bridgeObjectRelease(v28);
LABEL_10:
        swift_unknownObjectRelease(v19);
      }
    }
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 160))(a1, ObjectType, v11);
    if ((v14 & 1) == 0)
    {
      v15 = v13;
      v16 = swift_unknownObjectWeakLoadStrong(v4 + 40);
      if (v16)
      {
        v17 = __OFADD__(v15, 1);
        v18 = v15 + 1;
        if (v17)
        {
          __break(1u);
          return;
        }
        v19 = v16;
        v20 = *(_QWORD *)(v5 + 48);
        v21 = swift_getObjectType(v16);
        v33 = v18;
        v34 = 0;
        v35 = 1;
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v20 + 8))(&v33, v21, v20);
        goto LABEL_10;
      }
    }
  }
}

uint64_t sub_A9D10()
{
  uint64_t v0;

  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  sub_47418(v0 + 40);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release();
  swift_release();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for SearchPresenter()
{
  return objc_opt_self(_TtC8BookEPUB15SearchPresenter);
}

void sub_A9D84()
{
  sub_A97E4();
}

double sub_A9DA4()
{
  return sub_A987C();
}

id sub_A9DC4()
{
  return sub_45CC8();
}

uint64_t sub_A9DE8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 24) + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager)
                + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchRecentsPersistence);
  v2 = v1[1];
  ObjectType = swift_getObjectType(*v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2);
}

uint64_t sub_A9E38(uint64_t a1, uint64_t a2)
{
  return sub_A9900(a1, a2);
}

double sub_A9E58(uint64_t a1)
{
  return sub_A9A08(a1);
}

void sub_A9E78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_A9B20(a1, a2, a3, a4 & 1);
}

void sub_A9E9C()
{
  sub_455AC();
}

double sub_A9EC0(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  uint64_t v15;
  void *v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a2;
  v15 = swift_allocObject(&unk_37E610, 40);
  *(_QWORD *)(v15 + 16) = v3;
  *(_BYTE *)(v15 + 24) = v14;
  *(_QWORD *)(v15 + 32) = a1;
  aBlock[4] = sub_AA884;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_37E628;
  v16 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_6B3E4();
  v19 = sub_319AC(&qword_3B96F0);
  v20 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v6, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_AA090(uint64_t a1)
{
  __asm { BR              X10 }
}

void sub_AA0DC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t KeyPath;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[13];

  KeyPath = swift_getKeyPath(&unk_2E9248);
  swift_getKeyPath(&unk_2E9270);
  static Published.subscript.getter(v20, v1, KeyPath);
  swift_release();
  swift_release();
  v4 = (unsigned __int8 *)(v20[0] + OBJC_IVAR____TtC8BookEPUB23SearchBarResponderState_isFirstResponder);
  swift_beginAccess(v20[0] + OBJC_IVAR____TtC8BookEPUB23SearchBarResponderState_isFirstResponder, v20, 0, 0);
  LODWORD(v4) = *v4;
  swift_release();
  if ((_DWORD)v4 != 1)
    goto LABEL_6;
  v5 = swift_getKeyPath(&unk_2E9200);
  swift_getKeyPath(&unk_2E9228);
  static Published.subscript.getter(&v18, v1, v5);
  swift_release();
  swift_release();
  v7 = v18;
  v6 = v19;
  swift_bridgeObjectRelease(v19);
  v8 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v8 = v7 & 0xFFFFFFFFFFFFLL;
  if (v8)
  {
    v9 = sub_AA504(v0, v1);
    v2 = v10 & 1;
    v11 = 1;
  }
  else
  {
LABEL_6:
    v9 = 0;
    v11 = 0;
  }
  v12 = swift_getKeyPath(&unk_2E93B0);
  v13 = swift_getKeyPath(&unk_2E93D8);
  LOBYTE(v18) = v11;
  swift_retain();
  static Published.subscript.setter(&v18, v1, v12, v13);
  v14 = swift_getKeyPath(&unk_2E93F8);
  v15 = swift_getKeyPath(&unk_2E9420);
  v18 = v9;
  LOBYTE(v19) = v2;
  swift_retain();
  static Published.subscript.setter(&v18, v1, v14, v15);
  if (v0)
  {
    v16 = swift_getKeyPath(&unk_2E9440);
    v17 = swift_getKeyPath(&unk_2E9468);
    v18 = v0;
    swift_retain();
    swift_bridgeObjectRetain(v0);
    static Published.subscript.setter(&v18, v1, v16, v17);
    sub_1BD3C8();
  }
}

double sub_AA30C(_BYTE *a1)
{
  return sub_AA344(a1, (uint64_t)&unk_37E6B0, (uint64_t)sub_AA914, (uint64_t)&unk_37E6C8);
}

double sub_AA328(_BYTE *a1)
{
  return sub_AA344(a1, (uint64_t)&unk_37E660, (uint64_t)sub_AA914, (uint64_t)&unk_37E678);
}

double sub_AA344(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  __n128 v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  double result;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *a1;
  v23[1] = *(_QWORD *)(v4 + 56);
  v16 = swift_allocObject(a2, 25);
  *(_QWORD *)(v16 + 16) = v4;
  *(_BYTE *)(v16 + 24) = (_BYTE)a1;
  aBlock[4] = a3;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = a4;
  v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v25 = _swiftEmptyArrayStorage;
  v19 = sub_6B3E4();
  v20 = sub_319AC(&qword_3B96F0);
  v21 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v9, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_AA504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_2E9440);
    v5 = swift_getKeyPath(&unk_2E9468);
    static Published.subscript.getter(&v8, a2, KeyPath);
    swift_release(KeyPath);
    swift_release(v5);
    v2 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRelease(v8);
  }
  v6 = 2;
  if (v2 != 1)
    v6 = v2;
  if (v2)
    return v6;
  else
    return 1;
}

uint64_t sub_AA5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[4];
  uint64_t v15;

  v15 = a3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v5 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v5)
  {
    v6 = 4;
    while (1)
    {
      v7 = v6 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
      v9 = v6 - 3;
      if (__OFADD__(v7, 1))
        goto LABEL_13;
LABEL_9:
      v10 = *(_QWORD *)(v8 + 40);
      v14[2] = *(_QWORD *)(v8 + 32);
      v14[3] = v10;
      v14[0] = a2;
      v14[1] = v15;
      v11 = sub_5C170();
      if (!StringProtocol.caseInsensitiveCompare<A>(_:)(v14, &type metadata for String, &type metadata for String, v11, v11))
      {
        swift_bridgeObjectRelease(a1);
        return v8;
      }
      swift_release();
      ++v6;
      if (v9 == v5)
        goto LABEL_18;
    }
    v8 = *(_QWORD *)(a1 + 8 * v6);
    swift_retain();
    v9 = v6 - 3;
    if (!__OFADD__(v7, 1))
      goto LABEL_9;
LABEL_13:
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v12);
  }
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_AA70C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return swift_bridgeObjectRelease(a2);
  else
    return swift_bridgeObjectRelease(a3);
}

uint64_t sub_AA740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC((uint64_t *)&unk_3B8C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_AA788(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC((uint64_t *)&unk_3B8C50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_AA7D0(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

uint64_t sub_AA858()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_AA884()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 24);
  sub_AA090((uint64_t)&v1);
}

uint64_t sub_AA8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_AA8D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_AA8F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_AA918()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 24);
  sub_AA090((uint64_t)&v1);
}

__n128 RelativeValue<>.origin.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  *(_QWORD *)a1 = *(_QWORD *)v1;
  result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

void RelativeValue<>.union(_:)(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *v2;
  if (*a1 == *v2)
  {
    *(CGRect *)&v7 = CGRectUnion(*(CGRect *)(v2 + 1), *(CGRect *)(a1 + 1));
    v6 = v4;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(_BYTE *)(a2 + 40) = v4 != v5;
}

uint64_t sub_AABBC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3B9D18);
  sub_555F0(v0, (uint64_t)qword_3B9D18);
  if (qword_3B56B8 != -1)
    swift_once(&qword_3B56B8, sub_5EFF4);
  return Logger.init(_:)((id)qword_3CEEF8);
}

void sub_AAC3C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 16);
}

double DocumentPaginationEntity.pageSize.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double PaginationLayoutConfiguration.pageLength.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t sub_AAC58@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E94B8);
  v5 = swift_getKeyPath(&unk_2E94E0);
  static Published.subscript.getter(&v7, v3, KeyPath);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_AACD4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E94B8);
  v5 = swift_getKeyPath(&unk_2E94E0);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_AAD44()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2E94B8);
  v2 = swift_getKeyPath(&unk_2E94E0);
  static Published.subscript.getter(&v4, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_AADB4(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(*a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity__paginationComplete, v3, 33, 0);
  v1 = sub_319AC((uint64_t *)&unk_3B8E70);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_AAE18(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t v13;
  uint64_t v14;
  _BYTE v17[24];

  v4 = sub_319AC(&qword_3B8E20);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v8);
  v11 = &v17[-v10 - 8];
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12(&v17[-v10 - 8], a1, v4, v9);
  v13 = *a2;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v12)(v7, v11, v4);
  swift_beginAccess(v13 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity__paginationComplete, v17, 33, 0);
  v14 = sub_319AC((uint64_t *)&unk_3B8E70);
  Published.projectedValue.setter(v7, v14);
  swift_endAccess(v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t sub_AAF28()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity__paginationComplete, v3, 33, 0);
  v1 = sub_319AC((uint64_t *)&unk_3B8E70);
  Published.projectedValue.getter(v1);
  return swift_endAccess(v3);
}

uint64_t sub_AAF88()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_319AC((uint64_t *)&unk_3B8EA0);
  v1 = sub_B0984();
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_AAFDC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationFailed);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationFailed, v3, 0, 0);
  return *v1;
}

uint64_t sub_AB020()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v3, 0, 0);
  return *(_QWORD *)v1;
}

uint64_t sub_AB064()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v3, 0, 0);
  return *(_QWORD *)v1;
}

void DocumentPaginationEntity.paginationDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationDirection);
}

double sub_AB0BC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v3, 0, 0);
  return *(double *)v1;
}

void DocumentPaginationEntity.paginationMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode);
}

uint64_t sub_AB114()
{
  return sub_AB36C(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
}

uint64_t sub_AB120()
{
  return sub_AB36C(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
}

uint64_t sub_AB12C()
{
  return sub_AB36C(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
}

uint64_t sub_AB138@<X0>(uint64_t a1@<X8>)
{
  return sub_AB278(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate, a1);
}

uint64_t sub_AB144@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = *a1 + *a2;
  swift_beginAccess(v4, v7, 0, 0);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v4, v5);
}

uint64_t sub_AB1A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v15[24];

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = *a2 + *a5;
  swift_beginAccess(v12, v15, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v9 + 40))(v12, v11, v8);
  return swift_endAccess(v15);
}

uint64_t sub_AB26C@<X0>(uint64_t a1@<X8>)
{
  return sub_AB278(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate, a1);
}

uint64_t sub_AB278@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = v2 + *a1;
  swift_beginAccess(v4, v7, 0, 0);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_AB2D8()
{
  return sub_AB36C(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName);
}

uint64_t sub_AB2E4()
{
  return sub_AB36C(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName);
}

uint64_t sub_AB2F0()
{
  return sub_AB36C(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName);
}

uint64_t sub_AB2FC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE v9[24];

  v5 = *a1;
  v6 = (uint64_t *)(*a2 + *a5);
  swift_beginAccess(v6, v9, 1, 0);
  v7 = *v6;
  *v6 = v5;
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_AB360()
{
  return sub_AB36C(&OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName);
}

uint64_t sub_AB36C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _BYTE v4[24];

  v2 = (_QWORD *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0, 0);
  return swift_bridgeObjectRetain(*v2);
}

uint64_t sub_AB3B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_textNodeCharacterCounts);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_AB418()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_textNodeCharacterCounts);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_textNodeCharacterCounts, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_AB460()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument, v3, 0, 0);
  return *v1;
}

uint64_t DocumentPaginationEntity.configurationKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_configurationKey);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_configurationKey + 8));
  return v1;
}

uint64_t DocumentPaginationEntity.__allocating_init(ordinal:pageSize:pageWidthIncludingGutter:paginationComplete:pageCount:startingPageOffset:paginationDirection:contentSize:paginationMode:pages:highlightEntities:bookmarkEntities:latestModifiedAnnotationDate:latestModifiedHistoryDate:anchorEntitiesByName:mediaEntitiesByName:expandableEntitiesByName:historyEntitiesByName:isVerticalDocument:configurationKey:source:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char *a5, char *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  uint64_t v24;
  uint64_t v36;

  v36 = swift_allocObject(v24, *(unsigned int *)(v24 + 48));
  DocumentPaginationEntity.init(ordinal:pageSize:pageWidthIncludingGutter:paginationComplete:pageCount:startingPageOffset:paginationDirection:contentSize:paginationMode:pages:highlightEntities:bookmarkEntities:latestModifiedAnnotationDate:latestModifiedHistoryDate:anchorEntitiesByName:mediaEntitiesByName:expandableEntitiesByName:historyEntitiesByName:isVerticalDocument:configurationKey:source:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24);
  return v36;
}

uint64_t DocumentPaginationEntity.init(ordinal:pageSize:pageWidthIncludingGutter:paginationComplete:pageCount:startingPageOffset:paginationDirection:contentSize:paginationMode:pages:highlightEntities:bookmarkEntities:latestModifiedAnnotationDate:latestModifiedHistoryDate:anchorEntitiesByName:mediaEntitiesByName:expandableEntitiesByName:historyEntitiesByName:isVerticalDocument:configurationKey:source:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char *a5, char *a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  uint64_t v24;
  uint64_t v25;
  char v32;
  char v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  char v45;
  char v46;
  _BYTE v47[32];

  v25 = v24;
  v32 = *a5;
  v33 = *a6;
  v45 = *a24;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationFailed) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_textNodeCharacterCounts) = 0;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity____lazy_storage___logUsingSlowPageOffsets) = 1;
  *(_QWORD *)(v25 + 16) = a1;
  *(double *)(v25 + 24) = a9;
  *(double *)(v25 + 32) = a10;
  *(double *)(v25 + 40) = a11;
  swift_beginAccess(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity__paginationComplete, v47, 33, 0);
  v46 = a2;
  Published.init(initialValue:)(&v46, &type metadata for Bool);
  swift_endAccess(v47);
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount) = a3;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset) = a4;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationDirection) = v32;
  v34 = (double *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
  *v34 = a12;
  v34[1] = a13;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode) = v33;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages) = a7;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities) = a8;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities) = a14;
  v35 = v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate;
  v36 = type metadata accessor for Date(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
  v38(v35, a15, v36);
  v38(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate, a16, v36);
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName) = a17;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName) = a18;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName) = a19;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName) = a20;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument) = a21;
  v39 = (_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_configurationKey);
  *v39 = a22;
  v39[1] = a23;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_source) = v45;
  v40 = sub_319AC((uint64_t *)&unk_3B8EA0);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48));
  v41 = PassthroughSubject.init()();
  v42 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
  v42(a16, v36);
  v42(a15, v36);
  *(_QWORD *)(v25 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_dataUpdatedSubject) = v41;
  return v25;
}

uint64_t sub_AB8B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_AB8EC + 4 * byte_2E9490[a1]))(0x6C616E6964726FLL, 0xE700000000000000);
}

uint64_t sub_AB8EC()
{
  return 0x657A695365676170;
}

unint64_t sub_AB904()
{
  return 0xD000000000000018;
}

uint64_t sub_ABA98()
{
  unsigned __int8 *v0;

  return sub_AB8B8(*v0);
}

uint64_t sub_ABAA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_B0DEC(a1, a2);
  *a3 = result;
  return result;
}

void sub_ABAC4(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_ABAD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B1DD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_ABAF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_B1DD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DocumentPaginationEntity.__allocating_init(from:)(_QWORD *a1)
{
  return sub_B155C(a1);
}

uint64_t sub_ABB34(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t KeyPath;
  __n128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  __int128 *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __n128 v43;
  void (*v44)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, __n128);
  void (*v45)(_QWORD, _QWORD);
  uint64_t v46;
  void (*v47)(_QWORD, _QWORD);
  uint64_t v48;
  __n128 v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unsigned __int8 *v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD, _QWORD);
  uint64_t v73;
  _QWORD v74[3];
  _QWORD v75[3];
  _QWORD v76[3];
  _QWORD v77[3];
  _BYTE v78[24];
  _BYTE v79[24];
  _QWORD v80[3];
  _QWORD v81[3];
  _QWORD v82[3];
  __int128 v83;
  _BYTE v84[24];
  unsigned __int8 v85[32];
  char v86;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  __chkstk_darwin(v4);
  v68 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v67 - v7;
  v9 = sub_319AC(&qword_3B9D58);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_472D0(a1, v13);
  v15 = sub_B1DD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DocumentPaginationEntity.CodingKeys, &type metadata for DocumentPaginationEntity.CodingKeys, v15, v13, v14);
  v71 = v2;
  v16 = *(_QWORD *)(v2 + 16);
  v85[0] = 0;
  v73 = v9;
  v17 = v72;
  KeyedEncodingContainer.encode(_:forKey:)(v16, v85, v9);
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v73);
  v72 = (void (*)(_QWORD, _QWORD))v8;
  v19 = v70;
  *(_OWORD *)v85 = *(_OWORD *)(v71 + 24);
  v84[0] = 1;
  type metadata accessor for CGSize(0);
  v21 = v20;
  v22 = sub_34284(&qword_3B9D68, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  v23 = v73;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v85, v84, v73, v21, v22);
  *(_QWORD *)v85 = *(_QWORD *)(v71 + 40);
  v84[0] = 2;
  v24 = sub_B1E18();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v85, v84, v23, &type metadata for CGFloat, v24);
  v67 = v10;
  KeyPath = swift_getKeyPath(&unk_2E94B8);
  swift_getKeyPath(&unk_2E94E0);
  static Published.subscript.getter(v85, v71, KeyPath);
  swift_release();
  v26 = swift_release();
  v27 = v85[0];
  v85[0] = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v27, v85, v23, v26);
  v28 = (uint64_t *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v85, 0, 0);
  v29 = *v28;
  v84[0] = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v29, v84, v23);
  v84[0] = *(_BYTE *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationDirection);
  LOBYTE(v83) = 5;
  v30 = sub_B1E5C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v84, &v83, v23, &type metadata for DocumentPaginationDirection, v30);
  v31 = (__int128 *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v84, 0, 0);
  v83 = *v31;
  LOBYTE(v82[0]) = 6;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v83, v82, v23, v21, v22);
  LOBYTE(v83) = *(_BYTE *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode);
  LOBYTE(v82[0]) = 7;
  v32 = sub_B1EA0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v83, v82, v23, &type metadata for DocumentPaginationMode, v32);
  v33 = (_QWORD *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, &v83, 0, 0);
  v82[0] = *v33;
  LOBYTE(v81[0]) = 8;
  v34 = sub_319AC(&qword_3B7058);
  v35 = sub_B1EE4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v82, v81, v23, v34, v35);
  v36 = (_QWORD *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, v82, 0, 0);
  v81[0] = *v36;
  LOBYTE(v80[0]) = 9;
  v37 = sub_319AC(&qword_3B9D98);
  v38 = sub_B1F60();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v81, v80, v23, v37, v38);
  v39 = (_QWORD *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, v81, 0, 0);
  v80[0] = *v39;
  v79[0] = 10;
  v40 = sub_319AC(&qword_3B9DB0);
  v41 = sub_B1FDC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v80, v79, v23, v40, v41);
  v42 = v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate;
  v43 = swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate, v80, 0, 0);
  v44 = *(void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, __n128))(v69 + 16);
  v45 = v72;
  v44(v72, v42, v19, v43);
  v79[0] = 11;
  v46 = sub_34284(&qword_3B9DC8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v45, v79, v73, v19, v46);
  v47 = v72;
  v72 = *(void (**)(_QWORD, _QWORD))(v69 + 8);
  v72(v47, v19);
  v48 = v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate;
  v49 = swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate, v79, 0, 0);
  v50 = v68;
  v44((void (*)(_QWORD, _QWORD))v68, v48, v19, v49);
  v78[0] = 12;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v50, v78, v73, v19, v46);
  v72(v68, v19);
  v51 = (_QWORD *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName, v78, 0, 0);
  v77[0] = *v51;
  LOBYTE(v76[0]) = 13;
  v52 = sub_319AC(&qword_3B9DD0);
  v53 = sub_B2058();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v77, v76, v73, v52, v53);
  v54 = (_QWORD *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName, v77, 0, 0);
  v76[0] = *v54;
  LOBYTE(v75[0]) = 14;
  v55 = sub_319AC(&qword_3B9DE8);
  v56 = sub_B20DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v76, v75, v73, v55, v56);
  v57 = (_QWORD *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName, v76, 0, 0);
  v75[0] = *v57;
  LOBYTE(v74[0]) = 15;
  v58 = sub_319AC(&qword_3B9E00);
  v59 = sub_B2160();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v75, v74, v73, v58, v59);
  v60 = (_QWORD *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName);
  swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName, v75, 0, 0);
  v74[0] = *v60;
  v86 = 16;
  v61 = sub_319AC(&qword_3B9E18);
  v62 = sub_B21E4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v74, &v86, v73, v61, v62);
  v63 = (unsigned __int8 *)(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument);
  v64 = swift_beginAccess(v71 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument, v74, 0, 0);
  v65 = *v63;
  v86 = 17;
  v66 = v73;
  KeyedEncodingContainer.encode(_:forKey:)(v65, &v86, v73, v64);
  return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v12, v66);
}

uint64_t sub_AC3C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v30[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_3B5740 != -1)
    swift_once(&qword_3B5740, sub_AABBC);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_555F0(v5, (uint64_t)qword_3B9D18);
  Date.init()(v6);
  v7 = (unint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, v36, 0, 0);
  v8 = *v7;
  v9 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v35, 0, 0);
  v10 = *v9;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  sub_11A648(v8, v10, (void (*)(uint64_t))sub_AC9E0, 0, (void (*)(uint64_t, _QWORD *, __n128))sub_ACA2C, 0);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v10);
  v11 = (unint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, v34, 0, 0);
  v12 = *v11;
  v13 = *v9;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  sub_11A680(v12, v13, (void (*)(uint64_t))sub_ACAC4, 0, (void (*)(uint64_t, _QWORD *, __n128))sub_ACB10, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  v14 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName, v33, 0, 0);
  v15 = *v14;
  v16 = *v9;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  sub_11AE24(v15, v16, (void (*)(uint64_t))sub_AC734, 0, (void (*)(uint64_t, _QWORD *, __n128))sub_AC780, 0);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  v17 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName, v32, 0, 0);
  v18 = *v17;
  v19 = *v9;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  sub_11AE5C(v18, v19, (void (*)(uint64_t))sub_AC818, 0, (void (*)(uint64_t, _QWORD *, __n128))sub_AC864, 0);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v19);
  v20 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName, v31, 0, 0);
  v21 = *v20;
  v22 = *v9;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  sub_11AE94(v21, v22, (void (*)(uint64_t))sub_AC8FC, 0, (void (*)(uint64_t, _QWORD *, __n128))sub_AC948, 0);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v22);
  v23 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName, v30, 0, 0);
  v24 = *v23;
  v25 = *v9;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  sub_11ADEC(v24, v25, (void (*)(uint64_t))sub_ACBA8, 0, (void (*)(uint64_t, _QWORD *, __n128))sub_ACBF4, 0);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  v27 = Date.timeIntervalSinceNow.getter(v26);
  return (*(uint64_t (**)(char *, uint64_t, double))(v2 + 8))(v4, v1, v27);
}

uint64_t sub_AC734(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(a1 + 80, v4, 1, 0);
  v2 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_AC780(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 80, v10, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a1 + 80) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((char *)&dword_10 + v5);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a2);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_AC818(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(a1 + 88, v4, 1, 0);
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_AC864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 88, v10, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a1 + 88) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((char *)&dword_10 + v5);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a2);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_AC8FC(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(a1 + 96, v4, 1, 0);
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_AC948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 96, v10, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a1 + 96) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((char *)&dword_10 + v5);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a2);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_AC9E0(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(a1 + 64, v4, 1, 0);
  v2 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_ACA2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 64, v10, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((char *)&dword_10 + v5);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a2);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_ACAC4(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(a1 + 72, v4, 1, 0);
  v2 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_ACB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 72, v10, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((char *)&dword_10 + v5);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a2);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_ACBA8(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  swift_beginAccess(a1 + 104, v4, 1, 0);
  v2 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_ACBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a1 + 104, v10, 33, 0);
  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v5 = *(_QWORD *)(a1 + 104) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)((char *)&dword_10 + v5);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a2);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_ACC8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  result = swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v7, 0, 0);
  v5 = *v3;
  if (*v3 < 1)
    v6 = 0;
  else
    v6 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = v5 < 1;
  return result;
}

uint64_t sub_ACD00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  result = swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v8, 0, 0);
  v5 = *v3;
  v6 = *v3 - 1;
  if (*v3 < 1)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 16);
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v5 < 1;
  return result;
}

uint64_t sub_ACD78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  result = swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v13, 0, 0);
  v7 = *v5;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v12 = v7;
    else
      v12 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v12);
    result = swift_bridgeObjectRelease(v7);
    if (v8 < 0)
    {
      __break(1u);
      return result;
    }
  }
  else
  {
    v8 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
  }
  v9 = a1 < 0 || v8 <= a1;
  v10 = v9;
  if (v9)
  {
    v11 = 0;
    a1 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(v2 + 16);
  }
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = a1;
  *(_BYTE *)(a2 + 16) = v10;
  return result;
}

void sub_ACE3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _BYTE v25[32];
  _BYTE v26[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, v26, 0, 0);
  v6 = *v5;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v6);
  v8 = sub_B0CC4(v7, a1, a2);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a2);
  if (!v8)
    return;
  swift_beginAccess(v8 + 40, v25, 0, 0);
  v9 = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRetain(v9);
  v11 = sub_95C18(v10);
  v13 = v12;
  swift_bridgeObjectRelease(v9);
  if ((v13 & 1) != 0)
  {
LABEL_18:
    swift_release();
    return;
  }
  v14 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v14, &v24, 0, 0);
  v15 = *v14;
  if (!((unint64_t)*v14 >> 62))
  {
    if (v11 < *(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8)))
      goto LABEL_5;
LABEL_14:
    if (qword_3B5740 == -1)
    {
LABEL_15:
      v19 = type metadata accessor for Logger(0);
      v20 = sub_555F0(v19, (uint64_t)qword_3B9D18);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_0, v21, v22, "Found bookmark pageOffset is not within known pages.", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      goto LABEL_18;
    }
LABEL_22:
    swift_once(&qword_3B5740, sub_AABBC);
    goto LABEL_15;
  }
  if (v15 < 0)
    v17 = *v14;
  else
    v17 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v14);
  v18 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v15);
  if (v11 >= v18)
    goto LABEL_14;
LABEL_5:
  v16 = *v14;
  if ((*v14 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*v14);
    specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v16);
    swift_bridgeObjectRelease(v16);
    goto LABEL_9;
  }
  if (v11 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  if ((unint64_t)v11 < *(_QWORD *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFF8)))
  {
    swift_retain();
LABEL_9:
    swift_release();
    return;
  }
  __break(1u);
}

uint64_t sub_AD098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v5, v10, 0, 0);
  v6 = *v5;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v6);
  v8 = sub_B0A2C(v7, a1, a2);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a2);
  return v8;
}

uint64_t sub_AD124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
  swift_beginAccess(v5, v10, 0, 0);
  v6 = *v5;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v6);
  v8 = sub_B0CC4(v7, a1, a2);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(a2);
  return v8;
}

uint64_t sub_AD1B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  _BYTE v11[24];

  sub_ACE3C(a1, a2);
  v6 = v5;
  if (!v5)
  {
    v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(v7, v11, 0, 0);
    v8 = *v7;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v8);
    v6 = sub_B0A2C(v9, a1, a2);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(a2);
  }
  return v6;
}

_QWORD *sub_AD248(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  double *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v18;
  double v20;
  uint64_t v21;
  double v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[24];

  v4 = *(double *)(v1 + 40);
  if (v4 == 0.0)
    return sub_AD790((double *)a1);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode) == 1)
  {
    swift_bridgeObjectRelease(0xE900000000000064);
  }
  else
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C6C6F726373, 0xE600000000000000, 0x6574616E69676170, 0xE900000000000064, 0);
    swift_bridgeObjectRelease(0xE600000000000000);
    if ((v2 & 1) == 0)
      return sub_AD790((double *)a1);
  }
  v6 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationDirection);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationDirection))
  {
    if (v6 == 1)
    {
      v2 = 0xEB00000000746665;
      v7 = 0x4C6F547468676972;
    }
    else
    {
      v2 = 0xE800000000000000;
      v7 = 0x6C61636974726576;
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v2, 0x69526F547466656CLL, 0xEB00000000746867, 0);
    swift_bridgeObjectRelease(v2);
    if ((v8 & 1) == 0)
      return sub_AD790((double *)a1);
  }
  else
  {
    swift_bridgeObjectRelease(0xEB00000000746867);
  }
  if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) == 0)
    goto LABEL_90;
  if (v4 <= -9.22337204e18)
    goto LABEL_91;
  if (v4 >= 9.22337204e18)
    goto LABEL_92;
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v9, v35, 0, 0);
  v2 = *v9;
  if ((unint64_t)*v9 >> 62)
    goto LABEL_93;
  v34 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    v2 = (uint64_t)v4;
    v11 = a1 + 32;
    v33 = a1;
    swift_bridgeObjectRetain(a1);
    a1 = 0;
    v12 = _swiftEmptyArrayStorage;
LABEL_19:
    v13 = (double *)(v11 + 32 * a1);
    v4 = *v13;
    v14 = v13[2];
    if (!v6)
    {
      if ((~*(_QWORD *)&v4 & 0x7FF0000000000000) != 0)
      {
        if (v4 > -9.22337204e18)
        {
          if (v4 < 9.22337204e18)
          {
            if (v2)
            {
              if ((uint64_t)v4 == 0x8000000000000000 && v2 == -1)
              {
LABEL_86:
                __break(1u);
                goto LABEL_87;
              }
              v18 = v4 + v14;
              if ((~COERCE__INT64(v4 + v14) & 0x7FF0000000000000) != 0)
              {
                if (v18 > -9.22337204e18)
                {
                  if (v18 < 9.22337204e18)
                  {
                    if ((uint64_t)v18 != 0x8000000000000000 || v2 != -1)
                    {
                      v15 = (uint64_t)v4 / v2;
                      v16 = (uint64_t)v18 / v2;
                      goto LABEL_54;
                    }
LABEL_87:
                    __break(1u);
LABEL_88:
                    __break(1u);
                    goto LABEL_89;
                  }
                  goto LABEL_78;
                }
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
LABEL_79:
                __break(1u);
LABEL_80:
                __break(1u);
LABEL_81:
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
LABEL_84:
                __break(1u);
LABEL_85:
                __break(1u);
                goto LABEL_86;
              }
LABEL_76:
              __break(1u);
              goto LABEL_77;
            }
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
LABEL_74:
          __break(1u);
          goto LABEL_75;
        }
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
LABEL_72:
      __break(1u);
      goto LABEL_73;
    }
    if (v6 == 1)
    {
      v15 = sub_B14C8(v2, v34, *v13);
      v16 = sub_B14C8(v2, v34, v4 + v14);
      goto LABEL_54;
    }
    v20 = v13[1];
    if ((~*(_QWORD *)&v20 & 0x7FF0000000000000) == 0)
      goto LABEL_79;
    if (v20 <= -9.22337204e18)
      goto LABEL_80;
    if (v20 >= 9.22337204e18)
      goto LABEL_81;
    if (!v2)
      goto LABEL_82;
    v21 = (uint64_t)v20;
    if ((uint64_t)v20 == 0x8000000000000000 && v2 == -1)
      goto LABEL_88;
    v23 = v20 + v13[3];
    if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) == 0)
      goto LABEL_83;
    if (v23 <= -9.22337204e18)
      goto LABEL_84;
    if (v23 >= 9.22337204e18)
      goto LABEL_85;
    if ((uint64_t)v23 != 0x8000000000000000 || v2 != -1)
      break;
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    if (v2 < 0)
      v32 = v2;
    else
      v32 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v34 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v2);
    v10 = *(_QWORD *)(a1 + 16);
    if (!v10)
      return _swiftEmptyArrayStorage;
  }
  v15 = v21 / v2;
  v16 = (uint64_t)v23 / v2;
LABEL_54:
  ++a1;
  if (v16 < v15)
  {
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }
  while (1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
    if (v15 < 0)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v12 = sub_42AAC(0, v12[2] + 1, 1, v12);
      v27 = v12[2];
      v30 = v12[3];
      v28 = v27 + 1;
      if (v27 >= v30 >> 1)
        v12 = sub_42AAC((_QWORD *)(v30 > 1), v27 + 1, 1, v12);
      v29 = 0;
    }
    else
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v12 = sub_42AAC(0, v12[2] + 1, 1, v12);
      v27 = v12[2];
      v26 = v12[3];
      v28 = v27 + 1;
      if (v27 >= v26 >> 1)
        v12 = sub_42AAC((_QWORD *)(v26 > 1), v27 + 1, 1, v12);
      v29 = v15;
    }
    v12[2] = v28;
    v12[v27 + 4] = v29;
    if (v16 == v15)
      break;
    if (__OFADD__(v15++, 1))
    {
      __break(1u);
      goto LABEL_71;
    }
  }
  if (a1 != v10)
    goto LABEL_19;
  swift_bridgeObjectRelease(v33);
  return v12;
}

_QWORD *sub_AD790(double *a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  double *v10;
  BOOL v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  BOOL v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[24];
  CGRect v37;
  CGRect v38;
  CGRect v39;

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v3, v36, 0, 0);
  v4 = *v3;
  if ((unint64_t)*v3 >> 62)
    goto LABEL_24;
  v5 = *(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(*v3);
  while (v5)
  {
    v6 = 0;
    v7 = *((_QWORD *)a1 + 2);
    v8 = v4 & 0xC000000000000001;
    v33 = v4 + 32;
    v34 = v4 & 0xFFFFFFFFFFFFFF8;
    v9 = _swiftEmptyArrayStorage;
    v35 = v7;
    while (v8)
    {
      v10 = (double *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      v11 = __OFADD__(v6++, 1);
      if (v11)
        goto LABEL_22;
LABEL_12:
      if (v7)
      {
        v12 = a1[4];
        v13 = a1[5];
        v14 = a1[6];
        v15 = a1[7];
        v16 = v10[4];
        v17 = v10[5];
        v18 = v10[6];
        v19 = v10[7];
        swift_bridgeObjectRetain(a1);
        v37.origin.x = v16;
        v37.origin.y = v17;
        v37.size.width = v18;
        v37.size.height = v19;
        v39.origin.x = v12;
        v39.origin.y = v13;
        v39.size.width = v14;
        v39.size.height = v15;
        v20 = CGRectIntersectsRect(v37, v39);
        v21 = v7;
        v22 = a1 + 11;
        if (v20)
        {
LABEL_16:
          v25 = v5;
          v26 = v8;
          v27 = v4;
          swift_bridgeObjectRelease(a1);
          v28 = *((_QWORD *)v10 + 2);
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_42AAC(0, v9[2] + 1, 1, v9);
          v30 = v9[2];
          v29 = v9[3];
          if (v30 >= v29 >> 1)
            v9 = sub_42AAC((_QWORD *)(v29 > 1), v30 + 1, 1, v9);
          v9[2] = v30 + 1;
          v9[v30 + 4] = v28;
          swift_release();
          v4 = v27;
          v8 = v26;
          v5 = v25;
          v7 = v35;
        }
        else
        {
          while (--v21)
          {
            v23 = v22 + 4;
            v38.origin.x = v16;
            v38.origin.y = v17;
            v38.size.width = v18;
            v38.size.height = v19;
            v24 = CGRectIntersectsRect(v38, *(CGRect *)(v22 - 3));
            v22 = v23;
            if (v24)
              goto LABEL_16;
          }
          swift_release();
          swift_bridgeObjectRelease(a1);
        }
      }
      else
      {
        swift_release();
      }
      if (v6 == v5)
        goto LABEL_29;
    }
    if (v6 >= *(_QWORD *)(v34 + 16))
      goto LABEL_23;
    v10 = *(double **)(v33 + 8 * v6);
    swift_retain();
    v11 = __OFADD__(v6++, 1);
    if (!v11)
      goto LABEL_12;
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (v4 < 0)
      v31 = v4;
    else
      v31 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v31);
  }
  v9 = _swiftEmptyArrayStorage;
LABEL_29:
  swift_bridgeObjectRelease(v4);
  return v9;
}

uint64_t sub_ADA28(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;
  CGPoint v41;

  v2 = v1;
  v3 = *a1;
  v5 = *((double *)a1 + 1);
  v4 = *((double *)a1 + 2);
  if (*a1 == *(_QWORD *)(v1 + 16))
  {
    v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v38, 0, 0);
    v7 = *v6;
    if ((unint64_t)v7 >> 62)
      goto LABEL_19;
    v8 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain_n(v7, 2);
    while (v8)
    {
      v9 = 4;
      while (1)
      {
        v10 = v9 - 4;
        if ((v7 & 0xC000000000000001) == 0)
          break;
        v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v7);
        v12 = __OFADD__(v10, 1);
        v13 = v9 - 3;
        if (v12)
          goto LABEL_18;
LABEL_11:
        if (*(_QWORD *)(v11 + 24) == v3)
        {
          v41.x = v5;
          v41.y = v4;
          if (CGRectContainsPoint(*(CGRect *)(v11 + 32), v41))
          {
            swift_bridgeObjectRelease_n(v7, 2);
            return v11;
          }
        }
        swift_release(v11);
        ++v9;
        if (v13 == v8)
          goto LABEL_23;
      }
      v11 = *(_QWORD *)(v7 + 8 * v9);
      swift_retain(v11);
      v12 = __OFADD__(v10, 1);
      v13 = v9 - 3;
      if (!v12)
        goto LABEL_11;
LABEL_18:
      __break(1u);
LABEL_19:
      if (v7 < 0)
        v27 = v7;
      else
        v27 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v7, 2);
      v8 = _CocoaArrayWrapper.endIndex.getter(v27);
    }
LABEL_23:
    swift_bridgeObjectRelease_n(v7, 2);
    if (qword_3B5740 != -1)
      swift_once(&qword_3B5740, sub_AABBC);
    v28 = type metadata accessor for Logger(0);
    sub_555F0(v28, (uint64_t)qword_3B9D18);
    v29 = swift_retain_n(v2, 2);
    v16 = Logger.logObject.getter(v29);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v39 = v19;
      *(_DWORD *)v18 = 136315394;
      v30 = sub_5D6E8(v3, v5, v4);
      v32 = v31;
      v37 = sub_33524(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v18 + 4);
      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v18 + 12) = 2080;
      swift_retain(v2);
      v33 = DocumentPaginationEntity.description.getter();
      v35 = v34;
      swift_release(v2);
      v37 = sub_33524(v33, v35, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v18 + 14);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v35);
      v26 = "Unable to find page for point: %s in document: %s";
      goto LABEL_27;
    }
LABEL_28:

    swift_release_n(v2, 2);
    return 0;
  }
  if (qword_3B5740 != -1)
    swift_once(&qword_3B5740, sub_AABBC);
  v14 = type metadata accessor for Logger(0);
  sub_555F0(v14, (uint64_t)qword_3B9D18);
  v15 = swift_retain_n(v1, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, v17))
    goto LABEL_28;
  v18 = swift_slowAlloc(22, -1);
  v19 = swift_slowAlloc(64, -1);
  v38[0] = v19;
  *(_DWORD *)v18 = 136315394;
  v20 = sub_5D6E8(v3, v5, v4);
  v22 = v21;
  v39 = sub_33524(v20, v21, v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 4);
  swift_bridgeObjectRelease(v22);
  *(_WORD *)(v18 + 12) = 2080;
  swift_retain(v1);
  v23 = DocumentPaginationEntity.description.getter();
  v25 = v24;
  swift_release(v2);
  v39 = sub_33524(v23, v25, v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v18 + 14);
  swift_release_n(v2, 2);
  swift_bridgeObjectRelease(v25);
  v26 = "Impossible to find page for foreign point: %s in document: %s";
LABEL_27:
  _os_log_impl(&dword_0, v16, v17, v26, (uint8_t *)v18, 0x16u);
  swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v19, -1, -1);
  swift_slowDealloc(v18, -1, -1);

  return 0;
}

uint64_t sub_ADEB8(double *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41[3];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  double v45;
  CGRect v46;

  v2 = v1;
  v3 = *((_OWORD *)a1 + 1);
  v43 = *(_OWORD *)a1;
  v44 = v3;
  v45 = a1[4];
  v4 = v43;
  if ((_QWORD)v43 == *(_QWORD *)(v1 + 16))
  {
    v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v41, 0, 0);
    v6 = *v5;
    if ((unint64_t)v6 >> 62)
      goto LABEL_19;
    v7 = *(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain_n(v6, 2);
    while (v7)
    {
      v8 = *((double *)&v43 + 1);
      v9 = *(double *)&v44;
      v10 = 4;
      v11 = *((double *)&v44 + 1);
      v12 = v45;
      while (1)
      {
        v13 = v10 - 4;
        if ((v6 & 0xC000000000000001) == 0)
          break;
        v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v6);
        v15 = __OFADD__(v13, 1);
        v16 = v10 - 3;
        if (v15)
          goto LABEL_18;
LABEL_11:
        if (*(_QWORD *)(v14 + 24) == v4)
        {
          v46.origin.x = v8;
          v46.origin.y = v9;
          v46.size.width = v11;
          v46.size.height = v12;
          if (CGRectIntersectsRect(*(CGRect *)(v14 + 32), v46))
          {
            swift_bridgeObjectRelease_n(v6, 2);
            return v14;
          }
        }
        swift_release();
        ++v10;
        if (v16 == v7)
          goto LABEL_23;
      }
      v14 = *(_QWORD *)(v6 + 8 * v10);
      swift_retain(v14);
      v15 = __OFADD__(v13, 1);
      v16 = v10 - 3;
      if (!v15)
        goto LABEL_11;
LABEL_18:
      __break(1u);
LABEL_19:
      if (v6 < 0)
        v30 = v6;
      else
        v30 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v6, 2);
      v7 = _CocoaArrayWrapper.endIndex.getter(v30);
    }
LABEL_23:
    swift_bridgeObjectRelease_n(v6, 2);
    if (qword_3B5740 != -1)
      swift_once(&qword_3B5740, sub_AABBC);
    v31 = type metadata accessor for Logger(0);
    sub_555F0(v31, (uint64_t)qword_3B9D18);
    v32 = swift_retain_n(v2, 2);
    v19 = Logger.logObject.getter(v32);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = swift_slowAlloc(64, -1);
      v42 = v22;
      *(_DWORD *)v21 = 136315394;
      v33 = sub_5D4E8();
      v35 = v34;
      v40 = sub_33524(v33, v34, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v21 + 4);
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v21 + 12) = 2080;
      swift_retain(v2);
      v36 = DocumentPaginationEntity.description.getter();
      v38 = v37;
      swift_release();
      v40 = sub_33524(v36, v38, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v21 + 14);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v38);
      v29 = "Unable to find page for rect:%s in DocumentPaginationEntity:%s";
      goto LABEL_27;
    }
LABEL_28:

    swift_release_n(v2, 2);
    return 0;
  }
  if (qword_3B5740 != -1)
    swift_once(&qword_3B5740, sub_AABBC);
  v17 = type metadata accessor for Logger(0);
  sub_555F0(v17, (uint64_t)qword_3B9D18);
  v18 = swift_retain_n(v1, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v19, v20))
    goto LABEL_28;
  v21 = swift_slowAlloc(22, -1);
  v22 = swift_slowAlloc(64, -1);
  v41[0] = v22;
  *(_DWORD *)v21 = 136315394;
  v23 = sub_5D4E8();
  v25 = v24;
  v42 = sub_33524(v23, v24, v41);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v21 + 4);
  swift_bridgeObjectRelease(v25);
  *(_WORD *)(v21 + 12) = 2080;
  swift_retain(v2);
  v26 = DocumentPaginationEntity.description.getter();
  v28 = v27;
  swift_release();
  v42 = sub_33524(v26, v28, v41);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v21 + 14);
  swift_release_n(v2, 2);
  swift_bridgeObjectRelease(v28);
  v29 = "Impossible to find page for foreign rect: %s in document: %s";
LABEL_27:
  _os_log_impl(&dword_0, v19, v20, v29, (uint8_t *)v21, 0x16u);
  swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v22, -1, -1);
  swift_slowDealloc(v21, -1, -1);

  return 0;
}

BOOL RelativeValue<>.intersects(_:)(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)v1 == *(_QWORD *)a1 && CGRectIntersectsRect(*(CGRect *)(v1 + 8), *(CGRect *)(a1 + 8));
}

uint64_t sub_AE39C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17[3];
  uint64_t v18;
  _BYTE v19[24];

  v2 = v1;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  swift_beginAccess(v4, v19, 0, 0);
  if ((a1 & 0x8000000000000000) == 0 && *v4 > a1)
  {
    v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(v5, v17, 0, 0);
    v2 = *v5;
    if ((v2 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(v2);
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(a1, v2);
      swift_bridgeObjectRelease(v2);
      return v6;
    }
    if (*(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8)) > (unint64_t)a1)
    {
      v6 = *(_QWORD *)(v2 + 8 * a1 + 32);
      swift_retain(v6);
      return v6;
    }
    __break(1u);
    goto LABEL_14;
  }
  if (qword_3B5740 != -1)
LABEL_14:
    swift_once(&qword_3B5740, sub_AABBC);
  v7 = type metadata accessor for Logger(0);
  sub_555F0(v7, (uint64_t)qword_3B9D18);
  v8 = swift_retain_n(v2, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(32, -1);
    v17[0] = v12;
    *(_DWORD *)v11 = 134218242;
    v18 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v11 + 4);
    *(_WORD *)(v11 + 12) = 2080;
    swift_retain(v2);
    v13 = DocumentPaginationEntity.description.getter();
    v15 = v14;
    swift_release();
    v18 = sub_33524(v13, v15, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v11 + 14);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl(&dword_0, v9, v10, "Unable to find page for pageOffset:%ld in DocumentPaginationEntity:%s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  return 0;
}

uint64_t sub_AE62C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v12 = *a1;
  v13 = v3;
  v14 = v4;
  v5 = sub_ADA28(&v12);
  if (!v5)
    return 0;
  v6 = v5;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v7 = sub_CD954((double *)&v12);
  if (v7)
  {
    v8 = v7;
    swift_release();
    return v8;
  }
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode) & 1) != 0)
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574616E69676170, 0xE900000000000064, 0x6C6C6F726373, 0xE600000000000000, 0);
    swift_bridgeObjectRelease(0xE900000000000064);
    if ((v9 & 1) == 0)
    {
LABEL_11:
      swift_release();
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRelease(0xE600000000000000);
  }
  v10 = *(_QWORD *)(v6 + 16);
  result = v10 - 1;
  if (!__OFSUB__(v10, 1))
  {
    if (sub_AE39C(result))
    {
      v12 = v2;
      v13 = v3;
      v14 = v4;
      v8 = sub_CD954((double *)&v12);
      swift_release();
      swift_release();
      return v8;
    }
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

double sub_AE764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v2 = v1;
  v4 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v24, 33, 0);
  v5 = swift_retain();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v5);
  v7 = *(_QWORD *)((char *)&dword_10 + (*v4 & 0xFFFFFFFFFFFFFF8));
  v6 = *(_QWORD *)((char *)&dword_18 + (*v4 & 0xFFFFFFFFFFFFFF8));
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, a1);
  specialized Array._endMutation()(v8);
  swift_endAccess(v24);
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  *(_QWORD *)&result = swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v24, 0, 0).n128_u64[0];
  v11 = *v9;
  v12 = *v4;
  if ((unint64_t)*v4 >> 62)
  {
    if (v12 < 0)
      v20 = *v4;
    else
      v20 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v4);
    v21 = _CocoaArrayWrapper.endIndex.getter(v20);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
    if (v11 >= v21)
      return result;
  }
  else if (v11 >= *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8)))
  {
    return result;
  }
  if (qword_3B5740 != -1)
    swift_once(&qword_3B5740, sub_AABBC);
  v13 = type metadata accessor for Logger(0);
  sub_555F0(v13, (uint64_t)qword_3B9D18);
  v14 = swift_retain();
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(32, -1);
    *(_DWORD *)v17 = 134218496;
    v18 = *v4;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 < 0)
        v22 = v18;
      else
        v22 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v19 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      v19 = *(_QWORD *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8));
    }
    v23 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v17 + 4);
    *(_WORD *)(v17 + 12) = 2048;
    v23 = *v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v17 + 14);
    *(_WORD *)(v17 + 22) = 2048;
    v23 = *(_QWORD *)(v2 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v17 + 24);
    swift_release();
    _os_log_impl(&dword_0, v15, v16, "Pages.count %ld exceeds pageCount %ld for ordinal %ld", (uint8_t *)v17, 0x20u);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_AEA0C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  void (*v24)(char *, uint64_t, uint64_t, __n128);
  char v25;
  void (*v26)(char *, uint64_t);
  __n128 v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35[3];
  _BYTE v36[24];

  v34 = a3;
  v32 = a2;
  v5 = sub_319AC(&qword_3BFBB0);
  __chkstk_darwin(v5);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - v13;
  v16 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v33 = v3;
  v17 = (uint64_t *)(v3 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName, v36, 33, 0);
  swift_bridgeObjectRetain(v15);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v17);
  v35[0] = *v17;
  *v17 = 0x8000000000000000;
  sub_17E18C(a1, v16, v15, isUniquelyReferenced_nonNull_native);
  v19 = *v17;
  *v17 = v35[0];
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v19);
  swift_endAccess(v36);
  sub_B2DD0(v32, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_B2E18((uint64_t)v7);
    v21 = v33;
    if ((v34 & 1) == 0)
      return result;
LABEL_7:
    v28 = *v17;
    v29 = (uint64_t *)(v21 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(v21 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v36, 0, 0);
    v30 = *v29;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v30);
    sub_11ADEC(v28, v30, (void (*)(uint64_t))sub_ACBA8, 0, (void (*)(uint64_t, _QWORD *, __n128))sub_ACBF4, 0);
    swift_bridgeObjectRelease(v28);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v30).n128_u64[0];
    return result;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
  v21 = v33;
  v22 = v33 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate;
  v23 = swift_beginAccess(v33 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate, v35, 0, 0);
  v24 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v24(v11, v22, v8, v23);
  v25 = static Date.> infix(_:_:)(v14, v11);
  v26 = *(void (**)(char *, uint64_t))(v9 + 8);
  v26(v11, v8);
  if ((v25 & 1) != 0)
  {
    ((void (*)(char *, char *, uint64_t))v24)(v11, v14, v8);
    v27 = swift_beginAccess(v22, v36, 33, 0);
    (*(void (**)(uint64_t, char *, uint64_t, __n128))(v9 + 40))(v22, v11, v8, v27);
    swift_endAccess(v36);
  }
  v26(v14, v8);
  if ((v34 & 1) != 0)
    goto LABEL_7;
  return result;
}

void sub_AECE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  void (*v71)(char *, uint64_t, uint64_t, __n128);
  uint64_t v72;
  __n128 v73;
  void (*v74)(uint64_t, char *, uint64_t, __n128);
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  __n128 v78;
  char *v79;
  char v80;
  _BYTE *v81;
  uint64_t KeyPath;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  _QWORD v91[3];
  _BYTE v92[24];
  _BYTE v93[24];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE v107[24];
  _BYTE v108[24];
  _BYTE v109[24];
  _BYTE v110[24];
  uint64_t v111;
  _BYTE v112[16];
  uint64_t v113;
  _BYTE v114[24];

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 == *(_QWORD *)(v1 + 16))
  {
    v9 = OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_source;
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_source))
    {
      v10 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_source);
      if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_source) == 1)
      {
        if ((v10 - 1) >= 2)
        {
LABEL_24:
          if (qword_3B5740 != -1)
            swift_once(&qword_3B5740, sub_AABBC);
          v30 = type metadata accessor for Logger(0);
          sub_555F0(v30, (uint64_t)qword_3B9D18);
          swift_retain();
          v31 = swift_retain();
          v17 = Logger.logObject.getter(v31);
          v18 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v17, v18))
          {
            v19 = swift_slowAlloc(22, -1);
            *(_DWORD *)v19 = 134218240;
            v113 = v8;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v19 + 4);
            swift_release();
            *(_WORD *)(v19 + 12) = 2048;
            v32 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
            swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, &v113, 0, 0);
            v111 = *v32;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v19 + 14);
            swift_release();
            v21 = "Ignoring #paginationData for: %ld pageCount:%ld stale data from template";
            goto LABEL_28;
          }
LABEL_29:

          swift_release();
          swift_release();
          return;
        }
      }
      else
      {
        if (!*(_BYTE *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_source))
          goto LABEL_24;
        if (v10 == 1)
        {
          if (qword_3B5740 != -1)
            swift_once(&qword_3B5740, sub_AABBC);
          v15 = type metadata accessor for Logger(0);
          sub_555F0(v15, (uint64_t)qword_3B9D18);
          swift_retain();
          v16 = swift_retain();
          v17 = Logger.logObject.getter(v16);
          v18 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v17, v18))
          {
            v19 = swift_slowAlloc(22, -1);
            *(_DWORD *)v19 = 134218240;
            v113 = v8;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v19 + 4);
            swift_release();
            *(_WORD *)(v19 + 12) = 2048;
            v20 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
            swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, &v113, 0, 0);
            v111 = *v20;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v19 + 14);
            swift_release();
            v21 = "Ignoring #paginationData for: %ld pageCount:%ld stale data";
LABEL_28:
            _os_log_impl(&dword_0, v17, v18, v21, (uint8_t *)v19, 0x16u);
            swift_slowDealloc(v19, -1, -1);

            return;
          }
          goto LABEL_29;
        }
      }
    }
    if (qword_3B5740 != -1)
      swift_once(&qword_3B5740, sub_AABBC);
    v22 = type metadata accessor for Logger(0);
    sub_555F0(v22, (uint64_t)qword_3B9D18);
    swift_retain_n(a1);
    v23 = swift_retain();
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, (os_log_type_t)v25))
    {
      v86 = v25;
      v87 = v5;
      v88 = v4;
      v26 = swift_slowAlloc(32, -1);
      v85 = swift_slowAlloc(32, -1);
      v113 = v85;
      *(_DWORD *)v26 = 134218498;
      v111 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v26 + 4);
      swift_release();
      *(_WORD *)(v26 + 12) = 2048;
      v27 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
      swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, &v90, 0, 0);
      v111 = *v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v26 + 14);
      *(_WORD *)(v26 + 22) = 2080;
      v89 = v9;
      if (*((_BYTE *)&v9->isa + a1))
      {
        if (*((_BYTE *)&v9->isa + a1) == 1)
        {
          v28 = 0xE500000000000000;
          v29 = 0x6568636163;
        }
        else
        {
          v28 = 0xEA00000000006E6FLL;
          v29 = 0x6974616E69676170;
        }
      }
      else
      {
        v28 = 0xE800000000000000;
        v29 = 0x6574616C706D6574;
      }
      v111 = sub_33524(v29, v28, &v113);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v26 + 24);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v28);
      _os_log_impl(&dword_0, v24, (os_log_type_t)v86, "Adopting #paginationData for: %ld pageCount:%ld source: %s", (uint8_t *)v26, 0x20u);
      v33 = v85;
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      v4 = v88;
      v9 = v89;
      v5 = v87;
    }
    else
    {

      swift_release_n(a1);
      swift_release();
    }
    v34 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, &v113, 0, 0);
    v35 = *v34;
    v36 = (_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, &v111, 1, 0);
    *v36 = v35;
    v37 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v110, 0, 0);
    v38 = *v37;
    v39 = v37[1];
    v40 = (_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v109, 1, 0);
    *v40 = v38;
    v40[1] = v39;
    v41 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v108, 0, 0);
    v42 = *v41;
    v43 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v107, 1, 0);
    v44 = *v43;
    *v43 = v42;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRelease(v44);
    v45 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, &v106, 0, 0);
    v46 = *v45;
    v47 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, &v105, 1, 0);
    v48 = *v47;
    *v47 = v46;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRelease(v48);
    v49 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, &v104, 0, 0);
    v50 = *v49;
    v51 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, &v103, 1, 0);
    v52 = *v51;
    *v51 = v50;
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRelease(v52);
    v53 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName, &v102, 0, 0);
    v54 = *v53;
    v55 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName, &v101, 1, 0);
    v56 = *v55;
    *v55 = v54;
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRelease(v56);
    v57 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName, &v100, 0, 0);
    v58 = *v57;
    v59 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName, &v99, 1, 0);
    v60 = *v59;
    *v59 = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease(v60);
    v61 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName, &v98, 0, 0);
    v62 = *v61;
    v63 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName, &v97, 1, 0);
    v64 = *v63;
    *v63 = v62;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRelease(v64);
    v65 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName, &v96, 0, 0);
    v66 = *v65;
    v67 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName, &v95, 1, 0);
    v68 = *v67;
    *v67 = v66;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRelease(v68);
    v69 = a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate;
    v70 = swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate, &v94, 0, 0);
    v71 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v71(v7, v69, v4, v70);
    v72 = v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate;
    v73 = swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate, v93, 33, 0);
    v74 = *(void (**)(uint64_t, char *, uint64_t, __n128))(v5 + 40);
    v74(v72, v7, v4, v73);
    swift_endAccess(v93);
    v75 = a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate;
    v76 = swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate, v93, 0, 0);
    v71(v7, v75, v4, v76);
    v77 = v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate;
    v78 = swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate, v92, 33, 0);
    v74(v77, v7, v4, v78);
    swift_endAccess(v92);
    v79 = (char *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument);
    swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument, v92, 0, 0);
    v80 = *v79;
    v81 = (_BYTE *)(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument);
    swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument, (char *)v91 + 1, 1, 0);
    *v81 = v80;
    KeyPath = swift_getKeyPath(&unk_2E94B8);
    swift_getKeyPath(&unk_2E94E0);
    static Published.subscript.getter(v91, a1, KeyPath);
    swift_release();
    swift_release();
    LOBYTE(v74) = v91[0];
    v83 = swift_getKeyPath(&unk_2E94B8);
    v84 = swift_getKeyPath(&unk_2E94E0);
    LOBYTE(v91[0]) = (_BYTE)v74;
    swift_retain();
    static Published.subscript.setter(v91, v2, v83, v84);
    *((_BYTE *)&v9->isa + v2) = *((_BYTE *)&v9->isa + a1);
  }
  else
  {
    if (qword_3B5740 != -1)
      swift_once(&qword_3B5740, sub_AABBC);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_555F0(v11, (uint64_t)qword_3B9D18);
    v89 = Logger.logObject.getter(v12);
    v13 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v89, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_0, v89, v13, "Attempting to update document pagination entity with mismatching ordinal", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

  }
}

uint64_t DocumentPaginationEntity.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity__paginationComplete;
  v2 = sub_319AC((uint64_t *)&unk_3B8E70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities));
  v3 = v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate;
  v4 = type metadata accessor for Date(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_textNodeCharacterCounts));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_configurationKey + 8));
  return v0;
}

uint64_t DocumentPaginationEntity.__deallocating_deinit()
{
  uint64_t v0;

  DocumentPaginationEntity.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_AF940@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for DocumentPaginationEntity(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

uint64_t sub_AF97C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_B155C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_AF9A4(_QWORD *a1)
{
  return sub_ABB34(a1);
}

void sub_AF9C4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
}

uint64_t DocumentPaginationEntity.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  _QWORD *v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  _QWORD *v19;
  Swift::String v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  _OWORD *v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  void *v31;
  Swift::String v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  Swift::String v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void *v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  void *v47;
  Swift::String v48;
  uint64_t v49;
  Swift::String v50;
  void *v51;
  Swift::String v52;
  uint64_t v53;
  Swift::String v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  void *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[3];
  _QWORD v64[3];
  _QWORD v65[3];
  uint64_t v66[3];
  uint64_t v67[3];
  uint64_t v68[3];
  _OWORD v69[2];
  _QWORD v70[3];
  _QWORD v71[3];
  _OWORD v72[2];
  _QWORD v73[4];

  v1 = v0;
  *(_QWORD *)&v72[0] = 0;
  *((_QWORD *)&v72[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(402);
  v73[0] = 0;
  v73[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 0xD000000000000029;
  v2._object = (void *)0x80000000002C9B70;
  String.append(_:)(v2);
  *(_QWORD *)&v72[0] = *(_QWORD *)(v0 + 16);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0xD000000000000010;
  v5._object = (void *)0x80000000002C9BA0;
  String.append(_:)(v5);
  v72[0] = *(_OWORD *)(v0 + 24);
  type metadata accessor for CGSize(0);
  v7 = v6;
  _print_unlocked<A, B>(_:_:)(v72, v73, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._object = (void *)0x80000000002C9BC0;
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v8);
  KeyPath = swift_getKeyPath(&unk_2E94B8);
  v10 = swift_getKeyPath(&unk_2E94E0);
  static Published.subscript.getter(v72, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v10);
  if (LOBYTE(v72[0]))
    v11 = 1702195828;
  else
    v11 = 0x65736C6166;
  if (LOBYTE(v72[0]))
    v12 = 0xE400000000000000;
  else
    v12 = 0xE500000000000000;
  v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 0xD000000000000011;
  v14._object = (void *)0x80000000002C9BE0;
  String.append(_:)(v14);
  v15 = (_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v72, 0, 0);
  v71[0] = *v15;
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18._object = (void *)0x80000000002C9C00;
  v18._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v18);
  v19 = (_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v71, 0, 0);
  v70[0] = *v19;
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v21 = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v21);
  v22._countAndFlagsBits = 0xD00000000000001BLL;
  v22._object = (void *)0x80000000002C9C20;
  String.append(_:)(v22);
  LOBYTE(v70[0]) = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationDirection);
  _print_unlocked<A, B>(_:_:)(v70, v73, &type metadata for DocumentPaginationDirection, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v23._countAndFlagsBits = 0xD000000000000013;
  v23._object = (void *)0x80000000002C9C40;
  String.append(_:)(v23);
  v24 = (_OWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v70, 0, 0);
  v69[0] = *v24;
  _print_unlocked<A, B>(_:_:)(v69, v73, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v25._countAndFlagsBits = 0xD000000000000016;
  v25._object = (void *)0x80000000002C9C60;
  String.append(_:)(v25);
  LOBYTE(v69[0]) = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode);
  _print_unlocked<A, B>(_:_:)(v69, v73, &type metadata for DocumentPaginationMode, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v26._countAndFlagsBits = 0x676170202020200ALL;
  v26._object = (void *)0xED0000203D207365;
  String.append(_:)(v26);
  v27 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v69, 0, 0);
  v28 = *v27;
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v60 = v28;
    else
      v60 = v28 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v28);
    v29 = _CocoaArrayWrapper.endIndex.getter(v60);
    swift_bridgeObjectRelease(v28);
  }
  else
  {
    v29 = *(_QWORD *)((char *)&dword_10 + (v28 & 0xFFFFFFFFFFFFF8));
  }
  v68[0] = v29;
  v30._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v31 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v31);
  v32._countAndFlagsBits = 0xD000000000000019;
  v32._object = (void *)0x80000000002C9C80;
  String.append(_:)(v32);
  v33 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, v68, 0, 0);
  v34 = *v33;
  if ((unint64_t)v34 >> 62)
  {
    if (v34 < 0)
      v61 = v34;
    else
      v61 = v34 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v34);
    v35 = _CocoaArrayWrapper.endIndex.getter(v61);
    swift_bridgeObjectRelease(v34);
  }
  else
  {
    v35 = *(_QWORD *)((char *)&dword_10 + (v34 & 0xFFFFFFFFFFFFF8));
  }
  v67[0] = v35;
  v36._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v37 = v36._object;
  String.append(_:)(v36);
  swift_bridgeObjectRelease(v37);
  v38._countAndFlagsBits = 0xD000000000000018;
  v38._object = (void *)0x80000000002C9CA0;
  String.append(_:)(v38);
  v39 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, v67, 0, 0);
  v40 = *v39;
  if ((unint64_t)v40 >> 62)
  {
    if (v40 < 0)
      v62 = v40;
    else
      v62 = v40 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v40);
    v41 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease(v40);
  }
  else
  {
    v41 = *(_QWORD *)((char *)&dword_10 + (v40 & 0xFFFFFFFFFFFFF8));
  }
  v66[0] = v41;
  v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v43 = v42._object;
  String.append(_:)(v42);
  swift_bridgeObjectRelease(v43);
  v44._countAndFlagsBits = 0xD00000000000001CLL;
  v44._object = (void *)0x80000000002C9CC0;
  String.append(_:)(v44);
  v45 = v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName, v66, 0, 0);
  v65[0] = *(_QWORD *)(*(_QWORD *)v45 + 16);
  v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v47 = v46._object;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(v47);
  v48._countAndFlagsBits = 0xD00000000000001BLL;
  v48._object = (void *)0x80000000002C9CE0;
  String.append(_:)(v48);
  v49 = v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName, v65, 0, 0);
  v64[0] = *(_QWORD *)(*(_QWORD *)v49 + 16);
  v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v51 = v50._object;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v51);
  v52._countAndFlagsBits = 0xD000000000000020;
  v52._object = (void *)0x80000000002C9D00;
  String.append(_:)(v52);
  v53 = v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName, v64, 0, 0);
  v63[0] = *(_QWORD *)(*(_QWORD *)v53 + 16);
  v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v55 = v54._object;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v55);
  v56._countAndFlagsBits = 0xD00000000000001DLL;
  v56._object = (void *)0x80000000002C9D30;
  String.append(_:)(v56);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName, v63, 0, 0);
  v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v58 = v57._object;
  String.append(_:)(v57);
  swift_bridgeObjectRelease(v58);
  return v73[0];
}

uint64_t sub_B00EC()
{
  return DocumentPaginationEntity.description.getter();
}

uint64_t DocumentPaginationEntity.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t KeyPath;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  _QWORD *v14;
  Swift::String v15;
  void *v16;
  Swift::String v17;
  _QWORD *v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  _OWORD *v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  void *v31;
  Swift::String v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  void *v45;
  Swift::String v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  void *v51;
  Swift::String v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  void *v58;
  Swift::String v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  Swift::String v64;
  void *v65;
  Swift::String v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::String v71;
  void *v72;
  uint64_t v74;
  _BYTE v75[24];
  _BYTE v76[24];
  _BYTE v77[24];
  _BYTE v78[24];
  _BYTE v79[24];
  _OWORD v80[2];
  _QWORD v81[3];
  _QWORD v82[3];
  _OWORD v83[2];
  __int128 v84;

  v1 = v0;
  *(_QWORD *)&v83[0] = 0;
  *((_QWORD *)&v83[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(402);
  v84 = v83[0];
  v2._countAndFlagsBits = 0xD000000000000029;
  v2._object = (void *)0x80000000002C9B70;
  String.append(_:)(v2);
  *(_QWORD *)&v83[0] = *(_QWORD *)(v0 + 16);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0xD000000000000010;
  v5._object = (void *)0x80000000002C9BA0;
  String.append(_:)(v5);
  v83[0] = *(_OWORD *)(v0 + 24);
  type metadata accessor for CGSize(0);
  v7 = v6;
  _print_unlocked<A, B>(_:_:)(v83, &v84, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._object = (void *)0x80000000002C9BC0;
  v8._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v8);
  KeyPath = swift_getKeyPath(&unk_2E94B8);
  swift_getKeyPath(&unk_2E94E0);
  static Published.subscript.getter(v83, v1, KeyPath);
  swift_release();
  swift_release();
  if (LOBYTE(v83[0]))
    v10 = 1702195828;
  else
    v10 = 0x65736C6166;
  if (LOBYTE(v83[0]))
    v11 = 0xE400000000000000;
  else
    v11 = 0xE500000000000000;
  v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0xD000000000000011;
  v13._object = (void *)0x80000000002C9BE0;
  String.append(_:)(v13);
  v14 = (_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v83, 0, 0);
  v82[0] = *v14;
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v16 = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v16);
  v17._object = (void *)0x80000000002C9C00;
  v17._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v17);
  v18 = (_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v82, 0, 0);
  v81[0] = *v18;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._object = (void *)0x80000000002C9C20;
  v21._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v21);
  LOBYTE(v81[0]) = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationDirection);
  _print_unlocked<A, B>(_:_:)(v81, &v84, &type metadata for DocumentPaginationDirection, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v22._countAndFlagsBits = 0xD000000000000013;
  v22._object = (void *)0x80000000002C9C40;
  String.append(_:)(v22);
  v23 = (_OWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v81, 0, 0);
  v80[0] = *v23;
  _print_unlocked<A, B>(_:_:)(v80, &v84, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v24._countAndFlagsBits = 0xD000000000000016;
  v24._object = (void *)0x80000000002C9C60;
  String.append(_:)(v24);
  LOBYTE(v80[0]) = *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode);
  _print_unlocked<A, B>(_:_:)(v80, &v84, &type metadata for DocumentPaginationMode, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v25._countAndFlagsBits = 0x676170202020200ALL;
  v25._object = (void *)0xED0000203D207365;
  String.append(_:)(v25);
  v26 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v80, 0, 0);
  v27 = *v26;
  v28 = type metadata accessor for PagePaginationEntity();
  swift_bridgeObjectRetain(v27);
  v30._countAndFlagsBits = Array.description.getter(v29, v28);
  v31 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v31);
  v32._countAndFlagsBits = 0xD000000000000019;
  v32._object = (void *)0x80000000002C9C80;
  String.append(_:)(v32);
  v33 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, v79, 0, 0);
  v34 = *v33;
  v35 = type metadata accessor for HighlightPaginationEntity(0);
  swift_bridgeObjectRetain(v34);
  v37._countAndFlagsBits = Array.description.getter(v36, v35);
  v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v38);
  v39._countAndFlagsBits = 0xD000000000000018;
  v39._object = (void *)0x80000000002C9CA0;
  String.append(_:)(v39);
  v40 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, v78, 0, 0);
  v41 = *v40;
  v42 = type metadata accessor for BookmarkPaginationEntity(0);
  swift_bridgeObjectRetain(v41);
  v44._countAndFlagsBits = Array.description.getter(v43, v42);
  v45 = v44._object;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v45);
  v46._countAndFlagsBits = 0xD00000000000001CLL;
  v46._object = (void *)0x80000000002C9CC0;
  String.append(_:)(v46);
  v47 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName, v77, 0, 0);
  v48 = *v47;
  v49 = type metadata accessor for AnchorPaginationEntity(0);
  swift_bridgeObjectRetain(v48);
  v50._countAndFlagsBits = Dictionary.description.getter(v48, &type metadata for String, v49, &protocol witness table for String);
  v51 = v50._object;
  String.append(_:)(v50);
  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v51);
  v52._object = (void *)0x80000000002C9CE0;
  v52._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v52);
  v53 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName, v76, 0, 0);
  v54 = *v53;
  v55 = type metadata accessor for MediaElementPaginationEntity(0);
  swift_bridgeObjectRetain(v54);
  v57._countAndFlagsBits = Dictionary.description.getter(v56, &type metadata for String, v55, &protocol witness table for String);
  v58 = v57._object;
  String.append(_:)(v57);
  swift_bridgeObjectRelease(v54);
  swift_bridgeObjectRelease(v58);
  v59._countAndFlagsBits = 0xD000000000000020;
  v59._object = (void *)0x80000000002C9D00;
  String.append(_:)(v59);
  v60 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName, v75, 0, 0);
  v61 = *v60;
  v62 = type metadata accessor for ExpandableContentPaginationEntity(0);
  swift_bridgeObjectRetain(v61);
  v64._countAndFlagsBits = Dictionary.description.getter(v63, &type metadata for String, v62, &protocol witness table for String);
  v65 = v64._object;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v65);
  v66._countAndFlagsBits = 0xD00000000000001DLL;
  v66._object = (void *)0x80000000002C9D30;
  String.append(_:)(v66);
  v67 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName);
  swift_beginAccess(v67, &v74, 0, 0);
  v68 = *v67;
  v69 = type metadata accessor for HistoryPaginationEntity(0);
  swift_bridgeObjectRetain(v68);
  v71._countAndFlagsBits = Dictionary.description.getter(v70, &type metadata for String, v69, &protocol witness table for String);
  v72 = v71._object;
  String.append(_:)(v71);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v72);
  return v84;
}

uint64_t sub_B07E4()
{
  return DocumentPaginationEntity.debugDescription.getter();
}

void RelativeValue<>.intersection(_:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;
  CGRect v16;
  CGRect v17;

  v4 = *a1;
  if (*(_QWORD *)v2 != *(_QWORD *)a1)
    goto LABEL_4;
  v6 = v2[3];
  v5 = v2[4];
  v8 = v2[1];
  v7 = v2[2];
  v10 = a1[3];
  v9 = a1[4];
  v12 = a1[1];
  v11 = a1[2];
  v13.origin.x = v8;
  v13.origin.y = v7;
  v13.size.width = v6;
  v13.size.height = v5;
  v16.origin.x = v12;
  v16.origin.y = v11;
  v16.size.width = v10;
  v16.size.height = v9;
  if (CGRectIntersectsRect(v13, v16))
  {
    v14.origin.x = v8;
    v14.origin.y = v7;
    v14.size.width = v6;
    v14.size.height = v5;
    v17.origin.x = v12;
    v17.origin.y = v11;
    v17.size.width = v10;
    v17.size.height = v9;
    v15 = CGRectIntersection(v14, v17);
    *(double *)a2 = v4;
    *(CGRect *)(a2 + 8) = v15;
    *(_BYTE *)(a2 + 40) = 0;
  }
  else
  {
LABEL_4:
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 40) = 1;
  }
}

void sub_B08DC(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  CGRect v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  if ((a1[5] & 1) != 0)
  {
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v4;
    *(_QWORD *)(a3 + 16) = v6;
    *(_QWORD *)(a3 + 24) = v7;
    *(_QWORD *)(a3 + 32) = v8;
  }
  else
  {
    if (*(_QWORD *)a2 == v5)
    {
      v9 = CGRectUnion(*(CGRect *)(a1 + 1), *(CGRect *)(a2 + 8));
      *(_QWORD *)a3 = v5;
      *(CGRect *)(a3 + 8) = v9;
      *(_BYTE *)(a3 + 40) = 0;
      return;
    }
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  *(_BYTE *)(a3 + 40) = 1;
}

unint64_t sub_B0984()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8A10;
  if (!qword_3B8A10)
  {
    v1 = sub_31A38((uint64_t *)&unk_3B8EA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for PassthroughSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3B8A10);
  }
  return result;
}

uint64_t DocumentPaginationEntity.SourceType.description.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6568636163;
  if (*v0 != 1)
    v1 = 0x6974616E69676170;
  if (*v0)
    return v1;
  else
    return 0x6574616C706D6574;
}

uint64_t sub_B0A2C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31[24];
  uint64_t v32;

  v5 = a1;
  if (a1 >> 62)
    goto LABEL_35;
  v6 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v6)
  {
    v7 = 0;
    v8 = v5 & 0xC000000000000001;
    v27 = v5 + 32;
    v28 = v5 & 0xC000000000000001;
    v29 = v5;
    while (!v8)
    {
      v5 = *(_QWORD *)(v27 + 8 * v7);
      swift_retain();
      v9 = __OFADD__(v7, 1);
      v10 = v7 + 1;
      if (v9)
        goto LABEL_34;
LABEL_10:
      swift_beginAccess(v5 + 64, v31, 0, 0);
      v11 = *(_QWORD *)(v5 + 64);
      v32 = v5;
      v30 = v10;
      if ((unint64_t)v11 >> 62)
      {
        if (v11 < 0)
          v23 = v11;
        else
          v23 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v11, 2);
        swift_bridgeObjectRetain(a3);
        v12 = _CocoaArrayWrapper.endIndex.getter(v23);
        if (v12)
        {
LABEL_12:
          v13 = 4;
          do
          {
            v14 = v13 - 4;
            if ((v11 & 0xC000000000000001) != 0)
            {
              v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v11);
              v15 = v13 - 3;
              if (__OFADD__(v14, 1))
                goto LABEL_33;
            }
            else
            {
              v5 = *(_QWORD *)(v11 + 8 * v13);
              swift_retain();
              v15 = v13 - 3;
              if (__OFADD__(v14, 1))
              {
LABEL_33:
                __break(1u);
                goto LABEL_34;
              }
            }
            v16 = *(_QWORD *)(v5 + 32);
            v17 = type metadata accessor for HighlightPaginationEntity(0);
            v18 = swift_dynamicCastClassUnconditional(v16, v17, 0, 0, 0);
            v19 = *(_QWORD *)(v18 + 16);
            v20 = *(_QWORD *)(v18 + 24);
            if (v19 == a2 && v20 == a3)
            {
              swift_bridgeObjectRelease(a3);
              swift_bridgeObjectRelease(v11);
              swift_release();
LABEL_32:
              v24 = v32;
              swift_bridgeObjectRelease(v29);
              swift_bridgeObjectRelease(v11);
              return v24;
            }
            v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, a2, a3, 0);
            swift_release();
            if ((v22 & 1) != 0)
            {
              swift_bridgeObjectRelease(a3);
              swift_bridgeObjectRelease(v11);
              goto LABEL_32;
            }
            ++v13;
          }
          while (v15 != v12);
        }
      }
      else
      {
        v12 = *(_QWORD *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8));
        swift_bridgeObjectRetain_n(v11, 2);
        swift_bridgeObjectRetain(a3);
        if (v12)
          goto LABEL_12;
      }
      swift_bridgeObjectRelease(a3);
      swift_release();
      swift_bridgeObjectRelease_n(v11, 2);
      v8 = v28;
      v5 = v29;
      v7 = v30;
      if (v30 == v6)
        goto LABEL_39;
    }
    v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
    v9 = __OFADD__(v7, 1);
    v10 = v7 + 1;
    if (!v9)
      goto LABEL_10;
LABEL_34:
    __break(1u);
LABEL_35:
    if (v5 < 0)
      v25 = v5;
    else
      v25 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v25);
  }
LABEL_39:
  swift_bridgeObjectRelease(v5);
  return 0;
}

uint64_t sub_B0CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v6)
  {
    v7 = 4;
    while (1)
    {
      v8 = v7 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
      v10 = __OFADD__(v8, 1);
      v11 = v7 - 3;
      if (v10)
        goto LABEL_18;
LABEL_9:
      v12 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      v14 = v12 == a2 && v13 == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }
      swift_release(v9);
      ++v7;
      if (v11 == v6)
        goto LABEL_15;
    }
    v9 = *(_QWORD *)(a1 + 8 * v7);
    swift_retain(v9);
    v10 = __OFADD__(v8, 1);
    v11 = v7 - 3;
    if (!v10)
      goto LABEL_9;
LABEL_18:
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v16);
  }
LABEL_15:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_B0DEC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;

  if (a1 == 0x6C616E6964726FLL && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E6964726FLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657A695365676170 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657A695365676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000018)
  {
    v8 = 0x80000000002C9D90;
    if (a2 == 0x80000000002C9D90)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000002C9D90, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000012)
  {
    v9 = 0x80000000002CA000;
    if (a2 == 0x80000000002CA000)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000002CA000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x6E756F4365676170 && a2 == 0xE900000000000074)
  {
    v10 = 0xE900000000000074;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E756F4365676170, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000013)
  {
    v11 = 0x80000000002C9E30;
    if (a2 == 0x80000000002C9E30)
      goto LABEL_35;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000002C9E30, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_35:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x53746E65746E6F63 && a2 == 0xEB00000000657A69)
  {
    v12 = 0xEB00000000657A69;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53746E65746E6F63, 0xEB00000000657A69, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_41;
  }
  if (a1 == 0x6974616E69676170 && a2 == 0xEE0065646F4D6E6FLL)
  {
    v13 = 0xEE0065646F4D6E6FLL;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974616E69676170, 0xEE0065646F4D6E6FLL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x7365676170 && a2 == 0xE500000000000000)
  {
    v14 = 0xE500000000000000;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7365676170, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_53;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000000002C9E70)
  {
    v15 = 0x80000000002C9E70;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000002C9E70, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_59;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000000002C9E90)
  {
    v16 = 0x80000000002C9E90;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002C9E90, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_65;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000000002C9EB0)
  {
    v17 = 0x80000000002C9EB0;
LABEL_71:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000000002C9EB0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_71;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000000002C9ED0)
  {
    v18 = 0x80000000002C9ED0;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000000002C9ED0, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_77;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000002C9EF0)
  {
    v19 = 0x80000000002C9EF0;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000002C9EF0, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_83;
  }
  if (a1 == 0xD000000000000013)
  {
    v20 = 0x80000000002C9F10;
    if (a2 == 0x80000000002C9F10)
      goto LABEL_88;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000002C9F10, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_88:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if (a1 == 0xD000000000000018)
  {
    v21 = 0x80000000002C9F30;
    if (a2 == 0x80000000002C9F30)
      goto LABEL_93;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000002C9F30, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
LABEL_93:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000000002C9F50)
  {
    v22 = 0x80000000002C9F50;
LABEL_99:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000002C9F50, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_99;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000000002C9F90)
  {
    swift_bridgeObjectRelease(0x80000000002C9F90);
    return 17;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000002C9F90, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v23 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t sub_B14C8(uint64_t result, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v3 = a2 - 1;
  if (__OFSUB__(a2, 1))
  {
    __break(1u);
    goto LABEL_14;
  }
  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a3 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a3 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((uint64_t)a3 == 0x8000000000000000 && result == -1)
    goto LABEL_20;
  v5 = (uint64_t)a3 / result;
  v6 = __OFSUB__(v5, v3);
  v7 = v5 - v3;
  if (!v6)
  {
    if (v7 != 0x8000000000000000)
      return -v7;
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_B155C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  unint64_t v29;
  double v30;
  int v31;
  unint64_t v32;
  char v34;
  double v35;
  double v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  void (*v55)(_BYTE *, _QWORD *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  void (*v61)(_QWORD *, uint64_t, __n128);
  _BYTE v62[12];
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  _BYTE *v73;
  _BYTE *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char v82;
  char v83;
  uint64_t v84;
  double v85;

  v2 = type metadata accessor for Date(0);
  v76 = *(_QWORD *)(v2 - 8);
  v77 = v2;
  __chkstk_darwin(v2);
  v4 = &v62[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v7 = &v62[-v6];
  __chkstk_darwin(v8);
  v10 = &v62[-v9];
  __chkstk_darwin(v11);
  v13 = &v62[-v12];
  v79 = sub_319AC(&qword_3BA2E0);
  v14 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v16 = &v62[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = a1[3];
  v18 = a1[4];
  v81 = a1;
  v19 = (uint64_t)sub_472D0(a1, v17);
  v20 = sub_B1DD4();
  v78 = v16;
  v21 = v80;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DocumentPaginationEntity.CodingKeys, &type metadata for DocumentPaginationEntity.CodingKeys, v20, v17, v18);
  if (!v21)
  {
    v73 = v7;
    v74 = v4;
    v75 = v13;
    v80 = v14;
    LOBYTE(v84) = 0;
    v22 = v79;
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v84, v79);
    type metadata accessor for CGSize(0);
    v25 = v24;
    v83 = 1;
    v26 = sub_34284(&qword_3BA2E8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v25, &v83, v22, v25, v26);
    v27 = *(double *)&v84;
    v28 = v85;
    v83 = 2;
    v29 = sub_B2E58();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, &type metadata for CGFloat, &v83, v22, &type metadata for CGFloat, v29);
    v30 = *(double *)&v84;
    LOBYTE(v84) = 3;
    v31 = KeyedDecodingContainer.decode(_:forKey:)(&v84, v22);
    LOBYTE(v84) = 4;
    v72 = KeyedDecodingContainer.decode(_:forKey:)(&v84, v22);
    v83 = 5;
    v32 = sub_B2E9C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, &type metadata for DocumentPaginationDirection, &v83, v22, &type metadata for DocumentPaginationDirection, v32);
    v34 = v84;
    v83 = 6;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v25, &v83, v22, v25, v26);
    v35 = *(double *)&v84;
    v36 = v85;
    v83 = 7;
    v37 = sub_B2EE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, &type metadata for DocumentPaginationMode, &v83, v22, &type metadata for DocumentPaginationMode, v37);
    v71 = v31;
    LOBYTE(v25) = v84;
    v38 = sub_319AC(&qword_3B7058);
    v83 = 8;
    v39 = sub_B2F24();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v38, &v83, v22, v38, v39);
    v40 = v72;
    v70 = v84;
    v41 = sub_319AC(&qword_3B9D98);
    v83 = 9;
    v42 = sub_B2FA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v41, &v83, v22, v41, v42);
    v69 = v84;
    v43 = sub_319AC(&qword_3B9DB0);
    v83 = 10;
    v44 = sub_B301C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v43, &v83, v79, v43, v44);
    v68 = v84;
    LOBYTE(v84) = 11;
    v45 = sub_34284(&qword_3BA338, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v75, v77, &v84, v79, v77, v45);
    LOBYTE(v84) = 12;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v10, v77, &v84, v79, v77, v45);
    v46 = sub_319AC(&qword_3B9DD0);
    v83 = 13;
    v47 = sub_B3098();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v46, &v83, v79, v46, v47);
    v67 = v84;
    v48 = sub_319AC(&qword_3B9DE8);
    v83 = 14;
    v49 = sub_B311C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v48, &v83, v79, v48, v49);
    v66 = v84;
    v50 = sub_319AC(&qword_3B9E00);
    v83 = 15;
    v51 = sub_B31A0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v50, &v83, v79, v50, v51);
    v65 = v84;
    v52 = sub_319AC(&qword_3B9E18);
    v83 = 16;
    v53 = sub_B3224();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, v52, &v83, v79, v52, v53);
    v64 = v84;
    LOBYTE(v84) = 17;
    v63 = KeyedDecodingContainer.decode(_:forKey:)(&v84, v79);
    LOBYTE(v84) = v34;
    v83 = v25;
    v54 = v75;
    v55 = *(void (**)(_BYTE *, _QWORD *, uint64_t))(v76 + 16);
    v56 = (uint64_t)v73;
    v57 = v77;
    v55(v73, v75, v77);
    v58 = (uint64_t)v74;
    v55(v74, v10, v57);
    v82 = 1;
    v59 = type metadata accessor for DocumentPaginationEntity(0);
    v19 = swift_allocObject(v59, *(unsigned int *)(v59 + 48));
    DocumentPaginationEntity.init(ordinal:pageSize:pageWidthIncludingGutter:paginationComplete:pageCount:startingPageOffset:paginationDirection:contentSize:paginationMode:pages:highlightEntities:bookmarkEntities:latestModifiedAnnotationDate:latestModifiedHistoryDate:anchorEntitiesByName:mediaEntitiesByName:expandableEntitiesByName:historyEntitiesByName:isVerticalDocument:configurationKey:source:)(v23, v71 & 1, v40, 0, (char *)&v84, &v83, v70, v69, v27, v28, v30, v35, v36, v68, v56, v58, v67, v66, v65,
      v64,
      v63 & 1,
      0,
      0xE000000000000000,
      &v82);
    swift_retain();
    sub_AC3C0();
    v60 = swift_release();
    v61 = *(void (**)(_QWORD *, uint64_t, __n128))(v76 + 8);
    v61(v10, v57, v60);
    ((void (*)(_QWORD *, uint64_t))v61)(v54, v57);
    (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v78, v79);
  }
  sub_34488(v81);
  return v19;
}

unint64_t sub_B1DD4()
{
  unint64_t result;

  result = qword_3B9D60;
  if (!qword_3B9D60)
  {
    result = swift_getWitnessTable(&unk_2E9854, &type metadata for DocumentPaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3B9D60);
  }
  return result;
}

unint64_t sub_B1E18()
{
  unint64_t result;

  result = qword_3B9D70;
  if (!qword_3B9D70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_3B9D70);
  }
  return result;
}

unint64_t sub_B1E5C()
{
  unint64_t result;

  result = qword_3B9D78;
  if (!qword_3B9D78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationDirection, &type metadata for DocumentPaginationDirection);
    atomic_store(result, (unint64_t *)&qword_3B9D78);
  }
  return result;
}

unint64_t sub_B1EA0()
{
  unint64_t result;

  result = qword_3B9D80;
  if (!qword_3B9D80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationMode, &type metadata for DocumentPaginationMode);
    atomic_store(result, (unint64_t *)&qword_3B9D80);
  }
  return result;
}

unint64_t sub_B1EE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9D88;
  if (!qword_3B9D88)
  {
    v1 = sub_31A38(&qword_3B7058);
    sub_34284(&qword_3B9D90, (uint64_t (*)(uint64_t))type metadata accessor for PagePaginationEntity, (uint64_t)&protocol conformance descriptor for PagePaginationEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_3B9D88);
  }
  return result;
}

unint64_t sub_B1F60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9DA0;
  if (!qword_3B9DA0)
  {
    v1 = sub_31A38(&qword_3B9D98);
    sub_34284(&qword_3B9DA8, type metadata accessor for HighlightPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_3B9DA0);
  }
  return result;
}

unint64_t sub_B1FDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9DB8;
  if (!qword_3B9DB8)
  {
    v1 = sub_31A38(&qword_3B9DB0);
    sub_34284(&qword_3B9DC0, type metadata accessor for BookmarkPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_3B9DB8);
  }
  return result;
}

unint64_t sub_B2058()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9DD8;
  if (!qword_3B9DD8)
  {
    v1 = sub_31A38(&qword_3B9DD0);
    sub_34284(&qword_3B9DE0, type metadata accessor for AnchorPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_3B9DD8);
  }
  return result;
}

unint64_t sub_B20DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9DF0;
  if (!qword_3B9DF0)
  {
    v1 = sub_31A38(&qword_3B9DE8);
    sub_34284(&qword_3B9DF8, type metadata accessor for MediaElementPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_3B9DF0);
  }
  return result;
}

unint64_t sub_B2160()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9E08;
  if (!qword_3B9E08)
  {
    v1 = sub_31A38(&qword_3B9E00);
    sub_34284(&qword_3B9E10, type metadata accessor for ExpandableContentPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_3B9E08);
  }
  return result;
}

unint64_t sub_B21E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9E20;
  if (!qword_3B9E20)
  {
    v1 = sub_31A38(&qword_3B9E18);
    sub_34284(&qword_3B9E28, type metadata accessor for HistoryPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_3B9E20);
  }
  return result;
}

unint64_t sub_B226C()
{
  unint64_t result;

  result = qword_3B9E30;
  if (!qword_3B9E30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationEntity.SourceType, &type metadata for DocumentPaginationEntity.SourceType);
    atomic_store(result, (unint64_t *)&qword_3B9E30);
  }
  return result;
}

unint64_t sub_B22B4()
{
  unint64_t result;

  result = qword_3B9E38;
  if (!qword_3B9E38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentEntityID, &type metadata for DocumentEntityID);
    atomic_store(result, (unint64_t *)&qword_3B9E38);
  }
  return result;
}

uint64_t sub_B2300@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_B26BC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationFailed, a2);
}

uint64_t sub_B230C(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_B2714(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationFailed);
}

uint64_t sub_B2318@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_B233C(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, a2);
}

uint64_t sub_B2324(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_B2394(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
}

uint64_t sub_B2330@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_B233C(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, a2);
}

uint64_t sub_B233C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t result;
  _BYTE v6[24];

  v4 = (_QWORD *)(*a1 + *a2);
  result = swift_beginAccess(v4, v6, 0, 0);
  *a3 = *v4;
  return result;
}

uint64_t sub_B2388(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_B2394(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
}

uint64_t sub_B2394(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _BYTE v8[24];

  v5 = *a1;
  v6 = (_QWORD *)(*a2 + *a5);
  result = swift_beginAccess(v6, v8, 1, 0);
  *v6 = v5;
  return result;
}

__n128 sub_B23DC@<Q0>(_QWORD *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 *v3;
  __n128 result;
  _BYTE v5[24];

  v3 = (__n128 *)(*a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
  swift_beginAccess(v3, v5, 0, 0);
  result = *v3;
  *a2 = *v3;
  return result;
}

uint64_t sub_B242C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
  result = swift_beginAccess(v4, v6, 1, 0);
  *v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t sub_B2480@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B25EC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, a2);
}

uint64_t sub_B248C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB2FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
}

uint64_t sub_B24A8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B25EC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, a2);
}

uint64_t sub_B24B4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB2FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
}

uint64_t sub_B24D0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B25EC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, a2);
}

uint64_t sub_B24DC(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB2FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
}

uint64_t sub_B24F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_AB144(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate, a2);
}

uint64_t sub_B2514(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB1A8(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedAnnotationDate);
}

uint64_t sub_B2530@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_AB144(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate, a2);
}

uint64_t sub_B254C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB1A8(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_latestModifiedHistoryDate);
}

uint64_t sub_B2568@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B25EC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName, a2);
}

uint64_t sub_B2574(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB2FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_anchorEntitiesByName);
}

uint64_t sub_B2590@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B25EC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName, a2);
}

uint64_t sub_B259C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB2FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_mediaEntitiesByName);
}

uint64_t sub_B25B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B25EC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName, a2);
}

uint64_t sub_B25C4(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB2FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_expandableEntitiesByName);
}

uint64_t sub_B25E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_B25EC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName, a2);
}

uint64_t sub_B25EC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];

  v4 = (uint64_t *)(*a1 + *a2);
  swift_beginAccess(v4, v7, 0, 0);
  v5 = *v4;
  *a3 = *v4;
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_B263C(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_AB2FC(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_historyEntitiesByName);
}

uint64_t sub_B2658@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_textNodeCharacterCounts);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_B26B0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return sub_B26BC(a1, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument, a2);
}

uint64_t sub_B26BC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X3>, _BYTE *a3@<X8>)
{
  _BYTE *v4;
  uint64_t result;
  _BYTE v6[24];

  v4 = (_BYTE *)(*a1 + *a2);
  result = swift_beginAccess(v4, v6, 0, 0);
  *a3 = *v4;
  return result;
}

uint64_t sub_B2708(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_B2714(a1, a2, a3, a4, &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument);
}

uint64_t sub_B2714(char *a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char v5;
  _BYTE *v6;
  uint64_t result;
  _BYTE v8[24];

  v5 = *a1;
  v6 = (_BYTE *)(*a2 + *a5);
  result = swift_beginAccess(v6, v8, 1, 0);
  *v6 = v5;
  return result;
}

uint64_t sub_B275C()
{
  return type metadata accessor for DocumentPaginationEntity(0);
}

uint64_t type metadata accessor for DocumentPaginationEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_3B9E68;
  if (!qword_3B9E68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DocumentPaginationEntity);
  return result;
}

void sub_B27A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[14];
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char *v17;

  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = &unk_2E9700;
  v6[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_B2A7C();
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    v6[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[5] = &unk_2E9718;
    v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[8] = &unk_2E9730;
    v6[9] = &unk_2E9700;
    v6[10] = &unk_2E9718;
    v6[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4 = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v10 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v11 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v12 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v13 = &unk_2E9748;
      v14 = &unk_2E9718;
      v15 = &unk_2E9760;
      v16 = &unk_2E9730;
      v17 = (char *)&value witness table for Builtin.Int8 + 64;
      swift_updateClassMetadata2(a1, 256, 25, v6, a1 + 80);
    }
  }
}

uint64_t method lookup function for DocumentPaginationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for DocumentPaginationEntity);
}

uint64_t dispatch thunk of DocumentPaginationEntity.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of ContentSizeCategoryManager.increaseContentSize()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.$paginationComplete.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of ContentSizeCategoryManager.contentSizeCategoryPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.pageCount.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.contentSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.highlightEntities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.bookmarkEntities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.latestModifiedAnnotationDate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.latestModifiedHistoryDate.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.anchorEntitiesByName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.mediaEntitiesByName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of ReadingLoupeStateController.readingLoupeGesture.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.historyEntitiesByName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.textNodeCharacterCounts.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.__allocating_init(ordinal:pageSize:pageWidthIncludingGutter:paginationComplete:pageCount:startingPageOffset:paginationDirection:contentSize:paginationMode:pages:highlightEntities:bookmarkEntities:latestModifiedAnnotationDate:latestModifiedHistoryDate:anchorEntitiesByName:mediaEntitiesByName:expandableEntitiesByName:historyEntitiesByName:isVerticalDocument:configurationKey:source:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 728))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 736))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.firstLocation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.lastLocation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.location(forBookPageOffset:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 816))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.page(containingBookmark:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 824))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.page(containingHighlight:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 832))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.highlight(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 840))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.page(containingAnnotation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 848))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.pageOffsets(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 888))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.page(containing:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 904))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 912))();
}

uint64_t dispatch thunk of DocumentPaginationEntity.page(forPageOffset:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 920))();
}

void sub_B2A7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_3B5ED8)
  {
    v0 = type metadata accessor for Published(0, &type metadata for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_3B5ED8);
  }
}

uint64_t storeEnumTagSinglePayload for DocumentPaginationEntity.SourceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_B2B1C + 4 * byte_2E94A7[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_B2B50 + 4 * byte_2E94A2[v4]))();
}

uint64_t sub_B2B50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B2B58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB2B60);
  return result;
}

uint64_t sub_B2B6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB2B74);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_B2B78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B2B80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DocumentPaginationEntity.SourceType()
{
  return &type metadata for DocumentPaginationEntity.SourceType;
}

uint64_t getEnumTagSinglePayload for DocumentPaginationEntity.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DocumentPaginationEntity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_B2C78 + 4 * byte_2E94B1[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_B2CAC + 4 * byte_2E94AC[v4]))();
}

uint64_t sub_B2CAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B2CB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB2CBCLL);
  return result;
}

uint64_t sub_B2CC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB2CD0);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_B2CD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B2CDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DocumentPaginationEntity.CodingKeys()
{
  return &type metadata for DocumentPaginationEntity.CodingKeys;
}

unint64_t sub_B2CFC()
{
  unint64_t result;

  result = qword_3BA2C8;
  if (!qword_3BA2C8)
  {
    result = swift_getWitnessTable(&unk_2E982C, &type metadata for DocumentPaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BA2C8);
  }
  return result;
}

unint64_t sub_B2D44()
{
  unint64_t result;

  result = qword_3BA2D0;
  if (!qword_3BA2D0)
  {
    result = swift_getWitnessTable(&unk_2E979C, &type metadata for DocumentPaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BA2D0);
  }
  return result;
}

unint64_t sub_B2D8C()
{
  unint64_t result;

  result = qword_3BA2D8;
  if (!qword_3BA2D8)
  {
    result = swift_getWitnessTable(&unk_2E97C4, &type metadata for DocumentPaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BA2D8);
  }
  return result;
}

uint64_t sub_B2DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BFBB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_B2E18(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC(&qword_3BFBB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_B2E58()
{
  unint64_t result;

  result = qword_3BA2F0;
  if (!qword_3BA2F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_3BA2F0);
  }
  return result;
}

unint64_t sub_B2E9C()
{
  unint64_t result;

  result = qword_3BA2F8;
  if (!qword_3BA2F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationDirection, &type metadata for DocumentPaginationDirection);
    atomic_store(result, (unint64_t *)&qword_3BA2F8);
  }
  return result;
}

unint64_t sub_B2EE0()
{
  unint64_t result;

  result = qword_3BA300;
  if (!qword_3BA300)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationMode, &type metadata for DocumentPaginationMode);
    atomic_store(result, (unint64_t *)&qword_3BA300);
  }
  return result;
}

unint64_t sub_B2F24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA308;
  if (!qword_3BA308)
  {
    v1 = sub_31A38(&qword_3B7058);
    sub_34284(&qword_3BA310, (uint64_t (*)(uint64_t))type metadata accessor for PagePaginationEntity, (uint64_t)&protocol conformance descriptor for PagePaginationEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_3BA308);
  }
  return result;
}

unint64_t sub_B2FA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA318;
  if (!qword_3BA318)
  {
    v1 = sub_31A38(&qword_3B9D98);
    sub_34284(&qword_3BA320, type metadata accessor for HighlightPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_3BA318);
  }
  return result;
}

unint64_t sub_B301C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA328;
  if (!qword_3BA328)
  {
    v1 = sub_31A38(&qword_3B9DB0);
    sub_34284(&qword_3BA330, type metadata accessor for BookmarkPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_3BA328);
  }
  return result;
}

unint64_t sub_B3098()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA340;
  if (!qword_3BA340)
  {
    v1 = sub_31A38(&qword_3B9DD0);
    sub_34284(&qword_3BA348, type metadata accessor for AnchorPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_3BA340);
  }
  return result;
}

unint64_t sub_B311C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA350;
  if (!qword_3BA350)
  {
    v1 = sub_31A38(&qword_3B9DE8);
    sub_34284(&qword_3BA358, type metadata accessor for MediaElementPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_3BA350);
  }
  return result;
}

unint64_t sub_B31A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA360;
  if (!qword_3BA360)
  {
    v1 = sub_31A38(&qword_3B9E00);
    sub_34284(&qword_3BA368, type metadata accessor for ExpandableContentPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_3BA360);
  }
  return result;
}

unint64_t sub_B3224()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA370;
  if (!qword_3BA370)
  {
    v1 = sub_31A38(&qword_3B9E18);
    sub_34284(&qword_3BA378, type metadata accessor for HistoryPaginationEntity, (uint64_t)&protocol conformance descriptor for ElementPaginationEntity<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_3BA370);
  }
  return result;
}

id static BEWebViewFactory.createForBooks(atSize:protocolCacheItem:webViewConfiguration:imageFilterMode:lineGuideEnabled:)(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v7;

  LOBYTE(v7) = a4;
  return objc_msgSend((id)objc_opt_self(BEWebViewFactory), "viewCreatedForBooksAtSize:protocolCacheItem:paginationOptions:cleanupOptions:cfiOptions:stylesheetSet:imageFilterMode:lineGuideEnabled:", a1, a2[2], a2[4], a2[3], a2[5], a3, a5, a6, v7);
}

uint64_t sub_B3344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v4 = sub_319AC(&qword_3BA5B8);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 16))(a1, a2, v6);
  v17[1] = v9;
  v10 = sub_319AC(&qword_3BA398);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_2E5F80;
  *(_QWORD *)(v11 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v12 = sub_319AC((uint64_t *)&unk_3BC540);
  v13 = sub_3DCC0((unint64_t *)&unk_3C00D0, (uint64_t *)&unk_3BC540, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.prepend(_:)(v11, v12, v13);
  swift_release(v9);
  swift_bridgeObjectRelease(v11);
  v14 = sub_3DCC0(&qword_3BA5C0, &qword_3BA5B8, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  v15 = Publisher.eraseToAnyPublisher()(v4, v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v15;
}

uint64_t sub_B34B4()
{
  id v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  sub_34450(0, &qword_3BA5C8, NSUserDefaults_ptr);
  v2 = sub_B3570();
  v3 = type metadata accessor for ContentSizeCategoryManager();
  v4 = swift_allocObject(v3, 81);
  result = ContentSizeCategoryManager.init(traitCollection:appUserDefaults:uiKitUserDefaults:)(v0, v1, v2);
  qword_3BA380 = v4;
  return result;
}

id sub_B3570()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0));
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "initWithSuiteName:", v2);

  return v3;
}

uint64_t ContentSizeCategoryManager.__allocating_init(traitCollection:appUserDefaults:uiKitUserDefaults:)(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 81);
  ContentSizeCategoryManager.init(traitCollection:appUserDefaults:uiKitUserDefaults:)(a1, a2, a3);
  return v7;
}

uint64_t static ContentSizeCategoryManager.shared.getter()
{
  if (qword_3B5748 != -1)
    swift_once(&qword_3B5748, sub_B34B4);
  return swift_retain();
}

void sub_B3674(void *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  void *v11;
  id v12;
  id v13;
  id v14;

  v2 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;
  v14 = a1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n(v5, 2);
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v9);
    if ((v10 & 1) == 0)
    {
      v11 = *(void **)(v1 + 40);
      if (v11)
      {
        v12 = *(id *)(v1 + 40);
      }
      else
      {
        v12 = *(id *)(v1 + 32);
        v11 = 0;
      }
      v13 = v11;
      sub_B3944(v12);
    }
  }

}

void sub_B3750(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  _BYTE v15[24];

  v2 = *(void **)(v1 + 40);
  if (!a1)
  {
    if (!v2)
      return;
    goto LABEL_11;
  }
  if (!v2)
  {
LABEL_9:
    v11 = *(id *)(v1 + 32);
    v2 = 0;
LABEL_12:
    swift_beginAccess(v1 + 48, v15, 1, 0);
    v12 = *(void **)(v1 + 48);
    *(_QWORD *)(v1 + 48) = v11;
    v13 = v2;
    v14 = v11;
    sub_B3844((uint64_t)v12);

    return;
  }
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 != v6 || v5 != v7)
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v9);
    if ((v10 & 1) != 0)
      return;
    v2 = *(void **)(v1 + 40);
    if (!v2)
      goto LABEL_9;
LABEL_11:
    v11 = v2;
    goto LABEL_12;
  }
  swift_bridgeObjectRelease_n(v5, 2);
}

void sub_B3844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  id v12;
  id v13;
  _BYTE v14[24];

  swift_beginAccess(v1 + 48, v14, 0, 0);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
    {
      v13 = *(id *)(v1 + 48);
      v12 = v13;
      PassthroughSubject.send(_:)(&v13);

    }
  }
}

id sub_B3914()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return *(id *)(v0 + 48);
}

void sub_B3944(void *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  id v13;
  id v14;
  _BYTE v15[24];

  swift_beginAccess(v1 + 48, v15, 1, 0);
  v3 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;
  v4 = a1;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  if (v5 == v8 && v7 == v9)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0)
    {
      v14 = *(id *)(v1 + 48);
      v13 = v14;
      PassthroughSubject.send(_:)(&v14);

      return;
    }
  }

}

uint64_t ContentSizeCategoryManager.init(traitCollection:appUserDefaults:uiKitUserDefaults:)(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString *v16;
  NSString *v17;
  NSString *v18;
  NSString *v19;
  NSString *v20;
  NSString *v21;
  NSString *v22;
  void *v23;
  NSString *v24;
  NSString *v25;
  NSString *v26;
  NSString *v27;
  NSString *v28;
  __CFString *v29;
  __CFString *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD v65[2];
  UIContentSizeCategory v66;
  UIContentSizeCategory v67;
  UIContentSizeCategory v68;
  __CFString *v69;
  __CFString *v70;
  __CFString *v71;
  void *v72;
  void *v73;
  id v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87[3];
  char v88[32];

  v73 = a2;
  v74 = a3;
  v72 = a1;
  v4 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v4);
  v81 = (char *)v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_319AC(&qword_3BA388);
  v76 = *(_QWORD *)(v6 - 8);
  v77 = v6;
  __chkstk_darwin(v6);
  v75 = (char *)v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_319AC(&qword_3C0020);
  v79 = *(_QWORD *)(v8 - 8);
  v80 = v8;
  __chkstk_darwin(v8);
  v78 = (char *)v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_319AC(&qword_3BA390);
  v83 = *(_QWORD *)(v10 - 8);
  v84 = v10;
  __chkstk_darwin(v10);
  v82 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = v3;
  *(_QWORD *)(v3 + 48) = UIContentSizeCategoryMedium;
  v12 = v3 + 48;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 56) = _swiftEmptyArrayStorage;
  v85 = v3 + 56;
  v13 = sub_319AC(&qword_3BA398);
  v14 = swift_allocObject(v13, 152);
  *(_OWORD *)(v14 + 16) = xmmword_2E98B0;
  *(_QWORD *)(v14 + 32) = UIContentSizeCategoryExtraSmall;
  *(_QWORD *)(v14 + 40) = UIContentSizeCategorySmall;
  *(_QWORD *)(v14 + 48) = UIContentSizeCategoryMedium;
  *(_QWORD *)(v14 + 56) = UIContentSizeCategoryLarge;
  *(_QWORD *)(v14 + 64) = UIContentSizeCategoryExtraLarge;
  *(_QWORD *)(v14 + 72) = UIContentSizeCategoryExtraExtraLarge;
  *(_QWORD *)(v14 + 80) = UIContentSizeCategoryExtraExtraExtraLarge;
  *(_QWORD *)(v14 + 88) = UIContentSizeCategoryAccessibilityMedium;
  v67 = UIContentSizeCategoryAccessibilityExtraLarge;
  *(_QWORD *)(v14 + 96) = UIContentSizeCategoryAccessibilityLarge;
  *(_QWORD *)(v14 + 104) = UIContentSizeCategoryAccessibilityExtraLarge;
  v66 = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  v68 = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  *(_QWORD *)(v14 + 112) = UIContentSizeCategoryAccessibilityExtraExtraLarge;
  *(_QWORD *)(v14 + 120) = UIContentSizeCategoryAccessibilityExtraExtraExtraLarge;
  v69 = CFSTR("UIContentSizeCategoryExpandedFontSize1");
  v70 = CFSTR("UIContentSizeCategoryExpandedFontSize2");
  *(_QWORD *)(v14 + 128) = CFSTR("UIContentSizeCategoryExpandedFontSize1");
  *(_QWORD *)(v14 + 136) = CFSTR("UIContentSizeCategoryExpandedFontSize2");
  v71 = CFSTR("UIContentSizeCategoryExpandedFontSize3");
  *(_QWORD *)(v14 + 144) = CFSTR("UIContentSizeCategoryExpandedFontSize3");
  *(_QWORD *)(v3 + 64) = v14;
  v15 = sub_319AC(&qword_3BA3A0);
  v65[1] = swift_allocObject(v15, *(unsigned int *)(v15 + 48));
  v16 = UIContentSizeCategoryMedium;
  v17 = UIContentSizeCategoryExtraSmall;
  v18 = UIContentSizeCategorySmall;
  v19 = UIContentSizeCategoryLarge;
  v20 = UIContentSizeCategoryExtraLarge;
  v21 = UIContentSizeCategoryExtraExtraLarge;
  v22 = UIContentSizeCategoryExtraExtraExtraLarge;
  v23 = v72;
  v24 = UIContentSizeCategoryAccessibilityMedium;
  v25 = UIContentSizeCategoryAccessibilityLarge;
  v26 = v67;
  v27 = v66;
  v28 = v68;
  v29 = v69;
  v30 = v70;
  *(_QWORD *)(v3 + 72) = PassthroughSubject.init()(v71);
  *(_BYTE *)(v3 + 80) = 0;
  v31 = v73;
  sub_B40BC();
  v32 = v74;
  *(_QWORD *)(v12 - 32) = v31;
  *(_QWORD *)(v12 - 24) = v32;
  v74 = v32;
  v33 = v31;
  *(_QWORD *)(v12 - 16) = objc_msgSend(v23, "preferredContentSizeCategory");
  v34 = objc_msgSend(v33, "BKContentSizeCategoryManagerOverrideKey");
  v35 = v34;
  if (v34)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    v35 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37);
  }
  v38 = v86;
  v39 = *(void **)(v86 + 40);
  *(_QWORD *)(v86 + 40) = v35;

  v40 = *(void **)(v38 + 40);
  if (v40)
    v41 = *(id *)(v38 + 40);
  else
    v41 = *(id *)(v38 + 32);
  swift_beginAccess(v12, v88, 1, 0);
  v42 = *(void **)(v38 + 48);
  *(_QWORD *)(v38 + 48) = v41;
  v43 = v40;

  swift_getKeyPath(&unk_2E98E8);
  v44 = v75;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
  swift_release();
  v45 = sub_3DCC0(&qword_3BA3A8, &qword_3BA388, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
  v46 = v77;
  v47 = v78;
  Publisher.map<A>(_:)(address(of:), 0, v77, (char *)&type metadata for () + 8, v45);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v44, v46);
  v48 = sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v87[0] = (id)static OS_dispatch_queue.main.getter(v49);
  v50 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v51 = (uint64_t)v81;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v81, 1, 1, v50);
  v52 = sub_3DCC0(&qword_3BA3B0, &qword_3C0020, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v53 = sub_49FA8();
  v54 = v82;
  v55 = v80;
  Publisher.receive<A>(on:options:)(v87, v51, v80, v48, v52, v53);
  sub_4A000(v51);

  (*(void (**)(char *, uint64_t))(v79 + 8))(v47, v55);
  v56 = swift_allocObject(&unk_37EA88, 24);
  swift_weakInit(v56 + 16, v38);
  v57 = swift_allocObject(&unk_37EAB0, 32);
  *(_QWORD *)(v57 + 16) = sub_B4F44;
  *(_QWORD *)(v57 + 24) = v56;
  v58 = sub_3DCC0(&qword_3BA3B8, &qword_3BA390, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v59 = v84;
  Publisher<>.sink(receiveValue:)(sub_542B4, v57, v84, v58);
  v60 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v83 + 8))(v54, v59, v60);
  v61 = v85;
  swift_beginAccess(v85, v87, 33, 0);
  v62 = sub_319AC(&qword_3B8390);
  v63 = sub_3DCC0((unint64_t *)&unk_3BD170, &qword_3B8390, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v61, v62, v63);
  swift_endAccess(v87);
  swift_release();

  return v38;
}

void sub_B40BC()
{
  void *v0;
  NSString v1;
  id v2;
  id v3;
  id v4;
  id v5;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "stringForKey:", v1);

  if (v2)
  {
    v3 = objc_msgSend(v0, "BKContentSizeCategoryManagerOverrideKey");
    if (v3)
    {
      v4 = v3;

      v2 = v4;
    }
    else
    {
      objc_msgSend(v0, "setBKContentSizeCategoryManagerOverrideKey:", v2);
    }

    v5 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "removeObjectForKey:", v5);

  }
}

const char *sub_B41B0()
{
  return "BKContentSizeCategoryManagerOverrideKey";
}

void sub_B41BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "BKContentSizeCategoryManagerOverrideKey");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_B4224(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setBKContentSizeCategoryManagerOverrideKey:");

}

void sub_B4284(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = objc_msgSend(*(id *)(Strong + 16), "BKContentSizeCategoryManagerOverrideKey");
    v5 = v4;
    if (v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v7 = v6;

      v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v7);
    }
    v8 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v5;
    v9 = v5;
    sub_B3750((uint64_t)v8);
    swift_release();

  }
}

uint64_t ContentSizeCategoryManager.allContentSizeCategories.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

BOOL sub_B4350()
{
  return sub_B4368(-1);
}

void sub_B4358()
{
  sub_B43DC(-1);
}

BOOL sub_B4360()
{
  return sub_B4368(1);
}

BOOL sub_B4368(uint64_t a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  _BYTE v6[24];

  swift_beginAccess(v1 + 48, v6, 0, 0);
  v3 = *(id *)(v1 + 48);
  v4 = (void *)sub_B4A18((uint64_t)v3, a1);

  if (v4)
  return v4 != 0;
}

void sub_B43D4()
{
  sub_B43DC(1);
}

void sub_B43DC(uint64_t a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  swift_beginAccess(v1 + 48, v6, 0, 0);
  v3 = *(id *)(v1 + 48);
  v4 = (void *)sub_B4A18((uint64_t)v3, a1);

  if (v4)
  {
    v5 = v4;
    sub_B4454(v4);

  }
}

void sub_B4454(void *a1)
{
  _QWORD *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  id v21;
  double v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  id v29;

  v3 = (void *)v1[5];
  if (!v3)
  {
    if (!a1)
      return;
    goto LABEL_10;
  }
  if (a1)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1[5]);
    v6 = v5;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v4 == v7 && v6 == v8)
    {
      swift_bridgeObjectRelease_n(v6, 2);
      return;
    }
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) != 0)
      return;
LABEL_10:
    v12 = v1[4];
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    if (v13 == v16 && v15 == v17)
    {
      swift_bridgeObjectRelease_n(v15, 2);
    }
    else
    {
      v19 = v17;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v17, 0);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v19);
      if ((v20 & 1) == 0)
      {
        v3 = (void *)v1[5];
        goto LABEL_16;
      }
    }
    v21 = (id)v1[5];
    v1[5] = 0;
    sub_B3750((uint64_t)v21);
    goto LABEL_21;
  }
LABEL_16:
  v1[5] = a1;
  v21 = a1;
  sub_B3750((uint64_t)v3);

LABEL_21:
  v23 = (void *)v1[2];
  v24 = (void *)v1[5];
  v29 = v24;
  if (v24)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v26 = v25;
    v27 = v29;
    v28 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v22 = swift_bridgeObjectRelease(v26).n128_u64[0];
  }
  else
  {
    v28 = 0;
  }
  objc_msgSend(v23, "setBKContentSizeCategoryManagerOverrideKey:", v28, v22);

}

BOOL sub_B4618()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40) != 0;
}

void sub_B4628()
{
  uint64_t v0;
  void *v1;
  double v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    *(_QWORD *)(v0 + 40) = 0;
    sub_B3750((uint64_t)v1);

    v3 = *(void **)(v0 + 16);
    v4 = *(void **)(v0 + 40);
    v9 = v4;
    if (v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v6 = v5;
      v7 = v9;
      v8 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v2 = swift_bridgeObjectRelease(v6).n128_u64[0];
    }
    else
    {
      v8 = 0;
    }
    objc_msgSend(v3, "setBKContentSizeCategoryManagerOverrideKey:", v8, v2);

  }
}

void sub_B46DC(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  double v13;
  void *v14;
  NSString v15;

  v3 = *(id *)(v1 + 32);
  v4 = objc_msgSend(a1, "preferredContentSizeCategory");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  if (v5 == v8 && v7 == v9)
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);

    swift_bridgeObjectRelease(v7);
    *(_QWORD *)&v13 = swift_bridgeObjectRelease(v11).n128_u64[0];
    if ((v12 & 1) == 0)
    {
      *(_BYTE *)(v1 + 80) = 1;
      sub_B3674(objc_msgSend(a1, "preferredContentSizeCategory", v13));
      v14 = *(void **)(v1 + 16);
      v15 = String._bridgeToObjectiveC()();
      LOBYTE(v14) = objc_msgSend(v14, "BOOLForKey:", v15);

      if ((v14 & 1) == 0)
        sub_B4454(0);
      *(_BYTE *)(v1 + 80) = 0;
    }
  }
}

uint64_t sub_B4820()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[24];

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess(v0 + 48, v18, 0, 0);
  v2 = *(void **)(v0 + 48);
  swift_bridgeObjectRetain(v1);
  v3 = v2;
  v4 = sub_E630C((uint64_t)v3, v1);
  v6 = v5;
  swift_bridgeObjectRelease(v1);

  v7 = 0;
  if ((v6 & 1) != 0)
    return v7;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = BookEPUBBundle();
  v10 = String._bridgeToObjectiveC()();
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "localizedStringForKey:value:table:", v10, v11, 0);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = sub_319AC(&qword_3B66F8);
  result = swift_allocObject(v16, 112);
  *(_OWORD *)(result + 16) = xmmword_2E5F70;
  if (!__OFADD__(v4, 1))
  {
    *(_QWORD *)(result + 56) = &type metadata for Int;
    *(_QWORD *)(result + 64) = &protocol witness table for Int;
    *(_QWORD *)(result + 32) = v4 + 1;
    *(_QWORD *)(result + 96) = &type metadata for Int;
    *(_QWORD *)(result + 104) = &protocol witness table for Int;
    *(_QWORD *)(result + 72) = v8;
    v7 = String.init(format:_:)(v13, v15, result);
    swift_bridgeObjectRelease(v15);
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t sub_B49AC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_319AC(&qword_3BA3A0);
  v1 = sub_3DCC0(&qword_3BA3C0, &qword_3BA3A0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_B4A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;

  v3 = *(_QWORD **)(v2 + 64);
  v4 = v3[2];
  if (!v4)
    return 0;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3[4]);
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v7 == v10 && v9 == v11)
  {
    v16 = 0;
LABEL_9:
    result = swift_bridgeObjectRelease_n(v9, 2);
    goto LABEL_10;
  }
  v13 = v11;
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
  swift_bridgeObjectRelease(v9);
  result = swift_bridgeObjectRelease(v13);
  if ((v14 & 1) != 0)
  {
    v16 = 0;
LABEL_10:
    v17 = v16 + a2;
    if (__OFADD__(v16, a2))
    {
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v17 < v4)
    {
      if (v17 < v3[2])
      {
        v18 = (void *)v3[v17 + 4];
        v19 = v18;
        return (uint64_t)v18;
      }
      goto LABEL_34;
    }
    return 0;
  }
  if (v4 == 1)
    return 0;
  if (v3[2] >= 2uLL)
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3[5]);
    v9 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v24 = v22;
    if (v20 != v23 || v9 != v22)
    {
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v9, v23, v22, 0);
      swift_bridgeObjectRelease(v9);
      result = swift_bridgeObjectRelease(v24);
      if ((v25 & 1) == 0)
      {
        v26 = 0;
        while (v4 - 2 != v26)
        {
          if ((unint64_t)(v26 + 2) >= v3[2])
            goto LABEL_35;
          v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3[v26 + 6]);
          v9 = v28;
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v27 == v29 && v9 == v30)
          {
            v16 = v26 + 2;
            goto LABEL_9;
          }
          v32 = v30;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v9, v29, v30, 0);
          swift_bridgeObjectRelease(v9);
          result = swift_bridgeObjectRelease(v32);
          ++v26;
          if ((v33 & 1) != 0)
          {
            v16 = v26 + 1;
            goto LABEL_10;
          }
        }
        return 0;
      }
      v16 = 1;
      goto LABEL_10;
    }
    v16 = 1;
    goto LABEL_9;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t ContentSizeCategoryManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return v0;
}

uint64_t ContentSizeCategoryManager.__deallocating_deinit()
{
  uint64_t v0;

  ContentSizeCategoryManager.deinit();
  return swift_deallocClassInstance(v0, 81, 7);
}

BOOL sub_B4CB4(uint64_t a1, uint64_t a2)
{
  return sub_B4CCC(a1, a2, -1);
}

void sub_B4CBC(uint64_t a1, uint64_t a2)
{
  sub_B4D40(a1, a2, -1);
}

BOOL sub_B4CC4(uint64_t a1, uint64_t a2)
{
  return sub_B4CCC(a1, a2, 1);
}

BOOL sub_B4CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  void *v6;
  _BYTE v8[24];

  swift_beginAccess(v3 + 48, v8, 0, 0);
  v5 = *(id *)(v3 + 48);
  v6 = (void *)sub_B4A18((uint64_t)v5, a3);

  if (v6)
  return v6 != 0;
}

void sub_B4D38(uint64_t a1, uint64_t a2)
{
  sub_B4D40(a1, a2, 1);
}

void sub_B4D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  void *v6;
  id v7;
  _BYTE v8[24];

  swift_beginAccess(v3 + 48, v8, 0, 0);
  v5 = *(id *)(v3 + 48);
  v6 = (void *)sub_B4A18((uint64_t)v5, a3);

  if (v6)
  {
    v7 = v6;
    sub_B4454(v6);

  }
}

uint64_t sub_B4F20()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_B4F44()
{
  uint64_t v0;

  sub_B4284(v0);
}

uint64_t sub_B4F4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

id sub_B4F70@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 48, v6, 0, 0);
  v4 = *(void **)(v3 + 48);
  *a2 = v4;
  return v4;
}

void sub_B4FB4(id *a1)
{
  sub_B3944(*a1);
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didTapDecreaseContentSize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didTapResetContentSize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t type metadata accessor for ContentSizeCategoryManager()
{
  return objc_opt_self(_TtC8BookEPUB26ContentSizeCategoryManager);
}

uint64_t method lookup function for ContentSizeCategoryManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ContentSizeCategoryManager);
}

uint64_t dispatch thunk of ContentSizeCategoryManager.__allocating_init(traitCollection:appUserDefaults:uiKitUserDefaults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of ContentSizeCategoryManager.decreaseContentSize()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of ContentSizeCategoryManager.canResetContentSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of ContentSizeCategoryManager.resetContentSize()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of ContentSizeCategoryManager.updateContentSizeCategory(withTraitCollection:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of ContentSizeCategoryManager.accessibilityDescriptionOfContentSize()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

Swift::String __swiftcall BookThemeEntity.accessibleDescription(fontDisplayName:)(Swift::String fontDisplayName)
{
  unsigned __int8 *v1;
  unint64_t object;
  int v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  id v14;
  NSString v15;
  NSString v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  Swift::String result;
  uint64_t v59;
  uint64_t v60;
  uint64_t countAndFlagsBits;

  object = (unint64_t)fontDisplayName._object;
  v3 = *v1;
  v4 = *((_QWORD *)v1 + 1);
  v5 = *((_QWORD *)v1 + 2);
  countAndFlagsBits = fontDisplayName._countAndFlagsBits;
  v6 = BookEPUBBundle();
  v7 = String._bridgeToObjectiveC()();
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v6, "localizedStringForKey:value:table:", v7, v8, 0);

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  if (v4)
    v13 = v5;
  else
    v13 = v3 == 3;
  v60 = v10;
  if (v13)
  {
    v14 = BookEPUBBundle();
    v15 = String._bridgeToObjectiveC()();
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v14, "localizedStringForKey:value:table:", v15, v16, 0);

    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v18;

    v20 = countAndFlagsBits;
  }
  else
  {
    v59 = 0;
    v20 = countAndFlagsBits;
    v19 = 0xE000000000000000;
  }
  BookThemeEntity.textColor.getter();
  v22 = v21;
  v23 = objc_msgSend(v21, "accessibilityName");

  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v26 = v25;

  v27 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v27 = v20 & 0xFFFFFFFFFFFFLL;
  if (v27)
  {
    v28 = sub_319AC(&qword_3B66F8);
    v29 = swift_allocObject(v28, 72, 7);
    *(_OWORD *)(v29 + 16) = xmmword_2E5F80;
    *(_QWORD *)(v29 + 56) = &type metadata for String;
    *(_QWORD *)(v29 + 64) = sub_42298();
    *(_QWORD *)(v29 + 32) = v20;
    *(_QWORD *)(v29 + 40) = object;
    swift_bridgeObjectRetain(object);
    v30 = String.init(format:_:)(2113573, 0xE300000000000000, v29);
    v32 = v31;
  }
  else
  {
    v30 = 0;
    v32 = 0xE000000000000000;
  }
  v33 = sub_319AC(&qword_3B66F8);
  v34 = swift_allocObject(v33, 152, 7);
  *(_OWORD *)(v34 + 16) = xmmword_2E6940;
  *(_QWORD *)(v34 + 56) = &type metadata for String;
  v35 = sub_42298();
  *(_QWORD *)(v34 + 32) = v59;
  *(_QWORD *)(v34 + 40) = v19;
  *(_QWORD *)(v34 + 96) = &type metadata for String;
  *(_QWORD *)(v34 + 104) = v35;
  *(_QWORD *)(v34 + 64) = v35;
  *(_QWORD *)(v34 + 72) = v24;
  *(_QWORD *)(v34 + 80) = v26;
  *(_QWORD *)(v34 + 136) = &type metadata for String;
  *(_QWORD *)(v34 + 144) = v35;
  *(_QWORD *)(v34 + 112) = v30;
  *(_QWORD *)(v34 + 120) = v32;
  v36 = String.init(format:_:)(v60, v12, v34);
  v38 = v37;
  swift_bridgeObjectRelease(v12);
  v39 = BookEPUBBundle();
  v40 = String._bridgeToObjectiveC()();
  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v39, "localizedStringForKey:value:table:", v40, v41, 0);

  v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
  v45 = v44;

  BookThemeEntity.backgroundColor.getter();
  v47 = v46;
  v48 = objc_msgSend(v46, "accessibilityName");

  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
  v51 = v50;

  v52 = swift_allocObject(v33, 112, 7);
  *(_OWORD *)(v52 + 16) = xmmword_2E5F70;
  *(_QWORD *)(v52 + 56) = &type metadata for String;
  *(_QWORD *)(v52 + 64) = v35;
  *(_QWORD *)(v52 + 32) = v36;
  *(_QWORD *)(v52 + 40) = v38;
  *(_QWORD *)(v52 + 96) = &type metadata for String;
  *(_QWORD *)(v52 + 104) = v35;
  *(_QWORD *)(v52 + 72) = v49;
  *(_QWORD *)(v52 + 80) = v51;
  v53 = String.init(format:_:)(v43, v45, v52);
  v55 = v54;
  swift_bridgeObjectRelease(v45);
  v56 = v53;
  v57 = v55;
  result._object = v57;
  result._countAndFlagsBits = v56;
  return result;
}

void BookThemeEntity.localizedTitle.getter()
{
  char *v0;

  BookThemeType.localizedTitle.getter(*v0);
}

uint64_t BookThemeEntity.fontFamily.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *v0;
  v2 = v0[2];
  v3 = *((_QWORD *)v0 + 1);
  if (!v3 || !*(_QWORD *)(v3 + 16) || (v4 = sub_3B828(v2), (v5 & 1) == 0))
    __asm { BR              X9 }
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

BOOL BookThemeEntity.isFontBolded.getter()
{
  unsigned __int8 *v0;

  if (*((_QWORD *)v0 + 1))
    return v0[16] & 1;
  else
    return *v0 == 3;
}

BOOL BookThemeEntity.isOverride.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8) != 0;
}

double BookThemeEntity.marginAdjustmentScaleFactor.getter()
{
  uint64_t v0;
  double result;
  BOOL v2;
  double v3;
  double v4;
  BOOL v5;
  double v6;

  result = 1.0;
  if (*(_QWORD *)(v0 + 8))
    v2 = (*(_QWORD *)(v0 + 16) & 0x100) == 0;
  else
    v2 = 1;
  if (!v2)
  {
    v3 = *(double *)(v0 + 56);
    if (v3 >= -0.1 && (v3 >= 0.1 || v3 >= 0.0))
    {
      v6 = v3 * 10.0 + 1.0;
      v5 = v3 < 0.1;
      result = 2.0;
      if (v5)
        return v6;
    }
    else
    {
      v4 = v3 * 7.5 + 1.0;
      if (v3 >= 0.1)
        v4 = 1.75;
      v5 = v3 < -0.1;
      result = 0.25;
      if (!v5)
        return v4;
    }
  }
  return result;
}

double BookThemeEntity.marginAdjustment.getter()
{
  uint64_t v0;
  double result;
  double v2;

  if (*(_QWORD *)(v0 + 8))
  {
    result = 0.0;
    if ((*(_BYTE *)(v0 + 17) & 1) == 0)
      return result;
    result = *(double *)(v0 + 56);
  }
  else
  {
    result = 0.0;
    if (!*(_BYTE *)v0)
      return result;
  }
  v2 = fmax(result, -0.1);
  result = 0.1;
  if (v2 < 0.1)
    return v2;
  return result;
}

double BookThemeEntity.lineHeight.getter()
{
  char *v0;
  double result;

  if (!*((_QWORD *)v0 + 1))
    return dbl_2E9BB8[*v0];
  result = *((double *)v0 + 3);
  if ((v0[17] & 1) == 0)
    return 0.0;
  return result;
}

double BookThemeEntity.wordSpacing.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(v0 + 8);
  result = *(double *)(v0 + 40);
  if (v1)
    v3 = *(_BYTE *)(v0 + 17) & 1;
  else
    v3 = *(_BYTE *)v0 != 0;
  if (((v1 != 0) & v3) == 0)
    return 0.0;
  return result;
}

double BookThemeEntity.letterSpacing.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  unsigned __int8 v3;

  v1 = *(_QWORD *)(v0 + 8);
  result = *(double *)(v0 + 32);
  if (v1)
    v3 = *(_BYTE *)(v0 + 17) & 1;
  else
    v3 = *(_BYTE *)v0 != 0;
  if (((v1 != 0) & v3) == 0)
    return 0.0;
  return result;
}

uint64_t BookThemeEntity.justify.getter()
{
  unsigned __int8 *v0;

  if (*((_QWORD *)v0 + 1))
  {
    if ((v0[17] & 1) != 0)
      return *((_QWORD *)v0 + 6) & 1;
    else
      return 2;
  }
  else if (*v0 - 2 >= 3)
  {
    if (*v0)
      return 1;
    else
      return 2;
  }
  else
  {
    return 0;
  }
}

uint64_t LocationMovement.magnitude.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result & 1;
  return result;
}

void BookThemeEntity.fontTable.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

_BYTE *BookThemeEntity.fontTable.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = *result;
  return result;
}

uint64_t BookThemeEntity.overrides.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_OWORD *)(v1 + 8);
  v4 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  return swift_bridgeObjectRetain(v3);
}

__n128 BookThemeEntity.overrides.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __int128 v5;
  __int128 v6;

  v5 = a1[1];
  v6 = *a1;
  v4 = (__n128)a1[2];
  v2 = *((_QWORD *)a1 + 6);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_OWORD *)(v1 + 8) = v6;
  *(_OWORD *)(v1 + 24) = v5;
  result = v4;
  *(__n128 *)(v1 + 40) = v4;
  *(_QWORD *)(v1 + 56) = v2;
  return result;
}

void BookThemeEntity.Overrides.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt8 v10;
  Swift::UInt16 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;

  v2 = v1;
  v4 = *v2;
  v5 = *((_BYTE *)v2 + 8);
  v6 = *((_BYTE *)v2 + 9);
  v7 = v2[2];
  v8 = v2[3];
  v9 = v2[4];
  v10 = *((_BYTE *)v2 + 40);
  v11 = *((unsigned __int8 *)v2 + 41);
  v12 = v2[6];
  swift_bridgeObjectRetain(*v2);
  sub_B66B8(a1, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v13 = v7;
  else
    v13 = 0;
  Hasher._combine(_:)(v13);
  if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = v8;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v15 = v9;
  else
    v15 = 0;
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  if ((v12 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v16 = v12;
  else
    v16 = 0;
  Hasher._combine(_:)(v16);
}

Swift::Int BookThemeEntity.Overrides.hashValue.getter()
{
  uint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  _QWORD v8[10];
  char v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;

  v1 = *(_BYTE *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 9);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 40);
  v5 = *(_BYTE *)(v0 + 41);
  v6 = *(_QWORD *)(v0 + 48);
  v8[9] = *(_QWORD *)v0;
  v9 = v1;
  v10 = v2;
  v11 = *(_OWORD *)(v0 + 16);
  v12 = v3;
  v13 = v4;
  v14 = v5;
  v15 = v6;
  Hasher.init(_seed:)(v8, 0);
  BookThemeEntity.Overrides.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

Swift::Int sub_B5A3C(uint64_t a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  _QWORD v9[10];
  char v10;
  char v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_BYTE *)(v1 + 9);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  v6 = *(_BYTE *)(v1 + 41);
  v7 = *(_QWORD *)(v1 + 48);
  v9[9] = *(_QWORD *)v1;
  v10 = v2;
  v11 = v3;
  v12 = *(_OWORD *)(v1 + 16);
  v13 = v4;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  Hasher.init(_seed:)(v9, a1);
  BookThemeEntity.Overrides.hash(into:)((uint64_t)v9);
  return Hasher._finalize()();
}

void __swiftcall BookThemeEntity.init(themeType:variant:fontTable:overrides:)(BookEPUB::BookThemeEntity *__return_ptr retstr, BookEPUB::BookThemeType themeType, BookEPUB::BookThemeVariant variant, BookEPUB::BookFontTable fontTable, BookEPUB::BookThemeEntity::Overrides_optional *overrides)
{
  __int128 v5;
  BookEPUB::BookFontTable v6;
  Swift::Double marginAdjustment;

  v5 = *(_OWORD *)&overrides->value.lineHeight;
  *(_OWORD *)&retstr->overrides.value.fontFamilyByTable._rawValue = *(_OWORD *)&overrides->value.fontFamilyByTable._rawValue;
  v6 = *(_BYTE *)fontTable;
  marginAdjustment = overrides->value.marginAdjustment;
  retstr->themeType = themeType;
  retstr->variant = variant & 1;
  retstr->fontTable = v6;
  *(_OWORD *)&retstr->overrides.value.lineHeight = v5;
  *(_OWORD *)&retstr->overrides.value.wordSpacing = *(_OWORD *)&overrides->value.wordSpacing;
  retstr->overrides.value.marginAdjustment = marginAdjustment;
}

double BookThemeEntity.fontSizeMultiplier.getter()
{
  char *v0;

  return dbl_2E9BE8[*v0];
}

uint64_t BookThemeEntity.hasCustomFont.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 8);
  if (v2 && *(_QWORD *)(v2 + 16))
    sub_3B828(*(unsigned __int8 *)(v1 + 2));
  else
    v3 = 0;
  return v3 & 1;
}

BOOL BookThemeEntity.hasCustomLayout.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 8))
    return *(_BYTE *)(v0 + 17) & 1;
  else
    return *(_BYTE *)v0 != 0;
}

void BookThemeEntity.multipleColumnMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  unsigned int v4;

  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    v3 = *(_BYTE *)(v1 + 17) & 1;
  else
    v3 = *(_BYTE *)v1 != 0;
  v4 = *(_QWORD *)(v1 + 48) >> 8;
  if (((v2 != 0) & v3) == 0)
    LOBYTE(v4) = 1;
  *a1 = v4;
}

uint64_t BookThemeEntity.snapshotTheme()()
{
  char *v0;
  char v1;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 1);
  v10 = *((_OWORD *)v0 + 2);
  v11 = *((_OWORD *)v0 + 1);
  v5 = *((_QWORD *)v0 + 6);
  v6 = *((_QWORD *)v0 + 7);
  v7 = type metadata accessor for SnapshotTheme();
  v8 = swift_allocObject(v7, 80);
  *(_BYTE *)(v8 + 16) = v1;
  *(_BYTE *)(v8 + 17) = v2;
  *(_BYTE *)(v8 + 18) = v3;
  *(_QWORD *)(v8 + 24) = v4;
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 64) = v5;
  *(_QWORD *)(v8 + 72) = v6;
  swift_bridgeObjectRetain(v4);
  return v8;
}

Swift::String __swiftcall BookThemeEntity.description()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _BOOL4 v2;
  uint64_t v3;
  unint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  Swift::String v9;
  __n128 v10;
  uint64_t v11;
  _BOOL4 v12;
  double v13;
  int v14;
  Swift::String v15;
  __n128 v16;
  int v17;
  BOOL v18;
  int v19;
  Swift::String v20;
  __n128 v21;
  Swift::String v22;
  __n128 v23;
  double v24;
  uint64_t v25;
  void *v26;
  Swift::String result;
  uint64_t v28;
  unint64_t v29;

  v1 = *v0;
  v2 = *v0 != 0;
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  v6 = *((double *)v0 + 3);
  v5 = *((double *)v0 + 4);
  v7 = *((double *)v0 + 5);
  v8 = *((double *)v0 + 7);
  v28 = 0;
  v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(93);
  v9._countAndFlagsBits = 0xD000000000000025;
  v9._object = (void *)0x80000000002CA1F0;
  String.append(_:)(v9);
  v11 = (v4 >> 8) & 1;
  if (v3)
    v12 = (v4 >> 8) & 1;
  else
    v12 = v2;
  v13 = 0.0;
  if (v12)
    v10.n128_f64[0] = v6;
  else
    v10.n128_f64[0] = 0.0;
  v14 = v12 & v11;
  if (!v3 && (_DWORD)v1)
    __asm { BR              X9 }
  Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v10);
  v15._countAndFlagsBits = 0xD000000000000015;
  v15._object = (void *)0x80000000002CA220;
  String.append(_:)(v15);
  v17 = v14 ^ 1;
  if (!v3)
    v17 = 1;
  v18 = !v12;
  if (v3)
    v19 = !v12;
  else
    v19 = 1;
  if (v17)
    v16.n128_f64[0] = 0.0;
  else
    v16.n128_f64[0] = v5;
  Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v16);
  v20._object = (void *)0x80000000002CA240;
  v20._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v20);
  if (v19)
    v21.n128_f64[0] = 0.0;
  else
    v21.n128_f64[0] = v7;
  Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v21);
  v22._countAndFlagsBits = 0x6E696772614D202CLL;
  v22._object = (void *)0xEB00000000203A73;
  String.append(_:)(v22);
  if (!v18)
  {
    v24 = 0.0;
    if (v3)
      v24 = v8;
    v13 = fmax(v24, -0.1);
    if (v13 >= 0.1)
      v13 = 0.1;
  }
  v23.n128_f64[0] = v13;
  Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v23);
  v25 = v28;
  v26 = (void *)v29;
  result._object = v26;
  result._countAndFlagsBits = v25;
  return result;
}

void BookThemeEntity.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_B5EE0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  String.hash(into:)(v0, 0x7465697571, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  if (v2)
    v3 = 1802658148;
  else
    v3 = 0x746867696CLL;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v0, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = BookFontTable.rawValue.getter();
  v7 = v6;
  String.hash(into:)(v0, v5, v6);
  swift_bridgeObjectRelease(v7);
  if (v1)
  {
    Hasher._combine(_:)(1u);
    BookThemeEntity.Overrides.hash(into:)(v0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int BookThemeEntity.hashValue.getter()
{
  char *v0;
  char v1;
  char v2;
  uint64_t v3;
  _QWORD v5[9];
  char v6;
  char v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v1 = v0[1];
  v2 = v0[2];
  v3 = *((_QWORD *)v0 + 7);
  v6 = *v0;
  v7 = v1;
  v8 = v2;
  v9 = *(_OWORD *)(v0 + 8);
  v10 = *(_OWORD *)(v0 + 24);
  v11 = *(_OWORD *)(v0 + 40);
  v12 = v3;
  Hasher.init(_seed:)(v5, 0);
  BookThemeEntity.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_B60B4(uint64_t a1)
{
  char *v1;
  char v2;
  char v3;
  uint64_t v4;
  _QWORD v6[9];
  char v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v2 = v1[1];
  v3 = v1[2];
  v4 = *((_QWORD *)v1 + 7);
  v7 = *v1;
  v8 = v2;
  v9 = v3;
  v10 = *(_OWORD *)(v1 + 8);
  v11 = *(_OWORD *)(v1 + 24);
  v12 = *(_OWORD *)(v1 + 40);
  v13 = v4;
  Hasher.init(_seed:)(v6, a1);
  BookThemeEntity.hash(into:)();
  return Hasher._finalize()();
}

id BookThemeEntity.currentFontIsAvailable(using:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  id v6;
  id v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  LOWORD(v9) = *(_WORD *)v1;
  BYTE2(v9) = *(_BYTE *)(v1 + 2);
  v10 = *(_OWORD *)(v1 + 8);
  v11 = *(_OWORD *)(v1 + 24);
  v12 = *(_OWORD *)(v1 + 40);
  v13 = *(_QWORD *)(v1 + 56);
  BookThemeEntity.fontFamily.getter();
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(a1, "fontForFontFamily:", v5, swift_bridgeObjectRelease(v4).n128_f64[0], v9, v10, v11, v12, v13);

  if (!v6)
    return 0;
  v7 = objc_msgSend(v6, "isAvailable");
  swift_unknownObjectRelease(v6);
  return v7;
}

void BookThemeEntity.defaultFontAvailable(using:)()
{
  __asm { BR              X10 }
}

uint64_t sub_B6234@<X0>(int a1@<W8>)
{
  void *v1;
  unint64_t v2;
  unint64_t v3;
  NSString v4;
  id v5;
  id v6;

  if (a1)
  {
    sub_6EF84();
    v2 = v3;
  }
  else
  {
    v2 = 0xEC00000074786554;
  }
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v1, "fontForFontFamily:", v4, swift_bridgeObjectRelease(v2).n128_f64[0]);

  if (!v5)
    return 1;
  v6 = objc_msgSend(v5, "isAvailable");
  swift_unknownObjectRelease(v5);
  return (uint64_t)v6;
}

void BookThemeEntity.sanitizeThemeFont(using:)(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;
  unsigned __int8 v9;
  char v10;
  char *v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  unsigned int v17;

  v4 = *(_QWORD *)(v2 + 8);
  v17 = *(unsigned __int8 *)(v2 + 2);
  swift_bridgeObjectRetain(v4);
  BookThemeEntity.fontFamily.getter();
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(a1, "fontForFontFamily:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);

  if (!v8)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    if (v4)
    {
      if (!*(_QWORD *)(v4 + 16)
        || (swift_bridgeObjectRetain(v4), sub_3B828(v17), v13 = v12, swift_bridgeObjectRelease(v4), (v13 & 1) == 0))
      {
        v10 = 2;
        v11 = a2;
        goto LABEL_13;
      }
      swift_bridgeObjectRetain(v4);
      BookThemeEntity.defaultFontAvailable(using:)();
      v15 = v14;
      swift_bridgeObjectRelease(v4);
      v11 = a2;
      if ((v15 & 1) == 0)
      {
        v10 = 2;
        goto LABEL_13;
      }
      sub_B65F0(v17);
      v4 = v16;
      v10 = 1;
    }
    else
    {
      v10 = 2;
      v11 = a2;
    }
    swift_bridgeObjectRelease(v4);
    goto LABEL_13;
  }
  v9 = objc_msgSend(v8, "isAvailable");
  swift_bridgeObjectRelease(v4);
  swift_unknownObjectRelease(v8);
  if ((v9 & 1) == 0)
    goto LABEL_5;
  v10 = 0;
  v11 = a2;
LABEL_13:
  *v11 = v10;
}

uint64_t sub_B655C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = sub_3B7F8(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = *v1;
  v11 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_F2B5C();
    v7 = v11;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v5);
  sub_188538(v5, v7);
  v9 = *v2;
  *v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_B65F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_3B828(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v12 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_F2E94();
    v8 = v12;
  }
  v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v5);
  sub_1886D0(v5, v8);
  v10 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v10);
  return v9;
}

void sub_B66B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;

  v3 = (_QWORD *)(a2 + 64);
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v11 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  if (v6)
  {
    v7 = __clz(__rbit64(v6));
    goto LABEL_16;
  }
  if (v11 > 1)
  {
    v8 = v3[1];
    v9 = 1;
    if (v8)
      goto LABEL_15;
    v9 = 2;
    if (v11 <= 2)
      goto LABEL_17;
    v8 = v3[2];
    if (v8)
    {
LABEL_15:
      v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_16:
      __asm { BR              X8 }
    }
    v10 = 3;
    if (v11 > 3)
    {
      v8 = v3[3];
      if (v8)
      {
        v9 = 3;
        goto LABEL_15;
      }
      while (1)
      {
        v9 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          JUMPOUT(0xB69CCLL);
        }
        if (v9 >= v11)
          break;
        v8 = v3[v9];
        ++v10;
        if (v8)
          goto LABEL_15;
      }
    }
  }
LABEL_17:
  swift_release(a2);
  Hasher._combine(_:)(0);
}

BOOL _s8BookEPUB0A11ThemeEntityV9OverridesV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  double v4;
  double v5;
  double v6;
  int v7;
  int v8;
  double v9;
  int v10;
  int v11;
  double v12;
  double v13;
  double v14;
  int v15;
  int v16;
  double v17;
  char v18;
  char v19;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v5 = *(double *)(a1 + 16);
  v4 = *(double *)(a1 + 24);
  v6 = *(double *)(a1 + 32);
  v7 = *(unsigned __int8 *)(a1 + 40);
  v8 = *(unsigned __int8 *)(a1 + 41);
  v9 = *(double *)(a1 + 48);
  v10 = *(unsigned __int8 *)(a2 + 8);
  v11 = *(unsigned __int8 *)(a2 + 9);
  v13 = *(double *)(a2 + 16);
  v12 = *(double *)(a2 + 24);
  v14 = *(double *)(a2 + 32);
  v15 = *(unsigned __int8 *)(a2 + 40);
  v16 = *(unsigned __int8 *)(a2 + 41);
  v17 = *(double *)(a2 + 48);
  sub_8AE40(*(_QWORD *)a1, *(_QWORD *)a2);
  v19 = v18;
  result = 0;
  if ((v19 & 1) != 0
    && ((v2 ^ v10) & 1) == 0
    && ((v3 ^ v11) & 1) == 0
    && v5 == v13
    && v4 == v12
    && v6 == v14
    && ((v7 ^ v15) & 1) == 0
    && v8 == v16)
  {
    return v9 == v17;
  }
  return result;
}

BOOL _s8BookEPUB0A11ThemeEntityV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _BOOL8 result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  _QWORD v44[8];

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(_BYTE *)(a1 + 2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v35 = *(_QWORD *)(a1 + 48);
  v36 = *(_QWORD *)(a1 + 40);
  v8 = *(unsigned __int8 *)(a2 + 1);
  v9 = *(_BYTE *)(a2 + 2);
  v10 = *(_QWORD *)(a2 + 8);
  v33 = *(_QWORD *)(a2 + 16);
  v34 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  sub_3F514(*(_BYTE *)a1);
  if ((v16 & 1) == 0)
    return 0;
  if (v2)
    v17 = 1802658148;
  else
    v17 = 0x746867696CLL;
  if (v2)
    v18 = 0xE400000000000000;
  else
    v18 = 0xE500000000000000;
  if (v8)
    v19 = 1802658148;
  else
    v19 = 0x746867696CLL;
  if (v8)
    v20 = 0xE400000000000000;
  else
    v20 = 0xE500000000000000;
  v32 = v14;
  if (v17 == v19 && v18 == v20)
  {
    swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v20);
    result = 0;
    if ((v21 & 1) == 0)
      return result;
  }
  LOBYTE(v44[0]) = v3;
  LOBYTE(v37) = v9;
  v23 = BookFontTable.rawValue.getter();
  v25 = v24;
  v27 = BookFontTable.rawValue.getter();
  v28 = v26;
  if (v23 == v27 && v25 == v26)
  {
    swift_bridgeObjectRelease_n(v25, 2);
  }
  else
  {
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v28);
    result = 0;
    if ((v29 & 1) == 0)
      return result;
  }
  if (!v4)
  {
    if (!v10)
      return 1;
    v4 = 0;
    goto LABEL_30;
  }
  v44[0] = v4;
  v44[1] = v5;
  v44[2] = v6;
  v44[3] = v7;
  v44[4] = v36;
  v44[5] = v35;
  v44[6] = v34;
  if (!v10)
  {
    swift_bridgeObjectRetain(v4);
LABEL_30:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v37 = v10;
  v38 = v33 & 0x101;
  v39 = v11;
  v40 = v12;
  v41 = v13;
  v42 = v32 & 0xFF01;
  v43 = v15;
  swift_bridgeObjectRetain_n(v4, 2);
  v30 = _s8BookEPUB0A11ThemeEntityV9OverridesV2eeoiySbAE_AEtFZ_0((uint64_t)v44, (uint64_t)&v37);
  v31 = v44[0];
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v31);
  return v30;
}

unint64_t sub_B6D78()
{
  unint64_t result;

  result = qword_3BA5D0;
  if (!qword_3BA5D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookThemeEntity.Overrides, &type metadata for BookThemeEntity.Overrides);
    atomic_store(result, (unint64_t *)&qword_3BA5D0);
  }
  return result;
}

unint64_t sub_B6DC0()
{
  unint64_t result;

  result = qword_3BD1B0;
  if (!qword_3BD1B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookThemeEntity, &type metadata for BookThemeEntity);
    atomic_store(result, (unint64_t *)&qword_3BD1B0);
  }
  return result;
}

unint64_t sub_B6E08()
{
  unint64_t result;

  result = qword_3BA5D8;
  if (!qword_3BA5D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookThemeEntity.SanitizeFontResult, &type metadata for BookThemeEntity.SanitizeFontResult);
    atomic_store(result, (unint64_t *)&qword_3BA5D8);
  }
  return result;
}

uint64_t initializeWithCopy for BookThemeEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for BookThemeEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for BookThemeEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookThemeEntity(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BookThemeEntity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookThemeEntity()
{
  return &type metadata for BookThemeEntity;
}

uint64_t destroy for BookThemeEntity.Overrides(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t initializeWithCopy for BookThemeEntity.Overrides(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_QWORD *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for BookThemeEntity.Overrides(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
  a1[6] = a2[6];
  return a1;
}

uint64_t *assignWithTake for BookThemeEntity.Overrides(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
  a1[6] = a2[6];
  return a1;
}

uint64_t getEnumTagSinglePayload for BookThemeEntity.Overrides(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BookThemeEntity.Overrides(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookThemeEntity.Overrides()
{
  return &type metadata for BookThemeEntity.Overrides;
}

uint64_t storeEnumTagSinglePayload for BookThemeEntity.SanitizeFontResult(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_B72E4 + 4 * byte_2E9A17[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_B7318 + 4 * byte_2E9A12[v4]))();
}

uint64_t sub_B7318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_B7320(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xB7328);
  return result;
}

uint64_t sub_B7334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xB733CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_B7340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_B7348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BookThemeEntity.SanitizeFontResult()
{
  return &type metadata for BookThemeEntity.SanitizeFontResult;
}

uint64_t sub_B7364(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1 & 1);
}

uint64_t sub_B7378(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _BYTE v5[24];
  __int128 v6[2];

  sub_49F1C(a1, (uint64_t)v6);
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___BEFootnotePresenter_bookEntity);
  swift_beginAccess(v3, v5, 33, 0);
  sub_34488(v3);
  sub_3F1CC(v6, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t sub_B73E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR___BEFootnotePresenter_bookEntity;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_49F1C(v3, a1);
}

id FootnotePresenter.__allocating_init(bookEntity:router:)(_QWORD *a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_super v11;
  _BYTE v12[24];

  v3 = v2;
  v6 = objc_allocWithZone(v3);
  v7 = (uint64_t)v6 + OBJC_IVAR___BEFootnotePresenter_router;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_QWORD *)(v7 + 32) = 0;
  sub_49F1C((uint64_t)a1, (uint64_t)v6 + OBJC_IVAR___BEFootnotePresenter_bookEntity);
  swift_beginAccess(v7, v12, 33, 0);
  v8 = v6;
  sub_B75C4(a2, v7);
  swift_endAccess(v12);

  v11.receiver = v8;
  v11.super_class = v3;
  v9 = objc_msgSendSuper2(&v11, "init");
  sub_B760C(a2);
  sub_34488(a1);
  return v9;
}

id FootnotePresenter.init(bookEntity:router:)(_QWORD *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  id v7;
  objc_super v9;
  _BYTE v10[24];

  v5 = (uint64_t)v2 + OBJC_IVAR___BEFootnotePresenter_router;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 32) = 0;
  sub_49F1C((uint64_t)a1, (uint64_t)v2 + OBJC_IVAR___BEFootnotePresenter_bookEntity);
  swift_beginAccess(v5, v10, 33, 0);
  v6 = v2;
  sub_B75C4(a2, v5);
  swift_endAccess(v10);

  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for FootnotePresenter();
  v7 = objc_msgSendSuper2(&v9, "init");
  sub_B760C(a2);
  sub_34488(a1);
  return v7;
}

uint64_t sub_B75C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BA5F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_B760C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC(&qword_3BA5F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for FootnotePresenter()
{
  return objc_opt_self(BEFootnotePresenter);
}

void FootnotePresenter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookEPUB.FootnotePresenter", 26, "init()", 6, 0);
  __break(1u);
}

id FootnotePresenter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FootnotePresenter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t FootnotePresenter.footnoteViewController(_:handleUserRequestForFrameToLoadExternalURL:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v8 = v4 + OBJC_IVAR___BEFootnotePresenter_router;
  swift_beginAccess(v8, v12, 0, 0);
  sub_B77F8(v8, (uint64_t)&v13);
  if (v14)
  {
    sub_3F1CC(&v13, (uint64_t)v15);
    v9 = v16;
    v10 = v17;
    sub_472D0(v15, v16);
    (*(void (**)(uint64_t, uint64_t (*)(_QWORD), uint64_t, uint64_t, uint64_t))(v10 + 40))(a2, a3, a4, v9, v10);
    return sub_34488(v15);
  }
  else
  {
    sub_B760C((uint64_t)&v13);
    return a3(0);
  }
}

uint64_t sub_B77F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BA5F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FootnotePresenter.footnoteViewController(_:handleExternalLoadRequest:likelyUserInitiated:)(uint64_t a1, uint64_t a2, char a3)
{
  return sub_B7FB8(a2, a3);
}

uint64_t FootnotePresenter.footnoteViewController(_:handleInternalLoadRequest:)(uint64_t a1, uint64_t a2)
{
  return sub_B8078(a2);
}

void FootnotePresenter.footnoteViewController(_:handleInternalLoadRequestForNewWindow:)(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  void *v2;
  void *v4;
  id v5;

  URL._bridgeToObjectiveC()(a2);
  v5 = v4;
  objc_msgSend(v2, "footnoteViewController:handleInternalLoadRequest:", a1, v4);

}

uint64_t FootnotePresenter.footnoteViewController(_:present:completion:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return sub_B8214(a2, a3, a4);
}

uint64_t FootnotePresenter.footnoteViewDidFinishLoad(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[3];
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE v11[24];
  uint64_t v12;

  v3 = v1 + OBJC_IVAR___BEFootnotePresenter_router;
  swift_beginAccess(v3, v10, 0, 0);
  sub_B77F8(v3, (uint64_t)v11);
  if (!v12)
    return sub_B760C((uint64_t)v11);
  sub_49F1C((uint64_t)v11, (uint64_t)v7);
  sub_B760C((uint64_t)v11);
  v4 = v8;
  v5 = v9;
  sub_472D0(v7, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v4, v5);
  return sub_34488(v7);
}

Swift::Void __swiftcall FootnotePresenter.footnoteViewDidDisappear(_:)(UIViewController a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];
  uint64_t v11;

  v3 = v1 + OBJC_IVAR___BEFootnotePresenter_router;
  swift_beginAccess(v3, v9, 0, 0);
  sub_B77F8(v3, (uint64_t)v10);
  if (v11)
  {
    sub_49F1C((uint64_t)v10, (uint64_t)v6);
    sub_B760C((uint64_t)v10);
    v4 = v7;
    v5 = v8;
    sub_472D0(v6, v7);
    (*(void (**)(Class, uint64_t, uint64_t))(v5 + 56))(a1.super.super.isa, v4, v5);
    sub_34488(v6);
  }
  else
  {
    sub_B760C((uint64_t)v10);
  }
}

double sub_B7EA4(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  double result;
  _BYTE v12[24];
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v6 = swift_allocObject(&unk_37ED80, 24);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = a2 + OBJC_IVAR___BEFootnotePresenter_router;
  swift_beginAccess(v7, v12, 0, 0);
  sub_B77F8(v7, (uint64_t)&v13);
  if (v14)
  {
    sub_3F1CC(&v13, (uint64_t)v15);
    v8 = v16;
    v9 = v17;
    sub_472D0(v15, v16);
    v10 = *(void (**)(uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v9 + 40);
    _Block_copy(a3);
    v10(a1, sub_B83EC, v6, v8, v9);
    sub_34488(v15);
  }
  else
  {
    _Block_copy(a3);
    sub_B760C((uint64_t)&v13);
    a3[2](a3, 0);
  }
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_B7FB8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];
  uint64_t v14;

  v5 = v2 + OBJC_IVAR___BEFootnotePresenter_router;
  swift_beginAccess(v5, v12, 0, 0);
  sub_B77F8(v5, (uint64_t)v13);
  if (!v14)
    return sub_B760C((uint64_t)v13);
  sub_49F1C((uint64_t)v13, (uint64_t)v9);
  sub_B760C((uint64_t)v13);
  v6 = v10;
  v7 = v11;
  sub_472D0(v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 32))(a1, a2 & 1, v6, v7);
  return sub_34488(v9);
}

uint64_t sub_B8078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = v1 + OBJC_IVAR___BEFootnotePresenter_bookEntity;
  swift_beginAccess(v4, v19, 0, 0);
  sub_49F1C(v4, (uint64_t)v20);
  v5 = v21;
  v6 = v22;
  sub_472D0(v20, v21);
  LOBYTE(v5) = BookEntityType.urlReferencesTableOfContents(_:)(a1, v5, v6);
  sub_34488(v20);
  if ((v5 & 1) != 0)
  {
    v7 = v2 + OBJC_IVAR___BEFootnotePresenter_router;
    swift_beginAccess(v2 + OBJC_IVAR___BEFootnotePresenter_router, v18, 0, 0);
    sub_B77F8(v7, (uint64_t)v20);
    if (v21)
    {
      sub_49F1C((uint64_t)v20, (uint64_t)v15);
      sub_B760C((uint64_t)v20);
      v8 = v16;
      v9 = v17;
      sub_472D0(v15, v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, v8, v9);
      sub_34488(v15);
LABEL_7:
      v13 = 0;
      return v13 & 1;
    }
LABEL_6:
    sub_B760C((uint64_t)v20);
    goto LABEL_7;
  }
  v10 = v2 + OBJC_IVAR___BEFootnotePresenter_router;
  swift_beginAccess(v2 + OBJC_IVAR___BEFootnotePresenter_router, v18, 0, 0);
  sub_B77F8(v10, (uint64_t)v20);
  if (!v21)
    goto LABEL_6;
  sub_49F1C((uint64_t)v20, (uint64_t)v15);
  sub_B760C((uint64_t)v20);
  v11 = v16;
  v12 = v17;
  sub_472D0(v15, v16);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(a1, v11, v12);
  sub_34488(v15);
  return v13 & 1;
}

uint64_t sub_B8214(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[24];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v7 = v3 + OBJC_IVAR___BEFootnotePresenter_router;
  swift_beginAccess(v3 + OBJC_IVAR___BEFootnotePresenter_router, v18, 0, 0);
  sub_B77F8(v7, (uint64_t)&v19);
  if (v20)
  {
    sub_3F1CC(&v19, (uint64_t)v22);
    v8 = v3 + OBJC_IVAR___BEFootnotePresenter_bookEntity;
    swift_beginAccess(v8, &v17, 0, 0);
    sub_49F1C(v8, (uint64_t)&v19);
    v9 = v20;
    v10 = v21;
    sub_472D0(&v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
    v12 = v11;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    sub_34488(&v19);
    objc_msgSend(a1, "setTitle:", v13);

    v14 = v23;
    v15 = v24;
    sub_472D0(v22, v23);
    (*(void (**)(void *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v15 + 8))(a1, a2, a3, v14, v15);
    return sub_34488(v22);
  }
  else
  {
    result = sub_B760C((uint64_t)&v19);
    if (a2)
      return a2(result);
  }
  return result;
}

uint64_t sub_B8364@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR___BEFootnotePresenter_bookEntity;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_49F1C(v3, a2);
}

uint64_t method lookup function for FootnotePresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for FootnotePresenter);
}

uint64_t sub_B83C8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_B83EC(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

BookEPUB::PageMovementState __swiftcall PageMovementState.init(isIdle:isDragging:)(Swift::Bool isIdle, Swift::Bool isDragging)
{
  Swift::Bool *v2;
  BookEPUB::PageMovementState result;

  *v2 = isIdle;
  v2[1] = isDragging;
  result.isIdle = isIdle;
  return result;
}

void PageMovementState.hash(into:)()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static PageMovementState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

Swift::Int PageMovementState.hashValue.getter()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

Swift::Int sub_B84D0(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

unint64_t sub_B852C()
{
  unint64_t result;

  result = qword_3BA680;
  if (!qword_3BA680)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageMovementState, &type metadata for PageMovementState);
    atomic_store(result, (unint64_t *)&qword_3BA680);
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for PageMovementState(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PageMovementState(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PageMovementState(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_B866C + 4 * byte_2E9C65[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_B86A0 + 4 * byte_2E9C60[v4]))();
}

uint64_t sub_B86A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_B86A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0xB86B0);
  return result;
}

uint64_t sub_B86BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0xB86C4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_B86C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_B86D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageMovementState()
{
  return &type metadata for PageMovementState;
}

uint64_t dispatch thunk of ContentMediatorEventHandling.content(_:handleTextInteractionDidSetIgnorePageTurn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t sub_B86F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_B872C
                                                                     + 4 * asc_2E9D18[a1]))(0xD000000000000010, 0x80000000002C5910);
}

uint64_t sub_B872C(uint64_t a1)
{
  return a1 + 9;
}

uint64_t sub_B8830(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_B86F4(*a1);
  v5 = v4;
  v6 = sub_B86F4(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_B88B8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = sub_B86F4(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_B8918(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_B86F4(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_B8958(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = sub_B86F4(v2);
  v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_B89B4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_BDFEC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_B89E0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_B86F4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_B8A08(_QWORD *a1@<X8>)
{
  *a1 = &off_378B50;
}

uint64_t sub_B8A18(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_B8A50 + 4 * byte_2E9D24[a1]))(0xD000000000000010, 0x80000000002C5910);
}

uint64_t sub_B8A50(uint64_t a1)
{
  return a1 + 9;
}

uint64_t sub_B8B54()
{
  unsigned __int8 *v0;

  return sub_B8A18(*v0);
}

uint64_t sub_B8B5C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_3FE44(*a1, *a2);
}

Swift::Int sub_B8B68()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE500000000000000;
  v3 = 0x6B63696C63;
  if (v1 != 1)
  {
    v3 = 0x6E6F69746361;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0xD000000000000011;
  if (v1)
    v5 = v2;
  else
    v5 = 0x80000000002C5A20;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_B8C04(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xE500000000000000;
  v3 = 0x6B63696C63;
  if (*v1 != 1)
  {
    v3 = 0x6E6F69746361;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0xD000000000000011;
  if (*v1)
    v5 = v2;
  else
    v5 = 0x80000000002C5A20;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_B8C7C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE500000000000000;
  v4 = 0x6B63696C63;
  if (v2 != 1)
  {
    v4 = 0x6E6F69746361;
    v3 = 0xE600000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0xD000000000000011;
  if (v2)
    v6 = v3;
  else
    v6 = 0x80000000002C5A20;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_B8D14@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_BE034(*a1);
  *a2 = result;
  return result;
}

void sub_B8D40(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *v1;
  v3 = 0x80000000002C5A20;
  v4 = 0xE500000000000000;
  v5 = 0x6B63696C63;
  if (v2 != 1)
  {
    v5 = 0x6E6F69746361;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0xD000000000000011;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

BookEPUB::ContentMessage::CFIUpdate::Event_optional __swiftcall ContentMessage.CFIUpdate.Event.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BookEPUB::ContentMessage::CFIUpdate::Event_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_379470, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t ContentMessage.CFIUpdate.Event.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C6C6F726373;
  else
    return 1684107116;
}

uint64_t sub_B8E2C(char *a1, char *a2)
{
  return sub_400B4(*a1, *a2);
}

Swift::Int sub_B8E38()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6C6C6F726373;
  else
    v2 = 1684107116;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_B8EAC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6C6C6F726373;
  else
    v2 = 1684107116;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE400000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_B8EFC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6C6C6F726373;
  else
    v3 = 1684107116;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE400000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookEPUB::ContentMessage::CFIUpdate::Event_optional sub_B8F6C(Swift::String *a1)
{
  return ContentMessage.CFIUpdate.Event.init(rawValue:)(*a1);
}

void sub_B8F78(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1684107116;
  if (*v1)
    v2 = 0x6C6C6F726373;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t ContentMessage.CFIUpdate.range.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  *a1 = v1[1];
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t ContentLoaderDocument.manifestID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  return v1;
}

double ContentMessage.CFIUpdate.contentRect.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 56);
}

uint64_t ContentMessage.CFIUpdate.contentLineRects.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
}

uint64_t ContentMessage.ExpandedContent.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_AA740(v1, a1);
}

uint64_t ContentMessage.ExpandedContent.usdzSource.getter()
{
  return sub_B9168(type metadata accessor for ContentMessage.ExpandedContent);
}

uint64_t ContentMessage.ExpandedContent.src.getter()
{
  return sub_B91B4(type metadata accessor for ContentMessage.ExpandedContent);
}

uint64_t ContentMessage.ExpandedContent.html.getter()
{
  return sub_B9200(type metadata accessor for ContentMessage.ExpandedContent);
}

uint64_t ContentMessage.ExpandedContent.documentURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for ContentMessage.ExpandedContent(0) + 32);
  return sub_AA740(v3, a1);
}

double ContentMessage.ExpandedContent.size.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for ContentMessage.ExpandedContent(0) + 36));
}

double ContentMessage.ExpandedContent.zoomScale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for ContentMessage.ExpandedContent(0) + 40));
}

uint64_t ContentMessage.ExpandedContent.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ContentMessage.ExpandedContent(0) + 44));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ContentMessage.ExpandedContent.location.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ContentMessage.ExpandedContent(0) + 48));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

double ContentMessage.ExpandedContent.rects.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for ContentMessage.ExpandedContent(0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 52))).n128_u64[0];
  return result;
}

uint64_t ContentMessage.Footnote.html.getter()
{
  return sub_B9168(type metadata accessor for ContentMessage.Footnote);
}

uint64_t sub_B9168(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 20));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t ContentMessage.Footnote.location.getter()
{
  return sub_B91B4(type metadata accessor for ContentMessage.Footnote);
}

uint64_t sub_B91B4(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 24));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t ContentMessage.Footnote.title.getter()
{
  return sub_B9200(type metadata accessor for ContentMessage.Footnote);
}

uint64_t sub_B9200(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1(0) + 28));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t ContentMessage.Footnote.contentType.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ContentMessage.Footnote(0) + 32));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ContentMessage.Footnote.zoomScale.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for ContentMessage.Footnote(0) + 36));
}

double ContentMessage.Footnote.rect.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  double result;

  v3 = (__int128 *)(v1 + *(int *)(type metadata accessor for ContentMessage.Footnote(0) + 40));
  v4 = *((_QWORD *)v3 + 4);
  v5 = *v3;
  v6 = v3[1];
  *(_OWORD *)a1 = *v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)&result = swift_unknownObjectRetain(v5).n128_u64[0];
  return result;
}

BookEPUB::ContentMessage::Direction_optional __swiftcall ContentMessage.Direction.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookEPUB::ContentMessage::Direction_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3794C0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t ContentMessage.Direction.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B9364 + 4 * byte_2E9D30[*v0]))(1954047342, 0xE400000000000000);
}

uint64_t sub_B9364()
{
  return 0x73756F6976657270;
}

void sub_B93B0(char *a1)
{
  sub_3FF40(*a1);
}

void sub_B93BC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_B9400()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x73756F6976657270, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_B9474()
{
  __asm { BR              X10 }
}

uint64_t sub_B94A8(uint64_t a1)
{
  String.hash(into:)(a1, 0x73756F6976657270, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_B9508(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_B9548()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x73756F6976657270, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

BookEPUB::ContentMessage::Direction_optional sub_B95BC(Swift::String *a1)
{
  return ContentMessage.Direction.init(rawValue:)(*a1);
}

uint64_t sub_B95C8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_B95F0 + 4 * byte_2E9D40[*v0]))();
}

void sub_B95F0(_QWORD *a1@<X8>)
{
  *a1 = 0x73756F6976657270;
  a1[1] = 0xE800000000000000;
}

void ContentMessage.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD v7[20];

  v1 = type metadata accessor for ContentMessage.Footnote(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for ContentMessage.ExpandedContent(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for ContentMessage(0);
  __chkstk_darwin(v3);
  v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[17] = 0xD000000000000011;
  v7[18] = 0x80000000002CA2A0;
  sub_BA4F8(v0, (uint64_t)v5);
  v6 = (char *)sub_B9764 + 4 * word_2E9D44[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_B9764()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;

  v3 = *v0;
  v4 = *((_QWORD *)v0 + 1);
  v5 = *((_QWORD *)v0 + 2);
  v6 = v0[24];
  *(_QWORD *)(v2 - 232) = 0;
  *(_QWORD *)(v2 - 224) = 0xE000000000000000;
  _StringGuts.grow(_:)(24);
  v7 = *(_QWORD *)(v2 - 224);
  *(_QWORD *)(v2 - 136) = *(_QWORD *)(v2 - 232);
  *(_QWORD *)(v2 - 128) = v7;
  v8._countAndFlagsBits = v1 + 1;
  v8._object = (void *)0x80000000002CA410;
  String.append(_:)(v8);
  *(_BYTE *)(v2 - 232) = v3;
  *(_QWORD *)(v2 - 224) = v4;
  *(_QWORD *)(v2 - 216) = v5;
  *(_BYTE *)(v2 - 208) = v6;
  _print_unlocked<A, B>(_:_:)(v2 - 232, v2 - 136, &type metadata for ContentMessage.ReadAloud, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  sub_BA53C(v4, v5, v6);
  v9._countAndFlagsBits = *(_QWORD *)(v2 - 136);
  v10 = *(void **)(v2 - 128);
  v9._object = v10;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v10);
  return *(_QWORD *)(v2 - 120);
}

unint64_t sub_B9C44()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6B63696C63;
  if (*v0 != 1)
    v1 = 0x6E6F69746361;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

unint64_t ContentMessage.CFIUpdate.description.getter()
{
  _QWORD *v0;
  int v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  v1 = *(unsigned __int8 *)v0;
  v3 = v0[1];
  v2 = (void *)v0[2];
  v5 = v0[3];
  v4 = (void *)v0[4];
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  if (v1)
    v6 = 0x6C6C6F726373;
  else
    v6 = 1684107116;
  if (v1)
    v7 = 0xE600000000000000;
  else
    v7 = 0xE400000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0x6E6172202020200ALL;
  v9._object = (void *)0xEC000000203A6567;
  String.append(_:)(v9);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v4);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain(v2);
  v10._countAndFlagsBits = v3;
  v10._object = v2;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v2);
  v11._countAndFlagsBits = 0x203A646E65207C20;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain(v4);
  v12._countAndFlagsBits = v5;
  v12._object = v4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v4);
  v13._countAndFlagsBits = 0x203A7472617473;
  v13._object = (void *)0xE700000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(0xE700000000000000);
  return 0xD000000000000017;
}

uint64_t ContentMessage.CFIUpdate.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned __int8 *)v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v9 = v1[5];
  v8 = v1[6];
  if (v3)
    v10 = 0x6C6C6F726373;
  else
    v10 = 1684107116;
  if (v3)
    v11 = 0xE600000000000000;
  else
    v11 = 0xE400000000000000;
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRetain_n(v5, 2);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease_n(v7, 2);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v9, v8);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int ContentMessage.CFIUpdate.hashValue.getter()
{
  _QWORD *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v11[9];

  v1 = *(unsigned __int8 *)v0;
  v3 = v0[1];
  v2 = v0[2];
  v5 = v0[3];
  v4 = v0[4];
  v7 = v0[5];
  v6 = v0[6];
  Hasher.init(_seed:)(v11, 0);
  if (v1)
    v8 = 0x6C6C6F726373;
  else
    v8 = 1684107116;
  if (v1)
    v9 = 0xE600000000000000;
  else
    v9 = 0xE400000000000000;
  String.hash(into:)(v11, v8, v9);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRetain_n(v2, 2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v11, v3, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v11, v5, v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease_n(v4, 2);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v11, v7, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

Swift::Int sub_BA050(uint64_t a1)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v12[9];

  v2 = *(unsigned __int8 *)v1;
  v4 = v1[1];
  v3 = v1[2];
  v6 = v1[3];
  v5 = v1[4];
  v8 = v1[5];
  v7 = v1[6];
  Hasher.init(_seed:)(v12, a1);
  if (v2)
    v9 = 0x6C6C6F726373;
  else
    v9 = 1684107116;
  if (v2)
    v10 = 0xE600000000000000;
  else
    v10 = 0xE400000000000000;
  String.hash(into:)(v12, v9, v10);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRetain_n(v3, 2);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v12, v4, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v12, v6, v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease_n(v5, 2);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v12, v8, v7);
  swift_bridgeObjectRelease(v7);
  return Hasher._finalize()();
}

uint64_t _s8BookEPUB14ContentMessageO9CFIUpdateV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  unint64_t v17;
  CGFloat v18;
  CGFloat v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  CGRect v31;
  CGRect v32;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v29 = *(_QWORD *)(a1 + 40);
  v30 = *(_QWORD *)(a1 + 32);
  v5 = *(double *)(a1 + 56);
  v6 = *(double *)(a1 + 64);
  v7 = *(double *)(a1 + 72);
  v8 = *(double *)(a1 + 80);
  v25 = *(_QWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 32);
  v27 = *(_QWORD *)(a1 + 48);
  v28 = *(_QWORD *)(a2 + 40);
  v26 = *(_QWORD *)(a2 + 48);
  v13 = *(_BYTE *)a1 == 0;
  if (*(_BYTE *)a1)
    v14 = 0x6C6C6F726373;
  else
    v14 = 1684107116;
  v16 = *(double *)(a2 + 56);
  v15 = *(double *)(a2 + 64);
  if (v13)
    v17 = 0xE400000000000000;
  else
    v17 = 0xE600000000000000;
  v19 = *(double *)(a2 + 72);
  v18 = *(double *)(a2 + 80);
  if (*(_BYTE *)a2)
    v20 = 0x6C6C6F726373;
  else
    v20 = 1684107116;
  if (*(_BYTE *)a2)
    v21 = 0xE600000000000000;
  else
    v21 = 0xE400000000000000;
  v24 = *(_QWORD *)(a2 + 88);
  if (v14 == v20 && v17 == v21)
  {
    swift_bridgeObjectRelease_n(v17, 2);
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v17, v20, v21, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v21);
    if ((v22 & 1) == 0)
      return 0;
  }
  if ((v2 == v10 && v3 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v10, v9, 0) & 1) != 0)
    && (v4 == v11 && v30 == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v30, v11, v12, 0) & 1) != 0)
    && (v29 == v28 && v27 == v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v27, v28, v26, 0) & 1) != 0))
  {
    v31.origin.x = v5;
    v31.origin.y = v6;
    v31.size.width = v7;
    v31.size.height = v8;
    v32.origin.x = v16;
    v32.origin.y = v15;
    v32.size.width = v19;
    v32.size.height = v18;
    if (CGRectEqualToRect(v31, v32))
      return sub_65960(v25, v24);
  }
  return 0;
}

BOOL _s8BookEPUB14ContentMessageO9SelectionV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BOOL8 result;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  v23 = *(unsigned __int8 *)(a2 + 56);
  v24 = *((unsigned __int8 *)a1 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  v22 = a1[8];
  if (v4 == *(_QWORD *)a2 && v5 == v11
    || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v11, 0), result = 0, (v17 & 1) != 0))
  {
    if (v6 == v12 && v8 == v13
      || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v12, v13, 0), result = 0, (v19 & 1) != 0))
    {
      if ((sub_65960(v7, v15) & 1) == 0)
        return 0;
      if (v9 == v14 && v10 == v16)
      {
        if (v24 != v23)
          return 0;
        return v22 == v21;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v14, v16, 0);
      result = 0;
      if ((v20 & 1) != 0 && ((v24 ^ v23) & 1) == 0)
        return v22 == v21;
    }
  }
  return result;
}

uint64_t type metadata accessor for ContentMessage.ExpandedContent(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3BA7A0, (uint64_t)&nominal type descriptor for ContentMessage.ExpandedContent);
}

uint64_t type metadata accessor for ContentMessage.Footnote(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3BA858, (uint64_t)&nominal type descriptor for ContentMessage.Footnote);
}

uint64_t type metadata accessor for ContentMessage(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3BA710, (uint64_t)&nominal type descriptor for ContentMessage);
}

uint64_t sub_BA4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_BA53C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    a1 = a2;
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_BA548(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_BA58C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_BA5CC()
{
  unint64_t result;

  result = qword_3BA688;
  if (!qword_3BA688)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentMessage.CFIUpdate.Event, &type metadata for ContentMessage.CFIUpdate.Event);
    atomic_store(result, (unint64_t *)&qword_3BA688);
  }
  return result;
}

unint64_t sub_BA614()
{
  unint64_t result;

  result = qword_3BA690;
  if (!qword_3BA690)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentMessage.Direction, &type metadata for ContentMessage.Direction);
    atomic_store(result, (unint64_t *)&qword_3BA690);
  }
  return result;
}

unint64_t sub_BA65C()
{
  unint64_t result;

  result = qword_3BA698;
  if (!qword_3BA698)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentMessage.CFIUpdate, &type metadata for ContentMessage.CFIUpdate);
    atomic_store(result, (unint64_t *)&qword_3BA698);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ContentMessage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  __n128 v45;
  uint64_t v46;
  int *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(char *, uint64_t, uint64_t, __n128);

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v11 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v8 = a2[1];
        v9 = a2[2];
        v10 = *((_BYTE *)a2 + 24);
        sub_BAB8C(v8, v9, v10);
        a1[1] = v8;
        a1[2] = v9;
        *((_BYTE *)a1 + 24) = v10;
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 2u:
        v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        v16 = a2[4];
        v15 = a2[5];
        a1[4] = v16;
        a1[5] = v15;
        v17 = a2[6];
        a1[6] = v17;
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        a1[8] = a2[8];
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v18 = a2[2];
        a1[1] = a2[1];
        a1[2] = v18;
        v19 = a2[4];
        a1[3] = a2[3];
        a1[4] = v19;
        v20 = a2[6];
        a1[5] = a2[5];
        a1[6] = v20;
        *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
        v21 = a2[11];
        a1[11] = v21;
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v19);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v21);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v22 = type metadata accessor for URL(0);
        v23 = *(_QWORD *)(v22 - 8);
        v82 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v23 + 48);
        if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v82)(a2, 1, v22))
        {
          v24 = sub_319AC((uint64_t *)&unk_3B8C50);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v23 + 16))(a1, a2, v22);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(a1, 0, 1, v22);
        }
        v29 = (int *)type metadata accessor for ContentMessage.ExpandedContent(0);
        v30 = v29[5];
        v31 = (_QWORD *)((char *)a1 + v30);
        v32 = (_QWORD *)((char *)a2 + v30);
        v33 = v32[1];
        *v31 = *v32;
        v31[1] = v33;
        v34 = v29[6];
        v35 = (_QWORD *)((char *)a1 + v34);
        v36 = (_QWORD *)((char *)a2 + v34);
        v37 = v36[1];
        *v35 = *v36;
        v35[1] = v37;
        v38 = v29[7];
        v39 = (_QWORD *)((char *)a1 + v38);
        v40 = (_QWORD *)((char *)a2 + v38);
        v41 = v40[1];
        *v39 = *v40;
        v39[1] = v41;
        v42 = v29[8];
        v43 = (char *)a1 + v42;
        v44 = (char *)a2 + v42;
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v37);
        v45 = swift_bridgeObjectRetain(v41);
        if (v82(v44, 1, v22, v45))
        {
          v46 = sub_319AC((uint64_t *)&unk_3B8C50);
          memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v43, v44, v22);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v43, 0, 1, v22);
        }
        *(_OWORD *)((char *)a1 + v29[9]) = *(_OWORD *)((char *)a2 + v29[9]);
        *(_QWORD *)((char *)a1 + v29[10]) = *(_QWORD *)((char *)a2 + v29[10]);
        v72 = v29[11];
        v73 = (_QWORD *)((char *)a1 + v72);
        v74 = (_QWORD *)((char *)a2 + v72);
        v75 = v74[1];
        *v73 = *v74;
        v73[1] = v75;
        v76 = v29[12];
        v77 = (_QWORD *)((char *)a1 + v76);
        v78 = (_QWORD *)((char *)a2 + v76);
        v79 = v78[1];
        *v77 = *v78;
        v77[1] = v79;
        v80 = v29[13];
        v81 = *(_QWORD *)((char *)a2 + v80);
        *(_QWORD *)((char *)a1 + v80) = v81;
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v81);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v25 = type metadata accessor for URL(0);
        v26 = *(_QWORD *)(v25 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(a2, 1, v25))
        {
          v27 = sub_319AC((uint64_t *)&unk_3B8C50);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v26 + 16))(a1, a2, v25);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(a1, 0, 1, v25);
        }
        v47 = (int *)type metadata accessor for ContentMessage.Footnote(0);
        v48 = v47[5];
        v49 = (_QWORD *)((char *)a1 + v48);
        v50 = (_QWORD *)((char *)a2 + v48);
        v52 = *v50;
        v51 = v50[1];
        *v49 = v52;
        v49[1] = v51;
        v53 = v47[6];
        v54 = (_QWORD *)((char *)a1 + v53);
        v55 = (_QWORD *)((char *)a2 + v53);
        v56 = v55[1];
        *v54 = *v55;
        v54[1] = v56;
        v57 = v47[7];
        v58 = (_QWORD *)((char *)a1 + v57);
        v59 = (_QWORD *)((char *)a2 + v57);
        v60 = v59[1];
        *v58 = *v59;
        v58[1] = v60;
        v61 = v47[8];
        v62 = (_QWORD *)((char *)a1 + v61);
        v63 = (_QWORD *)((char *)a2 + v61);
        v64 = v63[1];
        *v62 = *v63;
        v62[1] = v64;
        v65 = v47[9];
        v66 = (char *)a1 + v65;
        v67 = (char *)a2 + v65;
        *(_QWORD *)v66 = *(_QWORD *)v67;
        v66[8] = v67[8];
        v68 = v47[10];
        v69 = (char *)a1 + v68;
        v70 = (char *)a2 + v68;
        v71 = *(_QWORD *)v70;
        *(_QWORD *)v69 = *(_QWORD *)v70;
        *(_OWORD *)(v69 + 24) = *(_OWORD *)(v70 + 24);
        *(_OWORD *)(v69 + 8) = *(_OWORD *)(v70 + 8);
        swift_bridgeObjectRetain(v51);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v60);
        swift_bridgeObjectRetain(v64);
        swift_unknownObjectRetain(v71);
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 7u:
        v28 = a2[1];
        *a1 = *a2;
        a1[1] = v28;
        swift_bridgeObjectRetain(v28);
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_BAB8C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    a1 = a2;
  return swift_bridgeObjectRetain(a1);
}

double destroy for ContentMessage(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  int *v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      sub_BA53C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
      break;
    case 2u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
      *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48)).n128_u64[0];
      break;
    case 3u:
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
      *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88)).n128_u64[0];
      break;
    case 4u:
      v4 = type metadata accessor for URL(0);
      v5 = *(_QWORD *)(v4 - 8);
      v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (!v6(a1, 1, v4))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
      v7 = (int *)type metadata accessor for ContentMessage.ExpandedContent(0);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[5] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[6] + 8));
      v8 = swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[7] + 8));
      v9 = a1 + v7[8];
      if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v6)(v9, 1, v4, v8))
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[11] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[12] + 8));
      *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + v7[13])).n128_u64[0];
      break;
    case 5u:
      v10 = type metadata accessor for URL(0);
      v11 = *(_QWORD *)(v10 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1, v10))
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
      v12 = (int *)type metadata accessor for ContentMessage.Footnote(0);
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v12[5] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v12[6] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v12[7] + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + v12[8] + 8));
      *(_QWORD *)&result = swift_unknownObjectRelease(*(_QWORD *)(a1 + v12[10])).n128_u64[0];
      break;
    case 7u:
      *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8)).n128_u64[0];
      break;
    default:
      return result;
  }
  return result;
}

_QWORD *initializeWithCopy for ContentMessage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v82)(char *, uint64_t, uint64_t, __n128);

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v6 = a2[1];
      v7 = a2[2];
      v8 = *((_BYTE *)a2 + 24);
      sub_BAB8C(v6, v7, v8);
      a1[1] = v6;
      a1[2] = v7;
      *((_BYTE *)a1 + 24) = v8;
      v9 = a1;
      v10 = a3;
      v11 = 0;
      goto LABEL_18;
    case 2u:
      v12 = a2[1];
      *a1 = *a2;
      a1[1] = v12;
      v13 = a2[3];
      a1[2] = a2[2];
      a1[3] = v13;
      v15 = a2[4];
      v14 = a2[5];
      a1[4] = v15;
      a1[5] = v14;
      v16 = a2[6];
      a1[6] = v16;
      *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
      a1[8] = a2[8];
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      v9 = a1;
      v10 = a3;
      v11 = 2;
      goto LABEL_18;
    case 3u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v17 = a2[2];
      a1[1] = a2[1];
      a1[2] = v17;
      v18 = a2[4];
      a1[3] = a2[3];
      a1[4] = v18;
      v19 = a2[6];
      a1[5] = a2[5];
      a1[6] = v19;
      *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
      v20 = a2[11];
      a1[11] = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      v9 = a1;
      v10 = a3;
      v11 = 3;
      goto LABEL_18;
    case 4u:
      v21 = type metadata accessor for URL(0);
      v22 = *(_QWORD *)(v21 - 8);
      v82 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v22 + 48);
      if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v82)(a2, 1, v21))
      {
        v23 = sub_319AC((uint64_t *)&unk_3B8C50);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v22 + 16))(a1, a2, v21);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(a1, 0, 1, v21);
      }
      v28 = (int *)type metadata accessor for ContentMessage.ExpandedContent(0);
      v29 = v28[5];
      v30 = (_QWORD *)((char *)a1 + v29);
      v31 = (_QWORD *)((char *)a2 + v29);
      v32 = v31[1];
      *v30 = *v31;
      v30[1] = v32;
      v33 = v28[6];
      v34 = (_QWORD *)((char *)a1 + v33);
      v35 = (_QWORD *)((char *)a2 + v33);
      v36 = v35[1];
      *v34 = *v35;
      v34[1] = v36;
      v37 = v28[7];
      v38 = (_QWORD *)((char *)a1 + v37);
      v39 = (_QWORD *)((char *)a2 + v37);
      v40 = v39[1];
      *v38 = *v39;
      v38[1] = v40;
      v41 = v28[8];
      v42 = (char *)a1 + v41;
      v43 = (char *)a2 + v41;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v36);
      v44 = swift_bridgeObjectRetain(v40);
      if (v82(v43, 1, v21, v44))
      {
        v45 = sub_319AC((uint64_t *)&unk_3B8C50);
        memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v42, v43, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v42, 0, 1, v21);
      }
      *(_OWORD *)((char *)a1 + v28[9]) = *(_OWORD *)((char *)a2 + v28[9]);
      *(_QWORD *)((char *)a1 + v28[10]) = *(_QWORD *)((char *)a2 + v28[10]);
      v71 = v28[11];
      v72 = (_QWORD *)((char *)a1 + v71);
      v73 = (_QWORD *)((char *)a2 + v71);
      v74 = v73[1];
      *v72 = *v73;
      v72[1] = v74;
      v75 = v28[12];
      v76 = (_QWORD *)((char *)a1 + v75);
      v77 = (_QWORD *)((char *)a2 + v75);
      v78 = v77[1];
      *v76 = *v77;
      v76[1] = v78;
      v79 = v28[13];
      v80 = *(_QWORD *)((char *)a2 + v79);
      *(_QWORD *)((char *)a1 + v79) = v80;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v80);
      v9 = a1;
      v10 = a3;
      v11 = 4;
      goto LABEL_18;
    case 5u:
      v24 = type metadata accessor for URL(0);
      v25 = *(_QWORD *)(v24 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(a2, 1, v24))
      {
        v26 = sub_319AC((uint64_t *)&unk_3B8C50);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 16))(a1, a2, v24);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(a1, 0, 1, v24);
      }
      v46 = (int *)type metadata accessor for ContentMessage.Footnote(0);
      v47 = v46[5];
      v48 = (_QWORD *)((char *)a1 + v47);
      v49 = (_QWORD *)((char *)a2 + v47);
      v51 = *v49;
      v50 = v49[1];
      *v48 = v51;
      v48[1] = v50;
      v52 = v46[6];
      v53 = (_QWORD *)((char *)a1 + v52);
      v54 = (_QWORD *)((char *)a2 + v52);
      v55 = v54[1];
      *v53 = *v54;
      v53[1] = v55;
      v56 = v46[7];
      v57 = (_QWORD *)((char *)a1 + v56);
      v58 = (_QWORD *)((char *)a2 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      v60 = v46[8];
      v61 = (_QWORD *)((char *)a1 + v60);
      v62 = (_QWORD *)((char *)a2 + v60);
      v63 = v62[1];
      *v61 = *v62;
      v61[1] = v63;
      v64 = v46[9];
      v65 = (char *)a1 + v64;
      v66 = (char *)a2 + v64;
      *(_QWORD *)v65 = *(_QWORD *)v66;
      v65[8] = v66[8];
      v67 = v46[10];
      v68 = (char *)a1 + v67;
      v69 = (char *)a2 + v67;
      v70 = *(_QWORD *)v69;
      *(_QWORD *)v68 = *(_QWORD *)v69;
      *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
      *(_OWORD *)(v68 + 8) = *(_OWORD *)(v69 + 8);
      swift_bridgeObjectRetain(v50);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v63);
      swift_unknownObjectRetain(v70);
      v9 = a1;
      v10 = a3;
      v11 = 5;
      goto LABEL_18;
    case 7u:
      v27 = a2[1];
      *a1 = *a2;
      a1[1] = v27;
      swift_bridgeObjectRetain(v27);
      v9 = a1;
      v10 = a3;
      v11 = 7;
LABEL_18:
      swift_storeEnumTagMultiPayload(v9, v10, v11);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_QWORD *assignWithCopy for ContentMessage(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v83)(char *, uint64_t, uint64_t, __n128);

  if (a1 != a2)
  {
    sub_BA58C((uint64_t)a1, type metadata accessor for ContentMessage);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v6 = a2[1];
        v7 = a2[2];
        v8 = *((_BYTE *)a2 + 24);
        sub_BAB8C(v6, v7, v8);
        a1[1] = v6;
        a1[2] = v7;
        *((_BYTE *)a1 + 24) = v8;
        v9 = a1;
        v10 = a3;
        v11 = 0;
        goto LABEL_19;
      case 2u:
        *a1 = *a2;
        v12 = a2[1];
        a1[1] = v12;
        a1[2] = a2[2];
        v13 = a2[3];
        a1[3] = v13;
        v14 = a2[4];
        a1[4] = v14;
        a1[5] = a2[5];
        v15 = a2[6];
        a1[6] = v15;
        *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
        a1[8] = a2[8];
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        v9 = a1;
        v10 = a3;
        v11 = 2;
        goto LABEL_19;
      case 3u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        a1[1] = a2[1];
        v16 = a2[2];
        a1[2] = v16;
        a1[3] = a2[3];
        v17 = a2[4];
        a1[4] = v17;
        a1[5] = a2[5];
        v18 = a2[6];
        a1[6] = v18;
        v19 = *(_OWORD *)(a2 + 7);
        *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
        *(_OWORD *)(a1 + 7) = v19;
        v20 = a2[11];
        a1[11] = v20;
        swift_bridgeObjectRetain(v16);
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        v9 = a1;
        v10 = a3;
        v11 = 3;
        goto LABEL_19;
      case 4u:
        v21 = type metadata accessor for URL(0);
        v22 = *(_QWORD *)(v21 - 8);
        v83 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v22 + 48);
        if (((unsigned int (*)(_QWORD *, uint64_t, uint64_t))v83)(a2, 1, v21))
        {
          v23 = sub_319AC((uint64_t *)&unk_3B8C50);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v22 + 16))(a1, a2, v21);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(a1, 0, 1, v21);
        }
        v28 = (int *)type metadata accessor for ContentMessage.ExpandedContent(0);
        v29 = v28[5];
        v30 = (_QWORD *)((char *)a1 + v29);
        v31 = (_QWORD *)((char *)a2 + v29);
        *v30 = *v31;
        v32 = v31[1];
        v30[1] = v32;
        v33 = v28[6];
        v34 = (_QWORD *)((char *)a1 + v33);
        v35 = (_QWORD *)((char *)a2 + v33);
        *v34 = *v35;
        v36 = v35[1];
        v34[1] = v36;
        v37 = v28[7];
        v38 = (_QWORD *)((char *)a1 + v37);
        v39 = (_QWORD *)((char *)a2 + v37);
        *v38 = *v39;
        v40 = v39[1];
        v38[1] = v40;
        v41 = v28[8];
        v42 = (char *)a1 + v41;
        v43 = (char *)a2 + v41;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v36);
        v44 = swift_bridgeObjectRetain(v40);
        if (v83(v43, 1, v21, v44))
        {
          v45 = sub_319AC((uint64_t *)&unk_3B8C50);
          memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v42, v43, v21);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v42, 0, 1, v21);
        }
        *(_OWORD *)((char *)a1 + v28[9]) = *(_OWORD *)((char *)a2 + v28[9]);
        *(_QWORD *)((char *)a1 + v28[10]) = *(_QWORD *)((char *)a2 + v28[10]);
        v72 = v28[11];
        v73 = (_QWORD *)((char *)a1 + v72);
        v74 = (_QWORD *)((char *)a2 + v72);
        *v73 = *v74;
        v75 = v74[1];
        v73[1] = v75;
        v76 = v28[12];
        v77 = (_QWORD *)((char *)a1 + v76);
        v78 = (_QWORD *)((char *)a2 + v76);
        *v77 = *v78;
        v79 = v78[1];
        v77[1] = v79;
        v80 = v28[13];
        v81 = *(_QWORD *)((char *)a2 + v80);
        *(_QWORD *)((char *)a1 + v80) = v81;
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v81);
        v9 = a1;
        v10 = a3;
        v11 = 4;
        goto LABEL_19;
      case 5u:
        v24 = type metadata accessor for URL(0);
        v25 = *(_QWORD *)(v24 - 8);
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v25 + 48))(a2, 1, v24))
        {
          v26 = sub_319AC((uint64_t *)&unk_3B8C50);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v25 + 16))(a1, a2, v24);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(a1, 0, 1, v24);
        }
        v46 = (int *)type metadata accessor for ContentMessage.Footnote(0);
        v47 = v46[5];
        v48 = (_QWORD *)((char *)a1 + v47);
        v49 = (_QWORD *)((char *)a2 + v47);
        *v48 = *v49;
        v50 = v49[1];
        v48[1] = v50;
        v51 = v46[6];
        v52 = (_QWORD *)((char *)a1 + v51);
        v53 = (_QWORD *)((char *)a2 + v51);
        *v52 = *v53;
        v54 = v53[1];
        v52[1] = v54;
        v55 = v46[7];
        v56 = (_QWORD *)((char *)a1 + v55);
        v57 = (_QWORD *)((char *)a2 + v55);
        *v56 = *v57;
        v58 = v57[1];
        v56[1] = v58;
        v59 = v46[8];
        v60 = (_QWORD *)((char *)a1 + v59);
        v61 = (_QWORD *)((char *)a2 + v59);
        *v60 = *v61;
        v62 = v61[1];
        v60[1] = v62;
        v63 = v46[9];
        v64 = (char *)a1 + v63;
        v65 = (char *)a2 + v63;
        v66 = v65[8];
        *(_QWORD *)v64 = *(_QWORD *)v65;
        v64[8] = v66;
        v67 = v46[10];
        v68 = (char *)a1 + v67;
        v69 = (char *)a2 + v67;
        v70 = *(_QWORD *)v69;
        *(_QWORD *)v68 = *(_QWORD *)v69;
        v71 = *(_OWORD *)(v69 + 8);
        *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
        *(_OWORD *)(v68 + 8) = v71;
        swift_bridgeObjectRetain(v50);
        swift_bridgeObjectRetain(v54);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v62);
        swift_unknownObjectRetain(v70);
        v9 = a1;
        v10 = a3;
        v11 = 5;
        goto LABEL_19;
      case 7u:
        *a1 = *a2;
        v27 = a2[1];
        a1[1] = v27;
        swift_bridgeObjectRetain(v27);
        v9 = a1;
        v10 = a3;
        v11 = 7;
LABEL_19:
        swift_storeEnumTagMultiPayload(v9, v10, v11);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *initializeWithTake for ContentMessage(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 5)
  {
    v11 = type metadata accessor for URL(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
    {
      v13 = sub_319AC((uint64_t *)&unk_3B8C50);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(a1, a2, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
    }
    v19 = (int *)type metadata accessor for ContentMessage.Footnote(0);
    *(_OWORD *)&a1[v19[5]] = *(_OWORD *)&a2[v19[5]];
    *(_OWORD *)&a1[v19[6]] = *(_OWORD *)&a2[v19[6]];
    *(_OWORD *)&a1[v19[7]] = *(_OWORD *)&a2[v19[7]];
    *(_OWORD *)&a1[v19[8]] = *(_OWORD *)&a2[v19[8]];
    v20 = v19[9];
    v21 = &a1[v20];
    v22 = &a2[v20];
    *(_QWORD *)v21 = *(_QWORD *)v22;
    v21[8] = v22[8];
    v23 = v19[10];
    v24 = &a1[v23];
    v25 = &a2[v23];
    v26 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v26;
    *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
    v27 = a1;
    v28 = a3;
    v29 = 5;
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload == 4)
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_319AC((uint64_t *)&unk_3B8C50);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v14 = (int *)type metadata accessor for ContentMessage.ExpandedContent(0);
    *(_OWORD *)&a1[v14[5]] = *(_OWORD *)&a2[v14[5]];
    *(_OWORD *)&a1[v14[6]] = *(_OWORD *)&a2[v14[6]];
    *(_OWORD *)&a1[v14[7]] = *(_OWORD *)&a2[v14[7]];
    v15 = v14[8];
    v16 = &a1[v15];
    v17 = &a2[v15];
    if (v9(&a2[v15], 1, v7))
    {
      v18 = sub_319AC((uint64_t *)&unk_3B8C50);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v17, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    }
    *(_OWORD *)&a1[v14[9]] = *(_OWORD *)&a2[v14[9]];
    *(_QWORD *)&a1[v14[10]] = *(_QWORD *)&a2[v14[10]];
    *(_OWORD *)&a1[v14[11]] = *(_OWORD *)&a2[v14[11]];
    *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
    *(_QWORD *)&a1[v14[13]] = *(_QWORD *)&a2[v14[13]];
    v27 = a1;
    v28 = a3;
    v29 = 4;
LABEL_15:
    swift_storeEnumTagMultiPayload(v27, v28, v29);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ContentMessage(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 != a2)
  {
    sub_BA58C((uint64_t)a1, type metadata accessor for ContentMessage);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 5)
    {
      v11 = type metadata accessor for URL(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
      {
        v13 = sub_319AC((uint64_t *)&unk_3B8C50);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(a1, a2, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
      }
      v19 = (int *)type metadata accessor for ContentMessage.Footnote(0);
      *(_OWORD *)&a1[v19[5]] = *(_OWORD *)&a2[v19[5]];
      *(_OWORD *)&a1[v19[6]] = *(_OWORD *)&a2[v19[6]];
      *(_OWORD *)&a1[v19[7]] = *(_OWORD *)&a2[v19[7]];
      *(_OWORD *)&a1[v19[8]] = *(_OWORD *)&a2[v19[8]];
      v20 = v19[9];
      v21 = &a1[v20];
      v22 = &a2[v20];
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      v23 = v19[10];
      v24 = &a1[v23];
      v25 = &a2[v23];
      v26 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v26;
      *((_QWORD *)v24 + 4) = *((_QWORD *)v25 + 4);
      v27 = a1;
      v28 = a3;
      v29 = 5;
      goto LABEL_16;
    }
    if (EnumCaseMultiPayload == 4)
    {
      v7 = type metadata accessor for URL(0);
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
      if (v9(a2, 1, v7))
      {
        v10 = sub_319AC((uint64_t *)&unk_3B8C50);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a1, a2, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
      v14 = (int *)type metadata accessor for ContentMessage.ExpandedContent(0);
      *(_OWORD *)&a1[v14[5]] = *(_OWORD *)&a2[v14[5]];
      *(_OWORD *)&a1[v14[6]] = *(_OWORD *)&a2[v14[6]];
      *(_OWORD *)&a1[v14[7]] = *(_OWORD *)&a2[v14[7]];
      v15 = v14[8];
      v16 = &a1[v15];
      v17 = &a2[v15];
      if (v9(&a2[v15], 1, v7))
      {
        v18 = sub_319AC((uint64_t *)&unk_3B8C50);
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v17, v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
      }
      *(_OWORD *)&a1[v14[9]] = *(_OWORD *)&a2[v14[9]];
      *(_QWORD *)&a1[v14[10]] = *(_QWORD *)&a2[v14[10]];
      *(_OWORD *)&a1[v14[11]] = *(_OWORD *)&a2[v14[11]];
      *(_OWORD *)&a1[v14[12]] = *(_OWORD *)&a2[v14[12]];
      *(_QWORD *)&a1[v14[13]] = *(_QWORD *)&a2[v14[13]];
      v27 = a1;
      v28 = a3;
      v29 = 4;
LABEL_16:
      swift_storeEnumTagMultiPayload(v27, v28, v29);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for ContentMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_BBDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_BBDB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v5[0] = &unk_2EA0A0;
  v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[2] = &unk_2EA0B8;
  v5[3] = &unk_2EA0D0;
  result = type metadata accessor for ContentMessage.ExpandedContent(319);
  if (v3 <= 0x3F)
  {
    v5[4] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ContentMessage.Footnote(319);
    if (v4 <= 0x3F)
    {
      v5[5] = *(_QWORD *)(result - 8) + 64;
      v5[6] = &unk_2EA0E8;
      v5[7] = &unk_2EA100;
      swift_initEnumMetadataMultiPayload(a1, 256, 8, v5);
      return 0;
    }
  }
  return result;
}

uint64_t destroy for ContentMessage.ReadAloud(uint64_t a1)
{
  return sub_BA53C(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for ContentMessage.ReadAloud(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  sub_BAB8C(v3, v4, v5);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for ContentMessage.ReadAloud(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  sub_BAB8C(v3, v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  sub_BA53C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ContentMessage.ReadAloud(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = v3;
  sub_BA53C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentMessage.ReadAloud(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentMessage.ReadAloud(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentMessage.ReadAloud()
{
  return &type metadata for ContentMessage.ReadAloud;
}

uint64_t destroy for ContentMessage.CFIUpdate(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[11]);
}

uint64_t initializeWithCopy for ContentMessage.CFIUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for ContentMessage.CFIUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

__n128 initializeWithTake for ContentMessage.CFIUpdate(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for ContentMessage.CFIUpdate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentMessage.CFIUpdate(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentMessage.CFIUpdate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentMessage.CFIUpdate()
{
  return &type metadata for ContentMessage.CFIUpdate;
}

uint64_t storeEnumTagSinglePayload for ContentMessage.CFIUpdate.Event(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_BC334 + 4 * byte_2E9D81[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_BC368 + 4 * byte_2E9D7C[v4]))();
}

uint64_t sub_BC368(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BC370(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xBC378);
  return result;
}

uint64_t sub_BC384(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xBC38CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_BC390(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BC398(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentMessage.CFIUpdate.Event()
{
  return &type metadata for ContentMessage.CFIUpdate.Event;
}

uint64_t destroy for ContentMessage.Selection(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t initializeWithCopy for ContentMessage.Selection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for ContentMessage.Selection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for ContentMessage.Selection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentMessage.Selection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentMessage.Selection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentMessage.Selection()
{
  return &type metadata for ContentMessage.Selection;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContentMessage.ExpandedContent(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_319AC((uint64_t *)&unk_3B8C50);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = a3[5];
    v13 = a3[6];
    v14 = (uint64_t *)((char *)a1 + v12);
    v15 = (uint64_t *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (uint64_t *)((char *)a1 + v13);
    v18 = (uint64_t *)((char *)a2 + v13);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = a3[7];
    v21 = a3[8];
    v22 = (uint64_t *)((char *)a1 + v20);
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    v25 = (char *)a1 + v21;
    v26 = (char *)a2 + v21;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
    v27 = swift_bridgeObjectRetain(v24);
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v9)(v26, 1, v7, v27))
    {
      v28 = sub_319AC((uint64_t *)&unk_3B8C50);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v25, v26, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v25, 0, 1, v7);
    }
    v29 = a3[10];
    *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v29) = *(uint64_t *)((char *)a2 + v29);
    v30 = a3[11];
    v31 = a3[12];
    v32 = (uint64_t *)((char *)a1 + v30);
    v33 = (uint64_t *)((char *)a2 + v30);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    v35 = (uint64_t *)((char *)a1 + v31);
    v36 = (uint64_t *)((char *)a2 + v31);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = a3[13];
    v39 = *(uint64_t *)((char *)a2 + v38);
    *(uint64_t *)((char *)a1 + v38) = v39;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t destroy for ContentMessage.ExpandedContent(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  v7 = a1 + a2[8];
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13]));
}

char *initializeWithCopy for ContentMessage.ExpandedContent(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = a3[6];
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *((_QWORD *)v12 + 1) = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  v17 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  *((_QWORD *)v15 + 1) = v17;
  v18 = a3[7];
  v19 = a3[8];
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  v23 = &a1[v19];
  v24 = &a2[v19];
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  v25 = swift_bridgeObjectRetain(v22);
  if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v8)(v24, 1, v6, v25))
  {
    v26 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v23, v24, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v6);
  }
  v27 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v27] = *(_QWORD *)&a2[v27];
  v28 = a3[11];
  v29 = a3[12];
  v30 = &a1[v28];
  v31 = &a2[v28];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  v33 = &a1[v29];
  v34 = &a2[v29];
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = v35;
  v36 = a3[13];
  v37 = *(_QWORD *)&a2[v36];
  *(_QWORD *)&a1[v36] = v37;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v37);
  return a1;
}

char *assignWithCopy for ContentMessage.ExpandedContent(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v16 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  v21 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v26 = *((_QWORD *)v23 + 1);
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRetain(v25);
  v27 = swift_bridgeObjectRelease(v26);
  v28 = a3[8];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v8)(&a1[v28], 1, v6, v27);
  v32 = v8(v30, 1, v6);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v29, v30, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v29, v6);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v33 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v29, v30, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v29, 0, 1, v6);
LABEL_13:
  v34 = a3[9];
  v35 = &a1[v34];
  v36 = &a2[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
  *(_QWORD *)&a1[a3[10]] = *(_QWORD *)&a2[a3[10]];
  v37 = a3[11];
  v38 = &a1[v37];
  v39 = &a2[v37];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v40 = *((_QWORD *)v39 + 1);
  v41 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v38 + 1) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[12];
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)v44;
  v45 = *((_QWORD *)v44 + 1);
  v46 = *((_QWORD *)v43 + 1);
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  v47 = a3[13];
  v48 = *(_QWORD *)&a1[v47];
  v49 = *(_QWORD *)&a2[v47];
  *(_QWORD *)&a1[v47] = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v48);
  return a1;
}

char *initializeWithTake for ContentMessage.ExpandedContent(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if (v8(&a2[v11], 1, v6))
  {
    v14 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v13, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  v15 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  v16 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  return a1;
}

char *assignWithTake for ContentMessage.ExpandedContent(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  v23 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  v30 = swift_bridgeObjectRelease(v29);
  v31 = a3[8];
  v32 = &a1[v31];
  v33 = &a2[v31];
  v34 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v8)(&a1[v31], 1, v6, v30);
  v35 = v8(v33, 1, v6);
  if (!v34)
  {
    if (!v35)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v32, v33, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v32, v6);
    goto LABEL_12;
  }
  if (v35)
  {
LABEL_12:
    v36 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v32, v33, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v32, 0, 1, v6);
LABEL_13:
  v37 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v37] = *(_QWORD *)&a2[v37];
  v38 = a3[11];
  v39 = &a1[v38];
  v40 = &a2[v38];
  v42 = *(_QWORD *)v40;
  v41 = *((_QWORD *)v40 + 1);
  v43 = *((_QWORD *)v39 + 1);
  *(_QWORD *)v39 = v42;
  *((_QWORD *)v39 + 1) = v41;
  swift_bridgeObjectRelease(v43);
  v44 = a3[12];
  v45 = &a1[v44];
  v46 = &a2[v44];
  v48 = *(_QWORD *)v46;
  v47 = *((_QWORD *)v46 + 1);
  v49 = *((_QWORD *)v45 + 1);
  *(_QWORD *)v45 = v48;
  *((_QWORD *)v45 + 1) = v47;
  swift_bridgeObjectRelease(v49);
  v50 = a3[13];
  v51 = *(_QWORD *)&a1[v50];
  *(_QWORD *)&a1[v50] = *(_QWORD *)&a2[v50];
  swift_bridgeObjectRelease(v51);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentMessage.ExpandedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BD1B0);
}

uint64_t storeEnumTagSinglePayload for ContentMessage.ExpandedContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BD1C0);
}

void sub_BD1C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  sub_51F74(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_2EA188;
    v4[2] = &unk_2EA188;
    v4[3] = &unk_2EA188;
    v4[4] = v4[0];
    v4[5] = &unk_2EA1A0;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_2EA188;
    v4[8] = &unk_2EA188;
    v4[9] = &unk_2EA1B8;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ContentMessage.Footnote(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_319AC((uint64_t *)&unk_3B8C50);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[7];
    v20 = a3[8];
    v21 = (uint64_t *)((char *)a1 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (uint64_t *)((char *)a1 + v20);
    v25 = (uint64_t *)((char *)a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    v27 = a3[9];
    v28 = a3[10];
    v29 = (char *)a1 + v27;
    v30 = (char *)a2 + v27;
    *(_QWORD *)v29 = *(_QWORD *)v30;
    v29[8] = v30[8];
    v31 = (char *)a1 + v28;
    v32 = (char *)a2 + v28;
    v33 = *(_QWORD *)v32;
    *(_QWORD *)v31 = *(_QWORD *)v32;
    *(_OWORD *)(v31 + 8) = *(_OWORD *)(v32 + 8);
    *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v26);
    swift_unknownObjectRetain(v33);
  }
  return a1;
}

double destroy for ContentMessage.Footnote(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  double result;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  *(_QWORD *)&result = swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[10])).n128_u64[0];
  return result;
}

char *initializeWithCopy for ContentMessage.Footnote(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = a3[7];
  v18 = a3[8];
  v19 = &a1[v17];
  v20 = &a2[v17];
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = v21;
  v22 = &a1[v18];
  v23 = &a2[v18];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  v25 = a3[9];
  v26 = a3[10];
  v27 = &a1[v25];
  v28 = &a2[v25];
  *(_QWORD *)v27 = *(_QWORD *)v28;
  v27[8] = v28[8];
  v29 = &a1[v26];
  v30 = &a2[v26];
  v31 = *(_QWORD *)v30;
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_OWORD *)(v29 + 8) = *(_OWORD *)(v30 + 8);
  *(_OWORD *)(v29 + 24) = *(_OWORD *)(v30 + 24);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  swift_unknownObjectRetain(v31);
  return a1;
}

char *assignWithCopy for ContentMessage.Footnote(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v16 = *((_QWORD *)v13 + 1);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *(_QWORD *)v18 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  v21 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v18 + 1) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  v26 = *((_QWORD *)v23 + 1);
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[8];
  v28 = &a1[v27];
  v29 = &a2[v27];
  *(_QWORD *)v28 = *(_QWORD *)v29;
  v30 = *((_QWORD *)v29 + 1);
  v31 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v28 + 1) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[9];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v35 = *(_QWORD *)v34;
  v33[8] = v34[8];
  *(_QWORD *)v33 = v35;
  v36 = a3[10];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = *(_QWORD *)&a2[v36];
  v40 = *(_QWORD *)&a1[v36];
  *(_QWORD *)&a1[v36] = v39;
  swift_unknownObjectRetain(v39);
  swift_unknownObjectRelease(v40);
  *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
  *((_QWORD *)v37 + 2) = *((_QWORD *)v38 + 2);
  *((_QWORD *)v37 + 3) = *((_QWORD *)v38 + 3);
  *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
  return a1;
}

char *initializeWithTake for ContentMessage.Footnote(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[9];
  v12 = a3[10];
  v13 = &a1[v11];
  v14 = &a2[v11];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v13[8] = v14[8];
  v15 = &a1[v12];
  v16 = &a2[v12];
  *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
  v17 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v17;
  return a1;
}

char *assignWithTake for ContentMessage.Footnote(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_319AC((uint64_t *)&unk_3B8C50);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  v17 = *((_QWORD *)v13 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v22 = *(_QWORD *)v20;
  v21 = *((_QWORD *)v20 + 1);
  v23 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v19 = v22;
  *((_QWORD *)v19 + 1) = v21;
  swift_bridgeObjectRelease(v23);
  v24 = a3[7];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v28 = *(_QWORD *)v26;
  v27 = *((_QWORD *)v26 + 1);
  v29 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v25 = v28;
  *((_QWORD *)v25 + 1) = v27;
  swift_bridgeObjectRelease(v29);
  v30 = a3[8];
  v31 = &a1[v30];
  v32 = &a2[v30];
  v34 = *(_QWORD *)v32;
  v33 = *((_QWORD *)v32 + 1);
  v35 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease(v35);
  v36 = a3[9];
  v37 = a3[10];
  v38 = &a1[v36];
  v39 = &a2[v36];
  *(_QWORD *)v38 = *(_QWORD *)v39;
  v38[8] = v39[8];
  v40 = &a1[v37];
  v41 = &a2[v37];
  v42 = *(_QWORD *)&a1[v37];
  *(_QWORD *)&a1[v37] = *(_QWORD *)v41;
  swift_unknownObjectRelease(v42);
  *(_OWORD *)(v40 + 8) = *(_OWORD *)(v41 + 8);
  *(_OWORD *)(v40 + 24) = *(_OWORD *)(v41 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentMessage.Footnote(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_BDAB8);
}

uint64_t sub_BDABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_319AC((uint64_t *)&unk_3B8C50);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentMessage.Footnote(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_BDB58);
}

uint64_t sub_BDB5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_319AC((uint64_t *)&unk_3B8C50);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

void sub_BDBDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  sub_51F74(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_2EA188;
    v4[2] = &unk_2EA188;
    v4[3] = &unk_2EA188;
    v4[4] = &unk_2EA188;
    v4[5] = "\t";
    v4[6] = &unk_2EA1F8;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
  }
}

uint64_t storeEnumTagSinglePayload for ContentMessage.Direction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_BDCB4 + 4 * byte_2E9D8B[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_BDCE8 + 4 * byte_2E9D86[v4]))();
}

uint64_t sub_BDCE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BDCF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xBDCF8);
  return result;
}

uint64_t sub_BDD04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xBDD0CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_BDD10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BDD18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentMessage.Direction()
{
  return &type metadata for ContentMessage.Direction;
}

uint64_t destroy for ContentMessage.ReadAloud.Payload(uint64_t a1)
{
  return sub_BA53C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s8BookEPUB14ContentMessageO9ReadAloudV7PayloadOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_BAB8C(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ContentMessage.ReadAloud.Payload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_BAB8C(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_BA53C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ContentMessage.ReadAloud.Payload(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_BA53C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ContentMessage.ReadAloud.Payload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentMessage.ReadAloud.Payload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_BDEB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_BDEBC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ContentMessage.ReadAloud.Payload()
{
  return &type metadata for ContentMessage.ReadAloud.Payload;
}

uint64_t storeEnumTagSinglePayload for ContentMessage.ReadAloud.Event(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_BDF24 + 4 * byte_2E9D95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_BDF58 + 4 * byte_2E9D90[v4]))();
}

uint64_t sub_BDF58(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BDF60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xBDF68);
  return result;
}

uint64_t sub_BDF74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xBDF7CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_BDF80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BDF88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentMessage.ReadAloud.Event()
{
  return &type metadata for ContentMessage.ReadAloud.Event;
}

unint64_t sub_BDFA8()
{
  unint64_t result;

  result = qword_3BA8A8;
  if (!qword_3BA8A8)
  {
    result = swift_getWitnessTable(&unk_2EA2AC, &type metadata for ContentMessage.ReadAloud.Event);
    atomic_store(result, (unint64_t *)&qword_3BA8A8);
  }
  return result;
}

unint64_t sub_BDFEC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3792C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xC)
    return 12;
  else
    return v3;
}

unint64_t sub_BE034(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_379408, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t getEnumTagSinglePayload for JSMessage(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for JSMessage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_BE158 + 4 * byte_2E9D9F[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_BE18C + 4 * byte_2E9D9A[v4]))();
}

uint64_t sub_BE18C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_BE194(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xBE19CLL);
  return result;
}

uint64_t sub_BE1A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xBE1B0);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_BE1B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_BE1BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for JSMessage()
{
  return &type metadata for JSMessage;
}

unint64_t sub_BE1DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BA8B0;
  if (!qword_3BA8B0)
  {
    v1 = sub_31A38(&qword_3BA8B8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_3BA8B0);
  }
  return result;
}

unint64_t sub_BE22C()
{
  unint64_t result;

  result = qword_3BA8C0;
  if (!qword_3BA8C0)
  {
    result = swift_getWitnessTable(&unk_2EA3E0, &type metadata for JSMessage);
    atomic_store(result, (unint64_t *)&qword_3BA8C0);
  }
  return result;
}

double PaginationLayoutConfiguration.fontSize.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void SearchResultLayoutManager.Configuration.width.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t Location.pageOffset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t SearchResultLayoutManager.Configuration.maximumLines.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

id SearchResultLayoutManager.Configuration.font.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void SearchResultLayoutManager.Configuration.font.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

void SearchResultLayoutManager.Configuration.boldFont.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = a1;
}

uint64_t SearchResultLayoutManager.Configuration.init(width:maximumLines:font:boldFont:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(double *)a4 = a5;
  *(_QWORD *)(a4 + 8) = result;
  *(_QWORD *)(a4 + 16) = a2;
  *(_QWORD *)(a4 + 24) = a3;
  return result;
}

uint64_t SearchResultLayoutManager.__allocating_init(configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 72);
  SearchResultLayoutManager.init(configuration:)(a1);
  return v3;
}

uint64_t SearchResultLayoutManager.init(configuration:)(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;

  v2 = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v1 + 24) = v3;
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(a1 + 16);
  v4 = objc_msgSend(objc_allocWithZone((Class)NSLayoutManager), "init");
  v5 = objc_msgSend(objc_allocWithZone((Class)NSTextContainer), "initWithSize:", v2, INFINITY);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSTextStorage), "init");
  objc_msgSend(v4, "addTextContainer:", v5);
  objc_msgSend(v6, "addLayoutManager:", v4);
  objc_msgSend(v5, "setLineFragmentPadding:", 0.0);
  objc_msgSend(v5, "setLineBreakMode:", 0);
  objc_msgSend(v5, "setMaximumNumberOfLines:", 0);
  *(_QWORD *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 56) = v6;
  *(_QWORD *)(v1 + 64) = v5;
  return v1;
}

double sub_BE448@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  NSString v13;
  id v14;
  void *v15;
  UIFont v16;
  UIFont v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  NSAttributedString v21;
  char *v22;
  uint64_t v23;
  double result;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v8 = a1[3];
  v9 = a1[4];
  v10 = a1[5];
  if (*(double *)(v3 + 16) <= 0.0 || *(uint64_t *)(v3 + 24) < 1)
  {
    *a2 = v6;
    a2[1] = v5;
    a2[2] = v7;
    a2[3] = v8;
    a2[4] = v9;
    a2[5] = v10;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)&result = swift_bridgeObjectRetain(v10).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&v28 = v6;
    *((_QWORD *)&v28 + 1) = v5;
    v29 = *((_OWORD *)a1 + 1);
    v30 = a1[4];
    v31 = a1[5];
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v10);
    v11 = BookEPUBBundle();
    v12 = String._bridgeToObjectiveC()();
    v13 = String._bridgeToObjectiveC()();
    v14 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, v13, 0);

    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v27 = v15;

    v16.super.isa = *(Class *)(v3 + 32);
    v17.super.isa = *(Class *)(v3 + 40);
    v18 = 5;
    v19 = *(void **)(v3 + 56);
    while (1)
    {
      v20 = v18;
      swift_bridgeObjectRetain(*((_QWORD *)&v28 + 1));
      swift_bridgeObjectRetain(*((_QWORD *)&v29 + 1));
      swift_bridgeObjectRetain(v31);
      v21.super.isa = SearchPassage.attributedText(font:boldFont:)(v16, v17).super.isa;
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(*((_QWORD *)&v29 + 1));
      objc_msgSend(v19, "setAttributedString:", v21.super.isa, swift_bridgeObjectRelease(*((_QWORD *)&v28 + 1)).n128_f64[0]);
      v22 = sub_BE678();
      if ((uint64_t)v22 < 1)
        break;
      if ((uint64_t)v22 <= 4)
        v22 = (char *)&dword_4;
      v23 = sub_105CA0((uint64_t)v22, v26, v27);

      if (!v23)
      {
        v18 = v20 - 1;
        if (v20)
          continue;
      }
      goto LABEL_12;
    }

LABEL_12:
    swift_bridgeObjectRelease(v27);
    result = *(double *)&v28;
    *(_OWORD *)a2 = v28;
    *((_OWORD *)a2 + 1) = v29;
    a2[4] = v30;
    a2[5] = v31;
  }
  return result;
}

char *sub_BE678()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  char *result;
  char *v6;
  void *v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v1 = (double)*(uint64_t *)(v0 + 24);
  objc_msgSend(*(id *)(v0 + 32), "lineHeight");
  v3 = 0.0 - *(double *)(v0 + 16);
  if (v3 < INFINITY)
    *(_QWORD *)&v3 = ((COERCE__INT64(0.0 - *(double *)(v0 + 16)) >> 63) | 1) + COERCE__INT64(0.0 - *(double *)(v0 + 16));
  v4 = 0.0 - v2 * v1;
  if (v4 < INFINITY)
    *(_QWORD *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
  result = (char *)objc_msgSend(*(id *)(v0 + 48), "characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:", *(_QWORD *)(v0 + 64), 0, -v3, -v4);
  v6 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(void **)(v0 + 56);
  result = (char *)objc_msgSend(v7, "length");
  v8 = (char *)(result - v6);
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
    return result;
  }
  v9 = objc_msgSend(v7, "string");
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v13 = Range<>.init(_:in:)(v6, v8, v10, v12);
  if ((v14 & 1) != 0)
    v15 = 0;
  else
    v15 = String.distance(from:to:)(v13);
  swift_bridgeObjectRelease(v12);
  return (char *)v15;
}

uint64_t SearchResultLayoutManager.deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);

  return v0;
}

uint64_t SearchResultLayoutManager.__deallocating_deinit()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 32);

  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t _s8BookEPUB25SearchResultLayoutManagerC13ConfigurationV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(double *)a1 == *(double *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (v2
    && (v4 = *(_QWORD *)(a2 + 16),
        v3 = *(_QWORD *)(a2 + 24),
        v6 = *(_QWORD *)(a1 + 16),
        v5 = *(_QWORD *)(a1 + 24),
        sub_BEAC0(),
        (static NSObject.== infix(_:_:)(v6, v4) & 1) != 0))
  {
    return static NSObject.== infix(_:_:)(v5, v3) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t type metadata accessor for SearchResultLayoutManager()
{
  return objc_opt_self(_TtC8BookEPUB25SearchResultLayoutManager);
}

uint64_t method lookup function for SearchResultLayoutManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SearchResultLayoutManager);
}

uint64_t dispatch thunk of SearchResultLayoutManager.__allocating_init(configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of SearchResultLayoutManager.generateResult(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

void destroy for SearchResultLayoutManager.Configuration(uint64_t a1)
{

}

uint64_t initializeWithCopy for SearchResultLayoutManager.Configuration(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = v3;
  v6 = v4;
  return a1;
}

_QWORD *assignWithCopy for SearchResultLayoutManager.Configuration(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (void *)a2[2];
  v5 = (void *)a1[2];
  a1[2] = v4;
  v6 = v4;

  v7 = (void *)a2[3];
  v8 = (void *)a1[3];
  a1[3] = v7;
  v9 = v7;

  return a1;
}

uint64_t assignWithTake for SearchResultLayoutManager.Configuration(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for SearchResultLayoutManager.Configuration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchResultLayoutManager.Configuration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchResultLayoutManager.Configuration()
{
  return &type metadata for SearchResultLayoutManager.Configuration;
}

unint64_t sub_BEAC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B5C30;
  if (!qword_3B5C30)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B5C30);
  }
  return result;
}

void ContentLoaderViewReusePool.doneWith(contentViewHost:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  _BYTE v12[24];

  v11[2] = a1;
  swift_beginAccess(v1 + 32, v12, 33, 0);
  v3 = sub_85F84((uint64_t (*)(uint64_t *))sub_85F68, (uint64_t)v11);
  v4 = v3;
  v5 = *(_QWORD *)(v1 + 32);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v10 = *(_QWORD *)(v1 + 32);
    else
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 32));
    v6 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
    if (v6 >= v4)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
    if (v6 >= v3)
    {
LABEL_3:
      sub_86880(v4, v6);
      swift_endAccess(v12);
      v7 = a1[3];
      v8 = a1[4];
      sub_472D0(a1, v7);
      v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
      sub_BFC34(v9);

      return;
    }
  }
  __break(1u);
}

uint64_t ContentLoaderViewReusePool.requestContentViewHost(document:updatePlaceholder:updateContentView:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t ObjectType;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 aBlock;
  void (*v60)(uint64_t, void *);
  void *v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  char v64[24];

  v6 = v5;
  v57 = a2;
  v58 = a4;
  v10 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v10);
  v55 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_49F1C((uint64_t)a1, (uint64_t)&aBlock);
  v12 = v6[14];
  v13 = v6[11];
  v14 = v6[6];
  v56 = v6[5];
  v15 = type metadata accessor for ContentViewHost(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48));
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(v12);
  swift_retain();
  v17 = swift_retain();
  UUID.init()(v17);
  v18 = (_QWORD *)(v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_contentView);
  *v18 = 0;
  v18[1] = 0;
  v19 = v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_layoutProvider;
  *(_QWORD *)(v19 + 8) = 0;
  swift_unknownObjectWeakInit(v19, 0);
  v20 = v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_stylesheetProvider;
  swift_weakInit(v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_stylesheetProvider, 0);
  *(_QWORD *)(v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost____lazy_storage___placeholderView) = 1;
  sub_3F1CC(&aBlock, v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document);
  *(_BYTE *)(v16 + 16) = 0;
  v21 = (_BYTE *)(v16 + 16);
  v22 = (_QWORD *)(v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_updatePlaceholder);
  *v22 = v57;
  v22[1] = a3;
  v23 = (_QWORD *)(v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_updateContentView);
  *v23 = v58;
  v23[1] = a5;
  swift_weakAssign(v20, v13);
  v24 = (_QWORD *)(v16 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_reloadAction);
  *v24 = v56;
  v24[1] = v14;
  swift_unknownObjectRelease(v12);
  v25 = (uint64_t)a1;
  swift_release();
  v26 = a1[3];
  v27 = a1[4];
  sub_472D0(a1, v26);
  (*(void (**)(uint64_t, uint64_t))(v27 + 40))(v26, v27);
  v28 = sub_C62E0();
  if (v28)
  {
    v30 = v28;
    v31 = v29;
    ObjectType = swift_getObjectType(v28);
    sub_C5560(v30, v16, (uint64_t)v6, ObjectType, v31);

  }
  else
  {
    v33 = (uint64_t)v55;
    sub_17BE34();
    v34 = v6[17];
    if (v34 > 9)
    {
      swift_beginAccess(v16 + 16, &aBlock, 1, 0);
      if (*v21 == 1)
      {
        v64[0] = 2;
        sub_17B314();
        *(_BYTE *)(v16 + 16) = 2;
      }
      else
      {
        v64[0] = 2;
        sub_17BF00(v64);
      }
      swift_beginAccess(v6 + 4, v64, 33, 0);
      v49 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
      v51 = *(_QWORD *)((char *)&dword_10 + (v6[4] & 0xFFFFFFFFFFFFFF8));
      v50 = *(_QWORD *)((char *)&dword_18 + (v6[4] & 0xFFFFFFFFFFFFFF8));
      if (v51 >= v50 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
      v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v16);
      specialized Array._endMutation()(v52);
      swift_endAccess(v64);
    }
    else
    {
      v6[17] = v34 + 1;
      swift_beginAccess(v16 + 16, v64, 1, 0);
      if (*v21 > 2u)
      {
        LOBYTE(aBlock) = 3;
        sub_17BF00((char *)&aBlock);
      }
      else
      {
        LOBYTE(aBlock) = 3;
        sub_17B314();
        *(_BYTE *)(v16 + 16) = 3;
      }
      v35 = (void *)objc_opt_self(NSTimer);
      v36 = swift_allocObject(&unk_37F3F0, 24);
      swift_weakInit(v36 + 16, v6);
      v37 = swift_allocObject(&unk_37F418, 24);
      swift_weakInit(v37 + 16, v16);
      v38 = swift_allocObject(&unk_37F440, 32);
      *(_QWORD *)(v38 + 16) = v36;
      *(_QWORD *)(v38 + 24) = v37;
      v62 = sub_C68D0;
      v63 = v38;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v60 = sub_51504;
      v61 = &unk_37F458;
      v39 = _Block_copy(&aBlock);
      swift_release();
      v40 = objc_msgSend(v35, "scheduledTimerWithTimeInterval:repeats:block:", 0, v39, 4.0);
      _Block_release(v39);
      v41 = swift_allocObject(&unk_37F418, 24);
      swift_weakInit(v41 + 16, v16);
      v42 = (_QWORD *)swift_allocObject(&unk_37F490, 40);
      v42[2] = v40;
      v42[3] = v41;
      v42[4] = v6;
      v43 = v40;
      swift_retain();
      v44 = swift_retain();
      static TaskPriority.userInitiated.getter(v44);
      v45 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v33, 0, 1, v45);
      sub_49F1C(v25, (uint64_t)&aBlock);
      type metadata accessor for MainActor(0);
      swift_retain();
      v46 = swift_retain();
      v47 = static MainActor.shared.getter(v46);
      v48 = (_QWORD *)swift_allocObject(&unk_37F4B8, 112);
      v48[2] = v47;
      v48[3] = &protocol witness table for MainActor;
      v48[4] = v6;
      sub_3F1CC(&aBlock, (uint64_t)(v48 + 5));
      v48[10] = sub_C6924;
      v48[11] = v42;
      v48[12] = 0x746E65746E6F63;
      v48[13] = 0xE700000000000000;
      sub_6057C(v33, (uint64_t)&unk_3BA9B8, (uint64_t)v48);
      swift_release();
      swift_release();

      swift_release();
    }
  }
  return v16;
}

void ContentLoaderViewReusePool.configuration(forDocument:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t (*v9)(__n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(__n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double (*v28)(uint64_t, uint64_t, __n128);
  __n128 v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v3 = v2;
  v6 = v2[10];
  ObjectType = swift_getObjectType(v2[9]);
  v8 = v2[14];
  swift_getObjectType(v8);
  v9 = *(uint64_t (**)(__n128))(v6 + 136);
  v10 = swift_unknownObjectRetain(v8);
  v34 = v9(v10);
  swift_unknownObjectRelease(v8);
  v11 = a1[3];
  v12 = a1[4];
  sub_472D0(a1, v11);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 96))(v35, v11, v12);
  v13 = v36;
  v14 = v37;
  v15 = sub_472D0(v35, v36);
  v16 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 152))(v15, v13, v14, ObjectType, v6);
  sub_34488(v35);
  v17 = v3[14];
  swift_getObjectType(v17);
  v18 = *(uint64_t (**)(__n128))(v6 + 144);
  v19 = swift_unknownObjectRetain(v17);
  v20 = v18(v19);
  swift_unknownObjectRelease(v17);
  v21 = v3[11];
  KeyPath = swift_getKeyPath(&unk_2EA4C8);
  swift_getKeyPath(&unk_2EA4F0);
  static Published.subscript.getter(v35, v21, KeyPath);
  swift_release();
  swift_release();
  v23 = v35[0];
  v24 = *(_QWORD *)(v21 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager);
  v25 = v3[14];
  v26 = v3[15];
  v27 = swift_getObjectType(v25);
  v28 = *(double (**)(uint64_t, uint64_t, __n128))(v26 + 48);
  swift_unknownObjectRetain(v24);
  v29 = swift_unknownObjectRetain(v25);
  v30 = v28(v27, v26, v29);
  v32 = v31;
  swift_unknownObjectRelease(v25);
  v33 = *((_BYTE *)v3 + 104);
  *(double *)a2 = v30;
  *(_QWORD *)(a2 + 8) = v32;
  *(_QWORD *)(a2 + 16) = v34;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v23;
  *(_QWORD *)(a2 + 48) = v24;
  *(_BYTE *)(a2 + 56) = v33;
}

uint64_t sub_BF388@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EA4C8);
  v5 = swift_getKeyPath(&unk_2EA4F0);
  static Published.subscript.getter(&v7, v3, KeyPath);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_BF404(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EA4C8);
  v5 = swift_getKeyPath(&unk_2EA4F0);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t sub_BF478()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3BA998);
  sub_555F0(v0, (uint64_t)qword_3BA998);
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v1 = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000000002C6E50, 0xD00000000000001ALL, 0x80000000002EA560);
  return Logger.init(_:)(v1);
}

uint64_t ContentLoaderViewReusePool.__allocating_init(contentType:imageFilterMode:lineGuideEnabled:paginatingService:layoutProvider:stylesheetProvider:contentBlockingRules:reloadAction:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v18;
  uint64_t ObjectType;

  v18 = swift_allocObject(v11, *(unsigned int *)(v11 + 48));
  ObjectType = swift_getObjectType(a4);
  return sub_C42D0(a1, a2, a3, a4, a6, a7, a8, a9, a10, a11, v18, ObjectType, a5);
}

uint64_t ContentLoaderViewReusePool.init(contentType:imageFilterMode:lineGuideEnabled:paginatingService:layoutProvider:stylesheetProvider:contentBlockingRules:reloadAction:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a4);
  return sub_C42D0(a1, a2, a3, a4, a6, a7, a8, a9, a10, a11, v11, ObjectType, a5);
}

uint64_t sub_BF65C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_BF688 + 4 * asc_2EA4B0[*v0]))(0x65676E616863, 0xE600000000000000);
}

uint64_t sub_BF688()
{
  return 1701667187;
}

uint64_t sub_BF698()
{
  return 0x726567676962;
}

uint64_t sub_BF6A8()
{
  return 0x72656C6C616D73;
}

void sub_BF6C0()
{
  uint64_t v0;
  Swift::String v1;
  char *v2;

  _StringGuts.grow(_:)(22);
  v1._countAndFlagsBits = 0x6E65764561746144;
  v1._object = (void *)0xEB00000000203A74;
  String.append(_:)(v1);
  v2 = (char *)sub_BF750
     + 4
     * byte_2EA4B4[*(unsigned __int8 *)(v0
                                      + *(int *)(type metadata accessor for ContentLoaderViewReusePool.DataEvent(0)
                                               + 20))];
  __asm { BR              X10 }
}

uint64_t sub_BF750()
{
  Swift::String v0;
  Swift::String v1;
  __n128 v2;
  uint64_t v4;

  v0._countAndFlagsBits = 1701667187;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xE400000000000000);
  v1._countAndFlagsBits = 0x203A656D697420;
  v1._object = (void *)0xE700000000000000;
  String.append(_:)(v1);
  v2.n128_f64[0] = ((double (*)(void))Date.timeIntervalSinceReferenceDate.getter)();
  Double.write<A>(to:)(&v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v2);
  return v4;
}

_QWORD *ContentLoaderViewReusePool.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[6]);
  swift_unknownObjectWeakDestroy(v0 + 7);
  swift_unknownObjectRelease(v0[9]);
  swift_release(v0[11]);
  swift_unknownObjectRelease(v0[14]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_log;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentLoadObservations));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeTimers));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_fontRegistrationObservations));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_dataGathering));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_lastStableSizes));
  return v0;
}

uint64_t ContentLoaderViewReusePool.__deallocating_deinit()
{
  uint64_t v0;

  ContentLoaderViewReusePool.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

Swift::Void __swiftcall ContentLoaderViewReusePool.registerBackgroundHostView(backgroundHostView:)(UIView backgroundHostView)
{
  uint64_t v1;

  swift_unknownObjectWeakAssign(v1 + 56, backgroundHostView.super.super.isa);
}

void sub_BF904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  _BYTE v29[24];
  uint64_t v30;
  char v31[24];

  v5 = sub_319AC(&qword_3BAD68);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v31, 0, 0);
  if (swift_weakLoadStrong(a2))
  {
    v8 = swift_retain_n(a3, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v30 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_beginAccess(a3 + 16, v29, 0, 0);
      Strong = swift_weakLoadStrong(a3 + 16);
      if (Strong)
      {
        v26 = v12;
        v14 = Strong + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_hostID;
        v15 = type metadata accessor for UUID(0);
        v27 = v9;
        v16 = v10;
        v17 = *(_QWORD *)(v15 - 8);
        v18 = v14;
        v12 = v26;
        (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v7, v18, v15);
        v19 = swift_release();
        v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v17 + 56);
        v10 = v16;
        v9 = v27;
        v20(v7, 0, 1, v15, v19);
      }
      else
      {
        v21 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 56))(v7, 1, 1, v21, v22);
      }
      v23 = String.init<A>(describing:)(v7, v5);
      v25 = v24;
      v28 = sub_33524(v23, v24, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v11 + 4);
      swift_release_n(a3);
      swift_bridgeObjectRelease(v25);
      _os_log_impl(&dword_0, v9, v10, "#viewHostState: Timeout creating contentView for contentViewHost:%s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_release_n(a3);
    }
    swift_release();

  }
}

void sub_BFB90(void *a1, uint64_t a2, id a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t ObjectType;
  _BYTE v10[24];

  v6 = a4 + 16;
  objc_msgSend(a3, "invalidate");
  swift_beginAccess(v6, v10, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    v8 = Strong;
    ObjectType = swift_getObjectType(a1);
    sub_17C894(a1, v8, ObjectType, a2);
    swift_release();
  }
  else
  {
    sub_BFC34(a1);
  }
}

void sub_BFC34(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;
  char v12;
  id v13;
  char v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  id v40;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  char v52[24];

  if (a1)
  {
    v2 = v1;
    v4 = objc_opt_self(WKWebView);
    v5 = swift_dynamicCastObjCClass(a1, v4);
    if (v5)
    {
      v6 = (void *)v5;
      swift_beginAccess(v1 + 16, v52, 0, 0);
      v7 = *(_QWORD *)(v1 + 16);
      v8 = *(_QWORD *)(v7 + 16);
      if (v8)
      {
        sub_34450(0, (unint64_t *)&qword_3B5C30, NSObject_ptr);
        v9 = a1;
        swift_bridgeObjectRetain(v7);
        v10 = 32;
        while (1)
        {
          v11 = *(id *)(v7 + v10);
          v12 = static NSObject.== infix(_:_:)(v11, v6);

          if ((v12 & 1) != 0)
            break;
          v10 += 16;
          if (!--v8)
          {
            swift_bridgeObjectRelease(v7);
            goto LABEL_9;
          }
        }
        swift_bridgeObjectRelease(v7);
        v14 = 1;
      }
      else
      {
        v13 = a1;
LABEL_9:
        v14 = 0;
      }
      v15 = a1;
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc(22, -1);
        v19 = swift_slowAlloc(64, -1);
        v49 = v19;
        *(_DWORD *)v18 = 136315394;
        v20 = WKWebView.shortDescription.getter();
        v22 = v21;
        v50 = sub_33524(v20, v21, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v18 + 4);

        *(_QWORD *)&v23 = swift_bridgeObjectRelease(v22).n128_u64[0];
        *(_WORD *)(v18 + 12) = 2080;
        v24 = objc_msgSend(v6, "scrollView", v23);
        objc_msgSend(v24, "contentSize");
        v26 = v25;
        v28 = v27;

        v50 = v26;
        v51[0] = v28;
        type metadata accessor for CGSize(0);
        v30 = String.init<A>(describing:)(&v50, v29);
        v32 = v31;
        v50 = sub_33524(v30, v31, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v18 + 14);

        swift_bridgeObjectRelease(v32);
        _os_log_impl(&dword_0, v16, v17, "#reuse doneWith: %s contentSize:%s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);
      }
      else
      {

      }
      v33 = v15;
      sub_C4464(v6, v2);

      if ((v14 & 1) != 0)
      {
        v35 = Logger.logObject.getter(v34);
        v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v37 = 0;
          _os_log_impl(&dword_0, v35, v36, "ContentView is already in the #reuse pool -- skipping reuse call", v37, 2u);
          swift_slowDealloc(v37, -1, -1);
        }

      }
      else
      {
        v38 = (_QWORD *)(v2 + 24);
        swift_beginAccess(v2 + 24, &v50, 33, 0);
        v39 = *(_QWORD **)(v2 + 24);
        v40 = v33;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
        *(_QWORD *)(v2 + 24) = v39;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v39 = sub_42CE0(0, v39[2] + 1, 1, v39);
          *v38 = v39;
        }
        v43 = v39[2];
        v42 = v39[3];
        if (v43 >= v42 >> 1)
        {
          v39 = sub_42CE0((_QWORD *)(v42 > 1), v43 + 1, 1, v39);
          *v38 = v39;
        }
        v39[2] = v43 + 1;
        v44 = &v39[2 * v43];
        v44[4] = v6;
        v44[5] = &protocol witness table for WKWebView;
        swift_endAccess(&v50);
        v45 = v40;
        sub_C47DC(v6, v2);

        objc_msgSend(v6, "be_preparingForReuse");
        v46 = swift_allocObject(&unk_37F3F0, 24);
        swift_weakInit(v46 + 16, v2);
        v47 = swift_allocObject(&unk_37F660, 32);
        *(_QWORD *)(v47 + 16) = v46;
        *(_QWORD *)(v47 + 24) = v6;
        v48 = v45;
        swift_retain();
        WKWebView.prepareForReuse(completion:)((uint8_t *)sub_C71B8, v47);

        swift_release();
        swift_release();
      }
    }
  }
}

BOOL sub_C00DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v3 = *a1 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document;
  swift_beginAccess(v3, v16, 0, 0);
  sub_49F1C(v3, (uint64_t)v17);
  v4 = v18;
  v5 = v19;
  sub_472D0(v17, v18);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
  v7 = a2[3];
  v8 = a2[4];
  sub_472D0(a2, v7);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 16))(v13, v7, v8);
  v9 = v14;
  v10 = v15;
  sub_472D0(v13, v14);
  v11 = v6 == (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
  sub_34488(v13);
  sub_34488(v17);
  return v11;
}

uint64_t ContentLoaderViewReusePool.update(contentBlockingRules:)(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 128) = result;
  return result;
}

uint64_t sub_C01E4(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  char v10;

  v3 = (_QWORD *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_E3A64(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = &v3[2 * a1];
      v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  v10 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v10, 1046, 0);
  __break(1u);
  return result;
}

double sub_C02C0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  double result;
  uint64_t v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[5];
  _BYTE v27[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v27, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v10 = Strong;
    if (a1)
    {
      v11 = a3;
      v12 = swift_retain();
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = swift_slowAlloc(32, -1);
        v26[0] = v16;
        *(_DWORD *)v15 = 136315138;
        ObjectType = swift_getObjectType(v11);
        v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 296))(ObjectType, a4);
        v20 = v19;
        v24 = sub_33524(v18, v19, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v15 + 4);

        swift_bridgeObjectRelease(v20);
        _os_log_impl(&dword_0, v13, v14, "Attempted #reuse for contentView:%s", v15, 0xCu);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);
      }
      else
      {

      }
      v22 = swift_getObjectType(v11);
      objc_msgSend(v11, "removeFromSuperview");
      v23 = a1 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document;
      swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document, &v24, 0, 0);
      sub_49F1C(v23, (uint64_t)v26);
      sub_C5E28(v11, (uint64_t)v26, v10, v22, (void *)a4);
      sub_34488(v26);
      sub_17C894(v11, a1, v22, a4);
      swift_release();
    }
    else
    {
      v21 = swift_getObjectType(a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 48))(1, v21, a4);
      sub_BFC34(a3);
    }
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_C053C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint8_t *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  uint64_t v23;
  __n128 v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t, __n128);
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  uint64_t v40[3];
  _BYTE v41[24];

  v9 = sub_319AC(&qword_3BAD68);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v41, 0, 0);
  if (swift_weakLoadStrong(a2))
  {
    v13 = a3 + 16;
    v14 = swift_retain_n(a3, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v15, (os_log_type_t)v16))
    {
      v36 = v16;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v40[0] = v35;
      *(_DWORD *)v17 = 136315138;
      swift_beginAccess(a3 + 16, v39, 0, 0);
      v37 = a3 + 16;
      Strong = swift_weakLoadStrong(a3 + 16);
      if (Strong)
      {
        v19 = Strong + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_hostID;
        v20 = type metadata accessor for UUID(0);
        v33 = v15;
        v34 = a5;
        v21 = v20;
        v22 = a4;
        v23 = *(_QWORD *)(v20 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v11, v19, v20);
        v24 = swift_release();
        v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v23 + 56);
        a4 = v22;
        v15 = v33;
        v25(v11, 0, 1, v21, v24);
      }
      else
      {
        v26 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 56))(v11, 1, 1, v26, v27);
      }
      v28 = String.init<A>(describing:)(v11, v9);
      v30 = v29;
      v38 = sub_33524(v28, v29, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v17 + 4);
      swift_release_n(a3);
      swift_bridgeObjectRelease(v30);
      _os_log_impl(&dword_0, v15, (os_log_type_t)v36, "#viewHostState: timeout in reuse pool for contentViewHost:%s", v17, 0xCu);
      v31 = v35;
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      v13 = v37;
    }
    else
    {
      swift_release_n(a3);

    }
    swift_beginAccess(v13, v40, 0, 0);
    swift_weakLoadStrong(v13);
    a4();
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_C0810(int a1, id a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t Strong;
  _BYTE v9[24];

  v6 = a5 + 16;
  objc_msgSend(a2, "invalidate");
  swift_beginAccess(v6, v9, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  a3();
  return swift_release(Strong);
}

uint64_t sub_C0880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v8[25] = a8;
  v8[26] = v20;
  v8[23] = a6;
  v8[24] = a7;
  v8[21] = a4;
  v8[22] = a5;
  v10 = sub_319AC(&qword_3BAD70);
  v8[27] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[28] = v11;
  v8[29] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_319AC(&qword_3BAD38);
  v8[30] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[31] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[32] = swift_task_alloc(v14);
  v8[33] = swift_task_alloc(v14);
  v15 = sub_319AC(&qword_3BAD40);
  v8[34] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v8[35] = v16;
  v8[36] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MainActor(0);
  v8[37] = v17;
  v8[38] = static MainActor.shared.getter(v17);
  v18 = (_QWORD *)swift_task_alloc(dword_3BAD7C);
  v8[39] = v18;
  *v18 = v8;
  v18[1] = sub_C0998;
  return sub_C1174(a5);
}

uint64_t sub_C0998(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 312);
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 296);
  v4[40] = a1;
  v4[41] = a2;
  v4[42] = v2;
  swift_task_dealloc(v5);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  if (v2)
    v9 = sub_C110C;
  else
    v9 = sub_C0A2C;
  return swift_task_switch(v9, v8, v7);
}

uint64_t sub_C0A2C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  __n128 v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  os_log_type_t type[8];
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  _QWORD *v68;
  uint64_t v69;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 320);
  swift_release();
  v3 = objc_opt_self(WKWebView);
  v4 = swift_dynamicCastObjCClass(v2, v3);
  v68 = (_QWORD *)(v0 + 16);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = *(_QWORD *)(v0 + 288);
    v59 = *(_QWORD *)(v0 + 280);
    v7 = *(_QWORD *)(v0 + 264);
    v58 = *(_QWORD *)(v0 + 272);
    v8 = *(_QWORD *)(v0 + 256);
    v9 = *(_QWORD *)(v0 + 240);
    *(_QWORD *)type = *(_QWORD *)(v0 + 232);
    v63 = *(_QWORD *)(v0 + 216);
    v65 = *(_QWORD *)(v0 + 224);
    v57 = *(_QWORD *)(v0 + 176);
    v54 = *(_QWORD *)(v0 + 248);
    v55 = *(_QWORD *)(v0 + 168);
    v62 = *(id *)(v0 + 320);
    v60 = objc_msgSend(v5, "hash");
    v56 = objc_msgSend(v5, "hash");
    v10 = objc_msgSend(v5, "scrollView");
    swift_getKeyPath(&unk_2EA650);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
    swift_release();

    v11 = objc_msgSend(v5, "scrollView");
    swift_getKeyPath(&unk_2EA650);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
    swift_release();

    v12 = sub_3DCC0(&qword_3BAD48, &qword_3BAD38, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
    Publisher.combineLatest<A>(_:)(v8, v9, v9, v12, v12);
    v13 = *(void (**)(uint64_t, uint64_t))(v54 + 8);
    v14 = v8;
    v1 = (_QWORD *)(v0 + 16);
    v13(v14, v9);
    v13(v7, v9);
    v15 = swift_allocObject(&unk_37F3F0, 24);
    swift_weakInit(v15 + 16, v55);
    v16 = swift_allocObject(&unk_37F580, 24);
    swift_unknownObjectWeakInit(v16 + 16, v5);
    sub_49F1C(v57, v0 + 56);
    v17 = (_QWORD *)swift_allocObject(&unk_37F5F8, 80);
    v17[2] = v15;
    v17[3] = v16;
    v17[4] = v56;
    sub_3F1CC((__int128 *)(v0 + 56), (uint64_t)(v17 + 5));
    v18 = sub_3DCC0(&qword_3BAD50, &qword_3BAD40, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
    v19 = Publisher<>.sink(receiveValue:)(sub_C74C4, v17, v58, v18);
    v20 = swift_release();
    (*(void (**)(uint64_t, uint64_t, __n128))(v59 + 8))(v6, v58, v20);
    v21 = (_QWORD *)(v55 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations);
    swift_beginAccess(v55 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations, v0 + 120, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
    v69 = *v21;
    *v21 = 0x8000000000000000;
    sub_17DE00(v19, (uint64_t)v60, isUniquelyReferenced_nonNull_native);
    v23 = *v21;
    *v21 = v69;
    swift_bridgeObjectRelease(v23);
    swift_endAccess(v0 + 120);
    swift_getKeyPath(&unk_2EA6A8);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
    swift_release();
    v24 = swift_allocObject(&unk_37F3F0, 24);
    swift_weakInit(v24 + 16, v55);
    v25 = swift_allocObject(&unk_37F620, 32);
    *(_QWORD *)(v25 + 16) = v24;
    *(_QWORD *)(v25 + 24) = v5;
    v26 = sub_3DCC0(&qword_3BAD80, &qword_3BAD70, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
    v27 = v62;
    v28 = Publisher<>.sink(receiveValue:)(sub_C71A8, v25, v63, v26);
    v29 = swift_release();
    (*(void (**)(os_log_type_t *, uint64_t, __n128))(v65 + 8))(*(os_log_type_t **)type, v63, v29);
    v30 = (_QWORD *)(v55 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_fontRegistrationObservations);
    swift_beginAccess(v55 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_fontRegistrationObservations, v0 + 96, 33, 0);
    v31 = swift_isUniquelyReferenced_nonNull_native(*v30);
    v69 = *v30;
    *v30 = 0x8000000000000000;
    sub_17DE00(v28, (uint64_t)v60, v31);
    v32 = *v30;
    *v30 = v69;
    swift_bridgeObjectRelease(v32);
    swift_endAccess(v0 + 96);

  }
  v33 = *(_QWORD *)(v0 + 168);
  v34 = *(_QWORD *)(v0 + 208);
  v35 = *(_QWORD *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
  sub_49F1C(v35, (uint64_t)v1);
  swift_retain_n(v33, 2);
  v36 = swift_bridgeObjectRetain_n(v34, 2);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.debug.getter();
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(void **)(v0 + 320);
  v41 = *(_QWORD *)(v0 + 208);
  if (v39)
  {
    v64 = *(_QWORD *)(v0 + 200);
    v67 = *(void **)(v0 + 320);
    v42 = *(_QWORD *)(v0 + 168);
    v43 = swift_slowAlloc(32, -1);
    v66 = swift_slowAlloc(64, -1);
    v69 = v66;
    *(_DWORD *)v43 = 134218498;
    v44 = *(_QWORD *)(v42 + 136);
    swift_release();
    *(_QWORD *)(v0 + 152) = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v43 + 4);
    swift_release();
    *(_WORD *)(v43 + 12) = 2080;
    v45 = *(_QWORD *)(v0 + 40);
    v46 = *(_QWORD *)(v0 + 48);
    sub_472D0(v68, v45);
    v47 = ContentLoadingDocument.shortDescription.getter(v45, v46);
    v49 = v48;
    *(_QWORD *)(v0 + 144) = sub_33524(v47, v48, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v43 + 14);
    swift_bridgeObjectRelease(v49);
    sub_34488(v68);
    *(_WORD *)(v43 + 22) = 2080;
    swift_bridgeObjectRetain(v41);
    *(_QWORD *)(v0 + 160) = sub_33524(v64, v41, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v43 + 24);
    swift_bridgeObjectRelease_n(v41, 3);
    _os_log_impl(&dword_0, v37, v38, "RequestContentView PoolCount: %ld document: %s use: %s", (uint8_t *)v43, 0x20u);
    swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 168));

    sub_34488(v1);
    swift_bridgeObjectRelease_n(v41, 2);
  }
  v50 = *(_QWORD *)(v0 + 256);
  v51 = *(_QWORD *)(v0 + 264);
  v52 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 288));
  swift_task_dealloc(v51);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_C110C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 232);
  swift_release(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_C1174(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[17] = a1;
  v2[18] = v1;
  v3 = type metadata accessor for MainActor(0);
  v2[19] = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  v2[20] = v4;
  v2[21] = v5;
  return swift_task_switch(sub_C11E0, v4, v5);
}

uint64_t sub_C11E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  uint64_t v11;
  double v12;
  double v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  char v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  _QWORD *v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ObjectType;
  double (*v49)(uint64_t, uint64_t, __n128);
  __n128 v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t, __n128);
  id v63;
  __n128 v64;
  uint64_t v65;
  double v66;
  double v67;
  char v68;
  double v69;
  double v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  double (*v75)(uint64_t, uint64_t, __n128);
  __n128 v76;
  double v77;
  double v78;
  double v79;
  double v80;
  __n128 v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  uint64_t v94;

  v1 = *(_QWORD *)(v0 + 144);
  if (*(uint64_t *)(v1 + 136) >= 11)
  {
    v2 = swift_retain();
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc(22, -1);
      *(_DWORD *)v5 = 134218240;
      *(_QWORD *)(v0 + 80) = *(_QWORD *)(v1 + 136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v5 + 4);
      swift_release();
      *(_WORD *)(v5 + 12) = 2048;
      *(_QWORD *)(v0 + 80) = 10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v5 + 14);
      _os_log_impl(&dword_0, v3, v4, "Current #reuse poolCount:%ld exceeded our maximum pool count %ld.", (uint8_t *)v5, 0x16u);
      swift_slowDealloc(v5, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  *(_QWORD *)(v0 + 176) = OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_log;
  v6 = swift_retain();
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134217984;
    *(_QWORD *)(v0 + 80) = *(_QWORD *)(v1 + 136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 4);
    swift_release();
    _os_log_impl(&dword_0, v7, v8, "Building #reuse contentView.  PoolCount: %ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release();
  }
  v10 = *(_QWORD **)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 144);

  ContentLoaderViewReusePool.configuration(forDocument:)(v10, (uint64_t)&v88);
  v13 = *(double *)&v88;
  v12 = *(double *)&v89;
  v14 = v90;
  v15 = v91;
  *(_QWORD *)(v0 + 184) = v90;
  *(_QWORD *)(v0 + 192) = v15;
  v17 = v92;
  v16 = v93;
  *(_QWORD *)(v0 + 200) = v92;
  *(_QWORD *)(v0 + 208) = v16;
  v18 = v94;
  *(_QWORD *)(v0 + 216) = v94;
  v19 = *(unsigned __int8 *)(v11 + 64);
  if ((v19 - 2) >= 2)
  {
    v87 = v18;
    if (*(_BYTE *)(v11 + 64))
    {
      v86 = v16;
      v37 = *(_QWORD *)(v0 + 144);
      v38 = *(_QWORD **)(v0 + 136);
      swift_release();
      v84 = objc_opt_self(BEWebViewFactory);
      v39 = static CGRect.from(size:)(v84);
      v41 = v40;
      v43 = v42;
      v45 = v44;
      v46 = *(_QWORD *)(v37 + 112);
      v47 = *(_QWORD *)(v37 + 120);
      ObjectType = swift_getObjectType(v46);
      v49 = *(double (**)(uint64_t, uint64_t, __n128))(v47 + 48);
      v50 = swift_unknownObjectRetain(v46);
      v51 = v49(ObjectType, v47, v50);
      v53 = v52;
      swift_unknownObjectRelease(v46);
      v54 = v38[3];
      v55 = v38[4];
      sub_472D0(v38, v54);
      v56 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v55 + 64))(v54, v55);
      v57 = (void *)v84;
      v85 = v14;
      v58 = objc_msgSend(v57, "viewConfiguredForPictureBooks:fixedLayoutSize:protocolCacheItem:paginationOptions:cleanupOptions:cfiOptions:stylesheetSet:", v56, v14, v17, v15, v86, v39, v41, v43, v45, v51, v53);

      v59 = *(_QWORD *)(v37 + 112);
      v60 = *(_QWORD *)(v37 + 120);
      v61 = swift_getObjectType(v59);
      v62 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v60 + 40);
      v63 = v58;
      v64 = swift_unknownObjectRetain(v59);
      *(double *)&v65 = COERCE_DOUBLE(v62(v61, v60, v64));
      v67 = v66;
      LOBYTE(v61) = v68;
      *(_QWORD *)&v69 = swift_unknownObjectRelease(v59).n128_u64[0];
      if ((v61 & 1) == 0)
      {
        v70 = *(double *)&v65;
        v71 = v67;
        v72 = *(_QWORD *)(v37 + 112);
        v73 = *(_QWORD *)(v37 + 120);
        v74 = swift_getObjectType(v72);
        v75 = *(double (**)(uint64_t, uint64_t, __n128))(v73 + 48);
        v76 = swift_unknownObjectRetain(v72);
        v77 = v75(v74, v73, v76);
        v79 = v78;
        swift_unknownObjectRelease(v72);
        v80 = v77 / v70;
        if (v79 / v71 < v77 / v70)
          v80 = v79 / v71;
        objc_msgSend(v63, "setBe_viewScale:", v80);
      }
      objc_msgSend(v63, "setAutoresizingMask:", 0, v69);

      v81 = swift_unknownObjectRelease(v87);
      return (*(uint64_t (**)(id, _UNKNOWN **, __n128))(v0 + 8))(v63, &protocol witness table for WKWebView, v81);
    }
    else
    {
      v24 = *(_QWORD **)(v0 + 136);
      v23 = *(_QWORD *)(v0 + 144);
      v26 = v24[3];
      v25 = v24[4];
      sub_472D0(v24, v26);
      v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v25 + 64))(v26, v25);
      v28 = *(_QWORD *)(v23 + 96);
      v29 = v14;
      v30 = *(_BYTE *)(v23 + 104);
      v83 = (id)objc_opt_self(BEWebViewFactory);
      LOBYTE(v82) = v30;
      v31 = objc_msgSend(v83, "viewCreatedForBooksAtSize:protocolCacheItem:paginationOptions:cleanupOptions:cfiOptions:stylesheetSet:imageFilterMode:lineGuideEnabled:", v27, v29, v17, v15, v16, v28, v13, v12, v82);
      *(_QWORD *)(v0 + 224) = v31;

      v32 = v31;
      sub_C47DC(v32, v23);

      v33 = v24[3];
      v34 = v24[4];
      sub_472D0(v24, v33);
      v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 64))(v33, v34);
      *(_QWORD *)(v0 + 232) = v35;
      *(_QWORD *)(v0 + 56) = v0 + 120;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_C1888;
      *(_QWORD *)(v0 + 112) = swift_continuation_init(v0 + 16, 0);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 88) = 0x40000000;
      *(_QWORD *)(v0 + 96) = sub_C3D64;
      *(_QWORD *)(v0 + 104) = &unk_37F638;
      v36 = v29;
      swift_unknownObjectRetain(v87);
      objc_msgSend(v83, "configureExistingWebView:fixedLayoutSize:protocolCacheItem:paginationOptions:styleManager:completion:", v32, v35, v36, v87, v0 + 80, v13, v12);
      return swift_continuation_await(v0 + 16);
    }
  }
  else
  {
    *(double *)&v88 = 0.0;
    *(double *)&v89 = -2.68156159e154;
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease(v89);
    *(double *)&v88 = -2.31584178e77;
    *(double *)&v89 = COERCE_DOUBLE(0x80000000002CA650);
    if (v19 == 3)
      v20 = 7630194;
    else
      v20 = 6710384;
    v21 = 0xE300000000000000;
    String.append(_:)(*(Swift::String *)&v20);
    swift_bridgeObjectRelease(0xE300000000000000);
    return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v88, v89, "BookEPUB/ContentViewReusePool.swift", 35, 2, 571, 0);
  }
}

uint64_t sub_C1888()
{
  uint64_t v0;

  return swift_task_switch(sub_C18CC, *(_QWORD *)(*(_QWORD *)v0 + 160), *(_QWORD *)(*(_QWORD *)v0 + 168));
}

uint64_t sub_C18CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  int v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  int v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 216);
  v3 = *(void **)(v0 + 184);
  swift_release();
  v4 = *(void **)(v0 + 120);
  v5 = *(_DWORD *)(v0 + 128);
  swift_unknownObjectRelease(v2);

  objc_msgSend(v4, "setAutoresizingMask:", 0);
  objc_msgSend(v4, "setOpaque:", 0);
  v6 = v4;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v30 = *(void **)(v0 + 208);
    v31 = *(_QWORD *)(v0 + 216);
    v28 = *(void **)(v0 + 192);
    v29 = *(void **)(v0 + 200);
    v26 = *(void **)(v0 + 224);
    v27 = *(void **)(v0 + 184);
    v25 = v5;
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v32 = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = WKWebView.shortDescription.getter();
    v13 = v12;
    *(_QWORD *)(v0 + 80) = sub_33524(v11, v12, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 4);
    swift_bridgeObjectRelease(v13);

    *(_WORD *)(v9 + 12) = 2080;
    *(_DWORD *)(v0 + 80) = v25;
    type metadata accessor for BEWKFontRegistrationResult(0);
    v15 = String.init<A>(describing:)(v0 + 80, v14);
    v17 = v16;
    *(_QWORD *)(v0 + 80) = sub_33524(v15, v16, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 14);
    swift_bridgeObjectRelease(v17);
    _os_log_impl(&dword_0, v7, v8, "Built webView %s #fontRegSuccess: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    v18 = swift_unknownObjectRelease(v31);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 216);
    v21 = *(void **)(v0 + 200);
    v20 = *(void **)(v0 + 208);
    v23 = *(void **)(v0 + 184);
    v22 = *(void **)(v0 + 192);

    swift_unknownObjectRelease(v19);
  }
  return (*(uint64_t (**)(id, _UNKNOWN **, __n128))(v0 + 8))(v6, &protocol witness table for WKWebView, v18);
}

void sub_C1B64(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  _QWORD *v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _BYTE v32[24];
  uint64_t v33;
  _BYTE v34[24];
  uint64_t v35[3];
  _BYTE v36[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v36, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = (_QWORD *)Strong;
    v6 = a2;
    swift_retain_n(v5, 2);
    v7 = v6;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(32, -1);
      v35[0] = v11;
      *(_DWORD *)v10 = 136315394;
      v12 = WKWebView.shortDescription.getter();
      v14 = v13;
      v33 = sub_33524(v12, v13, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v10 + 4);

      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v10 + 12) = 2048;
      swift_beginAccess(v5 + 3, v32, 0, 0);
      v15 = *(_QWORD *)(v5[3] + 16);
      swift_release();
      v33 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v10 + 14);
      swift_release();
      _os_log_impl(&dword_0, v8, v9, "prepareFor#Reuse completion for: %s pending count:%ld", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_release_n(v5);
    }
    swift_beginAccess(v5 + 3, v35, 0, 0);
    v16 = v5[3];
    v17 = v7;
    v18 = swift_bridgeObjectRetain(v16);
    v19 = sub_C71C0(v18, (uint64_t)v17);
    v21 = v20;
    swift_bridgeObjectRelease(v16);

    if ((v21 & 1) == 0)
    {
      swift_beginAccess(v5 + 3, &v33, 33, 0);
      v22 = (void *)sub_C01E4(v19);
      swift_endAccess(&v33);

    }
    swift_beginAccess(v5 + 2, &v33, 0, 0);
    v23 = v5[2];
    v24 = *(_QWORD *)(v23 + 16);
    if (v24)
    {
      sub_34450(0, (unint64_t *)&qword_3B5C30, NSObject_ptr);
      swift_bridgeObjectRetain(v23);
      v25 = 32;
      while (1)
      {
        v26 = *(id *)(v23 + v25);
        v27 = static NSObject.== infix(_:_:)(v26, v17);

        if ((v27 & 1) != 0)
          break;
        v25 += 16;
        if (!--v24)
        {
          swift_bridgeObjectRelease(v23);
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease(v23);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl(&dword_0, v29, v30, "ContentView is already in the #reuse pool -- skipping reuse call", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }
      swift_release();

    }
    else
    {
LABEL_12:
      sub_C48CC(v17, v5);
      swift_release();
    }
  }
}

void sub_C1EF0(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t Strong;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  id v50;
  void *v51;
  void (*v52)(char *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  NSObject *v59;
  id v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  char *v78;
  char *v79;
  NSObject *v80;
  int v81;
  uint64_t v82;
  id v83;
  void *v84;
  uint64_t v85;
  unint64_t v86;
  void (*v87)(char *, uint64_t);
  char v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  double *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unint64_t v134;
  unint64_t v135;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v137;
  unint64_t v138;
  __n128 v139;
  char *v140;
  uint64_t v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v159;
  char v160;
  double *v161;
  double v162;
  double v163;
  uint64_t v164;
  NSObject *v165;
  os_log_type_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  void (*v184)(char *, uint64_t, uint64_t, uint64_t);
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSObject *v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD v203[2];
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207[24];
  uint64_t v208[2];
  uint64_t v209;
  char v210[8];
  uint64_t v211;
  uint64_t v212;
  char v213[8];
  char v214[8];

  v198 = a5;
  v199 = a4;
  v197 = sub_319AC(&qword_3B8C78);
  __chkstk_darwin(v197);
  v9 = (char *)&v180 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for ContentLoaderViewReusePool.DataEvent(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v187 = (uint64_t)&v180 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v189 = (uint64_t)&v180 - v12;
  __chkstk_darwin(v13);
  v186 = (char *)&v180 - v14;
  __chkstk_darwin(v15);
  v185 = (char *)&v180 - v16;
  __chkstk_darwin(v17);
  v188 = (uint64_t)&v180 - v18;
  v19 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v19);
  v195 = (char *)&v180 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v192 = (uint64_t)&v180 - v22;
  __chkstk_darwin(v23);
  v194 = (uint64_t)&v180 - v24;
  __chkstk_darwin(v25);
  v27 = (char *)&v180 - v26;
  __chkstk_darwin(v28);
  v30 = (char *)&v180 - v29;
  __chkstk_darwin(v31);
  v33 = (char *)&v180 - v32;
  v200 = type metadata accessor for URL(0);
  v34 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v36 = (char *)&v180 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  v39 = (char *)&v180 - v38;
  __chkstk_darwin(v40);
  v196 = (char *)&v180 - v41;
  v43 = *a1;
  v42 = a1[1];
  a2 += 16;
  v44 = a1[2];
  v45 = a1[3];
  swift_beginAccess(a2, v214, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (!Strong)
    goto LABEL_7;
  v47 = Strong;
  v48 = a3 + 16;
  swift_beginAccess(v48, v213, 0, 0);
  v49 = swift_unknownObjectWeakLoadStrong(v48);
  if (!v49)
  {
    swift_release();
LABEL_7:
    if (qword_3B5750 != -1)
      swift_once(&qword_3B5750, sub_BF478);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_555F0(v54, (uint64_t)qword_3BA998);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v58 = 134217984;
      v209 = v199;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, v210, v58 + 4);
      swift_slowDealloc(v58, -1, -1);
    }
    goto LABEL_47;
  }
  v193 = v49;
  v50 = -[NSObject URL](v49, "URL");
  if (!v50)
  {
    v53 = v200;
    v184 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
    v184(v33, 1, 1, v200);
    goto LABEL_12;
  }
  v51 = v50;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v50);

  v52 = *(void (**)(char *))(v34 + 32);
  v182 = v39;
  v53 = v200;
  v52(v33);
  v184 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v184(v33, 0, 1, v53);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v33, 1, v53) == 1)
  {
    v39 = v182;
LABEL_12:
    sub_52128((uint64_t)v33, (uint64_t *)&unk_3B8C50);
    v59 = v193;
    goto LABEL_13;
  }
  v183 = v47;
  v64 = ((uint64_t (*)(char *, char *, uint64_t))v52)(v196, v33, v53);
  v181 = URL.absoluteString.getter(v64);
  v66 = v65;
  v68 = v198[3];
  v67 = v198[4];
  sub_472D0(v198, v68);
  v69 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 72))(v68, v67);
  v70 = URL.absoluteString.getter(v69);
  v72 = v71;
  v73 = *(void (**)(char *, uint64_t))(v34 + 8);
  v73(v36, v200);
  if (v181 == v70 && v66 == v72)
  {
    swift_bridgeObjectRelease_n(v66, 2);
    v47 = v183;
  }
  else
  {
    v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v181, v66, v70, v72, 0);
    swift_bridgeObjectRelease(v72);
    v89 = swift_bridgeObjectRelease(v66);
    v47 = v183;
    if ((v88 & 1) == 0)
    {
      v53 = v200;
      ((void (*)(char *, uint64_t, __n128))v73)(v196, v200, v89);
      v59 = v193;
      v39 = v182;
LABEL_13:
      v60 = -[NSObject URL](v59, "URL");
      v61 = v34;
      if (v60)
      {
        v62 = v60;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v60);

        v63 = 0;
      }
      else
      {
        v63 = 1;
      }
      v74 = v197;
      v184(v30, v63, 1, v53);
      URL.init(string:)(0x6C623A74756F6261, 0xEB000000006B6E61);
      v75 = (uint64_t)&v9[*(int *)(v74 + 48)];
      sub_3F238((uint64_t)v30, (uint64_t)v9, (uint64_t *)&unk_3B8C50);
      sub_3F238((uint64_t)v27, v75, (uint64_t *)&unk_3B8C50);
      v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
      if (v76((uint64_t)v9, 1, v53) == 1)
      {
        sub_52128((uint64_t)v27, (uint64_t *)&unk_3B8C50);
        sub_52128((uint64_t)v30, (uint64_t *)&unk_3B8C50);
        if (v76(v75, 1, v53) == 1)
        {
          sub_52128((uint64_t)v9, (uint64_t *)&unk_3B8C50);
LABEL_30:
          swift_release();

          return;
        }
      }
      else
      {
        v77 = v194;
        sub_3F238((uint64_t)v9, v194, (uint64_t *)&unk_3B8C50);
        if (v76(v75, 1, v53) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v39, v75, v53);
          v86 = sub_C6FB4();
          LODWORD(v199) = dispatch thunk of static Equatable.== infix(_:_:)(v77, v39, v53, v86);
          v87 = *(void (**)(char *, uint64_t))(v61 + 8);
          v87(v39, v200);
          sub_52128((uint64_t)v27, (uint64_t *)&unk_3B8C50);
          sub_52128((uint64_t)v30, (uint64_t *)&unk_3B8C50);
          v87((char *)v77, v200);
          v53 = v200;
          sub_52128((uint64_t)v9, (uint64_t *)&unk_3B8C50);
          v78 = v195;
          if ((v199 & 1) != 0)
            goto LABEL_30;
          goto LABEL_25;
        }
        sub_52128((uint64_t)v27, (uint64_t *)&unk_3B8C50);
        sub_52128((uint64_t)v30, (uint64_t *)&unk_3B8C50);
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v77, v53);
      }
      sub_52128((uint64_t)v9, &qword_3B8C78);
      v78 = v195;
LABEL_25:
      v79 = v39;
      sub_49F1C((uint64_t)v198, (uint64_t)&v209);
      v56 = v193;
      v80 = Logger.logObject.getter(v56);
      v81 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v80, (os_log_type_t)v81))
      {
        swift_release();

        sub_34488(&v209);
        return;
      }
      LODWORD(v199) = v81;
      v82 = swift_slowAlloc(22, -1);
      v198 = (_QWORD *)swift_slowAlloc(64, -1);
      v208[0] = (uint64_t)v198;
      *(_DWORD *)v82 = 136315394;
      v83 = -[NSObject URL](v56, "URL");
      if (v83)
      {
        v84 = v83;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v83);

        v85 = 0;
      }
      else
      {
        v85 = 1;
      }
      v184(v78, v85, 1, v53);
      v102 = (uint64_t)v78;
      v103 = v192;
      sub_8927C(v102, v192);
      v104 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v76)(v103, 1, v53);
      v183 = v47;
      if ((_DWORD)v104 == 1)
      {
        sub_52128(v103, (uint64_t *)&unk_3B8C50);
        v105 = 0;
        v106 = 0;
      }
      else
      {
        v105 = URL.absoluteString.getter(v104);
        v106 = v107;
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v103, v53);
      }
      v108 = v61;
      v202 = v105;
      v203[0] = v106;
      v109 = sub_319AC((uint64_t *)&unk_3BBB20);
      v110 = String.init<A>(describing:)(&v202, v109);
      v112 = v111;
      v202 = sub_33524(v110, v111, v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v82 + 4);

      swift_bridgeObjectRelease(v112);
      *(_WORD *)(v82 + 12) = 2080;
      v113 = v211;
      v114 = v212;
      sub_472D0(&v209, v211);
      v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 72))(v113, v114);
      v116 = URL.absoluteString.getter(v115);
      v118 = v117;
      (*(void (**)(char *, uint64_t))(v108 + 8))(v79, v200);
      v202 = sub_33524(v116, v118, v208);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v82 + 14);
      swift_bridgeObjectRelease(v118);
      sub_34488(&v209);
      _os_log_impl(&dword_0, v80, (os_log_type_t)v199, "currentURL & documentURL do not match. current %s != document.url %s", (uint8_t *)v82, 0x16u);
      v119 = v198;
      swift_arrayDestroy(v198, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v119, -1, -1);
      swift_slowDealloc(v82, -1, -1);
      swift_release();

      goto LABEL_47;
    }
  }
  v56 = v193;
  if (!-[NSObject be_hasCompletedLoad](v193, "be_hasCompletedLoad"))
  {
    v73(v196, v200);
    swift_release();
LABEL_47:

    return;
  }
  v90 = v47 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_lastStableSizes;
  swift_beginAccess(v47 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_lastStableSizes, v208, 0, 0);
  v91 = *(_QWORD *)v90;
  v92 = v199;
  if (*(_QWORD *)(*(_QWORD *)v90 + 16))
  {
    v93 = sub_3B7F8(v199);
    if ((v94 & 1) != 0)
    {
      v95 = (double *)(*(_QWORD *)(v91 + 56) + 16 * v93);
      if (*v95 == v44 && v95[1] == v45)
      {
        v73(v196, v200);
        goto LABEL_30;
      }
    }
  }
  v96 = (uint64_t *)(v47 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_dataGathering);
  swift_beginAccess(v47 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_dataGathering, v207, 0, 0);
  v98 = *v96;
  if (*(_QWORD *)(*v96 + 16))
  {
    v97 = sub_3B7F8(v92);
    v99 = v191;
    if ((v100 & 1) != 0)
    {
      v101 = *(_QWORD **)(*(_QWORD *)(v98 + 56) + 8 * v97);
      v97 = swift_bridgeObjectRetain(v101);
    }
    else
    {
      v101 = _swiftEmptyArrayStorage;
    }
  }
  else
  {
    v101 = _swiftEmptyArrayStorage;
    v99 = v191;
  }
  v120 = *(int *)(v99 + 20);
  if (v43 == v44 && v42 == v45)
  {
    *(_BYTE *)(v189 + v120) = 1;
    Date.init()(v97);
    if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
      v101 = (_QWORD *)sub_43174(0, v101[2] + 1, 1, (unint64_t)v101);
    v122 = v101[2];
    v121 = v101[3];
    if (v122 >= v121 >> 1)
      v101 = (_QWORD *)sub_43174(v121 > 1, v122 + 1, 1, (unint64_t)v101);
    v101[2] = v122 + 1;
    v123 = *(unsigned __int8 *)(v190 + 80);
    v124 = *(_QWORD *)(v190 + 72);
    sub_C6FFC(v189, (uint64_t)v101 + ((v123 + 32) & ~v123) + v124 * v122);
    LODWORD(v122) = v123;
  }
  else
  {
    *(_BYTE *)(v188 + v120) = 0;
    Date.init()(v97);
    if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
      v101 = (_QWORD *)sub_43174(0, v101[2] + 1, 1, (unint64_t)v101);
    v126 = v101[2];
    v125 = v101[3];
    if (v126 >= v125 >> 1)
      v101 = (_QWORD *)sub_43174(v125 > 1, v126 + 1, 1, (unint64_t)v101);
    v101[2] = v126 + 1;
    v122 = *(unsigned __int8 *)(v190 + 80);
    v127 = (v122 + 32) & ~v122;
    v124 = *(_QWORD *)(v190 + 72);
    v128 = sub_C6FFC(v188, (uint64_t)v101 + v127 + v124 * v126);
    v129 = *(int *)(v191 + 20);
    if (v43 < v44 || v42 < v45)
    {
      v185[v129] = 2;
      Date.init()(v128);
      v135 = v101[2];
      v134 = v101[3];
      if (v135 >= v134 >> 1)
        v101 = (_QWORD *)sub_43174(v134 > 1, v135 + 1, 1, (unint64_t)v101);
      v101[2] = v135 + 1;
      v132 = (uint64_t)v101 + v127 + v135 * v124;
      v133 = &v211;
    }
    else
    {
      v186[v129] = 3;
      Date.init()(v128);
      v131 = v101[2];
      v130 = v101[3];
      if (v131 >= v130 >> 1)
        v101 = (_QWORD *)sub_43174(v130 > 1, v131 + 1, 1, (unint64_t)v101);
      v101[2] = v131 + 1;
      v132 = (uint64_t)v101 + v127 + v131 * v124;
      v133 = &v212;
    }
    sub_C6FFC(*(v133 - 32), v132);
    v99 = v191;
  }
  swift_beginAccess(v96, &v209, 33, 0);
  swift_bridgeObjectRetain(v101);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v96);
  v202 = *v96;
  *v96 = 0x8000000000000000;
  sub_17DDE4((uint64_t)v101, v199, isUniquelyReferenced_nonNull_native);
  v137 = *v96;
  *v96 = v202;
  swift_bridgeObjectRelease(v137);
  swift_endAccess(&v209);
  v138 = v101[2];
  if (v138 >= 8)
  {
    v197 = v90;
    v140 = (char *)v101 + ((v122 + 32) & ~(unint64_t)v122);
    swift_bridgeObjectRetain(v101);
    v141 = v187;
    sub_C7040((uint64_t)&v140[v124 * (v138 - 8)], v187);
    v142 = *(unsigned __int8 *)(v141 + *(int *)(v99 + 20));
    sub_C7084(v141);
    if (v142 != 1)
      goto LABEL_85;
    sub_C7040((uint64_t)&v140[v124 * (v138 - 7)], v141);
    v143 = *(unsigned __int8 *)(v141 + *(int *)(v99 + 20));
    sub_C7084(v141);
    if (v143 != 1)
      goto LABEL_85;
    sub_C7040((uint64_t)&v140[v124 * (v138 - 6)], v141);
    v144 = *(unsigned __int8 *)(v141 + *(int *)(v99 + 20));
    sub_C7084(v141);
    if (v144 != 1)
      goto LABEL_85;
    sub_C7040((uint64_t)&v140[v124 * (v138 - 5)], v141);
    v145 = *(unsigned __int8 *)(v141 + *(int *)(v99 + 20));
    sub_C7084(v141);
    if (v145 != 1)
      goto LABEL_85;
    sub_C7040((uint64_t)&v140[v124 * (v138 - 4)], v141);
    v146 = *(unsigned __int8 *)(v141 + *(int *)(v99 + 20));
    sub_C7084(v141);
    if (v146 != 1)
      goto LABEL_85;
    sub_C7040((uint64_t)&v140[v124 * (v138 - 3)], v141);
    v147 = *(unsigned __int8 *)(v141 + *(int *)(v99 + 20));
    sub_C7084(v141);
    if (v147 != 1)
      goto LABEL_85;
    sub_C7040((uint64_t)&v140[v124 * (v138 - 2)], v141);
    v148 = *(unsigned __int8 *)(v141 + *(int *)(v99 + 20));
    sub_C7084(v141);
    if (v148 == 1
      && (sub_C7040((uint64_t)&v140[v124 * (v138 - 1)], v141),
          v149 = *(unsigned __int8 *)(v141 + *(int *)(v99 + 20)),
          sub_C7084(v141),
          v149 == 1))
    {
      swift_bridgeObjectRelease(v101);
      sub_C3334(8, (uint64_t)v101);
      v151 = v150;
      swift_beginAccess(v96, &v209, 33, 0);
      v152 = swift_isUniquelyReferenced_nonNull_native(*v96);
      v202 = *v96;
      *v96 = 0x8000000000000000;
      v153 = v199;
      sub_17DDE4(v151, v199, v152);
      v154 = *v96;
      *v96 = v202;
      swift_bridgeObjectRelease(v154);
      swift_endAccess(&v209);
      v155 = v198[3];
      v156 = v198[4];
      sub_472D0(v198, v155);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v156 + 96))(&v209, v155, v156);
      sub_C35E4((uint64_t)&v209, v193);
      v157 = (_QWORD *)v197;
      v158 = *(_QWORD *)v197;
      if (*(_QWORD *)(*(_QWORD *)v197 + 16))
      {
        v159 = sub_3B7F8(v153);
        if ((v160 & 1) != 0)
        {
          v161 = (double *)(*(_QWORD *)(v158 + 56) + 16 * v159);
          v162 = *v161;
          v163 = v161[1];
          v164 = sub_49F1C((uint64_t)&v209, (uint64_t)&v202);
          v165 = Logger.logObject.getter(v164);
          v166 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v165, v166))
          {
            v167 = swift_slowAlloc(32, -1);
            v168 = swift_slowAlloc(64, -1);
            v206 = v168;
            *(_DWORD *)v167 = 134218498;
            v169 = v204;
            v170 = v205;
            sub_472D0(&v202, v204);
            v171 = (*(uint64_t (**)(uint64_t, uint64_t))(v170 + 16))(v169, v170);
            sub_34488(&v202);
            v201 = v171;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v167 + 4);
            *(_WORD *)(v167 + 12) = 2080;
            v172 = CGSize.debugDescription.getter(v44, v45);
            v174 = v173;
            v201 = sub_33524(v172, v173, &v206);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v167 + 14);
            swift_bridgeObjectRelease(v174);
            *(_WORD *)(v167 + 22) = 2080;
            v175 = CGSize.debugDescription.getter(v162, v163);
            v177 = v176;
            v201 = sub_33524(v175, v176, &v206);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, &v202, v167 + 24);
            swift_bridgeObjectRelease(v177);
            _os_log_impl(&dword_0, v165, v166, "Ordinal %ld Stabilized on new value %s from size %s", (uint8_t *)v167, 0x20u);
            swift_arrayDestroy(v168, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v168, -1, -1);
            swift_slowDealloc(v167, -1, -1);
          }
          else
          {
            sub_34488(&v202);
          }

          v153 = v199;
          v157 = (_QWORD *)v197;
        }
      }
      swift_beginAccess(v157, &v202, 33, 0);
      v178 = swift_isUniquelyReferenced_nonNull_native(*v157);
      v206 = *v157;
      *v157 = 0x8000000000000000;
      sub_17DCD4(v153, v178, v44, v45);
      v179 = *v157;
      *v157 = v206;
      swift_bridgeObjectRelease(v179);
      swift_endAccess(&v202);

      swift_release();
      sub_34488(&v209);
    }
    else
    {
LABEL_85:

      swift_release();
      swift_bridgeObjectRelease_n(v101, 2);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v101);

    v139 = swift_release();
  }
  ((void (*)(char *, uint64_t, __n128))v73)(v196, v200, v139);
}

void sub_C3334(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;

  v4 = type metadata accessor for ContentLoaderViewReusePool.DataEvent(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!a1
    || (*(_QWORD *)(a2 + 16) >= a1 ? (v8 = a1) : (v8 = *(_QWORD *)(a2 + 16)),
        v24 = _swiftEmptyArrayStorage,
        sub_F5270(0, v8, 0),
        v9 = (uint64_t)v24,
        (v10 = *(_QWORD *)(a2 + 16)) == 0))
  {
LABEL_25:
    swift_bridgeObjectRelease(a2);
    return;
  }
  v22 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v11 = a2 + v22;
  v12 = *(_QWORD *)(v5 + 72);
  swift_bridgeObjectRetain(a2);
  v13 = 0;
  v14 = 0;
  v21 = v10 - 1;
  while (1)
  {
    sub_C7040(v11, (uint64_t)v7);
    v16 = *(_QWORD *)(v9 + 16);
    v24 = (_QWORD *)v9;
    if ((uint64_t)v16 < a1)
    {
      v15 = *(_QWORD *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_F5270(v15 > 1, v16 + 1, 1);
        v9 = (uint64_t)v24;
      }
      *(_QWORD *)(v9 + 16) = v16 + 1;
      sub_C6FFC((uint64_t)v7, v9 + v22 + v16 * v12);
    }
    else
    {
      if (v14 >= v16)
        goto LABEL_28;
      sub_C7148((uint64_t)v7, v9 + v22 + v12 * v14);
      v9 = (uint64_t)v24;
      if ((uint64_t)++v14 >= a1)
      {
        if (v21 == v13)
        {
          swift_bridgeObjectRelease_n(a2, 2);
          return;
        }
        v14 = 0;
        goto LABEL_12;
      }
    }
    if (v21 == v13)
      break;
LABEL_12:
    ++v13;
    v11 += v12;
    if (v13 >= *(_QWORD *)(a2 + 16))
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease(a2);
  if (!v14)
    goto LABEL_25;
  v17 = *(_QWORD *)(v9 + 16);
  v23 = _swiftEmptyArrayStorage;
  sub_F5270(0, v17, 0);
  if (v17 < (uint64_t)v14)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_31;
  v18 = *(_QWORD *)(v9 + 16);
  if (v18 >= v14 && v18 >= v17)
  {
    v19 = v9 + v22;
    v20 = swift_retain();
    sub_C3D98(v20, v19, v14, (2 * v17) | 1);
    swift_bridgeObjectRelease(a2);
    sub_C3D98(v9, v19, 0, (2 * v14) | 1);
    return;
  }
LABEL_32:
  __break(1u);
}

double sub_C35E4(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  void (*v17)(uint64_t, id, void (*)(unsigned __int8 *), uint64_t, uint64_t, uint64_t);
  id v18;
  double result;
  uint64_t v20;
  __int128 v21[2];

  v3 = v2;
  v5 = a2;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v21[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(v5, "be_identifier");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v20 = sub_33524(v11, v13, (uint64_t *)v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v8 + 4);

    swift_bridgeObjectRelease(v13);
    _os_log_impl(&dword_0, v6, v7, "Attempting re-eval of pagination data for %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {

  }
  v14 = *(_QWORD *)(v3 + 80);
  ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 72));
  sub_49F1C(a1, (uint64_t)v21);
  v16 = swift_allocObject(&unk_37F5D0, 72);
  *(_QWORD *)(v16 + 16) = v3;
  sub_3F1CC(v21, v16 + 24);
  *(_QWORD *)(v16 + 64) = v5;
  v17 = *(void (**)(uint64_t, id, void (*)(unsigned __int8 *), uint64_t, uint64_t, uint64_t))(v14 + 128);
  v18 = v5;
  swift_retain();
  v17(a1, v18, sub_C70F4, v16, ObjectType, v14);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_C3800(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  _BYTE v14[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    v8 = Strong;
    v9 = *(_QWORD *)(Strong + 72);
    v10 = *(_QWORD *)(Strong + 80);
    ObjectType = swift_getObjectType(v9);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v10 + 288);
    v13 = swift_unknownObjectRetain(v9);
    v12(v4, a3, ObjectType, v10, v13);
    swift_release(v8);
    *(_QWORD *)&result = swift_unknownObjectRelease(v9).n128_u64[0];
  }
  return result;
}

void sub_C38AC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;

  if ((a1[1] & 1) == 0)
  {
    sub_49F1C(a3, (uint64_t)v48);
    v22 = a4;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(32, -1);
      v26 = swift_slowAlloc(64, -1);
      v47 = v26;
      *(_DWORD *)v25 = 134349570;
      v27 = v49;
      v28 = v50;
      sub_472D0(v48, v49);
      v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28);
      sub_34488(v48);
      v45 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v25 + 4);
      *(_WORD *)(v25 + 12) = 2080;
      v30 = WKWebView.shortDescription.getter();
      v32 = v31;
      v45 = sub_33524(v30, v31, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v25 + 14);

      *(_QWORD *)&v33 = swift_bridgeObjectRelease(v32).n128_u64[0];
      *(_WORD *)(v25 + 22) = 2082;
      v34 = objc_msgSend(v22, "scrollView", v33);
      objc_msgSend(v34, "contentSize");
      v36 = v35;
      v38 = v37;

      v45 = v36;
      v46 = v38;
      type metadata accessor for CGSize(0);
      v40 = String.init<A>(describing:)(&v45, v39);
      v42 = v41;
      v45 = sub_33524(v40, v41, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v25 + 24);

      swift_bridgeObjectRelease(v42);
      _os_log_impl(&dword_0, v23, v24, "Successfully reevaluated document %{public}ld in webView %s contentSize:%{public}s", (uint8_t *)v25, 0x20u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {
      sub_34488(v48);

    }
    goto LABEL_10;
  }
  v5 = *a1;
  sub_49F1C(a3, (uint64_t)v48);
  v6 = a4;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(32, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    v43 = swift_slowAlloc(32, -1);
    *(_DWORD *)v9 = 134349570;
    v44 = a4;
    v45 = v43;
    v12 = v49;
    v11 = v50;
    sub_472D0(v48, v49);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v12, v11);
    sub_34488(v48);
    v47 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v9 + 4);
    *(_WORD *)(v9 + 12) = 2080;
    v14 = WKWebView.shortDescription.getter();
    v16 = v15;
    v47 = sub_33524(v14, v15, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v9 + 14);

    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v9 + 22) = 2114;
    v17 = sub_C7104();
    v18 = swift_allocError(&type metadata for PaginationError, v17, 0, 0);
    *v19 = v5;
    v20 = _swift_stdlib_bridgeErrorToNSError(v18);
    v47 = v20;
    a4 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v9 + 24);
    *v10 = v20;
    _os_log_impl(&dword_0, v7, v8, "Got error reevaluating data for document %{public}ld in webView %s -- error %{public}@", (uint8_t *)v9, 0x20u);
    v21 = sub_319AC(&qword_3B8A70);
    swift_arrayDestroy(v10, 1, v21);
    swift_slowDealloc(v10, -1, -1);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    if (!v5)
      return;
LABEL_10:
    objc_msgSend(a4, "setBe_hasPendingOperations:", 0, v43);
    return;
  }
  sub_34488(v48);

  if (v5)
    goto LABEL_10;
}

uint64_t sub_C3D64(uint64_t a1, void *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
  *(_QWORD *)v4 = a2;
  *(_DWORD *)(v4 + 8) = a3;
  v5 = a2;
  return swift_continuation_resume(v3);
}

void sub_C3D98(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  int isUniquelyReferenced_nonNull_native;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t);

  v51 = a2;
  v8 = type metadata accessor for ContentLoaderViewReusePool.DataEvent(0);
  v55 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v54 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_319AC(&qword_3BAD60);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  __chkstk_darwin(v14);
  v17 = (char *)&v48 - v16;
  v18 = a4 >> 1;
  v52 = a3;
  v19 = __OFSUB__(a4 >> 1, a3);
  v20 = (a4 >> 1) - a3;
  if (v19)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v50 = v15;
  v21 = *v4;
  v22 = *(_QWORD *)(*v4 + 16);
  v23 = v22 + v20;
  if (__OFADD__(v22, v20))
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v56 = v18;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
  *v4 = v21;
  if (!isUniquelyReferenced_nonNull_native || (v25 = *(_QWORD *)(v21 + 24) >> 1, v25 < v23))
  {
    if (v22 <= v23)
      v26 = v22 + v20;
    else
      v26 = v22;
    sub_F5270(isUniquelyReferenced_nonNull_native, v26, 1);
    v21 = *v4;
    v25 = *(_QWORD *)(*v4 + 24) >> 1;
  }
  v27 = *(_QWORD *)(v21 + 16);
  v28 = v25 - v27;
  if (v56 == v52)
  {
    if (v20 <= 0)
    {
      v29 = v52;
      if (v28)
        goto LABEL_43;
      goto LABEL_23;
    }
    goto LABEL_47;
  }
  if (v28 < v20)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v20 < 0)
  {
LABEL_50:
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_51;
  }
  v30 = *(_QWORD *)(v55 + 72);
  v31 = v21 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80)) + v30 * v27;
  v32 = v51 + v30 * v52;
  if (v32 < v31 + v30 * v20 && v31 < v32 + v30 * v20)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_51:
    __break(1u);
    return;
  }
  swift_arrayInitWithCopy(v31);
  if (!v20)
  {
    v29 = v56;
    if (!v28)
      goto LABEL_23;
LABEL_43:
    swift_unknownObjectRelease(a1);
    return;
  }
  v34 = *(_QWORD *)(v21 + 16);
  v19 = __OFADD__(v34, v20);
  v35 = v34 + v20;
  v29 = v56;
  if (v19)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  *(_QWORD *)(v21 + 16) = v35;
  if (v20 != v28)
    goto LABEL_43;
LABEL_23:
  v49 = a1;
  v36 = *(_QWORD *)(v21 + 16);
  v37 = v55;
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56);
  v53(v17, 1, 1, v8);
  v38 = v50;
  sub_3F238((uint64_t)v17, v50, &qword_3BAD60);
  v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  v39 = v57(v38, 1, v8);
  v40 = (uint64_t)v54;
  if (v39 != 1)
  {
    do
    {
      sub_52128(v38, &qword_3BAD60);
      v42 = *v4;
      v43 = *(_QWORD *)(*v4 + 24);
      v41 = v43 >> 1;
      if ((uint64_t)(v43 >> 1) < v36 + 1)
      {
        sub_F5270(v43 > 1, v36 + 1, 1);
        v42 = *v4;
        v41 = *(_QWORD *)(*v4 + 24) >> 1;
      }
      swift_retain();
      sub_3F238((uint64_t)v17, (uint64_t)v12, &qword_3BAD60);
      if (v57((uint64_t)v12, 1, v8) != 1)
      {
        if (v36 > v41)
          v41 = v36;
        do
        {
          sub_C6FFC((uint64_t)v12, v40);
          if (v41 == v36)
          {
            sub_C7084(v40);
            swift_release();
            v36 = v41;
            goto LABEL_27;
          }
          sub_52128((uint64_t)v17, &qword_3BAD60);
          v46 = v40;
          v47 = *(_QWORD *)(v55 + 72);
          sub_C6FFC(v46, v42+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ v47 * v36);
          if (v29 == v56)
          {
            v44 = 1;
            v29 = v56;
          }
          else
          {
            if (v29 < v52 || v29 >= v56)
            {
              __break(1u);
              goto LABEL_45;
            }
            sub_C7040(v51 + v47 * v29, (uint64_t)v17);
            v44 = 0;
            ++v29;
          }
          v53(v17, v44, 1, v8);
          sub_3F238((uint64_t)v17, (uint64_t)v12, &qword_3BAD60);
          v45 = v57((uint64_t)v12, 1, v8);
          ++v36;
          v40 = (uint64_t)v54;
        }
        while (v45 != 1);
      }
      swift_release();
      sub_52128((uint64_t)v12, &qword_3BAD60);
      v41 = v36;
LABEL_27:
      *(_QWORD *)(*v4 + 16) = v41;
      v38 = v50;
      sub_3F238((uint64_t)v17, v50, &qword_3BAD60);
    }
    while (v57(v38, 1, v8) != 1);
  }
  sub_52128((uint64_t)v17, &qword_3BAD60);
  swift_unknownObjectRelease(v49);
  sub_52128(v38, &qword_3BAD60);
}

uint64_t sub_C42D0(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_unknownObjectWeakInit(a11 + 56, 0);
  *(_QWORD *)(a11 + 128) = 0;
  *(_QWORD *)(a11 + 136) = 0;
  v17 = OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_log;
  if (qword_3B5750 != -1)
    swift_once(&qword_3B5750, sub_BF478);
  v18 = a11 + v17;
  v19 = type metadata accessor for Logger(0);
  v20 = sub_555F0(v19, (uint64_t)qword_3BA998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v18, v20, v19);
  v21 = OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations;
  *(_QWORD *)(a11 + v21) = sub_3D110(_swiftEmptyArrayStorage);
  v22 = OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentLoadObservations;
  *(_QWORD *)(a11 + v22) = sub_3D110(_swiftEmptyArrayStorage);
  v23 = OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeTimers;
  *(_QWORD *)(a11 + v23) = sub_3D110(_swiftEmptyArrayStorage);
  v24 = OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_fontRegistrationObservations;
  *(_QWORD *)(a11 + v24) = sub_3D110(_swiftEmptyArrayStorage);
  v25 = OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_dataGathering;
  *(_QWORD *)(a11 + v25) = sub_3D214(_swiftEmptyArrayStorage);
  v26 = OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_lastStableSizes;
  *(_QWORD *)(a11 + v26) = sub_3D318((uint64_t)_swiftEmptyArrayStorage);
  *(_BYTE *)(a11 + 64) = a1;
  *(_BYTE *)(a11 + 104) = a3 & 1;
  *(_QWORD *)(a11 + 72) = a4;
  *(_QWORD *)(a11 + 80) = a13;
  *(_QWORD *)(a11 + 88) = a7;
  *(_QWORD *)(a11 + 96) = a2;
  *(_QWORD *)(a11 + 112) = a5;
  *(_QWORD *)(a11 + 120) = a6;
  *(_QWORD *)(a11 + 40) = a9;
  *(_QWORD *)(a11 + 48) = a10;
  *(_QWORD *)(a11 + 128) = a8;
  *(_QWORD *)(a11 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a11 + 24) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a11 + 32) = _swiftEmptyArrayStorage;
  return a11;
}

uint64_t sub_C4464(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];

  v3 = objc_msgSend(a1, "hash");
  v4 = a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations, v34, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v4 + 16))
  {
    sub_3B7F8((uint64_t)v3);
    if ((v5 & 1) != 0)
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
  }
  swift_beginAccess(v4, v33, 33, 0);
  sub_B655C((uint64_t)v3);
  swift_endAccess(v33);
  swift_release();
  v6 = a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentLoadObservations;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentLoadObservations, v33, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v6 + 16))
  {
    sub_3B7F8((uint64_t)v3);
    if ((v7 & 1) != 0)
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
  }
  swift_beginAccess(v6, v32, 33, 0);
  sub_B655C((uint64_t)v3);
  swift_endAccess(v32);
  swift_release();
  v8 = a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeTimers;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeTimers, v32, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v8 + 16))
  {
    sub_3B7F8((uint64_t)v3);
    if ((v9 & 1) != 0)
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
  }
  swift_beginAccess(v8, v31, 33, 0);
  sub_B655C((uint64_t)v3);
  swift_endAccess(v31);
  swift_release();
  v10 = a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_fontRegistrationObservations;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_fontRegistrationObservations, v31, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v10 + 16))
  {
    sub_3B7F8((uint64_t)v3);
    if ((v11 & 1) != 0)
    {
      swift_retain();
      AnyCancellable.cancel()();
      swift_release();
    }
  }
  swift_beginAccess(v10, v30, 33, 0);
  sub_B655C((uint64_t)v3);
  swift_endAccess(v30);
  swift_release();
  v12 = (_QWORD *)(a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_dataGathering);
  swift_beginAccess(a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_dataGathering, v30, 33, 0);
  v13 = sub_3B7F8((uint64_t)v3);
  if ((v14 & 1) != 0)
  {
    v15 = v13;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
    v17 = *v12;
    v28 = *v12;
    *v12 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_F2B50();
      v17 = v28;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v15);
    sub_188538(v15, v17);
    v19 = *v12;
    *v12 = v17;
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v19);
  }
  swift_endAccess(v30);
  v20 = (uint64_t *)(a2 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_lastStableSizes);
  swift_beginAccess(v20, v30, 33, 0);
  v21 = sub_3B7F8((uint64_t)v3);
  if ((v22 & 1) != 0)
  {
    v23 = v21;
    v24 = swift_isUniquelyReferenced_nonNull_native(*v20);
    v25 = *v20;
    v29 = *v20;
    *v20 = 0x8000000000000000;
    if ((v24 & 1) == 0)
    {
      sub_F2B44();
      v25 = v29;
    }
    sub_1883A4(v23, v25);
    v26 = *v20;
    *v20 = v25;
    swift_bridgeObjectRelease(v26);
  }
  return swift_endAccess(v30);
}

void sub_C47DC(void *a1, uint64_t a2)
{
  uint64_t Strong;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *v6;

  Strong = swift_unknownObjectWeakLoadStrong(a2 + 56);
  if (Strong)
  {
    v6 = Strong;
    objc_msgSend(a1, "setAlpha:", 0.0);
    -[NSObject addSubview:](v6, "addSubview:", a1);
    -[NSObject sendSubviewToBack:](v6, "sendSubviewToBack:", a1);
  }
  else
  {
    v6 = Logger.logObject.getter(0);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_0, v6, v4, "No background host to re-home the contentView.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
  }

}

void sub_C48CC(void *a1, _QWORD *a2)
{
  id v2;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];

  v5 = a2 + 4;
  v6 = swift_beginAccess(a2 + 4, v47, 0, 0).n128_u64[0];
  v7 = a2[4];
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v18 = a2[4];
    else
      v18 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2[4]);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    v6 = swift_bridgeObjectRelease(v7).n128_u64[0];
    if (v19)
    {
LABEL_3:
      swift_beginAccess(v5, &v43, 33, 0);
      v8 = *v5;
      if ((unint64_t)*v5 >> 62)
      {
        if (v8 < 0)
          v35 = *v5;
        else
          v35 = v8 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v5);
        v36 = _CocoaArrayWrapper.endIndex.getter(v35);
        swift_bridgeObjectRelease(v8);
        if (v36)
        {
LABEL_5:
          v8 = *v5;
          if (!((unint64_t)*v5 >> 62))
          {
            v9 = *(_QWORD *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8));
            if (v9)
              goto LABEL_7;
            goto LABEL_41;
          }
LABEL_37:
          if (v8 < 0)
            v37 = v8;
          else
            v37 = v8 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v8);
          v9 = _CocoaArrayWrapper.endIndex.getter(v37);
          swift_bridgeObjectRelease(v8);
          if (v9)
          {
LABEL_7:
            if ((v8 & 0xC000000000000001) == 0)
            {
              if (!*(_QWORD *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8)))
              {
                __break(1u);
                goto LABEL_44;
              }
              v8 = *(_QWORD *)(v8 + 32);
              swift_retain();
LABEL_10:
              v9 = *v5;
              if (!((unint64_t)*v5 >> 62))
              {
                if (*(_QWORD *)((char *)&dword_10 + (v9 & 0xFFFFFFFFFFFFF8)))
                {
LABEL_12:
                  sub_86880(0, 1);
                  swift_endAccess(&v43);
                  v10 = swift_retain();
                  v11 = Logger.logObject.getter(v10);
                  v12 = static os_log_type_t.debug.getter();
                  if (os_log_type_enabled(v11, v12))
                  {
                    v13 = (uint8_t *)swift_slowAlloc(12, -1);
                    *(_DWORD *)v13 = 134217984;
                    v14 = v8 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document;
                    swift_beginAccess(v8 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document, &v41, 0, 0);
                    sub_49F1C(v14, (uint64_t)&v43);
                    v16 = v45;
                    v15 = v46;
                    sub_472D0(&v43, v45);
                    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(v16, v15);
                    sub_34488(&v43);
                    v43 = v17;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v13 + 4);
                    swift_release();
                    _os_log_impl(&dword_0, v11, v12, "Processing returned #reuse contentView for waiting contentViewHost ordinal:%ld", v13, 0xCu);
                    swift_slowDealloc(v13, -1, -1);
                  }
                  else
                  {
                    swift_release();
                  }

                  sub_C4F80(a1, v8, (uint64_t)a2);
                  swift_release();
                  return;
                }
                goto LABEL_48;
              }
LABEL_44:
              if (v9 < 0)
                v38 = v9;
              else
                v38 = v9 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v9);
              v39 = _CocoaArrayWrapper.endIndex.getter(v38);
              swift_bridgeObjectRelease(v9);
              if (v39)
                goto LABEL_12;
LABEL_48:
              __break(1u);
LABEL_49:
              v8 = (uint64_t)sub_42CE0(0, *(_QWORD *)(v8 + 16) + 1, 1, (_QWORD *)v8);
              *v5 = v8;
              goto LABEL_24;
            }
LABEL_42:
            v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
            goto LABEL_10;
          }
LABEL_41:
          __break(1u);
          goto LABEL_42;
        }
      }
      else if (*(_QWORD *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8)))
      {
        goto LABEL_5;
      }
      __break(1u);
      goto LABEL_37;
    }
  }
  else if (*(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8)))
  {
    goto LABEL_3;
  }
  v20 = a2[17];
  if (v20 > 6)
  {
    a2[17] = v20 - 1;
    v21 = swift_retain_n(a2, 3);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(32, -1);
      *(_DWORD *)v24 = 134218496;
      swift_beginAccess(a2 + 2, &v43, 0, 0);
      v41 = *(_QWORD *)(a2[2] + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v24 + 4);
      *(_WORD *)(v24 + 12) = 2048;
      swift_beginAccess(a2 + 3, &v41, 0, 0);
      v40 = *(_QWORD *)(a2[3] + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v24 + 14);
      swift_release();
      *(_WORD *)(v24 + 22) = 2048;
      v25 = a2[17];
      swift_release();
      v40 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v24 + 24);
      swift_release();
      _os_log_impl(&dword_0, v22, v23, "Discarded returned #reuse contentView because contentViews:%ld pending:%ld poolCount: %ld", (uint8_t *)v24, 0x20u);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_release_n(a2);
    }

    objc_msgSend(a1, "be_discardingContentView");
    objc_msgSend(a1, "removeFromSuperview");
    return;
  }
  objc_msgSend(a1, "be_returningContentViewToPool", *(double *)&v6);
  v5 = a2 + 2;
  swift_beginAccess(a2 + 2, &v43, 33, 0);
  v8 = a2[2];
  v2 = a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  a2[2] = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    goto LABEL_49;
LABEL_24:
  v28 = *(_QWORD *)(v8 + 16);
  v27 = *(_QWORD *)(v8 + 24);
  if (v28 >= v27 >> 1)
  {
    v8 = (uint64_t)sub_42CE0((_QWORD *)(v27 > 1), v28 + 1, 1, (_QWORD *)v8);
    *v5 = v8;
  }
  *(_QWORD *)(v8 + 16) = v28 + 1;
  v29 = v8 + 16 * v28;
  *(_QWORD *)(v29 + 32) = v2;
  *(_QWORD *)(v29 + 40) = &protocol witness table for WKWebView;
  swift_endAccess(&v43);
  v30 = swift_retain_n(a2, 3);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(32, -1);
    *(_DWORD *)v33 = 134218496;
    v43 = *(_QWORD *)(a2[2] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v33 + 4);
    *(_WORD *)(v33 + 12) = 2048;
    swift_beginAccess(a2 + 3, &v43, 0, 0);
    v41 = *(_QWORD *)(a2[3] + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v33 + 14);
    swift_release();
    *(_WORD *)(v33 + 22) = 2048;
    v34 = a2[17];
    swift_release();
    v41 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v33 + 24);
    swift_release();
    _os_log_impl(&dword_0, v31, v32, "Appended returned #reuse contentView. Pool contentViews:%ld pending:%ld poolCount: %ld", (uint8_t *)v33, 0x20u);
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    swift_release_n(a2);
  }

}

void sub_C4F80(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  _QWORD *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void **v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void **aBlock;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t (*v55)();
  _QWORD *v56;
  _BYTE v57[24];

  v6 = sub_319AC(&qword_3B8450);
  *(_QWORD *)&v7 = __chkstk_darwin(v6).n128_u64[0];
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(a1, "be_processingContentViewForHost", v7);
  v10 = *(_QWORD *)(a3 + 128);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  type metadata accessor for MainActor(0);
  v12 = a1;
  v13 = static MainActor.shared.getter(v12);
  v14 = (_QWORD *)swift_allocObject(&unk_37F688, 48);
  v14[2] = v13;
  v14[3] = &protocol witness table for MainActor;
  v14[4] = v10;
  v14[5] = v12;
  sub_67B40((uint64_t)v9, (uint64_t)&unk_3B8460, (uint64_t)v14);
  *(_QWORD *)&v15 = swift_release().n128_u64[0];
  v16 = *(_QWORD *)(a3 + 88);
  v17 = OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager;
  v18 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v16
                                                              + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager), "font", v15));
  if (!v18)
    goto LABEL_3;
  v19 = v18;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v12, "be_isFontRegistered:", v22);
  swift_bridgeObjectRelease(v21);

  if (!v23)
  {
    sub_17BE34();
    swift_beginAccess(a2 + 16, v57, 1, 0);
    v25 = *(unsigned __int8 *)(a2 + 16);
    v49 = v16;
    LOBYTE(aBlock) = 3;
    if (v25 >= 3)
    {
      sub_17BF00((char *)&aBlock);
    }
    else
    {
      sub_17B314();
      *(_BYTE *)(a2 + 16) = 3;
    }
    v48 = v17;
    v26 = v12;
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (void **)swift_slowAlloc(32, -1);
      aBlock = v30;
      *(_DWORD *)v29 = 136315138;
      v31 = WKWebView.shortDescription.getter();
      v33 = v32;
      v50 = sub_33524(v31, v32, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &aBlock, v29 + 4);

      swift_bridgeObjectRelease(v33);
      _os_log_impl(&dword_0, v27, v28, "Attempting #reuse for contentView:%s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {

    }
    v34 = swift_allocObject(&unk_37F3F0, 24);
    swift_weakInit(v34 + 16, a3);
    v35 = (_QWORD *)swift_allocObject(&unk_37F6B0, 40);
    v35[2] = v34;
    v35[3] = v26;
    v35[4] = &protocol witness table for WKWebView;
    v36 = (void *)objc_opt_self(NSTimer);
    v37 = swift_allocObject(&unk_37F3F0, 24);
    swift_weakInit(v37 + 16, a3);
    v38 = swift_allocObject(&unk_37F418, 24);
    swift_weakInit(v38 + 16, a2);
    v39 = (_QWORD *)swift_allocObject(&unk_37F6D8, 48);
    v39[2] = v37;
    v39[3] = v38;
    v39[4] = sub_C749C;
    v39[5] = v35;
    v55 = sub_C74A0;
    v56 = v39;
    aBlock = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_51504;
    v54 = &unk_37F6F0;
    v40 = _Block_copy(&aBlock);
    v41 = v26;
    swift_retain();
    swift_release();
    v42 = objc_msgSend(v36, "scheduledTimerWithTimeInterval:repeats:block:", 0, v40, 4.0);
    _Block_release(v40);
    v43 = *(_QWORD *)(v49 + v48);
    v44 = swift_allocObject(&unk_37F418, 24);
    swift_weakInit(v44 + 16, a2);
    v45 = (_QWORD *)swift_allocObject(&unk_37F728, 48);
    v45[2] = v42;
    v45[3] = sub_C749C;
    v45[4] = v35;
    v45[5] = v44;
    v55 = sub_C74A4;
    v56 = v45;
    aBlock = _NSConcreteStackBlock;
    v52 = 1107296256;
    v53 = sub_525E4;
    v54 = &unk_37F740;
    v46 = _Block_copy(&aBlock);
    swift_retain();
    swift_unknownObjectRetain(v43);
    v47 = v42;
    swift_retain();
    swift_retain();
    objc_msgSend(v41, "be_configureFontWithStyleManager:completion:", v43, v46, swift_release().n128_f64[0]);
    _Block_release(v46);
    swift_release();

    swift_unknownObjectRelease(v43);
    swift_release();
    swift_release();
  }
  else
  {
LABEL_3:
    objc_msgSend(v12, "be_fontRegistrationCompleted:", 1);
    objc_msgSend(v12, "removeFromSuperview");
    v24 = a2 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document;
    swift_beginAccess(a2 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document, v57, 0, 0);
    sub_49F1C(v24, (uint64_t)&aBlock);
    sub_C5A7C(v12, (uint64_t)&aBlock, a3);
    sub_34488(&aBlock);
    sub_C61D8(v12, a2);
  }
}

double sub_C5560(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  double result;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(uint64_t, uint64_t (*)(int), _QWORD *, uint64_t, uint64_t);
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t aBlock[6];
  _BYTE v47[24];

  (*(void (**)(uint64_t, uint64_t))(a5 + 224))(a4, a5);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(a5 + 288))(*(_QWORD *)(a3 + 128), a4, a5);
  v10 = *(_QWORD *)(a3 + 88);
  v11 = OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager;
  v12 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v10
                                                              + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__styleManager), "font"));
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 256))(v14, v16, a4, a5);
  v18 = swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(a5 + 232))(1, a4, a5, v18);
    objc_msgSend(a1, "removeFromSuperview");
    v19 = a2 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document;
    swift_beginAccess(a2 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_document, v47, 0, 0);
    sub_49F1C(v19, (uint64_t)aBlock);
    sub_C5E28(a1, (uint64_t)aBlock, a3, a4, (void *)a5);
    sub_34488(aBlock);
    return sub_17C894(a1, a2, a4, a5);
  }
  else
  {
    sub_17BE34();
    swift_beginAccess(a2 + 16, v47, 1, 0);
    v44 = v10;
    if (*(unsigned __int8 *)(a2 + 16) >= 3u)
    {
      LOBYTE(aBlock[0]) = 3;
      sub_17BF00((char *)aBlock);
    }
    else
    {
      LOBYTE(aBlock[0]) = 3;
      sub_17B314();
      *(_BYTE *)(a2 + 16) = 3;
    }
    v42 = a2;
    v43 = v11;
    v21 = a1;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      aBlock[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 296))(a4, a5);
      v28 = v27;
      v45 = sub_33524(v26, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, aBlock, v24 + 4);

      swift_bridgeObjectRelease(v28);
      _os_log_impl(&dword_0, v22, v23, "Attempting #reuse for contentView:%s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {

    }
    v29 = swift_allocObject(&unk_37F3F0, 24);
    swift_weakInit(v29 + 16, a3);
    v30 = (_QWORD *)swift_allocObject(&unk_37F4E0, 40);
    v30[2] = v29;
    v30[3] = v21;
    v30[4] = a5;
    v31 = (void *)objc_opt_self(NSTimer);
    v32 = swift_allocObject(&unk_37F3F0, 24);
    swift_weakInit(v32 + 16, a3);
    v33 = swift_allocObject(&unk_37F418, 24);
    swift_weakInit(v33 + 16, v42);
    v34 = (_QWORD *)swift_allocObject(&unk_37F508, 48);
    v34[2] = v32;
    v34[3] = v33;
    v34[4] = sub_C6F00;
    v34[5] = v30;
    aBlock[4] = (uint64_t)sub_C6F10;
    aBlock[5] = (uint64_t)v34;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_51504;
    aBlock[3] = (uint64_t)&unk_37F520;
    v35 = _Block_copy(aBlock);
    v21;
    swift_retain();
    swift_release();
    v36 = objc_msgSend(v31, "scheduledTimerWithTimeInterval:repeats:block:", 0, v35, 4.0);
    _Block_release(v35);
    v37 = *(_QWORD *)(v44 + v43);
    v38 = swift_allocObject(&unk_37F418, 24);
    swift_weakInit(v38 + 16, v42);
    v39 = (_QWORD *)swift_allocObject(&unk_37F558, 48);
    v39[2] = v36;
    v39[3] = sub_C6F00;
    v39[4] = v30;
    v39[5] = v38;
    v40 = *(void (**)(uint64_t, uint64_t (*)(int), _QWORD *, uint64_t, uint64_t))(a5 + 264);
    swift_retain();
    swift_unknownObjectRetain(v37);
    v41 = v36;
    swift_retain();
    v40(v37, sub_C6F20, v39, a4, a5);
    swift_release();

    swift_unknownObjectRelease(v37);
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_C5A7C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  double v24;
  char v25;
  id v26;
  id v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49[2];
  char v50[24];

  v6 = sub_319AC(&qword_3BAD38);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - v10;
  v12 = sub_319AC(&qword_3BAD40);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_opt_self(WKWebView);
  v17 = swift_dynamicCastObjCClass(a1, v16);
  if (v17)
  {
    v18 = (void *)v17;
    v43 = a2;
    v44 = v13;
    v45 = v12;
    v19 = a1;
    v20 = objc_msgSend(v18, "hash");
    v21 = a3;
    v22 = (uint64_t)v20;
    v46 = v21;
    v23 = (_QWORD *)(v21 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations);
    *(_QWORD *)&v24 = swift_beginAccess(v21 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations, v50, 0, 0).n128_u64[0];
    if (*(_QWORD *)(*v23 + 16))
    {
      sub_3B7F8(v22);
      if ((v25 & 1) != 0)
        sub_C4464(v19, v46);
    }
    v40 = objc_msgSend(v18, "hash", v24);
    v42 = v19;
    v26 = objc_msgSend(v18, "scrollView");
    swift_getKeyPath(&unk_2EA650);
    v41 = v22;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

    v27 = objc_msgSend(v18, "scrollView", swift_release().n128_f64[0]);
    swift_getKeyPath(&unk_2EA650);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

    swift_release();
    v28 = sub_3DCC0(&qword_3BAD48, &qword_3BAD38, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
    Publisher.combineLatest<A>(_:)(v8, v6, v6, v28, v28);
    v29 = *(void (**)(char *, uint64_t))(v47 + 8);
    v29(v8, v6);
    v29(v11, v6);
    v30 = swift_allocObject(&unk_37F3F0, 24);
    swift_weakInit(v30 + 16, v46);
    v31 = swift_allocObject(&unk_37F580, 24);
    swift_unknownObjectWeakInit(v31 + 16, v18);
    sub_49F1C(v43, (uint64_t)v49);
    v32 = (_QWORD *)swift_allocObject(&unk_37F778, 80);
    v32[2] = v30;
    v32[3] = v31;
    v32[4] = v40;
    sub_3F1CC(v49, (uint64_t)(v32 + 5));
    v33 = sub_3DCC0(&qword_3BAD50, &qword_3BAD40, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
    v34 = v45;
    v35 = Publisher<>.sink(receiveValue:)(sub_C74C4, v32, v45, v33);
    v36 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v44 + 8))(v15, v34, v36);
    swift_beginAccess(v23, v49, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v23);
    v48 = *v23;
    *v23 = 0x8000000000000000;
    sub_17DE00(v35, v41, isUniquelyReferenced_nonNull_native);
    v38 = *v23;
    *v23 = v48;
    swift_bridgeObjectRelease(v38);
    swift_endAccess(v49);

  }
}

void sub_C5E28(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  _QWORD *v21;
  double v22;
  char v23;
  id v24;
  id v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47[2];
  char v48[24];

  v39 = a5;
  v45 = a3;
  v7 = sub_319AC(&qword_3BAD38);
  v43 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v37 - v11;
  v13 = sub_319AC(&qword_3BAD40);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_opt_self(WKWebView);
  v18 = swift_dynamicCastObjCClass(a1, v17);
  if (v18)
  {
    v19 = (void *)v18;
    v40 = a2;
    v41 = v14;
    v42 = v13;
    v20 = a1;
    v44 = objc_msgSend(v19, "hash");
    v21 = (_QWORD *)(v45 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations);
    *(_QWORD *)&v22 = swift_beginAccess(v45 + OBJC_IVAR____TtC8BookEPUB26ContentLoaderViewReusePool_contentSizeObservations, v48, 0, 0).n128_u64[0];
    if (*(_QWORD *)(*v21 + 16))
    {
      sub_3B7F8((uint64_t)v44);
      if ((v23 & 1) != 0)
        sub_C4464(v20, v45);
    }
    v38 = objc_msgSend(v19, "hash", v22);
    v39 = v20;
    v24 = objc_msgSend(v19, "scrollView");
    swift_getKeyPath(&unk_2EA650);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

    v25 = objc_msgSend(v19, "scrollView", swift_release().n128_f64[0]);
    swift_getKeyPath(&unk_2EA650);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

    swift_release();
    v26 = sub_3DCC0(&qword_3BAD48, &qword_3BAD38, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
    Publisher.combineLatest<A>(_:)(v9, v7, v7, v26, v26);
    v27 = *(void (**)(char *, uint64_t))(v43 + 8);
    v27(v9, v7);
    v27(v12, v7);
    v28 = swift_allocObject(&unk_37F3F0, 24);
    swift_weakInit(v28 + 16, v45);
    v29 = swift_allocObject(&unk_37F580, 24);
    swift_unknownObjectWeakInit(v29 + 16, v19);
    sub_49F1C(v40, (uint64_t)v47);
    v30 = (_QWORD *)swift_allocObject(&unk_37F5A8, 80);
    v30[2] = v28;
    v30[3] = v29;
    v30[4] = v38;
    sub_3F1CC(v47, (uint64_t)(v30 + 5));
    v31 = sub_3DCC0(&qword_3BAD50, &qword_3BAD40, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
    v32 = v42;
    v33 = Publisher<>.sink(receiveValue:)(sub_C6FA4, v30, v42, v31);
    v34 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v41 + 8))(v16, v32, v34);
    swift_beginAccess(v21, v47, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v21);
    v46 = *v21;
    *v21 = 0x8000000000000000;
    sub_17DE00(v33, (uint64_t)v44, isUniquelyReferenced_nonNull_native);
    v36 = *v21;
    *v21 = v46;
    swift_bridgeObjectRelease(v36);
    swift_endAccess(v47);

  }
}

double sub_C61D8(void *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  void (*v7)(_QWORD *);
  id v8;
  double result;
  _QWORD v10[2];
  char v11;
  _BYTE v12[24];
  _BYTE v13[24];

  v4 = a2 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_contentView;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_contentView, v13, 1, 0);
  v5 = *(void **)v4;
  *(_QWORD *)v4 = a1;
  *(_QWORD *)(v4 + 8) = &protocol witness table for WKWebView;
  v6 = a1;

  swift_beginAccess(a2 + 16, v12, 1, 0);
  if (((1 << *(_BYTE *)(a2 + 16)) & 0xD) != 0)
  {
    LOBYTE(v10[0]) = 4;
    sub_17B314();
    *(_BYTE *)(a2 + 16) = 4;
  }
  else
  {
    LOBYTE(v10[0]) = 4;
    sub_17BF00((char *)v10);
  }
  v7 = *(void (**)(_QWORD *))(a2 + OBJC_IVAR____TtC8BookEPUB15ContentViewHost_updateContentView);
  v10[0] = a1;
  v10[1] = &protocol witness table for WKWebView;
  v11 = 0;
  v8 = v6;
  swift_retain();
  v7(v10);

  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

id sub_C62E0()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *i;
  void *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t (*v10)(uint64_t, uint64_t);
  id v11;
  id v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  id v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double (*v38)(uint64_t, uint64_t, __n128);
  __n128 v39;
  double v40;
  double v41;
  double v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  os_log_type_t type;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  char v68[24];

  v1 = v0;
  v2 = v0 + 2;
  swift_beginAccess(v0 + 2, v68, 0, 0);
  v3 = v0[2];
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  swift_bridgeObjectRetain(v0[2]);
  v5 = 0;
  for (i = (uint64_t *)(v3 + 40); ; i += 2)
  {
    v7 = (void *)*(i - 1);
    v8 = *i;
    ObjectType = swift_getObjectType(v7);
    v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 40);
    v11 = v7;
    LOBYTE(v8) = v10(ObjectType, v8);

    if ((v8 & 1) != 0)
      break;
    if (v4 == ++v5)
    {
      swift_bridgeObjectRelease(v3);
      return 0;
    }
  }
  swift_bridgeObjectRelease(v3);
  swift_beginAccess(v2, &v66, 33, 0);
  v14 = (void *)sub_C01E4(v5);
  v16 = v15;
  swift_endAccess(&v66);
  v17 = objc_opt_self(WKWebView);
  v18 = swift_dynamicCastObjCClass(v14, v17);
  if (v18)
  {
    v19 = (void *)v18;
    v20 = v14;
    if (objc_msgSend(v19, "be_contentViewState") != 3)
    {
      v21 = v20;
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v64 = v20;
        type = v23;
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v63 = swift_slowAlloc(32, -1);
        v66 = v63;
        *(_DWORD *)v24 = 136315138;
        v25 = objc_msgSend(v19, "be_identifier");
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v28 = v27;

        v20 = v64;
        v65 = sub_33524(v26, v28, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v24 + 4);

        swift_bridgeObjectRelease(v28);
        _os_log_impl(&dword_0, v22, type, "Invalid state for webView %s when dequeuing from pool.", v24, 0xCu);
        swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v63, -1, -1);
        swift_slowDealloc(v24, -1, -1);
      }
      else
      {

      }
    }
    if (objc_msgSend(v19, "be_requiresReload"))
    {
      v29 = objc_msgSend(v19, "be_navigationHandler");
      objc_msgSend(v29, "attemptReload");

    }
  }
  v30 = swift_getObjectType(v14);
  objc_msgSend(v14, "frame");
  v32 = v31;
  v34 = v33;
  v35 = v1[14];
  v36 = v1[15];
  v37 = swift_getObjectType(v35);
  v38 = *(double (**)(uint64_t, uint64_t, __n128))(v36 + 48);
  v39 = swift_unknownObjectRetain(v35);
  v40 = v38(v37, v36, v39);
  v42 = v41;
  swift_unknownObjectRelease(v35);
  objc_msgSend(v14, "setFrame:", v32, v34, v40, v42);
  v43 = v14;
  swift_retain_n(v1, 2);
  v12 = v43;
  v44 = Logger.logObject.getter(v12);
  v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc(32, -1);
    v47 = swift_slowAlloc(64, -1);
    v65 = v47;
    *(_DWORD *)v46 = 136315650;
    v48 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 296))(v30, v16);
    v50 = v49;
    v66 = sub_33524(v48, v49, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v46 + 4);

    v51 = swift_bridgeObjectRelease(v50);
    *(_WORD *)(v46 + 12) = 2080;
    v52 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, __n128))(v16 + 8))(v30, v16, v51);
    objc_msgSend(v52, "contentSize");
    v54 = v53;
    v56 = v55;

    v66 = v54;
    v67[0] = v56;
    type metadata accessor for CGSize(0);
    v58 = String.init<A>(describing:)(&v66, v57);
    v60 = v59;
    v66 = sub_33524(v58, v59, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v46 + 14);

    swift_bridgeObjectRelease(v60);
    *(_WORD *)(v46 + 22) = 2048;
    v61 = v1[17];
    swift_release();
    v66 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v46 + 24);
    swift_release();
    _os_log_impl(&dword_0, v44, v45, "De-queue #reuse contentView:%s size:%s PoolCount: %ld", (uint8_t *)v46, 0x20u);
    swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v12;
}

uint64_t sub_C6880()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_C68A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_C68D0(uint64_t a1)
{
  uint64_t v1;

  sub_BF904(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_C68D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_C68E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_C68F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_C6924(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_BFB90(a1, a2, *(id *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_C6930()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release();
  sub_34488(v0 + 5);
  swift_release();
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_C6974(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[10];
  v8 = v1[11];
  v9 = v1[12];
  v10 = (_QWORD *)swift_task_alloc(dword_3BA9B4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_3F0C0;
  return sub_C0880(a1, v4, v5, v6, (uint64_t)(v1 + 5), v7, v8, v9);
}

uint64_t sub_C6A20()
{
  return type metadata accessor for ContentLoaderViewReusePool(0);
}

uint64_t type metadata accessor for ContentLoaderViewReusePool(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3BAA18, (uint64_t)&nominal type descriptor for ContentLoaderViewReusePool);
}

uint64_t sub_C6A3C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[20];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = &unk_2EA5B0;
  v4[5] = &unk_2EA5C8;
  v4[6] = &unk_2EA5E0;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[9] = &unk_2EA5F8;
  v4[10] = &unk_2EA5E0;
  v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[13] = *(_QWORD *)(result - 8) + 64;
    v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[16] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[19] = (char *)&value witness table for Builtin.BridgeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 20, v4, a1 + 80);
  }
  return result;
}

uint64_t method lookup function for ContentLoaderViewReusePool(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ContentLoaderViewReusePool);
}

uint64_t dispatch thunk of ContentLoaderViewReusePool.__allocating_init(contentType:imageFilterMode:lineGuideEnabled:paginatingService:layoutProvider:stylesheetProvider:contentBlockingRules:reloadAction:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 464))();
}

_QWORD *sub_C6B40(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_C6BC8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_C6BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_C6C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_C6CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_C6D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_C6D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_C6D78);
}

uint64_t sub_C6D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 4)
    return v9 - 3;
  else
    return 0;
}

uint64_t sub_C6DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_C6DFC);
}

uint64_t sub_C6DFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 3;
  return result;
}

uint64_t type metadata accessor for ContentLoaderViewReusePool.DataEvent(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3BAD00, (uint64_t)&nominal type descriptor for ContentLoaderViewReusePool.DataEvent);
}

uint64_t sub_C6E88(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_2EA5C8;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_C6EF8()
{
  return sub_C72A8(40);
}

double sub_C6F00(uint64_t a1)
{
  uint64_t v1;

  return sub_C02C0(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

double sub_C6F10(uint64_t a1)
{
  uint64_t v1;

  return sub_C053C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(void))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_C6F20(int a1)
{
  uint64_t v1;

  return sub_C0810(a1, *(id *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

const char *sub_C6F2C()
{
  return "contentSize";
}

id sub_C6F38@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend(*a1, "contentSize");
  *a2 = v4;
  a2[1] = v5;
  return result;
}

id sub_C6F68(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setContentSize:", *a1, a1[1]);
}

uint64_t sub_C6F7C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_C6FA4(double *a1)
{
  uint64_t *v1;

  sub_C1EF0(a1, v1[2], v1[3], v1[4], v1 + 5);
}

unint64_t sub_C6FB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8CA0;
  if (!qword_3B8CA0)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_3B8CA0);
  }
  return result;
}

uint64_t sub_C6FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentLoaderViewReusePool.DataEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_C7040(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentLoaderViewReusePool.DataEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_C7084(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ContentLoaderViewReusePool.DataEvent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_C70C0()
{
  uint64_t v0;

  swift_release();
  sub_34488((_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 72, 7);
}

void sub_C70F4(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_C38AC(a1, *(_QWORD *)(v1 + 16), v1 + 24, *(void **)(v1 + 64));
}

unint64_t sub_C7104()
{
  unint64_t result;

  result = qword_3BAD58;
  if (!qword_3BAD58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationError, &type metadata for PaginationError);
    atomic_store(result, (unint64_t *)&qword_3BAD58);
  }
  return result;
}

uint64_t sub_C7148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ContentLoaderViewReusePool.DataEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

const char *sub_C7190()
{
  return "be_fontFamiliesHavingFailedRegistration";
}

uint64_t sub_C71A0()
{
  return sub_C72A8(32);
}

double sub_C71A8(uint64_t *a1)
{
  uint64_t v1;

  return sub_C3800(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_C71B0()
{
  return sub_C72A8(32);
}

void sub_C71B8()
{
  uint64_t v0;

  sub_C1B64(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_C71C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id *v4;
  uint64_t v5;
  id v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0;
  v4 = (id *)(a1 + 32);
  sub_34450(0, (unint64_t *)&qword_3B5C30, NSObject_ptr);
  v5 = 0;
  while (1)
  {
    v6 = *v4;
    v7 = static NSObject.== infix(_:_:)(v6, a2);

    if ((v7 & 1) != 0)
      break;
    ++v5;
    v4 += 2;
    if (v2 == v5)
      return 0;
  }
  return v5;
}

uint64_t sub_C7274()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_C72A0()
{
  return sub_C72A8(40);
}

uint64_t sub_C72A8(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_C72E4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_C731C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_C7354()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_34488((_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t storeEnumTagSinglePayload for ContentLoaderViewReusePool.DataGathered(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_C73D4 + 4 * byte_2EA4BD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_C7408 + 4 * byte_2EA4B8[v4]))();
}

uint64_t sub_C7408(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C7410(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC7418);
  return result;
}

uint64_t sub_C7424(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC742CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_C7430(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C7438(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentLoaderViewReusePool.DataGathered()
{
  return &type metadata for ContentLoaderViewReusePool.DataGathered;
}

unint64_t sub_C7458()
{
  unint64_t result;

  result = qword_3BAD88;
  if (!qword_3BAD88)
  {
    result = swift_getWitnessTable(&unk_2EA744, &type metadata for ContentLoaderViewReusePool.DataGathered);
    atomic_store(result, (unint64_t *)&qword_3BAD88);
  }
  return result;
}

uint64_t sub_C74C8()
{
  uint64_t v0;
  __n128 v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3BAD90);
  sub_555F0(v0, (uint64_t)qword_3BAD90);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD000000000000014, 0x80000000002CA7E0, v1);
}

uint64_t sub_C7548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[9];
  _BYTE v71[24];

  v3 = type metadata accessor for BookContentLayoutController.Selection(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_319AC(&qword_3BAEE0);
  v8 = __chkstk_darwin(v7);
  v69 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v66 - v10;
  v12 = sub_319AC(&qword_3BAEE8);
  __chkstk_darwin(v12);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection;
  swift_beginAccess(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection, v71, 0, 0);
  v16 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_CA854(a1, (uint64_t)v14);
  v68 = v15;
  sub_CA854(v15, v16);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v18 = v17(v14, 1, v3);
  v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
  if (v18 == 1)
  {
    if (v17((char *)v16, 1, v3) == 1)
      return sub_52128((uint64_t)v14, &qword_3BAEE0);
    v20 = &qword_3BAEE8;
  }
  else
  {
    sub_CA854((uint64_t)v14, (uint64_t)v11);
    if (v17((char *)v16, 1, v3) == 1)
    {
      v20 = &qword_3BAEE8;
    }
    else
    {
      sub_CB734(v16, (uint64_t)v6);
      if ((static UUID.== infix(_:_:)(v11, v6) & 1) != 0)
      {
        v21 = *(int *)(v3 + 20);
        v22 = *(_QWORD *)&v11[v21];
        v23 = *(_QWORD *)&v11[v21 + 8];
        v24 = *(_QWORD *)&v11[v21 + 16];
        v25 = &v6[v21];
        v26 = *((_QWORD *)v25 + 1);
        v27 = *((_QWORD *)v25 + 2);
        v28 = v22 == *(_QWORD *)v25 && v23 == v26;
        if (v28
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, *(_QWORD *)v25, *((_QWORD *)v25 + 1), 0) & 1) != 0)
        {
          swift_bridgeObjectRetain(v23);
          swift_bridgeObjectRetain(v24);
          swift_bridgeObjectRetain(v26);
          swift_bridgeObjectRetain(v27);
          v29 = sub_65864(v24, v27);
          swift_bridgeObjectRelease(v24);
          swift_bridgeObjectRelease(v23);
          swift_bridgeObjectRelease(v27);
          swift_bridgeObjectRelease(v26);
          if (v29)
          {
            sub_CB6F8((uint64_t)v6);
            sub_CB6F8((uint64_t)v11);
            return sub_52128((uint64_t)v14, &qword_3BAEE0);
          }
        }
      }
      sub_CB6F8((uint64_t)v6);
      v20 = &qword_3BAEE0;
    }
    sub_CB6F8((uint64_t)v11);
  }
  v66 = v3;
  sub_52128((uint64_t)v14, v20);
  v30 = *(unsigned __int8 *)(v1
                           + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_isContentSelectionFromRightClick);
  *(_BYTE *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_isContentSelectionFromRightClick) = 2;
  if (v30 != 2)
  {
    v31 = v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection;
    v32 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection);
    v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 8);
    v34 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 16);
    v35 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 24);
    v36 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 32);
    v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 40);
    v38 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 48);
    v39 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 56);
    v40 = *(_OWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 64);
    v41 = *(_OWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 80);
    v42 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 96);
    *(_OWORD *)v31 = 0u;
    *(_OWORD *)(v31 + 16) = 0u;
    *(_OWORD *)(v31 + 32) = 0u;
    *(_OWORD *)(v31 + 48) = 0u;
    *(_OWORD *)(v31 + 64) = 0u;
    *(_OWORD *)(v31 + 80) = 0u;
    *(_QWORD *)(v31 + 96) = 0;
    sub_CA7DC(v32, v33, v34, v35, v36, v37, v38, v39, v40, *((uint64_t *)&v40 + 1), v41, *((uint64_t *)&v41 + 1), v42);
  }
  v43 = v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection;
  v44 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection);
  v45 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 8);
  v46 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 16);
  v47 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 24);
  v48 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 32);
  v49 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 40);
  v50 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 48);
  v51 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 56);
  v52 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 64);
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)(v43 + 16) = 0u;
  *(_OWORD *)(v43 + 32) = 0u;
  *(_OWORD *)(v43 + 48) = 0u;
  *(_QWORD *)(v43 + 64) = 0;
  sub_CB658(v44, v45, v46, v47, v48, v49, v50);
  sub_CB6A8(v44, v45, v46, v47, v48, v49, v50);
  v70[0] = v44;
  v70[1] = v45;
  v70[2] = v46;
  v70[3] = v47;
  v70[4] = v48;
  v70[5] = v49;
  v70[6] = v50;
  v70[7] = v51;
  v70[8] = v52;
  sub_C7CCC(v70);
  sub_CB6A8(v44, v45, v46, v47, v48, v49, v50);
  v53 = v69;
  sub_CA854(v68, v69);
  LODWORD(v52) = v67(v53, 1, v66);
  sub_52128(v53, &qword_3BAEE0);
  if ((_DWORD)v52 != 1)
    sub_C79D4(0, 0);
  v54 = v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection;
  v55 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection);
  v56 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 8);
  v57 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 16);
  v58 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 24);
  v59 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 32);
  v60 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 40);
  v61 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 48);
  v62 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 56);
  v63 = *(_OWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 64);
  v64 = *(_OWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 80);
  v65 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 96);
  *(_OWORD *)v54 = 0u;
  *(_OWORD *)(v54 + 16) = 0u;
  *(_OWORD *)(v54 + 32) = 0u;
  *(_OWORD *)(v54 + 48) = 0u;
  *(_OWORD *)(v54 + 64) = 0u;
  *(_OWORD *)(v54 + 80) = 0u;
  *(_QWORD *)(v54 + 96) = 0;
  return sub_CA7DC(v55, v56, v57, v58, v59, v60, v61, v62, v63, *((uint64_t *)&v63 + 1), v64, *((uint64_t *)&v64 + 1), v65);
}

double sub_C79D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  double result;

  v4 = (_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID);
  v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID + 8);
  *v4 = a1;
  v4[1] = a2;
  if (v6)
  {
    if (a2)
    {
      v7 = v5 == a1 && v6 == a2;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, a1, a2, 0) & 1) != 0)
        goto LABEL_11;
    }
  }
  else if (!a2)
  {
    return result;
  }
  v8 = v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection;
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection);
  v10 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 8);
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 16);
  v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 24);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 32);
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 40);
  v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 48);
  v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 56);
  v17 = *(_OWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 64);
  v18 = *(_OWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 80);
  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 96);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_QWORD *)(v8 + 96) = 0;
  sub_CA7DC(v9, v10, v11, v12, v13, v14, v15, v16, v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19);
LABEL_11:
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

uint64_t sub_C7A94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t);
  uint64_t v24;
  _BYTE v26[24];
  _BYTE v27[24];

  v1 = type metadata accessor for ContinuousClock.Instant(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __chkstk_darwin(v3);
  v8 = &v26[-v7];
  __chkstk_darwin(v6);
  v10 = &v26[-v9];
  v11 = sub_319AC(&qword_3BAEE0);
  __chkstk_darwin(v11);
  v13 = &v26[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection;
  swift_beginAccess(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection, v27, 0, 0);
  sub_CA854(v14, (uint64_t)v13);
  v15 = type metadata accessor for BookContentLayoutController.Selection(0);
  LODWORD(v14) = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v13, 1, v15);
  sub_52128((uint64_t)v13, &qword_3BAEE0);
  if ((_DWORD)v14 == 1)
  {
    v16 = 0;
  }
  else if (*(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 8))
  {
    v17 = v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelectionTimestamp;
    v18 = swift_beginAccess(v17, v26, 0, 0);
    v19 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, __n128))(v2 + 16))(v10, v17, v1, v18);
    v20 = static ContinuousClock.Instant.now.getter(v19);
    v21 = static Duration.zero.getter(v20);
    v22 = static Duration.- infix(_:_:)(v21);
    ContinuousClock.Instant.advanced(by:)(v22);
    v23 = *(void (**)(_BYTE *, uint64_t))(v2 + 8);
    v23(v5, v1);
    v24 = sub_34284(&qword_3BAF18, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v16 = dispatch thunk of static Comparable.< infix(_:_:)(v10, v8, v1, v24) ^ 1;
    v23(v8, v1);
    v23(v10, v1);
  }
  else
  {
    v16 = 1;
  }
  return v16 & 1;
}

uint64_t sub_C7CCC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[7];
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v3 = type metadata accessor for ContinuousClock.Instant(0);
  result = __chkstk_darwin(v3);
  v59 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a1[6];
  v13 = a1[7];
  v14 = a1[8];
  v62 = v1;
  v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection);
  v15 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 8);
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 16);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 24);
  v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 32);
  v19 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 40);
  v21 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 48);
  v22 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 56);
  v23 = *(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 64);
  v61 = result;
  v60 = v24;
  if (v7)
  {
    v66 = v6;
    v67 = v7;
    v68 = v9;
    v69 = v8;
    v70 = v10;
    v71 = v11;
    v72 = v12;
    v73 = v13;
    v74 = v14;
    v58 = v6;
    v57 = v14;
    if (v15)
    {
      v63[0] = v16;
      v63[1] = v15;
      v63[2] = v18;
      v63[3] = v17;
      v63[4] = v20;
      v63[5] = v19;
      v63[6] = v21;
      v64 = v22 & 1;
      v65 = v23;
      v25 = v9;
      v26 = v8;
      v27 = v10;
      v28 = v11;
      v29 = v12;
      v30 = v6;
      sub_CB658(v6, v7, v9, v8, v10, v11, v12);
      sub_CB658(v30, v7, v25, v26, v27, v11, v29);
      LODWORD(v56) = _s8BookEPUB14ContentMessageO9SelectionV2eeoiySbAE_AEtFZ_0(&v66, (uint64_t)v63);
      v31 = v67;
      v32 = v69;
      v33 = v70;
      swift_bridgeObjectRelease(v72);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v32);
      swift_bridgeObjectRelease(v31);
      result = sub_CB6A8(v58, v7, v25, v26, v27, v28, v29);
      if ((v56 & 1) != 0)
        return result;
LABEL_9:
      v35 = v59;
      static ContinuousClock.Instant.now.getter(result);
      v36 = v62;
      v37 = v62 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelectionTimestamp;
      v38 = swift_beginAccess(v62 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelectionTimestamp, &v66, 33, 0);
      (*(void (**)(uint64_t, char *, uint64_t, __n128))(v60 + 40))(v37, v35, v61, v38);
      swift_endAccess(&v66);
      v39 = v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection;
      v40 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection);
      v41 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 8);
      v42 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 16);
      v43 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 24);
      v44 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 32);
      v45 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 40);
      v46 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 48);
      v47 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 56);
      v48 = *(_OWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 64);
      v49 = *(_OWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 80);
      v50 = *(_QWORD *)(v36 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 96);
      *(_OWORD *)v39 = 0u;
      *(_OWORD *)(v39 + 16) = 0u;
      *(_OWORD *)(v39 + 32) = 0u;
      *(_OWORD *)(v39 + 48) = 0u;
      *(_OWORD *)(v39 + 64) = 0u;
      *(_OWORD *)(v39 + 80) = 0u;
      *(_QWORD *)(v39 + 96) = 0;
      return sub_CA7DC(v40, v41, v42, v43, v44, v45, v46, v47, v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50);
    }
    v54 = v9;
    v55 = v8;
    v56 = v10;
    v51 = v19;
    v34 = v12;
    v52 = v21;
    v53 = v22;
    sub_CB658(v6, v7, v9, v8, v10, v11, v12);
    v19 = v51;
    v21 = v52;
    v22 = v53;
    v14 = v57;
    v6 = v58;
    v9 = v54;
    v8 = v55;
    v10 = v56;
    v12 = v34;
LABEL_8:
    v66 = v6;
    v67 = v7;
    v68 = v9;
    v69 = v8;
    v70 = v10;
    v71 = v11;
    v72 = v12;
    v73 = v13;
    v74 = v14;
    v75 = v16;
    v76 = v15;
    v77 = v18;
    v78 = v17;
    v79 = v20;
    v80 = v19;
    v81 = v21;
    v82 = v22;
    v83 = v23;
    sub_CB658(v16, v15, v18, v17, v20, v19, v21);
    result = (uint64_t)sub_CB778(&v66);
    goto LABEL_9;
  }
  if (v15)
    goto LABEL_8;
  return result;
}

uint64_t sub_C80A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;

  v14 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  sub_C8120(a1, a2, a3, a4, v15, a6, a7);
  return v14;
}

_QWORD *sub_C8120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, __n128);
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43[2];

  v8 = v7;
  v40 = a4;
  v14 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_319AC(&qword_3BAEF0);
  v42 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (char *)v8 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection;
  v21 = type metadata accessor for BookContentLayoutController.Selection(0);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *((_BYTE *)v8 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_isContentSelectionFromRightClick) = 2;
  v23 = (char *)v8 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection;
  *(_OWORD *)v23 = 0u;
  *((_OWORD *)v23 + 1) = 0u;
  *((_OWORD *)v23 + 2) = 0u;
  *((_OWORD *)v23 + 3) = 0u;
  *((_QWORD *)v23 + 8) = 0;
  static ContinuousClock.Instant.now.getter(v22);
  v24 = (_QWORD *)((char *)v8 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID);
  *v24 = 0;
  v24[1] = 0;
  v25 = (char *)v8 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection;
  *(_OWORD *)v25 = 0u;
  *((_OWORD *)v25 + 1) = 0u;
  *((_OWORD *)v25 + 2) = 0u;
  *((_OWORD *)v25 + 3) = 0u;
  *((_OWORD *)v25 + 4) = 0u;
  *((_OWORD *)v25 + 5) = 0u;
  *((_QWORD *)v25 + 12) = 0;
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_annotationChangeTask) = 0;
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a6;
  v8[5] = a3;
  v26 = a3;
  v41 = a3;
  v8[6] = a7;
  v27 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a6 + 40);
  swift_retain(a1);
  swift_unknownObjectRetain(a2);
  v28 = swift_unknownObjectRetain(v26);
  v43[1] = (id)v27(v40, a6, v28);
  v29 = sub_5B5E4();
  v43[0] = (id)static OS_dispatch_queue.main.getter();
  v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v16, 1, 1, v30);
  v31 = sub_319AC(&qword_3BAEF8);
  v32 = sub_3DCC0(&qword_3BAF00, &qword_3BAEF8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v33 = sub_34284((unint64_t *)&qword_3B8E80, (uint64_t (*)(uint64_t))sub_5B5E4, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(v43, v16, v31, v29, v32, v33);
  sub_52128((uint64_t)v16, (uint64_t *)&unk_3B80B0);

  swift_release();
  v34 = swift_allocObject(&unk_37F880, 24, 7);
  swift_weakInit(v34 + 16, v8);
  v35 = sub_3DCC0(&qword_3BAF08, &qword_3BAEF0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v36 = Publisher<>.sink(receiveValue:)(sub_CB83C, v34, v17, v35);
  swift_release();
  swift_unknownObjectRelease(a2);
  swift_unknownObjectRelease(v41);
  v37 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v42 + 8))(v19, v17, v37);
  *(_QWORD *)((char *)v8 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_annotationChangeTask) = v36;
  swift_release();
  return v8;
}

double sub_C8458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _BYTE v17[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v17, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection;
    v6 = *(_QWORD *)(Strong + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection);
    v7 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    v10 = *(_QWORD *)(v5 + 32);
    v11 = *(_QWORD *)(v5 + 40);
    v12 = *(_QWORD *)(v5 + 48);
    v13 = *(_QWORD *)(v5 + 56);
    v14 = *(_OWORD *)(v5 + 64);
    v15 = *(_OWORD *)(v5 + 80);
    v16 = *(_QWORD *)(v5 + 96);
    *(_OWORD *)v5 = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_QWORD *)(v5 + 96) = 0;
    sub_CA7DC(v6, v7, v8, v9, v10, v11, v12, v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_C84EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  sub_52128(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection, &qword_3BAEE0);
  sub_CB6A8(*(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 48));
  v1 = v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelectionTimestamp;
  v2 = type metadata accessor for ContinuousClock.Instant(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID
                                      + 8));
  sub_CA7DC(*(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 24), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 32), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 40), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 48), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 56), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 64), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 72), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 80), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 88), *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 96));
  swift_release();
  return v0;
}

uint64_t sub_C85E4()
{
  uint64_t v0;

  sub_C84EC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_C8608()
{
  return _s16SelectionManagerCMa(0);
}

uint64_t _s16SelectionManagerCMa(uint64_t a1)
{
  uint64_t result;

  result = qword_3BAE08;
  if (!qword_3BAE08)
    return swift_getSingletonMetadata(a1, &_s16SelectionManagerCMn);
  return result;
}

void sub_C864C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[10];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = &unk_2EA7B8;
  v6[2] = &unk_2EA7B8;
  sub_C871C(319);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    v6[4] = &unk_2EA7D0;
    v6[5] = &unk_2EA7E8;
    v4 = type metadata accessor for ContinuousClock.Instant(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      v6[7] = &unk_2EA800;
      v6[8] = &unk_2EA818;
      v6[9] = &unk_2EA830;
      swift_updateClassMetadata2(a1, 256, 10, v6, a1 + 80);
    }
  }
}

void sub_C871C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3BAE18)
  {
    v2 = type metadata accessor for BookContentLayoutController.Selection(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3BAE18);
  }
}

uint64_t sub_C8770@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD v58[6];
  uint64_t v59;
  char v60[24];

  v2 = v1;
  v4 = sub_319AC(&qword_3BAEE0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)v58 - v8;
  sub_1C1E4C((uint64_t)v58 - v8);
  v10 = v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection;
  swift_beginAccess(v10, v60, 0, 0);
  sub_CA854(v10, (uint64_t)v7);
  swift_beginAccess(v10, v58, 33, 0);
  sub_CA89C((uint64_t)v9, v10);
  swift_endAccess(v58);
  sub_C7548((uint64_t)v7);
  sub_52128((uint64_t)v9, &qword_3BAEE0);
  sub_52128((uint64_t)v7, &qword_3BAEE0);
  v11 = OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_isContentSelectionFromRightClick;
  if (*(_BYTE *)(v2
                + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_isContentSelectionFromRightClick) == 2)
  {
    v12 = sub_C7A94();
    v13 = *(unsigned __int8 *)(v2 + v11);
    *(_BYTE *)(v2 + v11) = v12 & 1;
    v15 = v13 == 2;
    v14 = v13 & 1;
    v15 = !v15 && (v12 & 1) == v14;
    if (!v15)
    {
      v16 = v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection;
      v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection);
      v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 8);
      v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 16);
      v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 24);
      v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 32);
      v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 40);
      v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 48);
      v24 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 56);
      v25 = *(_OWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 64);
      v26 = *(_OWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 80);
      v27 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 96);
      *(_OWORD *)v16 = 0u;
      *(_OWORD *)(v16 + 16) = 0u;
      *(_OWORD *)(v16 + 32) = 0u;
      *(_OWORD *)(v16 + 48) = 0u;
      *(_OWORD *)(v16 + 64) = 0u;
      *(_OWORD *)(v16 + 80) = 0u;
      *(_QWORD *)(v16 + 96) = 0;
      sub_CA7DC(v17, v18, v19, v20, v21, v22, v23, v24, v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27);
    }
  }
  v28 = (uint64_t *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection);
  v29 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 16);
  if (!v29)
  {
    sub_C89C0(v58);
    v30 = v59;
    v31 = *v28;
    v32 = v28[1];
    v33 = v28[2];
    v34 = v28[3];
    v35 = v28[4];
    v36 = v28[5];
    v37 = v28[6];
    v38 = v28[7];
    v39 = *((_OWORD *)v28 + 4);
    v40 = *((_OWORD *)v28 + 5);
    v41 = v28[12];
    v42 = v58[1];
    *(_OWORD *)v28 = v58[0];
    *((_OWORD *)v28 + 1) = v42;
    v43 = v58[3];
    *((_OWORD *)v28 + 2) = v58[2];
    *((_OWORD *)v28 + 3) = v43;
    v44 = v58[5];
    *((_OWORD *)v28 + 4) = v58[4];
    *((_OWORD *)v28 + 5) = v44;
    v28[12] = v30;
    sub_CA7DC(v31, v32, v33, v34, v35, v36, v37, v38, v39, *((uint64_t *)&v39 + 1), v40, *((uint64_t *)&v40 + 1), v41);
    v29 = v28[2];
  }
  v45 = *v28;
  v46 = v28[1];
  v47 = v28[3];
  v48 = v28[4];
  v49 = v28[5];
  v50 = v28[6];
  v51 = v28[7];
  v52 = v28[8];
  v53 = v28[9];
  v54 = v28[10];
  v55 = v28[11];
  v56 = v28[12];
  *a1 = *v28;
  a1[1] = v46;
  a1[2] = v29;
  a1[3] = v47;
  a1[4] = v48;
  a1[5] = v49;
  a1[6] = v50;
  a1[7] = v51;
  a1[8] = v52;
  a1[9] = v53;
  a1[10] = v54;
  a1[11] = v55;
  a1[12] = v56;
  return sub_CB844(v45, v46, v29, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56);
}

double sub_C89C0@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t ObjectType;
  _QWORD *(*v52)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t (*v57)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  double result;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  __n128 v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  char v150[32];

  v2 = v1;
  v139 = a1;
  v3 = type metadata accessor for SuspendingClock.Instant(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v128 - v8;
  v10 = sub_319AC(&qword_3BAEE0);
  __chkstk_darwin(v10);
  v12 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BookContentLayoutController.Selection(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v138 = (uint64_t)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v18 = (char *)&v128 - v17;
  v19 = v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection;
  swift_beginAccess(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection, v150, 0, 0);
  sub_CA854(v19, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    sub_CB734((uint64_t)v12, (uint64_t)v18);
    v20 = (uint64_t)v18;
    if (*(_BYTE *)(v2
                  + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_isContentSelectionFromRightClick) == 2)
    {
      sub_CB6F8((uint64_t)v18);
      goto LABEL_5;
    }
    LODWORD(v137) = *(unsigned __int8 *)(v2
                                       + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_isContentSelectionFromRightClick);
    v34 = (uint64_t *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection);
    v35 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 8);
    if (v35)
    {
      v36 = *v34;
      v37 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000) == 0)
        v37 = *v34 & 0xFFFFFFFFFFFFLL;
      if (v37)
      {
        v38 = v34[3];
        v134 = v34[2];
        v39 = v34[4];
        v40 = v34[5];
        v41 = v34[6];
        v133 = v34[7];
        v131 = v34[8];
        v42 = qword_3B5758;
        swift_bridgeObjectRetain(v35);
        v138 = v38;
        swift_bridgeObjectRetain(v38);
        v132 = v39;
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v41);
        if (v42 != -1)
          swift_once(&qword_3B5758, sub_C74C8);
        v135 = v36;
        v43 = type metadata accessor for Logger(0);
        v44 = sub_555F0(v43, (uint64_t)qword_3BAD90);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v45, v46))
        {
          v47 = v40;
          v48 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v48 = 0;
          _os_log_impl(&dword_0, v45, v46, "Creating content selection WITH jsSelection", v48, 2u);
          v49 = v48;
          v40 = v47;
          swift_slowDealloc(v49, -1, -1);
        }

        v50 = *(_QWORD *)(v2 + 32);
        ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 24));
        v52 = *(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 72);
        v136 = v40;
        v53 = v52(&v141, v40, v41, ObjectType, v50);
        v54 = v142;
        v129 = v141;
        v55 = v144;
        v130 = (_QWORD *)v143;
        v56 = *((_QWORD *)&v144 + 1);
        if ((v137 & 1) != 0 && v142 && *((_QWORD *)&v144 + 1))
        {
          v128 = v41;
          v137 = v20;
          v57 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v50 + 104);
          swift_bridgeObjectRetain(*((_QWORD *)&v144 + 1));
          v58 = v57(v55, v56, ObjectType, v50);
          if (v58)
          {
            v59 = v58;
            sub_CB900(v129, v54, (uint64_t)v130, v55, v56);
            sub_CB6A8(v135, v35, v134, v138, v132, v136, v128);
            v60 = swift_bridgeObjectRetain(v56);
            v61 = Logger.logObject.getter(v60);
            v62 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v61, v62))
            {
              v63 = (uint8_t *)swift_slowAlloc(12, -1);
              v64 = swift_slowAlloc(32, -1);
              v141 = v64;
              *(_DWORD *)v63 = 136315138;
              swift_bridgeObjectRetain(v56);
              v140 = sub_33524(v55, v56, &v141);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v63 + 4);
              swift_bridgeObjectRelease_n(v56, 3);
              _os_log_impl(&dword_0, v61, v62, "Creating implicit annotation selection for %s", v63, 0xCu);
              swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v64, -1, -1);
              swift_slowDealloc(v63, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v56, 2);
            }
            v74 = v137;
            v110 = v139;
            v111 = v59;
            goto LABEL_54;
          }
          swift_bridgeObjectRelease(v56);
          v20 = v137;
          v41 = v128;
        }
        v112 = Logger.logObject.getter(v53);
        v113 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v112, v113))
        {
          v114 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v114 = 0;
          _os_log_impl(&dword_0, v112, v113, "Creating actual text selection", v114, 2u);
          swift_slowDealloc(v114, -1, -1);
        }

        if (v54)
        {
          swift_bridgeObjectRetain(v56);
          swift_bridgeObjectRetain(v35);
          swift_bridgeObjectRetain(v41);
          v115 = v138;
          swift_bridgeObjectRetain(v138);
          swift_bridgeObjectRetain(v54);
          v116 = v130;
          swift_bridgeObjectRetain(v130);
          v117 = v56;
          v118 = v129;
          v137 = v55;
          v128 = v117;
          sub_CB900(v129, v54, (uint64_t)v116, v55, v117);
          v119 = v136;
        }
        else
        {
          swift_bridgeObjectRetain_n(v41, 2);
          swift_bridgeObjectRetain(v35);
          v115 = v138;
          swift_bridgeObjectRetain(v138);
          v137 = 0;
          v128 = 0;
          v116 = _swiftEmptyArrayStorage;
          v119 = v136;
          v118 = v136;
          v54 = v41;
        }
        v120 = v135;
        v121 = v134;
        sub_CB6A8(v135, v35, v134, v115, v132, v119, v41);
        sub_CB6F8(v20);
        v122 = v139;
        *v139 = 1;
        v122[1] = v120;
        v122[2] = v35;
        v122[3] = v119;
        v122[4] = v41;
        v122[5] = 0;
        v122[6] = v121;
        v122[7] = v115;
        v122[8] = v118;
        v122[9] = v54;
        v123 = v137;
        v122[10] = v116;
        v122[11] = v123;
        v122[12] = v128;
        return result;
      }
    }
    if (qword_3B5758 != -1)
      swift_once(&qword_3B5758, sub_C74C8);
    v68 = type metadata accessor for Logger(0);
    v136 = sub_555F0(v68, (uint64_t)qword_3BAD90);
    v69 = Logger.logObject.getter(v136);
    v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = v20;
      v72 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v72 = 0;
      _os_log_impl(&dword_0, v69, v70, "Creating content selection WITHOUT jsSelection", v72, 2u);
      v73 = v72;
      v20 = v71;
      swift_slowDealloc(v73, -1, -1);
    }

    v74 = v20;
    v75 = *(_QWORD *)(v20 + *(int *)(v13 + 20) + 16);
    v76 = swift_bridgeObjectRetain(v75);
    static SuspendingClock.Instant.now.getter(v76);
    static SuspendingClock.Instant.+ infix(_:_:)(v7, 100000000000000000, 0);
    v77 = *(void (**)(char *, uint64_t))(v4 + 8);
    v77(v7, v3);
    v78 = sub_CAA84(v75, (uint64_t)v9);
    v80 = v79;
    v82 = v81;
    v83 = swift_bridgeObjectRelease(v75);
    v84 = v9;
    v85 = v80;
    v86 = ((uint64_t (*)(char *, uint64_t, __n128))v77)(v84, v3, v83);
    if ((v137 & 1) == 0
      || !v82
      || (v87 = *(_QWORD *)(v2 + 32),
          v88 = swift_getObjectType(*(_QWORD *)(v2 + 24)),
          v89 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v87 + 104),
          swift_bridgeObjectRetain(v82),
          v90 = v89(v80, v82, v88, v87),
          swift_bridgeObjectRelease(v82),
          !v90))
    {
      v101 = Logger.logObject.getter(v86);
      v102 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v101, v102))
      {
        v103 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v103 = 0;
        _os_log_impl(&dword_0, v101, v102, "Creating predicted text selection", v103, 2u);
        swift_slowDealloc(v103, -1, -1);
      }

      v104 = v138;
      sub_CB8BC(v74, v138);
      v105 = (uint64_t *)(v104 + *(int *)(v13 + 20));
      v107 = *v105;
      v106 = v105[1];
      v108 = v105[2];
      swift_bridgeObjectRetain(v106);
      swift_bridgeObjectRetain(v108);
      sub_CB6F8(v104);
      sub_CB6F8(v74);
      v109 = v139;
      *v139 = 0;
      v109[1] = v107;
      v109[2] = v106;
      v109[3] = 0;
      v109[4] = 0;
      v109[5] = v108;
      result = 0.0;
      *((_OWORD *)v109 + 3) = 0u;
      *((_OWORD *)v109 + 4) = 0u;
      v109[10] = v78;
      v109[11] = v85;
      v109[12] = v82;
      return result;
    }
    swift_bridgeObjectRelease(v78);
    v91 = swift_bridgeObjectRetain(v82);
    v92 = Logger.logObject.getter(v91);
    v93 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v92, v93))
    {
      v94 = (uint8_t *)swift_slowAlloc(12, -1);
      v95 = swift_slowAlloc(32, -1);
      v141 = v95;
      *(_DWORD *)v94 = 136315138;
      swift_bridgeObjectRetain(v82);
      v140 = sub_33524(v85, v82, &v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v94 + 4);
      swift_bridgeObjectRelease_n(v82, 3);
      _os_log_impl(&dword_0, v92, v93, "Creating implicit annotation selection for %s", v94, 0xCu);
      swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v94, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v82, 2);
    }
    v110 = v139;
    v111 = v90;
LABEL_54:
    sub_CA8E4(v111, 1, (uint64_t)&v141);
    sub_CB6F8(v74);
    v124 = v142;
    v125 = v143;
    v126 = v147;
    v127 = v148;
    *v110 = v141;
    v110[1] = v124;
    v110[2] = v125;
    *(_OWORD *)(v110 + 3) = v144;
    *(_OWORD *)(v110 + 5) = v145;
    *(_OWORD *)(v110 + 7) = v146;
    v110[9] = v126;
    v110[10] = v127;
    result = *(double *)&v149;
    *(_OWORD *)(v110 + 11) = v149;
    return result;
  }
  sub_52128((uint64_t)v12, &qword_3BAEE0);
LABEL_5:
  v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID + 8);
  if (v21)
  {
    v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID);
    v23 = *(_QWORD *)(v2 + 32);
    v24 = swift_getObjectType(*(_QWORD *)(v2 + 24));
    v25 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v23 + 104);
    swift_bridgeObjectRetain(v21);
    v26 = v25(v22, v21, v24, v23);
    if (v26)
    {
      v27 = v26;
      if (qword_3B5758 != -1)
        swift_once(&qword_3B5758, sub_C74C8);
      v28 = type metadata accessor for Logger(0);
      sub_555F0(v28, (uint64_t)qword_3BAD90);
      v29 = swift_bridgeObjectRetain(v21);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        v141 = v33;
        *(_DWORD *)v32 = 136315138;
        swift_bridgeObjectRetain(v21);
        v140 = sub_33524(v22, v21, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v32 + 4);
        swift_bridgeObjectRelease_n(v21, 3);
        _os_log_impl(&dword_0, v30, v31, "Creating actual annotation selection for %s", v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v21, 2);
      }
      sub_CA8E4(v27, 0, (uint64_t)&v141);
      v96 = v142;
      v97 = v143;
      v98 = v147;
      v99 = v148;
      v100 = v139;
      *v139 = v141;
      v100[1] = v96;
      v100[2] = v97;
      *(_OWORD *)(v100 + 3) = v144;
      *(_OWORD *)(v100 + 5) = v145;
      *(_OWORD *)(v100 + 7) = v146;
      v100[9] = v98;
      v100[10] = v99;
      result = *(double *)&v149;
      *(_OWORD *)(v100 + 11) = v149;
      return result;
    }
    swift_bridgeObjectRelease(v21);
  }
  if (qword_3B5758 != -1)
    swift_once(&qword_3B5758, sub_C74C8);
  v65 = type metadata accessor for Logger(0);
  sub_555F0(v65, (uint64_t)qword_3BAD90);
  result = 0.0;
  v67 = v139;
  *(_OWORD *)v139 = 0u;
  *((_OWORD *)v67 + 1) = 0u;
  *((_OWORD *)v67 + 2) = 0u;
  *((_OWORD *)v67 + 3) = 0u;
  *((_OWORD *)v67 + 4) = 0u;
  *((_OWORD *)v67 + 5) = 0u;
  v67[12] = 0;
  return result;
}

uint64_t sub_C96D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _BYTE v15[24];
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_319AC(&qword_3BAEE0);
  v3 = __chkstk_darwin(v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v15[-v6];
  if (qword_3B5758 != -1)
    swift_once(&qword_3B5758, sub_C74C8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_555F0(v8, (uint64_t)qword_3BAD90);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "Programmatically clearing selection", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_C79D4(0, 0);
  sub_1C1964();
  sub_1C1E4C((uint64_t)v7);
  v13 = v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection;
  swift_beginAccess(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection, v16, 0, 0);
  sub_CA854(v13, (uint64_t)v5);
  swift_beginAccess(v13, v15, 33, 0);
  sub_CA89C((uint64_t)v7, v13);
  swift_endAccess(v15);
  sub_C7548((uint64_t)v5);
  sub_52128((uint64_t)v7, &qword_3BAEE0);
  return sub_52128((uint64_t)v5, &qword_3BAEE0);
}

uint64_t sub_C98A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v4 = type metadata accessor for ContinuousClock(0);
  v3[24] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[25] = v5;
  v3[26] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContinuousClock.Instant(0);
  v3[27] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[28] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[29] = swift_task_alloc(v8);
  v3[30] = swift_task_alloc(v8);
  v3[31] = swift_task_alloc(v8);
  v9 = type metadata accessor for MainActor(0);
  v3[32] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  v3[33] = v10;
  v3[34] = v11;
  return swift_task_switch(sub_C9980, v10, v11);
}

uint64_t sub_C9980()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_C79D4(0, 0);
  v1 = (uint64_t **)swift_task_alloc(dword_3C1634);
  v0[35] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_C99E0;
  return sub_1C1A1C(v0[21], v0[22]);
}

uint64_t sub_C99E0(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 280);
  *(_BYTE *)(*v1 + 137) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_C9A38, *(_QWORD *)(v2 + 264), *(_QWORD *)(v2 + 272));
}

uint64_t sub_C9A38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  __int128 v41;
  void (*v42)(uint64_t, uint64_t);
  __int128 v43;
  uint64_t v44;
  uint64_t v45;

  if (*(_BYTE *)(v1 + 137) != 1)
  {
    swift_release(*(_QWORD *)(v1 + 256));
LABEL_14:
    v34 = 0;
LABEL_15:
    v35 = *(_QWORD *)(v1 + 240);
    v36 = *(_QWORD *)(v1 + 232);
    v37 = *(_QWORD *)(v1 + 208);
    swift_task_dealloc(*(_QWORD *)(v1 + 248));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v34);
  }
  v3 = *(_QWORD *)(v1 + 240);
  v2 = *(_QWORD *)(v1 + 248);
  v4 = *(_QWORD *)(v1 + 216);
  v5 = *(_QWORD *)(v1 + 224);
  static ContinuousClock.Instant.now.getter(a1);
  ContinuousClock.Instant.advanced(by:)(250000000000000000);
  v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v1 + 288) = v6;
  v7 = v6(v3, v4);
  static ContinuousClock.Instant.now.getter(v7);
  LOBYTE(v2) = static ContinuousClock.Instant.< infix(_:_:)(v3, v2);
  v6(v3, v4);
  if ((v2 & 1) == 0)
  {
    swift_release(*(_QWORD *)(v1 + 256));
    if (qword_3B5758 != -1)
      swift_once(&qword_3B5758, sub_C74C8);
    v21 = *(_QWORD *)(v1 + 176);
    v22 = type metadata accessor for Logger(0);
    sub_555F0(v22, (uint64_t)qword_3BAD90);
    v23 = swift_bridgeObjectRetain_n(v21, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v28 = *(_QWORD *)(v1 + 248);
    v29 = *(_QWORD *)(v1 + 216);
    v30 = *(_QWORD *)(v1 + 176);
    if (v26)
    {
      v31 = *(_QWORD *)(v1 + 168);
      v44 = *(_QWORD *)(v1 + 248);
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = v27;
      v33 = swift_slowAlloc(32, -1);
      v45 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(v30);
      *(_QWORD *)(v1 + 160) = sub_33524(v31, v30, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v32 + 4);
      swift_bridgeObjectRelease_n(v30, 3);
      _os_log_impl(&dword_0, v24, v25, "Timed out waiting for %s selection response", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v42(v44, v29);
    }
    else
    {

      swift_bridgeObjectRelease_n(v30, 2);
      v27(v28, v29);
    }
    goto LABEL_14;
  }
  v8 = sub_C8770((uint64_t *)(v1 + 16));
  v9 = *(_QWORD *)(v1 + 32);
  if (v9)
  {
    v10 = *(_QWORD *)(v1 + 40);
    v11 = *(_QWORD *)(v1 + 48);
    v12 = *(_QWORD *)(v1 + 112);
    v41 = *(_OWORD *)(v1 + 80);
    v43 = *(_OWORD *)(v1 + 96);
    v14 = *(_QWORD *)(v1 + 64);
    v13 = *(_QWORD *)(v1 + 72);
    v15 = *(_QWORD *)(v1 + 56);
    v17 = *(_QWORD *)(v1 + 16);
    v16 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v11);
    v8 = sub_CA7DC(v17, v16, v9, v10, v11, v15, v14, v13, v41, *((uint64_t *)&v41 + 1), v43, *((uint64_t *)&v43 + 1), v12);
    if (v11)
    {
      v18 = *(_QWORD *)(v1 + 168);
      v19 = *(_QWORD *)(v1 + 176);
      if (v10 == v18 && v11 == v19)
      {
        v20 = swift_bridgeObjectRelease(v11);
LABEL_17:
        v40 = *(_QWORD *)(v1 + 256);
        (*(void (**)(_QWORD, _QWORD, __n128))(v1 + 288))(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 216), v20);
        swift_release(v40);
        v34 = 1;
        goto LABEL_15;
      }
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v18, v19, 0);
      v20 = swift_bridgeObjectRelease(v11);
      if ((v39 & 1) != 0)
        goto LABEL_17;
    }
  }
  ContinuousClock.init()(v8);
  *(_OWORD *)(v1 + 144) = xmmword_2EA770;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 136) = 1;
  return swift_task_switch(sub_C9DFC, 0, 0);
}

uint64_t sub_C9DFC()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (void (*)(uint64_t, uint64_t))v0[36];
  v2 = v0[30];
  v3 = v0[27];
  v4 = v0[24];
  v5 = sub_34284((unint64_t *)&qword_3B82C8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_34284(&qword_3B82D0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 18, v3, v6);
  v1(v2, v3);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[37] = v7;
  *v7 = v0;
  v7[1] = sub_C9F04;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[29], v0 + 15, v0[24], v5);
}

uint64_t sub_C9F04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 288);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 304) = v0;
  swift_task_dealloc(v3);
  v4(v5, v6);
  if (v0)
  {
    v7 = sub_CA32C;
    v8 = 0;
    v9 = 0;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[25] + 8))(v2[26], v2[24]);
    v8 = v2[33];
    v9 = v2[34];
    v7 = sub_C9FA0;
  }
  return swift_task_switch(v7, v8, v9);
}

uint64_t sub_C9FA0(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
  v4 = *(_QWORD *)(v1 + 240);
  v3 = *(_QWORD *)(v1 + 248);
  v5 = *(_QWORD *)(v1 + 216);
  static ContinuousClock.Instant.now.getter(a1);
  v6 = static ContinuousClock.Instant.< infix(_:_:)(v4, v3);
  v2(v4, v5);
  if ((v6 & 1) == 0)
  {
    swift_release(*(_QWORD *)(v1 + 256));
    if (qword_3B5758 != -1)
      swift_once(&qword_3B5758, sub_C74C8);
    v21 = *(_QWORD *)(v1 + 176);
    v22 = type metadata accessor for Logger(0);
    sub_555F0(v22, (uint64_t)qword_3BAD90);
    v23 = swift_bridgeObjectRetain_n(v21, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v28 = *(_QWORD *)(v1 + 248);
    v29 = *(_QWORD *)(v1 + 216);
    v30 = *(_QWORD *)(v1 + 176);
    if (v26)
    {
      v39 = *(_QWORD *)(v1 + 168);
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = v29;
      v32 = swift_slowAlloc(32, -1);
      v44 = v32;
      *(_DWORD *)v31 = 136315138;
      swift_bridgeObjectRetain(v30);
      *(_QWORD *)(v1 + 160) = sub_33524(v39, v30, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v31 + 4);
      swift_bridgeObjectRelease_n(v30, 3);
      _os_log_impl(&dword_0, v24, v25, "Timed out waiting for %s selection response", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      v27(v28, v42);
    }
    else
    {

      swift_bridgeObjectRelease_n(v30, 2);
      v27(v28, v29);
    }
    goto LABEL_14;
  }
  v7 = sub_C8770((uint64_t *)(v1 + 16));
  v8 = *(_QWORD *)(v1 + 32);
  if (v8)
  {
    v10 = *(_QWORD *)(v1 + 40);
    v9 = *(_QWORD *)(v1 + 48);
    v11 = *(_QWORD *)(v1 + 112);
    v40 = *(_OWORD *)(v1 + 80);
    v41 = *(_OWORD *)(v1 + 96);
    v43 = *(_QWORD *)(v1 + 72);
    v12 = v6;
    v14 = *(_QWORD *)(v1 + 56);
    v13 = *(_QWORD *)(v1 + 64);
    v16 = *(_QWORD *)(v1 + 16);
    v15 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v9);
    v17 = v13;
    v6 = v12;
    v7 = sub_CA7DC(v16, v15, v8, v10, v9, v14, v17, v43, v40, *((uint64_t *)&v40 + 1), v41, *((uint64_t *)&v41 + 1), v11);
    if (v9)
    {
      v18 = *(_QWORD *)(v1 + 168);
      v19 = *(_QWORD *)(v1 + 176);
      if (v10 == v18 && v9 == v19)
      {
        v20 = swift_bridgeObjectRelease(v9);
LABEL_13:
        v34 = *(_QWORD *)(v1 + 256);
        (*(void (**)(_QWORD, _QWORD, __n128))(v1 + 288))(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 216), v20);
        swift_release(v34);
LABEL_14:
        v35 = *(_QWORD *)(v1 + 240);
        v36 = *(_QWORD *)(v1 + 232);
        v37 = *(_QWORD *)(v1 + 208);
        swift_task_dealloc(*(_QWORD *)(v1 + 248));
        swift_task_dealloc(v35);
        swift_task_dealloc(v36);
        swift_task_dealloc(v37);
        return (*(uint64_t (**)(_QWORD))(v1 + 8))(v6 & 1);
      }
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, v18, v19, 0);
      v20 = swift_bridgeObjectRelease(v9);
      if ((v33 & 1) != 0)
        goto LABEL_13;
    }
  }
  ContinuousClock.init()(v7);
  *(_OWORD *)(v1 + 144) = xmmword_2EA770;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 136) = 1;
  return swift_task_switch(sub_C9DFC, 0, 0);
}

uint64_t sub_CA32C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v0[25];
  v1 = v0[26];
  v3 = v0[24];
  swift_errorRelease(v0[38]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_CB94C, v0[33], v0[34]);
}

uint64_t sub_CA384()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE v13[24];

  v1 = v0;
  v2 = sub_319AC(&qword_3BAEE0);
  __chkstk_darwin(v2);
  v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v7 = &v12[-v6];
  sub_1C1E4C((uint64_t)&v12[-v6]);
  v8 = v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection;
  swift_beginAccess(v8, v13, 0, 0);
  sub_CA854(v8, (uint64_t)v4);
  swift_beginAccess(v8, v12, 33, 0);
  sub_CA89C((uint64_t)v7, v8);
  swift_endAccess(v12);
  sub_C7548((uint64_t)v4);
  sub_52128((uint64_t)v7, &qword_3BAEE0);
  sub_52128((uint64_t)v4, &qword_3BAEE0);
  v9 = v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection;
  if (!*(_QWORD *)(v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 8))
    return 0;
  v10 = *(_QWORD *)(v9 + 40);
  swift_bridgeObjectRetain(*(_QWORD *)(v9 + 48));
  return v10;
}

uint64_t sub_CA4C8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[9];
  char v44[32];

  v3 = sub_319AC(&qword_3BAEE0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - v7;
  v9 = *a1;
  v41 = a1[1];
  v42 = v9;
  v10 = a1[2];
  v39 = a1[3];
  v40 = v10;
  v11 = a1[4];
  v37 = a1[5];
  v38 = v11;
  v12 = a1[6];
  v35 = a1[7];
  v36 = v12;
  v34 = a1[8];
  v13 = v1;
  sub_1C1E4C((uint64_t)&v34 - v7);
  v14 = v1 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_contentSelection;
  swift_beginAccess(v14, v44, 0, 0);
  sub_CA854(v14, (uint64_t)v5);
  swift_beginAccess(v14, v43, 33, 0);
  sub_CA89C((uint64_t)v8, v14);
  swift_endAccess(v43);
  sub_C7548((uint64_t)v5);
  sub_52128((uint64_t)v8, &qword_3BAEE0);
  sub_52128((uint64_t)v5, &qword_3BAEE0);
  v15 = (uint64_t *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection);
  v16 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection);
  v17 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 8);
  v18 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 16);
  v19 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 24);
  v20 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 32);
  v21 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 40);
  v22 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 48);
  v23 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 56);
  v24 = *(_QWORD *)(v13 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_jsSelection + 64);
  v26 = v41;
  v25 = v42;
  *v15 = v42;
  v15[1] = v26;
  v28 = v39;
  v27 = v40;
  v15[2] = v40;
  v15[3] = v28;
  v30 = v37;
  v29 = v38;
  v15[4] = v38;
  v15[5] = v30;
  v32 = v35;
  v31 = v36;
  v15[6] = v36;
  v15[7] = v32;
  v15[8] = v34;
  sub_CB658(v25, v26, v27, v28, v29, v30, v31);
  sub_CB658(v16, v17, v18, v19, v20, v21, v22);
  sub_CB6A8(v16, v17, v18, v19, v20, v21, v22);
  v43[0] = v16;
  v43[1] = v17;
  v43[2] = v18;
  v43[3] = v19;
  v43[4] = v20;
  v43[5] = v21;
  v43[6] = v22;
  v43[7] = v23;
  v43[8] = v24;
  sub_C7CCC(v43);
  return sub_CB6A8(v16, v17, v18, v19, v20, v21, v22);
}

double sub_CA718()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  double result;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID);
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_selectedAnnotationID + 8);
  *v1 = 0;
  v1[1] = 0;
  if (v2)
  {
    v3 = v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection;
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 8);
    v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 16);
    v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 24);
    v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 32);
    v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 40);
    v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 48);
    v11 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 56);
    v12 = *(_OWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 64);
    v13 = *(_OWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 80);
    v14 = *(_QWORD *)(v0 + OBJC_IVAR____TtCC8BookEPUB20BookContentPresenter16SelectionManager_cachedSelection + 96);
    *(_OWORD *)v3 = 0u;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_QWORD *)(v3 + 96) = 0;
    sub_CA7DC(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  }
  return result;
}

uint64_t sub_CA7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    return swift_bridgeObjectRelease(a13);
  }
  return result;
}

uint64_t sub_CA854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BAEE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_CA89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BAEE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void sub_CA8E4(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD v24[2];
  _QWORD v25[3];

  if ((a2 & 1) != 0)
    v5 = 2;
  else
    v5 = 3;
  v23 = v5;
  KeyPath = swift_getKeyPath(&unk_2EA848);
  v7 = swift_getKeyPath(&unk_2EA870);
  static Published.subscript.getter(v25, a1, KeyPath);
  swift_release(KeyPath);
  swift_release(v7);
  v21 = v25[1];
  v22 = v25[0];
  v8 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location, v25, 0, 0);
  v9 = v8[1];
  v20 = *v8;
  v10 = swift_getKeyPath(&unk_2EA890);
  v11 = swift_getKeyPath(&unk_2EA8B8);
  swift_bridgeObjectRetain(v9);
  static Published.subscript.getter(v24, a1, v10);
  swift_release(v10);
  swift_release(v11);
  v12 = v24[0];
  v13 = v24[1];
  v15 = *v8;
  v14 = v8[1];
  v16 = sub_319AC(&qword_3BBEB0);
  v17 = swift_allocObject(v16, 48, 7);
  *(_OWORD *)(v17 + 16) = xmmword_2E5F80;
  v19 = *(_QWORD *)(a1 + 16);
  v18 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v18;
  swift_bridgeObjectRetain_n(v18, 2);
  swift_bridgeObjectRetain(v14);
  swift_release(a1);
  *(_BYTE *)a3 = v23;
  *(_QWORD *)(a3 + 8) = v22;
  *(_QWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v13;
  *(_QWORD *)(a3 + 64) = v15;
  *(_QWORD *)(a3 + 72) = v14;
  *(_QWORD *)(a3 + 80) = v17;
  *(_QWORD *)(a3 + 88) = v19;
  *(_QWORD *)(a3 + 96) = v18;
}

_QWORD *sub_CAA84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  unint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  if (!*(_QWORD *)(a1 + 16))
    return _swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(v2 + 48);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 40));
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6);
  v22 = v5;
  v9 = BookPaginationEntity.document(with:)(&v22);
  swift_release(v8);
  if (!v9)
  {
    if (qword_3B5758 != -1)
      swift_once(&qword_3B5758, sub_C74C8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_555F0(v11, (uint64_t)qword_3BAD90);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 136315138;
      v22 = 0;
      v23 = 0xE000000000000000;
      v24 = v16;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease(v23);
      v22 = 0xD000000000000011;
      v23 = 0x80000000002C85D0;
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v19._countAndFlagsBits = 41;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      v20 = v23;
      v22 = sub_33524(v22, v23, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v15 + 4);
      swift_bridgeObjectRelease(v20);
      _os_log_impl(&dword_0, v13, v14, "Failed to predict highlight overlap: Could not find document %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    return _swiftEmptyArrayStorage;
  }
  v10 = sub_CAD00(v9, a1, a2);
  swift_release(v9);
  return v10;
}

_QWORD *sub_CAD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  CGFloat MinY;
  CGFloat *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  char *v20;
  char v21;
  _QWORD *v22;
  CGFloat v23;
  double v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  double v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  CGFloat v37;
  double v38;
  double v39;
  CGFloat v40;
  CGFloat v41;
  double v42;
  double v43;
  double v44;
  double v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  CGFloat v87;
  double v88;
  CGFloat v89;
  CGFloat v90;
  CGFloat v91;
  CGFloat v92;
  CGFloat v93;
  CGFloat v94;
  CGFloat v95;
  uint64_t v96;
  char v97[8];
  CGRect v98;
  char v99;
  char v100[8];
  uint64_t v101;
  uint64_t v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;
  CGRect v107;
  CGRect v108;
  CGRect v109;
  CGRect v110;
  CGRect v111;
  CGRect v112;
  CGRect v113;

  v80 = a3;
  v79 = type metadata accessor for SuspendingClock.Instant(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79);
  v77 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (unsigned __int8 *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument, v100, 0, 0);
  v7 = *v6;
  sub_4A1C8((double *)a2, (uint64_t)v97);
  if ((v99 & 1) != 0)
    return _swiftEmptyArrayStorage;
  v103 = CGRectIntegral(v98);
  height = v103.size.height;
  if ((_DWORD)v7)
  {
    width = v103.size.width;
    y = v103.origin.y;
    x = v103.origin.x;
    MinY = CGRectGetMinY(v103);
    v104.origin.x = x;
    v104.origin.y = y;
    v89 = width;
    v104.size.width = width;
    v104.size.height = height;
    v88 = 100000.0 - CGRectGetMaxX(v104);
    v87 = MinY;
    v13 = (CGFloat *)&v102;
  }
  else
  {
    v87 = v103.origin.x;
    v88 = v103.origin.y;
    v90 = v103.size.width;
    v13 = (CGFloat *)&v101;
  }
  *(v13 - 32) = height;
  v14 = a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, v97, 0, 0);
  v15 = *(_QWORD *)v14;
  if (*(_QWORD *)v14 >> 62)
    goto LABEL_70;
  v16 = *(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(*(_QWORD *)v14);
  if (!v16)
  {
LABEL_74:
    swift_bridgeObjectRelease(v15);
    return _swiftEmptyArrayStorage;
  }
LABEL_7:
  v66 = (uint64_t *)v14;
  v67 = a1;
  v70 = 0;
  v73 = 0;
  v14 = 0;
  v75 = v15 & 0xC000000000000001;
  v69 = v15 & 0xFFFFFFFFFFFFFF8;
  v71 = v15;
  v68 = v15 + 32;
  v93 = CGRectNull.origin.y;
  v94 = CGRectNull.origin.x;
  v92 = CGRectNull.size.width;
  v91 = CGRectNull.size.height;
  v86 = a2 + 64;
  v17 = (unint64_t)_swiftEmptyArrayStorage;
  v18 = 0x40F86A0000000000;
  v72 = v16;
  while (1)
  {
    if (v75)
    {
      a1 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v71);
      v19 = __OFADD__(v14++, 1);
      if (v19)
        goto LABEL_68;
    }
    else
    {
      if (v14 >= *(_QWORD *)(v69 + 16))
        goto LABEL_69;
      a1 = *(_QWORD *)(v68 + 8 * v14);
      swift_retain(a1);
      v19 = __OFADD__(v14++, 1);
      if (v19)
      {
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        if (v15 < 0)
          v62 = v15;
        else
          v62 = v15 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v15);
        v16 = _CocoaArrayWrapper.endIndex.getter(v62);
        if (!v16)
          goto LABEL_74;
        goto LABEL_7;
      }
    }
    v81 = v14;
    v20 = v77;
    static SuspendingClock.Instant.now.getter();
    v21 = static SuspendingClock.Instant.< infix(_:_:)(v20, v80);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v20, v79);
    if ((v21 & 1) == 0)
      break;
    v82 = a1;
    a1 = *(_QWORD *)(a1 + 32);
    v22 = *(_QWORD **)(a1 + 16);
    if (v22)
    {
      v74 = (_QWORD *)v17;
      v14 = a1 + 32;
      swift_bridgeObjectRetain(a1);
      v17 = 0;
      v83 = 0;
      v76 = 0;
      v85 = v22;
      v84 = a1 + 32;
      while (1)
      {
        v105 = CGRectIntegral(*(CGRect *)(v14 + 40 * v17 + 8));
        v23 = v105.origin.x;
        v24 = v105.size.width;
        v25 = v105.size.height;
        if ((_DWORD)v7)
        {
          v26 = v105.origin.y;
          v27 = CGRectGetMinY(v105);
          v106.origin.x = v23;
          v106.origin.y = v26;
          v106.size.width = v24;
          v106.size.height = v25;
          v105.origin.y = 100000.0 - CGRectGetMaxX(v106);
          v23 = v27;
          v28 = v25;
        }
        else
        {
          v28 = v105.size.width;
          v24 = v105.size.height;
        }
        v111.size.height = v89;
        v111.origin.y = v88;
        v111.origin.x = v87;
        ++v17;
        v29 = v23;
        v95 = v105.origin.y;
        v30 = v28;
        v31 = v24;
        v111.size.width = v90;
        if (CGRectIntersectsRect(v105, v111))
        {
          v15 = *(_QWORD *)(a2 + 16);
          if (v15)
            break;
        }
LABEL_46:
        if ((_QWORD *)v17 == v22)
        {
          swift_bridgeObjectRelease(a1);
          v17 = (unint64_t)v74;
          if ((v83 & 1) != 0)
            goto LABEL_50;
          goto LABEL_55;
        }
LABEL_47:
        if (v17 >= *(_QWORD *)(a1 + 16))
        {
          __break(1u);
          goto LABEL_68;
        }
      }
      v32 = a2;
      swift_bridgeObjectRetain(a2);
      v33 = 0;
      a2 = -v15;
      while (2)
      {
        while (2)
        {
          if (v33 <= v15)
            v34 = v15;
          else
            v34 = v33;
          v35 = -v34;
          v36 = v86 + 40 * v33++;
          while (1)
          {
            if (v35 + v33 == 1)
            {
              __break(1u);
              goto LABEL_61;
            }
            v107 = CGRectIntegral(*(CGRect *)(v36 - 24));
            v37 = v107.origin.x;
            v38 = v107.origin.y;
            v39 = v107.size.width;
            v40 = v107.size.height;
            if ((_DWORD)v7)
            {
              v41 = CGRectGetMinY(v107);
              v108.origin.x = v37;
              v108.origin.y = v38;
              v108.size.width = v39;
              v108.size.height = v40;
              v38 = 100000.0 - CGRectGetMaxX(v108);
              v37 = v41;
              v42 = v40;
            }
            else
            {
              v42 = v107.size.width;
              v39 = v107.size.height;
            }
            v109.origin.x = v37;
            v109.origin.y = v38;
            v109.size.width = v42;
            v109.size.height = v39;
            v112.origin.x = v23;
            v112.origin.y = v95;
            v112.size.width = v28;
            v112.size.height = v24;
            v110 = CGRectIntersection(v109, v112);
            v43 = v110.size.width;
            v44 = v110.size.height;
            v113.origin.y = v93;
            v113.origin.x = v94;
            v113.size.width = v92;
            v113.size.height = v91;
            if (!CGRectEqualToRect(v110, v113))
            {
              v45 = v39 >= v24 ? v24 : v39;
              if (v44 == v45)
                break;
            }
            ++v33;
            v36 += 40;
            if (v33 - v15 == 1)
            {
              a2 = v32;
              swift_bridgeObjectRelease(v32);
              v22 = v85;
              v14 = v84;
              goto LABEL_46;
            }
          }
          v46 = v33 - v15;
          if (v43 != v42)
          {
            v83 = 1;
            if (v46)
              continue;
            goto LABEL_43;
          }
          break;
        }
        v19 = __OFADD__(v76++, 1);
        if (!v19)
        {
          v83 = 1;
          if (v46)
            continue;
LABEL_43:
          a2 = v32;
          swift_bridgeObjectRelease(v32);
          v22 = v85;
          if ((_QWORD *)v17 != v85)
          {
            v83 = 1;
            v14 = v84;
            goto LABEL_47;
          }
          swift_bridgeObjectRelease(a1);
          v17 = (unint64_t)v74;
LABEL_50:
          v47 = *(_QWORD *)(v82 + 16);
          a1 = *(_QWORD *)(v82 + 24);
          swift_bridgeObjectRetain(a1);
          if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
            v17 = (unint64_t)sub_42140(0, *(_QWORD *)(v17 + 16) + 1, 1, (_QWORD *)v17);
          v15 = *(_QWORD *)(v17 + 16);
          v48 = *(_QWORD *)(v17 + 24);
          if (v15 >= v48 >> 1)
            v17 = (unint64_t)sub_42140((_QWORD *)(v48 > 1), v15 + 1, 1, (_QWORD *)v17);
          *(_QWORD *)(v17 + 16) = v15 + 1;
          v49 = (_QWORD *)(v17 + 16 * v15);
          v49[4] = v47;
          v49[5] = a1;
LABEL_55:
          v50 = v82;
          v51 = v76;
          goto LABEL_57;
        }
        break;
      }
      __break(1u);
      goto LABEL_78;
    }
    v51 = 0;
    v50 = v82;
LABEL_57:
    if (v51 == *(_QWORD *)(a2 + 16))
    {
      swift_bridgeObjectRelease(v73);
      v52 = *(_QWORD *)(v50 + 24);
      v70 = *(_QWORD *)(v50 + 16);
      v73 = v52;
      swift_bridgeObjectRetain(v52);
    }
    swift_release(v50);
    v14 = v81;
    if (v81 == v72)
    {
      swift_bridgeObjectRelease(v71);
      return (_QWORD *)v17;
    }
  }
LABEL_61:
  v18 = a1;
  v7 = a2;
  swift_bridgeObjectRelease(v71);
  if (qword_3B5758 == -1)
    goto LABEL_62;
LABEL_78:
  swift_once(&qword_3B5758, sub_C74C8);
LABEL_62:
  v53 = type metadata accessor for Logger(0);
  sub_555F0(v53, (uint64_t)qword_3BAD90);
  v54 = v67;
  swift_retain_n(v67, 2);
  v55 = swift_bridgeObjectRetain(v7);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v56, v57))
  {
    v58 = swift_slowAlloc(32, -1);
    *(_DWORD *)v58 = 134218496;
    v59 = *v66;
    if ((unint64_t)*v66 >> 62)
    {
      if (v59 < 0)
        v64 = *v66;
      else
        v64 = v59 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v66);
      v60 = _CocoaArrayWrapper.endIndex.getter(v64);
      swift_bridgeObjectRelease(v59);
    }
    else
    {
      v60 = *(_QWORD *)((char *)&dword_10 + (v59 & 0xFFFFFFFFFFFFF8));
    }
    v96 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v58 + 4);
    *(_WORD *)(v58 + 12) = 2048;
    v96 = *(_QWORD *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v58 + 14);
    swift_bridgeObjectRelease(v7);
    *(_WORD *)(v58 + 22) = 2048;
    v61 = *(_QWORD *)(v54 + 16);
    swift_release(v54);
    v96 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v58 + 24);
    swift_release(v54);
    _os_log_impl(&dword_0, v56, v57, "Timed out predicting overlap of highlights (%ld) with selection rects (%ld) in document %ld", (uint8_t *)v58, 0x20u);
    swift_slowDealloc(v58, -1, -1);
    swift_release(v18);

  }
  else
  {

    swift_bridgeObjectRelease(v7);
    swift_release_n(v54, 2);
    swift_release(v18);
  }
  return (_QWORD *)v17;
}

uint64_t sub_CB658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t sub_CB6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_CB6F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BookContentLayoutController.Selection(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_CB734(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BookContentLayoutController.Selection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_CB778(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[9];
  v3 = a1[10];
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[14];
  v8 = a1[15];
  sub_CB6A8(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  sub_CB6A8(v2, v3, v4, v5, v6, v7, v8);
  return a1;
}

uint64_t sub_CB818()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_CB83C(uint64_t a1)
{
  uint64_t v1;

  return sub_C8458(a1, v1);
}

uint64_t sub_CB844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain(a13);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    return swift_bridgeObjectRetain(a11);
  }
  return result;
}

uint64_t sub_CB8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BookContentLayoutController.Selection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_CB900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

__n128 Location.pageLocation.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  return result;
}

__n128 BookContentAdornmentState.currentLocation.setter(__n128 *a1)
{
  __n128 *v1;
  __n128 result;

  result = *a1;
  *v1 = *a1;
  return result;
}

uint64_t BookContentAdornmentState.contentAccessoryView.getter()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + 24);
}

void BookContentAdornmentState.contentAccessoryView.setter(void *a1)
{
  uint64_t v1;

  swift_unknownObjectWeakAssign(v1 + 24, a1);

}

void (*BookContentAdornmentState.contentAccessoryView.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = swift_unknownObjectWeakLoadStrong(v1 + 24);
  return sub_CB9D4;
}

void sub_CB9D4(_QWORD *a1)
{
  id v1;

  v1 = (id)*a1;
  swift_unknownObjectWeakAssign(a1[1] + 24, *a1);

}

uint64_t BookContentAdornmentState.peripheralView.getter()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + 32);
}

void BookContentAdornmentState.peripheralView.setter(void *a1)
{
  uint64_t v1;

  swift_unknownObjectWeakAssign(v1 + 32, a1);

}

void (*BookContentAdornmentState.peripheralView.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = swift_unknownObjectWeakLoadStrong(v1 + 32);
  return sub_CBA6C;
}

void sub_CBA6C(_QWORD *a1)
{
  id v1;

  v1 = (id)*a1;
  swift_unknownObjectWeakAssign(a1[1] + 32, *a1);

}

void BookContentAdornmentState.peripheralLength.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 40) = a1;
}

double BookContentAdornmentState.contentOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void BookContentAdornmentState.contentOffset.setter(double a1, double a2)
{
  uint64_t v2;

  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
}

_QWORD *BookContentAdornmentState.adornedPages(book:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(_QWORD *)(v1 + 16);
  swift_retain();
  swift_bridgeObjectRetain(v3);
  v5 = sub_CBC5C(v4, a1);
  swift_bridgeObjectRelease(v3);
  swift_release();
  return v5;
}

BOOL sub_CBB14(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  void *Strong;
  uint64_t v6;
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;

  v2 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if (!v2 || (sub_65A0C(*(int64x2_t **)(a1 + 16), *(int64x2_t **)(a2 + 16)) & 1) == 0)
    return 0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + 24);
  v6 = swift_unknownObjectWeakLoadStrong(a2 + 24);
  v7 = (void *)v6;
  if (Strong)
  {
    if (!v6)
    {
LABEL_16:

      return 0;
    }
    sub_4C140();
    v8 = Strong;
    v9 = static NSObject.== infix(_:_:)(v8, v7);

    if ((v9 & 1) == 0)
      return 0;
  }
  else if (v6)
  {
LABEL_18:

    return 0;
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1 + 32);
  v10 = swift_unknownObjectWeakLoadStrong(a2 + 32);
  v7 = (void *)v10;
  if (!Strong)
  {
    if (!v10)
      goto LABEL_20;
    goto LABEL_18;
  }
  if (!v10)
    goto LABEL_16;
  sub_4C140();
  v11 = Strong;
  v12 = static NSObject.== infix(_:_:)(v11, v7);

  if ((v12 & 1) == 0)
    return 0;
LABEL_20:
  if (*(double *)(a1 + 40) != *(double *)(a2 + 40))
    return 0;
  return *(double *)(a1 + 56) == *(double *)(a2 + 56) && *(double *)(a1 + 48) == *(double *)(a2 + 48);
}

_QWORD *sub_CBC5C(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;

  result = _swiftEmptyArrayStorage;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 104);
    swift_bridgeObjectRetain(a1);
    v6 = (uint64_t *)(a1 + 40);
    v7 = (uint64_t *)(a1 + 40);
    do
    {
      v10 = *v7;
      v7 += 2;
      v9 = v10;
      if (*(_QWORD *)(v5 + 16))
      {
        sub_3B7F8(*(v6 - 1));
        if ((v11 & 1) != 0)
        {
          swift_retain();
          v12 = sub_AE39C(v9);
          swift_release();
          if (v12)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
            v15 = *(_QWORD *)((char *)&dword_10 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
            v14 = *(_QWORD *)((char *)&dword_18 + ((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8));
            if (v15 >= v14 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
            v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
            specialized Array._endMutation()(v8);
          }
        }
      }
      v6 = v7;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_CBD78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];
  uint64_t v6;

  sub_5B6D0(a1, (uint64_t)v5);
  v3 = swift_unknownObjectWeakLoadStrong(&v6);
  result = sub_5B750((uint64_t)v5);
  *a2 = v3;
  return result;
}

uint64_t sub_CBDC0(_QWORD *a1, uint64_t a2)
{
  return swift_unknownObjectWeakAssign(a2 + 24, *a1);
}

uint64_t sub_CBDD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[32];
  uint64_t v6;

  sub_5B6D0(a1, (uint64_t)v5);
  v3 = swift_unknownObjectWeakLoadStrong(&v6);
  result = sub_5B750((uint64_t)v5);
  *a2 = v3;
  return result;
}

uint64_t sub_CBE18(_QWORD *a1, uint64_t a2)
{
  return swift_unknownObjectWeakAssign(a2 + 32, *a1);
}

uint64_t destroy for BookContentAdornmentState(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_unknownObjectWeakDestroy(a1 + 24);
  return swift_unknownObjectWeakDestroy(a1 + 32);
}

uint64_t initializeWithCopy for BookContentAdornmentState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a2 + 24;
  swift_bridgeObjectRetain(v4);
  swift_unknownObjectWeakCopyInit(a1 + 24, v5);
  swift_unknownObjectWeakCopyInit(a1 + 32, a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

_QWORD *assignWithCopy for BookContentAdornmentState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  swift_unknownObjectWeakCopyAssign(a1 + 3, a2 + 3);
  swift_unknownObjectWeakCopyAssign(a1 + 4, a2 + 4);
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t initializeWithTake for BookContentAdornmentState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_unknownObjectWeakTakeInit(a1 + 24, a2 + 24);
  swift_unknownObjectWeakTakeInit(a1 + 32, a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for BookContentAdornmentState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  swift_unknownObjectWeakTakeAssign(a1 + 24, a2 + 24);
  swift_unknownObjectWeakTakeAssign(a1 + 32, a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookContentAdornmentState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BookContentAdornmentState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookContentAdornmentState()
{
  return &type metadata for BookContentAdornmentState;
}

uint64_t ThemeFontViewModel.state.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2EA950);
  v4[0] = v0;
  v2 = sub_CC48C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 24, v4, 0, 0);
  return *(_QWORD *)(v0 + 24);
}

id ThemeFontViewModel.__allocating_init(font:)(void *a1)
{
  uint64_t v1;
  id v3;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48));
  v3 = sub_CCB3C(a1);
  swift_unknownObjectRelease(a1);
  return v3;
}

double ThemeFontViewModel.updateFontState(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t KeyPath;
  unint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = sub_CCAB4(a1);
  v4 = v3;
  KeyPath = swift_getKeyPath(&unk_2EA950);
  v9 = v1;
  v10 = v2;
  v11 = v4 & 1;
  v12 = v1;
  v6 = sub_CC48C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_CCCBC, &v8, (char *)&type metadata for () + 8, v6);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void ThemeFontViewModel.FontState.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3)
{
  Swift::UInt64 v4;
  Swift::UInt v5;

  if ((a3 & 1) != 0)
  {
    if (a2)
    {
      if (a2 == 1)
        v5 = 1;
      else
        v5 = 3;
    }
    else
    {
      v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a2;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
}

BOOL static ThemeFontViewModel.FontState.== infix(_:_:)(uint64_t a1, char a2, unint64_t a3, char a4)
{
  if ((a2 & 1) != 0)
  {
    if (*(double *)&a1 == 0.0)
    {
      if ((a4 & 1) != 0 && *(double *)&a3 == 0.0)
        return 1;
    }
    else if (a1 == 1)
    {
      if ((a4 & 1) != 0 && a3 == 1)
        return 1;
    }
    else if ((a4 & 1) != 0 && a3 > 1)
    {
      return 1;
    }
  }
  else if ((a4 & 1) == 0)
  {
    return *(double *)&a1 == *(double *)&a3;
  }
  return 0;
}

Swift::Int ThemeFontViewModel.FontState.hashValue.getter(Swift::UInt64 a1, char a2)
{
  Swift::UInt64 v4;
  Swift::UInt v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  if ((a2 & 1) != 0)
  {
    if (a1)
    {
      if (a1 == 1)
        v5 = 1;
      else
        v5 = 3;
    }
    else
    {
      v5 = 0;
    }
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    if ((a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v4 = a1;
    else
      v4 = 0;
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

Swift::Int sub_CC370()
{
  uint64_t v0;

  return ThemeFontViewModel.FontState.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_CC37C(uint64_t a1)
{
  uint64_t v1;

  ThemeFontViewModel.FontState.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int sub_CC388(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  int v3;
  Swift::UInt v4;
  Swift::UInt64 v5;
  _QWORD v7[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  Hasher.init(_seed:)(v7, a1);
  if (v3 == 1)
  {
    if (v2)
    {
      if (v2 == 1)
        v4 = 1;
      else
        v4 = 3;
    }
    else
    {
      v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v5 = v2;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
  }
  return Hasher._finalize()();
}

BOOL sub_CC410(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  BOOL v4;
  char v6;
  int v7;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if (*(_BYTE *)(a1 + 8) != 1)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      return v2 == *(double *)a2;
    return 0;
  }
  if (v2 == 0.0)
  {
    v4 = *(_QWORD *)&v3 == 0;
  }
  else
  {
    if (*(_QWORD *)&v2 != 1)
    {
      if (*(_QWORD *)&v3 > 1uLL)
        v7 = *(unsigned __int8 *)(a2 + 8);
      else
        v7 = 0;
      return v7 == 1;
    }
    v4 = *(_QWORD *)&v3 == 1;
  }
  if (v4)
    v6 = *(_BYTE *)(a2 + 8);
  else
    v6 = 0;
  return (v6 & 1) != 0;
}

unint64_t sub_CC48C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B66E8;
  if (!qword_3B66E8)
  {
    v1 = type metadata accessor for ThemeFontViewModel(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemeFontViewModel, v1);
    atomic_store(result, (unint64_t *)&qword_3B66E8);
  }
  return result;
}

uint64_t type metadata accessor for ThemeFontViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_3BAF68;
  if (!qword_3BAF68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ThemeFontViewModel);
  return result;
}

double ThemeFontViewModel.state.setter(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  KeyPath = swift_getKeyPath(&unk_2EA950);
  v9 = v2;
  v10 = a1;
  v11 = a2 & 1;
  v12 = v2;
  v6 = sub_CC48C();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, KeyPath, sub_CCCBC, &v8, (char *)&type metadata for () + 8, v6);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_CC5A8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;
  _BYTE v7[24];

  result = swift_beginAccess(a1 + 24, v7, 1, 0);
  *(_QWORD *)(a1 + 24) = a2;
  *(_BYTE *)(a1 + 32) = a3 & 1;
  return result;
}

void (*ThemeFontViewModel.state.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  unint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2EA950);
  v4[4] = OBJC_IVAR____TtC8BookEPUB18ThemeFontViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_CC48C();
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release();
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2EA950);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release();
  swift_beginAccess(v2 + 24, v4, 33, 0);
  return sub_CC6E0;
}

void sub_CC6E0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;

  v1 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  v2 = v1[5];
  *v1 = v1[3];
  KeyPath = swift_getKeyPath(&unk_2EA950);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v1, KeyPath, v2);
  swift_release(KeyPath);
  free(v1);
}

uint64_t ThemeFontViewModel.familyName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

BOOL ThemeFontViewModel.isOriginalFont.getter()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 72) == 0;
}

uint64_t ThemeFontViewModel.kind.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 72);
}

id ThemeFontViewModel.init(font:)(void *a1)
{
  id v2;

  v2 = sub_CCB3C(a1);
  swift_unknownObjectRelease(a1);
  return v2;
}

uint64_t ThemeFontViewModel.accessibilityDescription.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  id v3;
  NSString v4;
  NSString v5;
  id v6;
  uint64_t v7;
  _QWORD v9[3];

  KeyPath = swift_getKeyPath(&unk_2EA950);
  v9[0] = v0;
  v2 = sub_CC48C();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v2);
  swift_release();
  swift_beginAccess(v0 + 24, v9, 0, 0);
  v3 = BookEPUBBundle();
  v4 = String._bridgeToObjectiveC()();
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, v5, 0);

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  return v7;
}

_QWORD *ThemeFontViewModel.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB18ThemeFontViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ThemeFontViewModel.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB18ThemeFontViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_CCAB4(void *a1)
{
  uint64_t result;
  float v3;

  if ((objc_msgSend(a1, "isAvailable") & 1) != 0)
  {
    *(double *)&result = 0.0;
  }
  else if (objc_msgSend(a1, "isDownloading"))
  {
    objc_msgSend(a1, "downloadProgress");
    *(double *)&result = v3;
  }
  else if (objc_msgSend(a1, "isDownloadable"))
  {
    return 2;
  }
  else
  {
    return 1;
  }
  return result;
}

id sub_CCB3C(void *a1)
{
  uint64_t v1;
  double v3;
  id v4;
  id result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  ObservationRegistrar.init()();
  *(_QWORD *)(v1 + 16) = a1;
  *(_QWORD *)&v3 = swift_unknownObjectRetain(a1).n128_u64[0];
  result = objc_msgSend(v4, "displayName", v3);
  if (!result)
  {
    __break(1u);
    goto LABEL_13;
  }
  v6 = result;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v9 = v8;

  *(_QWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 48) = v9;
  result = objc_msgSend(a1, "familyName");
  if (!result)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v10 = result;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v13 = v12;

  *(_QWORD *)(v1 + 56) = v11;
  *(_QWORD *)(v1 + 64) = v13;
  v14 = objc_msgSend(a1, "systemName");
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v18 = v17;

    if (v16 == 0x6669726573 && v18 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease(0xE500000000000000);
      v19 = 3;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, 0x6669726573, 0xE500000000000000, 0);
      swift_bridgeObjectRelease(v18);
      if ((v20 & 1) != 0)
        v19 = 3;
      else
        v19 = 2;
    }
  }
  else
  {
    v19 = objc_msgSend(a1, "isOriginalFont") ^ 1;
  }
  *(_BYTE *)(v1 + 72) = v19;
  *(_QWORD *)(v1 + 24) = sub_CCAB4(a1);
  *(_BYTE *)(v1 + 32) = v21 & 1;
  return (id)v1;
}

uint64_t sub_CCCBC()
{
  return sub_CCCD0();
}

uint64_t sub_CCCD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;
  _BYTE v5[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)(v0 + 32);
  result = swift_beginAccess(v1 + 24, v5, 1, 0);
  *(_QWORD *)(v1 + 24) = v2;
  *(_BYTE *)(v1 + 32) = v3;
  return result;
}

unint64_t sub_CCD28()
{
  unint64_t result;

  result = qword_3BAF30;
  if (!qword_3BAF30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemeFontViewModel.FontState, &type metadata for ThemeFontViewModel.FontState);
    atomic_store(result, (unint64_t *)&qword_3BAF30);
  }
  return result;
}

unint64_t sub_CCD70()
{
  unint64_t result;

  result = qword_3BAF38;
  if (!qword_3BAF38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemeFontViewModel.Kind, &type metadata for ThemeFontViewModel.Kind);
    atomic_store(result, (unint64_t *)&qword_3BAF38);
  }
  return result;
}

uint64_t sub_CCDBC()
{
  return type metadata accessor for ThemeFontViewModel(0);
}

uint64_t sub_CCDC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_2EAB08;
  v4[1] = &unk_2EAB20;
  v4[2] = &unk_2EAB38;
  v4[3] = &unk_2EAB38;
  v4[4] = &unk_2EAB50;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ThemeFontViewModel(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ThemeFontViewModel);
}

uint64_t dispatch thunk of ThemeFontViewModel.__allocating_init(font:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t initializeBufferWithCopyOfBuffer for ThemeFontViewModel.FontState(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ThemeFontViewModel.FontState(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ThemeFontViewModel.FontState(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_CCED4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_CCEF0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ThemeFontViewModel.FontState()
{
  return &type metadata for ThemeFontViewModel.FontState;
}

uint64_t storeEnumTagSinglePayload for ThemeFontViewModel.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_CCF6C + 4 * byte_2EA945[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_CCFA0 + 4 * asc_2EA940[v4]))();
}

uint64_t sub_CCFA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CCFA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCCFB0);
  return result;
}

uint64_t sub_CCFBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCCFC4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_CCFC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CCFD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThemeFontViewModel.Kind()
{
  return &type metadata for ThemeFontViewModel.Kind;
}

__n128 PagePaginationEntity.pageRect.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __n128 result;
  __int128 v3;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  result = *(__n128 *)(v1 + 32);
  v3 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 8) = result;
  *(_OWORD *)(a1 + 24) = v3;
  return result;
}

uint64_t sub_CD004(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 64, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_CD060()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 64, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
}

uint64_t sub_CD094(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 72, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)(v3 + 72) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_CD0F0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 72, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
}

uint64_t sub_CD124(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 80, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 80);
  *(_QWORD *)(v3 + 80) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_CD180()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
}

uint64_t sub_CD1B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 88, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v3 + 88) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_CD210()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 88, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
}

uint64_t sub_CD244(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 96, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 96);
  *(_QWORD *)(v3 + 96) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_CD2A0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 96, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
}

uint64_t sub_CD2D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 104, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 104);
  *(_QWORD *)(v3 + 104) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_CD330()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 104, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 104));
}

uint64_t sub_CD364(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess(*a2 + 112, v7, 1, 0);
  v5 = *(_QWORD *)(v4 + 120);
  *(_QWORD *)(v4 + 112) = v3;
  *(_QWORD *)(v4 + 120) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_CD3C0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 112, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 120));
  return v1;
}

uint64_t sub_CD408(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess(*a2 + 128, v7, 1, 0);
  v5 = *(_QWORD *)(v4 + 136);
  *(_QWORD *)(v4 + 128) = v3;
  *(_QWORD *)(v4 + 136) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_CD464()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 128, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 136));
  return v1;
}

uint64_t PagePaginationEntity.__allocating_init(pageOffset:pageRect:highlightPaginationEntityReferences:bookmarkEntityReferences:anchorEntityReferences:mediaEntityReferences:expandableEntityReferences:historyEntityReferences:firstPhysicalPageName:lastPhysicalPageName:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v20;

  v20 = swift_allocObject(v12, 144);
  PagePaginationEntity.init(pageOffset:pageRect:highlightPaginationEntityReferences:bookmarkEntityReferences:anchorEntityReferences:mediaEntityReferences:expandableEntityReferences:historyEntityReferences:firstPhysicalPageName:lastPhysicalPageName:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v20;
}

uint64_t PagePaginationEntity.init(pageOffset:pageRect:highlightPaginationEntityReferences:bookmarkEntityReferences:anchorEntityReferences:mediaEntityReferences:expandableEntityReferences:historyEntityReferences:firstPhysicalPageName:lastPhysicalPageName:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[24];

  v13 = *a2;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v13;
  v14 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(v12 + 48) = v14;
  *(_QWORD *)(v12 + 64) = a3;
  *(_QWORD *)(v12 + 72) = a4;
  *(_QWORD *)(v12 + 80) = a5;
  *(_QWORD *)(v12 + 88) = a6;
  *(_QWORD *)(v12 + 96) = a7;
  *(_QWORD *)(v12 + 104) = a8;
  swift_beginAccess(v12 + 112, v19, 1, 0);
  v15 = *(_QWORD *)(v12 + 120);
  *(_QWORD *)(v12 + 112) = a9;
  *(_QWORD *)(v12 + 120) = a10;
  swift_bridgeObjectRelease(v15);
  swift_beginAccess(v12 + 128, &v18, 1, 0);
  v16 = *(_QWORD *)(v12 + 136);
  *(_QWORD *)(v12 + 128) = a11;
  *(_QWORD *)(v12 + 136) = a12;
  swift_bridgeObjectRelease(v16);
  return v12;
}

uint64_t sub_CD620()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_CD654 + 4 * byte_2EAB80[*v0]))(0x7366664F65676170, 0xEA00000000007465);
}

uint64_t sub_CD654()
{
  return 0x7463655265676170;
}

unint64_t sub_CD66C()
{
  return 0xD000000000000015;
}

unint64_t sub_CD68C()
{
  return 0xD000000000000014;
}

uint64_t sub_CD6A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_CE4F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_CD6CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CE924();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_CD6F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_CE924();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PagePaginationEntity.__allocating_init(from:)(_QWORD *a1)
{
  return sub_CE6B0(a1);
}

void sub_CD730(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char v23;
  _BYTE v24[24];
  uint64_t v25;
  __int128 v26;
  __int128 v27;

  v3 = v1;
  v5 = sub_319AC(&qword_3BB018);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_472D0(a1, v9);
  v11 = sub_CE924();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PagePaginationEntity.CodingKeys, &type metadata for PagePaginationEntity.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 16);
  LOBYTE(v25) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v25, v5);
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    v25 = *(_QWORD *)(v3 + 24);
    v13 = *(_OWORD *)(v3 + 48);
    v26 = *(_OWORD *)(v3 + 32);
    v27 = v13;
    v24[0] = 1;
    v14 = sub_319AC(&qword_3B6C00);
    v15 = sub_5DA78(&qword_3B7388, (uint64_t)&protocol conformance descriptor for <> RelativeValue<A, B>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, v24, v5, v14, v15);
    swift_beginAccess(v3 + 112, &v25, 0, 0);
    v16 = *(_QWORD *)(v3 + 112);
    v17 = *(_QWORD *)(v3 + 120);
    v24[0] = 2;
    v18 = swift_bridgeObjectRetain(v17);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v24, v5, v18);
    swift_bridgeObjectRelease(v17);
    swift_beginAccess(v3 + 128, v24, 0, 0);
    v19 = *(_QWORD *)(v3 + 128);
    v20 = *(_QWORD *)(v3 + 136);
    v23 = 3;
    v21 = swift_bridgeObjectRetain(v20);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v23, v5, v21);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v20);
  }
}

uint64_t sub_CD954(double *a1)
{
  uint64_t v1;
  double v2;
  CGFloat v3;
  CGFloat v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v15[24];
  CGPoint v16;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  swift_beginAccess(v1 + 64, v15, 0, 0);
  v5 = *(_QWORD *)(v1 + 64);
  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain_n(v5, 2);
    if (v6)
      goto LABEL_3;
LABEL_23:
    swift_bridgeObjectRelease_n(v5, 2);
    return 0;
  }
LABEL_19:
  if (v5 < 0)
    v13 = v5;
  else
    v13 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v5, 2);
  v6 = _CocoaArrayWrapper.endIndex.getter(v13);
  if (!v6)
    goto LABEL_23;
LABEL_3:
  v7 = 0;
  while (1)
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      v9 = __OFADD__(v7++, 1);
      if (v9)
        goto LABEL_18;
    }
    else
    {
      v8 = *(_QWORD *)(v5 + 32 + 8 * v7);
      swift_retain(v8);
      v9 = __OFADD__(v7++, 1);
      if (v9)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
    }
    v10 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
      break;
    swift_release(v8);
LABEL_5:
    if (v7 == v6)
      goto LABEL_23;
  }
  swift_bridgeObjectRetain_n(*(_QWORD *)(v8 + 16), 2);
  v12 = v10 + 64;
  while (1)
  {
    if (*(_QWORD *)(v12 - 32) == *(_QWORD *)&v2)
    {
      v16.x = v3;
      v16.y = v4;
      if (CGRectContainsPoint(*(CGRect *)(v12 - 24), v16))
        break;
    }
    v12 += 40;
    if (!--v11)
    {
      swift_release(v8);
      swift_bridgeObjectRelease_n(v10, 2);
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease_n(v5, 2);
  swift_bridgeObjectRelease_n(v10, 2);
  return v8;
}

_QWORD *PagePaginationEntity.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  return v0;
}

uint64_t PagePaginationEntity.__deallocating_deinit()
{
  uint64_t v0;

  PagePaginationEntity.deinit();
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t sub_CDB6C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_CE6B0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_CDB94(_QWORD *a1)
{
  sub_CD730(a1);
}

uint64_t PagePaginationEntity.description.getter()
{
  uint64_t v0;
  _QWORD *v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  __int128 v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  void *v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  Swift::String v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];
  uint64_t v52[3];
  uint64_t v53[3];
  uint64_t v54[3];
  uint64_t v55[3];
  uint64_t v56[3];
  _BYTE v57[24];
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v1 = (_QWORD *)v0;
  *(_QWORD *)&v60 = 0;
  *((_QWORD *)&v60 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(304);
  v58 = 0;
  v59 = 0xE000000000000000;
  v2._countAndFlagsBits = 0xD000000000000028;
  v2._object = (void *)0x80000000002CA8B0;
  String.append(_:)(v2);
  *(_QWORD *)&v60 = *(_QWORD *)(v0 + 16);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0xD000000000000010;
  v5._object = (void *)0x80000000002CA8E0;
  String.append(_:)(v5);
  v6 = *(_OWORD *)(v0 + 40);
  v60 = *(_OWORD *)(v0 + 24);
  v61 = v6;
  v62 = *(_QWORD *)(v0 + 56);
  v7._countAndFlagsBits = sub_5D4E8();
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._countAndFlagsBits = 0xD00000000000002BLL;
  v9._object = (void *)0x80000000002CA900;
  String.append(_:)(v9);
  swift_beginAccess(v0 + 64, v57, 0, 0);
  v10 = *(_QWORD *)(v0 + 64);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v45 = v1[8];
    else
      v45 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1[8]);
    v11 = _CocoaArrayWrapper.endIndex.getter(v45);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v11 = *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8));
  }
  v56[0] = v11;
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0xD000000000000022;
  v14._object = (void *)0x80000000002CA930;
  String.append(_:)(v14);
  swift_beginAccess(v1 + 9, v56, 0, 0);
  v15 = v1[9];
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v46 = v1[9];
    else
      v46 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1[9]);
    v16 = _CocoaArrayWrapper.endIndex.getter(v46);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    v16 = *(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8));
  }
  v55[0] = v16;
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  v19._countAndFlagsBits = 0xD00000000000001ELL;
  v19._object = (void *)0x80000000002CA960;
  String.append(_:)(v19);
  swift_beginAccess(v1 + 10, v55, 0, 0);
  v20 = v1[10];
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v47 = v1[10];
    else
      v47 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1[10]);
    v21 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v21 = *(_QWORD *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8));
  }
  v54[0] = v21;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  v24._object = (void *)0x80000000002CA980;
  v24._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v24);
  swift_beginAccess(v1 + 11, v54, 0, 0);
  v25 = v1[11];
  if ((unint64_t)v25 >> 62)
  {
    if (v25 < 0)
      v48 = v1[11];
    else
      v48 = v25 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1[11]);
    v26 = _CocoaArrayWrapper.endIndex.getter(v48);
    swift_bridgeObjectRelease(v25);
  }
  else
  {
    v26 = *(_QWORD *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8));
  }
  v53[0] = v26;
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29._countAndFlagsBits = 0xD000000000000022;
  v29._object = (void *)0x80000000002CA9A0;
  String.append(_:)(v29);
  swift_beginAccess(v1 + 12, v53, 0, 0);
  v30 = v1[12];
  if ((unint64_t)v30 >> 62)
  {
    if (v30 < 0)
      v49 = v1[12];
    else
      v49 = v30 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1[12]);
    v31 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease(v30);
  }
  else
  {
    v31 = *(_QWORD *)((char *)&dword_10 + (v30 & 0xFFFFFFFFFFFFF8));
  }
  v52[0] = v31;
  v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v33 = v32._object;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v33);
  v34._countAndFlagsBits = 0xD00000000000001FLL;
  v34._object = (void *)0x80000000002CA9D0;
  String.append(_:)(v34);
  swift_beginAccess(v1 + 13, v52, 0, 0);
  v35 = v1[13];
  if ((unint64_t)v35 >> 62)
  {
    if (v35 < 0)
      v50 = v1[13];
    else
      v50 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1[13]);
    v36 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v35);
  }
  else
  {
    v36 = *(_QWORD *)((char *)&dword_10 + (v35 & 0xFFFFFFFFFFFFF8));
  }
  v51[0] = v36;
  v37._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v38);
  v39._object = (void *)0x80000000002CA9F0;
  v39._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v39);
  swift_beginAccess(v1 + 14, v51, 0, 0);
  v40 = v1[15];
  if (v40)
  {
    v41 = v1[14];
    v42 = (void *)v1[15];
  }
  else
  {
    v42 = (void *)0xE600000000000000;
    v41 = 0x296C6C756E28;
  }
  swift_bridgeObjectRetain(v40);
  v43._countAndFlagsBits = v41;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v42);
  return v58;
}

uint64_t sub_CE0CC()
{
  return PagePaginationEntity.description.getter();
}

uint64_t PagePaginationEntity.debugDescription.getter()
{
  uint64_t v0;
  _QWORD *v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  __int128 v6;
  Swift::String v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  Swift::String v37;
  void *v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  void *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  _BYTE v51[24];
  _BYTE v52[24];
  _BYTE v53[24];
  _BYTE v54[24];
  _BYTE v55[24];
  _BYTE v56[24];
  _BYTE v57[24];
  uint64_t v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v1 = (_QWORD *)v0;
  *(_QWORD *)&v60 = 0;
  *((_QWORD *)&v60 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(304);
  v58 = 0;
  v59 = 0xE000000000000000;
  v2._countAndFlagsBits = 0xD000000000000028;
  v2._object = (void *)0x80000000002CA8B0;
  String.append(_:)(v2);
  *(_QWORD *)&v60 = *(_QWORD *)(v0 + 16);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0xD000000000000010;
  v5._object = (void *)0x80000000002CA8E0;
  String.append(_:)(v5);
  v6 = *(_OWORD *)(v0 + 40);
  v60 = *(_OWORD *)(v0 + 24);
  v61 = v6;
  v62 = *(_QWORD *)(v0 + 56);
  v7._countAndFlagsBits = sub_5D4E8();
  v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._countAndFlagsBits = 0xD00000000000002BLL;
  v9._object = (void *)0x80000000002CA900;
  String.append(_:)(v9);
  swift_beginAccess(v0 + 64, v57, 0, 0);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = type metadata accessor for HighlightPaginationEntityReference();
  swift_bridgeObjectRetain(v10);
  v13._countAndFlagsBits = Array.description.getter(v12, v11);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  v15._object = (void *)0x80000000002CA930;
  v15._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v15);
  swift_beginAccess(v1 + 9, v56, 0, 0);
  v16 = v1[9];
  v17 = type metadata accessor for BookmarkPaginationEntityReference();
  swift_bridgeObjectRetain(v16);
  v19._countAndFlagsBits = Array.description.getter(v18, v17);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 0xD00000000000001ELL;
  v21._object = (void *)0x80000000002CA960;
  String.append(_:)(v21);
  swift_beginAccess(v1 + 10, v55, 0, 0);
  v22 = v1[10];
  v23 = type metadata accessor for AnchorPaginationEntityReference();
  swift_bridgeObjectRetain(v22);
  v25._countAndFlagsBits = Array.description.getter(v24, v23);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v26);
  v27._object = (void *)0x80000000002CA980;
  v27._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v27);
  swift_beginAccess(v1 + 11, v54, 0, 0);
  v28 = v1[11];
  v29 = type metadata accessor for MediaElementPaginationEntityReference();
  swift_bridgeObjectRetain(v28);
  v31._countAndFlagsBits = Array.description.getter(v30, v29);
  v32 = v31._object;
  String.append(_:)(v31);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v32);
  v33._object = (void *)0x80000000002CA9A0;
  v33._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v33);
  swift_beginAccess(v1 + 12, v53, 0, 0);
  v34 = v1[12];
  v35 = type metadata accessor for ExpandableContentPaginationEntityReference();
  swift_bridgeObjectRetain(v34);
  v37._countAndFlagsBits = Array.description.getter(v36, v35);
  v38 = v37._object;
  String.append(_:)(v37);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v38);
  v39._countAndFlagsBits = 0xD00000000000001FLL;
  v39._object = (void *)0x80000000002CA9D0;
  String.append(_:)(v39);
  swift_beginAccess(v1 + 13, v52, 0, 0);
  v40 = v1[13];
  v41 = type metadata accessor for HistoryPaginationEntityReference();
  swift_bridgeObjectRetain(v40);
  v43._countAndFlagsBits = Array.description.getter(v42, v41);
  v44 = v43._object;
  String.append(_:)(v43);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v44);
  v45._object = (void *)0x80000000002CA9F0;
  v45._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v45);
  swift_beginAccess(v1 + 14, v51, 0, 0);
  v46 = v1[15];
  if (v46)
  {
    v47 = v1[14];
    v48 = (void *)v1[15];
  }
  else
  {
    v48 = (void *)0xE600000000000000;
    v47 = 0x296C6C756E28;
  }
  swift_bridgeObjectRetain(v46);
  v49._countAndFlagsBits = v47;
  v49._object = v48;
  String.append(_:)(v49);
  swift_bridgeObjectRelease(v48);
  return v58;
}

uint64_t sub_CE4D8()
{
  return PagePaginationEntity.debugDescription.getter();
}

uint64_t sub_CE4F8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x7366664F65676170 && a2 == 0xEA00000000007465)
  {
    v5 = 0xEA00000000007465;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7366664F65676170, 0xEA00000000007465, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7463655265676170 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7463655265676170, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000015)
  {
    v8 = 0x80000000002CAB20;
    if (a2 == 0x80000000002CAB20)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000002CAB20, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000002CAB40)
  {
    swift_bridgeObjectRelease(0x80000000002CAB40);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000002CAB40, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_CE6B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = sub_319AC(&qword_3BB270);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = (uint64_t)sub_472D0(a1, v7);
  v10 = sub_CE924();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PagePaginationEntity.CodingKeys, &type metadata for PagePaginationEntity.CodingKeys, v10, v7, v8);
  if (!v1)
  {
    LOBYTE(v30) = 0;
    v11 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v3);
    v12 = sub_319AC(&qword_3B6C00);
    v35 = 1;
    v13 = sub_5DA78((unint64_t *)&unk_3B7340, (uint64_t)&protocol conformance descriptor for <> RelativeValue<A, B>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, v12, &v35, v3, v12, v13);
    v14 = v30;
    v15 = v31;
    v16 = v32;
    v17 = v33;
    v18 = v34;
    LOBYTE(v30) = 2;
    v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v3);
    v22 = v21;
    v29 = v19;
    LOBYTE(v30) = 3;
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v3);
    v30 = v14;
    v31 = v15;
    v32 = v16;
    v33 = v17;
    v34 = v18;
    v28 = v23;
    v25 = v24;
    v26 = type metadata accessor for PagePaginationEntity();
    v9 = swift_allocObject(v26, 144);
    PagePaginationEntity.init(pageOffset:pageRect:highlightPaginationEntityReferences:bookmarkEntityReferences:anchorEntityReferences:mediaEntityReferences:expandableEntityReferences:historyEntityReferences:firstPhysicalPageName:lastPhysicalPageName:)(v11, &v30, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v29, v22, v28, v25);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_34488(a1);
  return v9;
}

unint64_t sub_CE924()
{
  unint64_t result;

  result = qword_3BB020;
  if (!qword_3BB020)
  {
    result = swift_getWitnessTable(&unk_2EAD7C, &type metadata for PagePaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BB020);
  }
  return result;
}

uint64_t sub_CE968@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 64, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 64);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_CE9B4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 72, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 72);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_CEA00@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 80, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 80);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_CEA4C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 88, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 88);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_CEA98@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 96, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 96);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_CEAE4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 104, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 104);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_CEB30@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 112, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 120);
  *a2 = *(_QWORD *)(v3 + 112);
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_CEB7C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 128, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 136);
  *a2 = *(_QWORD *)(v3 + 128);
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t type metadata accessor for PagePaginationEntity()
{
  return objc_opt_self(_TtC8BookEPUB20PagePaginationEntity);
}

uint64_t method lookup function for PagePaginationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PagePaginationEntity);
}

uint64_t dispatch thunk of PagePaginationEntity.anchorEntityReferences.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ContentLayoutProvider.logKey.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PagePaginationEntity.__allocating_init(pageOffset:pageRect:highlightPaginationEntityReferences:bookmarkEntityReferences:anchorEntityReferences:mediaEntityReferences:expandableEntityReferences:historyEntityReferences:firstPhysicalPageName:lastPhysicalPageName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 352))();
}

uint64_t dispatch thunk of PagePaginationEntity.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 360))();
}

uint64_t dispatch thunk of PagePaginationEntity.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t storeEnumTagSinglePayload for PagePaginationEntity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_CECAC + 4 * byte_2EAB89[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_CECE0 + 4 * byte_2EAB84[v4]))();
}

uint64_t sub_CECE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CECE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCECF0);
  return result;
}

uint64_t sub_CECFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCED04);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_CED08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CED10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PagePaginationEntity.CodingKeys()
{
  return &type metadata for PagePaginationEntity.CodingKeys;
}

unint64_t sub_CED30()
{
  unint64_t result;

  result = qword_3BB258;
  if (!qword_3BB258)
  {
    result = swift_getWitnessTable(&unk_2EAD54, &type metadata for PagePaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BB258);
  }
  return result;
}

unint64_t sub_CED78()
{
  unint64_t result;

  result = qword_3BB260;
  if (!qword_3BB260)
  {
    result = swift_getWitnessTable("}O\t", &type metadata for PagePaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BB260);
  }
  return result;
}

unint64_t sub_CEDC0()
{
  unint64_t result;

  result = qword_3BB268;
  if (!qword_3BB268)
  {
    result = swift_getWitnessTable(&unk_2EACEC, &type metadata for PagePaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BB268);
  }
  return result;
}

id sub_CEE30()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReadingSettingsInteractor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ReadingSettingsInteractor()
{
  return objc_opt_self(_TtC8BookEPUB25ReadingSettingsInteractor);
}

uint64_t dispatch thunk of ContentMediatorEventHandling.content(_:failedToLoadWithError:retryAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of ContentMediatorEventHandling.content(_:buildMenuWith:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of ContentEventHandler.contentViewDidNotHandleTap(at:touchType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of LocationControlling.update(currentCFIInformation:documentRelativeRect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of ContentNavigationEventHandler.handleUserRequestForFrameToLoadExternalURL(externalURL:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t sub_CEEE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 64) = v1;
  *(_OWORD *)(v2 + 72) = *(_OWORD *)a1;
  *(_BYTE *)(v2 + 184) = *(_BYTE *)(a1 + 16);
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 88) = v3;
  *(_QWORD *)(v2 + 96) = static MainActor.shared.getter();
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 104) = v4;
  *(_QWORD *)(v2 + 112) = v5;
  return swift_task_switch(sub_CEF60, v4, v5);
}

uint64_t sub_CEF60()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v1 = *(_BYTE *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v4 + 144);
  ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 136));
  *(_QWORD *)(v0 + 120) = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
  v21 = v3;
  v22 = v2;
  v23 = v1;
  v7 = SearchResultType.cfi.getter();
  *(_QWORD *)(v0 + 128) = v8;
  if (v8)
  {
    v9 = *(_QWORD *)(v0 + 88);
    *(_QWORD *)(v0 + 136) = v7;
    *(_QWORD *)(v0 + 144) = static MainActor.shared.getter();
    v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 152) = v10;
    *(_QWORD *)(v0 + 160) = v11;
    return swift_task_switch(sub_CF084, v10, v11);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 96));
    v13 = *(_QWORD *)(v0 + 120);
    v14 = *(_BYTE *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 64);
    v18 = *(_QWORD *)(v17 + 40);
    v19 = swift_getObjectType(*(_QWORD *)(v17 + 32));
    v21 = v16;
    v22 = v15;
    v23 = v14;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 176))(&v21, v19, v18);
    v20 = swift_release(v13);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v20);
  }
}

uint64_t sub_CF084()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[16];
  v2 = (_QWORD *)swift_task_alloc(dword_3C164C);
  v0[21] = v2;
  *v2 = v0;
  v2[1] = sub_CF0E4;
  return sub_1C21C0(v0[17], v1, 1);
}

uint64_t sub_CF0E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_CF13C, *(_QWORD *)(v2 + 152), *(_QWORD *)(v2 + 160));
}

uint64_t sub_CF13C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[16];
  swift_release(v0[18]);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_CF180, v0[13], v0[14]);
}

uint64_t sub_CF180()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t v34;
  Swift::String v35;
  void *object;
  Swift::String v37;
  Swift::String v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t ObjectType;
  __n128 v48;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  os_log_type_t type;
  NSObject *log;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];

  v1 = *(_QWORD *)(v0 + 176);
  swift_release(*(_QWORD *)(v0 + 96));
  if (!v1)
    goto LABEL_21;
  v2 = *(_QWORD **)(v0 + 176);
  if (!v2[2])
  {
    swift_bridgeObjectRelease(v2);
    goto LABEL_21;
  }
  v3 = v2[4];
  v4 = v2[5];
  v5 = v2[6];
  swift_bridgeObjectRelease(v2);
  v60 = v3;
  v6 = BookPaginationEntity.document(with:)(&v60);
  if (!v6)
  {
LABEL_21:
    v7 = *(_QWORD *)(v0 + 120);
    v42 = *(_BYTE *)(v0 + 184);
    v44 = *(_QWORD *)(v0 + 72);
    v43 = *(_QWORD *)(v0 + 80);
    v45 = *(_QWORD *)(v0 + 64);
    v46 = *(_QWORD *)(v45 + 40);
    ObjectType = swift_getObjectType(*(_QWORD *)(v45 + 32));
    v60 = v44;
    v61 = v43;
    LOBYTE(v62) = v42;
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v46 + 176))(&v60, ObjectType, v46);
    goto LABEL_22;
  }
  v7 = v6;
  v60 = v3;
  v61 = v4;
  v62 = v5;
  v8 = sub_ADA28(&v60);
  if (!v8)
  {
LABEL_20:
    swift_release(v7);
    goto LABEL_21;
  }
  v9 = v8;
  v10 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)(v7 + 16);
  v12 = *(_QWORD *)(v8 + 16);
  v13 = *(_QWORD *)(v10 + 96);
  v14 = *(_QWORD *)(v10 + 104);
  v15 = swift_getObjectType(v13);
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(v14 + 40);
  v17 = swift_unknownObjectRetain(v13);
  v16(&v60, v15, v14, v17);
  swift_unknownObjectRelease(v13);
  v18 = v60;
  if (!v60)
  {
    swift_release(v9);
    goto LABEL_20;
  }
  v20 = v61;
  v19 = v62;
  v21 = *(_QWORD *)(v60 + 16);
  if (!v21)
  {
LABEL_18:
    swift_release(v9);
    swift_release(v7);
    sub_5B838(v18, v20, v19);
    goto LABEL_21;
  }
  v22 = (_BYTE *)(v60 + 48);
  while ((*v22 & 1) != 0 || *((_QWORD *)v22 - 2) != v11 || *((_QWORD *)v22 - 1) != v12)
  {
    v22 += 24;
    if (!--v21)
      goto LABEL_18;
  }
  v55 = (uint64_t *)(v0 + 32);
  v56 = (_QWORD *)(v0 + 40);
  v59 = v62;
  v24 = sub_5B864(v60, v61, v62);
  v25 = Logger.logObject.getter(v24);
  log = v25;
  type = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v25, type))
  {
    swift_release(*(_QWORD *)(v0 + 120));

    swift_release(v9);
    swift_release(v7);
    sub_5B838(v18, v20, v59);
    sub_5B838(v18, v20, v59);
    return (*(uint64_t (**)(__n128))(v0 + 8))(v48);
  }
  v51 = *(_QWORD *)(v0 + 120);
  v26 = swift_slowAlloc(22, -1);
  v50 = swift_slowAlloc(64, -1);
  v63[0] = v50;
  v53 = (uint8_t *)v26;
  *(_DWORD *)v26 = 136315394;
  v60 = 91;
  v61 = 0xE100000000000000;
  v27 = swift_bridgeObjectRetain(v18);
  v52 = sub_E49E0(v27);
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)(v0 + 24) = v52;
  v28 = sub_319AC((uint64_t *)&unk_3B8C90);
  v29 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
  v54 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v28, v29);
  v31 = v30;
  swift_bridgeObjectRelease(v52);
  v32._countAndFlagsBits = v54;
  v32._object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease(v31);
  v33._countAndFlagsBits = 93;
  v33._object = (void *)0xE100000000000000;
  String.append(_:)(v33);
  v34 = v61;
  *v55 = sub_33524(v60, v61, v63);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v56, v26 + 4);
  swift_bridgeObjectRelease(v34);
  sub_5B838(v18, v20, v59);
  sub_5B838(v18, v20, v59);
  *(_WORD *)(v26 + 12) = 2080;
  v60 = 60;
  v61 = 0xE100000000000000;
  *v56 = v11;
  v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v35._object;
  String.append(_:)(v35);
  swift_bridgeObjectRelease(object);
  v37._countAndFlagsBits = 58;
  v37._object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  *(_QWORD *)(v0 + 48) = v12;
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v39 = v38._object;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v39);
  v40._countAndFlagsBits = 62;
  v40._object = (void *)0xE100000000000000;
  String.append(_:)(v40);
  v41 = v61;
  *(_QWORD *)(v0 + 56) = sub_33524(v60, v61, v63);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v53 + 14);
  swift_bridgeObjectRelease(v41);
  _os_log_impl(&dword_0, log, type, "Reveal search result: Current spread %s contains target location %s; no need to navigate",
    v53,
    0x16u);
  swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v50, -1, -1);
  swift_slowDealloc(v53, -1, -1);
  swift_release(v51);

  swift_release(v9);
LABEL_22:
  v48 = swift_release(v7);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v48);
}

uint64_t sub_CF684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  _BYTE v14[24];
  _QWORD v15[18];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v1 + 104);
  ObjectType = swift_getObjectType(v2);
  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128))(v3 + 16);
  v6 = swift_unknownObjectRetain(v2);
  v5(v15, ObjectType, v3, v6);
  swift_unknownObjectRelease(v2);
  sub_49900((uint64_t)v15);
  v7 = v15[0];
  swift_beginAccess(v1 + 264, v14, 32, 0);
  v8 = *(_QWORD *)(v1 + 264);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_3B7F8(v7), (v10 & 1) != 0))
  {
    v11 = (uint64_t *)(*(_QWORD *)(v8 + 56) + 16 * v9);
    v12 = *v11;
    swift_bridgeObjectRetain(v11[1]);
  }
  else
  {
    v12 = 0;
  }
  swift_endAccess(v14);
  return v12;
}

uint64_t sub_CF758()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];
  _QWORD v27[18];

  v1 = v0;
  v2 = sub_CF684();
  if (!v3)
    goto LABEL_7;
  v4 = v2;
  v5 = v3;
  swift_bridgeObjectRelease(v3);
  v6 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v6 = v4 & 0xFFFFFFFFFFFFLL;
  if (v6)
  {
    v7 = v1[12];
    v8 = v1[13];
    ObjectType = swift_getObjectType(v7);
    v10 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128))(v8 + 16);
    v11 = swift_unknownObjectRetain(v7);
    v10(v27, ObjectType, v8, v11);
    swift_unknownObjectRelease(v7);
    sub_49900((uint64_t)v27);
    v12 = v27[0];
    v13 = v1[18];
    v14 = swift_getObjectType(v1[17]);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v14, v13);
    v16 = BookPaginationEntity.document(for:)(v12);
    swift_release(v15);
    if (v16)
    {
      v17 = (char *)(v16 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument);
      swift_beginAccess(v16 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_isVerticalDocument, v26, 0, 0);
      v18 = *v17;
      swift_release(v16);
    }
    else
    {
      v24 = v1[4];
      v23 = v1[5];
      v25 = swift_getObjectType(v24);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 200))(v25, v23);
    }
    return v18 & 1;
  }
  else
  {
LABEL_7:
    v20 = v1[4];
    v19 = v1[5];
    v21 = swift_getObjectType(v20);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 200))(v21, v19) & 1;
  }
}

uint64_t sub_CF8A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = v2;
  v1[4] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[5] = v3;
  v1[6] = v4;
  return swift_task_switch(sub_CF914, v3, v4);
}

uint64_t sub_CF914()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  sub_C8770(v21);
  v2 = v21[2];
  v1 = v22;
  *(_QWORD *)(v0 + 56) = v22;
  if (!v2)
    goto LABEL_4;
  v3 = v29;
  v19 = v27;
  v20 = v28;
  v5 = v25;
  v4 = v26;
  v7 = v23;
  v6 = v24;
  *(_QWORD *)(v0 + 64) = v23;
  v9 = v21[0];
  v8 = v21[1];
  swift_bridgeObjectRetain(v7);
  v10 = sub_CA7DC(v9, v8, v2, v1, v7, v6, v5, v4, v19, *((uint64_t *)&v19 + 1), v20, *((uint64_t *)&v20 + 1), v3);
  if (v7)
  {
    v11 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 72) = static MainActor.shared.getter(v10);
    v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
    *(_QWORD *)(v0 + 80) = v12;
    *(_QWORD *)(v0 + 88) = v13;
    return swift_task_switch(sub_CFABC, v12, v13);
  }
  else
  {
LABEL_4:
    swift_release(*(_QWORD *)(v0 + 32));
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "Unable to present edit menu: missing selection CFI or can't determine source rect", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_CFABC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[8];
  v0[12] = *(_QWORD *)(v0[2] + 152);
  v2 = (_QWORD *)swift_task_alloc(dword_3C164C);
  v0[13] = v2;
  *v2 = v0;
  v2[1] = sub_CFB20;
  return sub_1C21C0(v0[7], v1, 1);
}

uint64_t sub_CFB20(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_CFB78, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_CFB78()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_CFBB8, v0[5], v0[6]);
}

uint64_t sub_CFBB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  double *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  char v7;
  unint64_t v9;
  char v10;

  v1 = *(_QWORD *)(v0 + 112);
  swift_release(*(_QWORD *)(v0 + 32));
  if (v1 && (v3 = *(double **)(v0 + 112), sub_4A1C8(v3, (uint64_t)&v9), swift_bridgeObjectRelease(v3), (v10 & 1) == 0))
  {
    v7 = sub_1C2608(&v9);
  }
  else
  {
    v4 = Logger.logObject.getter(v2);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_0, v4, v5, "Unable to present edit menu: missing selection CFI or can't determine source rect", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = 0;
  }
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v7 & 1);
}

uint64_t sub_CFCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = v4;
  v3[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[7] = v5;
  v3[8] = v6;
  return swift_task_switch(sub_CFD30, v5, v6);
}

uint64_t sub_CFD30(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[5];
  v1[9] = *(_QWORD *)(v1[4] + 168);
  v1[10] = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_CFD98, v3, v4);
}

uint64_t sub_CFD98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5[2];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v0[2];
  v1 = v0[3];
  swift_release(v0[10]);
  sub_C96D0();
  swift_bridgeObjectRetain(v1);
  sub_C79D4(v2, v1);
  sub_C8770(v5);
  v3 = v6;
  v0[11] = v6;
  if (v3)
    sub_CA7DC(v5[0], v5[1], v3, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
  return swift_task_switch(sub_CFE2C, v0[7], v0[8]);
}

uint64_t sub_CFE2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 88) != 0);
}

double sub_CFE68(uint64_t a1)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  _BYTE v8[24];

  v2 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(a1 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v6 + 32))(ObjectType, v6);
    *(_QWORD *)&result = swift_unknownObjectRelease(v5).n128_u64[0];
  }
  return result;
}

double sub_CFED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  __n128 v44;
  double result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[3];

  v3 = v2;
  v49 = a1;
  v50 = a2;
  v4 = sub_319AC(&qword_3BB480);
  v5 = *(_QWORD *)(v4 - 8);
  v53 = v4;
  v54 = v5;
  __chkstk_darwin(v4);
  v51 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_319AC(&qword_3BB488);
  v8 = *(_QWORD *)(v7 - 8);
  v55 = v7;
  v56 = v8;
  __chkstk_darwin(v7);
  v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_319AC((uint64_t *)&unk_3BE6F0);
  v11 = *(_QWORD *)(v10 - 8);
  v47 = v10;
  v48 = v11;
  __chkstk_darwin(v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v2 + 32);
  v14 = *(_QWORD *)(v2 + 40);
  ObjectType = swift_getObjectType(v15);
  v17 = *(_QWORD *)(v14 + 8);
  v18 = *(uint64_t (**)(uint64_t, uint64_t))(v17 + 16);
  v57[0] = v18(ObjectType, v17);
  v19 = swift_allocObject(&unk_380160, 24, 7);
  swift_weakInit(v19 + 16, *(_QWORD *)(v3 + 88));
  v20 = sub_319AC((uint64_t *)&unk_3BE710);
  v21 = sub_3DCC0((unint64_t *)&unk_3BD180, (uint64_t *)&unk_3BE710, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher<>.sink(receiveValue:)(sub_D68C4, v19, v20, v21);
  swift_release();
  swift_release();
  v22 = v3 + 296;
  v23 = swift_beginAccess(v3 + 296, v57, 33, 0);
  AnyCancellable.store(in:)(v3 + 296, v23);
  swift_endAccess(v57);
  v24 = swift_release();
  v57[0] = ((uint64_t (*)(uint64_t, uint64_t, __n128))v18)(ObjectType, v17, v24);
  Publisher.dropFirst(_:)(1, v20, v21);
  swift_release();
  v25 = swift_allocObject(&unk_37FF80, 24, 7);
  v26 = v3;
  swift_weakInit(v25 + 16, v3);
  v27 = sub_3DCC0((unint64_t *)&unk_3BE720, (uint64_t *)&unk_3BE6F0, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v28 = v47;
  Publisher<>.sink(receiveValue:)(sub_D68CC, v25, v47, v27);
  v29 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v48 + 8))(v13, v28, v29);
  v30 = swift_beginAccess(v3 + 296, v57, 33, 0);
  AnyCancellable.store(in:)(v3 + 296, v30);
  swift_endAccess(v57);
  swift_release();
  v31 = swift_getObjectType(v49);
  v57[0] = (*(uint64_t (**)(uint64_t))(v50 + 48))(v31);
  KeyPath = swift_getKeyPath(&unk_2EB150);
  v33 = sub_319AC(&qword_3B7298);
  v34 = sub_3DCC0(&qword_3BE7B0, &qword_3B7298, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v35 = v51;
  Publisher.map<A>(_:)(KeyPath, v33, v34);
  swift_release();
  swift_release();
  v36 = sub_3DCC0(&qword_3BB490, &qword_3BB480, (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  v37 = sub_5B890();
  v39 = v52;
  v38 = v53;
  Publisher<>.removeDuplicates()(v53, v36, v37);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v35, v38);
  v40 = swift_allocObject(&unk_37FF80, 24, 7);
  swift_weakInit(v40 + 16, v26);
  v41 = sub_3DCC0(&qword_3BB498, &qword_3BB488, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v42 = v55;
  Publisher<>.sink(receiveValue:)(sub_D68D4, v40, v55, v41);
  v43 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v56 + 8))(v39, v42, v43);
  v44 = swift_beginAccess(v22, v57, 33, 0);
  AnyCancellable.store(in:)(v22, v44);
  swift_endAccess(v57);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_D031C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_47418(v0 + 16);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  sub_34488((_QWORD *)(v0 + 48));
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 96));
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 120));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 136));
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectWeakDestroy(v0 + 176);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 184));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 200));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 216));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 256));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 296));
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC8BookEPUB20BookContentPresenter_log;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_D0418()
{
  uint64_t v0;

  sub_D031C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_D043C()
{
  return type metadata accessor for BookContentPresenter(0);
}

uint64_t type metadata accessor for BookContentPresenter(uint64_t a1)
{
  uint64_t result;

  result = qword_3BB2E0;
  if (!qword_3BB2E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookContentPresenter);
  return result;
}

uint64_t sub_D0480(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[25];

  v4[0] = &unk_2EB028;
  v4[1] = &unk_2EB040;
  v4[2] = &unk_2EB058;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = &unk_2EB040;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = &unk_2EB040;
  v4[7] = &unk_2EB040;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[11] = &unk_2EB070;
  v4[12] = &unk_2EB040;
  v4[13] = &unk_2EB040;
  v4[14] = &unk_2EB040;
  v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[16] = &unk_2EB088;
  v4[17] = &unk_2EB0A0;
  v4[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[19] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[20] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[21] = &unk_2EB0B8;
  v4[22] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[23] = &unk_2EB0B8;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[24] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 25, v4, a1 + 80);
  }
  return result;
}

double sub_D0574(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t ObjectType;
  _BYTE v7[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  if (swift_weakLoadStrong(v4))
  {
    ObjectType = swift_getObjectType(v3);
    sub_9758C(v3, ObjectType, v2);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_D05EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(__n128);
  __n128 v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  _BYTE v36[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  a2 += 16;
  swift_beginAccess(a2, v36, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v11 = Strong;
    v12 = *(_QWORD *)(Strong + 216);
    v13 = *(_QWORD *)(Strong + 224);
    swift_getObjectType(v12);
    v14 = *(void (**)(__n128))(v13 + 24);
    swift_unknownObjectRetain(v12);
    v15 = swift_unknownObjectRetain(v8);
    v14(v15);
    swift_unknownObjectRelease(v12);
    v16 = swift_unknownObjectRetain_n(v8, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v35[0] = v20;
      *(_DWORD *)v19 = 136315138;
      ObjectType = swift_getObjectType(v8);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 184))(ObjectType, v9);
      v24 = v23;
      v34 = sub_33524(v22, v23, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v19 + 4);
      swift_unknownObjectRelease_n(v8, 2);
      swift_bridgeObjectRelease(v24);
      _os_log_impl(&dword_0, v17, v18, "Updating contentLayoutController #contentConfig:%s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n(v8, 2);
    }

    v30 = *(_QWORD *)(v11 + 152);
    swift_beginAccess(v30 + 112, v35, 1, 0);
    v31 = *(_QWORD *)(v30 + 112);
    v32 = *(_QWORD *)(v30 + 120);
    *(_QWORD *)(v30 + 112) = v8;
    *(_QWORD *)(v30 + 120) = v9;
    swift_unknownObjectRetain_n(v8, 2);
    swift_retain();
    sub_1C448C(v31, v32);
    swift_release();
    swift_release();
    swift_unknownObjectRelease(v31);
    *(_QWORD *)&result = swift_unknownObjectRelease(v8).n128_u64[0];
  }
  else
  {
    if (qword_3B5698 != -1)
      swift_once(&qword_3B5698, sub_52378);
    v25 = Logger.init(_:)((id)qword_3CEEF0);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      swift_slowDealloc(v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

double sub_D0928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  if (swift_weakLoadStrong(v2))
  {
    sub_D097C();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_D097C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  void (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  _QWORD v10[5];

  CurrentValueSubject.value.getter(v10);
  v0 = v10[0];
  v1 = v10[3];
  swift_unknownObjectRelease(v10[1]);
  swift_unknownObjectRelease(v1);
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(v0);
    v3 = (uint64_t *)(v0 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      ObjectType = swift_getObjectType(v4);
      v7 = *(void (**)(uint64_t, uint64_t, __n128))(v5 + 344);
      v8 = swift_unknownObjectRetain(v4);
      v7(ObjectType, v5, v8);
      swift_unknownObjectRelease(v4);
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v0);
  }
  return swift_bridgeObjectRelease(v0);
}

uint64_t sub_D0A38(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t (*v15)(uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v36;
  _QWORD v37[3];
  uint64_t v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  char v44;

  v3 = v2;
  v5 = *a1;
  v6 = *((double *)a1 + 1);
  v7 = *((double *)a1 + 2);
  CurrentValueSubject.value.getter(&v38);
  v8 = v38;
  v9 = v41;
  swift_unknownObjectRelease(*(_QWORD *)&v39);
  swift_unknownObjectRelease(v9);
  v10 = *(_QWORD *)(v8 + 16);
  if (v10)
  {
    v36 = a2;
    swift_bridgeObjectRetain(v8);
    v11 = (uint64_t *)(v8 + 40);
    while (1)
    {
      v12 = *(v11 - 1);
      v13 = *v11;
      ObjectType = swift_getObjectType(v12);
      v15 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v13 + 48);
      v16 = swift_unknownObjectRetain(v12);
      v17 = v15(ObjectType, v13, v16);
      if (v17)
      {
        v18 = (void *)v17;
        swift_getObjectType(v17);
        v37[0] = v5;
        *(double *)&v37[1] = v6;
        *(double *)&v37[2] = v7;
        v19 = UICoordinateSpace.contains(_:)((uint64_t)v37);

        if (v19)
          break;
      }
      swift_unknownObjectRelease(v12);
      v11 += 2;
      if (!--v10)
      {
        swift_bridgeObjectRelease(v8);
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease_n(v8, 2);
    v38 = v5;
    v39 = v6;
    v40 = v7;
    (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v13 + 272))(&v42, &v38, ObjectType, v13);
    swift_unknownObjectRelease(v12);
    if ((v44 & 1) != 0)
      goto LABEL_10;
    v21 = *(double *)v43;
    v20 = *(double *)&v43[1];
    v22 = v42;
    v23 = *(_QWORD *)(v3 + 40);
    v24 = swift_getObjectType(*(_QWORD *)(v3 + 32));
    v38 = v22;
    v39 = v21;
    v40 = v20;
    v25 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 168))(&v38, v36 & 1, v24, v23);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease(v8);
LABEL_10:
    v26 = swift_unknownObjectRetain_n(v5, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v38 = v30;
      *(_DWORD *)v29 = 136315138;
      swift_unknownObjectRetain(v5);
      v32 = sub_5D7E8(v31, v6, v7);
      v34 = v33;
      swift_unknownObjectRelease(v5);
      v42 = sub_33524(v32, v34, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v29 + 4);
      swift_unknownObjectRelease_n(v5, 2);
      swift_bridgeObjectRelease(v34);
      _os_log_impl(&dword_0, v27, v28, "Failed to get document point for tap point: %s", v29, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n(v5, 2);
    }

    v25 = 0;
  }
  return v25 & 1;
}

uint64_t sub_D0D18(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37[3];

  v3 = v2;
  v6 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v6);
  v8 = (char *)&v37[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 3)
    return 0;
  v9 = *a1;
  v10 = *((double *)a1 + 1);
  v11 = *((double *)a1 + 2);
  v37[0] = *a1;
  *(double *)&v37[1] = v10;
  *(double *)&v37[2] = v11;
  v12 = sub_D10D0(v37);
  if (!v13)
  {
    v21 = swift_unknownObjectRetain_n(v9, 2);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v37[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_unknownObjectRetain(v9);
      v27 = sub_5D7E8(v26, v10, v11);
      v29 = v28;
      swift_unknownObjectRelease(v9);
      v36 = sub_33524(v27, v29, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v24 + 4);
      swift_unknownObjectRelease_n(v9, 2);
      swift_bridgeObjectRelease(v29);
      _os_log_impl(&dword_0, v22, v23, "#unhandled_tap Not presenting highlight edit menu at %s because there no highlight there", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n(v9, 2);
    }

    return 0;
  }
  v14 = v12;
  v15 = v13;
  v16 = swift_bridgeObjectRetain_n(v13, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v37[0] = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(v15);
    v36 = sub_33524(v14, v15, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v19 + 4);
    swift_bridgeObjectRelease_n(v15, 3);
    _os_log_impl(&dword_0, v17, v18, "#unhandled_tap presenting edit menu for highlight %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v15, 2);
  }

  v30 = type metadata accessor for TaskPriority(0);
  v31 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v8, 1, 1, v30);
  type metadata accessor for MainActor(0);
  v32 = swift_retain();
  v33 = static MainActor.shared.getter(v32);
  v34 = (_QWORD *)swift_allocObject(&unk_37FF30, 56);
  v34[2] = v33;
  v34[3] = &protocol witness table for MainActor;
  v34[4] = v3;
  v34[5] = v14;
  v34[6] = v15;
  sub_67B40((uint64_t)v8, (uint64_t)&unk_3BB440, (uint64_t)v34);
  swift_release();
  return v31;
}

uint64_t sub_D10D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  Swift::String v44;
  void *object;
  Swift::String v46;
  unint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[2];
  char v55;

  v2 = v1;
  v3 = *a1;
  v4 = *((double *)a1 + 1);
  v5 = *((double *)a1 + 2);
  CurrentValueSubject.value.getter(&v49);
  v6 = v49;
  v7 = v52;
  swift_unknownObjectRelease(*(_QWORD *)&v50);
  swift_unknownObjectRelease(v7);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_11:
    swift_bridgeObjectRelease(v6);
LABEL_12:
    v30 = swift_unknownObjectRetain_n(v3, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v49 = v34;
      *(_DWORD *)v33 = 136315138;
      swift_unknownObjectRetain(v3);
      v36 = sub_5D7E8(v35, v4, v5);
      v38 = v37;
      swift_unknownObjectRelease(v3);
      v53 = sub_33524(v36, v38, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v33 + 4);
      swift_unknownObjectRelease_n(v3, 2);
      swift_bridgeObjectRelease(v38);
      _os_log_impl(&dword_0, v31, v32, "highlight(at:): Unable to convert point: %s to a document point", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n(v3, 2);
    }

    return 0;
  }
  swift_bridgeObjectRetain(v6);
  v9 = (uint64_t *)(v6 + 40);
  while (1)
  {
    v10 = *(v9 - 1);
    v11 = *v9;
    ObjectType = swift_getObjectType(v10);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v11 + 48);
    v14 = swift_unknownObjectRetain(v10);
    v15 = v13(ObjectType, v11, v14);
    if (v15)
    {
      v16 = (void *)v15;
      swift_getObjectType(v15);
      v48[0] = v3;
      *(double *)&v48[1] = v4;
      *(double *)&v48[2] = v5;
      v17 = UICoordinateSpace.contains(_:)((uint64_t)v48);

      if (v17)
        break;
    }
    swift_unknownObjectRelease(v10);
    v9 += 2;
    if (!--v8)
    {
      swift_bridgeObjectRelease(v6);
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease_n(v6, 2);
  v49 = v3;
  v50 = v4;
  v51 = v5;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v11 + 272))(&v53, &v49, ObjectType, v11);
  swift_unknownObjectRelease(v10);
  if ((v55 & 1) != 0)
    goto LABEL_12;
  v18 = v53;
  v20 = v54[0];
  v19 = *(double *)&v54[1];
  v21 = *(_QWORD *)(v2 + 144);
  v22 = swift_getObjectType(*(_QWORD *)(v2 + 136));
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v21);
  v49 = v18;
  v23 = BookPaginationEntity.document(with:)(&v49);
  swift_release();
  if (!v23)
  {
    v40 = Logger.logObject.getter(v24);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      *(_DWORD *)v42 = 136315138;
      v53 = v43;
      v49 = 0;
      v50 = -2.68156159e154;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease(*(_QWORD *)&v50);
      v49 = 0xD000000000000011;
      v50 = COERCE_DOUBLE(0x80000000002C85D0);
      v48[0] = v18;
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v44._object;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(object);
      v46._countAndFlagsBits = 41;
      v46._object = (void *)0xE100000000000000;
      String.append(_:)(v46);
      v47 = *(_QWORD *)&v50;
      v49 = sub_33524(v49, *(unint64_t *)&v50, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v42 + 4);
      swift_bridgeObjectRelease(v47);
      _os_log_impl(&dword_0, v40, v41, "highlight(at:): Cannot continue; no pagination document with ID %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }

    return 0;
  }
  v49 = v18;
  v50 = *(double *)&v20;
  v51 = v19;
  v25 = sub_AE62C(&v49);
  v26 = v25;
  if (v25)
  {
    v27 = *(_QWORD *)(v25 + 32);
    v28 = type metadata accessor for HighlightPaginationEntity(0);
    v29 = swift_dynamicCastClassUnconditional(v27, v28, 0, 0, 0);
    swift_unknownObjectRetain(v27);
    swift_release();
    swift_release();
    v26 = *(_QWORD *)(v29 + 16);
    swift_bridgeObjectRetain(*(_QWORD *)(v29 + 24));
    swift_unknownObjectRelease(v27);
  }
  else
  {
    swift_release();
  }
  return v26;
}

uint64_t sub_D15AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v9;
  _QWORD *v10;

  v6[2] = a4;
  v9 = type metadata accessor for MainActor(0);
  v6[3] = v9;
  v6[4] = static MainActor.shared.getter(v9);
  v10 = (_QWORD *)swift_task_alloc(dword_3BB44C);
  v6[5] = v10;
  *v10 = v6;
  v10[1] = sub_D162C;
  return sub_CFCBC(a5, a6);
}

uint64_t sub_D162C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  v4 = *(_QWORD *)(*v1 + 24);
  *(_BYTE *)(*v1 + 72) = a1;
  swift_task_dealloc(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 48) = v5;
  *(_QWORD *)(v2 + 56) = v6;
  return swift_task_switch(sub_D16AC, v5, v6);
}

uint64_t sub_D16AC()
{
  uint64_t v0;
  _QWORD *v1;
  __n128 v3;

  if (*(_BYTE *)(v0 + 72) == 1)
  {
    v1 = (_QWORD *)swift_task_alloc(dword_3BB454);
    *(_QWORD *)(v0 + 64) = v1;
    *v1 = v0;
    v1[1] = sub_D171C;
    return sub_CF8A4();
  }
  else
  {
    v3 = swift_release();
    return (*(uint64_t (**)(__n128))(v0 + 8))(v3);
  }
}

uint64_t sub_D171C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  return swift_task_switch(sub_D1768, *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_D1768()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_D1798(uint64_t *a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];

  v1 = *a1;
  v2 = *((double *)a1 + 1);
  v3 = *((double *)a1 + 2);
  CurrentValueSubject.value.getter(&v21);
  v4 = v21;
  v5 = v22[2];
  swift_unknownObjectRelease(v22[0]);
  swift_unknownObjectRelease(v5);
  swift_unknownObjectRetain(v1);
  v6 = (uint64_t)sub_1D4674(v4, v1, v2, v3);
  swift_bridgeObjectRelease(v4);
  swift_unknownObjectRelease(v1);
  if (!((unint64_t)v6 >> 62))
  {
    if (*(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8)))
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v6);
    return;
  }
  if (v6 < 0)
    v19 = v6;
  else
    v19 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  if (!v20)
    goto LABEL_16;
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0)
  {
    v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
  }
  else
  {
    if (!*(_QWORD *)((char *)&dword_10 + (v6 & 0xFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return;
    }
    v7 = *(id *)(v6 + 32);
  }
  v8 = v7;
  swift_bridgeObjectRelease(v6);
  v9 = objc_opt_self(UIControl);
  v10 = swift_dynamicCastObjCClass(v8, v9);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = v8;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      v21 = (uint64_t)v11;
      v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v15 + 4);
      *v16 = v11;

      _os_log_impl(&dword_0, v13, v14, "#unhandled_tap sending touchUpInside for %@", v15, 0xCu);
      v18 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {

    }
    objc_msgSend(v11, "sendActionsForControlEvents:", 64);

  }
  else
  {

  }
}

void sub_D1A28(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD v9[3];

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = Logger.logObject.getter(a1);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_0, v6, v7, "#unhandled_tap contentViewDidNotHandleTap", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9[0] = v3;
  v9[1] = v4;
  v9[2] = v5;
  sub_D1B00(v9, a2);
}

void sub_D1B00(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t (*v14)(uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  char v37;
  uint64_t Strong;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v3 = v2;
  v4 = *a1;
  v5 = *((double *)a1 + 1);
  v6 = *((double *)a1 + 2);
  CurrentValueSubject.value.getter(&v50);
  v7 = v50;
  v8 = v53;
  swift_unknownObjectRelease(v51);
  swift_unknownObjectRelease(v8);
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain(v7);
    v10 = (uint64_t *)(v7 + 40);
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      ObjectType = swift_getObjectType(v11);
      v14 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v12 + 48);
      v15 = swift_unknownObjectRetain(v11);
      v16 = v14(ObjectType, v12, v15);
      if (v16)
      {
        v17 = (void *)v16;
        swift_getObjectType(v16);
        v48 = v4;
        *(double *)v49 = v5;
        *(double *)&v49[1] = v6;
        v18 = UICoordinateSpace.contains(_:)((uint64_t)&v48);

        if (v18)
        {
          swift_unknownObjectRelease(v11);
          v19 = 1;
          goto LABEL_8;
        }
      }
      swift_unknownObjectRelease(v11);
      v10 += 2;
      --v9;
    }
    while (v9);
    v19 = 0;
LABEL_8:
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v19 = 0;
  }
  swift_bridgeObjectRelease(v7);
  sub_C8770(&v50);
  v20 = v52;
  if (v52)
    sub_CA7DC(v50, v51, v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62);
  v47 = v3;
  v21 = swift_unknownObjectRetain_n(v4, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(34, -1);
    v25 = swift_slowAlloc(64, -1);
    v50 = v25;
    *(_DWORD *)v24 = 136315906;
    v26 = CGPoint.debugDescription.getter(v5, v6);
    v28 = v27;
    v48 = sub_33524(v26, v27, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 4);
    swift_unknownObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v24 + 12) = 2080;
    v48 = a2;
    type metadata accessor for TouchType(0);
    v30 = String.init<A>(describing:)(&v48, v29);
    v32 = v31;
    v48 = sub_33524(v30, v31, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 14);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v24 + 22) = 1024;
    LODWORD(v48) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 4, v24 + 24);
    *(_WORD *)(v24 + 28) = 1024;
    LODWORD(v48) = v20 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, (char *)&v48 + 4, v24 + 30);
    _os_log_impl(&dword_0, v22, v23, "#unhandled_tap received at: %s, touchType: %s, isWithinContent: %{BOOL}d, hasSelection: %{BOOL}d", (uint8_t *)v24, 0x22u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(v4, 2);
  }

  if ((v19 & 1) != 0)
  {
    sub_CA718();
    if (!v20)
    {
      v50 = v4;
      v51 = *(_QWORD *)&v5;
      v52 = *(_QWORD *)&v6;
      if ((sub_D0D18(&v50, a2) & 1) != 0)
        return;
LABEL_26:
      Strong = swift_unknownObjectWeakLoadStrong(v47 + 16);
      if (!Strong)
        goto LABEL_28;
      v39 = Strong;
      v40 = *(_QWORD *)(v47 + 24);
      v41 = swift_getObjectType(Strong);
      v50 = v4;
      v51 = *(_QWORD *)&v5;
      v52 = *(_QWORD *)&v6;
      LOBYTE(v40) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v40 + 104))(&v50, v41, v40);
      swift_unknownObjectRelease(v39);
      if ((v40 & 1) == 0)
      {
LABEL_28:
        v50 = v4;
        v51 = *(_QWORD *)&v5;
        v52 = *(_QWORD *)&v6;
        if ((sub_D21B0((uint64_t)&v50) & 1) == 0)
        {
          v42 = swift_unknownObjectWeakLoadStrong(v47 + 16);
          if (v42)
          {
            v43 = v42;
            v44 = *(_QWORD *)(v47 + 24);
            v45 = swift_getObjectType(v42);
            v50 = v4;
            v51 = *(_QWORD *)&v5;
            v52 = *(_QWORD *)&v6;
            (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 112))(&v50, v19, a2, v45, v44);
            swift_unknownObjectRelease(v43);
          }
        }
      }
      return;
    }
  }
  else
  {
    if (!v20)
    {
      sub_CA718();
      v50 = v4;
      v51 = *(_QWORD *)&v5;
      v52 = *(_QWORD *)&v6;
      sub_D1798(&v50);
      if ((v37 & 1) != 0)
        return;
      goto LABEL_26;
    }
    sub_D1FD0();
    sub_CA718();
  }
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl(&dword_0, v34, v35, "#unhandled_tap Ignoring tap because there is a selection", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

}

double sub_D1FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  void *v9;
  void *v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  _QWORD *v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  aBlock[4] = sub_D4898;
  v19 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_37FEF8;
  v10 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(v11);
  v17 = _swiftEmptyArrayStorage;
  v12 = sub_6B3E4();
  v13 = sub_319AC(&qword_3B96F0);
  v14 = sub_3DCC0((unint64_t *)&qword_3B8510, &qword_3B96F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_D21B0(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  const char *v19;
  char v20;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];

  v2 = v1;
  v3 = *(void **)a1;
  v4 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  CurrentValueSubject.value.getter(v37);
  v6 = v37[0];
  v7 = v37[3];
  swift_unknownObjectRelease(v37[1]);
  swift_unknownObjectRelease(v7);
  v8 = *(_QWORD *)(v6 + 16);
  if (!v8)
  {
LABEL_6:
    v15 = swift_bridgeObjectRelease(v6);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v16, v17))
      goto LABEL_9;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "#unhandled_tap Not turning page because the content is not yet loaded";
LABEL_8:
    _os_log_impl(&dword_0, v16, v17, v19, v18, 2u);
    swift_slowDealloc(v18, -1, -1);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain(v6);
  v9 = (uint64_t *)(v6 + 40);
  while (1)
  {
    v10 = *(v9 - 1);
    v11 = *v9;
    ObjectType = swift_getObjectType(v10);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v11 + 72);
    v14 = swift_unknownObjectRetain(v10);
    LOBYTE(v11) = v13(ObjectType, v11, v14);
    swift_unknownObjectRelease(v10);
    if ((v11 & 1) != 0)
      break;
    v9 += 2;
    if (!--v8)
    {
      swift_bridgeObjectRelease(v6);
      goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease_n(v6, 2);
  v22 = objc_opt_self(UIView);
  v23 = objc_msgSend((id)swift_dynamicCastObjCClassUnconditional(v3, v22, 0, 0, 0), "window");
  if (!v23)
  {
    v16 = Logger.logObject.getter(0);
    v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v16, v17))
      goto LABEL_9;
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    v19 = "#unhandled_tap Unable to delegate to interactor because the view is not in any window. How did we get here?";
    goto LABEL_8;
  }
  v16 = v23;
  v24 = v2[24];
  v25 = swift_getObjectType(v2[23]);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 64))(v25, v24);
  if ((v26 & 1) == 0)
  {
    objc_msgSend(v3, "convertPoint:toCoordinateSpace:", v16, v4, v5);
    v31 = v30;
    v33 = v32;
    v34 = v2[4];
    v35 = v2[5];
    v36 = swift_getObjectType(v34);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, double, double))(v35 + 40))(v36, v35, v31, v33);
    goto LABEL_10;
  }
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_0, v27, v28, "#unhandled_tap Not turning page because the line guide is on", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

LABEL_9:
  v20 = 0;
LABEL_10:

  return v20 & 1;
}

id sub_D2494(void *a1, void *a2, void *a3)
{
  uint64_t v3;
  id v6;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t (*v24)(uint64_t, uint64_t, __n128);
  __n128 v25;
  uint64_t v26;
  id v27;
  _BYTE v28[24];
  CGRect v29;
  CGRect v30;
  CGRect v31;
  CGRect v32;

  if (objc_msgSend(a1, "state"))
    return 0;
  objc_msgSend(a2, "locationInView:", a3);
  v9 = v8;
  v11 = v10;
  objc_msgSend(a3, "bounds");
  v13 = v12;
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v20 = *(_QWORD *)(v3 + 152);
  swift_beginAccess(v20 + 112, v28, 0, 0);
  v21 = *(_QWORD *)(v20 + 112);
  v22 = *(_QWORD *)(v20 + 120);
  ObjectType = swift_getObjectType(v21);
  v24 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v22 + 24);
  v25 = swift_unknownObjectRetain(v21);
  v26 = v24(ObjectType, v22, v25);
  swift_unknownObjectRelease(v21);
  if (v26 == 3)
  {
    v31.origin.x = v13;
    v31.origin.y = v15;
    v31.size.width = v17;
    v31.size.height = v19;
    if (v11 >= CGRectGetMinY(v31) + -20.0)
    {
      v32.origin.x = v13;
      v32.origin.y = v15;
      v32.size.width = v17;
      v32.size.height = v19;
      if (CGRectGetMaxY(v32) + 20.0 >= v11)
        goto LABEL_11;
    }
  }
  else
  {
    if (v26 != 2)
      goto LABEL_11;
    v29.origin.x = v13;
    v29.origin.y = v15;
    v29.size.width = v17;
    v29.size.height = v19;
    if (v9 >= CGRectGetMinX(v29) + -20.0)
    {
      v30.origin.x = v13;
      v30.origin.y = v15;
      v30.size.width = v17;
      v30.size.height = v19;
      if (CGRectGetMaxX(v30) + 20.0 >= v9)
      {
LABEL_11:
        v27 = objc_msgSend(a3, "be_textInputChild");
        objc_msgSend(a3, "convertPoint:toCoordinateSpace:", v27, v9, v11);
        v6 = objc_msgSend(v27, "hasSelectablePositionAtPoint:");

        return v6;
      }
    }
  }
  return 0;
}

void sub_D2680(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, double a8, double a9)
{
  uint64_t v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  _BYTE v33[8];
  uint64_t v34;
  _BYTE v35[24];

  v17 = a3 + 16;
  swift_beginAccess(a3 + 16, v35, 0, 0);
  Strong = swift_weakLoadStrong(v17);
  if (Strong)
  {
    if (*(_BYTE *)(Strong + 240) == 1)
    {
      if ((a2 & 1) != 0)
      {
        sub_D5698(a1, 1);
        sub_D5698(a1, 1);
        swift_bridgeObjectRetain(a6);
        sub_D5698(a1, 1);
        swift_bridgeObjectRetain(a6);
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v24 = swift_slowAlloc(22, -1);
          v25 = swift_slowAlloc(64, -1);
          v29[0] = v25;
          *(_DWORD *)v24 = 136315394;
          swift_bridgeObjectRetain(a6);
          v34 = sub_33524(a5, a6, v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v24 + 4);
          swift_bridgeObjectRelease_n(a6, 3);
          *(_WORD *)(v24 + 12) = 2080;
          swift_getErrorValue(a1, v33, v32);
          v26 = Error.localizedDescription.getter(v32[1], v32[2]);
          v28 = v27;
          v34 = sub_33524(v26, v27, v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v24 + 14);
          swift_bridgeObjectRelease(v28);
          sub_D56A4(a1, 1);
          sub_D56A4(a1, 1);
          _os_log_impl(&dword_0, v22, v23, "Error getting selection rect from interactive highlight with cfi: %s, error: %s", (uint8_t *)v24, 0x16u);
          swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v25, -1, -1);
          swift_slowDealloc(v24, -1, -1);
          sub_D56A4(a1, 1);
          swift_release();

        }
        else
        {
          sub_D56A4(a1, 1);
          swift_bridgeObjectRelease_n(a6, 2);
          swift_release();

          sub_D56A4(a1, 1);
          sub_D56A4(a1, 1);
        }
      }
      else
      {
        sub_57C38(a4, (uint64_t)v29);
        v19 = v30;
        if (v30)
        {
          v20 = v31;
          sub_472D0(v29, v30);
          (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double, double))(v20 + 16))(a5, a6, a7, a1, v19, v20, a8, a9);
          swift_release();
          sub_34488(v29);
        }
        else
        {
          swift_release();
          sub_52128((uint64_t)v29, &qword_3BB458);
        }
      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t sub_D29A8(_OWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t (*v7)(uint64_t, uint64_t, __n128);
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v22;
  _OWORD v23[7];
  _OWORD v24[2];

  v2 = v1;
  v4 = v1[12];
  v5 = v2[13];
  ObjectType = swift_getObjectType(v4);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v5 + 8);
  v8 = swift_unknownObjectRetain(v4);
  LOBYTE(v5) = v7(ObjectType, v5, v8);
  swift_unknownObjectRelease(v4);
  if ((v5 & 1) != 0)
  {
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v23[0] = v13;
      *(_DWORD *)v12 = 136315138;
      v22 = sub_33524(0xD000000000000021, 0x80000000002CAD30, (uint64_t *)v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v12 + 4);
      _os_log_impl(&dword_0, v10, v11, "%s - We are maintaining a location because of a configuration change but we're about to remove it!", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  sub_D097C();
  v14 = v2[4];
  v15 = v2[5];
  v16 = swift_getObjectType(v14);
  v17 = a1[7];
  v23[6] = a1[6];
  v24[0] = v17;
  *(_OWORD *)((char *)v24 + 10) = *(_OWORD *)((char *)a1 + 122);
  v18 = a1[3];
  v23[2] = a1[2];
  v23[3] = v18;
  v19 = a1[5];
  v23[4] = a1[4];
  v23[5] = v19;
  v20 = a1[1];
  v23[0] = *a1;
  v23[1] = v20;
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v23, v16, v15);
}

uint64_t sub_D2B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  v7 = type metadata accessor for MainActor(0);
  v6[6] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v6[7] = v8;
  v6[8] = v9;
  return swift_task_switch(sub_D2BE8, v8, v9);
}

uint64_t sub_D2BE8()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t ObjectType;
  int *v4;
  _QWORD *v5;
  __n128 v7;
  int *v8;

  Strong = swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 24) + 16);
  *(_QWORD *)(v0 + 72) = Strong;
  if (Strong)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 24);
    ObjectType = swift_getObjectType(Strong);
    v4 = *(int **)(v2 + 184);
    v8 = (int *)((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc(v4[1]);
    *(_QWORD *)(v0 + 80) = v5;
    *v5 = v0;
    v5[1] = sub_D2CB0;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v8)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), ObjectType, v2);
  }
  else
  {
    v7 = swift_release();
    **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 72) == 0;
    return (*(uint64_t (**)(__n128))(v0 + 8))(v7);
  }
}

uint64_t sub_D2CB0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_unknownObjectRelease(v2);
  return swift_task_switch(sub_D2D04, *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_D2D04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  **(_BYTE **)(v0 + 16) = *(_QWORD *)(v0 + 72) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_D2D48()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v7[6];

  v1 = *(void **)(v0 + 288);
  if (v1)
    objc_msgSend(v1, "invalidate");
  v2 = (void *)objc_opt_self(NSTimer);
  v3 = swift_allocObject(&unk_37FF80, 24);
  swift_weakInit(v3 + 16, v0);
  v7[4] = sub_D6220;
  v7[5] = v3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_51504;
  v7[3] = &unk_380010;
  v4 = _Block_copy(v7);
  swift_release();
  v5 = objc_msgSend(v2, "scheduledTimerWithTimeInterval:repeats:block:", 0, v4, 1.0);
  _Block_release(v4);
  v6 = *(void **)(v0 + 288);
  *(_QWORD *)(v0 + 288) = v5;

}

double sub_D2E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  if (swift_weakLoadStrong(v2))
  {
    sub_D2E94();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_D2E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  void (*v5)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  char v22[8];
  _QWORD v23[18];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v1 + 104);
  ObjectType = swift_getObjectType(v2);
  v5 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128))(v3 + 16);
  v6 = swift_unknownObjectRetain(v2);
  v5(v23, ObjectType, v3, v6);
  swift_unknownObjectRelease(v2);
  sub_49900((uint64_t)v23);
  v7 = v23[0];
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v9 = Strong;
    v10 = *(_QWORD *)(v1 + 24);
    v11 = BookContentLayoutController.contentLoader(ordinal:)(v7);
    if (v11)
    {
      v13 = v11;
      v14 = v12;
      v15 = swift_getObjectType(v9);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 176))(v15, v10);
      v17 = swift_getObjectType(v13);
      v21 = v16;
      v22[0] = 4;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 320))(&v21, v17, v14);
      swift_bridgeObjectRelease(v16);
      swift_unknownObjectRelease(v9);
      swift_unknownObjectRelease(v13);
      return;
    }
    swift_unknownObjectRelease(v9);
  }
  v18 = Logger.logObject.getter(Strong);
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v20 = 134217984;
    v21 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v20 + 4);
    _os_log_impl(&dword_0, v18, v19, "Unable to update AX actions because there is no loader for ordinal %ld", v20, 0xCu);
    swift_slowDealloc(v20, -1, -1);
  }

}

uint64_t sub_D304C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(a2);
  return sub_D4958(a1, a2, v3, ObjectType, a3);
}

double sub_D309C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t Strong;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v4 = v2[5];
  ObjectType = swift_getObjectType(v2[4]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, ObjectType, v4);
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 2);
  if (Strong)
  {
    v8 = Strong;
    v9 = v2[3];
    v10 = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v9 + 88))(v10, v9);
    *(_QWORD *)&result = swift_unknownObjectRelease(v8).n128_u64[0];
  }
  return result;
}

uint64_t sub_D3120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v1 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 64))(a1, ObjectType, v3);
}

uint64_t sub_D3168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v1 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 72))(a1, ObjectType, v3);
}

uint64_t sub_D31B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  char v4;

  v1 = *(_QWORD *)(v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
  v4 = 0;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 80))(&v4, ObjectType, v1) & 1;
}

uint64_t sub_D3204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  char v4;

  v1 = *(_QWORD *)(v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
  v4 = 1;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 80))(&v4, ObjectType, v1) & 1;
}

uint64_t sub_D325C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 104))(ObjectType, v1) & 1;
}

uint64_t sub_D329C(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t ObjectType;

  v9 = *(_QWORD *)(v4 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 112))(ObjectType, v9, a1, a2, a3, a4);
}

uint64_t sub_D3308(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t ObjectType;

  v9 = *(_QWORD *)(v4 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v4 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 120))(ObjectType, v9, a1, a2, a3, a4);
}

uint64_t sub_D3374(uint64_t a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t ObjectType;

  v11 = *(_QWORD *)(v5 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v5 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double, double, double, double))(v11 + 128))(a1, ObjectType, v11, a2, a3, a4, a5);
}

uint64_t sub_D33EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 136))(ObjectType, v1);
}

uint64_t sub_D3428(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t ObjectType;

  v5 = *(_QWORD *)(v2 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, double, double))(v5 + 160))(ObjectType, v5, a1, a2) & 1;
}

double sub_D3484()
{
  uint64_t v0;
  uint64_t Strong;
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)(v0 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v4 + 152))(ObjectType, v4);
    *(_QWORD *)&result = swift_unknownObjectRelease(v3).n128_u64[0];
  }
  return result;
}

void sub_D34E0(uint64_t a1, _QWORD *a2)
{
  sub_D58A0(a2);
}

uint64_t sub_D34E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  return sub_D56B0(a2, a3, a4);
}

uint64_t sub_D34F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  sub_57C38(a2, (uint64_t)v6);
  v3 = v7;
  if (v7)
  {
    v4 = v8;
    sub_472D0(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v3, v4);
    result = sub_34488(v6);
  }
  else
  {
    result = sub_52128((uint64_t)v6, &qword_3BB458);
  }
  *(_BYTE *)(v2 + 240) = 0;
  return result;
}

uint64_t sub_D3580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[3];
  uint64_t v7;
  uint64_t v8;

  sub_57C38(a2, (uint64_t)v6);
  v3 = v7;
  if (v7)
  {
    v4 = v8;
    sub_472D0(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, v4);
    result = sub_34488(v6);
  }
  else
  {
    result = sub_52128((uint64_t)v6, &qword_3BB458);
  }
  *(_BYTE *)(v2 + 240) = 0;
  return result;
}

void sub_D3608(double a1, double a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_D5540(a4, a5, a1, a2);
}

uint64_t sub_D3614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;

  v4 = *(_QWORD *)(v2 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 144))(a2, ObjectType, v4);
}

uint64_t sub_D365C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_D5094(a3, a4);
}

double sub_D3668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 128))(a2, ObjectType, v7);
    *(_QWORD *)&result = swift_unknownObjectRelease(v6).n128_u64[0];
  }
  return result;
}

uint64_t sub_D36D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
}

uint64_t sub_D370C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 224))(ObjectType, v1);
}

uint64_t sub_D3748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 232))(ObjectType, v1);
}

double sub_D3784(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  char v19;
  double result;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[2];
  char v46;
  _OWORD v47[2];
  char v48;

  v2 = v1;
  v4 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v4);
  v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for ContentMessage.ExpandedContent(0);
  v12 = (uint64_t *)(a1 + v11[12]);
  v13 = v12[1];
  v14 = 0uLL;
  if (!v13)
  {
LABEL_6:
    v19 = 1;
    v18 = 0uLL;
    goto LABEL_8;
  }
  v15 = String.cfiSpineIndex.getter(*v12, v13);
  if ((v16 & 1) == 0)
  {
    v17 = *(_QWORD *)(a1 + v11[13]);
    v14 = 0uLL;
    if (v17 && *(_QWORD *)(v17 + 16) == 1)
    {
      BookContentLayoutController.convertRectToWindow(_:fromOrdinal:)(v15, (uint64_t)v45, *(double *)(v17 + 32), *(double *)(v17 + 40), *(double *)(v17 + 48), *(double *)(v17 + 56));
      v14 = v45[0];
      v18 = v45[1];
      v19 = v46;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  v19 = 1;
  v18 = 0uLL;
  v14 = 0uLL;
LABEL_8:
  v47[0] = v14;
  v47[1] = v18;
  v48 = v19;
  sub_AA740(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_52128((uint64_t)v6, (uint64_t *)&unk_3B8C50);
    v21 = (uint64_t *)(a1 + v11[5]);
    v22 = v21[1];
    if (v22)
    {
      v23 = *v21;
      Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
      if (!Strong)
        return result;
      v25 = Strong;
      v26 = *(_QWORD *)(v2 + 24);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _OWORD *, uint64_t, uint64_t))(v26 + 48))(v23, v22, *(_QWORD *)(a1 + v11[11]), *(_QWORD *)(a1 + v11[11] + 8), a1 + v11[8], v47, ObjectType, v26);
      goto LABEL_21;
    }
    v33 = (uint64_t *)(a1 + v11[6]);
    v34 = v33[1];
    if (v34)
    {
      v35 = *v33;
      v36 = swift_unknownObjectWeakLoadStrong(v2 + 16);
      if (!v36)
        return result;
      v25 = v36;
      v37 = *(_QWORD *)(v2 + 24);
      v38 = swift_getObjectType(v36);
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _OWORD *, uint64_t, uint64_t))(v37 + 56))(v35, v34, *(_QWORD *)(a1 + v11[11]), *(_QWORD *)(a1 + v11[11] + 8), v2 + 48, v47, v38, v37);
      goto LABEL_21;
    }
    v39 = (uint64_t *)(a1 + v11[7]);
    v40 = v39[1];
    if (v40)
    {
      v41 = *v39;
      v42 = swift_unknownObjectWeakLoadStrong(v2 + 16);
      if (v42)
      {
        v25 = v42;
        v43 = *(_QWORD *)(v2 + 24);
        v44 = swift_getObjectType(v42);
        (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _OWORD *, uint64_t, double, double, double, uint64_t))(v43 + 64))(v41, v40, *(_QWORD *)(a1 + v11[11]), *(_QWORD *)(a1 + v11[11] + 8), a1 + v11[8], v2 + 48, v47, v44, *(double *)(a1 + v11[9]), *(double *)(a1 + v11[9] + 8), *(double *)(a1 + v11[10]), v43);
LABEL_21:
        *(_QWORD *)&result = swift_unknownObjectRelease(v25).n128_u64[0];
      }
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    v28 = swift_unknownObjectWeakLoadStrong(v1 + 16);
    if (v28)
    {
      v30 = v28;
      v31 = *(_QWORD *)(v2 + 24);
      v32 = swift_getObjectType(v28);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 40))(v10, v2 + 48, v32, v31);
      v29 = swift_unknownObjectRelease(v30);
    }
    (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v10, v7, v29);
  }
  return result;
}

void sub_D3A94(__int128 *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  char v16;
  uint64_t v17;
  double v18;
  double v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[5];
  char v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  v2 = v1;
  v3 = a1[1];
  v43 = *a1;
  v44 = v3;
  v4 = a1[3];
  v45 = a1[2];
  v46 = v4;
  v5 = a1[5];
  v47 = a1[4];
  v48 = v5;
  v6 = String.cfiSpineIndex.getter(*((uint64_t *)&v43 + 1), v44);
  if ((v7 & 1) != 0)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
LABEL_8:
    v31 = 1;
    goto LABEL_9;
  }
  v8 = v6;
  v9 = v1[18];
  ObjectType = swift_getObjectType(v1[17]);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(ObjectType, v9);
  v11 = BookPaginationEntity.document(for:)(v8);
  swift_release();
  v12 = *((_QWORD *)&v45 + 1);
  v13 = v46;
  swift_beginAccess(v1 + 33, &v37, 33, 0);
  swift_bridgeObjectRetain(v13);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1[33]);
  v35[0] = v1[33];
  v1[33] = 0x8000000000000000;
  sub_17E428(v12, v13, v8, isUniquelyReferenced_nonNull_native);
  v15 = v1[33];
  v1[33] = v35[0];
  swift_bridgeObjectRelease(v15);
  swift_endAccess(&v37);
  swift_beginAccess(v1 + 34, &v37, 33, 0);
  sub_D6228(&v43);
  v16 = swift_isUniquelyReferenced_nonNull_native(v1[34]);
  v35[0] = v1[34];
  v1[34] = 0x8000000000000000;
  sub_17E318(&v43, v8, v16);
  v17 = v1[34];
  v1[34] = v35[0];
  swift_bridgeObjectRelease(v17);
  swift_endAccess(&v37);
  if (!v11)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    goto LABEL_8;
  }
  v18 = *((double *)&v46 + 1);
  v20 = v47;
  v19 = *(double *)&v48;
  *(_QWORD *)&v37 = *(_QWORD *)(v11 + 16);
  v21 = sub_1C34BC((uint64_t *)&v37);
  if (!v21)
  {
    v30 = 0;
    v29 = 0;
    v28 = 0;
    v27 = 0;
    v26 = 0;
    goto LABEL_8;
  }
  v23 = v21;
  v24 = v22;
  v25 = swift_getObjectType(v21);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, double, double, double, double))(v24 + 264))(&v37, v25, v24, v18, *(double *)&v20, *((double *)&v20 + 1), v19);
  swift_unknownObjectRelease(v23);
  v27 = *((_QWORD *)&v37 + 1);
  v26 = v37;
  v29 = *((_QWORD *)&v38 + 1);
  v28 = v38;
  v30 = v39;
  v31 = BYTE8(v39);
LABEL_9:
  v33 = v2[4];
  v32 = v2[5];
  v34 = swift_getObjectType(v33);
  v39 = v45;
  v40 = v46;
  v41 = v47;
  v42 = v48;
  v37 = v43;
  v38 = v44;
  v35[0] = v26;
  v35[1] = v27;
  v35[2] = v28;
  v35[3] = v29;
  v35[4] = v30;
  v36 = v31;
  (*(void (**)(__int128 *, _QWORD *, uint64_t, uint64_t))(v32 + 192))(&v37, v35, v34, v32);
  swift_release();
}

uint64_t sub_D3D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    swift_beginAccess(result + 280, &v11, 1, 0);
    v5 = *(_QWORD *)(v4 + 280);
    *(_QWORD *)(v4 + 280) = &_swiftEmptyArrayStorage;
    v6 = *(_QWORD *)(v5 + 16);
    if (v6)
    {
      v7 = (_QWORD *)(v5 + 40);
      do
      {
        v9 = (void (*)(uint64_t))*(v7 - 1);
        v8 = *v7;
        v10 = swift_retain(*v7);
        v9(v10);
        swift_release(v8);
        v7 += 2;
        --v6;
      }
      while (v6);
    }
    swift_bridgeObjectRelease(v5);
    return swift_release(v4);
  }
  return result;
}

void sub_D3DCC(uint64_t a1, uint64_t a2)
{
  sub_D5AE8(a2);
}

double sub_D3DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;

  Strong = swift_unknownObjectWeakLoadStrong(v4 + 16);
  if (Strong)
  {
    v10 = Strong;
    v11 = *(_QWORD *)(v4 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(a2, a3, a4, ObjectType, v11);
    *(_QWORD *)&result = swift_unknownObjectRelease(v10).n128_u64[0];
  }
  return result;
}

uint64_t sub_D3E58(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = v1 + 6;
  v5 = v1[9];
  v6 = v2[10];
  sub_472D0(v4, v5);
  if ((BookEntityType.urlReferencesTableOfContents(_:)(a1, v5, v6) & 1) != 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v2 + 2);
    if (Strong)
    {
      v8 = Strong;
      v9 = v2[3];
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v9 + 24))(a1, v4, ObjectType, v9);
LABEL_7:
      swift_unknownObjectRelease(v8);
    }
  }
  else
  {
    sub_472D0(v4, v2[9]);
    if (BookEntityType.urlReferencesNonLinearDocument(_:)())
    {
      v11 = swift_unknownObjectWeakLoadStrong(v2 + 2);
      if (v11)
      {
        v8 = v11;
        v12 = v2[3];
        v13 = swift_getObjectType(v11);
        (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(v12 + 40))(a1, v4, v13, v12);
        goto LABEL_7;
      }
    }
    else
    {
      v15 = v2[5];
      v16 = swift_getObjectType(v2[4]);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 184))(a1, v16, v15) & 1) == 0)
      {
        v17 = swift_unknownObjectWeakLoadStrong(v2 + 2);
        if (v17)
        {
          v8 = v17;
          v18 = v2[3];
          v19 = swift_getObjectType(v17);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 72))(a1, 0, v19, v18);
          goto LABEL_7;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_D3FA0(uint64_t a1)
{
  sub_D3E58(a1);
  return 0;
}

double sub_D3FBC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
  if (Strong)
  {
    v7 = Strong;
    v8 = *(_QWORD *)(v2 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 72))(a1, a2 & 1, ObjectType, v8);
    *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
  }
  return result;
}

double sub_D4038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  Strong = swift_unknownObjectWeakLoadStrong(v3 + 16);
  if (Strong)
  {
    v9 = Strong;
    v10 = *(_QWORD *)(v3 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 80))(a1, a2, a3, ObjectType, v10);
    *(_QWORD *)&result = swift_unknownObjectRelease(v9).n128_u64[0];
  }
  return result;
}

uint64_t sub_D40BC(void (*a1)(uint64_t, unint64_t, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v7 = type metadata accessor for String.Encoding(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v9);
  v12 = String.data(using:allowLossyConversion:)(v11, 0, a3, a4);
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  a1(v12, v14, 0);
  sub_D6814(v12, v14);
  return 0;
}

id sub_D4190(uint64_t a1, void *aBlock)
{
  uint64_t (*v2)(void (*)(uint64_t, unint64_t, uint64_t), uint64_t);
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(uint64_t (**)(void (*)(uint64_t, unint64_t, uint64_t), uint64_t))(a1 + 32);
  v3 = _Block_copy(aBlock);
  v4 = swift_allocObject(&unk_380110, 24);
  *(_QWORD *)(v4 + 16) = v3;
  swift_retain();
  v5 = (void *)v2(sub_D6890, v4);
  swift_release();
  swift_release();
  return v5;
}

void sub_D420C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  Class isa;
  uint64_t v7;
  id v8;

  if (a2 >> 60 != 15)
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  isa = 0;
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);

}

id sub_D428C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v6;
  void *v7;
  id v8;
  _QWORD v10[6];

  v6 = String._bridgeToObjectiveC()();
  v10[4] = a1;
  v10[5] = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_D435C;
  v10[3] = &unk_3800D8;
  v7 = _Block_copy(v10);
  swift_retain();
  v8 = objc_msgSend(a3, "loadDataRepresentationForTypeIdentifier:completionHandler:", v6, v7, swift_release().n128_f64[0]);
  _Block_release(v7);

  return v8;
}

double sub_D435C(uint64_t a1, void *a2, void *a3)
{
  void *v4;
  void (*v5)(void *, unint64_t, void *);
  id v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  double result;

  v4 = a2;
  v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    v6 = v4;
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

  }
  else
  {
    swift_retain();
    v8 = 0xF000000000000000;
  }
  v9 = a3;
  v5(v4, v8, a3);

  sub_D6814((uint64_t)v4, v8);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_D43F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[24];

  swift_beginAccess(v2 + 272, v17, 32, 0);
  v5 = *(_QWORD *)(v2 + 272);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_3B7F8(a1), (v7 & 1) != 0))
  {
    v8 = *(_QWORD *)(v5 + 56) + 96 * v6;
    v10 = *(_QWORD *)(v8 + 8);
    v9 = *(_QWORD *)(v8 + 16);
    v11 = *(_QWORD *)(v8 + 24);
    v12 = *(_QWORD *)(v8 + 32);
    v13 = *(_QWORD *)(v8 + 40);
    v14 = *(_QWORD *)(v8 + 48);
    v15 = *(_QWORD *)(v8 + 88);
    *(_BYTE *)a2 = *(_BYTE *)v8;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v12;
    *(_QWORD *)(a2 + 40) = v13;
    *(_QWORD *)(a2 + 48) = v14;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(v8 + 56);
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(v8 + 72);
    *(_QWORD *)(a2 + 88) = v15;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
  }
  else
  {
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return swift_endAccess(v17);
}

void sub_D44D4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = v0;
  v2 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v2);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v0 + 6;
  v6 = v0[9];
  v7 = v0[10];
  sub_472D0(v0 + 6, v6);
  v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v7 + 280))(v6, v7);
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "contentBlockingRule");

    v11 = v1[18];
    swift_getObjectType(v1[17]);
    v12 = v1[9];
    v13 = v1[10];
    sub_472D0(v5, v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
    v16 = v15;
    (*(void (**)(uint64_t))(v11 + 248))(v14);
    swift_bridgeObjectRelease(v16);
    v17 = v1[19];
    v18 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v4, 1, 1, v18);
    type metadata accessor for MainActor(0);
    v19 = swift_retain();
    v20 = static MainActor.shared.getter(v19);
    v21 = (_QWORD *)swift_allocObject(&unk_37FEE0, 48);
    v21[2] = v20;
    v21[3] = &protocol witness table for MainActor;
    v21[4] = v17;
    v21[5] = v10;
    sub_67B40((uint64_t)v4, (uint64_t)&unk_3BB430, (uint64_t)v21);
    swift_release();
  }
  else
  {
    v22 = swift_retain_n(v0, 2);
    v33 = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v35 = v25;
      *(_DWORD *)v24 = 136315138;
      v26 = v0[9];
      v27 = v0[10];
      sub_472D0(v5, v26);
      v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 280))(v26, v27);
      v28 = sub_319AC(&qword_3BB428);
      v29 = String.init<A>(describing:)(&v34, v28);
      v31 = v30;
      v34 = sub_33524(v29, v30, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v24 + 4);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v31);
      _os_log_impl(&dword_0, v33, v23, "Failed to get contentBlockingRules for bookEntity.cacheItem: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {
      swift_release_n(v0);

    }
  }
}

uint64_t sub_D47F4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_D4820(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_3C15E4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_6B4A4;
  return sub_1C7FBC(a1, v4, v5, v7, v6);
}

uint64_t sub_D4898()
{
  sub_C96D0();
  return sub_D097C();
}

uint64_t sub_D48BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_D48CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_D48D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_3BB43C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_3F0C0;
  return sub_D15AC(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_D4958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t ObjectType;

  swift_unknownObjectWeakAssign(a3 + 176, a1);
  v8 = *(_QWORD *)(a3 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(a3 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 208))(a2, a5, ObjectType, v8);
}

uint64_t sub_D49C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t ObjectType;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  id v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  char v60;
  char v65;
  unsigned __int8 v66;
  _QWORD v67[6];

  v27 = v26;
  *(_QWORD *)(v26 + 24) = 0;
  swift_unknownObjectWeakInit(v26 + 16, 0);
  swift_unknownObjectWeakInit(v26 + 176, 0);
  *(_BYTE *)(v26 + 240) = 0;
  *(_QWORD *)(v26 + 248) = 0;
  *(_QWORD *)(v26 + 256) = 0;
  *(_QWORD *)(v26 + 264) = sub_3D54C(_swiftEmptyArrayStorage);
  *(_QWORD *)(v26 + 272) = sub_3D658((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v26 + 280) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v26 + 288) = 0;
  *(_QWORD *)(v26 + 296) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v26 + 304) = 0;
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v31 = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD000000000000023, 0x80000000002CAEE0);
  Logger.init(_:)(v31);
  *(_QWORD *)(v26 + 32) = a1;
  *(_QWORD *)(v26 + 40) = a2;
  *(_QWORD *)(v26 + 24) = a4;
  swift_unknownObjectWeakAssign(v26 + 16, a3);
  sub_49F1C((uint64_t)a5, v26 + 48);
  *(_QWORD *)(v26 + 184) = a9;
  *(_QWORD *)(v26 + 192) = a10;
  *(_QWORD *)(v26 + 200) = a6;
  *(_QWORD *)(v26 + 208) = a7;
  *(_QWORD *)(v26 + 88) = a11;
  *(_QWORD *)(v26 + 96) = a12;
  *(_QWORD *)(v26 + 104) = a13;
  v32 = type metadata accessor for BookContentSelectionHighlightController();
  v33 = swift_allocObject(v32, 72, 7);
  v67[0] = _swiftEmptyArrayStorage;
  v34 = sub_319AC(&qword_3BB478);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a9);
  swift_unknownObjectRetain(a6);
  swift_retain();
  swift_unknownObjectRetain(a12);
  *(_QWORD *)(v33 + 16) = CurrentValueSubject.init(_:)(v67);
  *(_QWORD *)(v33 + 56) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v33 + 64) = 0;
  *(_OWORD *)(v33 + 24) = xmmword_2EAE70;
  *(_QWORD *)(v33 + 40) = 0;
  *(_BYTE *)(v33 + 48) = 0;
  *(_QWORD *)(v26 + 112) = v33;
  *(_QWORD *)(v26 + 120) = a16;
  *(_QWORD *)(v26 + 128) = a25;
  *(_QWORD *)(v26 + 136) = a17;
  *(_QWORD *)(v26 + 144) = a26;
  *(_QWORD *)(v26 + 216) = a20;
  *(_QWORD *)(v26 + 224) = a21;
  swift_getObjectType(a20);
  ObjectType = swift_getObjectType(a1);
  v36 = *(_QWORD *)(a2 + 8);
  v37 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v36 + 8);
  swift_unknownObjectRetain(a16);
  swift_unknownObjectRetain(a17);
  v38 = swift_unknownObjectRetain(a20);
  v39 = v37(ObjectType, v36, v38);
  (*(void (**)(uint64_t))(a21 + 24))(v39);
  *(_QWORD *)(v26 + 232) = a22;
  v57 = type metadata accessor for BookContentLayoutController(0);
  sub_49F1C((uint64_t)a5, (uint64_t)v67);
  swift_unknownObjectRetain(a6);
  swift_unknownObjectRetain(a12);
  v40 = a22;
  v41 = swift_unknownObjectRetain(a14);
  v58 = v37(ObjectType, v36, v41);
  v55 = v42;
  v43 = swift_getObjectType(a9);
  v60 = (*(uint64_t (**)(uint64_t))(a10 + 64))(v43);
  v44 = swift_allocObject(&unk_380138, 32, 7);
  *(_QWORD *)(v44 + 24) = a2;
  swift_unknownObjectWeakInit(v44 + 16, a1);
  v66 = 2;
  v65 = 0;
  v45 = type metadata accessor for ContentLoader(0);
  v46 = type metadata accessor for SnapshotContentLoader(0);
  swift_retain();
  swift_unknownObjectRetain(a17);
  swift_unknownObjectRetain(a20);
  sub_1D355C(a12, a13, a14, a15, v67, a6, a7, v58, v55, a8, v60 & 1, (uint64_t)sub_D68BC, v44, a17, a20, a21, a11, &v65, &v66,
    v45,
    (uint64_t)&protocol witness table for ContentLoader,
    v46,
    (uint64_t)&protocol witness table for ContentLoader,
    v57,
    a24,
    a26);
  v48 = v47;
  *(_QWORD *)(v26 + 152) = v47;
  _s16SelectionManagerCMa(0);
  swift_unknownObjectRetain(a16);
  swift_unknownObjectRetain(a17);
  v49 = swift_retain();
  *(_QWORD *)(v26 + 168) = sub_C80A4(v49, a16, a17, a23, a24, a25, a26);
  v50 = type metadata accessor for BookContentAccessoryController();
  v51 = *(_QWORD *)(v27 + 112);
  swift_unknownObjectRetain(a12);
  swift_unknownObjectRetain(a17);
  swift_retain();
  swift_unknownObjectRetain(a18);
  swift_retain();
  v52 = sub_5B1C8(a12, a13, v48, a17, a18, a19, v51, (uint64_t)&off_387128, v50, a24, a26);
  swift_unknownObjectRelease(a12);
  swift_release();
  swift_unknownObjectRelease(a17);
  swift_unknownObjectRelease(a18);
  swift_release();
  *(_QWORD *)(v27 + 160) = v52;
  BookContentLayoutController.updateHandlers(webMessageHandler:eventHandler:navigationEventHandler:citationHandler:alertHandler:)(v27, (uint64_t)&off_37FDC0, v27, (uint64_t)&off_37FDD0, v27, (uint64_t)&off_37FD88, v27, (uint64_t)&off_37FD70, v27, (uint64_t)&off_37FDB0);
  sub_CFED0(a12, a13);
  sub_34488(a5);
  return v27;
}

uint64_t sub_D4F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;

  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  return sub_D49C0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26);
}

uint64_t sub_D5094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD **v5;
  id v6;
  NSString v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  void *v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  NSString v28;
  id v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  _QWORD *v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  id v41;
  _QWORD aBlock[6];
  _BYTE v43[24];

  v5 = (_QWORD **)(v2 + 280);
  swift_beginAccess(v2 + 280, v43, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 280) + 16))
  {
    v6 = BookEPUBBundle();
    v7 = String._bridgeToObjectiveC()();
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v6, "localizedStringForKey:value:table:", v7, v8, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

    v12 = swift_allocObject(&unk_37FF80, 24);
    swift_weakInit(v12 + 16, v2);
    swift_retain();
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    aBlock[4] = sub_D5538;
    aBlock[5] = v12;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_51504;
    aBlock[3] = &unk_37FF98;
    v14 = _Block_copy(aBlock);
    swift_release();
    v41 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v13, 0, v14);
    _Block_release(v14);
    swift_release();

    v15 = BookEPUBBundle();
    v16 = String._bridgeToObjectiveC()();
    v17 = String._bridgeToObjectiveC()();
    v18 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, v17, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v20 = v19;

    v21 = BookEPUBBundle();
    v22 = String._bridgeToObjectiveC()();
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v21, "localizedStringForKey:value:table:", v22, v23, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v26 = v25;

    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    v29 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v27, v28, 1);

    objc_msgSend(v29, "addAction:", v41);
    Strong = swift_unknownObjectWeakLoadStrong(v2 + 16);
    if (Strong)
    {
      v31 = Strong;
      v32 = *(_QWORD *)(v2 + 24);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(id, _QWORD, _QWORD, uint64_t, uint64_t))(v32 + 16))(v29, 0, 0, ObjectType, v32);

      swift_unknownObjectRelease(v31);
    }
    else
    {

    }
  }
  v34 = swift_allocObject(&unk_37FF58, 32);
  *(_QWORD *)(v34 + 16) = a1;
  *(_QWORD *)(v34 + 24) = a2;
  swift_beginAccess(v5, aBlock, 33, 0);
  v35 = *v5;
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
  *v5 = v35;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v35 = sub_42F18(0, v35[2] + 1, 1, v35);
    *v5 = v35;
  }
  v38 = v35[2];
  v37 = v35[3];
  if (v38 >= v37 >> 1)
  {
    v35 = sub_42F18((_QWORD *)(v37 > 1), v38 + 1, 1, v35);
    *v5 = v35;
  }
  v35[2] = v38 + 1;
  v39 = &v35[2 * v38];
  v39[4] = sub_618F8;
  v39[5] = v34;
  return swift_endAccess(aBlock);
}

uint64_t sub_D54F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_D5514()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_D5538(uint64_t a1)
{
  uint64_t v1;

  return sub_D3D10(a1, v1);
}

void sub_D5540(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;

  v5 = v4;
  v10 = sub_CA384();
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    *(_BYTE *)(v5 + 240) = 1;
    v14 = swift_allocObject(&unk_37FF80, 24);
    swift_weakInit(v14 + 16, v5);
    v15 = swift_allocObject(&unk_37FFD0, 72);
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(v15 + 24) = a1;
    *(_QWORD *)(v15 + 32) = v12;
    *(_QWORD *)(v15 + 40) = v13;
    *(double *)(v15 + 48) = a3;
    *(double *)(v15 + 56) = a4;
    *(_QWORD *)(v15 + 64) = a2;
    swift_retain();
    swift_bridgeObjectRetain(v13);
    v16 = a2;
    sub_15CE8C(v12, v13, (uint64_t)sub_D5680, v15);
    swift_bridgeObjectRelease(v13);
    swift_release();
    swift_release();
  }
}

uint64_t sub_D564C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 72, 7);
}

void sub_D5680(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_D2680(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 64), *(double *)(v2 + 48), *(double *)(v2 + 56));
}

uint64_t sub_D5698(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain();
  else
    return swift_bridgeObjectRetain(a1);
}

uint64_t sub_D56A4(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a1);
}

uint64_t sub_D56B0(void *a1, void *a2, void *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  id v27;
  void *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  CurrentValueSubject.value.getter(&v30);
  v6 = v30;
  v7 = v33;
  swift_unknownObjectRelease(v31);
  swift_unknownObjectRelease(v7);
  v8 = v6[2];
  if (v8)
  {
    v27 = a1;
    v28 = a2;
    swift_bridgeObjectRetain(v6);
    v29 = v6;
    v9 = v6 + 5;
    while (1)
    {
      v11 = *(v9 - 1);
      v10 = *v9;
      ObjectType = swift_getObjectType(v11);
      v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 48);
      v14 = swift_unknownObjectRetain(v11);
      v15 = v13(ObjectType, v10, v14);
      if (v15)
      {
        v16 = (void *)v15;
        sub_34450(0, (unint64_t *)&qword_3B8CB0, UIView_ptr);
        v17 = a3;
        v18 = static NSObject.== infix(_:_:)(v16, v17);

        if ((v18 & 1) != 0)
          break;
      }
      swift_unknownObjectRelease(v11);
      v9 += 2;
      if (!--v8)
      {
        v6 = v29;
        swift_bridgeObjectRelease(v29);
        goto LABEL_10;
      }
    }
    swift_unknownObjectRelease(v11);
    swift_bridgeObjectRelease_n(v29, 2);
    v19 = sub_34450(0, &qword_3BB460, UILongPressGestureRecognizer_ptr);
    if ((objc_msgSend(v27, "isKindOfClass:", swift_getObjCClassFromMetadata(v19)) & 1) == 0)
      goto LABEL_12;
    v20 = v17;
    objc_msgSend(v28, "locationInView:", v20);
    v30 = v20;
    v31 = v21;
    v32 = v22;
    sub_D10D0(&v30);
    v24 = v23;

    swift_bridgeObjectRelease(v24);
    if (v24)
      v25 = 0;
    else
LABEL_12:
      v25 = sub_D2494(v27, v28, v17);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease(v6);
    v25 = 1;
  }
  return v25 & 1;
}

void sub_D58A0(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  double v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  NSObject *oslog;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;

  v1 = *a1;
  v3 = *((double *)a1 + 1);
  v2 = *((double *)a1 + 2);
  v4 = Logger.logObject.getter(a1);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_0, v4, v5, "#unhandled_tap content(_:didNotHandleTapAsClickAt:)", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v16 = v1;
  v17 = v3;
  v18 = v2;
  if ((sub_D0A38(&v16, 0) & 1) != 0)
  {
    v7 = swift_unknownObjectRetain_n(v1, 2);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v16 = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = CGPoint.debugDescription.getter(v3, v2);
      v13 = v12;
      v15 = sub_33524(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4);
      swift_unknownObjectRelease_n(v1, 2);
      swift_bridgeObjectRelease(v13);
      _os_log_impl(&dword_0, oslog, v8, "Ignoring didNotHandleTapAsClickAt %s because there is interactive content", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {
      swift_unknownObjectRelease_n(v1, 2);

    }
  }
  else
  {
    v16 = v1;
    v17 = v3;
    v18 = v2;
    sub_D1B00(&v16, 0);
  }
}

void sub_D5AE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v2 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for ContentMessage.Footnote(0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for ContentMessage.ExpandedContent(0);
  __chkstk_darwin(v4);
  v5 = type metadata accessor for ContentMessage(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_BA4F8(a1, (uint64_t)v7);
  v8 = (char *)sub_D5C24 + 4 * word_2EAE90[swift_getEnumCaseMultiPayload(v7, v5)];
  __asm { BR              X10 }
}

void sub_D5C24()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  v5 = v0[24];
  v6 = sub_319AC(&qword_3B84F0);
  v7 = swift_allocObject(v6, 64);
  *(_OWORD *)(v7 + 16) = xmmword_2E5F80;
  *(_QWORD *)(v1 - 208) = 0;
  *(_QWORD *)(v1 - 200) = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v8 = *(_QWORD *)(v1 - 200);
  *(_QWORD *)(v1 - 224) = *(_QWORD *)(v1 - 208);
  *(_QWORD *)(v1 - 216) = v8;
  v9._object = (void *)0x80000000002CAE50;
  v9._countAndFlagsBits = 0xD000000000000036;
  String.append(_:)(v9);
  *(_BYTE *)(v1 - 208) = v2;
  *(_QWORD *)(v1 - 200) = v3;
  *(_QWORD *)(v1 - 192) = v4;
  *(_BYTE *)(v1 - 184) = v5;
  _print_unlocked<A, B>(_:_:)(v1 - 208, v1 - 224, &type metadata for ContentMessage.ReadAloud, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  sub_BA53C(v3, v4, v5);
  v10 = *(_QWORD *)(v1 - 224);
  v11 = *(_QWORD *)(v1 - 216);
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v11;
  ((void (*)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))print(_:separator:terminator:))(v7, 32, 0xE100000000000000, 10, 0xE100000000000000);
  swift_bridgeObjectRelease(v7);
}

uint64_t sub_D616C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_D61A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_3BB46C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_6B4A4;
  return sub_D2B78(a1, v4, v5, v6, v7, v8);
}

double sub_D6220(uint64_t a1)
{
  uint64_t v1;

  return sub_D2E40(a1, v1);
}

_QWORD *sub_D6228(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[11];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_D627C()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (!Strong
    || (v2 = Strong,
        v3 = *(_QWORD *)(v0 + 24),
        ObjectType = swift_getObjectType(Strong),
        v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 120))(ObjectType, v3),
        v7 = v6,
        swift_unknownObjectRelease(v2),
        !v7))
  {
    swift_bridgeObjectRelease(0);
    return 0;
  }
  return v5;
}

void **sub_D62F0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  void *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t i;
  unint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  NSString v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  void **aBlock;
  uint64_t v64;
  id (*v65)(uint64_t, void *);
  void *v66;
  void *v67;
  _QWORD *v68;

  v6 = type metadata accessor for UTType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone((Class)NSItemProvider), "init");
  v11 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v11 = a2 & 0xFFFFFFFFFFFFLL;
  v12 = byte_2E6000;
  v61 = v9;
  if (v11)
  {
    v13 = static UTType.utf8PlainText.getter();
    UTType.identifier.getter(v13);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v61, v6);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    v17 = swift_allocObject(&unk_380048, 32);
    *(_QWORD *)(v17 + 16) = a2;
    *(_QWORD *)(v17 + 24) = a3;
    v67 = sub_D67D4;
    v68 = (_QWORD *)v17;
    aBlock = _NSConcreteStackBlock;
    v64 = 1107296256;
    v65 = sub_D4190;
    v66 = &unk_380060;
    v18 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain(a3);
    objc_msgSend(v10, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", v16, 0, v18, swift_release().n128_f64[0]);
    _Block_release(v18);

    v12 = byte_2E6000;
  }
  v19 = (void (*)(char *, uint64_t))v12;
  v58 = v6;
  if ((unint64_t)a1 >> 62)
    goto LABEL_29;
  v20 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  for (i = v58; v20; i = v58)
  {
    v22 = 0;
    v60 = a1 & 0xC000000000000001;
    v54 = a1 + 32;
    v55 = a1 & 0xFFFFFFFFFFFFFF8;
    v23 = *((_QWORD *)v19 + 216);
    v56 = v7;
    v57 = a1;
    v59 = v20;
    while (1)
    {
      if (v60)
      {
        v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, a1);
      }
      else
      {
        if (v22 >= *(_QWORD *)(v55 + 16))
          goto LABEL_28;
        v24 = *(id *)(v54 + 8 * v22);
      }
      v25 = v24;
      if (__OFADD__(v22++, 1))
        break;
      v27 = v61;
      v28 = static UTType.image.getter();
      UTType.identifier.getter(v28);
      v30 = v29;
      v19 = *(void (**)(char *, uint64_t))(v7 + 8);
      v19(v27, i);
      v31 = String._bridgeToObjectiveC()();
      LODWORD(v30) = objc_msgSend(v25, "hasItemConformingToTypeIdentifier:", v31, swift_bridgeObjectRelease(v30).n128_f64[0]);

      if ((_DWORD)v30)
      {

      }
      else
      {
        v32 = static UTType.url.getter();
        v33 = UTType.identifier.getter(v32);
        v35 = v34;
        v19(v27, i);
        v36 = objc_msgSend(v25, "registeredTypeIdentifiers");
        v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, &type metadata for String);

        v62 = v37;
        v38 = *(_QWORD *)(v37 + 16);
        if (v38)
        {
          v39 = (uint64_t *)(v62 + 40);
          do
          {
            v43 = *(v39 - 1);
            v44 = *v39;
            v45 = v43 == v33 && v44 == v35;
            if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v33, v35, 0) & 1) != 0)
            {
              v40 = String._bridgeToObjectiveC()();
              v41 = (_QWORD *)swift_allocObject(&unk_380098, 40);
              v41[2] = v25;
              v41[3] = v33;
              v41[4] = v35;
              v67 = sub_D6808;
              v68 = v41;
              aBlock = _NSConcreteStackBlock;
              v64 = v23;
              v65 = sub_D4190;
              v66 = &unk_3800B0;
              v19 = (void (*)(char *, uint64_t))_Block_copy(&aBlock);
              v42 = v25;
              swift_bridgeObjectRetain(v35);
              objc_msgSend(v10, "registerDataRepresentationForTypeIdentifier:visibility:loadHandler:", v40, 0, v19, swift_release().n128_f64[0]);
              _Block_release(v19);

            }
            v39 += 2;
            --v38;
          }
          while (v38);
        }

        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(v35);
        a1 = v57;
        i = v58;
        v7 = v56;
      }
      if (v22 == v59)
        goto LABEL_33;
    }
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    if (a1 < 0)
      v46 = a1;
    else
      v46 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v20 = _CocoaArrayWrapper.endIndex.getter(v46);
  }
LABEL_33:
  v47 = objc_msgSend(v10, "registeredTypeIdentifiers", swift_bridgeObjectRelease(a1).n128_f64[0]);
  v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v47, &type metadata for String);

  v49 = *(_QWORD *)(v48 + 16);
  swift_bridgeObjectRelease(v48);
  if (v49)
  {
    v50 = sub_319AC((uint64_t *)&unk_3B8440);
    v51 = swift_allocObject(v50, 40);
    *(_OWORD *)(v51 + 16) = xmmword_2EAE80;
    *(_QWORD *)(v51 + 32) = v10;
    aBlock = (void **)v51;
    specialized Array._endMutation()(v51);
    return aBlock;
  }
  else
  {

    return (void **)_swiftEmptyArrayStorage;
  }
}

uint64_t sub_D67B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_D67D4(void (*a1)(uint64_t, unint64_t, _QWORD), uint64_t a2)
{
  uint64_t v2;

  return sub_D40BC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_D67DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

id sub_D6808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_D428C(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_D6814(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_D6828(result, a2);
  return result;
}

uint64_t sub_D6828(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_D686C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_D6890(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_D420C(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_D6898()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 32, 7);
}

double sub_D68BC()
{
  uint64_t v0;

  return sub_CFE68(v0);
}

double sub_D68C4(uint64_t *a1)
{
  uint64_t v1;

  return sub_D0574(a1, v1);
}

double sub_D68CC(uint64_t *a1)
{
  uint64_t v1;

  return sub_D05EC(a1, v1);
}

double sub_D68D4(uint64_t a1)
{
  uint64_t v1;

  return sub_D0928(a1, v1);
}

__n128 Location.init(documentOrdinal:pageOffset:locationOffset:requestedAnchorFragment:requestedCFI:requestedSurroundingContext:requestedLocationRect:isRequestedPageChange:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, char a11)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;

  v11 = *(_QWORD *)(a3 + 16);
  v12 = *(_BYTE *)(a3 + 24);
  v13 = *(_QWORD *)(a8 + 32);
  v14 = *(_BYTE *)(a8 + 40);
  v15 = a10;
  if (a5)
    v16 = a4;
  else
    v16 = 0;
  if (a5)
    v17 = a10;
  else
    v17 = 0.0;
  if (a7)
    v18 = a6;
  else
    v18 = 0;
  if (!a7)
    v15 = 0.0;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = v16;
  *(_QWORD *)(a9 + 24) = a5;
  *(double *)(a9 + 32) = v17;
  *(_QWORD *)(a9 + 40) = v18;
  *(_QWORD *)(a9 + 48) = a7;
  *(double *)(a9 + 56) = v15;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)a3;
  *(_QWORD *)(a9 + 80) = v11;
  *(_BYTE *)(a9 + 88) = v12;
  result = *(__n128 *)a8;
  v20 = *(_OWORD *)(a8 + 16);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)a8;
  *(_OWORD *)(a9 + 112) = v20;
  *(_QWORD *)(a9 + 128) = v13;
  *(_BYTE *)(a9 + 136) = v14;
  *(_BYTE *)(a9 + 137) = a11;
  return result;
}

uint64_t Location.hasRequestedLocation.getter()
{
  uint64_t v0;

  return ((*(_QWORD *)(v0 + 24) | *(_QWORD *)(v0 + 48)) != 0) | *(_BYTE *)(v0 + 137) & 1u;
}

BOOL static PageLocation.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BookEPUB::PageLocation __swiftcall PageLocation.init(documentOrdinal:pageOffset:)(Swift::Int documentOrdinal, Swift::Int pageOffset)
{
  Swift::Int *v2;
  BookEPUB::PageLocation result;

  *v2 = documentOrdinal;
  v2[1] = pageOffset;
  result.pageOffset = pageOffset;
  result.documentOrdinal = documentOrdinal;
  return result;
}

__n128 Location.init(pageLocation:locationOffset:requestedAnchor:requestedCFI:requestedLocationRect:isRequestedPageChange:)@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  char v15;

  v7 = *(_QWORD *)(a2 + 16);
  v9 = *((_QWORD *)a3 + 2);
  v10 = *(_QWORD *)(a4 + 16);
  v11 = *(_QWORD *)(a5 + 32);
  v8 = *(_BYTE *)(a2 + 24);
  v15 = *(_BYTE *)(a5 + 40);
  v12 = *a3;
  *(_OWORD *)a7 = *a1;
  *(_OWORD *)(a7 + 16) = v12;
  *(_QWORD *)(a7 + 32) = v9;
  *(_OWORD *)(a7 + 40) = *(_OWORD *)a4;
  *(_QWORD *)(a7 + 56) = v10;
  *(_OWORD *)(a7 + 64) = *(_OWORD *)a2;
  *(_QWORD *)(a7 + 80) = v7;
  *(_BYTE *)(a7 + 88) = v8;
  result = *(__n128 *)a5;
  v14 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a7 + 96) = *(_OWORD *)a5;
  *(_OWORD *)(a7 + 112) = v14;
  *(_QWORD *)(a7 + 128) = v11;
  *(_BYTE *)(a7 + 136) = v15;
  *(_BYTE *)(a7 + 137) = a6;
  return result;
}

uint64_t LocationProviding.readingLocationCFI.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_319AC(&qword_3BB4A8);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t, uint64_t, __n128))(a2 + 56))(a1, a2, v5);
  v8 = *v7;
  swift_bridgeObjectRetain(v7[1]);
  sub_52128((uint64_t)v7, &qword_3BB4A8);
  return v8;
}

uint64_t LocationProviding.readingLocationCFIPublisher.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v4 = sub_319AC(&qword_3BB4B0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 64))(a1, a2, v6);
  KeyPath = swift_getKeyPath(&unk_2EB188);
  v10 = sub_319AC(&qword_3BB4B8);
  v11 = sub_3DCC0(&qword_3BB4C0, &qword_3BB4B8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(KeyPath, v10, v11);
  swift_release();
  swift_release();
  v12 = sub_3DCC0(&qword_3BB4C8, &qword_3BB4B0, (uint64_t)&protocol conformance descriptor for Publishers.MapKeyPath<A, B>);
  v13 = Publisher.eraseToAnyPublisher()(v4, v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v13;
}

uint64_t DocumentEntityID.value.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t PageLocation.stringValue.getter()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;

  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 0x664F65676170202CLL;
  v2._object = (void *)0xEE00203A74657366;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._countAndFlagsBits = 32032;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  return 0x616E6964726F207BLL;
}

void PageLocation.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

uint64_t sub_D6D60()
{
  _BYTE *v0;

  if (*v0)
    return 0x7366664F65676170;
  else
    return 0x746E656D75636F64;
}

uint64_t sub_D6DAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_DAD94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_D6DD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D88F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D6DF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D88F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PageLocation.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = sub_319AC(&qword_3BB4D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_472D0(a1, v9);
  v11 = sub_D88F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PageLocation.CodingKeys, &type metadata for PageLocation.CodingKeys, v11, v9, v10);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v16, v4);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v15, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int PageLocation.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t PageLocation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_319AC(&qword_3BB4E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_472D0(a1, v9);
  v11 = sub_D88F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PageLocation.CodingKeys, &type metadata for PageLocation.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
  return sub_34488(a1);
}

Swift::Int sub_D70E0(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_D7134@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return PageLocation.init(from:)(a1, a2);
}

uint64_t sub_D7148(_QWORD *a1)
{
  return PageLocation.encode(to:)(a1);
}

BOOL static PageLocation.< infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return a1[1] < a2[1];
  else
    return *a1 < *a2;
}

BOOL static PageLocation.>= infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return a1[1] >= a2[1];
  else
    return *a1 >= *a2;
}

BOOL sub_D719C(_QWORD *a1, _QWORD *a2)
{
  if (*a2 == *a1)
    return a2[1] >= a1[1];
  else
    return *a2 >= *a1;
}

BOOL sub_D71BC(_QWORD *a1, _QWORD *a2)
{
  if (*a2 == *a1)
    return a2[1] < a1[1];
  else
    return *a2 < *a1;
}

double Location.CFIRequest.surroundingContext.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

BookEPUB::Location::CFIRequest __swiftcall Location.CFIRequest.init(location:surroundingContext:)(Swift::String location, Swift::Double surroundingContext)
{
  uint64_t v2;
  BookEPUB::Location::CFIRequest result;

  *(Swift::String *)v2 = location;
  *(Swift::Double *)(v2 + 16) = surroundingContext;
  result.location = location;
  result.surroundingContext = surroundingContext;
  return result;
}

uint64_t Location.requestedAnchor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t Location.requestedCFI.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;

  *(_QWORD *)a1 = *(_QWORD *)(v1 + 40);
  v2 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain(v2);
}

__n128 Location.locationOffset.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  __n128 result;

  v2 = v1[5].n128_u64[0];
  v3 = v1[5].n128_u8[8];
  result = v1[4];
  *a1 = result;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u8[8] = v3;
  return result;
}

__n128 Location.requestedLocationRect.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_BYTE *)(v1 + 136);
  result = *(__n128 *)(v1 + 96);
  v5 = *(_OWORD *)(v1 + 112);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

uint64_t Location.isRequestedPageChange.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t Location.stringValue.getter()
{
  return PageLocation.stringValue.getter();
}

__n128 Location.init(pageLocation:locationOffset:requestedAnchorFragment:requestedCFI:requestedSurroundingContext:requestedLocationRect:isRequestedPageChange:)@<Q0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  double v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  __n128 result;
  __int128 v19;

  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  v12 = *(_QWORD *)(a7 + 32);
  v13 = *(_BYTE *)(a7 + 40);
  v14 = a10;
  if (a4)
    v15 = a3;
  else
    v15 = 0;
  if (a4)
    v16 = a10;
  else
    v16 = 0.0;
  *(_OWORD *)a9 = *a1;
  if (a6)
    v17 = a5;
  else
    v17 = 0;
  if (!a6)
    v14 = 0.0;
  *(_QWORD *)(a9 + 16) = v15;
  *(_QWORD *)(a9 + 24) = a4;
  *(double *)(a9 + 32) = v16;
  *(_QWORD *)(a9 + 40) = v17;
  *(_QWORD *)(a9 + 48) = a6;
  *(double *)(a9 + 56) = v14;
  *(_OWORD *)(a9 + 64) = *(_OWORD *)a2;
  *(_QWORD *)(a9 + 80) = v10;
  *(_BYTE *)(a9 + 88) = v11;
  result = *(__n128 *)a7;
  v19 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(a9 + 96) = *(_OWORD *)a7;
  *(_OWORD *)(a9 + 112) = v19;
  *(_QWORD *)(a9 + 128) = v12;
  *(_BYTE *)(a9 + 136) = v13;
  *(_BYTE *)(a9 + 137) = a8;
  return result;
}

BOOL sub_D7310(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  char v10;
  _BOOL8 result;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v6 = a1[2];
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  if (*(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v7)
    return v6 == v8;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v7, 0);
  result = 0;
  if ((v10 & 1) != 0)
    return v6 == v8;
  return result;
}

uint64_t PageLocation.description.getter()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 60;
}

uint64_t Location.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  int v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  __int128 v47;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 48);
  v36 = *(_QWORD *)(v0 + 56);
  v37 = *(_QWORD *)(v0 + 40);
  v35 = *(_OWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_BYTE *)(v0 + 88);
  v40 = *(_OWORD *)(v0 + 112);
  v41 = *(_OWORD *)(v0 + 96);
  v39 = *(_QWORD *)(v0 + 128);
  v38 = *(_BYTE *)(v0 + 136);
  v42 = *(unsigned __int8 *)(v0 + 137);
  *(_QWORD *)&v43 = 0;
  *((_QWORD *)&v43 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(213);
  v47 = v43;
  v7._object = (void *)0x80000000002CAF10;
  v7._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v7);
  sub_656C4();
  v8._countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x80000000002CAF30;
  String.append(_:)(v8);
  v43 = v35;
  *(_QWORD *)&v44 = v5;
  BYTE8(v44) = v6;
  v9 = sub_319AC(&qword_3BB4E8);
  v10._countAndFlagsBits = String.init<A>(describing:)(&v43, v9);
  object = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(object);
  v12._countAndFlagsBits = 0xD00000000000001ELL;
  v12._object = (void *)0x80000000002CAF50;
  String.append(_:)(v12);
  *(_QWORD *)&v43 = v2;
  *((_QWORD *)&v43 + 1) = v1;
  *(_QWORD *)&v44 = v3;
  swift_bridgeObjectRetain(v1);
  v13 = sub_319AC(&qword_3BB4F0);
  v14._countAndFlagsBits = String.init<A>(describing:)(&v43, v13);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 0xD000000000000013;
  v16._object = (void *)0x80000000002CAF70;
  String.append(_:)(v16);
  *(_QWORD *)&v43 = v37;
  *((_QWORD *)&v43 + 1) = v4;
  *(_QWORD *)&v44 = v36;
  swift_bridgeObjectRetain(v4);
  v17 = sub_319AC(&qword_3BB4F8);
  v18._countAndFlagsBits = String.init<A>(describing:)(&v43, v17);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 0xD00000000000002CLL;
  v20._object = (void *)0x80000000002CAF90;
  String.append(_:)(v20);
  v43 = v41;
  v44 = v40;
  v45 = v39;
  v46 = v38;
  v21 = sub_319AC(&qword_3B9D30);
  v22._countAndFlagsBits = String.init<A>(describing:)(&v43, v21);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  v24._object = (void *)0x80000000002CAFC0;
  v24._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v24);
  if (v42)
    v25 = 1702195828;
  else
    v25 = 0x65736C6166;
  if (v42)
    v26 = 0xE400000000000000;
  else
    v26 = 0xE500000000000000;
  v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease(v26);
  v28._countAndFlagsBits = 0xD00000000000001BLL;
  v28._object = (void *)0x80000000002CAFE0;
  String.append(_:)(v28);
  if (v1 | v4)
    v29 = 1;
  else
    v29 = v42;
  if ((v29 & 1) != 0)
    v30 = 1702195828;
  else
    v30 = 0x65736C6166;
  if ((v29 & 1) != 0)
    v31 = 0xE400000000000000;
  else
    v31 = 0xE500000000000000;
  v32 = v31;
  String.append(_:)(*(Swift::String *)&v30);
  swift_bridgeObjectRelease(v31);
  v33._countAndFlagsBits = 10506;
  v33._object = (void *)0xE200000000000000;
  String.append(_:)(v33);
  return v47;
}

uint64_t RelativeValue.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t DatedLocation.date.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t DatedLocation.init(location:date:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(a4, a1);
  v9 = a4 + *(int *)(type metadata accessor for DatedLocation(0, a3, v7, v8) + 28);
  v10 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a2, v10);
}

uint64_t DatedLocation.setLocation(_:updateDate:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;

  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 24))(v3, a1);
  if ((a2 & 1) != 0)
  {
    Date.init()(result);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(v3 + *(int *)(a3 + 28), v10, v7);
  }
  return result;
}

BookEPUB::CFIRange __swiftcall CFIRange.init(start:end:)(Swift::String start, Swift::String end)
{
  Swift::String *v2;
  BookEPUB::CFIRange result;

  *v2 = start;
  v2[1] = end;
  result.end = end;
  result.start = start;
  return result;
}

Swift::Bool __swiftcall CFIRange.isEmpty()()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;

  v1 = v0[1];
  v2 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v1 & 0x2000000000000000) != 0)
    v2 = HIBYTE(v1) & 0xF;
  if (v2)
    return 0;
  v4 = v0[3];
  if ((v4 & 0x2000000000000000) != 0)
    v5 = HIBYTE(v4) & 0xF;
  else
    v5 = v0[2] & 0xFFFFFFFFFFFFLL;
  return v5 == 0;
}

uint64_t CFIRange.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v6, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int CFIRange.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v6, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_D79CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v5, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t CFIRange.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v1 = *v0;
  v2 = (void *)v0[1];
  v3 = v0[2];
  v4 = (void *)v0[3];
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease(0xE000000000000000);
  swift_bridgeObjectRetain(v2);
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v2);
  v6._countAndFlagsBits = 0x203A646E65207C20;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain(v4);
  v7._countAndFlagsBits = v3;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v4);
  return 0x203A7472617473;
}

uint64_t HistorySnapshot.Info.location.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];

  v3 = (_OWORD *)(v1 + *(int *)(type metadata accessor for HistorySnapshot.Info(0) + 20));
  v4 = v3[5];
  v5 = v3[7];
  v21 = v3[6];
  v22[0] = v5;
  *(_OWORD *)((char *)v22 + 10) = *(_OWORD *)((char *)v3 + 122);
  v6 = v3[1];
  v7 = v3[3];
  v17 = v3[2];
  v8 = v17;
  v18 = v7;
  v9 = v3[3];
  v10 = v3[5];
  v19 = v3[4];
  v11 = v19;
  v20 = v10;
  v12 = v3[1];
  v16[0] = *v3;
  v13 = v16[0];
  v16[1] = v12;
  v14 = v3[7];
  a1[6] = v21;
  a1[7] = v14;
  *(_OWORD *)((char *)a1 + 122) = *(_OWORD *)((char *)v3 + 122);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v11;
  a1[5] = v4;
  *a1 = v13;
  a1[1] = v6;
  return sub_49BD8((uint64_t)v16);
}

__n128 HistorySnapshot.Info.init(uuid:location:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 *v6;
  __n128 result;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  _BYTE v15[26];

  v14 = *((__n128 *)a2 + 6);
  *(_OWORD *)v15 = a2[7];
  *(_OWORD *)&v15[10] = *(_OWORD *)((char *)a2 + 122);
  v10 = *((__n128 *)a2 + 2);
  v11 = *((__n128 *)a2 + 3);
  v12 = *((__n128 *)a2 + 4);
  v13 = *((__n128 *)a2 + 5);
  v8 = *(__n128 *)a2;
  v9 = *((__n128 *)a2 + 1);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a3, a1, v5);
  v6 = (__n128 *)(a3 + *(int *)(type metadata accessor for HistorySnapshot.Info(0) + 20));
  v6[6] = v14;
  v6[7] = *(__n128 *)v15;
  *(__n128 *)((char *)v6 + 122) = *(__n128 *)&v15[10];
  v6[2] = v10;
  v6[3] = v11;
  v6[4] = v12;
  v6[5] = v13;
  result = v9;
  *v6 = v8;
  v6[1] = v9;
  return result;
}

uint64_t static HistorySnapshot.Info.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  _OWORD v17[7];
  _OWORD v18[2];
  _OWORD v19[7];
  _OWORD v20[2];

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v4 = type metadata accessor for HistorySnapshot.Info(0);
    v5 = (_OWORD *)(a1 + *(int *)(v4 + 20));
    v6 = v5[7];
    v19[6] = v5[6];
    v20[0] = v6;
    *(_OWORD *)((char *)v20 + 10) = *(_OWORD *)((char *)v5 + 122);
    v7 = v5[3];
    v19[2] = v5[2];
    v19[3] = v7;
    v8 = v5[5];
    v19[4] = v5[4];
    v19[5] = v8;
    v9 = v5[1];
    v19[0] = *v5;
    v19[1] = v9;
    v10 = (_OWORD *)(a2 + *(int *)(v4 + 20));
    v11 = v10[7];
    v17[6] = v10[6];
    v18[0] = v11;
    *(_OWORD *)((char *)v18 + 10) = *(_OWORD *)((char *)v10 + 122);
    v12 = v10[3];
    v17[2] = v10[2];
    v17[3] = v12;
    v13 = v10[5];
    v17[4] = v10[4];
    v17[5] = v13;
    v14 = v10[1];
    v17[0] = *v10;
    v17[1] = v14;
    v15 = _s8BookEPUB8LocationV2eeoiySbAC_ACtFZ_0((uint64_t)v19, (uint64_t)v17);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_D7D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _OWORD v18[7];
  _OWORD v19[2];
  _OWORD v20[7];
  _OWORD v21[2];

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0)
  {
    v6 = *(int *)(a3 + 20);
    v7 = *(_OWORD *)(a1 + v6 + 112);
    v20[6] = *(_OWORD *)(a1 + v6 + 96);
    v21[0] = v7;
    *(_OWORD *)((char *)v21 + 10) = *(_OWORD *)(a1 + v6 + 122);
    v8 = *(_OWORD *)(a1 + v6 + 48);
    v20[2] = *(_OWORD *)(a1 + v6 + 32);
    v20[3] = v8;
    v9 = *(_OWORD *)(a1 + v6 + 80);
    v20[4] = *(_OWORD *)(a1 + v6 + 64);
    v20[5] = v9;
    v10 = *(_OWORD *)(a1 + v6 + 16);
    v20[0] = *(_OWORD *)(a1 + v6);
    v20[1] = v10;
    v11 = (_OWORD *)(a2 + v6);
    v12 = v11[7];
    v18[6] = v11[6];
    v19[0] = v12;
    *(_OWORD *)((char *)v19 + 10) = *(_OWORD *)((char *)v11 + 122);
    v13 = v11[3];
    v18[2] = v11[2];
    v18[3] = v13;
    v14 = v11[5];
    v18[4] = v11[4];
    v18[5] = v14;
    v15 = v11[1];
    v18[0] = *v11;
    v18[1] = v15;
    v16 = _s8BookEPUB8LocationV2eeoiySbAC_ACtFZ_0((uint64_t)v20, (uint64_t)v18);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t HistorySnapshot.next.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_D8954(v1, a1);
}

uint64_t HistorySnapshot.previous.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for HistorySnapshot(0) + 20);
  return sub_D8954(v3, a1);
}

uint64_t HistorySnapshot.init(next:previous:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  sub_D89B0(a1, a3);
  v5 = a3 + *(int *)(type metadata accessor for HistorySnapshot(0) + 20);
  return sub_D89B0(a2, v5);
}

unint64_t HistorySnapshot.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  unint64_t v12;
  unint64_t v13;

  v1 = sub_319AC(&qword_3BB500);
  __chkstk_darwin(v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease(v13);
  v12 = 0xD00000000000001FLL;
  v13 = 0x80000000002CB000;
  v4 = type metadata accessor for HistorySnapshot(0);
  sub_D8954(v0 + *(int *)(v4 + 20), (uint64_t)v3);
  v5._countAndFlagsBits = String.init<A>(describing:)(v3, v1);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._countAndFlagsBits = 0x78656E202020200ALL;
  v7._object = (void *)0xEB00000000203A74;
  String.append(_:)(v7);
  sub_D8954(v0, (uint64_t)v3);
  v8._countAndFlagsBits = String.init<A>(describing:)(v3, v1);
  v9 = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v9);
  v10._countAndFlagsBits = 10506;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  return v12;
}

uint64_t _s8BookEPUB8LocationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  double v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  double v51;
  int v52;
  uint64_t v53;
  double v54;
  double v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  char v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  result = 0;
  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
    return result;
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(double *)(a1 + 56);
  v8 = *(_QWORD *)(a1 + 64);
  v10 = *(double *)(a1 + 72);
  v9 = *(double *)(a1 + 80);
  v11 = *(_BYTE *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 112);
  v16 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 128);
  v17 = *(_BYTE *)(a1 + 136);
  v18 = *(unsigned __int8 *)(a1 + 137);
  v19 = *(_QWORD *)(a2 + 24);
  v21 = *(_QWORD *)(a2 + 40);
  v20 = *(_QWORD *)(a2 + 48);
  v22 = *(double *)(a2 + 56);
  v23 = *(_QWORD *)(a2 + 64);
  v24 = *(double *)(a2 + 72);
  v25 = *(double *)(a2 + 80);
  v26 = *(unsigned __int8 *)(a2 + 88);
  v27 = *(_QWORD *)(a2 + 96);
  v28 = *(_QWORD *)(a2 + 104);
  v29 = *(_QWORD *)(a2 + 112);
  v30 = *(_QWORD *)(a2 + 120);
  v31 = *(_QWORD *)(a2 + 128);
  v32 = *(_BYTE *)(a2 + 136);
  v33 = *(unsigned __int8 *)(a2 + 137);
  if (!v4)
  {
    if (!v19)
      goto LABEL_18;
    v4 = 0;
LABEL_12:
    v38 = v4;
    goto LABEL_13;
  }
  if (!v19)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 24));
    goto LABEL_12;
  }
  v34 = *(_QWORD *)(a1 + 16);
  v35 = *(double *)(a1 + 32);
  v36 = *(_QWORD *)(a2 + 16);
  v37 = *(double *)(a2 + 32);
  if (v34 == v36 && v4 == v19)
  {
    if (v35 != v37)
      return 0;
  }
  else
  {
    v53 = *(_QWORD *)(a1 + 128);
    v54 = *(double *)(a2 + 80);
    v56 = *(_BYTE *)(a2 + 136);
    v58 = *(_QWORD *)(a2 + 96);
    v60 = *(_QWORD *)(a1 + 64);
    v62 = *(double *)(a1 + 72);
    v64 = *(_BYTE *)(a1 + 136);
    v66 = *(_QWORD *)(a2 + 128);
    v68 = *(_QWORD *)(a2 + 120);
    v70 = *(_QWORD *)(a2 + 112);
    v72 = *(_QWORD *)(a2 + 104);
    v51 = *(double *)(a1 + 80);
    v52 = *(unsigned __int8 *)(a2 + 137);
    v39 = *(_QWORD *)(a1 + 96);
    v40 = *(unsigned __int8 *)(a1 + 137);
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v4, v36, v19, 0);
    result = 0;
    if ((v41 & 1) == 0)
      return result;
    v18 = v40;
    v15 = v53;
    v25 = v54;
    v12 = v39;
    v33 = v52;
    v9 = v51;
    v29 = v70;
    v28 = v72;
    v31 = v66;
    v30 = v68;
    v17 = v64;
    v10 = v62;
    v27 = v58;
    v8 = v60;
    v32 = v56;
    if (v35 != v37)
      return result;
  }
LABEL_18:
  if (v5)
  {
    if (v20)
    {
      if (v6 == v21 && v5 == v20)
      {
        if (v7 != v22)
          return 0;
      }
      else
      {
        v55 = v25;
        v57 = v32;
        v59 = v27;
        v61 = v8;
        v63 = v10;
        v65 = v17;
        v67 = v31;
        v69 = v30;
        v71 = v29;
        v73 = v28;
        v42 = v9;
        v43 = v15;
        v44 = v18;
        v45 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v21, v20, 0);
        result = 0;
        if ((v45 & 1) == 0)
          return result;
        v18 = v44;
        v15 = v43;
        v9 = v42;
        v29 = v71;
        v28 = v73;
        v31 = v67;
        v30 = v69;
        v17 = v65;
        v10 = v63;
        v27 = v59;
        v8 = v61;
        v32 = v57;
        v25 = v55;
        if (v7 != v22)
          return result;
      }
      goto LABEL_29;
    }
    v38 = swift_bridgeObjectRetain(v5);
LABEL_13:
    swift_bridgeObjectRelease(v38);
    return 0;
  }
  if (v20)
  {
    v38 = 0;
    goto LABEL_13;
  }
LABEL_29:
  if ((v11 & 1) != 0)
  {
    if (!v26)
      return 0;
  }
  else
  {
    result = 0;
    if ((v26 & 1) != 0 || v8 != v23 || v10 != v24 || v9 != v25)
      return result;
  }
  if ((v17 & 1) != 0)
  {
    if ((v32 & 1) != 0)
      return v18 ^ v33 ^ 1u;
    return 0;
  }
  if (v12 == v27)
    v46 = v32;
  else
    v46 = 1;
  if ((v46 & 1) != 0)
    return 0;
  v47 = v13;
  v48 = v14;
  v49 = v16;
  v50 = v18;
  result = CGRectEqualToRect(*(CGRect *)(&v15 - 3), *(CGRect *)&v28);
  v18 = v50;
  if ((_DWORD)result)
    return v18 ^ v33 ^ 1u;
  return result;
}

uint64_t _s8BookEPUB15HistorySnapshotV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _OWORD v79[2];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[3];

  v4 = type metadata accessor for HistorySnapshot.Info(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v64 = (uint64_t)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v9 = (char *)&v64 - v8;
  v10 = sub_319AC(&qword_3BB6D0);
  __chkstk_darwin(v10);
  v70 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v64 - v13;
  v15 = sub_319AC(&qword_3BB500);
  __chkstk_darwin(v15);
  v65 = (uint64_t)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v68 = (uint64_t)&v64 - v18;
  __chkstk_darwin(v19);
  v69 = (uint64_t)&v64 - v20;
  __chkstk_darwin(v21);
  v71 = (uint64_t)&v64 - v22;
  __chkstk_darwin(v23);
  v25 = (char *)&v64 - v24;
  __chkstk_darwin(v26);
  v28 = (char *)&v64 - v27;
  v66 = a1;
  sub_D8954(a1, (uint64_t)&v64 - v27);
  v67 = a2;
  sub_D8954(a2, (uint64_t)v25);
  v29 = (uint64_t)&v14[*(int *)(v10 + 48)];
  sub_D8954((uint64_t)v28, (uint64_t)v14);
  sub_D8954((uint64_t)v25, v29);
  v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v30((uint64_t)v14, 1, v4) != 1)
  {
    sub_D8954((uint64_t)v14, v71);
    if (v30(v29, 1, v4) != 1)
    {
      sub_DAEB4(v29, (uint64_t)v9);
      if ((static UUID.== infix(_:_:)(v71, v9) & 1) == 0)
        goto LABEL_12;
      v39 = (__int128 *)(v71 + *(int *)(v4 + 20));
      v40 = v39[7];
      v86 = v39[6];
      v87[0] = v40;
      *(_OWORD *)((char *)v87 + 10) = *(__int128 *)((char *)v39 + 122);
      v41 = v39[3];
      v82 = v39[2];
      v83 = v41;
      v42 = v39[5];
      v84 = v39[4];
      v85 = v42;
      v43 = v39[1];
      v80 = *v39;
      v81 = v43;
      v44 = &v9[*(int *)(v4 + 20)];
      v45 = *((_OWORD *)v44 + 7);
      v78 = *((_OWORD *)v44 + 6);
      v79[0] = v45;
      *(_OWORD *)((char *)v79 + 10) = *(_OWORD *)(v44 + 122);
      v46 = *((_OWORD *)v44 + 3);
      v74 = *((_OWORD *)v44 + 2);
      v75 = v46;
      v47 = *((_OWORD *)v44 + 5);
      v76 = *((_OWORD *)v44 + 4);
      v77 = v47;
      v48 = *((_OWORD *)v44 + 1);
      v72 = *(_OWORD *)v44;
      v73 = v48;
      if ((_s8BookEPUB8LocationV2eeoiySbAC_ACtFZ_0((uint64_t)&v80, (uint64_t)&v72) & 1) == 0)
      {
LABEL_12:
        sub_DA01C((uint64_t)v9);
        sub_52128((uint64_t)v25, &qword_3BB500);
        sub_52128((uint64_t)v28, &qword_3BB500);
        sub_DA01C(v71);
        v38 = (uint64_t)v14;
        v37 = &qword_3BB500;
        goto LABEL_21;
      }
      sub_DA01C((uint64_t)v9);
      sub_52128((uint64_t)v25, &qword_3BB500);
      sub_52128((uint64_t)v28, &qword_3BB500);
      sub_DA01C(v71);
      goto LABEL_3;
    }
    sub_52128((uint64_t)v25, &qword_3BB500);
    sub_52128((uint64_t)v28, &qword_3BB500);
    sub_DA01C(v71);
LABEL_8:
    v37 = &qword_3BB6D0;
    v38 = (uint64_t)v14;
    goto LABEL_21;
  }
  sub_52128((uint64_t)v25, &qword_3BB500);
  sub_52128((uint64_t)v28, &qword_3BB500);
  if (v30(v29, 1, v4) != 1)
    goto LABEL_8;
LABEL_3:
  sub_52128((uint64_t)v14, &qword_3BB500);
  v31 = type metadata accessor for HistorySnapshot(0);
  v32 = v69;
  sub_D8954(v66 + *(int *)(v31 + 20), v69);
  v33 = v68;
  sub_D8954(v67 + *(int *)(v31 + 20), v68);
  v34 = v70;
  v35 = v70 + *(int *)(v10 + 48);
  sub_D8954(v32, v70);
  sub_D8954(v33, v35);
  if (v30(v34, 1, v4) == 1)
  {
    sub_52128(v33, &qword_3BB500);
    sub_52128(v32, &qword_3BB500);
    if (v30(v35, 1, v4) == 1)
    {
      v36 = v34;
LABEL_19:
      sub_52128(v36, &qword_3BB500);
      return 1;
    }
    goto LABEL_15;
  }
  v49 = v4;
  v50 = v65;
  sub_D8954(v34, v65);
  if (v30(v35, 1, v49) == 1)
  {
    sub_52128(v33, &qword_3BB500);
    sub_52128(v32, &qword_3BB500);
    sub_DA01C(v50);
LABEL_15:
    v37 = &qword_3BB6D0;
    v38 = v34;
    goto LABEL_21;
  }
  v51 = v35;
  v52 = v64;
  sub_DAEB4(v51, v64);
  if ((static UUID.== infix(_:_:)(v50, v52) & 1) != 0)
  {
    v53 = (__int128 *)(v50 + *(int *)(v49 + 20));
    v54 = v53[7];
    v86 = v53[6];
    v87[0] = v54;
    *(_OWORD *)((char *)v87 + 10) = *(__int128 *)((char *)v53 + 122);
    v55 = v53[3];
    v82 = v53[2];
    v83 = v55;
    v56 = v53[5];
    v84 = v53[4];
    v85 = v56;
    v57 = v53[1];
    v80 = *v53;
    v81 = v57;
    v58 = (__int128 *)(v52 + *(int *)(v49 + 20));
    v59 = v58[7];
    v78 = v58[6];
    v79[0] = v59;
    *(_OWORD *)((char *)v79 + 10) = *(__int128 *)((char *)v58 + 122);
    v60 = v58[3];
    v74 = v58[2];
    v75 = v60;
    v61 = v58[5];
    v76 = v58[4];
    v77 = v61;
    v62 = v58[1];
    v72 = *v58;
    v73 = v62;
    if ((_s8BookEPUB8LocationV2eeoiySbAC_ACtFZ_0((uint64_t)&v80, (uint64_t)&v72) & 1) != 0)
    {
      sub_DA01C(v52);
      sub_52128(v33, &qword_3BB500);
      sub_52128(v32, &qword_3BB500);
      sub_DA01C(v50);
      v36 = v34;
      goto LABEL_19;
    }
  }
  sub_DA01C(v52);
  sub_52128(v33, &qword_3BB500);
  sub_52128(v32, &qword_3BB500);
  sub_DA01C(v50);
  v38 = v34;
  v37 = &qword_3BB500;
LABEL_21:
  sub_52128(v38, v37);
  return 0;
}

uint64_t _s8BookEPUB8CFIRangeV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

unint64_t sub_D88F0()
{
  unint64_t result;

  result = qword_3BB4D8;
  if (!qword_3BB4D8)
  {
    result = swift_getWitnessTable(&unk_2EB66C, &type metadata for PageLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BB4D8);
  }
  return result;
}

uint64_t type metadata accessor for DatedLocation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DatedLocation);
}

uint64_t type metadata accessor for HistorySnapshot.Info(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3BB680, (uint64_t)&nominal type descriptor for HistorySnapshot.Info);
}

uint64_t sub_D8954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BB500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for HistorySnapshot(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3BB5E8, (uint64_t)&nominal type descriptor for HistorySnapshot);
}

uint64_t sub_D89B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BB500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_D8A00()
{
  unint64_t result;

  result = qword_3BB508[0];
  if (!qword_3BB508[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CFIRange, &type metadata for CFIRange);
    atomic_store(result, qword_3BB508);
  }
  return result;
}

ValueMetadata *type metadata accessor for PageLocation()
{
  return &type metadata for PageLocation;
}

uint64_t destroy for Location(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for Location(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 64) = v8;
  v9 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = v10;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  return a1;
}

__n128 initializeWithTake for Location(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 122) = *(_OWORD *)(a2 + 122);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for Location(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  return a1;
}

uint64_t getEnumTagSinglePayload for Location(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 138))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Location(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 136) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 138) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 138) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Location()
{
  return &type metadata for Location;
}

ValueMetadata *type metadata accessor for Location.CFIRequest()
{
  return &type metadata for Location.CFIRequest;
}

_QWORD *_s8BookEPUB8LocationV13AnchorRequestVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *_s8BookEPUB8LocationV13AnchorRequestVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *_s8BookEPUB8LocationV13AnchorRequestVwta_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *type metadata accessor for Location.AnchorRequest()
{
  return &type metadata for Location.AnchorRequest;
}

uint64_t sub_D8E38(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v5, a1 + 24);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_D8EC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(_QWORD *)(v9 + 64) > 0x18)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain(v15);
  }
  else
  {
    v16 = v8;
    v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_D8FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))((v4 + a1 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80), v5);
}

uint64_t sub_D8FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_D9064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_D90D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_D9144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_D91B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (!a2)
    return 0;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = *(_QWORD *)(v6 + 64) + v12;
  if (a2 <= v11)
    goto LABEL_23;
  v14 = (v13 & ~v12) + *(_QWORD *)(v9 + 64);
  v15 = 8 * v14;
  if (v14 <= 3)
  {
    v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      v16 = *(_DWORD *)(a1 + v14);
      if (!v16)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        if (v7 >= v10)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, v7, v5);
        else
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v8);
      }
      return 0;
    }
  }
  v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14))
    goto LABEL_23;
LABEL_14:
  v18 = (v16 - 1) << v15;
  if (v14 > 3)
    v18 = 0;
  if ((_DWORD)v14)
  {
    if (v14 <= 3)
      v19 = v14;
    else
      v19 = 4;
    __asm { BR              X12 }
  }
  return v11 + v18 + 1;
}

void sub_D934C(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v12 = 0;
  }
  else if (v11 <= 3)
  {
    v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      v12 = &dword_4;
    }
    else if (v14 >= 0x100)
    {
      v12 = 2;
    }
    else
    {
      v12 = v14 > 1;
    }
  }
  else
  {
    v12 = &dword_0 + 1;
  }
  if (v10 < a2)
  {
    v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t destroy for CFIRange(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for CFIRange(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for CFIRange(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for CFIRange(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CFIRange(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CFIRange(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CFIRange()
{
  return &type metadata for CFIRange;
}

uint64_t *initializeBufferWithCopyOfBuffer for HistorySnapshot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  void (*v21)(uint64_t *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  void (*v36)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v37;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for HistorySnapshot.Info(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_319AC(&qword_3BB500);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = *(int *)(v7 + 20);
      v14 = (char *)a1 + v13;
      v15 = (char *)a2 + v13;
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v16 = *((_QWORD *)v15 + 3);
      *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
      *((_QWORD *)v14 + 3) = v16;
      *((_OWORD *)v14 + 2) = *((_OWORD *)v15 + 2);
      v18 = *((_QWORD *)v15 + 6);
      v17 = *((_QWORD *)v15 + 7);
      *((_QWORD *)v14 + 6) = v18;
      *((_QWORD *)v14 + 7) = v17;
      *((_OWORD *)v14 + 4) = *((_OWORD *)v15 + 4);
      *(_OWORD *)(v14 + 73) = *(_OWORD *)(v15 + 73);
      v19 = *((_OWORD *)v15 + 6);
      v20 = *((_OWORD *)v15 + 7);
      *(_OWORD *)(v14 + 121) = *(_OWORD *)(v15 + 121);
      *((_OWORD *)v14 + 6) = v19;
      *((_OWORD *)v14 + 7) = v20;
      v14[137] = v15[137];
      v21 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t, __n128))(v8 + 56);
      swift_bridgeObjectRetain(v16);
      v22 = swift_bridgeObjectRetain(v18);
      v21(a1, 0, 1, v7, v22);
    }
    v23 = *(int *)(a3 + 20);
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    if (v9((uint64_t *)v25, 1, v7))
    {
      v26 = sub_319AC(&qword_3BB500);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v24, v25, v27);
      v28 = *(int *)(v7 + 20);
      v29 = &v24[v28];
      v30 = &v25[v28];
      *(_OWORD *)v29 = *(_OWORD *)v30;
      v31 = *((_QWORD *)v30 + 3);
      *((_QWORD *)v29 + 2) = *((_QWORD *)v30 + 2);
      *((_QWORD *)v29 + 3) = v31;
      *((_OWORD *)v29 + 2) = *((_OWORD *)v30 + 2);
      v33 = *((_QWORD *)v30 + 6);
      v32 = *((_QWORD *)v30 + 7);
      *((_QWORD *)v29 + 6) = v33;
      *((_QWORD *)v29 + 7) = v32;
      *((_OWORD *)v29 + 4) = *((_OWORD *)v30 + 4);
      *(_OWORD *)(v29 + 73) = *(_OWORD *)(v30 + 73);
      v34 = *((_OWORD *)v30 + 6);
      v35 = *((_OWORD *)v30 + 7);
      *(_OWORD *)(v29 + 121) = *(_OWORD *)(v30 + 121);
      *((_OWORD *)v29 + 6) = v34;
      *((_OWORD *)v29 + 7) = v35;
      v29[137] = v30[137];
      v36 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v8 + 56);
      swift_bridgeObjectRetain(v31);
      v37 = swift_bridgeObjectRetain(v33);
      v36(v24, 0, 1, v7, v37);
    }
  }
  return a1;
}

double destroy for HistorySnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;

  v4 = type metadata accessor for HistorySnapshot.Info(0);
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    v8 = a1 + *(int *)(v4 + 20);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 24));
    v6 = swift_bridgeObjectRelease(*(_QWORD *)(v8 + 48));
  }
  v9 = a1 + *(int *)(a2 + 20);
  if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t, __n128))v5)(v9, 1, v4, v6))
  {
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
    v12 = v9 + *(int *)(v4 + 20);
    swift_bridgeObjectRelease(*(_QWORD *)(v12 + 24));
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v12 + 48)).n128_u64[0];
  }
  return result;
}

char *initializeWithCopy for HistorySnapshot(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void (*v19)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void (*v34)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v35;

  v6 = type metadata accessor for HistorySnapshot.Info(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_319AC(&qword_3BB500);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    v11 = *(int *)(v6 + 20);
    v12 = &a1[v11];
    v13 = &a2[v11];
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v14 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
    *((_QWORD *)v12 + 3) = v14;
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
    v16 = *((_QWORD *)v13 + 6);
    v15 = *((_QWORD *)v13 + 7);
    *((_QWORD *)v12 + 6) = v16;
    *((_QWORD *)v12 + 7) = v15;
    *((_OWORD *)v12 + 4) = *((_OWORD *)v13 + 4);
    *(_OWORD *)(v12 + 73) = *(_OWORD *)(v13 + 73);
    v17 = *((_OWORD *)v13 + 6);
    v18 = *((_OWORD *)v13 + 7);
    *(_OWORD *)(v12 + 121) = *(_OWORD *)(v13 + 121);
    *((_OWORD *)v12 + 6) = v17;
    *((_OWORD *)v12 + 7) = v18;
    v12[137] = v13[137];
    v19 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v7 + 56);
    swift_bridgeObjectRetain(v14);
    v20 = swift_bridgeObjectRetain(v16);
    v19(a1, 0, 1, v6, v20);
  }
  v21 = *(int *)(a3 + 20);
  v22 = &a1[v21];
  v23 = &a2[v21];
  if (v8(v23, 1, v6))
  {
    v24 = sub_319AC(&qword_3BB500);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v22, v23, v25);
    v26 = *(int *)(v6 + 20);
    v27 = &v22[v26];
    v28 = &v23[v26];
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v29 = *((_QWORD *)v28 + 3);
    *((_QWORD *)v27 + 2) = *((_QWORD *)v28 + 2);
    *((_QWORD *)v27 + 3) = v29;
    *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
    v31 = *((_QWORD *)v28 + 6);
    v30 = *((_QWORD *)v28 + 7);
    *((_QWORD *)v27 + 6) = v31;
    *((_QWORD *)v27 + 7) = v30;
    *((_OWORD *)v27 + 4) = *((_OWORD *)v28 + 4);
    *(_OWORD *)(v27 + 73) = *(_OWORD *)(v28 + 73);
    v32 = *((_OWORD *)v28 + 6);
    v33 = *((_OWORD *)v28 + 7);
    *(_OWORD *)(v27 + 121) = *(_OWORD *)(v28 + 121);
    *((_OWORD *)v27 + 6) = v32;
    *((_OWORD *)v27 + 7) = v33;
    v27[137] = v28[137];
    v34 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v7 + 56);
    swift_bridgeObjectRetain(v29);
    v35 = swift_bridgeObjectRetain(v31);
    v34(v22, 0, 1, v6, v35);
  }
  return a1;
}

char *assignWithCopy for HistorySnapshot(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  v6 = type metadata accessor for HistorySnapshot.Info(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = *(int *)(v6 + 20);
      v13 = &a1[v12];
      v14 = &a2[v12];
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      v15 = *((_QWORD *)v14 + 3);
      *((_QWORD *)v13 + 3) = v15;
      *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
      *((_QWORD *)v13 + 5) = *((_QWORD *)v14 + 5);
      v16 = *((_QWORD *)v14 + 6);
      *((_QWORD *)v13 + 6) = v16;
      *((_QWORD *)v13 + 7) = *((_QWORD *)v14 + 7);
      v17 = *((_OWORD *)v14 + 4);
      *(_OWORD *)(v13 + 73) = *(_OWORD *)(v14 + 73);
      *((_OWORD *)v13 + 4) = v17;
      v19 = *((_OWORD *)v14 + 6);
      v18 = *((_OWORD *)v14 + 7);
      *(_OWORD *)(v13 + 121) = *(_OWORD *)(v14 + 121);
      *((_OWORD *)v13 + 6) = v19;
      *((_OWORD *)v13 + 7) = v18;
      v13[137] = v14[137];
      v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v7 + 56);
      swift_bridgeObjectRetain(v15);
      v21 = swift_bridgeObjectRetain(v16);
      v20(a1, 0, 1, v6, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_DA01C((uint64_t)a1);
LABEL_6:
    v22 = sub_319AC(&qword_3BB500);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v41 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(a1, a2, v41);
  v42 = *(int *)(v6 + 20);
  v43 = &a1[v42];
  v44 = &a2[v42];
  *(_QWORD *)v43 = *(_QWORD *)&a2[v42];
  *((_QWORD *)v43 + 1) = *(_QWORD *)&a2[v42 + 8];
  *((_QWORD *)v43 + 2) = *(_QWORD *)&a2[v42 + 16];
  v45 = *(_QWORD *)&a2[v42 + 24];
  v46 = *(_QWORD *)&a1[v42 + 24];
  *((_QWORD *)v43 + 3) = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  *((_QWORD *)v43 + 4) = *((_QWORD *)v44 + 4);
  *((_QWORD *)v43 + 5) = *((_QWORD *)v44 + 5);
  v47 = *((_QWORD *)v44 + 6);
  v48 = *((_QWORD *)v43 + 6);
  *((_QWORD *)v43 + 6) = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  *((_QWORD *)v43 + 7) = *((_QWORD *)v44 + 7);
  v49 = *((_OWORD *)v44 + 4);
  *(_OWORD *)(v43 + 73) = *(_OWORD *)(v44 + 73);
  *((_OWORD *)v43 + 4) = v49;
  v50 = *((_OWORD *)v44 + 6);
  v51 = *((_OWORD *)v44 + 7);
  *(_OWORD *)(v43 + 121) = *(_OWORD *)(v44 + 121);
  *((_OWORD *)v43 + 6) = v50;
  *((_OWORD *)v43 + 7) = v51;
  v43[137] = v44[137];
LABEL_7:
  v23 = *(int *)(a3 + 20);
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = v8(&a1[v23], 1, v6);
  v27 = v8(v25, 1, v6);
  if (!v26)
  {
    if (!v27)
    {
      v52 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 24))(v24, v25, v52);
      v53 = *(int *)(v6 + 20);
      v54 = &v24[v53];
      v55 = &v25[v53];
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
      *((_QWORD *)v54 + 2) = *((_QWORD *)v55 + 2);
      v56 = *((_QWORD *)v55 + 3);
      v57 = *((_QWORD *)v54 + 3);
      *((_QWORD *)v54 + 3) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease(v57);
      *((_QWORD *)v54 + 4) = *((_QWORD *)v55 + 4);
      *((_QWORD *)v54 + 5) = *((_QWORD *)v55 + 5);
      v58 = *((_QWORD *)v55 + 6);
      v59 = *((_QWORD *)v54 + 6);
      *((_QWORD *)v54 + 6) = v58;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRelease(v59);
      *((_QWORD *)v54 + 7) = *((_QWORD *)v55 + 7);
      v60 = *((_OWORD *)v55 + 4);
      *(_OWORD *)(v54 + 73) = *(_OWORD *)(v55 + 73);
      *((_OWORD *)v54 + 4) = v60;
      v61 = *((_OWORD *)v55 + 6);
      v62 = *((_OWORD *)v55 + 7);
      *(_OWORD *)(v54 + 121) = *(_OWORD *)(v55 + 121);
      *((_OWORD *)v54 + 6) = v61;
      *((_OWORD *)v54 + 7) = v62;
      v54[137] = v55[137];
      return a1;
    }
    sub_DA01C((uint64_t)v24);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    v39 = sub_319AC(&qword_3BB500);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  v28 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v24, v25, v28);
  v29 = *(int *)(v6 + 20);
  v30 = &v24[v29];
  v31 = &v25[v29];
  *(_OWORD *)v30 = *(_OWORD *)v31;
  *((_QWORD *)v30 + 2) = *((_QWORD *)v31 + 2);
  v32 = *((_QWORD *)v31 + 3);
  *((_QWORD *)v30 + 3) = v32;
  *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
  *((_QWORD *)v30 + 5) = *((_QWORD *)v31 + 5);
  v33 = *((_QWORD *)v31 + 6);
  *((_QWORD *)v30 + 6) = v33;
  *((_QWORD *)v30 + 7) = *((_QWORD *)v31 + 7);
  v34 = *((_OWORD *)v31 + 4);
  *(_OWORD *)(v30 + 73) = *(_OWORD *)(v31 + 73);
  *((_OWORD *)v30 + 4) = v34;
  v36 = *((_OWORD *)v31 + 6);
  v35 = *((_OWORD *)v31 + 7);
  *(_OWORD *)(v30 + 121) = *(_OWORD *)(v31 + 121);
  *((_OWORD *)v30 + 6) = v36;
  *((_OWORD *)v30 + 7) = v35;
  v30[137] = v31[137];
  v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v7 + 56);
  swift_bridgeObjectRetain(v32);
  v38 = swift_bridgeObjectRetain(v33);
  v37(v24, 0, 1, v6, v38);
  return a1;
}

uint64_t sub_DA01C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HistorySnapshot.Info(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for HistorySnapshot(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v6 = type metadata accessor for HistorySnapshot.Info(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_319AC(&qword_3BB500);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    v11 = *(int *)(v6 + 20);
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *((_OWORD *)v13 + 7);
    *((_OWORD *)v12 + 6) = *((_OWORD *)v13 + 6);
    *((_OWORD *)v12 + 7) = v14;
    *(_OWORD *)(v12 + 122) = *(_OWORD *)(v13 + 122);
    v15 = *((_OWORD *)v13 + 3);
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
    *((_OWORD *)v12 + 3) = v15;
    v16 = *((_OWORD *)v13 + 5);
    *((_OWORD *)v12 + 4) = *((_OWORD *)v13 + 4);
    *((_OWORD *)v12 + 5) = v16;
    v17 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v17;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v18 = *(int *)(a3 + 20);
  v19 = &a1[v18];
  v20 = &a2[v18];
  if (v8(v20, 1, v6))
  {
    v21 = sub_319AC(&qword_3BB500);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v19, v20, v22);
    v23 = *(int *)(v6 + 20);
    v24 = &v19[v23];
    v25 = &v20[v23];
    v26 = *((_OWORD *)v25 + 7);
    *((_OWORD *)v24 + 6) = *((_OWORD *)v25 + 6);
    *((_OWORD *)v24 + 7) = v26;
    *(_OWORD *)(v24 + 122) = *(_OWORD *)(v25 + 122);
    v27 = *((_OWORD *)v25 + 3);
    *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
    *((_OWORD *)v24 + 3) = v27;
    v28 = *((_OWORD *)v25 + 5);
    *((_OWORD *)v24 + 4) = *((_OWORD *)v25 + 4);
    *((_OWORD *)v24 + 5) = v28;
    v29 = *((_OWORD *)v25 + 1);
    *(_OWORD *)v24 = *(_OWORD *)v25;
    *((_OWORD *)v24 + 1) = v29;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v19, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for HistorySnapshot(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;

  v6 = type metadata accessor for HistorySnapshot.Info(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = *(int *)(v6 + 20);
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = *((_OWORD *)v14 + 7);
      *((_OWORD *)v13 + 6) = *((_OWORD *)v14 + 6);
      *((_OWORD *)v13 + 7) = v15;
      *(_OWORD *)(v13 + 122) = *(_OWORD *)(v14 + 122);
      v16 = *((_OWORD *)v14 + 3);
      *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
      *((_OWORD *)v13 + 3) = v16;
      v17 = *((_OWORD *)v14 + 5);
      *((_OWORD *)v13 + 4) = *((_OWORD *)v14 + 4);
      *((_OWORD *)v13 + 5) = v17;
      v18 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v18;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_DA01C((uint64_t)a1);
LABEL_6:
    v19 = sub_319AC(&qword_3BB500);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v35 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(a1, a2, v35);
  v36 = *(int *)(v6 + 20);
  v37 = &a1[v36];
  v38 = &a2[v36];
  *(_OWORD *)v37 = *(_OWORD *)&a2[v36];
  v39 = *(_QWORD *)&a2[v36 + 24];
  v40 = *(_QWORD *)&a1[v36 + 24];
  *((_QWORD *)v37 + 2) = *(_QWORD *)&a2[v36 + 16];
  *((_QWORD *)v37 + 3) = v39;
  swift_bridgeObjectRelease(v40);
  *((_QWORD *)v37 + 4) = *((_QWORD *)v38 + 4);
  v41 = *((_QWORD *)v38 + 6);
  v42 = *((_QWORD *)v37 + 6);
  *((_QWORD *)v37 + 5) = *((_QWORD *)v38 + 5);
  *((_QWORD *)v37 + 6) = v41;
  swift_bridgeObjectRelease(v42);
  *((_QWORD *)v37 + 7) = *((_QWORD *)v38 + 7);
  *((_OWORD *)v37 + 4) = *((_OWORD *)v38 + 4);
  *(_OWORD *)(v37 + 73) = *(_OWORD *)(v38 + 73);
  v43 = *((_OWORD *)v38 + 7);
  *((_OWORD *)v37 + 6) = *((_OWORD *)v38 + 6);
  *((_OWORD *)v37 + 7) = v43;
  *(_OWORD *)(v37 + 121) = *(_OWORD *)(v38 + 121);
  v37[137] = v38[137];
LABEL_7:
  v20 = *(int *)(a3 + 20);
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = v8(&a1[v20], 1, v6);
  v24 = v8(v22, 1, v6);
  if (!v23)
  {
    if (!v24)
    {
      v44 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 40))(v21, v22, v44);
      v45 = *(int *)(v6 + 20);
      v46 = &v21[v45];
      v47 = &v22[v45];
      *(_OWORD *)v46 = *(_OWORD *)v47;
      v48 = *((_QWORD *)v47 + 3);
      v49 = *(_QWORD *)&v21[v45 + 24];
      *((_QWORD *)v46 + 2) = *((_QWORD *)v47 + 2);
      *((_QWORD *)v46 + 3) = v48;
      swift_bridgeObjectRelease(v49);
      *((_QWORD *)v46 + 4) = *((_QWORD *)v47 + 4);
      v50 = *((_QWORD *)v47 + 6);
      v51 = *((_QWORD *)v46 + 6);
      *((_QWORD *)v46 + 5) = *((_QWORD *)v47 + 5);
      *((_QWORD *)v46 + 6) = v50;
      swift_bridgeObjectRelease(v51);
      *((_QWORD *)v46 + 7) = *((_QWORD *)v47 + 7);
      *((_OWORD *)v46 + 4) = *((_OWORD *)v47 + 4);
      *(_OWORD *)(v46 + 73) = *(_OWORD *)(v47 + 73);
      v52 = *((_OWORD *)v47 + 7);
      *((_OWORD *)v46 + 6) = *((_OWORD *)v47 + 6);
      *((_OWORD *)v46 + 7) = v52;
      *(_OWORD *)(v46 + 121) = *(_OWORD *)(v47 + 121);
      v46[137] = v47[137];
      return a1;
    }
    sub_DA01C((uint64_t)v21);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    v33 = sub_319AC(&qword_3BB500);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    return a1;
  }
  v25 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v21, v22, v25);
  v26 = *(int *)(v6 + 20);
  v27 = &v21[v26];
  v28 = &v22[v26];
  v29 = *((_OWORD *)v28 + 7);
  *((_OWORD *)v27 + 6) = *((_OWORD *)v28 + 6);
  *((_OWORD *)v27 + 7) = v29;
  *(_OWORD *)(v27 + 122) = *(_OWORD *)(v28 + 122);
  v30 = *((_OWORD *)v28 + 3);
  *((_OWORD *)v27 + 2) = *((_OWORD *)v28 + 2);
  *((_OWORD *)v27 + 3) = v30;
  v31 = *((_OWORD *)v28 + 5);
  *((_OWORD *)v27 + 4) = *((_OWORD *)v28 + 4);
  *((_OWORD *)v27 + 5) = v31;
  v32 = *((_OWORD *)v28 + 1);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *((_OWORD *)v27 + 1) = v32;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v21, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for HistorySnapshot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_DA514);
}

uint64_t sub_DA514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BB500);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for HistorySnapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_DA560);
}

uint64_t sub_DA560(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BB500);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_DA5A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_DA60C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_DA60C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3BB5F8)
  {
    v2 = type metadata accessor for HistorySnapshot.Info(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3BB5F8);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for HistorySnapshot.Info(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v11 = *((_QWORD *)v10 + 3);
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    *((_QWORD *)v9 + 3) = v11;
    *((_OWORD *)v9 + 2) = *((_OWORD *)v10 + 2);
    v13 = *((_QWORD *)v10 + 6);
    v12 = *((_QWORD *)v10 + 7);
    *((_QWORD *)v9 + 6) = v13;
    *((_QWORD *)v9 + 7) = v12;
    *((_OWORD *)v9 + 4) = *((_OWORD *)v10 + 4);
    *(_OWORD *)(v9 + 73) = *(_OWORD *)(v10 + 73);
    v14 = *((_OWORD *)v10 + 6);
    v15 = *((_OWORD *)v10 + 7);
    *(_OWORD *)(v9 + 121) = *(_OWORD *)(v10 + 121);
    *((_OWORD *)v9 + 6) = v14;
    *((_OWORD *)v9 + 7) = v15;
    v9[137] = v10[137];
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t destroy for HistorySnapshot.Info(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 24));
  return swift_bridgeObjectRelease(*(_QWORD *)(v5 + 48));
}

uint64_t initializeWithCopy for HistorySnapshot.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v10 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = v10;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  v12 = *(_QWORD *)(v9 + 48);
  v11 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v8 + 48) = v12;
  *(_QWORD *)(v8 + 56) = v11;
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(v8 + 73) = *(_OWORD *)(v9 + 73);
  v13 = *(_OWORD *)(v9 + 96);
  v14 = *(_OWORD *)(v9 + 112);
  *(_OWORD *)(v8 + 121) = *(_OWORD *)(v9 + 121);
  *(_OWORD *)(v8 + 96) = v13;
  *(_OWORD *)(v8 + 112) = v14;
  *(_BYTE *)(v8 + 137) = *(_BYTE *)(v9 + 137);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t assignWithCopy for HistorySnapshot.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(a1 + v7 + 24);
  *(_QWORD *)(v8 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  v12 = *(_QWORD *)(v9 + 48);
  v13 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
  v14 = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(v8 + 73) = *(_OWORD *)(v9 + 73);
  *(_OWORD *)(v8 + 64) = v14;
  v15 = *(_OWORD *)(v9 + 96);
  v16 = *(_OWORD *)(v9 + 112);
  *(_OWORD *)(v8 + 121) = *(_OWORD *)(v9 + 121);
  *(_OWORD *)(v8 + 96) = v15;
  *(_OWORD *)(v8 + 112) = v16;
  *(_BYTE *)(v8 + 137) = *(_BYTE *)(v9 + 137);
  return a1;
}

uint64_t initializeWithTake for HistorySnapshot.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = v9[7];
  v8[6] = v9[6];
  v8[7] = v10;
  *(_OWORD *)((char *)v8 + 122) = *(_OWORD *)((char *)v9 + 122);
  v11 = v9[3];
  v8[2] = v9[2];
  v8[3] = v11;
  v12 = v9[5];
  v8[4] = v9[4];
  v8[5] = v12;
  v13 = v9[1];
  *v8 = *v9;
  v8[1] = v13;
  return a1;
}

uint64_t assignWithTake for HistorySnapshot.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  v10 = *(_QWORD *)(v9 + 24);
  v11 = *(_QWORD *)(a1 + v7 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = v10;
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(v9 + 32);
  v12 = *(_QWORD *)(v9 + 48);
  v13 = *(_QWORD *)(v8 + 48);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v8 + 48) = v12;
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(v9 + 64);
  *(_OWORD *)(v8 + 73) = *(_OWORD *)(v9 + 73);
  v14 = *(_OWORD *)(v9 + 112);
  *(_OWORD *)(v8 + 96) = *(_OWORD *)(v9 + 96);
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 121) = *(_OWORD *)(v9 + 121);
  *(_BYTE *)(v8 + 137) = *(_BYTE *)(v9 + 137);
  return a1;
}

uint64_t getEnumTagSinglePayload for HistorySnapshot.Info(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_DAA6C);
}

uint64_t sub_DAA6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for HistorySnapshot.Info(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_DAB04);
}

uint64_t sub_DAB04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = a2;
  return result;
}

uint64_t sub_DAB80(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_2EB590;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PageLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_DAC3C + 4 * byte_2EB183[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_DAC70 + 4 * byte_2EB17E[v4]))();
}

uint64_t sub_DAC70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_DAC78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xDAC80);
  return result;
}

uint64_t sub_DAC8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xDAC94);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_DAC98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DACA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageLocation.CodingKeys()
{
  return &type metadata for PageLocation.CodingKeys;
}

unint64_t sub_DACC0()
{
  unint64_t result;

  result = qword_3BB6B8;
  if (!qword_3BB6B8)
  {
    result = swift_getWitnessTable(&unk_2EB644, &type metadata for PageLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BB6B8);
  }
  return result;
}

unint64_t sub_DAD08()
{
  unint64_t result;

  result = qword_3BB6C0;
  if (!qword_3BB6C0)
  {
    result = swift_getWitnessTable("-P\t", &type metadata for PageLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BB6C0);
  }
  return result;
}

unint64_t sub_DAD50()
{
  unint64_t result;

  result = qword_3BB6C8;
  if (!qword_3BB6C8)
  {
    result = swift_getWitnessTable(&unk_2EB5DC, &type metadata for PageLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BB6C8);
  }
  return result;
}

uint64_t sub_DAD94(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x746E656D75636F64 && a2 == 0xEF6C616E6964724FLL)
  {
    v5 = 0xEF6C616E6964724FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656D75636F64, 0xEF6C616E6964724FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7366664F65676170 && a2 == 0xEA00000000007465)
  {
    swift_bridgeObjectRelease(0xEA00000000007465);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7366664F65676170, 0xEA00000000007465, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_DAEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HistorySnapshot.Info(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t (*ThemeOptionsViewModel.fontDownloadAlert.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2EB6D0);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2EB6F8);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

double sub_DAF80()
{
  uint64_t v0;
  double result;

  *(_QWORD *)&result = swift_unknownObjectRetain(*(_QWORD *)(v0
                                                           + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel_contentLayoutProvider)).n128_u64[0];
  return result;
}

BOOL sub_DAFB4()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EB718);
  v2 = swift_getKeyPath(&unk_2EB740);
  static Published.subscript.getter(&v4, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  return (_BYTE)v4 == 0;
}

uint64_t ThemeOptionsViewModel.editingState.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EB718);
  v4 = swift_getKeyPath(&unk_2EB740);
  static Published.subscript.getter(a1, v1, KeyPath);
  swift_release(KeyPath);
  return swift_release(v4);
}

__n128 ThemeOptionsViewModel.theme.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  uint64_t v15;
  id v16;

  KeyPath = swift_getKeyPath(&unk_2EB760);
  v4 = swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(&v11, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v4);
  v5 = v11;
  LOBYTE(KeyPath) = BYTE1(v11);
  LOBYTE(v4) = BYTE2(v11);
  v6 = v15;
  v9 = v13;
  v10 = v12;
  v8 = v14;

  *(_BYTE *)a1 = v5;
  *(_BYTE *)(a1 + 1) = KeyPath;
  *(_BYTE *)(a1 + 2) = v4;
  *(_OWORD *)(a1 + 8) = v10;
  *(_OWORD *)(a1 + 24) = v9;
  result = v8;
  *(__n128 *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = v6;
  return result;
}

void ThemeOptionsViewModel.theme.setter(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;

  v2 = v1;
  v3 = *a1;
  v22 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v9 = *((_QWORD *)a1 + 4);
  v21 = v7;
  v19 = *((_QWORD *)a1 + 6);
  v20 = *((_QWORD *)a1 + 5);
  v18 = *((_QWORD *)a1 + 7);
  v10 = (_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 120);
  v23 = *(_QWORD *)(v2 + 128);
  v17 = sub_472D0(v10, v11);
  sub_DD7B0();
  swift_bridgeObjectRetain(v6);
  LOBYTE(v24) = v3;
  BYTE1(v24) = v4;
  BYTE2(v24) = v5;
  v25 = v6;
  v26 = v7;
  v27 = v8;
  v28 = v9;
  v29 = v20;
  v30 = v19;
  v31 = v18;
  sub_96164((uint64_t)v17, &v24, 1, 1, v11, v23);
  v13 = v12;
  KeyPath = swift_getKeyPath(&unk_2EB760);
  v15 = swift_getKeyPath(&unk_2EB788);
  LOBYTE(v24) = v22;
  BYTE1(v24) = v4;
  BYTE2(v24) = v5;
  v25 = v6;
  v26 = v21;
  v27 = v8;
  v28 = v9;
  v29 = v20;
  v30 = v19;
  v31 = v18;
  v32 = v13;
  v16 = v13;
  swift_retain();
  static Published.subscript.setter(&v24, v2, KeyPath, v15);
  sub_DC47C();

}

uint64_t ThemeOptionsViewModel.fontDownloadAlert.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EB6D0);
  v4 = swift_getKeyPath(&unk_2EB6F8);
  static Published.subscript.getter(a1, v1, KeyPath);
  swift_release(KeyPath);
  return swift_release(v4);
}

BOOL ThemeOptionsViewModel.canReset.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EB718);
  v2 = swift_getKeyPath(&unk_2EB740);
  static Published.subscript.getter(&v4, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  return !(_BYTE)v4 && *(_QWORD *)(v0 + 40) != 0;
}

uint64_t ThemeOptionsViewModel.fonts.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_2EB7A8);
  v4 = swift_getKeyPath(&unk_2EB7D0);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t ThemeOptionsViewModel.fonts.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EB7A8);
  v2 = swift_getKeyPath(&unk_2EB7D0);
  static Published.subscript.getter(&v4, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t ThemeOptionsViewModel.isVerticalText.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t ThemeOptionsViewModel.layoutMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

double sub_DB494(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  KeyPath = swift_getKeyPath(&unk_2EB760);
  v4 = swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(&v9, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v4);
  v5 = BYTE1(v9);
  v6 = BYTE2(v9);
  v7 = v13;
  *(_BYTE *)a1 = v9;
  *(_BYTE *)(a1 + 1) = v5;
  *(_BYTE *)(a1 + 2) = v6;
  *(_OWORD *)(a1 + 8) = v10;
  *(_OWORD *)(a1 + 24) = v11;
  result = *(double *)&v12;
  *(_OWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 56) = v7;
  return result;
}

double ThemeOptionsViewModel.textZoomFactor.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double v4;

  KeyPath = swift_getKeyPath(&unk_2EB7F0);
  v2 = swift_getKeyPath(&unk_2EB818);
  static Published.subscript.getter(&v4, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

double sub_DB5AC@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  double v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EB7F0);
  v5 = swift_getKeyPath(&unk_2EB818);
  static Published.subscript.getter(&v7, v3, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  result = v7;
  *a2 = v7;
  return result;
}

uint64_t sub_DB628(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EB7F0);
  v5 = swift_getKeyPath(&unk_2EB818);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t ThemeOptionsViewModel.textZoomFactor.setter(double a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  double v6;

  KeyPath = swift_getKeyPath(&unk_2EB7F0);
  v4 = swift_getKeyPath(&unk_2EB818);
  v6 = a1;
  swift_retain(v1);
  return static Published.subscript.setter(&v6, v1, KeyPath, v4);
}

uint64_t (*ThemeOptionsViewModel.textZoomFactor.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2EB7F0);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2EB818);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

uint64_t ThemeOptionsViewModel.$textZoomFactor.getter()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__textZoomFactor, &qword_3BB700);
}

uint64_t ThemeOptionsViewModel.$textZoomFactor.setter(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3BB708, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__textZoomFactor, &qword_3BB700);
}

void (*ThemeOptionsViewModel.$textZoomFactor.modify(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3BB708);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__textZoomFactor;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3BB700);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

uint64_t ThemeOptionsViewModel.sizeCategory.getter()
{
  return sub_DBAB8((uint64_t)&unk_2EB838, (uint64_t)&unk_2EB860);
}

uint64_t sub_DB898@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_DBB34(a1, (uint64_t)&unk_2EB838, (uint64_t)&unk_2EB860, a2);
}

uint64_t sub_DB8AC(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  void *v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EB838);
  v5 = swift_getKeyPath(&unk_2EB860);
  v8 = v2;
  v6 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v5);
}

uint64_t ThemeOptionsViewModel.sizeCategory.setter(uint64_t a1)
{
  return sub_3A0D8(a1, (uint64_t)&unk_2EB838, (uint64_t)&unk_2EB860);
}

uint64_t (*ThemeOptionsViewModel.sizeCategory.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2EB838);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2EB860);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

uint64_t ThemeOptionsViewModel.$sizeCategory.getter()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__sizeCategory, &qword_3BB718);
}

uint64_t ThemeOptionsViewModel.$sizeCategory.setter(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3BB720, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__sizeCategory, &qword_3BB718);
}

void (*ThemeOptionsViewModel.$sizeCategory.modify(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3BB720);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__sizeCategory;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3BB718);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

uint64_t ThemeOptionsViewModel.columnCount.getter()
{
  return sub_DBAB8((uint64_t)&unk_2EB880, (uint64_t)&unk_2EB8A8);
}

uint64_t sub_DBAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_DBB20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_DBB34(a1, (uint64_t)&unk_2EB880, (uint64_t)&unk_2EB8A8, a2);
}

uint64_t sub_DBB34@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_DBBAC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EB880);
  v5 = swift_getKeyPath(&unk_2EB8A8);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t ThemeOptionsViewModel.columnCount.setter(uint64_t a1)
{
  return sub_3A0D8(a1, (uint64_t)&unk_2EB880, (uint64_t)&unk_2EB8A8);
}

uint64_t (*ThemeOptionsViewModel.columnCount.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2EB880);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2EB8A8);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

uint64_t ThemeOptionsViewModel.$columnCount.getter()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__columnCount, &qword_3BB730);
}

uint64_t ThemeOptionsViewModel.$columnCount.setter(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3BB738, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__columnCount, &qword_3BB730);
}

void (*ThemeOptionsViewModel.$columnCount.modify(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3BB738);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__columnCount;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3BB730);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

uint64_t sub_DBDA0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EB718);
  v5 = swift_getKeyPath(&unk_2EB740);
  static Published.subscript.getter(&v7, v3, KeyPath);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_DBE1C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EB718);
  v5 = swift_getKeyPath(&unk_2EB740);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t ThemeOptionsViewModel.$editingState.getter()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__editingState, &qword_3BB740);
}

uint64_t sub_DBEA0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EB7A8);
  v5 = swift_getKeyPath(&unk_2EB7D0);
  static Published.subscript.getter(&v7, v3, KeyPath);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_DBF1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EB7A8);
  v5 = swift_getKeyPath(&unk_2EB7D0);
  v7 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t (*ThemeOptionsViewModel.fonts.modify(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2EB7A8);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2EB7D0);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

uint64_t ThemeOptionsViewModel.$fonts.getter()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fonts, &qword_3BB748);
}

uint64_t ThemeOptionsViewModel.$fonts.setter(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3BB750, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fonts, &qword_3BB748);
}

void (*ThemeOptionsViewModel.$fonts.modify(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3BB750);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fonts;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3BB748);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

__n128 sub_DC104@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  __n128 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EB6D0);
  v5 = swift_getKeyPath(&unk_2EB6F8);
  static Published.subscript.getter(&v15, v3, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = BYTE1(v15);
  v7 = BYTE2(v15);
  v8 = BYTE3(v15);
  v9 = BYTE4(v15);
  v10 = BYTE5(v15);
  v11 = BYTE6(v15);
  result = v16;
  v13 = v17;
  v14 = v18;
  *(_BYTE *)a2 = v15;
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v7;
  *(_BYTE *)(a2 + 3) = v8;
  *(_BYTE *)(a2 + 4) = v9;
  *(_BYTE *)(a2 + 5) = v10;
  *(_BYTE *)(a2 + 6) = v11;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = v14;
  return result;
}

uint64_t sub_DC1C4(char *a1, uint64_t *a2)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = *((_QWORD *)a1 + 2);
  v10 = *((_QWORD *)a1 + 4);
  v13 = *((_QWORD *)a1 + 3);
  v14 = *((_QWORD *)a1 + 1);
  v11 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EB6D0);
  v15 = swift_getKeyPath(&unk_2EB6F8);
  v17[0] = v2;
  v17[1] = v3;
  v17[2] = v4;
  v17[3] = v5;
  v17[4] = v6;
  v17[5] = v7;
  v17[6] = v8;
  v18 = v14;
  v19 = v9;
  v20 = v13;
  v21 = v10;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  return static Published.subscript.setter(v17, v11, KeyPath, v15);
}

uint64_t ThemeOptionsViewModel.fontDownloadAlert.setter(char *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  uint64_t KeyPath;
  _BYTE v15[8];
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v13 = *(_OWORD *)(a1 + 8);
  v9 = *((_QWORD *)a1 + 3);
  v12 = *((_QWORD *)a1 + 4);
  KeyPath = swift_getKeyPath(&unk_2EB6D0);
  v10 = swift_getKeyPath(&unk_2EB6F8);
  v15[0] = v2;
  v15[1] = v3;
  v15[2] = v4;
  v15[3] = v5;
  v15[4] = v6;
  v15[5] = v7;
  v15[6] = v8;
  v16 = v13;
  v17 = v9;
  v18 = v12;
  swift_retain(v1);
  return static Published.subscript.setter(v15, v1, KeyPath, v10);
}

uint64_t ThemeOptionsViewModel.$fontDownloadAlert.getter()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fontDownloadAlert, &qword_3BB758);
}

uint64_t ThemeOptionsViewModel.$fontDownloadAlert.setter(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3BB760, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fontDownloadAlert, &qword_3BB758);
}

void (*ThemeOptionsViewModel.$fontDownloadAlert.modify(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3BB760);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fontDownloadAlert;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3BB758);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

uint64_t sub_DC47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t KeyPath;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  id v28;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel_contentLayoutProvider;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel_contentLayoutProvider);
  v4 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType(v3);
  KeyPath = swift_getKeyPath(&unk_2EB760);
  v7 = swift_getKeyPath(&unk_2EB788);
  swift_unknownObjectRetain(v3);
  static Published.subscript.getter(&v23, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v7);
  LOBYTE(v7) = v23;
  v8 = BYTE1(v23);
  v9 = BYTE2(v23);
  v10 = v27;
  v20 = v24;
  v11 = v24;
  v21 = v26;
  v22 = v25;

  LOBYTE(v23) = v7;
  BYTE1(v23) = v8;
  BYTE2(v23) = v9;
  v24 = v20;
  v25 = v22;
  v26 = v21;
  v27 = v10;
  v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 208))(&v23, ObjectType, v4);
  v14 = v13;
  swift_bridgeObjectRelease(v11);
  swift_unknownObjectRelease(v3);
  v15 = swift_getObjectType(v12);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 120))(v15, v14);
  swift_unknownObjectRelease(v12);
  v17 = swift_getKeyPath(&unk_2EB880);
  v18 = swift_getKeyPath(&unk_2EB8A8);
  v23 = v16;
  swift_retain(v1);
  return static Published.subscript.setter(&v23, v1, v17, v18);
}

uint64_t ThemeOptionsViewModel.__allocating_init<A, B>(theme:isInternalInstall:textZoomFactor:sizeCategory:bookEntity:isVerticalText:layoutMode:contentLayoutProvider:previewText:originalTheme:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_DC678(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_DE340);
}

uint64_t ThemeOptionsViewModel.init<A, B>(theme:isInternalInstall:textZoomFactor:sizeCategory:bookEntity:isVerticalText:layoutMode:contentLayoutProvider:previewText:originalTheme:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return sub_DC678(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_DDC40);
}

uint64_t sub_DC678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t (*a15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v16;

  v16 = a15(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a11 - 8) + 8))(a4, a11);
  return v16;
}

uint64_t ThemeOptionsViewModel.bookLanguage.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[15];
  v2 = v0[16];
  sub_472D0(v0 + 12, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 192))(v1, v2);
}

uint64_t ThemeOptionsViewModel.isRTL.getter()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = 0xEB00000000746665;
  v2 = v0[15];
  v3 = v0[16];
  sub_472D0(v0 + 12, v2);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 128))(v2, v3) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v1 = 0xEB00000000746867;
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69526F547466656CLL, 0xEB00000000746867, 0x4C6F547468676972, 0xEB00000000746665, 0);
  }
  swift_bridgeObjectRelease(v1);
  return v4 & 1;
}

uint64_t ThemeOptionsViewModel.paginationMode.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = v0[15];
  v2 = v0[16];
  sub_472D0(v0 + 12, v1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 128))(v1, v2) & 1) != 0)
  {
    swift_bridgeObjectRelease(0xEB00000000746665);
    return 2;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69526F547466656CLL, 0xEB00000000746867, 0x4C6F547468676972, 0xEB00000000746665, 0);
    swift_bridgeObjectRelease(0xEB00000000746867);
    if ((v3 & 1) != 0)
      return 2;
    else
      return 1;
  }
}

uint64_t ThemeOptionsViewModel.accessibleDescription.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  id v22;

  KeyPath = swift_getKeyPath(&unk_2EB760);
  swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(&v17, v0, KeyPath);
  swift_release();
  swift_release();
  LOBYTE(KeyPath) = v17;
  v2 = BYTE1(v17);
  v3 = BYTE2(v17);
  v4 = v21;
  v14 = v19;
  v15 = v18;
  v13 = v20;

  LOBYTE(v17) = KeyPath;
  BYTE1(v17) = v2;
  BYTE2(v17) = v3;
  v18 = v15;
  v19 = v14;
  v20 = v13;
  v21 = v4;
  v5 = swift_getKeyPath(&unk_2EB7A8);
  swift_getKeyPath(&unk_2EB7D0);
  static Published.subscript.getter(&v16, v0, v5);
  swift_release();
  swift_release();
  v6 = v16;
  swift_retain();
  v7 = sub_DD7EC(v6, v0);
  swift_bridgeObjectRelease(v6);
  swift_release();
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 40);
    v8 = *(void **)(v7 + 48);
    swift_bridgeObjectRetain(v8);
    swift_release();
  }
  else
  {
    v9 = 0;
    v8 = (void *)0xE000000000000000;
  }
  v10._countAndFlagsBits = v9;
  v10._object = v8;
  countAndFlagsBits = BookThemeEntity.accessibleDescription(fontDisplayName:)(v10)._countAndFlagsBits;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v18);
  return countAndFlagsBits;
}

uint64_t ThemeOptionsViewModel.selectedFont.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;

  KeyPath = swift_getKeyPath(&unk_2EB7A8);
  swift_getKeyPath(&unk_2EB7D0);
  static Published.subscript.getter(&v5, v0, KeyPath);
  swift_release();
  swift_release();
  v2 = v5;
  swift_retain();
  v3 = sub_DD7EC(v2, v0);
  swift_bridgeObjectRelease(v2);
  swift_release();
  return v3;
}

__n128 sub_DCAB8@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __n128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  uint64_t v15;
  id v16;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EB760);
  v5 = swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(&v11, v3, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  LOBYTE(v3) = v11;
  LOBYTE(KeyPath) = BYTE1(v11);
  LOBYTE(v5) = BYTE2(v11);
  v6 = v15;
  v9 = v13;
  v10 = v12;
  v8 = v14;

  *(_BYTE *)a2 = v3;
  *(_BYTE *)(a2 + 1) = KeyPath;
  *(_BYTE *)(a2 + 2) = v5;
  *(_OWORD *)(a2 + 8) = v10;
  *(_OWORD *)(a2 + 24) = v9;
  result = v8;
  *(__n128 *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 56) = v6;
  return result;
}

void sub_DCB84(uint64_t a1)
{
  char v1;
  char v2;
  uint64_t v3;
  char v4[8];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v1 = *(_BYTE *)(a1 + 1);
  v2 = *(_BYTE *)(a1 + 2);
  v3 = *(_QWORD *)(a1 + 56);
  v4[0] = *(_BYTE *)a1;
  v4[1] = v1;
  v4[2] = v2;
  v5 = *(_OWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a1 + 24);
  v7 = *(_OWORD *)(a1 + 40);
  v8 = v3;
  swift_bridgeObjectRetain(v5);
  ThemeOptionsViewModel.theme.setter(v4);
}

void (*ThemeOptionsViewModel.theme.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  char *v3;
  uint64_t KeyPath;
  char v5;
  char v6;
  uint64_t v7;
  void (*result)(uint64_t, char);
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v3 = (char *)malloc(0x90uLL);
  *a1 = v3;
  *((_QWORD *)v3 + 17) = v1;
  KeyPath = swift_getKeyPath(&unk_2EB760);
  swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(v3, v1, KeyPath);
  swift_release();
  swift_release();
  LOBYTE(KeyPath) = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = *((_QWORD *)v3 + 7);
  v10 = *(_OWORD *)(v3 + 24);
  v11 = *(_OWORD *)(v3 + 8);
  v9 = *(_OWORD *)(v3 + 40);

  v3[72] = KeyPath;
  v3 += 72;
  v3[1] = v5;
  v3[2] = v6;
  *(_OWORD *)(v3 + 8) = v11;
  *(_OWORD *)(v3 + 24) = v10;
  *(_OWORD *)(v3 + 40) = v9;
  result = sub_DCCD8;
  *((_QWORD *)v3 + 7) = v7;
  return result;
}

void sub_DCCD8(uint64_t a1, char a2)
{
  _QWORD *v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = *(_QWORD **)a1;
  v4 = *(_BYTE *)(*(_QWORD *)a1 + 72);
  v5 = *(_BYTE *)(*(_QWORD *)a1 + 73);
  v6 = *(_BYTE *)(*(_QWORD *)a1 + 74);
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 88);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 112);
  v26 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  v11 = *(_QWORD **)(*(_QWORD *)a1 + 136);
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 128);
  v12 = v11[15];
  v22 = v11[16];
  v19 = sub_472D0(v11 + 12, v12);
  sub_DD7B0();
  swift_bridgeObjectRetain(v7);
  v28 = v3[17];
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain(v7);
    LOBYTE(v29) = v4;
    BYTE1(v29) = v5;
    BYTE2(v29) = v6;
    v30 = v7;
    v31 = v8;
    v32 = v10;
    v33 = v9;
    v34 = v25;
    v35 = v26;
    v36 = v27;
    sub_96164((uint64_t)v19, &v29, 1, 1, v12, v22);
    v14 = v13;
    KeyPath = swift_getKeyPath(&unk_2EB760);
    v20 = swift_getKeyPath(&unk_2EB788);
    *(_BYTE *)v3 = v4;
    *((_BYTE *)v3 + 1) = v5;
    *((_BYTE *)v3 + 2) = v6;
    v3[1] = v7;
    v3[2] = v8;
    v3[3] = v10;
    v3[4] = v9;
    v3[5] = v25;
    v3[6] = v26;
    v3[7] = v27;
    v3[8] = v14;
    swift_retain();
    v15 = v14;
    static Published.subscript.setter(v3, v28, KeyPath, v20);
    sub_DC47C();

    swift_bridgeObjectRelease(v3[10]);
  }
  else
  {
    LOBYTE(v29) = v4;
    BYTE1(v29) = v5;
    BYTE2(v29) = v6;
    v30 = v7;
    v31 = v8;
    v32 = v10;
    v33 = v9;
    v34 = v25;
    v35 = v26;
    v36 = v27;
    sub_96164((uint64_t)v19, &v29, 1, 1, v12, v22);
    v17 = v16;
    v24 = swift_getKeyPath(&unk_2EB760);
    v21 = swift_getKeyPath(&unk_2EB788);
    *(_BYTE *)v3 = v4;
    *((_BYTE *)v3 + 1) = v5;
    *((_BYTE *)v3 + 2) = v6;
    v3[1] = v7;
    v3[2] = v8;
    v3[3] = v10;
    v3[4] = v9;
    v3[5] = v25;
    v3[6] = v26;
    v3[7] = v27;
    v3[8] = v17;
    v18 = v17;
    swift_retain();
    static Published.subscript.setter(v3, v28, v24, v21);
    sub_DC47C();

  }
  free(v3);
}

uint64_t ThemeOptionsViewModel.cleanupOptions.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD v4[9];

  KeyPath = swift_getKeyPath(&unk_2EB760);
  v2 = swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(v4, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  swift_bridgeObjectRelease(v4[1]);
  return v4[8];
}

BOOL ThemeOptionsViewModel.isDirty.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  BOOL v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  id v26;

  KeyPath = swift_getKeyPath(&unk_2EB760);
  swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(&v21, v0, KeyPath);
  swift_release();
  swift_release();
  v2 = v21;
  v3 = BYTE1(v21);
  v4 = BYTE2(v21);
  v5 = v25;
  v13 = v22;
  v6 = v22;
  v14 = v24;
  v15 = v23;

  LOBYTE(v21) = v2;
  BYTE1(v21) = v3;
  BYTE2(v21) = v4;
  v22 = v13;
  v23 = v15;
  v24 = v14;
  v25 = v5;
  v7 = *(_BYTE *)(v0 + 33);
  v8 = *(_BYTE *)(v0 + 34);
  v9 = *(_QWORD *)(v0 + 88);
  v16[0] = *(_BYTE *)(v0 + 32);
  v16[1] = v7;
  v16[2] = v8;
  v10 = *(_OWORD *)(v0 + 56);
  v17 = *(_OWORD *)(v0 + 40);
  v18 = v10;
  v19 = *(_OWORD *)(v0 + 72);
  v20 = v9;
  v11 = _s8BookEPUB0A11ThemeEntityV2eeoiySbAC_ACtFZ_0((uint64_t)&v21, (uint64_t)v16);
  swift_bridgeObjectRelease(v6);
  return !v11;
}

BOOL ThemeOptionsViewModel.isResetting.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2EB718);
  v2 = swift_getKeyPath(&unk_2EB740);
  static Published.subscript.getter(&v4, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  return v4 == 3;
}

uint64_t ThemeOptionsViewModel.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  uint64_t KeyPath;
  Swift::String v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  id v27;
  _QWORD v28[2];

  v1 = v0;
  v2 = (void *)0xE000000000000000;
  v22 = 0;
  *(_QWORD *)&v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(51);
  v28[0] = 0;
  v28[1] = 0xE000000000000000;
  v3._object = (void *)0x80000000002CB020;
  v3._countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v3);
  KeyPath = swift_getKeyPath(&unk_2EB718);
  swift_getKeyPath(&unk_2EB740);
  static Published.subscript.getter(&v22, v1, KeyPath);
  swift_release();
  swift_release();
  LOBYTE(v21) = v22;
  _print_unlocked<A, B>(_:_:)(&v21, v28, &type metadata for ThemeOptionsViewModel.EditingState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._countAndFlagsBits = 0x3A656D656874202CLL;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  v6 = swift_getKeyPath(&unk_2EB760);
  swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(&v22, v1, v6);
  swift_release();
  swift_release();
  LOBYTE(v6) = v22;
  v7 = BYTE1(v22);
  v8 = BYTE2(v22);
  v9 = v26;
  v19 = v24;
  v20 = v23;
  v18 = v25;

  LOBYTE(v22) = v6;
  BYTE1(v22) = v7;
  BYTE2(v22) = v8;
  v23 = v20;
  v24 = v19;
  v25 = v18;
  v26 = v9;
  v10 = swift_getKeyPath(&unk_2EB7A8);
  swift_getKeyPath(&unk_2EB7D0);
  static Published.subscript.getter(&v21, v1, v10);
  swift_release();
  swift_release();
  v11 = v21;
  swift_retain();
  v12 = sub_DD7EC(v11, v1);
  swift_bridgeObjectRelease(v11);
  swift_release();
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 40);
    v2 = *(void **)(v12 + 48);
    swift_bridgeObjectRetain(v2);
    swift_release();
  }
  else
  {
    v13 = 0;
  }
  v14._countAndFlagsBits = v13;
  v14._object = v2;
  v15 = BookThemeEntity.accessibleDescription(fontDisplayName:)(v14);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v23);
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v15._object);
  v16._countAndFlagsBits = 62;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return v28[0];
}

uint64_t ThemeOptionsViewModel.previewHTMLBodyContent.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[3];
  if (!v1)
    goto LABEL_4;
  v2 = v0[2];
  swift_bridgeObjectRetain(v0[3]);
  if (String.count.getter(v2) <= 124)
  {
    swift_bridgeObjectRelease(v1);
LABEL_4:
    v3 = v0[15];
    v4 = v0[16];
    sub_472D0(v0 + 12, v3);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 192))(v3, v4);
    v7 = v6;
    v2 = sub_FF5F0(0xD00000000000001DLL, 0x80000000002CB050, v5, v6);
    swift_bridgeObjectRelease(v7);
  }
  return v2;
}

_QWORD *ThemeOptionsViewModel.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  sub_34488(v0 + 12);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__themeAndCleanupOptions;
  v2 = sub_319AC(&qword_3BD190);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__textZoomFactor;
  v4 = sub_319AC(&qword_3BB700);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__sizeCategory;
  v6 = sub_319AC(&qword_3BB718);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__columnCount;
  v8 = sub_319AC(&qword_3BB730);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__editingState;
  v10 = sub_319AC(&qword_3BB740);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fonts;
  v12 = sub_319AC(&qword_3BB748);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fontDownloadAlert;
  v14 = sub_319AC(&qword_3BB758);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_unknownObjectRelease(*(_QWORD *)((char *)v0
                                       + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel_contentLayoutProvider));
  return v0;
}

uint64_t ThemeOptionsViewModel.__deallocating_deinit()
{
  uint64_t v0;

  ThemeOptionsViewModel.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t ThemeOptionsViewModel.AlertViewModel.dismissButton.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

__n128 sub_DD628@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2EB760);
  v5 = swift_getKeyPath(&unk_2EB788);
  static Published.subscript.getter(&v13, v3, KeyPath);
  swift_release(KeyPath);
  swift_release(v5);
  v6 = BYTE1(v13);
  v7 = BYTE2(v13);
  v8 = v17;
  v9 = v18;
  result = v14;
  v11 = v15;
  v12 = v16;
  *(_BYTE *)a2 = v13;
  *(_BYTE *)(a2 + 1) = v6;
  *(_BYTE *)(a2 + 2) = v7;
  *(__n128 *)(a2 + 8) = result;
  *(_OWORD *)(a2 + 24) = v11;
  *(_OWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 64) = v9;
  return result;
}

uint64_t sub_DD6D4(char *a1, uint64_t *a2)
{
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  id v12;
  __int128 v14;
  __int128 v15;
  _BYTE v16[8];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *((_QWORD *)a1 + 1);
  v14 = *((_OWORD *)a1 + 2);
  v15 = *((_OWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 6);
  v7 = *((_QWORD *)a1 + 7);
  v8 = (void *)*((_QWORD *)a1 + 8);
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_2EB760);
  v11 = swift_getKeyPath(&unk_2EB788);
  v16[0] = v2;
  v16[1] = v3;
  v16[2] = v4;
  v17 = v5;
  v18 = v15;
  v19 = v14;
  v20 = v6;
  v21 = v7;
  v22 = v8;
  swift_bridgeObjectRetain(v5);
  v12 = v8;
  swift_retain(v9);
  return static Published.subscript.setter(v16, v9, KeyPath, v11);
}

unint64_t sub_DD7B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9698;
  if (!qword_3B9698)
  {
    v1 = objc_opt_self(BEContentCleanupJSOptions);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B9698);
  }
  return result;
}

uint64_t sub_DD7EC(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[9];
  uint64_t v29;

  v29 = a2;
  v2 = a1;
  if (a1 >> 62)
    goto LABEL_29;
  v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    v25 = v3;
    v26 = v2;
    v27 = v2 & 0xC000000000000001;
    for (i = 4; ; ++i)
    {
      v5 = i - 4;
      if (!v27)
        break;
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v2);
      v7 = i - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_28;
LABEL_11:
      v8 = objc_msgSend(*(id *)(v6 + 16), "familyName");
      if (v8)
      {
        v9 = v8;
        v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        v12 = v11;

      }
      else
      {
        v10 = 0;
        v12 = 0;
      }
      KeyPath = swift_getKeyPath(&unk_2EB760);
      swift_getKeyPath(&unk_2EB788);
      static Published.subscript.getter(v28, v29, KeyPath);
      swift_release();
      swift_release();
      v14 = LOBYTE(v28[0]);
      v15 = BYTE2(v28[0]);
      v16 = v28[1];

      if (!v16 || !*(_QWORD *)(v16 + 16) || (v17 = sub_3B828(v15), (v18 & 1) == 0))
        __asm { BR              X8 }
      v19 = (uint64_t *)(*(_QWORD *)(v16 + 56) + 16 * v17);
      v21 = *v19;
      v20 = v19[1];
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v16);
      v2 = v26;
      if (v12)
      {
        if (v10 == v21 && v12 == v20)
        {
          swift_bridgeObjectRelease(v26);
          swift_bridgeObjectRelease(v12);
LABEL_27:
          swift_bridgeObjectRelease(v20);
          return v6;
        }
        v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v21, v20, 0);
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v20);
        if ((v22 & 1) != 0)
        {
          v20 = v26;
          goto LABEL_27;
        }
        swift_release();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease(v20);
      }
      if (v7 == v25)
      {
        swift_bridgeObjectRelease(v26);
        return 0;
      }
    }
    v6 = *(_QWORD *)(v2 + 8 * i);
    swift_retain();
    v7 = i - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_11;
LABEL_28:
    __break(1u);
LABEL_29:
    if (v2 < 0)
      v23 = v2;
    else
      v23 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v23);
  }
  swift_bridgeObjectRelease(v2);
  return 0;
}

void sub_DDBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a2 + 1);
  v5 = *(_BYTE *)(a2 + 2);
  v6 = *(_QWORD *)(a2 + 56);
  LOBYTE(v7) = *(_BYTE *)a2;
  BYTE1(v7) = v4;
  BYTE2(v7) = v5;
  v8 = *(_OWORD *)(a2 + 8);
  v9 = *(_OWORD *)(a2 + 24);
  v10 = *(_OWORD *)(a2 + 40);
  v11 = v6;
  sub_96164(a1, &v7, 1, 1, a3, a4);
}

uint64_t sub_DDC40(unsigned __int8 *a1, int a2, void *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  unint64_t v67;
  unint64_t v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (**v79)(_QWORD, _QWORD, _QWORD);
  void *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  __int128 v97;
  id v98;
  double v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  char v103[8];
  _QWORD *v104;
  __int128 v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  id v110;
  void *v111;

  v16 = v15;
  v86 = a8;
  v95 = a7;
  v85 = a6;
  v83 = a5;
  v94 = a4;
  v80 = a3;
  v87 = a2;
  v84 = a15;
  v93 = a14;
  v81 = a13;
  v92 = a12;
  v82 = a10;
  v89 = sub_319AC(&qword_3BB748);
  v79 = *(void (***)(_QWORD, _QWORD, _QWORD))(v89 - 8);
  __chkstk_darwin(v89);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_319AC(&qword_3BB740);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  v26 = a1[1];
  v27 = a1[2];
  v28 = *((_QWORD *)a1 + 1);
  v88 = *((_QWORD *)a1 + 2);
  v77 = *((_QWORD *)a1 + 3);
  v76 = *((_QWORD *)a1 + 4);
  v91 = *((_QWORD *)a1 + 5);
  v90 = *((_QWORD *)a1 + 6);
  v98 = (id)*((_QWORD *)a1 + 7);
  v69 = *a11;
  v78 = a11[1];
  v75 = a11[2];
  v74 = a11[3];
  v73 = a11[4];
  v72 = a11[5];
  v71 = a11[6];
  v70 = (void *)a11[7];
  v29 = v27;
  v30 = v16 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__editingState;
  LOBYTE(v104) = 0;
  Published.init(initialValue:)(&v104, &type metadata for ThemeOptionsViewModel.EditingState);
  v31 = *(void (**)(_QWORD, _QWORD, _QWORD))(v22 + 32);
  LODWORD(v96) = v25;
  LODWORD(v97) = v26;
  v31(v30, v24, v21);
  v32 = v16 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fonts;
  v104 = _swiftEmptyArrayStorage;
  v33 = sub_319AC(&qword_3BB7E0);
  Published.init(initialValue:)(&v104, v33);
  ((void (**)(uint64_t, char *, uint64_t))v79)[4](v32, v20, v89);
  sub_DD7B0();
  swift_bridgeObjectRetain(v28);
  LOBYTE(v104) = v25;
  BYTE1(v104) = v26;
  BYTE2(v104) = v29;
  v34 = v29;
  v35 = v88;
  *(_QWORD *)&v105 = v28;
  *((_QWORD *)&v105 + 1) = v88;
  v36 = v77;
  v37 = v76;
  v106 = v77;
  v107 = v76;
  v38 = v91;
  v39 = v90;
  v108 = v91;
  v109 = v90;
  v110 = v98;
  sub_96164(v94, &v104, 1, 1, v92, v93);
  v41 = v40;
  swift_beginAccess(v16 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__themeAndCleanupOptions, &v99, 33, 0);
  LOBYTE(v104) = v96;
  BYTE1(v104) = v97;
  v89 = v34;
  BYTE2(v104) = v34;
  *(_QWORD *)&v105 = v28;
  *((_QWORD *)&v105 + 1) = v35;
  v42 = v36;
  v106 = v36;
  v107 = v37;
  v43 = v37;
  v108 = v38;
  v109 = v39;
  v110 = v98;
  v111 = v41;
  swift_bridgeObjectRetain(v28);
  v44 = v41;
  v45 = v78;
  v79 = (void (**)(_QWORD, _QWORD, _QWORD))v44;
  v46 = sub_319AC(&qword_3BB7B0);
  Published.init(initialValue:)(&v104, v46);
  swift_endAccess(&v99);
  if (v45 == 1)
  {
    v47 = v88;
    v48 = v91;
    v49 = v90;
    v50 = v98;
  }
  else
  {
    swift_bridgeObjectRelease(v28);
    v89 = v69 >> 16;
    LODWORD(v97) = (v69 >> 8) & 1;
    LODWORD(v96) = v69;
    v28 = v45;
    v47 = v75;
    v42 = v74;
    v43 = v73;
    v48 = v72;
    v49 = v71;
    v50 = v70;
  }
  *(_BYTE *)(v16 + 32) = v96;
  *(_BYTE *)(v16 + 33) = v97;
  *(_BYTE *)(v16 + 34) = v89;
  *(_QWORD *)(v16 + 40) = v28;
  *(_QWORD *)(v16 + 48) = v47;
  *(_QWORD *)(v16 + 56) = v42;
  *(_QWORD *)(v16 + 64) = v43;
  *(_QWORD *)(v16 + 72) = v48;
  *(_QWORD *)(v16 + 80) = v49;
  *(_QWORD *)(v16 + 88) = v50;
  swift_beginAccess(v16 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__textZoomFactor, &v104, 33, 0);
  v99 = a9;
  Published.init(initialValue:)(&v99, &type metadata for CGFloat);
  swift_endAccess(&v104);
  swift_beginAccess(v16 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__sizeCategory, &v104, 33, 0);
  v51 = v80;
  v99 = *(double *)&v80;
  type metadata accessor for UIContentSizeCategory(0);
  v53 = v52;
  v98 = v51;
  Published.init(initialValue:)(&v99, v53);
  swift_endAccess(&v104);
  v54 = v84;
  v55 = v95;
  v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 120))(v81, v84);
  swift_beginAccess(v16 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__columnCount, &v104, 33, 0);
  v99 = *(double *)&v56;
  Published.init(initialValue:)(&v99, &type metadata for Int);
  swift_endAccess(&v104);
  v57 = v92;
  v58 = v93;
  *(_QWORD *)(v16 + 120) = v92;
  *(_QWORD *)(v16 + 128) = v58;
  v59 = sub_9B1C0((_QWORD *)(v16 + 96));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v59, v94, v57);
  *(_BYTE *)(v16 + 136) = v83 & 1;
  *(_QWORD *)(v16 + 144) = v85;
  v60 = (_QWORD *)(v16 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel_contentLayoutProvider);
  *v60 = v55;
  v60[1] = v54;
  v61 = v82;
  *(_QWORD *)(v16 + 16) = v86;
  *(_QWORD *)(v16 + 24) = v61;
  swift_unknownObjectRetain(v55);
  sub_70404(0, 0, 0, 0, v87 & 1, 0, (uint64_t)&v104);
  LOBYTE(v54) = (_BYTE)v104;
  LOBYTE(v57) = BYTE1(v104);
  v62 = BYTE2(v104);
  v63 = BYTE3(v104);
  v64 = BYTE4(v104);
  v65 = BYTE5(v104);
  v66 = BYTE6(v104);
  v97 = v105;
  v67 = v106;
  v96 = v107;
  swift_beginAccess(v16 + OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fontDownloadAlert, v103, 33, 0);
  LOBYTE(v99) = v54;
  BYTE1(v99) = v57;
  BYTE2(v99) = v62;
  BYTE3(v99) = v63;
  BYTE4(v99) = v64;
  BYTE5(v99) = v65;
  BYTE6(v99) = v66;
  v100 = v97;
  v101 = v67;
  v102 = v96;
  Published.init(initialValue:)(&v99, &type metadata for FontDownloadAlert);
  swift_endAccess(v103);

  swift_unknownObjectRelease(v95);
  return v16;
}

uint64_t sub_DE340(unsigned __int8 *a1, int a2, void *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, unint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  swift_allocObject(v15, *(unsigned int *)(v15 + 48));
  return sub_DDC40(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

unint64_t sub_DE410()
{
  unint64_t result;

  result = qword_3BB768;
  if (!qword_3BB768)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemeOptionsViewModel.EditingState, &type metadata for ThemeOptionsViewModel.EditingState);
    atomic_store(result, (unint64_t *)&qword_3BB768);
  }
  return result;
}

uint64_t sub_DE454(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__textZoomFactor, &qword_3BB700);
}

uint64_t sub_DE478(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3BB708, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__textZoomFactor, &qword_3BB700);
}

uint64_t sub_DE4A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__sizeCategory, &qword_3BB718);
}

uint64_t sub_DE4C8(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3BB720, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__sizeCategory, &qword_3BB718);
}

uint64_t sub_DE4F4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__columnCount, &qword_3BB730);
}

uint64_t sub_DE518(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3BB738, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__columnCount, &qword_3BB730);
}

uint64_t sub_DE544(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__editingState, &qword_3BB740);
}

uint64_t sub_DE568(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3BB8C8, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__editingState, &qword_3BB740);
}

uint64_t sub_DE594(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fonts, &qword_3BB748);
}

uint64_t sub_DE5B8(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3BB750, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fonts, &qword_3BB748);
}

uint64_t sub_DE5E4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fontDownloadAlert, &qword_3BB758);
}

uint64_t sub_DE608(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3BB760, &OBJC_IVAR____TtC8BookEPUB21ThemeOptionsViewModel__fontDownloadAlert, &qword_3BB758);
}

uint64_t sub_DE63C()
{
  return type metadata accessor for ThemeOptionsViewModel(0);
}

uint64_t type metadata accessor for ThemeOptionsViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_3BB798;
  if (!qword_3BB798)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ThemeOptionsViewModel);
  return result;
}

void sub_DE680(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[13];

  v16[0] = &unk_2EB9D8;
  v16[1] = &unk_2EB9F0;
  v16[2] = &unk_2EBA08;
  v16[3] = &unk_2EBA20;
  v16[4] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_3E8E4(319, &qword_3BB7A8, &qword_3BB7B0);
  if (v3 <= 0x3F)
  {
    v16[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_3E56C(319, &qword_3BB7B8, (uint64_t)&type metadata for CGFloat);
    if (v5 <= 0x3F)
    {
      v16[6] = *(_QWORD *)(v4 - 8) + 64;
      sub_DE864(319);
      if (v7 <= 0x3F)
      {
        v16[7] = *(_QWORD *)(v6 - 8) + 64;
        sub_3E56C(319, &qword_3BB7C8, (uint64_t)&type metadata for Int);
        if (v9 <= 0x3F)
        {
          v16[8] = *(_QWORD *)(v8 - 8) + 64;
          sub_3E56C(319, &qword_3BB7D0, (uint64_t)&type metadata for ThemeOptionsViewModel.EditingState);
          if (v11 <= 0x3F)
          {
            v16[9] = *(_QWORD *)(v10 - 8) + 64;
            sub_3E8E4(319, &qword_3BB7D8, &qword_3BB7E0);
            if (v13 <= 0x3F)
            {
              v16[10] = *(_QWORD *)(v12 - 8) + 64;
              sub_3E56C(319, (unint64_t *)&unk_3BB7E8, (uint64_t)&type metadata for FontDownloadAlert);
              if (v15 <= 0x3F)
              {
                v16[11] = *(_QWORD *)(v14 - 8) + 64;
                v16[12] = &unk_2EBA38;
                swift_updateClassMetadata2(a1, 256, 13, v16, a1 + 80);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for ThemeOptionsViewModel(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ThemeOptionsViewModel);
}

uint64_t dispatch thunk of ThemeOptionsViewModel.__allocating_init<A, B>(theme:isInternalInstall:textZoomFactor:sizeCategory:bookEntity:isVerticalText:layoutMode:contentLayoutProvider:previewText:originalTheme:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

void sub_DE864(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3BB7C0)
  {
    type metadata accessor for UIContentSizeCategory(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3BB7C0);
  }
}

uint64_t storeEnumTagSinglePayload for ThemeOptionsViewModel.EditingState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_DE904 + 4 * byte_2EB6C5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_DE938 + 4 * byte_2EB6C0[v4]))();
}

uint64_t sub_DE938(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_DE940(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xDE948);
  return result;
}

uint64_t sub_DE954(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xDE95CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_DE960(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_DE968(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThemeOptionsViewModel.EditingState()
{
  return &type metadata for ThemeOptionsViewModel.EditingState;
}

uint64_t destroy for SearchPassage(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for SearchPassage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for SearchPassage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for SearchPassage(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for SearchPassage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPassage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchPassage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ThemeOptionsViewModel.AlertViewModel()
{
  return &type metadata for ThemeOptionsViewModel.AlertViewModel;
}

_QWORD *sub_DEBA0(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_F529C(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v15 = v1 & 0xC000000000000001;
    v16 = v2;
    v17 = v1;
    while (v2 != v4)
    {
      if (v15)
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      }
      else
      {
        v5 = *(_QWORD *)(v1 + 8 * v4 + 32);
        swift_retain();
      }
      v6 = *(_BYTE *)(v5 + 48);
      v22 = *(_BYTE *)(v5 + 49);
      v7 = *(_BYTE *)(v5 + 50);
      v8 = *(_QWORD *)(v5 + 56);
      v9 = *(_QWORD *)(v5 + 64);
      v10 = *(_QWORD *)(v5 + 72);
      v20 = *(_QWORD *)(v5 + 88);
      v21 = *(_QWORD *)(v5 + 80);
      v18 = *(_QWORD *)(v5 + 104);
      v19 = *(_QWORD *)(v5 + 96);
      swift_bridgeObjectRetain(v8);
      swift_release();
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_F529C(v11 > 1, v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[8 * v12];
      *((_BYTE *)v13 + 32) = v6;
      ++v4;
      *((_BYTE *)v13 + 33) = v22;
      *((_BYTE *)v13 + 34) = v7;
      v13[5] = v8;
      v13[6] = v9;
      v13[7] = v10;
      v13[8] = v21;
      v13[9] = v20;
      v13[10] = v19;
      v1 = v17;
      v13[11] = v18;
      v2 = v16;
      if (v16 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v1 < 0)
      v14 = v1;
    else
      v14 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v1);
  }
  __break(1u);
  return result;
}

uint64_t sub_DED64(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v22 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for NWPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  sub_5B5E4();
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v14 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v15 = swift_allocObject(&unk_380B78, v14 + v11);
  *(_QWORD *)(v15 + 16) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v15 + v14, (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_E452C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_380B90;
  v16 = _Block_copy(aBlock);
  swift_retain();
  v17 = swift_release();
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_319AC(&qword_3B96F0);
  v20 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v3, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v8, v24);
}

double sub_DEFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _BYTE v12[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = *(_QWORD *)(Strong + 32);
    swift_retain();
    swift_release();
    KeyPath = swift_getKeyPath(&unk_2EBBD8);
    v11[0] = v6;
    v8 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v11, KeyPath, v8);
    swift_release();
    v11[0] = v6;
    v9 = swift_getKeyPath(&unk_2EBBD8);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v11, v9, v8);
    swift_release();
    swift_beginAccess(v6 + 80, v11, 33, 0);
    FontDownloadAlert.updateFrom(path:)(a2);
    swift_endAccess(v11);
    v11[0] = v6;
    v10 = swift_getKeyPath(&unk_2EBBD8);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v11, v10, v8);
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_DF124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = *(_QWORD *)(Strong + 32);
    KeyPath = swift_getKeyPath(&unk_2EBB58);
    v15[0] = v5;
    v7 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v15, KeyPath, v7);
    swift_release();
    swift_beginAccess(v5 + 24, v15, 0, 0);
    v8 = *(_QWORD *)(v5 + 24);
    swift_bridgeObjectRetain(v8);
    v10 = sub_DEBA0(v9);
    swift_bridgeObjectRelease(v8);
    swift_retain();
    v11 = sub_E3AF4((uint64_t)v10);
    swift_release();
    v12 = swift_getKeyPath(&unk_2EBB58);
    __chkstk_darwin(v12);
    v13[2] = v5;
    v13[3] = v11;
    v14 = v5;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, v12, sub_9E414, v13, (char *)&type metadata for () + 8, v7);
    swift_release();
    swift_bridgeObjectRelease(v11);
    sub_E0E1C();
    swift_release();
    *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
  }
  return result;
}

double sub_DF2CC(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  double result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  if (swift_weakLoadStrong(v3))
  {
    sub_E1210(v2);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_DF32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BYTE *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _QWORD v14[4];
  _BYTE v15[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    Notification.object.getter(v14);
    if (v14[3])
    {
      v6 = sub_319AC((uint64_t *)&unk_3B96A0);
      if ((swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
      {
        v7 = v13;
        sub_E1B2C(v13);
        v8 = *(_BYTE **)(v5 + 32);
        KeyPath = swift_getKeyPath(&unk_2EBBD8);
        v14[0] = v8;
        v10 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
        swift_retain();
        ObservationRegistrar.access<A, B>(_:keyPath:)(v14, KeyPath, v10);
        swift_release();
        v14[0] = v8;
        v11 = swift_getKeyPath(&unk_2EBBD8);
        ObservationRegistrar.willSet<A, B>(_:keyPath:)(v14, v11, v10);
        swift_release();
        swift_beginAccess(v8 + 80, v14, 1, 0);
        v8[83] = 1;
        v13 = v8;
        v12 = swift_getKeyPath(&unk_2EBBD8);
        ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v13, v12, v10);
        swift_release();
        swift_unknownObjectRelease(v7);
        swift_release();
      }
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
    else
    {
      swift_release();
      sub_4E27C((uint64_t)v14);
    }
  }
  return result;
}

double sub_DF4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  if (swift_weakLoadStrong(v2))
  {
    Notification.object.getter(v7);
    if (v7[3])
    {
      v4 = sub_319AC((uint64_t *)&unk_3B96A0);
      if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
      {
        v5 = v6;
        sub_E1B2C(v6);
        swift_release();
        *(_QWORD *)&result = swift_unknownObjectRelease(v5).n128_u64[0];
      }
      else
      {
        *(_QWORD *)&result = swift_release().n128_u64[0];
      }
    }
    else
    {
      swift_release();
      sub_4E27C((uint64_t)v7);
    }
  }
  return result;
}

uint64_t sub_DF5BC()
{
  uint64_t v0;
  void *v1;

  NWPathMonitor.cancel()();
  v1 = *(void **)(v0 + 88);
  if (v1)
    objc_msgSend(v1, "invalidate");
  sub_47418(v0 + 16);
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));

  swift_release();
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_release();
  return v0;
}

uint64_t sub_DF650()
{
  uint64_t v0;

  sub_DF5BC();
  return swift_deallocClassInstance(v0, 128, 7);
}

uint64_t type metadata accessor for ReadingSettingsPresenter()
{
  return objc_opt_self(_TtC8BookEPUB24ReadingSettingsPresenter);
}

void sub_DF690(__n128 a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = (void *)NWPathMonitor.queue.getter(a1);

  if (v1)
  {
    if (qword_3B56D0 != -1)
      swift_once(&qword_3B56D0, sub_6CEE4);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_555F0(v2, (uint64_t)qword_3CEF18);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_0, v4, v5, "Canceling network monitoring didDisappear", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    NWPathMonitor.cancel()();
  }
}

void sub_DF77C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  char v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t ObjectType;
  _BYTE v30[24];
  _BYTE v31[24];
  uint64_t v32;
  _QWORD v33[3];

  v3 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v3);
  v5 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((BookThemeViewModel.enabled.getter() & 1) != 0)
  {
    v6 = *(_BYTE *)(a1 + 48);
    v7 = *(void **)(v1[5] + OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_dataManager);
    v8 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v5, 1, 1, v8);
    type metadata accessor for MainActor(0);
    v9 = v7;
    v10 = static MainActor.shared.getter(v9);
    v11 = swift_allocObject(&unk_380B50, 41);
    *(_QWORD *)(v11 + 16) = v10;
    *(_QWORD *)(v11 + 24) = &protocol witness table for MainActor;
    *(_QWORD *)(v11 + 32) = v9;
    *(_BYTE *)(v11 + 40) = v6;
    sub_67B40((uint64_t)v5, (uint64_t)&unk_3BBB48, v11);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      KeyPath = swift_getKeyPath(&unk_2EBB80);
      v33[0] = v12;
      v14 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v33, KeyPath, v14);
      swift_release();
      swift_beginAccess(v12 + 24, v31, 0, 0);
      if (*(_BYTE *)(v12 + 32) == 1 && *(_QWORD *)(v12 + 24) >= 2uLL)
      {
        v20 = (_BYTE *)v1[4];
        v21 = swift_getKeyPath(&unk_2EBBD8);
        v33[0] = v20;
        v22 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v33, v21, v22);
        swift_release();
        swift_beginAccess(v20 + 80, v30, 0, 0);
        if ((v20[80] & 1) != 0 || v20[81] == 1 && v20[82])
        {
          v23 = v1[5];
          v24 = *(unsigned __int8 *)(a1 + 48);
          v25 = swift_getKeyPath(&unk_2EBBD8);
          v33[0] = v20;
          ObservationRegistrar.access<A, B>(_:keyPath:)(v33, v25, v22);
          swift_release();
          v26 = v20[81];
          v27 = (_QWORD *)(*(_QWORD *)(v23 + OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_dataManager)
                         + OBJC_IVAR____TtC8BookEPUB26ReadingSettingsDataManager_settingsManager);
          v28 = v27[1];
          ObjectType = swift_getObjectType(*v27);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 40))(v24, v26, ObjectType, v28);
          return;
        }
      }
    }
    v15 = v1[4];
    v16 = swift_getKeyPath(&unk_2EBBD8);
    v33[0] = v15;
    v17 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v33, v16, v17);
    swift_release();
    v33[0] = v15;
    v18 = swift_getKeyPath(&unk_2EBBD8);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v33, v18, v17);
    swift_release();
    swift_beginAccess(v15 + 80, v33, 1, 0);
    *(_BYTE *)(v15 + 83) = 1;
    v32 = v15;
    v19 = swift_getKeyPath(&unk_2EBBD8);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v32, v19, v17);
    swift_release();
    sub_E169C();
    v1[15] = a1;
    swift_retain();
  }
  swift_release();
}

uint64_t sub_DFB10(char a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;

  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_dataManager)
                + OBJC_IVAR____TtC8BookEPUB26ReadingSettingsDataManager_settingsManager);
  v4 = v3[1];
  ObjectType = swift_getObjectType(*v3);
  if ((a1 & 1) != 0)
    v6 = 3;
  else
    v6 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v6, ObjectType, v4);
}

uint64_t sub_DFB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[19] = a4;
  v5[20] = a5;
  v6 = sub_319AC(&qword_3B8450);
  v5[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v5[22] = v7;
  v5[23] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  v5[24] = v8;
  v5[25] = v9;
  return swift_task_switch(sub_DFC0C, v8, v9);
}

uint64_t sub_DFC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 208) = *(_QWORD *)(*(_QWORD *)(v0 + 152) + 40);
  *(_BYTE *)(v0 + 288) = *(_BYTE *)(v2 + 48);
  *(_BYTE *)(v0 + 289) = *(_BYTE *)(v2 + 49);
  *(_BYTE *)(v0 + 290) = *(_BYTE *)(v2 + 50);
  v3 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v0 + 216) = v3;
  swift_bridgeObjectRetain(v3);
  *(_QWORD *)(v0 + 224) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  *(_QWORD *)(v0 + 232) = v5;
  *(_QWORD *)(v0 + 240) = v6;
  return swift_task_switch(sub_DFC9C, v5, v6);
}

uint64_t sub_DFC9C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[22];
  v1[31] = *(_QWORD *)(v1[26] + OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_dataManager);
  v1[32] = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[33] = v3;
  v1[34] = v4;
  return swift_task_switch(sub_DFD10, v3, v4);
}

uint64_t sub_DFD10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 248) + OBJC_IVAR____TtC8BookEPUB26ReadingSettingsDataManager_themeDatabaseManager);
  v2 = v1[3];
  v3 = v1[4];
  sub_472D0(v1, v2);
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  v4 = *(int **)(v3 + 16);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 280) = v5;
  *v5 = v0;
  v5[1] = sub_DFDB4;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v7)(v0 + 16, *(unsigned __int8 *)(v0 + 288), v2, v3);
}

uint64_t sub_DFDB4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 280));
  return swift_task_switch(sub_DFE00, *(_QWORD *)(v1 + 264), *(_QWORD *)(v1 + 272));
}

uint64_t sub_DFE00()
{
  uint64_t v0;

  swift_release();
  return swift_task_switch(sub_DFE38, *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
}

uint64_t sub_DFE38()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[27];
  swift_release();
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_DFE78, v0[24], v0[25]);
}

uint64_t sub_DFE78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26[8];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release();
  v2 = *(_QWORD *)(v1 + 32);
  KeyPath = swift_getKeyPath(&unk_2EBB58);
  *(_QWORD *)(v0 + 136) = v2;
  v4 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 136, KeyPath, v4);
  swift_release();
  swift_beginAccess(v2 + 24, v0 + 96, 0, 0);
  v5 = *(_QWORD *)(v2 + 24);
  swift_retain();
  swift_bridgeObjectRetain(v5);
  v7 = sub_E3E9C(v6);
  v9 = v8;
  swift_release();
  swift_bridgeObjectRelease(v5);
  if ((v9 & 1) != 0)
  {
    v19 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 152);
    v21 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v19, 1, 1, v21);
    v22 = swift_retain();
    v23 = static MainActor.shared.getter(v22);
    v24 = (_QWORD *)swift_allocObject(&unk_380948, 40);
    v24[2] = v23;
    v24[3] = &protocol witness table for MainActor;
    v24[4] = v20;
    sub_67B40(v19, (uint64_t)&unk_3BBB10, (uint64_t)v24);
    goto LABEL_10;
  }
  v10 = *(_BYTE *)(v0 + 290);
  v11 = *(_BYTE *)(v0 + 289);
  v26[0] = *(_BYTE *)(v0 + 288);
  v26[1] = v11;
  v26[2] = v10;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  sub_E2180(v26);
  v25 = v12;
  v13 = swift_getKeyPath(&unk_2EBB58);
  *(_QWORD *)(v0 + 120) = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 120, v13, v4);
  swift_release();
  *(_QWORD *)(v0 + 128) = v2;
  v14 = swift_getKeyPath(&unk_2EBB58);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v0 + 128, v14, v4);
  swift_release();
  swift_beginAccess(v2 + 24, v0 + 72, 33, 0);
  v15 = *(_QWORD *)(v2 + 24);
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(v15);
  *(_QWORD *)(v2 + 24) = v15;
  if (!(_DWORD)result || v15 < 0 || (v15 & 0x4000000000000000) != 0)
  {
    result = sub_E3A8C(v15);
    v15 = result;
    *(_QWORD *)(v2 + 24) = result;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v7 < *(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8)))
  {
    *(_QWORD *)((char *)&stru_20.cmd + 8 * v7 + (v15 & 0xFFFFFFFFFFFFFF8)) = v25;
    swift_release();
    specialized Array._endMutation()(v17);
    swift_endAccess(v0 + 72);
    *(_QWORD *)(v0 + 144) = v2;
    v18 = swift_getKeyPath(&unk_2EBB58);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v0 + 144, v18, v4);
LABEL_10:
    swift_release();
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_E0164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t result;
  void *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v1 - 8);
  v50 = v1;
  __chkstk_darwin(v1);
  v48 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - v12;
  v14 = *(_QWORD *)(v0 + 64);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 56));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(ObjectType, v14);
  if ((result & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 56))(ObjectType, v14);
    v17 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(ObjectType);
    v45 = v10;
    v18 = v8;
    v19 = v13;
    v20 = v6;
    v21 = v7;
    v22 = v17;
    sub_E1210(v17);

    v23 = v21;
    v24 = v20;
    v25 = v19;
    v26 = v18;
    v27 = v45;
    sub_E169C();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 80))(ObjectType, v14);
    if (v28)
    {
      v29 = result;
      v30 = v28;
      sub_5B5E4();
      v44 = static OS_dispatch_queue.main.getter(v31);
      static DispatchTime.now()();
      + infix(_:_:)(v27, 0.5);
      v32 = *(void (**)(char *, uint64_t))(v26 + 8);
      v32(v27, v23);
      v33 = swift_allocObject(&unk_380B00, 32);
      *(_QWORD *)(v33 + 16) = v29;
      *(_QWORD *)(v33 + 24) = v30;
      aBlock[4] = sub_E4974;
      aBlock[5] = v33;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_525B8;
      aBlock[3] = &unk_380B18;
      v34 = v23;
      v35 = _Block_copy(aBlock);
      v36 = swift_release();
      static DispatchQoS.unspecified.getter(v36);
      aBlock[0] = _swiftEmptyArrayStorage;
      v37 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v38 = sub_319AC(&qword_3B96F0);
      v39 = sub_A312C();
      v40 = v48;
      v41 = v50;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v50, v37);
      v42 = (void *)v44;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v25, v24, v40, v35);
      _Block_release(v35);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v41);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v47);
      return ((uint64_t (*)(char *, uint64_t))v32)(v25, v34);
    }
  }
  return result;
}

uint64_t sub_E047C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t result;
  void *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v1 - 8);
  v50 = v1;
  __chkstk_darwin(v1);
  v48 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - v12;
  v14 = *(_QWORD *)(v0 + 64);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 56));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(ObjectType, v14);
  if ((result & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 40))(ObjectType, v14);
    v17 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(ObjectType);
    v45 = v10;
    v18 = v8;
    v19 = v13;
    v20 = v6;
    v21 = v7;
    v22 = v17;
    sub_E1210(v17);

    v23 = v21;
    v24 = v20;
    v25 = v19;
    v26 = v18;
    v27 = v45;
    sub_E169C();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 80))(ObjectType, v14);
    if (v28)
    {
      v29 = result;
      v30 = v28;
      sub_5B5E4();
      v44 = static OS_dispatch_queue.main.getter(v31);
      static DispatchTime.now()();
      + infix(_:_:)(v27, 0.5);
      v32 = *(void (**)(char *, uint64_t))(v26 + 8);
      v32(v27, v23);
      v33 = swift_allocObject(&unk_380AB0, 32);
      *(_QWORD *)(v33 + 16) = v29;
      *(_QWORD *)(v33 + 24) = v30;
      aBlock[4] = sub_E4974;
      aBlock[5] = v33;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_525B8;
      aBlock[3] = &unk_380AC8;
      v34 = v23;
      v35 = _Block_copy(aBlock);
      v36 = swift_release();
      static DispatchQoS.unspecified.getter(v36);
      aBlock[0] = _swiftEmptyArrayStorage;
      v37 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v38 = sub_319AC(&qword_3B96F0);
      v39 = sub_A312C();
      v40 = v48;
      v41 = v50;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v50, v37);
      v42 = (void *)v44;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v25, v24, v40, v35);
      _Block_release(v35);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v41);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v47);
      return ((uint64_t (*)(char *, uint64_t))v32)(v25, v34);
    }
  }
  return result;
}

uint64_t sub_E0794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t result;
  void *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v1 - 8);
  v50 = v1;
  __chkstk_darwin(v1);
  v48 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0, v4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - v12;
  v14 = *(_QWORD *)(v0 + 64);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 56));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 64))(ObjectType, v14);
  if ((result & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(v14 + 72))(ObjectType, v14);
    v17 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 8))(ObjectType);
    v45 = v10;
    v18 = v8;
    v19 = v13;
    v20 = v6;
    v21 = v7;
    v22 = v17;
    sub_E1210(v17);

    v23 = v21;
    v24 = v20;
    v25 = v19;
    v26 = v18;
    v27 = v45;
    sub_E169C();
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 80))(ObjectType, v14);
    if (v28)
    {
      v29 = result;
      v30 = v28;
      sub_5B5E4();
      v44 = static OS_dispatch_queue.main.getter(v31);
      static DispatchTime.now()();
      + infix(_:_:)(v27, 0.5);
      v32 = *(void (**)(char *, uint64_t))(v26 + 8);
      v32(v27, v23);
      v33 = swift_allocObject(&unk_380A60, 32);
      *(_QWORD *)(v33 + 16) = v29;
      *(_QWORD *)(v33 + 24) = v30;
      aBlock[4] = sub_E43F8;
      aBlock[5] = v33;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_525B8;
      aBlock[3] = &unk_380A78;
      v34 = v23;
      v35 = _Block_copy(aBlock);
      v36 = swift_release();
      static DispatchQoS.unspecified.getter(v36);
      aBlock[0] = _swiftEmptyArrayStorage;
      v37 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v38 = sub_319AC(&qword_3B96F0);
      v39 = sub_A312C();
      v40 = v48;
      v41 = v50;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v50, v37);
      v42 = (void *)v44;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v25, v24, v40, v35);
      _Block_release(v35);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v41);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v47);
      return ((uint64_t (*)(char *, uint64_t))v32)(v25, v34);
    }
  }
  return result;
}

void sub_E0AAC()
{
  UIAccessibilityNotifications v0;
  id v1;

  v0 = UIAccessibilityAnnouncementNotification;
  v1 = String._bridgeToObjectiveC()();
  UIAccessibilityPostNotification(v0, v1);

}

uint64_t sub_E0AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[5] = v5;
  v4[6] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[7] = v6;
  v4[8] = v7;
  return swift_task_switch(sub_E0B60, v6, v7);
}

uint64_t sub_E0B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  ThemeAppearanceManager.themeVariant.getter();
  *(_BYTE *)(v0 + 121) = v3;
  swift_getObjectType(*(_QWORD *)(v2 + 80));
  sub_18308C((char *)(v0 + 120));
  *(_QWORD *)(v0 + 72) = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v0 + 80) = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  *(_QWORD *)(v0 + 88) = v5;
  *(_QWORD *)(v0 + 96) = v6;
  return swift_task_switch(sub_E0BF4, v5, v6);
}

uint64_t sub_E0BF4()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;

  v1 = *(_BYTE *)(v0 + 121);
  v2 = (_QWORD *)swift_task_alloc(dword_3C1184);
  *(_QWORD *)(v0 + 104) = v2;
  *v2 = v0;
  v2[1] = sub_E0C64;
  return sub_1C0CA0(v1 & 1, (_BYTE *)(v0 + 120));
}

uint64_t sub_E0C64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_E0CBC, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_E0CBC()
{
  uint64_t v0;

  swift_release();
  return swift_task_switch(sub_E0CF4, *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_E0CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 32);
  swift_release();
  v3 = *(_QWORD *)(v2 + 32);
  swift_retain();
  v4 = sub_E3AF4(v1);
  swift_release();
  KeyPath = swift_getKeyPath(&unk_2EBB58);
  v6 = swift_task_alloc(32);
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v4;
  *(_QWORD *)(v0 + 24) = v3;
  v7 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 24, KeyPath, sub_9B8AC, v6, (char *)&type metadata for () + 8, v7);
  swift_bridgeObjectRelease(v4);
  swift_release();
  swift_task_dealloc(v6);
  sub_E0E1C();
  v8 = swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v8);
}

void sub_E0E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __objc2_meth_list **p_class_meths;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  __n128 v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char log;
  NSObject *loga;
  uint64_t v32;
  _BYTE v33[24];
  uint64_t v34;
  _QWORD v35[3];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  KeyPath = swift_getKeyPath(&unk_2EBB58);
  v35[0] = v2;
  v4 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v35, KeyPath, v4);
  swift_release();
  swift_beginAccess(v2 + 24, v35, 0, 0);
  v5 = *(_QWORD *)(v2 + 24);
  if ((unint64_t)v5 >> 62)
  {
LABEL_28:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v23);
    p_class_meths = &OBJC_PROTOCOL___BEJavascriptProvider.class_meths;
    if (v6)
      goto LABEL_3;
LABEL_32:
    v22 = swift_bridgeObjectRelease(v5);
LABEL_33:
    v24 = (void *)NWPathMonitor.queue.getter(v22);

    if (v24)
    {
      if (p_class_meths[218] != (__objc2_meth_list *)-1)
        swift_once(&qword_3B56D0, sub_6CEE4);
      v25 = type metadata accessor for Logger(0);
      v26 = sub_555F0(v25, (uint64_t)qword_3CEF18);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl(&dword_0, v27, v28, "Canceling network monitoring", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      NWPathMonitor.cancel()();
    }
    return;
  }
  v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + 24));
  p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEJavascriptProvider + 32);
  if (!v6)
    goto LABEL_32;
LABEL_3:
  v8 = 0;
  v9 = 0;
  v32 = v1;
LABEL_4:
  log = v8;
  v10 = v9;
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v5);
      v9 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_25;
    }
    else
    {
      if (v10 >= *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
      {
        __break(1u);
        goto LABEL_28;
      }
      v11 = *(_QWORD *)(v5 + 8 * v10 + 32);
      swift_retain();
      v9 = v10 + 1;
      if (__OFADD__(v10, 1))
      {
LABEL_25:
        __break(1u);
LABEL_26:
        swift_bridgeObjectRelease(v5);
        return;
      }
    }
    v1 = *(_QWORD *)(v11 + 16);
    if (v1)
    {
      v12 = swift_getKeyPath(&unk_2EBB80);
      v34 = v1;
      v13 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v34, v12, v13);
      swift_release();
      v14 = swift_beginAccess(v1 + 24, v33, 0, 0);
      if (*(_BYTE *)(v1 + 32) == 1 && *(_QWORD *)(v1 + 24) > 1uLL)
      {
        v1 = v32;
        v15 = (void *)NWPathMonitor.queue.getter(v14);

        if (!v15)
        {
          if (qword_3B56D0 != -1)
            swift_once(&qword_3B56D0, sub_6CEE4);
          v16 = type metadata accessor for Logger(0);
          v17 = sub_555F0(v16, (uint64_t)qword_3CEF18);
          v18 = Logger.logObject.getter(v17);
          v19 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v18, v19))
          {
            loga = v18;
            v20 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v20 = 0;
            _os_log_impl(&dword_0, loga, v19, "Starting network monitoring", v20, 2u);
            v21 = v20;
            v18 = loga;
            swift_slowDealloc(v21, -1, -1);
          }

          NWPathMonitor.start(queue:)(*(_QWORD *)(v32 + 104));
        }
        swift_release();
        v8 = 1;
        if (v9 == v6)
          goto LABEL_26;
        goto LABEL_4;
      }
    }
    swift_release();
    ++v10;
  }
  while (v9 != v6);
  v22 = swift_bridgeObjectRelease(v5);
  p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEJavascriptProvider + 32);
  if ((log & 1) == 0)
    goto LABEL_33;
}

uint64_t sub_E1210(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __n128 v10;
  void *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v1 + 32);
  sub_5B5E4();
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = (_QWORD *)swift_allocObject(&unk_380A10, 40);
  v12[2] = v9;
  v12[3] = a1;
  v12[4] = v1;
  aBlock[4] = sub_E4334;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_380A28;
  v13 = _Block_copy(aBlock);
  swift_retain();
  v14 = a1;
  swift_retain();
  v15 = swift_release();
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_319AC(&qword_3B96F0);
  v18 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v3, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v20);
}

double sub_E1414(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  double result;
  id v22;
  uint64_t ObjectType;
  _BYTE v24[16];
  uint64_t v25;
  char v26;
  _BYTE v27[16];
  uint64_t v28;
  char v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  char v33;
  _BYTE v34[16];
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t v38;
  void *v39;
  _QWORD v40[2];

  KeyPath = swift_getKeyPath(&unk_2EBC28);
  v38 = a1;
  v39 = a2;
  v40[0] = a1;
  v7 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  v22 = a2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v40, KeyPath, sub_9DF8C, v37, (char *)&type metadata for () + 8, v7);
  swift_release();

  v9 = *(_QWORD *)(a3 + 56);
  v8 = *(_QWORD *)(a3 + 64);
  ObjectType = swift_getObjectType(v9);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);
  v11 = *(_QWORD *)(v10 + 16);
  v12 = swift_getKeyPath(&unk_2EBC50);
  v35 = a1;
  v36 = v11;
  v40[0] = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v40, v12, sub_E4350, v34, (char *)&type metadata for () + 8, v7);
  swift_release();
  v13 = sub_E630C((uint64_t)v22, v10);
  v15 = v14;
  swift_bridgeObjectRelease(v10);
  v16 = swift_getKeyPath(&unk_2EBC78);
  v31 = a1;
  v32 = v13;
  v33 = v15 & 1;
  v40[0] = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v40, v16, sub_E4370, v30, (char *)&type metadata for () + 8, v7);
  v17 = swift_release();
  LOBYTE(v13) = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 48))(ObjectType, v8, v17);
  v18 = swift_getKeyPath(&unk_2EBCA0);
  v28 = a1;
  v29 = v13 & 1;
  v40[0] = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v40, v18, sub_E4394, v27, (char *)&type metadata for () + 8, v7);
  v19 = swift_release();
  LOBYTE(v13) = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v8 + 32))(ObjectType, v8, v19);
  v20 = swift_getKeyPath(&unk_2EBCC8);
  v25 = a1;
  v26 = v13 & 1;
  v40[0] = a1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v40, v20, sub_E43B8, v24, (char *)&type metadata for () + 8, v7);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_E169C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  void *v9;
  void *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v17 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5B5E4();
  v9 = (void *)static OS_dispatch_queue.main.getter(v8);
  aBlock[4] = sub_E4290;
  v19 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_380988;
  v10 = _Block_copy(aBlock);
  swift_retain();
  v11 = swift_release();
  static DispatchQoS.unspecified.getter(v11);
  aBlock[0] = _swiftEmptyArrayStorage;
  v12 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v13 = sub_319AC(&qword_3B96F0);
  v14 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v13, v14, v1, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v10);
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v3, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_E1874(uint64_t a1)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v10[3];
  char v11;
  _QWORD aBlock[7];

  objc_msgSend(*(id *)(a1 + 88), "invalidate");
  v2 = *(_QWORD *)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2EBC00);
  v10[2] = v2;
  v11 = 1;
  aBlock[0] = v2;
  v4 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(aBlock, KeyPath, sub_E42B8, v10, (char *)&type metadata for () + 8, v4);
  swift_release();
  v5 = (void *)objc_opt_self(NSTimer);
  v6 = swift_allocObject(&unk_3809C0, 24);
  swift_weakInit(v6 + 16, a1);
  aBlock[4] = sub_E42F8;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_51504;
  aBlock[3] = &unk_3809D8;
  v7 = _Block_copy(aBlock);
  swift_release();
  v8 = objc_msgSend(v5, "scheduledTimerWithTimeInterval:repeats:block:", 0, v7, 2.0);
  _Block_release(v7);
  v9 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v8;

}

void sub_E19EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[3];
  char v10;
  _QWORD v11[4];
  _BYTE v12[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = *(_QWORD *)(Strong + 32);
    swift_retain();
    swift_release();
    KeyPath = swift_getKeyPath(&unk_2EBC00);
    __chkstk_darwin(KeyPath);
    v9[2] = v4;
    v10 = 0;
    v11[0] = v4;
    v6 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v11, KeyPath, sub_E49CC, v9, (char *)&type metadata for () + 8, v6);
    swift_release();
    swift_release();
  }
  swift_beginAccess(v2, v11, 0, 0);
  v7 = swift_weakLoadStrong(v2);
  if (v7)
  {
    v8 = *(void **)(v7 + 88);
    *(_QWORD *)(v7 + 88) = 0;
    swift_release();

  }
}

void sub_E1B2C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _DWORD *v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  char v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[6];
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51[32];

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 32);
  KeyPath = swift_getKeyPath(&unk_2EBB58);
  v6 = v4 + OBJC_IVAR____TtC8BookEPUB24ReadingSettingsViewModel___observationRegistrar;
  v46 = v4;
  v7 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v46, KeyPath, v7);
  swift_release();
  swift_beginAccess(v4 + 24, v51, 0, 0);
  v8 = *(_QWORD *)(v4 + 24);
  swift_unknownObjectRetain(a1);
  swift_bridgeObjectRetain(v8);
  v10 = sub_E3BF0(v9, a1);
  swift_bridgeObjectRelease(v8);
  swift_unknownObjectRelease(a1);
  if (v10)
  {
    v42 = v7;
    v43 = v6;
    v11 = *(_BYTE *)(v10 + 49);
    v12 = *(_BYTE *)(v10 + 50);
    v13 = *(_QWORD *)(v10 + 104);
    LOBYTE(v46) = *(_BYTE *)(v10 + 48);
    BYTE1(v46) = v11;
    BYTE2(v46) = v12;
    v14 = *(_OWORD *)(v10 + 72);
    v47 = *(_OWORD *)(v10 + 56);
    v48 = v14;
    v49 = *(_OWORD *)(v10 + 88);
    v50 = v13;
    v15 = v47;
    v44 = v2;
    swift_bridgeObjectRetain(v47);
    BookThemeEntity.defaultFontAvailable(using:)();
    v17 = v16;
    swift_bridgeObjectRelease(v15);
    v18 = swift_getKeyPath(&unk_2EBBB0);
    __chkstk_darwin(v18);
    v39 = v10;
    v40 = v17 & 1;
    v46 = v10;
    v19 = sub_34284(&qword_3BBB40, type metadata accessor for BookThemeViewModel, (uint64_t)&protocol conformance descriptor for BookThemeViewModel);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v46, v18, sub_E426C, v38, (char *)&type metadata for () + 8, v19);
    *(_QWORD *)&v20 = swift_release().n128_u64[0];
    v21 = *(_QWORD *)(v10 + 16);
    if (v21)
    {
      swift_retain();
      v22 = sub_CCAB4(a1);
      v24 = v23;
      v25 = swift_getKeyPath(&unk_2EBB80);
      v41[1] = v41;
      __chkstk_darwin(v25);
      v38[0] = v21;
      v38[1] = v22;
      LOBYTE(v39) = v24 & 1;
      v46 = v21;
      v26 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v46, v25, sub_44660, &v37, (char *)&type metadata for () + 8, v26);
      swift_release();
      *(_QWORD *)&v20 = swift_release().n128_u64[0];
    }
    v27 = objc_msgSend(a1, "isUnavailable", v20);
    v28 = swift_getKeyPath(&unk_2EBBD8);
    v46 = v4;
    v29 = v42;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v46, v28, v42);
    swift_release();
    v46 = v4;
    v30 = swift_getKeyPath(&unk_2EBBD8);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v46, v30, v29);
    swift_release();
    swift_beginAccess(v4 + 80, &v46, 1, 0);
    *(_BYTE *)(v4 + 85) = v27;
    v45[0] = v4;
    v31 = swift_getKeyPath(&unk_2EBBD8);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v45, v31, v29);
    swift_release();
    if (qword_3B56D0 != -1)
      swift_once(&qword_3B56D0, sub_6CEE4);
    v32 = type metadata accessor for Logger(0);
    sub_555F0(v32, (uint64_t)qword_3CEF18);
    v33 = swift_retain_n(v10, 4);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (_DWORD *)swift_slowAlloc(22, -1);
      v45[5] = swift_slowAlloc(64, -1);
      *v36 = 136446466;
      __asm { BR              X10 }
    }

    swift_release_n(v10);
  }
  sub_E0E1C();
}

void sub_E2180(char *a1)
{
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12[8];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = *a1;
  v1 = *a1;
  v2 = a1[2];
  v3 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v5 = *((_QWORD *)a1 + 3);
  v6 = *((_QWORD *)a1 + 4);
  v8 = *((_QWORD *)a1 + 5);
  v7 = *((_QWORD *)a1 + 6);
  v9 = *((_QWORD *)a1 + 7);
  ThemeAppearanceManager.themeVariant.getter();
  v12[0] = v1;
  v12[1] = v10 & 1;
  v12[2] = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v8;
  v18 = v7;
  v19 = v9;
  swift_bridgeObjectRetain(v3);
  sub_E23F8(v12);
  __asm { BR              X9 }
}

uint64_t sub_E2240()
{
  uint64_t v0;
  char v1;
  unint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;

  if (v17)
  {
    v18 = sub_6EF84();
  }
  else
  {
    v2 = 0xEC00000074786554;
    v18 = 0x206F63696C627550;
  }
  v8 = v2;
  BookThemeEntity.defaultFontAvailable(using:)();
  v4 = v3;
  v5 = type metadata accessor for BookThemeViewModel(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48));
  *(_BYTE *)(v6 + 40) = MGGetBoolAnswer(CFSTR("wapi"));
  ObservationRegistrar.init()();
  *(_BYTE *)(v6 + 48) = v16;
  *(_BYTE *)(v6 + 49) = v1;
  *(_BYTE *)(v6 + 50) = v17;
  *(_QWORD *)(v6 + 56) = v0;
  *(_QWORD *)(v6 + 64) = v15;
  *(_QWORD *)(v6 + 72) = v14;
  *(_QWORD *)(v6 + 80) = v13;
  *(_QWORD *)(v6 + 88) = v12;
  *(_QWORD *)(v6 + 96) = v11;
  *(_QWORD *)(v6 + 104) = v9;
  *(_QWORD *)(v6 + 16) = v10;
  *(_QWORD *)(v6 + 24) = v18;
  *(_QWORD *)(v6 + 32) = v8;
  *(_BYTE *)(v6 + 41) = v4 & 1;
  return v6;
}

uint64_t sub_E23F8(char *a1)
{
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t KeyPath;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _BYTE v63[24];
  uint64_t v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a1 + 5);
  v10 = *((_QWORD *)a1 + 6);
  v11 = *((_QWORD *)a1 + 7);
  v74[0] = 0;
  v12 = *(void **)(v1 + 80);
  LOBYTE(v66) = v2;
  BYTE1(v66) = v3;
  v62 = v4;
  BYTE2(v66) = v4;
  v67 = v5;
  v68 = v6;
  v69 = v8;
  v70 = v7;
  v60 = v9;
  v61 = v7;
  v71 = v9;
  v72 = v10;
  v58 = v11;
  v59 = v10;
  v73 = v11;
  BookThemeEntity.fontFamily.getter();
  v14 = v13;
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v12, "fontForFontFamily:", v15, swift_bridgeObjectRelease(v14).n128_f64[0]);

  if (qword_3B56D0 != -1)
    swift_once(&qword_3B56D0, sub_6CEE4);
  v17 = type metadata accessor for Logger(0);
  sub_555F0(v17, (uint64_t)qword_3CEF18);
  swift_bridgeObjectRetain_n(v5, 2);
  v18 = swift_unknownObjectRetain_n(v16, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = v2;
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v64[0] = v23;
    *(_DWORD *)v22 = 136446466;
    LOBYTE(v66) = v21;
    BYTE1(v66) = v3;
    BYTE2(v66) = v62;
    v67 = v5;
    v68 = v6;
    v69 = v8;
    v70 = v61;
    v71 = v60;
    v72 = v59;
    v73 = v58;
    v24 = BookThemeEntity.fontFamily.getter();
    v26 = v25;
    v66 = sub_33524(v24, v25, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v22 + 4);
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v22 + 12) = 2082;
    v66 = (uint64_t)v16;
    swift_unknownObjectRetain(v16);
    v27 = sub_319AC(&qword_3BBB38);
    v28 = String.init<A>(describing:)(&v66, v27);
    v30 = v29;
    v66 = sub_33524(v28, v29, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v22 + 14);
    swift_unknownObjectRelease_n(v16, 2);
    swift_bridgeObjectRelease(v30);
    _os_log_impl(&dword_0, v19, v20, "Theme fontFamily %{public}s produces font %{public}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    if (!v16)
      goto LABEL_16;
  }
  else
  {

    swift_unknownObjectRelease_n(v16, 2);
    swift_bridgeObjectRelease_n(v5, 2);
    if (!v16)
      goto LABEL_16;
  }
  v31 = type metadata accessor for ThemeFontViewModel(0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48));
  v32 = (void *)swift_unknownObjectRetain_n(v16, 2);
  v33 = sub_CCB3C(v32);
  swift_unknownObjectRelease(v16);
  swift_release();
  v74[0] = v33;
  v34 = swift_unknownObjectRetain_n(v16, 2);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v65 = v38;
    *(_DWORD *)v37 = 136446466;
    v39 = objc_msgSend(v16, "familyName");
    if (v39)
    {
      v40 = v39;
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v43 = v42;

    }
    else
    {
      v41 = 0;
      v43 = 0;
    }
    v66 = v41;
    v67 = v43;
    v44 = sub_319AC((uint64_t *)&unk_3BBB20);
    v45 = String.init<A>(describing:)(&v66, v44);
    v47 = v46;
    v66 = sub_33524(v45, v46, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v37 + 4);
    swift_unknownObjectRelease_n(v16, 2);
    swift_bridgeObjectRelease(v47);
    *(_WORD *)(v37 + 12) = 2082;
    swift_beginAccess(v74, v64, 0, 0);
    v48 = v74[0];
    if (v74[0])
    {
      KeyPath = swift_getKeyPath(&unk_2EBB80);
      v66 = v48;
      v50 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
      swift_retain();
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v66, KeyPath, v50);
      swift_release();
      swift_beginAccess(v48 + 24, v63, 0, 0);
      v51 = *(_QWORD *)(v48 + 24);
      v52 = *(_BYTE *)(v48 + 32);
      swift_release();
    }
    else
    {
      v51 = 0;
      v52 = 0;
    }
    v66 = v51;
    LOBYTE(v67) = v52;
    BYTE1(v67) = v48 == 0;
    v53 = sub_319AC(&qword_3BBB30);
    v54 = String.init<A>(describing:)(&v66, v53);
    v56 = v55;
    v66 = sub_33524(v54, v55, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v37 + 14);
    swift_bridgeObjectRelease(v56);
    _os_log_impl(&dword_0, v35, v36, "#UpdatedFont created font:%{public}s  state:%{public}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);
    swift_unknownObjectRelease_n(v16, 2);

  }
  else
  {

    swift_unknownObjectRelease_n(v16, 4);
  }
LABEL_16:
  swift_beginAccess(v74, &v66, 0, 0);
  return v74[0];
}

double sub_E29D0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double result;
  uint64_t v10;

  v1 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v3, 1, 1, v5);
  type metadata accessor for MainActor(0);
  v6 = swift_retain();
  v7 = static MainActor.shared.getter(v6);
  v8 = (_QWORD *)swift_allocObject(&unk_380970, 40);
  v8[2] = v7;
  v8[3] = &protocol witness table for MainActor;
  v8[4] = v4;
  sub_67B40((uint64_t)v3, (uint64_t)&unk_3BBB18, (uint64_t)v8);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_E2AAC(__n128 a1)
{
  sub_DF690(a1);
}

void sub_E2ACC(uint64_t a1)
{
  sub_DF77C(a1);
}

uint64_t sub_E2AEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t ObjectType;

  v3 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 40)
                            + OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_dataManager)
                + OBJC_IVAR____TtC8BookEPUB26ReadingSettingsDataManager_settingsManager);
  v4 = v3[1];
  ObjectType = swift_getObjectType(*v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(a1, ObjectType, v4);
}

uint64_t sub_E2B50(char a1)
{
  return sub_DFB10(a1);
}

double sub_E2B70(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  double result;
  uint64_t v12;

  v3 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v3);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  type metadata accessor for MainActor(0);
  swift_retain();
  v8 = swift_retain();
  v9 = static MainActor.shared.getter(v8);
  v10 = (_QWORD *)swift_allocObject(&unk_380920, 48);
  v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  v10[4] = v6;
  v10[5] = a1;
  sub_67B40((uint64_t)v5, (uint64_t)&unk_3BBAF8, (uint64_t)v10);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_E2C58(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_BYTE *, uint64_t, uint64_t);
  _BYTE v14[8];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v3 = *v1;
  Strong = swift_unknownObjectWeakLoadStrong(*v1 + 16);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v3 + 24);
    ObjectType = swift_getObjectType(Strong);
    v9 = *(_BYTE *)(a1 + 49);
    v10 = *(_BYTE *)(a1 + 50);
    v11 = *(_QWORD *)(a1 + 104);
    v14[0] = *(_BYTE *)(a1 + 48);
    v14[1] = v9;
    v14[2] = v10;
    v15 = *(_OWORD *)(a1 + 56);
    v16 = *(_OWORD *)(a1 + 72);
    v17 = *(_OWORD *)(a1 + 88);
    v18 = v11;
    v12 = v15;
    v13 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain(v15);
    v13(v14, ObjectType, v7);
    swift_bridgeObjectRelease(v12);
    *(_QWORD *)&result = swift_unknownObjectRelease(v6).n128_u64[0];
  }
  return result;
}

uint64_t sub_E2D14()
{
  return sub_E0164();
}

uint64_t sub_E2D34()
{
  return sub_E047C();
}

uint64_t sub_E2D54()
{
  return sub_E0794();
}

double sub_E2D74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;

  v1 = *v0;
  Strong = swift_unknownObjectWeakLoadStrong(*v0 + 16);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)(v1 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(ObjectType, v5);
    *(_QWORD *)&result = swift_unknownObjectRelease(v4).n128_u64[0];
  }
  return result;
}

double sub_E2DC4(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;

  v3 = *v1;
  Strong = swift_unknownObjectWeakLoadStrong(*v1 + 16);
  if (Strong)
  {
    v6 = Strong;
    v7 = *(_QWORD *)(v3 + 24);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v7 + 24))(a1 & 1, ObjectType, v7);
    *(_QWORD *)&result = swift_unknownObjectRelease(v6).n128_u64[0];
  }
  return result;
}

double sub_E2E2C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  if (*(_QWORD *)(*(_QWORD *)v0 + 120))
  {
    v1 = swift_retain();
    sub_DF77C(v1);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_E2E6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  *(_QWORD *)(*(_QWORD *)v0 + 120) = 0;
  return swift_release(v1);
}

uint64_t sub_E2E7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t ObjectType;

  v1 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 40)
                            + OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_dataManager)
                + OBJC_IVAR____TtC8BookEPUB26ReadingSettingsDataManager_settingsManager);
  v2 = v1[1];
  ObjectType = swift_getObjectType(*v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(ObjectType, v2);
}

uint64_t sub_E2ECC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_E2F00(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_3BBAF4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_6B4A4;
  return sub_DFB78(a1, v4, v5, v7, v6);
}

uint64_t sub_E2F80(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5B5E4();
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_380C18, 25);
  *(_QWORD *)(v12 + 16) = v1;
  *(_BYTE *)(v12 + 24) = a1;
  aBlock[4] = sub_E45B0;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_380C30;
  v13 = _Block_copy(aBlock);
  swift_retain();
  v14 = swift_release();
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_319AC(&qword_3B96F0);
  v17 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double sub_E3178(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2EBD18);
  v7[2] = v3;
  v8 = a2;
  v9 = v3;
  v5 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_E426C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_E3220(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  void *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD aBlock[6];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[1];
  v27 = *a1;
  v28 = v11;
  v12 = a1[3];
  v29 = a1[2];
  v30 = v12;
  sub_5B5E4();
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  v15 = swift_allocObject(&unk_380C68, 88);
  v16 = v28;
  *(_OWORD *)(v15 + 24) = v27;
  *(_OWORD *)(v15 + 40) = v16;
  v17 = v30;
  *(_OWORD *)(v15 + 56) = v29;
  *(_QWORD *)(v15 + 16) = v2;
  *(_OWORD *)(v15 + 72) = v17;
  aBlock[4] = sub_E45DC;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_380C80;
  v18 = _Block_copy(aBlock);
  swift_retain();
  sub_E45E8((uint64_t)&v27);
  v19 = swift_release();
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_319AC(&qword_3B96F0);
  v22 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v4, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_E3444(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  char v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE v30[16];
  uint64_t v31;
  char v32;
  _OWORD v33[4];
  _BYTE v34[32];

  v4 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v4);
  v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE *)a2;
  KeyPath = swift_getKeyPath(&unk_2EBD40);
  v31 = v7;
  v32 = v8;
  *(_QWORD *)&v33[0] = v7;
  v10 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v33, KeyPath, sub_E4618, v30, (char *)&type metadata for () + 8, v10);
  swift_release();
  v11 = swift_getKeyPath(&unk_2EBB58);
  *(_QWORD *)&v33[0] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v33, v11, v10);
  swift_release();
  swift_beginAccess(v7 + 24, v34, 0, 0);
  v12 = *(_QWORD *)(v7 + 24);
  swift_bridgeObjectRetain(v12);
  sub_E45E8(a2);
  v13 = sub_E4634(v12);
  v15 = v14;
  sub_E48EC(a2);
  swift_bridgeObjectRelease(v12);
  if ((v15 & 1) != 0)
  {
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v6, 1, 1, v26);
    type metadata accessor for MainActor(0);
    v27 = swift_retain();
    v28 = static MainActor.shared.getter(v27);
    v29 = (_QWORD *)swift_allocObject(&unk_380CB8, 40);
    v29[2] = v28;
    v29[3] = &protocol witness table for MainActor;
    v29[4] = a1;
    sub_67B40((uint64_t)v6, (uint64_t)&unk_3BBB50, (uint64_t)v29);
    goto LABEL_10;
  }
  v16 = *(_OWORD *)(a2 + 16);
  v33[0] = *(_OWORD *)a2;
  v33[1] = v16;
  v17 = *(_OWORD *)(a2 + 48);
  v33[2] = *(_OWORD *)(a2 + 32);
  v33[3] = v17;
  sub_E2180((char *)v33);
  v19 = v18;
  v20 = swift_getKeyPath(&unk_2EBB58);
  *(_QWORD *)&v33[0] = v7;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v33, v20, v10);
  swift_release();
  *(_QWORD *)&v33[0] = v7;
  v21 = swift_getKeyPath(&unk_2EBB58);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v33, v21, v10);
  swift_release();
  swift_beginAccess(v7 + 24, v33, 33, 0);
  v22 = *(_QWORD *)(v7 + 24);
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v22);
  *(_QWORD *)(v7 + 24) = v22;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v22 < 0 || (v22 & 0x4000000000000000) != 0)
  {
    v22 = sub_E3A8C(v22);
    *(_QWORD *)(v7 + 24) = v22;
  }
  if ((v13 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v13 < *(_QWORD *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFFF8)))
  {
    *(_QWORD *)((char *)&stru_20.cmd + 8 * v13 + (v22 & 0xFFFFFFFFFFFFFF8)) = v19;
    swift_release();
    specialized Array._endMutation()(v24);
    swift_endAccess(v33);
    *(_QWORD *)&v33[0] = v7;
    v25 = swift_getKeyPath(&unk_2EBB58);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v33, v25, v10);
LABEL_10:
    swift_release();
    return;
  }
  __break(1u);
}

uint64_t sub_E3770(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  void *v11;
  uint64_t v12;
  void *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5B5E4();
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  v12 = swift_allocObject(&unk_380BC8, 25);
  *(_QWORD *)(v12 + 16) = v1;
  *(_BYTE *)(v12 + 24) = a1;
  aBlock[4] = sub_E455C;
  aBlock[5] = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_380BE0;
  v13 = _Block_copy(aBlock);
  swift_retain();
  v14 = swift_release();
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_319AC(&qword_3B96F0);
  v17 = sub_A312C();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

double sub_E3968(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a1 + 32);
  KeyPath = swift_getKeyPath(&unk_2EBCF0);
  v7[2] = v3;
  v8 = a2;
  v9 = v3;
  v5 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_E4570, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

_QWORD *sub_E3A10(_QWORD *a1)
{
  return sub_42140(0, a1[2], 0, a1);
}

_QWORD *sub_E3A28(_QWORD *a1)
{
  return sub_42620(0, a1[2], 0, a1);
}

_QWORD *sub_E3A3C(_QWORD *a1)
{
  return sub_42BB8(0, a1[2], 0, a1);
}

_QWORD *sub_E3A50(_QWORD *a1)
{
  return sub_42E0C(0, a1[2], 0, a1);
}

_QWORD *sub_E3A64(_QWORD *a1)
{
  return sub_42CE0(0, a1[2], 0, a1);
}

_QWORD *sub_E3A78(_QWORD *a1)
{
  return sub_42F2C(0, a1[2], 0, a1);
}

uint64_t sub_E3A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *sub_E3AF4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  __int128 *v4;
  char v5;
  char v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15[8];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    v20 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v4 = (__int128 *)(a1 + 56);
    do
    {
      v5 = *((_BYTE *)v4 - 23);
      v6 = *((_BYTE *)v4 - 22);
      v7 = *((_QWORD *)v4 + 4);
      v15[0] = *((_BYTE *)v4 - 24);
      v15[1] = v5;
      v15[2] = v6;
      v8 = v4[1];
      v17 = *v4;
      v16 = *(v4 - 1);
      v18 = v8;
      v9 = v16;
      v19 = v7;
      swift_bridgeObjectRetain(v16);
      sub_E2180(v15);
      v11 = v10;
      swift_bridgeObjectRelease(v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v13 = v20[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized ContiguousArray._endMutation()(v14);
      v4 += 4;
      --v2;
    }
    while (v2);
    return v20;
  }
  return result;
}

uint64_t sub_E3BF0(unint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_36;
  v4 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v29 = v3 & 0xC000000000000001;
    v5 = 4;
    v28 = v3;
    while (1)
    {
      v6 = v5 - 4;
      if (!v29)
        break;
      v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3);
      v7 = v5 - 3;
      if (__OFADD__(v6, 1))
        goto LABEL_35;
LABEL_11:
      v8 = *(_QWORD *)(v3 + 16);
      if (v8)
      {
        v10 = *(_QWORD *)(v8 + 56);
        v9 = *(_QWORD *)(v8 + 64);
        swift_bridgeObjectRetain(v9);
      }
      else
      {
        v10 = 0;
        v9 = 0;
      }
      v11 = objc_msgSend(a2, "familyName");
      if (!v11)
      {
        if (!v9)
          goto LABEL_30;
LABEL_22:
        v15 = v9;
LABEL_24:
        swift_bridgeObjectRelease(v15);
        goto LABEL_25;
      }
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

      if (!v9)
      {
        if (!v15)
          goto LABEL_30;
        goto LABEL_24;
      }
      if (!v15)
        goto LABEL_22;
      if (v10 == v13 && v9 == v15)
      {
        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v9);
        v25 = v15;
        goto LABEL_31;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v9, v13, v15, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v15);
      if ((v16 & 1) != 0)
        goto LABEL_30;
LABEL_25:
      v18 = *(_QWORD *)(v3 + 24);
      v17 = *(_QWORD *)(v3 + 32);
      swift_bridgeObjectRetain(v17);
      v19 = objc_msgSend(a2, "familyName");
      if (v19)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
        v23 = v22;

        if (v18 == v21 && v17 == v23)
        {
          swift_bridgeObjectRelease(v28);
          swift_bridgeObjectRelease_n(v17, 2);
          return v3;
        }
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v17, v21, v23, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v23);
        if ((v24 & 1) != 0)
        {
LABEL_30:
          v25 = v28;
LABEL_31:
          swift_bridgeObjectRelease(v25);
          return v3;
        }
        swift_release(v3);
      }
      else
      {
        swift_release(v3);
        swift_bridgeObjectRelease(v17);
      }
      v3 = v28;
      ++v5;
      if (v7 == v4)
      {
        swift_bridgeObjectRelease(v28);
        return 0;
      }
    }
    v3 = *(_QWORD *)(v3 + 8 * v5);
    swift_retain(v3);
    v7 = v5 - 3;
    if (!__OFADD__(v6, 1))
      goto LABEL_11;
LABEL_35:
    __break(1u);
LABEL_36:
    if (v3 < 0)
      v26 = v3;
    else
      v26 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v26);
  }
  swift_bridgeObjectRelease(v3);
  return 0;
}

uint64_t sub_E3E9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease(a1);
    if (v4)
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
      {
        v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      }
      else
      {
        v2 = *(_QWORD *)(a1 + 32);
        swift_retain(v2);
      }
      __asm { BR              X9 }
    }
  }
  else if (*(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8)))
  {
    goto LABEL_3;
  }
  return 0;
}

uint64_t sub_E4154()
{
  return sub_E492C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_E416C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_3BBB0C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_6B4A4;
  return sub_E0AF0(a1, v4, v5, v6);
}

uint64_t sub_E41D8()
{
  return sub_E492C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_E41F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_3BBB0C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_3F0C0;
  return sub_E0AF0(a1, v4, v5, v6);
}

uint64_t sub_E426C()
{
  uint64_t v0;

  return sub_41444(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_E4290()
{
  uint64_t v0;

  sub_E1874(v0);
}

uint64_t sub_E4298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_E42A8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_E42B8()
{
  uint64_t v0;

  return sub_9C670(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_E42D4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_E42F8(uint64_t a1)
{
  uint64_t v1;

  sub_E19EC(a1, v1);
}

uint64_t sub_E4300()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

double sub_E4334()
{
  uint64_t v0;

  return sub_E1414(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_E4350()
{
  uint64_t v0;

  return sub_9CD4C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_E4370()
{
  uint64_t v0;

  return sub_9C9E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_E4394()
{
  uint64_t v0;

  return sub_9D0AC(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_E43B8()
{
  uint64_t v0;

  return sub_9D40C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_E43D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_E43F8()
{
  sub_E0AAC();
}

uint64_t sub_E4410()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_E443C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_3C118C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_6B4A4;
  return sub_1BFA38(a1, v4, v5, v6, v7);
}

uint64_t sub_E44B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for NWPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_E452C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for NWPath(0) - 8) + 80);
  return sub_DEFC8(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

double sub_E455C()
{
  uint64_t v0;

  return sub_E3968(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_E4570()
{
  uint64_t v0;

  return sub_9B4B0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_E458C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

double sub_E45B0()
{
  uint64_t v0;

  return sub_E3178(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_E45C4()
{
  return sub_E492C((void (*)(_QWORD))&_swift_release, (void (*)(_QWORD))&_swift_bridgeObjectRelease, 88);
}

void sub_E45DC()
{
  uint64_t v0;

  sub_E3444(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_E45E8(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_E4618()
{
  uint64_t v0;

  return sub_9C000(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_E4634(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v3);
    swift_bridgeObjectRelease(a1);
    if (v4)
    {
LABEL_3:
      if ((a1 & 0xC000000000000001) != 0)
      {
        v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      }
      else
      {
        v2 = *(_QWORD *)(a1 + 32);
        swift_retain(v2);
      }
      __asm { BR              X9 }
    }
  }
  else if (*(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8)))
  {
    goto LABEL_3;
  }
  return 0;
}

uint64_t sub_E48EC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_E4914()
{
  return sub_E492C((void (*)(_QWORD))&_swift_unknownObjectRelease, (void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_E492C(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 16));
  a2(*(_QWORD *)(v3 + 32));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_E49CC()
{
  return sub_E42B8();
}

_QWORD *sub_E49E0(uint64_t a1)
{
  int64_t v1;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_F508C(0, v1, 0);
    v3 = (_BYTE *)(a1 + 48);
    do
    {
      if ((*v3 & 1) != 0)
      {
        v4 = 0xE400000000000000;
        v5 = 1600085855;
      }
      else
      {
        v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        object = v6._object;
        String.append(_:)(v6);
        swift_bridgeObjectRelease(object);
        v8._countAndFlagsBits = 58;
        v8._object = (void *)0xE100000000000000;
        String.append(_:)(v8);
        v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v10 = v9._object;
        String.append(_:)(v9);
        swift_bridgeObjectRelease(v10);
        v11._countAndFlagsBits = 62;
        v11._object = (void *)0xE100000000000000;
        String.append(_:)(v11);
        v12._countAndFlagsBits = 60;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        swift_bridgeObjectRelease(0xE100000000000000);
        v5 = 0;
        v4 = 0xE000000000000000;
      }
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        sub_F508C(v13 > 1, v14 + 1, 1);
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v5;
      v15[5] = v4;
      v3 += 24;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_E4B7C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  _QWORD *v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    v3 = _swiftEmptyArrayStorage;
    if (!v2)
      return (uint64_t)v3;
    v12 = _swiftEmptyArrayStorage;
    result = sub_F5114(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v5 = 0;
    v3 = v12;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
      }
      else
      {
        v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
        swift_retain();
      }
      swift_beginAccess(v6 + 16, v11, 0, 0);
      v7 = *(_QWORD *)(v6 + 16);
      swift_release();
      v12 = v3;
      v9 = v3[2];
      v8 = v3[3];
      if (v9 >= v8 >> 1)
      {
        sub_F5114(v8 > 1, v9 + 1, 1);
        v3 = v12;
      }
      ++v5;
      v3[2] = v9 + 1;
      v3[v9 + 4] = v7;
      if (v2 == v5)
        return (uint64_t)v3;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_E4CE4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v2)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      }
      else
      {
        v5 = *(_QWORD *)(a1 + 8 * v4 + 32);
        swift_retain(v5);
      }
      ++v4;
      v6 = *(_QWORD *)(v5 + 32);
      v7 = type metadata accessor for BookmarkPaginationEntity(0);
      v8 = swift_dynamicCastClassUnconditional(v6, v7, 0, 0, 0);
      swift_unknownObjectRetain(v6);
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v8);
      specialized ContiguousArray._endMutation()(v11);
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

void BookPaginationEntity.pageOffset(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = *a1;
  v2 = a1[1];
  NSNotFound.getter(a1);
  v3 = BookPaginationEntity.document(for:)(v1);
  if (v3)
  {
    v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
    swift_beginAccess(v3 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v6, 0, 0);
    v5 = *v4;
    swift_release();
    if (__OFADD__(v5, v2))
      __break(1u);
  }
}

uint64_t BookPaginationEntity.document(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;

  v2 = *(_QWORD *)(v1 + 104);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_3B7F8(a1), (v4 & 1) != 0))
    return swift_retain(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3));
  else
    return 0;
}

uint64_t BookPaginationEntity.pagePaginationEntity(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _QWORD v12[2];
  _BYTE v13[24];

  v2 = *(_QWORD *)(v1 + 104);
  if (!*(_QWORD *)(v2 + 16))
    return 0;
  v3 = a1[1];
  v4 = sub_3B7F8(*a1);
  if ((v5 & 1) == 0)
    return 0;
  v6 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4) + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v6, v13, 0, 0);
  v7 = *v6;
  v12[0] = v3;
  v12[1] = v7;
  swift_bridgeObjectRetain(v7);
  v8 = sub_319AC(&qword_3B7058);
  v9 = sub_3DCC0((unint64_t *)&qword_3BBB80, &qword_3B7058, (uint64_t)&protocol conformance descriptor for [A]);
  result = Collection.validate(index:)(v12, v8, v9);
  if ((result & 1) == 0)
  {
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v7);
    goto LABEL_8;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8)))
  {
    v11 = *(_QWORD *)(v7 + 8 * v3 + 32);
    swift_retain(v11);
LABEL_8:
    swift_bridgeObjectRelease(v7);
    return v11;
  }
  __break(1u);
  return result;
}

BookEPUB::SpreadPaginationEntity_optional __swiftcall BookPaginationEntity.spread(containing:)(BookEPUB::PageLocation containing)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *documentOrdinal;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  void (*v28)(char *, uint64_t, __n128);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  void *object;
  Swift::String v37;
  Swift::String v38;
  void *v39;
  Swift::String v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  os_log_t v49;
  uint64_t v50;
  int v51;
  uint64_t (*v52)(char *, uint64_t);
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  _BYTE v56[24];
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  BookEPUB::SpreadPaginationEntity_optional result;

  v3 = v2;
  documentOrdinal = (uint64_t *)containing.documentOrdinal;
  v5 = v1;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - v11;
  v13 = *documentOrdinal;
  v14 = documentOrdinal[1];
  v15 = *(_OWORD *)(v3 + 72);
  v55 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)v56 = v15;
  *(_QWORD *)&v56[16] = *(_QWORD *)(v3 + 88);
  v57 = v55;
  *(_QWORD *)&v53 = v13;
  *((_QWORD *)&v53 + 1) = v14;
  v16 = sub_13C030((uint64_t *)&v53, v55, v15);
  if ((v18 & 1) != 0)
  {
    if (qword_3B5760 != -1)
      swift_once(&qword_3B5760, sub_E66A8);
    v25 = sub_555F0(v6, (uint64_t)qword_3BBB60);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, v6);
    v26 = *(_QWORD *)(v3 + 88);
    swift_bridgeObjectRetain(v26);
    Logger.once(per:)((uint64_t)v12);
    v27 = swift_bridgeObjectRelease(v26);
    v28 = *(void (**)(char *, uint64_t, __n128))(v7 + 8);
    v28(v9, v6, v27);
    v29 = swift_retain_n(v3, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(22, -1);
      v51 = v32;
      v34 = v33;
      v50 = swift_slowAlloc(64, -1);
      v58 = v13;
      *(_QWORD *)&v59 = v50;
      *(_DWORD *)v34 = 136315394;
      v48 = v34 + 4;
      *(_QWORD *)&v53 = 60;
      *((_QWORD *)&v53 + 1) = 0xE100000000000000;
      v52 = (uint64_t (*)(char *, uint64_t))v28;
      v49 = v30;
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v35._object;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(object);
      v37._countAndFlagsBits = 58;
      v37._object = (void *)0xE100000000000000;
      String.append(_:)(v37);
      v58 = v14;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v39 = v38._object;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(v39);
      v40._countAndFlagsBits = 62;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      v41 = *((_QWORD *)&v53 + 1);
      *(_QWORD *)&v53 = sub_33524(v53, *((unint64_t *)&v53 + 1), (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, (char *)&v53 + 8, v48);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v34 + 12) = 2080;
      v42 = BookPaginationEntity.spreads(around:)(v13);
      v43 = Array.description.getter(v42, &type metadata for SpreadPaginationEntity);
      v45 = v44;
      swift_bridgeObjectRelease(v42);
      *(_QWORD *)&v53 = sub_33524(v43, v45, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, (char *)&v53 + 8, v34 + 14);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v45);
      v46 = v49;
      v47 = v50;
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      v21 = (void *)v52(v12, v6);
    }
    else
    {

      swift_release_n(v3, 2);
      v21 = (void *)((uint64_t (*)(char *, uint64_t))v28)(v12, v6);
    }
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  else
  {
    v19 = (uint64_t)v16;
    v20 = v17;
    v58 = *((_QWORD *)&v55 + 1);
    v59 = *(_OWORD *)&v56[8];
    sub_FA4F4(&v57);
    sub_FA4F4(&v58);
    sub_E45E8((uint64_t)&v59);
    sub_13AE64(v19, v20, &v53);
    sub_5B810(&v57);
    sub_5B810(&v58);
    v21 = (void *)sub_E48EC((uint64_t)&v59);
    v24 = v54;
    *(_OWORD *)v5 = v53;
    v5[2] = v24;
  }
  result.value.configuration._object = v23;
  result.value.configuration._countAndFlagsBits = v22;
  result.value.columns._rawValue = v21;
  return result;
}

BookEPUB::SpreadPaginationEntity_optional __swiftcall BookPaginationEntity.spread(_:offsetBy:)(BookEPUB::SpreadPaginationEntity _, Swift::Int offsetBy)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t countAndFlagsBits;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  Swift::String v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  Swift::String v61;
  Swift::String v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  _DWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  void *v77;
  Swift::String v78;
  Swift::String v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  void *v85;
  Swift::String v86;
  Swift::String v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  NSObject *log;
  os_log_type_t type;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104[2];
  char v105;
  __int128 v106;
  _BYTE v107[24];
  __int128 v108;
  _OWORD v109[2];
  BookEPUB::SpreadPaginationEntity_optional result;

  countAndFlagsBits = _.configuration._countAndFlagsBits;
  v5 = v2;
  v6 = *(_OWORD *)(v3 + 72);
  v106 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)v107 = v6;
  *(_QWORD *)&v107[16] = *(_QWORD *)(v3 + 88);
  v108 = v106;
  v7 = *(_QWORD *)_.columns._rawValue;
  v8 = *((_QWORD *)_.columns._rawValue + 1);
  v9 = *((_QWORD *)_.columns._rawValue + 2);
  v109[0] = *(_OWORD *)&v107[8];
  sub_FA4F4(&v108);
  sub_FA4F4((_QWORD *)&v108 + 1);
  sub_E45E8((uint64_t)v109);
  sub_E6090(v7, v8, v9);
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)&v100 = v7;
    *((_QWORD *)&v100 + 1) = v8;
    *(_QWORD *)&v101 = v9;
    SpreadPaginationEntity.firstLocation.getter((uint64_t)v104);
    if ((v105 & 1) != 0)
    {
      sub_5B810(&v108);
      sub_5B810((_QWORD *)&v108 + 1);
      sub_E48EC((uint64_t)v109);
      if (qword_3B5760 != -1)
        swift_once(&qword_3B5760, sub_E66A8);
      v18 = type metadata accessor for Logger(0);
      sub_555F0(v18, (uint64_t)qword_3BBB60);
      swift_bridgeObjectRetain_n(v7, 2);
      v19 = swift_bridgeObjectRetain_n(v9, 2);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v98 = v5;
        v22 = swift_slowAlloc(12, -1);
        v95 = swift_slowAlloc(32, -1);
        *(_DWORD *)v22 = 136315138;
        v104[0] = v95;
        *(_QWORD *)&v100 = 91;
        *((_QWORD *)&v100 + 1) = 0xE100000000000000;
        v23 = swift_bridgeObjectRetain(v7);
        v24 = sub_E49E0(v23);
        swift_bridgeObjectRelease(v7);
        v103 = v24;
        v25 = sub_319AC((uint64_t *)&unk_3B8C90);
        v26 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
        v27 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v25, v26);
        v29 = v28;
        swift_bridgeObjectRelease(v24);
        v30._countAndFlagsBits = v27;
        v30._object = v29;
        String.append(_:)(v30);
        swift_bridgeObjectRelease(v29);
        v31._countAndFlagsBits = 93;
        v31._object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        *(_QWORD *)&v100 = sub_33524(91, 0xE100000000000000, v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8, v22 + 4);
        swift_bridgeObjectRelease_n(v9, 2);
        swift_bridgeObjectRelease_n(v7, 2);
        v5 = v98;
        swift_bridgeObjectRelease(0xE100000000000000);
        _os_log_impl(&dword_0, v20, v21, "Cannot locate spread %s, and spread doesn't have a first location", (uint8_t *)v22, 0xCu);
        v32 = (char *)&type metadata for Any + 8;
        v33 = v95;
        v34 = v95;
        v35 = 1;
LABEL_24:
        swift_arrayDestroy(v34, v35, v32);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v22, -1, -1);

        goto LABEL_31;
      }

      swift_bridgeObjectRelease_n(v9, 2);
      v47 = (void *)swift_bridgeObjectRelease_n(v7, 2);
    }
    else
    {
      sub_E95BC(v104, (uint64_t *)&v100);
      v36 = v100;
      if (!(_QWORD)v100)
      {
        if (qword_3B5760 != -1)
          swift_once(&qword_3B5760, sub_E66A8);
        v51 = type metadata accessor for Logger(0);
        sub_555F0(v51, (uint64_t)qword_3BBB60);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v9);
        sub_FA4F4(&v108);
        sub_FA4F4((_QWORD *)&v108 + 1);
        sub_E45E8((uint64_t)v109);
        swift_bridgeObjectRetain(v7);
        v52 = swift_bridgeObjectRetain(v9);
        v20 = Logger.logObject.getter(v52);
        v53 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v20, v53))
        {
          swift_bridgeObjectRelease_n(v9, 2);
          swift_bridgeObjectRelease_n(v7, 2);
          sub_5B810(&v108);
          sub_5B810((_QWORD *)&v108 + 1);
          sub_E48EC((uint64_t)v109);
          sub_5B810(&v108);
          sub_5B810((_QWORD *)&v108 + 1);
          sub_E48EC((uint64_t)v109);

          goto LABEL_31;
        }
        v22 = swift_slowAlloc(22, -1);
        v96 = swift_slowAlloc(64, -1);
        v104[0] = v96;
        *(_DWORD *)v22 = 136315394;
        *(_QWORD *)&v100 = 91;
        *((_QWORD *)&v100 + 1) = 0xE100000000000000;
        v54 = swift_bridgeObjectRetain(v7);
        v55 = sub_E49E0(v54);
        swift_bridgeObjectRelease(v7);
        v103 = v55;
        v56 = sub_319AC((uint64_t *)&unk_3B8C90);
        v57 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
        v58 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v56, v57);
        v60 = v59;
        swift_bridgeObjectRelease(v55);
        v61._countAndFlagsBits = v58;
        v61._object = v60;
        String.append(_:)(v61);
        swift_bridgeObjectRelease(v60);
        v62._countAndFlagsBits = 93;
        v62._object = (void *)0xE100000000000000;
        String.append(_:)(v62);
        v63 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = sub_33524(v100, *((unint64_t *)&v100 + 1), v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8, v22 + 4);
        swift_bridgeObjectRelease_n(v9, 2);
        swift_bridgeObjectRelease_n(v7, 2);
        swift_bridgeObjectRelease(v63);
        *(_WORD *)(v22 + 12) = 2080;
        v100 = v106;
        v101 = *(_OWORD *)v107;
        v102 = *(_QWORD *)&v107[16];
        sub_FA4F4(&v108);
        sub_FA4F4((_QWORD *)&v108 + 1);
        sub_E45E8((uint64_t)v109);
        v64 = String.init<A>(describing:)(&v100, &type metadata for SpreadCollection);
        v66 = v65;
        *(_QWORD *)&v100 = sub_33524(v64, v65, v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8, v22 + 14);
        swift_bridgeObjectRelease(v66);
        sub_5B810(&v108);
        sub_5B810((_QWORD *)&v108 + 1);
        sub_E48EC((uint64_t)v109);
        sub_5B810(&v108);
        sub_5B810((_QWORD *)&v108 + 1);
        sub_E48EC((uint64_t)v109);
        _os_log_impl(&dword_0, v20, v53, "Cannot locate spread %s and there is no spread nearest its first location. spreads: %s", (uint8_t *)v22, 0x16u);
        v32 = (char *)&type metadata for Any + 8;
        v33 = v96;
        v34 = v96;
        v35 = 2;
        goto LABEL_24;
      }
      v38 = *((_QWORD *)&v100 + 1);
      v37 = v101;
      sub_E6090(v100, *((uint64_t *)&v100 + 1), v101);
      if ((v41 & 1) == 0)
      {
        v13 = v39;
        v14 = v40;
        sub_5B838(v36, v38, v37);
        goto LABEL_3;
      }
      sub_5B810(&v108);
      sub_5B810((_QWORD *)&v108 + 1);
      sub_E48EC((uint64_t)v109);
      if (qword_3B5760 != -1)
        swift_once(&qword_3B5760, sub_E66A8);
      v67 = type metadata accessor for Logger(0);
      sub_555F0(v67, (uint64_t)qword_3BBB60);
      swift_bridgeObjectRetain_n(v7, 2);
      swift_bridgeObjectRetain_n(v9, 2);
      v68 = sub_5B864(v36, v38, v37);
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (_DWORD *)swift_slowAlloc(22, -1);
        v97 = swift_slowAlloc(64, -1);
        v104[0] = v97;
        v89 = v71;
        *v71 = 136315394;
        v91 = v71 + 1;
        v99 = v5;
        *(_QWORD *)&v100 = 91;
        *((_QWORD *)&v100 + 1) = 0xE100000000000000;
        v72 = swift_bridgeObjectRetain(v7);
        type = v70;
        v73 = sub_E49E0(v72);
        swift_bridgeObjectRelease(v7);
        v103 = v73;
        log = v69;
        v74 = sub_319AC((uint64_t *)&unk_3B8C90);
        v90 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
        v75 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v74, v90);
        v92 = v37;
        v77 = v76;
        swift_bridgeObjectRelease(v73);
        v78._countAndFlagsBits = v75;
        v78._object = v77;
        String.append(_:)(v78);
        swift_bridgeObjectRelease(v77);
        v79._countAndFlagsBits = 93;
        v79._object = (void *)0xE100000000000000;
        String.append(_:)(v79);
        v80 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = sub_33524(v100, *((unint64_t *)&v100 + 1), v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8, v91);
        swift_bridgeObjectRelease_n(v9, 2);
        swift_bridgeObjectRelease_n(v7, 2);
        swift_bridgeObjectRelease(v80);
        *((_WORD *)v89 + 6) = 2080;
        *(_QWORD *)&v100 = 91;
        *((_QWORD *)&v100 + 1) = 0xE100000000000000;
        v81 = swift_bridgeObjectRetain(v36);
        v82 = sub_E49E0(v81);
        swift_bridgeObjectRelease(v36);
        v103 = v82;
        v83 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v74, v90);
        v85 = v84;
        swift_bridgeObjectRelease(v82);
        v86._countAndFlagsBits = v83;
        v86._object = v85;
        String.append(_:)(v86);
        swift_bridgeObjectRelease(v85);
        v87._countAndFlagsBits = 93;
        v87._object = (void *)0xE100000000000000;
        String.append(_:)(v87);
        v88 = *((_QWORD *)&v100 + 1);
        *(_QWORD *)&v100 = sub_33524(v100, *((unint64_t *)&v100 + 1), v104);
        v5 = v99;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8, (char *)v89 + 14);
        swift_bridgeObjectRelease(v88);
        sub_5B838(v36, v38, v92);
        sub_5B838(v36, v38, v92);
        _os_log_impl(&dword_0, log, type, "Couldnt locate spread %s, and cannot locate the nearest spread %s", (uint8_t *)v89, 0x16u);
        swift_arrayDestroy(v97, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v97, -1, -1);
        swift_slowDealloc(v89, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n(v9, 2);
        swift_bridgeObjectRelease_n(v7, 2);
        sub_5B838(v36, v38, v37);
        sub_5B838(v36, v38, v37);

      }
    }
LABEL_31:
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    goto LABEL_32;
  }
  v13 = v10;
  v14 = v11;
LABEL_3:
  v15 = v108;
  v16 = *(_QWORD *)v107;
  if (countAndFlagsBits < 1)
    v17 = 0;
  else
    v17 = sub_13BE60(v108, *(uint64_t *)v107);
  v42 = sub_FAF88(v13, v14, countAndFlagsBits, v17, v15, v16);
  if ((v44 & 1) != 0 || (v45 = v42, v46 = v43, v42 == sub_13BE60(v15, v16)) && v46 == *(_QWORD *)(v15 + 16))
  {
    sub_5B810(&v108);
    sub_5B810((_QWORD *)&v108 + 1);
    v47 = (void *)sub_E48EC((uint64_t)v109);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
  }
  else
  {
    sub_13AE64(v45, v46, &v100);
    sub_5B810(&v108);
    sub_5B810((_QWORD *)&v108 + 1);
    v47 = (void *)sub_E48EC((uint64_t)v109);
    v50 = v101;
    *(_OWORD *)v5 = v100;
    v5[2] = v50;
  }
LABEL_32:
  result.value.configuration._object = v49;
  result.value.configuration._countAndFlagsBits = v48;
  result.value.columns._rawValue = v47;
  return result;
}

uint64_t BookPaginationEntity.document(with:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *a1;
  v3 = *(_QWORD *)(v1 + 40);
  if ((unint64_t)v3 >> 62)
    goto LABEL_22;
  v4 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain_n(v3, 2);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v12))
  {
    if ((v3 & 0xC000000000000001) == 0)
    {
      v5 = *(_QWORD *)(v3 + 32);
      swift_retain(v5);
      goto LABEL_5;
    }
    while (1)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
LABEL_5:
      if (*(_QWORD *)(v5 + 16) == v2)
      {
LABEL_6:
        swift_bridgeObjectRelease_n(v3, 2);
        return v5;
      }
      swift_release(v5);
      if (v4 == 1)
        goto LABEL_18;
      if ((v3 & 0xC000000000000001) != 0)
        break;
      v9 = 5;
      while (1)
      {
        v10 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
          break;
        v5 = *(_QWORD *)(v3 + 8 * v9);
        if (*(_QWORD *)(v5 + 16) == v2)
        {
          swift_retain(*(_QWORD *)(v3 + 8 * v9));
          goto LABEL_6;
        }
        ++v9;
        if (v10 == v4)
          goto LABEL_18;
      }
      __break(1u);
    }
    v6 = 1;
    while (1)
    {
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v3);
      v8 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      v5 = v7;
      if (*(_QWORD *)(v7 + 16) == v2)
        goto LABEL_6;
      swift_unknownObjectRelease(v7);
      ++v6;
      if (v8 == v4)
        goto LABEL_18;
    }
    __break(1u);
LABEL_22:
    if (v3 < 0)
      v12 = v3;
    else
      v12 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v3, 2);
  }
LABEL_18:
  swift_bridgeObjectRelease_n(v3, 2);
  return 0;
}

_QWORD *BookPaginationEntity.bookmarks(for:)(__int128 *a1, uint64_t a2)
{
  __int128 v3;

  v3 = *a1;
  return BookPaginationEntity.bookmarks(for:)((uint64_t *)&v3, a2);
}

void sub_E6090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  __int16 v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  char v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v40[0] = a1;
  v40[1] = a2;
  v40[2] = a3;
  sub_13B048(v40);
  if ((v7 & 0x100) != 0)
  {
    v34 = a3;
    v8 = 0;
    v9 = 0;
    v10 = *v3;
    v11 = *(_QWORD *)(*v3 + 16);
    v12 = *v3 + 24 * v11;
    v35 = (_QWORD *)(v12 + 16);
    v36 = (_QWORD *)(v12 + 24);
    while (1)
    {
      if (v11)
      {
        v14 = v3[2];
        v15 = v14 - 1;
        if (__OFSUB__(v14, 1))
          goto LABEL_52;
        v16 = *v35 + *v36;
        if (__OFADD__(*v35, *v36))
          goto LABEL_53;
        v17 = __OFADD__(v15, v16);
        v18 = v15 + v16;
        if (v17)
          goto LABEL_54;
        v17 = __OFADD__(v18, v14);
        v19 = v18 + v14;
        if (v17)
          goto LABEL_55;
        v17 = __OFSUB__(v19, 1);
        v20 = v19 - 1;
        if (v17)
          goto LABEL_56;
        if (!v14)
          goto LABEL_57;
        if (v20 == 0x8000000000000000 && v14 == -1)
          goto LABEL_60;
        if (v9 == v20 / v14 && v8 == v11)
          return;
      }
      else if (!(v9 | v8))
      {
        return;
      }
      sub_13AE64(v9, v8, &v37);
      v23 = v37;
      v24 = v39;
      v25 = *(_QWORD *)(v37 + 16);
      if (v25 == *(_QWORD *)(a1 + 16))
      {
        if (v25)
          v26 = v37 == a1;
        else
          v26 = 1;
        if (!v26)
        {
          v28 = (_BYTE *)(v37 + 48);
          v29 = (_BYTE *)(a1 + 48);
          do
          {
            if (*v28 == 1)
            {
              if ((*v29 & 1) == 0)
                goto LABEL_41;
            }
            else
            {
              if ((*v29 & 1) != 0)
                goto LABEL_41;
              if (*((_QWORD *)v28 - 2) != *((_QWORD *)v29 - 2) || *((_QWORD *)v28 - 1) != *((_QWORD *)v29 - 1))
                goto LABEL_41;
            }
            v29 += 24;
            v28 += 24;
            --v25;
          }
          while (v25);
        }
        if (v38 == a2 && v39 == v34)
        {
          swift_bridgeObjectRelease(v34);
          swift_bridgeObjectRelease(v23);
          return;
        }
        v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, a2, v34, 0);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v23);
        if ((v27 & 1) != 0)
          return;
      }
      else
      {
LABEL_41:
        swift_bridgeObjectRelease(v39);
        swift_bridgeObjectRelease(v23);
      }
      v17 = __OFADD__(v9++, 1);
      if (v17)
        break;
      if (v9)
      {
        v31 = v3[2];
        v32 = v9 * v31;
        if ((unsigned __int128)(v9 * (__int128)v31) >> 64 != (v9 * v31) >> 63)
          goto LABEL_58;
        v17 = __OFSUB__(v31, 1);
        v33 = v31 - 1;
        if (v17)
          goto LABEL_59;
        v13 = v32 - v33;
        if (__OFSUB__(v32, v33))
        {
          __break(1u);
          return;
        }
      }
      else
      {
        v13 = 0;
      }
      v8 = sub_13BE64(v13, v8, v10);
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
  }
}

uint64_t sub_E630C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 32));
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
    v13 = 0;
LABEL_17:
    swift_bridgeObjectRelease_n(v7, 2);
    return v13;
  }
  v11 = v9;
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v11);
  v13 = 0;
  if ((v12 & 1) == 0)
  {
    v14 = v2 - 1;
    while (1)
    {
      if (v14 == v13)
        return 0;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a2 + 40 + 8 * v13));
      v7 = v16;
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v15 == v17 && v7 == v18)
        break;
      v20 = v18;
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v7, v17, v18, 0);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v20);
      ++v13;
      if ((v21 & 1) != 0)
        return v13;
    }
    ++v13;
    goto LABEL_17;
  }
  return v13;
}

uint64_t sub_E6454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(_QWORD *)(a2 + 40 + 8 * result++);
    if (v6 == a1)
      return result;
  }
  return 0;
}

uint64_t sub_E64B8(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    __asm { BR              X9 }
  return 0;
}

uint64_t sub_E66A8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3BBB60);
  sub_555F0(v0, (uint64_t)qword_3BBB60);
  if (qword_3B56B8 != -1)
    swift_once(&qword_3B56B8, sub_5EFF4);
  return Logger.init(_:)((id)qword_3CEEF8);
}

uint64_t sub_E6728()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_E6758()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return *(_QWORD *)(v0 + 24);
}

uint64_t sub_E6788(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE v7[24];
  _BYTE v8[24];

  v2 = *a1;
  v3 = *a2;
  v4 = (uint64_t *)(*a2 + 48);
  swift_beginAccess(v4, v8, 1, 0);
  v5 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(v3 + 48) = v2;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRelease(v5);
  swift_beginAccess(v4, v7, 33, 0);
  sub_11B748(v4);
  return swift_endAccess(v7);
}

void sub_E6810(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_1D34D0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v4[0] = v2 + 32;
  v4[1] = v3;
  sub_F76F4(v4);
  *a1 = v2;
}

uint64_t sub_E6878(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1D5858(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_F7D7C(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

uint64_t sub_E68F0(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1D34E4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_F83EC(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

uint64_t sub_E6968()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 48, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_E699C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 72);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v4);
}

void sub_E69E4(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1[7];
  v3 = v1[8];
  v5 = v1[9];
  v4 = v1[10];
  v6 = v1[11];
  v7 = *a1;
  v12 = a1[1];
  v13 = v7;
  v11 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(v1 + 7) = *(_OWORD *)a1;
  *(_OWORD *)(v1 + 9) = *((_OWORD *)a1 + 1);
  v1[11] = a1[4];
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  sub_FA4F4(&v13);
  sub_FA4F4(&v12);
  sub_E45E8((uint64_t)&v11);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  sub_5B810(&v13);
  sub_5B810(&v12);
  sub_E48EC((uint64_t)&v11);
  if (v5 != v1[9])
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return;
  }
  v8 = v1[10];
  v9 = v1[11];
  if (v4 == v8 && v6 == v9)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2);
    return;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v8, v9, 0);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  if ((v10 & 1) == 0)
    goto LABEL_8;
}

void BookPaginationEntity.navigationDirection.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 96);
}

void BookPaginationEntity.paginationMode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 97);
}

uint64_t BookPaginationEntity.hasPhysicalPages.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 98);
}

uint64_t BookEntity.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 88));
  return v1;
}

uint64_t sub_E6B6C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 112, v2, 0, 0);
  return *(unsigned __int8 *)(v0 + 112);
}

uint64_t sub_E6B9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  swift_beginAccess(*a2 + 120, v7, 1, 0);
  v5 = *(_QWORD *)(v4 + 128);
  *(_QWORD *)(v4 + 120) = v3;
  *(_QWORD *)(v4 + 128) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_E6BF8()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 120, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
  return v1;
}

uint64_t sub_E6C40(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess(*a2 + 136, v6, 1, 0);
  v4 = *(_QWORD *)(v3 + 136);
  *(_QWORD *)(v3 + 136) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_E6C9C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 136, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 136));
}

uint64_t BookPaginationEntity.__allocating_init(paginationComplete:pageCount:columnCount:documents:chapters:navigationDirection:paginationMode:hasPhysicalPages:configurationKey:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, _BYTE *a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v18;

  v18 = swift_allocObject(v10, 144);
  BookPaginationEntity.init(paginationComplete:pageCount:columnCount:documents:chapters:navigationDirection:paginationMode:hasPhysicalPages:configurationKey:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return v18;
}

void BookPaginationEntity.init(paginationComplete:pageCount:columnCount:documents:chapters:navigationDirection:paginationMode:hasPhysicalPages:configurationKey:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6, _BYTE *a7, char a8, uint64_t a9, uint64_t a10)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  uint64_t v71;
  unint64_t v72;
  uint64_t v74[4];
  _BYTE v75[24];
  _BYTE v76[24];
  _OWORD v77[2];
  uint64_t v78;

  LOBYTE(v11) = a8;
  LOBYTE(v13) = *a6;
  LOBYTE(v14) = *a7;
  *(_QWORD *)(v10 + 48) = _swiftEmptyArrayStorage;
  isUniquelyReferenced_nonNull_native = v10 + 48;
  *(_BYTE *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 120) = 0;
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &_swiftEmptyDictionarySingleton;
  *(_BYTE *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  v16 = (unint64_t)a4 >> 62;
  if ((unint64_t)a4 >> 62)
  {
    if (a4 < 0)
      v42 = a4;
    else
      v42 = a4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a4);
    v17 = _CocoaArrayWrapper.endIndex.getter(v42);
    v71 = a5;
    v72 = v10;
    if (v17)
      goto LABEL_3;
LABEL_19:
    v41 = a4;
    swift_bridgeObjectRelease(a4);
    v40 = 0;
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((char *)&dword_10 + (a4 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a4);
  v71 = a5;
  v72 = v10;
  if (!v17)
    goto LABEL_19;
LABEL_3:
  *(_QWORD *)&v77[0] = _swiftEmptyArrayStorage;
  sub_F50F0(0, v17 & ~(v17 >> 63), 0);
  if (v17 < 0)
  {
    __break(1u);
LABEL_60:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
    goto LABEL_61;
  }
  v65 = v10 + 48;
  v66 = v16;
  v67 = v14;
  v68 = v13;
  v69 = v11;
  v18 = *(_QWORD **)&v77[0];
  v19 = a4;
  if ((a4 & 0xC000000000000001) != 0)
  {
    v20 = 0;
    do
    {
      v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v19);
      v22 = *(_QWORD *)(v21 + 16);
      v23 = (uint64_t *)(v21 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
      swift_beginAccess(v21 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v76, 0, 0);
      v24 = *v23;
      v25 = (uint64_t *)(v21 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
      swift_beginAccess(v21 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v75, 0, 0);
      v26 = *v25;
      swift_unknownObjectRelease(v21);
      *(_QWORD *)&v77[0] = v18;
      v28 = v18[2];
      v27 = v18[3];
      if (v28 >= v27 >> 1)
      {
        sub_F50F0(v27 > 1, v28 + 1, 1);
        v19 = a4;
        v18 = *(_QWORD **)&v77[0];
      }
      ++v20;
      v18[2] = v28 + 1;
      v29 = &v18[3 * v28];
      v29[4] = v22;
      v29[5] = v24;
      v29[6] = v26;
    }
    while (v17 != v20);
  }
  else
  {
    v30 = 0;
    do
    {
      v31 = *(_QWORD *)(v19 + 8 * v30 + 32);
      v32 = *(_QWORD *)(v31 + 16);
      v33 = (uint64_t *)(v31 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
      swift_beginAccess(v31 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v76, 0, 0);
      v34 = *v33;
      v35 = (uint64_t *)(v31 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
      swift_beginAccess(v31 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v75, 0, 0);
      v36 = *v35;
      *(_QWORD *)&v77[0] = v18;
      v38 = v18[2];
      v37 = v18[3];
      if (v38 >= v37 >> 1)
      {
        sub_F50F0(v37 > 1, v38 + 1, 1);
        v19 = a4;
        v18 = *(_QWORD **)&v77[0];
      }
      ++v30;
      v18[2] = v38 + 1;
      v39 = &v18[3 * v38];
      v39[4] = v32;
      v39[5] = v34;
      v39[6] = v36;
    }
    while (v17 != v30);
  }
  swift_bridgeObjectRelease(v19);
  v40 = 0;
  v41 = v19;
  v10 = v72;
  LOBYTE(v13) = v68;
  LOBYTE(v11) = v69;
  LOBYTE(v14) = v67;
  isUniquelyReferenced_nonNull_native = v65;
  v16 = v66;
LABEL_20:
  sub_13C208((uint64_t)v18, a3, a9, a10, v77);
  swift_bridgeObjectRelease(v18);
  v43 = v77[1];
  *(_OWORD *)(v10 + 56) = v77[0];
  *(_OWORD *)(v10 + 72) = v43;
  *(_QWORD *)(v10 + 88) = v78;
  *(_QWORD *)(v10 + 40) = v41;
  v44 = v71;
  if (v71 < 0 || (v71 & 0x4000000000000000) != 0)
    goto LABEL_58;
  v45 = v71 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v71);
LABEL_23:
  v74[0] = v45;
  sub_E68F0(v74);
  if (!v40)
  {
    swift_bridgeObjectRelease(v44);
    v46 = v74[0];
    swift_beginAccess(isUniquelyReferenced_nonNull_native, v74, 1, 0);
    v47 = *(_QWORD *)(v10 + 48);
    *(_QWORD *)(v10 + 48) = v46;
    swift_bridgeObjectRelease(v47);
    *(_BYTE *)(v10 + 96) = v13;
    *(_BYTE *)(v10 + 97) = v14;
    *(_BYTE *)(v10 + 98) = v11 & 1;
    v10 = sub_3D0F8(_swiftEmptyArrayStorage);
    if (v16)
    {
      v48 = a4;
      if (a4 < 0)
        v49 = a4;
      else
        v49 = a4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(a4, 2);
      v40 = _CocoaArrayWrapper.endIndex.getter(v49);
      swift_bridgeObjectRelease(a4);
      if (!v40)
        goto LABEL_54;
    }
    else
    {
      v48 = a4;
      v40 = *(_QWORD *)((char *)&dword_10 + (a4 & 0xFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain(a4);
      if (!v40)
      {
LABEL_54:
        swift_bridgeObjectRelease_n(a4, 2);
        *(_QWORD *)(v72 + 104) = v10;
        *(_BYTE *)(v72 + 112) = 0;
        sub_E7364();
        return;
      }
    }
    v13 = v48 & 0xC000000000000001;
    v50 = 4;
    while (1)
    {
      v16 = v50 - 4;
      if (v13)
      {
        v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v50 - 4, a4);
        v11 = v50 - 3;
        if (__OFADD__(v16, 1))
          goto LABEL_55;
      }
      else
      {
        v14 = *(_QWORD *)(a4 + 8 * v50);
        swift_retain();
        v11 = v50 - 3;
        if (__OFADD__(v16, 1))
        {
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          swift_bridgeObjectRetain(a4);
          swift_bridgeObjectRetain(v44);
          v45 = (uint64_t)sub_F4784(v64, (void (*)(_QWORD))type metadata accessor for ChapterPaginationEntity, (unint64_t *)&unk_3BBFF0, &qword_3BBB88, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_F9908);
          swift_bridgeObjectRelease(v44);
          goto LABEL_23;
        }
      }
      v16 = *(_QWORD *)(v14 + 16);
      if (*(_QWORD *)(v10 + 16))
      {
        sub_3B7F8(*(_QWORD *)(v14 + 16));
        if ((v52 & 1) != 0)
        {
          swift_release();
          goto LABEL_34;
        }
      }
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      v54 = sub_3B7F8(v16);
      v55 = *(_QWORD *)(v10 + 16);
      v56 = (v53 & 1) == 0;
      v57 = v55 + v56;
      if (__OFADD__(v55, v56))
        goto LABEL_56;
      v44 = v53;
      if (*(_QWORD *)(v10 + 24) >= v57)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v53 & 1) == 0)
            goto LABEL_50;
        }
        else
        {
          sub_F2B68(&qword_3B6678);
          if ((v44 & 1) == 0)
            goto LABEL_50;
        }
      }
      else
      {
        sub_EE76C(v57, isUniquelyReferenced_nonNull_native, &qword_3B6678);
        v58 = sub_3B7F8(v16);
        if ((v44 & 1) != (v59 & 1))
          goto LABEL_60;
        v54 = v58;
        if ((v44 & 1) == 0)
        {
LABEL_50:
          *(_QWORD *)(v10 + 8 * (v54 >> 6) + 64) |= 1 << v54;
          v60 = 8 * v54;
          *(_QWORD *)(*(_QWORD *)(v10 + 48) + v60) = v16;
          *(_QWORD *)(*(_QWORD *)(v10 + 56) + v60) = v14;
          v61 = *(_QWORD *)(v10 + 16);
          v62 = __OFADD__(v61, 1);
          v63 = v61 + 1;
          if (v62)
            goto LABEL_57;
          *(_QWORD *)(v10 + 16) = v63;
          goto LABEL_33;
        }
      }
      v51 = *(_QWORD *)(v10 + 56);
      v44 = 8 * v54;
      swift_release();
      *(_QWORD *)(v51 + 8 * v54) = v14;
LABEL_33:
      swift_release();
      swift_bridgeObjectRelease(0x8000000000000000);
LABEL_34:
      ++v50;
      if (v11 == v40)
        goto LABEL_54;
    }
  }
LABEL_61:
  swift_release();
  __break(1u);
}

void sub_E7364()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];
  _QWORD v38[4];
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  sub_E7910();
  v2 = *(_QWORD *)(v0 + 40);
  if ((unint64_t)v2 >> 62)
    goto LABEL_45;
  v3 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain_n(v2, 2);
  if (v3)
    goto LABEL_3;
LABEL_11:
  swift_bridgeObjectRelease_n(v2, 2);
  v9 = v36;
  if ((*(_BYTE *)(v36 + 32) & 1) == 0)
    goto LABEL_58;
  v39 = (uint64_t)_swiftEmptyArrayStorage;
  if (!((unint64_t)v2 >> 62))
  {
    v10 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v2);
    if (v10)
      goto LABEL_14;
LABEL_29:
    swift_bridgeObjectRelease(v2);
    v17 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_30:
    swift_bridgeObjectRetain(v17);
    if (v17 < 0 || (v19 = (_QWORD *)v17, (v17 & 0x4000000000000000) != 0))
    {
      v19 = sub_F4784(v17, (void (*)(_QWORD))type metadata accessor for DocumentPaginationEntity, (unint64_t *)&unk_3BBE60, &qword_3BBE58, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_F98B0);
      swift_release();
    }
    v39 = (uint64_t)v19;
    sub_E6878(&v39);
    swift_release();
    v20 = v39;
    if (v39 < 0 || (v39 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v39);
      v21 = _CocoaArrayWrapper.endIndex.getter(v28);
      swift_release();
      if (v21)
      {
LABEL_35:
        if (v21 >= 1)
        {
          v1 = 0;
          v22 = 0;
          while (1)
          {
            if ((v20 & 0xC000000000000001) != 0)
            {
              v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
            }
            else
            {
              v23 = *(_QWORD *)(v20 + 8 * v22 + 32);
              swift_retain();
            }
            v24 = (uint64_t *)(v23 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
            swift_beginAccess(v23 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v38, 0, 0);
            v25 = *v24;
            swift_release();
            v26 = __OFADD__(v1, v25);
            v1 += v25;
            if (v26)
              break;
            if (v21 == ++v22)
              goto LABEL_53;
          }
          while (1)
          {
            __break(1u);
LABEL_45:
            if (v2 < 0)
              v27 = v2;
            else
              v27 = v2 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain_n(v2, 2);
            v3 = _CocoaArrayWrapper.endIndex.getter(v27);
            if (!v3)
              goto LABEL_11;
LABEL_3:
            v4 = 4;
            while (1)
            {
              v5 = v4 - 4;
              if ((v2 & 0xC000000000000001) == 0)
                break;
              v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2);
              v7 = v4 - 3;
              if (__OFADD__(v5, 1))
                goto LABEL_43;
LABEL_9:
              KeyPath = swift_getKeyPath(&unk_2EBE78);
              v1 = swift_getKeyPath(&unk_2EBEA0);
              static Published.subscript.getter(&v39, v6, KeyPath);
              swift_release();
              swift_release();
              swift_release();
              if (v39 != 1)
              {
                swift_bridgeObjectRelease_n(v2, 2);
                v16 = 0;
                v9 = v36;
                goto LABEL_60;
              }
              ++v4;
              if (v7 == v3)
                goto LABEL_11;
            }
            v6 = *(_QWORD *)(v2 + 8 * v4);
            swift_retain();
            v7 = v4 - 3;
            if (!__OFADD__(v5, 1))
              goto LABEL_9;
LABEL_43:
            __break(1u);
          }
        }
        goto LABEL_62;
      }
    }
    else
    {
      v21 = *(_QWORD *)(v39 + 16);
      if (v21)
        goto LABEL_35;
    }
    v1 = 0;
LABEL_53:
    swift_release();
    v9 = v36;
    swift_beginAccess(v36 + 24, v37, 0, 0);
    if (*(_QWORD *)(v36 + 24) == v1)
      goto LABEL_59;
    if (qword_3B5760 == -1)
      goto LABEL_55;
    goto LABEL_63;
  }
  if (v2 < 0)
    v18 = v2;
  else
    v18 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v10 = _CocoaArrayWrapper.endIndex.getter(v18);
  if (!v10)
    goto LABEL_29;
LABEL_14:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0)
      {
        v1 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
      }
      else
      {
        v1 = *(_QWORD *)(v2 + 8 * i + 32);
        swift_retain();
      }
      v14 = swift_getKeyPath(&unk_2EBE78);
      swift_getKeyPath(&unk_2EBEA0);
      static Published.subscript.getter(v38, v1, v14);
      swift_release();
      swift_release();
      if (LOBYTE(v38[0]) == 1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
        v12 = *(_QWORD *)(v39 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
        v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v1);
        specialized ContiguousArray._endMutation()(v13);
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease(v2);
    v17 = v39;
    goto LABEL_30;
  }
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  swift_once(&qword_3B5760, sub_E66A8);
LABEL_55:
  v29 = type metadata accessor for Logger(0);
  sub_555F0(v29, (uint64_t)qword_3BBB60);
  v30 = swift_retain();
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(22, -1);
    *(_DWORD *)v33 = 134218240;
    v39 = *(_QWORD *)(v9 + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v33 + 4);
    swift_release();
    *(_WORD *)(v33 + 12) = 2048;
    v39 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v33 + 14);
    _os_log_impl(&dword_0, v31, v32, "Mismatch in our previously calculated pageCount: %ld and checkedPageCount:%ld -- recalculating", (uint8_t *)v33, 0x16u);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_release();
  }
LABEL_58:
  sub_E7D44();
LABEL_59:
  v16 = 1;
LABEL_60:
  v34 = *(_QWORD *)(v9 + 64);
  v35 = *(_QWORD *)(v9 + 88);
  v39 = *(_QWORD *)(v9 + 56);
  v40 = v34;
  v41 = *(_OWORD *)(v9 + 72);
  v42 = v35;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  sub_EBB0C(v2);
  sub_E69E4(&v39);
  swift_beginAccess(v9 + 16, &v39, 1, 0);
  *(_BYTE *)(v9 + 16) = v16;
}

void sub_E7910()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  Swift::Int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  Swift::Int v39;
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[24];
  _BYTE v43[24];

  v3 = *(_QWORD *)(v0 + 40);
  v4 = (unint64_t)v3 >> 62;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v9 = *(_QWORD *)(v0 + 40);
    else
      v9 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    if (_CocoaArrayWrapper.endIndex.getter(v9))
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease(v3);
    if (v4)
      goto LABEL_17;
    goto LABEL_7;
  }
  v5 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v3);
  if (!v5)
    goto LABEL_16;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_66;
  if (!*(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8)))
  {
    __break(1u);
    goto LABEL_68;
  }
  v6 = *(_QWORD *)(v3 + 32);
  swift_retain();
  while (1)
  {
    swift_bridgeObjectRelease(v3);
    v7 = (_QWORD *)(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
    swift_beginAccess(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v43, 1, 0);
    *v7 = 0;
    swift_release();
    if (!v4)
      break;
LABEL_17:
    if (v3 < 0)
      v10 = v3;
    else
      v10 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v3, 3);
    v1 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v3);
    if (v1 < 0)
      goto LABEL_70;
    if (v1 >= 1)
      v11 = 1;
    else
      v11 = v1;
    swift_bridgeObjectRetain(v3);
    v12 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v3);
    v39 = v11;
    if (v12 < v11)
      goto LABEL_64;
    swift_bridgeObjectRetain(v3);
    v13 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v3);
    if (v13 >= v1)
      goto LABEL_26;
LABEL_65:
    __break(1u);
LABEL_66:
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
LABEL_7:
  v1 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
  if (v1 >= 1)
    v8 = 1;
  else
    v8 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain_n(v3, 2);
  v39 = v8;
  if (v1 < v8)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
LABEL_26:
  v38 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0 && (unint64_t)v1 >= 2)
  {
    type metadata accessor for DocumentPaginationEntity(0);
    v14 = v39;
    do
    {
      v15 = v14 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v14);
      v14 = v15;
    }
    while (v1 != v15);
  }
  if (v4)
  {
    if (v3 < 0)
      v16 = v3;
    else
      v16 = v3 & 0xFFFFFFFFFFFFFF8;
    v17 = swift_bridgeObjectRetain(v3);
    v36 = _CocoaArrayWrapper.subscript.getter(v39, v1, v16, v17);
    v2 = v18;
    v39 = v19;
    v21 = v20;
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRetain(v3);
    v22 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(v3);
    v1 = v21 >> 1;
    if (!v22)
      goto LABEL_59;
  }
  else
  {
    v2 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
    v36 = v3 & 0xFFFFFFFFFFFFFF8;
    if (!*(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8)))
      goto LABEL_59;
  }
  if (v38)
  {
LABEL_68:
    v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
    goto LABEL_40;
  }
  if (*(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8)))
  {
    v23 = *(_QWORD *)(v3 + 32);
    swift_retain();
LABEL_40:
    if (v1 == v39)
    {
LABEL_58:
      swift_release();
LABEL_59:
      swift_unknownObjectRelease(v36);
      swift_bridgeObjectRelease(v3);
      return;
    }
    if (v4)
    {
      v37 = v3 & 0xFFFFFFFFFFFFFF8;
      if (v3 < 0)
        v25 = v3;
      else
        v25 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v3);
      v24 = _CocoaArrayWrapper.endIndex.getter(v25);
      swift_bridgeObjectRelease(v3);
    }
    else
    {
      v37 = v3 & 0xFFFFFFFFFFFFFF8;
      v24 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFFF8));
    }
    v26 = 0;
    v4 = v24 - 1;
    v27 = v2 + 8 * v39;
    while (v39 + v26 < v1)
    {
      v28 = *(_QWORD *)(v27 + 8 * v26);
      v29 = (uint64_t *)(v23 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
      swift_beginAccess(v23 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v42, 0, 0);
      v30 = *v29;
      v31 = (_QWORD *)(v23 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
      swift_beginAccess(v23 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v41, 0, 0);
      v32 = __OFADD__(v30, *v31);
      v33 = v30 + *v31;
      if (v32)
        goto LABEL_61;
      v34 = (_QWORD *)(v28 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
      swift_beginAccess(v28 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v40, 1, 0);
      *v34 = v33;
      swift_release();
      if (v4 == v26)
        goto LABEL_59;
      v35 = v26 + 1;
      if (v38)
      {
        v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v26 + 1, v3);
        if (__OFADD__(v35, 1))
          goto LABEL_62;
      }
      else
      {
        if (v35 >= *(_QWORD *)(v37 + 16))
          goto LABEL_63;
        v23 = *(_QWORD *)(v3 + 8 * v26 + 40);
        swift_retain();
        if (__OFADD__(v35, 1))
          goto LABEL_62;
      }
      if (v1 - v39 == ++v26)
        goto LABEL_58;
    }
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  __break(1u);
LABEL_70:
  __break(1u);
}

void sub_E7D44()
{
  _BOOL4 v0;
  uint64_t *v1;
  uint64_t v2;
  uint8_t *v3;
  uint64_t *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t isa;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  uint8_t *v109;
  NSObject *v110;
  _QWORD *v111;
  uint64_t *v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char v116[24];
  char v117[24];
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  _BYTE v123[16];
  uint64_t v124[3];

  v4 = v1;
  v5 = v1[5];
  v124[0] = (uint64_t)_swiftEmptyArrayStorage;
  v113 = (unint64_t)v5 >> 62;
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v14 = v5;
    else
      v14 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v14);
    if (v6)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v5);
    v13 = (uint64_t)_swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v5);
  if (!v6)
    goto LABEL_17;
LABEL_3:
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_112;
  }
  v7 = 0;
  v3 = (uint8_t *)&unk_2EBEA0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
    }
    else
    {
      v10 = *(_QWORD *)(v5 + 8 * v7 + 32);
      swift_retain();
    }
    KeyPath = swift_getKeyPath(&unk_2EBE78);
    swift_getKeyPath(&unk_2EBEA0);
    static Published.subscript.getter(&v122, v10, KeyPath);
    swift_release();
    swift_release();
    if (v122 == 1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v12);
      v8 = *(_QWORD *)(v124[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v10);
      specialized ContiguousArray._endMutation()(v9);
    }
    else
    {
      swift_release();
    }
    ++v7;
  }
  while (v6 != v7);
  swift_bridgeObjectRelease(v5);
  v13 = v124[0];
LABEL_18:
  swift_bridgeObjectRetain(v13);
  if (v13 < 0)
    goto LABEL_110;
  v15 = (_QWORD *)v13;
  if ((v13 & 0x4000000000000000) != 0)
    goto LABEL_110;
  while (1)
  {
    v124[0] = (uint64_t)v15;
    sub_E6878(v124);
    swift_release();
    v2 = v124[0];
    swift_bridgeObjectRetain(v5);
    v17 = sub_E4B7C(v16);
    swift_bridgeObjectRelease(v5);
    v124[0] = v17;
    swift_bridgeObjectRetain(v17);
    sub_E6810(v124);
    swift_bridgeObjectRelease(v17);
    v18 = (_QWORD *)v124[0];
    v19 = (_QWORD *)sub_E4B7C(v2);
    if (!sub_65A7C(v18, v19))
    {
      swift_release();
      v27 = swift_retain();
      v28 = sub_134824(v27);
      swift_release();
      swift_bridgeObjectRetain(v19);
      v30 = sub_134824(v29);
      swift_bridgeObjectRelease(v19);
      v124[0] = v28;
      sub_F96C4(v30);
      v31 = v124[0];
      if (qword_3B5760 != -1)
        swift_once(&qword_3B5760, sub_E66A8);
      v32 = type metadata accessor for Logger(0);
      sub_555F0(v32, (uint64_t)qword_3BBB60);
      swift_retain();
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v31);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc(32, -1);
        v115 = swift_slowAlloc(96, -1);
        v124[0] = v115;
        *(_DWORD *)v36 = 136315650;
        swift_bridgeObjectRetain(v31);
        v38 = Set.description.getter(v37, &type metadata for Int, &protocol witness table for Int);
        v40 = v39;
        swift_bridgeObjectRelease(v31);
        v122 = (_QWORD *)sub_33524(v38, v40, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v36 + 4);
        swift_bridgeObjectRelease_n(v31, 2);
        swift_bridgeObjectRelease(v40);
        *(_WORD *)(v36 + 12) = 2080;
        v41 = swift_retain();
        v42 = Array.description.getter(v41, &type metadata for Int);
        v44 = v43;
        swift_release();
        v122 = (_QWORD *)sub_33524(v42, v44, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v36 + 14);
        swift_release_n(v18);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v36 + 22) = 2080;
        swift_bridgeObjectRetain(v19);
        v46 = Array.description.getter(v45, &type metadata for Int);
        v48 = v47;
        swift_bridgeObjectRelease(v19);
        v122 = (_QWORD *)sub_33524(v46, v48, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123, v36 + 24);
        swift_bridgeObjectRelease_n(v19, 2);
        swift_bridgeObjectRelease(v48);
        _os_log_impl(&dword_0, v34, v35, "Mismatched data between all document ordinals and paginated documents. Missing %s. sorted: %s, paginated: %s", (uint8_t *)v36, 0x20u);
        swift_arrayDestroy(v115, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v115, -1, -1);
        swift_slowDealloc(v36, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v19, 2);
        swift_release_n(v18);
        swift_bridgeObjectRelease_n(v31, 2);
      }
      return;
    }
    swift_bridgeObjectRelease(v19);
    swift_release();
    v0 = v2 < 0 || (v2 & 0x4000000000000000) != 0;
    if (v0)
    {
LABEL_112:
      swift_bridgeObjectRetain(v2);
      v20 = _CocoaArrayWrapper.endIndex.getter(v107);
      swift_release();
    }
    else
    {
      v20 = *(_QWORD *)(v2 + 16);
    }
    v13 = (uint64_t)_swiftEmptyArrayStorage;
    v112 = v4;
    if (v20)
    {
      v122 = _swiftEmptyArrayStorage;
      sub_F5114(0, v20 & ~(v20 >> 63), 0);
      if ((v20 & 0x8000000000000000) == 0)
      {
        LODWORD(v114) = v0;
        v21 = 0;
        v13 = (uint64_t)v122;
        v4 = &OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset;
        while (v20 != v21)
        {
          if ((v2 & 0xC000000000000001) != 0)
          {
            v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v21, v2);
          }
          else
          {
            v22 = *(_QWORD *)(v2 + 8 * v21 + 32);
            swift_retain();
          }
          v23 = (uint64_t *)(v22 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
          swift_beginAccess(v22 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v124, 0, 0);
          v24 = *v23;
          swift_release();
          v122 = (_QWORD *)v13;
          v26 = *(_QWORD *)(v13 + 16);
          v25 = *(_QWORD *)(v13 + 24);
          v3 = (uint8_t *)(v26 + 1);
          if (v26 >= v25 >> 1)
          {
            sub_F5114(v25 > 1, v26 + 1, 1);
            v13 = (uint64_t)v122;
          }
          ++v21;
          *(_QWORD *)(v13 + 16) = v3;
          *(_QWORD *)(v13 + 8 * v26 + 32) = v24;
          if (v20 == v21)
          {
            v4 = v112;
            LOBYTE(v0) = (_BYTE)v114;
            goto LABEL_41;
          }
        }
        __break(1u);
        goto LABEL_109;
      }
      __break(1u);
    }
    else
    {
LABEL_41:
      v49 = sub_134824(v13);
      swift_bridgeObjectRelease(v13);
      v50 = *(_QWORD *)(v49 + 16);
      swift_bridgeObjectRelease(v49);
      if (v0)
      {
        swift_bridgeObjectRetain(v2);
        v20 = _CocoaArrayWrapper.endIndex.getter(v51);
        swift_release();
        if (v50 == v20)
          goto LABEL_59;
      }
      else
      {
        v20 = *(_QWORD *)(v2 + 16);
        if (v50 == v20)
          goto LABEL_59;
      }
      if (qword_3B5760 == -1)
        goto LABEL_47;
    }
    swift_once(&qword_3B5760, sub_E66A8);
LABEL_47:
    v52 = type metadata accessor for Logger(0);
    sub_555F0(v52, (uint64_t)qword_3BBB60);
    v53 = swift_retain_n(v2, 2);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v54, v55))
    {

      swift_release_n(v2);
LABEL_59:
      if (!v113)
        goto LABEL_60;
      goto LABEL_64;
    }
    v3 = (uint8_t *)swift_slowAlloc(12, -1);
    v56 = (_QWORD *)swift_slowAlloc(32, -1);
    v122 = v56;
    *(_DWORD *)v3 = 136315138;
    v57 = _swiftEmptyArrayStorage;
    v111 = v56;
    if (v20)
    {
      v108 = v55;
      v109 = v3;
      v110 = v54;
      v120 = _swiftEmptyArrayStorage;
      sub_F5130(0, v20 & ~(v20 >> 63), 0);
      if (v20 < 0)
        goto LABEL_124;
      v58 = 0;
      v57 = v120;
      v114 = (_QWORD *)(v2 & 0xC000000000000001);
      v59 = v20;
      do
      {
        if (v114)
        {
          v60 = specialized _ArrayBuffer._getElementSlowPath(_:)(v58, v2);
        }
        else
        {
          v60 = *(_QWORD *)(v2 + 8 * v58 + 32);
          swift_retain();
        }
        v61 = *(_QWORD *)(v60 + 16);
        v62 = (uint64_t *)(v60 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
        swift_beginAccess(v60 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v117, 0, 0);
        v63 = *v62;
        v64 = (uint64_t *)(v60 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
        swift_beginAccess(v60 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v116, 0, 0);
        v65 = *v64;
        swift_release();
        v120 = v57;
        v67 = v57[2];
        v66 = v57[3];
        if (v67 >= v66 >> 1)
        {
          sub_F5130(v66 > 1, v67 + 1, 1);
          v57 = v120;
        }
        ++v58;
        v57[2] = v67 + 1;
        v68 = &v57[3 * v67];
        v68[4] = v61;
        v68[5] = v63;
        v68[6] = v65;
      }
      while (v59 != v58);
      v20 = v59;
      v3 = v109;
      v54 = v110;
      v55 = v108;
    }
    v71 = sub_319AC(&qword_3BBE98);
    v72 = Array.description.getter(v57, v71);
    v74 = v73;
    swift_bridgeObjectRelease(v57);
    v120 = (_QWORD *)sub_33524(v72, v74, (uint64_t *)&v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v3 + 4);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v74);
    _os_log_impl(&dword_0, v54, v55, "Mismatch in our starting offsets map. Current Page offsets - %s", v3, 0xCu);
    swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v111, -1, -1);
    swift_slowDealloc(v3, -1, -1);

    v4 = v112;
    if (!v113)
    {
LABEL_60:
      v69 = (v5 & 0xFFFFFFFFFFFFFF8);
      if (v20 == *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
      {
        swift_release();
        v70 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8));
        swift_bridgeObjectRetain(v5);
        if (v70)
          goto LABEL_69;
        swift_bridgeObjectRelease(v5);
        v20 = 0;
        goto LABEL_75;
      }
      goto LABEL_83;
    }
LABEL_64:
    v69 = (v5 & 0xFFFFFFFFFFFFFF8);
    v75 = v5 < 0 ? v5 : v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v76 = _CocoaArrayWrapper.endIndex.getter(v75);
    swift_bridgeObjectRelease(v5);
    if (v20 == v76)
      break;
LABEL_83:
    if (qword_3B5760 != -1)
      swift_once(&qword_3B5760, sub_E66A8);
    v86 = type metadata accessor for Logger(0);
    sub_555F0(v86, (uint64_t)qword_3BBB60);
    swift_retain_n(v4, 2);
    v87 = swift_retain();
    v69 = Logger.logObject.getter(v87);
    v88 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v69, v88))
    {

      swift_release_n(v2);
      swift_release_n(v4);
      return;
    }
    v3 = (uint8_t *)swift_slowAlloc(12, -1);
    v114 = (_QWORD *)swift_slowAlloc(32, -1);
    v120 = v114;
    *(_DWORD *)v3 = 136315138;
    swift_bridgeObjectRetain(v5);
    sub_5C674(v20, v5);
    v113 = v89;
    v91 = v90;
    v93 = v92;
    v95 = v94;
    swift_bridgeObjectRelease(v5);
    v96 = v95 >> 1;
    v84 = __OFSUB__(v95 >> 1, v93);
    v97 = (v95 >> 1) - v93;
    if (v84)
      goto LABEL_123;
    LOBYTE(v111) = v88;
    if (!v97)
      goto LABEL_106;
    v118 = _swiftEmptyArrayStorage;
    sub_F5114(0, v97 & ~(v97 >> 63), 0);
    if (v97 < 0)
      goto LABEL_125;
    v13 = (uint64_t)v118;
    if (v93 <= v96)
      v98 = v96;
    else
      v98 = v93;
    v5 = v98 - v93;
    v4 = (uint64_t *)(v91 + 8 * v93);
    while (v5)
    {
      v99 = *v4;
      swift_beginAccess(*v4 + 16, &v122, 0, 0);
      v100 = *(_QWORD *)(v99 + 16);
      v118 = (_QWORD *)v13;
      v102 = *(_QWORD *)(v13 + 16);
      v101 = *(_QWORD *)(v13 + 24);
      if (v102 >= v101 >> 1)
      {
        sub_F5114(v101 > 1, v102 + 1, 1);
        v13 = (uint64_t)v118;
      }
      *(_QWORD *)(v13 + 16) = v102 + 1;
      *(_QWORD *)(v13 + 8 * v102 + 32) = v100;
      --v5;
      ++v4;
      if (!--v97)
      {
        swift_unknownObjectRelease(v113);
        goto LABEL_107;
      }
    }
LABEL_109:
    __break(1u);
LABEL_110:
    v15 = sub_F4784(v13, (void (*)(_QWORD))type metadata accessor for DocumentPaginationEntity, (unint64_t *)&unk_3BBE60, &qword_3BBE58, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_F98B0);
    swift_release();
  }
  swift_release();
  swift_bridgeObjectRetain(v5);
  v70 = _CocoaArrayWrapper.endIndex.getter(v75);
  if (v70)
  {
LABEL_69:
    v77 = v70 - 1;
    if (__OFSUB__(v70, 1))
    {
      __break(1u);
    }
    else if ((v5 & 0xC000000000000001) == 0)
    {
      if ((v77 & 0x8000000000000000) == 0)
      {
        if (v77 < *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8)))
        {
          v78 = *(_QWORD *)(v5 + 8 * v77 + 32);
          swift_retain();
          goto LABEL_74;
        }
        __break(1u);
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    v78 = specialized _ArrayBuffer._getElementSlowPath(_:)(v77, v5);
LABEL_74:
    swift_bridgeObjectRelease(v5);
    v79 = (uint64_t *)(v78 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
    swift_beginAccess(v78 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, &v122, 0, 0);
    v20 = *v79;
    swift_release();
    v69 = (v5 & 0xFFFFFFFFFFFFFF8);
    if (!v113)
    {
LABEL_75:
      isa = (uint64_t)v69[2].isa;
      swift_bridgeObjectRetain(v5);
      if (isa)
        goto LABEL_76;
LABEL_104:
      swift_bridgeObjectRelease(v5);
      v85 = v20;
LABEL_82:
      swift_beginAccess(v4 + 3, &v118, 1, 0);
      v4[3] = v85;
      *((_BYTE *)v4 + 32) = 1;
      return;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    v20 = 0;
  }
  if (v5 < 0)
    v103 = v5;
  else
    v103 = (int64_t)v69;
  swift_bridgeObjectRetain(v5);
  isa = _CocoaArrayWrapper.endIndex.getter(v103);
  if (!isa)
    goto LABEL_104;
LABEL_76:
  v77 = isa - 1;
  if (__OFSUB__(isa, 1))
  {
    __break(1u);
    goto LABEL_118;
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
LABEL_119:
    v81 = specialized _ArrayBuffer._getElementSlowPath(_:)(v77, v5);
LABEL_81:
    swift_bridgeObjectRelease(v5);
    v82 = (uint64_t *)(v81 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
    swift_beginAccess(v81 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, &v120, 0, 0);
    v83 = *v82;
    swift_release();
    v84 = __OFADD__(v20, v83);
    v85 = v20 + v83;
    if (!v84)
      goto LABEL_82;
    __break(1u);
LABEL_106:
    swift_unknownObjectRelease(v113);
    v13 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_107:
    v104 = Array.description.getter(v13, &type metadata for Int);
    v106 = v105;
    swift_bridgeObjectRelease(v13);
    v118 = (_QWORD *)sub_33524(v104, v106, (uint64_t *)&v120);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v3 + 4);
    swift_release_n(v2);
    swift_release_n(v112);
    swift_bridgeObjectRelease(v106);
    swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v114, -1, -1);
    swift_slowDealloc(v3, -1, -1);

  }
  else
  {
    if ((v77 & 0x8000000000000000) != 0)
      goto LABEL_121;
    if (v77 < *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8)))
    {
      v81 = *(_QWORD *)(v5 + 8 * v77 + 32);
      swift_retain();
      goto LABEL_81;
    }
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
    swift_release();
    __break(1u);
  }
}

uint64_t sub_E8BA8(uint64_t a1)
{
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(v1 + 136, v7, 33, 0);
  swift_bridgeObjectRetain(a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + 136));
  v6 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = 0x8000000000000000;
  sub_F93BC(a1, (uint64_t)sub_FA368, 0, isUniquelyReferenced_nonNull_native, &v6);
  v4 = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 136) = v6;
  swift_bridgeObjectRelease(v4);
  return swift_endAccess(v7);
}

_QWORD *sub_E8C40(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[31];
  uint64_t v25;
  _QWORD *v26;

  v1 = a1;
  v26 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v2)
  {
    v3 = v1 & 0xC000000000000001;
    v4 = 4;
    v23 = v1;
    while (1)
    {
      v9 = v4 - 4;
      if (!v3)
        break;
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v1);
      v11 = v4 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_17;
LABEL_11:
      KeyPath = swift_getKeyPath(&unk_2EBE78);
      swift_getKeyPath(&unk_2EBEA0);
      static Published.subscript.getter(&v25, v10, KeyPath);
      swift_release();
      swift_release();
      if ((v25 & 1) == 0)
      {
        if (qword_3B5740 != -1)
          swift_once(&qword_3B5740, sub_AABBC);
        v13 = type metadata accessor for Logger(0);
        sub_555F0(v13, (uint64_t)qword_3B9D18);
        v14 = swift_retain();
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = v2;
          v18 = v3;
          v19 = swift_slowAlloc(12, -1);
          *(_DWORD *)v19 = 134217984;
          *(_QWORD *)(v19 + 4) = *(_QWORD *)(v10 + 16);
          swift_release();
          v20 = v19;
          v3 = v18;
          v2 = v17;
          v1 = v23;
          swift_slowDealloc(v20, -1, -1);

        }
        else
        {

          swift_release();
        }
      }
      v5 = (uint64_t *)(v10 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
      swift_beginAccess(v10 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v24, 0, 0);
      v6 = *v5;
      swift_retain();
      swift_bridgeObjectRetain(v6);
      v8 = sub_FA39C(v7, v10);
      swift_bridgeObjectRelease(v6);
      swift_release_n(v10);
      sub_66968((uint64_t)v8);
      ++v4;
      if (v11 == v2)
      {
        swift_bridgeObjectRelease(v1);
        return v26;
      }
    }
    v10 = *(_QWORD *)(v1 + 8 * v4);
    swift_retain();
    v11 = v4 - 3;
    if (!__OFADD__(v9, 1))
      goto LABEL_11;
LABEL_17:
    __break(1u);
LABEL_18:
    if (v1 < 0)
      v22 = v1;
    else
      v22 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v22);
  }
  swift_bridgeObjectRelease(v1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_E8F04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = *(_QWORD *)(v1 + 40);
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0)
      v11 = v3;
    else
      v11 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    result = _CocoaArrayWrapper.endIndex.getter(v11);
    if (result)
      goto LABEL_3;
LABEL_14:
    result = swift_bridgeObjectRelease(v3);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return result;
  }
  v4 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
  result = swift_bridgeObjectRetain(v3);
  if (!v4)
    goto LABEL_14;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
  }
  else
  {
    if (!*(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8)))
    {
      __break(1u);
      return result;
    }
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain(v6);
  }
  swift_bridgeObjectRelease(v3);
  v7 = (uint64_t *)(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  swift_beginAccess(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v12, 0, 0);
  v8 = *v7;
  if (*v7 < 1)
    v9 = 0;
  else
    v9 = *(_QWORD *)(v6 + 16);
  v10 = v8 < 1;
  result = swift_release(v6);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

unint64_t sub_E9020@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _BYTE v13[24];

  v3 = *(_QWORD *)(v1 + 40);
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v3);
    if (v4)
      goto LABEL_3;
LABEL_16:
    result = swift_bridgeObjectRelease(v3);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v11 = 1;
LABEL_17:
    *(_BYTE *)(a1 + 16) = v11;
    return result;
  }
  if (v3 < 0)
    v12 = v3;
  else
    v12 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v4 = _CocoaArrayWrapper.endIndex.getter(v12);
  if (!v4)
    goto LABEL_16;
LABEL_3:
  result = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
LABEL_19:
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v3);
    goto LABEL_8;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((char *)&dword_10 + (v3 & 0xFFFFFFFFFFFFF8)))
  {
    v6 = *(_QWORD *)(v3 + 8 * result + 32);
    swift_retain(v6);
LABEL_8:
    swift_bridgeObjectRelease(v3);
    v7 = (uint64_t *)(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
    swift_beginAccess(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v13, 0, 0);
    v8 = *v7;
    v9 = v8 - 1;
    if (v8 < 1)
    {
      result = swift_release(v6);
      v10 = 0;
      v9 = 0;
    }
    else
    {
      v10 = *(_QWORD *)(v6 + 16);
      result = swift_release(v6);
    }
    v11 = v8 < 1;
    *(_QWORD *)a1 = v10;
    *(_QWORD *)(a1 + 8) = v9;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_E9164@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30[24];
  char v31[24];
  _BYTE v32[24];
  _BYTE v33[24];

  v5 = *(_QWORD *)(v2 + 40);
  if ((unint64_t)v5 >> 62)
    goto LABEL_46;
  v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v5);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v27))
  {
    v29 = a2;
    v7 = 0;
    if ((v5 & 0xC000000000000001) == 0)
      goto LABEL_17;
    while (1)
    {
      swift_bridgeObjectRetain(v5);
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      v9 = (_QWORD *)(v8 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
      swift_beginAccess(v8 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v33, 0, 0);
      a2 = a1 - *v9;
      if (__OFSUB__(a1, *v9))
        break;
      v10 = (uint64_t *)(v8 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
      swift_beginAccess(v8 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v32, 0, 0);
      v11 = *v10;
      if ((unint64_t)*v10 >> 62)
      {
        if (v11 < 0)
          v14 = *v10;
        else
          v14 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v12 = _CocoaArrayWrapper.endIndex.getter(v14);
        swift_bridgeObjectRelease(v5);
        swift_unknownObjectRelease(v8);
        swift_bridgeObjectRelease(v11);
        if (v12 < 0)
        {
          __break(1u);
LABEL_17:
          while (1)
          {
            v15 = *(_QWORD *)(v5 + 8 * v7 + 32);
            v16 = (_QWORD *)(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
            swift_beginAccess(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v33, 0, 0);
            a2 = a1 - *v16;
            if (__OFSUB__(a1, *v16))
              goto LABEL_44;
            v17 = (uint64_t *)(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
            swift_beginAccess(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v32, 0, 0);
            v18 = *v17;
            if ((unint64_t)v18 >> 62)
            {
              if (v18 < 0)
                v21 = v18;
              else
                v21 = v18 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v5);
              swift_retain(v15);
              swift_bridgeObjectRetain(v18);
              v19 = _CocoaArrayWrapper.endIndex.getter(v21);
              swift_bridgeObjectRelease(v5);
              swift_release(v15);
              swift_bridgeObjectRelease(v18);
              if (v19 < 0)
              {
                __break(1u);
                goto LABEL_30;
              }
            }
            else
            {
              v19 = *(_QWORD *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8));
            }
            if ((a2 & 0x8000000000000000) == 0 && a2 < v19)
              goto LABEL_30;
            v20 = v7 + 1;
            if (__OFADD__(v7, 1))
              goto LABEL_45;
            ++v7;
            if (v20 == v6)
              goto LABEL_31;
          }
        }
      }
      else
      {
        v12 = *(_QWORD *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8));
        swift_bridgeObjectRelease(v5);
        swift_unknownObjectRelease(v8);
      }
      if ((a2 & 0x8000000000000000) == 0 && a2 < v12)
      {
LABEL_30:
        if (v7 == v6)
        {
LABEL_31:
          result = swift_bridgeObjectRelease(v5);
          a2 = v29;
          goto LABEL_51;
        }
        if ((v5 & 0xC000000000000001) == 0)
        {
          if ((v7 & 0x8000000000000000) != 0)
          {
            __break(1u);
          }
          else if (v7 < *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8)))
          {
            v6 = *(_QWORD *)(v5 + 8 * v7 + 32);
            swift_retain(v6);
            goto LABEL_36;
          }
          __break(1u);
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
LABEL_36:
        v23 = (_QWORD *)(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
        swift_beginAccess(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v31, 0, 0);
        a2 = a1 - *v23;
        if (__OFSUB__(a1, *v23))
          goto LABEL_56;
        v24 = (uint64_t *)(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
        swift_beginAccess(v6 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v30, 0, 0);
        a1 = *v24;
        if ((unint64_t)a1 >> 62)
        {
LABEL_57:
          if (a1 < 0)
            v28 = a1;
          else
            v28 = a1 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(a1);
          v25 = _CocoaArrayWrapper.endIndex.getter(v28);
          swift_bridgeObjectRelease(a1);
          if ((v25 & 0x8000000000000000) == 0)
            goto LABEL_39;
          __break(1u);
        }
        else
        {
          v25 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
LABEL_39:
          if ((a2 & 0x8000000000000000) == 0 && a2 < v25)
          {
            v26 = *(_QWORD *)(v6 + 16);
            swift_release(v6);
            *(_QWORD *)v29 = v26;
            *(_QWORD *)(v29 + 8) = a2;
            *(_BYTE *)(v29 + 16) = 0;
            return swift_bridgeObjectRelease(v5);
          }
        }
        result = swift_release(v6);
        __break(1u);
        return result;
      }
      v13 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_43;
      ++v7;
      if (v13 == v6)
        goto LABEL_31;
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    if (v5 < 0)
      v27 = v5;
    else
      v27 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
  }
  result = swift_bridgeObjectRelease(v5);
LABEL_51:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  return result;
}

_QWORD *BookPaginationEntity.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  v1 = v0[7];
  v2 = v0[8];
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[17]);
  return v0;
}

uint64_t BookPaginationEntity.__deallocating_deinit()
{
  uint64_t v0;

  BookPaginationEntity.deinit();
  return swift_deallocClassInstance(v0, 144, 7);
}

void sub_E95BC(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[16];
  char v54[24];
  uint64_t v55;
  _QWORD v56[2];
  BOOL v57;
  __int128 v58;
  _BYTE v59[24];
  __int128 v60;
  _OWORD v61[2];

  v5 = *(_OWORD *)(v2 + 72);
  v58 = *(_OWORD *)(v2 + 56);
  *(_OWORD *)v59 = v5;
  *(_QWORD *)&v59[16] = *(_QWORD *)(v2 + 88);
  v60 = v58;
  v6 = *a1;
  v7 = a1[1];
  v61[0] = *(_OWORD *)&v59[8];
  sub_FA4F4(&v60);
  sub_FA4F4((_QWORD *)&v60 + 1);
  sub_E45E8((uint64_t)v61);
  v8 = (_QWORD *)sub_13AAD0(v6);
  sub_5B810(&v60);
  sub_5B810((_QWORD *)&v60 + 1);
  sub_E48EC((uint64_t)v61);
  v57 = 1;
  v9 = BookPaginationEntity.document(for:)(v6);
  if (!v9)
  {
    if (qword_3B5760 != -1)
      swift_once(&qword_3B5760, sub_E66A8);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_555F0(v18, (uint64_t)qword_3BBB60);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134217984;
      v55 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v22 + 4);
      _os_log_impl(&dword_0, v20, v21, "Unable to find paginated document for %ld", v22, 0xCu);
      swift_slowDealloc(v22, -1, -1);
    }

LABEL_41:
    swift_beginAccess(&v57, &v55, 0, 0);
    v49 = v8[2];
    if (v57)
    {
      if (v49)
      {
        v10 = v8[4];
        v3 = v8[5];
        v25 = (_QWORD *)v8[6];
LABEL_46:
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRelease(v8);
        goto LABEL_49;
      }
    }
    else if (v49)
    {
      v50 = &v8[3 * v49];
      v10 = v50[1];
      v3 = v50[2];
      v25 = (_QWORD *)v50[3];
      goto LABEL_46;
    }
    swift_bridgeObjectRelease(v8);
    v10 = 0;
    v3 = 0;
    v25 = 0;
    goto LABEL_49;
  }
  v10 = v9;
  v11 = (uint64_t *)(v9 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  swift_beginAccess(v9 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v54, 0, 0);
  v12 = *v11;
  if (*v11 < v7)
  {
    v57 = 0;
    if (qword_3B5760 != -1)
      swift_once(&qword_3B5760, sub_E66A8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_555F0(v13, (uint64_t)qword_3BBB60);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      *(_DWORD *)v17 = 134218240;
      v55 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v17 + 4);
      *(_WORD *)(v17 + 12) = 2048;
      v55 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v17 + 14);
      _os_log_impl(&dword_0, v15, v16, "Requested pageOffset %ld > pageCount %ld - defaulting to last spread for document", (uint8_t *)v17, 0x16u);
      swift_slowDealloc(v17, -1, -1);
    }

    goto LABEL_25;
  }
  v23 = v8[2];
  if (!v23)
  {
LABEL_25:
    if (v57)
    {
      if (v12 >= 0)
        v40 = v12;
      else
        v40 = v12 + 1;
      v57 = v7 < v40 >> 1;
      if (qword_3B5760 != -1)
        swift_once(&qword_3B5760, sub_E66A8);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_555F0(v41, (uint64_t)qword_3BBB60);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = swift_slowAlloc(32, -1);
        v46 = swift_slowAlloc(32, -1);
        v55 = v46;
        *(_DWORD *)v45 = 134218498;
        v52 = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v45 + 4);
        *(_WORD *)(v45 + 12) = 2048;
        v52 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v45 + 14);
        *(_WORD *)(v45 + 22) = 2080;
        swift_beginAccess(&v57, &v52, 0, 0);
        if (v57)
          v47 = 0x7472617453;
        else
          v47 = 6581829;
        if (v57)
          v48 = 0xE500000000000000;
        else
          v48 = 0xE300000000000000;
        v51 = sub_33524(v47, v48, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v45 + 24);
        swift_bridgeObjectRelease(v48);
        _os_log_impl(&dword_0, v43, v44, "Unable to find spread containing %ld. Paginated Document has %ld pages -- falling back to %s of document", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1, -1);
        swift_slowDealloc(v45, -1, -1);
      }

    }
    swift_release();
    goto LABEL_41;
  }
  v24 = 0;
  v25 = v8 + 4;
  while (1)
  {
    v26 = &v25[3 * v24];
    v27 = *(_QWORD *)(*v26 + 16);
    if (v27)
      break;
LABEL_15:
    if (++v24 == v23)
      goto LABEL_25;
  }
  v28 = (_BYTE *)(*v26 + 48);
  while ((*v28 & 1) != 0 || *((_QWORD *)v28 - 1) != v7)
  {
    v28 += 24;
    if (!--v27)
      goto LABEL_15;
  }
  swift_release();
  if (v24 >= v8[2])
  {
    __break(1u);
  }
  else
  {
    v10 = *v26;
    v29 = &v25[3 * v24];
    v3 = v29[1];
    v25 = (_QWORD *)v29[2];
    swift_bridgeObjectRetain(*v26);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRelease(v8);
    if (qword_3B5760 == -1)
      goto LABEL_23;
  }
  swift_once(&qword_3B5760, sub_E66A8);
LABEL_23:
  v30 = type metadata accessor for Logger(0);
  sub_555F0(v30, (uint64_t)qword_3BBB60);
  swift_bridgeObjectRetain_n(v10, 2);
  v31 = swift_bridgeObjectRetain_n(v25, 2);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(32, -1);
    v52 = v35;
    *(_DWORD *)v34 = 134218242;
    v55 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v34 + 4);
    *(_WORD *)(v34 + 12) = 2080;
    v55 = v10;
    v56[0] = v3;
    v56[1] = v25;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v25);
    v36 = sub_319AC((uint64_t *)&unk_3BC050);
    v37 = String.init<A>(describing:)(&v55, v36);
    v39 = v38;
    v55 = sub_33524(v37, v38, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v34 + 14);
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease(v39);
    _os_log_impl(&dword_0, v32, v33, "Found spread containing %ld - %s.", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease_n(v10, 2);
  }
LABEL_49:
  *a2 = v10;
  a2[1] = v3;
  a2[2] = (uint64_t)v25;
}

BookEPUB::SpreadPaginationEntity_optional __swiftcall BookPaginationEntity.spread(_:byMoving:)(BookEPUB::SpreadPaginationEntity _, BookEPUB::LocationMovement byMoving)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  Swift::String v33;
  Swift::String v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  BookEPUB::SpreadPaginationEntity_optional result;

  v4 = v3;
  v5 = v2;
  v7 = *(_QWORD *)_.columns._rawValue;
  v6 = (_QWORD *)*((_QWORD *)_.columns._rawValue + 1);
  v8 = *((_QWORD *)_.columns._rawValue + 2);
  v9 = *(unsigned __int8 *)_.configuration._countAndFlagsBits;
  v10 = *(_QWORD *)(_.configuration._countAndFlagsBits + 8);
  if ((*(_BYTE *)(_.configuration._countAndFlagsBits + 1) & 1) == 0)
  {
    v69 = *(_QWORD *)_.columns._rawValue;
    v70 = v6;
    v71 = v8;
    if (!v9 || (v18 = __OFSUB__(0, v10), v10 = -v10, !v18))
    {
      _.columns._rawValue = &v69;
      _.configuration._countAndFlagsBits = v10;
      return BookPaginationEntity.spread(_:offsetBy:)(_, *(Swift::Int *)&byMoving.direction);
    }
    __break(1u);
LABEL_33:
    swift_once(&qword_3B5760, sub_E66A8);
    goto LABEL_10;
  }
  v69 = *(_QWORD *)_.columns._rawValue;
  v70 = v6;
  v71 = v8;
  sub_EA4B8(&v69);
  v12 = v11;
  v65 = v11;
  v13 = sub_319AC(&qword_3BBB88);
  v14 = sub_3DCC0((unint64_t *)&unk_3BBB90, &qword_3BBB88, (uint64_t)&protocol conformance descriptor for [A]);
  RandomAccessCollection.firstAndLast.getter(&v69, v13, v14);
  swift_bridgeObjectRelease(v12);
  if (v69)
  {
    v15 = v70;
    v61 = v69;
    v63 = v5;
    if ((v9 & 1) != 0)
    {
      if (__OFSUB__(0, v10))
      {
        __break(1u);
        goto LABEL_35;
      }
      swift_beginAccess(v4 + 48, &v69, 0, 0);
      v16 = *(_QWORD *)(v4 + 48);
      v67 = (_QWORD *)v61;
      v68 = (_QWORD *)v16;
      swift_bridgeObjectRetain(v16);
      RandomAccessCollection.element(_:equatedBy:offsetBy:)(&v65, &v67, sub_EC08C, 0, -v10, v13, v14);
      v17 = v16;
    }
    else
    {
      if (!v10)
      {
        sub_EA5A4(v70, (uint64_t)&v69);
        if ((v71 & 1) == 0)
        {
          v38 = v69;
          v39 = v70;
          goto LABEL_22;
        }
LABEL_26:
        if (qword_3B5760 == -1)
        {
LABEL_27:
          v42 = type metadata accessor for Logger(0);
          sub_555F0(v42, (uint64_t)qword_3BBB60);
          swift_bridgeObjectRetain_n(v7, 2);
          v43 = swift_bridgeObjectRetain_n(v8, 2);
          v44 = Logger.logObject.getter(v43);
          v45 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v44, v45))
          {
            v46 = swift_slowAlloc(22, -1);
            v60 = swift_slowAlloc(64, -1);
            v68 = (_QWORD *)v60;
            *(_DWORD *)v46 = 136315394;
            LOBYTE(v65) = v9;
            BYTE1(v65) = 1;
            v66 = (_QWORD *)v10;
            v47 = LocationMovement.description.getter();
            v49 = v48;
            v65 = sub_33524(v47, v48, (uint64_t *)&v68);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v46 + 4);
            swift_bridgeObjectRelease(v49);
            *(_WORD *)(v46 + 12) = 2080;
            v65 = 91;
            v66 = (_QWORD *)0xE100000000000000;
            swift_bridgeObjectRetain(v7);
            v51 = sub_E49E0(v50);
            swift_bridgeObjectRelease(v7);
            v67 = v51;
            v52 = sub_319AC((uint64_t *)&unk_3B8C90);
            v53 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
            v54 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v52, v53);
            v56 = v55;
            swift_bridgeObjectRelease(v51);
            v57._countAndFlagsBits = v54;
            v57._object = v56;
            String.append(_:)(v57);
            swift_bridgeObjectRelease(v56);
            v58._countAndFlagsBits = 93;
            v58._object = (void *)0xE100000000000000;
            String.append(_:)(v58);
            v59 = (unint64_t)v66;
            v65 = sub_33524(v65, (unint64_t)v66, (uint64_t *)&v68);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v46 + 14);
            swift_bridgeObjectRelease_n(v8, 2);
            swift_bridgeObjectRelease_n(v7, 2);
            swift_bridgeObjectRelease(v59);
            _os_log_impl(&dword_0, v44, v45, "Failed to find an end location for movement %s starting at %s", (uint8_t *)v46, 0x16u);
            swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v60, -1, -1);
            swift_slowDealloc(v46, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v8, 2);
            swift_bridgeObjectRelease_n(v7, 2);
          }
          swift_release();
          swift_release();
          *v63 = 0;
          v63[1] = 0;
          v63[2] = 0;
          return result;
        }
LABEL_35:
        swift_once(&qword_3B5760, sub_E66A8);
        goto LABEL_27;
      }
      swift_beginAccess(v4 + 48, &v69, 0, 0);
      v37 = *(_QWORD *)(v4 + 48);
      v67 = v15;
      v68 = (_QWORD *)v37;
      swift_bridgeObjectRetain(v37);
      RandomAccessCollection.element(_:equatedBy:offsetBy:)(&v65, &v67, sub_EC08C, 0, v10, v13, v14);
      v17 = v37;
    }
    swift_bridgeObjectRelease(v17);
    if (v65)
    {
      v38 = *(_QWORD *)(v65 + 32);
      v39 = *(_QWORD **)(v65 + 40);
      swift_release();
LABEL_22:
      v65 = v38;
      v66 = v39;
      v41 = &v65;
      BookPaginationEntity.spread(containing:)(*(BookEPUB::PageLocation *)(&v40 - 1));
      swift_release();
      swift_release();
      return result;
    }
    goto LABEL_26;
  }
  if (qword_3B5760 != -1)
    goto LABEL_33;
LABEL_10:
  v19 = type metadata accessor for Logger(0);
  sub_555F0(v19, (uint64_t)qword_3BBB60);
  swift_bridgeObjectRetain_n(v7, 2);
  v20 = swift_bridgeObjectRetain_n(v8, 2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v65 = v62;
    *(_DWORD *)v23 = 136315394;
    if (v9)
      v24 = 0x647261776B636162;
    else
      v24 = 0x64726177726F66;
    v64 = v5;
    if (v9)
      v25 = 0xE800000000000000;
    else
      v25 = 0xE700000000000000;
    v69 = sub_33524(v24, v25, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v23 + 4);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v23 + 12) = 2080;
    v69 = 91;
    v70 = (_QWORD *)0xE100000000000000;
    swift_bridgeObjectRetain(v7);
    v27 = sub_E49E0(v26);
    swift_bridgeObjectRelease(v7);
    v68 = v27;
    v28 = sub_319AC((uint64_t *)&unk_3B8C90);
    v29 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
    v30 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v28, v29);
    v32 = v31;
    swift_bridgeObjectRelease(v27);
    v33._countAndFlagsBits = v30;
    v33._object = v32;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(v32);
    v34._countAndFlagsBits = 93;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    v35 = v70;
    v69 = sub_33524(v69, (unint64_t)v70, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v23 + 14);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease_n(v7, 2);
    v36 = v35;
    v5 = v64;
    swift_bridgeObjectRelease(v36);
    _os_log_impl(&dword_0, v21, v22, "Failed to find a movement by chapter in direction '%s' starting from %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
    result.value.columns._rawValue = (void *)swift_bridgeObjectRelease_n(v7, 2);
  }
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  return result;
}

void sub_EA4B8(_QWORD *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *i;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v1 = *(_QWORD *)(*a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = a1[1];
    v4 = a1[2];
    for (i = (_BYTE *)(*a1 + 48); *i == 1; i += 24)
    {
      if (v1 == ++v2)
        return;
    }
    if (v1 != v2)
    {
      if (v2 >= v1)
      {
        __break(1u);
      }
      else
      {
        if ((*i & 1) != 0)
        {
LABEL_17:
          __break(1u);
          return;
        }
        v6 = *((_QWORD *)i - 2);
        v7 = *((_QWORD *)i - 1);
        v9 = *a1;
        v10 = v3;
        v11 = v4;
        SpreadPaginationEntity.lastLocation.getter((uint64_t)&v13);
        if ((v15 & 1) != 0)
          return;
        v8 = v14 < v7;
        if (v13 != v6)
          v8 = v13 < v6;
        if (!v8)
        {
          v9 = v6;
          v10 = v7;
          v11 = v13;
          v12 = v14;
          sub_EBDB4(&v9);
          return;
        }
      }
      __break(1u);
      goto LABEL_17;
    }
  }
}

void sub_EA5A4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  char v24[24];

  v3 = v2;
  swift_beginAccess(v2 + 48, v24, 0, 0);
  *(_QWORD *)&v19 = *(_QWORD *)(v2 + 48);
  v23 = a1;
  swift_bridgeObjectRetain(v19);
  v6 = sub_319AC(&qword_3BBB88);
  v7 = sub_3DCC0((unint64_t *)&unk_3BBB90, &qword_3BBB88, (uint64_t)&protocol conformance descriptor for [A]);
  RandomAccessCollection.element(_:equatedBy:offsetBy:)(&v20, &v23, sub_EC08C, 0, 1, v6, v7);
  swift_bridgeObjectRelease(v19);
  v8 = v20;
  if (v20)
  {
    v9 = *(_QWORD *)(v2 + 40);
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + 40));
    v11 = sub_E8C40(v10);
    swift_bridgeObjectRelease(v9);
    v23 = v11;
    v19 = *(_OWORD *)(v8 + 32);
    v12 = sub_319AC(&qword_3B7308);
    v13 = sub_3DCC0((unint64_t *)&unk_3BBFE0, &qword_3B7308, (uint64_t)&protocol conformance descriptor for [A]);
    v14 = sub_5B890();
    RandomAccessCollection<>.element(_:offsetBy:)(&v20, &v19, -1, v12, v13, v14);
    swift_bridgeObjectRelease(v11);
    swift_release();
    v15 = a1[4];
    v16 = a1[5];
    if ((v22 & 1) != 0)
      goto LABEL_7;
    v17 = v21;
    v18 = v16 < v21;
    if (v15 != v20)
      v18 = v15 < v20;
    if (!v18)
    {
LABEL_7:
      *(_QWORD *)a2 = v15;
      *(_QWORD *)(a2 + 8) = v16;
      *(_BYTE *)(a2 + 16) = 0;
    }
    else
    {
      *(_QWORD *)a2 = v20;
      *(_QWORD *)(a2 + 8) = v17;
      *(_BYTE *)(a2 + 16) = 0;
    }
  }
  else
  {
    sub_E9020(a2);
  }
}

_QWORD *BookPaginationEntity.spreads(around:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *result;

  v3 = *(_QWORD *)(v1 + 104);
  v4 = swift_bridgeObjectRetain(v3);
  v5 = sub_F4CA0(v4, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_5ACF0);
  swift_bridgeObjectRelease(v3);
  v6 = v5[2];
  if (v6)
  {
    if (v5[4] == a1)
    {
      v7 = 0;
      v8 = 1;
LABEL_7:
      swift_release();
      v10 = v6 - v7;
      if (__OFSUB__(v6, v7))
        goto LABEL_43;
      v11 = a1 - v8;
      if (__OFSUB__(a1, v8))
      {
LABEL_44:
        __break(1u);
      }
      else
      {
        if (v10 <= 1)
          v10 = 1;
        v12 = __OFADD__(a1, v10);
        v13 = a1 + v10;
        if (!v12)
        {
          swift_retain(v1);
          sub_FA51C(v11, v13, v1);
          v15 = v14;
          swift_release();
          v16 = *(_QWORD *)(v15 + 16);
          if (v16)
          {
            v17 = 0;
            v18 = _swiftEmptyArrayStorage;
            while (1)
            {
              v19 = v15 + 8 * v17;
              v20 = *(_QWORD *)(v19 + 32);
              v21 = *(_QWORD *)(v20 + 16);
              v22 = v18[2];
              v23 = v22 + v21;
              if (__OFADD__(v22, v21))
              {
                __break(1u);
LABEL_40:
                __break(1u);
LABEL_41:
                __break(1u);
LABEL_42:
                __break(1u);
LABEL_43:
                __break(1u);
                goto LABEL_44;
              }
              swift_bridgeObjectRetain(*(_QWORD *)(v19 + 32));
              isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(v18);
              if ((_DWORD)isUniquelyReferenced_nonNull_native && v23 <= v18[3] >> 1)
              {
                if (*(_QWORD *)(v20 + 16))
                  goto LABEL_25;
              }
              else
              {
                if (v22 <= v23)
                  v25 = v22 + v21;
                else
                  v25 = v22;
                v18 = sub_4319C(isUniquelyReferenced_nonNull_native, v25, 1, v18);
                if (*(_QWORD *)(v20 + 16))
                {
LABEL_25:
                  v26 = v18[2];
                  if ((v18[3] >> 1) - v26 < v21)
                    goto LABEL_41;
                  v27 = (unint64_t)&v18[3 * v26 + 4];
                  if (v20 + 32 < v27 + 24 * v21 && v27 < v20 + 32 + 24 * v21)
                    goto LABEL_46;
                  swift_arrayInitWithCopy(v27);
                  if (v21)
                  {
                    v29 = v18[2];
                    v12 = __OFADD__(v29, v21);
                    v30 = v29 + v21;
                    if (v12)
                      goto LABEL_42;
                    v18[2] = v30;
                  }
                  goto LABEL_15;
                }
              }
              if (v21)
                goto LABEL_40;
LABEL_15:
              ++v17;
              swift_bridgeObjectRelease(v20);
              if (v16 == v17)
              {
                swift_bridgeObjectRelease(v15);
                return v18;
              }
            }
          }
          swift_bridgeObjectRelease(v15);
          return _swiftEmptyArrayStorage;
        }
      }
      __break(1u);
LABEL_46:
      result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
      __break(1u);
      return result;
    }
    v8 = 0;
    while (v6 - 1 != v8)
    {
      v9 = v5[v8++ + 5];
      v7 = v8;
      if (v9 == a1)
        goto LABEL_7;
    }
  }
  swift_release();
  return _swiftEmptyArrayStorage;
}

BookEPUB::LocationMovement::Direction_optional __swiftcall BookPaginationEntity.direction(from:to:)(BookEPUB::SpreadPaginationEntity from, BookEPUB::SpreadPaginationEntity to)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  Swift::String v36;
  Swift::String v37;
  BookEPUB::LocationMovement::Direction_optional v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  NSObject *log;
  os_log_type_t type;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int128 v56;
  _BYTE v57[24];
  __int128 v58;
  _BYTE v59[24];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];

  v3 = v2;
  v4 = *(_OWORD *)(v2 + 72);
  v58 = *(_OWORD *)(v2 + 56);
  *(_OWORD *)v59 = v4;
  v6 = *(_QWORD *)from.columns._rawValue;
  v5 = *((_QWORD *)from.columns._rawValue + 1);
  v7 = *((_QWORD *)from.columns._rawValue + 2);
  *(_QWORD *)&v59[16] = *(_QWORD *)(v2 + 88);
  v60 = v58;
  v8 = *(_QWORD *)from.configuration._countAndFlagsBits;
  v9 = *(_QWORD *)(from.configuration._countAndFlagsBits + 8);
  v10 = *(_QWORD *)(from.configuration._countAndFlagsBits + 16);
  v61 = *(_OWORD *)&v59[8];
  sub_FA4F4(&v60);
  sub_FA4F4((_QWORD *)&v60 + 1);
  sub_E45E8((uint64_t)&v61);
  sub_E6090(v6, v5, v7);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_5B810(&v60);
  sub_5B810((_QWORD *)&v60 + 1);
  sub_E48EC((uint64_t)&v61);
  if ((v16 & 1) != 0)
    goto LABEL_5;
  v17 = *(_OWORD *)(v3 + 72);
  v56 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)v57 = v17;
  *(_QWORD *)&v57[16] = *(_QWORD *)(v3 + 88);
  v62 = v56;
  v63[0] = *(_OWORD *)&v57[8];
  sub_FA4F4(&v62);
  sub_FA4F4((_QWORD *)&v62 + 1);
  sub_E45E8((uint64_t)v63);
  sub_E6090(v8, v9, v10);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  sub_5B810(&v62);
  sub_5B810((_QWORD *)&v62 + 1);
  sub_E48EC((uint64_t)v63);
  if ((v23 & 1) == 0 && (v12 != v19 || v14 != v21))
    return (BookEPUB::LocationMovement::Direction_optional)(v19 < v12);
LABEL_5:
  if (qword_3B5760 != -1)
    swift_once(&qword_3B5760, sub_E66A8);
  v24 = type metadata accessor for Logger(0);
  sub_555F0(v24, (uint64_t)qword_3BBB60);
  swift_bridgeObjectRetain_n(v6, 2);
  swift_bridgeObjectRetain_n(v7, 2);
  swift_bridgeObjectRetain_n(v8, 2);
  v25 = swift_bridgeObjectRetain_n(v10, 2);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter();
  v28 = v10;
  if (os_log_type_enabled(v26, v27))
  {
    v29 = swift_slowAlloc(22, -1);
    v52 = swift_slowAlloc(64, -1);
    *(_DWORD *)v29 = 136315394;
    v54 = 0xE100000000000000;
    v55 = v52;
    swift_bridgeObjectRetain(v6);
    type = v27;
    v31 = sub_E49E0(v30);
    swift_bridgeObjectRelease(v6);
    log = v26;
    v48 = sub_319AC((uint64_t *)&unk_3B8C90);
    v32 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
    v49 = v28;
    v33 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v48, v32);
    v35 = v34;
    swift_bridgeObjectRelease(v31);
    v36._countAndFlagsBits = v33;
    v36._object = v35;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v35);
    v37._countAndFlagsBits = 93;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    v53 = sub_33524(91, 0xE100000000000000, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v29 + 4);
    v38.value = BookEPUB_LocationMovement_Direction_unknownDefault;
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease(0xE100000000000000);
    *(_WORD *)(v29 + 12) = 2080;
    v53 = 91;
    v54 = 0xE100000000000000;
    swift_bridgeObjectRetain(v8);
    v40 = sub_E49E0(v39);
    swift_bridgeObjectRelease(v8);
    v41 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v48, v32);
    v43 = v42;
    swift_bridgeObjectRelease(v40);
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(v43);
    v45._countAndFlagsBits = 93;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    v46 = v54;
    v53 = sub_33524(v53, v54, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v29 + 14);
    swift_bridgeObjectRelease_n(v49, 2);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v46);
    _os_log_impl(&dword_0, log, type, "Failed to find indices of start %s and/or end %s spread", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    v38.value = BookEPUB_LocationMovement_Direction_unknownDefault;
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease_n(v6, 2);
  }
  return v38;
}

BookEPUB::SpreadPaginationEntity __swiftcall BookPaginationEntity.adjustedSpread(containing:)(BookEPUB::PageLocation containing)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *documentOrdinal;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BookEPUB::PageLocation v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  Swift::String v32;
  Swift::String v33;
  __int128 v34;
  Swift::String v35;
  void *object;
  void *v37;
  Swift::String v38;
  Swift::String v39;
  void *v40;
  Swift::String v41;
  __int128 v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t *v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  void *v59;
  Swift::String v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  void *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  Swift::String v78;
  _QWORD *v79;
  void *v80;
  Swift::String v81;
  Swift::String v82;
  void *v83;
  void *v84;
  Swift::String v85;
  __int128 v86;
  uint8_t *v87;
  uint64_t v88;
  __int128 v89;
  _QWORD *v90;
  __int128 v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  __n128 v98;
  uint64_t (*v99)(char *, uint64_t, __n128);
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint8_t *v117;
  char *v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD v125[2];
  __int128 v126;
  _BYTE v127[24];
  __int128 v128;
  _BYTE v129[24];
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  BookEPUB::SpreadPaginationEntity result;

  documentOrdinal = (uint64_t *)containing.documentOrdinal;
  v4 = v1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v115 - v10;
  v12 = *documentOrdinal;
  v13 = documentOrdinal[1];
  *(_QWORD *)&v126 = *documentOrdinal;
  *((_QWORD *)&v126 + 1) = v13;
  v14.documentOrdinal = (Swift::Int)&v126;
  BookPaginationEntity.spread(containing:)(v14);
  v15 = v128;
  if ((_QWORD)v128)
  {
    v123 = v13;
    v16 = *((_QWORD *)&v128 + 1);
    v17 = *(_QWORD *)v129;
    if (qword_3B5760 != -1)
      swift_once(&qword_3B5760, sub_E66A8);
    sub_555F0(v5, (uint64_t)qword_3BBB60);
    sub_5B864(v15, v16, v17);
    swift_bridgeObjectRetain(v15);
    v18 = swift_bridgeObjectRetain(v17);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter();
    v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      v22 = swift_slowAlloc(22, -1);
      v121 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v126 = v121;
      *(_DWORD *)v22 = 136315394;
      v119 = v22 + 4;
      v122 = v4;
      *(_QWORD *)&v128 = 91;
      *((_QWORD *)&v128 + 1) = 0xE100000000000000;
      v23 = swift_bridgeObjectRetain(v15);
      v24 = sub_E49E0(v23);
      swift_bridgeObjectRelease(v15);
      v124 = v24;
      v25 = sub_319AC((uint64_t *)&unk_3B8C90);
      LODWORD(v120) = v21;
      v26 = v25;
      v27 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
      v28 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v26, v27);
      v29 = v12;
      v31 = v30;
      swift_bridgeObjectRelease(v24);
      v32._countAndFlagsBits = v28;
      v32._object = v31;
      String.append(_:)(v32);
      swift_bridgeObjectRelease(v31);
      v33._countAndFlagsBits = 93;
      v33._object = (void *)0xE100000000000000;
      String.append(_:)(v33);
      v34 = v128;
      *(_QWORD *)&v128 = sub_33524(v128, *((unint64_t *)&v128 + 1), (uint64_t *)&v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 8, v119);
      swift_bridgeObjectRelease(*((_QWORD *)&v34 + 1));
      sub_5B838(v15, v16, v17);
      sub_5B838(v15, v16, v17);
      *(_WORD *)(v22 + 12) = 2080;
      *(_QWORD *)&v128 = 60;
      *((_QWORD *)&v128 + 1) = 0xE100000000000000;
      v124 = (_QWORD *)v29;
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v35._object;
      String.append(_:)(v35);
      v37 = object;
      v4 = v122;
      swift_bridgeObjectRelease(v37);
      v38._countAndFlagsBits = 58;
      v38._object = (void *)0xE100000000000000;
      String.append(_:)(v38);
      v124 = (_QWORD *)v123;
      v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v40 = v39._object;
      String.append(_:)(v39);
      swift_bridgeObjectRelease(v40);
      v41._countAndFlagsBits = 62;
      v41._object = (void *)0xE100000000000000;
      String.append(_:)(v41);
      v42 = v128;
      *(_QWORD *)&v128 = sub_33524(v128, *((unint64_t *)&v128 + 1), (uint64_t *)&v126);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 8, v22 + 14);
      swift_bridgeObjectRelease(*((_QWORD *)&v42 + 1));
      _os_log_impl(&dword_0, v19, (os_log_type_t)v120, "Returning #spread: %s for location: %s", (uint8_t *)v22, 0x16u);
      v43 = v121;
      swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_5B838(v15, v16, v17);
      sub_5B838(v15, v16, v17);
    }

    goto LABEL_19;
  }
  v118 = v8;
  v119 = v6;
  v120 = v11;
  v44 = BookPaginationEntity.spreads(around:)(v12);
  v45 = v2;
  if (qword_3B5760 != -1)
    swift_once(&qword_3B5760, sub_E66A8);
  v46 = v5;
  v47 = sub_555F0(v5, (uint64_t)qword_3BBB60);
  v48 = swift_bridgeObjectRetain(v44);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v50))
  {
    v51 = swift_slowAlloc(22, -1);
    v122 = v4;
    v52 = v51;
    v116 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v126 = v116;
    *(_DWORD *)v52 = 136315394;
    v115 = v52 + 4;
    *(_QWORD *)&v128 = 60;
    *((_QWORD *)&v128 + 1) = 0xE100000000000000;
    v124 = (_QWORD *)v12;
    v123 = v13;
    v121 = v12;
    v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v117 = (uint8_t *)v46;
    v54 = v47;
    v55 = v2;
    v56 = v53._object;
    String.append(_:)(v53);
    swift_bridgeObjectRelease(v56);
    v57._countAndFlagsBits = 58;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    v124 = (_QWORD *)v123;
    v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v59 = v58._object;
    String.append(_:)(v58);
    swift_bridgeObjectRelease(v59);
    v60._countAndFlagsBits = 62;
    v60._object = (void *)0xE100000000000000;
    String.append(_:)(v60);
    v61 = *((_QWORD *)&v128 + 1);
    *(_QWORD *)&v128 = sub_33524(v128, *((unint64_t *)&v128 + 1), (uint64_t *)&v126);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 8, v115);
    swift_bridgeObjectRelease(v61);
    *(_WORD *)(v52 + 12) = 2080;
    v62 = swift_bridgeObjectRetain(v44);
    v63 = Array.description.getter(v62, &type metadata for SpreadPaginationEntity);
    v65 = v64;
    swift_bridgeObjectRelease(v44);
    v66 = v63;
    v45 = v55;
    v47 = v54;
    v46 = (uint64_t)v117;
    *(_QWORD *)&v128 = sub_33524(v66, v65, (uint64_t *)&v126);
    v12 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 8, v52 + 14);
    swift_bridgeObjectRelease_n(v44, 2);
    v67 = v65;
    v13 = v123;
    swift_bridgeObjectRelease(v67);
    _os_log_impl(&dword_0, v49, v50, "Failed to find spread for %s in %s. Attempting to find nearest", (uint8_t *)v52, 0x16u);
    v68 = v116;
    swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    v69 = v52;
    v4 = v122;
    swift_slowDealloc(v69, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v44, 2);
  }
  *(_QWORD *)&v126 = v12;
  *((_QWORD *)&v126 + 1) = v13;
  sub_E95BC((uint64_t *)&v126, (uint64_t *)&v128);
  v15 = v128;
  if ((_QWORD)v128)
  {
    v16 = *((_QWORD *)&v128 + 1);
    v17 = *(_QWORD *)v129;
LABEL_19:
    *v4 = v15;
    v4[1] = v16;
    v4[2] = v17;
    goto LABEL_27;
  }
  v73 = Logger.logObject.getter(v70);
  v74 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = swift_slowAlloc(12, -1);
    v123 = v47;
    v122 = v45;
    v76 = (uint8_t *)v75;
    v77 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v126 = v77;
    v121 = v12;
    *(_DWORD *)v76 = 136315138;
    v117 = v76 + 4;
    *(_QWORD *)&v128 = 60;
    *((_QWORD *)&v128 + 1) = 0xE100000000000000;
    v124 = (_QWORD *)v121;
    v78._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v79 = (_QWORD *)v13;
    v80 = v78._object;
    String.append(_:)(v78);
    swift_bridgeObjectRelease(v80);
    v81._countAndFlagsBits = 58;
    v81._object = (void *)0xE100000000000000;
    String.append(_:)(v81);
    v124 = v79;
    v82._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v83 = v82._object;
    String.append(_:)(v82);
    v84 = v83;
    v13 = (uint64_t)v79;
    swift_bridgeObjectRelease(v84);
    v85._countAndFlagsBits = 62;
    v85._object = (void *)0xE100000000000000;
    String.append(_:)(v85);
    v86 = v128;
    *(_QWORD *)&v128 = sub_33524(v128, *((unint64_t *)&v128 + 1), (uint64_t *)&v126);
    v12 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 8, v117);
    swift_bridgeObjectRelease(*((_QWORD *)&v86 + 1));
    _os_log_impl(&dword_0, v73, v74, "Failed to find nearest spread for %s -- Returning spread for start of document", v76, 0xCu);
    swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    v87 = v76;
    v45 = v122;
    v47 = v123;
    swift_slowDealloc(v87, -1, -1);
  }

  v88 = (uint64_t)v120;
  v89 = *(_OWORD *)(v45 + 9);
  v128 = *(_OWORD *)(v45 + 7);
  *(_OWORD *)v129 = v89;
  *(_QWORD *)&v129[16] = v45[11];
  v130 = v128;
  v131 = *(_OWORD *)&v129[8];
  sub_FA4F4(&v130);
  sub_FA4F4((_QWORD *)&v130 + 1);
  sub_E45E8((uint64_t)&v131);
  v90 = (_QWORD *)sub_13AAD0(v12);
  sub_5B810(&v130);
  sub_5B810((_QWORD *)&v130 + 1);
  sub_E48EC((uint64_t)&v131);
  if (v90[2])
  {
    v15 = v90[4];
    v16 = v90[5];
    v17 = v90[6];
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRelease(v90);
    goto LABEL_19;
  }
  v121 = v12;
  swift_bridgeObjectRelease(v90);
  v91 = *(_OWORD *)(v45 + 9);
  v126 = *(_OWORD *)(v45 + 7);
  *(_OWORD *)v127 = v91;
  *(_QWORD *)&v127[16] = v45[11];
  v92 = v126;
  v132 = v126;
  if (sub_13BE60(v126, v91) | *(_QWORD *)(v92 + 16))
  {
    v133 = *((_QWORD *)&v126 + 1);
    v134 = *(_OWORD *)&v127[8];
    sub_FA4F4(&v132);
    sub_FA4F4(&v133);
    sub_E45E8((uint64_t)&v134);
    sub_13AE64(0, 0, &v124);
    sub_5B810(&v132);
    sub_5B810(&v133);
    v108 = sub_E48EC((uint64_t)&v134);
    v109 = v124;
    v110 = v125[0];
    v111 = v125[1];
    v112 = Logger.logObject.getter(v108);
    v113 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v112, v113))
    {
      v114 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v114 = 134217984;
      v124 = (_QWORD *)v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v114 + 4);
      swift_slowDealloc(v114, -1, -1);
    }

    *v4 = (uint64_t)v109;
    v4[1] = v110;
    v4[2] = v111;
  }
  else
  {
    v93 = v45;
    v94 = v119;
    v95 = v118;
    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v118, v47, v46);
    v96 = v93;
    v97 = v93[11];
    swift_bridgeObjectRetain(v97);
    Logger.once(_:_:_:)(v97, 0xD00000000000001BLL, 0x80000000002CB3B0, 367, v88);
    v98 = swift_bridgeObjectRelease(v97);
    v99 = *(uint64_t (**)(char *, uint64_t, __n128))(v94 + 8);
    v100 = v99(v95, v46, v98);
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v101, v102))
    {
      v103 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v103 = 134217984;
      v88 = (uint64_t)v120;
      v124 = (_QWORD *)v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v103 + 4);
      _os_log_impl(&dword_0, v101, v102, "Completely failed to get any spreads for ordinal %ld - Returning a spread for page location and hoping for the best.", v103, 0xCu);
      swift_slowDealloc(v103, -1, -1);
    }

    ((void (*)(uint64_t, uint64_t))v99)(v88, v46);
    v104 = sub_319AC(&qword_3B6858);
    v105 = swift_allocObject(v104, 56, 7);
    *(_OWORD *)(v105 + 16) = xmmword_2E5F80;
    *(_QWORD *)(v105 + 32) = v121;
    *(_QWORD *)(v105 + 40) = v13;
    *(_BYTE *)(v105 + 48) = 0;
    v107 = v96[10];
    v106 = v96[11];
    *v4 = v105;
    v4[1] = v107;
    v4[2] = v106;
    v70 = (void *)swift_bridgeObjectRetain(v106);
  }
LABEL_27:
  result.configuration._object = v72;
  result.configuration._countAndFlagsBits = v71;
  result.columns._rawValue = v70;
  return result;
}

double sub_EBB0C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  double result;
  _QWORD *v17;
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE v20[24];

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD **)(*v1 + 16);
  if (v3)
  {
    if ((unint64_t)a1 >> 62)
      goto LABEL_24;
    v5 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(*v1);
    swift_bridgeObjectRetain(a1);
    for (; v5; v5 = _CocoaArrayWrapper.endIndex.getter(v15))
    {
      v17 = v1;
      v18 = v2;
      if ((a1 & 0xC000000000000001) != 0)
      {
        v6 = 0;
        v2 = 0;
        v1 = (_QWORD *)((char *)v3 - 1);
        v3 = v18;
        while (1)
        {
          v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
          if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
            v3 = sub_E3A28(v3);
          if ((unint64_t)v6 >= v3[2])
            break;
          v8 = (_QWORD *)(v7 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
          swift_beginAccess(v7 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v20, 0, 0);
          *(_QWORD *)((char *)v2 + (_QWORD)v3 + 40) = *v8;
          v9 = (_QWORD *)(v7 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
          swift_beginAccess(v7 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v19, 0, 0);
          *(_QWORD *)((char *)v2 + (_QWORD)v3 + 48) = *v9;
          swift_unknownObjectRelease(v7);
          if (v1 != v6)
          {
            v2 += 3;
            v6 = (_QWORD *)((char *)v6 + 1);
            if ((_QWORD *)v5 != v6)
              continue;
          }
          goto LABEL_20;
        }
        __break(1u);
      }
      else
      {
        v10 = 0;
        v11 = 0;
        v2 = *(_QWORD **)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
        v1 = (_QWORD *)((char *)v3 - 1);
        v3 = v18;
        while (v2 != (_QWORD *)v10)
        {
          v12 = *(_QWORD *)(a1 + 32 + 8 * v10);
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
            v3 = sub_E3A28(v3);
          if (v10 >= v3[2])
            goto LABEL_23;
          v13 = (_QWORD *)(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
          swift_beginAccess(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v20, 0, 0);
          v3[v11 + 5] = *v13;
          v14 = (_QWORD *)(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
          swift_beginAccess(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v19, 0, 0);
          v3[v11 + 6] = *v14;
          swift_release();
          if (v1 != (_QWORD *)v10)
          {
            v11 += 3;
            if (v5 != ++v10)
              continue;
          }
LABEL_20:
          swift_bridgeObjectRelease(a1);
          v1 = v17;
          v2 = v18;
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      if (a1 < 0)
        v15 = a1;
      else
        v15 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v2);
      swift_bridgeObjectRetain(a1);
    }
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    swift_bridgeObjectRetain(*v1);
  }
  v3 = v2;
LABEL_30:
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v2);
  *v1 = v3;
  sub_13AC8C();
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

void sub_EBDB4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  _QWORD v26[5];

  v2 = *a1;
  v23 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  swift_beginAccess(v1 + 48, v25, 0, 0);
  v5 = *(_QWORD *)(v1 + 48);
  if ((unint64_t)v5 >> 62)
    goto LABEL_53;
  v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 48));
  if (!v6)
  {
LABEL_57:
    swift_bridgeObjectRelease(v5);
    return;
  }
LABEL_3:
  v7 = v5 & 0xC000000000000001;
  v24 = v5 + 32;
  v22 = v6;
  do
  {
    v8 = v6 - 1;
    if (__OFSUB__(v6, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      if (v5 < 0)
        v21 = v5;
      else
        v21 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (!v6)
        goto LABEL_57;
      goto LABEL_3;
    }
    if (v7)
    {
      swift_bridgeObjectRetain(v5);
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 1, v5);
      swift_bridgeObjectRelease(v5);
      v11 = *(_QWORD *)(v9 + 32);
      v10 = *(_QWORD *)(v9 + 40);
      swift_unknownObjectRelease(v9);
      if (v3 != v11)
        goto LABEL_4;
      if (v4 >= v10)
        break;
      goto LABEL_5;
    }
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_49;
    if (v8 >= *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
      goto LABEL_50;
    v12 = *(_QWORD *)(v24 + 8 * v8);
    v11 = *(_QWORD *)(v12 + 32);
    if (v3 != v11)
    {
LABEL_4:
      if (v3 >= v11)
        break;
      goto LABEL_5;
    }
    if (v4 >= *(_QWORD *)(v12 + 40))
      break;
LABEL_5:
    --v6;
  }
  while (v8);
  if ((v6 | v22) < 0)
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v22 < v6)
  {
    __break(1u);
    goto LABEL_59;
  }
  if (!v6)
    goto LABEL_57;
  v13 = 0;
  while (1)
  {
    v14 = v13 + 1;
    if (__OFADD__(v13, 1))
      goto LABEL_45;
    if (v6 < v14 || v14 < 1)
      goto LABEL_46;
    if (v7)
    {
      v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v5);
      v3 = *(_QWORD *)(v15 + 32);
      v16 = *(_QWORD *)(v15 + 40);
      swift_unknownObjectRelease(v15);
      if (v3 != v2)
        goto LABEL_20;
    }
    else
    {
      if (v13 >= *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
        goto LABEL_51;
      v17 = *(_QWORD *)(v24 + 8 * v13);
      if (*(_QWORD *)(v17 + 32) != v2)
        goto LABEL_20;
      v16 = *(_QWORD *)(v17 + 40);
    }
    if (v16 == v23)
      break;
LABEL_20:
    ++v13;
    if (v14 == v6)
    {
      v13 = v6;
      while (1)
      {
        if (__OFSUB__(v13--, 1))
          goto LABEL_47;
        if (v13 > 0x7FFFFFFFFFFFFFFELL)
          goto LABEL_48;
        if (v7)
        {
          v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v5);
          v4 = *(_QWORD *)(v19 + 32);
          v3 = *(_QWORD *)(v19 + 40);
          swift_unknownObjectRelease(v19);
          if (v4 != v2)
            goto LABEL_31;
        }
        else
        {
          if (v13 >= *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFFF8)))
            goto LABEL_52;
          v20 = *(_QWORD *)(v24 + 8 * v13);
          v4 = *(_QWORD *)(v20 + 32);
          if (v4 != v2)
          {
LABEL_31:
            if (v4 < v2)
              goto LABEL_42;
            goto LABEL_32;
          }
          v3 = *(_QWORD *)(v20 + 40);
        }
        if (v3 < v23)
          goto LABEL_42;
LABEL_32:
        if (!v13)
          goto LABEL_57;
      }
    }
  }
LABEL_42:
  if (v6 >= (uint64_t)v13)
  {
    v26[0] = v13;
    v26[1] = v6;
    v26[2] = v6;
    v26[3] = 0;
    v26[4] = v5;
    sub_F4594(v26);
    goto LABEL_57;
  }
LABEL_60:
  __break(1u);
}

uint64_t sub_EC08C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v3;
  unsigned int v4;

  v2 = *a1;
  if (*a2)
    v3 = v2 == *a2;
  else
    v3 = 0;
  v4 = v3;
  if (v2)
    return v4;
  else
    return *a2 == 0;
}

unint64_t sub_EC0B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v2 = *a1;
  v3 = a1[1];
  swift_beginAccess(v1 + 48, v13, 0, 0);
  v4 = *(_QWORD *)(v1 + 48);
  if ((unint64_t)v4 >> 62)
    goto LABEL_19;
  v5 = *(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v4);
  while (v5)
  {
    while (__OFSUB__(v5--, 1))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      if (v4 < 0)
        v11 = v4;
      else
        v11 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v5 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v5)
        goto LABEL_23;
    }
    if ((v4 & 0xC000000000000001) != 0)
    {
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v4);
      v9 = *(_QWORD *)(v7 + 32);
      v8 = *(_QWORD *)(v7 + 40);
      swift_unknownObjectRelease(v7);
      if (v2 != v9)
        goto LABEL_4;
      if (v3 >= v8)
        break;
      continue;
    }
    if ((v5 & 0x8000000000000000) != 0)
      goto LABEL_17;
    if (v5 >= *(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFFF8)))
      goto LABEL_18;
    v10 = *(_QWORD *)(v4 + 32 + 8 * v5);
    v9 = *(_QWORD *)(v10 + 32);
    if (v2 != v9)
    {
LABEL_4:
      if (v2 >= v9)
        break;
      continue;
    }
    if (v3 >= *(_QWORD *)(v10 + 40))
      break;
  }
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v5;
}

uint64_t BookPaginationEntity.document(containingBookmark:)(uint64_t a1, uint64_t a2)
{
  return sub_EC208(a1, a2, sub_FA954);
}

uint64_t BookPaginationEntity.document(containingHighlight:)(uint64_t a1, uint64_t a2)
{
  return sub_EC208(a1, a2, sub_FAC80);
}

uint64_t sub_EC208(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(v3 + 104);
  swift_bridgeObjectRetain(a2);
  v8 = swift_bridgeObjectRetain(v7);
  v9 = a3(v8, a1, a2);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(a2);
  return v9;
}

uint64_t BookPaginationEntity.document(containingAnnotation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v2 + 104);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v5);
  v7 = sub_FA954(v6, a1, a2);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(a2);
  if (!v7)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v5);
    v7 = sub_FAC80(v8, a1, a2);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(a2);
  }
  return v7;
}

_QWORD *BookPaginationEntity.bookmarks(for:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  Swift::String v28;
  void *object;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[3];
  _QWORD v38[2];
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v5 = *a1;
  v4 = (uint64_t *)a1[1];
  v37[0] = *a1;
  v37[1] = (uint64_t)v4;
  v6 = v37;
  BookPaginationEntity.spread(containing:)(*(BookEPUB::PageLocation *)(&a2 - 1));
  v7 = v40;
  if (!v40)
  {
    if (qword_3B5760 != -1)
      goto LABEL_25;
    goto LABEL_18;
  }
  v39 = _swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(v40 + 16);
  if (!v5)
  {
    sub_5B838(v40, v41, v42);
    return _swiftEmptyArrayStorage;
  }
  v35 = v42;
  v36 = v41;
  swift_bridgeObjectRetain_n(v40, 2);
  v8 = (_BYTE *)(v7 + 48);
  v4 = &qword_3B7058;
  while (1)
  {
    if ((*v8 & 1) != 0)
      goto LABEL_5;
    v9 = *(_QWORD *)(v3 + 104);
    if (!*(_QWORD *)(v9 + 16))
      goto LABEL_5;
    v10 = *((_QWORD *)v8 - 1);
    v11 = sub_3B7F8(*((_QWORD *)v8 - 2));
    if ((v12 & 1) == 0)
      goto LABEL_5;
    v13 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v11)
                    + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(v13, &v40, 0, 0);
    v14 = *v13;
    v38[0] = v10;
    v38[1] = v14;
    swift_bridgeObjectRetain(v14);
    v15 = sub_319AC(&qword_3B7058);
    v16 = sub_3DCC0((unint64_t *)&qword_3BBB80, &qword_3B7058, (uint64_t)&protocol conformance descriptor for [A]);
    if ((Collection.validate(index:)(v38, v15, v16) & 1) != 0)
      break;
    swift_bridgeObjectRelease(v14);
LABEL_5:
    v8 += 24;
    if (!--v5)
    {
      swift_bridgeObjectRelease(v7);
      sub_5B838(v7, v36, v35);
      swift_bridgeObjectRelease(v7);
      return v39;
    }
  }
  if ((v14 & 0xC000000000000001) != 0)
  {
    v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v14);
LABEL_14:
    swift_bridgeObjectRelease(v14);
    swift_beginAccess(v17 + 72, v37, 0, 0);
    v18 = *(_QWORD *)(v17 + 72);
    v19 = swift_bridgeObjectRetain(v18);
    v20 = sub_E4CE4(v19);
    swift_bridgeObjectRelease(v18);
    sub_66AAC((uint64_t)v20);
    swift_release();
    goto LABEL_5;
  }
  if ((v10 & 0x8000000000000000) == 0)
  {
    if (v10 >= *(_QWORD *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8)))
      goto LABEL_24;
    v17 = *(_QWORD *)(v14 + 8 * v10 + 32);
    swift_retain(v17);
    goto LABEL_14;
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  swift_once(&qword_3B5760, sub_E66A8);
LABEL_18:
  v22 = type metadata accessor for Logger(0);
  v23 = sub_555F0(v22, (uint64_t)qword_3BBB60);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v37[0] = v27;
    *(_DWORD *)v26 = 136315138;
    v40 = 60;
    v41 = 0xE100000000000000;
    v39 = (_QWORD *)v5;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v28._object;
    String.append(_:)(v28);
    swift_bridgeObjectRelease(object);
    v30._countAndFlagsBits = 58;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v39 = v4;
    v31._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v32 = v31._object;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v32);
    v33._countAndFlagsBits = 62;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    v34 = v41;
    v40 = sub_33524(v40, v41, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 4);
    swift_bridgeObjectRelease(v34);
    _os_log_impl(&dword_0, v24, v25, "Unable to find spread for location %s - Will not attempt to discover bookmarks", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }

  return _swiftEmptyArrayStorage;
}

uint64_t BookPaginationEntity.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;
  void *v22;
  Swift::String v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  uint64_t v29[3];
  _BYTE v30[24];
  _QWORD v31[3];
  _QWORD v32[2];

  v1 = v0;
  v31[0] = 0;
  v31[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(185);
  v32[0] = 0;
  v32[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 0xD000000000000035;
  v2._object = (void *)0x80000000002CB3D0;
  String.append(_:)(v2);
  swift_beginAccess(v0 + 16, v31, 0, 0);
  if (*(_BYTE *)(v0 + 16))
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 16))
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._object = (void *)0x80000000002CB410;
  v6._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v6);
  swift_beginAccess(v0 + 24, v30, 0, 0);
  v29[0] = *(_QWORD *)(v0 + 24);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._object = (void *)0x80000000002CB430;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  v10 = *(_QWORD *)(v0 + 40);
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v25 = *(_QWORD *)(v1 + 40);
    else
      v25 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 40));
    v11 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v10);
  }
  else
  {
    v11 = *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8));
  }
  v29[0] = v11;
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0xD000000000000017;
  v14._object = (void *)0x80000000002CB450;
  String.append(_:)(v14);
  swift_beginAccess(v1 + 112, v29, 0, 0);
  if (*(_BYTE *)(v1 + 112))
    v15 = 1702195828;
  else
    v15 = 0x65736C6166;
  if (*(_BYTE *)(v1 + 112))
    v16 = 0xE400000000000000;
  else
    v16 = 0xE500000000000000;
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 0xD000000000000015;
  v18._object = (void *)0x80000000002CB470;
  String.append(_:)(v18);
  swift_beginAccess(v1 + 48, v28, 0, 0);
  v19 = *(_QWORD *)(v1 + 48);
  if ((unint64_t)v19 >> 62)
  {
    if (v19 < 0)
      v26 = *(_QWORD *)(v1 + 48);
    else
      v26 = v19 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 48));
    v20 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    v20 = *(_QWORD *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFF8));
  }
  v27 = v20;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v23._countAndFlagsBits = 0xD000000000000020;
  v23._object = (void *)0x80000000002CB490;
  String.append(_:)(v23);
  LOBYTE(v27) = *(_BYTE *)(v1 + 96);
  _print_unlocked<A, B>(_:_:)(&v27, v32, &type metadata for BookNavigationDirection, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v32[0];
}

uint64_t sub_EC9E8()
{
  return BookPaginationEntity.description.getter();
}

uint64_t BookPaginationEntity.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  char v27;
  _BYTE v28[24];
  _QWORD v29[3];
  _BYTE v30[24];
  _QWORD v31[3];
  _QWORD v32[2];

  v1 = v0;
  v31[0] = 0;
  v31[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(185);
  v32[0] = 0;
  v32[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 0xD000000000000035;
  v2._object = (void *)0x80000000002CB3D0;
  String.append(_:)(v2);
  swift_beginAccess(v0 + 16, v31, 0, 0);
  if (*(_BYTE *)(v0 + 16))
    v3 = 1702195828;
  else
    v3 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 16))
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(v4);
  v6._object = (void *)0x80000000002CB410;
  v6._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v6);
  swift_beginAccess(v0 + 24, v30, 0, 0);
  v29[0] = *(_QWORD *)(v0 + 24);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._object = (void *)0x80000000002CB430;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  v10 = *(_QWORD *)(v0 + 40);
  v11 = type metadata accessor for DocumentPaginationEntity(0);
  swift_bridgeObjectRetain(v10);
  v13._countAndFlagsBits = Array.description.getter(v12, v11);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 0xD000000000000017;
  v15._object = (void *)0x80000000002CB450;
  String.append(_:)(v15);
  swift_beginAccess(v1 + 112, v29, 0, 0);
  if (*(_BYTE *)(v1 + 112))
    v16 = 1702195828;
  else
    v16 = 0x65736C6166;
  if (*(_BYTE *)(v1 + 112))
    v17 = 0xE400000000000000;
  else
    v17 = 0xE500000000000000;
  v18 = v17;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease(v17);
  v19._countAndFlagsBits = 0xD000000000000015;
  v19._object = (void *)0x80000000002CB470;
  String.append(_:)(v19);
  swift_beginAccess(v1 + 48, v28, 0, 0);
  v20 = *(_QWORD *)(v1 + 48);
  v21 = type metadata accessor for ChapterPaginationEntity();
  swift_bridgeObjectRetain(v20);
  v23._countAndFlagsBits = Array.description.getter(v22, v21);
  v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v24);
  v25._countAndFlagsBits = 0xD000000000000020;
  v25._object = (void *)0x80000000002CB490;
  String.append(_:)(v25);
  v27 = *(_BYTE *)(v1 + 96);
  _print_unlocked<A, B>(_:_:)(&v27, v32, &type metadata for BookNavigationDirection, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v32[0];
}

uint64_t sub_ECC94()
{
  return BookPaginationEntity.debugDescription.getter();
}

void sub_ECCB4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3BBF58);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_ECFBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3BBED0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v31[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_ED2C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3B6698);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v34 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v11;
    v33 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v35 & 1) == 0)
              {
                swift_release();
                v3 = v34;
                goto LABEL_41;
              }
              if (v33 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v32;
              v3 = v34;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v18);
      v24 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v25 = -1 << *(_BYTE *)(v8 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
LABEL_41:
  *v3 = v8;
}

void sub_ED55C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  int64_t v36;
  __int128 v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC((uint64_t *)&unk_3BC000);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = a2;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v34 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (unint64_t)(v11 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return;
        }
        if (v19 >= v36)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v36)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v36)
            {
LABEL_34:
              if ((v35 & 1) != 0)
              {
                if (v34 >= 64)
                  bzero((void *)(v5 + 64), 8 * v36);
                else
                  *v10 = v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v9 >= v36)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_QWORD *)(v5 + 56) + 24 * v18;
      v24 = *(_QWORD *)(v23 + 16);
      v37 = *(_OWORD *)v23;
      v25 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v22;
      v16 = *(_QWORD *)(v8 + 56) + 24 * v15;
      *(_OWORD *)v16 = v37;
      *(_QWORD *)(v16 + 16) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_ED81C(uint64_t a1, uint64_t a2)
{
  sub_EE76C(a1, a2, &qword_3B6678);
}

void sub_ED828(uint64_t a1, uint64_t a2)
{
  sub_EF5E4(a1, a2, (uint64_t *)&unk_3BBF60);
}

void sub_ED834(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3B66A8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v35 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v22 >= v34)
          goto LABEL_36;
        v23 = v35[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v34)
            goto LABEL_36;
          v23 = v35[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero(v35, 8 * v34);
                else
                  *v35 = v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v35[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v9 >= v34)
                  goto LABEL_36;
                v23 = v35[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = *(_QWORD *)(v5 + 56) + 56 * v21;
      v31 = *(_QWORD *)(v30 + 16);
      v37 = *(_OWORD *)(v30 + 24);
      v38 = *(_OWORD *)v30;
      v36 = *(_OWORD *)(v30 + 40);
      if ((a2 & 1) == 0)
      {
        swift_unknownObjectRetain(v36);
        swift_unknownObjectRetain(v38);
        swift_unknownObjectRetain(v37);
      }
      v14 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v29);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = *(_QWORD *)(v8 + 56) + 56 * v18;
      *(_OWORD *)v19 = v38;
      *(_QWORD *)(v19 + 16) = v31;
      *(_OWORD *)(v19 + 24) = v37;
      *(_OWORD *)(v19 + 40) = v36;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_EDB4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _BYTE v34[64];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC((uint64_t *)&unk_3BC060);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = v3;
    v9 = 0;
    v10 = (_QWORD *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = v7 + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (v19 >= v14)
          goto LABEL_37;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_37;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                swift_release();
                v3 = v33;
                goto LABEL_44;
              }
              v32 = 1 << *(_BYTE *)(v5 + 32);
              if (v32 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v10 = -1 << v32;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_46;
                if (v9 >= v14)
                  goto LABEL_37;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_QWORD *)(v5 + 56) + (v18 << 6);
      if ((a2 & 1) != 0)
        sub_3F1FC(v23, (uint64_t)v34);
      else
        sub_5B6D0(v23, (uint64_t)v34);
      v24 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v25 = -1 << *(_BYTE *)(v8 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v15 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v15 + 8 * v27);
        }
        while (v31 == -1);
        v16 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      sub_3F1FC((uint64_t)v34, *(_QWORD *)(v8 + 56) + (v16 << 6));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
LABEL_44:
  *v3 = v8;
}

void sub_EDE0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3B66B8);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release();
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_3F180(v24, v38);
      }
      else
      {
        sub_344A8((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_3F180(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_EE108(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  char v42;
  _QWORD v43[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC((uint64_t *)&unk_3BC010);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v39 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v41 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v22 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v23 = v22 | (v13 << 6);
      }
      else
      {
        v24 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v40)
          goto LABEL_36;
        v25 = v41[v24];
        ++v13;
        if (!v25)
        {
          v13 = v24 + 1;
          if (v24 + 1 >= v40)
            goto LABEL_36;
          v25 = v41[v13];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v40)
            {
LABEL_36:
              swift_release();
              v3 = v39;
              if ((v42 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v5 + 32);
                if (v38 >= 64)
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v38;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v41[v26];
            if (!v25)
            {
              while (1)
              {
                v13 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v13 >= v40)
                  goto LABEL_36;
                v25 = v41[v13];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v13 = v26;
          }
        }
LABEL_33:
        v11 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v13 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v35 = *(_QWORD *)(v5 + 56) + v31;
      v36 = *(_QWORD *)v35;
      v37 = *(_BYTE *)(v35 + 8);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32[1]);
        sub_3F1E4(v36, v37);
      }
      Hasher.init(_seed:)(v43, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v43, v34, v33);
      v14 = Hasher._finalize()();
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v17 == v28;
          if (v17 == v28)
            v17 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v17);
        }
        while (v30 == -1);
        v18 = __clz(__rbit64(~v30)) + (v17 << 6);
      }
      *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      v19 = 16 * v18;
      v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
      *v20 = v34;
      v20[1] = v33;
      v21 = *(_QWORD *)(v8 + 56) + v19;
      *(_QWORD *)v21 = v36;
      *(_BYTE *)(v21 + 8) = v37;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_EE424(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3B6648);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v39 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v41 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v11)
      {
        v24 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v25 = v24 | (v13 << 6);
      }
      else
      {
        v26 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v26 >= v40)
          goto LABEL_36;
        v27 = v41[v26];
        ++v13;
        if (!v27)
        {
          v13 = v26 + 1;
          if (v26 + 1 >= v40)
            goto LABEL_36;
          v27 = v41[v13];
          if (!v27)
          {
            v28 = v26 + 2;
            if (v28 >= v40)
            {
LABEL_36:
              swift_release();
              v3 = v39;
              if ((v43 & 1) != 0)
              {
                v38 = 1 << *(_BYTE *)(v5 + 32);
                if (v38 >= 64)
                  bzero(v41, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v38;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v27 = v41[v28];
            if (!v27)
            {
              while (1)
              {
                v13 = v28 + 1;
                if (__OFADD__(v28, 1))
                  goto LABEL_43;
                if (v13 >= v40)
                  goto LABEL_36;
                v27 = v41[v13];
                ++v28;
                if (v27)
                  goto LABEL_33;
              }
            }
            v13 = v28;
          }
        }
LABEL_33:
        v11 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v13 << 6);
      }
      v33 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v25);
      v34 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v25);
      v35 = *v34;
      v36 = v34[1];
      if ((v43 & 1) == 0)
      {
        v37 = v33;
        swift_bridgeObjectRetain(v36);
      }
      v14 = *(_QWORD *)(v8 + 40);
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v17 = v16;
      Hasher.init(_seed:)(v44, v14);
      String.hash(into:)(v44, v15, v17);
      v18 = Hasher._finalize()();
      swift_bridgeObjectRelease(v17);
      v19 = -1 << *(_BYTE *)(v8 + 32);
      v20 = v18 & ~v19;
      v21 = v20 >> 6;
      if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v21 == v30;
          if (v21 == v30)
            v21 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v21);
        }
        while (v32 == -1);
        v22 = __clz(__rbit64(~v32)) + (v21 << 6);
      }
      *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v22) = v33;
      v23 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v22);
      *v23 = v35;
      v23[1] = v36;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_EE748(uint64_t a1, uint64_t a2)
{
  sub_EEA28(a1, a2, (uint64_t *)&unk_3BBE30);
}

void sub_EE754(uint64_t a1, uint64_t a2)
{
  sub_F021C(a1, a2, (uint64_t *)&unk_3BC020);
}

void sub_EE760(uint64_t a1, uint64_t a2)
{
  sub_EE76C(a1, a2, &qword_3B6680);
}

void sub_EE76C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_319AC(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v34 = -1 << v12;
    v35 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v36 = (unint64_t)(v12 + 63) >> 6;
    v15 = v8 + 64;
    while (1)
    {
      if (v14)
      {
        v22 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v23 = v22 | (v10 << 6);
      }
      else
      {
        v24 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v24 >= v36)
          goto LABEL_36;
        v25 = v11[v24];
        ++v10;
        if (!v25)
        {
          v10 = v24 + 1;
          if (v24 + 1 >= v36)
            goto LABEL_36;
          v25 = v11[v10];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v36)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v35 >= 64)
                  bzero((void *)(v6 + 64), 8 * v36);
                else
                  *v11 = v34;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                v10 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_44;
                if (v10 >= v36)
                  goto LABEL_36;
                v25 = v11[v10];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v10 = v26;
          }
        }
LABEL_33:
        v14 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v10 << 6);
      }
      v31 = 8 * v23;
      v32 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v31);
      v33 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v31);
      if ((a2 & 1) == 0)
        swift_retain();
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v32);
      v17 = -1 << *(_BYTE *)(v9 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v32;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v33;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release();
  *v4 = v9;
}

void sub_EEA1C(uint64_t a1, uint64_t a2)
{
  sub_EEA28(a1, a2, &qword_3B65F0);
}

void sub_EEA28(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;
  __int128 v36;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_319AC(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v35 = a2;
    v34 = v4;
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v32 = -1 << v12;
    v33 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v15 = (unint64_t)(v12 + 63) >> 6;
    v16 = v8 + 64;
    while (1)
    {
      if (v14)
      {
        v18 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v19 = v18 | (v10 << 6);
      }
      else
      {
        v20 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v20 >= v15)
          goto LABEL_34;
        v21 = v11[v20];
        ++v10;
        if (!v21)
        {
          v10 = v20 + 1;
          if (v20 + 1 >= v15)
            goto LABEL_34;
          v21 = v11[v10];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v15)
            {
LABEL_34:
              if ((v35 & 1) == 0)
              {
                swift_release(v6);
                v4 = v34;
                goto LABEL_41;
              }
              if (v33 >= 64)
                bzero((void *)(v6 + 64), 8 * v15);
              else
                *v11 = v32;
              v4 = v34;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v21 = v11[v22];
            if (!v21)
            {
              while (1)
              {
                v10 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v10 >= v15)
                  goto LABEL_34;
                v21 = v11[v10];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v10 = v22;
          }
        }
LABEL_24:
        v14 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v10 << 6);
      }
      v23 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v19);
      v36 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + 16 * v19);
      v24 = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v23);
      v25 = -1 << *(_BYTE *)(v9 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v16 + 8 * (v26 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v16 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v16 + 8 * v27);
        }
        while (v31 == -1);
        v17 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v17) = v23;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v17) = v36;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v6);
LABEL_41:
  *v4 = v9;
}

void sub_EECC4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  char v20;
  uint64_t v21[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3B65E0);
  v20 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_30;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v18 = v3;
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain();
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_20;
  }
  if (v19 <= 1)
  {
    swift_release();
    v12 = (_QWORD *)(v5 + 64);
    if ((v20 & 1) == 0)
      goto LABEL_30;
    goto LABEL_26;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_19;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_23;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_19:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_20:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((v20 & 1) == 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 16 * v11 + 8));
    Hasher.init(_seed:)(v21, *(_QWORD *)(v7 + 40));
    __asm { BR              X9 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_19;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0xEF13CLL);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_19;
    }
  }
LABEL_23:
  swift_release();
  v3 = v18;
  if ((v20 & 1) == 0)
    goto LABEL_30;
LABEL_26:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_30:
  swift_release();
  *v3 = v7;
}

void sub_EF1A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC((uint64_t *)&unk_3BBEC0);
  v54 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v51 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v49 = v2;
  v50 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  v52 = v5;
  v53 = v8;
  while (1)
  {
    if (v11)
    {
      v55 = (v11 - 1) & v11;
      v56 = v13;
      v25 = __clz(__rbit64(v11)) | (v13 << 6);
      goto LABEL_34;
    }
    v26 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v26 >= v50)
      break;
    v27 = v51;
    v28 = v51[v26];
    v29 = v13 + 1;
    if (!v28)
    {
      v29 = v13 + 2;
      if (v13 + 2 >= v50)
        goto LABEL_36;
      v28 = v51[v29];
      if (!v28)
      {
        v30 = v13 + 3;
        if (v13 + 3 >= v50)
        {
LABEL_36:
          swift_release();
          v3 = v49;
          v8 = v53;
          if ((v54 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v28 = v51[v30];
        if (!v28)
        {
          while (1)
          {
            v29 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_45;
            if (v29 >= v50)
              goto LABEL_36;
            v28 = v51[v29];
            ++v30;
            if (v28)
              goto LABEL_33;
          }
        }
        v29 = v13 + 3;
      }
    }
LABEL_33:
    v55 = (v28 - 1) & v28;
    v56 = v29;
    v25 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_34:
    v35 = *(_QWORD *)(v5 + 56);
    v36 = 48 * v25;
    v37 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v36);
    v38 = *v37;
    v39 = v37[1];
    v40 = v37[2];
    v41 = v37[3];
    v42 = v37[4];
    v43 = v37[5];
    v44 = (uint64_t *)(v35 + v36);
    v45 = v44[1];
    v46 = v44[3];
    v57 = *v44;
    v58 = v44[2];
    v47 = v44[5];
    v59 = v44[4];
    if ((v54 & 1) == 0)
    {
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v47);
    }
    v61 = v45;
    v8 = v53;
    Hasher.init(_seed:)(v62, *(_QWORD *)(v53 + 40));
    swift_bridgeObjectRetain(v39);
    v60 = v38;
    String.hash(into:)(v62, v38, v39);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRetain(v41);
    String.hash(into:)(v62, v40, v41);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRetain(v43);
    String.hash(into:)(v62, v42, v43);
    swift_bridgeObjectRelease(v43);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v53 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      v19 = v47;
      v20 = v61;
      v21 = v60;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v15) >> 6;
      v19 = v47;
      v20 = v61;
      v21 = v60;
      do
      {
        if (++v17 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v33 = v17 == v32;
        if (v17 == v32)
          v17 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v34 == -1);
      v18 = __clz(__rbit64(~v34)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v22 = 48 * v18;
    v23 = (_QWORD *)(*(_QWORD *)(v53 + 48) + v22);
    *v23 = v21;
    v23[1] = v39;
    v23[2] = v40;
    v23[3] = v41;
    v23[4] = v42;
    v23[5] = v43;
    v24 = (_QWORD *)(*(_QWORD *)(v53 + 56) + v22);
    v13 = v56;
    *v24 = v57;
    v24[1] = v20;
    v24[2] = v58;
    v24[3] = v46;
    v24[4] = v59;
    v24[5] = v19;
    ++*(_QWORD *)(v53 + 16);
    v5 = v52;
    v11 = v55;
  }
  swift_release();
  v3 = v49;
  v27 = v51;
  if ((v54 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v48 = 1 << *(_BYTE *)(v5 + 32);
  if (v48 >= 64)
    bzero(v27, ((unint64_t)(v48 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v48;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_EF5B4(uint64_t a1, uint64_t a2)
{
  sub_EF5E4(a1, a2, &qword_3B65F8);
}

void sub_EF5C0(uint64_t a1, uint64_t a2)
{
  sub_EF5E4(a1, a2, &qword_3BBE90);
}

void sub_EF5CC(uint64_t a1, uint64_t a2)
{
  sub_EF5E4(a1, a2, &qword_3B6600);
}

void sub_EF5D8(uint64_t a1, uint64_t a2)
{
  sub_EF5E4(a1, a2, (uint64_t *)&unk_3BBE80);
}

void sub_EF5E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_319AC(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_retain();
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release();
  *v4 = v9;
}

void sub_EF8F4(uint64_t a1, uint64_t a2)
{
  sub_F0DE0(a1, a2, &qword_3B6668);
}

void sub_EF900(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC((uint64_t *)&unk_3BBE00);
  v42 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v9 = 0;
    v40 = (uint64_t *)(v5 + 64);
    v41 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v36 = -1 << v10;
    v37 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v22 >= v39)
          goto LABEL_36;
        v23 = v40[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v39)
            goto LABEL_36;
          v23 = v40[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_36:
              if ((v42 & 1) == 0)
              {
                swift_release();
                v3 = v38;
                goto LABEL_43;
              }
              if (v37 >= 64)
                bzero(v40, 8 * v39);
              else
                *v40 = v36;
              v3 = v38;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_45;
                if (v9 >= v39)
                  goto LABEL_36;
                v23 = v40[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = *(_QWORD *)(v5 + 56) + 96 * v21;
      v31 = *(_BYTE *)v30;
      v32 = *(_QWORD *)(v30 + 16);
      v33 = *(_QWORD *)(v30 + 32);
      v44 = *(_QWORD *)(v30 + 24);
      v45 = *(_QWORD *)(v30 + 8);
      v34 = *(_QWORD *)(v30 + 48);
      v43 = *(_QWORD *)(v30 + 40);
      v46 = *(_OWORD *)(v30 + 72);
      v47 = *(_OWORD *)(v30 + 56);
      v35 = *(_QWORD *)(v30 + 88);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v35);
      }
      v14 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v29);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = *(_QWORD *)(v8 + 56) + 96 * v18;
      *(_BYTE *)v19 = v31;
      *(_QWORD *)(v19 + 8) = v45;
      *(_QWORD *)(v19 + 16) = v32;
      *(_QWORD *)(v19 + 24) = v44;
      *(_QWORD *)(v19 + 32) = v33;
      *(_QWORD *)(v19 + 40) = v43;
      *(_QWORD *)(v19 + 48) = v34;
      *(_OWORD *)(v19 + 56) = v47;
      *(_OWORD *)(v19 + 72) = v46;
      *(_QWORD *)(v19 + 88) = v35;
      ++*(_QWORD *)(v8 + 16);
      v5 = v41;
    }
  }
  swift_release();
LABEL_43:
  *v3 = v8;
}

void sub_EFC38(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t *v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3B66B0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v36 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v10;
    v34 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v10 + 63) >> 6;
    v13 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v21 = v20 | (v9 << 6);
      }
      else
      {
        v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v22 >= v35)
          goto LABEL_36;
        v23 = v36[v22];
        ++v9;
        if (!v23)
        {
          v9 = v22 + 1;
          if (v22 + 1 >= v35)
            goto LABEL_36;
          v23 = v36[v9];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64)
                  bzero(v36, 8 * v35);
                else
                  *v36 = v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                v9 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_44;
                if (v9 >= v35)
                  goto LABEL_36;
                v23 = v36[v9];
                ++v24;
                if (v23)
                  goto LABEL_33;
              }
            }
            v9 = v24;
          }
        }
LABEL_33:
        v12 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      v29 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v21);
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
      v31 = *v30;
      v32 = v30[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v30[1]);
      v14 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v29);
      v15 = -1 << *(_BYTE *)(v8 + 32);
      v16 = v14 & ~v15;
      v17 = v16 >> 6;
      if (((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v13 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v27 = v17 == v26;
          if (v17 == v26)
            v17 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v13 + 8 * v17);
        }
        while (v28 == -1);
        v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(_QWORD *)(v13 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v18) = v29;
      v19 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v18);
      *v19 = v31;
      v19[1] = v32;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_EFEEC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC((uint64_t *)&unk_3BBF10);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release();
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_F0210(uint64_t a1, uint64_t a2)
{
  sub_F021C(a1, a2, &qword_3B6670);
}

void sub_F021C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_319AC(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v35 = -1 << v12;
    v36 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v37 = (unint64_t)(v12 + 63) >> 6;
    v15 = v8 + 64;
    while (1)
    {
      if (v14)
      {
        v22 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v23 = v22 | (v10 << 6);
      }
      else
      {
        v24 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v11[v24];
        ++v10;
        if (!v25)
        {
          v10 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v11[v10];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v36 >= 64)
                  bzero((void *)(v6 + 64), 8 * v37);
                else
                  *v11 = v35;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                v10 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_44;
                if (v10 >= v37)
                  goto LABEL_36;
                v25 = v11[v10];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v10 = v26;
          }
        }
LABEL_33:
        v14 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v10 << 6);
      }
      v31 = 8 * v23;
      v32 = *(_QWORD *)(v6 + 56);
      v33 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v31);
      v34 = *(_QWORD *)(v32 + v31);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v32 + v31));
      v16 = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v33);
      v17 = -1 << *(_BYTE *)(v9 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v15 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v29 = v19 == v28;
          if (v19 == v28)
            v19 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v19);
        }
        while (v30 == -1);
        v20 = __clz(__rbit64(~v30)) + (v19 << 6);
      }
      *(_QWORD *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      v21 = 8 * v20;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v21) = v33;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v21) = v34;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v6);
  *v4 = v9;
}

void sub_F04CC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 *v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3BBF50);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_25;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_37;
      v20 = *(_QWORD *)(v37 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_37:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_46;
            if (v13 >= v36)
              goto LABEL_37;
            v20 = *(_QWORD *)(v37 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v13 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_25:
    v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
    v24 = *v22;
    v23 = v22[1];
    v25 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v38 & 1) != 0)
    {
      sub_3F1CC(v25, (uint64_t)v40);
    }
    else
    {
      sub_49F1C((uint64_t)v25, (uint64_t)v40);
      swift_bridgeObjectRetain(v23);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v24, v23);
    v26 = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v12 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v29);
      }
      while (v33 == -1);
      v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
    *v15 = v24;
    v15[1] = v23;
    sub_3F1CC(v40, *(_QWORD *)(v8 + 56) + 40 * v14);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v35;
  v19 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release();
  *v3 = v8;
}

void sub_F07F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3B6658);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v32 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v18 >= v13)
          goto LABEL_37;
        v19 = v32[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_37;
          v19 = v32[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_37:
              if ((a2 & 1) != 0)
              {
                v31 = 1 << *(_BYTE *)(v5 + 32);
                if (v31 >= 64)
                  bzero(v32, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v32[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_45;
                if (v9 >= v13)
                  goto LABEL_37;
                v19 = v32[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
      v22 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
      if ((a2 & 1) != 0)
        sub_3F1CC(v22, (uint64_t)v33);
      else
        sub_49F1C((uint64_t)v22, (uint64_t)v33);
      v23 = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v21);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v21;
      sub_3F1CC(v33, *(_QWORD *)(v8 + 56) + 40 * v15);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release();
  *v3 = v8;
}

void sub_F0AB4(uint64_t a1, uint64_t a2)
{
  sub_F0DE0(a1, a2, (uint64_t *)&unk_3BBF40);
}

void sub_F0AC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _OWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  __int128 v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC((uint64_t *)&unk_3BBF20);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v12)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v38 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v12)
        goto LABEL_36;
      v26 = *(_QWORD *)(v38 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v12)
        {
LABEL_36:
          swift_release();
          v3 = v37;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v38 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v26 = *(_QWORD *)(v38 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v23);
    v34 = *v32;
    v33 = v32[1];
    v35 = (__int128 *)(*(_QWORD *)(v5 + 56) + 32 * v23);
    v40 = *v35;
    v41 = v35[1];
    if ((v39 & 1) == 0)
      swift_bridgeObjectRetain(v33);
    Hasher.init(_seed:)(v42, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v42, v34, v33);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v18 == v29;
        if (v18 == v29)
          v18 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v31 == -1);
      v19 = __clz(__rbit64(~v31)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v19);
    *v20 = v34;
    v20[1] = v33;
    v21 = (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v19);
    *v21 = v40;
    v21[1] = v41;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v37;
  v25 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_F0DD4(uint64_t a1, uint64_t a2)
{
  sub_F0DE0(a1, a2, &qword_3BE330);
}

void sub_F0DE0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_319AC(a3);
  v38 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v36 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain();
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v36)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v36)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v36)
        {
LABEL_36:
          swift_release();
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v36)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v9 + 40));
    String.hash(into:)(v39, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release();
  v24 = (_QWORD *)(v6 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release();
  *v4 = v9;
}

void sub_F10F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC((uint64_t *)&unk_3BBF30);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain();
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release();
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release();
  *v3 = v8;
}

void sub_F13FC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  void *v20;
  id v21;
  uint64_t v22;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_319AC(&qword_3B6618);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = (_QWORD *)(v5 + 64);
    v10 = -1;
    if (v8 < 64)
      v10 = ~(-1 << v8);
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v12 = (unint64_t)(v8 + 63) >> 6;
    swift_retain();
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v13 << 6);
      }
      else
      {
        v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return;
        }
        if (v16 >= v12)
          goto LABEL_25;
        v17 = v9[v16];
        ++v13;
        if (!v17)
        {
          v13 = v16 + 1;
          if (v16 + 1 >= v12)
            goto LABEL_25;
          v17 = v9[v13];
          if (!v17)
          {
            v18 = v16 + 2;
            if (v18 >= v12)
            {
LABEL_25:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v22 = 1 << *(_BYTE *)(v5 + 32);
                if (v22 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v22;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v17 = v9[v18];
            if (!v17)
            {
              while (1)
              {
                v13 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_32;
                if (v13 >= v12)
                  goto LABEL_25;
                v17 = v9[v13];
                ++v18;
                if (v17)
                  goto LABEL_22;
              }
            }
            v13 = v18;
          }
        }
LABEL_22:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      v19 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v15);
      v20 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v15);
      if ((a2 & 1) == 0)
        v21 = v20;
      sub_F15D8(v19, (uint64_t)v20, v7);
    }
  }
  swift_release();
  *v3 = v7;
}

void sub_F15D8(char a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, *(_QWORD *)(a3 + 40));
  __asm { BR              X10 }
}

unint64_t sub_F1634()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  Swift::Int v3;
  unint64_t result;
  uint64_t v5;

  String.hash(into:)(&v5, 0x7465697571, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  v3 = Hasher._finalize()();
  result = ((uint64_t (*)(Swift::Int, uint64_t, uint64_t))_HashTable.nextHole(atOrAfter:))(v3 & ~(-1 << *(_BYTE *)(v0 + 32)), v0 + 64, ~(-1 << *(_BYTE *)(v0 + 32)));
  *(_QWORD *)(v0 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_BYTE *)(*(_QWORD *)(v0 + 48) + result) = v2;
  *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8 * result) = v1;
  ++*(_QWORD *)(v0 + 16);
  return result;
}

unint64_t sub_F1714(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_F175C(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4, double a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a4[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * result) = a5;
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_F17A4(unint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_BYTE *)(a4[7] + result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_F17F0(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_3F1FC(a3, a4[7] + (a1 << 6));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

_OWORD *sub_F1854(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_3F180(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t sub_F18BC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, _QWORD *a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = a6[7] + 16 * result;
  *(_QWORD *)v7 = a4;
  *(_BYTE *)(v7 + 8) = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t sub_F1914(unint64_t result, uint64_t a2, _QWORD *a3, double a4, double a5)
{
  double *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a3[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a3[6] + 8 * result) = a2;
  v5 = (double *)(a3[7] + 16 * result);
  *v5 = a4;
  v5[1] = a5;
  v6 = a3[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a3[2] = v8;
  return result;
}

unint64_t sub_F195C(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

unint64_t sub_F19A4(unint64_t result, char a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a5[6] + result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_F19EC(unint64_t result, _OWORD *a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = (_OWORD *)(a4[6] + 48 * result);
  v5 = a2[1];
  *v4 = *a2;
  v4[1] = v5;
  v4[2] = a2[2];
  v6 = (_OWORD *)(a4[7] + 48 * result);
  v7 = a3[1];
  *v6 = *a3;
  v6[1] = v7;
  v6[2] = a3[2];
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_F1A58(unint64_t result, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  v4 = (_OWORD *)(a4[7] + 96 * result);
  v5 = a3[1];
  *v4 = *a3;
  v4[1] = v5;
  v6 = a3[5];
  v4[4] = a3[4];
  v4[5] = v6;
  v7 = a3[3];
  v4[2] = a3[2];
  v4[3] = v7;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_F1AB8(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a5[6] + 8 * result) = a2;
  v5 = (_QWORD *)(a5[7] + 16 * result);
  *v5 = a3;
  v5[1] = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t sub_F1B00(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t sub_F1B50(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

void sub_F1B94()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_319AC(&qword_3BBF58);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v18);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F1D40()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_319AC(&qword_3BBED0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F1EEC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_319AC(&qword_3B6698);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F2078()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;

  v1 = v0;
  sub_319AC((uint64_t *)&unk_3BC000);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v26 = __clz(__rbit64(v24));
    v12 = (v24 - 1) & v24;
    v15 = v26 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 24 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v22 = v21;
    *(_QWORD *)(v22 + 16) = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F221C()
{
  sub_F2B68(&qword_3B6678);
}

void sub_F2228()
{
  sub_F3288((uint64_t *)&unk_3BBF60);
}

void sub_F2234()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  v1 = v0;
  sub_319AC(&qword_3B66A8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      v9 = v27 + 1;
      if (v27 + 1 >= v13)
        goto LABEL_26;
      v28 = *(_QWORD *)(v6 + 8 * v9);
      if (!v28)
        break;
    }
LABEL_25:
    v12 = (v28 - 1) & v28;
    v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 56 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_OWORD *)v19;
    v22 = *(_OWORD *)(v19 + 24);
    v23 = *(_OWORD *)(v19 + 40);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v24 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v24 = v21;
    *(_QWORD *)(v24 + 16) = v20;
    *(_OWORD *)(v24 + 24) = v22;
    *(_OWORD *)(v24 + 40) = v23;
    v25 = v21;
    v26 = v22;
    swift_unknownObjectRetain(v23);
    swift_unknownObjectRetain(v25);
    swift_unknownObjectRetain(v26);
  }
  v29 = v27 + 2;
  if (v29 >= v13)
    goto LABEL_26;
  v28 = *(_QWORD *)(v6 + 8 * v29);
  if (v28)
  {
    v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v28 = *(_QWORD *)(v6 + 8 * v9);
    ++v29;
    if (v28)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F2420()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE v22[64];

  v1 = v0;
  sub_319AC((uint64_t *)&unk_3BC060);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = v15 << 6;
    sub_5B6D0(*(_QWORD *)(v2 + 56) + (v15 << 6), (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_3F1FC((uint64_t)v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F25E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_319AC(&qword_3B66B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release();
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_344A8(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_3F180(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_F27C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_319AC((uint64_t *)&unk_3BC010);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v21 = *(_QWORD *)v20;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v23 = *(_BYTE *)(v20 + 8);
    *v22 = v19;
    v22[1] = v18;
    v24 = *(_QWORD *)(v4 + 56) + v16;
    *(_QWORD *)v24 = v21;
    *(_BYTE *)(v24 + 8) = v23;
    swift_bridgeObjectRetain(v18);
    sub_3F1E4(v21, v23);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F2990()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_319AC(&qword_3B6648);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
    v23 = v17;
    swift_bridgeObjectRetain(v21);
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F2B44()
{
  sub_F2D0C((uint64_t *)&unk_3BBE30);
}

void sub_F2B50()
{
  sub_F39B0((uint64_t *)&unk_3BC020);
}

void sub_F2B5C()
{
  sub_F2B68(&qword_3B6680);
}

void sub_F2B68(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_319AC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release();
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    swift_retain();
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F2D00()
{
  sub_F2D0C(&qword_3B65F0);
}

void sub_F2D0C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;

  v2 = v1;
  sub_319AC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v24 = __clz(__rbit64(v22));
    v13 = (v22 - 1) & v22;
    v16 = v24 + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 16 * v16;
    v20 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v19) = v20;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F2E94()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_319AC(&qword_3B65E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v15);
    v18 = *v16;
    v17 = v16[1];
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 16 * v15);
    *v19 = v18;
    v19[1] = v17;
    swift_bridgeObjectRetain(v17);
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F303C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  uint64_t v35;

  sub_319AC((uint64_t *)&unk_3BBEC0);
  v34 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    swift_release();
    *v34 = v3;
    return;
  }
  v4 = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v5)
    memmove(v4, (const void *)(v1 + 64), 8 * v5);
  v35 = v1 + 64;
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v7 << 6);
      goto LABEL_12;
    }
    v31 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v11)
      goto LABEL_26;
    v32 = *(_QWORD *)(v35 + 8 * v31);
    ++v7;
    if (!v32)
    {
      v7 = v31 + 1;
      if (v31 + 1 >= v11)
        goto LABEL_26;
      v32 = *(_QWORD *)(v35 + 8 * v7);
      if (!v32)
        break;
    }
LABEL_25:
    v10 = (v32 - 1) & v32;
    v13 = __clz(__rbit64(v32)) + (v7 << 6);
LABEL_12:
    v14 = 48 * v13;
    v15 = (uint64_t *)(*(_QWORD *)(v1 + 48) + v14);
    v17 = *v15;
    v16 = v15[1];
    v18 = v15[2];
    v19 = v15[3];
    v20 = v15[4];
    v21 = v15[5];
    v22 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v14);
    v23 = *v22;
    v24 = v22[1];
    v25 = v22[2];
    v26 = v22[3];
    v27 = v22[4];
    v28 = v22[5];
    v29 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v14);
    *v29 = v17;
    v29[1] = v16;
    v29[2] = v18;
    v29[3] = v19;
    v29[4] = v20;
    v29[5] = v21;
    v30 = (_QWORD *)(*(_QWORD *)(v3 + 56) + v14);
    *v30 = v23;
    v30[1] = v24;
    v30[2] = v25;
    v30[3] = v26;
    v30[4] = v27;
    v30[5] = v28;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
  }
  v33 = v31 + 2;
  if (v33 >= v11)
    goto LABEL_26;
  v32 = *(_QWORD *)(v35 + 8 * v33);
  if (v32)
  {
    v7 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v7 >= v11)
      goto LABEL_26;
    v32 = *(_QWORD *)(v35 + 8 * v7);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F3258()
{
  sub_F3288(&qword_3B65F8);
}

void sub_F3264()
{
  sub_F3288(&qword_3BBE90);
}

void sub_F3270()
{
  sub_F3288(&qword_3B6600);
}

void sub_F327C()
{
  sub_F3288((uint64_t *)&unk_3BBE80);
}

void sub_F3288(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_319AC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release();
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_retain();
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F3434()
{
  sub_F3F0C(&qword_3B6668);
}

void sub_F3440()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;

  v1 = v0;
  sub_319AC((uint64_t *)&unk_3BBE00);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      v9 = v31 + 1;
      if (v31 + 1 >= v13)
        goto LABEL_26;
      v32 = *(_QWORD *)(v6 + 8 * v9);
      if (!v32)
        break;
    }
LABEL_25:
    v12 = (v32 - 1) & v32;
    v15 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 96 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)v19;
    v22 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v25 = *(_QWORD *)(v19 + 40);
    v26 = *(_QWORD *)(v19 + 48);
    v27 = *(_QWORD *)(v19 + 88);
    v28 = *(_OWORD *)(v19 + 56);
    v29 = *(_OWORD *)(v19 + 72);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v30 = *(_QWORD *)(v4 + 56) + v18;
    *(_BYTE *)v30 = v20;
    *(_QWORD *)(v30 + 8) = v22;
    *(_QWORD *)(v30 + 16) = v21;
    *(_QWORD *)(v30 + 24) = v23;
    *(_QWORD *)(v30 + 32) = v24;
    *(_QWORD *)(v30 + 40) = v25;
    *(_QWORD *)(v30 + 48) = v26;
    *(_OWORD *)(v30 + 56) = v28;
    *(_OWORD *)(v30 + 72) = v29;
    *(_QWORD *)(v30 + 88) = v27;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
  }
  v33 = v31 + 2;
  if (v33 >= v13)
    goto LABEL_26;
  v32 = *(_QWORD *)(v6 + 8 * v33);
  if (v32)
  {
    v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v9);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F3640()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_319AC(&qword_3B66B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F37EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_319AC((uint64_t *)&unk_3BBF10);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F39A4()
{
  sub_F39B0(&qword_3B6670);
}

void sub_F39B0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_319AC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    swift_bridgeObjectRetain(v18);
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F3B48()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  __int128 v26[2];

  v1 = v0;
  sub_319AC(&qword_3BBF50);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release();
LABEL_28:
    *v1 = v4;
    return;
  }
  v25 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_49F1C(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_3F1CC(v26, *(_QWORD *)(v4 + 56) + v20);
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void sub_F3D30()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  __int128 v22[2];

  v1 = v0;
  sub_319AC(&qword_3B6658);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    sub_49F1C(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_3F1CC(v22, *(_QWORD *)(v4 + 56) + v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F3EF4()
{
  sub_F3F0C((uint64_t *)&unk_3BBF40);
}

void sub_F3F00()
{
  sub_F3F0C(&qword_3BE330);
}

void sub_F3F0C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v2 = v1;
  sub_319AC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release();
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      v10 = v23 + 1;
      if (v23 + 1 >= v14)
        goto LABEL_26;
      v24 = *(_QWORD *)(v7 + 8 * v10);
      if (!v24)
        break;
    }
LABEL_25:
    v13 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v14)
    goto LABEL_26;
  v24 = *(_QWORD *)(v7 + 8 * v25);
  if (v24)
  {
    v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v24 = *(_QWORD *)(v7 + 8 * v10);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F40B8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_319AC((uint64_t *)&unk_3BBF30);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    v22 = v20;
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F4268()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_319AC(&qword_3B6618);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = *(void **)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    v17 = v16;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_F4408(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[7];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *a1;
  v1 = *(_QWORD *)(v24 + 16);
  if (!v1)
    return;
  v3 = a1[2];
  v4 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  v5 = *(_QWORD *)(v24 + 24 * v1 + 16);
  v6 = *(_QWORD *)(v24 + 24 * v1 + 24);
  v7 = __OFADD__(v5, v6);
  v8 = v5 + v6;
  if (v7)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v7 = __OFADD__(v4, v8);
  v9 = v4 + v8;
  if (v7)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v7 = __OFADD__(v9, v3);
  v10 = v9 + v3;
  if (v7)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = __OFSUB__(v10, 1);
  v11 = v10 - 1;
  if (v7)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (!v3)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (v11 == 0x8000000000000000 && v3 == -1)
    goto LABEL_26;
  v13 = v11 / v3;
  if (v11 / v3)
  {
    if (v13 <= 0)
    {
      v15 = _swiftEmptyArrayStorage;
    }
    else
    {
      v14 = sub_319AC(&qword_3BBE10);
      v15 = (_QWORD *)swift_allocObject(v14, 24 * v13 + 32);
      v16 = j__malloc_size(v15);
      v15[2] = v13;
      v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
    }
    v23 = a1[1];
    v22 = *(_OWORD *)(a1 + 3);
    sub_FA4F4(&v24);
    sub_FA4F4(&v23);
    sub_E45E8((uint64_t)&v22);
    sub_5A4C8(v21, v15 + 4, v13);
    v18 = v17;
    v19 = v21[0];
    v20 = v21[1];
    swift_bridgeObjectRelease(v21[4]);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v19);
    if (v18 != v13)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
  }
}

void sub_F4594(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[6];

  v1 = a1[1];
  v2 = v1 - *a1;
  if (__OFSUB__(v1, *a1))
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  if (v2)
  {
    if (v2 <= 0)
    {
      v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      v4 = sub_319AC((uint64_t *)&unk_3B8440);
      v5 = (_QWORD *)swift_allocObject(v4, 8 * v2 + 32);
      v6 = j__malloc_size(v5);
      v7 = v6 - 32;
      if (v6 < 32)
        v7 = v6 - 25;
      v5[2] = v2;
      v5[3] = (2 * (v7 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(a1[4]);
    v8 = sub_F9F44((unint64_t)v9, (uint64_t)(v5 + 4), v2);
    swift_bridgeObjectRelease(v9[4]);
    if (v8 != v2)
      goto LABEL_12;
  }
}

_QWORD *sub_F466C(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_319AC((uint64_t *)&unk_3B8440);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_F9B04((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_F4760(uint64_t a1)
{
  return sub_F4784(a1, (void (*)(_QWORD))type metadata accessor for DocumentPaginationEntity, (unint64_t *)&unk_3BBE60, &qword_3BBE58, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_F98B0);
}

_QWORD *sub_F4784(uint64_t a1, void (*a2)(_QWORD), unint64_t *a3, uint64_t *a4, uint64_t (*a5)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v10 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  if (!v10)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v10 <= 0)
    {
      v12 = _swiftEmptyArrayStorage;
    }
    else
    {
      v11 = sub_319AC((uint64_t *)&unk_3B8440);
      v12 = (_QWORD *)swift_allocObject(v11, 8 * v10 + 32, 7);
      v13 = j__malloc_size(v12);
      v14 = v13 - 32;
      if (v13 < 32)
        v14 = v13 - 25;
      v12[2] = v10;
      v12[3] = (2 * (v14 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(a1);
    v15 = sub_F9D10((unint64_t)(v12 + 4), v10, a1, a2, a3, a4, a5);
    a5 = v16;
    swift_bridgeObjectRelease(v15);
    if (a5 == (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))v10)
      break;
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v17 = a1;
    else
      v17 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v10 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(a1);
    if (!v10)
      return _swiftEmptyArrayStorage;
  }
  return v12;
}

_QWORD *sub_F48A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_319AC((uint64_t *)&unk_3B8440);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  v7 = sub_5A754((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_89AA0(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_F4990(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_319AC(&qword_3BBF88);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_5A94C((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_89AA0(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_F4A74(uint64_t a1)
{
  return sub_F4A9C(a1, &qword_3BBE40, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_5AB4C);
}

_QWORD *sub_F4A88(uint64_t a1)
{
  return sub_F4A9C(a1, (uint64_t *)&unk_3BBE48, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_5AB4C);
}

_QWORD *sub_F4A9C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return _swiftEmptyArrayStorage;
  v6 = sub_319AC(a2);
  v7 = (_QWORD *)swift_allocObject(v6, 24 * v3 + 32, 7);
  v8 = j__malloc_size(v7);
  v7[2] = v3;
  v7[3] = 2 * ((uint64_t)(v8 - 32) / 24);
  v9 = a3(&v12, v7 + 4, v3, a1);
  v10 = v12;
  swift_bridgeObjectRetain(a1);
  sub_89AA0(v10);
  if (v9 != v3)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v7;
}

_QWORD *sub_F4B90(uint64_t a1)
{
  return sub_F4CA0(a1, (uint64_t (*)(uint64_t *, _QWORD *, uint64_t, uint64_t))sub_5ACF0);
}

void sub_F4B9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = a1[2];
  v2 = v1 - *a1;
  if (__OFSUB__(v1, *a1))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v2)
  {
    if (v2 <= 0)
    {
      v5 = _swiftEmptyArrayStorage;
    }
    else
    {
      v4 = sub_319AC(&qword_3BBE10);
      v5 = (_QWORD *)swift_allocObject(v4, 24 * v2 + 32, 7);
      v6 = j__malloc_size(v5);
      v5[2] = v2;
      v5[3] = 2 * ((uint64_t)(v6 - 32) / 24);
    }
    sub_FB370(a1);
    sub_FA09C((uint64_t)v11, v5 + 4, v2);
    v8 = v7;
    v9 = v12;
    v10 = v13;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    if (v8 != v2)
      goto LABEL_10;
  }
}

_QWORD *sub_F4CA0(uint64_t a1, uint64_t (*a2)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v5 = sub_319AC(&qword_3B6848);
  v6 = (_QWORD *)swift_allocObject(v5, 8 * v2 + 32, 7);
  v7 = j__malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 25;
  v6[2] = v2;
  v6[3] = 2 * (v8 >> 3);
  v9 = a2(&v12, v6 + 4, v2, a1);
  v10 = v12;
  swift_bridgeObjectRetain(a1);
  sub_89AA0(v10);
  if (v9 != v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v6;
}

_QWORD *sub_F4D88(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return _swiftEmptyArrayStorage;
  v8 = 16 * v5;
  if (v5 <= 0)
  {
    v10 = _swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_319AC(&qword_3BBDE0);
  v10 = (_QWORD *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 17;
  v10[2] = v5;
  v10[3] = 2 * (v12 >> 4);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = a2 + 16 * a3;
  if (v13 >= (unint64_t)&v10[(unint64_t)v8 / 8 + 4] || (unint64_t)(v10 + 4) >= v13 + v8)
  {
    sub_319AC(&qword_3B67F8);
    swift_arrayInitWithCopy(v10 + 4);
    return v10;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

char *sub_F4F08(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *result;

  v4 = a4 >> 1;
  v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_18;
  if (!v5)
    return (char *)_swiftEmptyArrayStorage;
  v8 = 8 * v5;
  if (v5 <= 0)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    if (v4 != a3)
      goto LABEL_7;
    goto LABEL_17;
  }
  v9 = sub_319AC(&qword_3B6848);
  v10 = (char *)swift_allocObject(v9, v8 + 32, 7);
  v11 = j__malloc_size(v10);
  v12 = v11 - 32;
  if (v11 < 32)
    v12 = v11 - 25;
  *((_QWORD *)v10 + 2) = v5;
  *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  if (v4 == a3)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
LABEL_7:
  if (v5 < 0)
  {
LABEL_19:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_20;
  }
  v13 = v10 + 32;
  v14 = (char *)(a2 + 8 * a3);
  if (v14 >= &v10[v8 + 32] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, 8 * v5);
    return v10;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_F5070(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F53E4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F508C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F5550(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F50A8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F56B8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F50C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F6884(a1, a2, a3, (_QWORD *)*v3, &qword_3BBEB8, type metadata accessor for SearchResultEntity);
  *v3 = result;
  return result;
}

uint64_t sub_F50F0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F5970(a1, a2, a3, *v3, &qword_3B6840);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F5114(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F5814(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F5130(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F5970(a1, a2, a3, *v3, (uint64_t *)&unk_3BBEA0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F5154(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F5C84(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F5170(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F5DE8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_F518C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F5F88(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_F51A8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F612C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F51C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F73C4(a1, a2, a3, (_QWORD *)*v3, &qword_3BBF78, &qword_3BBF80);
  *v3 = result;
  return result;
}

uint64_t sub_F51F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F7098(a1, a2, a3, (_QWORD *)*v3, &qword_3BBDE0, &qword_3B67F8);
  *v3 = result;
  return result;
}

uint64_t sub_F521C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F6438(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F5238(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F6594(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F5254(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F6710(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F5270(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F6884(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_3BC030, type metadata accessor for ContentLoaderViewReusePool.DataEvent);
  *v3 = result;
  return result;
}

uint64_t sub_F529C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F6A64(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F52B8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F73C4(a1, a2, a3, (_QWORD *)*v3, &qword_3BBFC8, (uint64_t *)&unk_3BBFD0);
  *v3 = result;
  return result;
}

uint64_t sub_F52E4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F6BCC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_F5300(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F6DB4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F531C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_F6F20(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_F5338(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F5AE4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_F5354(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F7098(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&unk_3BBF00, &qword_3B6828);
  *v3 = result;
  return result;
}

uint64_t sub_F5380(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F7224(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_F539C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F73C4(a1, a2, a3, (_QWORD *)*v3, &qword_3BBED8, &qword_3BBEE0);
  *v3 = result;
  return result;
}

uint64_t sub_F53C8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_F7550(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_F53E4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3B6858);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F5550(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BBEB0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F56B8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3B6838);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    memcpy(v14, v15, 32 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F5814(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3B6848);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F5970(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_319AC(a5);
    v12 = (char *)swift_allocObject(v11, 24 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[24 * v9])
      memmove(v14, v15, 24 * v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[24 * v9] || v14 >= &v15[24 * v9])
  {
    memcpy(v14, v15, 24 * v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F5AE4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BBDE8);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_319AC((uint64_t *)&unk_3BBDF0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F5C84(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC((uint64_t *)&unk_3B6860);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 32 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F5DE8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BC040);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_319AC(&qword_3BC048);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F5F88(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BBF98);
    v11 = (_QWORD *)swift_allocObject(v10, 96 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 96);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 96 * v8)
      memmove(v11 + 4, a4 + 4, 96 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 96 * v8 || v13 >= v14 + 96 * v8)
  {
    sub_319AC(&qword_3BBFA0);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F612C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BBEE8);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F6284(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BBF88);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_319AC(&qword_3BBF90);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F640C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_F7098(a1, a2, a3, a4, &qword_3BBDE0, &qword_3B67F8);
}

uint64_t sub_F6420(char a1, int64_t a2, char a3, char *a4)
{
  return sub_F5970(a1, a2, a3, a4, &qword_3BBE40);
}

uint64_t sub_F642C(char a1, int64_t a2, char a3, char *a4)
{
  return sub_F5970(a1, a2, a3, a4, (uint64_t *)&unk_3BBE48);
}

uint64_t sub_F6438(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC((uint64_t *)&unk_3BBDD0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F6594(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC((uint64_t *)&unk_3BBE70);
    v11 = (char *)swift_allocObject(v10, 72 * v9 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[72 * v8])
      memmove(v13, v14, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[72 * v8] || v13 >= &v14[72 * v8])
  {
    memcpy(v13, v14, 72 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F6710(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3B67E8);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    memcpy(v13, v14, 40 * v8);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F6884(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v17 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_319AC(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = (_QWORD *)swift_allocObject(v13, v16 + v15 * v12);
  v18 = j__malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v17[2] = v11;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  v20 = a6(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v17 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v17 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24, v11, v20);
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release();
    return (uint64_t)v17;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F6A64(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BBE18);
    v11 = (char *)swift_allocObject(v10, (v9 << 6) | 0x20);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 + 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[64 * v8])
      memmove(v14, v15, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[64 * v8] || v14 >= &v15[64 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F6BCC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v14 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_319AC(&qword_3BBFA8);
  v11 = *(_QWORD *)(sub_319AC((uint64_t *)&unk_3BBFB0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (_QWORD *)swift_allocObject(v10, v13 + v12 * v9);
  v15 = j__malloc_size(v14);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v15 - v13 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v14[2] = v8;
  v14[3] = 2 * ((uint64_t)(v15 - v13) / v12);
LABEL_19:
  v17 = sub_319AC((uint64_t *)&unk_3BBFB0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v20 = (char *)v14 + v19;
  v21 = (char *)a4 + v19;
  if ((a1 & 1) != 0)
  {
    if (v14 < a4 || v20 >= &v21[*(_QWORD *)(v18 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v20, v21, v8, v17);
    }
    else if (v14 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v20);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v22 = *(_QWORD *)(v18 + 72) * v8;
  v23 = &v20[v22];
  v24 = (unint64_t)&v21[v22];
  if (v21 >= v23 || (unint64_t)v20 >= v24)
  {
    swift_arrayInitWithCopy(v20);
LABEL_32:
    swift_release();
    return (uint64_t)v14;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F6DB4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3B84F0);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F6F20(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BBF70);
    v11 = (char *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[48 * v8])
      memmove(v13, v14, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[48 * v8] || v13 >= &v14[48 * v8])
  {
    memcpy(v13, v14, 48 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F7098(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_319AC(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 17;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 4);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 16 * v11)
      memmove(v14 + 4, a4 + 4, 16 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 16 * v11 || v17 >= v18 + 16 * v11)
  {
    sub_319AC(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F7224(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC((uint64_t *)&unk_3BBEF0);
    v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v8)
      memmove(v11 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 40 * v8 || v13 >= v14 + 40 * v8)
  {
    sub_319AC(&qword_3B8990);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F73C4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_319AC(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_319AC(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F7550(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3BBE20);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_319AC(&qword_3BBE28);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_F76F4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t *v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  Swift::Int v96;
  Swift::Int v97;
  uint64_t v98;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return;
      v80 = 0;
      v81 = *v2;
      v82 = 1;
      while (1)
      {
        v83 = *(_QWORD *)(v81 + 8 * v82);
        v84 = v80;
        do
        {
          v85 = *(_QWORD *)(v81 + v84);
          if (v83 >= v85)
            break;
          if (!v81)
            goto LABEL_143;
          *(_QWORD *)(v81 + v84 + 8) = v85;
          *(_QWORD *)(v81 + v84) = v83;
          v84 -= 8;
        }
        while (v84 != -8);
        ++v82;
        v80 += 8;
        if (v82 == v3)
          return;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v96 = v4;
  v97 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v95 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for Int);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v97;
    v95 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v93 = v2;
  v94 = *v2 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v98 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_146;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_138;
      if (v9 - v13 < v96)
      {
        v21 = v13 + v96;
        if (__OFADD__(v13, v96))
          goto LABEL_141;
        if (v21 >= v3)
          v21 = v3;
        if (v21 < v13)
          goto LABEL_142;
        if (v9 != v21)
        {
          v22 = (uint64_t *)(v94 + 8 * v9);
          do
          {
            v23 = *(_QWORD *)(v10 + 8 * v9);
            v24 = v13;
            v25 = v22;
            do
            {
              v26 = *v25;
              if (v23 >= *v25)
                break;
              if (!v10)
                goto LABEL_144;
              *v25 = v23;
              v25[1] = v26;
              --v25;
              ++v24;
            }
            while (v9 != v24);
            ++v9;
            ++v22;
          }
          while (v9 != v21);
          v9 = v21;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1D3038(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v98;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_1D3038((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v98;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
      break;
    v12 = 1;
LABEL_15:
    v3 = v97;
    if (v9 >= v97)
    {
      v8 = v95;
      v2 = v93;
LABEL_104:
      v95 = v8;
      if (v12 < 2)
      {
LABEL_115:
        v79 = v11;
        goto LABEL_116;
      }
      v86 = *v2;
      while (1)
      {
        v87 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v86)
          goto LABEL_147;
        v78 = v11;
        v88 = v11 + 32;
        v89 = *(_QWORD *)&v11[16 * v87 + 32];
        v90 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_F8C30((char *)(v86 + 8 * v89), (char *)(v86 + 8 * *(_QWORD *)&v88[16 * v12 - 16]), v86 + 8 * v90, __dst);
        if (v1)
          goto LABEL_95;
        if (v90 < v89)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
          v78 = sub_1D34BC((uint64_t)v78);
        if (v87 >= *((_QWORD *)v78 + 2))
          goto LABEL_136;
        v91 = &v78[16 * v87 + 32];
        *(_QWORD *)v91 = v89;
        *((_QWORD *)v91 + 1) = v90;
        v92 = *((_QWORD *)v78 + 2);
        if (v12 > v92)
          goto LABEL_137;
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        v11 = v78;
        *((_QWORD *)v78 + 2) = v92 - 1;
        v12 = v92 - 1;
        if (v92 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v31 = v12 - 1;
    if (v12 >= 4)
    {
      v36 = &v29[16 * v12];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_122;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_123;
      v43 = v12 - 2;
      v44 = &v29[16 * v12 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_125;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_128;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_132;
        v59 = v34 < v69;
        goto LABEL_84;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v60 = *((_QWORD *)v11 + 4);
        v61 = *((_QWORD *)v11 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_78;
      }
      v33 = *((_QWORD *)v11 + 4);
      v32 = *((_QWORD *)v11 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_124;
    v43 = v12 - 2;
    v49 = &v29[16 * v12 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_127;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_130;
    if (__OFADD__(v53, v58))
      goto LABEL_131;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_84:
      if (v59)
        v31 = v43;
      goto LABEL_86;
    }
LABEL_78:
    if ((v54 & 1) != 0)
      goto LABEL_126;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_129;
    if (v65 < v53)
      goto LABEL_15;
LABEL_86:
    v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v10)
      goto LABEL_145;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = v29;
    v74 = &v29[16 * v31];
    v75 = *((_QWORD *)v74 + 1);
    sub_F8C30((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_119;
    if (v31 > *((_QWORD *)v11 + 2))
      goto LABEL_120;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v73[16 * v70 + 8] = v75;
    v76 = *((_QWORD *)v11 + 2);
    if (v31 >= v76)
      goto LABEL_121;
    v12 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
    v29 = v73;
    *((_QWORD *)v11 + 2) = v76 - 1;
    v10 = v98;
    if (v76 <= 2)
      goto LABEL_15;
  }
  v78 = v11;
LABEL_95:
  v79 = v78;
LABEL_116:
  swift_bridgeObjectRelease(v79);
  v95[2] = 0;
  swift_bridgeObjectRelease(v95);
}

void sub_F7D7C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  Swift::Int v21;
  Swift::Int v22;
  uint64_t *v23;
  uint64_t v24;
  Swift::Int v25;
  _QWORD *v26;
  uint64_t v27;
  Swift::Int v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  Swift::Int v93;
  Swift::Int v94;
  uint64_t v95;
  char *__dst;
  uint64_t v97;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
        sub_F8B4C(0, v4, 1, a1);
      return;
    }
    goto LABEL_131;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
  {
LABEL_139:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v7 = v5;
  v91 = a1;
  if (v4 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v97 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      goto LABEL_97;
    }
  }
  else
  {
    v8 = v6 >> 1;
    v9 = type metadata accessor for DocumentPaginationEntity(0);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8)) = v8;
    __dst = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v97 = v10;
  }
  v12 = 0;
  v13 = *a1;
  v92 = *a1 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v93 = v7;
  v94 = v4;
  v95 = *a1;
  while (1)
  {
    v15 = v12++;
    if (v12 < v4)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v12) + 16);
      v17 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v15) + 16);
      v12 = v15 + 2;
      if (v15 + 2 < v4)
      {
        v18 = v16;
        while (1)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v13 + 8 * v12) + 16);
          if (v16 < v17 == v19 >= v18)
            break;
          ++v12;
          v18 = v19;
          if (v4 == v12)
          {
            v12 = v4;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v12 < v15)
          goto LABEL_132;
        if (v15 < v12)
        {
          v20 = (uint64_t *)(v92 + 8 * v12);
          v21 = v12;
          v22 = v15;
          v23 = (uint64_t *)(v13 + 8 * v15);
          do
          {
            if (v22 != --v21)
            {
              if (!v13)
                goto LABEL_137;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v12 < v4)
    {
      if (__OFSUB__(v12, v15))
        goto LABEL_130;
      if (v12 - v15 < v7)
      {
        v25 = v15 + v7;
        if (__OFADD__(v15, v7))
          goto LABEL_133;
        if (v25 >= v4)
          v25 = v4;
        if (v25 < v15)
          goto LABEL_134;
        if (v12 != v25)
        {
          v26 = (_QWORD *)(v92 + 8 * v12);
          do
          {
            v27 = *(_QWORD *)(v13 + 8 * v12);
            v28 = v15;
            v29 = v26;
            do
            {
              v30 = *v29;
              if (*(_QWORD *)(v27 + 16) >= *(_QWORD *)(*v29 + 16))
                break;
              if (!v13)
                goto LABEL_135;
              *v29 = v27;
              v29[1] = v30;
              --v29;
              ++v28;
            }
            while (v12 != v28);
            ++v12;
            ++v26;
          }
          while (v12 != v25);
          v12 = v25;
        }
      }
    }
    if (v12 < v15)
    {
LABEL_125:
      __break(1u);
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1D3038(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v32 = *((_QWORD *)v11 + 2);
    v31 = *((_QWORD *)v11 + 3);
    v14 = v32 + 1;
    v13 = v95;
    if (v32 >= v31 >> 1)
    {
      v81 = sub_1D3038((char *)(v31 > 1), v32 + 1, 1, v11);
      v13 = v95;
      v11 = v81;
    }
    *((_QWORD *)v11 + 2) = v14;
    v33 = v11 + 32;
    v34 = &v11[16 * v32 + 32];
    *(_QWORD *)v34 = v15;
    *((_QWORD *)v34 + 1) = v12;
    if (v32)
      break;
    v14 = 1;
LABEL_14:
    v7 = v93;
    v4 = v94;
    if (v12 >= v94)
    {
      v2 = v1;
LABEL_97:
      v83 = v11;
      if (v14 < 2)
        goto LABEL_94;
      v85 = *v91;
      while (1)
      {
        v86 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v85)
          goto LABEL_138;
        v82 = v83;
        v87 = *(_QWORD *)&v83[16 * v86 + 32];
        v88 = *(_QWORD *)&v83[16 * v14 + 24];
        sub_F8E9C((char *)(v85 + 8 * v87), (char *)(v85 + 8 * *(_QWORD *)&v83[16 * v14 + 16]), v85 + 8 * v88, __dst);
        if (v2)
          goto LABEL_93;
        if (v88 < v87)
          goto LABEL_127;
        if ((swift_isUniquelyReferenced_nonNull_native(v82) & 1) == 0)
          v82 = sub_1D34BC((uint64_t)v82);
        if (v86 >= *((_QWORD *)v82 + 2))
          goto LABEL_128;
        v89 = &v82[16 * v86 + 32];
        *(_QWORD *)v89 = v87;
        *((_QWORD *)v89 + 1) = v88;
        v90 = *((_QWORD *)v82 + 2);
        if (v14 > v90)
          goto LABEL_129;
        memmove(&v82[16 * v14 + 16], &v82[16 * v14 + 32], 16 * (v90 - v14));
        v83 = v82;
        *((_QWORD *)v82 + 2) = v90 - 1;
        v14 = v90 - 1;
        if (v90 <= 2)
          goto LABEL_94;
      }
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
  }
  while (1)
  {
    v35 = v14 - 1;
    if (v14 >= 4)
    {
      v40 = &v33[16 * v14];
      v41 = *((_QWORD *)v40 - 8);
      v42 = *((_QWORD *)v40 - 7);
      v46 = __OFSUB__(v42, v41);
      v43 = v42 - v41;
      if (v46)
        goto LABEL_114;
      v45 = *((_QWORD *)v40 - 6);
      v44 = *((_QWORD *)v40 - 5);
      v46 = __OFSUB__(v44, v45);
      v38 = v44 - v45;
      v39 = v46;
      if (v46)
        goto LABEL_115;
      v47 = v14 - 2;
      v48 = &v33[16 * v14 - 32];
      v50 = *(_QWORD *)v48;
      v49 = *((_QWORD *)v48 + 1);
      v46 = __OFSUB__(v49, v50);
      v51 = v49 - v50;
      if (v46)
        goto LABEL_117;
      v46 = __OFADD__(v38, v51);
      v52 = v38 + v51;
      if (v46)
        goto LABEL_120;
      if (v52 >= v43)
      {
        v70 = &v33[16 * v35];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v46 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v46)
          goto LABEL_124;
        v63 = v38 < v73;
        goto LABEL_82;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v64 = *((_QWORD *)v11 + 4);
        v65 = *((_QWORD *)v11 + 5);
        v46 = __OFSUB__(v65, v64);
        v57 = v65 - v64;
        v58 = v46;
        goto LABEL_76;
      }
      v37 = *((_QWORD *)v11 + 4);
      v36 = *((_QWORD *)v11 + 5);
      v46 = __OFSUB__(v36, v37);
      v38 = v36 - v37;
      v39 = v46;
    }
    if ((v39 & 1) != 0)
      goto LABEL_116;
    v47 = v14 - 2;
    v53 = &v33[16 * v14 - 32];
    v55 = *(_QWORD *)v53;
    v54 = *((_QWORD *)v53 + 1);
    v56 = __OFSUB__(v54, v55);
    v57 = v54 - v55;
    v58 = v56;
    if (v56)
      goto LABEL_119;
    v59 = &v33[16 * v35];
    v61 = *(_QWORD *)v59;
    v60 = *((_QWORD *)v59 + 1);
    v46 = __OFSUB__(v60, v61);
    v62 = v60 - v61;
    if (v46)
      goto LABEL_122;
    if (__OFADD__(v57, v62))
      goto LABEL_123;
    if (v57 + v62 >= v38)
    {
      v63 = v38 < v62;
LABEL_82:
      if (v63)
        v35 = v47;
      goto LABEL_84;
    }
LABEL_76:
    if ((v58 & 1) != 0)
      goto LABEL_118;
    v66 = &v33[16 * v35];
    v68 = *(_QWORD *)v66;
    v67 = *((_QWORD *)v66 + 1);
    v46 = __OFSUB__(v67, v68);
    v69 = v67 - v68;
    if (v46)
      goto LABEL_121;
    if (v69 < v57)
      goto LABEL_14;
LABEL_84:
    v74 = v35 - 1;
    if (v35 - 1 >= v14)
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    if (!v13)
      goto LABEL_136;
    v75 = v11;
    v76 = &v33[16 * v74];
    v77 = *(_QWORD *)v76;
    v78 = &v33[16 * v35];
    v79 = *((_QWORD *)v78 + 1);
    sub_F8E9C((char *)(v13 + 8 * *(_QWORD *)v76), (char *)(v13 + 8 * *(_QWORD *)v78), v13 + 8 * v79, __dst);
    if (v1)
      break;
    if (v79 < v77)
      goto LABEL_111;
    if (v35 > *((_QWORD *)v75 + 2))
      goto LABEL_112;
    *(_QWORD *)v76 = v77;
    *(_QWORD *)&v33[16 * v74 + 8] = v79;
    v80 = *((_QWORD *)v75 + 2);
    if (v35 >= v80)
      goto LABEL_113;
    v11 = v75;
    v14 = v80 - 1;
    memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
    *((_QWORD *)v75 + 2) = v80 - 1;
    v13 = v95;
    if (v80 <= 2)
      goto LABEL_14;
  }
  v82 = v75;
LABEL_93:
  v83 = v82;
LABEL_94:
  swift_bridgeObjectRelease(v83);
  *(_QWORD *)((char *)&dword_10 + (v97 & 0xFFFFFFFFFFFFF8)) = 0;
  specialized Array._endMutation()(v84);
  swift_bridgeObjectRelease(v97);
}

void sub_F83EC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  int v28;
  uint64_t *v29;
  Swift::Int v30;
  Swift::Int v31;
  uint64_t *v32;
  uint64_t v33;
  Swift::Int v34;
  _QWORD *v35;
  uint64_t v36;
  Swift::Int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL4 v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  char *__dst;
  uint64_t v108;
  uint64_t v109;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      if (v4)
        sub_F8BB4(0, v4, 1, a1);
      return;
    }
    goto LABEL_136;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
  {
LABEL_144:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v7 = v5;
  v102 = a1;
  if (v4 < 2)
  {
    v11 = (char *)_swiftEmptyArrayStorage;
    v109 = (uint64_t)_swiftEmptyArrayStorage;
    __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      goto LABEL_102;
    }
  }
  else
  {
    v8 = v6 >> 1;
    v9 = type metadata accessor for ChapterPaginationEntity();
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8)) = v8;
    __dst = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    v109 = v10;
  }
  v108 = v1;
  v12 = 0;
  v13 = *a1;
  v103 = *a1 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v104 = v7;
  v105 = v4;
  v106 = *a1;
  while (1)
  {
    v15 = v12++;
    if (v12 < v4)
    {
      v16 = *(_QWORD *)(v13 + 8 * v12);
      v17 = *(_QWORD *)(v13 + 8 * v15);
      v18 = *(_QWORD *)(v16 + 32);
      v19 = *(_QWORD *)(v16 + 40);
      v20 = *(_QWORD *)(v17 + 32);
      v21 = v19 < *(_QWORD *)(v17 + 40);
      v22 = v18 == v20;
      v23 = v18 < v20;
      if (v22)
        v23 = v21;
      v12 = v15 + 2;
      if (v15 + 2 < v4)
      {
        while (1)
        {
          v24 = *(_QWORD *)(v13 + 8 * v12);
          v25 = *(_QWORD *)(v24 + 32);
          v26 = *(_QWORD *)(v24 + 40);
          v27 = v26 < v19;
          v22 = v25 == v18;
          v28 = v25 < v18;
          if (v22)
            v28 = v27;
          if (v23 != v28)
            break;
          ++v12;
          v19 = v26;
          v18 = v25;
          if (v4 == v12)
          {
            v12 = v4;
            break;
          }
        }
      }
      if (v23)
      {
        if (v12 < v15)
          goto LABEL_137;
        if (v15 < v12)
        {
          v29 = (uint64_t *)(v103 + 8 * v12);
          v30 = v12;
          v31 = v15;
          v32 = (uint64_t *)(v13 + 8 * v15);
          do
          {
            if (v31 != --v30)
            {
              if (!v13)
                goto LABEL_142;
              v33 = *v32;
              *v32 = *v29;
              *v29 = v33;
            }
            ++v31;
            --v29;
            ++v32;
          }
          while (v31 < v30);
        }
      }
    }
    if (v12 < v4)
    {
      if (__OFSUB__(v12, v15))
        goto LABEL_135;
      if (v12 - v15 < v7)
      {
        v34 = v15 + v7;
        if (__OFADD__(v15, v7))
          goto LABEL_138;
        if (v34 >= v4)
          v34 = v4;
        if (v34 < v15)
          goto LABEL_139;
        if (v12 != v34)
        {
          v35 = (_QWORD *)(v103 + 8 * v12);
          do
          {
            v36 = *(_QWORD *)(v13 + 8 * v12);
            v37 = v15;
            v38 = v35;
            do
            {
              v39 = *v38;
              v40 = *(_QWORD *)(v36 + 32);
              v41 = *(_QWORD *)(*v38 + 32);
              v22 = v40 == v41;
              v42 = v40 < v41;
              if (v22)
                v42 = *(_QWORD *)(v36 + 40) < *(_QWORD *)(*v38 + 40);
              if (!v42)
                break;
              if (!v13)
                goto LABEL_140;
              *v38 = v36;
              v38[1] = v39;
              --v38;
              ++v37;
            }
            while (v12 != v37);
            ++v12;
            ++v35;
          }
          while (v12 != v34);
          v12 = v34;
        }
      }
    }
    if (v12 < v15)
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_1D3038(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v44 = *((_QWORD *)v11 + 2);
    v43 = *((_QWORD *)v11 + 3);
    v14 = v44 + 1;
    v13 = v106;
    if (v44 >= v43 >> 1)
    {
      v13 = v106;
      v11 = sub_1D3038((char *)(v43 > 1), v44 + 1, 1, v11);
    }
    *((_QWORD *)v11 + 2) = v14;
    v45 = v11 + 32;
    v46 = &v11[16 * v44 + 32];
    *(_QWORD *)v46 = v15;
    *((_QWORD *)v46 + 1) = v12;
    if (v44)
      break;
    v14 = 1;
LABEL_14:
    v7 = v104;
    v4 = v105;
    if (v12 >= v105)
    {
      v2 = v108;
LABEL_102:
      v94 = v11;
      if (v14 < 2)
        goto LABEL_99;
      v96 = *v102;
      while (1)
      {
        v97 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v96)
          goto LABEL_143;
        v93 = v94;
        v98 = *(_QWORD *)&v94[16 * v97 + 32];
        v99 = *(_QWORD *)&v94[16 * v14 + 24];
        sub_F9118((char *)(v96 + 8 * v98), (char *)(v96 + 8 * *(_QWORD *)&v94[16 * v14 + 16]), v96 + 8 * v99, __dst);
        if (v2)
          goto LABEL_98;
        if (v99 < v98)
          goto LABEL_132;
        if ((swift_isUniquelyReferenced_nonNull_native(v93) & 1) == 0)
          v93 = sub_1D34BC((uint64_t)v93);
        if (v97 >= *((_QWORD *)v93 + 2))
          goto LABEL_133;
        v100 = &v93[16 * v97 + 32];
        *(_QWORD *)v100 = v98;
        *((_QWORD *)v100 + 1) = v99;
        v101 = *((_QWORD *)v93 + 2);
        if (v14 > v101)
          goto LABEL_134;
        memmove(&v93[16 * v14 + 16], &v93[16 * v14 + 32], 16 * (v101 - v14));
        v94 = v93;
        *((_QWORD *)v93 + 2) = v101 - 1;
        v14 = v101 - 1;
        if (v101 <= 2)
          goto LABEL_99;
      }
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
  }
  while (1)
  {
    v47 = v14 - 1;
    if (v14 >= 4)
    {
      v52 = &v45[16 * v14];
      v53 = *((_QWORD *)v52 - 8);
      v54 = *((_QWORD *)v52 - 7);
      v58 = __OFSUB__(v54, v53);
      v55 = v54 - v53;
      if (v58)
        goto LABEL_119;
      v57 = *((_QWORD *)v52 - 6);
      v56 = *((_QWORD *)v52 - 5);
      v58 = __OFSUB__(v56, v57);
      v50 = v56 - v57;
      v51 = v58;
      if (v58)
        goto LABEL_120;
      v59 = v14 - 2;
      v60 = &v45[16 * v14 - 32];
      v62 = *(_QWORD *)v60;
      v61 = *((_QWORD *)v60 + 1);
      v58 = __OFSUB__(v61, v62);
      v63 = v61 - v62;
      if (v58)
        goto LABEL_122;
      v58 = __OFADD__(v50, v63);
      v64 = v50 + v63;
      if (v58)
        goto LABEL_125;
      if (v64 >= v55)
      {
        v82 = &v45[16 * v47];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v58 = __OFSUB__(v83, v84);
        v85 = v83 - v84;
        if (v58)
          goto LABEL_129;
        v75 = v50 < v85;
        goto LABEL_87;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v76 = *((_QWORD *)v11 + 4);
        v77 = *((_QWORD *)v11 + 5);
        v58 = __OFSUB__(v77, v76);
        v69 = v77 - v76;
        v70 = v58;
        goto LABEL_81;
      }
      v49 = *((_QWORD *)v11 + 4);
      v48 = *((_QWORD *)v11 + 5);
      v58 = __OFSUB__(v48, v49);
      v50 = v48 - v49;
      v51 = v58;
    }
    if ((v51 & 1) != 0)
      goto LABEL_121;
    v59 = v14 - 2;
    v65 = &v45[16 * v14 - 32];
    v67 = *(_QWORD *)v65;
    v66 = *((_QWORD *)v65 + 1);
    v68 = __OFSUB__(v66, v67);
    v69 = v66 - v67;
    v70 = v68;
    if (v68)
      goto LABEL_124;
    v71 = &v45[16 * v47];
    v73 = *(_QWORD *)v71;
    v72 = *((_QWORD *)v71 + 1);
    v58 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if (v58)
      goto LABEL_127;
    if (__OFADD__(v69, v74))
      goto LABEL_128;
    if (v69 + v74 >= v50)
    {
      v75 = v50 < v74;
LABEL_87:
      if (v75)
        v47 = v59;
      goto LABEL_89;
    }
LABEL_81:
    if ((v70 & 1) != 0)
      goto LABEL_123;
    v78 = &v45[16 * v47];
    v80 = *(_QWORD *)v78;
    v79 = *((_QWORD *)v78 + 1);
    v58 = __OFSUB__(v79, v80);
    v81 = v79 - v80;
    if (v58)
      goto LABEL_126;
    if (v81 < v69)
      goto LABEL_14;
LABEL_89:
    v86 = v47 - 1;
    if (v47 - 1 >= v14)
    {
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
      goto LABEL_130;
    }
    if (!v13)
      goto LABEL_141;
    v87 = v11;
    v88 = &v45[16 * v86];
    v89 = *(_QWORD *)v88;
    v90 = &v45[16 * v47];
    v91 = *((_QWORD *)v90 + 1);
    sub_F9118((char *)(v13 + 8 * *(_QWORD *)v88), (char *)(v13 + 8 * *(_QWORD *)v90), v13 + 8 * v91, __dst);
    if (v108)
      break;
    if (v91 < v89)
      goto LABEL_116;
    if (v47 > *((_QWORD *)v87 + 2))
      goto LABEL_117;
    *(_QWORD *)v88 = v89;
    *(_QWORD *)&v45[16 * v86 + 8] = v91;
    v92 = *((_QWORD *)v87 + 2);
    if (v47 >= v92)
      goto LABEL_118;
    v11 = v87;
    v14 = v92 - 1;
    memmove(&v45[16 * v47], v90 + 16, 16 * (v92 - 1 - v47));
    *((_QWORD *)v87 + 2) = v92 - 1;
    v13 = v106;
    if (v92 <= 2)
      goto LABEL_14;
  }
  v93 = v87;
LABEL_98:
  v94 = v93;
LABEL_99:
  swift_bridgeObjectRelease(v94);
  *(_QWORD *)((char *)&dword_10 + (v109 & 0xFFFFFFFFFFFFF8)) = 0;
  specialized Array._endMutation()(v95);
  swift_bridgeObjectRelease(v109);
}

uint64_t sub_F8A84(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *, uint64_t *))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a3 != a2)
  {
    v7 = a3;
    v9 = result;
    v10 = *v4;
    v11 = *v4 + 8 * a3 - 8;
LABEL_4:
    v12 = *(_QWORD *)(v10 + 8 * v7);
    v13 = v9;
    v14 = (uint64_t *)v11;
    while (1)
    {
      v17 = v12;
      v16 = *v14;
      result = a4(&v17, &v16);
      if (v5)
        break;
      if ((result & 1) != 0)
      {
        if (!v10)
        {
          __break(1u);
          return result;
        }
        v15 = *v14;
        v12 = v14[1];
        *v14 = v12;
        v14[1] = v15;
        --v14;
        if (v7 != ++v13)
          continue;
      }
      ++v7;
      v11 += 8;
      if (v7 != a2)
        goto LABEL_4;
      return result;
    }
  }
  return result;
}

uint64_t sub_F8B4C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    v6 = *(_QWORD *)(v4 + 8 * a3);
    v7 = result;
    v8 = (_QWORD *)v5;
    while (1)
    {
      v9 = *v8;
      if (*(_QWORD *)(v6 + 16) >= *(_QWORD *)(*v8 + 16))
      {
LABEL_4:
        ++a3;
        v5 += 8;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      *v8 = v6;
      v8[1] = v9;
      --v8;
      if (a3 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_F8BB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BOOL4 v13;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    v6 = *(_QWORD *)(v4 + 8 * a3);
    v7 = result;
    v8 = (_QWORD *)v5;
    while (1)
    {
      v9 = *v8;
      v10 = *(_QWORD *)(v6 + 32);
      v11 = *(_QWORD *)(*v8 + 32);
      v12 = v10 == v11;
      v13 = v10 < v11;
      if (v12)
        v13 = *(_QWORD *)(v6 + 40) < *(_QWORD *)(*v8 + 40);
      if (!v13)
      {
LABEL_4:
        ++a3;
        v5 += 8;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      *v8 = v6;
      v8[1] = v9;
      --v8;
      if (a3 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_F8C30(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1D3130((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_F8E9C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (char *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 8;
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*(_QWORD *)(*((_QWORD *)v16 - 1) + 16) >= *(_QWORD *)(v20 + 16))
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *(_QWORD *)v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *(_QWORD *)v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          v17 -= 8;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)(*(_QWORD *)v6 + 16) >= *(_QWORD *)(*(_QWORD *)v4 + 16))
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1D31D8(&v24, &v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_F9118(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _BOOL4 v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  uint64_t result;
  char *v31;
  char *v32;
  char *v33;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v33 = __src;
  v32 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v20 = &v4[8 * v13];
      v31 = v20;
      v33 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v21 = (char *)(a3 - 8);
        while (1)
        {
          v22 = v21 + 8;
          v23 = *((_QWORD *)v20 - 1);
          v24 = v6 - 8;
          v25 = *((_QWORD *)v6 - 1);
          v26 = *(_QWORD *)(v23 + 32);
          v27 = *(_QWORD *)(v25 + 32);
          v28 = *(_QWORD *)(v23 + 40) < *(_QWORD *)(v25 + 40);
          v17 = v26 == v27;
          v29 = v26 < v27;
          if (!v17)
            v28 = v29;
          if (v28)
          {
            if (v22 != v6 || v21 >= v6)
              *(_QWORD *)v21 = v25;
            v33 = v6 - 8;
            v6 -= 8;
            if (v24 <= v7)
              goto LABEL_46;
          }
          else
          {
            v31 = v20 - 8;
            if (v22 < v20 || v21 >= v20 || v22 != v20)
              *(_QWORD *)v21 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            if (v6 <= v7)
              goto LABEL_46;
          }
          v21 -= 8;
          if (v20 <= v4)
            goto LABEL_46;
        }
      }
      goto LABEL_46;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v31 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)v6 + 32);
        v16 = *(_QWORD *)(*(_QWORD *)v4 + 32);
        v17 = v15 == v16;
        v18 = v15 < v16;
        if (v17)
          v18 = *(_QWORD *)(*(_QWORD *)v6 + 40) < *(_QWORD *)(*(_QWORD *)v4 + 40);
        if (v18)
        {
          v19 = v6 + 8;
          if (v7 < v6 || v7 >= v19 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        else
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v32 = v4;
          v19 = v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v19;
      }
      while ((unint64_t)v19 < a3);
      v33 = v7;
    }
LABEL_46:
    sub_1D31D8(&v33, &v32, &v31);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_F93BC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;

  swift_bridgeObjectRetain(a1);
  swift_retain();
  v7 = sub_9355C();
  if (!v8)
    goto LABEL_24;
  v11 = v7;
  v12 = v8;
  v13 = v9;
  v14 = v10;
  v15 = (_QWORD *)*a5;
  v17 = sub_3B8A0(v7, v8);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      v24 = (_QWORD *)*a5;
      if ((v16 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_F37EC();
      v24 = (_QWORD *)*a5;
      if ((v21 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v24[(v17 >> 6) + 8] |= 1 << v17;
    v26 = (uint64_t *)(v24[6] + 16 * v17);
    *v26 = v11;
    v26[1] = v12;
    v27 = (_QWORD *)(v24[7] + 16 * v17);
    *v27 = v13;
    v27[1] = v14;
    v28 = v24[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v24[2] = v30;
LABEL_13:
    v31 = sub_9355C();
    if (v32)
    {
      v35 = v31;
      v36 = v32;
      v37 = v33;
      v38 = v34;
      do
      {
        v43 = (_QWORD *)*a5;
        v45 = sub_3B8A0(v35, v36);
        v46 = v43[2];
        v47 = (v44 & 1) == 0;
        v48 = v46 + v47;
        if (__OFADD__(v46, v47))
          goto LABEL_25;
        v49 = v44;
        if (v43[3] < v48)
        {
          sub_EFEEC(v48, 1);
          v50 = sub_3B8A0(v35, v36);
          if ((v49 & 1) != (v51 & 1))
            goto LABEL_27;
          v45 = v50;
        }
        v52 = (_QWORD *)*a5;
        if ((v49 & 1) != 0)
        {
          swift_bridgeObjectRelease(v36);
          v39 = (_QWORD *)(v52[7] + 16 * v45);
          swift_bridgeObjectRelease(v39[1]);
          *v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v52[(v45 >> 6) + 8] |= 1 << v45;
          v53 = (uint64_t *)(v52[6] + 16 * v45);
          *v53 = v35;
          v53[1] = v36;
          v54 = (_QWORD *)(v52[7] + 16 * v45);
          *v54 = v37;
          v54[1] = v38;
          v55 = v52[2];
          v29 = __OFADD__(v55, 1);
          v56 = v55 + 1;
          if (v29)
            goto LABEL_26;
          v52[2] = v56;
        }
        v35 = sub_9355C();
        v36 = v40;
        v37 = v41;
        v38 = v42;
      }
      while (v40);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease(a1);
    sub_89AA0(a1);
    swift_release();
    return;
  }
  sub_EFEEC(v20, a4 & 1);
  v22 = sub_3B8A0(v11, v12);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    v24 = (_QWORD *)*a5;
    if ((v21 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    swift_bridgeObjectRelease(v12);
    v25 = (_QWORD *)(v24[7] + 16 * v17);
    swift_bridgeObjectRelease(v25[1]);
    *v25 = v13;
    v25[1] = v14;
    goto LABEL_13;
  }
LABEL_27:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_F96C4(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = result;
  i = 0;
  v4 = result + 56;
  v5 = -1 << *(_BYTE *)(result + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(63 - v5) >> 6;
  if (v7)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v11 = i + 1;
    if (!__OFADD__(i, 1))
    {
      if (v11 < v8)
      {
        v12 = *(_QWORD *)(v4 + 8 * v11);
        v13 = i + 1;
        if (v12)
          goto LABEL_21;
        v13 = i + 2;
        if (i + 2 >= v8)
          return sub_89AA0(v2);
        v12 = *(_QWORD *)(v4 + 8 * v13);
        if (v12)
          goto LABEL_21;
        v13 = i + 3;
        if (i + 3 >= v8)
          return sub_89AA0(v2);
        v12 = *(_QWORD *)(v4 + 8 * v13);
        if (v12)
        {
LABEL_21:
          v7 = (v12 - 1) & v12;
          v10 = __clz(__rbit64(v12)) + (v13 << 6);
          for (i = v13; ; v10 = v9 | (i << 6))
          {
            v15 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10);
            v16 = *v1;
            if (!*(_QWORD *)(*v1 + 16))
              goto LABEL_6;
            v17 = static Hasher._hash(seed:_:)(*(_QWORD *)(v16 + 40), *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
            v18 = -1 << *(_BYTE *)(v16 + 32);
            v19 = v17 & ~v18;
            if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
              goto LABEL_6;
            v20 = *(_QWORD *)(v16 + 48);
            if (*(_QWORD *)(v20 + 8 * v19) != v15)
              break;
LABEL_28:
            result = sub_1B4198(v15);
            if (!v7)
              goto LABEL_8;
LABEL_7:
            v9 = __clz(__rbit64(v7));
            v7 &= v7 - 1;
          }
          v21 = ~v18;
          while (1)
          {
            v19 = (v19 + 1) & v21;
            if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
              break;
            if (*(_QWORD *)(v20 + 8 * v19) == v15)
              goto LABEL_28;
          }
LABEL_6:
          result = sub_12FF80(&v22, v15);
          if (!v7)
            continue;
          goto LABEL_7;
        }
        v14 = i + 4;
        if (i + 4 < v8)
        {
          v12 = *(_QWORD *)(v4 + 8 * v14);
          if (v12)
          {
            v13 = i + 4;
            goto LABEL_21;
          }
          while (1)
          {
            v13 = v14 + 1;
            if (__OFADD__(v14, 1))
              goto LABEL_32;
            if (v13 >= v8)
              return sub_89AA0(v2);
            v12 = *(_QWORD *)(v4 + 8 * v13);
            ++v14;
            if (v12)
              goto LABEL_21;
          }
        }
      }
      return sub_89AA0(v2);
    }
    break;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

void (*sub_F98B0(uint64_t (**a1)(), unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_F99B0(v6, a2, a3);
  return sub_F9904;
}

void (*sub_F9908(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_F9A1C(v6, a2, a3);
  return sub_F9904;
}

void (*sub_F995C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_F9A90(v6, a2, a3);
  return sub_F9904;
}

uint64_t (*sub_F99B0(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8)) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return j__s13ProgressStyleVwxx;
  }
  __break(1u);
  return result;
}

uint64_t *sub_F9A1C(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8)) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return (uint64_t *)_s13ProgressStyleVwxx;
  }
  __break(1u);
  return result;
}

uint64_t _s13ProgressStyleVwxx(_QWORD *a1)
{
  return swift_release(*a1);
}

void (*sub_F9A90(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8)) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_F9AFC;
  }
  __break(1u);
  return result;
}

void sub_F9AFC(id *a1)
{

}

uint64_t sub_F9B04(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_3DCC0((unint64_t *)&unk_3BC080, &qword_3BC078, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_319AC(&qword_3BC078);
          v13 = sub_F995C(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_FB3B8();
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F9D10(unint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  void (*v23)(_BYTE *, _QWORD);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[32];

  v14 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v26 = a3;
    else
      v26 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v15 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(a3);
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    if (a3 < 0)
      v18 = a3;
    else
      v18 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a3);
    if (v19 <= a2)
    {
      if (v15 >= 1)
      {
        v20 = sub_3DCC0(a5, a6, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v15; ++i)
        {
          v22 = sub_319AC(a6);
          v23 = (void (*)(_BYTE *, _QWORD))a7(v28, i, a3, v22, v20);
          v25 = *v24;
          swift_retain(*v24);
          v23(v28, 0);
          *(_QWORD *)(a1 + 8 * i) = v25;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v17 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFFF8));
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F9F20(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_F9D10(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for BookmarkPaginationEntity, &qword_3BBFC0, &qword_3B9DB0, (uint64_t (*)(_BYTE *, uint64_t, uint64_t, uint64_t, uint64_t))sub_F98B0);
}

unint64_t sub_F9F44(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = (_QWORD *)result;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[2];
  v8 = v3[3];
  v9 = v3[4];
  v16 = v9;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v9 = *v3;
LABEL_7:
    *v4 = v5;
    v4[1] = v6;
    v4[2] = v7;
    v4[3] = v8;
    v4[4] = v16;
    v4[5] = v9;
    return a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (v5 == v6)
    {
LABEL_5:
      a3 = 0;
      goto LABEL_6;
    }
    v15 = a3;
    v10 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_23:
      __break(1u);
LABEL_24:
      a3 = v15;
      goto LABEL_7;
    }
    v12 = 0;
    v13 = a3 - 1;
    v9 = v5;
    while (v8 < v10 && v9 >= v5 && v9 < v6 && v7 >= v10)
    {
      result = v10 - 1;
      if ((v16 & 0xC000000000000001) != 0)
      {
        result = specialized _ArrayBuffer._getElementSlowPath(_:)(result, v16);
      }
      else
      {
        if (v10 < 1)
          goto LABEL_27;
        if (result >= *(_QWORD *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFFF8)))
          goto LABEL_28;
        result = swift_retain(*(_QWORD *)(v16 + 32 + 8 * result));
      }
      v9 = v10;
      *(_QWORD *)(a2 + 8 * v12) = result;
      if (v13 == v12)
        goto LABEL_24;
      if (v10 == v6)
      {
        a3 = v12 + 1;
        v9 = v6;
        goto LABEL_7;
      }
      ++v12;
      if (__OFADD__(v10++, 1))
        goto LABEL_23;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_FA09C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  _QWORD v54[3];
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v6 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v7 = *(_QWORD *)(v3 + 16);
  v8 = *(_QWORD *)(v3 + 24);
  v9 = *(_OWORD *)(v3 + 48);
  v10 = *(_QWORD *)(v3 + 64);
  v12 = *(_OWORD *)(v3 + 32);
  v11 = (__int128 *)(v3 + 32);
  v51 = v12;
  v52 = v9;
  if (!a2 || !a3)
  {
    v17 = v6;
    v18 = v5;
    goto LABEL_48;
  }
  v14 = v11[1];
  v55 = *v11;
  v56 = v14;
  v57 = *((_QWORD *)v11 + 4);
  if ((a3 & 0x8000000000000000) == 0)
  {
    v15 = a2;
    if (v7 <= v6)
      v16 = v6;
    else
      v16 = v7;
    if (v6 == v7 && v5 == v8)
    {
      v17 = v7;
      v18 = v8;
LABEL_48:
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 24) = v8;
      *(_OWORD *)(a1 + 32) = v51;
      *(_OWORD *)(a1 + 48) = v52;
      *(_QWORD *)(a1 + 64) = v10;
      *(_QWORD *)(a1 + 72) = v17;
      *(_QWORD *)(a1 + 80) = v18;
      return;
    }
    v49 = v10;
    v50 = v5;
    v19 = 0;
    v53 = v16 - v6;
    v20 = 1;
    v18 = v5;
    v17 = v6;
    while (1)
    {
      v21 = v19;
      v19 = v20;
      if (v21 == v53)
        break;
      sub_13AE64(v17, v18, v54);
      v22 = v54[1];
      v23 = v54[2];
      if (__CFADD__(v17++, 1))
      {
        v25 = 0;
      }
      else
      {
        v26 = v17 * v56;
        if ((unsigned __int128)(v17 * (__int128)(uint64_t)v56) >> 64 != (v17 * (uint64_t)v56) >> 63)
          goto LABEL_54;
        v27 = v56 - 1;
        if (__OFSUB__((_QWORD)v56, 1))
          goto LABEL_55;
        v28 = __OFSUB__(v26, v27);
        v25 = v26 - v27;
        if (v28)
          goto LABEL_56;
      }
      v29 = *(_QWORD *)(v55 + 16);
      v30 = v18 - (v18 == v29);
      if (v30 >= v29)
        goto LABEL_51;
      v31 = v55 + 32;
      v32 = v55 + 32 + 24 * v30;
      v33 = *(_QWORD *)(v32 + 8);
      v34 = *(_QWORD *)(v32 + 16);
      v28 = __OFADD__(v33, v34);
      v35 = v33 + v34;
      if (v28)
        goto LABEL_52;
      if (v35 < v33)
        goto LABEL_53;
      if (v25 >= v33 && v25 < v35)
        goto LABEL_33;
      if (v25 < v33)
      {
        v37 = (uint64_t *)(v55 + 24 * v30 + 16);
        while (--v30 < v29)
        {
          v38 = *v37;
          v37 -= 3;
          v33 = v38;
          if (v25 >= v38)
            goto LABEL_30;
        }
        __break(1u);
        break;
      }
LABEL_30:
      if ((uint64_t)v30 >= (uint64_t)v29)
        goto LABEL_33;
      v39 = *(_QWORD *)(v31 + 24 * v30 + 16);
      v28 = __OFADD__(v33, v39);
      v40 = v33 + v39;
      if (v28)
        goto LABEL_58;
      if (v25 < v40)
      {
LABEL_33:
        v18 = v30;
      }
      else
      {
        v18 = v30 + 1;
        if ((uint64_t)(v30 + 1) < (uint64_t)v29)
        {
          v41 = v31 + 24 * v18;
          v43 = *(_QWORD *)(v41 + 8);
          v42 = *(_QWORD *)(v41 + 16);
          v28 = __OFADD__(v43, v42);
          v44 = v43 + v42;
          if (v28)
            goto LABEL_60;
          if (v25 >= v44)
          {
            v45 = v30 + 2;
            v46 = (_QWORD *)(v55 + 24 * v30 + 96);
            while (v29 != v45)
            {
              v47 = *(v46 - 1);
              v28 = __OFADD__(v47, *v46);
              v48 = v47 + *v46;
              if (v28)
                goto LABEL_57;
              ++v45;
              v46 += 3;
              if (v25 < v48)
              {
                v18 = v45 - 1;
                goto LABEL_34;
              }
            }
            v18 = *(_QWORD *)(v55 + 16);
          }
        }
      }
LABEL_34:
      *v15 = v54[0];
      v15[1] = v22;
      v15[2] = v23;
      if (v19 == a3)
        goto LABEL_47;
      v15 += 3;
      v20 = v19 + 1;
      if (v17 == v7 && v18 == v8)
      {
        v17 = v7;
        v18 = v8;
LABEL_47:
        v10 = v49;
        v5 = v50;
        goto LABEL_48;
      }
    }
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
  }
  __break(1u);
LABEL_60:
  __break(1u);
}

uint64_t sub_FA368@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

_QWORD *sub_FA39C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v4 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (!v4)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_F521C(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0)
      break;
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 16);
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v8 = swift_retain();
      v9 = *(_QWORD *)(v8 + 16);
      swift_release();
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      a2 = v11 + 1;
      if (v11 >= v10 >> 1)
        sub_F521C(v10 > 1, v11 + 1, 1);
      ++v6;
      _swiftEmptyArrayStorage[2] = a2;
      v12 = &_swiftEmptyArrayStorage[2 * v11];
      v12[4] = v7;
      v12[5] = v9;
      if (v4 == v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v13 = a1;
    else
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_FA4F4(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

void sub_FA51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  size_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;

  v3 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v4 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }
  if (v3 == -1)
    return;
  v7 = a1;
  v70 = _swiftEmptyArrayStorage;
  sub_F52B8(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v8 = 0;
    v9 = v70;
    v10 = v7 - 1;
    v56 = a3;
    while (a2 != v10)
    {
      if (v8)
        goto LABEL_79;
      v11 = *(_QWORD *)(a3 + 64);
      if (*(_QWORD *)(v11 + 16))
      {
        v12 = *(_QWORD *)(a3 + 56);
        v54 = *(_OWORD *)(a3 + 72);
        v53 = *(_QWORD *)(a3 + 88);
        v13 = sub_3B7F8(v7);
        v14 = _swiftEmptyArrayStorage;
        if ((v15 & 1) != 0)
        {
          v16 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 24 * v13 + 16);
          v57 = v7;
          v58 = 0;
          v17 = sub_13C030(&v57, v12, v54);
          v50 = v18;
          if ((v19 & 1) == 0)
          {
            if (__OFSUB__(v16, 1))
              goto LABEL_58;
            v57 = v7;
            v58 = v16 - 1;
            v51 = v17;
            v20 = sub_13C030(&v57, v12, v54);
            if ((v22 & 1) == 0)
            {
              if ((uint64_t)v20 < (uint64_t)v51)
                goto LABEL_59;
              v23 = (uint64_t)v20 + 1;
              if (__OFADD__(v20, 1))
                goto LABEL_60;
              if (v20 == (uint64_t *)-1)
              {
                v26 = 0;
              }
              else
              {
                v24 = v23 * v54;
                if ((unsigned __int128)(v23 * (__int128)(uint64_t)v54) >> 64 != (v23 * (uint64_t)v54) >> 63)
                  goto LABEL_67;
                v25 = v54 - 1;
                if (__OFSUB__((_QWORD)v54, 1))
                  goto LABEL_68;
                v26 = v24 - v25;
                if (__OFSUB__(v24, v25))
                  goto LABEL_69;
              }
              v30 = sub_13BE64(v26, v21, v12);
              v31 = *(_QWORD *)(v12 + 16);
              if (v31)
              {
                v32 = v54 - 1;
                if (__OFSUB__((_QWORD)v54, 1))
                  goto LABEL_70;
                v34 = (_QWORD *)(v12 + 24 * v31 + 16);
                v33 = v34[1];
                v35 = *v34 + v33;
                if (__OFADD__(*v34, v33))
                  goto LABEL_71;
                v29 = __OFADD__(v32, v35);
                v36 = v32 + v35;
                if (v29)
                  goto LABEL_72;
                v29 = __OFADD__(v36, (_QWORD)v54);
                v37 = v36 + v54;
                if (v29)
                  goto LABEL_73;
                v29 = __OFSUB__(v37, 1);
                v38 = v37 - 1;
                if (v29)
                  goto LABEL_74;
                if (!(_QWORD)v54)
                  goto LABEL_75;
                if (v38 == 0x8000000000000000 && (_QWORD)v54 == -1)
                  goto LABEL_78;
                v40 = v38 / (uint64_t)v54;
                v41 = v51;
                if (v40 < 0)
                  goto LABEL_61;
                if (((unint64_t)v51 & 0x8000000000000000) != 0)
                  goto LABEL_62;
              }
              else
              {
                v40 = 0;
                v41 = v51;
                if (((unint64_t)v51 & 0x8000000000000000) != 0)
                  goto LABEL_62;
              }
              if (v40 < v23)
                goto LABEL_63;
              v42 = v23 - (_QWORD)v41;
              if (__OFSUB__(v23, v41))
                goto LABEL_64;
              if (v42)
              {
                if (v42 <= 0)
                {
                  v14 = _swiftEmptyArrayStorage;
                }
                else
                {
                  v49 = v30;
                  v43 = sub_319AC(&qword_3BBE10);
                  v14 = (_QWORD *)swift_allocObject(v43, 24 * v42 + 32, 7);
                  v44 = j__malloc_size(v14);
                  v41 = v51;
                  v45 = v44 - 32;
                  v30 = v49;
                  v14[2] = v42;
                  v14[3] = 2 * (v45 / 24);
                }
                v62 = v41;
                v63 = v50;
                v64 = v23;
                v65 = v30;
                v66 = v12;
                v67 = v11;
                v68 = v54;
                v69 = v53;
                swift_bridgeObjectRetain_n(v12, 3);
                swift_bridgeObjectRetain_n(v11, 3);
                swift_bridgeObjectRetain_n(v53, 3);
                sub_FA09C((uint64_t)&v57, v14 + 4, v42);
                v55 = v47;
                v48 = v60;
                v52 = v59;
                swift_bridgeObjectRelease(v61);
                swift_bridgeObjectRelease(v48);
                swift_bridgeObjectRelease(v52);
                if (v55 != v42)
                  goto LABEL_76;
                swift_bridgeObjectRelease(v53);
                swift_bridgeObjectRelease_n(v11, 2);
                swift_bridgeObjectRelease_n(v12, 2);
                swift_bridgeObjectRelease(v53);
              }
              else
              {
                v46 = swift_bridgeObjectRetain(v53);
                v14 = _swiftEmptyArrayStorage;
                swift_bridgeObjectRelease(v46);
              }
            }
          }
        }
      }
      else
      {
        v14 = _swiftEmptyArrayStorage;
      }
      v70 = v9;
      v28 = v9[2];
      v27 = v9[3];
      if (v28 >= v27 >> 1)
      {
        sub_F52B8(v27 > 1, v28 + 1, 1);
        v9 = v70;
      }
      v9[2] = v28 + 1;
      v9[v28 + 4] = v14;
      v8 = v7 == a2;
      if (v7 == a2)
      {
        v7 = 0;
        a3 = v56;
      }
      else
      {
        v29 = __OFADD__(v7++, 1);
        a3 = v56;
        if (v29)
          goto LABEL_57;
      }
      if (a2 == ++v10)
        return;
    }
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
LABEL_77:
  __break(1u);
LABEL_78:
  __break(1u);
LABEL_79:
  __break(1u);
}

uint64_t sub_FA954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t i;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  char v33[24];
  uint64_t v34;

  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  for (i = 0; ; i = v31)
  {
    if (v7)
    {
      v30 = (v7 - 1) & v7;
      v31 = i;
      v10 = __clz(__rbit64(v7)) | (i << 6);
    }
    else
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_47;
      if (v11 >= v29)
        goto LABEL_45;
      v12 = *(_QWORD *)(v28 + 8 * v11);
      v13 = i + 1;
      if (!v12)
      {
        v13 = i + 2;
        if (i + 2 >= v29)
          goto LABEL_45;
        v12 = *(_QWORD *)(v28 + 8 * v13);
        if (!v12)
        {
          v13 = i + 3;
          if (i + 3 >= v29)
            goto LABEL_45;
          v12 = *(_QWORD *)(v28 + 8 * v13);
          if (!v12)
          {
            v13 = i + 4;
            if (i + 4 >= v29)
              goto LABEL_45;
            v12 = *(_QWORD *)(v28 + 8 * v13);
            if (!v12)
            {
              v14 = i + 5;
              if (i + 5 >= v29)
                goto LABEL_45;
              v12 = *(_QWORD *)(v28 + 8 * v14);
              v13 = i + 5;
              if (!v12)
              {
                while (1)
                {
                  v13 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    goto LABEL_48;
                  if (v13 >= v29)
                    break;
                  v12 = *(_QWORD *)(v28 + 8 * v13);
                  ++v14;
                  if (v12)
                    goto LABEL_21;
                }
LABEL_45:
                swift_release(a1);
                return 0;
              }
            }
          }
        }
      }
LABEL_21:
      v30 = (v12 - 1) & v12;
      v31 = v13;
      v10 = __clz(__rbit64(v12)) + (v13 << 6);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10);
    v16 = (uint64_t *)(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities);
    swift_beginAccess(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_bookmarkEntities, v33, 0, 0);
    v17 = *v16;
    v34 = v15;
    if ((unint64_t)v17 >> 62)
      break;
    v18 = *(_QWORD *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain_n(v17, 2);
    swift_retain(v15);
    swift_bridgeObjectRetain(a3);
    if (v18)
      goto LABEL_24;
LABEL_4:
    swift_bridgeObjectRelease(a3);
    swift_release(v34);
    result = swift_bridgeObjectRelease_n(v17, 2);
    v7 = v30;
  }
  if (v17 < 0)
    v27 = v17;
  else
    v27 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v17, 2);
  swift_retain(v15);
  swift_bridgeObjectRetain(a3);
  v18 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v18)
    goto LABEL_4;
LABEL_24:
  v19 = 4;
  while (1)
  {
    v20 = v19 - 4;
    if ((v17 & 0xC000000000000001) == 0)
      break;
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v17);
    v21 = result;
    v22 = v19 - 3;
    if (__OFADD__(v20, 1))
      goto LABEL_46;
LABEL_30:
    v23 = *(_QWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 24);
    if (v23 == a2 && v24 == a3)
    {
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v17);
      swift_release(v21);
LABEL_44:
      swift_release(a1);
      swift_bridgeObjectRelease(v17);
      return v34;
    }
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, a2, a3, 0);
    swift_release(v21);
    if ((v26 & 1) != 0)
    {
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v17);
      goto LABEL_44;
    }
    ++v19;
    if (v22 == v18)
      goto LABEL_4;
  }
  v21 = *(_QWORD *)(v17 + 8 * v19);
  result = swift_retain(v21);
  v22 = v19 - 3;
  if (!__OFADD__(v20, 1))
    goto LABEL_30;
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_FAC80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t i;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  char v32[24];
  uint64_t v33;

  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v33 = a1;
  result = swift_bridgeObjectRetain(a1);
  for (i = 0; ; i = v31)
  {
    if (v7)
    {
      v30 = (v7 - 1) & v7;
      v31 = i;
      v10 = __clz(__rbit64(v7)) | (i << 6);
    }
    else
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_46;
      if (v11 >= v29)
        goto LABEL_44;
      v12 = *(_QWORD *)(v28 + 8 * v11);
      v13 = i + 1;
      if (!v12)
      {
        v13 = i + 2;
        if (i + 2 >= v29)
          goto LABEL_44;
        v12 = *(_QWORD *)(v28 + 8 * v13);
        if (!v12)
        {
          v13 = i + 3;
          if (i + 3 >= v29)
            goto LABEL_44;
          v12 = *(_QWORD *)(v28 + 8 * v13);
          if (!v12)
          {
            v13 = i + 4;
            if (i + 4 >= v29)
              goto LABEL_44;
            v12 = *(_QWORD *)(v28 + 8 * v13);
            if (!v12)
            {
              v14 = i + 5;
              if (i + 5 >= v29)
                goto LABEL_44;
              v12 = *(_QWORD *)(v28 + 8 * v14);
              v13 = i + 5;
              if (!v12)
              {
                while (1)
                {
                  v13 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    goto LABEL_47;
                  if (v13 >= v29)
                    break;
                  v12 = *(_QWORD *)(v28 + 8 * v13);
                  ++v14;
                  if (v12)
                    goto LABEL_21;
                }
LABEL_44:
                swift_release(v33);
                return 0;
              }
            }
          }
        }
      }
LABEL_21:
      v30 = (v12 - 1) & v12;
      v31 = v13;
      v10 = __clz(__rbit64(v12)) + (v13 << 6);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v33 + 56) + 8 * v10);
    v16 = (uint64_t *)(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities);
    swift_beginAccess(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_highlightEntities, v32, 0, 0);
    v17 = *v16;
    if ((unint64_t)v17 >> 62)
      break;
    v18 = *(_QWORD *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain_n(v17, 2);
    swift_retain(v15);
    swift_bridgeObjectRetain(a3);
    if (v18)
      goto LABEL_24;
LABEL_4:
    swift_bridgeObjectRelease(a3);
    swift_release(v15);
    result = swift_bridgeObjectRelease_n(v17, 2);
    v7 = v30;
  }
  if (v17 < 0)
    v27 = v17;
  else
    v27 = v17 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v17, 2);
  swift_retain(v15);
  swift_bridgeObjectRetain(a3);
  v18 = _CocoaArrayWrapper.endIndex.getter(v27);
  if (!v18)
    goto LABEL_4;
LABEL_24:
  v19 = 4;
  while (1)
  {
    v20 = v19 - 4;
    if ((v17 & 0xC000000000000001) == 0)
      break;
    result = specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v17);
    v21 = result;
    v22 = __OFADD__(v20, 1);
    v23 = v19 - 3;
    if (v22)
      goto LABEL_45;
LABEL_30:
    v24 = *(_QWORD *)(v21 + 16);
    v25 = *(_QWORD *)(v21 + 24);
    v26 = v24 == a2 && v25 == a3;
    if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, a2, a3, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(a3);
      swift_release(v33);
      swift_release(v21);
      swift_bridgeObjectRelease_n(v17, 2);
      return v15;
    }
    swift_release(v21);
    ++v19;
    if (v23 == v18)
      goto LABEL_4;
  }
  v21 = *(_QWORD *)(v17 + 8 * v19);
  result = swift_retain(v21);
  v22 = __OFADD__(v20, 1);
  v23 = v19 - 3;
  if (!v22)
    goto LABEL_30;
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_FAF88(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = a4 - result;
  if (__OFSUB__(a4, result))
  {
    __break(1u);
    goto LABEL_20;
  }
  if (a3 >= 1)
  {
    if (v6 < 0 || v6 >= a3)
      goto LABEL_9;
    return 0;
  }
  if (v6 <= 0 && v6 > a3)
    return 0;
LABEL_9:
  v7 = result + a3;
  if (__OFADD__(result, a3))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (!v7)
    goto LABEL_16;
  v8 = v7 * a6;
  if ((unsigned __int128)(v7 * (__int128)a6) >> 64 != (v7 * a6) >> 63)
    goto LABEL_21;
  v9 = a6 - 1;
  if (!__OFSUB__(a6, 1))
  {
    v10 = v8 - v9;
    if (!__OFSUB__(v8, v9))
      goto LABEL_17;
    __break(1u);
LABEL_16:
    v10 = 0;
LABEL_17:
    sub_13BE64(v10, a2, a5);
    return v7;
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_FB038@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 16, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 16);
  return result;
}

uint64_t sub_FB07C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess(*a2 + 16, v5, 1, 0);
  *(_BYTE *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_FB0BC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 24, v5, 0, 0);
  *a2 = *(_QWORD *)(v3 + 24);
  return result;
}

uint64_t sub_FB100(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess(*a2 + 24, v5, 1, 0);
  *(_QWORD *)(v3 + 24) = v2;
  return result;
}

uint64_t sub_FB140@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 48, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 48);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_FB18C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1;
  result = swift_beginAccess(*a1 + 112, v5, 0, 0);
  *a2 = *(_BYTE *)(v3 + 112);
  return result;
}

uint64_t sub_FB1D0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess(*a2 + 112, v5, 1, 0);
  *(_BYTE *)(v3 + 112) = v2;
  return result;
}

uint64_t sub_FB210@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 120, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 128);
  *a2 = *(_QWORD *)(v3 + 120);
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_FB25C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 136, v6, 0, 0);
  v4 = *(_QWORD *)(v3 + 136);
  *a2 = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t type metadata accessor for BookPaginationEntity()
{
  return objc_opt_self(_TtC8BookEPUB20BookPaginationEntity);
}

uint64_t method lookup function for BookPaginationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookPaginationEntity);
}

uint64_t dispatch thunk of BookPaginationEntity.spreads.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of BookPaginationEntity.tocIdCssRules.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of ContentViewHost.willWaitForContentView()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of BookPaginationEntity.__allocating_init(paginationComplete:pageCount:columnCount:documents:chapters:navigationDirection:paginationMode:hasPhysicalPages:configurationKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 400))();
}

uint64_t dispatch thunk of ReadingSettingsManager.readingLoupeActiveDimming.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of BookPaginationEntity.location(forBookPageOffset:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

unint64_t sub_FB324()
{
  unint64_t result;

  result = qword_3BBDC8;
  if (!qword_3BBDC8)
  {
    result = swift_getWitnessTable(&unk_2EDD84, &type metadata for SpreadCollection);
    atomic_store(result, (unint64_t *)&qword_3BBDC8);
  }
  return result;
}

_QWORD *sub_FB370(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[5];
  v3 = a1[8];
  swift_bridgeObjectRetain(a1[4]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

unint64_t sub_FB3B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BC070;
  if (!qword_3BC070)
  {
    v1 = objc_opt_self(UILabel);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3BC070);
  }
  return result;
}

double Paginating.lastLocation.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_FB8B8(a1, (void (*)(__int128 *__return_ptr))sub_E9020, "Failed to get last document!", a2);
}

uint64_t sub_FB40C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;

  v4 = (*(uint64_t (**)(void))(a2 + 24))();
  v6 = v5;
  ObjectType = swift_getObjectType(v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 136))(v4, ObjectType, v6, a1, a2);
  swift_unknownObjectRelease(v4);
  return v8;
}

uint64_t sub_FB47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;

  v4 = (*(uint64_t (**)(void))(a2 + 24))();
  v6 = v5;
  ObjectType = swift_getObjectType(v4);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 144))(v4, ObjectType, v6, a1, a2);
  swift_unknownObjectRelease(v4);
  return v8;
}

uint64_t sub_FB4EC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3BC090);
  sub_555F0(v0, (uint64_t)qword_3BC090);
  if (qword_3B56B8 != -1)
    swift_once(&qword_3B56B8, sub_5EFF4);
  return Logger.init(_:)((id)qword_3CEEF8);
}

Swift::String __swiftcall Paginating.currentQueueDescription()()
{
  uint64_t v0;
  void *v1;
  Swift::String result;

  v0 = 0;
  v1 = (void *)0xE000000000000000;
  result._object = v1;
  result._countAndFlagsBits = v0;
  return result;
}

Swift::Int __swiftcall Paginating.pageOffsetForBookProgress(_:)(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  double v7;
  double v8;
  double v9;
  _BYTE v10[24];

  v3 = (*(uint64_t (**)(void))(v1 + 8))();
  swift_beginAccess(v3 + 24, v10, 0, 0);
  v4 = *(_QWORD *)(v3 + 24);
  v5 = swift_release(v3);
  if (v4 < 1)
    return 0;
  result = NSNotFound.getter(v5);
  if (v4 == result)
    return 0;
  v7 = 0.0;
  if (a1 >= 0.0)
    v7 = a1;
  v8 = fmin(a1, 1.0);
  if (a1 >= 0.5)
    v7 = v8;
  v9 = v7 * (double)(v4 - 1);
  if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v9 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v9 < 9.22337204e18)
    return (uint64_t)v9;
LABEL_14:
  __break(1u);
  return result;
}

uint64_t Paginating.locationForBookPageNumber(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  uint64_t result;

  v3 = __OFSUB__(a1, 1);
  result = a1 - 1;
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(a3 + 216))(result);
  __break(1u);
  return result;
}

uint64_t Paginating.locationForBookPageOffset(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _OWORD v12[5];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int16 v18;
  __int128 v19;
  char v20;

  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  sub_E9164(a1, (uint64_t)&v19);
  swift_release();
  if ((v20 & 1) != 0)
  {
    if (qword_3B5768 != -1)
      swift_once(&qword_3B5768, sub_FB4EC);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_555F0(v6, (uint64_t)qword_3BC090);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v10 = 134217984;
      *(_QWORD *)&v12[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v12, (char *)v12 + 8, v10 + 4);
      _os_log_impl(&dword_0, v8, v9, "Failed to get document that would be for raw pageNumber: %ld", v10, 0xCu);
      swift_slowDealloc(v10, -1, -1);
    }

    sub_555CC((uint64_t)v12);
  }
  else
  {
    v12[0] = v19;
    memset(&v12[1], 0, 64);
    v13 = 0;
    v14 = 1;
    v15 = 0u;
    v16 = 0u;
    v17 = 0;
    v18 = 1;
    address(of:)(v12);
  }
  return sub_49AD8((uint64_t)v12, a4);
}

uint64_t Paginating.locationForBookProgress(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(a2 + 200))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 216))(v4, a1, a2);
}

uint64_t DocumentConfigurationState.description.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x72756769666E6F63;
  else
    return 0x69666E6F43746F6ELL;
}

double Paginating.firstLocation.getter@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_FB8B8(a1, (void (*)(__int128 *__return_ptr))sub_E8F04, "Failed to get first document!", a2);
}

double sub_FB8B8@<D0>(uint64_t a1@<X1>, void (*a2)(__int128 *__return_ptr)@<X2>, const char *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  double result;
  __int128 v14;
  char v15;

  v7 = (*(uint64_t (**)(void))(a1 + 8))();
  a2(&v14);
  swift_release(v7);
  if ((v15 & 1) != 0)
  {
    if (qword_3B5768 != -1)
      swift_once(&qword_3B5768, sub_FB4EC);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_555F0(v8, (uint64_t)qword_3BC090);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_0, v10, v11, a3, v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    LOBYTE(v14) = 1;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_QWORD *)(a4 + 80) = 0;
    *(_BYTE *)(a4 + 88) = 1;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_QWORD *)(a4 + 128) = 0;
    *(_BYTE *)(a4 + 136) = 1;
    *(_BYTE *)(a4 + 137) = 0;
  }
  else
  {
    result = *(double *)&v14;
    *(_OWORD *)a4 = v14;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_QWORD *)(a4 + 80) = 0;
    *(_BYTE *)(a4 + 88) = 1;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_QWORD *)(a4 + 128) = 0;
    *(_WORD *)(a4 + 136) = 1;
  }
  return result;
}

Swift::UInt __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Paginating.pagesRemainingInChapter(afterBookPageOffset:)(Swift::Int afterBookPageOffset)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  Swift::Int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  unint64_t v35;
  _BYTE *v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[18];
  uint64_t v47[21];

  v5 = v4;
  v6 = v3;
  v7 = v2;
  v8 = v1;
  (*(void (**)(uint64_t *__return_ptr))(v2 + 216))(v43);
  sub_49AD8((uint64_t)v43, (uint64_t)v46);
  sub_49AD8((uint64_t)v46, (uint64_t)v47);
  if (sub_49B20((uint64_t)v47) != 1)
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v8, v7);
    sub_49B44(v46);
    v11 = BookPaginationEntity.document(for:)(v47[0]);
    v12 = swift_release();
    if (v11)
    {
      ((void (*)(uint64_t, uint64_t, __n128))v10)(v8, v7, v12);
      sub_E9164(afterBookPageOffset, (uint64_t)v43);
      if ((v44 & 1) != 0)
      {
        swift_release();
        v13 = (uint64_t)_swiftEmptyArrayStorage;
      }
      else
      {
        v44 = v43[0];
        v45 = v43[1];
        sub_EBDB4(v43);
        v13 = v14;
        swift_release();
      }
      if ((unint64_t)v13 >> 62)
        goto LABEL_26;
      if (*(_QWORD *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8)))
      {
        while (1)
        {
          if ((v13 & 0xC000000000000001) != 0)
          {
            v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
          }
          else
          {
            if (!*(_QWORD *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8)))
            {
              __break(1u);
              goto LABEL_38;
            }
            v15 = *(_QWORD *)(v13 + 32);
            swift_retain();
          }
          v16 = swift_bridgeObjectRelease(v13);
          v17 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v10)(v8, v7, v16);
          swift_beginAccess(v17 + 48, v43, 0, 0);
          v18 = *(_QWORD *)(v17 + 48);
          swift_bridgeObjectRetain(v18);
          swift_release();
          swift_retain();
          v19 = v5;
          v20 = sub_FDD44(v18, v15);
          v13 = v19;
          swift_bridgeObjectRelease(v18);
          swift_release();
          if (!v20)
            break;
          v47[20] = v20;
          v10 = *(void (**)(uint64_t, uint64_t))(v20 + 32);
          v5 = *(_QWORD *)(v11 + 16);
          if (v5 >= (uint64_t)v10)
          {
            v21 = (uint64_t *)(v11 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
            swift_beginAccess(v11 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, &v41, 0, 0);
            v7 = *v21;
            if ((unint64_t)*v21 >> 62)
              goto LABEL_41;
            v6 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
LABEL_21:
            while (2)
            {
              swift_release();
              swift_release();
              v22 = (uint64_t *)(v11 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
              swift_beginAccess(v11 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v40, 0, 0);
              v7 = *v22;
              swift_release();
              v23 = afterBookPageOffset - v7;
              if (__OFSUB__(afterBookPageOffset, v7))
              {
LABEL_38:
                __break(1u);
              }
              else
              {
                v24 = __OFSUB__(v6, v23);
                v25 = v6 - v23;
                if (!v24)
                {
                  v24 = __OFSUB__(v25, 1);
                  v26 = v25 - 1;
                  if (!v24)
                    return v26 & ~(v26 >> 63);
                  goto LABEL_40;
                }
              }
              __break(1u);
LABEL_40:
              __break(1u);
LABEL_41:
              if (v7 < 0)
                v38 = v7;
              else
                v38 = v7 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v7);
              v6 = _CocoaArrayWrapper.endIndex.getter(v38);
              swift_bridgeObjectRelease(v7);
              continue;
            }
          }
          v39 = (uint64_t)&v39;
          v41 = 0;
          while (v10 != (void (*)(uint64_t, uint64_t))v5)
          {
            v40[0] = v5;
            sub_FBEC0(&v41, v40, v6, v8, v7);
            if (v19)
              goto LABEL_21;
            if (v10 == (void (*)(uint64_t, uint64_t))++v5)
            {
              v6 = v41;
              goto LABEL_21;
            }
          }
          __break(1u);
LABEL_26:
          if (v13 < 0)
            v28 = v13;
          else
            v28 = v13 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v13);
          v29 = _CocoaArrayWrapper.endIndex.getter(v28);
          swift_bridgeObjectRelease(v13);
          if (!v29)
            goto LABEL_30;
        }
        swift_release();
        swift_release();
      }
      else
      {
LABEL_30:
        swift_release();
        swift_bridgeObjectRelease(v13);
      }
    }
  }
  if (qword_3B5768 != -1)
    swift_once(&qword_3B5768, sub_FB4EC);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_555F0(v30, (uint64_t)qword_3BC090);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v34 = 134217984;
    v41 = afterBookPageOffset;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v34 + 4);
    _os_log_impl(&dword_0, v32, v33, "page offset %ld does not map to a document", v34, 0xCu);
    swift_slowDealloc(v34, -1, -1);
  }

  v35 = sub_C7104();
  swift_allocError(&type metadata for PaginationError, v35, 0, 0);
  *v36 = 0;
  return swift_willThrow(v37);
}

void sub_FBEC0(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _BYTE v10[24];

  v6 = *a2;
  (*(void (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5);
  v7 = BookPaginationEntity.document(for:)(v6);
  swift_release();
  if (v7)
  {
    v8 = (uint64_t *)(v7 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
    swift_beginAccess(v7 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v10, 0, 0);
    v9 = *v8;
    swift_release();
    if (__OFADD__(*a1, v9))
      __break(1u);
    else
      *a1 += v9;
  }
}

uint64_t Paginating.documentHighlightsChangedPublisher(forOrdinal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];

  v6 = sub_319AC(&qword_3BC0A8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_319AC(&qword_3BC0B0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 56))(a2, a3, v12);
  v15 = swift_allocObject(&unk_380D78, 24);
  *(_QWORD *)(v15 + 16) = a1;
  v16 = sub_319AC(&qword_3BAEF8);
  v17 = sub_3DCC0(&qword_3BAF00, &qword_3BAEF8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.filter(_:)(sub_FDE74, v15, v16, v17);
  swift_release();
  swift_release();
  v18 = sub_3DCC0(&qword_3BC0B8, &qword_3BC0A8, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  Publisher.map<A>(_:)(address(of:), 0, v6, (char *)&type metadata for () + 8, v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v19 = sub_3DCC0(&qword_3BC0C0, &qword_3BC0B0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v20 = Publisher.eraseToAnyPublisher()(v10, v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return v20;
}

uint64_t Paginating.documentPaginationCompletedPublisher()(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = sub_319AC(&qword_3BC0C8);
  v28 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_319AC(&qword_3BC0D0);
  v29 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_319AC(&qword_3BC0D8);
  v32 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_319AC(&qword_3BC0E0);
  v33 = *(_QWORD *)(v31 - 8);
  v12 = __chkstk_darwin(v31);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 16))(a1, a2, v12);
  v15 = sub_319AC(&qword_3B8E38);
  v16 = sub_319AC(&qword_3BC0E8);
  v17 = sub_3DCC0(&qword_3B8E40, &qword_3B8E38, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_FC48C, 0, v15, v16, v17);
  swift_release();
  v18 = sub_3DCC0(&qword_3BC0F0, &qword_3BC0C8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v19 = sub_3DCC0(&qword_3BC0F8, &qword_3BC0E8, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  Publisher<>.switchToLatest()(v4, v18, v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  v20 = sub_3DCC0(&qword_3BC100, &qword_3BC0D0, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  Publisher.filter(_:)(sub_FC7FC, 0, v7, v20);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v7);
  v21 = sub_3DCC0(&qword_3BC108, &qword_3BC0D8, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v22 = v30;
  Publisher.map<A>(_:)(sub_33234, 0, v30, &type metadata for Int, v21);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v22);
  v23 = sub_3DCC0(&qword_3BC110, &qword_3BC0E0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v24 = v31;
  v25 = Publisher.eraseToAnyPublisher()(v31, v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v24);
  return v25;
}

uint64_t sub_FC48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;

  v4 = sub_319AC(&qword_3B8E20);
  v32 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_319AC((uint64_t *)&unk_3BBFB0);
  v7 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  if (!((unint64_t)v10 >> 62))
  {
    v11 = *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v10);
    if (v11)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease(v10);
    v22 = _swiftEmptyArrayStorage;
LABEL_19:
    v34[0] = v22;
    v26 = sub_319AC(&qword_3BC1E8);
    v27 = sub_3DCC0(&qword_3BC1F0, (uint64_t *)&unk_3BBFB0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v28 = sub_3DCC0(&qword_3BC1F8, &qword_3BC1E8, (uint64_t)&protocol conformance descriptor for [A]);
    return Publishers.MergeMany.init<A>(_:)(v34, v33, v26, v27, v28);
  }
  if (v10 < 0)
    v25 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  else
    v25 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v11 = _CocoaArrayWrapper.endIndex.getter(v25);
  if (!v11)
    goto LABEL_18;
LABEL_3:
  v35 = _swiftEmptyArrayStorage;
  result = sub_F52E4(0, v11 & ~(v11 >> 63), 0);
  if ((v11 & 0x8000000000000000) == 0)
  {
    v29[1] = a2;
    v13 = 0;
    v30 = v10 & 0xC000000000000001;
    v31 = v11;
    v14 = v10;
    do
    {
      if (v30)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v10);
      }
      else
      {
        v15 = *(_QWORD *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      swift_beginAccess(v15 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity__paginationComplete, v34, 33, 0);
      v16 = sub_319AC((uint64_t *)&unk_3B8E70);
      Published.projectedValue.getter(v16);
      swift_endAccess(v34);
      v17 = *(_QWORD *)(v15 + 16);
      v18 = swift_allocObject(&unk_3811B8, 24);
      *(_QWORD *)(v18 + 16) = v17;
      v19 = sub_319AC(&qword_3BC1E0);
      v20 = sub_3DCC0(&qword_3B8100, &qword_3B8E20, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
      Publisher.map<A>(_:)(sub_FE684, v18, v4, v19, v20);
      v21 = swift_release();
      (*(void (**)(char *, uint64_t, __n128))(v32 + 8))(v6, v4, v21);
      swift_release();
      v22 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
      {
        sub_F52E4(0, v22[2] + 1, 1);
        v22 = v35;
      }
      v24 = v22[2];
      v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        sub_F52E4(v23 > 1, v24 + 1, 1);
        v22 = v35;
      }
      ++v13;
      v22[2] = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))((unint64_t)v22+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v24, v9, v33);
      v10 = v14;
    }
    while (v31 != v13);
    swift_bridgeObjectRelease(v14);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_FC7FC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t Paginating.documentPaginationCompletedPublisher(forOrdinal:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v37 = sub_319AC(&qword_3BC118);
  v39 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_319AC(&qword_3BC120);
  v35 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_319AC(&qword_3BC128);
  v38 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_319AC(&qword_3BC130);
  v42 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_319AC(&qword_3BC138);
  v43 = *(_QWORD *)(v41 - 8);
  v15 = __chkstk_darwin(v41);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a3 + 16))(a2, a3, v15);
  v18 = swift_allocObject(&unk_380DA0, 24);
  *(_QWORD *)(v18 + 16) = a1;
  v19 = sub_319AC(&qword_3B8E38);
  v20 = sub_319AC(&qword_3BC140);
  v21 = sub_3DCC0(&qword_3B8E40, &qword_3B8E38, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_FDEC4, v18, v19, v20, v21);
  swift_release();
  swift_release();
  v22 = sub_319AC((uint64_t *)&unk_3BCEC0);
  v23 = sub_3DCC0(&qword_3BC148, &qword_3BC120, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher.map<A>(_:)(sub_FDBAC, 0, v8, v22, v23);
  v24 = sub_3DCC0(&qword_3BC150, &qword_3BC118, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v25 = sub_3DCC0((unint64_t *)&unk_3BE700, (uint64_t *)&unk_3BCEC0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v26 = v37;
  Publisher<>.switchToLatest()(v37, v24, v25);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v8);
  v27 = sub_3DCC0(&qword_3BC158, &qword_3BC128, (uint64_t)&protocol conformance descriptor for Publishers.SwitchToLatest<A, B>);
  v28 = v36;
  Publisher.filter(_:)(sub_35190, 0, v36, v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v28);
  v29 = sub_3DCC0(&qword_3BC160, &qword_3BC130, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  v30 = v40;
  Publisher.map<A>(_:)(address(of:), 0, v40, (char *)&type metadata for () + 8, v29);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v30);
  v31 = sub_3DCC0(&qword_3BC168, &qword_3BC138, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v32 = v41;
  v33 = Publisher.eraseToAnyPublisher()(v41, v31);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v32);
  return v33;
}

uint64_t sub_FCBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _BYTE v11[24];

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_3B7F8(a2), (v6 & 1) != 0))
  {
    swift_beginAccess(*(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5)+ OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity__paginationComplete, v11, 33, 0);
    swift_retain();
    v7 = sub_319AC((uint64_t *)&unk_3B8E70);
    Published.projectedValue.getter(v7);
    swift_endAccess(v11);
    swift_release();
    v8 = sub_319AC(&qword_3B8E20);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, 0, 1, v8);
  }
  else
  {
    v10 = sub_319AC(&qword_3B8E20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a3, 1, 1, v10);
  }
}

uint64_t BookNavigationDirection.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_FCD34 + 4 * byte_2EBEC0[*v0]))(0x69526F547466656CLL, 0xEB00000000746867);
}

uint64_t sub_FCD34()
{
  return 0x4C6F547468676972;
}

uint64_t sub_FCD54()
{
  return 0x746F426F54706F74;
}

uint64_t sub_FCD74()
{
  return 0x6F546D6F74746F62;
}

BookEPUB::BookNavigationDirection_optional __swiftcall BookNavigationDirection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookEPUB::BookNavigationDirection_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_379568, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

void sub_FCDEC(char *a1)
{
  sub_404B8(*a1);
}

void sub_FCDF8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_FCE50()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x4C6F547468676972, 0xEB00000000746665);
  swift_bridgeObjectRelease(0xEB00000000746665);
  return Hasher._finalize()();
}

void sub_FCED8()
{
  __asm { BR              X10 }
}

uint64_t sub_FCF20(uint64_t a1)
{
  String.hash(into:)(a1, 0x4C6F547468676972, 0xEB00000000746665);
  return swift_bridgeObjectRelease(0xEB00000000746665);
}

void sub_FCF94(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_FCFE8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x4C6F547468676972, 0xEB00000000746665);
  swift_bridgeObjectRelease(0xEB00000000746665);
  return Hasher._finalize()();
}

BookEPUB::BookNavigationDirection_optional sub_FD070(Swift::String *a1)
{
  return BookNavigationDirection.init(rawValue:)(*a1);
}

uint64_t sub_FD07C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_FD0B8 + 4 * byte_2EBED0[*v0]))();
}

void sub_FD0B8(_QWORD *a1@<X8>)
{
  *a1 = 0x4C6F547468676972;
  a1[1] = 0xEB00000000746665;
}

void sub_FD0DC(_QWORD *a1@<X8>)
{
  *a1 = 0x746F426F54706F74;
  a1[1] = 0xEB000000006D6F74;
}

void sub_FD100(_QWORD *a1@<X8>)
{
  *a1 = 0x6F546D6F74746F62;
  a1[1] = 0xEB00000000706F54;
}

uint64_t sub_FD124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_FE5A8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_FD180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_FE5A8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t DocumentPaginationDirection.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x4C6F547468676972;
  if (*v0 != 1)
    v1 = 0x6C61636974726576;
  if (*v0)
    return v1;
  else
    return 0x69526F547466656CLL;
}

void sub_FD230(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 2;
  switch(a1)
  {
    case 0:
      goto LABEL_5;
    case 1:
      if ((a2 & 1) == 0)
        goto LABEL_21;
      goto LABEL_10;
    case 2:
      goto LABEL_22;
    case 3:
      if ((a2 & 1) != 0)
      {
LABEL_10:
        v10 = 1;
      }
      else
      {
LABEL_5:
        if (qword_3B56F0 != -1)
          swift_once(&qword_3B56F0, sub_8A4D8);
        v11 = sub_555F0(v6, (uint64_t)qword_3CEFD0);
        v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.error.getter(v13);
        if (os_log_type_enabled(v13, (os_log_type_t)v14))
        {
          v15 = swift_slowAlloc(22, -1);
          v16 = swift_slowAlloc(64, -1);
          v27 = v16;
          *(_DWORD *)v15 = 136315394;
          v24 = v16;
          v25 = v14;
          v17 = 0xE800000000000000;
          v18 = 0x6465767265736572;
          switch(a1)
          {
            case 0:
              break;
            case 1:
              v17 = 0xE500000000000000;
              v18 = 0x6465676170;
              break;
            case 2:
              v18 = 0x6C61636974726576;
              break;
            case 3:
              v17 = 0xEA00000000006C61;
              v18 = 0x746E6F7A69726F68;
              break;
            default:
              goto LABEL_24;
          }
          v26 = sub_33524(v18, v17, &v27);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 4);
          swift_bridgeObjectRelease(v17);
          *(_WORD *)(v15 + 12) = 2080;
          if ((a2 & 1) != 0)
            v19 = 0x4C6F547468676972;
          else
            v19 = 0x69526F547466656CLL;
          if ((a2 & 1) != 0)
            v20 = 0xEB00000000746665;
          else
            v20 = 0xEB00000000746867;
          v26 = sub_33524(v19, v20, &v27);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 14);
          swift_bridgeObjectRelease(v20);
          _os_log_impl(&dword_0, v13, (os_log_type_t)v25, "Unsupported layoutMode/pageProgressDirection: %s/%s", (uint8_t *)v15, 0x16u);
          v21 = v24;
          swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v21, -1, -1);
          swift_slowDealloc(v15, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_21:
        v10 = 0;
      }
LABEL_22:
      *a3 = v10;
      break;
    default:
      v22 = sub_319AC(&qword_3BC1B0);
      _diagnoseUnexpectedEnumCase<A>(type:)(v22, v22);
      __break(1u);
LABEL_24:
      type metadata accessor for BookLayoutMode(0);
      v26 = a1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v23, &v26, v23, &type metadata for UInt);
      __break(1u);
      break;
  }
}

BookEPUB::DocumentPaginationDirection_optional __swiftcall DocumentPaginationDirection.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookEPUB::DocumentPaginationDirection_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3795E8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t sub_FD5C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_3F400(*a1, *a2);
}

Swift::Int sub_FD5CC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0x4C6F547468676972;
  v3 = 0xE800000000000000;
  if (v1 == 1)
    v3 = 0xEB00000000746665;
  else
    v2 = 0x6C61636974726576;
  if (v1)
    v4 = v2;
  else
    v4 = 0x69526F547466656CLL;
  if (v1)
    v5 = v3;
  else
    v5 = 0xEB00000000746867;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_FD674(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB00000000746665;
  v3 = 0x4C6F547468676972;
  if (*v1 != 1)
  {
    v3 = 0x6C61636974726576;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x69526F547466656CLL;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEB00000000746867;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_FD6F8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0x4C6F547468676972;
  v4 = 0xE800000000000000;
  if (v2 == 1)
    v4 = 0xEB00000000746665;
  else
    v3 = 0x6C61636974726576;
  if (v2)
    v5 = v3;
  else
    v5 = 0x69526F547466656CLL;
  if (v2)
    v6 = v4;
  else
    v6 = 0xEB00000000746867;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookEPUB::DocumentPaginationDirection_optional sub_FD79C(Swift::String *a1)
{
  return DocumentPaginationDirection.init(rawValue:)(*a1);
}

void sub_FD7A8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x4C6F547468676972;
  v3 = 0xE800000000000000;
  if (*v1 == 1)
    v3 = 0xEB00000000746665;
  else
    v2 = 0x6C61636974726576;
  if (*v1)
    v4 = v2;
  else
    v4 = 0x69526F547466656CLL;
  if (*v1)
    v5 = v3;
  else
    v5 = 0xEB00000000746867;
  *a1 = v4;
  a1[1] = v5;
}

uint64_t sub_FD810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_FE564();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_FD86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_FE564();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t DocumentPaginationMode.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574616E69676170;
  else
    return 0x6C6C6F726373;
}

BookEPUB::DocumentPaginationMode_optional __swiftcall DocumentPaginationMode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BookEPUB::DocumentPaginationMode_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_379650, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t sub_FD954(char *a1, char *a2)
{
  return sub_3F738(*a1, *a2);
}

Swift::Int sub_FD960()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6574616E69676170;
  else
    v2 = 0x6C6C6F726373;
  if (v1)
    v3 = 0xE900000000000064;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_FD9E0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6574616E69676170;
  else
    v2 = 0x6C6C6F726373;
  if (*v1)
    v3 = 0xE900000000000064;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_FDA3C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6574616E69676170;
  else
    v3 = 0x6C6C6F726373;
  if (v2)
    v4 = 0xE900000000000064;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookEPUB::DocumentPaginationMode_optional sub_FDAB8(Swift::String *a1)
{
  return DocumentPaginationMode.init(rawValue:)(*a1);
}

void sub_FDAC4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6C6C6F726373;
  if (*v1)
    v2 = 0x6574616E69676170;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE900000000000064;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_FDB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_FE520();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_FDB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_FE520();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_FDBAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_319AC(&qword_3BC1D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_319AC(&qword_3BC140);
  __chkstk_darwin(v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_FE5EC(a1, (uint64_t)v10);
  v11 = sub_319AC(&qword_3B8E20);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_FE634((uint64_t)v10);
    Empty.init(completeImmediately:)(0, &type metadata for Bool, &type metadata for Never, &protocol witness table for Never);
    v13 = sub_3DCC0(&qword_3BC1D8, &qword_3BC1D0, (uint64_t)&protocol conformance descriptor for Empty<A, B>);
    v14 = Publisher.eraseToAnyPublisher()(v4, v13);
    result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    v16 = sub_3DCC0(&qword_3B8100, &qword_3B8E20, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v14 = Publisher.eraseToAnyPublisher()(v11, v16);
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  *a2 = v14;
  return result;
}

uint64_t sub_FDD44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v5 = *(_QWORD *)(a2 + 48);
    v6 = 4;
    while (1)
    {
      v7 = v6 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
      v9 = __OFADD__(v7, 1);
      v10 = v6 - 3;
      if (v9)
        goto LABEL_13;
LABEL_10:
      if (v5 >= *(_QWORD *)(v8 + 48) && *(_QWORD *)(a2 + 56) < *(_QWORD *)(v8 + 56))
      {
        swift_bridgeObjectRelease(a1);
        return v8;
      }
      swift_release(v8);
      ++v6;
      if (v10 == v4)
        goto LABEL_18;
    }
    v8 = *(_QWORD *)(a1 + 8 * v6);
    swift_retain(v8);
    v9 = __OFADD__(v7, 1);
    v10 = v6 - 3;
    if (!v9)
      goto LABEL_10;
LABEL_13:
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v11 = a1;
    else
      v11 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v11);
  }
LABEL_18:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_FDE64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_FDE74(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_FDE9C + 4 * byte_2EBEDC[*(unsigned __int8 *)(a1 + 24)]))();
}

BOOL sub_FDE9C@<W0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 == a1;
}

uint64_t sub_FDEB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_FDEC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_FCBFC(a1, *(_QWORD *)(v2 + 16), a2);
}

unint64_t sub_FDED0()
{
  unint64_t result;

  result = qword_3BC170;
  if (!qword_3BC170)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationError, &type metadata for PaginationError);
    atomic_store(result, (unint64_t *)&qword_3BC170);
  }
  return result;
}

unint64_t sub_FDF18()
{
  unint64_t result;

  result = qword_3BC178;
  if (!qword_3BC178)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationCacheCheckStrategy, &type metadata for PaginationCacheCheckStrategy);
    atomic_store(result, (unint64_t *)&qword_3BC178);
  }
  return result;
}

unint64_t sub_FDF60()
{
  unint64_t result;

  result = qword_3BC180;
  if (!qword_3BC180)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationResult, &type metadata for PaginationResult);
    atomic_store(result, (unint64_t *)&qword_3BC180);
  }
  return result;
}

unint64_t sub_FDFA8()
{
  unint64_t result;

  result = qword_3BC188;
  if (!qword_3BC188)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentConfigurationState, &type metadata for DocumentConfigurationState);
    atomic_store(result, (unint64_t *)&qword_3BC188);
  }
  return result;
}

unint64_t sub_FDFF0()
{
  unint64_t result;

  result = qword_3BC190;
  if (!qword_3BC190)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookNavigationDirection, &type metadata for BookNavigationDirection);
    atomic_store(result, (unint64_t *)&qword_3BC190);
  }
  return result;
}

unint64_t sub_FE038()
{
  unint64_t result;

  result = qword_3BC198;
  if (!qword_3BC198)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationDirection, &type metadata for DocumentPaginationDirection);
    atomic_store(result, (unint64_t *)&qword_3BC198);
  }
  return result;
}

unint64_t sub_FE080()
{
  unint64_t result;

  result = qword_3BC1A0;
  if (!qword_3BC1A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationMode, &type metadata for DocumentPaginationMode);
    atomic_store(result, (unint64_t *)&qword_3BC1A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for PaginationError()
{
  return &type metadata for PaginationError;
}

ValueMetadata *type metadata accessor for PaginationCacheCheckStrategy()
{
  return &type metadata for PaginationCacheCheckStrategy;
}

ValueMetadata *type metadata accessor for PaginationResult()
{
  return &type metadata for PaginationResult;
}

uint64_t dispatch thunk of ExpandedContentEventHandling.share(text:sourceRect:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 64))();
}

uint64_t dispatch thunk of ReadingSettingsProviding.readingLoupeActiveDimming.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of Paginating.paginate(document:using:with:forDisplay:queuePriority:cacheStrategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  int *v18;
  _QWORD *v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v18 = *(int **)(a10 + 120);
  v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v18 + *v18);
  v19 = (_QWORD *)swift_task_alloc(v18[1]);
  *(_QWORD *)(v10 + 16) = v19;
  *v19 = v10;
  v19[1] = sub_3F0C0;
  return v21(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t dispatch thunk of Paginating.reevaluatePaginationData(document:usingWebView:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 128))();
}

uint64_t dispatch thunk of Paginating.paginationJSOptions<A>(layoutProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 136))();
}

uint64_t dispatch thunk of Paginating.cleanupJSOptions<A>(layoutProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 144))();
}

uint64_t dispatch thunk of Paginating.cfiUtilityJSOptions<A>(documentEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of Paginating.annotation(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of Paginating.location(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of Paginating.chapterName(bookPageOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of Paginating.chapterName(pageNumber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 184))();
}

uint64_t dispatch thunk of Paginating.lastChapterIndex(forPageLocation:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of Paginating.locationForBookPageNumber(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 208))();
}

uint64_t dispatch thunk of Paginating.locationForBookPageOffset(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 216))();
}

uint64_t dispatch thunk of ContentLoading.takeSnapshot(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 232))();
}

uint64_t dispatch thunk of Paginating.forceRepagination(forAssetID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 248))();
}

uint64_t dispatch thunk of ContentLoading.convertToDocument(contentRect:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 264))();
}

uint64_t dispatch thunk of Paginating.markValidCacheResults(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 272))();
}

uint64_t dispatch thunk of Paginating.markValidCacheResultsForCurrentKey()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t dispatch thunk of Paginating.fontFamiliesFailedToRegister(_:forWebView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 288))();
}

ValueMetadata *type metadata accessor for DocumentConfigurationState()
{
  return &type metadata for DocumentConfigurationState;
}

uint64_t _s8BookEPUB23BookNavigationDirectionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_FE308 + 4 * byte_2EBEE5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_FE33C + 4 * byte_2EBEE0[v4]))();
}

uint64_t sub_FE33C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FE344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFE34CLL);
  return result;
}

uint64_t sub_FE358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFE360);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_FE364(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FE36C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BookNavigationDirection()
{
  return &type metadata for BookNavigationDirection;
}

uint64_t _s8BookEPUB27DocumentPaginationDirectionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_FE3D4 + 4 * byte_2EBEEF[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_FE408 + 4 * byte_2EBEEA[v4]))();
}

uint64_t sub_FE408(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FE410(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFE418);
  return result;
}

uint64_t sub_FE424(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFE42CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_FE430(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FE438(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DocumentPaginationDirection()
{
  return &type metadata for DocumentPaginationDirection;
}

uint64_t _s8BookEPUB22DocumentPaginationModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_FE4A0 + 4 * byte_2EBEF9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_FE4D4 + 4 * byte_2EBEF4[v4]))();
}

uint64_t sub_FE4D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FE4DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFE4E4);
  return result;
}

uint64_t sub_FE4F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFE4F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_FE4FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FE504(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DocumentPaginationMode()
{
  return &type metadata for DocumentPaginationMode;
}

unint64_t sub_FE520()
{
  unint64_t result;

  result = qword_3BC1B8;
  if (!qword_3BC1B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationMode, &type metadata for DocumentPaginationMode);
    atomic_store(result, (unint64_t *)&qword_3BC1B8);
  }
  return result;
}

unint64_t sub_FE564()
{
  unint64_t result;

  result = qword_3BC1C0;
  if (!qword_3BC1C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentPaginationDirection, &type metadata for DocumentPaginationDirection);
    atomic_store(result, (unint64_t *)&qword_3BC1C0);
  }
  return result;
}

unint64_t sub_FE5A8()
{
  unint64_t result;

  result = qword_3BC1C8;
  if (!qword_3BC1C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookNavigationDirection, &type metadata for BookNavigationDirection);
    atomic_store(result, (unint64_t *)&qword_3BC1C8);
  }
  return result;
}

uint64_t sub_FE5EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3BC140);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_FE634(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC(&qword_3BC140);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_FE674()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

char *sub_FE684@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;

  v3 = *result;
  *(_QWORD *)a2 = *(_QWORD *)(v2 + 16);
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

__n128 ChapterPaginationEntity.firstLocation.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = v1[2];
  *a1 = result;
  return result;
}

uint64_t ChapterPaginationEntity.indentationLevel.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

uint64_t ChapterPaginationEntity.absoluteOrder.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t ChapterPaginationEntity.__allocating_init(name:firstLocation:indentationLevel:absoluteOrder:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v6 = v5;
  v12 = (_QWORD *)swift_allocObject(v6, 64, 7);
  v14 = *a3;
  v13 = a3[1];
  result = NSNotFound.getter(v12);
  if (v14 == result)
  {
    __break(1u);
  }
  else
  {
    result = NSNotFound.getter(result);
    if (v13 != result)
    {
      v12[2] = a1;
      v12[3] = a2;
      v12[4] = v14;
      v12[5] = v13;
      v12[6] = a4;
      v12[7] = a5;
      return (uint64_t)v12;
    }
  }
  __break(1u);
  return result;
}

uint64_t ChapterPaginationEntity.init(name:firstLocation:indentationLevel:absoluteOrder:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = *a3;
  v11 = a3[1];
  result = NSNotFound.getter(a1);
  if (v10 == result)
  {
    __break(1u);
  }
  else
  {
    result = NSNotFound.getter(result);
    if (v11 != result)
    {
      v5[2] = a1;
      v5[3] = a2;
      v5[4] = v10;
      v5[5] = v11;
      v5[6] = a4;
      v5[7] = a5;
      return (uint64_t)v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t ChapterPaginationEntity.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  Swift::String v10;
  void *v11;

  _StringGuts.grow(_:)(111);
  v1._countAndFlagsBits = 0xD000000000000025;
  v1._object = (void *)0x80000000002CB5C0;
  String.append(_:)(v1);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._object = (void *)0x80000000002CB5F0;
  v5._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v5);
  sub_656C4();
  v6._countAndFlagsBits = 0xD000000000000018;
  v6._object = (void *)0x80000000002CB610;
  String.append(_:)(v6);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9._object = (void *)0x80000000002CB630;
  v9._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v11);
  return 0;
}

uint64_t sub_FE92C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_FE954 + 4 * byte_2EC520[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_FE954()
{
  return 0x636F4C7473726966;
}

unint64_t sub_FE978()
{
  return 0xD000000000000010;
}

uint64_t sub_FE994()
{
  return 0x6574756C6F736261;
}

uint64_t sub_FE9B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_FF17C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FE9DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FEBE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FEA04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FEBE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ChapterPaginationEntity.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return v0;
}

uint64_t ChapterPaginationEntity.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t ChapterPaginationEntity.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;

  v3 = v1;
  v5 = sub_319AC(&qword_3BC200);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_472D0(a1, v9);
  v11 = sub_FEBE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ChapterPaginationEntity.CodingKeys, &type metadata for ChapterPaginationEntity.CodingKeys, v11, v9, v10);
  v12 = *(_QWORD *)(v3 + 16);
  v13 = *(_QWORD *)(v3 + 24);
  LOBYTE(v20) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v20, v5);
  if (!v2)
  {
    v20 = *(_OWORD *)(v3 + 32);
    v19 = 1;
    v14 = sub_FEC2C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for PageLocation, v14);
    v15 = *(_QWORD *)(v3 + 48);
    LOBYTE(v20) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v20, v5);
    v16 = *(_QWORD *)(v3 + 56);
    LOBYTE(v20) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_FEBE8()
{
  unint64_t result;

  result = qword_3BC208;
  if (!qword_3BC208)
  {
    result = swift_getWitnessTable(&unk_2EC6CC, &type metadata for ChapterPaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BC208);
  }
  return result;
}

unint64_t sub_FEC2C()
{
  unint64_t result;

  result = qword_3BC210;
  if (!qword_3BC210)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageLocation, &type metadata for PageLocation);
    atomic_store(result, (unint64_t *)&qword_3BC210);
  }
  return result;
}

uint64_t ChapterPaginationEntity.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 64);
  ChapterPaginationEntity.init(from:)(a1);
  return v3;
}

uint64_t *ChapterPaginationEntity.init(from:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char v21;

  v3 = v1;
  v5 = *v1;
  v19 = sub_319AC(&qword_3BC218);
  v6 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_472D0(a1, v9);
  v11 = sub_FEBE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ChapterPaginationEntity.CodingKeys, &type metadata for ChapterPaginationEntity.CodingKeys, v11, v9, v10);
  if (v2)
  {
    swift_deallocPartialClassInstance(v1, v5, 64, 7);
  }
  else
  {
    v12 = v6;
    LOBYTE(v20) = 0;
    v13 = v19;
    v1[2] = KeyedDecodingContainer.decode(_:forKey:)(&v20, v19);
    v1[3] = v14;
    v21 = 1;
    v15 = sub_FEEB4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v20, &type metadata for PageLocation, &v21, v13, &type metadata for PageLocation, v15);
    *((_OWORD *)v1 + 2) = v20;
    LOBYTE(v20) = 2;
    v1[6] = KeyedDecodingContainer.decode(_:forKey:)(&v20, v13);
    LOBYTE(v20) = 3;
    v17 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v13);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v13);
    v3[7] = v17;
  }
  sub_34488(a1);
  return v3;
}

unint64_t sub_FEEB4()
{
  unint64_t result;

  result = qword_3BC220;
  if (!qword_3BC220)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageLocation, &type metadata for PageLocation);
    atomic_store(result, (unint64_t *)&qword_3BC220);
  }
  return result;
}

uint64_t *sub_FEEF8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t *result;

  v6 = swift_allocObject(v2, 64);
  result = ChapterPaginationEntity.init(from:)(a1);
  if (!v3)
    *a2 = v6;
  return result;
}

uint64_t sub_FEF4C(_QWORD *a1)
{
  return ChapterPaginationEntity.encode(to:)(a1);
}

uint64_t sub_FEF6C()
{
  return ChapterPaginationEntity.description.getter();
}

uint64_t type metadata accessor for ChapterPaginationEntity()
{
  return objc_opt_self(_TtC8BookEPUB23ChapterPaginationEntity);
}

uint64_t method lookup function for ChapterPaginationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ChapterPaginationEntity);
}

uint64_t dispatch thunk of ChapterPaginationEntity.__allocating_init(name:firstLocation:indentationLevel:absoluteOrder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ChapterPaginationEntity.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t storeEnumTagSinglePayload for ChapterPaginationEntity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_FF024 + 4 * byte_2EC529[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_FF058 + 4 * byte_2EC524[v4]))();
}

uint64_t sub_FF058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FF060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFF068);
  return result;
}

uint64_t sub_FF074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFF07CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_FF080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_FF088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ChapterPaginationEntity.CodingKeys()
{
  return &type metadata for ChapterPaginationEntity.CodingKeys;
}

unint64_t sub_FF0A8()
{
  unint64_t result;

  result = qword_3BC2E8;
  if (!qword_3BC2E8)
  {
    result = swift_getWitnessTable(&unk_2EC6A4, &type metadata for ChapterPaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BC2E8);
  }
  return result;
}

unint64_t sub_FF0F0()
{
  unint64_t result;

  result = qword_3BC2F0;
  if (!qword_3BC2F0)
  {
    result = swift_getWitnessTable("-M\t", &type metadata for ChapterPaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BC2F0);
  }
  return result;
}

unint64_t sub_FF138()
{
  unint64_t result;

  result = qword_3BC2F8;
  if (!qword_3BC2F8)
  {
    result = swift_getWitnessTable(&unk_2EC63C, &type metadata for ChapterPaginationEntity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_3BC2F8);
  }
  return result;
}

uint64_t sub_FF17C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x636F4C7473726966 && a2 == 0xED00006E6F697461)
  {
    v7 = 0xED00006E6F697461;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636F4C7473726966, 0xED00006E6F697461, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000000002CB690;
    if (a2 == 0x80000000002CB690)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002CB690, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6574756C6F736261 && a2 == 0xED0000726564724FLL)
  {
    swift_bridgeObjectRelease(0xED0000726564724FLL);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574756C6F736261, 0xED0000726564724FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t BookThemeEntity.ProgressStyle.tint.getter()
{
  _QWORD *v0;

  return swift_retain(*v0);
}

double PaginationLayoutConfiguration.gutterWidth.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

double sub_FF374()
{
  double result;

  qword_3BC300 = static Color.white.getter();
  result = 1.0;
  unk_3BC308 = xmmword_2EC720;
  return result;
}

uint64_t static BookThemeEntity.defaultProgressStyle.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_3B5770 != -1)
    swift_once(&qword_3B5770, sub_FF374);
  *(_QWORD *)a1 = qword_3BC300;
  *(_OWORD *)(a1 + 8) = unk_3BC308;
  return swift_retain();
}

double BookThemeEntity.downloadProgressStyle.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_FF410(a1, (__n128)xmmword_2EC720).n128_u64[0];
  return result;
}

double BookThemeEntity.downloadSpinnerStyle.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  __asm { FMOV            V0.2D, #0.5 }
  *(_QWORD *)&result = sub_FF410(a1, _Q0).n128_u64[0];
  return result;
}

__n128 sub_FF410@<Q0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  __n128 result;
  uint64_t v6;
  uint64_t v7;

  if ((BookThemeEntity.hasDarkBackground.getter() & 1) != 0)
  {
    BookThemeEntity.buttonStyle.getter();
    v2 = v6;
  }
  else
  {
    BookThemeEntity.buttonStyle.getter();
    v2 = v7;
  }
  swift_release();
  *(_QWORD *)a1 = v2;
  result = a2;
  *(__n128 *)(a1 + 8) = a2;
  return result;
}

uint64_t _s13ProgressStyleVwCP(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  swift_retain(v3);
  return a1;
}

uint64_t *_s13ProgressStyleVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s13ProgressStyleVwta(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  return a1;
}

ValueMetadata *type metadata accessor for BookThemeEntity.ProgressStyle()
{
  return &type metadata for BookThemeEntity.ProgressStyle;
}

uint64_t sub_FF5F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  Class isa;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  NSString v17;
  double v18;
  NSString v19;
  id v20;
  uint64_t v21;

  v6 = BookEPUBBundle();
  isa = (Class)objc_msgSend(v6, "localizations");
  if (!isa)
  {
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(0, &type metadata for String);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v8);
  }
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = sub_319AC(&qword_3BBEB0);
  v11 = swift_allocObject(v10, 48);
  *(_OWORD *)(v11 + 16) = xmmword_2E5F80;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  swift_bridgeObjectRetain(a4);
  v12 = Array._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v9, "preferredLocalizationsFromArray:forPreferences:", isa, v12, swift_bridgeObjectRelease(v11).n128_f64[0]);

  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String);
  if (*(_QWORD *)(v14 + 16))
  {
    v15 = *(_QWORD *)(v14 + 40);
    swift_bridgeObjectRetain(v15);
  }
  else
  {
    v15 = 0;
  }
  swift_bridgeObjectRelease(v14);
  v16 = String._bridgeToObjectiveC()();
  v17 = String._bridgeToObjectiveC()();
  if (v15)
  {
    v19 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v18 = swift_bridgeObjectRelease(v15).n128_u64[0];
  }
  else
  {
    v19 = 0;
  }
  v20 = objc_msgSend(v6, "localizedStringForKey:value:table:localization:", v16, v17, 0, v19, v18);

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  return v21;
}

id BookContent.Snapshot.image.getter()
{
  id *v0;

  return *v0;
}

__n128 BookContent.Snapshot.location.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

uint64_t BookContent.Snapshot.zoomRects.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

ValueMetadata *type metadata accessor for BookContent()
{
  return &type metadata for BookContent;
}

uint64_t destroy for BookContent.Snapshot(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for BookContent.Snapshot(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for BookContent.Snapshot(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for BookContent.Snapshot(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for BookContent.Snapshot()
{
  return &type metadata for BookContent.Snapshot;
}

uint64_t initializeBufferWithCopyOfBuffer for BookContent.SnapshotError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_FF99C(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_FF99C(uint64_t result, char a2)
{
  if (!a2)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t destroy for BookContent.SnapshotError(uint64_t a1)
{
  return sub_FF9BC(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_FF9BC(uint64_t result, char a2)
{
  if (!a2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t assignWithCopy for BookContent.SnapshotError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_FF99C(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_FF9BC(v5, v6);
  return a1;
}

uint64_t assignWithTake for BookContent.SnapshotError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_FF9BC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookContent.SnapshotError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BookContent.SnapshotError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_FFAE4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 3u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_FFAFC(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(_QWORD *)result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BookContent.SnapshotError()
{
  return &type metadata for BookContent.SnapshotError;
}

uint64_t SearchRecentsPersistenceMock.publisher.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB28SearchRecentsPersistenceMock_publisher));
}

char *sub_FFB38()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v9[24];
  objc_super v10;

  v1 = OBJC_IVAR____TtC8BookEPUB28SearchRecentsPersistenceMock_publisher;
  v2 = sub_319AC(&qword_3B8300);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48));
  v3 = v0;
  *(_QWORD *)&v0[v1] = PassthroughSubject.init()(v3);
  v4 = OBJC_IVAR____TtC8BookEPUB28SearchRecentsPersistenceMock_stringStack;
  v5 = sub_319AC(&qword_3BC350);
  v6 = swift_allocObject(v5, 32);
  *(_QWORD *)(v6 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v6 + 24) = 3;
  *(_QWORD *)&v3[v4] = v6;

  v10.receiver = v3;
  v10.super_class = (Class)type metadata accessor for SearchRecentsPersistenceMock();
  v7 = (char *)objc_msgSendSuper2(&v10, "init");
  swift_beginAccess(*(_QWORD *)&v7[OBJC_IVAR____TtC8BookEPUB28SearchRecentsPersistenceMock_stringStack] + 16, v9, 1, 0);
  return v7;
}

uint64_t sub_FFC2C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB28SearchRecentsPersistenceMock_stringStack);
  swift_beginAccess(v1 + 16, v3, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v1 + 16));
}

void sub_FFC74(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];

  v3 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v3 = a1 & 0xFFFFFFFFFFFFLL;
  if (v3)
  {
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB28SearchRecentsPersistenceMock_stringStack);
    swift_beginAccess(v6 + 16, v20, 0, 0);
    v7 = *(_QWORD **)(v6 + 16);
    v8 = v7[2];
    if (!v8)
      goto LABEL_19;
    v9 = v7[4];
    v10 = v7[5];
    v11 = v9 == a1 && v10 == a2;
    if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, a1, a2, 0) & 1) != 0)
      return;
    if (v8 == 1)
    {
LABEL_19:
      sub_FFE98(a1, a2);
      v18 = *(_QWORD *)(v6 + 16);
      v19 = v18;
      swift_bridgeObjectRetain(v18);
      PassthroughSubject.send(_:)(&v19);
      swift_bridgeObjectRelease(v18);
      return;
    }
    v12 = v7 + 7;
    v13 = 1;
    while (1)
    {
      v14 = v13 + 1;
      if (__OFADD__(v13, 1))
        break;
      v15 = *(v12 - 1);
      v16 = *v12;
      v17 = v15 == a1 && v16 == a2;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a1, a2, 0) & 1) != 0)
        return;
      v12 += 2;
      ++v13;
      if (v14 == v8)
        goto LABEL_19;
    }
    __break(1u);
  }
}

uint64_t sub_FFDA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BYTE v6[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB28SearchRecentsPersistenceMock_stringStack);
  swift_beginAccess(v1 + 16, v6, 1, 0);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v2);
  v3 = *(_QWORD *)(v1 + 16);
  v5 = v3;
  swift_bridgeObjectRetain(v3);
  PassthroughSubject.send(_:)(&v5);
  return swift_bridgeObjectRelease(v3);
}

id SearchRecentsPersistenceMock.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchRecentsPersistenceMock();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_FFE98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v3 = v2;
  v6 = (_QWORD *)(v2 + 16);
  swift_beginAccess(v6, v12, 33, 0);
  swift_bridgeObjectRetain(a2);
  sub_862E4(0, 0, a1, a2);
  swift_endAccess(v12);
  v7 = *(_QWORD *)(v3 + 24);
  if (v7 >= 1 && (unint64_t)v7 < *(_QWORD *)(*v6 + 16))
  {
    swift_beginAccess(v6, v12, 33, 0);
    v8 = (_QWORD *)*v6;
    if (*(_QWORD *)(*v6 + 16))
    {
      if ((swift_isUniquelyReferenced_nonNull_native(*v6) & 1) != 0)
      {
        v9 = v8[2];
        if (v9)
        {
LABEL_6:
          v10 = v9 - 1;
          v11 = v8[2 * v10 + 5];
          v8[2] = v10;
          *v6 = v8;
          swift_endAccess(v12);
          swift_bridgeObjectRelease(v11);
          return;
        }
LABEL_10:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    v8 = sub_E3A10(v8);
    v9 = v8[2];
    if (v9)
      goto LABEL_6;
    goto LABEL_10;
  }
}

uint64_t type metadata accessor for SearchRecentsPersistenceMock()
{
  return objc_opt_self(_TtC8BookEPUB28SearchRecentsPersistenceMock);
}

uint64_t method lookup function for SearchRecentsPersistenceMock(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SearchRecentsPersistenceMock);
}

uint64_t dispatch thunk of SearchRecentsPersistenceMock.recentSearchTerms()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_20.nsects + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of SearchRecentsPersistenceMock.add(searchTerm:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of SearchRecentsPersistenceMock.clearSearchTerms()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[(swift_isaMask & *v0) - 8])();
}

double radiansToDegrees(radians:)(double a1)
{
  return a1 * 180.0 / 3.14159265;
}

uint64_t addressAsString(of:)(uint64_t a1)
{
  uint64_t v2;

  if (!a1)
    return 0x3E6C696E3CLL;
  v2 = a1;
  return String.init<A>(describing:)(&v2, &type metadata for UnsafeMutableRawPointer);
}

id sub_1000A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ThemeOptionsInteractor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ThemeOptionsInteractor()
{
  return objc_opt_self(_TtC8BookEPUB22ThemeOptionsInteractor);
}

uint64_t sub_100108@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for Document();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t ReadingSettingsModule.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 88));
}

uint64_t sub_100164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  _QWORD *v8;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 80) - 8) + 32))(v7 + *(_QWORD *)(*(_QWORD *)v7 + 88), a1);
  v8 = (_QWORD *)(v7 + *(_QWORD *)(*(_QWORD *)v7 + 96));
  *v8 = a2;
  v8[1] = a3;
  return v7;
}

Swift::Void __swiftcall ReadingSettingsModule.fetchThemes()()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96)))();
}

uint64_t ReadingSettingsModule.deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_release(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96) + 8));
  return v0;
}

uint64_t ReadingSettingsModule.__deallocating_deinit()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_release(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 96) + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10028C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Identifiable<>.id.getter();
  *a1 = result;
  return result;
}

uint64_t ReadingSettingsModuleFactory.ViewConfig.eventHandler.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_49F1C(v1, a1);
}

uint64_t ReadingSettingsModuleFactory.ViewConfig.eventHandler.setter(__int128 *a1)
{
  _QWORD *v1;

  sub_34488(v1);
  return sub_3F1CC(a1, (uint64_t)v1);
}

uint64_t ReadingSettingsModuleFactory.ViewConfig.viewModel.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 40));
}

uint64_t ReadingSettingsModuleFactory.ViewConfig.viewModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v1 + 40));
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t ReadingSettingsModuleFactory.ViewConfig.usePopoverHeader.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t ReadingSettingsModuleFactory.__allocating_init(paginationService:locationProvider:settingsManager:themeDatabaseManager:contentSizeCategoryManager:layoutModeManager:styleManager:themeAppearanceManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v20;

  v20 = swift_allocObject(v11, 168);
  *(_QWORD *)(v20 + 152) = 0;
  *(_QWORD *)(v20 + 160) = 0;
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_QWORD *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  *(_QWORD *)(v20 + 48) = a5;
  *(_QWORD *)(v20 + 56) = a6;
  sub_3F1CC(a7, v20 + 64);
  *(_QWORD *)(v20 + 104) = a8;
  *(_OWORD *)(v20 + 112) = a9;
  *(_OWORD *)(v20 + 128) = a10;
  *(_QWORD *)(v20 + 144) = a11;
  return v20;
}

uint64_t ReadingSettingsModuleFactory.init(paginationService:locationProvider:settingsManager:themeDatabaseManager:contentSizeCategoryManager:layoutModeManager:styleManager:themeAppearanceManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 160) = 0;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  *(_QWORD *)(v11 + 48) = a5;
  *(_QWORD *)(v11 + 56) = a6;
  sub_3F1CC(a7, v11 + 64);
  *(_QWORD *)(v11 + 104) = a8;
  *(_OWORD *)(v11 + 112) = a9;
  *(_OWORD *)(v11 + 128) = a10;
  *(_QWORD *)(v11 + 144) = a11;
  return v11;
}

uint64_t ReadingSettingsModuleFactory.finishInit(buildView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 + 152);
  v4 = *(_QWORD *)(v2 + 160);
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  sub_7241C(v5, v4);
  return swift_retain();
}

uint64_t ReadingSettingsModuleFactory.create<A>(router:usePopoverHeader:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *v23;
  char *v24;
  char *v25;
  char **v26;
  char *v27;
  id v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  double (*v35)();
  uint64_t result;
  void (*v37)(_QWORD *);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double (**v48)();
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  _UNKNOWN **v57;
  objc_super v58;
  _QWORD v59[6];
  char v60;

  v5 = v4;
  v52 = a1;
  v53 = a4;
  v54 = a2;
  v49 = *(_QWORD *)(*v4 + 80);
  __chkstk_darwin(a1);
  v50 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v4[6];
  v7 = v4[7];
  ObjectType = swift_getObjectType(v8);
  type metadata accessor for ReadingSettingsDataManager(0);
  v10 = v4[2];
  v11 = v4[3];
  v13 = v4[4];
  v12 = v4[5];
  sub_49F1C((uint64_t)(v4 + 8), (uint64_t)v59);
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRetain(v10);
  swift_unknownObjectRetain(v13);
  v14 = sub_1BF9B0(v10, v11, v13, v12, v8, v59, ObjectType, v7);
  LOBYTE(v12) = BEIsInternalInstall();
  v16 = v4[13];
  v15 = v4[14];
  v51 = v15;
  v17 = swift_getObjectType(v16);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 8) + 8))(v17);
  v19 = *(_QWORD *)(v7 + 8);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 16))(v59, ObjectType, v19);
  LOBYTE(v13) = v59[0];
  v20 = swift_bridgeObjectRelease(v59[1]);
  LOBYTE(v19) = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v19 + 48))(ObjectType, v19, v20);
  v21 = type metadata accessor for ReadingSettingsViewModel(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48));
  v22 = ReadingSettingsViewModel.init(isInternalInstall:contentSizeCategory:currentThemeType:pageNavigationStyle:)(v12, v18, v13, v19);
  v23 = (objc_class *)type metadata accessor for ReadingSettingsInteractor();
  v24 = (char *)objc_allocWithZone(v23);
  v25 = &v24[OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_delegate];
  *((_QWORD *)v25 + 1) = 0;
  swift_unknownObjectWeakInit(v25, 0);
  v26 = (char **)&v24[OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_dataManager];
  *v26 = v14;
  v26[1] = (char *)&off_387AA8;
  v58.receiver = v24;
  v58.super_class = v23;
  swift_retain();
  v27 = v14;
  v28 = objc_msgSendSuper2(&v58, "init");
  v29 = &v27[OBJC_IVAR____TtC8BookEPUB26ReadingSettingsDataManager_delegate];
  *((_QWORD *)v29 + 1) = &off_37FD28;
  swift_unknownObjectWeakAssign(v29, v28);
  v31 = v5[17];
  v30 = v5[18];
  v32 = type metadata accessor for ReadingSettingsPresenter();
  v33 = (_QWORD *)swift_allocObject(v32, 128);
  swift_unknownObjectRetain(v16);
  swift_retain();
  swift_unknownObjectRetain(v31);
  swift_unknownObjectRetain(v52);
  v35 = (double (*)())sub_100974(v34, v53, v22, v28, v16, v51, v30, v31, v33);
  v56 = v32;
  v57 = &off_380890;
  *(_QWORD *)&v55 = v35;
  result = sub_3F1CC(&v55, (uint64_t)v59);
  v59[5] = v22;
  v60 = v54;
  v37 = (void (*)(_QWORD *))v5[19];
  if (v37)
  {
    v38 = v5[20];
    swift_retain();
    swift_retain();
    sub_899C8((uint64_t)v37, v38);
    v39 = v50;
    v37(v59);
    sub_7241C((uint64_t)v37, v38);
    swift_release();

    v40 = v49;
    v43 = type metadata accessor for ReadingSettingsModuleFactory.ViewConfig(0, v49, v41, v42);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v59, v43);
    v46 = type metadata accessor for ReadingSettingsModule(0, v40, v44, v45);
    v47 = swift_allocObject(v46, *(unsigned int *)(v46 + 48));
    (*(void (**)(uint64_t, char *))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v47 + 80) - 8) + 32))(v47 + *(_QWORD *)(*(_QWORD *)v47 + 88), v39);
    v48 = (double (**)())(v47 + *(_QWORD *)(*(_QWORD *)v47 + 96));
    *v48 = sub_1017A8;
    v48[1] = v35;
    return v47;
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_10081C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  double result;
  uint64_t v10;

  v2 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v2);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  type metadata accessor for MainActor(0);
  v6 = swift_retain();
  v7 = static MainActor.shared.getter(v6);
  v8 = (_QWORD *)swift_allocObject(&unk_381848, 40);
  v8[2] = v7;
  v8[3] = &protocol witness table for MainActor;
  v8[4] = a1;
  sub_67B40((uint64_t)v4, (uint64_t)&unk_3BBB10, (uint64_t)v8);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

_QWORD *ReadingSettingsModuleFactory.deinit()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[6]);
  sub_34488(v0 + 8);
  swift_unknownObjectRelease(v0[13]);
  swift_unknownObjectRelease(v0[15]);
  swift_unknownObjectRelease(v0[17]);
  swift_release();
  sub_7241C(v0[19], v0[20]);
  return v0;
}

uint64_t ReadingSettingsModuleFactory.__deallocating_deinit()
{
  uint64_t v0;

  ReadingSettingsModuleFactory.deinit();
  return swift_deallocClassInstance(v0, 168, 7);
}

_QWORD *sub_100974(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t ObjectType;
  unint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  char *v68;
  unint64_t v69;
  __n128 v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __n128 v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  _QWORD *v86;
  char *v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t KeyPath;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void (**v126)(char *, uint64_t, __n128);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, uint64_t, uint64_t, uint64_t);
  char v131[16];
  _QWORD *v132;
  char v133;
  _QWORD *v134;
  id v135;

  v123 = a8;
  v129 = a7;
  v106 = a6;
  v127 = a5;
  v113 = a1;
  v14 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v14);
  v114 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v118 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111);
  v109 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_319AC(&qword_3BC510);
  v116 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128);
  v110 = (char *)&v105 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_319AC(&qword_3BC518);
  v126 = *(void (***)(char *, uint64_t, __n128))(v119 - 8);
  __chkstk_darwin(v119);
  v117 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v19);
  v120 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_319AC((uint64_t *)&unk_3BD140);
  v108 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v105 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = (void (*)(char *, uint64_t, uint64_t, uint64_t))type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v125 = *((_QWORD *)v130 - 1);
  __chkstk_darwin(v130);
  v115 = (char *)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  a9[3] = 0;
  v29 = swift_unknownObjectWeakInit(a9 + 2, 0);
  a9[11] = 0;
  a9[14] = _swiftEmptyArrayStorage;
  v121 = a9 + 14;
  a9[15] = 0;
  a9[3] = a2;
  swift_unknownObjectWeakAssign(v29, a1);
  v112 = a3;
  a9[4] = a3;
  a9[5] = a4;
  v30 = v127;
  a9[6] = &off_37FCC0;
  a9[7] = v30;
  a9[8] = a6;
  v31 = v123;
  a9[9] = v129;
  a9[10] = v31;
  v32 = type metadata accessor for NWPathMonitor(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48));
  swift_retain();
  v122 = a4;
  swift_unknownObjectRetain(v30);
  swift_retain();
  v33 = swift_unknownObjectRetain(v31);
  a9[12] = NWPathMonitor.init()(v33);
  v34 = sub_5B5E4();
  static DispatchQoS.unspecified.getter(v35);
  v134 = _swiftEmptyArrayStorage;
  v36 = sub_34284((unint64_t *)&qword_3B5960, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v37 = sub_319AC((uint64_t *)&unk_3BC520);
  v38 = sub_3DCC0((unint64_t *)&qword_3B5970, (uint64_t *)&unk_3BC520, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v134, v37, v38, v23, v36);
  v39 = v115;
  (*(void (**)(char *, _QWORD, void (*)(char *, uint64_t, uint64_t, uint64_t)))(v125 + 104))(v115, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v130);
  a9[13] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002DLL, 0x80000000002CB8C0, v28, v25, v39, 0);
  v40 = swift_allocObject(&unk_381870, 24);
  swift_weakInit(v40 + 16, a9);
  swift_retain();
  swift_retain();
  sub_899C8((uint64_t)sub_101C34, v40);
  NWPathMonitor.pathUpdateHandler.setter(sub_101C34, v40);
  swift_release();
  swift_release_n(v40);
  v134 = (_QWORD *)ThemeAppearanceManager.themeVariantPublisher.getter();
  v41 = v34;
  v124 = v34;
  v135 = (id)static OS_dispatch_queue.main.getter(v42);
  v43 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v130 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
  v44 = (uint64_t)v120;
  v115 = (char *)v43;
  v130(v120, 1, 1, v43);
  v45 = sub_319AC((uint64_t *)&unk_3BC530);
  v46 = sub_3DCC0((unint64_t *)&unk_3BD150, (uint64_t *)&unk_3BC530, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v125 = sub_34284((unint64_t *)&qword_3B8E80, (uint64_t (*)(uint64_t))sub_5B5E4, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v47 = v105;
  Publisher.receive<A>(on:options:)(&v135, v44, v45, v41, v46, v125);
  sub_4A000(v44);

  swift_release();
  v48 = swift_allocObject(&unk_381870, 24);
  swift_weakInit(v48 + 16, a9);
  v49 = sub_3DCC0((unint64_t *)&unk_3BD160, (uint64_t *)&unk_3BD140, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v50 = v107;
  Publisher<>.sink(receiveValue:)(sub_101C3C, v48, v107, v49);
  v51 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v47, v50, v51);
  v52 = v121;
  swift_beginAccess(v121, &v134, 33, 0);
  v53 = sub_319AC(&qword_3B8390);
  v54 = sub_3DCC0((unint64_t *)&unk_3BD170, &qword_3B8390, (uint64_t)&protocol conformance descriptor for [A]);
  v108 = v53;
  v107 = v54;
  AnyCancellable.store<A>(in:)(v52, v53, v54);
  swift_endAccess(&v134);
  swift_release();
  v55 = &v122[OBJC_IVAR____TtC8BookEPUB25ReadingSettingsInteractor_delegate];
  *((_QWORD *)v55 + 1) = &off_380868;
  swift_unknownObjectWeakAssign(v55, a9);
  ObjectType = swift_getObjectType(v127);
  v134 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v106 + 8) + 16))(ObjectType);
  v57 = v124;
  v135 = (id)static OS_dispatch_queue.main.getter(v58);
  v130((char *)v44, 1, 1, v43);
  v59 = sub_319AC((uint64_t *)&unk_3BC540);
  v60 = sub_3DCC0((unint64_t *)&unk_3C00D0, (uint64_t *)&unk_3BC540, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v61 = v117;
  v62 = v57;
  v63 = v125;
  Publisher.receive<A>(on:options:)(&v135, v44, v59, v62, v60, v125);
  sub_4A000(v44);

  swift_release();
  v64 = swift_allocObject(&unk_381870, 24);
  swift_weakInit(v64 + 16, a9);
  v65 = sub_3DCC0((unint64_t *)&unk_3BC550, &qword_3BC518, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v66 = v119;
  Publisher<>.sink(receiveValue:)(sub_101C44, v64, v119, v65);
  v67 = swift_release();
  v126[1](v61, v66, v67);
  swift_beginAccess(v52, &v134, 33, 0);
  AnyCancellable.store<A>(in:)(v52, v53, v54);
  swift_endAccess(&v134);
  swift_release();
  v126 = (void (**)(char *, uint64_t, __n128))objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v68 = v109;
  NSNotificationCenter.publisher(for:object:)(BEFontStateChangedNotification[0], 0);
  v69 = v124;
  v134 = (_QWORD *)static OS_dispatch_queue.main.getter(v70);
  v71 = v115;
  v130((char *)v44, 1, 1, (uint64_t)v115);
  v119 = sub_34284((unint64_t *)&qword_3B6B28, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v72 = v110;
  v73 = v111;
  Publisher.receive<A>(on:options:)(&v134, v44, v111, v69, v119, v63);
  sub_4A000(v44);

  v118 = *(_QWORD *)(v118 + 8);
  ((void (*)(char *, uint64_t))v118)(v68, v73);
  v74 = swift_allocObject(&unk_381870, 24);
  swift_weakInit(v74 + 16, a9);
  v117 = (char *)sub_3DCC0((unint64_t *)&unk_3BC560, &qword_3BC510, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v75 = v128;
  Publisher<>.sink(receiveValue:)(sub_101C4C, v74, v128, v117);
  v76 = swift_release();
  v116 = *(_QWORD *)(v116 + 8);
  ((void (*)(char *, uint64_t, __n128))v116)(v72, v75, v76);
  swift_beginAccess(v52, &v134, 33, 0);
  v77 = v52;
  v78 = v108;
  v79 = v107;
  AnyCancellable.store<A>(in:)(v77, v108, v107);
  swift_endAccess(&v134);
  swift_release();
  NSNotificationCenter.publisher(for:object:)(BEFontDownloadFailedNotification[0], 0);
  v80 = v124;
  v134 = (_QWORD *)static OS_dispatch_queue.main.getter(v81);
  v130((char *)v44, 1, 1, (uint64_t)v71);
  Publisher.receive<A>(on:options:)(&v134, v44, v73, v80, v119, v125);
  sub_4A000(v44);

  v82 = v68;
  ((void (*)(char *, uint64_t))v118)(v68, v73);
  v83 = swift_allocObject(&unk_381870, 24);
  swift_weakInit(v83 + 16, a9);
  v84 = v128;
  Publisher<>.sink(receiveValue:)(sub_101C54, v83, v128, v117);
  v85 = swift_release();
  ((void (*)(char *, uint64_t, __n128))v116)(v72, v84, v85);
  v86 = v121;
  swift_beginAccess(v121, &v134, 33, 0);
  AnyCancellable.store<A>(in:)(v86, v78, v79);
  swift_endAccess(&v134);
  swift_release();
  v87 = v82;
  NSNotificationCenter.publisher(for:object:)(BEFontDownloadProgressChangedNotification[0], 0);
  v134 = (_QWORD *)static OS_dispatch_queue.main.getter(v88);
  v89 = (uint64_t)v120;
  v130(v120, 1, 1, (uint64_t)v115);
  Publisher.receive<A>(on:options:)(&v134, v89, v73, v80, v119, v125);
  sub_4A000(v89);

  ((void (*)(char *, uint64_t))v118)(v87, v73);
  v90 = swift_allocObject(&unk_381870, 24);
  swift_weakInit(v90 + 16, a9);
  v91 = v128;
  Publisher<>.sink(receiveValue:)(sub_101C4C, v90, v128, v117);
  v92 = swift_release();
  ((void (*)(char *, uint64_t, __n128))v116)(v72, v91, v92);
  swift_beginAccess(v86, &v134, 33, 0);
  AnyCancellable.store<A>(in:)(v86, v78, v79);
  swift_endAccess(&v134);
  swift_release();
  v93 = a9[8];
  v94 = swift_getObjectType(a9[7]);
  v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v93 + 8) + 8))(v94);
  sub_E1210((void *)v95);

  v96 = (_QWORD *)a9[4];
  LOBYTE(v95) = sub_1BFD74();
  KeyPath = swift_getKeyPath(&unk_2ECA80);
  v132 = v96;
  v133 = v95 & 1;
  v134 = v96;
  v98 = sub_34284(&qword_3BBB00, type metadata accessor for ReadingSettingsViewModel, (uint64_t)&protocol conformance descriptor for ReadingSettingsViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v134, KeyPath, sub_E4570, v131, (char *)&type metadata for () + 8, v98);
  swift_release();
  v99 = type metadata accessor for TaskPriority(0);
  v100 = (uint64_t)v114;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v114, 1, 1, v99);
  type metadata accessor for MainActor(0);
  v101 = swift_retain();
  v102 = static MainActor.shared.getter(v101);
  v103 = (_QWORD *)swift_allocObject(&unk_381898, 40);
  v103[2] = v102;
  v103[3] = &protocol witness table for MainActor;
  v103[4] = a9;
  sub_67B40(v100, (uint64_t)&unk_3BC570, (uint64_t)v103);

  swift_unknownObjectRelease(v113);
  swift_release();

  swift_unknownObjectRelease(v127);
  swift_release();
  swift_unknownObjectRelease(v123);
  swift_release();
  return a9;
}

uint64_t type metadata accessor for ReadingSettingsModuleFactory.ViewConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadingSettingsModuleFactory.ViewConfig);
}

uint64_t type metadata accessor for ReadingSettingsModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadingSettingsModule);
}

double sub_1017A8()
{
  uint64_t v0;

  return sub_10081C(v0);
}

uint64_t sub_1017B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    result = swift_initClassMetadata2(a1, 0, 2, v4, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for ReadingSettingsModule(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ReadingSettingsModule);
}

uint64_t sub_101838(uint64_t a1)
{
  _QWORD v2[9];

  v2[0] = &unk_2EC9E0;
  v2[1] = &unk_2EC9E0;
  v2[2] = &unk_2EC9E0;
  v2[3] = &unk_2EC9F8;
  v2[4] = &unk_2EC9E0;
  v2[5] = &unk_2EC9E0;
  v2[6] = &unk_2ECA10;
  v2[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[8] = &unk_2ECA28;
  return swift_initClassMetadata2(a1, 0, 9, v2, a1 + 88);
}

uint64_t type metadata accessor for ReadingSettingsModuleFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ReadingSettingsModuleFactory);
}

uint64_t method lookup function for ReadingSettingsModuleFactory(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ReadingSettingsModuleFactory);
}

uint64_t dispatch thunk of ReadingSettingsModuleFactory.__allocating_init(paginationService:locationProvider:settingsManager:themeDatabaseManager:contentSizeCategoryManager:layoutModeManager:styleManager:themeAppearanceManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

double sub_1018E4(_QWORD *a1)
{
  double result;

  sub_34488(a1);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_101908(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_retain(v5);
  return a1;
}

uint64_t sub_101958(uint64_t a1, uint64_t a2)
{
  sub_1019A8((_QWORD *)a1, (_QWORD *)a2);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

_QWORD *sub_1019A8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 sub_101B10(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_101B2C(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  sub_34488((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_release();
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t sub_101B74(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_101BBC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_101C10()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_101C34(uint64_t a1)
{
  uint64_t v1;

  return sub_DED64(a1, v1);
}

double sub_101C3C(uint64_t a1)
{
  uint64_t v1;

  return sub_DF124(a1, v1);
}

double sub_101C44(void **a1)
{
  uint64_t v1;

  return sub_DF2CC(a1, v1);
}

uint64_t sub_101C4C(uint64_t a1)
{
  uint64_t v1;

  return sub_DF328(a1, v1);
}

double sub_101C54(uint64_t a1)
{
  uint64_t v1;

  return sub_DF32C(a1, v1);
}

uint64_t sub_101C68()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_101C94()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3BC580);
  sub_555F0(v0, (uint64_t)qword_3BC580);
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v1 = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD000000000000026, 0x80000000002CBA30);
  return Logger.init(_:)(v1);
}

id sub_101D38()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___context;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___context);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___context);
  }
  else
  {
    v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_persistentContainer), "newBackgroundContext");
    objc_msgSend(v4, "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_101DC4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___foregroundContext;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___foregroundContext);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___foregroundContext);
  }
  else
  {
    v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_persistentContainer), "viewContext");
    objc_msgSend(v4, "setMergePolicy:", NSMergeByPropertyObjectTrumpMergePolicy);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_101E58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___encoder;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___encoder);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___encoder);
  }
  else
  {
    v4 = v0;
    v5 = type metadata accessor for PropertyListEncoder();
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v3 = PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter(200);
    v6 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v6);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_101EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___decoder;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___decoder);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___decoder);
  }
  else
  {
    v4 = v0;
    v5 = type metadata accessor for PropertyListDecoder();
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v3 = PropertyListDecoder.init()();
    v6 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v6);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_101F54(void **a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7, void *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  NSString v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, char *, uint64_t);
  id v36;
  NSURL *v37;
  void *v38;
  void *v39;
  id v40;
  void **v41;
  uint64_t v42;
  id v43;
  id v44;
  NSString v45;
  id v46;
  unint64_t v47;
  char *v48;
  unint64_t v49;
  Swift::String v50;
  id v51;
  id v52;
  uint64_t v53;
  void *v54;
  void *v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t v58;
  NSString v59;
  NSString v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  id v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  id v75;
  NSURL *v76;
  void *v77;
  void *v78;
  NSString *const *v79;
  uint64_t v80;
  uint64_t v81;
  NSString v82;
  NSURL *v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  void **v88;
  Class isa;
  void *v90;
  void *v91;
  id v92;
  char *v93;
  uint64_t v94;
  void *v95;
  id v96;
  id v97;
  uint64_t v98;
  void *v99;
  id v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t result;
  uint64_t v104;
  Swift::String v105;
  void *object;
  uint64_t v107;
  int v108;
  id v109;
  id v110;
  unint64_t v111;
  void **v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  void **aBlock;
  unint64_t v122;
  void *v123;
  void *v124;
  void *v125;
  uint64_t v126;

  v111 = a6;
  v9 = v8;
  v108 = a7;
  v107 = a5;
  v114 = a3;
  v115 = a4;
  v13 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v13);
  v15 = (uint64_t)&v107 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v119 = v16;
  v120 = v17;
  __chkstk_darwin(v16);
  v116 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v117 = (char *)&v107 - v20;
  __chkstk_darwin(v21);
  v23 = (char *)&v107 - v22;
  __chkstk_darwin(v24);
  v118 = (char *)&v107 - v25;
  v26 = v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_log;
  if (qword_3B5778 != -1)
    swift_once(&qword_3B5778, sub_101C94);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_555F0(v27, (uint64_t)qword_3BC580);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v26, v28, v27);
  v29 = (_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_modelName);
  *v29 = 0x6974616E69676150;
  v29[1] = 0xEF65686361436E6FLL;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___context) = 0;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___foregroundContext) = 0;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___encoder) = 0;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___decoder) = 0;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_contextSaveObservation) = 0;
  v112 = a1;
  v113 = a2;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  swift_bridgeObjectRetain(a2);
  v30 = String._bridgeToObjectiveC()();
  v31 = String._bridgeToObjectiveC()();
  v110 = a8;
  v32 = objc_msgSend(a8, "URLForResource:withExtension:", v30, v31, v107);

  if (!v32)
  {
LABEL_27:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v120 + 56))(v15, 1, 1, v119);
    goto LABEL_28;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v32);

  v34 = v119;
  v33 = v120;
  v35 = *(void (**)(uint64_t, char *, uint64_t))(v120 + 32);
  v35(v15, v23, v119);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v15, 0, 1, v34);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v15, 1, v34) == 1)
  {
LABEL_28:
    swift_bridgeObjectRelease(v111);
    sub_AA788(v15);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000021, 0x80000000002CBAA0, "BookEPUB/CoreDataPaginationCache.swift", 38, 2, 60, 0);
LABEL_30:
    __break(1u);
    return result;
  }
  v35((uint64_t)v118, (char *)v15, v34);
  v36 = objc_allocWithZone((Class)NSManagedObjectModel);
  URL._bridgeToObjectiveC()(v37);
  v39 = v38;
  v40 = objc_msgSend(v36, "initWithContentsOfURL:", v38);

  v41 = v112;
  if (!v40)
  {
    swift_bridgeObjectRelease(v111);
    aBlock = 0;
    v122 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease(v122);
    aBlock = (void **)0xD000000000000028;
    v122 = 0x80000000002CBAD0;
    v104 = sub_34284((unint64_t *)&qword_3B8C68, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v105._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v119, v104);
    object = v105._object;
    String.append(_:)(v105);
    swift_bridgeObjectRelease(object);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, aBlock, v122, "BookEPUB/CoreDataPaginationCache.swift", 38, 2, 64, 0);
    goto LABEL_30;
  }
  v42 = v29[1];
  v43 = objc_allocWithZone((Class)NSPersistentContainer);
  swift_bridgeObjectRetain(v42);
  v44 = v40;
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v43, "initWithName:managedObjectModel:", v45, v44, swift_bridgeObjectRelease(v42).n128_f64[0]);

  v47 = v111;
  v109 = v44;
  if (v111)
  {
    swift_bridgeObjectRelease(v113);
  }
  else
  {
    v49 = v113;
    aBlock = v41;
    v122 = v113;
    swift_bridgeObjectRetain(v113);
    v50._countAndFlagsBits = 45;
    v50._object = (void *)0xE100000000000000;
    String.append(_:)(v50);
    v51 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v52 = objc_msgSend(v51, "systemVersion");

    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    v56._countAndFlagsBits = v53;
    v56._object = v55;
    String.append(_:)(v56);
    swift_bridgeObjectRelease(v55);
    v57._countAndFlagsBits = 0x6574696C71732ELL;
    v57._object = (void *)0xE700000000000000;
    String.append(_:)(v57);
    swift_bridgeObjectRelease(v49);
    v47 = v122;
  }
  v48 = v117;
  v58 = v115;
  v59 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v58);
  v60 = String._bridgeToObjectiveC()();
  v61 = objc_msgSend(v59, "stringByAppendingPathComponent:", v60, swift_bridgeObjectRelease(v47).n128_f64[0]);

  v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
  v64 = v63;

  URL.init(fileURLWithPath:)(v62, v64);
  v65 = objc_msgSend(v46, "persistentStoreDescriptions", swift_bridgeObjectRelease(v64).n128_f64[0]);
  v66 = sub_34450(0, &qword_3BC7A8, NSPersistentStoreDescription_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, v66);

  v67 = v119;
  if (!((unint64_t)v15 >> 62))
  {
    v68 = v116;
    if (*(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8)))
      goto LABEL_11;
LABEL_20:
    v74 = swift_bridgeObjectRelease(v15);
    (*(void (**)(char *, char *, uint64_t, __n128))(v120 + 16))(v68, v48, v67, v74);
LABEL_21:
    v75 = objc_allocWithZone((Class)NSPersistentStoreDescription);
    URL._bridgeToObjectiveC()(v76);
    v78 = v77;
    v70 = objc_msgSend(v75, "initWithURL:", v77);

    goto LABEL_22;
  }
  if (v15 < 0)
    v72 = v15;
  else
    v72 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v73 = _CocoaArrayWrapper.endIndex.getter(v72);
  swift_bridgeObjectRelease(v15);
  v68 = v116;
  if (!v73)
    goto LABEL_20;
LABEL_11:
  if ((v15 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8)))
    {
      v69 = *(id *)(v15 + 32);
      goto LABEL_14;
    }
    __break(1u);
    goto LABEL_27;
  }
  v69 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v15);
LABEL_14:
  v70 = v69;
  v71 = swift_bridgeObjectRelease(v15);
  (*(void (**)(char *, char *, uint64_t, __n128))(v120 + 16))(v68, v48, v67, v71);
  if (!v70)
    goto LABEL_21;
LABEL_22:
  v120 = *(_QWORD *)(v120 + 8);
  ((void (*)(char *, uint64_t))v120)(v68, v67);
  v79 = &NSInMemoryStoreType;
  if ((v108 & 1) == 0)
    v79 = &NSSQLiteStoreType;
  static String._unconditionallyBridgeFromObjectiveC(_:)(*v79);
  v81 = v80;
  v82 = String._bridgeToObjectiveC()();
  objc_msgSend(v70, "setType:", v82, swift_bridgeObjectRelease(v81).n128_f64[0]);

  objc_msgSend(v70, "setShouldInferMappingModelAutomatically:", 1);
  objc_msgSend(v70, "setShouldMigrateStoreAutomatically:", 1);
  URL._bridgeToObjectiveC()(v83);
  v85 = v84;
  objc_msgSend(v70, "setURL:", v84);

  v86 = sub_319AC((uint64_t *)&unk_3B8440);
  v87 = swift_allocObject(v86, 40);
  *(_OWORD *)(v87 + 16) = xmmword_2EAE80;
  *(_QWORD *)(v87 + 32) = v70;
  aBlock = (void **)v87;
  specialized Array._endMutation()(v87);
  v88 = aBlock;
  v117 = (char *)v70;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v46, "setPersistentStoreDescriptions:", isa, swift_bridgeObjectRelease(v88).n128_f64[0]);

  v125 = sub_1029D8;
  v126 = 0;
  aBlock = _NSConcreteStackBlock;
  v122 = 1107296256;
  v123 = sub_190F2C;
  v124 = &unk_381A80;
  v90 = _Block_copy(&aBlock);
  objc_msgSend(v46, "loadPersistentStoresWithCompletionHandler:", v90);
  _Block_release(v90);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_persistentContainer) = v46;
  v91 = (void *)objc_opt_self(NSNotificationCenter);
  v116 = (char *)v46;
  v92 = objc_msgSend(v91, "defaultCenter");
  sub_34450(0, &qword_3BC7B0, NSManagedObjectContext_ptr);
  v93 = v48;
  v94 = v67;
  v95 = (void *)static NSManagedObjectContext.didSaveObjectsNotification.getter();
  v96 = sub_101D38();
  v97 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v98 = swift_allocObject(&unk_3819A0, 24);
  swift_weakInit(v98 + 16, v9);
  v125 = sub_1053F8;
  v126 = v98;
  aBlock = _NSConcreteStackBlock;
  v122 = 1107296256;
  v123 = sub_102F40;
  v124 = &unk_381AA8;
  v99 = _Block_copy(&aBlock);
  v100 = objc_msgSend(v92, "addObserverForName:object:queue:usingBlock:", v95, v96, v97, v99, swift_release().n128_f64[0]);
  _Block_release(v99);

  v101 = (void (*)(char *, uint64_t))v120;
  ((void (*)(char *, uint64_t))v120)(v93, v94);
  v101(v118, v94);
  v102 = *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_contextSaveObservation);
  *(_QWORD *)(v9 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_contextSaveObservation) = v100;
  swift_unknownObjectRelease(v102);
  return v9;
}

void sub_1029D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a2)
  {
    v12 = v3;
    v13 = v2;
    v14 = v4;
    v15 = v5;
    v10 = 0;
    v11 = 0xE000000000000000;
    swift_errorRetain(a2);
    _StringGuts.grow(_:)(32);
    v7._object = (void *)0x80000000002CBB60;
    v7._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v7);
    v9 = a2;
    v8 = sub_319AC(&qword_3B82B8);
    _print_unlocked<A, B>(_:_:)(&v9, &v10, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v10, v11, "BookEPUB/CoreDataPaginationCache.swift", 38, 2, 87, 0);
    __break(1u);
  }
}

void sub_102AA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Strong;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD aBlock[6];
  _BYTE v22[24];

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v22, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v9 = Strong;
    v10 = sub_101DC4();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v11 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v13 = swift_allocObject(&unk_381AE0, v12 + 8);
    *(_QWORD *)(v13 + 16) = v10;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v13 + v11, v7, v4);
    *(_QWORD *)(v13 + v12) = v9;
    aBlock[4] = sub_105490;
    aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_525B8;
    aBlock[3] = &unk_381AF8;
    v14 = _Block_copy(aBlock);
    v15 = v10;
    swift_retain();
    -[NSObject performBlock:](v15, "performBlock:", v14, swift_release().n128_f64[0]);
    _Block_release(v14);
    swift_release();
  }
  else
  {
    if (qword_3B5778 != -1)
      swift_once(&qword_3B5778, sub_101C94);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_555F0(v16, (uint64_t)qword_3BC580);
    v15 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_0, v15, v18, "CoreDataPaginationCacheProvider released while receiving save notification - will not be processed", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
  }

}

void sub_102CDC(void *a1)
{
  Class isa;
  id v3;
  id v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;

  isa = Notification._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "mergeChangesFromContextDidSaveNotification:", isa);

  if (objc_msgSend(a1, "hasChanges"))
  {
    v15 = 0;
    if (objc_msgSend(a1, "save:", &v15))
    {
      v3 = v15;
    }
    else
    {
      v14 = v15;
      v4 = v15;
      v5 = _convertNSErrorToError(_:)(v14);

      swift_willThrow(v6);
      swift_errorRetain(v5);
      v7 = swift_errorRetain(v5);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.error.getter(v8);
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v10 = 138412290;
        swift_errorRetain(v5);
        v12 = (void *)_swift_stdlib_bridgeErrorToNSError(v5);
        v15 = v12;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4);
        *v11 = v12;
        swift_errorRelease(v5);
        swift_errorRelease(v5);
        _os_log_impl(&dword_0, v8, v9, "Failed to save foregroundContext - %@", v10, 0xCu);
        v13 = sub_319AC(&qword_3B8A70);
        swift_arrayDestroy(v11, 1, v13);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);
        swift_errorRelease(v5);

      }
      else
      {
        swift_errorRelease(v5);

        swift_errorRelease(v5);
        swift_errorRelease(v5);
      }
    }
  }
}

uint64_t sub_102F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_102FE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;

  v1 = OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_contextSaveObservation;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_contextSaveObservation);
  if (v2)
  {
    v3 = (void *)objc_opt_self(NSNotificationCenter);
    v4 = objc_msgSend(v3, "defaultCenter", swift_unknownObjectRetain(v2).n128_f64[0]);
    objc_msgSend(v4, "removeObserver:", v2);
    swift_unknownObjectRelease(v2);

  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v5 = v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_log;
  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider_modelName + 8));

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___foregroundContext));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___encoder));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB31CoreDataPaginationCacheProvider____lazy_storage___decoder));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v1));
  return v0;
}

uint64_t sub_103104()
{
  uint64_t v0;

  sub_102FE4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_103128()
{
  return type metadata accessor for CoreDataPaginationCacheProvider(0);
}

uint64_t type metadata accessor for CoreDataPaginationCacheProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3BC600;
  if (!qword_3BC600)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CoreDataPaginationCacheProvider);
  return result;
}

uint64_t sub_10316C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = &unk_2ECAE0;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_2ECAE0;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_2ECAF8;
    v4[5] = &unk_2ECAF8;
    v4[6] = &unk_2ECAF8;
    v4[7] = &unk_2ECAF8;
    v4[8] = &unk_2ECAF8;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_103204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  double result;
  uint64_t v18;

  v6 = v5;
  v12 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject(&unk_381A18, 80);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  swift_bridgeObjectRetain(a3);
  swift_retain();
  sub_67B40((uint64_t)v14, (uint64_t)&unk_3BC780, (uint64_t)v16);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_103308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD v11[6];

  v7 = sub_101D38();
  v8 = swift_allocObject(&unk_3819A0, 24);
  swift_weakInit(v8 + 16, v3);
  v9 = (_QWORD *)swift_allocObject(&unk_3819C8, 48);
  v9[2] = a1;
  v9[3] = v8;
  v9[4] = a2;
  v9[5] = a3;
  v11[4] = sub_1051BC;
  v11[5] = v9;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_525B8;
  v11[3] = &unk_3819E0;
  v10 = _Block_copy(v11);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  objc_msgSend(v7, "performBlock:", v10, swift_release().n128_f64[0]);
  _Block_release(v10);

}

uint64_t sub_103410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[10] = a8;
  v8[11] = v10;
  v8[8] = a6;
  v8[9] = a7;
  v8[6] = a4;
  v8[7] = a5;
  return swift_task_switch(sub_103438, 0, 0);
}

uint64_t sub_103438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v7;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v7 = *(_OWORD *)(v0 + 48);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 96) = v3;
  *(_OWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 104) = v4;
  v5 = sub_319AC(&qword_3BC788);
  *v4 = v0;
  v4[1] = sub_103500;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001FLL, 0x80000000002CBA60, sub_1052D0, v3, v5);
}

uint64_t sub_103500()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10355C, 0, 0);
}

uint64_t sub_10355C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(uint64_t *);
  uint64_t v16;
  char v17;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  if ((v2 & 1) != 0)
  {
    if (qword_3B5778 != -1)
      swift_once(&qword_3B5778, sub_101C94);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_555F0(v3, (uint64_t)qword_3BC580);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = *(_QWORD *)(v0 + 56);
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v8 = 134217984;
      *(_QWORD *)(v0 + 32) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4);
      _os_log_impl(&dword_0, v5, v6, "#paginationCache error retrieving data for ordinal %ld", v8, 0xCu);
      swift_slowDealloc(v8, -1, -1);
    }
    goto LABEL_11;
  }
  v9 = qword_3B5778;
  swift_retain();
  if (v9 != -1)
    swift_once(&qword_3B5778, sub_101C94);
  v10 = type metadata accessor for Logger(0);
  sub_555F0(v10, (uint64_t)qword_3BC580);
  v11 = swift_retain();
  v5 = Logger.logObject.getter(v11);
  v12 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v5, v12))
  {
    sub_1052DC(v1, 0);
    sub_1052DC(v1, 0);
LABEL_11:

    goto LABEL_12;
  }
  v13 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v13 = 134217984;
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 16);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v13 + 4);
  sub_1052DC(v1, 0);
  _os_log_impl(&dword_0, v5, v12, "#paginationCache: retrieve data for document ordinal:%ld", v13, 0xCu);
  swift_slowDealloc(v13, -1, -1);

  sub_1052DC(v1, 0);
LABEL_12:
  v14 = *(void (**)(uint64_t *))(v0 + 80);
  v16 = v1;
  v17 = v2;
  v14(&v16);
  sub_1052DC(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1037C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  objc_class *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = a2 + 16;
  if (qword_3B5778 != -1)
    swift_once(&qword_3B5778, sub_101C94);
  v4 = type metadata accessor for Logger(0);
  sub_555F0(v4, (uint64_t)qword_3BC580);
  v5 = swift_retain();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v20 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v8 + 4);
    swift_release();
    _os_log_impl(&dword_0, v6, v7, "#paginationCache: cache data for document ordinal:%ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release();
  }
  swift_beginAccess(v3, &v20, 0, 0);
  if (swift_weakLoadStrong(v3))
  {
    v9 = (objc_class *)type metadata accessor for Document();
    v10 = objc_msgSend((id)swift_getObjCClassFromMetadata(v9), "entity");
    v11 = sub_101D38();
    objc_msgSend(objc_allocWithZone(v9), "initWithEntity:insertIntoManagedObjectContext:", v10, v11);

    sub_101E58();
    v19 = a1;
    v12 = type metadata accessor for DocumentPaginationEntity(0);
    v13 = sub_34284(&qword_3BC768, type metadata accessor for DocumentPaginationEntity, (uint64_t)&protocol conformance descriptor for DocumentPaginationEntity);
    dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v19, v12, v13);
    v18 = v17;
    swift_release();
    __asm { BR              X10 }
  }
  v14 = Logger.logObject.getter(0);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_0, v14, v15, "Failed to capture self in CoreDataPaginationCacheProvider.persist(document:forKey:completion:", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

}

void sub_103DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __n128 v10;
  char v11;
  id v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (_QWORD *)((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  *v9 = static OS_dispatch_queue.main.getter(v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v12 = sub_101DC4();
  v13 = (_QWORD *)swift_allocObject(&unk_381928, 48);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v12;
  v13[5] = v3;
  v14 = swift_allocObject(&unk_381950, 32);
  *(_QWORD *)(v14 + 16) = sub_1045F0;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_618F8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10460C;
  aBlock[3] = &unk_381968;
  v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  v16 = v12;
  swift_retain();
  swift_retain();
  objc_msgSend(v16, "performBlockAndWait:", v15, swift_release().n128_f64[0]);

  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 119, 180, 32, 1);
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
}

void sub_103FEC(uint64_t a1, unint64_t a2, void *a3)
{
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t i;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;

  v6 = objc_allocWithZone((Class)NSFetchRequest);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "initWithEntityName:", v7);

  sub_34450(0, &qword_3BC760, NSPredicate_ptr);
  v9 = sub_319AC(&qword_3B66F8);
  v10 = swift_allocObject(v9, 72);
  *(_OWORD *)(v10 + 16) = xmmword_2E5F80;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_42298();
  *(_QWORD *)(v10 + 32) = a1;
  *(_QWORD *)(v10 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  v11 = (void *)NSPredicate.init(format:_:)(0xD000000000000013, 0x80000000002CBA10, v10);
  objc_msgSend(v8, "setPredicate:", v11);

  v45 = 0;
  v12 = objc_msgSend(v8, "execute:", &v45);
  v13 = v45;
  if (!v12)
  {
    v22 = v45;
    v23 = _convertNSErrorToError(_:)(v13);

    swift_willThrow(v24);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(v23);
    swift_bridgeObjectRetain(a2);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      v30 = (void *)swift_slowAlloc(32, -1);
      v45 = v30;
      *(_DWORD *)v28 = 136315394;
      swift_bridgeObjectRetain(a2);
      v43 = sub_33524(a1, a2, (uint64_t *)&v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v28 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      *(_WORD *)(v28 + 12) = 2112;
      swift_errorRetain(v23);
      v31 = _swift_stdlib_bridgeErrorToNSError(v23);
      v43 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v28 + 14);
      *v29 = v31;
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl(&dword_0, v26, v27, "Failed to delete #staleCache data for %s - %@", (uint8_t *)v28, 0x16u);
      v32 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v29, 1, v32);
      swift_slowDealloc(v29, -1, -1);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {

      swift_errorRelease(v23);
      swift_bridgeObjectRelease_n(a2, 2);

      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }
    return;
  }
  v14 = v12;
  v15 = type metadata accessor for Document();
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);
  v17 = v13;

  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v33 = v16;
    else
      v33 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v18 = _CocoaArrayWrapper.endIndex.getter(v33);
    if (v18)
      goto LABEL_4;
  }
  else
  {
    v18 = *(_QWORD *)((char *)&dword_10 + (v16 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v16);
    if (v18)
    {
LABEL_4:
      if (v18 < 1)
        __break(1u);
      for (i = 0; i != v18; ++i)
      {
        if ((v16 & 0xC000000000000001) != 0)
          v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v16);
        else
          v20 = *(id *)(v16 + 8 * i + 32);
        v21 = v20;
        objc_msgSend(a3, "deleteObject:", v20);

      }
    }
  }
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRetain(v16);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = (void *)swift_slowAlloc(32, -1);
    v45 = v38;
    *(_DWORD *)v37 = 136315138;
    if ((unint64_t)v16 >> 62)
    {
      if (v16 < 0)
        v39 = v16;
      else
        v39 = v16 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v16);
      _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease(v16);
    }
    v40 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v42 = v41;
    v43 = sub_33524(v40, v41, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v37 + 4);
    swift_bridgeObjectRelease_n(v16, 2);
    swift_bridgeObjectRelease(v42);
    _os_log_impl(&dword_0, v35, v36, "DeleteRequest #staleCache resulted in %s deletions", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v16, 2);
  }

}

uint64_t sub_1045BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1045F0()
{
  uint64_t v0;

  sub_103FEC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1045FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10460C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10462C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10463C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_104644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD aBlock[6];

  v17 = a4;
  v9 = sub_319AC(&qword_3BC790);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = sub_101D38();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v13 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v14 = (char *)swift_allocObject(&unk_381A40, v13 + v11);
  *((_QWORD *)v14 + 2) = a2;
  *((_QWORD *)v14 + 3) = a3;
  *((_QWORD *)v14 + 4) = v17;
  *((_QWORD *)v14 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v14[v13], (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_105368;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_381A58;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a5);
  objc_msgSend(v12, "performBlock:", v15, swift_release().n128_f64[0]);
  _Block_release(v15);

}

uint64_t sub_1047B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  id v7;
  uint64_t v8;
  uint64_t v10;

  v7 = sub_101D38();
  sub_10484C(a2, a3, a4, (uint64_t)&v10);

  v8 = sub_319AC(&qword_3BC790);
  return CheckedContinuation.resume(returning:)(&v10, v8);
}

void sub_10484C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  id v56;

  v7 = objc_allocWithZone((Class)NSFetchRequest);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithEntityName:", v8);

  sub_34450(0, &qword_3BC760, NSPredicate_ptr);
  v10 = sub_319AC(&qword_3B66F8);
  v11 = swift_allocObject(v10, 112);
  *(_OWORD *)(v11 + 16) = xmmword_2E5F70;
  *(_QWORD *)(v11 + 56) = &type metadata for String;
  *(_QWORD *)(v11 + 64) = sub_42298();
  *(_QWORD *)(v11 + 32) = a2;
  *(_QWORD *)(v11 + 40) = a3;
  swift_bridgeObjectRetain(a3);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  *(_QWORD *)(v11 + 96) = sub_34450(0, (unint64_t *)&qword_3B8EF0, NSNumber_ptr);
  *(_QWORD *)(v11 + 104) = sub_1053A0();
  *(_QWORD *)(v11 + 72) = isa;
  v13 = (void *)NSPredicate.init(format:_:)(0xD00000000000001BLL, 0x80000000002CBA80, v11);
  objc_msgSend(v9, "setPredicate:", v13);

  v56 = 0;
  v14 = objc_msgSend(v9, "execute:", &v56);
  v15 = v56;
  if (!v14)
  {
    v52 = a2;
    v30 = v56;
    v31 = _convertNSErrorToError(_:)(v15);

    swift_willThrow(v32);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(v31);
    swift_bridgeObjectRetain(a3);
    v33 = swift_errorRetain(v31);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(32, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      v38 = (void *)swift_slowAlloc(32, -1);
      v56 = v38;
      *(_DWORD *)v36 = 134218498;
      v54 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v36 + 4);
      *(_WORD *)(v36 + 12) = 2080;
      swift_bridgeObjectRetain(a3);
      v54 = sub_33524(v52, a3, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v36 + 14);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v36 + 22) = 2112;
      swift_errorRetain(v31);
      v39 = _swift_stdlib_bridgeErrorToNSError(v31);
      v54 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v36 + 24);
      *v37 = v39;
      swift_errorRelease(v31);
      swift_errorRelease(v31);
      _os_log_impl(&dword_0, v34, v35, "Failed to fetch cached data for Document %ld | %s - %@", (uint8_t *)v36, 0x20u);
      v40 = sub_319AC(&qword_3B8A70);
      v42 = 1;
      swift_arrayDestroy(v37, 1, v40);
      swift_slowDealloc(v37, -1, -1);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      swift_errorRelease(v31);
LABEL_22:
      v41 = 1;
      goto LABEL_23;
    }

    swift_errorRelease(v31);
    swift_bridgeObjectRelease_n(a3, 2);

    swift_errorRelease(v31);
    swift_errorRelease(v31);
LABEL_21:
    v42 = 1;
    goto LABEL_22;
  }
  v16 = v14;
  v17 = type metadata accessor for Document();
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);
  v19 = v15;

  if (!((unint64_t)v18 >> 62))
  {
    if (*(_QWORD *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8)))
      goto LABEL_4;
LABEL_17:
    swift_bridgeObjectRelease(v18);
    v22 = 0;
    goto LABEL_18;
  }
  if (v18 < 0)
    v43 = v18;
  else
    v43 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v18);
  v44 = _CocoaArrayWrapper.endIndex.getter(v43);
  swift_bridgeObjectRelease(v18);
  if (!v44)
    goto LABEL_17;
LABEL_4:
  if ((v18 & 0xC000000000000001) != 0)
  {
    v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v18);
  }
  else
  {
    if (!*(_QWORD *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8)))
      __break(1u);
    v20 = *(id *)(v18 + 32);
  }
  v21 = v20;
  swift_bridgeObjectRelease(v18);
  v22 = v21;
  v23 = objc_msgSend(v22, "data");
  if (!v23)
  {

LABEL_18:
    v45 = swift_bridgeObjectRetain_n(a3, 2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = swift_slowAlloc(22, -1);
      v49 = a2;
      v50 = (void *)swift_slowAlloc(32, -1);
      v56 = v50;
      *(_DWORD *)v48 = 134218242;
      v54 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v48 + 4);
      *(_WORD *)(v48 + 12) = 2080;
      swift_bridgeObjectRetain(a3);
      v54 = sub_33524(v49, a3, (uint64_t *)&v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v48 + 14);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl(&dword_0, v46, v47, "No pagination Data found for Document %ld | %s", (uint8_t *)v48, 0x16u);
      v42 = 1;
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      goto LABEL_22;
    }
    swift_bridgeObjectRelease_n(a3, 2);

    goto LABEL_21;
  }
  v24 = v23;
  v51 = v22;
  v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v27 = v26;

  sub_101EDC();
  v28 = type metadata accessor for DocumentPaginationEntity(0);
  v29 = sub_34284(&qword_3BC7A0, type metadata accessor for DocumentPaginationEntity, (uint64_t)&protocol conformance descriptor for DocumentPaginationEntity);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v56, v28, v25, v27, v28, v29);
  swift_release();

  sub_D6828(v25, v27);
  v41 = 0;
  v42 = (uint64_t)v56;
LABEL_23:
  *(_QWORD *)a4 = v42;
  *(_BYTE *)(a4 + 8) = v41;
}

uint64_t sub_105164()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_105188()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1051BC()
{
  uint64_t v0;

  sub_1037C8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1051C8()
{
  unint64_t result;

  result = qword_3BC770;
  if (!qword_3BC770)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PaginationCacheError, &type metadata for PaginationCacheError);
    atomic_store(result, &qword_3BC770);
  }
  return result;
}

uint64_t sub_10520C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_105248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v7;

  v7 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = swift_task_alloc(dword_3BC77C);
  v5 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_3F0C0;
  *(_QWORD *)(v4 + 88) = v3;
  *(_OWORD *)(v4 + 72) = v5;
  *(_QWORD *)(v4 + 64) = v2;
  *(_OWORD *)(v4 + 48) = v7;
  return swift_task_switch(sub_103438, 0, 0);
}

void sub_1052D0(uint64_t a1)
{
  uint64_t *v1;

  sub_104644(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1052DC(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t sub_1052E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  v1 = sub_319AC(&qword_3BC790);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  v7 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t, __n128))(v2 + 8))(v0 + v4, v1, v7);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_105368()
{
  uint64_t v0;

  sub_319AC(&qword_3BC790);
  return sub_1047B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_1053A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BC798;
  if (!qword_3BC798)
  {
    v1 = sub_34450(255, (unint64_t *)&qword_3B8EF0, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_3BC798);
  }
  return result;
}

void sub_1053F8(uint64_t a1)
{
  uint64_t v1;

  sub_102AA0(a1, v1);
}

uint64_t sub_105400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Notification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_105490()
{
  uint64_t v0;

  type metadata accessor for Notification(0);
  sub_102CDC(*(void **)(v0 + 16));
}

uint64_t sub_1054D4()
{
  NSArray *v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t result;

  v0 = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, 1uLL, 1);
  v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v1 + 40);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v1);
    v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v2);
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "stringByAppendingPathComponent:", v4);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    return v6;
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x80000000002CBBA0, "BookEPUB/CoreDataPaginationCache.swift", 38, 2, 240, 0);
    __break(1u);
  }
  return result;
}

void sub_105648()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;

  v1 = *v0;
  v2 = v0[1];
  swift_bridgeObjectRetain(v2);
  v4 = Substring.init(_:)(v1, v2);
  v6 = v5;
  v8 = v7;
  v9 = v3;
  v10 = v5 >> 14;
  v11 = v4 >> 14;
  v12 = v4;
  if (v4 >> 14 != v5 >> 14)
  {
    swift_bridgeObjectRetain(v3);
    v13 = Substring.subscript.getter(v4, v4, v6, v8, v9);
    v15 = v14;
    swift_bridgeObjectRelease(v9);
    v16 = Character.isWhitespace.getter(v13, v15);
    v17 = swift_bridgeObjectRelease(v15);
    v12 = v4;
    if ((v16 & 1) != 0)
    {
      v12 = v4;
      while (1)
      {
        v12 = Substring.index(after:)(v12, v4, v6, v8, v9, v17);
        v11 = v12 >> 14;
        if (v12 >> 14 == v10)
          break;
        swift_bridgeObjectRetain(v9);
        v18 = Substring.subscript.getter(v12, v4, v6, v8, v9);
        v20 = v19;
        swift_bridgeObjectRelease(v9);
        LOBYTE(v18) = Character.isWhitespace.getter(v18, v20);
        v17 = swift_bridgeObjectRelease(v20);
        if ((v18 & 1) == 0)
          goto LABEL_6;
      }
    }
    else
    {
LABEL_6:
      if (v10 < v11)
      {
        __break(1u);
        return;
      }
    }
  }
  v21 = Substring.subscript.getter(v12);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRelease(v9);
  v28 = static String._fromSubstring(_:)(v21, v23, v25, v27);
  v30 = v29;
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRelease(v0[1]);
  *v0 = v28;
  v0[1] = v30;
  v31 = v0[4];
  v32 = v0[5];
  swift_bridgeObjectRetain(v32);
  v33 = Substring.init(_:)(v31, v32);
  sub_105F30(v33, v34, v35, v36, (unint64_t *)v53);
  v50[0] = v53[0];
  v50[1] = v53[1];
  v51 = v54;
  v52 = v55;
  v37 = sub_319AC(&qword_3BC7C0);
  v38 = sub_106758();
  v39 = String.init<A>(_:)(v50, v37, v38);
  v41 = v40;
  swift_bridgeObjectRelease(v0[5]);
  v0[4] = v39;
  v0[5] = v41;
  v42 = v0[3];
  v43 = v0[1];
  v44 = *v0 & 0xFFFFFFFFFFFFLL;
  if ((v43 & 0x2000000000000000) != 0)
    v44 = HIBYTE(v43) & 0xF;
  v45 = HIBYTE(v41) & 0xF;
  if ((v41 & 0x2000000000000000) == 0)
    v45 = v39 & 0xFFFFFFFFFFFFLL;
  sub_106154(v0[2], v0[3], v44 == 0, v45 == 0);
  v47 = v46;
  v49 = v48;
  swift_bridgeObjectRelease(v42);
  v0[2] = v47;
  v0[3] = v49;
}

NSAttributedString __swiftcall SearchPassage.attributedText(font:boldFont:)(UIFont font, UIFont boldFont)
{
  uint64_t *v2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  char **v13;
  uint64_t v14;
  uint64_t inited;
  NSString *v16;
  objc_class *v17;
  unint64_t v18;
  id v19;
  NSString v20;
  Class isa;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString *v27;
  objc_class *v28;
  unint64_t v29;
  id v30;
  NSString v31;
  Class v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_class *v37;
  NSString *v38;
  unint64_t v39;
  id v40;
  NSString v41;
  Class v42;
  id v43;
  uint64_t v45;
  _BYTE v46[72];
  _BYTE v47[72];
  _BYTE v48[80];

  v6 = *v2;
  v5 = v2[1];
  v8 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v10 = v2[5];
  v45 = v9;
  v11 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "init");
  v12 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v12 = v6 & 0xFFFFFFFFFFFFLL;
  v13 = &selRef_characterIndexForPoint_inTextContainer_fractionOfDistanceBetweenInsertionPoints_;
  if (v12)
  {
    v14 = sub_319AC(&qword_3B6EF8);
    inited = swift_initStackObject(v14, v48);
    *(_OWORD *)(inited + 16) = xmmword_2E5F80;
    *(_QWORD *)(inited + 32) = NSFontAttributeName;
    *(_QWORD *)(inited + 64) = sub_105C64();
    *(UIFont *)(inited + 40) = font;
    swift_bridgeObjectRetain(v5);
    v16 = NSFontAttributeName;
    v17 = font.super.isa;
    v18 = sub_38058(inited);
    v19 = objc_allocWithZone((Class)NSAttributedString);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    type metadata accessor for Key(0);
    sub_520E0();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v22 = v18;
    v13 = &selRef_characterIndexForPoint_inTextContainer_fractionOfDistanceBetweenInsertionPoints_;
    v23 = objc_msgSend(v19, "initWithString:attributes:", v20, isa, swift_bridgeObjectRelease(v22).n128_f64[0]);

    objc_msgSend(v11, "appendAttributedString:", v23);
  }
  v24 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0)
    v24 = v8 & 0xFFFFFFFFFFFFLL;
  if (v24)
  {
    v25 = sub_319AC(&qword_3B6EF8);
    v26 = swift_initStackObject(v25, v47);
    *(_OWORD *)(v26 + 16) = xmmword_2E5F80;
    *(_QWORD *)(v26 + 32) = NSFontAttributeName;
    *(_QWORD *)(v26 + 64) = sub_105C64();
    *(UIFont *)(v26 + 40) = boldFont;
    swift_bridgeObjectRetain(v7);
    v27 = NSFontAttributeName;
    v28 = boldFont.super.isa;
    v29 = sub_38058(v26);
    v30 = objc_allocWithZone((Class)NSAttributedString);
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
    type metadata accessor for Key(0);
    sub_520E0();
    v32 = Dictionary._bridgeToObjectiveC()().super.isa;
    v33 = objc_msgSend(v30, "initWithString:attributes:", v31, v32, swift_bridgeObjectRelease(v29).n128_f64[0]);

    objc_msgSend(v11, v13[47], v33);
  }
  v34 = HIBYTE(v10) & 0xF;
  if ((v10 & 0x2000000000000000) == 0)
    v34 = v45 & 0xFFFFFFFFFFFFLL;
  if (v34)
  {
    v35 = sub_319AC(&qword_3B6EF8);
    v36 = swift_initStackObject(v35, v46);
    *(_OWORD *)(v36 + 16) = xmmword_2E5F80;
    *(_QWORD *)(v36 + 32) = NSFontAttributeName;
    *(_QWORD *)(v36 + 64) = sub_105C64();
    *(UIFont *)(v36 + 40) = font;
    v37 = font.super.isa;
    swift_bridgeObjectRetain(v10);
    v38 = NSFontAttributeName;
    v39 = sub_38058(v36);
    v40 = objc_allocWithZone((Class)NSAttributedString);
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    type metadata accessor for Key(0);
    sub_520E0();
    v42 = Dictionary._bridgeToObjectiveC()().super.isa;
    v43 = objc_msgSend(v40, "initWithString:attributes:", v41, v42, swift_bridgeObjectRelease(v39).n128_f64[0]);

    objc_msgSend(v11, v13[47], v43);
  }
  return (NSAttributedString)v11;
}

unint64_t sub_105C64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B6F00;
  if (!qword_3B6F00)
  {
    v1 = objc_opt_self(UIFont);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B6F00);
  }
  return result;
}

uint64_t sub_105CA0(uint64_t result, uint64_t a2, void *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  BOOL v15;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;

  if (result < 0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v4 = result;
  if (result)
  {
    v5 = v3;
    v7 = *v3;
    v8 = v5[1];
    v9 = String.count.getter(v7);
    v10 = v5[5];
    v40 = v5[4];
    result = String.count.getter(v40);
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 1;
    while (1)
    {
      if (v9 < 1 || result >= v9)
      {
        if (result < 1)
        {
          v15 = __OFADD__(v11++, 1);
          if (v15)
            goto LABEL_28;
        }
        else
        {
          v15 = __OFADD__(v12++, 1);
          if (v15)
            goto LABEL_27;
          --result;
        }
      }
      else
      {
        v15 = __OFADD__(v13++, 1);
        if (v15)
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        --v9;
      }
      if (v4 == v14)
        break;
      v15 = __OFADD__(v14++, 1);
      if (v15)
      {
        __break(1u);
        break;
      }
    }
    if (v13 < 1)
      goto LABEL_20;
    v16._countAndFlagsBits = a2;
    v16._object = a3;
    if (!String.hasPrefix(_:)(v16)
      || (result = String.count.getter(a2), v15 = __OFADD__(v13, result), v13 += result, !v15))
    {
      swift_bridgeObjectRetain(v8);
      v17 = sub_5C514(v13, v7, v8);
      v19 = v18;
      v21 = v20;
      v23 = v22;
      swift_bridgeObjectRelease(v8);
      v24 = static String._fromSubstring(_:)(v17, v19, v21, v23);
      v26 = v25;
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRetain(a3);
      v27._countAndFlagsBits = v24;
      v27._object = v26;
      String.append(_:)(v27);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v26);
      *v5 = a2;
      v5[1] = (uint64_t)a3;
LABEL_20:
      if (v12 < 1)
        return v11;
      v28._countAndFlagsBits = a2;
      v28._object = a3;
      if (!String.hasSuffix(_:)(v28)
        || (result = String.count.getter(a2), v15 = __OFADD__(v12, result), v12 += result, !v15))
      {
        swift_bridgeObjectRetain(v10);
        v29 = sub_1067A4(v12, v40, v10);
        v31 = v30;
        v33 = v32;
        v35 = v34;
        swift_bridgeObjectRelease(v10);
        v36 = static String._fromSubstring(_:)(v29, v31, v33, v35);
        v38 = v37;
        swift_bridgeObjectRelease(v35);
        swift_bridgeObjectRetain(v38);
        v39._countAndFlagsBits = a2;
        v39._object = a3;
        String.append(_:)(v39);
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v38);
        v5[4] = v36;
        v5[5] = v38;
        return v11;
      }
      goto LABEL_31;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    return result;
  }
  return 0;
}

unint64_t sub_105F30@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;

  v8 = result;
  v9 = result >> 14;
  v10 = a2 >> 14;
  if (a2 >> 14 == result >> 14)
  {
    v11 = a2;
    v12 = result >> 14;
  }
  else
  {
    v17 = a2 >> 14;
    v18 = a5;
    v11 = a2;
    v12 = a2 >> 14;
    while (1)
    {
      swift_bridgeObjectRetain(a4);
      v13 = Substring.index(before:)(v11, v8, a2, a3, a4);
      v14 = Substring.subscript.getter(v13, v8, a2, a3, a4);
      v16 = v15;
      swift_bridgeObjectRelease(a4);
      LOBYTE(v14) = Character.isWhitespace.getter(v14, v16);
      result = swift_bridgeObjectRelease(v16);
      if ((v14 & 1) == 0)
        break;
      result = Substring.index(before:)(v11, v8, a2, a3, a4);
      v11 = result;
      v12 = result >> 14;
      if (result >> 14 == v9)
      {
        v12 = v9;
        break;
      }
    }
    v10 = v17;
    a5 = v18;
  }
  if (v10 < v9 || v12 < v9)
  {
    __break(1u);
  }
  else if (v10 >= v12)
  {
    *a5 = v11;
    a5[1] = v8;
    a5[2] = v8;
    a5[3] = a2;
    a5[4] = a3;
    a5[5] = a4;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t SearchPassage.boldText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t SearchPassage.postfixText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t SearchPassage.text.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v8;
  uint64_t v9;

  v1 = v0[2];
  v2 = (void *)v0[3];
  v3 = v0[4];
  v4 = (void *)v0[5];
  v8 = *v0;
  v9 = v0[1];
  swift_bridgeObjectRetain(v9);
  v5._countAndFlagsBits = v1;
  v5._object = v2;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(v9);
  v6._countAndFlagsBits = v3;
  v6._object = v4;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v9);
  return v8;
}

void sub_106154(uint64_t a1, uint64_t a2, char a3, char a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  uint64_t v38;

  swift_bridgeObjectRetain(a2);
  v8 = Substring.init(_:)(a1, a2);
  v11 = v8;
  v12 = v9;
  v14 = v13;
  v15 = v10;
  if ((a3 & 1) != 0)
  {
    v16 = v9 >> 14;
    v17 = v8 >> 14;
    v18 = v8;
    if (v8 >> 14 != v9 >> 14)
    {
      swift_bridgeObjectRetain(v10);
      v19 = Substring.subscript.getter(v11, v11, v12, v14, v15);
      v21 = v20;
      swift_bridgeObjectRelease(v15);
      v22 = Character.isWhitespace.getter(v19, v21);
      v23 = swift_bridgeObjectRelease(v21);
      v18 = v11;
      if ((v22 & 1) != 0)
      {
        v18 = v11;
        while (1)
        {
          v18 = Substring.index(after:)(v18, v11, v12, v14, v15, v23);
          v17 = v18 >> 14;
          if (v18 >> 14 == v16)
            break;
          swift_bridgeObjectRetain(v15);
          v24 = Substring.subscript.getter(v18, v11, v12, v14, v15);
          v26 = v25;
          swift_bridgeObjectRelease(v15);
          LOBYTE(v24) = Character.isWhitespace.getter(v24, v26);
          v23 = swift_bridgeObjectRelease(v26);
          if ((v24 & 1) == 0)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        if (v16 < v17)
        {
          __break(1u);
          return;
        }
      }
    }
    v11 = Substring.subscript.getter(v18);
    v12 = v27;
    v14 = v28;
    v30 = v29;
    swift_bridgeObjectRelease(v15);
    v15 = v30;
  }
  if ((a4 & 1) != 0)
  {
    sub_105F30(v11, v12, v14, v15, (unint64_t *)v36);
    v33[0] = v36[0];
    v33[1] = v36[1];
    v34 = v37;
    v35 = v38;
    v31 = sub_319AC(&qword_3BC7C0);
    v32 = sub_106758();
    String.init<A>(_:)(v33, v31, v32);
  }
  else
  {
    static String._fromSubstring(_:)(v11, v12, v14, v15);
    swift_bridgeObjectRelease(v15);
  }
}

uint64_t SearchPassage.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v8 = v1[4];
  v7 = v1[5];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v8, v7);
  return swift_bridgeObjectRelease(v7);
}

Swift::Int SearchPassage.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  Hasher.init(_seed:)(v8, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v8, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v8, v6, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

Swift::Int sub_1064C0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  Hasher.init(_seed:)(v9, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v9, v7, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t SearchPassage.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v10;

  v1 = v0[2];
  v2 = (void *)v0[3];
  v3 = v0[4];
  v4 = (void *)v0[5];
  v10 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  v5._countAndFlagsBits = 10794;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  swift_bridgeObjectRetain(v2);
  v6._countAndFlagsBits = v1;
  v6._object = v2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v2);
  v7._countAndFlagsBits = 10794;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRetain(v4);
  v8._countAndFlagsBits = v3;
  v8._object = v4;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v4);
  return v10;
}

uint64_t _s8BookEPUB13SearchPassageV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t result;
  char v17;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a1[5];
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  if (v4 == *a2 && v5 == v10
    || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v10, 0), result = 0, (v15 & 1) != 0))
  {
    if (v6 == v11 && v8 == v12
      || (v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v11, v12, 0), result = 0, (v17 & 1) != 0))
    {
      if (v7 == v13 && v9 == v14)
        return 1;
      else
        return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v13, v14, 0);
    }
  }
  return result;
}

unint64_t sub_106704()
{
  unint64_t result;

  result = qword_3BC7B8;
  if (!qword_3BC7B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchPassage, &type metadata for SearchPassage);
    atomic_store(result, (unint64_t *)&qword_3BC7B8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchPassage()
{
  return &type metadata for SearchPassage;
}

unint64_t sub_106758()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BC7C8;
  if (!qword_3BC7C8)
  {
    v1 = sub_31A38(&qword_3BC7C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for ReversedCollection<A>, v1);
    atomic_store(result, (unint64_t *)&qword_3BC7C8);
  }
  return result;
}

uint64_t sub_1067A4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = String.index(_:offsetBy:limitedBy:)(v6 | (v5 << 16), -result, 15, a2, a3);
    if ((v8 & 1) != 0)
      v9 = 15;
    else
      v9 = v7;
    return String.subscript.getter(15, v9, a2, a3);
  }
  return result;
}

uint64_t PreloadConfiguration.visibleContentCount.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t PreloadConfiguration.totalControllerCount.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v1 = v0[2];
  v2 = v1 + *v0;
  if (__OFADD__(v1, *v0))
  {
    __break(1u);
    goto LABEL_5;
  }
  v3 = v0[1];
  result = v2 + v3;
  if (__OFADD__(v2, v3))
LABEL_5:
    __break(1u);
  return result;
}

void PreloadConfiguration.preloadStrategy.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 24);
}

void PreloadConfiguration.currentContentLocation.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 25);
}

_BYTE *PreloadConfiguration.currentContentLocation.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 25) = *result;
  return result;
}

uint64_t (*PreloadConfiguration.currentContentLocation.modify())()
{
  return address(of:);
}

BookEPUB::PreloadConfiguration::PreloadStrategy_optional __swiftcall PreloadConfiguration.PreloadStrategy.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookEPUB::PreloadConfiguration::PreloadStrategy_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3796A0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PreloadConfiguration.PreloadStrategy.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x647261646E617473;
  if (*v0 != 1)
    v1 = 0x6973736572676761;
  if (*v0)
    return v1;
  else
    return 0x61767265736E6F63;
}

uint64_t sub_106950(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_3F87C(*a1, *a2);
}

Swift::Int sub_10695C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE800000000000000;
  v3 = 0x647261646E617473;
  if (v1 != 1)
  {
    v3 = 0x6973736572676761;
    v2 = 0xEA00000000006576;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x61767265736E6F63;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEC00000065766974;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_106A08(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x647261646E617473;
  if (*v1 != 1)
  {
    v3 = 0x6973736572676761;
    v2 = 0xEA00000000006576;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x61767265736E6F63;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEC00000065766974;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_106A90(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE800000000000000;
  v4 = 0x647261646E617473;
  if (v2 != 1)
  {
    v4 = 0x6973736572676761;
    v3 = 0xEA00000000006576;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x61767265736E6F63;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEC00000065766974;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

BookEPUB::PreloadConfiguration::PreloadStrategy_optional sub_106B38(Swift::String *a1)
{
  return PreloadConfiguration.PreloadStrategy.init(rawValue:)(*a1);
}

void sub_106B44(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC00000065766974;
  v4 = 0xE800000000000000;
  v5 = 0x647261646E617473;
  if (v2 != 1)
  {
    v5 = 0x6973736572676761;
    v4 = 0xEA00000000006576;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x61767265736E6F63;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

BookEPUB::PreloadConfiguration::CurrentContentLocation_optional __swiftcall PreloadConfiguration.CurrentContentLocation.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BookEPUB::PreloadConfiguration::CurrentContentLocation_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_379708, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

uint64_t PreloadConfiguration.CurrentContentLocation.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x676E696461656CLL;
  else
    return 0x7265746E6563;
}

uint64_t sub_106C48(char *a1, char *a2)
{
  return sub_3F7DC(*a1, *a2);
}

Swift::Int sub_106C54()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x676E696461656CLL;
  else
    v2 = 0x7265746E6563;
  if (v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_106CD0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x676E696461656CLL;
  else
    v2 = 0x7265746E6563;
  if (*v1)
    v3 = 0xE700000000000000;
  else
    v3 = 0xE600000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_106D28(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x676E696461656CLL;
  else
    v3 = 0x7265746E6563;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BookEPUB::PreloadConfiguration::CurrentContentLocation_optional sub_106DA0(Swift::String *a1)
{
  return PreloadConfiguration.CurrentContentLocation.init(rawValue:)(*a1);
}

void sub_106DAC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7265746E6563;
  if (*v1)
    v2 = 0x676E696461656CLL;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

BookEPUB::PreloadConfiguration __swiftcall PreloadConfiguration.init(preloadStrategy:currentContentLocation:)(BookEPUB::PreloadConfiguration::PreloadStrategy preloadStrategy, BookEPUB::PreloadConfiguration::CurrentContentLocation currentContentLocation)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  BookEPUB::PreloadConfiguration result;

  v3 = *(char *)preloadStrategy;
  v4 = *(_BYTE *)currentContentLocation;
  v5 = qword_2ECDC8[v3];
  *(_QWORD *)v2 = qword_2ECDE0[v3];
  *(_QWORD *)(v2 + 8) = v5;
  *(_QWORD *)(v2 + 16) = 1;
  *(_BYTE *)(v2 + 24) = v3;
  *(_BYTE *)(v2 + 25) = v4;
  LOBYTE(result.nextContentToLoad) = currentContentLocation;
  LOBYTE(result.previousContentToLoad) = preloadStrategy;
  return result;
}

void PreloadConfiguration.sorted(loaders:currentDocumentOrdinal:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t (*v11)(uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void (*v16)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    goto LABEL_12;
  v23 = *(_QWORD *)(v2 + 16);
  v6 = *(_BYTE *)(v2 + 25);
  swift_bridgeObjectRetain(a1);
  v7 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v8 = *(v7 - 1);
    v9 = *v7;
    ObjectType = swift_getObjectType(v8);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v9 + 24);
    v12 = swift_unknownObjectRetain(v8);
    v13 = v11(ObjectType, v9, v12);
    if ((v14 & 1) == 0 && v13 == a2)
      break;
    swift_unknownObjectRelease(v8);
    v7 += 2;
    if (!--v4)
    {
      swift_bridgeObjectRelease(a1);
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease(a1);
  if (!v8)
    goto LABEL_12;
  v15 = swift_getObjectType(v8);
  v16 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, __n128))(v9 + 40);
  v17 = swift_unknownObjectRetain(v8);
  v16(v24, v15, v9, v17);
  swift_unknownObjectRelease(v8);
  v18 = v25;
  if (!v25)
  {
    swift_unknownObjectRelease(v8);
    sub_107030((uint64_t)v24);
LABEL_12:
    swift_bridgeObjectRetain(a1);
    return;
  }
  v19 = v26;
  sub_472D0(v24, v25);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 48))(v18, v19);
  sub_34488(v24);
  if ((v6 & 1) == 0)
  {
    v21 = (_QWORD *)swift_allocObject(&unk_381C38, 24, 7);
    v21[2] = v20;
    v22 = sub_1085B8;
    goto LABEL_15;
  }
  if ((v23 & 0x8000000000000000) == 0)
  {
    v21 = (_QWORD *)swift_allocObject(&unk_381C10, 40, 7);
    v21[2] = v20;
    v21[3] = 0;
    v21[4] = v23;
    v22 = sub_1073A4;
LABEL_15:
    v24[0] = a1;
    swift_bridgeObjectRetain(a1);
    swift_retain();
    sub_108528(v24, v22);
    swift_unknownObjectRelease(v8);
    swift_release_n(v21);
    return;
  }
  __break(1u);
  swift_release();
  __break(1u);
}

uint64_t sub_107030(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC(&qword_3B8990);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_107070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;

  ObjectType = swift_getObjectType(a1);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 40))(&v24, ObjectType, a2);
  if (!v25)
  {
    sub_107030((uint64_t)&v24);
    return 0;
  }
  sub_3F1CC(&v24, (uint64_t)v27);
  v10 = swift_getObjectType(a3);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 40))(&v22, v10, a4);
  if (!v23)
  {
    sub_107030((uint64_t)&v22);
    sub_34488(v27);
    return 0;
  }
  sub_3F1CC(&v22, (uint64_t)&v24);
  v11 = v28;
  v12 = v29;
  sub_472D0(v27, v28);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 48))(v11, v12);
  if ((result | a5) < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v14 = result;
  v15 = v25;
  v16 = v26;
  sub_472D0(&v24, v25);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v17 = v14 - a5;
  v18 = result - a5;
  if (v17 >= 0)
    v19 = v17;
  else
    v19 = -v17;
  if (v18 >= 0)
    v20 = v18;
  else
    v20 = -v18;
  sub_34488(&v24);
  sub_34488(v27);
  v21 = v19 < v20;
  if (v19 == v20)
    return v18 < v17;
  return v21;
}

uint64_t sub_1071C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v27;
  _BOOL8 v28;
  BOOL v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  ObjectType = swift_getObjectType(a1);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a2 + 40))(&v32, ObjectType, a2);
  if (!v33)
  {
    sub_107030((uint64_t)&v32);
    return 0;
  }
  sub_3F1CC(&v32, (uint64_t)v35);
  v14 = swift_getObjectType(a3);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(a4 + 40))(&v30, v14, a4);
  if (!v31)
  {
    sub_107030((uint64_t)&v30);
LABEL_25:
    sub_34488(v35);
    return 0;
  }
  sub_3F1CC(&v30, (uint64_t)&v32);
  v15 = v36;
  v16 = v37;
  sub_472D0(v35, v36);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
  if ((result | a5) < 0)
  {
    __break(1u);
  }
  else
  {
    v18 = result;
    v19 = v33;
    v20 = v34;
    sub_472D0(&v32, v33);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 48))(v19, v20);
    if ((result & 0x8000000000000000) == 0)
    {
      v22 = v18 - a5;
      v21 = v18 - a5 < 0;
      v23 = result - a5;
      if (v21)
        v24 = -v22;
      else
        v24 = v22;
      if (v23 >= 0)
        v25 = v23;
      else
        v25 = -v23;
      v27 = v23 >= a6 && v23 < a7;
      if (v22 >= a6 && v22 < a7)
      {
        if (v27)
        {
          v28 = v22 < v23;
          sub_34488(&v32);
          sub_34488(v35);
        }
        else
        {
          sub_34488(&v32);
          sub_34488(v35);
          return 1;
        }
        return v28;
      }
      if (!v27)
      {
        sub_34488(&v32);
        sub_34488(v35);
        v29 = v24 < v25;
        if (v24 == v25)
          return v23 < v22;
        return v29;
      }
      sub_34488(&v32);
      goto LABEL_25;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_107394()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1073A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1071C8(a1, a2, a3, a4, v4[2], v4[3], v4[4]);
}

uint64_t Collection.centerSorted<A>(around:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;

  v11 = *(_QWORD *)(a3 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(a1);
  v14 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v11 + 16))(v14, v13);
  v15 = (*(unsigned __int8 *)(v11 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v16 = (char *)swift_allocObject(&unk_381C60, v15 + v12);
  *((_QWORD *)v16 + 2) = a2;
  *((_QWORD *)v16 + 3) = a3;
  *((_QWORD *)v16 + 4) = a4;
  *((_QWORD *)v16 + 5) = a5;
  *((_QWORD *)v16 + 6) = a6;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v14, a3);
  v17 = Sequence.sorted(by:)(sub_108618, v16, a2, *(_QWORD *)(a4 + 8));
  swift_release();
  return v17;
}

uint64_t sub_1074B0(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char v53;
  char v54;
  void (*v55)(char *, uint64_t);
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;

  v62 = a8;
  v63 = a7;
  v61 = a3;
  v65 = a2;
  v69 = a1;
  v10 = type metadata accessor for Optional(0, a5);
  v67 = *(_QWORD *)(v10 - 8);
  v68 = v10;
  v11 = __chkstk_darwin(v10);
  v66 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v57 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a6 + 8));
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v64 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v57 - v19;
  v21 = *(_QWORD *)(a5 - 8);
  v22 = __chkstk_darwin(v18);
  v60 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v57 - v25;
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v57 - v28;
  v30 = __chkstk_darwin(v27);
  v32 = (char *)&v57 - v31;
  v33 = __chkstk_darwin(v30);
  v35 = (char *)&v57 - v34;
  __chkstk_darwin(v33);
  v70 = (char *)&v57 - v36;
  v38 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
  v38(v20, v69, AssociatedTypeWitness);
  v39 = swift_dynamicCast(v14, v20, AssociatedTypeWitness, a5, 6);
  v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  if ((v39 & 1) == 0)
  {
    v40(v14, 1, 1, a5);
LABEL_7:
    (*(void (**)(char *, uint64_t))(v67 + 8))(v14, v68);
    v54 = 0;
    return v54 & 1;
  }
  v57 = v26;
  v58 = v29;
  v59 = v32;
  v69 = v35;
  v40(v14, 0, 1, a5);
  v41 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v41(v70, v14, a5);
  v42 = v64;
  v38(v64, v65, AssociatedTypeWitness);
  v14 = v66;
  v43 = v21;
  if ((swift_dynamicCast(v66, v42, AssociatedTypeWitness, a5, 6) & 1) == 0)
  {
    v40(v14, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v70, a5);
    goto LABEL_7;
  }
  v40(v14, 0, 1, a5);
  v44 = v69;
  v41(v69, v14, a5);
  v46 = v61;
  v45 = v62;
  v47 = *(_QWORD *)(*(_QWORD *)(v62 + 8) + 8);
  v48 = v59;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v70, v61, a5, v47);
  v49 = v58;
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v44, v46, a5, v47);
  v50 = v57;
  v51 = v63;
  abs<A>(_:)(v48, a5, v63, v45);
  v52 = v60;
  abs<A>(_:)(v49, a5, v51, v45);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v50, v52, a5, *(_QWORD *)(v51 + 8)) & 1) != 0)
    v53 = dispatch thunk of static Comparable.> infix(_:_:)(v48, v49, a5, v51);
  else
    v53 = dispatch thunk of static Comparable.< infix(_:_:)(v50, v52, a5, v51);
  v54 = v53;
  v55 = *(void (**)(char *, uint64_t))(v43 + 8);
  v55(v52, a5);
  v55(v50, a5);
  v55(v49, a5);
  v55(v48, a5);
  v55(v44, a5);
  v55(v70, a5);
  return v54 & 1;
}

uint64_t sub_1078C8(char *a1, char *__src, unint64_t a3, char *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  char v22;
  char v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  __n128 v32;
  char v33;
  char v34;
  char *v35;
  uint64_t result;
  char *v39;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;

  v5 = __src;
  v6 = __src - a1;
  v7 = __src - a1 + 15;
  if (__src - a1 >= 0)
    v7 = __src - a1;
  v8 = v7 >> 4;
  v10 = a3 - (_QWORD)__src;
  v11 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v11 = a3 - (_QWORD)__src;
  v12 = v11 >> 4;
  v44 = a1;
  v43 = a4;
  if (v8 >= v11 >> 4)
  {
    if (v10 >= -15)
    {
      if (a4 != __src || &__src[16 * v12] <= a4)
        memmove(a4, __src, 16 * v12);
      v25 = &a4[16 * v12];
      v42 = v25;
      v44 = v5;
      if (a1 < v5 && v10 >= 16)
      {
        v26 = (char *)(a3 - 16);
        v27 = v5;
        while (1)
        {
          v39 = v5;
          v28 = (unint64_t)v25;
          v18 = *((_QWORD *)v25 - 2);
          v29 = *((_QWORD *)v25 - 1);
          v30 = v25 - 16;
          v20 = *((_QWORD *)v27 - 2);
          v31 = *((_QWORD *)v27 - 1);
          v27 -= 16;
          swift_unknownObjectRetain(v18);
          v32 = swift_unknownObjectRetain(v20);
          v33 = a5(v18, v29, v20, v31, v32);
          if (v41)
            goto LABEL_46;
          v34 = v33;
          v41 = 0;
          v35 = v26 + 16;
          swift_unknownObjectRelease(v18);
          swift_unknownObjectRelease(v20);
          if ((v34 & 1) != 0)
          {
            v25 = (char *)v28;
            if (v35 != v39 || v26 >= v39)
              *(_OWORD *)v26 = *(_OWORD *)v27;
            v44 = v27;
          }
          else
          {
            v42 = v30;
            if ((unint64_t)v35 < v28 || (unint64_t)v26 >= v28 || v35 != (char *)v28)
              *(_OWORD *)v26 = *(_OWORD *)v30;
            v27 = v39;
            v25 = v30;
          }
          if (v27 > a1)
          {
            v26 -= 16;
            v5 = v27;
            if (v25 > a4)
              continue;
          }
          break;
        }
      }
LABEL_45:
      sub_1D3294((void **)&v44, (const void **)&v43, &v42);
      return 1;
    }
  }
  else if (v6 >= -15)
  {
    v13 = a4;
    if (a4 != a1 || &a1[16 * v8] <= a4)
      memmove(a4, a1, 16 * v8);
    v15 = &a4[16 * v8];
    v42 = v15;
    if ((unint64_t)v5 < a3 && v6 >= 16)
    {
      v16 = a1;
      while (1)
      {
        v18 = *(_QWORD *)v5;
        v17 = *((_QWORD *)v5 + 1);
        v20 = *(_QWORD *)v13;
        v19 = *((_QWORD *)v13 + 1);
        swift_unknownObjectRetain(*(_QWORD *)v5);
        v21 = swift_unknownObjectRetain(v20);
        v22 = a5(v18, v17, v20, v19, v21);
        if (v41)
          break;
        v23 = v22;
        swift_unknownObjectRelease(v18);
        swift_unknownObjectRelease(v20);
        if ((v23 & 1) != 0)
        {
          v24 = v5 + 16;
          if (v16 < v5 || v16 >= v24 || v16 != v5)
            *(_OWORD *)v16 = *(_OWORD *)v5;
        }
        else
        {
          if (v16 != v13)
            *(_OWORD *)v16 = *(_OWORD *)v13;
          v13 += 16;
          v43 = v13;
          v24 = v5;
        }
        v16 += 16;
        v44 = v16;
        if (v13 < v15)
        {
          v5 = v24;
          if ((unint64_t)v24 < a3)
            continue;
        }
        goto LABEL_45;
      }
LABEL_46:
      swift_unknownObjectRelease(v18);
      swift_unknownObjectRelease(v20);
      sub_1D3294((void **)&v44, (const void **)&v43, &v42);
      return 1;
    }
    goto LABEL_45;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_107C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v18;
  uint64_t v19;

  v6 = v5;
  if (a3 != a2)
  {
    v7 = a3;
    v8 = a1;
    v9 = *a4;
    v10 = *a4 + 16 * a3 - 16;
LABEL_4:
    v11 = *(_OWORD *)(v9 + 16 * v7);
    v18 = v10;
    while (1)
    {
      v19 = *((_QWORD *)&v11 + 1);
      v13 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      v14 = v11;
      swift_unknownObjectRetain(v11);
      swift_unknownObjectRetain(v13);
      v15 = a5(v14, v19, v13, v12);
      swift_unknownObjectRelease(v14);
      swift_unknownObjectRelease(v13);
      if (v6)
        break;
      if ((v15 & 1) != 0)
      {
        if (!v9)
        {
          __break(1u);
          return;
        }
        v11 = *(_OWORD *)(v10 + 16);
        *(_OWORD *)(v10 + 16) = *(_OWORD *)v10;
        *(_OWORD *)v10 = v11;
        v10 -= 16;
        if (v7 != ++v8)
          continue;
      }
      ++v7;
      v10 = v18 + 16;
      v8 = a1;
      if (v7 != a2)
        goto LABEL_4;
      return;
    }
  }
}

void sub_107D1C(uint64_t *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  Swift::Int v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  int v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  __int128 *v31;
  Swift::Int v32;
  Swift::Int v33;
  __int128 *v34;
  __int128 v35;
  Swift::Int v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  __int128 v92;
  Swift::Int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  char *v113;
  size_t v114;
  char *v115;
  char *v116;
  Swift::Int v117;
  uint64_t v118;
  uint64_t v119;
  Swift::Int v120;
  Swift::Int v121;
  Swift::Int v122;
  uint64_t *v123;
  _QWORD *v124;
  Swift::Int v125;
  Swift::Int v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;

  v3 = v2;
  v5 = a1[1];
  v6 = _minimumMergeRunLength(_:)(v5);
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_145;
    if (v5)
      sub_107C08(0, v5, 1, a1, a2);
    return;
  }
  v123 = a1;
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_154;
  v122 = v6;
  if (v5 < 2)
  {
    v128 = (char *)&_swiftEmptyArrayStorage[4];
    v124 = _swiftEmptyArrayStorage;
    if (v5 != 1)
    {
      v40 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      if (v40 >= 2)
      {
        v103 = *v123;
        do
        {
          v104 = v40 - 2;
          if (v40 < 2)
            goto LABEL_140;
          if (!v103)
            goto LABEL_153;
          v105 = v40 - 1;
          v106 = (uint64_t)v13;
          v107 = *(_QWORD *)&v13[16 * v104 + 32];
          v108 = *(_QWORD *)&v13[16 * v40 + 24];
          sub_1078C8((char *)(v103 + 16 * v107), (char *)(v103 + 16 * *(_QWORD *)&v13[16 * v40 + 16]), v103 + 16 * v108, v128, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))a2);
          if (v3)
          {
            v102 = v106;
            goto LABEL_122;
          }
          if (v108 < v107)
            goto LABEL_141;
          if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) != 0)
            v109 = (char *)v106;
          else
            v109 = sub_1D34BC(v106);
          if (v104 >= *((_QWORD *)v109 + 2))
            goto LABEL_142;
          v110 = v109 + 32;
          v111 = &v109[16 * v104 + 32];
          *(_QWORD *)v111 = v107;
          *((_QWORD *)v111 + 1) = v108;
          v112 = *((_QWORD *)v109 + 2);
          if (v40 > v112)
            goto LABEL_143;
          v113 = &v110[16 * v40];
          v114 = 16 * (v112 - v40);
          v115 = v109;
          memmove(&v110[16 * v105], v113, v114);
          v13 = v115;
          *((_QWORD *)v115 + 2) = v112 - 1;
          v40 = v112 - 1;
        }
        while (v112 > 2);
      }
      v102 = (uint64_t)v13;
LABEL_122:
      swift_bridgeObjectRelease(v102);
      goto LABEL_123;
    }
  }
  else
  {
    v8 = v7 >> 1;
    v9 = sub_319AC(&qword_3B67F8);
    v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
    *(_QWORD *)(v10 + 16) = v8;
    v124 = (_QWORD *)v10;
    v128 = (char *)(v10 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v118 = *a1 - 16;
  v119 = *a1 + 40;
  v13 = (char *)_swiftEmptyArrayStorage;
  v125 = v5;
  v129 = *a1;
LABEL_13:
  v14 = v11++;
  if (v11 < v5)
  {
    v15 = v13;
    v16 = (uint64_t *)(v12 + 16 * v11);
    v18 = *v16;
    v17 = v16[1];
    v19 = (uint64_t *)(v12 + 16 * v14);
    v21 = *v19;
    v20 = v19[1];
    swift_unknownObjectRetain(v18);
    v22 = swift_unknownObjectRetain(v21);
    v23 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))a2)(v18, v17, v21, v20, v22);
    if (v3)
    {
      swift_bridgeObjectRelease(v15);
      swift_unknownObjectRelease(v18);
      swift_unknownObjectRelease(v21);
      goto LABEL_123;
    }
    v24 = v23;
    swift_unknownObjectRelease(v18);
    swift_unknownObjectRelease(v21);
    v11 = v14 + 2;
    if (v14 + 2 < v5)
    {
      v120 = v14;
      v25 = (uint64_t *)(v119 + 16 * v14);
      while (1)
      {
        v27 = *(v25 - 1);
        v26 = *v25;
        v29 = *(v25 - 3);
        v28 = *(v25 - 2);
        swift_unknownObjectRetain(v27);
        v30 = swift_unknownObjectRetain(v29);
        LODWORD(v28) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))a2)(v27, v26, v29, v28, v30);
        swift_unknownObjectRelease(v27);
        swift_unknownObjectRelease(v29);
        if (((v24 ^ v28) & 1) != 0)
          break;
        ++v11;
        v25 += 2;
        v5 = v125;
        if (v125 == v11)
        {
          v11 = v125;
          goto LABEL_21;
        }
      }
      v5 = v125;
LABEL_21:
      v14 = v120;
    }
    v13 = v15;
    v12 = v129;
    if ((v24 & 1) != 0)
    {
      if (v11 < v14)
        goto LABEL_149;
      if (v14 < v11)
      {
        v31 = (__int128 *)(v118 + 16 * v11);
        v32 = v11;
        v33 = v14;
        v34 = (__int128 *)(v129 + 16 * v14);
        do
        {
          if (v33 != --v32)
          {
            if (!v129)
              goto LABEL_152;
            v35 = *v34;
            *v34 = *v31;
            *v31 = v35;
          }
          ++v33;
          --v31;
          ++v34;
        }
        while (v33 < v32);
      }
    }
  }
  if (v11 >= v5)
    goto LABEL_40;
  if (__OFSUB__(v11, v14))
    goto LABEL_146;
  if (v11 - v14 >= v122)
  {
LABEL_40:
    if (v11 < v14)
      goto LABEL_144;
    goto LABEL_41;
  }
  if (__OFADD__(v14, v122))
    goto LABEL_147;
  if (v14 + v122 >= v5)
    v36 = v5;
  else
    v36 = v14 + v122;
  if (v36 >= v14)
  {
    if (v11 == v36)
      goto LABEL_40;
    v116 = v13;
    v117 = v36;
    v91 = v118 + 16 * v11;
    v121 = v14;
    while (1)
    {
      v92 = *(_OWORD *)(v12 + 16 * v11);
      v93 = v14;
      v94 = v91;
      v95 = v91;
      while (1)
      {
        v127 = *((_QWORD *)&v92 + 1);
        v97 = *(_QWORD *)v95;
        v96 = *(_QWORD *)(v95 + 8);
        v98 = v92;
        swift_unknownObjectRetain(v92);
        swift_unknownObjectRetain(v97);
        v99 = a2(v98, v127, v97, v96);
        if (v3)
        {
          swift_bridgeObjectRelease(v116);
          swift_unknownObjectRelease(v98);
          swift_unknownObjectRelease(v97);
LABEL_123:
          v124[2] = 0;
          swift_bridgeObjectRelease(v124);
          return;
        }
        v100 = v99;
        swift_unknownObjectRelease(v98);
        swift_unknownObjectRelease(v97);
        if ((v100 & 1) == 0)
          break;
        v12 = v129;
        if (!v129)
          goto LABEL_151;
        v92 = *(_OWORD *)(v95 + 16);
        *(_OWORD *)(v95 + 16) = *(_OWORD *)v95;
        *(_OWORD *)v95 = v92;
        v95 -= 16;
        if (v11 == ++v93)
          goto LABEL_99;
      }
      v12 = v129;
LABEL_99:
      ++v11;
      v91 = v94 + 16;
      v14 = v121;
      if (v11 == v117)
      {
        v11 = v117;
        v13 = v116;
        if (v117 < v121)
          goto LABEL_144;
LABEL_41:
        v37 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) != 0)
          v13 = v37;
        else
          v13 = sub_1D3038(0, *((_QWORD *)v37 + 2) + 1, 1, v37);
        v39 = *((_QWORD *)v13 + 2);
        v38 = *((_QWORD *)v13 + 3);
        v40 = v39 + 1;
        v12 = v129;
        if (v39 >= v38 >> 1)
        {
          v101 = sub_1D3038((char *)(v38 > 1), v39 + 1, 1, v13);
          v12 = v129;
          v13 = v101;
        }
        *((_QWORD *)v13 + 2) = v40;
        v41 = v13 + 32;
        v42 = &v13[16 * v39 + 32];
        *(_QWORD *)v42 = v14;
        *((_QWORD *)v42 + 1) = v11;
        if (v39)
        {
          v126 = v11;
          while (1)
          {
            v43 = v40 - 1;
            if (v40 >= 4)
            {
              v48 = &v41[16 * v40];
              v49 = *((_QWORD *)v48 - 8);
              v50 = *((_QWORD *)v48 - 7);
              v54 = __OFSUB__(v50, v49);
              v51 = v50 - v49;
              if (v54)
                goto LABEL_129;
              v53 = *((_QWORD *)v48 - 6);
              v52 = *((_QWORD *)v48 - 5);
              v54 = __OFSUB__(v52, v53);
              v46 = v52 - v53;
              v47 = v54;
              if (v54)
                goto LABEL_130;
              v55 = v40 - 2;
              v56 = &v41[16 * v40 - 32];
              v58 = *(_QWORD *)v56;
              v57 = *((_QWORD *)v56 + 1);
              v54 = __OFSUB__(v57, v58);
              v59 = v57 - v58;
              if (v54)
                goto LABEL_132;
              v54 = __OFADD__(v46, v59);
              v60 = v46 + v59;
              if (v54)
                goto LABEL_135;
              if (v60 >= v51)
              {
                v78 = &v41[16 * v43];
                v80 = *(_QWORD *)v78;
                v79 = *((_QWORD *)v78 + 1);
                v54 = __OFSUB__(v79, v80);
                v81 = v79 - v80;
                if (v54)
                  goto LABEL_139;
                v71 = v46 < v81;
                goto LABEL_78;
              }
            }
            else
            {
              if (v40 != 3)
              {
                v72 = *((_QWORD *)v13 + 4);
                v73 = *((_QWORD *)v13 + 5);
                v54 = __OFSUB__(v73, v72);
                v65 = v73 - v72;
                v66 = v54;
                goto LABEL_72;
              }
              v45 = *((_QWORD *)v13 + 4);
              v44 = *((_QWORD *)v13 + 5);
              v54 = __OFSUB__(v44, v45);
              v46 = v44 - v45;
              v47 = v54;
            }
            if ((v47 & 1) != 0)
              goto LABEL_131;
            v55 = v40 - 2;
            v61 = &v41[16 * v40 - 32];
            v63 = *(_QWORD *)v61;
            v62 = *((_QWORD *)v61 + 1);
            v64 = __OFSUB__(v62, v63);
            v65 = v62 - v63;
            v66 = v64;
            if (v64)
              goto LABEL_134;
            v67 = &v41[16 * v43];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v54 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v54)
              goto LABEL_137;
            if (__OFADD__(v65, v70))
              goto LABEL_138;
            if (v65 + v70 >= v46)
            {
              v71 = v46 < v70;
LABEL_78:
              if (v71)
                v43 = v55;
              goto LABEL_80;
            }
LABEL_72:
            if ((v66 & 1) != 0)
              goto LABEL_133;
            v74 = &v41[16 * v43];
            v76 = *(_QWORD *)v74;
            v75 = *((_QWORD *)v74 + 1);
            v54 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v54)
              goto LABEL_136;
            if (v77 < v65)
              goto LABEL_89;
LABEL_80:
            v82 = v43 - 1;
            if (v43 - 1 >= v40)
            {
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
              goto LABEL_148;
            }
            if (!v12)
              goto LABEL_150;
            v83 = v13;
            v84 = &v41[16 * v82];
            v85 = *(_QWORD *)v84;
            v86 = v41;
            v87 = v43;
            v88 = &v41[16 * v43];
            v89 = *((_QWORD *)v88 + 1);
            sub_1078C8((char *)(v12 + 16 * *(_QWORD *)v84), (char *)(v12 + 16 * *(_QWORD *)v88), v12 + 16 * v89, v128, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))a2);
            if (v3)
            {
              v102 = (uint64_t)v83;
              goto LABEL_122;
            }
            if (v89 < v85)
              goto LABEL_126;
            if (v87 > *((_QWORD *)v83 + 2))
              goto LABEL_127;
            *(_QWORD *)v84 = v85;
            *(_QWORD *)&v86[16 * v82 + 8] = v89;
            v90 = *((_QWORD *)v83 + 2);
            if (v87 >= v90)
              goto LABEL_128;
            v40 = v90 - 1;
            memmove(v88, v88 + 16, 16 * (v90 - 1 - v87));
            v41 = v86;
            v13 = v83;
            *((_QWORD *)v83 + 2) = v90 - 1;
            v12 = v129;
            v11 = v126;
            if (v90 <= 2)
              goto LABEL_89;
          }
        }
        v40 = 1;
LABEL_89:
        v5 = v125;
        if (v11 >= v125)
          goto LABEL_105;
        goto LABEL_13;
      }
    }
  }
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

void sub_108528(_QWORD *a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6[2];

  v4 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v4 = (_QWORD *)sub_1D3548(v4);
  v5 = v4[2];
  v6[0] = (uint64_t)(v4 + 4);
  v6[1] = v5;
  sub_107D1C(v6, a2);
  *a1 = v4;
}

uint64_t sub_1085A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1085B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_107070(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1085C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 56) & ~v2;
  v4 = v3 + *(_QWORD *)(v1 + 64);
  v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_108618(char *a1, char *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = v2[3];
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_1074B0(a1, a2, (uint64_t)v2 + ((v4 + 56) & ~v4), v2[2], v3, v2[4], v2[5], v2[6]);
}

unint64_t sub_108640()
{
  unint64_t result;

  result = qword_3BC7D0;
  if (!qword_3BC7D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PreloadConfiguration.PreloadStrategy, &type metadata for PreloadConfiguration.PreloadStrategy);
    atomic_store(result, (unint64_t *)&qword_3BC7D0);
  }
  return result;
}

unint64_t sub_108688()
{
  unint64_t result;

  result = qword_3BC7D8;
  if (!qword_3BC7D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PreloadConfiguration.CurrentContentLocation, &type metadata for PreloadConfiguration.CurrentContentLocation);
    atomic_store(result, (unint64_t *)&qword_3BC7D8);
  }
  return result;
}

__n128 initializeWithCopy for PreloadConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PreloadConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 26))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 25);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PreloadConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)(result + 25) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for PreloadConfiguration()
{
  return &type metadata for PreloadConfiguration;
}

uint64_t storeEnumTagSinglePayload for PreloadConfiguration.PreloadStrategy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1087C8 + 4 * byte_2ECBF5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1087FC + 4 * asc_2ECBF0[v4]))();
}

uint64_t sub_1087FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_108804(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10880CLL);
  return result;
}

uint64_t sub_108818(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x108820);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_108824(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10882C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreloadConfiguration.PreloadStrategy()
{
  return &type metadata for PreloadConfiguration.PreloadStrategy;
}

uint64_t storeEnumTagSinglePayload for PreloadConfiguration.CurrentContentLocation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_108894 + 4 * byte_2ECBFF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1088C8 + 4 * byte_2ECBFA[v4]))();
}

uint64_t sub_1088C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1088D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1088D8);
  return result;
}

uint64_t sub_1088E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1088ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1088F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1088F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreloadConfiguration.CurrentContentLocation()
{
  return &type metadata for PreloadConfiguration.CurrentContentLocation;
}

uint64_t CurrentThemePersistence.__allocating_init(userDefaults:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 41);
  CurrentThemePersistence.init(userDefaults:)(a1);
  return v3;
}

uint64_t sub_108950()
{
  uint64_t v0;
  __n128 v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3BC7E0);
  sub_555F0(v0, (uint64_t)qword_3BC7E0);
  return Logger.init(subsystem:category:)(0xD000000000000019, 0x80000000002CBCD0, 0xD000000000000017, 0x80000000002ECEB0, v1);
}

uint64_t CurrentThemePersistence.hadExistingSavedThemeType.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t CurrentThemePersistence.init(userDefaults:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSString v9;
  void *v10;
  char v11;
  uint64_t v12;
  void *v13;
  char *v14;
  char v15;
  char v16;
  NSString v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v24;

  v2 = v1;
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = 0;
  v3 = a1;
  v4 = objc_msgSend(v3, "BookEPUB_CurrentThemePersistence_themeIdentifier");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;
  }
  else
  {
    v9 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "stringForKey:", v9);

    if (!v5)
      goto LABEL_6;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v10;
    objc_msgSend(v3, "setBookEPUB_CurrentThemePersistence_themeIdentifier:", v5);
  }

  v11 = sub_10973C(v6, v8);
  if (v11 != 6)
  {
    v15 = v11;
    v16 = 1;
    goto LABEL_10;
  }
LABEL_6:
  v12 = NSUserDefaults.oldExperienceThemeIdentifier.getter();
  if (v13)
  {
    v14 = (char *)&loc_108AE8 + *((int *)qword_108C80 + sub_10973C(v12, v13));
    __asm { BR              X10 }
  }
  v17 = String._bridgeToObjectiveC()();
  v15 = 0;
  objc_msgSend(v3, "setBookEPUB_CurrentThemePersistence_themeIdentifier:", v17);

  v16 = 0;
LABEL_10:
  *(_BYTE *)(v2 + 40) = v16;
  v24 = v15;
  v18 = sub_319AC(&qword_3BC7F8);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48));
  *(_QWORD *)(v2 + 16) = CurrentValueSubject.init(_:)(&v24);
  KeyPath = swift_getKeyPath(&unk_2ECE48);
  v20 = swift_allocObject(&unk_381E90, 24);
  swift_weakInit(v20 + 16, v2);
  v21 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 1, sub_109734, v20, &protocol witness table for NSObject);

  swift_release();
  swift_release();
  v22 = *(void **)(v2 + 32);
  *(_QWORD *)(v2 + 32) = v21;

  return v2;
}

uint64_t NSUserDefaults.legacyKeyThemeIdentifier.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "stringForKey:", v1);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  objc_msgSend(v0, "setBookEPUB_CurrentThemePersistence_themeIdentifier:", v2);

  return v3;
}

uint64_t NSUserDefaults.oldExperienceThemeIdentifier.getter()
{
  void *v0;
  NSString v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  char v9;

  v1 = String._bridgeToObjectiveC()();
  v2 = (uint64_t)objc_msgSend(v0, "stringForKey:", v1);

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

    if (v3 == 49 && v5 == 0xE100000000000000)
    {
      v2 = 1835819363;
      v7 = 0xE100000000000000;
      goto LABEL_9;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(49, 0xE100000000000000, v3, v5, 0) & 1) != 0)
    {
      v2 = 1835819363;
      v7 = v5;
LABEL_9:
      swift_bridgeObjectRelease(v7);
      return v2;
    }
    v2 = 0x7465697571;
    if (v3 == 50 && v5 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
    }
    else
    {
      v9 = _stringCompareWithSmolCheck(_:_:expecting:)(50, 0xE100000000000000, v3, v5, 0);
      swift_bridgeObjectRelease(v5);
      if ((v9 & 1) == 0)
        return 0;
    }
  }
  return v2;
}

void sub_108E70(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "BookEPUB_CurrentThemePersistence_themeIdentifier");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_108ED4(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setBookEPUB_CurrentThemePersistence_themeIdentifier:");

}

double sub_108F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  sub_5B5E4();
  swift_retain();
  static OS_dispatch_queue.dispatchAsyncOnMainIfNeeded(block:)(sub_109EA0, a3);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

double sub_108F74(uint64_t a1)
{
  uint64_t v1;
  double result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  if (swift_weakLoadStrong(v1))
  {
    sub_109070();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t CurrentThemePersistence.deinit()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = v0;
  v2 = *(void **)(v0 + 32);
  if (v2)
  {
    v3 = v2;
    dispatch thunk of NSKeyValueObservation.invalidate()();

  }
  swift_release(*(_QWORD *)(v1 + 16));

  return v1;
}

uint64_t CurrentThemePersistence.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;

  v1 = v0;
  v2 = *(void **)(v0 + 32);
  if (v2)
  {
    v3 = v2;
    dispatch thunk of NSKeyValueObservation.invalidate()();

  }
  swift_release(*(_QWORD *)(v1 + 16));

  return swift_deallocClassInstance(v1, 41, 7);
}

id sub_109070()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  char v6;
  uint64_t v7;

  result = objc_msgSend(*(id *)(v0 + 24), "BookEPUB_CurrentThemePersistence_themeIdentifier");
  if (result)
  {
    v2 = result;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v5 = v4;

    result = (id)sub_10973C(v3, v5);
    if (result != 6)
    {
      v6 = (char)result;
      CurrentValueSubject.value.getter(&v7);
      __asm { BR              X11 }
    }
  }
  return result;
}

uint64_t sub_1092AC()
{
  uint64_t v0;
  unint64_t v1;

  v0 = sub_319AC(&qword_3BC7F8);
  v1 = sub_109DB4();
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t sub_1092F8()
{
  uint64_t v1;

  CurrentValueSubject.value.getter(&v1);
  return v1;
}

void sub_109328(char a1, __n128 a2)
{
  char v3;

  v3 = a1;
  CurrentValueSubject.value.setter(&v3, a2);
  __asm { BR              X10 }
}

void sub_109388()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0xE500000000000000);
  objc_msgSend(v0, "setBookEPUB_CurrentThemePersistence_themeIdentifier:", v1);

}

void (*sub_109420(_QWORD *a1))(uint64_t a1, __n128 a2)
{
  uint64_t v1;

  *a1 = v1;
  CurrentValueSubject.value.getter(a1 + 1);
  return sub_109458;
}

void sub_109458(uint64_t a1, __n128 a2)
{
  sub_109328(*(_BYTE *)(a1 + 8), a2);
}

uint64_t NSUserDefaults.BookEPUB_CurrentThemePersistence_themeIdentifier.getter()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "stringForKey:", v1);

  if (!v2)
    return 0;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void NSUserDefaults.BookEPUB_CurrentThemePersistence_themeIdentifier.setter(uint64_t a1, uint64_t a2)
{
  void *v2;
  NSString v4;
  id v5;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setValue:forKey:", v4, v5);
  swift_unknownObjectRelease(v4);

}

const char *sub_1096FC()
{
  return "BookEPUB_CurrentThemePersistence_themeIdentifier";
}

uint64_t sub_109710()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_109734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_108F30(a1, a2, v2);
}

uint64_t sub_10973C(uint64_t a1, void *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::String v21;

  swift_bridgeObjectRetain(a2);
  v21._countAndFlagsBits = a1;
  v21._object = a2;
  v4 = _s8BookEPUB0A9ThemeTypeO8rawValueACSgSS_tcfC_0(v21);
  if (v4 == 6)
  {
    if (a1 == 0x31656D656874 && a2 == (void *)0xE600000000000000)
    {
      v5 = 0xE600000000000000;
LABEL_11:
      swift_bridgeObjectRelease(v5);
      return 0;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x31656D656874, 0xE600000000000000, a1, a2, 0) & 1) != 0)
      goto LABEL_7;
    if (a1 == 0x6F5F31656D656874 && a2 == (void *)0xEF65646972726576)
    {
      v5 = 0xEF65646972726576;
      goto LABEL_11;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F5F31656D656874, 0xEF65646972726576, a1, a2, 0) & 1) != 0)
    {
LABEL_7:
      v5 = (unint64_t)a2;
      goto LABEL_11;
    }
    if (a1 == 0x32656D656874 && a2 == (void *)0xE600000000000000)
    {
      v8 = 0xE600000000000000;
LABEL_22:
      swift_bridgeObjectRelease(v8);
      return 1;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x32656D656874, 0xE600000000000000, a1, a2, 0) & 1) != 0)
      goto LABEL_18;
    if (a1 == 0x6F5F32656D656874 && a2 == (void *)0xEF65646972726576)
    {
      v8 = 0xEF65646972726576;
      goto LABEL_22;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F5F32656D656874, 0xEF65646972726576, a1, a2, 0) & 1) != 0)
    {
LABEL_18:
      v8 = (unint64_t)a2;
      goto LABEL_22;
    }
    if (a1 == 0x33656D656874 && a2 == (void *)0xE600000000000000)
    {
      v9 = 0xE600000000000000;
LABEL_32:
      swift_bridgeObjectRelease(v9);
      return 2;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x33656D656874, 0xE600000000000000, a1, a2, 0) & 1) != 0)
      goto LABEL_28;
    if (a1 == 0x6F5F33656D656874 && a2 == (void *)0xEF65646972726576)
    {
      v9 = 0xEF65646972726576;
      goto LABEL_32;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F5F33656D656874, 0xEF65646972726576, a1, a2, 0) & 1) != 0)
    {
LABEL_28:
      v9 = (unint64_t)a2;
      goto LABEL_32;
    }
    if (a1 == 0x34656D656874 && a2 == (void *)0xE600000000000000)
    {
      v10 = 0xE600000000000000;
LABEL_42:
      swift_bridgeObjectRelease(v10);
      return 3;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x34656D656874, 0xE600000000000000, a1, a2, 0) & 1) != 0)
      goto LABEL_38;
    if (a1 == 0x6F5F34656D656874 && a2 == (void *)0xEF65646972726576)
    {
      v10 = 0xEF65646972726576;
      goto LABEL_42;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F5F34656D656874, 0xEF65646972726576, a1, a2, 0) & 1) != 0)
    {
LABEL_38:
      v10 = (unint64_t)a2;
      goto LABEL_42;
    }
    if (a1 == 0x35656D656874 && a2 == (void *)0xE600000000000000)
    {
      v11 = 0xE600000000000000;
LABEL_53:
      swift_bridgeObjectRelease(v11);
      return 4;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x35656D656874, 0xE600000000000000, a1, a2, 0) & 1) != 0)
      goto LABEL_52;
    if (a1 == 0x6F5F35656D656874 && a2 == (void *)0xEF65646972726576)
    {
      v11 = 0xEF65646972726576;
      goto LABEL_53;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F5F35656D656874, 0xEF65646972726576, a1, a2, 0) & 1) != 0)
    {
LABEL_52:
      v11 = (unint64_t)a2;
      goto LABEL_53;
    }
    if (a1 == 0x36656D656874 && a2 == (void *)0xE600000000000000)
    {
      v12 = 0xE600000000000000;
LABEL_63:
      swift_bridgeObjectRelease(v12);
      return 5;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x36656D656874, 0xE600000000000000, a1, a2, 0) & 1) != 0)
      goto LABEL_62;
    if (a1 == 0x6F5F36656D656874 && a2 == (void *)0xEF65646972726576)
    {
      v12 = 0xEF65646972726576;
      goto LABEL_63;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F5F36656D656874, 0xEF65646972726576, a1, a2, 0) & 1) != 0)
    {
LABEL_62:
      v12 = (unint64_t)a2;
      goto LABEL_63;
    }
    if (qword_3B5780 != -1)
      swift_once(&qword_3B5780, sub_108950);
    v13 = type metadata accessor for Logger(0);
    sub_555F0(v13, (uint64_t)qword_3BC7E0);
    v14 = swift_bridgeObjectRetain(a2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v20 = v18;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain(a2);
      v19 = sub_33524(a1, (unint64_t)a2, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v17 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl(&dword_0, v15, v16, "Unrecognized persisted theme type value: %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    return 6;
  }
  else
  {
    v6 = v4;
    swift_bridgeObjectRelease(a2);
  }
  return v6;
}

unint64_t sub_109DB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BC800;
  if (!qword_3BC800)
  {
    v1 = sub_31A38(&qword_3BC7F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for CurrentValueSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3BC800);
  }
  return result;
}

_QWORD *sub_109E00@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = CurrentValueSubject.value.getter(&v3);
  *a1 = v3;
  return result;
}

void sub_109E3C(char *a1, __n128 a2)
{
  sub_109328(*a1, a2);
}

uint64_t type metadata accessor for CurrentThemePersistence()
{
  return objc_opt_self(_TtC8BookEPUB23CurrentThemePersistence);
}

uint64_t method lookup function for CurrentThemePersistence(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for CurrentThemePersistence);
}

uint64_t dispatch thunk of CurrentThemePersistence.__allocating_init(userDefaults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of SearchBarResponderState.resignFirstResponder.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

double sub_109EA0()
{
  uint64_t v0;

  return sub_108F74(v0);
}

void sub_109EA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[4];

  v3 = v2;
  if (*(_QWORD *)(a1 + 16))
  {
    sub_3F1FC(a1, (uint64_t)v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13 = *v2;
    *v2 = 0x8000000000000000;
    sub_17D820((uint64_t)v15, a2, isUniquelyReferenced_nonNull_native);
    v6 = *v2;
    *v2 = v13;
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    sub_52128(a1, &qword_3BCF58);
    v7 = sub_3B7F8(a2);
    if ((v8 & 1) != 0)
    {
      v9 = v7;
      v10 = swift_isUniquelyReferenced_nonNull_native(*v2);
      v11 = *v2;
      v14 = *v3;
      *v3 = 0x8000000000000000;
      if ((v10 & 1) == 0)
      {
        sub_F2420();
        v11 = v14;
      }
      sub_3F1FC(*(_QWORD *)(v11 + 56) + (v9 << 6), (uint64_t)v15);
      sub_1881E8(v9, v11);
      v12 = *v3;
      *v3 = v11;
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      memset(v15, 0, sizeof(v15));
    }
    sub_52128((uint64_t)v15, &qword_3BCF58);
  }
}

double sub_109FBC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  unint64_t v8;
  double result;
  char v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v16 = *v2;
    *v2 = 0x8000000000000000;
    sub_17E544(a1, a2, isUniquelyReferenced_nonNull_native);
    v7 = *v2;
    *v2 = v16;
  }
  else
  {
    v8 = sub_3B7F8(a2);
    if ((v10 & 1) == 0)
      return result;
    v11 = v8;
    v12 = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13 = *v2;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!v12)
    {
      sub_F39A4();
      v13 = v17;
    }
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v11);
    sub_188538(v11, v13);
    v15 = *v3;
    *v3 = v13;
    swift_bridgeObjectRelease(v14);
    v7 = v15;
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

_QWORD *sub_10A09C(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  _QWORD *result;
  uint64_t *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_F51C4(0, v1, 0);
  v3 = 0;
  result = _swiftEmptyArrayStorage;
  v22 = v1;
  v23 = a1 + 32;
  do
  {
    v5 = (uint64_t *)(v23 + 16 * v3);
    v6 = v5[1];
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      v25 = result;
      v8 = *v5;
      swift_bridgeObjectRetain(v6);
      sub_F531C(0, v7, 0);
      v9 = _swiftEmptyArrayStorage[2];
      v10 = 48 * v9 + 32;
      v24 = v6;
      v11 = (_OWORD *)(v6 + 56);
      do
      {
        v12 = *((_QWORD *)v11 - 3);
        v13 = *(v11 - 1);
        v14 = *v11;
        v15 = _swiftEmptyArrayStorage[3];
        v16 = v9 + 1;
        if (v9 >= v15 >> 1)
        {
          v20 = *v11;
          v21 = *(v11 - 1);
          sub_F531C(v15 > 1, v9 + 1, 1);
          v14 = v20;
          v13 = v21;
        }
        _swiftEmptyArrayStorage[2] = v16;
        v17 = (char *)_swiftEmptyArrayStorage + v10;
        *(_QWORD *)v17 = v8;
        *((_QWORD *)v17 + 1) = v12;
        v10 += 48;
        v11 = (_OWORD *)((char *)v11 + 40);
        v9 = v16;
        *((_OWORD *)v17 + 1) = v13;
        *((_OWORD *)v17 + 2) = v14;
        --v7;
      }
      while (v7);
      swift_bridgeObjectRelease(v24);
      v1 = v22;
      result = v25;
    }
    v26 = result;
    v19 = result[2];
    v18 = result[3];
    if (v19 >= v18 >> 1)
    {
      sub_F51C4(v18 > 1, v19 + 1, 1);
      result = v26;
    }
    ++v3;
    result[2] = v19 + 1;
    result[v19 + 4] = _swiftEmptyArrayStorage;
  }
  while (v3 != v1);
  return result;
}

void sub_10A260(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = (_QWORD *)sub_1D350C(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_1117CC(v4);
  *a1 = v2;
}

uint64_t sub_10A2C8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3BC900);
  sub_555F0(v0, (uint64_t)qword_3BC900);
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v1 = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000000002C6E50, 0xD00000000000001BLL, 0x80000000002ECFF0);
  return Logger.init(_:)(v1);
}

double sub_10A368(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Strong;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t ObjectType;
  uint64_t v16;

  v2 = v1;
  v4 = type metadata accessor for BooksFeatureFlag(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v2 + 17) = a1;
  Strong = swift_unknownObjectWeakLoadStrong(v2 + 296);
  if (Strong)
  {
    v10 = Strong;
    v11 = *(_QWORD *)(v2 + 304);
    (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for BooksFeatureFlag.readingLoupe(_:), v4);
    v12 = sub_34284(&qword_3BCE80, (uint64_t (*)(uint64_t))&type metadata accessor for BooksFeatureFlag, (uint64_t)&protocol conformance descriptor for BooksFeatureFlag);
    v13 = sub_3DCC0(&qword_3BCE88, &qword_3BCE90, (uint64_t)&protocol conformance descriptor for StaticFeatureFlagsKey<A>);
    LOBYTE(v12) = RawRepresentable<>.isEnabled.getter(v4, v12, v13);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v12 & 1) != 0)
      v14 = *(_BYTE *)(v2 + 17) ^ 1;
    else
      v14 = 0;
    ObjectType = swift_getObjectType(v10);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 136))(v14 & 1, ObjectType, v11);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11) & 1) != 0
      && *(_BYTE *)(v2 + 17) == 1)
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 72))(0, ObjectType, v11);
    }
    *(_QWORD *)&result = swift_unknownObjectRelease(v10).n128_u64[0];
  }
  return result;
}

void sub_10A4E8(void **a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2 + 184;
  swift_beginAccess(v3, v5, 1, 0);
  swift_unknownObjectWeakAssign(v3, v2);
  v4 = v2;
  sub_10A54C();

}

void sub_10A54C()
{
  uint64_t v0;
  uint64_t Strong;
  void *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  char v13;
  uint64_t v14;
  char v15[24];

  swift_beginAccess(v0 + 184, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 184);
  if (Strong)
  {
    v2 = (void *)Strong;
    v3 = swift_unknownObjectWeakLoadStrong(v0 + 344);
    if (!v3)
    {

      return;
    }
    v4 = (char *)v3;
    v5 = (char *)objc_msgSend(v2, "state");
    if ((unint64_t)(v5 - 3) < 3)
    {
      v8 = &v4[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingSettingsProvider];
      swift_beginAccess(&v4[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingSettingsProvider], &v14, 0, 0);
      v9 = swift_unknownObjectWeakLoadStrong(v8);
      if (v9)
      {
        v10 = v9;
        v11 = *((_QWORD *)v8 + 1);
        ObjectType = swift_getObjectType(v9);
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(ObjectType, v11);
        sub_16CED8(v13);

        swift_unknownObjectRelease(v10);
        return;
      }
      goto LABEL_12;
    }
    if ((unint64_t)(v5 - 1) < 2)
    {
      v6 = *(void **)&v4[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_slidePanRecognizer];
      if (v6)
        objc_msgSend(v6, "setEnabled:", 0);
      v4[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_isCurlPanRecognizerEnabled] = 0;
      v7 = *(void **)&v4[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_curlPanRecognizer];
      if (v7)
        objc_msgSend(v7, "setEnabled:", 0);
LABEL_12:

      return;
    }

  }
}

uint64_t sub_10A6AC()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 184, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 184);
}

void sub_10A6EC(void *a1)
{
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v1 + 184, v3, 1, 0);
  swift_unknownObjectWeakAssign(v1 + 184, a1);
  sub_10A54C();

}

void (*sub_10A744(_QWORD *a1))(id **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess(v1 + 184, v3, 33, 0);
  v3[3] = swift_unknownObjectWeakLoadStrong(v1 + 184);
  return sub_10A7AC;
}

void sub_10A7AC(id **a1, char a2)
{
  id *v3;
  id v4;

  v3 = *a1;
  v4 = (*a1)[3];
  swift_unknownObjectWeakAssign((char *)(*a1)[4] + 184, v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);

    sub_10A54C();
  }
  free(v3);
}

uint64_t sub_10A81C()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 224, v2, 0, 0);
  return swift_weakLoadStrong(v0 + 224);
}

double sub_10A85C(uint64_t a1)
{
  double result;

  sub_1122F4(a1);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

