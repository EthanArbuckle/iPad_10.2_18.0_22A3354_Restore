void sub_40A4(id a1)
{
  BEContentBlockingRules *v1;
  void *v2;

  v1 = objc_alloc_init(BEContentBlockingRules);
  v2 = (void *)qword_3C19B0;
  qword_3C19B0 = (uint64_t)v1;

}

void sub_4504(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

void sub_4528(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  id WeakRetained;
  void *v10;
  id v11;
  void *v12;
  int v13;
  id v14;

  v5 = a2;
  v6 = a3;
  if (v5)
  {
    objc_msgSend(*(id *)(a1 + 32), "removeAllContentRuleLists");
    objc_msgSend(*(id *)(a1 + 32), "addContentRuleList:", v5);
    objc_msgSend(*(id *)(a1 + 40), "setBe_appliedContentBlockingRule:", *(_QWORD *)(a1 + 72));
  }
  if (v6)
  {
    v7 = _BookEPUBLog();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v13 = 138412290;
      v14 = v6;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "Error creating content blocking rule list - %@", (uint8_t *)&v13, 0xCu);
    }

  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cachedRules"));
  objc_msgSend(v10, "setObject:forKeyedSubscript:", v5, *(_QWORD *)(a1 + 48));

  v11 = objc_retainBlock(*(id *)(a1 + 56));
  v12 = v11;
  if (v11)
    (*((void (**)(id, uint64_t, id))v11 + 2))(v11, 1, v6);

}

void sub_4670(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  __objc2_class **v8;
  void *v9;
  id v10;
  NSObject *v11;
  void *v12;
  int v13;
  void *v14;

  v5 = a2;
  v6 = a3;
  if (!v5)
  {
    if (*(_QWORD *)(a1 + 56) <= 1uLL)
      v7 = 1;
    else
      v7 = *(_QWORD *)(a1 + 56);
    if (v7 == 1)
    {
      v8 = &off_376730;
    }
    else
    {
      if (v7 != 2)
        goto LABEL_11;
      v8 = off_376728;
    }
    v9 = (void *)objc_claimAutoreleasedReturnValue(-[__objc2_class source](*v8, "source"));
    if (v9)
    {
LABEL_14:
      objc_msgSend(*(id *)(a1 + 32), "compileContentRuleListForIdentifier:encodedContentRuleList:completionHandler:", *(_QWORD *)(a1 + 40), v9, *(_QWORD *)(a1 + 48));

      goto LABEL_15;
    }
LABEL_11:
    v10 = _BookEPUBLog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v7));
      v13 = 138412290;
      v14 = v12;
      _os_log_impl(&dword_0, v11, OS_LOG_TYPE_ERROR, "Unsupported content blocking rule '%@'", (uint8_t *)&v13, 0xCu);

    }
    v9 = 0;
    goto LABEL_14;
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
LABEL_15:

}

void ITEpubContainerParser::ITEpubContainerParser(ITEpubContainerParser *this)
{
  uint64_t v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v1 = off_377538;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 144) = 0;
}

{
  uint64_t v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v1 = off_377538;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_DWORD *)(v1 + 144) = 0;
}

void ITEpubContainerParser::~ITEpubContainerParser(void **this)
{
  *this = off_377538;
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler((ITEpubXmlParseHandler *)this);
}

{
  ITEpubContainerParser::~ITEpubContainerParser(this);
  operator delete();
}

uint64_t ITEpubContainerParser::StartElement(CFMutableArrayRef *this, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t result;
  const __CFString *Value;

  ITEpubXmlParseHandler::StartElement(this, a2, a3);
  result = ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("rootfile"));
  if ((_DWORD)result)
  {
    ++*((_DWORD *)this + 36);
    if (*((char *)this + 143) < 0)
    {
      if (this[16])
        return result;
    }
    else if (*((_BYTE *)this + 143))
    {
      return result;
    }
    result = (uint64_t)ITEpubXmlParseHandler::doesAttributeMatch((ITEpubXmlParseHandler *)this, CFSTR("media-type"), CFSTR("application/oebps-package+xml"), a3);
    if ((_DWORD)result)
    {
      Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("full-path"));
      return ITStrUtil::toString(Value, (uint64_t)(this + 15));
    }
  }
  return result;
}

std::string *ITEpubContainerParser::opfFile(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

id sub_4CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  _QWORD v18[5];
  _QWORD v19[5];

  v18[0] = CFSTR("forDisplay");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a1));
  v19[0] = v9;
  v18[1] = CFSTR("level");
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2));
  v19[1] = v10;
  v18[2] = CFSTR("imageFilter");
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3));
  v19[2] = v11;
  v18[3] = CFSTR("singleTapEnabled");
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a4));
  v19[3] = v12;
  v18[4] = CFSTR("lineGuideEnabled");
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a5));
  v19[4] = v13;
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v19, v18, 5));

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v14, 4, 0));
  v16 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v15, 4);

  return v16;
}

id BookEPUBBundle()
{
  if (qword_3C19C8 != -1)
    dispatch_once(&qword_3C19C8, &stru_377588);
  return (id)qword_3C19C0;
}

void sub_5248(id a1)
{
  NSBundle *v1;
  uint64_t v2;
  void *v3;

  v1 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BEBundleClass));
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = (void *)qword_3C19C0;
  qword_3C19C0 = v2;

}

void ITEpubPageListParser::ITEpubPageListParser(ITEpubPageListParser *this, ITEpubOpfParser *a2)
{
  _QWORD *v3;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *v3 = off_3775B8;
  v3[15] = 0;
  v3[16] = 0;
  v3[17] = a2;
  if (a2)
    ITRetain::retain(a2);
}

void sub_52D8(_Unwind_Exception *a1)
{
  ITEpubXmlParseHandler *v1;

  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(v1);
  _Unwind_Resume(a1);
}

void ITEpubPageListParser::~ITEpubPageListParser(ITEpubPageListParser *this)
{
  ITRetain *v2;
  ITRetain *v3;

  *(_QWORD *)this = off_3775B8;
  v2 = (ITRetain *)*((_QWORD *)this + 17);
  if (v2)
  {
    ITRetain::release(v2);
    *((_QWORD *)this + 17) = 0;
  }
  v3 = (ITRetain *)*((_QWORD *)this + 16);
  if (v3)
  {
    ITRetain::release(v3);
    *((_QWORD *)this + 16) = 0;
  }
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubPageListParser::~ITEpubPageListParser(this);
  operator delete();
}

void sub_5340(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void ITEpubPageListParser::StartNode(ITEpubPageListParser *this, CFStringRef theString, const __CFDictionary *a3)
{
  ITRetain *v6;
  const __CFString *Value;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;

  if (*((_DWORD *)this + 30))
  {
    if (*((_QWORD *)this + 16))
    {
      if (ITEpubXmlParseHandler::doesNodeMatch(this, theString, CFSTR("pageTarget")))
      {
        ++*((_DWORD *)this + 31);
        CFDictionaryGetValue(a3, CFSTR("id"));
        operator new();
      }
      if (ITEpubXmlParseHandler::doesNodeMatch(this, theString, CFSTR("content")))
      {
        Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("src"));
        if (Value)
        {
          v9 = Value;
          v10 = ITEpubXmlParseHandler::copyHrefStrippingHash(Value, v8);
          if (v10)
          {
            v11 = v10;
            if (CFStringGetLength(v10))
              ITNavPoint::setContentFile(*((ITNavPoint **)this + 16), v9);
            CFRelease(v11);
          }
        }
      }
    }
  }
  else if (ITEpubXmlParseHandler::doesNodeMatch(this, theString, CFSTR("pageList")))
  {
    v6 = (ITRetain *)*((_QWORD *)this + 16);
    if (v6)
    {
      ITRetain::release(v6);
      *((_QWORD *)this + 16) = 0;
    }
    operator new();
  }
}

void sub_555C()
{
  operator delete();
}

void ITEpubPageListParser::EndNode(ITEpubPageListParser *this, const __CFString *a2, const char *a3)
{
  int v6;
  ITNavPoint *v7;
  uint64_t v8;
  const __CFString *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  ITNavPoint *v13;
  _BOOL4 doesNodeMatch;
  CFStringRef v15;

  if (*((_DWORD *)this + 30) && *((_QWORD *)this + 16))
  {
    if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("pageList")))
    {
      *((_DWORD *)this + 30) = 0;
    }
    else if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("pageTarget")))
    {
      v6 = *((_DWORD *)this + 31);
      if (v6)
      {
        *((_DWORD *)this + 31) = v6 - 1;
        v7 = (ITNavPoint *)*((_QWORD *)this + 16);
        v8 = *((_QWORD *)v7 + 5);
        if (v8)
          *((_QWORD *)this + 16) = v8;
        v9 = (const __CFString *)ITNavPoint::contentFileIncludingHash(v7);
        if (!v9 || !CFStringGetLength(v9))
        {
          if (v7 == *((ITNavPoint **)this + 16))
          {
            *((_QWORD *)this + 16) = 0;
          }
          else
          {
            ITRetain::retain(v7);
            ITNavPoint::removeChild(*((_QWORD **)this + 16), v7);
            v10 = *((_QWORD *)v7 + 3) - *((_QWORD *)v7 + 2);
            if ((int)(v10 >> 3) >= 1)
            {
              v11 = 0;
              v12 = (v10 >> 3);
              do
              {
                v13 = (ITNavPoint *)ITNavPoint::childAtIndex(v7, v11++);
                ITNavPoint::addChild(*((ITNavPoint **)this + 16), v13);
              }
              while (v12 != v11);
            }
          }
          ITRetain::release(v7);
        }
      }
    }
    else
    {
      doesNodeMatch = ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("text"));
      if (a3)
      {
        if (doesNodeMatch)
        {
          if (*a3)
          {
            v15 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
            ITNavPoint::setContentName(*((ITNavPoint **)this + 16), v15);
            if (v15)
              CFRelease(v15);
          }
        }
      }
    }
  }
}

ITRetain *ITEpubPageListParser::copyPageLists(ITEpubPageListParser *this)
{
  ITRetain *result;

  result = (ITRetain *)*((_QWORD *)this + 16);
  if (result)
  {
    ITRetain::retain(result);
    return (ITRetain *)*((_QWORD *)this + 16);
  }
  return result;
}

void sub_5B04(id a1)
{
  BETestDriver *v1;
  void *v2;

  v1 = objc_alloc_init(BETestDriver);
  v2 = (void *)qword_3C19D0;
  qword_3C19D0 = (uint64_t)v1;

}

void sub_5C3C(id a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "infoDictionary"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKey:", CFSTR("CFBundleShortVersionString")));
  v3 = (void *)qword_3C19E0;
  qword_3C19E0 = v2;

}

id sub_64B0(uint64_t a1, uint64_t a2)
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v6;
  _QWORD v8[4];
  CGRect v9;

  +[BEJavascriptUtilities rectFromRectDictionary:](BEJavascriptUtilities, "rectFromRectDictionary:", a2);
  x = v9.origin.x;
  y = v9.origin.y;
  width = v9.size.width;
  height = v9.size.height;
  if (CGRectIsNull(v9))
  {
    v6 = 0;
  }
  else
  {
    *(CGFloat *)v8 = x;
    *(CGFloat *)&v8[1] = y;
    *(CGFloat *)&v8[2] = width;
    *(CGFloat *)&v8[3] = height;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithBytes:objCType:](NSValue, "valueWithBytes:objCType:", v8, "{CGRect={CGPoint=dd}{CGSize=dd}}"));
  }
  return v6;
}

id sub_669C(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  void *v13;
  _QWORD v15[4];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  CGRect v21;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v17;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v17 != v7)
          objc_enumerationMutation(v4);
        +[BEJavascriptUtilities rectFromRectDictionary:](BEJavascriptUtilities, "rectFromRectDictionary:", *(_QWORD *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v8));
        x = v21.origin.x;
        y = v21.origin.y;
        width = v21.size.width;
        height = v21.size.height;
        if (!CGRectIsNull(v21))
        {
          *(CGFloat *)v15 = x;
          *(CGFloat *)&v15[1] = y;
          *(CGFloat *)&v15[2] = width;
          *(CGFloat *)&v15[3] = height;
          v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithBytes:objCType:](NSValue, "valueWithBytes:objCType:", v15, "{CGRect={CGPoint=dd}{CGSize=dd}}"));
          objc_msgSend(v3, "addObject:", v13);

        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v6);
  }

  return v3;
}

void ITNavPoint::ITNavPoint(ITNavPoint *this)
{
  uint64_t v1;

  ITRetain::ITRetain(this);
  *(_QWORD *)v1 = off_377700;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 96) = 0;
}

{
  uint64_t v1;

  ITRetain::ITRetain(this);
  *(_QWORD *)v1 = off_377700;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_QWORD *)(v1 + 96) = 0;
}

void ITNavPoint::~ITNavPoint(ITNavPoint *this, ITRetain *a2)
{
  unsigned int **v3;
  unsigned int **v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  void *v12;

  *(_QWORD *)this = off_377700;
  v3 = (unsigned int **)*((_QWORD *)this + 2);
  v4 = (unsigned int **)*((_QWORD *)this + 3);
  while (v3 != v4)
    ITRetain::for_each_release(*v3++, a2);
  *((_QWORD *)this + 5) = 0;
  v5 = (const void *)*((_QWORD *)this + 6);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 6) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 7);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 7) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 8);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 8) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 9);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 9) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 10);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 10) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 11);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 11) = 0;
  }
  v11 = (const void *)*((_QWORD *)this + 12);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)this + 12) = 0;
  }
  v12 = (void *)*((_QWORD *)this + 2);
  if (v12)
  {
    *((_QWORD *)this + 3) = v12;
    operator delete(v12);
  }
  ITRetain::~ITRetain(this);
}

{
  ITNavPoint::~ITNavPoint(this, a2);
  operator delete();
}

void ITNavPoint::setRelativeHrefBase(ITNavPoint *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 11);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 11) = cf;
  if (cf)
    CFRetain(cf);
}

void ITNavPoint::setNavPointId(ITNavPoint *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 6);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 6) = cf;
  if (cf)
    CFRetain(cf);
}

void ITNavPoint::setNavPointType(ITNavPoint *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 7);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 7) = cf;
  if (cf)
    CFRetain(cf);
}

void ITNavPoint::setNavPointValue(ITNavPoint *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 8);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 8) = cf;
  if (cf)
    CFRetain(cf);
}

const __CFString *ITNavPoint::setContentFile(ITNavPoint *this, CFStringRef originalString)
{
  const void *v4;
  const __CFString *result;

  v4 = (const void *)*((_QWORD *)this + 9);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 9) = 0;
  }
  result = ITEpubXmlParseHandler::createHrefString(originalString, originalString);
  *((_QWORD *)this + 9) = result;
  return result;
}

void ITNavPoint::setContentName(ITNavPoint *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 10);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 10) = cf;
  if (cf)
    CFRetain(cf);
}

void ITNavPoint::setContentHTML(ITNavPoint *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 12);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 12) = cf;
  if (cf)
    CFRetain(cf);
}

uint64_t ITNavPoint::countHref(ITNavPoint *this, CFStringRef theString2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  const __CFString *v7;

  v3 = *((_QWORD *)this + 2);
  v2 = *((_QWORD *)this + 3);
  if (v3 == v2)
    return 0;
  v6 = 0;
  do
  {
    v7 = *(const __CFString **)(*(_QWORD *)v3 + 72);
    if (v7)
    {
      if (CFStringCompare(v7, theString2, 0))
        v6 = v6;
      else
        v6 = (v6 + 1);
      v2 = *((_QWORD *)this + 3);
    }
    v3 += 8;
  }
  while (v3 != v2);
  return v6;
}

uint64_t ITNavPoint::contentFileIncludingHash(ITNavPoint *this)
{
  return *((_QWORD *)this + 9);
}

void ITNavPoint::addChild(ITNavPoint *this, ITNavPoint *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  if (a2)
  {
    ITRetain::retain(a2);
    v4 = *((_QWORD *)this + 4);
    v5 = (_QWORD *)*((_QWORD *)this + 3);
    if ((unint64_t)v5 >= v4)
    {
      v7 = *((_QWORD *)this + 2);
      v8 = ((uint64_t)v5 - v7) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_797C();
      v9 = v4 - v7;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)sub_7A04((uint64_t)this + 32, v11);
      else
        v12 = 0;
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v6 = v13 + 8;
      v16 = (char *)*((_QWORD *)this + 2);
      v15 = (char *)*((_QWORD *)this + 3);
      if (v15 != v16)
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v13 - 1) = v17;
          v13 -= 8;
        }
        while (v15 != v16);
        v15 = (char *)*((_QWORD *)this + 2);
      }
      *((_QWORD *)this + 2) = v13;
      *((_QWORD *)this + 3) = v6;
      *((_QWORD *)this + 4) = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v5 = a2;
      v6 = v5 + 1;
    }
    *((_QWORD *)this + 3) = v6;
    *((_QWORD *)a2 + 5) = this;
  }
}

uint64_t ITNavPoint::setParent(uint64_t this, ITNavPoint *a2)
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

uint64_t ITNavPoint::childAtIndex(ITNavPoint *this, unint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (a2 >= (*((_QWORD *)this + 3) - v2) >> 3)
    return 0;
  else
    return *(_QWORD *)(v2 + 8 * a2);
}

_QWORD *ITNavPoint::removeChild(_QWORD *this, ITNavPoint *a2)
{
  uint64_t v2;
  ITNavPoint **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  size_t v8;

  v2 = this[2];
  v3 = (ITNavPoint **)this[3];
  if ((ITNavPoint **)v2 != v3)
  {
    v4 = this;
    v5 = -v2;
    while (*(ITNavPoint **)v2 != a2)
    {
      v2 += 8;
      v5 -= 8;
      if ((ITNavPoint **)v2 == v3)
        return this;
    }
    this = (_QWORD *)ITRetain::release(a2);
    v6 = -v5;
    v7 = (const void *)(8 - v5);
    v8 = v4[3] - (8 - v5);
    if (v8)
      this = memmove((void *)v6, v7, v8);
    v4[3] = v6 + v8;
  }
  return this;
}

CFStringRef ITNavPoint::copyContentFileWithoutHash(const __CFString **this, const __CFString *a2)
{
  return ITEpubXmlParseHandler::copyHrefStrippingHash(this[9], a2);
}

void sub_797C()
{
  sub_7990("vector");
}

void sub_7990(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_79E0(exception, a1);
}

void sub_79CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_79E0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void *sub_7A04(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_7A38();
  return operator new(8 * a2);
}

void sub_7A38()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

id CFStringGetXmlCharPtr(__CFString *a1)
{
  return -[__CFString UTF8String](objc_retainAutorelease(a1), "UTF8String");
}

void sub_7AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ITEpubXmlParseDelegate;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_7BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_7C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_7D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id ITParseXMLInObjectiveCWithData(ITEpubXmlParseHandler *a1, const __CFData *a2)
{
  ITEpubXmlParseDelegate *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v4 = objc_opt_new(ITEpubXmlParseDelegate);
  -[ITEpubXmlParseDelegate setDecoder:](v4, "setDecoder:", a1);
  v5 = objc_msgSend(objc_alloc((Class)NSXMLParser), "initWithData:", a2);
  objc_msgSend(v5, "setDelegate:", v4);
  objc_msgSend(v5, "setShouldProcessNamespaces:", 1);
  objc_msgSend(v5, "parse");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "parserError"));
  v7 = v6;
  if (v6)
    v8 = objc_msgSend(v6, "code");
  else
    v8 = 0;
  -[ITEpubXmlParseDelegate setDecoder:](v4, "setDecoder:", 0);
  objc_msgSend(v5, "setDelegate:", 0);

  return v8;
}

void sub_7E10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void GR7MfHLOwbW53iI3X2X0XHFzhK::GR7MfHLOwbW53iI3X2X0XHFzhK(GR7MfHLOwbW53iI3X2X0XHFzhK *this, const char *a2)
{
  uint64_t v4;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v4 = off_377738;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_QWORD *)(v4 + 160) = 0;
  *((_QWORD *)this + 15) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (a2)
  {
    if (*a2)
      *((_QWORD *)this + 20) = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  }
}

void sub_9010(_Unwind_Exception *a1)
{
  ITEpubXmlParseHandler *v1;

  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(v1);
  _Unwind_Resume(a1);
}

void GR7MfHLOwbW53iI3X2X0XHFzhK::~GR7MfHLOwbW53iI3X2X0XHFzhK(GR7MfHLOwbW53iI3X2X0XHFzhK *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  *(_QWORD *)this = off_377738;
  v2 = (const void *)*((_QWORD *)this + 15);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 15) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 16);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 16) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 17);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 17) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 18);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 18) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 19);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 19) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 20);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 20) = 0;
  }
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  GR7MfHLOwbW53iI3X2X0XHFzhK::~GR7MfHLOwbW53iI3X2X0XHFzhK(this);
  operator delete();
}

void GR7MfHLOwbW53iI3X2X0XHFzhK::StartElement(GR7MfHLOwbW53iI3X2X0XHFzhK *this, const __CFString *a2, const __CFDictionary *a3)
{
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *Value;
  const void *v11;
  const void *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFStringRef v15;
  const __CFString *v16;
  __CFString *Mutable;
  CFRange v18;

  ITEpubXmlParseHandler::StartElement((CFMutableArrayRef *)this, a2, a3);
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("EncryptedData")))
  {
    v6 = (const void *)*((_QWORD *)this + 16);
    if (v6)
    {
      CFRelease(v6);
      *((_QWORD *)this + 16) = 0;
    }
    v7 = (const void *)*((_QWORD *)this + 17);
    if (v7)
    {
      CFRelease(v7);
      *((_QWORD *)this + 17) = 0;
    }
    v8 = (const void *)*((_QWORD *)this + 18);
    if (v8)
    {
      CFRelease(v8);
      *((_QWORD *)this + 18) = 0;
    }
    v9 = (const void *)*((_QWORD *)this + 19);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)this + 19) = 0;
    }
    Value = CFDictionaryGetValue(a3, CFSTR("deenc:compression"));
    if (Value || (Value = CFDictionaryGetValue(a3, CFSTR("compression"))) != 0)
    {
      *((_QWORD *)this + 19) = Value;
LABEL_17:
      CFRetain(Value);
    }
  }
  else
  {
    if (!ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("EncryptionMethod")))
    {
      if (!ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("CipherReference")))
        return;
      v12 = (const void *)*((_QWORD *)this + 17);
      if (v12)
      {
        CFRelease(v12);
        *((_QWORD *)this + 17) = 0;
      }
      v13 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("URI"));
      v15 = ITEpubXmlParseHandler::copyHrefStrippingHash(v13, v14);
      v16 = v15;
      if (*((_QWORD *)this + 20))
      {
        Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
        CFStringAppend(Mutable, v16);
        v18.length = CFStringGetLength(*((CFStringRef *)this + 20)) + 1;
        v18.location = 0;
        CFStringFindAndReplace(Mutable, *((CFStringRef *)this + 20), &stru_38FF08, v18, 0);
        *((_QWORD *)this + 17) = Mutable;
        if (!v16)
          return;
      }
      else
      {
        *((_QWORD *)this + 17) = v15;
        if (!v15)
          return;
        CFRetain(v15);
      }
      CFRelease(v16);
      return;
    }
    v11 = (const void *)*((_QWORD *)this + 16);
    if (v11)
    {
      CFRelease(v11);
      *((_QWORD *)this + 16) = 0;
    }
    Value = CFDictionaryGetValue(a3, CFSTR("Algorithm"));
    *((_QWORD *)this + 16) = Value;
    if (Value)
      goto LABEL_17;
  }
}

void GR7MfHLOwbW53iI3X2X0XHFzhK::EndElement(GR7MfHLOwbW53iI3X2X0XHFzhK *this, const __CFString *a2)
{
  __CFDictionary *Mutable;
  const void *v5;
  const void *v6;
  const void *v7;
  const char *v8;

  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("EncryptedData")))
  {
    if (*((_QWORD *)this + 16) && *((_QWORD *)this + 17))
    {
      Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionaryAddValue(Mutable, CFSTR("encryptionAlgorithm"), *((const void **)this + 16));
      v5 = (const void *)*((_QWORD *)this + 18);
      if (v5)
        CFDictionaryAddValue(Mutable, CFSTR("fairplay-id"), v5);
      v6 = (const void *)*((_QWORD *)this + 19);
      if (v6)
        CFDictionaryAddValue(Mutable, CFSTR("compressionAlgorithm"), v6);
      CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 15), *((const void **)this + 17), Mutable);
      CFRelease(Mutable);
    }
  }
  else if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("KeyName")))
  {
    v7 = (const void *)*((_QWORD *)this + 18);
    if (v7)
    {
      CFRelease(v7);
      *((_QWORD *)this + 18) = 0;
    }
    v8 = (char *)this + 72;
    if (*((char *)this + 95) < 0)
      v8 = *(const char **)v8;
    *((_QWORD *)this + 18) = CFStringCreateWithCString(kCFAllocatorDefault, v8, 0x8000100u);
  }
  ITEpubXmlParseHandler::EndElement((CFArrayRef *)this, a2);
}

void sub_9544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_955C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_956C(uint64_t a1)
{

}

void sub_9574(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 64), "objectForKeyedSubscript:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_966C(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 48), "copy");
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 64), "setObject:forKeyedSubscript:", v2, *(_QWORD *)(a1 + 40));

}

void ITBlissFolder::ITBlissFolder(ITBlissFolder *this, const __CFString *a2, const __CFString *a3)
{
  _QWORD *v3;

  ITEpubFolder::ITEpubFolder(this, a2, a3);
  *v3 = &off_3777E8;
}

{
  _QWORD *v3;

  ITEpubFolder::ITEpubFolder(this, a2, a3);
  *v3 = &off_3777E8;
}

BOOL ITBlissFolder::isMimeCorrect(CFStringRef *this)
{
  unsigned __int8 v1;
  uint64_t (**v2)();
  int v4;
  int v5;
  ITBlissFolder *v6;

  v1 = atomic_load((unsigned __int8 *)&qword_3C19F8);
  v2 = off_3C1000;
  if ((v1 & 1) == 0)
  {
    v6 = (ITBlissFolder *)this;
    v4 = __cxa_guard_acquire(&qword_3C19F8);
    v2 = off_3C1000;
    v5 = v4;
    this = (CFStringRef *)v6;
    if (v5)
    {
      qword_3C19F0 = strlen(aApplicationXIb);
      __cxa_guard_release(&qword_3C19F8);
      v2 = off_3C1000;
      this = (CFStringRef *)v6;
    }
  }
  return ITEpubFolder::isMimeCorrect(this[2], (__CFString *)aApplicationXIb, (const char *)v2[318]);
}

const __CFString *ITBlissFolder::defaultExtension(ITBlissFolder *this)
{
  return CFSTR("ibooks");
}

void sub_98C8(ITEpubFolder *a1)
{
  ITEpubFolder::~ITEpubFolder(a1);
  operator delete();
}

uint64_t sub_98EC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 328);
}

const void *sub_98F4(uint64_t a1)
{
  const void *result;

  result = *(const void **)(a1 + 16);
  if (result)
  {
    CFRetain(result);
    return *(const void **)(a1 + 16);
  }
  return result;
}

const void *sub_9920(uint64_t a1)
{
  const void *result;

  result = *(const void **)(a1 + 24);
  if (result)
  {
    CFRetain(result);
    return *(const void **)(a1 + 24);
  }
  return result;
}

uint64_t sub_994C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 224) = a2;
  return result;
}

uint64_t __BookContentLayoutControllerLogsLogLevelEnabled()
{
  return 1;
}

void _BookContentLayoutControllerLogsSetLogToLevel(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = a1;
  v5 = sub_9A10();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9 = objc_msgSend(v6, "mutableCopy");

  objc_msgSend(v9, "setObject:forKeyedSubscript:", v3, v4);
  v7 = objc_msgSend(v9, "copy");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v8, "setObject:forKey:", v7, CFSTR("BookContentLayoutControllerLogs"));

}

id sub_9A10()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "objectForKey:", CFSTR("BookContentLayoutControllerLogs")));
  v2 = v1;
  if (!v1)
    v1 = &__NSDictionary0__struct;
  v3 = v1;

  return v3;
}

id _BookContentLayoutControllerLogsLevelForLog(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = sub_9A10();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v1));

  return v4;
}

void ITEpubAppleDisplayOptionsParser::ITEpubAppleDisplayOptionsParser(ITEpubAppleDisplayOptionsParser *this)
{
  uint64_t v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v1 = off_3778D0;
  *(_DWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 128) = 0;
}

{
  uint64_t v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v1 = off_3778D0;
  *(_DWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 128) = 0;
}

void ITEpubAppleDisplayOptionsParser::~ITEpubAppleDisplayOptionsParser(ITEpubAppleDisplayOptionsParser *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *(_QWORD *)this = off_3778D0;
  v2 = (const void *)*((_QWORD *)this + 18);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 18) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 16);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 16) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 17);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 17) = 0;
  }
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubAppleDisplayOptionsParser::~ITEpubAppleDisplayOptionsParser(this);
  operator delete();
}

uint64_t ITEpubAppleDisplayOptionsParser::StartElement(CFMutableArrayRef *this, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t result;
  CFMutableArrayRef v7;
  const __CFString *Value;
  CFMutableArrayRef v9;
  const __CFString *v10;
  CFMutableArrayRef v11;

  ITEpubXmlParseHandler::StartElement(this, a2, a3);
  result = ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("display_options"));
  if ((_DWORD)result)
  {
    *((_DWORD *)this + 30) = 1;
    v7 = this[18];
    if (v7)
    {
      CFRelease(v7);
      this[18] = 0;
    }
    result = (uint64_t)CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    this[18] = (CFMutableArrayRef)result;
  }
  else if (*((_DWORD *)this + 30))
  {
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("platform")))
    {
      Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("name"));
      v9 = this[16];
      if (v9)
      {
        CFRelease(v9);
        this[16] = 0;
      }
      result = CFStringGetLength(Value);
      if (result)
      {
        if (Value)
          result = (uint64_t)CFRetain(Value);
        this[16] = (CFMutableArrayRef)Value;
      }
    }
    else
    {
      result = ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("option"));
      if ((_DWORD)result)
      {
        v10 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("name"));
        v11 = this[17];
        if (v11)
        {
          CFRelease(v11);
          this[17] = 0;
        }
        result = CFStringGetLength(v10);
        if (result)
        {
          if (v10)
            result = (uint64_t)CFRetain(v10);
          this[17] = (CFMutableArrayRef)v10;
        }
      }
    }
  }
  return result;
}

void ITEpubAppleDisplayOptionsParser::EndElement(ITEpubAppleDisplayOptionsParser *this, const __CFString *a2)
{
  const void *v4;
  const char *v5;
  CFStringRef v6;
  const void *v7;
  void *Value;
  const void *v9;

  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("display_options")))
  {
    *((_DWORD *)this + 30) = 0;
    goto LABEL_3;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("platform")))
  {
    v4 = (const void *)*((_QWORD *)this + 16);
    if (v4)
    {
      CFRelease(v4);
      *((_QWORD *)this + 16) = 0;
    }
    goto LABEL_3;
  }
  if (!ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("option")))
    goto LABEL_3;
  v5 = (char *)this + 72;
  if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 95))
      goto LABEL_14;
LABEL_13:
    v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
    goto LABEL_15;
  }
  if (*((_QWORD *)this + 10))
  {
    v5 = *(const char **)v5;
    goto LABEL_13;
  }
LABEL_14:
  v6 = 0;
LABEL_15:
  if (*((_DWORD *)this + 30))
  {
    v7 = (const void *)*((_QWORD *)this + 16);
    if (v7)
    {
      if (*((_QWORD *)this + 17) && v6)
      {
        Value = (void *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 18), v7);
        if (!Value)
        {
          Value = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 18), *((const void **)this + 16), Value);
          CFRelease(Value);
        }
        CFDictionarySetValue((CFMutableDictionaryRef)Value, *((const void **)this + 17), v6);
      }
    }
  }
  v9 = (const void *)*((_QWORD *)this + 17);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 17) = 0;
  }
  if (v6)
    CFRelease(v6);
LABEL_3:
  ITEpubXmlParseHandler::EndElement((CFArrayRef *)this, a2);
}

const __CFDictionary *ITEpubAppleDisplayOptionsParser::platformOptions(uint64_t a1, int a2)
{
  const __CFDictionary *result;
  const __CFString *v4;

  result = *(const __CFDictionary **)(a1 + 144);
  if (result)
  {
    switch(a2)
    {
      case 2:
        result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("iphone"));
        if (result)
          return result;
        result = *(const __CFDictionary **)(a1 + 144);
        v4 = CFSTR("iPhone");
        return (const __CFDictionary *)CFDictionaryGetValue(result, v4);
      case 1:
        result = (const __CFDictionary *)CFDictionaryGetValue(result, CFSTR("ipad"));
        if (result)
          return result;
        result = *(const __CFDictionary **)(a1 + 144);
        v4 = CFSTR("iPad");
        return (const __CFDictionary *)CFDictionaryGetValue(result, v4);
      case 0:
        v4 = CFSTR("*");
        return (const __CFDictionary *)CFDictionaryGetValue(result, v4);
    }
    return 0;
  }
  return result;
}

void sub_A648(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;

  v2 = _BookEPUBLog();
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "styleManager"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "font"));
    v9 = 138543362;
    v10 = v5;
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_DEFAULT, "Attempting deferred #fontReg of #fontFamily '%{public}@'", (uint8_t *)&v9, 0xCu);

  }
  objc_msgSend(*(id *)(a1 + 40), "be_willProcessDeferredFontRegistration");
  v6 = *(void **)(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "styleManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fontRegistrationHandler"));
  objc_msgSend(v6, "be_configureFontWithStyleManager:completion:", v7, v8);

}

id sub_A964(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "be_fontRegistrationCompleted:", a2);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_msgSend(*(id *)(a1 + 32), "setAttemptingFontRegistration:", 0);
  return _objc_msgSend(*(id *)(a1 + 32), "be_processPendingFontRegistration");
}

void sub_AF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, char a19)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_AF40(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  int v17;
  uint64_t v18;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v5 = WeakRetained;
  if (!WeakRetained)
    goto LABEL_12;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "fontsAttemptingRegistration"));
  objc_msgSend(v6, "removeObject:", *(_QWORD *)(a1 + 32));

  v7 = _BookEPUBLog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  v9 = v8;
  if (a2)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v17 = 138543362;
      v18 = v10;
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_DEFAULT, "Success #fontReg #fontFamily '%{public}@'", (uint8_t *)&v17, 0xCu);
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "registeredFonts"));
    objc_msgSend(v11, "addObject:", *(_QWORD *)(a1 + 32));

    objc_msgSend(v5, "be_fontFamilySuccessfullyRegistered:", *(_QWORD *)(a1 + 32));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    {
      v12 = _BookEPUBLog();
      v13 = objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        v14 = *(_QWORD *)(a1 + 32);
        v17 = 138543362;
        v18 = v14;
        _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, "Skipping #fontReg Completion due to timeout for #fontFamily '%{public}@'", (uint8_t *)&v17, 0xCu);
      }

      goto LABEL_14;
    }
    v16 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
LABEL_13:
    v16();
    goto LABEL_14;
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    v15 = *(_QWORD *)(a1 + 32);
    v17 = 138543362;
    v18 = v15;
    _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "Failure #fontReg #fontFamily '%{public}@'", (uint8_t *)&v17, 0xCu);
  }

  objc_msgSend(v5, "be_fontFamilyFailedToRegister:", *(_QWORD *)(a1 + 32));
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
LABEL_12:
    v16 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
    goto LABEL_13;
  }
LABEL_14:

}

void sub_C5EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_C610(uint64_t a1, int a2)
{
  id WeakRetained;
  id v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v5 = _BookEPUBLog();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = v6;
    if (a2)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v13 = 138543362;
        v14 = v8;
        v9 = "Success ThemePreview #fontReg #fontFamily '%{public}@'";
        v10 = v7;
        v11 = OS_LOG_TYPE_DEFAULT;
LABEL_7:
        _os_log_impl(&dword_0, v10, v11, v9, (uint8_t *)&v13, 0xCu);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = 138543362;
      v14 = v12;
      v9 = "Failure ThemePreview #fontReg #fontFamily '%{public}@'";
      v10 = v7;
      v11 = OS_LOG_TYPE_ERROR;
      goto LABEL_7;
    }

  }
}

UIColor *__cdecl sub_C7A0(id a1, UITraitCollection *a2)
{
  UITraitCollection *v2;
  void *v3;
  char *v4;
  uint64_t v5;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBlueColor](UIColor, "systemBlueColor"));
  v4 = -[UITraitCollection userInterfaceStyle](v2, "userInterfaceStyle");

  if (v4 == (_BYTE *)&dword_0 + 2)
  {
    v5 = objc_claimAutoreleasedReturnValue(+[UIColor colorWithRed:green:blue:alpha:](UIColor, "colorWithRed:green:blue:alpha:", 0.274509804, 0.576470588, 1.0, 1.0));

    v3 = (void *)v5;
  }
  return (UIColor *)v3;
}

id sub_C8E0(uint64_t a1)
{
  objc_super v3;

  v3.receiver = *(id *)(a1 + 32);
  v3.super_class = (Class)_BEFixedLayoutWKWebView;
  objc_msgSendSuper2(&v3, "setFrame:", *(double *)(a1 + 40), *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64));
  return objc_msgSend(*(id *)(a1 + 32), "be_applyViewportArgumentsIfNeeded");
}

void sub_D1C4(id a1)
{
  qword_3C1A00 = (uint64_t)NSClassFromString(CFSTR("_UIPageViewControllerContentView"));
}

void sub_D210(id a1)
{
  objc_class *v1;

  v1 = +[UIView bepageCurlViewClass](UIView, "bepageCurlViewClass");
  if (v1)
    BESwizzleInstanceMethods(v1, "pointInside:withEvent:", "be_curlContentViewPointInside:withEvent:");
  +[_UIPageCurl be_swizzlePageCurlFilter](_UIPageCurl, "be_swizzlePageCurlFilter");
}

void sub_D284(id a1)
{
  objc_class *v1;

  v1 = (objc_class *)objc_opt_class(_UIPageCurl);
  BESwizzleInstanceMethods(v1, "_newCurlFilter", "bepageCurlHack_newFilter");
  BESwizzleInstanceMethods(v1, "_newAnimationForState:withKeyPath:duration:fromValue:", "bepageCurlHack_newAnimationForState:withKeyPath:duration:fromValue:");
}

void sub_D554(id a1)
{
  BEPageCurlConfig *v1;
  void *v2;

  v1 = objc_alloc_init(BEPageCurlConfig);
  v2 = (void *)qword_3C1A20;
  qword_3C1A20 = (uint64_t)v1;

}

id _BookEPUBLog()
{
  if (qword_3C1A38 != -1)
    dispatch_once(&qword_3C1A38, &stru_377B20);
  return (id)qword_3C1A30;
}

void sub_D86C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create("com.apple.iBooks", "BookEPUB");
  v2 = (void *)qword_3C1A30;
  qword_3C1A30 = (uint64_t)v1;

}

uint64_t ITStrUtil::toString(CFStringRef theString, uint64_t a2)
{
  CFIndex Length;
  CFIndex v5;
  std::string::value_type *v6;
  uint64_t v7;
  _BYTE v9[256];

  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
    if (theString)
      goto LABEL_3;
    return 0;
  }
  **(_BYTE **)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!theString)
    return 0;
LABEL_3:
  Length = CFStringGetLength(theString);
  v5 = 5 * Length;
  if ((unint64_t)(5 * Length) < 0x101)
  {
    v6 = v9;
    v5 = 256;
  }
  else
  {
    v6 = (std::string::value_type *)malloc_type_malloc(5 * Length, 0x7768EFB5uLL);
    if (!v6)
      return 1;
  }
  if (CFStringGetCString(theString, v6, v5, 0x8000100u))
  {
    std::string::assign((std::string *)a2, v6);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  if (v6 != v9)
    free(v6);
  return v7;
}

std::string *ITStrUtil::trim(std::string *a1, char *__s)
{
  char *v3;
  int v4;
  _BYTE *v5;
  std::string *v6;
  std::string::size_type size;
  std::string *result;
  size_t v9;
  _BYTE *v10;
  std::string::size_type v11;
  int v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  size_t v16;

  if (!__s || (v3 = __s, !*__s))
    v3 = "\t \r\n";
  v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  v5 = (_BYTE *)a1->__r_.__value_.__r.__words[0];
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v4 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  result = (std::string *)strlen(v3);
  v9 = (size_t)result;
  v10 = (char *)&v6[-1].__r_.__value_.__s + 23;
  do
  {
    if (!size)
    {
      if (v4 < 0)
      {
        *v5 = 0;
        a1->__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        a1->__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&a1->__r_.__value_.__s + 23) = 0;
      }
      return result;
    }
    v11 = size;
    if (!v9)
      break;
    result = (std::string *)memchr(v3, (char)v10[size--], v9);
  }
  while (result);
  std::string::erase(a1, v11, 0xFFFFFFFFFFFFFFFFLL);
  v12 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v12 >= 0)
    v13 = a1;
  else
    v13 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v12 >= 0)
    v14 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    v14 = a1->__r_.__value_.__l.__size_;
  result = (std::string *)strlen(v3);
  if (v14)
  {
    v15 = v13;
    v16 = (size_t)result;
    if (result)
    {
      while (1)
      {
        result = (std::string *)memchr(v3, v15->__r_.__value_.__s.__data_[0], v16);
        if (!result)
          break;
        v15 = (std::string *)((char *)v15 + 1);
        if (!--v14)
          return result;
      }
    }
    if ((char *)v15 - (char *)v13 != -1)
      return std::string::erase(a1, 0, (char *)v15 - (char *)v13);
  }
  return result;
}

void ITEpubMediaOverlayParser::ITEpubMediaOverlayParser(ITEpubMediaOverlayParser *this, const char *a2)
{
  uint64_t v3;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v3 = off_377B50;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_QWORD *)(v3 + 248) = 0;
  if (a2)
  {
    if (*a2)
      *(_QWORD *)(v3 + 120) = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  }
}

void sub_DF60(_Unwind_Exception *a1)
{
  ITEpubXmlParseHandler *v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = (void *)*((_QWORD *)v1 + 29);
  if (v5)
  {
    *((_QWORD *)v1 + 30) = v5;
    operator delete(v5);
  }
  sub_2B5CD0(v3, v2, (uint64_t)v1);
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(v1);
  _Unwind_Resume(a1);
}

void ITEpubMediaOverlayParser::~ITEpubMediaOverlayParser(ITEpubMediaOverlayParser *this)
{
  const void *v2;
  const void *v3;
  CFTypeRef *v4;
  CFTypeRef *v5;
  void *v6;
  void *v7;

  *(_QWORD *)this = off_377B50;
  v2 = (const void *)*((_QWORD *)this + 15);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 15) = 0;
  }
  ITEpubMediaOverlayParser::clearBodyMemory((const void ***)this);
  v4 = (CFTypeRef *)*((_QWORD *)this + 29);
  v5 = (CFTypeRef *)*((_QWORD *)this + 30);
  if (v4 != v5)
  {
    do
      ITRetain::for_each_cfrelease(*v4++, v3);
    while (v4 != v5);
    v4 = (CFTypeRef *)*((_QWORD *)this + 29);
  }
  *((_QWORD *)this + 30) = v4;
  if (v4)
    operator delete(v4);
  v6 = (void *)*((_QWORD *)this + 26);
  if (v6)
  {
    *((_QWORD *)this + 27) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 23);
  if (v7)
  {
    *((_QWORD *)this + 24) = v7;
    operator delete(v7);
  }
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubMediaOverlayParser::~ITEpubMediaOverlayParser(this);
  operator delete();
}

void ITEpubMediaOverlayParser::clearBodyMemory(const void ***this)
{
  const void *v2;
  const void **v3;
  const void **v4;
  const void *v5;
  const void **v6;
  const void **v7;
  const void *v8;

  ITEpubMediaOverlayParser::clearParMemory((ITEpubMediaOverlayParser *)this);
  v3 = this[23];
  v4 = this[24];
  while (v3 != v4)
  {
    v5 = *v3++;
    ITRetain::for_each_cfrelease(v5, v2);
  }
  v6 = this[26];
  v7 = this[27];
  if (v6 != v7)
  {
    do
    {
      v8 = *v6++;
      ITRetain::for_each_cfrelease(v8, v2);
    }
    while (v6 != v7);
    v6 = this[26];
  }
  this[24] = this[23];
  this[27] = v6;
}

void ITEpubMediaOverlayParser::clearParMemory(ITEpubMediaOverlayParser *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  *((_DWORD *)this + 33) = 0;
  v2 = (const void *)*((_QWORD *)this + 18);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 18) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 17);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 17) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 19);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 19) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 20);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 20) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 21);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 21) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 22);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 22) = 0;
  }
}

void ITEpubMediaOverlayParser::clearSeqMemory(ITEpubMediaOverlayParser *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 24);
  if (v2 != *((_QWORD *)this + 23))
  {
    CFRelease(*(CFTypeRef *)(v2 - 8));
    *((_QWORD *)this + 24) -= 8;
  }
  v3 = *((_QWORD *)this + 27);
  if (v3 != *((_QWORD *)this + 26))
  {
    CFRelease(*(CFTypeRef *)(v3 - 8));
    *((_QWORD *)this + 27) -= 8;
  }
}

void ITEpubMediaOverlayParser::handleSeqElementAttributes(ITEpubMediaOverlayParser *this, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  unint64_t v8;
  const __CFString **v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  const __CFString **v17;
  char *v18;
  char *v19;
  char *v20;
  const __CFString *v21;
  unint64_t v22;
  const __CFString **v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  const __CFString **v31;
  char *v32;
  char *v33;
  char *v34;
  const __CFString *v35;

  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("epub:textref"));
  v5 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("epub:type"));
  if (!Value)
    Value = &stru_38FF08;
  if (!v5 || (v6 = v5, !CFStringGetLength(v5)))
  {
    v7 = *((_QWORD *)this + 27);
    if (v7 == *((_QWORD *)this + 26))
      v6 = &stru_38FF08;
    else
      v6 = *(const __CFString **)(v7 - 8);
  }
  CFRetain(Value);
  v8 = *((_QWORD *)this + 25);
  v9 = (const __CFString **)*((_QWORD *)this + 24);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *((_QWORD *)this + 23);
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      sub_797C();
    v13 = v8 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)sub_7A04((uint64_t)this + 200, v15);
    else
      v16 = 0;
    v17 = (const __CFString **)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = Value;
    v10 = v17 + 1;
    v20 = (char *)*((_QWORD *)this + 23);
    v19 = (char *)*((_QWORD *)this + 24);
    if (v19 != v20)
    {
      do
      {
        v21 = (const __CFString *)*((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = (char *)*((_QWORD *)this + 23);
    }
    *((_QWORD *)this + 23) = v17;
    *((_QWORD *)this + 24) = v10;
    *((_QWORD *)this + 25) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = Value;
    v10 = v9 + 1;
  }
  *((_QWORD *)this + 24) = v10;
  CFRetain(v6);
  v22 = *((_QWORD *)this + 28);
  v23 = (const __CFString **)*((_QWORD *)this + 27);
  if ((unint64_t)v23 >= v22)
  {
    v25 = *((_QWORD *)this + 26);
    v26 = ((uint64_t)v23 - v25) >> 3;
    if ((unint64_t)(v26 + 1) >> 61)
      sub_797C();
    v27 = v22 - v25;
    v28 = v27 >> 2;
    if (v27 >> 2 <= (unint64_t)(v26 + 1))
      v28 = v26 + 1;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v29 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v29 = v28;
    if (v29)
      v30 = (char *)sub_7A04((uint64_t)this + 224, v29);
    else
      v30 = 0;
    v31 = (const __CFString **)&v30[8 * v26];
    v32 = &v30[8 * v29];
    *v31 = v6;
    v24 = v31 + 1;
    v34 = (char *)*((_QWORD *)this + 26);
    v33 = (char *)*((_QWORD *)this + 27);
    if (v33 != v34)
    {
      do
      {
        v35 = (const __CFString *)*((_QWORD *)v33 - 1);
        v33 -= 8;
        *--v31 = v35;
      }
      while (v33 != v34);
      v33 = (char *)*((_QWORD *)this + 26);
    }
    *((_QWORD *)this + 26) = v31;
    *((_QWORD *)this + 27) = v24;
    *((_QWORD *)this + 28) = v32;
    if (v33)
      operator delete(v33);
  }
  else
  {
    *v23 = v6;
    v24 = v23 + 1;
  }
  *((_QWORD *)this + 27) = v24;
}

CFTypeRef ITEpubMediaOverlayParser::handleParElementAttributes(ITEpubMediaOverlayParser *this, CFDictionaryRef theDict)
{
  const void *v4;
  const void *Value;
  const void *v6;
  CFTypeRef result;

  *((_DWORD *)this + 33) = 1;
  v4 = (const void *)*((_QWORD *)this + 18);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 18) = 0;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("epub:type"));
  *((_QWORD *)this + 18) = Value;
  if (Value)
    CFRetain(Value);
  v6 = (const void *)*((_QWORD *)this + 17);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 17) = 0;
  }
  result = CFDictionaryGetValue(theDict, CFSTR("id"));
  *((_QWORD *)this + 17) = result;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef ITEpubMediaOverlayParser::handleTextElementAttributes(ITEpubMediaOverlayParser *this, CFDictionaryRef theDict)
{
  const void *v4;
  CFTypeRef result;

  v4 = (const void *)*((_QWORD *)this + 19);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 19) = 0;
  }
  result = CFDictionaryGetValue(theDict, CFSTR("src"));
  *((_QWORD *)this + 19) = result;
  if (result)
    return CFRetain(result);
  return result;
}

CFTypeRef ITEpubMediaOverlayParser::handleAudioElementAttributes(ITEpubMediaOverlayParser *this, CFDictionaryRef theDict)
{
  const void *v4;
  const void *Value;
  const void *v6;
  const void *v7;
  const void *v8;
  CFTypeRef result;

  v4 = (const void *)*((_QWORD *)this + 20);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 20) = 0;
  }
  Value = CFDictionaryGetValue(theDict, CFSTR("src"));
  *((_QWORD *)this + 20) = Value;
  if (Value)
    CFRetain(Value);
  v6 = (const void *)*((_QWORD *)this + 21);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 21) = 0;
  }
  v7 = CFDictionaryGetValue(theDict, CFSTR("clipBegin"));
  *((_QWORD *)this + 21) = v7;
  if (v7)
    CFRetain(v7);
  v8 = (const void *)*((_QWORD *)this + 22);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 22) = 0;
  }
  result = CFDictionaryGetValue(theDict, CFSTR("clipEnd"));
  *((_QWORD *)this + 22) = result;
  if (result)
    return CFRetain(result);
  return result;
}

void ITEpubMediaOverlayParser::StartElement(CFMutableArrayRef *this, const __CFString *a2, const __CFDictionary *a3)
{
  ITEpubXmlParseHandler::StartElement(this, a2, a3);
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("body")))
  {
    *((_DWORD *)this + 32) = 1;
  }
  else if (*((_DWORD *)this + 32))
  {
    if (*((_DWORD *)this + 33))
    {
      if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("text")))
      {
        ITEpubMediaOverlayParser::handleTextElementAttributes((ITEpubMediaOverlayParser *)this, a3);
      }
      else if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("audio")))
      {
        ITEpubMediaOverlayParser::handleAudioElementAttributes((ITEpubMediaOverlayParser *)this, a3);
      }
    }
    else if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("par")))
    {
      ITEpubMediaOverlayParser::handleParElementAttributes((ITEpubMediaOverlayParser *)this, a3);
    }
    else if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("seq")))
    {
      ITEpubMediaOverlayParser::handleSeqElementAttributes((ITEpubMediaOverlayParser *)this, a3);
    }
  }
}

double ITEpubMediaOverlayParser::convertTimeString(ITEpubMediaOverlayParser *this, CFStringRef theString)
{
  CFIndex Length;
  const __CFString *v4;
  double DoubleValue;
  double v6;
  double v7;
  const UniChar *CharactersPtr;
  const char *CStringPtr;
  int64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int64_t v15;
  UniChar v16;
  CFIndex v17;
  UniChar v18;
  int64_t v20;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  UniChar v30[64];
  CFStringRef theStringa;
  const UniChar *v32;
  const char *v33;
  uint64_t v34;
  CFIndex v35;
  int64_t v36;
  int64_t v37;
  CFRange v38;
  CFRange v39;
  CFRange v40;
  CFRange v41;
  CFRange v42;

  Length = CFStringGetLength(theString);
  if (CFStringHasSuffix(theString, CFSTR("ms")))
  {
    v39.length = Length - 2;
    v39.location = 0;
    v4 = CFStringCreateWithSubstring(kCFAllocatorDefault, theString, v39);
    DoubleValue = CFStringGetDoubleValue(v4) / 1000.0;
    if (!v4)
      return DoubleValue;
    goto LABEL_12;
  }
  if (CFStringHasSuffix(theString, CFSTR("s")))
  {
    v40.length = Length - 1;
    v40.location = 0;
    v4 = CFStringCreateWithSubstring(kCFAllocatorDefault, theString, v40);
    DoubleValue = CFStringGetDoubleValue(v4);
    if (!v4)
      return DoubleValue;
    goto LABEL_12;
  }
  if (CFStringHasSuffix(theString, CFSTR("min")))
  {
    v41.length = Length - 3;
    v41.location = 0;
    v4 = CFStringCreateWithSubstring(kCFAllocatorDefault, theString, v41);
    v6 = CFStringGetDoubleValue(v4);
    v7 = 60.0;
    goto LABEL_11;
  }
  if (CFStringHasSuffix(theString, CFSTR("h")))
  {
    v42.length = Length - 1;
    v42.location = 0;
    v4 = CFStringCreateWithSubstring(kCFAllocatorDefault, theString, v42);
    v6 = CFStringGetDoubleValue(v4);
    v7 = 3600.0;
LABEL_11:
    DoubleValue = v6 * v7;
    if (!v4)
      return DoubleValue;
LABEL_12:
    CFRelease(v4);
    return DoubleValue;
  }
  theStringa = theString;
  v34 = 0;
  v35 = Length;
  CharactersPtr = CFStringGetCharactersPtr(theString);
  CStringPtr = 0;
  v32 = CharactersPtr;
  if (!CharactersPtr)
    CStringPtr = CFStringGetCStringPtr(theString, 0x600u);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v36 = 0;
  v37 = 0;
  v33 = CStringPtr;
  while (1)
  {
    v17 = v35;
    if (v35 <= v15)
      break;
    if (v32)
    {
      v18 = v32[v34 + v15];
    }
    else if (v33)
    {
      v18 = v33[v34 + v15];
    }
    else
    {
      if (v37 <= v15 || v11 > v15)
      {
        v20 = v15 - 4;
        if ((unint64_t)v15 < 4)
          v20 = 0;
        if (v20 + 64 < v35)
          v17 = v20 + 64;
        v36 = v20;
        v37 = v17;
        v38.location = v34 + v20;
        v38.length = v17 - v20;
        CFStringGetCharacters(theStringa, v38, v30);
        v11 = v36;
      }
      v18 = v30[v15 - v11];
    }
    ++v15;
    if (v18 <= 0x3Au && ((1 << v18) & 0x400400000000001) != 0)
      goto LABEL_37;
    if ((unsigned __int16)(v18 - 48) > 9u)
    {
LABEL_44:
      if (v12)
        v22 = 1000 * v12;
      else
        v22 = 0;
      return (double)(unint64_t)v22 / 1000.0;
    }
    v13 = v18 + 10 * v13 - 48;
    ++v14;
LABEL_40:
    if (!v18)
      goto LABEL_44;
  }
  v18 = 0;
  ++v15;
LABEL_37:
  if (!v16 || v16 == 58)
  {
    v14 = 0;
    v12 = 60 * v12 + v13;
    v16 = v18;
    v13 = 0;
    goto LABEL_40;
  }
  if (v14 < 4)
  {
    if (v14 != 3)
    {
      v24 = 0;
      v25 = (uint32x4_t)vdupq_n_s32(2 - v14);
      v26.i64[1] = 0x100000001;
      v26.i64[0] = v13 | 0x100000000;
      v27.i64[0] = 0xA0000000ALL;
      v27.i64[1] = 0xA0000000ALL;
      do
      {
        v28 = (int8x16_t)v26;
        v26 = vmulq_s32(v26, v27);
        v24 += 4;
      }
      while (((6 - v14) & 0xFFFFFFFC) != v24);
      v29 = vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v24 - 4), (int8x16_t)xmmword_2E4870), v25), v28, (int8x16_t)v26);
      *(int32x2_t *)v29.i8 = vmul_s32(*(int32x2_t *)v29.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
      v13 = v29.i32[0] * v29.i32[1];
    }
  }
  else
  {
    v23 = v14 + 1;
    do
    {
      v13 /= 10;
      --v23;
    }
    while (v23 > 4);
  }
  v22 = 1000 * v12 + v13;
  return (double)(unint64_t)v22 / 1000.0;
}

void ITEpubMediaOverlayParser::splitString(uint64_t a1, const __CFString *a2, const __CFString *a3, _QWORD *a4)
{
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v6;
  CFIndex Count;
  CFIndex v8;
  const void *ValueAtIndex;
  const void *v10;

  *a4 = 0;
  a4[1] = 0;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(kCFAllocatorDefault, a2, a3);
  if (ArrayBySeparatingStrings)
  {
    v6 = ArrayBySeparatingStrings;
    Count = CFArrayGetCount(ArrayBySeparatingStrings);
    if (Count >= 1)
    {
      v8 = Count;
      ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
      CFRetain(ValueAtIndex);
      *a4 = ValueAtIndex;
      if (v8 != 1)
      {
        v10 = CFArrayGetValueAtIndex(v6, 1);
        CFRetain(v10);
        a4[1] = v10;
      }
    }
    CFRelease(v6);
  }
}

void ITEpubMediaOverlayParser::EndElement(ITEpubMediaOverlayParser *this, const __CFString *a2)
{
  __CFDictionary *Mutable;
  uint64_t v5;
  void *v6;
  void *v7;
  const void *v8;
  ITEpubMediaOverlayParser *v9;
  const __CFString *v10;
  CFNumberRef v11;
  const __CFString *v12;
  CFNumberRef v13;
  uint64_t v14;
  CFNumberRef v15;
  const __CFString *v16;
  const void *v17;
  const __CFString *v18;
  __CFString *v19;
  __CFDictionary *v20;
  unint64_t v21;
  __CFDictionary **v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  const __CFString *v31;
  __CFDictionary **v32;
  char *v33;
  char *v34;
  char *v35;
  __CFDictionary *v36;
  void *value;
  void *v38;

  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("body")))
  {
    *((_DWORD *)this + 32) = 0;
    ITEpubMediaOverlayParser::clearBodyMemory((const void ***)this);
    goto LABEL_3;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("par")) && *((_DWORD *)this + 33))
  {
    if (!*((_QWORD *)this + 19))
    {
LABEL_48:
      ITEpubMediaOverlayParser::clearParMemory(this);
      goto LABEL_3;
    }
    Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionaryAddValue(Mutable, ITEpubMediaOverlayParser_TextSource[0], *((const void **)this + 19));
    *(double *)&value = 0.0;
    v38 = 0;
    ITEpubMediaOverlayParser::splitString(v5, *((const __CFString **)this + 19), CFSTR("#"), &value);
    v6 = value;
    if (*(double *)&value != 0.0)
    {
      CFDictionaryAddValue(Mutable, ITEpubMediaOverlayParser_TextHref[0], value);
      CFRelease(v6);
    }
    v7 = v38;
    if (v38)
    {
      CFDictionaryAddValue(Mutable, ITEpubMediaOverlayParser_TextElement[0], v38);
      CFRelease(v7);
    }
    v8 = (const void *)*((_QWORD *)this + 20);
    if (v8)
    {
      CFDictionaryAddValue(Mutable, ITEpubMediaOverlayParser_AudioSource[0], v8);
      v10 = (const __CFString *)*((_QWORD *)this + 21);
      if (v10)
      {
        *(double *)&value = ITEpubMediaOverlayParser::convertTimeString(v9, v10);
        if (*(double *)&value != 0.0)
        {
          v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &value);
          CFDictionaryAddValue(Mutable, ITEpubMediaOverlayParser_AudioStart[0], v11);
          CFRelease(v11);
        }
      }
      v12 = (const __CFString *)*((_QWORD *)this + 22);
      if (v12)
      {
        *(double *)&value = ITEpubMediaOverlayParser::convertTimeString(v9, v12);
        if (*(double *)&value != 0.0)
        {
          v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberDoubleType, &value);
          CFDictionaryAddValue(Mutable, ITEpubMediaOverlayParser_AudioEnd[0], v13);
          CFRelease(v13);
        }
      }
    }
    v14 = *((_QWORD *)this + 24) - *((_QWORD *)this + 23);
    value = (void *)(v14 >> 3);
    if (v14)
    {
      v15 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &value);
      CFDictionaryAddValue(Mutable, ITEpubMediaOverlayParser_IndentationLevel[0], v15);
      CFRelease(v15);
      v16 = *(const __CFString **)(*((_QWORD *)this + 24) - 8);
      if (CFStringGetLength(v16))
        CFDictionaryAddValue(Mutable, ITEpubMediaOverlayParser_SequenceSource[0], v16);
    }
    v17 = (const void *)*((_QWORD *)this + 17);
    if (v17)
      CFDictionaryAddValue(Mutable, CFSTR("par_id"), v17);
    v18 = (const __CFString *)*((_QWORD *)this + 18);
    if (v18)
    {
      v19 = ITEpubMediaOverlayParser_Category[0];
      v20 = Mutable;
    }
    else
    {
      v30 = *((_QWORD *)this + 27);
      if (v30 == *((_QWORD *)this + 26))
        goto LABEL_26;
      v31 = *(const __CFString **)(v30 - 8);
      if (!CFStringGetLength(v31))
        goto LABEL_26;
      v19 = ITEpubMediaOverlayParser_Category[0];
      v20 = Mutable;
      v18 = v31;
    }
    CFDictionaryAddValue(v20, v19, v18);
LABEL_26:
    v21 = *((_QWORD *)this + 31);
    v22 = (__CFDictionary **)*((_QWORD *)this + 30);
    if ((unint64_t)v22 >= v21)
    {
      v24 = *((_QWORD *)this + 29);
      v25 = ((uint64_t)v22 - v24) >> 3;
      if ((unint64_t)(v25 + 1) >> 61)
        sub_797C();
      v26 = v21 - v24;
      v27 = v26 >> 2;
      if (v26 >> 2 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      if (v28)
        v29 = (char *)sub_7A04((uint64_t)this + 248, v28);
      else
        v29 = 0;
      v32 = (__CFDictionary **)&v29[8 * v25];
      v33 = &v29[8 * v28];
      *v32 = Mutable;
      v23 = v32 + 1;
      v35 = (char *)*((_QWORD *)this + 29);
      v34 = (char *)*((_QWORD *)this + 30);
      if (v34 != v35)
      {
        do
        {
          v36 = (__CFDictionary *)*((_QWORD *)v34 - 1);
          v34 -= 8;
          *--v32 = v36;
        }
        while (v34 != v35);
        v34 = (char *)*((_QWORD *)this + 29);
      }
      *((_QWORD *)this + 29) = v32;
      *((_QWORD *)this + 30) = v23;
      *((_QWORD *)this + 31) = v33;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *v22 = Mutable;
      v23 = v22 + 1;
    }
    *((_QWORD *)this + 30) = v23;
    goto LABEL_48;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("seq")))
    ITEpubMediaOverlayParser::clearSeqMemory(this);
LABEL_3:
  ITEpubXmlParseHandler::EndElement((CFArrayRef *)this, a2);
}

const __CFDictionary *ITEpubMediaOverlayParser::textSourceForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_TextSource[0]);
  return this;
}

const __CFDictionary *ITEpubMediaOverlayParser::textHrefForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_TextHref[0]);
  return this;
}

const __CFDictionary *ITEpubMediaOverlayParser::textElementIdForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_TextElement[0]);
  return this;
}

const __CFDictionary *ITEpubMediaOverlayParser::audioHrefForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_AudioSource[0]);
  return this;
}

const __CFDictionary *ITEpubMediaOverlayParser::audioEndForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_AudioEnd[0]);
  return this;
}

const __CFDictionary *ITEpubMediaOverlayParser::audioStartForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_AudioStart[0]);
  return this;
}

const __CFDictionary *ITEpubMediaOverlayParser::indentationLevelForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_IndentationLevel[0]);
  return this;
}

const __CFDictionary *ITEpubMediaOverlayParser::sequenceSourceForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_SequenceSource[0]);
  return this;
}

const __CFDictionary *ITEpubMediaOverlayParser::categoryForElement(const __CFDictionary *this, const __CFDictionary *a2)
{
  if (this)
    return (const __CFDictionary *)CFDictionaryGetValue(this, ITEpubMediaOverlayParser_Category[0]);
  return this;
}

BOOL BEIsHardwareKeyboardAttached()
{
  return GSEventIsHardwareKeyboardAttached() != 0;
}

void ITEpubOpfParser::ITEpubOpfParser(ITEpubOpfParser *this)
{
  uint64_t v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v1 = off_377BB0;
  *(_BYTE *)(v1 + 412) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_DWORD *)(v1 + 407) = 0;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_BYTE *)(v1 + 464) = 0;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 596) = 0u;
  *(_DWORD *)(v1 + 616) = -1;
  *(_DWORD *)(v1 + 624) = 0;
  *(_QWORD *)(v1 + 632) = 0;
  *(_QWORD *)(v1 + 648) = 0;
  *(_QWORD *)(v1 + 640) = 0;
}

{
  uint64_t v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v1 = off_377BB0;
  *(_BYTE *)(v1 + 412) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_DWORD *)(v1 + 407) = 0;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_OWORD *)(v1 + 344) = 0u;
  *(_OWORD *)(v1 + 360) = 0u;
  *(_OWORD *)(v1 + 376) = 0u;
  *(_OWORD *)(v1 + 392) = 0u;
  *(_BYTE *)(v1 + 464) = 0;
  *(_OWORD *)(v1 + 432) = 0u;
  *(_OWORD *)(v1 + 448) = 0u;
  *(_OWORD *)(v1 + 416) = 0u;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 488) = 0u;
  *(_OWORD *)(v1 + 504) = 0u;
  *(_OWORD *)(v1 + 520) = 0u;
  *(_OWORD *)(v1 + 536) = 0u;
  *(_OWORD *)(v1 + 552) = 0u;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 596) = 0u;
  *(_DWORD *)(v1 + 616) = -1;
  *(_DWORD *)(v1 + 624) = 0;
  *(_QWORD *)(v1 + 632) = 0;
  *(_QWORD *)(v1 + 648) = 0;
  *(_QWORD *)(v1 + 640) = 0;
}

void ITEpubOpfParser::~ITEpubOpfParser(ITEpubOpfParser *this, const void *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  CFTypeRef *v32;
  CFTypeRef *v33;
  void *v34;

  *(_QWORD *)this = off_377BB0;
  v3 = (const void *)*((_QWORD *)this + 39);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 39) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 40);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 40) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 41);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 41) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 42);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 42) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 43);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 43) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 47);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 47) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 48);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 48) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 49);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 49) = 0;
  }
  v11 = (const void *)*((_QWORD *)this + 50);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)this + 50) = 0;
  }
  v12 = (const void *)*((_QWORD *)this + 52);
  if (v12)
  {
    CFRelease(v12);
    *((_QWORD *)this + 52) = 0;
  }
  v13 = (const void *)*((_QWORD *)this + 56);
  if (v13)
  {
    CFRelease(v13);
    *((_QWORD *)this + 56) = 0;
  }
  v14 = (const void *)*((_QWORD *)this + 57);
  if (v14)
  {
    CFRelease(v14);
    *((_QWORD *)this + 57) = 0;
  }
  v15 = (const void *)*((_QWORD *)this + 62);
  if (v15)
  {
    CFRelease(v15);
    *((_QWORD *)this + 62) = 0;
  }
  v16 = (const void *)*((_QWORD *)this + 63);
  if (v16)
  {
    CFRelease(v16);
    *((_QWORD *)this + 63) = 0;
  }
  v17 = (const void *)*((_QWORD *)this + 64);
  if (v17)
  {
    CFRelease(v17);
    *((_QWORD *)this + 64) = 0;
  }
  v18 = (const void *)*((_QWORD *)this + 65);
  if (v18)
  {
    CFRelease(v18);
    *((_QWORD *)this + 65) = 0;
  }
  v19 = (const void *)*((_QWORD *)this + 66);
  if (v19)
  {
    CFRelease(v19);
    *((_QWORD *)this + 66) = 0;
  }
  v20 = (const void *)*((_QWORD *)this + 75);
  if (v20)
  {
    CFRelease(v20);
    *((_QWORD *)this + 75) = 0;
  }
  v21 = (const void *)*((_QWORD *)this + 79);
  if (v21)
  {
    CFRelease(v21);
    *((_QWORD *)this + 79) = 0;
  }
  v22 = (const void *)*((_QWORD *)this + 81);
  if (v22)
  {
    CFRelease(v22);
    *((_QWORD *)this + 81) = 0;
  }
  v23 = (const void *)*((_QWORD *)this + 80);
  if (v23)
  {
    CFRelease(v23);
    *((_QWORD *)this + 80) = 0;
  }
  v24 = (const void *)*((_QWORD *)this + 53);
  if (v24)
  {
    CFRelease(v24);
    *((_QWORD *)this + 53) = 0;
  }
  v25 = (const void *)*((_QWORD *)this + 54);
  if (v25)
  {
    CFRelease(v25);
    *((_QWORD *)this + 54) = 0;
  }
  v26 = (const void *)*((_QWORD *)this + 55);
  if (v26)
  {
    CFRelease(v26);
    *((_QWORD *)this + 55) = 0;
  }
  v27 = (const void *)*((_QWORD *)this + 44);
  if (v27)
  {
    CFRelease(v27);
    *((_QWORD *)this + 44) = 0;
  }
  v28 = (const void *)*((_QWORD *)this + 45);
  if (v28)
  {
    CFRelease(v28);
    *((_QWORD *)this + 45) = 0;
  }
  v29 = (const void *)*((_QWORD *)this + 46);
  if (v29)
  {
    CFRelease(v29);
    *((_QWORD *)this + 46) = 0;
  }
  v30 = (const void *)*((_QWORD *)this + 68);
  if (v30)
  {
    CFRelease(v30);
    *((_QWORD *)this + 68) = 0;
  }
  v31 = (const void *)*((_QWORD *)this + 67);
  if (v31)
  {
    CFRelease(v31);
    *((_QWORD *)this + 67) = 0;
  }
  v32 = (CFTypeRef *)*((_QWORD *)this + 59);
  v33 = (CFTypeRef *)*((_QWORD *)this + 60);
  while (v32 != v33)
    ITRetain::for_each_cfrelease(*v32++, a2);
  if (*((char *)this + 599) < 0)
    operator delete(*((void **)this + 72));
  if (*((char *)this + 575) < 0)
    operator delete(*((void **)this + 69));
  v34 = (void *)*((_QWORD *)this + 59);
  if (v34)
  {
    *((_QWORD *)this + 60) = v34;
    operator delete(v34);
  }
  if (*((char *)this + 311) < 0)
    operator delete(*((void **)this + 36));
  if (*((char *)this + 287) < 0)
    operator delete(*((void **)this + 33));
  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  if (*((char *)this + 239) < 0)
    operator delete(*((void **)this + 27));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubOpfParser::~ITEpubOpfParser(this, a2);
  operator delete();
}

void ITEpubOpfParser::setFirstPageHref(ITEpubOpfParser *this, CFStringRef originalString)
{
  const __CFString *HrefString;
  const __CFString *v4;
  unint64_t v5;
  const __CFString **v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  const __CFString **v14;
  char *v15;
  char *v16;
  char *v17;
  const __CFString *v18;

  if (originalString)
  {
    HrefString = ITEpubXmlParseHandler::createHrefString(originalString, originalString);
    v4 = HrefString;
    v6 = (const __CFString **)*((_QWORD *)this + 60);
    v5 = *((_QWORD *)this + 61);
    if ((unint64_t)v6 >= v5)
    {
      v8 = *((_QWORD *)this + 59);
      v9 = ((uint64_t)v6 - v8) >> 3;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_797C();
      v10 = v5 - v8;
      v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1))
        v11 = v9 + 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v11;
      if (v12)
        v13 = (char *)sub_7A04((uint64_t)this + 488, v12);
      else
        v13 = 0;
      v14 = (const __CFString **)&v13[8 * v9];
      v15 = &v13[8 * v12];
      *v14 = v4;
      v7 = v14 + 1;
      v17 = (char *)*((_QWORD *)this + 59);
      v16 = (char *)*((_QWORD *)this + 60);
      if (v16 != v17)
      {
        do
        {
          v18 = (const __CFString *)*((_QWORD *)v16 - 1);
          v16 -= 8;
          *--v14 = v18;
        }
        while (v16 != v17);
        v16 = (char *)*((_QWORD *)this + 59);
      }
      *((_QWORD *)this + 59) = v14;
      *((_QWORD *)this + 60) = v7;
      *((_QWORD *)this + 61) = v15;
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v6 = HrefString;
      v7 = v6 + 1;
    }
    *((_QWORD *)this + 60) = v7;
  }
}

void ITEpubOpfParser::StartElement(CFMutableArrayRef *this, const __CFString *a2, const __CFDictionary *a3)
{
  const __CFDictionary *v6;
  const __CFDictionary *v7;

  ITEpubXmlParseHandler::StartElement(this, a2, a3);
  if (*((_BYTE *)this + 408))
    goto LABEL_46;
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("manifest")))
  {
    ITEpubOpfParser::StartManifestElement((ITEpubOpfParser *)this, v6);
    return;
  }
  if (*((_BYTE *)this + 408))
  {
LABEL_46:
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("item")))
      ITEpubOpfParser::StartItemElement(this, a3);
    return;
  }
  if (*((_BYTE *)this + 409))
    goto LABEL_8;
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("spine")))
  {
    ITEpubOpfParser::StartSpineElement((uint64_t)this, a3);
  }
  else if (*((_BYTE *)this + 409))
  {
LABEL_8:
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("itemref")))
      ITEpubOpfParser::StartItemRefElement(this, a3);
  }
  if (*((_BYTE *)this + 412))
    goto LABEL_47;
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("guide")))
  {
    *((_BYTE *)this + 412) = 1;
    return;
  }
  if (*((_BYTE *)this + 412))
  {
LABEL_47:
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("reference")))
      ITEpubOpfParser::StartReferenceElement((ITEpubOpfParser *)this, a3);
  }
  else
  {
    if (!*((_BYTE *)this + 410))
    {
      if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("metadata")))
      {
        ITEpubOpfParser::StartMetadataElement((ITEpubOpfParser *)this, v7);
        return;
      }
      if (!*((_BYTE *)this + 410))
        goto LABEL_48;
    }
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("meta")))
    {
      ITEpubOpfParser::StartMetaElement((ITEpubOpfParser *)this, a3);
      return;
    }
    if (*((_BYTE *)this + 410)
      && (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("date"))
       || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:date"))))
    {
      ITEpubOpfParser::StartDateElement((ITEpubOpfParser *)this, a3);
    }
    else
    {
LABEL_48:
      if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("package")))
      {
        ITEpubOpfParser::StartPackageElement((ITEpubOpfParser *)this, a3);
      }
      else if (*((_BYTE *)this + 410))
      {
        if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("identifier")))
        {
          ITEpubOpfParser::StartIdentifierElement((const __CFString *)this, a3);
        }
        else if (*((_BYTE *)this + 410))
        {
          if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("description"))
            || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:description")))
          {
            ITEpubOpfParser::StartDescriptionElement((ITEpubOpfParser *)this, a3);
          }
          else if (*((_BYTE *)this + 410)
                 && (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("contributor"))
                  || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:contributor"))))
          {
            ITEpubOpfParser::StartContributorElement((ITEpubOpfParser *)this, a3);
          }
        }
      }
    }
  }
}

CFMutableDictionaryRef ITEpubOpfParser::StartManifestElement(ITEpubOpfParser *this, const __CFDictionary *a2)
{
  const void *v3;
  const void *v4;
  const void *v5;
  CFMutableDictionaryRef result;

  v3 = (const void *)*((_QWORD *)this + 39);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 39) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 40);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 40) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 41);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 41) = 0;
  }
  *((_QWORD *)this + 41) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  *((_QWORD *)this + 40) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *((_QWORD *)this + 39) = result;
  *((_BYTE *)this + 408) = 1;
  return result;
}

void ITEpubOpfParser::StartItemElement(CFMutableArrayRef *this, CFDictionaryRef theDict)
{
  const __CFString *Value;
  void *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  CFStringRef v9;
  const void *v10;
  CFIndex v11;
  void *v12;
  const __CFString *v13;
  const __CFString *v14;
  CFDictionaryRef v15;
  CFMutableArrayRef v16;
  CFMutableArrayRef v17;
  const __CFString *v18;
  CFMutableArrayRef v19;
  void *values[4];
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *keys[4];
  const __CFString *v25;
  uint64_t v26;
  uint64_t v27;

  if (*((_BYTE *)this + 408))
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("href"));
    v5 = (void *)CFDictionaryGetValue(theDict, CFSTR("id"));
    v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("media-type"));
    if (Value)
    {
      if (v5)
      {
        v8 = v6;
        if (v6)
        {
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v21 = 0;
          v22 = 0;
          v23 = 0;
          v9 = ITEpubXmlParseHandler::copyHrefStrippingHash(Value, v7);
          keys[0] = CFSTR("id");
          keys[1] = CFSTR("unescaped_href");
          values[0] = v5;
          values[1] = (void *)v9;
          keys[2] = CFSTR("href");
          keys[3] = CFSTR("media-type");
          values[2] = (void *)Value;
          values[3] = (void *)v8;
          v10 = CFDictionaryGetValue(theDict, CFSTR("fallback"));
          if (v10)
          {
            v25 = CFSTR("fallback");
            v21 = v10;
            v11 = 5;
          }
          else
          {
            v11 = 4;
          }
          v12 = (void *)CFDictionaryGetValue(theDict, CFSTR("media-overlay"));
          if (v12)
          {
            keys[v11] = CFSTR("media-overlay");
            values[v11++] = v12;
          }
          v13 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("properties"));
          v14 = v13;
          if (v13)
          {
            keys[v11] = CFSTR("properties");
            values[v11++] = (void *)v13;
          }
          v15 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, v11, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          CFArrayAppendValue(this[41], v15);
          CFDictionarySetValue(this[40], v5, v15);
          CFDictionarySetValue(this[39], v9, v15);
          if (v14)
          {
            if (!*((_BYTE *)this + 464) && CFStringFind(v14, CFSTR("nav"), 0).length >= 1)
            {
              v16 = this[57];
              if (v16)
                CFRelease(v16);
              this[57] = (CFMutableArrayRef)v9;
              if (v9)
                CFRetain(v9);
              *((_BYTE *)this + 464) = 1;
            }
            if (!this[65] && CFStringFind(v14, CFSTR("cover-image"), 0).length >= 1)
            {
              v17 = this[66];
              if (v17)
                CFRelease(v17);
              this[66] = (CFMutableArrayRef)v5;
              CFRetain(v5);
              v19 = this[65];
              if (v19)
              {
                CFRelease(v19);
                this[65] = 0;
              }
              this[65] = (CFMutableArrayRef)ITEpubXmlParseHandler::createHrefString(Value, v18);
            }
          }
          if (this[57] || CFStringCompare(v8, CFSTR("application/x-dtbncx+xml"), 0))
          {
            if (!v9)
              goto LABEL_31;
          }
          else
          {
            this[57] = (CFMutableArrayRef)v9;
            if (!v9)
            {
LABEL_31:
              if (v15)
                CFRelease(v15);
              return;
            }
            CFRetain(v9);
          }
          CFRelease(v9);
          goto LABEL_31;
        }
      }
    }
  }
}

uint64_t ITEpubOpfParser::StartSpineElement(uint64_t this, const __CFDictionary *a2)
{
  uint64_t v3;
  const void *v4;
  const void *v5;
  const void *Value;
  const void *v7;

  if (!*(_BYTE *)(this + 409))
  {
    v3 = this;
    v4 = *(const void **)(this + 336);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(v3 + 336) = 0;
    }
    v5 = *(const void **)(v3 + 344);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v3 + 344) = 0;
    }
    *(_QWORD *)(v3 + 336) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    *(_QWORD *)(v3 + 344) = CFSetCreateMutable(kCFAllocatorDefault, 0, &kCFTypeSetCallBacks);
    if (!*(_QWORD *)(v3 + 448) && !*(_BYTE *)(v3 + 464))
    {
      Value = CFDictionaryGetValue(a2, CFSTR("toc"));
      *(_QWORD *)(v3 + 448) = Value;
      if (Value)
        CFRetain(Value);
      else
        *(_QWORD *)(v3 + 448) = CFStringCreateWithCString(kCFAllocatorDefault, "ncx", 0x8000100u);
    }
    v7 = CFDictionaryGetValue(a2, CFSTR("page-progression-direction"));
    *(_QWORD *)(v3 + 424) = v7;
    if (v7)
      CFRetain(v7);
    this = ITEpubXmlParseHandler::childIndexInParent((ITEpubXmlParseHandler *)v3);
    *(_DWORD *)(v3 + 616) = this;
    *(_BYTE *)(v3 + 409) = 1;
  }
  return this;
}

void ITEpubOpfParser::StartItemRefElement(CFSetRef *this, CFDictionaryRef theDict)
{
  const void *Value;
  const __CFString *v5;
  const __CFString *v6;
  _BOOL4 v7;
  CFIndex Count;
  CFIndex v9;
  _BOOL4 v10;
  const CFBooleanRef *v11;
  CFBooleanRef v12;
  CFDictionaryRef v13;
  void *values[2];
  void *keys[2];

  if (*((_BYTE *)this + 409))
  {
    Value = CFDictionaryGetValue(theDict, CFSTR("idref"));
    v5 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("linear"));
    v6 = v5;
    if (v5)
    {
      v7 = CFStringCompare(v5, CFSTR("no"), 1uLL) != kCFCompareEqualTo;
      if (!Value)
        return;
    }
    else
    {
      v7 = 1;
      if (!Value)
        return;
    }
    if (this[42] && this[43])
    {
      if (qword_3C1A40 != -1)
        dispatch_once(&qword_3C1A40, &stru_377BF8);
      Count = CFSetGetCount(this[43]);
      CFSetAddValue(this[43], Value);
      v9 = CFSetGetCount(this[43]);
      v10 = Count != v9 && v7;
      if (v6 && Count == v9)
        v10 = CFStringCompare(v6, CFSTR("yes"), 1uLL) == kCFCompareEqualTo;
      if (v10)
        v11 = &kCFBooleanTrue;
      else
        v11 = &kCFBooleanFalse;
      v12 = *v11;
      keys[0] = CFSTR("linear");
      keys[1] = CFSTR("itemref");
      values[0] = v12;
      values[1] = (void *)Value;
      v13 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFArrayAppendValue(this[42], v13);
      if (v13)
        CFRelease(v13);
    }
  }
}

void ITEpubOpfParser::StartReferenceElement(ITEpubOpfParser *this, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *v5;
  const __CFString *v6;
  const __CFString *v7;
  const __CFString *v8;
  const void *v9;
  const __CFString *v10;
  const __CFString *v11;
  CFComparisonResult v12;
  const void *v13;
  const __CFString *v14;
  const __CFString *v15;

  if (!*((_BYTE *)this + 412))
    return;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("type"));
  if (!Value)
    return;
  v5 = Value;
  if (CFStringCompare(Value, CFSTR("text"), 0) == kCFCompareEqualTo
    || CFStringCompare(v5, CFSTR("start"), 0) == kCFCompareEqualTo
    || CFStringCompare(v5, CFSTR("acknowledgements"), 0) == kCFCompareEqualTo
    || CFStringCompare(v5, CFSTR("dedication"), 0) == kCFCompareEqualTo
    || CFStringCompare(v5, CFSTR("epigraph"), 0) == kCFCompareEqualTo
    || CFStringCompare(v5, CFSTR("foreword"), 0) == kCFCompareEqualTo
    || CFStringCompare(v5, CFSTR("preface"), 0) == kCFCompareEqualTo)
  {
    v8 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("href"));
    ITEpubOpfParser::setFirstPageHref(this, v8);
    return;
  }
  if (CFStringCompare(v5, CFSTR("toc"), 0))
  {
    if (*((_QWORD *)this + 65))
      goto LABEL_12;
    v12 = CFStringCompare(v5, CFSTR("cover"), 0);
    v13 = (const void *)*((_QWORD *)this + 65);
    if (v12)
    {
      if (v13 || CFStringCompare(v5, CFSTR("cover-page"), 0))
      {
LABEL_12:
        if (!*((_QWORD *)this + 62) && CFStringCompare(v5, CFSTR("other.reader-start-page"), 0) == kCFCompareEqualTo)
        {
          v6 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("href"));
          *((_QWORD *)this + 62) = ITEpubXmlParseHandler::createHrefString(v6, v7);
        }
        return;
      }
      v13 = (const void *)*((_QWORD *)this + 65);
    }
    if (v13)
    {
      CFRelease(v13);
      *((_QWORD *)this + 65) = 0;
    }
    v14 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("href"));
    *((_QWORD *)this + 65) = ITEpubXmlParseHandler::createHrefString(v14, v15);
  }
  else
  {
    v9 = (const void *)*((_QWORD *)this + 64);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)this + 64) = 0;
    }
    v10 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("href"));
    *((_QWORD *)this + 64) = ITEpubXmlParseHandler::createHrefString(v10, v11);
  }
}

CFMutableDictionaryRef ITEpubOpfParser::StartMetadataElement(ITEpubOpfParser *this, const __CFDictionary *a2)
{
  const void *v3;
  CFMutableDictionaryRef result;

  *((_BYTE *)this + 410) = 1;
  v3 = (const void *)*((_QWORD *)this + 47);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 47) = 0;
  }
  result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  *((_QWORD *)this + 47) = result;
  return result;
}

const __CFString *ITEpubOpfParser::StartMetaElement(ITEpubOpfParser *this, CFTypeRef cf)
{
  const void *v4;
  const __CFString *Value;
  const __CFString *v6;
  const __CFString *result;
  const __CFString *v8;
  const void *v9;
  const void *v10;
  int v11;
  const void *v12;

  v4 = (const void *)*((_QWORD *)this + 48);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 48) = 0;
  }
  if (cf)
  {
    *((_QWORD *)this + 48) = cf;
    CFRetain(cf);
  }
  Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("property"));
  if (Value)
  {
    v6 = Value;
    result = (const __CFString *)CFStringCompare(Value, CFSTR("dcterms:modified"), 0);
    if (result)
    {
      result = (const __CFString *)CFStringCompare(v6, CFSTR("media:active-class"), 0);
      if (result)
      {
        result = (const __CFString *)CFStringCompare(v6, CFSTR("ebpaj:guide-version"), 0);
        if (result)
        {
          result = (const __CFString *)CFStringCompare(v6, CFSTR("ibooks:cover-writing-mode"), 0);
          if (result)
          {
            result = (const __CFString *)CFStringCompare(v6, CFSTR("ibooks:scroll-axis"), 0);
            if (result)
            {
              if (*((_QWORD *)this + 44) || *((_QWORD *)this + 45))
                return (const __CFString *)ITEpubOpfParser::CaptureAppleDisplayOptionsState((uint64_t)this, v6);
              return result;
            }
            v11 = 5;
          }
          else
          {
            v11 = 4;
          }
        }
        else
        {
          v11 = 3;
        }
      }
      else
      {
        v11 = 2;
      }
    }
    else
    {
      v11 = 1;
    }
    *((_DWORD *)this + 156) = v11;
    return result;
  }
  result = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("name"));
  v8 = result;
  if (*((_QWORD *)this + 66) || !result)
  {
    if (!result)
      return result;
  }
  else if (CFStringCompare(result, CFSTR("cover"), 0) == kCFCompareEqualTo)
  {
    v9 = (const void *)*((_QWORD *)this + 66);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)this + 66) = 0;
    }
    v10 = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("content"));
    *((_QWORD *)this + 66) = v10;
    if (v10)
      CFRetain(v10);
  }
  result = (const __CFString *)CFStringCompare(v8, CFSTR("original-resolution"), 0);
  if (!result)
  {
    v12 = (const void *)*((_QWORD *)this + 67);
    if (v12)
    {
      CFRelease(v12);
      *((_QWORD *)this + 67) = 0;
    }
    result = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("content"));
    *((_QWORD *)this + 67) = result;
    if (result)
      return (const __CFString *)CFRetain(result);
  }
  return result;
}

const __CFString *ITEpubOpfParser::StartDateElement(ITEpubOpfParser *this, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const __CFString *result;

  *((_BYTE *)this + 411) = 0;
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("event"));
  if (!Value
    && (result = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("opf:event")), (Value = result) == 0)
    || (result = (const __CFString *)CFStringCompare(Value, CFSTR("original-publication"), 0)) == 0
    || (result = (const __CFString *)CFStringCompare(Value, CFSTR("publication"), 0)) == 0
    || (result = (const __CFString *)CFStringCompare(Value, CFSTR("creation"), 0)) == 0)
  {
    *((_BYTE *)this + 411) = 1;
  }
  return result;
}

void ITEpubOpfParser::StartPackageElement(ITEpubOpfParser *this, CFDictionaryRef theDict)
{
  const __CFString *Value;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("xmlns"));
  if ((Value || (Value = (const __CFString *)*((_QWORD *)this + 3)) != 0)
    && CFStringCompare(Value, CFSTR("http://www.idpf.org/2007/opf"), 0) == kCFCompareEqualTo)
  {
    v5 = (const void *)*((_QWORD *)this + 75);
    if (v5)
    {
      CFRelease(v5);
      *((_QWORD *)this + 75) = 0;
    }
    v6 = CFDictionaryGetValue(theDict, CFSTR("unique-identifier"));
    *((_QWORD *)this + 75) = v6;
    if (v6)
      CFRetain(v6);
    v7 = CFDictionaryGetValue(theDict, CFSTR("dir"));
    if (v7)
    {
      v8 = v7;
      v9 = (const void *)*((_QWORD *)this + 52);
      if (v9)
        CFRelease(v9);
      *((_QWORD *)this + 52) = v8;
      CFRetain(v8);
    }
    ITEpubOpfParser::CaptureAppleDisplayOptionsPrefix(this, theDict);
  }
}

const __CFString *ITEpubOpfParser::StartIdentifierElement(const __CFString *this, CFDictionaryRef theDict)
{
  const __CFString *v2;
  uint64_t length;
  const __CFString *Value;
  const __CFString *v6;

  v2 = this;
  length = this[18].length;
  if (length)
  {
    Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("id"));
    if (Value)
    {
      v6 = Value;
      this = (const __CFString *)CFStringCompare(Value, (CFStringRef)v2[18].length, 0);
      if (!this)
      {
        LODWORD(length) = 1004;
        goto LABEL_12;
      }
      this = (const __CFString *)CFStringCompare(v6, CFSTR("bookid"), 1uLL);
      if (!this)
      {
        LODWORD(length) = 1003;
        goto LABEL_12;
      }
    }
    this = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("opf:scheme"));
    if ((this || (this = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("scheme"))) != 0)
      && (this = (const __CFString *)CFStringCompare(this, CFSTR("UUID"), 1uLL)) == 0)
    {
      LODWORD(length) = 1002;
    }
    else
    {
      LODWORD(length) = 0;
    }
  }
LABEL_12:
  HIDWORD(v2[19].isa) = length;
  return this;
}

void ITEpubOpfParser::StartDescriptionElement(ITEpubOpfParser *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 49);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 49) = 0;
  }
  if (cf)
  {
    *((_QWORD *)this + 49) = cf;
    CFRetain(cf);
  }
}

void ITEpubOpfParser::StartContributorElement(ITEpubOpfParser *this, CFTypeRef cf)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 50);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 50) = 0;
  }
  if (cf)
  {
    *((_QWORD *)this + 50) = cf;
    CFRetain(cf);
  }
}

void ITEpubOpfParser::EndElement(std::string *this, const __CFString *a2)
{
  std::string::size_type v4;
  std::string *v5;
  const std::string::value_type *v6;
  std::string::size_type size;
  std::string::size_type v8;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  char *v14;
  const std::string::value_type *v15;
  char **p_data;
  int v17;
  char *v18;
  const __CFDictionary *v19;
  const void *Value;
  int v21;
  const __CFDictionary *v23;
  std::string::size_type v24;
  const void *v25;
  const char *v26;
  const void *v27;
  const void *v28;
  std::string::pointer data;
  const char *v30;
  const void *v31;

  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("manifest")))
  {
    this[17].__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_7;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("spine")))
  {
    this[17].__r_.__value_.__s.__data_[1] = 0;
    goto LABEL_7;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("metadata")))
  {
    this[17].__r_.__value_.__s.__data_[2] = 0;
    goto LABEL_7;
  }
  if (!this[17].__r_.__value_.__s.__data_[2])
    goto LABEL_7;
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("meta")))
  {
    ITEpubOpfParser::EndMetaElement((ITEpubOpfParser *)this);
    goto LABEL_7;
  }
  if (!this[17].__r_.__value_.__s.__data_[2])
    goto LABEL_7;
  if (!ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("title"))
    && !ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:title")))
  {
    if (!this[17].__r_.__value_.__s.__data_[2])
      goto LABEL_7;
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("creator"))
      || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:creator")))
    {
      if (SHIBYTE(this[5].__r_.__value_.__r.__words[2]) < 0)
        size = this[5].__r_.__value_.__l.__size_;
      else
        size = HIBYTE(this[5].__r_.__value_.__r.__words[2]);
      if (size)
        goto LABEL_7;
      v5 = this + 5;
      goto LABEL_19;
    }
    if (!this[17].__r_.__value_.__s.__data_[2])
      goto LABEL_7;
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("language"))
      || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:language")))
    {
      v5 = this + 7;
      goto LABEL_19;
    }
    if (!this[17].__r_.__value_.__s.__data_[2])
      goto LABEL_7;
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("publisher"))
      || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:publisher")))
    {
      if (SHIBYTE(this[10].__r_.__value_.__r.__words[2]) < 0)
        v8 = this[10].__r_.__value_.__l.__size_;
      else
        v8 = HIBYTE(this[10].__r_.__value_.__r.__words[2]);
      if (v8)
        goto LABEL_7;
      v5 = this + 10;
      goto LABEL_19;
    }
    if (!this[17].__r_.__value_.__s.__data_[2])
      goto LABEL_7;
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dateCopyrighted"))
      || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:dateCopyrighted")))
    {
      v5 = this + 12;
      goto LABEL_19;
    }
    if (!this[17].__r_.__value_.__s.__data_[2])
      goto LABEL_7;
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("date"))
      || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:date")))
    {
      if (this[17].__r_.__value_.__s.__data_[3])
      {
        if (!(SHIBYTE(this[12].__r_.__value_.__r.__words[2]) < 0
             ? this[12].__r_.__value_.__l.__size_
             : HIBYTE(this[12].__r_.__value_.__r.__words[2])))
        {
          v10 = (const std::string::value_type *)&this[3];
          if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
            v10 = *(const std::string::value_type **)v10;
          std::string::assign(this + 12, v10);
        }
      }
      this[17].__r_.__value_.__s.__data_[3] = 0;
      goto LABEL_7;
    }
    if (!this[17].__r_.__value_.__s.__data_[2])
      goto LABEL_7;
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("type"))
      || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:type")))
    {
      if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
        v11 = this[9].__r_.__value_.__l.__size_;
      else
        v11 = HIBYTE(this[9].__r_.__value_.__r.__words[2]);
      if (v11)
        goto LABEL_7;
      v5 = this + 9;
      goto LABEL_19;
    }
    if (!this[17].__r_.__value_.__s.__data_[2])
      goto LABEL_7;
    if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("subject"))
      || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:subject")))
    {
      if (SHIBYTE(this[8].__r_.__value_.__r.__words[2]) < 0)
        v12 = this[8].__r_.__value_.__l.__size_;
      else
        v12 = HIBYTE(this[8].__r_.__value_.__r.__words[2]);
      if (v12)
        goto LABEL_7;
      v5 = this + 8;
LABEL_19:
      v6 = (const std::string::value_type *)&this[3];
      if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
        v6 = *(const std::string::value_type **)v6;
      goto LABEL_21;
    }
    if (!this[17].__r_.__value_.__s.__data_[2])
      goto LABEL_7;
    if (!ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("identifier"))
      && !ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:identifier")))
    {
      if (this[17].__r_.__value_.__s.__data_[2])
      {
        if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("description"))
          || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:description")))
        {
          v19 = (const __CFDictionary *)this[16].__r_.__value_.__l.__size_;
          if (v19)
          {
            Value = CFDictionaryGetValue(v19, CFSTR("id"));
            if (Value && CFEqual(Value, CFSTR("ebpaj-guide")))
            {
              v21 = SHIBYTE(this[3].__r_.__value_.__r.__words[2]);
              if (v21 < 0 ? this[3].__r_.__value_.__l.__size_ : HIBYTE(this[3].__r_.__value_.__r.__words[2]))
              {
                v25 = (const void *)this[22].__r_.__value_.__r.__words[2];
                if (v25)
                {
                  CFRelease(v25);
                  this[22].__r_.__value_.__r.__words[2] = 0;
                  LOBYTE(v21) = *((_BYTE *)&this[3].__r_.__value_.__s + 23);
                }
                v26 = (const char *)&this[3];
                if ((v21 & 0x80) != 0)
                  v26 = *(const char **)v26;
                this[22].__r_.__value_.__r.__words[2] = (std::string::size_type)CFStringCreateWithCString(kCFAllocatorDefault, v26, 0x8000100u);
              }
            }
            v27 = (const void *)this[16].__r_.__value_.__l.__size_;
            if (v27)
            {
              CFRelease(v27);
              this[16].__r_.__value_.__l.__size_ = 0;
            }
          }
        }
        else if (this[17].__r_.__value_.__s.__data_[2]
               && (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("contributor"))
                || ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("dc:contributor"))))
        {
          v23 = (const __CFDictionary *)this[16].__r_.__value_.__r.__words[2];
          if (v23)
          {
            if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
              v24 = this[3].__r_.__value_.__l.__size_;
            else
              v24 = HIBYTE(this[3].__r_.__value_.__r.__words[2]);
            if (v24)
            {
              v28 = CFDictionaryGetValue(v23, CFSTR("id"));
              if (v28)
              {
                if (CFEqual(v28, CFSTR("bkp")))
                {
                  data = this[27].__r_.__value_.__l.__data_;
                  if (data)
                  {
                    CFRelease(data);
                    this[27].__r_.__value_.__r.__words[0] = 0;
                  }
                  v30 = (const char *)&this[3];
                  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
                    v30 = *(const char **)v30;
                  this[27].__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(kCFAllocatorDefault, v30, 0x8000100u);
                }
              }
            }
            v31 = (const void *)this[16].__r_.__value_.__r.__words[2];
            if (v31)
            {
              CFRelease(v31);
              this[16].__r_.__value_.__r.__words[2] = 0;
            }
          }
        }
      }
      goto LABEL_7;
    }
    v13 = HIDWORD(this[25].__r_.__value_.__r.__words[1]);
    if (!v13)
    {
      v14 = (char *)&this[3];
      if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
        v14 = *(char **)v14;
      if (strstr(v14, "urn:uuid:") || strstr(v14, "URN:UUID:"))
        v13 = 1001;
      else
        v13 = 1000;
    }
    if (SLODWORD(this[25].__r_.__value_.__r.__words[1]) < v13)
    {
      LODWORD(this[25].__r_.__value_.__r.__words[1]) = v13;
      v15 = (const std::string::value_type *)&this[3];
      if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
        v15 = *(const std::string::value_type **)v15;
      std::string::assign(this + 23, v15);
    }
    HIDWORD(this[25].__r_.__value_.__r.__words[1]) = 0;
    p_data = &this[3].__r_.__value_.__l.__data_;
    v17 = SHIBYTE(this[3].__r_.__value_.__r.__words[2]);
    if ((v17 & 0x80000000) == 0)
    {
      if (strstr((char *)&this[3], "urn:uuid:") || strstr((char *)&this[3], "URN:UUID:"))
      {
        v18 = (char *)&this[3];
      }
      else
      {
        v18 = (char *)&this[3];
        if (v17 != 35)
          goto LABEL_7;
      }
      goto LABEL_104;
    }
    v18 = *p_data;
    if (!strstr(*p_data, "urn:uuid:"))
    {
      if (strstr(v18, "URN:UUID:"))
        goto LABEL_104;
      if (this[3].__r_.__value_.__l.__size_ != 35)
        goto LABEL_7;
    }
    v18 = *p_data;
LABEL_104:
    v5 = this + 24;
    v6 = v18;
LABEL_21:
    std::string::assign(v5, v6);
    goto LABEL_7;
  }
  if (SHIBYTE(this[6].__r_.__value_.__r.__words[2]) < 0)
    v4 = this[6].__r_.__value_.__l.__size_;
  else
    v4 = HIBYTE(this[6].__r_.__value_.__r.__words[2]);
  if (!v4)
  {
    v5 = this + 6;
    goto LABEL_19;
  }
LABEL_7:
  ITEpubXmlParseHandler::EndElement((CFArrayRef *)this, a2);
}

void ITEpubOpfParser::EndMetaElement(ITEpubOpfParser *this)
{
  const char *v2;
  CFStringRef v3;
  CFStringRef v4;
  int v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  if (!*((_QWORD *)this + 48))
    goto LABEL_13;
  v2 = (char *)this + 72;
  if (*((char *)this + 95) < 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_11;
    v2 = *(const char **)v2;
LABEL_7:
    v3 = CFStringCreateWithCString(kCFAllocatorDefault, v2, 0x8000100u);
    if (v3)
    {
      v4 = v3;
      v5 = *((_DWORD *)this + 156);
      if ((v5 - 6) >= 0xC)
      {
        switch(v5)
        {
          case 1:
            v7 = (const void *)*((_QWORD *)this + 79);
            if (v7)
            {
              CFRelease(v7);
              *((_QWORD *)this + 79) = 0;
            }
            *((_QWORD *)this + 79) = CFRetain(v4);
            break;
          case 2:
            v8 = (const void *)*((_QWORD *)this + 80);
            if (v8)
            {
              CFRelease(v8);
              *((_QWORD *)this + 80) = 0;
            }
            *((_QWORD *)this + 80) = CFRetain(v4);
            break;
          case 3:
            v9 = (const void *)*((_QWORD *)this + 68);
            if (v9)
            {
              CFRelease(v9);
              *((_QWORD *)this + 68) = 0;
            }
            *((_QWORD *)this + 68) = CFRetain(v4);
            break;
          case 4:
            *((_QWORD *)this + 54) = CFRetain(v3);
            break;
          case 5:
            *((_QWORD *)this + 55) = CFRetain(v3);
            break;
          default:
            ITEpubOpfParser::CaptureFileAsValues((CFDictionaryRef *)this, v3);
            break;
        }
      }
      else
      {
        ITEpubOpfParser::CaptureAppleDisplayOptionsValue(this, v3);
        *((_DWORD *)this + 155) = 0;
      }
      CFRelease(v4);
    }
    goto LABEL_11;
  }
  if (*((_BYTE *)this + 95))
    goto LABEL_7;
LABEL_11:
  v6 = (const void *)*((_QWORD *)this + 48);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 48) = 0;
  }
LABEL_13:
  *((_DWORD *)this + 156) = 0;
}

void ITEpubOpfParser::CaptureAppleDisplayOptionsPrefix(ITEpubOpfParser *this, CFDictionaryRef theDict)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const __CFString *Value;
  __CFArray *ArrayWithWhitespaceSplitting;
  const __CFArray *v9;
  CFIndex Count;
  unint64_t v11;
  uint64_t v12;
  const __CFString *ValueAtIndex;
  const __CFString *v14;
  CFComparisonResult v15;
  BOOL v16;
  CFIndex v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;

  v4 = (const void *)*((_QWORD *)this + 44);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 44) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 45);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 45) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 46);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 46) = 0;
  }
  Value = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("prefix"));
  if (Value)
  {
    ArrayWithWhitespaceSplitting = ITEpubXmlParseHandler::createArrayWithWhitespaceSplitting(this, Value);
    if (ArrayWithWhitespaceSplitting)
    {
      v9 = ArrayWithWhitespaceSplitting;
      Count = CFArrayGetCount(ArrayWithWhitespaceSplitting);
      if (Count >= 1)
      {
        v11 = Count;
        while (1)
        {
          v12 = v11 - 1;
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v9, v11 - 1);
          if (ValueAtIndex)
            break;
LABEL_28:
          v11 = v12;
          if (v12 <= 0)
            goto LABEL_29;
        }
        v14 = ValueAtIndex;
        if (*((_QWORD *)this + 45)
          || CFStringCompare(ValueAtIndex, CFSTR("http://vocabulary.itunes.apple.com/rdf/ibooks/vocabulary-extensions-1.0/"), 0))
        {
          if (*((_QWORD *)this + 44))
            goto LABEL_28;
          v15 = CFStringCompare(v14, CFSTR("http://www.idpf.org/vocab/rendition/#"), 0);
          v16 = v11 >= 2;
          v17 = v11 - 2;
          if (!v16 || v15)
            goto LABEL_28;
          v18 = (const __CFString *)CFArrayGetValueAtIndex(v9, v17);
          if (!v18)
            goto LABEL_27;
          v19 = v18;
          if (!CFStringGetLength(v18))
            goto LABEL_27;
          *((_QWORD *)this + 44) = v19;
        }
        else
        {
          v16 = v11 >= 2;
          v17 = v11 - 2;
          if (!v16)
            goto LABEL_29;
          v20 = (const __CFString *)CFArrayGetValueAtIndex(v9, v17);
          if (!v20)
            goto LABEL_27;
          v19 = v20;
          if (!CFStringGetLength(v20))
            goto LABEL_27;
          *((_QWORD *)this + 45) = v19;
        }
        CFRetain(v19);
LABEL_27:
        v12 = v17;
        goto LABEL_28;
      }
LABEL_29:
      CFRelease(v9);
    }
  }
  if (*((_QWORD *)this + 44)
    || (*((_QWORD *)this + 44) = CFSTR("rendition"), CFRetain(CFSTR("rendition")), *((_QWORD *)this + 44))
    || *((_QWORD *)this + 45))
  {
    if (!*((_QWORD *)this + 46))
      *((_QWORD *)this + 46) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  }
}

uint64_t ITEpubOpfParser::CaptureAppleDisplayOptionsState(uint64_t this, CFStringRef theString)
{
  uint64_t v3;
  const __CFString *v4;
  int v5;
  const __CFString *v6;
  int v7;
  int v8;

  if (!theString)
    return this;
  v3 = this;
  v4 = *(const __CFString **)(this + 360);
  if (!v4 || (this = CFStringHasPrefix(theString, v4), !(_DWORD)this))
  {
    v6 = *(const __CFString **)(v3 + 352);
    if (v6)
    {
      this = CFStringHasPrefix(theString, v6);
      if ((_DWORD)this)
      {
        *(_DWORD *)(v3 + 620) = 1;
        this = CFStringHasSuffix(theString, CFSTR("layout"));
        if ((_DWORD)this)
        {
          v7 = 7;
        }
        else
        {
          this = CFStringHasSuffix(theString, CFSTR("spread"));
          if ((_DWORD)this)
          {
            v7 = 8;
          }
          else
          {
            this = CFStringHasSuffix(theString, CFSTR("flow"));
            if ((_DWORD)this)
            {
              v7 = 9;
            }
            else
            {
              this = CFStringHasSuffix(theString, CFSTR("specified-fonts"));
              if ((_DWORD)this)
              {
                v7 = 11;
              }
              else
              {
                this = CFStringHasSuffix(theString, CFSTR("open-to-spread"));
                if ((_DWORD)this)
                {
                  v7 = 12;
                }
                else
                {
                  this = CFStringHasSuffix(theString, CFSTR("orientation"));
                  if ((_DWORD)this)
                  {
                    v7 = 15;
                  }
                  else
                  {
                    this = CFStringHasSuffix(theString, CFSTR("version"));
                    if (!(_DWORD)this)
                      return this;
                    v7 = 16;
                  }
                }
              }
            }
          }
        }
        *(_DWORD *)(v3 + 624) = v7;
        return this;
      }
    }
    return this;
  }
  if (CFStringHasSuffix(theString, CFSTR("fixed-layout")))
  {
    v5 = 6;
  }
  else if (CFStringHasSuffix(theString, CFSTR("interactive")))
  {
    v5 = 10;
  }
  else if (CFStringHasSuffix(theString, CFSTR("specified-fonts")))
  {
    v5 = 11;
  }
  else if (CFStringHasSuffix(theString, CFSTR("open-to-spread")))
  {
    v5 = 12;
  }
  else if (CFStringHasSuffix(theString, CFSTR("binding")))
  {
    v5 = 13;
  }
  else if (CFStringHasSuffix(theString, CFSTR("orientation-lock")))
  {
    v5 = 14;
  }
  else if (CFStringHasSuffix(theString, CFSTR("version")))
  {
    v5 = 16;
  }
  else
  {
    this = CFStringHasSuffix(theString, CFSTR("respect-image-size-class"));
    if (!(_DWORD)this)
    {
      if (!*(_DWORD *)(v3 + 624))
        return this;
      goto LABEL_38;
    }
    v5 = 17;
  }
  *(_DWORD *)(v3 + 624) = v5;
LABEL_38:
  *(_DWORD *)(v3 + 620) = 1;
  this = CFStringFind(theString, CFSTR(":ipad-"), 0).location;
  if (this == -1)
  {
    this = CFStringFind(theString, CFSTR(":iphone-"), 0).location;
    if (this == -1)
      return this;
    v8 = 3;
  }
  else
  {
    v8 = 2;
  }
  *(_DWORD *)(v3 + 620) = v8;
  return this;
}

void ITEpubOpfParser::CaptureAppleDisplayOptionsValue(ITEpubOpfParser *this, const __CFString *a2)
{
  int v4;
  const __CFString *v5;
  const __CFString *v6;
  BOOL v7;
  BOOL v8;
  const __CFString *v9;
  void *Value;
  const __CFString *v11;
  const __CFString *v12;
  __CFDictionary *v13;

  v4 = *((_DWORD *)this + 155);
  v5 = CFSTR("iphone");
  v6 = CFSTR("ipad");
  v7 = v4 != 2;
  if (v4 != 2)
    v6 = 0;
  if (v4 == 3)
    v7 = 0;
  else
    v5 = v6;
  v8 = v4 != 1 && v7;
  if (v4 == 1)
    v9 = CFSTR("*");
  else
    v9 = v5;
  Value = (void *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 46), v9);
  if (Value)
  {
    if (v8)
      return;
  }
  else
  {
    Value = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 46), v9, Value);
    CFRelease(Value);
    if (v8)
      return;
  }
  switch(*((_DWORD *)this + 156))
  {
    case 6:
      v11 = CFSTR("fixed-layout");
      goto LABEL_36;
    case 7:
      if (CFStringCompare(a2, CFSTR("pre-paginated"), 0))
        return;
      v11 = CFSTR("fixed-layout");
      v12 = CFSTR("true");
      goto LABEL_40;
    case 8:
      if (CFStringCompare(a2, CFSTR("none"), 0))
        return;
      v11 = CFSTR("spread");
      goto LABEL_33;
    case 9:
      v11 = CFSTR("flow");
      goto LABEL_36;
    case 0xA:
      v11 = CFSTR("interactive");
      goto LABEL_36;
    case 0xB:
      v11 = CFSTR("specified-fonts");
      goto LABEL_36;
    case 0xC:
      v11 = CFSTR("open-to-spread");
      goto LABEL_36;
    case 0xD:
      v11 = CFSTR("binding");
      goto LABEL_36;
    case 0xE:
      v11 = CFSTR("orientation-lock");
      goto LABEL_36;
    case 0xF:
      if (CFStringCompare(a2, CFSTR("portrait"), 0))
      {
        if (CFStringCompare(a2, CFSTR("landscape"), 0))
        {
          if (CFStringCompare(a2, CFSTR("auto"), 0))
            return;
          v11 = CFSTR("orientation-lock");
LABEL_33:
          v12 = CFSTR("none");
        }
        else
        {
          v11 = CFSTR("orientation-lock");
          v12 = CFSTR("landscape-only");
        }
      }
      else
      {
        v11 = CFSTR("orientation-lock");
        v12 = CFSTR("portrait-only");
      }
LABEL_40:
      v13 = (__CFDictionary *)Value;
LABEL_37:
      CFDictionarySetValue(v13, v11, v12);
      break;
    case 0x10:
      v11 = CFSTR("version");
      goto LABEL_36;
    case 0x11:
      v11 = CFSTR("respect-image-size-class");
LABEL_36:
      v13 = (__CFDictionary *)Value;
      v12 = a2;
      goto LABEL_37;
    default:
      return;
  }
}

void ITEpubOpfParser::CaptureFileAsValues(CFDictionaryRef *this, const __CFString *a2)
{
  const void *Value;
  const __CFString *v5;
  BOOL v6;
  const void *v7;
  CFIndex v8;
  CFDictionaryRef v9;
  const void *v10[2];
  void *keys[2];

  Value = CFDictionaryGetValue(this[48], CFSTR("refines"));
  v5 = (const __CFString *)CFDictionaryGetValue(this[48], CFSTR("property"));
  if (Value)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6 && CFStringCompare(v5, CFSTR("file-as"), 0) == kCFCompareEqualTo)
  {
    v7 = CFDictionaryGetValue(this[48], CFSTR("xml:lang"));
    if (!v7)
      v7 = CFDictionaryGetValue(this[48], CFSTR("lang"));
    if (a2)
    {
      *(_OWORD *)keys = *(_OWORD *)&off_377BE8;
      v10[0] = a2;
      v10[1] = v7;
      if (v7)
        v8 = 2;
      else
        v8 = 1;
      v9 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, v10, v8, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      CFDictionarySetValue(this[47], Value, v9);
      CFRelease(v9);
    }
  }
}

std::string *ITEpubOpfParser::author(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

std::string *ITEpubOpfParser::title(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 144);
  if (*(char *)(a1 + 167) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

std::string *ITEpubOpfParser::language(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

std::string *ITEpubOpfParser::genre(std::string *result, std::string *this)
{
  const std::string::value_type *v2;

  v2 = (const std::string::value_type *)&result[8];
  if (SHIBYTE(result[8].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!result[8].__r_.__value_.__l.__size_)
      goto LABEL_7;
    v2 = *(const std::string::value_type **)v2;
    return std::string::assign(this, v2);
  }
  if (*((_BYTE *)&result[8].__r_.__value_.__s + 23))
    return std::string::assign(this, v2);
LABEL_7:
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  return result;
}

std::string *ITEpubOpfParser::publisherName(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 240);
  if (*(char *)(a1 + 263) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

std::string *ITEpubOpfParser::publisherLocation(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 264);
  if (*(char *)(a1 + 287) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

std::string *ITEpubOpfParser::publisherYear(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 288);
  if (*(char *)(a1 + 311) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

std::string *ITEpubOpfParser::uniqueIdentifier(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 552);
  if (*(char *)(a1 + 575) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

std::string *ITEpubOpfParser::uniqueIdentifierWithUUIDScheme(uint64_t a1, std::string *this)
{
  const std::string::value_type *v3;

  v3 = (const std::string::value_type *)(a1 + 576);
  if (*(char *)(a1 + 599) < 0)
    v3 = *(const std::string::value_type **)v3;
  return std::string::assign(this, v3);
}

uint64_t ITEpubOpfParser::_lowerHrefInSpine(CFArrayRef *this, const __CFString *a2, uint64_t a3)
{
  CFStringRef v5;
  uint64_t v6;
  uint64_t v7;
  const void *ValueAtIndex;
  const __CFDictionary *Value;
  const __CFString *v10;

  v5 = ITEpubXmlParseHandler::copyHrefStrippingHash(a2, a2);
  if ((int)a3 < 1)
  {
LABEL_7:
    if (!v5)
      return a3;
LABEL_8:
    CFRelease(v5);
    return a3;
  }
  v6 = a3;
  while (1)
  {
    v7 = v6 - 1;
    ValueAtIndex = CFArrayGetValueAtIndex(this[42], (v6 - 1));
    if (ValueAtIndex)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(this[40], ValueAtIndex);
      if (Value)
      {
        v10 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("unescaped_href"));
        if (CFStringCompare(v10, v5, 0) == kCFCompareEqualTo)
          break;
      }
    }
    --v6;
    if ((unint64_t)(v7 + 1) <= 1)
      goto LABEL_7;
  }
  a3 = (v6 - 1);
  if (v5)
    goto LABEL_8;
  return a3;
}

const __CFString *ITEpubOpfParser::_lowestHrefInSpine(ITEpubOpfParser *this)
{
  const __CFString **v2;
  const __CFString **v3;
  CFIndex Count;
  uint64_t v5;
  const __CFString *v6;
  uint64_t v7;

  v3 = (const __CFString **)*((_QWORD *)this + 59);
  v2 = (const __CFString **)*((_QWORD *)this + 60);
  if ((unint64_t)((char *)v2 - (char *)v3) < 9)
  {
    if (v2 == v3)
      sub_11908();
    return *v3;
  }
  else
  {
    Count = CFArrayGetCount(*((CFArrayRef *)this + 42));
    if (v3 == *((const __CFString ***)this + 60))
    {
      return 0;
    }
    else
    {
      v5 = Count;
      v6 = 0;
      do
      {
        v7 = ITEpubOpfParser::_lowerHrefInSpine((CFArrayRef *)this, *v3, v5);
        if ((int)v5 > (int)v7)
        {
          v6 = *v3;
          v5 = v7;
        }
        if (!(_DWORD)v5)
          break;
        ++v3;
      }
      while (v3 != *((const __CFString ***)this + 60));
    }
  }
  return v6;
}

const __CFString *ITEpubOpfParser::copyFirstHref(ITEpubOpfParser *this)
{
  const __CFString *v1;

  v1 = (const __CFString *)*((_QWORD *)this + 62);
  if (!v1)
  {
    if (*((_QWORD *)this + 60) == *((_QWORD *)this + 59))
      return 0;
    v1 = ITEpubOpfParser::_lowestHrefInSpine(this);
    if (!v1)
      return v1;
  }
  CFRetain(v1);
  return v1;
}

const void *ITEpubOpfParser::copyReaderStartPageHref(ITEpubOpfParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 62);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 62);
  }
  return result;
}

const void *ITEpubOpfParser::copyFileAsDictionary(ITEpubOpfParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 47);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 47);
  }
  return result;
}

const void *ITEpubOpfParser::copyManifestIdDictionary(ITEpubOpfParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 40);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 40);
  }
  return result;
}

const void *ITEpubOpfParser::copyManifestHrefDictionary(ITEpubOpfParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 39);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 39);
  }
  return result;
}

const void *ITEpubOpfParser::copyManifestArray(ITEpubOpfParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 41);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 41);
  }
  return result;
}

const void *ITEpubOpfParser::copySpineArray(ITEpubOpfParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 42);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 42);
  }
  return result;
}

const void *ITEpubOpfParser::platformOptions(uint64_t a1, unsigned int a2)
{
  const __CFDictionary *v4;
  BOOL v5;

  if ((*(_QWORD *)(a1 + 360) || *(_QWORD *)(a1 + 352))
    && (v4 = *(const __CFDictionary **)(a1 + 368)) != 0
    && (CFDictionaryGetCount(v4) ? (v5 = a2 > 2) : (v5 = 1), !v5))
  {
    return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 368), off_377C30[a2]);
  }
  else
  {
    return 0;
  }
}

void sub_11908()
{
  sub_1191C("vector");
}

void sub_1191C(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1196C(exception, a1);
}

void sub_11958(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1196C(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  return result;
}

void sub_11B74(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_3C1A48;
  qword_3C1A48 = (uint64_t)v1;

}

void sub_11DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_11DC8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_11DD8(uint64_t a1)
{

}

void sub_11DE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 8), "objectForKeyedSubscript:", a1[5]));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_11EB4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  objc_msgSend(v2, "setObject:forKey:", v3, *(_QWORD *)(a1 + 40));

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v4, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), CFSTR("_BCWWebRepExternalLoadApprovalCache"));

}

void sub_11FD0(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
  if ((objc_opt_respondsToSelector(v3, "BOOLValue") & 1) != 0 && (objc_msgSend(v3, "BOOLValue") & 1) == 0)
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "removeObjectForKey:", *(_QWORD *)(a1 + 40));
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
    objc_msgSend(v2, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), CFSTR("_BCWWebRepExternalLoadApprovalCache"));

  }
}

void sub_120B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  void *v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (objc_msgSend(v2, "BOOLForKey:", CFSTR("_BCWWebRepExternalLoadApprovalCacheClear")))
  {
    objc_msgSend(v2, "removeObjectForKey:", CFSTR("_BCWWebRepExternalLoadApprovalCache"));
    objc_msgSend(v2, "removeObjectForKey:", CFSTR("_BCWWebRepExternalLoadApprovalCacheClear"));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 8);
    *(_QWORD *)(v3 + 8) = 0;

  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
  {
    v5 = objc_alloc_init((Class)NSMutableDictionary);
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(void **)(v6 + 8);
    *(_QWORD *)(v6 + 8) = v5;

    v8 = objc_opt_class(NSDictionary);
    v19 = v2;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", CFSTR("_BCWWebRepExternalLoadApprovalCache")));
    v10 = BUDynamicCast(v8, v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "allKeys"));
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    if (v13)
    {
      v14 = v13;
      v15 = *(_QWORD *)v21;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v21 != v15)
            objc_enumerationMutation(v12);
          v17 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v17));
          if ((objc_opt_respondsToSelector(v18, "BOOLValue") & 1) != 0 && objc_msgSend(v18, "BOOLValue"))
            objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setObject:forKey:", &__kCFBooleanTrue, v17);

        }
        v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
      }
      while (v14);
    }

    v2 = v19;
  }

}

void sub_1238C(uint64_t a1)
{
  objc_class *v1;
  objc_class *v2;

  v1 = (objc_class *)objc_msgSend(*(id *)(a1 + 32), "be_wkContentViewClass");
  if (v1)
  {
    v2 = v1;
    BESwizzleInstanceMethods(v1, "setUpTextSelectionAssistant", "be_setUpTextSelectionAssistant");
    BESwizzleInstanceMethods(v2, "continueContextMenuInteraction:", "be_continueContextMenuInteraction:");
  }
}

void sub_12428(id a1)
{
  qword_3C1A60 = (uint64_t)NSClassFromString(CFSTR("WKContentView"));
}

void sub_126A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;

  v5 = a2;
  objc_msgSend(v5, "setPreviewProvider:", 0);
  v3 = objc_retainBlock(*(id *)(a1 + 32));
  v4 = v3;
  if (v3)
    (*((void (**)(id, id))v3 + 2))(v3, v5);

}

void sub_128E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_128FC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1290C(uint64_t a1)
{

}

void sub_12914(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = (void *)qword_3C1A78;
  if (!qword_3C1A78)
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSMapTable weakToWeakObjectsMapTable](NSMapTable, "weakToWeakObjectsMapTable"));
    v4 = (void *)qword_3C1A78;
    qword_3C1A78 = v3;

    v2 = (void *)qword_3C1A78;
  }
  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", *(_QWORD *)(a1 + 32)));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "_standardProcessPoolWithSingleWebProcess:forWebTOC:", *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57)));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    objc_msgSend((id)qword_3C1A78, "setObject:forKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(a1 + 32));
  }
}

id sub_131C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "be_resumeLoading");
}

uint64_t sub_139A0(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  unsigned int v4;

  v1 = a1;
  v2 = (unint64_t)objc_msgSend(v1, "mode");
  if (v2 > 4)
    v3 = 0;
  else
    v3 = qword_2E4900[v2];
  v4 = objc_msgSend(v1, "isHorizontalScroll");

  if (v4)
    return 1;
  else
    return v3;
}

uint64_t sub_13B24(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  objc_msgSend(*(id *)(a1 + 32), "setBe_isHorizontalScroll:", objc_msgSend(*(id *)(a1 + 40), "isHorizontalScroll"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "sinfInfo"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allKeys"));
  v4 = objc_msgSend(v3, "count");

  if (v4)
    objc_msgSend(*(id *)(a1 + 32), "be_containsProtectedContent");
  objc_msgSend(*(id *)(a1 + 32), "be_enableAX");
  objc_msgSend(*(id *)(a1 + 40), "applyToWebView:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 64), "_setupContentBlockingRulesforWebView:rule:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 48), "contentBlockingRule"));
  objc_msgSend(*(id *)(a1 + 64), "_applyMetaViewportOverridesToWebView:fixedLayoutSize:", *(_QWORD *)(a1 + 32), *(double *)(a1 + 72), *(double *)(a1 + 80));
  if (*(_QWORD *)(a1 + 88) == 4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "defaultWebpagePreferences"));
    objc_msgSend(v6, "_setMouseEventPolicy:", 1);

  }
  objc_msgSend(*(id *)(a1 + 64), "_modifyScrollViewBehaviors:", *(_QWORD *)(a1 + 32));
  v7 = *(void **)(a1 + 64);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "be_navigationHandler"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "be_userContentController"));
  objc_msgSend(v7, "_configureNavigationForCoalescingLoadEvents:userContentController:", v8, v9);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t sub_13FB0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setBe_isHorizontalScroll:", objc_msgSend(*(id *)(a1 + 40), "isHorizontalScroll"));
  objc_msgSend(*(id *)(a1 + 40), "applyToWebView:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 80), "_setupContentBlockingRulesforWebView:rule:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 48), "contentBlockingRule"));
  objc_msgSend(*(id *)(a1 + 80), "_applyMetaViewportOverridesToWebView:fixedLayoutSize:", *(_QWORD *)(a1 + 32), CGSizeZero.width, CGSizeZero.height);
  objc_msgSend(*(id *)(a1 + 80), "_modifyScrollViewBehaviors:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 80), "_configureNavigationForCoalescingLoadEvents:userContentController:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

uint64_t sub_1462C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setBe_isHorizontalScroll:", objc_msgSend(*(id *)(a1 + 40), "isHorizontalScroll"));
  objc_msgSend(*(id *)(a1 + 40), "applyToWebView:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 80), "_setupContentBlockingRulesforWebView:rule:", *(_QWORD *)(a1 + 32), objc_msgSend(*(id *)(a1 + 48), "contentBlockingRule"));
  objc_msgSend(*(id *)(a1 + 80), "_applyMetaViewportOverridesToWebView:fixedLayoutSize:", *(_QWORD *)(a1 + 32), CGSizeZero.width, CGSizeZero.height);
  objc_msgSend(*(id *)(a1 + 80), "_modifyScrollViewBehaviors:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 80), "_configureNavigationForCoalescingLoadEvents:userContentController:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

id BESupportedImageMimeTypes()
{
  unsigned __int8 v0;
  id v2;

  v0 = atomic_load((unsigned __int8 *)&qword_3C1A88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_3C1A88))
  {
    v2 = sub_16294();
    qword_3C1A80 = objc_claimAutoreleasedReturnValue(v2);
    __cxa_guard_release(&qword_3C1A88);
  }
  return (id)qword_3C1A80;
}

void sub_1627C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_3C1A88);
  _Unwind_Resume(a1);
}

id sub_16294()
{
  return objc_autoreleaseReturnValue(objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", CFSTR("application/bmp"), CFSTR("application/jpg"), CFSTR("application/png"), CFSTR("application/tif"), CFSTR("application/tiff"), CFSTR("application/x-bmp"), CFSTR("application/x-jpg"), CFSTR("application/x-png"), CFSTR("application/x-tif"), CFSTR("application/x-tiff"), CFSTR("application/x-win-bitmap"), CFSTR("image/apng"), CFSTR("image/bmp"), CFSTR("image/gif"), CFSTR("image/gi_"), CFSTR("image/jp2"),
             CFSTR("image/jpeg"),
             CFSTR("image/jpe_"),
             CFSTR("image/jpg"),
             CFSTR("image/jp_"),
             CFSTR("image/ms-bmp"),
             CFSTR("image/pipeg"),
             CFSTR("image/pjpeg"),
             CFSTR("image/png"),
             CFSTR("image/tif"),
             CFSTR("image/tiff"),
             CFSTR("image/vnd.microsoft.icon"),
             CFSTR("image/vnd.switfview-jpeg"),
             CFSTR("image/webp"),
             CFSTR("image/x-bmp"),
             CFSTR("image/x-icon"),
             CFSTR("image/x-ms-bmp"),
             CFSTR("image/x-tif"),
             CFSTR("image/x-tiff"),
             CFSTR("image/x-win-bitmap"),
             CFSTR("image/x-windows-bmp"),
             CFSTR("image/x-xbitmap"),
             CFSTR("image/avif"),
             CFSTR("image/heic"),
             CFSTR("image/heic-sequence"),
             CFSTR("image/heif"),
             CFSTR("image/heif-sequence"),
             CFSTR("image/jxl"),
             CFSTR("image/x-apple-adaptive-glyph"),
             0));
}

id BESupportedImageMimeTypesJSON()
{
  unsigned __int8 v0;
  id v2;

  v0 = atomic_load((unsigned __int8 *)&qword_3C1A98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_3C1A98))
  {
    v2 = sub_164F0();
    qword_3C1A90 = objc_claimAutoreleasedReturnValue(v2);
    __cxa_guard_release(&qword_3C1A98);
  }
  return (id)qword_3C1A90;
}

void sub_164D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_3C1A98);
  _Unwind_Resume(a1);
}

id sub_164F0()
{
  id v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v7;

  v0 = BESupportedImageMimeTypes();
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allObjects"));
  v7 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", v2, 0, &v7));
  v4 = v7;

  if (objc_msgSend(v3, "length"))
    v5 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v3, 4);
  else
    v5 = 0;

  return v5;
}

void sub_165B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id BEDoesURLPointToAnImageFile(void *a1)
{
  id v1;
  unsigned __int8 v2;
  void *v3;
  void *v4;
  id v5;
  id v7;

  v1 = a1;
  v2 = atomic_load((unsigned __int8 *)&qword_3C1AA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_3C1AA8))
  {
    v7 = sub_166A8();
    qword_3C1AA0 = objc_claimAutoreleasedReturnValue(v7);
    __cxa_guard_release(&qword_3C1AA8);
  }
  v3 = (void *)qword_3C1AA0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "pathExtension"));
  v5 = objc_msgSend(v3, "containsObject:", v4);

  return v5;
}

void sub_16674(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_3C1AA8);

  _Unwind_Resume(a1);
}

id sub_166A8()
{
  return objc_autoreleaseReturnValue(objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", CFSTR("avif"), CFSTR("bmp"), CFSTR("dib"), CFSTR("gif"), CFSTR("heic"), CFSTR("heics"), CFSTR("heif"), CFSTR("heifs"), CFSTR("hif"), CFSTR("ico"), CFSTR("j2c"), CFSTR("j2k"), CFSTR("jp2"), CFSTR("jpe"), CFSTR("jpeg"), CFSTR("jpf"),
             CFSTR("jpg"),
             CFSTR("jpx"),
             CFSTR("jxl"),
             CFSTR("png"),
             CFSTR("tif"),
             CFSTR("tiff"),
             CFSTR("xbm"),
             CFSTR("webp"),
             0));
}

id BEDoesURLPointToAFontFile(void *a1)
{
  id v1;
  unsigned __int8 v2;
  void *v3;
  void *v4;
  id v5;
  id v7;

  v1 = a1;
  v2 = atomic_load((unsigned __int8 *)&qword_3C1AB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_3C1AB8))
  {
    v7 = sub_1688C();
    qword_3C1AB0 = objc_claimAutoreleasedReturnValue(v7);
    __cxa_guard_release(&qword_3C1AB8);
  }
  v3 = (void *)qword_3C1AB0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "pathExtension"));
  v5 = objc_msgSend(v3, "containsObject:", v4);

  return v5;
}

void sub_16858(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_3C1AB8);

  _Unwind_Resume(a1);
}

id sub_1688C()
{
  return objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", CFSTR("woff"), CFSTR("woff2"), CFSTR("otf"), CFSTR("ttf"), CFSTR("sfnt"), 0);
}

id BEDoesURLPointToUSDZFile(void *a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pathExtension"));
  v2 = objc_msgSend(v1, "isEqualToString:", CFSTR("usdz"));

  return v2;
}

void sub_16924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ITEpubPrintableParser::ITEpubPrintableParser(ITEpubPrintableParser *this)
{
  _QWORD *v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *v1 = off_377E18;
  v1[18] = 0;
  v1[17] = 0;
  v1[15] = 0;
  v1[16] = v1 + 17;
}

{
  _QWORD *v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *v1 = off_377E18;
  v1[18] = 0;
  v1[17] = 0;
  v1[15] = 0;
  v1[16] = v1 + 17;
}

void ITEpubPrintableParser::~ITEpubPrintableParser(ITEpubPrintableParser *this)
{
  char *v2;
  char *v3;
  char *v4;
  const void *v5;
  char *v6;
  char *v7;
  BOOL v8;

  *(_QWORD *)this = off_377E18;
  v2 = (char *)this + 136;
  v3 = (char *)this + 128;
  v4 = (char *)*((_QWORD *)this + 16);
  if (v4 != (char *)this + 136)
  {
    do
    {
      v5 = (const void *)*((_QWORD *)v4 + 4);
      if (v5)
        CFRelease(v5);
      v6 = (char *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v2);
  }
  sub_16BE8((uint64_t)v3, *((_QWORD **)this + 17));
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubPrintableParser::~ITEpubPrintableParser(this);
  operator delete();
}

uint64_t ITEpubPrintableParser::StartElement(ITEpubPrintableParser *this, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t result;
  const __CFString *Value;
  const __CFString *v8;
  _BOOL4 v9;
  CFStringRef v10;
  CFStringRef *v11;

  ITEpubXmlParseHandler::StartElement((CFMutableArrayRef *)this, a2, a3);
  result = ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("printable"));
  if ((_DWORD)result)
  {
    Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("xmlns"));
    if (!Value && (Value = (const __CFString *)*((_QWORD *)this + 3)) == 0
      || (result = CFStringCompare(Value, CFSTR("http://apple.com/ibooks/printable"), 0)) == 0)
    {
      result = (uint64_t)CFDictionaryGetValue(a3, CFSTR("default"));
      if (result)
      {
        result = ITEpubXmlParseHandler::BOOLeanForString(this, (CFStringRef)result);
        *((_DWORD *)this + 30) = result;
      }
    }
    *((_DWORD *)this + 31) = 1;
  }
  else if (*((_DWORD *)this + 31))
  {
    result = ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("itemref"));
    if ((_DWORD)result)
    {
      v8 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("idref"));
      v10 = v8;
      result = (uint64_t)CFDictionaryGetValue(a3, CFSTR("printable"));
      if (result)
      {
        if (v8)
        {
          v9 = ITEpubXmlParseHandler::BOOLeanForString(this, (CFStringRef)result);
          CFRetain(v8);
          v11 = &v10;
          result = (uint64_t)sub_16C28((uint64_t **)this + 16, &v10, (uint64_t)&std::piecewise_construct, &v11);
          *(_DWORD *)(result + 40) = v9;
        }
      }
    }
  }
  return result;
}

uint64_t ITEpubPrintableParser::isIdRefPrintable(ITEpubPrintableParser *this, const __CFString *a2)
{
  ITEpubPrintableParser *v3;
  unsigned int *v4;
  const __CFString *v6;

  v6 = a2;
  v3 = (ITEpubPrintableParser *)sub_16F64((uint64_t)this + 128, &v6);
  if ((ITEpubPrintableParser *)((char *)this + 136) == v3)
    v4 = (unsigned int *)((char *)this + 120);
  else
    v4 = (unsigned int *)((char *)v3 + 40);
  return *v4;
}

void sub_16BE8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_16BE8(a1, *a2);
    sub_16BE8(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_16C28(uint64_t **a1, CFStringRef *a2, uint64_t a3, _QWORD **a4)
{
  void **v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)sub_16CB0((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x30uLL);
    v7[4] = **a4;
    *((_DWORD *)v7 + 10) = 0;
    sub_16D78(a1, v10, v8, v7);
  }
  return v7;
}

_QWORD *sub_16CB0(uint64_t a1, _QWORD *a2, CFStringRef *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  const __CFString *v8;
  const __CFString *v9;
  BOOL v10;
  BOOL v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      v7 = v4;
      v8 = *a3;
      v9 = (const __CFString *)v7[4];
      if (*a3)
        v10 = v9 == 0;
      else
        v10 = 1;
      if (v10)
      {
        if (!v9)
          goto LABEL_18;
LABEL_11:
        if (v9)
          v11 = v8 == 0;
        else
          v11 = 1;
        if (v11)
        {
          if (v8)
            goto LABEL_24;
        }
        else if (CFStringCompare(v9, v8, 0) != kCFCompareLessThan)
        {
          goto LABEL_24;
        }
        v5 = v7 + 1;
        v4 = (_QWORD *)v7[1];
        if (!v4)
          goto LABEL_24;
      }
      else
      {
        if (CFStringCompare(*a3, v9, 0) != kCFCompareLessThan)
        {
          v9 = (const __CFString *)v7[4];
          v8 = *a3;
          goto LABEL_11;
        }
LABEL_18:
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_24;
      }
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_24:
  *a2 = v7;
  return v5;
}

uint64_t *sub_16D78(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_16DCC(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_16DCC(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_16F64(uint64_t a1, const __CFString **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __CFString *v6;
  BOOL v7;

  v3 = a1 + 8;
  v4 = sub_16FD8(a1, a2, *(_QWORD *)(a1 + 8), a1 + 8);
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = *(const __CFString **)(v4 + 32);
  if (*a2)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if (!v6)
      return v3;
  }
  else if (CFStringCompare(*a2, v6, 0) == kCFCompareLessThan)
  {
    return v3;
  }
  return v5;
}

uint64_t sub_16FD8(uint64_t a1, const __CFString **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const __CFString *v7;
  const __CFString *v8;
  _BOOL4 v9;
  BOOL v10;
  BOOL v11;
  uint64_t *v12;

  if (a3)
  {
    v5 = a3;
    do
    {
      v7 = *(const __CFString **)(v5 + 32);
      v8 = *a2;
      v9 = *a2 == 0;
      if (v7)
        v10 = v8 == 0;
      else
        v10 = 1;
      if (!v10)
        v9 = CFStringCompare(v7, v8, 0) == kCFCompareLessThan;
      v11 = !v9;
      if (v9)
        v12 = (uint64_t *)(v5 + 8);
      else
        v12 = (uint64_t *)v5;
      if (v11)
        a4 = v5;
      v5 = *v12;
    }
    while (*v12);
  }
  return a4;
}

void BESwizzleInstanceMethods(objc_class *a1, const char *a2, const char *a3)
{
  objc_method *InstanceMethod;
  objc_method *v7;
  objc_method *v8;
  void (*Implementation)(void);
  const char *TypeEncoding;
  void (*v11)(void);
  const char *v12;

  if (a1)
  {
    InstanceMethod = class_getInstanceMethod(a1, a2);
    v7 = class_getInstanceMethod(a1, a3);
    if (InstanceMethod)
    {
      v8 = v7;
      if (v7)
      {
        Implementation = method_getImplementation(v7);
        TypeEncoding = method_getTypeEncoding(v8);
        if (class_addMethod(a1, a2, Implementation, TypeEncoding))
        {
          v11 = method_getImplementation(InstanceMethod);
          v12 = method_getTypeEncoding(InstanceMethod);
          class_replaceMethod(a1, a3, v11, v12);
        }
        else
        {
          method_exchangeImplementations(InstanceMethod, v8);
        }
      }
    }
  }
}

id BEGetWeakAssociatedObject(void *a1, const void *a2)
{
  id v3;
  id AssociatedObject;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v3 = a1;
  AssociatedObject = objc_getAssociatedObject(v3, a2);
  v5 = objc_claimAutoreleasedReturnValue(AssociatedObject);
  v6 = (void *)v5;
  if (v5)
  {
    v7 = (*(uint64_t (**)(uint64_t))(v5 + 16))(v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (!v8)
      BESetWeakAssociatedObject(v3, a2, 0);
  }
  else
  {
    v8 = 0;
  }

  return v8;
}

void BESetWeakAssociatedObject(void *a1, const void *a2, void *a3)
{
  id v5;
  id v6;
  void ***v7;
  id v8;
  void **v9;
  uint64_t v10;
  id (*v11)(uint64_t);
  void *v12;
  id v13;
  id location;

  v5 = a1;
  v6 = a3;
  objc_initWeak(&location, v6);
  if (v6)
  {
    v9 = _NSConcreteStackBlock;
    v10 = 3221225472;
    v11 = sub_172A4;
    v12 = &unk_377E70;
    objc_copyWeak(&v13, &location);
    v7 = objc_retainBlock(&v9);
    objc_destroyWeak(&v13);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(v7, "copy", v9, v10, v11, v12);
  objc_setAssociatedObject(v5, a2, v8, (char *)&dword_0 + 1);

  objc_destroyWeak(&location);
}

void sub_17290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_172A4(uint64_t a1)
{
  return objc_loadWeakRetained((id *)(a1 + 32));
}

void ITEpub3NavParser::ITEpub3NavParser(ITEpub3NavParser *this)
{
  uint64_t v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v1 = off_377EF0;
  *(_QWORD *)(v1 + 304) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 296) = 0;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
}

{
  uint64_t v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v1 = off_377EF0;
  *(_QWORD *)(v1 + 304) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 296) = 0;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 264) = 0u;
  *(_OWORD *)(v1 + 280) = 0u;
}

void ITEpub3NavParser::~ITEpub3NavParser(ITEpub3NavParser *this)
{
  ITRetain *v2;
  ITRetain *v3;
  ITRetain *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;

  *(_QWORD *)this = off_377EF0;
  v2 = (ITRetain *)*((_QWORD *)this + 15);
  if (v2)
  {
    ITRetain::release(v2);
    *((_QWORD *)this + 15) = 0;
  }
  v3 = (ITRetain *)*((_QWORD *)this + 16);
  if (v3)
  {
    ITRetain::release(v3);
    *((_QWORD *)this + 16) = 0;
  }
  v4 = (ITRetain *)*((_QWORD *)this + 17);
  if (v4)
  {
    ITRetain::release(v4);
    *((_QWORD *)this + 17) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 18);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 18) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 22);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 22) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 19);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 19) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 20);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 20) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 21);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 21) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 38);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 38) = 0;
  }
  sub_18E60((_QWORD *)this + 31);
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpub3NavParser::~ITEpub3NavParser(this);
  operator delete();
}

uint64_t ITEpub3NavParser::headNavPoint(ITEpub3NavParser *this)
{
  int v1;
  char *v2;

  v1 = *((_DWORD *)this + 58);
  switch(v1)
  {
    case 3:
      v2 = (char *)this + 136;
      return *(_QWORD *)v2;
    case 2:
      v2 = (char *)this + 128;
      return *(_QWORD *)v2;
    case 1:
      v2 = (char *)this + 120;
      return *(_QWORD *)v2;
  }
  return 0;
}

uint64_t ITEpub3NavParser::setHeadNavPoint(uint64_t this, ITNavPoint *a2)
{
  int v2;
  _QWORD *v3;

  v2 = *(_DWORD *)(this + 232);
  switch(v2)
  {
    case 3:
      v3 = (_QWORD *)(this + 136);
      break;
    case 2:
      v3 = (_QWORD *)(this + 128);
      break;
    case 1:
      v3 = (_QWORD *)(this + 120);
      break;
    default:
      return this;
  }
  *v3 = a2;
  return this;
}

_DWORD *ITEpub3NavParser::resetHeadNavPoint(_DWORD *this)
{
  _DWORD *v1;
  int v2;
  _DWORD **v3;
  _QWORD *v4;

  v1 = this;
  v2 = this[58];
  switch(v2)
  {
    case 3:
      v3 = (_DWORD **)(this + 34);
      break;
    case 2:
      v3 = (_DWORD **)(this + 32);
      break;
    case 1:
      v3 = (_DWORD **)(this + 30);
      break;
    default:
      goto LABEL_9;
  }
  this = *v3;
  if (*v3)
  {
    this = (_DWORD *)ITRetain::release((ITRetain *)this);
    v2 = v1[58];
  }
LABEL_9:
  switch(v2)
  {
    case 3:
      v4 = v1 + 34;
      break;
    case 2:
      v4 = v1 + 32;
      break;
    case 1:
      v4 = v1 + 30;
      break;
    default:
      return this;
  }
  *v4 = 0;
  return this;
}

void ITEpub3NavParser::pushDownOneLevel(ITEpub3NavParser *this)
{
  operator new();
}

void sub_17ADC()
{
  operator delete();
}

uint64_t ITEpub3NavParser::popUpOneLevel(uint64_t this)
{
  int v1;
  ITNavPoint **v2;
  ITNavPoint *v3;
  ITNavPoint *v4;
  ITNavPoint **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  ITNavPoint *v10;

  v1 = *(_DWORD *)(this + 232);
  switch(v1)
  {
    case 3:
      v2 = (ITNavPoint **)(this + 136);
      break;
    case 2:
      v2 = (ITNavPoint **)(this + 128);
      break;
    case 1:
      v2 = (ITNavPoint **)(this + 120);
      break;
    default:
      return this;
  }
  v3 = *v2;
  if (*v2)
  {
    v4 = (ITNavPoint *)*((_QWORD *)v3 + 5);
    if (v4)
    {
      if (v1 == 3)
        v5 = (ITNavPoint **)(this + 136);
      else
        v5 = (ITNavPoint **)(v1 == 2 ? this + 128 : this + 120);
      *v5 = v4;
      this = ITNavPoint::contentFileIncludingHash(v3);
      if (!this)
      {
        ITRetain::retain(v3);
        ITNavPoint::removeChild(v4, v3);
        v6 = *((_QWORD *)v3 + 3) - *((_QWORD *)v3 + 2);
        if (v6)
        {
          v7 = 0;
          v8 = v6 >> 3;
          if (v8 <= 1)
            v9 = 1;
          else
            v9 = v8;
          do
          {
            v10 = (ITNavPoint *)ITNavPoint::childAtIndex(v3, v7);
            if (v10)
              ITNavPoint::addChild(v4, v10);
            ++v7;
          }
          while (v9 != v7);
        }
        return ITRetain::release(v3);
      }
    }
  }
  return this;
}

void ITEpub3NavParser::takeFoundTextAsName(ITEpub3NavParser *this)
{
  int v2;
  ITNavPoint **v3;
  ITNavPoint *v4;
  const char *v5;
  CFStringRef v6;
  CFStringRef v7;
  const char *v8;

  v2 = *((_DWORD *)this + 58);
  switch(v2)
  {
    case 3:
      v3 = (ITNavPoint **)((char *)this + 136);
      break;
    case 2:
      v3 = (ITNavPoint **)((char *)this + 128);
      break;
    case 1:
      v3 = (ITNavPoint **)((char *)this + 120);
      break;
    default:
      return;
  }
  v4 = *v3;
  if (*v3)
  {
    v5 = (char *)this + 184;
    if (*((char *)this + 207) < 0)
    {
      if (!*((_QWORD *)this + 24))
      {
LABEL_16:
        v8 = (char *)this + 72;
        if (*((char *)this + 95) < 0)
        {
          if (!*((_QWORD *)this + 10))
            return;
          v8 = *(const char **)v8;
        }
        else if (!*((_BYTE *)this + 95))
        {
          return;
        }
        v7 = CFStringCreateWithCString(kCFAllocatorDefault, v8, 0x8000100u);
        if (!v7)
          return;
LABEL_24:
        ITNavPoint::setContentName(v4, v7);
        CFRelease(v7);
        return;
      }
      v5 = *(const char **)v5;
    }
    else if (!*((_BYTE *)this + 207))
    {
      goto LABEL_16;
    }
    v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
    v7 = v6;
    if ((*((char *)this + 207) & 0x80000000) == 0)
    {
      *((_BYTE *)this + 184) = 0;
      *((_BYTE *)this + 207) = 0;
      if (!v6)
        return;
      goto LABEL_24;
    }
    **((_BYTE **)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
    if (v6)
      goto LABEL_24;
  }
}

std::string *ITEpub3NavParser::takeFoundTextAsAccumulatedText(std::string *this)
{
  uint64_t v1;
  const std::string::value_type *v2;
  const std::string::value_type *v3;

  v1 = (uint64_t)this;
  v2 = (const std::string::value_type *)&this[3];
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[3].__r_.__value_.__l.__size_)
      return this;
    v3 = *(const std::string::value_type **)v2;
  }
  else
  {
    v3 = (const std::string::value_type *)&this[3];
    if (!*((_BYTE *)&this[3].__r_.__value_.__s + 23))
      return this;
  }
  std::string::append((std::string *)((char *)this + 184), v3);
  if (*(char *)(v1 + 95) < 0)
    v2 = *(const std::string::value_type **)v2;
  this = std::string::append((std::string *)(v1 + 208), v2);
  if (*(char *)(v1 + 95) < 0)
  {
    **(_BYTE **)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 72) = 0;
    *(_BYTE *)(v1 + 95) = 0;
  }
  return this;
}

void ITEpub3NavParser::takeFoundTextAsHTML(ITEpub3NavParser *this)
{
  int v2;
  ITNavPoint **v3;
  ITNavPoint *v4;
  const char *v5;
  CFStringRef v6;
  CFStringRef v7;
  const char *v8;

  v2 = *((_DWORD *)this + 58);
  switch(v2)
  {
    case 3:
      v3 = (ITNavPoint **)((char *)this + 136);
      break;
    case 2:
      v3 = (ITNavPoint **)((char *)this + 128);
      break;
    case 1:
      v3 = (ITNavPoint **)((char *)this + 120);
      break;
    default:
      return;
  }
  v4 = *v3;
  if (*v3)
  {
    v5 = (char *)this + 208;
    if (*((char *)this + 231) < 0)
    {
      if (!*((_QWORD *)this + 27))
      {
LABEL_16:
        v8 = (char *)this + 72;
        if (*((char *)this + 95) < 0)
        {
          if (!*((_QWORD *)this + 10))
            return;
          v8 = *(const char **)v8;
        }
        else if (!*((_BYTE *)this + 95))
        {
          return;
        }
        v7 = CFStringCreateWithCString(kCFAllocatorDefault, v8, 0x8000100u);
        if (!v7)
          return;
LABEL_24:
        ITNavPoint::setContentHTML(v4, v7);
        CFRelease(v7);
        return;
      }
      v5 = *(const char **)v5;
    }
    else if (!*((_BYTE *)this + 231))
    {
      goto LABEL_16;
    }
    v6 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
    v7 = v6;
    if ((*((char *)this + 231) & 0x80000000) == 0)
    {
      *((_BYTE *)this + 208) = 0;
      *((_BYTE *)this + 231) = 0;
      if (!v6)
        return;
      goto LABEL_24;
    }
    **((_BYTE **)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
    if (v6)
      goto LABEL_24;
  }
}

std::string *ITEpub3NavParser::takeFoundTextAsAccumulatedHTML(std::string *this)
{
  uint64_t v1;
  const std::string::value_type *v2;

  v1 = (uint64_t)this;
  v2 = (const std::string::value_type *)&this[3];
  if (SHIBYTE(this[3].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[3].__r_.__value_.__l.__size_)
      return this;
    v2 = *(const std::string::value_type **)v2;
  }
  else if (!*((_BYTE *)&this[3].__r_.__value_.__s + 23))
  {
    return this;
  }
  this = std::string::append((std::string *)((char *)this + 208), v2);
  if (*(char *)(v1 + 95) < 0)
  {
    **(_BYTE **)(v1 + 72) = 0;
    *(_QWORD *)(v1 + 80) = 0;
  }
  else
  {
    *(_BYTE *)(v1 + 72) = 0;
    *(_BYTE *)(v1 + 95) = 0;
  }
  return this;
}

void ITEpub3NavParser::StartNavChildElement(ITEpub3NavParser *this, const __CFString *a2, const __CFDictionary *a3)
{
  int v6;
  char *v7;
  __CFString *v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const __CFString *Value;
  const __CFString *v12;
  std::string *v13;
  const std::string::value_type *v14;
  _BOOL4 doesNodeMatch;
  int v16;
  int v17;
  ITNavPoint **v18;
  ITNavPoint *v19;
  const __CFString *v20;
  const __CFString *v21;
  int v22;
  const void *v23;
  const void *v24;
  _BOOL4 v25;
  void *__p;
  std::string::size_type v27;
  uint64_t v28;

  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("ol")))
  {
    v6 = *((_DWORD *)this + 58);
    switch(v6)
    {
      case 3:
        v7 = (char *)this + 136;
        break;
      case 2:
        v7 = (char *)this + 128;
        break;
      case 1:
        v7 = (char *)this + 120;
        break;
      default:
        goto LABEL_13;
    }
    if (*(_QWORD *)v7)
      return;
LABEL_13:
    ITEpub3NavParser::pushDownOneLevel(this);
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("li")))
  {
    if (*((char *)this + 207) < 0)
    {
      **((_BYTE **)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    else
    {
      *((_BYTE *)this + 184) = 0;
      *((_BYTE *)this + 207) = 0;
    }
    if (*((char *)this + 231) < 0)
    {
      **((_BYTE **)this + 26) = 0;
      *((_QWORD *)this + 27) = 0;
    }
    else
    {
      *((_BYTE *)this + 208) = 0;
      *((_BYTE *)this + 231) = 0;
    }
    ITEpub3NavParser::pushDownOneLevel(this);
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("span")))
  {
    *((_DWORD *)this + 60) = 1;
    v8 = ITEpub3NavParser::copyNewId(this);
    __p = 0;
    v27 = 0;
    v28 = 0;
    ITStrUtil::toString(v8, (uint64_t)&__p);
    CFRelease(v8);
    std::string::append((std::string *)((char *)this + 208), "<span id=\"");
    if (v28 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v28 >= 0)
      v10 = HIBYTE(v28);
    else
      v10 = v27;
    std::string::append((std::string *)((char *)this + 208), p_p, v10);
    std::string::append((std::string *)((char *)this + 208), "\">");
    ITEpub3NavParser::takeFoundTextAsAccumulatedText((std::string *)this);
LABEL_22:
    if (SHIBYTE(v28) < 0)
      operator delete(__p);
    return;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("img")))
  {
    Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("class"));
    v12 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("src"));
    if (!Value || !v12)
      return;
    __p = 0;
    v27 = 0;
    v28 = 0;
    ITStrUtil::toString(v12, (uint64_t)&__p);
    if (CFStringCompare(Value, CFSTR("gaiji"), 0) == kCFCompareEqualTo
      || CFStringCompare(Value, CFSTR("gaiji-wide"), 0) == kCFCompareEqualTo)
    {
      *((_DWORD *)this + 60) = 1;
      v13 = (std::string *)((char *)this + 208);
      std::string::append(v13, "<img src=\"");
      if (v28 >= 0)
        v14 = (const std::string::value_type *)&__p;
      else
        v14 = (const std::string::value_type *)__p;
      std::string::append(v13, v14);
      std::string::append(v13, "\"/>");
    }
    goto LABEL_22;
  }
  doesNodeMatch = ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("ruby"));
  v16 = *((_DWORD *)this + 59);
  if (doesNodeMatch)
  {
    *((_DWORD *)this + 59) = v16 + 1;
    *((_DWORD *)this + 60) = 1;
    std::string::append((std::string *)((char *)this + 208), "<ruby>");
LABEL_40:
    ITEpub3NavParser::takeFoundTextAsAccumulatedText((std::string *)this);
    return;
  }
  if (v16)
  {
    if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("rb")))
      goto LABEL_40;
    if (*((_DWORD *)this + 59))
    {
      if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("rc")))
        goto LABEL_40;
      if (*((_DWORD *)this + 59) && ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("rt")))
      {
        std::string::append((std::string *)((char *)this + 208), "<rt>");
        return;
      }
    }
  }
  if (!ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("a")))
    return;
  if (*((char *)this + 207) < 0)
  {
    **((_BYTE **)this + 23) = 0;
    *((_QWORD *)this + 24) = 0;
  }
  else
  {
    *((_BYTE *)this + 184) = 0;
    *((_BYTE *)this + 207) = 0;
  }
  if (*((char *)this + 231) < 0)
  {
    **((_BYTE **)this + 26) = 0;
    *((_QWORD *)this + 27) = 0;
  }
  else
  {
    *((_BYTE *)this + 208) = 0;
    *((_BYTE *)this + 231) = 0;
  }
  v17 = *((_DWORD *)this + 58);
  switch(v17)
  {
    case 3:
      v18 = (ITNavPoint **)((char *)this + 136);
      break;
    case 2:
      v18 = (ITNavPoint **)((char *)this + 128);
      break;
    case 1:
      v18 = (ITNavPoint **)((char *)this + 120);
      break;
    default:
      return;
  }
  v19 = *v18;
  if (*v18)
  {
    v20 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("href"));
    ITNavPoint::setContentFile(v19, v20);
    v21 = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("epub:type"));
    ITNavPoint::setNavPointType(v19, v21);
    if (v20)
    {
      v22 = *((_DWORD *)this + 58);
      if (v22 == 1)
      {
        if (*((_QWORD *)this + 18))
          return;
        *((_QWORD *)this + 18) = v20;
LABEL_74:
        CFRetain(v20);
        return;
      }
      if (!v21 || v22 != 2)
        return;
      if (CFStringFind(v21, CFSTR("reader-start-page"), 0).location != -1)
      {
        v23 = (const void *)*((_QWORD *)this + 21);
        if (v23)
        {
          CFRelease(v23);
          *((_QWORD *)this + 21) = 0;
        }
        *((_QWORD *)this + 21) = v20;
        CFRetain(v20);
        v24 = (const void *)*((_QWORD *)this + 19);
        if (v24)
        {
          CFRelease(v24);
          *((_QWORD *)this + 19) = 0;
        }
        goto LABEL_73;
      }
      if (!*((_QWORD *)this + 19))
      {
        v25 = CFStringCompare(v21, CFSTR("bodymatter"), 0) == kCFCompareEqualTo
           || CFStringCompare(v21, CFSTR("acknowledgements"), 0) == kCFCompareEqualTo
           || CFStringCompare(v21, CFSTR("dedication"), 0) == kCFCompareEqualTo
           || CFStringCompare(v21, CFSTR("epigraph"), 0) == kCFCompareEqualTo
           || CFStringCompare(v21, CFSTR("foreward"), 0) == kCFCompareEqualTo
           || CFStringCompare(v21, CFSTR("preface"), 0) == kCFCompareEqualTo
           || CFStringCompare(v21, CFSTR("introduction"), 0) == kCFCompareEqualTo
           || CFStringCompare(v21, CFSTR("frontmatter"), 0) == kCFCompareEqualTo;
        if (v25 && !*((_QWORD *)this + 19))
        {
LABEL_73:
          *((_QWORD *)this + 19) = v20;
          goto LABEL_74;
        }
      }
    }
  }
}

void sub_18514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFString *ITEpub3NavParser::copyNewId(ITEpub3NavParser *this)
{
  __CFString *Mutable;
  uint64_t v3;
  __CFDictionary *v4;
  __CFString *v5;

  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  v3 = *((unsigned int *)this + 61);
  *((_DWORD *)this + 61) = v3 + 1;
  CFStringAppendFormat(Mutable, 0, CFSTR("-ibooks-toc-id-%d"), v3);
  v4 = (__CFDictionary *)*((_QWORD *)this + 38);
  if (!v4)
  {
    v4 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *((_QWORD *)this + 38) = v4;
  }
  v5 = ITEpub3NavParser::copyTocCfi(this);
  CFDictionaryAddValue(v4, v5, Mutable);
  CFRelease(v5);
  return Mutable;
}

std::string *ITEpub3NavParser::FoundText(std::string *this, const __CFString *a2)
{
  std::string *result;
  const __CFString *v4;

  ITEpubXmlParseHandler::FoundText(this, a2);
  if (!HIDWORD(this[9].__r_.__value_.__r.__words[2]))
    return ITEpub3NavParser::takeFoundTextAsAccumulatedText(this);
  result = (std::string *)ITEpubXmlParseHandler::CurrentNodeName((CFArrayRef *)this);
  if (!result)
    return result;
  v4 = (const __CFString *)result;
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, (CFStringRef)result, CFSTR("ruby")))
    return ITEpub3NavParser::takeFoundTextAsAccumulatedText(this);
  result = (std::string *)ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, v4, CFSTR("rt"));
  if ((_DWORD)result)
    return ITEpub3NavParser::takeFoundTextAsAccumulatedHTML(this);
  return result;
}

void ITEpub3NavParser::StartElement(ITEpub3NavParser *this, const __CFString *a2, const __CFDictionary *a3)
{
  int v6;
  const __CFString *Value;
  const __CFString *v8;
  int v9;

  if (!ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("html")))
  {
    *((_DWORD *)this + 74) += 2;
    sub_18F40((_QWORD *)this + 31, (_DWORD *)this + 74);
    *((_DWORD *)this + 74) = 0;
  }
  ITEpubXmlParseHandler::StartElement((CFMutableArrayRef *)this, a2, a3);
  v6 = *((_DWORD *)this + 58);
  if ((v6 - 1) < 3)
  {
    ITEpub3NavParser::StartNavChildElement(this, a2, a3);
    return;
  }
  if (!v6)
  {
    if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("nav")))
    {
      Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("epub:type"));
      if (!Value)
        return;
      v8 = Value;
      if (CFStringCompare(Value, CFSTR("toc"), 0))
      {
        if (CFStringCompare(v8, CFSTR("landmarks"), 0))
        {
          if (CFStringCompare(v8, CFSTR("page-list"), 0))
            return;
          v9 = 3;
        }
        else
        {
          v9 = 2;
        }
      }
      else
      {
        v9 = 1;
      }
      *((_DWORD *)this + 58) = v9;
      ITEpub3NavParser::resetHeadNavPoint(this);
    }
    else if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("title")))
    {
      if (*((char *)this + 207) < 0)
      {
        **((_BYTE **)this + 23) = 0;
        *((_QWORD *)this + 24) = 0;
      }
      else
      {
        *((_BYTE *)this + 184) = 0;
        *((_BYTE *)this + 207) = 0;
      }
      if (*((char *)this + 231) < 0)
      {
        **((_BYTE **)this + 26) = 0;
        *((_QWORD *)this + 27) = 0;
      }
      else
      {
        *((_BYTE *)this + 208) = 0;
        *((_BYTE *)this + 231) = 0;
      }
    }
  }
}

uint64_t ITEpub3NavParser::setElementOpen(uint64_t result, int a2)
{
  *(_DWORD *)(result + 232) = a2;
  return result;
}

void ITEpub3NavParser::EndNavChildElement(ITEpub3NavParser *this, const __CFString *a2)
{
  std::string *v4;
  const std::string::value_type *v5;
  int v6;
  char *v7;
  uint64_t v8;

  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("nav")))
  {
    *((_DWORD *)this + 58) = 0;
    return;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("span")))
  {
    ITEpub3NavParser::takeFoundTextAsAccumulatedText((std::string *)this);
    v4 = (std::string *)((char *)this + 208);
    v5 = "</span>";
LABEL_6:
    std::string::append(v4, v5);
    return;
  }
  if (*((_DWORD *)this + 59)
    && (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("rbc"))
     || *((_DWORD *)this + 59) && ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("rb"))))
  {
    ITEpub3NavParser::takeFoundTextAsAccumulatedText((std::string *)this);
    return;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("ruby")))
  {
    ITEpub3NavParser::takeFoundTextAsAccumulatedText((std::string *)this);
    std::string::append((std::string *)((char *)this + 208), "</ruby>");
    --*((_DWORD *)this + 59);
    return;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("rt")))
  {
    v4 = (std::string *)((char *)this + 208);
    v5 = "</rt>";
    goto LABEL_6;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("a")))
  {
    ITEpub3NavParser::takeFoundTextAsName(this);
    if (*((_DWORD *)this + 60))
      ITEpub3NavParser::takeFoundTextAsHTML(this);
    *((_DWORD *)this + 60) = 0;
  }
  else
  {
    if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("li")))
      goto LABEL_21;
    if (!ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("ol")))
      return;
    v6 = *((_DWORD *)this + 58);
    switch(v6)
    {
      case 3:
        v7 = (char *)this + 136;
        break;
      case 2:
        v7 = (char *)this + 128;
        break;
      case 1:
        v7 = (char *)this + 120;
        break;
      default:
        return;
    }
    v8 = *(_QWORD *)v7;
    if (v8)
    {
      if (*(_QWORD *)(v8 + 40))
LABEL_21:
        ITEpub3NavParser::popUpOneLevel((uint64_t)this);
    }
  }
}

void ITEpub3NavParser::EndElement(ITEpub3NavParser *this, const __CFString *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;

  v4 = *((_QWORD *)this + 36);
  if (v4)
  {
    v5 = v4 - 1;
    *((_DWORD *)this + 74) = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 32)
                                                   + (((unint64_t)(*((_QWORD *)this + 35) + v5) >> 7) & 0x1FFFFFFFFFFFFF8))
                                       + 4 * ((*((_QWORD *)this + 35) + v5) & 0x3FF));
    *((_QWORD *)this + 36) = v5;
    sub_19734((_QWORD *)this + 31, 1);
  }
  if ((*((_DWORD *)this + 58) - 1) > 2)
  {
    if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("title")))
    {
      v6 = (char *)this + 184;
      if (*((char *)this + 207) < 0)
        v6 = *(const char **)v6;
      *((_QWORD *)this + 22) = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x8000100u);
    }
  }
  else
  {
    ITEpub3NavParser::EndNavChildElement(this, a2);
  }
  ITEpubXmlParseHandler::EndElement((CFArrayRef *)this, a2);
}

ITRetain *ITEpub3NavParser::copyTableOfContents(ITEpub3NavParser *this)
{
  ITRetain *result;

  result = (ITRetain *)*((_QWORD *)this + 15);
  if (result)
  {
    ITRetain::retain(result);
    return (ITRetain *)*((_QWORD *)this + 15);
  }
  return result;
}

ITRetain *ITEpub3NavParser::copyPageLists(ITEpub3NavParser *this)
{
  ITRetain *result;

  result = (ITRetain *)*((_QWORD *)this + 17);
  if (result)
  {
    ITRetain::retain(result);
    return (ITRetain *)*((_QWORD *)this + 17);
  }
  return result;
}

ITRetain *ITEpub3NavParser::copyLandmarks(ITEpub3NavParser *this)
{
  ITRetain *result;

  result = (ITRetain *)*((_QWORD *)this + 16);
  if (result)
  {
    ITRetain::retain(result);
    return (ITRetain *)*((_QWORD *)this + 16);
  }
  return result;
}

const void *ITEpub3NavParser::copyFirstChapterHref(ITEpub3NavParser *this)
{
  const void *result;
  char *v3;
  char *v4;
  const void *v5;

  v3 = (char *)this + 152;
  result = (const void *)*((_QWORD *)this + 19);
  if (!result)
  {
    v5 = (const void *)*((_QWORD *)this + 18);
    v4 = (char *)this + 144;
    result = v5;
    if (!v5)
      return result;
    v3 = v4;
  }
  CFRetain(result);
  return *(const void **)v3;
}

const void *ITEpub3NavParser::copyReaderStartPageHref(ITEpub3NavParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 21);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 21);
  }
  return result;
}

uint64_t ITEpub3NavParser::firstChapterQuality(ITEpub3NavParser *this)
{
  const __CFString *v1;
  uint64_t v2;

  if (*((_QWORD *)this + 19))
  {
    v1 = (const __CFString *)*((_QWORD *)this + 20);
    v2 = 9;
    if (v1)
    {
      if (CFStringCompare(v1, CFSTR("reader-start-page"), 0))
        return 9;
      else
        return 10;
    }
  }
  else if (*((_QWORD *)this + 18))
  {
    return 9;
  }
  else
  {
    return 0;
  }
  return v2;
}

const void *ITEpub3NavParser::copyTocTitle(ITEpub3NavParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 22);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 22);
  }
  return result;
}

__CFString *ITEpub3NavParser::copyTocCfi(ITEpub3NavParser *this)
{
  _QWORD *v1;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __CFString *Mutable;
  uint64_t j;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  _OWORD v13[2];
  __int128 v14;

  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  v1 = (_QWORD *)((char *)this + 248);
  for (i = *((_QWORD *)this + 36); i; i = *((_QWORD *)this + 36))
  {
    v4 = i - 1;
    v5 = *((_QWORD *)this + 35) + v4;
    v6 = *(_QWORD *)(*((_QWORD *)this + 32) + ((v5 >> 7) & 0x1FFFFFFFFFFFFF8));
    v12 = 0;
    v12 = *(_DWORD *)(v6 + 4 * (v5 & 0x3FF));
    *((_QWORD *)this + 36) = v4;
    sub_19734(v1, 1);
    sub_18F40(v13, &v12);
  }
  Mutable = CFStringCreateMutable(kCFAllocatorDefault, 0);
  CFStringAppend(Mutable, CFSTR("epubcfi(!"));
  for (j = *((_QWORD *)&v14 + 1); *((_QWORD *)&v14 + 1); j = *((_QWORD *)&v14 + 1))
  {
    v9 = j - 1;
    v10 = *(_QWORD *)(*((_QWORD *)&v13[0] + 1) + (((unint64_t)(v14 + v9) >> 7) & 0x1FFFFFFFFFFFFF8));
    v12 = 0;
    v12 = *(_DWORD *)(v10 + 4 * ((v14 + v9) & 0x3FF));
    *((_QWORD *)&v14 + 1) = v9;
    sub_19734(v13, 1);
    sub_18F40(v1, &v12);
    if (*((_QWORD *)&v14 + 1))
      CFStringAppendFormat(Mutable, 0, CFSTR("/%d"), v12);
    else
      CFStringAppendFormat(Mutable, 0, CFSTR(",/%d/1,/%d)"), v12, v12 + 1);
  }
  sub_18E60(v13);
  return Mutable;
}

void sub_18D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_18E60((uint64_t *)va);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef ITEpub3NavParser::cfiToIdMap(ITEpub3NavParser *this)
{
  CFMutableDictionaryRef result;

  result = (CFMutableDictionaryRef)*((_QWORD *)this + 38);
  if (!result)
  {
    result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    *((_QWORD *)this + 38) = result;
  }
  return result;
}

CFMutableDictionaryRef ITEpub3NavParser::copyTocCfiToIdMap(ITEpub3NavParser *this)
{
  CFMutableDictionaryRef Mutable;

  Mutable = (CFMutableDictionaryRef)*((_QWORD *)this + 38);
  if (Mutable
    || (Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks), (*((_QWORD *)this + 38) = Mutable) != 0))
  {
    CFRetain(Mutable);
  }
  return Mutable;
}

uint64_t sub_18E60(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 512;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_18EF4((uint64_t)a1);
}

uint64_t sub_18EF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void sub_18F40(_QWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 7) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_18FC4(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(_QWORD *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_18FC4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x400;
  v4 = v2 - 1024;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_7A04(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_192D8(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_193EC((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_7A04((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_7A04((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_19508(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1961C((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1928C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_192D8(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_7A04(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_193EC(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_7A04(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_19508(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_7A04(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1961C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_7A04(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_19734(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = ((v2 - v3) << 7) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400)
    a2 = 1;
  if (v5 < 0x800)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void ITEpubNavMapParser::ITEpubNavMapParser(ITEpubNavMapParser *this, ITEpubOpfParser *a2)
{
  uint64_t v3;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *(_QWORD *)v3 = off_377F50;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = a2;
  if (a2)
    ITRetain::retain(a2);
}

void sub_19AB8(_Unwind_Exception *a1)
{
  ITEpubXmlParseHandler *v1;

  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(v1);
  _Unwind_Resume(a1);
}

void ITEpubNavMapParser::~ITEpubNavMapParser(ITEpubNavMapParser *this)
{
  ITRetain *v2;
  ITRetain *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  *(_QWORD *)this = off_377F50;
  v2 = (ITRetain *)*((_QWORD *)this + 20);
  if (v2)
  {
    ITRetain::release(v2);
    *((_QWORD *)this + 20) = 0;
  }
  v3 = (ITRetain *)*((_QWORD *)this + 16);
  if (v3)
  {
    ITRetain::release(v3);
    *((_QWORD *)this + 16) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 17);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 17) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 18);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 18) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 19);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 19) = 0;
  }
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubNavMapParser::~ITEpubNavMapParser(this);
  operator delete();
}

void ITEpubNavMapParser::StartNode(ITEpubNavMapParser *this, CFStringRef theString, const __CFDictionary *a3)
{
  ITRetain *v6;
  const __CFString *Value;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;

  if (*((_DWORD *)this + 30))
    goto LABEL_21;
  if (ITEpubXmlParseHandler::doesNodeMatch(this, theString, CFSTR("navMap")))
  {
    v6 = (ITRetain *)*((_QWORD *)this + 16);
    if (v6)
    {
      ITRetain::release(v6);
      *((_QWORD *)this + 16) = 0;
    }
    operator new();
  }
  if (*((_DWORD *)this + 30))
  {
LABEL_21:
    if (ITEpubXmlParseHandler::doesNodeMatch(this, theString, CFSTR("navPoint")))
    {
      ++*((_DWORD *)this + 31);
      CFDictionaryGetValue(a3, CFSTR("id"));
      operator new();
    }
    if (ITEpubXmlParseHandler::doesNodeMatch(this, theString, CFSTR("content")) && *((_QWORD *)this + 16))
    {
      Value = (const __CFString *)CFDictionaryGetValue(a3, CFSTR("src"));
      v8 = Value;
      if (Value)
      {
        CFRetain(Value);
        ITNavPoint::setContentFile(*((ITNavPoint **)this + 16), v8);
        CFRelease(v8);
      }
      v9 = (const __CFString *)*((_QWORD *)this + 17);
      if (v9)
      {
        if (!*((_QWORD *)this + 18))
        {
          v10 = *(const __CFString **)(*((_QWORD *)this + 16) + 48);
          if (v10)
          {
            if (CFStringCompare(v10, v9, 0) == kCFCompareEqualTo)
            {
              *((_QWORD *)this + 18) = v8;
              if (v8)
                CFRetain(v8);
            }
          }
        }
      }
    }
  }
}

void sub_19D9C()
{
  operator delete();
}

uint64_t ITEpubNavMapParser::isUndesirableTocElement(ITEpubNavMapParser *this, const __CFString **a2, const ITNavPoint *a3, const ITEpubOpfParser *a4)
{
  CFStringRef v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  const __CFString *v11;
  int CharacterAtIndex;
  uint64_t v13;
  const void *v14;
  const void *v15;

  v7 = ITNavPoint::copyContentFileWithoutHash(a2, (const __CFString *)a2);
  if (v7)
  {
    v8 = v7;
    v9 = (const __CFString *)*((_QWORD *)a4 + 64);
    if (v9 && CFStringCompare(v9, v8, 0) == kCFCompareEqualTo)
      goto LABEL_24;
    v10 = (const __CFString *)*((_QWORD *)a4 + 65);
    if (v10)
    {
      if (CFStringCompare(v10, v8, 0) == kCFCompareEqualTo)
        goto LABEL_24;
    }
    v11 = a2[10];
    if (!v11)
      goto LABEL_19;
    CharacterAtIndex = CFStringGetCharacterAtIndex(a2[10], 0);
    v13 = 0;
    if (CharacterAtIndex > 98)
    {
      if (CharacterAtIndex == 116)
      {
LABEL_18:
        if (CFStringCompare(CFSTR("Table of Contents"), v11, 1uLL))
          goto LABEL_19;
        v14 = (const void *)*((_QWORD *)this + 19);
        if (v14)
        {
          CFRelease(v14);
          *((_QWORD *)this + 19) = 0;
        }
        goto LABEL_22;
      }
      if (CharacterAtIndex != 99)
        goto LABEL_25;
    }
    else if (CharacterAtIndex != 67)
    {
      if (CharacterAtIndex != 84)
        goto LABEL_25;
      goto LABEL_18;
    }
    v13 = 1;
    if (CFStringCompare(CFSTR("Cover"), v11, 1uLL))
    {
      if (CFStringCompare(CFSTR("Contents"), v11, 1uLL) == kCFCompareEqualTo)
      {
        if (*((_QWORD *)this + 19))
        {
LABEL_24:
          v13 = 1;
          goto LABEL_25;
        }
LABEL_22:
        v15 = (const void *)ITNavPoint::contentFileIncludingHash((ITNavPoint *)a2);
        *((_QWORD *)this + 19) = v15;
        if (v15)
          CFRetain(v15);
        goto LABEL_24;
      }
LABEL_19:
      v13 = 0;
    }
LABEL_25:
    CFRelease(v8);
    return v13;
  }
  return 0;
}

void ITEpubNavMapParser::EndNode(ITEpubNavMapParser *this, const __CFString *a2, const char *a3)
{
  const ITNavPoint *v6;
  ITRetain *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  ITNavPoint *v12;
  CFStringRef v13;

  if (*((_DWORD *)this + 30))
  {
    if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("navPoint")))
    {
      if (*((_DWORD *)this + 31))
      {
        v7 = (ITRetain *)*((_QWORD *)this + 16);
        if (v7)
        {
          v8 = *((_QWORD *)v7 + 5);
          if (v8)
            *((_QWORD *)this + 16) = v8;
          if (ITEpubNavMapParser::isUndesirableTocElement(this, (const __CFString **)v7, v6, *((const ITEpubOpfParser **)this + 20)))
          {
            if (v7 == *((ITRetain **)this + 16))
            {
              *((_QWORD *)this + 16) = 0;
            }
            else
            {
              ITRetain::retain(v7);
              ITNavPoint::removeChild(*((_QWORD **)this + 16), v7);
              v9 = *((_QWORD *)v7 + 3) - *((_QWORD *)v7 + 2);
              if ((int)(v9 >> 3) >= 1)
              {
                v10 = 0;
                v11 = (v9 >> 3);
                do
                {
                  v12 = (ITNavPoint *)ITNavPoint::childAtIndex(v7, v10++);
                  ITNavPoint::addChild(*((ITNavPoint **)this + 16), v12);
                }
                while (v11 != v10);
              }
            }
            ITRetain::release(v7);
          }
        }
        --*((_DWORD *)this + 31);
      }
    }
    else if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("text")))
    {
      if (*((_QWORD *)this + 16))
      {
        v13 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
        ITNavPoint::setContentName(*((ITNavPoint **)this + 16), v13);
        if (v13)
          CFRelease(v13);
      }
    }
    else if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("navMap")))
    {
      *((_DWORD *)this + 30) = 0;
    }
  }
}

ITRetain *ITEpubNavMapParser::copyNavMap(ITEpubNavMapParser *this)
{
  ITRetain *result;

  result = (ITRetain *)*((_QWORD *)this + 16);
  if (result)
  {
    ITRetain::retain(result);
    return (ITRetain *)*((_QWORD *)this + 16);
  }
  return result;
}

const void *ITEpubNavMapParser::copyFirstChapterHref(ITEpubNavMapParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 18);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 18);
  }
  return result;
}

const void *ITEpubNavMapParser::copyTocPageHref(ITEpubNavMapParser *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 19);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 19);
  }
  return result;
}

id BEJavascriptProviderUniqueURLForFilename(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@:%@"), CFSTR("ibooks-script"), a1));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v1));

  return v2;
}

const __CFString *NSStringFromBEBookContentLayoutJustification(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unset");
  if (a1 == 1)
    v1 = CFSTR("full-justify");
  if (a1 == 2)
    return CFSTR("no-justify");
  else
    return v1;
}

const __CFString *NSStringFromBEBookContentPreferredFontWeight(uint64_t a1)
{
  const __CFString *v1;

  v1 = CFSTR("unset");
  if (a1 == 1)
    v1 = CFSTR("light");
  if (a1 == 2)
    return CFSTR("heavy");
  else
    return v1;
}

void sub_1AF64(uint64_t a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  uint8_t v5[16];

  objc_msgSend(*(id *)(a1 + 32), "setObserverCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "observerCount") + 1);
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "observerCount") >= 3)
  {
    v2 = _BookEPUBLog();
    v3 = objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, "While we can support more observers, if we get more than two it is either a bug, or an architectural change.", v5, 2u);
    }

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_observers"));
  objc_msgSend(v4, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_1B09C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setObserverCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "observerCount") - 1);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_observers"));
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

void sub_1B1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1B1F0(uint64_t a1)
{

}

void sub_1B1F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_observers"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_1B5D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyLoadCompleteIfNecessary");
}

id sub_1B778(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_notifyLoadFailureError:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1BD14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1BD30(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObservers", 0));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)i);
        if ((objc_opt_respondsToSelector(v8, "navigationHandler:failedToLoadURL:error:") & 1) != 0)
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_request"));
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "URL"));
          objc_msgSend(v8, "navigationHandler:failedToLoadURL:error:", WeakRetained, v10, *(_QWORD *)(a1 + 48));

        }
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    }
    while (v5);
  }

}

void sub_1C0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1C108(uint64_t a1)
{
  _QWORD *WeakRetained;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allObservers", 0));
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
          if ((objc_opt_respondsToSelector(v8, "navigationHandler:failedToLoadURL:error:") & 1) != 0)
            objc_msgSend(v8, "navigationHandler:failedToLoadURL:error:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
        }
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

    v9 = (void *)WeakRetained[10];
    WeakRetained[10] = 0;

  }
}

void sub_1D11C(id a1)
{
  id v1;
  NSObject *v2;
  uint8_t v3[16];

  v1 = _BookEPUBLog();
  v2 = objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_0, v2, OS_LOG_TYPE_INFO, "Completed handling error", v3, 2u);
  }

}

id sub_1D814(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  id result;
  void *v6;

  v2 = a2;
  objc_msgSend(*(id *)(a1 + 32), "cachedApproval:forBookID:", a2, *(_QWORD *)(a1 + 40));
  if (objc_msgSend(*(id *)(a1 + 32), "didApproveLoadingExternalContentForBookID:", *(_QWORD *)(a1 + 40)))
    v4 = 2;
  else
    v4 = 1;
  result = objc_msgSend(*(id *)(a1 + 48), "be_appliedContentBlockingRule");
  if (v2)
  {
    if ((id)v4 != result)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[BEContentBlockingRules sharedInstance](BEContentBlockingRules, "sharedInstance"));
      objc_msgSend(v6, "applyContentBlockingRule:toWebView:completion:", v4, *(_QWORD *)(a1 + 48), &stru_378078);

      return objc_msgSend(*(id *)(a1 + 48), "evaluateJavaScript:completionHandler:", *(_QWORD *)(a1 + 56), &stru_3780B8);
    }
  }
  return result;
}

void sub_1D8BC(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  id v5;
  NSObject *v6;
  int v7;
  NSError *v8;

  v4 = a3;
  if (v4 || !a2)
  {
    v5 = _BookEPUBLog();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = 138412290;
      v8 = v4;
    }

  }
}

void sub_1D970(id a1, id a2, NSError *a3)
{
  NSError *v3;
  id v4;
  NSObject *v5;
  int v6;
  NSError *v7;

  v3 = a3;
  if (v3)
  {
    v4 = _BookEPUBLog();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = 138412290;
      v7 = v3;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_ERROR, "Error in refreshing without blocker: \"%@\"", (uint8_t *)&v6, 0xCu);
    }

  }
}

void sub_1DA1C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  id v11;

  v4 = a3;
  if (v4)
  {
    v5 = _BookEPUBLog();
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 138412546;
      v9 = v7;
      v10 = 2112;
      v11 = v4;
      _os_log_impl(&dword_0, v6, OS_LOG_TYPE_ERROR, "Error in registering deny list url: \"%@\", with error: \"%@\"", (uint8_t *)&v8, 0x16u);
    }

  }
}

void ITEpubNcxParser::ITEpubNcxParser(ITEpubNcxParser *this, ITEpubOpfParser *a2)
{
  _QWORD *v3;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *v3 = off_378138;
  v3[16] = 0;
  v3[17] = 0;
  v3[15] = a2;
  if (a2)
    ITRetain::retain(a2);
  operator new();
}

void sub_1DFE4()
{
  operator delete();
}

void ITEpubNcxParser::~ITEpubNcxParser(ITEpubNcxParser *this)
{
  ITRetain *v2;
  ITRetain *v3;
  ITRetain *v4;

  *(_QWORD *)this = off_378138;
  v2 = (ITRetain *)*((_QWORD *)this + 16);
  if (v2)
  {
    ITRetain::release(v2);
    *((_QWORD *)this + 16) = 0;
  }
  v3 = (ITRetain *)*((_QWORD *)this + 17);
  if (v3)
  {
    ITRetain::release(v3);
    *((_QWORD *)this + 17) = 0;
  }
  v4 = (ITRetain *)*((_QWORD *)this + 15);
  if (v4)
  {
    ITRetain::release(v4);
    *((_QWORD *)this + 15) = 0;
  }
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubNcxParser::~ITEpubNcxParser(this);
  operator delete();
}

uint64_t ITEpubNcxParser::SetXmlPath(ITEpubNcxParser *this, const __CFString *a2)
{
  ITEpubXmlParseHandler::SetXmlPath(this, a2);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 16) + 48))(*((_QWORD *)this + 16), *((_QWORD *)this + 7));
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 17) + 48))(*((_QWORD *)this + 17), *((_QWORD *)this + 7));
}

void ITEpubNcxParser::StartElement(CFMutableArrayRef *this, const __CFString *a2, const __CFDictionary *a3)
{
  ITEpubXmlParseHandler::StartElement(this, a2, a3);
  ITEpubNavMapParser::StartNode(this[16], a2, a3);
  ITEpubPageListParser::StartNode(this[17], a2, a3);
}

void ITEpubNcxParser::EndElement(ITEpubNcxParser *this, const __CFString *a2)
{
  ITEpubNavMapParser *v4;
  const char *v5;
  const char *v6;

  v4 = (ITEpubNavMapParser *)*((_QWORD *)this + 16);
  v5 = (char *)this + 72;
  v6 = (char *)this + 72;
  if (*((char *)this + 95) < 0)
    v6 = *(const char **)v5;
  ITEpubNavMapParser::EndNode(v4, a2, v6);
  if (*((char *)this + 95) < 0)
    v5 = *(const char **)v5;
  ITEpubPageListParser::EndNode(*((ITEpubPageListParser **)this + 17), a2, v5);
  ITEpubXmlParseHandler::EndElement((CFArrayRef *)this, a2);
}

const void *ITEpubNcxParser::copyTocPageHref(ITEpubNavMapParser **this)
{
  return ITEpubNavMapParser::copyTocPageHref(this[16]);
}

ITRetain *ITEpubNcxParser::copyNavMap(ITEpubNavMapParser **this)
{
  return ITEpubNavMapParser::copyNavMap(this[16]);
}

const void *ITEpubNcxParser::copyFirstChapterHref(ITEpubNavMapParser **this)
{
  return ITEpubNavMapParser::copyFirstChapterHref(this[16]);
}

ITRetain *ITEpubNcxParser::copyPageLists(ITEpubPageListParser **this)
{
  return ITEpubPageListParser::copyPageLists(this[17]);
}

uint64_t BEIsInternalInstall()
{
  if (qword_3C1AC8 != -1)
    dispatch_once(&qword_3C1AC8, &stru_378188);
  return byte_3C1AC0;
}

void sub_1E21C(id a1)
{
  byte_3C1AC0 = MGGetBoolAnswer(CFSTR("apple-internal-install"));
}

BOOL BEShouldEnableDeveloperExtrasSettings(char a1)
{
  if ((a1 & 1) != 0)
    return 1;
  if (qword_3C1AC8 != -1)
    dispatch_once(&qword_3C1AC8, &stru_378188);
  return byte_3C1AC0 != 0;
}

id BEAlwaysFullParseEPUB()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("_BEAlwaysFullParse"));

  return v1;
}

void sub_1E318(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSCharacterSet characterSetWithCharactersInString:](NSCharacterSet, "characterSetWithCharactersInString:", CFSTR("=,!$&'()*+;@?\n\"<>\t :")));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "invertedSet"));
  v2 = (void *)qword_3C1AD0;
  qword_3C1AD0 = v1;

}

void sub_1E6C0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t (**v6)(_QWORD, _QWORD, _QWORD);
  id v7;
  void *v8;
  uint64_t v9;
  id v10;

  v10 = a2;
  v5 = a3;
  v6 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "objectForKeyedSubscript:", v10));
  v7 = v5;
  v8 = v7;
  if (v6)
  {
    v9 = ((uint64_t (**)(_QWORD, id, _QWORD))v6)[2](v6, v7, *(_QWORD *)(a1 + 40));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v9);

  }
  objc_msgSend(*(id *)(a1 + 48), "addResult:forKey:", v8, v10);

}

void sub_1FCB4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  __int128 v13;
  uint8_t buf[4];
  uint64_t v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  id v19;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = _BookEPUBLog();
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v13 = *(_OWORD *)(a1 + 48);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithBytes:objCType:](NSValue, "valueWithBytes:objCType:", &v13, "{CGPoint=dd}"));
      *(_DWORD *)buf = 138412802;
      v15 = v9;
      v16 = 2112;
      v17 = v10;
      v18 = 2112;
      v19 = v6;
      _os_log_impl(&dword_0, v8, OS_LOG_TYPE_ERROR, "Failed to set offset of WebView:%@ to %@ - %@", buf, 0x20u);

    }
  }
  v11 = objc_retainBlock(*(id *)(a1 + 40));
  v12 = v11;
  if (v11)
    (*((void (**)(id))v11 + 2))(v11);

}

uint64_t sub_20950(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_20C40(id *a1)
{
  BEEvaluateJavaScriptContext *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  _QWORD v16[5];
  BEEvaluateJavaScriptContext *v17;
  id v18;
  uint8_t buf[4];
  void *v20;
  __int16 v21;
  void *v22;

  v2 = objc_alloc_init(BEEvaluateJavaScriptContext);
  v3 = objc_retainBlock(a1[5]);
  v4 = v3;
  if (v3)
    (*((void (**)(id, BEEvaluateJavaScriptContext *))v3 + 2))(v3, v2);

  v5 = (void *)objc_claimAutoreleasedReturnValue(-[BEEvaluateJavaScriptContext scripts](v2, "scripts"));
  v6 = objc_msgSend(v5, "count");

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(-[BEEvaluateJavaScriptContext _jsonRepresentation](v2, "_jsonRepresentation"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("((blocks) => {   const results = {};   for (const [name, block] of Object.entries(blocks)) {      let result = block();      results[name] = result ? result : '';   }   return results;})({__arguments__});"),
                     "stringByReplacingOccurrencesOfString:withString:",
                     CFSTR("__arguments__"),
                     v7));

    v9 = _BookEPUBLog();
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "be_identifier"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "URL"));
      *(_DWORD *)buf = 138543618;
      v20 = v11;
      v21 = 2112;
      v22 = v12;
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_DEFAULT, "Begin executing JS on %{public}@ %@", buf, 0x16u);

    }
    v13 = a1[4];
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_20E44;
    v16[3] = &unk_378248;
    v16[4] = v13;
    v17 = v2;
    v18 = a1[6];
    objc_msgSend(v13, "evaluateJavaScript:completionHandler:", v8, v16);

  }
  else
  {
    v14 = objc_retainBlock(a1[6]);
    v15 = v14;
    if (v14)
      (*((void (**)(id, _QWORD))v14 + 2))(v14, 0);

  }
}

void sub_20E44(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  id v19;
  void *v20;
  int v21;
  id v22;
  __int16 v23;
  void *v24;

  v5 = a2;
  v6 = a3;
  v7 = _BookEPUBLog();
  v8 = objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "be_identifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "URL"));
    v21 = 138543618;
    v22 = v9;
    v23 = 2112;
    v24 = v10;
    _os_log_impl(&dword_0, v8, OS_LOG_TYPE_DEFAULT, "End executing JS on %{public}@ %@", (uint8_t *)&v21, 0x16u);

  }
  if (v6)
  {
    v11 = _BookEPUBLog();
    v12 = objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_FAULT))
    {
      v21 = 138543362;
      v22 = v6;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_FAULT, "multi-js evaluation failure - %{public}@", (uint8_t *)&v21, 0xCu);
    }

  }
  v13 = objc_opt_class(NSDictionary);
  v14 = BUDynamicCast(v13, v5);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (v15)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "_transformResults:error:", v15, v6));
  }
  else
  {
    v17 = _BookEPUBLog();
    v18 = objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_FAULT))
    {
      v21 = 138543362;
      v22 = v5;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_FAULT, "Unexpected javascript result type for be_evaluateJavaScript - %{public}@", (uint8_t *)&v21, 0xCu);
    }

    v16 = 0;
  }
  v19 = objc_retainBlock(a1[6]);
  v20 = v19;
  if (v19)
    (*((void (**)(id, void *))v19 + 2))(v19, v16);

}

uint64_t sub_21054(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

BOOL ITFileUtil::IsFile(ITFileUtil *this, const unsigned __int8 *a2)
{
  stat v3;

  return this && *(_BYTE *)this && !stat((const char *)this, &v3) && (v3.st_mode & 0xF000) != 0x4000;
}

const char *ITFileUtil::GetSize(const __CFString *this, const __CFString *a2)
{
  const unsigned __int8 *v2;
  void **v3;
  const char *Size;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  ITStrUtil::toString(this, (uint64_t)__p);
  if (v7 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Size = ITFileUtil::GetSize((const char *)v3, v2);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return Size;
}

void sub_2123C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *ITFileUtil::GetSize(const char *this, const unsigned __int8 *a2)
{
  stat v2;

  memset(&v2, 0, sizeof(v2));
  if (this)
  {
    if (!*this || stat(this, &v2) || (v2.st_mode & 0xF000) == 0x4000)
      return 0;
    else
      return (const char *)v2.st_size;
  }
  return this;
}

uint64_t ITFileUtil::slurp(const __CFString *this, __CFString *a2, char **a3, unint64_t *a4)
{
  unint64_t *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v11;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  ITStrUtil::toString(this, (uint64_t)__p);
  if (v11 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = ITFileUtil::slurp((ITFileUtil *)v7, (unsigned __int8 *)a2, a3, v6);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v8;
}

void sub_21334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ITFileUtil::slurp(ITFileUtil *this, unsigned __int8 *a2, char **a3, unint64_t *a4)
{
  char *Size;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  uint8_t v19[8];
  void (**v20)(ITFileUtil *__hidden);
  __int128 v21;
  __int128 v22;
  _BYTE buf[18];
  __int16 v24;
  unsigned __int8 *v25;
  __int16 v26;
  char **v27;

  v20 = off_378318;
  v21 = 0u;
  v22 = 0u;
  if (!this || !a3 || !a2 || !*(_BYTE *)this)
  {
    v12 = _BookEPUBLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      if (this)
        v13 = *(unsigned __int8 *)this;
      else
        v13 = 0;
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = this;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v13;
      v24 = 2048;
      v25 = a2;
      v26 = 2048;
      v27 = a3;
      v9 = "Illegal input: %p [%02x], %p, %p";
      v10 = v12;
      v11 = 38;
      goto LABEL_14;
    }
LABEL_15:
    v14 = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  Size = (char *)ITFileUtil::GetSize((const char *)this, a2);
  if (!Size)
    goto LABEL_15;
  if (ITFileUtil::OpenToRead((ITFileUtil *)&v20, (std::string::value_type *)this))
  {
    v8 = _BookEPUBLog();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = this;
      v9 = "ITFileUtil Failure OpenToRead: [%s]";
      v10 = v8;
      v11 = 12;
LABEL_14:
      _os_log_impl(&dword_0, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
      goto LABEL_15;
    }
    goto LABEL_15;
  }
  v16 = malloc_type_malloc((size_t)(Size + 1), 0xCA8ECAF3uLL);
  *(_QWORD *)a2 = v16;
  if (v16)
  {
    bzero(v16, (size_t)(Size + 1));
    *(_QWORD *)buf = 0;
    ITFileUtil::Read((ITFileUtil *)&v20, *(void **)a2, (size_t)Size, (unint64_t *)buf);
    if (*(char **)buf != Size)
    {
      v17 = _BookEPUBLog();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_0, v17, OS_LOG_TYPE_ERROR, "ITFileUtil::slurp didread != file_size, assuming 0 file size", v19, 2u);
      }
      Size = 0;
    }
    v14 = 0;
  }
  else
  {
    v18 = _BookEPUBLog();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&buf[4] = (_DWORD)Size;
      *(_WORD *)&buf[8] = 2080;
      *(_QWORD *)&buf[10] = this;
      _os_log_impl(&dword_0, v18, OS_LOG_TYPE_ERROR, "Mem error: %d [%s]", buf, 0x12u);
    }
    v14 = 0xFFFFFFFFLL;
  }
  *a3 = Size;
LABEL_16:
  ITFileUtil::~ITFileUtil((void **)&v20);
  return v14;
}

void sub_215C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ITFileUtil::~ITFileUtil((void **)va);
  _Unwind_Resume(a1);
}

void ITFileUtil::ITFileUtil(ITFileUtil *this)
{
  *(_QWORD *)this = off_378318;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
}

{
  *(_QWORD *)this = off_378318;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
}

uint64_t ITFileUtil::OpenToRead(ITFileUtil *this, std::string::value_type *__s)
{
  NSObject *v3;
  int v4;
  const char *v5;
  FILE *v8;
  int v9;
  int v10;
  std::string::value_type *v11;
  __int16 v12;
  int v13;

  if (*((_QWORD *)this + 1))
  {
    v3 = _BookEPUBLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    v4 = *__error();
    v10 = 136315394;
    v11 = __s;
    v12 = 1024;
    v13 = v4;
    v5 = "OpenToRead In Use: [%s] [%d]";
LABEL_4:
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v10, 0x12u);
    return 0xFFFFFFFFLL;
  }
  std::string::assign((std::string *)((char *)this + 16), __s);
  v8 = fopen(__s, "rb");
  *((_QWORD *)this + 1) = v8;
  if (!v8)
  {
    if (*__error() == 2)
      return 0xFFFFFFFFLL;
    v3 = _BookEPUBLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    v9 = *__error();
    v10 = 136315394;
    v11 = __s;
    v12 = 1024;
    v13 = v9;
    v5 = "OpenToRead fopen Failed: [%s] [%d]";
    goto LABEL_4;
  }
  return 0;
}

uint64_t ITFileUtil::Read(ITFileUtil *this, void *__ptr, size_t a3, unint64_t *a4)
{
  FILE *v6;
  size_t v7;
  int v8;
  BOOL v9;
  uint64_t result;
  unint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;

  v6 = (FILE *)*((_QWORD *)this + 1);
  if (v6)
  {
    v7 = fread(__ptr, 1uLL, a3, v6);
    v8 = ferror(*((FILE **)this + 1));
    v9 = v8 == 0;
    if (v8)
      result = 0xFFFFFFFFLL;
    else
      result = 0;
    if (a4)
    {
      if (v9)
        v11 = v7;
      else
        v11 = 0;
      *a4 = v11;
    }
  }
  else
  {
    v12 = _BookEPUBLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v13 = (_QWORD *)*v13;
      v14 = 136315138;
      v15 = v13;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "Read not opened [%s]", (uint8_t *)&v14, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void ITFileUtil::~ITFileUtil(void **this)
{
  *this = off_378318;
  if (this[1])
    ITFileUtil::Close((ITFileUtil *)this);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  ITFileUtil::~ITFileUtil(this);
  operator delete();
}

uint64_t ITFileUtil::Close(ITFileUtil *this)
{
  FILE *v2;
  uint64_t result;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
  {
    fclose(v2);
    result = 0;
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    v4 = _BookEPUBLog();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v5 = (_QWORD *)*v5;
      v6 = 136315138;
      v7 = v5;
      _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "Close not opened [%s]", (uint8_t *)&v6, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t ITFileUtil::Create(ITFileUtil *this, std::string::value_type *__s)
{
  NSObject *v3;
  int v4;
  const char *v5;
  FILE *v8;
  int v9;
  int v10;
  std::string::value_type *v11;
  __int16 v12;
  int v13;

  if (*((_QWORD *)this + 1))
  {
    v3 = _BookEPUBLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    v4 = *__error();
    v10 = 136315394;
    v11 = __s;
    v12 = 1024;
    v13 = v4;
    v5 = "Create File already in Use: [%s] [%d]";
LABEL_4:
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v10, 0x12u);
    return 0xFFFFFFFFLL;
  }
  std::string::assign((std::string *)((char *)this + 16), __s);
  v8 = fopen(__s, "w+b");
  *((_QWORD *)this + 1) = v8;
  if (!v8)
  {
    if (*__error() == 2)
      return 0xFFFFFFFFLL;
    v3 = _BookEPUBLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    v9 = *__error();
    v10 = 136315394;
    v11 = __s;
    v12 = 1024;
    v13 = v9;
    v5 = "Create fopen Failed: [%s] [%d]";
    goto LABEL_4;
  }
  return 0;
}

uint64_t ITFileUtil::OpenToAppend(ITFileUtil *this, std::string::value_type *__s)
{
  NSObject *v3;
  int v4;
  const char *v5;
  FILE *v8;
  int v9;
  int v10;
  std::string::value_type *v11;
  __int16 v12;
  int v13;

  if (*((_QWORD *)this + 1))
  {
    v3 = _BookEPUBLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    v4 = *__error();
    v10 = 136315394;
    v11 = __s;
    v12 = 1024;
    v13 = v4;
    v5 = "OpenToAppend In Use: [%s] [%d]";
LABEL_4:
    _os_log_impl(&dword_0, v3, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&v10, 0x12u);
    return 0xFFFFFFFFLL;
  }
  std::string::assign((std::string *)((char *)this + 16), __s);
  v8 = fopen(__s, "a+b");
  *((_QWORD *)this + 1) = v8;
  if (!v8)
  {
    if (*__error() == 2)
      return 0xFFFFFFFFLL;
    v3 = _BookEPUBLog();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      return 0xFFFFFFFFLL;
    v9 = *__error();
    v10 = 136315394;
    v11 = __s;
    v12 = 1024;
    v13 = v9;
    v5 = "OpenToAppend Failed: [%s] [%d]";
    goto LABEL_4;
  }
  return 0;
}

uint64_t ITFileUtil::GetPosition(ITFileUtil *this)
{
  FILE *v2;
  NSObject *v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (v2)
    return ftell(v2);
  v4 = _BookEPUBLog();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    v5 = (_QWORD *)((char *)this + 16);
    if (*((char *)this + 39) < 0)
      v5 = (_QWORD *)*v5;
    v6 = 136315138;
    v7 = v5;
    _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "GetPosition not opened: [%s]", (uint8_t *)&v6, 0xCu);
  }
  return -1;
}

uint64_t ITFileUtil::SeekTo(ITFileUtil *this, uint64_t a2)
{
  int v2;
  FILE *v4;
  NSObject *v5;
  int v6;
  _QWORD *v7;
  const char *v8;
  NSObject *v9;
  NSObject *v10;
  _QWORD *v11;
  int v13;
  int v14;
  __int16 v15;
  _QWORD *v16;

  v2 = a2;
  v4 = (FILE *)*((_QWORD *)this + 1);
  if (!v4)
  {
    v10 = _BookEPUBLog();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v11 = (_QWORD *)*v11;
      v13 = 67109378;
      v14 = v2;
      v15 = 2080;
      v16 = v11;
      v8 = "SeekTo not opened: [%d] [%s]";
      v9 = v10;
      goto LABEL_11;
    }
    return -1;
  }
  if (fseek(v4, a2, 0))
  {
    v5 = _BookEPUBLog();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6 = *__error();
      v7 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v7 = (_QWORD *)*v7;
      v13 = 67109378;
      v14 = v6;
      v15 = 2080;
      v16 = v7;
      v8 = "SeekTo Failed: %08x [%s]";
      v9 = v5;
LABEL_11:
      _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, v8, (uint8_t *)&v13, 0x12u);
      return -1;
    }
    return -1;
  }
  return ftell(*((FILE **)this + 1));
}

uint64_t ITFileUtil::SeekEnd(ITFileUtil *this)
{
  FILE *v2;
  NSObject *v3;
  int v4;
  _QWORD *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  NSObject *v9;
  _QWORD *v10;
  int v12;
  _QWORD v13[2];

  v2 = (FILE *)*((_QWORD *)this + 1);
  if (!v2)
  {
    v9 = _BookEPUBLog();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v10 = (_QWORD *)*v10;
      v12 = 136315138;
      v13[0] = v10;
      v6 = "SeekEnd not opened: [%s]";
      v7 = v9;
      v8 = 12;
      goto LABEL_11;
    }
    return -1;
  }
  if (fseek(v2, 0, 2))
  {
    v3 = _BookEPUBLog();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4 = *__error();
      v5 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v5 = (_QWORD *)*v5;
      v12 = 67109378;
      LODWORD(v13[0]) = v4;
      WORD2(v13[0]) = 2080;
      *(_QWORD *)((char *)v13 + 6) = v5;
      v6 = "SeekEnd Failed: %08x [%s]";
      v7 = v3;
      v8 = 18;
LABEL_11:
      _os_log_impl(&dword_0, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v12, v8);
      return -1;
    }
    return -1;
  }
  return ftell(*((FILE **)this + 1));
}

uint64_t ITFileUtil::Write(ITFileUtil *this, const void *__ptr, size_t a3, unint64_t *a4)
{
  FILE *v6;
  size_t v7;
  uint64_t result;
  NSObject *v9;
  _QWORD *v10;
  int v11;
  NSObject *v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  __int16 v16;
  int v17;

  v6 = (FILE *)*((_QWORD *)this + 1);
  if (v6)
  {
    v7 = fwrite(__ptr, 1uLL, a3, v6);
    result = ferror(*((FILE **)this + 1));
    if ((_DWORD)result)
    {
      v9 = _BookEPUBLog();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = (_QWORD *)((char *)this + 16);
        if (*((char *)this + 39) < 0)
          v10 = (_QWORD *)*v10;
        v11 = ferror(*((FILE **)this + 1));
        v14 = 136315394;
        v15 = v10;
        v16 = 1024;
        v17 = v11;
        _os_log_impl(&dword_0, v9, OS_LOG_TYPE_ERROR, "Write error writing:[%s] error:%d", (uint8_t *)&v14, 0x12u);
      }
      v7 = 0;
      result = 0xFFFFFFFFLL;
    }
    if (a4)
      *a4 = v7;
  }
  else
  {
    v12 = _BookEPUBLog();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = (_QWORD *)((char *)this + 16);
      if (*((char *)this + 39) < 0)
        v13 = (_QWORD *)*v13;
      v14 = 136315138;
      v15 = v13;
      _os_log_impl(&dword_0, v12, OS_LOG_TYPE_ERROR, "Write not opened [%s]", (uint8_t *)&v14, 0xCu);
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

const __CFString *ITFileUtil::hasTrailingSlash(const __CFString *this, const __CFString *a2)
{
  const __CFString *v2;

  if (this)
  {
    v2 = this;
    this = (const __CFString *)CFStringGetLength(this);
    if (this)
      return (const __CFString *)(CFStringGetCharacterAtIndex(v2, (CFIndex)&this[-1].length + 7) == 47);
  }
  return this;
}

char *ITFileUtil::createMd5String(const __CFString *this, const __CFString *a2)
{
  const unsigned __int8 *v2;
  void **v3;
  char *Md5String;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  ITStrUtil::toString(this, (uint64_t)__p);
  if (v7 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  Md5String = ITFileUtil::createMd5String((ITFileUtil *)v3, v2);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return Md5String;
}

void sub_221B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *ITFileUtil::createMd5String(ITFileUtil *this, const unsigned __int8 *a2)
{
  char *Size;
  NSObject *v4;
  void *v5;
  int v6;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  UInt8 *v11;
  void (**v12)(ITFileUtil *__hidden);
  __int128 v13;
  __int128 v14;
  UInt8 bytes[16];
  __int128 v16;
  char v17;
  CC_MD5_CTX buf;
  unsigned __int8 md[16];

  v12 = off_378318;
  v13 = 0u;
  v14 = 0u;
  if (!this || !*(_BYTE *)this)
  {
LABEL_17:
    Size = 0;
    goto LABEL_18;
  }
  Size = (char *)ITFileUtil::GetSize((const char *)this, a2);
  if (Size)
  {
    if (ITFileUtil::OpenToRead((ITFileUtil *)&v12, (std::string::value_type *)this))
    {
      v4 = _BookEPUBLog();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        buf.A = 136315138;
        *(_QWORD *)&buf.B = this;
        _os_log_impl(&dword_0, v4, OS_LOG_TYPE_ERROR, "createMd5String Failure: [%s]", (uint8_t *)&buf, 0xCu);
      }
      goto LABEL_17;
    }
    CC_MD5_Init(&buf);
    v5 = malloc_type_malloc(0x10000uLL, 0x5AA518A7uLL);
    while (1)
    {
      if ((unint64_t)Size <= 0x10000)
      {
        v6 = 0;
        goto LABEL_13;
      }
      *(_QWORD *)bytes = 0;
      ITFileUtil::Read((ITFileUtil *)&v12, v5, 0x10000uLL, (unint64_t *)bytes);
      if (*(_QWORD *)bytes != 0x10000)
        break;
      CC_MD5_Update(&buf, v5, 0x10000u);
      Size -= 0x10000;
    }
    v6 = -1;
LABEL_13:
    *(_QWORD *)bytes = 0;
    ITFileUtil::Read((ITFileUtil *)&v12, v5, (size_t)Size, (unint64_t *)bytes);
    if (*(char **)bytes == Size)
      CC_MD5_Update(&buf, v5, (CC_LONG)Size);
    else
      v6 = -1;
    CC_MD5_Final(md, &buf);
    free(v5);
    if (v6)
      goto LABEL_17;
    v8 = 0;
    v17 = 0;
    *(_OWORD *)bytes = 0u;
    v16 = 0u;
    v9 = md;
    do
    {
      v10 = *v9++;
      v11 = &bytes[v8];
      *v11 = a0123456789abcd[(unint64_t)v10 >> 4];
      v11[1] = a0123456789abcd[v10 & 0xF];
      v8 += 2;
    }
    while (v8 != 32);
    Size = (char *)CFStringCreateWithBytes(0, bytes, 32, 0x600u, 0);
  }
LABEL_18:
  ITFileUtil::~ITFileUtil((void **)&v12);
  return Size;
}

void sub_223F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ITFileUtil::~ITFileUtil((void **)va);
  _Unwind_Resume(a1);
}

CFStringRef ITFileUtil::createFastFileHash(const __CFString *this, const __CFString *a2)
{
  const unsigned __int8 *v2;
  void **v3;
  CFStringRef FastFileHash;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  ITStrUtil::toString(this, (uint64_t)__p);
  if (v7 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  FastFileHash = ITFileUtil::createFastFileHash((std::string::value_type *)v3, v2);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  return FastFileHash;
}

void sub_22480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFStringRef ITFileUtil::createFastFileHash(std::string::value_type *__s, const unsigned __int8 *a2)
{
  const unsigned __int8 *v3;
  CFStringRef v4;
  const char *Size;
  const unsigned __int8 *v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  char *Md5String;
  unint64_t v13;
  uint64_t __ptr;
  void (**v15)(ITFileUtil *__hidden);
  __int128 v16;
  __int128 v17;

  v15 = off_378318;
  v16 = 0u;
  v17 = 0u;
  if (!__s || !*__s || ITFileUtil::OpenToRead((ITFileUtil *)&v15, __s))
  {
LABEL_4:
    v4 = 0;
    goto LABEL_5;
  }
  Size = ITFileUtil::GetSize(__s, v3);
  v8 = Size;
  if ((unint64_t)Size < 0x10000)
  {
    Md5String = ITFileUtil::createMd5String((ITFileUtil *)__s, v7);
    if (Md5String)
    {
      v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%llu-%@"), v8, Md5String);
      CFRelease(Md5String);
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  v9 = 0;
  if ((unint64_t)Size > 0x80000)
    v10 = 0x8000;
  else
    v10 = 4096;
  v11 = 12;
  do
  {
    ITFileUtil::SeekTo((ITFileUtil *)&v15, v10);
    v13 = 0;
    __ptr = 0;
    ITFileUtil::Read((ITFileUtil *)&v15, &__ptr, 8uLL, &v13);
    v9 = __ptr ^ __ROR8__(v9, 56);
    if (v11 < 2)
      break;
    v10 *= 2;
    --v11;
  }
  while (v10 < (unint64_t)v8);
  v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%llu-%llu"), v8, v9);
LABEL_5:
  ITFileUtil::~ITFileUtil((void **)&v15);
  return v4;
}

void sub_225E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  ITFileUtil::~ITFileUtil((void **)va);
  _Unwind_Resume(a1);
}

void sub_22878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_2299C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_22AD8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_3C1AE8);

  _Unwind_Resume(a1);
}

void sub_22B40(id a1)
{
  objc_class *v1;

  v1 = NSClassFromString(CFSTR("UIVariableDelayLoupeGesture"));
  if (v1)
    BESwizzleInstanceMethods(v1, "setDelay:", "be_setDelay:");
}

void ITRetain::ITRetain(ITRetain *this)
{
  unsigned int *v1;
  unsigned int v2;

  *(_QWORD *)this = off_378368;
  *((_DWORD *)this + 2) = 0;
  v1 = (unsigned int *)((char *)this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
}

{
  unsigned int *v1;
  unsigned int v2;

  *(_QWORD *)this = off_378368;
  *((_DWORD *)this + 2) = 0;
  v1 = (unsigned int *)((char *)this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
}

uint64_t ITRetain::retain(ITRetain *this)
{
  unsigned int *v1;
  unsigned int v2;
  uint64_t result;

  v1 = (unsigned int *)((char *)this + 8);
  do
  {
    v2 = __ldaxr(v1);
    result = v2 + 1;
  }
  while (__stlxr(result, v1));
  return result;
}

uint64_t ITRetain::release(ITRetain *this)
{
  unsigned int *v1;
  int v2;
  uint64_t v3;

  v1 = (unsigned int *)((char *)this + 8);
  do
  {
    v2 = __ldaxr(v1);
    v3 = (v2 - 1);
  }
  while (__stlxr(v3, v1));
  if (this && v2 <= 1)
    (*(void (**)(ITRetain *))(*(_QWORD *)this + 8))(this);
  return v3;
}

void ITRetain::~ITRetain(ITRetain *this)
{
  *(_QWORD *)this = off_378368;
}

{
  *(_QWORD *)this = off_378368;
}

{
  *(_QWORD *)this = off_378368;
  operator delete();
}

unsigned int *ITRetain::for_each_release(unsigned int *this, ITRetain *a2)
{
  unsigned int *v2;
  unsigned int v3;
  BOOL v4;
  signed int v5;

  if (this)
  {
    v2 = this + 2;
    do
    {
      v3 = __ldaxr(v2);
      v4 = __OFSUB__(v3, 1);
      v5 = v3 - 1;
    }
    while (__stlxr(v5, v2));
    if ((v5 < 0) ^ v4 | (v5 == 0))
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
  }
  return this;
}

uint64_t ITRetain::for_each_retain(uint64_t this, ITRetain *a2)
{
  unsigned int *v2;
  unsigned int v3;

  if (this)
  {
    v2 = (unsigned int *)(this + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 + 1, v2));
  }
  return this;
}

void ITRetain::for_each_cfrelease(CFTypeRef this, const void *a2)
{
  if (this)
    CFRelease(this);
}

CFTypeRef ITRetain::for_each_cfretain(CFTypeRef this, const void *a2)
{
  if (this)
    return CFRetain(this);
  return this;
}

id NSStringFromBERequestedRange(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("{%@, %@}"), v3, v4));

  return v5;
}

BEURLHandlerAssetInfo *_BEURLHandlerAssetInfoForURLUsingCacheItemIncludingFileSize(void *a1, void *a2, int a3)
{
  id v5;
  BEURLHandlerAssetInfo *v6;
  id v7;
  BEURLHandlerAssetInfo *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  NSObject *v31;
  void *v32;
  void *v33;
  id v34;
  void *v35;
  _BOOL4 v36;
  id v37;
  NSObject *v38;
  void *v40;
  void *v41;
  void *v42;

  v5 = a1;
  v6 = a2;
  if (v6)
    goto LABEL_2;
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "host"));
  v12 = v11;
  if (!v11 || !objc_msgSend(v11, "length"))
  {

    v8 = 0;
    v6 = 0;
    goto LABEL_28;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[BEProtocolCache sharedInstance](BEProtocolCache, "sharedInstance"));
  v6 = (BEURLHandlerAssetInfo *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cacheItemForDatabaseKey:", v12));

  if (v6)
  {
LABEL_2:
    v7 = v5;
    v8 = v6;
    v6 = objc_alloc_init(BEURLHandlerAssetInfo);
    -[BEURLHandlerAssetInfo setRequestedURL:](v6, "setRequestedURL:", v7);
    v9 = objc_autoreleasePoolPush();
    if (objc_msgSend(v7, "isFileURL"))
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "path"));
      -[BEURLHandlerAssetInfo setPath:](v6, "setPath:", v10);

    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "host"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo bookID](v8, "bookID"));
      v16 = objc_msgSend(v14, "isEqualToString:", v15);

      if (v16)
      {
        -[BEURLHandlerAssetInfo setBookID:](v6, "setBookID:", v14);
        v17 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo bookEpubId](v8, "bookEpubId"));
        -[BEURLHandlerAssetInfo setBookEpubId:](v6, "setBookEpubId:", v17);

        v18 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo bookEpubIdWithUUIDScheme](v8, "bookEpubIdWithUUIDScheme"));
        -[BEURLHandlerAssetInfo setBookEpubIdWithUUIDScheme:](v6, "setBookEpubIdWithUUIDScheme:", v18);

        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "be_unescapedPath"));
        v41 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo rootPath](v8, "rootPath"));
        if (objc_msgSend(v42, "length") && objc_msgSend(v41, "length"))
        {
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "stringByAppendingPathComponent:", v42));
          -[BEURLHandlerAssetInfo setPath:](v6, "setPath:", v19);

          v20 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo path](v6, "path"));
          v21 = objc_msgSend(v20, "length");

          if (v21)
          {
            v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v41, 1));
            v22 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo path](v6, "path"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v22, 0));

            v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
            -[BEURLHandlerAssetInfo setAssetIsInsideBookRootPath:](v6, "setAssetIsInsideBookRootPath:", objc_msgSend(v24, "be_doesFolderAtURL:containFileAtURL:", v40, v23));

          }
          v25 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo infoForDocumentAtPath:](v8, "infoForDocumentAtPath:", v42));
          v26 = v25;
          if (v25)
          {
            v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectForKeyedSubscript:", CFSTR("mime")));
            -[BEURLHandlerAssetInfo setMimeType:](v6, "setMimeType:", v27);

            v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("fileSize")));
            -[BEURLHandlerAssetInfo setFileSize:](v6, "setFileSize:", objc_msgSend(v28, "unsignedIntegerValue"));

            v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("compressionAlgorithm")));
            -[BEURLHandlerAssetInfo setCompressionAlgorithm:](v6, "setCompressionAlgorithm:", v29);

            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("encryptionAlgorithm")));
            -[BEURLHandlerAssetInfo setEncryptionAlgorithm:](v6, "setEncryptionAlgorithm:", v30);

            v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectForKeyedSubscript:", CFSTR("sinfNumber")));
            v32 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo dataForSinfNumber:](v8, "dataForSinfNumber:", v31));
            -[BEURLHandlerAssetInfo setSinfData:](v6, "setSinfData:", v32);

            if (a3 && !-[BEURLHandlerAssetInfo fileSize](v6, "fileSize"))
            {
              v33 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo path](v6, "path"));
              -[BEURLHandlerAssetInfo setFileSize:](v6, "setFileSize:", sub_26D18(v33));

            }
          }
          else
          {
            v34 = _BookEPUBLog();
            v31 = objc_claimAutoreleasedReturnValue(v34);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
            {
              objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo path](v6, "path"));
              sub_2B5D58();
            }
          }

        }
      }

    }
    v35 = (void *)objc_claimAutoreleasedReturnValue(-[BEURLHandlerAssetInfo path](v6, "path"));
    v36 = objc_msgSend(v35, "length") == 0;

    if (v36)
    {
      v37 = _BookEPUBLog();
      v38 = objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        sub_2B5D18(v38);

    }
    objc_autoreleasePoolPop(v9);

  }
  else
  {
    v8 = 0;
  }
LABEL_28:

  return v6;
}

void sub_24160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

id BEURLHandlerAssetInfoPathForBookURL(void *a1)
{
  BEURLHandlerAssetInfo *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = _BEURLHandlerAssetInfoForURLUsingCacheItemIncludingFileSize(a1, 0, 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = v2;
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "path"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v4));

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_2432C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id BEURLHandleriBooksImgUrlFromiBooksURL(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "scheme"));
  if (!objc_msgSend(CFSTR("ibooksimg"), "compare:options:", v2, 1))
  {
    v4 = v1;
LABEL_6:
    v3 = v4;
    goto LABEL_7;
  }
  if (!objc_msgSend(CFSTR("ibooks"), "compare:options:", v2, 1))
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "be_URLByReplacingWithScheme:", CFSTR("ibooksimg")));
    goto LABEL_6;
  }
  v3 = 0;
LABEL_7:

  return v3;
}

void sub_243E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void BEURLHandlerClearCachedInfoForBookWithAssetID(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a1;
  v1 = objc_autoreleasePoolPush();
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[BEProtocolCache sharedInstance](BEProtocolCache, "sharedInstance"));
  if (objc_msgSend(v6, "length"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cacheItemForDatabaseKey:", v6));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sinfInfo"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allValues"));

    objc_msgSend(v2, "clearCacheForDatabaseKey:", v6);
  }
  else
  {
    v5 = 0;
    objc_msgSend(v2, "clearCache");
  }
  +[ft9cupR7u6OrU4m1pyhB FVnIWgVXBigm3P6nj4U9:](ft9cupR7u6OrU4m1pyhB, "FVnIWgVXBigm3P6nj4U9:", v5);

  objc_autoreleasePoolPop(v1);
}

void sub_244E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id _BEURLHandlerImageDataForiBooksURLUsingCacheItem(NSURL *a1, BEProtocolCacheItem *a2)
{
  void *v4;
  BEURLHandlerAssetInfo *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v14;
  char v15;

  v4 = objc_autoreleasePoolPush();
  v5 = _BEURLHandlerAssetInfoForURLUsingCacheItemIncludingFileSize(a1, a2, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "path"));
  if (objc_msgSend(v7, "length") && objc_msgSend(v6, "assetIsInsideBookRootPath"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sinfData"));

    if (v8)
    {
      v15 = 0;
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sinfData"));
      v14 = 0;
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[ft9cupR7u6OrU4m1pyhB pK0gFZ9QOdm17E9p9cpP:sinfData:refetch:error:](ft9cupR7u6OrU4m1pyhB, "pK0gFZ9QOdm17E9p9cpP:sinfData:refetch:error:", v7, v9, &v15, &v14));
      v11 = v14;

      if (v15)
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "path"));
        +[ft9cupR7u6OrU4m1pyhB _8g0aKpBRl5gIBvODdOy7:completion:](ft9cupR7u6OrU4m1pyhB, "_8g0aKpBRl5gIBvODdOy7:completion:", v12, 0);

      }
    }
    else
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v7));
    }
  }
  else
  {
    v10 = 0;
  }

  objc_autoreleasePoolPop(v4);
  return v10;
}

void sub_24688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id BEURLHandlerImageDataForiBooksURLUsingCacheItem(void *a1, void *a2)
{
  NSURL *v3;
  BEProtocolCacheItem *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a1;
  v4 = a2;
  if (v4)
    goto LABEL_2;
  v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSURL host](v3, "host"));
  if (!objc_msgSend(v7, "length"))
  {

    v4 = 0;
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[BEProtocolCache sharedInstance](BEProtocolCache, "sharedInstance"));
  v4 = (BEProtocolCacheItem *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "cacheItemForDatabaseKey:", v7));

  if (!v4)
    goto LABEL_7;
LABEL_2:
  v5 = _BEURLHandlerImageDataForiBooksURLUsingCacheItem(v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
LABEL_8:

  return v6;
}

void sub_2478C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

id BEURLHandlerSchemeIsOkForBookToLoad(void *a1)
{
  id v1;
  unsigned __int8 v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v8;

  v1 = a1;
  v2 = atomic_load((unsigned __int8 *)&qword_3C1B00);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_3C1B00))
  {
    v8 = sub_248C0();
    qword_3C1AF8 = objc_claimAutoreleasedReturnValue(v8);
    __cxa_guard_release(&qword_3C1B00);
  }
  if ((BEURLHandlerURLIsApprovedToLoad(v1) & 1) != 0)
  {
    v3 = &dword_0 + 1;
  }
  else
  {
    v4 = (void *)qword_3C1AF8;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "scheme"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lowercaseString"));
    v3 = objc_msgSend(v4, "containsObject:", v6);

  }
  return v3;
}

void sub_24884(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_3C1B00);

  _Unwind_Resume(a1);
}

id sub_248C0()
{
  void *v0;
  void *v1;
  _QWORD v3[4];

  v3[0] = CFSTR("ibooks");
  v3[1] = CFSTR("ibooksimg");
  v3[2] = CFSTR("data");
  v3[3] = CFSTR("blob");
  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v3, 4));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v0));

  return v1;
}

void sub_24980(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id BEURLHandlerURLIsApprovedToLoad(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "absoluteString"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "lowercaseString"));

  if (objc_msgSend(v3, "length"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "absoluteString"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lowercaseString"));
    v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("about:blank"));

  }
  else
  {
    v6 = &dword_0 + 1;
  }

  return v6;
}

void sub_24A38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_24B78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_24DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_24DD4(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  BEURLHandlerAssetInfo *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char *v24;
  void *v25;
  void *v26;
  unsigned __int8 v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  _QWORD *v34;
  id v35;
  id v36;
  NSObject *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  id v41;
  id v42;
  void *v43;
  void *v44;
  void *v45;
  id v46;
  id v47;
  void *v48;
  unsigned __int8 v49;
  id v50;
  void *v51;
  void *v52;
  void *v53;
  char *v54;
  double width;
  double height;
  id v57;
  const __CFData *v58;
  CGImageSource *v59;
  const __CFDictionary *v60;
  const __CFDictionary *v61;
  const __CFDictionary *v62;
  const void *Value;
  void *v64;
  const void *v65;
  void *v66;
  double v67;
  double v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  _BOOL4 v73;
  void *v74;
  void *v75;
  void *v76;
  __CFString *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  id v81;
  void *v82;
  void *v83;
  id v84;
  uint64_t v85;
  void *v86;
  id v87;
  id v88;
  uint64_t v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  _QWORD *v99;
  id v100;
  uint64_t v101;
  void *v102;
  void *v103;
  BOOL v104;
  id v105;
  void *v106;
  _QWORD *v107;
  id v108;
  void *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  void *v113;
  void *v114;
  unsigned __int8 v115;
  void *v116;
  char v117;
  _QWORD *v118;
  id v119;
  NSObject *v120;
  _QWORD *v121;
  id v122;
  id v123;
  NSObject *v124;
  void *v125;
  uint64_t v126;
  __CFString *v127;
  __CFString *v128;
  BOOL v129;
  int64_t v130;
  int64_t v131;
  size_t v132;
  id v133;
  void *v134;
  size_t v135;
  off_t v136;
  __CFString **v137;
  unint64_t v138;
  id v139;
  dispatch_io_t v140;
  void *v141;
  size_t v142;
  NSObject *v143;
  NSObject *v144;
  id v145;
  id v146;
  id v147;
  void *v148;
  _QWORD *v149;
  id v150;
  id v151;
  NSObject *v152;
  uint64_t v153;
  void *v154;
  void *v155;
  id v156;
  id v157;
  id v158;
  id v159;
  _QWORD *v160;
  id v161;
  uint64_t v162;
  void *v163;
  void *v164;
  BOOL v165;
  id v166;
  void *v167;
  _QWORD *v168;
  id v169;
  void *v170;
  _QWORD *v171;
  _QWORD *v172;
  uint64_t v173;
  void *v174;
  void *v175;
  void *v176;
  void *v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  void *v182;
  id v183;
  void *v184;
  void *v185;
  void *context;
  void *contexta;
  void *contextb;
  id contextc;
  void *v190;
  void *v191;
  id v192;
  id v193;
  void *v194;
  _QWORD v195[4];
  void **block;
  uint64_t v197;
  void *v198;
  void *v199;
  id v200;
  id v201;
  __CFString **v202;
  _QWORD *v203;
  size_t v204;
  __CFString *v205;
  __CFString **v206;
  uint64_t v207;
  __n128 (*v208)(__n128 *, __n128 *);
  uint64_t (*v209)();
  void *v210;
  id v211;
  uint64_t v212;

  v2 = *(id *)(a1 + 32);
  v3 = v2[3];
  if (v3)
  {
    dispatch_io_close(v3, 1uLL);
    v4 = (void *)v2[3];
    v2[3] = 0;

  }
  v5 = (void *)v2[6];
  v2[6] = 0;

  v2[8] = 0;
  objc_msgSend(*(id *)(a1 + 32), "setRequest:", *(_QWORD *)(a1 + 40));
  v194 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "URL"));
  if (BEURLHandlerSchemeIsOkForBookToLoad(v194))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cacheItem"));
    v7 = _BEURLHandlerAssetInfoForURLUsingCacheItemIncludingFileSize(v194, v6, 1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "allHTTPHeaderFields"));
    v10 = objc_opt_class(NSString);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKey:", CFSTR("Range")));
    v12 = BUDynamicCast(v10, v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

    if (objc_msgSend(v13, "length"))
    {
      v14 = (char *)objc_msgSend(v8, "fileSize");
      v15 = v13;
      if (objc_msgSend(v15, "length"))
      {
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "componentsSeparatedByString:", CFSTR("=")));
        if (objc_msgSend(v16, "count") == (char *)&dword_0 + 2
          && (v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "firstObject")),
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "lowercaseString")),
              v19 = objc_msgSend(CFSTR("bytes"), "isEqualToString:", v18),
              v18,
              v17,
              (v19 & 1) != 0))
        {
          context = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "lastObject"));
          v190 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(context, "componentsSeparatedByString:", CFSTR(",")));
          if ((unint64_t)objc_msgSend(v190, "count") < 2)
          {
            v182 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v190, "firstObject"));
            v20 = v14 - 1;
            if (objc_msgSend(v182, "hasPrefix:", CFSTR("-")))
            {
              v21 = (uint64_t)&v14[(_QWORD)objc_msgSend(v182, "integerValue")];
            }
            else
            {
              v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v182, "componentsSeparatedByString:", CFSTR("-")));
              v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v178, "firstObject"));
              v21 = (uint64_t)objc_msgSend(v22, "integerValue");

              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v178, "lastObject"));
              v24 = (char *)objc_msgSend(v23, "integerValue");

              if ((uint64_t)v24 > 0)
                v20 = v24;

            }
          }
          else
          {
            v21 = 0x7FFFFFFFFFFFFFFFLL;
            v20 = 0;
          }

        }
        else
        {
          v21 = 0x7FFFFFFFFFFFFFFFLL;
          v20 = 0;
        }

      }
      else
      {
        v20 = 0;
        v21 = 0;
      }

      objc_msgSend(v8, "setRequestedRange:", v21, v20);
    }

  }
  else
  {
    v8 = 0;
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "bookID"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v194, "host"));
  v27 = objc_msgSend(v25, "isEqualToString:", v26);

  if ((v27 & 1) == 0)
  {
    v31 = -1003;
    goto LABEL_34;
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "path"));
  v29 = objc_msgSend(v28, "length");

  if (!v29)
  {
    v31 = -1100;
    goto LABEL_34;
  }
  if (!objc_msgSend(v8, "fileSize"))
  {
    v31 = -1014;
    goto LABEL_34;
  }
  if (!objc_msgSend(v8, "assetIsInsideBookRootPath"))
  {
    v31 = -1102;
    goto LABEL_34;
  }
  if (objc_msgSend(v8, "requestedRange") == (id)0x7FFFFFFFFFFFFFFFLL && !v30)
  {
    v31 = -1000;
LABEL_34:
    v32 = *(id *)(a1 + 32);
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSURLErrorDomain, v31, 0));
    v34 = v32;
    v35 = v33;
    v36 = _BookEPUBLog();
    v37 = objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      sub_2B5D98();

    v38 = v34[8];
    if ((v38 & 6) == 0)
    {
      v34[8] = v38 | 2;
      v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "delegate"));
      objc_msgSend(v39, "urlHandler:didFailWithError:", v34, v35);
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
      objc_msgSend(v40, "urlHandler:request:didFailWithError:", v34, v34[6], v35);

    }
    goto LABEL_39;
  }
  v41 = *(id *)(a1 + 32);
  v42 = v8;
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "requestedURL"));
  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "scheme"));
  if (objc_msgSend(CFSTR("ibooks"), "compare:options:", v44, 1))
  {

    goto LABEL_53;
  }
  v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "mimeType"));
  if (objc_msgSend(v45, "length"))
  {
    v46 = v45;
    v47 = BESupportedImageMimeTypes();
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    v49 = objc_msgSend(v48, "containsObject:", v46);

  }
  else
  {
    v49 = BEDoesURLPointToAnImageFile(v43);
  }

  if ((v49 & 1) == 0)
  {
LABEL_53:
    v192 = *(id *)(a1 + 32);
    v70 = v42;
    contextb = objc_autoreleasePoolPush();
    v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "requestedURL"));
    v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "lastPathComponent"));

    if (objc_msgSend(v72, "caseInsensitiveCompare:", CFSTR("ibooks.js"))
      && objc_msgSend(v72, "caseInsensitiveCompare:", CFSTR("ibook.js")))
    {
      v73 = 0;
      goto LABEL_72;
    }
    v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "sinfData"));

    if (v74)
    {
      LOBYTE(v205) = 0;
      v75 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "path"));
      v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "sinfData"));
      block = 0;
      v184 = (void *)objc_claimAutoreleasedReturnValue(+[ft9cupR7u6OrU4m1pyhB pK0gFZ9QOdm17E9p9cpP:sinfData:refetch:error:](ft9cupR7u6OrU4m1pyhB, "pK0gFZ9QOdm17E9p9cpP:sinfData:refetch:error:", v75, v76, &v205, &block));
      v77 = block;

      if ((_BYTE)v205)
      {
        v78 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "path"));
        +[ft9cupR7u6OrU4m1pyhB _8g0aKpBRl5gIBvODdOy7:completion:](ft9cupR7u6OrU4m1pyhB, "_8g0aKpBRl5gIBvODdOy7:completion:", v78, 0);

      }
      if (v77)
      {
        v73 = 0;
LABEL_71:

LABEL_72:
        objc_autoreleasePoolPop(contextb);

        if (v73)
        {
          contextc = *(id *)(a1 + 32);
          v193 = v70;
          v92 = (void *)objc_claimAutoreleasedReturnValue(+[ibooks source](ibooks, "source"));
          v185 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "dataUsingEncoding:", 4));

          v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v193, "mimeType"));
          v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v193, "requestedURL"));
          v94 = contextc;
          v95 = v185;
          v96 = v177;
          v97 = v93;
          v181 = v95;
          v98 = objc_msgSend(objc_alloc((Class)NSURLResponse), "initWithURL:MIMEType:expectedContentLength:textEncodingName:", v97, v96, objc_msgSend(v95, "length"), 0);
          v99 = v94;
          v100 = v98;
          v101 = v99[8];
          v102 = v100;
          if ((v101 & 1) == 0)
          {
            v99[8] = v101 | 1;
            v103 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
            v104 = v103 == 0;

            v102 = v100;
            if (!v104)
            {
              v105 = sub_27A5C(v100);
              v102 = (void *)objc_claimAutoreleasedReturnValue(v105);

            }
            v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v99, "delegate"));
            objc_msgSend(v106, "urlHandler:didReceiveResponse:", v99, v102);

          }
          v107 = v99;
          v108 = v181;
          if ((v99[8] & 6) == 0)
          {
            v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v107, "delegate"));
            objc_msgSend(v109, "urlHandler:didReceiveData:", v107, v108);

          }
          v110 = v107;
          v111 = v110;
          v112 = v99[8];
          if ((v112 & 6) == 0)
          {
            v99[8] = v112 | 4;
            v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v110, "delegate"));
            objc_msgSend(v113, "urlHandlerDidFinish:", v111);
            v114 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
            objc_msgSend(v114, "urlHandler:didFinishRequest:", v111, v111[6]);

          }
        }
        else
        {
          v115 = objc_msgSend(v70, "requestedRangeIsWholeAsset");
          v116 = *(void **)(a1 + 32);
          if ((v115 & 1) != 0)
          {
            v117 = BEShouldInvertImageURL((uint64_t)v194);
            v118 = v116;
            v119 = v70;
            v120 = v118[4];
            block = _NSConcreteStackBlock;
            v197 = 3221225472;
            v198 = sub_26DB0;
            v199 = &unk_3783E0;
            LOBYTE(v202) = v117;
            v200 = v119;
            v201 = v118;
            v121 = v118;
            dispatch_async(v120, &block);

          }
          else
          {
            v122 = v116;
            v123 = v70;
            v124 = *((_QWORD *)v122 + 3);
            if (v124)
            {
              dispatch_io_close(v124, 1uLL);
              v125 = (void *)*((_QWORD *)v122 + 3);
              *((_QWORD *)v122 + 3) = 0;

            }
            v205 = 0;
            v206 = &v205;
            v207 = 0x4012000000;
            v208 = sub_2886C;
            v209 = nullsub_4;
            v211 = 0;
            v212 = 0;
            v210 = &unk_2D0B33;
            v211 = objc_msgSend(v123, "requestedRange");
            v212 = v126;
            v195[0] = 0;
            v195[1] = v195;
            v195[2] = 0x2020000000;
            v128 = v206[6];
            v127 = v206[7];
            v129 = v127 >= v128;
            v130 = (char *)v127 - (char *)v128;
            if (v129)
              v131 = v130 + 1;
            else
              v131 = 0;
            v195[3] = v131;
            v132 = +[ft9cupR7u6OrU4m1pyhB dataChunkSize](ft9cupR7u6OrU4m1pyhB, "dataChunkSize");
            v133 = objc_alloc_init((Class)NSMutableData);
            v134 = (void *)*((_QWORD *)v122 + 7);
            *((_QWORD *)v122 + 7) = v133;

            v135 = (unint64_t)v128 / v132;
            v136 = v135 * v132;
            v137 = v206;
            v138 = (unint64_t)v206[7];
            v206[6] = (__CFString *)((char *)v206[6] - v135 * v132);
            v137[7] = (__CFString *)(v138 - v135 * v132);
            v139 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "path")));
            v140 = dispatch_io_create_with_path(1uLL, (const char *)objc_msgSend(v139, "UTF8String"), 0, 0, *((dispatch_queue_t *)v122 + 4), &stru_378470);
            v141 = (void *)*((_QWORD *)v122 + 3);
            *((_QWORD *)v122 + 3) = v140;

            v142 = v132 + v132 * ((unint64_t)(double)(v138 / v132) - v135);
            dispatch_io_set_high_water(*((dispatch_io_t *)v122 + 3), v132);
            dispatch_io_set_low_water(*((dispatch_io_t *)v122 + 3), v132);
            v143 = *((_QWORD *)v122 + 3);
            v144 = *((_QWORD *)v122 + 4);
            block = _NSConcreteStackBlock;
            v197 = 3221225472;
            v198 = sub_2887C;
            v199 = &unk_3784C0;
            v200 = v122;
            v201 = v123;
            v202 = &v205;
            v203 = v195;
            v204 = v132;
            v145 = v122;
            v146 = v123;
            dispatch_io_read(v143, v136, v142, v144, &block);

            _Block_object_dispose(v195, 8);
            _Block_object_dispose(&v205, 8);
          }
        }
        goto LABEL_39;
      }
      v80 = (uint64_t)v184;
    }
    else
    {
      v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "path"));
      v80 = objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v79));

    }
    v81 = objc_msgSend(objc_alloc((Class)NSString), "initWithData:encoding:", v80, 4);
    v184 = (void *)v80;
    if (objc_msgSend(v81, "length"))
    {
      v205 = 0;
      v180 = (void *)objc_claimAutoreleasedReturnValue(+[NSRegularExpression regularExpressionWithPattern:options:error:](NSRegularExpression, "regularExpressionWithPattern:options:error:", CFSTR("iBooks?.VERSION[ ]*=[ ]*'([0-9]+)\\.([0-9]+)';"),
                         0,
                         &v205));
      v77 = v205;
      v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v180, "matchesInString:options:range:", v81, 0, 0, objc_msgSend(v81, "length")));
      v82 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v176, "firstObject"));
      v83 = v82;
      if (v82
        && (v84 = objc_msgSend(v82, "rangeAtIndex:", 1),
            v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "substringWithRange:", v84, v85)),
            v87 = objc_msgSend(v86, "integerValue"),
            v86,
            (uint64_t)v87 <= 1))
      {
        v88 = objc_msgSend(v83, "rangeAtIndex:", 2);
        v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "substringWithRange:", v88, v89));
        v91 = objc_msgSend(v90, "integerValue");

        v73 = (uint64_t)v91 <= 4;
      }
      else
      {
        v73 = 0;
      }

    }
    else
    {
      v77 = 0;
      v73 = 0;
    }

    goto LABEL_71;
  }
  v50 = *(id *)(a1 + 32);
  v183 = v42;
  contexta = v50;
  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "cacheItem"));
  v191 = v51;
  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v183, "requestedURL"));
  v179 = v52;
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "cachedSVGForURL:", v52));
  if (!objc_msgSend(v53, "length"))
  {
    v54 = (char *)malloc_type_calloc(0x53AuLL, 1uLL, 0x100004077774924uLL);
    if (v54)
    {
      width = CGSizeZero.width;
      height = CGSizeZero.height;
      v57 = BEURLHandlerImageDataForiBooksURLUsingCacheItem(v52, v51);
      v58 = (const __CFData *)objc_claimAutoreleasedReturnValue(v57);
      v59 = CGImageSourceCreateWithData(v58, 0);
      if (v59)
      {
        v205 = (__CFString *)kCGImageSourceShouldCache;
        block = (void **)&__kCFBooleanFalse;
        v60 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &block, &v205, 1));
        v61 = CGImageSourceCopyPropertiesAtIndex(v59, 0, v60);
        v62 = v61;
        if (v61)
        {
          Value = CFDictionaryGetValue(v61, kCGImagePropertyPixelWidth);
          v64 = (void *)objc_claimAutoreleasedReturnValue(Value);
          v65 = CFDictionaryGetValue(v62, kCGImagePropertyPixelHeight);
          v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
          objc_msgSend(v64, "doubleValue");
          width = v67;
          objc_msgSend(v66, "doubleValue");
          height = v68;
          CFRelease(v62);

        }
        CFRelease(v59);

      }
      v69 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytesNoCopy:length:freeWhenDone:", v54, snprintf(v54, 0x53AuLL, "<svg width='%f' height='%f' xmlns='http://www.w3.org/2000/svg'></svg>", width, height), 1);

      v53 = v69;
      objc_msgSend(v191, "cacheSVG:url:", v69, v52);
    }
    else
    {
      v147 = contexta;
      v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSURLErrorDomain, -1014, 0));
      v149 = v147;
      v150 = v148;
      v151 = _BookEPUBLog();
      v152 = objc_claimAutoreleasedReturnValue(v151);
      if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
        sub_2B5D98();

      v153 = v149[8];
      if ((v153 & 6) == 0)
      {
        v149[8] = v153 | 2;
        v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v149, "delegate"));
        objc_msgSend(v154, "urlHandler:didFailWithError:", v149, v150);
        v155 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
        objc_msgSend(v155, "urlHandler:request:didFailWithError:", v149, v149[6], v150);

      }
      v52 = v179;
    }
  }
  v156 = contexta;
  v157 = v53;
  v158 = v52;
  v159 = objc_msgSend(objc_alloc((Class)NSURLResponse), "initWithURL:MIMEType:expectedContentLength:textEncodingName:", v158, CFSTR("image/svg+xml"), objc_msgSend(v157, "length"), 0);
  v160 = v156;
  v161 = v159;
  v162 = v160[8];
  v163 = v161;
  if ((v162 & 1) == 0)
  {
    v160[8] = v162 | 1;
    v164 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
    v165 = v164 == 0;

    v163 = v161;
    if (!v165)
    {
      v166 = sub_27A5C(v161);
      v163 = (void *)objc_claimAutoreleasedReturnValue(v166);

    }
    v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v160, "delegate"));
    objc_msgSend(v167, "urlHandler:didReceiveResponse:", v160, v163);

  }
  v168 = v160;
  v169 = v157;
  if ((v160[8] & 6) == 0)
  {
    v170 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v168, "delegate"));
    objc_msgSend(v170, "urlHandler:didReceiveData:", v168, v169);

  }
  v171 = v168;
  v172 = v171;
  v173 = v160[8];
  if ((v173 & 6) == 0)
  {
    v160[8] = v173 | 4;
    v174 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v171, "delegate"));
    objc_msgSend(v174, "urlHandlerDidFinish:", v172);
    v175 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
    objc_msgSend(v175, "urlHandler:didFinishRequest:", v172, v172[6]);

  }
LABEL_39:

}

void sub_25F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18, void *a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

unint64_t BEShouldInvertImageURL(uint64_t a1)
{
  void *v1;
  void *v2;
  unint64_t v3;
  uint64_t v4;
  void *i;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLComponents componentsWithURL:resolvingAgainstBaseURL:](NSURLComponents, "componentsWithURL:resolvingAgainstBaseURL:", a1, 0));
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "queryItems", 0));
  v3 = (unint64_t)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v13;
    while (2)
    {
      for (i = 0; i != (void *)v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v4)
          objc_enumerationMutation(v2);
        v6 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
        v8 = objc_msgSend(v7, "isEqualToString:", CFSTR("be_filter"));

        if (v8)
        {
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "value"));
          if (objc_msgSend(v9, "length"))
          {
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "value"));
            v3 = objc_msgSend(v10, "integerValue") == (char *)&dword_0 + 1;

          }
          else
          {
            v3 = 0;
          }

          goto LABEL_14;
        }
      }
      v3 = (unint64_t)objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_14:

  return v3;
}

void sub_265C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_266A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_266B0(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  void *v3;
  _QWORD *v4;

  v1 = *(_QWORD **)(a1 + 32);
  v2 = v1[3];
  if (v2)
  {
    v4 = v1;
    dispatch_io_close(v2, 1uLL);
    v3 = (void *)v1[3];
    v1[3] = 0;

  }
}

void sub_267F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_26B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

off_t sub_26D18(void *a1)
{
  stat v2;
  char v3[4096];

  if (!objc_msgSend(a1, "getFileSystemRepresentation:maxLength:", v3, 4094))
    return 0;
  if (lstat(v3, &v2))
    return 0;
  return v2.st_size;
}

void sub_26DB0(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  dispatch_io_t *v5;
  id v6;
  NSObject *v7;
  dispatch_io_t v8;
  size_t v9;
  id v10;
  dispatch_io_t v11;
  dispatch_io_t v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  dispatch_io_t *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  NSObject *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  unsigned int v31;
  unsigned int v32;
  id v33;
  void *v34;
  _QWORD *v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  _QWORD *v45;
  id v46;
  _QWORD *v47;
  id v48;
  uint64_t v49;
  void *v50;
  BOOL v51;
  id v52;
  void *v53;
  _QWORD *v54;
  id v55;
  void *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  void *v65;
  _QWORD *v66;
  id v67;
  id v68;
  void *v69;
  void *v70;
  BEFontUnmangler *v71;
  void *v72;
  _QWORD *v73;
  id v74;
  NSObject *v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  id v79;
  id v80;
  _QWORD *v81;
  id v82;
  uint64_t v83;
  void *v84;
  void *v85;
  BOOL v86;
  id v87;
  void *v88;
  _QWORD *v89;
  void *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *context;
  void *v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  void *v104;
  id v105;
  char v106;
  _QWORD io_handler[4];
  dispatch_io_t *v108;
  id v109;
  size_t v110;

  v2 = +[ft9cupR7u6OrU4m1pyhB dataChunkSize](ft9cupR7u6OrU4m1pyhB, "dataChunkSize");
  if (v2 >= (unint64_t)objc_msgSend(*(id *)(a1 + 32), "fileSize"))
  {
    context = objc_autoreleasePoolPush();
    v18 = *(void **)(a1 + 32);
    v105 = 0;
    v103 = v18;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "sinfData"));

    if (v19)
    {
      v106 = 0;
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "path"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "sinfData"));
      v102 = (void *)objc_claimAutoreleasedReturnValue(+[ft9cupR7u6OrU4m1pyhB pK0gFZ9QOdm17E9p9cpP:sinfData:refetch:error:](ft9cupR7u6OrU4m1pyhB, "pK0gFZ9QOdm17E9p9cpP:sinfData:refetch:error:", v20, v21, &v106, &v105));

      if (v105)
      {
        v22 = _BookEPUBLog();
        v23 = objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "description"));
          sub_2B5DFC();
        }

      }
    }
    else
    {
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v103, "path"));
      v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](NSData, "dataWithContentsOfFile:", v24));

    }
    v25 = v105;
    v104 = v25;
    if (*(_BYTE *)(a1 + 48))
    {
      v26 = *(id *)(a1 + 32);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "mimeType"));
      if (objc_msgSend(v27, "length"))
      {
        v28 = v27;
        v29 = BESupportedImageMimeTypes();
        v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        v31 = objc_msgSend(v30, "containsObject:", v28);

      }
      else
      {
        v28 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "requestedURL"));
        v31 = BEDoesURLPointToAnImageFile(v28);
      }

      v25 = v104;
      v32 = v104 ? 0 : v31;
      if (v32 == 1)
      {
        v33 = objc_msgSend(objc_alloc((Class)UIImage), "initWithData:", v102);
        v34 = v33;
        if (v33)
        {
          v35 = objc_retainAutorelease(v33);
          v36 = objc_msgSend(v35, "CGImage");
          if (v36)
          {
            if (+[BEImageFilter imageIsFilteringCandidate:](BEImageFilter, "imageIsFilteringCandidate:", v36))
            {
              v37 = *(void **)(a1 + 32);
              v38 = *(id *)(a1 + 40);
              v39 = v37;
              v40 = objc_claimAutoreleasedReturnValue(+[BEImageFilter invertedImage:](BEImageFilter, "invertedImage:", v36));
              if (v40)
              {
                v99 = (void *)v40;
                v41 = (void *)objc_claimAutoreleasedReturnValue(+[BEImageFilter pngDataForCIImage:](BEImageFilter, "pngDataForCIImage:"));
                if (objc_msgSend(v41, "length"))
                {
                  v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v39, "requestedURL"));
                  v101 = v39;
                  v43 = v38;
                  v44 = v41;
                  v45 = v42;
                  v96 = v44;
                  v46 = objc_msgSend(objc_alloc((Class)NSURLResponse), "initWithURL:MIMEType:expectedContentLength:textEncodingName:", v45, CFSTR("image/png"), objc_msgSend(v44, "length", v43), 0);
                  v47 = v43;
                  v48 = v46;
                  v49 = v47[8];
                  v100 = v48;
                  if ((v49 & 1) == 0)
                  {
                    v47[8] = v49 | 1;
                    v50 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
                    v51 = v50 == 0;

                    if (!v51)
                    {
                      v52 = sub_27A5C(v48);
                      v48 = (id)objc_claimAutoreleasedReturnValue(v52);

                    }
                    v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "delegate"));
                    objc_msgSend(v53, "urlHandler:didReceiveResponse:", v47, v48);

                  }
                  v54 = v47;
                  v55 = v96;
                  if ((v47[8] & 6) == 0)
                  {
                    v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "delegate"));
                    objc_msgSend(v56, "urlHandler:didReceiveData:", v54, v55);

                  }
                  v57 = v54;
                  v58 = v57;
                  v59 = v47[8];
                  if ((v59 & 6) != 0)
                  {
                    v60 = v57;
                    v97 = v55;
                    v61 = v57;
LABEL_59:

                    v73 = v45;
                    goto LABEL_60;
                  }
                  v47[8] = v59 | 4;
                  v82 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v57, "delegate"));
                  objc_msgSend(v82, "urlHandlerDidFinish:", v58);
                  v92 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
                  objc_msgSend(v92, "urlHandler:didFinishRequest:", v58, v58[6]);
                  v60 = v58;
                  v97 = v55;
                  v61 = v58;
LABEL_58:

                  goto LABEL_59;
                }

              }
              v34 = v35;
            }
          }
        }

        v25 = v104;
      }
    }
    v62 = *(void **)(a1 + 32);
    v35 = *(id *)(a1 + 40);
    v61 = v62;
    v63 = v102;
    v64 = v25;
    v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "requestedURL"));
    v99 = v65;
    v97 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "path"));
    if (!v63)
    {
      if (!v64)
        v64 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BookUrlHandler"), 0, &off_395B18));
      v73 = v35;
      v101 = v64;
      v74 = _BookEPUBLog();
      v75 = objc_claimAutoreleasedReturnValue(v74);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
        sub_2B5D98();

      v76 = v73[8];
      if ((v76 & 6) != 0)
      {
        v60 = v101;
LABEL_61:

        objc_autoreleasePoolPop(context);
        return;
      }
      v73[8] = v76 | 2;
      v60 = v101;
      v55 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "delegate"));
      objc_msgSend(v55, "urlHandler:didFailWithError:", v73, v101);
      v45 = (_QWORD *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
      objc_msgSend(v45, "urlHandler:request:didFailWithError:", v73, v73[6], v101);
LABEL_60:

      goto LABEL_61;
    }
    v101 = v64;
    if ((v35[8] & 8) != 0)
    {
      v70 = v63;
    }
    else
    {
      v66 = v35;
      v67 = v61;
      v68 = v63;
      v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "encryptionAlgorithm"));
      v70 = v68;
      if (objc_msgSend(v69, "length"))
      {
        if (!objc_msgSend(CFSTR("http://www.idpf.org/2008/embedding"), "compare:options:", v69, 1)
          || (v70 = v68, !objc_msgSend(CFSTR("http://ns.adobe.com/pdf/enc#RC"), "compare:options:", v69, 1)))
        {
          v71 = objc_alloc_init(BEFontUnmangler);
          v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "requestedURL"));
          v70 = (void *)objc_claimAutoreleasedReturnValue(-[BEFontUnmangler unmangleFontWithAssetInfo:fileData:URL:](v71, "unmangleFontWithAssetInfo:fileData:URL:", v67, v68, v72));

        }
      }
      v35[8] |= 8uLL;

      v65 = v99;
    }
    v77 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "mimeType"));
    v78 = v35;
    v79 = v70;
    v100 = v77;
    v58 = v65;
    v80 = objc_msgSend(objc_alloc((Class)NSURLResponse), "initWithURL:MIMEType:expectedContentLength:textEncodingName:", v58, v100, objc_msgSend(v79, "length", v78, v97, context), 0);
    v81 = v78;
    v82 = v80;
    v83 = v35[8];
    v84 = v82;
    if ((v83 & 1) == 0)
    {
      v35[8] = v83 | 1;
      v85 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
      v86 = v85 == 0;

      v84 = v82;
      if (!v86)
      {
        v87 = sub_27A5C(v82);
        v84 = (void *)objc_claimAutoreleasedReturnValue(v87);

      }
      v88 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v81, "delegate"));
      objc_msgSend(v88, "urlHandler:didReceiveResponse:", v81, v84);

    }
    v89 = v81;
    v45 = v79;
    if ((v35[8] & 6) == 0)
    {
      v90 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v89, "delegate"));
      objc_msgSend(v90, "urlHandler:didReceiveData:", v89, v45);

    }
    v91 = v89;
    v92 = v91;
    v93 = v35[8];
    if ((v93 & 6) == 0)
    {
      v35[8] = v93 | 4;
      v94 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v91, "delegate"));
      objc_msgSend(v94, "urlHandlerDidFinish:", v92);
      v95 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
      objc_msgSend(v95, "urlHandler:didFinishRequest:", v92, v92[6]);

    }
    v55 = v92;
    v60 = v100;
    goto LABEL_58;
  }
  v4 = a1 + 32;
  v3 = *(void **)(a1 + 32);
  v5 = (dispatch_io_t *)*(id *)(v4 + 8);
  v6 = v3;
  v7 = v5[3];
  if (v7)
  {
    dispatch_io_close(v7, 1uLL);
    v8 = v5[3];
    v5[3] = 0;

  }
  v9 = +[ft9cupR7u6OrU4m1pyhB dataChunkSize](ft9cupR7u6OrU4m1pyhB, "dataChunkSize");
  v10 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "path")));
  v11 = dispatch_io_create_with_path(0, (const char *)objc_msgSend(v10, "UTF8String"), 0, 0, v5[4], &stru_378400);
  v12 = v5[3];
  v5[3] = v11;

  dispatch_io_set_high_water(v5[3], v9);
  dispatch_io_set_low_water(v5[3], v9);
  v13 = v5[3];
  v14 = objc_msgSend(v6, "fileSize");
  v15 = v5[4];
  io_handler[0] = _NSConcreteStackBlock;
  io_handler[1] = 3221225472;
  io_handler[2] = sub_27CB0;
  io_handler[3] = &unk_378450;
  v108 = v5;
  v109 = v6;
  v110 = v9;
  v16 = v5;
  v17 = v6;
  dispatch_io_read(v13, 0, (size_t)v14, v15, io_handler);

}

void sub_27764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, _Unwind_Exception *exception_object, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

id sub_27A5C(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  _QWORD v10[3];
  _QWORD v11[3];

  v1 = a1;
  v10[0] = CFSTR("Content-Type");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "MIMEType"));
  v11[0] = v2;
  v10[1] = CFSTR("Content-Length");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](NSNumber, "numberWithLongLong:", objc_msgSend(v1, "expectedContentLength")));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "stringValue"));
  v10[2] = CFSTR("Cache-Control");
  v11[1] = v4;
  v11[2] = CFSTR("no-cache, no-store, must-revalidate");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 3));

  v6 = objc_alloc((Class)NSHTTPURLResponse);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "URL"));
  v8 = objc_msgSend(v6, "initWithURL:statusCode:HTTPVersion:headerFields:", v7, 200, kCFHTTPVersion1_1, v5);

  return v8;
}

void sub_27BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_27C08(id a1, int a2)
{
  uint64_t v2;
  id v3;
  NSObject *v4;

  if (a2)
  {
    v2 = *(_QWORD *)&a2;
    v3 = _BookEPUBLog();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
      sub_2B5E3C();
    }

  }
}

void sub_27C98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_27CB0(uint64_t a1, int a2, void *a3, int a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD *v12;
  id v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  _QWORD applier[4];
  id v31;
  id v32;
  uint64_t v33;

  v7 = a3;
  v8 = v7;
  if (a4)
  {
    if (a4 == 89)
      v9 = -999;
    else
      v9 = -3001;
    v10 = *(id *)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSURLErrorDomain, v9, 0));
    v12 = v10;
    v13 = v11;
    v14 = _BookEPUBLog();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_2B5D98();

    v16 = v12[8];
    if ((v16 & 6) == 0)
    {
      v12[8] = v16 | 2;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "delegate"));
      objc_msgSend(v17, "urlHandler:didFailWithError:", v12, v13);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
      objc_msgSend(v18, "urlHandler:request:didFailWithError:", v12, v12[6], v13);

    }
  }
  else
  {
    if (v7 && v7 != &_dispatch_data_empty)
    {
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 3221225472;
      applier[2] = sub_27F68;
      applier[3] = &unk_378428;
      v31 = *(id *)(a1 + 32);
      v19 = *(id *)(a1 + 40);
      v20 = *(_QWORD *)(a1 + 48);
      v32 = v19;
      v33 = v20;
      dispatch_data_apply(v8, applier);

    }
    if (a2)
    {
      v21 = *(_QWORD **)(a1 + 32);
      v22 = v21[3];
      if (v22)
      {
        v23 = v21;
        dispatch_io_close(v22, 1uLL);
        v24 = (void *)v21[3];
        v21[3] = 0;

      }
      v25 = *(id *)(a1 + 32);
      v26 = v25;
      v27 = v25[8];
      if ((v27 & 6) == 0)
      {
        v25[8] = v27 | 4;
        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "delegate"));
        objc_msgSend(v28, "urlHandlerDidFinish:", v26);
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
        objc_msgSend(v29, "urlHandler:didFinishRequest:", v26, v26[6]);

      }
    }
  }

}

void sub_27EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_27F68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  BOOL v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  unsigned int v46;
  id v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  id v51;
  id v52;
  void *v53;
  BEFontUnmangler *v54;
  void *v55;
  _BYTE *v56;
  void *v57;
  uint64_t v58;
  id v59;
  void *v60;
  _QWORD *v61;
  id v62;
  id v63;
  NSObject *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *context;
  id v70;
  id v71;
  char v72;
  _QWORD v73[3];
  _QWORD v74[3];

  v70 = a2;
  context = objc_autoreleasePoolPush();
  v72 = 0;
  if (a5)
  {
    v8 = *(void **)(a1 + 40);
    v9 = *(id *)(a1 + 32);
    v10 = v8;
    v11 = v10;
    if ((v9[8] & 1) == 0)
    {
      if (objc_msgSend(v10, "requestedRangeIsWholeAsset"))
      {
        v12 = objc_alloc((Class)NSURLResponse);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "requestedURL"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mimeType"));
        v15 = objc_msgSend(v12, "initWithURL:MIMEType:expectedContentLength:textEncodingName:", v13, v14, objc_msgSend(v11, "fileSize"), 0);

      }
      else
      {
        v18 = objc_msgSend(v11, "requestedRange");
        v20 = v19;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v18));
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v20));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v11, "fileSize")));
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bytes %@-%@/%@"), v21, v22, v23, context, v70));

        v73[0] = CFSTR("Content-Type");
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mimeType"));
        v74[0] = v25;
        v73[1] = CFSTR("Content-Length");
        v26 = objc_msgSend(v11, "requestedRange");
        if (v27 >= (unint64_t)v26)
          v28 = v27 - (_QWORD)v26 + 1;
        else
          v28 = 0;
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v28));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "stringValue"));
        v73[2] = CFSTR("Content-Range");
        v74[1] = v30;
        v74[2] = v24;
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v74, v73, 3));

        v32 = objc_alloc((Class)NSHTTPURLResponse);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "requestedURL"));
        v15 = objc_msgSend(v32, "initWithURL:statusCode:HTTPVersion:headerFields:", v33, 206, CFSTR("HTTP/1.1"), v31);

      }
      v34 = v9;
      v35 = v15;
      v36 = v9[8];
      v37 = v35;
      if ((v36 & 1) == 0)
      {
        v9[8] = v36 | 1;
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
        v39 = v38 == 0;

        v37 = v35;
        if (!v39)
        {
          v40 = sub_27A5C(v35);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v40);

        }
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "delegate"));
        objc_msgSend(v41, "urlHandler:didReceiveResponse:", v34, v37);

      }
    }

    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sinfData"));
    if (!v42)
    {
      v16 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a4, a5);
LABEL_23:
      v48 = *(_QWORD **)(a1 + 32);
      if ((v48[8] & 8) == 0)
      {
        v49 = *(void **)(a1 + 40);
        v50 = v48;
        v51 = v49;
        v52 = v16;
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "encryptionAlgorithm"));
        v16 = v52;
        if (objc_msgSend(v53, "length"))
        {
          if (!objc_msgSend(CFSTR("http://www.idpf.org/2008/embedding"), "compare:options:", v53, 1)
            || (v16 = v52, !objc_msgSend(CFSTR("http://ns.adobe.com/pdf/enc#RC"), "compare:options:", v53, 1)))
          {
            v54 = objc_alloc_init(BEFontUnmangler);
            v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "requestedURL"));
            v16 = (id)objc_claimAutoreleasedReturnValue(-[BEFontUnmangler unmangleFontWithAssetInfo:fileData:URL:](v54, "unmangleFontWithAssetInfo:fileData:URL:", v51, v52, v55));

          }
        }
        v48[8] |= 8uLL;

        v48 = *(_QWORD **)(a1 + 32);
      }
      v56 = v48;
      v16 = v16;
      if ((v56[64] & 6) == 0)
      {
        v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "delegate"));
        objc_msgSend(v57, "urlHandler:didReceiveData:", v56, v16);

      }
      v58 = 1;
      goto LABEL_38;
    }
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[ft9cupR7u6OrU4m1pyhB MNeITI0WyvXBxnLLXXWr:](ft9cupR7u6OrU4m1pyhB, "MNeITI0WyvXBxnLLXXWr:", v42));
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", (char *)+[ft9cupR7u6OrU4m1pyhB d32lDu5WFQOV5kTab38V](ft9cupR7u6OrU4m1pyhB, "d32lDu5WFQOV5kTab38V")+ *(_QWORD *)(a1 + 48)));
    v74[0] = 0;
    v45 = objc_retainAutorelease(v44);
    v71 = 0;
    v46 = objc_msgSend(v43, "BaSrRpzcWCyAjSdjbc8j:withSize:into:e2cxKLQOk3W4uL3KXTUm:refetch:error:", a4, a5, objc_msgSend(v45, "mutableBytes"), v74, &v72, &v71);
    v47 = v71;
    if (v47)
      v46 = 0;
    if (v46 == 1)
    {
      objc_msgSend(v45, "setLength:", v74[0]);
      v16 = v45;
      v17 = 0;
    }
    else
    {
      v16 = 0;
      v17 = -1016;
    }

    if ((v46 & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    v16 = 0;
    v17 = -1014;
  }
  v59 = *(id *)(a1 + 32);
  v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSURLErrorDomain, v17, 0));
  v61 = v59;
  v62 = v60;
  v63 = _BookEPUBLog();
  v64 = objc_claimAutoreleasedReturnValue(v63);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
    sub_2B5D98();

  v65 = v61[8];
  if ((v65 & 6) == 0)
  {
    v61[8] = v65 | 2;
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "delegate"));
    objc_msgSend(v66, "urlHandler:didFailWithError:", v61, v62);
    v67 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
    objc_msgSend(v67, "urlHandler:request:didFailWithError:", v61, v61[6], v62);

  }
  if (!v72)
  {
    v58 = 0;
    goto LABEL_40;
  }
  v56 = (_BYTE *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "path"));
  +[ft9cupR7u6OrU4m1pyhB _8g0aKpBRl5gIBvODdOy7:completion:](ft9cupR7u6OrU4m1pyhB, "_8g0aKpBRl5gIBvODdOy7:completion:", v56, 0);
  v58 = 0;
LABEL_38:

LABEL_40:
  objc_autoreleasePoolPop(context);

  return v58;
}

void sub_285F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_287C4(id a1, int a2)
{
  uint64_t v2;
  id v3;
  NSObject *v4;

  if (a2)
  {
    v2 = *(_QWORD *)&a2;
    v3 = _BookEPUBLog();
    v4 = objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
      sub_2B5E3C();
    }

  }
}

void sub_28854(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__n128 sub_2886C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_2887C(uint64_t a1, int a2, void *a3, int a4)
{
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  void *v11;
  _QWORD *v12;
  id v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  _BYTE *v21;
  id v22;
  void *v23;
  _QWORD *v24;
  NSObject *v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  _QWORD applier[4];
  id v34;
  id v35;
  __int128 v36;
  uint64_t v37;

  v7 = a3;
  v8 = v7;
  if (a4)
  {
    if (a4 == 89)
      v9 = -999;
    else
      v9 = -3001;
    v10 = *(id *)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSURLErrorDomain, v9, 0));
    v12 = v10;
    v13 = v11;
    v14 = _BookEPUBLog();
    v15 = objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      sub_2B5D98();

    v16 = v12[8];
    if ((v16 & 6) == 0)
    {
      v12[8] = v16 | 2;
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "delegate"));
      objc_msgSend(v17, "urlHandler:didFailWithError:", v12, v13);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
      objc_msgSend(v18, "urlHandler:request:didFailWithError:", v12, v12[6], v13);

    }
  }
  else
  {
    if (v7 && v7 != &_dispatch_data_empty)
    {
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 3221225472;
      applier[2] = sub_28BD0;
      applier[3] = &unk_378498;
      v34 = *(id *)(a1 + 32);
      v35 = *(id *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 64);
      v36 = *(_OWORD *)(a1 + 48);
      dispatch_data_apply(v8, applier);

    }
    if (a2)
    {
      v19 = *(void **)(a1 + 32);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "pendingRangeRequestedData"));
      v21 = v19;
      v22 = v20;
      if ((v21[64] & 6) == 0)
      {
        v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "delegate"));
        objc_msgSend(v23, "urlHandler:didReceiveData:", v21, v22);

      }
      objc_msgSend(*(id *)(a1 + 32), "setPendingRangeRequestedData:", 0);
      v24 = *(_QWORD **)(a1 + 32);
      v25 = v24[3];
      if (v25)
      {
        v26 = v24;
        dispatch_io_close(v25, 1uLL);
        v27 = (void *)v24[3];
        v24[3] = 0;

      }
      v28 = *(id *)(a1 + 32);
      v29 = v28;
      v30 = v28[8];
      if ((v30 & 6) == 0)
      {
        v28[8] = v30 | 4;
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "delegate"));
        objc_msgSend(v31, "urlHandlerDidFinish:", v29);
        v32 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
        objc_msgSend(v32, "urlHandler:didFinishRequest:", v29, v29[6]);

      }
    }
  }

}

void sub_28B3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL sub_28BD0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  _QWORD *v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  void *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  BOOL v39;
  id v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  id v45;
  unsigned int v46;
  id v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  id v51;
  id v52;
  void *v53;
  void *v54;
  BEFontUnmangler *v55;
  void *v56;
  id v57;
  void *v58;
  _QWORD *v59;
  id v60;
  id v61;
  NSObject *v62;
  uint64_t v63;
  void *v64;
  void *v65;
  void *v66;
  _BOOL8 v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void *v71;
  void *context;
  id v74;
  id v75;
  char v76;
  _QWORD v77[3];
  _QWORD v78[3];

  v74 = a2;
  context = objc_autoreleasePoolPush();
  v76 = 0;
  if (a5)
  {
    v8 = *(void **)(a1 + 40);
    v9 = *(id *)(a1 + 32);
    v10 = v8;
    v11 = v10;
    if ((v9[8] & 1) == 0)
    {
      if (objc_msgSend(v10, "requestedRangeIsWholeAsset"))
      {
        v12 = objc_alloc((Class)NSURLResponse);
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "requestedURL"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mimeType"));
        v15 = objc_msgSend(v12, "initWithURL:MIMEType:expectedContentLength:textEncodingName:", v13, v14, objc_msgSend(v11, "fileSize"), 0);

      }
      else
      {
        v18 = objc_msgSend(v11, "requestedRange");
        v20 = v19;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v18));
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v20));
        v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v11, "fileSize")));
        v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("bytes %@-%@/%@"), v21, v22, v23, context, v74));

        v77[0] = CFSTR("Content-Type");
        v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "mimeType"));
        v78[0] = v25;
        v77[1] = CFSTR("Content-Length");
        v26 = objc_msgSend(v11, "requestedRange");
        if (v27 >= (unint64_t)v26)
          v28 = v27 - (_QWORD)v26 + 1;
        else
          v28 = 0;
        v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v28));
        v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "stringValue"));
        v77[2] = CFSTR("Content-Range");
        v78[1] = v30;
        v78[2] = v24;
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v78, v77, 3));

        v32 = objc_alloc((Class)NSHTTPURLResponse);
        v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "requestedURL"));
        v15 = objc_msgSend(v32, "initWithURL:statusCode:HTTPVersion:headerFields:", v33, 206, CFSTR("HTTP/1.1"), v31);

      }
      v34 = v9;
      v35 = v15;
      v36 = v9[8];
      v37 = v35;
      if ((v36 & 1) == 0)
      {
        v9[8] = v36 | 1;
        v38 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
        v39 = v38 == 0;

        v37 = v35;
        if (!v39)
        {
          v40 = sub_27A5C(v35);
          v37 = (void *)objc_claimAutoreleasedReturnValue(v40);

        }
        v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "delegate"));
        objc_msgSend(v41, "urlHandler:didReceiveResponse:", v34, v37);

      }
    }

    v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sinfData"));
    if (!v42)
    {
      v16 = objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", a4, a5);
LABEL_23:
      v48 = *(_QWORD **)(a1 + 32);
      if ((v48[8] & 8) != 0)
      {
        v54 = v16;
      }
      else
      {
        v49 = *(void **)(a1 + 40);
        v50 = v48;
        v51 = v49;
        v52 = v16;
        v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "encryptionAlgorithm"));
        v54 = v52;
        if (objc_msgSend(v53, "length"))
        {
          if (!objc_msgSend(CFSTR("http://www.idpf.org/2008/embedding"), "compare:options:", v53, 1)
            || (v54 = v52, !objc_msgSend(CFSTR("http://ns.adobe.com/pdf/enc#RC"), "compare:options:", v53, 1)))
          {
            v55 = objc_alloc_init(BEFontUnmangler);
            v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "requestedURL"));
            v54 = (void *)objc_claimAutoreleasedReturnValue(-[BEFontUnmangler unmangleFontWithAssetInfo:fileData:URL:](v55, "unmangleFontWithAssetInfo:fileData:URL:", v51, v52, v56));

          }
        }
        v48[8] |= 8uLL;

      }
      v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48);
      v69 = *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      if (v69 >= (char *)objc_msgSend(v54, "length") - v68)
        v70 = (char *)objc_msgSend(v54, "length") - v68;
      else
        v70 = *(char **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "subdataWithRange:", v68, v70));

      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48) = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) -= v70;
      v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pendingRangeRequestedData"));
      objc_msgSend(v71, "appendData:", v16);

      v67 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) != 0;
      goto LABEL_41;
    }
    v43 = (void *)objc_claimAutoreleasedReturnValue(+[ft9cupR7u6OrU4m1pyhB MNeITI0WyvXBxnLLXXWr:](ft9cupR7u6OrU4m1pyhB, "MNeITI0WyvXBxnLLXXWr:", v42));
    v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithLength:](NSMutableData, "dataWithLength:", (char *)+[ft9cupR7u6OrU4m1pyhB d32lDu5WFQOV5kTab38V](ft9cupR7u6OrU4m1pyhB, "d32lDu5WFQOV5kTab38V")+ *(_QWORD *)(a1 + 64)));
    v78[0] = 0;
    v45 = objc_retainAutorelease(v44);
    v75 = 0;
    v46 = objc_msgSend(v43, "BaSrRpzcWCyAjSdjbc8j:withSize:into:e2cxKLQOk3W4uL3KXTUm:refetch:error:", a4, a5, objc_msgSend(v45, "mutableBytes"), v78, &v76, &v75);
    v47 = v75;
    if (v47)
      v46 = 0;
    if (v46 == 1)
    {
      objc_msgSend(v45, "setLength:", v78[0]);
      v16 = v45;
      v17 = 0;
    }
    else
    {
      v16 = 0;
      v17 = -1016;
    }

    if ((v46 & 1) != 0)
      goto LABEL_23;
  }
  else
  {
    v16 = 0;
    v17 = -1014;
  }
  v57 = *(id *)(a1 + 32);
  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSURLErrorDomain, v17, 0));
  v59 = v57;
  v60 = v58;
  v61 = _BookEPUBLog();
  v62 = objc_claimAutoreleasedReturnValue(v61);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    sub_2B5D98();

  v63 = v59[8];
  if ((v63 & 6) == 0)
  {
    v59[8] = v63 | 2;
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "delegate"));
    objc_msgSend(v64, "urlHandler:didFailWithError:", v59, v60);
    v65 = (void *)objc_claimAutoreleasedReturnValue(+[BEURLHandler testingDelegate](BEURLHandler, "testingDelegate"));
    objc_msgSend(v65, "urlHandler:request:didFailWithError:", v59, v59[6], v60);

  }
  if (v76)
  {
    v66 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "path"));
    +[ft9cupR7u6OrU4m1pyhB _8g0aKpBRl5gIBvODdOy7:completion:](ft9cupR7u6OrU4m1pyhB, "_8g0aKpBRl5gIBvODdOy7:completion:", v66, 0);

  }
  v67 = 0;
LABEL_41:

  objc_autoreleasePoolPop(context);
  return v67;
}

void sub_292C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_29494(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t sub_294BC(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(_QWORD *)(a2 + 4) = result;
  return result;
}

void sub_296CC(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlHandlerToTaskMap"));
  objc_msgSend(v2, "setObject:forKey:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskToURLHandlerMap"));
  objc_msgSend(v3, "setObject:forKey:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40));

}

void sub_2980C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_29824(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_29834(uint64_t a1)
{

}

void sub_2983C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskToURLHandlerMap"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlHandlerToTaskMap"));
  objc_msgSend(v5, "removeObjectForKey:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

  objc_msgSend(v6, "removeObjectForKey:", *(_QWORD *)(a1 + 40));
}

void sub_2996C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_taskForHandler:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "didReceiveResponse:", *(_QWORD *)(a1 + 48));

}

void sub_29A58(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_taskForHandler:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "didReceiveData:", *(_QWORD *)(a1 + 48));

}

void sub_29B18(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_taskForHandler:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "didFinish");
  objc_msgSend(*(id *)(a1 + 32), "_removeTaskForHandler:", *(_QWORD *)(a1 + 40));

}

void sub_29C08(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_taskForHandler:", *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "didFailWithError:", *(_QWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_removeTaskForHandler:", *(_QWORD *)(a1 + 40));

}

void sub_29DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_29DD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlHandlerToTaskMap"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_29EA4(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "urlHandlerToTaskMap"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "taskToURLHandlerMap"));
  objc_msgSend(v3, "removeObjectForKey:", v2);

  objc_msgSend(v4, "removeObjectForKey:", *(_QWORD *)(a1 + 40));
}

void sub_2A1A8(uint64_t a1, char a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void (**v9)(void);
  id v10;
  void *v11;
  void (**v12)(void);
  _QWORD v13[4];
  id v14;

  if ((a2 & 1) != 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    if ((objc_opt_respondsToSelector(v3, "handler:presentAlertController:completion:") & 1) != 0)
    {
      v4 = BookEPUBBundle();
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_38FF08, 0));
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      v13[2] = sub_2A33C;
      v13[3] = &unk_378510;
      v14 = *(id *)(a1 + 48);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v6, 0, v13));

      v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", &stru_38FF08, *(_QWORD *)(a1 + 40), 1));
      objc_msgSend(v8, "addAction:", v7);
      objc_msgSend(v3, "handler:presentAlertController:completion:", *(_QWORD *)(a1 + 32), v8, 0);

    }
    else
    {
      v10 = objc_retainBlock(*(id *)(a1 + 48));
      v11 = v10;
      if (v10)
        (*((void (**)(id))v10 + 2))(v10);

    }
  }
  else
  {
    v9 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 48));
    if (v9)
    {
      v12 = v9;
      v9[2]();
      v9 = v12;
    }

  }
}

void sub_2A33C(uint64_t a1)
{
  void (**v1)(void);
  void (**v2)(void);

  v1 = (void (**)(void))objc_retainBlock(*(id *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    v1[2]();
    v1 = v2;
  }

}

void sub_2A418(uint64_t a1, char a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;

  if ((a2 & 1) != 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    if ((objc_opt_respondsToSelector(v3, "handler:presentAlertController:completion:") & 1) != 0)
    {
      v4 = BookEPUBBundle();
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_38FF08, 0));
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_2A660;
      v19[3] = &unk_378510;
      v20 = *(id *)(a1 + 48);
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v6, 0, v19));

      v8 = BookEPUBBundle();
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("Cancel"), &stru_38FF08, 0));
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_2A698;
      v17[3] = &unk_378510;
      v18 = *(id *)(a1 + 48);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 1, v17));

      v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", &stru_38FF08, *(_QWORD *)(a1 + 40), 1));
      objc_msgSend(v12, "addAction:", v7);
      objc_msgSend(v12, "addAction:", v11);
      objc_msgSend(v3, "handler:presentAlertController:completion:", *(_QWORD *)(a1 + 32), v12, 0);

    }
    else
    {
      v14 = objc_retainBlock(*(id *)(a1 + 48));
      v15 = v14;
      if (v14)
        (*((void (**)(id, _QWORD))v14 + 2))(v14, 0);

    }
  }
  else
  {
    v13 = objc_retainBlock(*(id *)(a1 + 48));
    if (v13)
    {
      v16 = v13;
      (*((void (**)(id, _QWORD))v13 + 2))(v13, 0);
      v13 = v16;
    }

  }
}

void sub_2A660(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_retainBlock(*(id *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    (*((void (**)(id, uint64_t))v1 + 2))(v1, 1);
    v1 = v2;
  }

}

void sub_2A698(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_retainBlock(*(id *)(a1 + 32));
  if (v1)
  {
    v2 = v1;
    (*((void (**)(id, _QWORD))v1 + 2))(v1, 0);
    v1 = v2;
  }

}

void sub_2AC18(uint64_t a1, void *a2)
{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  id v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void (**)(uint64_t, uint64_t))(v2 + 16);
  v4 = a2;
  v3(v2, 1);
  v6 = objc_retainBlock(v4);

  v5 = v6;
  if (v6)
  {
    (*((void (**)(id))v6 + 2))(v6);
    v5 = v6;
  }

}

UIMenu *__cdecl sub_2AD68(id a1, NSArray *a2)
{
  NSArray *v2;
  NSArray *v3;
  id v4;
  NSObject *v5;
  NSArray *v6;
  void *v7;
  __int16 v9;
  _QWORD v10[5];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void (*v15)(uint64_t);
  id v16;
  uint64_t v17;

  v2 = a2;
  v11 = 0;
  v12 = &v11;
  v13 = 0x3032000000;
  v14 = sub_2AF00;
  v15 = sub_2AF10;
  v16 = 0;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_2AF18;
  v10[3] = &unk_3785C8;
  v10[4] = &v11;
  -[NSArray enumerateObjectsUsingBlock:](v2, "enumerateObjectsUsingBlock:", v10);
  if (v12[5])
  {
    v17 = v12[5];
    v3 = (NSArray *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
  }
  else
  {
    v4 = _BookEPUBLog();
    v5 = objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v9 = 0;
      _os_log_impl(&dword_0, v5, OS_LOG_TYPE_ERROR, "WebKit native open action (WKElementActionTypeOpenIdentifier) not found to open link - fallback to suggested actions", (uint8_t *)&v9, 2u);
    }

    v3 = v2;
  }
  v6 = v3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithChildren:](UIMenu, "menuWithChildren:", v3));

  _Block_object_dispose(&v11, 8);
  return (UIMenu *)v7;
}

void sub_2AED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_2AF00(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_2AF10(uint64_t a1)
{

}

void sub_2AF18(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id obj;

  v6 = a2;
  v7 = objc_opt_class(UIAction);
  v8 = BUDynamicCast(v7, v6);
  obj = (id)objc_claimAutoreleasedReturnValue(v8);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "identifier"));
  LODWORD(v6) = objc_msgSend(v9, "isEqualToString:", CFSTR("WKElementActionTypeOpen"));

  if ((_DWORD)v6)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), obj);
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "setImage:", 0);
    *a4 = 1;
  }

}

id BEURLIncludePatternsForBooks()
{
  id v0;
  uint64_t i;
  void *v2;
  uint64_t j;
  __int128 v5;

  v0 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 3, *(_OWORD *)off_3786A0, CFSTR("file"));
  for (i = 0; i != 24; i += 8)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)((char *)&v5 + i), "stringByAppendingString:", CFSTR("://*/*")));
    if (v2)
      objc_msgSend(v0, "addObject:", v2);

  }
  for (j = 16; j != -8; j -= 8)

  return v0;
}

void sub_2B290(uint64_t a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)objc_opt_class(*(_QWORD *)(a1 + 32)));
  v2 = (void *)qword_3C1B18;
  qword_3C1B18 = (uint64_t)v1;

}

void ITEpubRightsParser::ITEpubRightsParser(ITEpubRightsParser *this)
{
  _QWORD *v2;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *v2 = off_3786C8;
  v2[16] = 0;
  v2[17] = 0;
  *((_QWORD *)this + 15) = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
}

void sub_2B630(_Unwind_Exception *a1)
{
  ITEpubXmlParseHandler *v1;

  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(v1);
  _Unwind_Resume(a1);
}

void ITEpubRightsParser::~ITEpubRightsParser(ITEpubRightsParser *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *(_QWORD *)this = off_3786C8;
  v2 = (const void *)*((_QWORD *)this + 15);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 15) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 16);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 16) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 17);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 17) = 0;
  }
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubRightsParser::~ITEpubRightsParser(this);
  operator delete();
}

void ITEpubRightsParser::StartElement(CFMutableArrayRef *this, const __CFString *a2, const __CFDictionary *a3)
{
  CFMutableArrayRef v5;
  CFMutableArrayRef v6;

  ITEpubXmlParseHandler::StartElement(this, a2, a3);
  if (ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("sinf")))
  {
    v5 = this[17];
    if (v5)
    {
      CFRelease(v5);
      this[17] = 0;
    }
    v6 = this[16];
    if (v6)
    {
      CFRelease(v6);
      this[16] = 0;
    }
  }
}

void ITEpubRightsParser::EndElement(ITEpubRightsParser *this, const __CFString *a2)
{
  const void *v4;
  const char *v5;
  const void *v6;
  uint64_t v7;
  CFIndex v8;
  __CFData *Mutable;
  __CFData *v10;
  unsigned __int8 *v11;
  UInt8 *MutableBytePtr;
  CFIndex v13;
  const void *v14;
  const void *v15;
  const void *v16;
  UInt8 *v17;
  int v18;
  int v19;
  unsigned int v20;
  char *v21;
  UInt8 *v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  UInt8 v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;

  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("sID")))
  {
    v4 = (const void *)*((_QWORD *)this + 17);
    if (v4)
    {
      CFRelease(v4);
      *((_QWORD *)this + 17) = 0;
    }
    v5 = (char *)this + 72;
    if (*((char *)this + 95) < 0)
      v5 = *(const char **)v5;
    *((_QWORD *)this + 17) = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
    goto LABEL_50;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("sData")))
  {
    v6 = (const void *)*((_QWORD *)this + 16);
    if (v6)
    {
      CFRelease(v6);
      *((_QWORD *)this + 16) = 0;
    }
    if (*((char *)this + 95) >= 0)
      LODWORD(v7) = *((unsigned __int8 *)this + 95);
    else
      v7 = *((_QWORD *)this + 10);
    v8 = 3 * vcvtpd_u64_f64((double)v7 * 0.25);
    Mutable = CFDataCreateMutable(kCFAllocatorDefault, v8);
    v10 = Mutable;
    if (!Mutable)
      goto LABEL_49;
    CFDataSetLength(Mutable, v8);
    if (*((char *)this + 95) >= 0)
      v11 = (unsigned __int8 *)this + 72;
    else
      v11 = (unsigned __int8 *)*((_QWORD *)this + 9);
    MutableBytePtr = CFDataGetMutableBytePtr(v10);
    v13 = 0;
    if (!v11 || !MutableBytePtr)
    {
LABEL_48:
      CFDataSetLength(v10, v13);
LABEL_49:
      *((_QWORD *)this + 16) = v10;
      goto LABEL_50;
    }
    if (3 * ((v7 + 3) >> 2) > v8)
    {
      v13 = 0;
      goto LABEL_48;
    }
    LODWORD(v17) = (_DWORD)MutableBytePtr;
    if (!(_DWORD)v7)
    {
LABEL_47:
      v13 = ((_DWORD)v17 - (_DWORD)MutableBytePtr);
      goto LABEL_48;
    }
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = (char *)&v11[v7];
    v22 = MutableBytePtr;
    do
    {
      v24 = *v11++;
      v23 = v24;
      v25 = byte_2E4A95[v24];
      if (v25 == 255)
      {
        if (v23 == 61)
        {
          v20 <<= 6;
          ++v18;
        }
      }
      else
      {
        v26 = v25 | ((_BYTE)v20 << 6);
        ++v19;
        v18 = 0;
        if ((v19 & 3) != 0)
        {
          v20 = v25 | (v20 << 6);
        }
        else
        {
          v27 = v20 << 6;
          *v22 = BYTE2(v27);
          v22[1] = BYTE1(v27);
          v22[2] = v26;
          v22 += 3;
          v20 = 0;
        }
      }
    }
    while (v11 < (unsigned __int8 *)v21);
    if (v18)
    {
      *v22 = BYTE2(v20);
      v17 = v22 + 1;
      if (v18 != 1)
        goto LABEL_47;
    }
    else
    {
      if ((v7 & 3) != 3)
      {
        if ((v7 & 3) != 2)
        {
          LODWORD(v17) = (_DWORD)v22;
          goto LABEL_47;
        }
        v28 = v20 >> 4;
        v29 = 1;
        v17 = v22;
        goto LABEL_46;
      }
      v30 = v20 >> 10;
      v20 <<= 6;
      *v22 = v30;
      v17 = v22 + 1;
    }
    v28 = v20 >> 8;
    v29 = 2;
LABEL_46:
    *v17 = v28;
    LODWORD(v17) = (_DWORD)v22 + v29;
    goto LABEL_47;
  }
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("sinf")))
  {
    v14 = (const void *)*((_QWORD *)this + 17);
    if (v14)
    {
      v15 = (const void *)*((_QWORD *)this + 16);
      if (!v15
        || (CFDictionaryAddValue(*((CFMutableDictionaryRef *)this + 15), v14, v15),
            (v14 = (const void *)*((_QWORD *)this + 17)) != 0))
      {
        CFRelease(v14);
        *((_QWORD *)this + 17) = 0;
      }
    }
    v16 = (const void *)*((_QWORD *)this + 16);
    if (v16)
    {
      CFRelease(v16);
      *((_QWORD *)this + 16) = 0;
    }
  }
LABEL_50:
  ITEpubXmlParseHandler::EndElement((CFArrayRef *)this, a2);
}

void BKReadableFormat::BKReadableFormat(BKReadableFormat *this, const __CFString *a2, const __CFString *a3)
{
  uint64_t v6;

  ITRetain::ITRetain(this);
  *(_QWORD *)v6 = off_378728;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  if (a2)
  {
    *((_QWORD *)this + 2) = CFStringCreateCopy(kCFAllocatorDefault, a2);
    *((_QWORD *)this + 3) = CFStringCreateCopy(kCFAllocatorDefault, a3);
  }
}

void sub_2BA5C(_Unwind_Exception *a1)
{
  ITRetain *v1;

  ITRetain::~ITRetain(v1);
  _Unwind_Resume(a1);
}

void BKReadableFormat::~BKReadableFormat(BKReadableFormat *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  ITRetain *v14;
  ITRetain *v15;
  ITRetain *v16;

  *(_QWORD *)this = off_378728;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 3) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 2);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 2) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 4);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 4) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 5);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 5) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 6);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 6) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 7);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 7) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 8);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 8) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 10);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 10) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 11);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 11) = 0;
  }
  v11 = (const void *)*((_QWORD *)this + 12);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)this + 12) = 0;
  }
  v12 = (const void *)*((_QWORD *)this + 16);
  if (v12)
  {
    CFRelease(v12);
    *((_QWORD *)this + 16) = 0;
  }
  v13 = (const void *)*((_QWORD *)this + 17);
  if (v13)
  {
    CFRelease(v13);
    *((_QWORD *)this + 17) = 0;
  }
  v14 = (ITRetain *)*((_QWORD *)this + 13);
  if (v14)
  {
    ITRetain::release(v14);
    *((_QWORD *)this + 13) = 0;
  }
  v15 = (ITRetain *)*((_QWORD *)this + 14);
  if (v15)
  {
    ITRetain::release(v15);
    *((_QWORD *)this + 14) = 0;
  }
  v16 = (ITRetain *)*((_QWORD *)this + 15);
  if (v16)
  {
    ITRetain::release(v16);
    *((_QWORD *)this + 15) = 0;
  }
  ITRetain::~ITRetain(this);
}

const void *BKReadableFormat::copyRootPath(BKReadableFormat *this)
{
  const void *result;

  result = (const void *)*((_QWORD *)this + 2);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((_QWORD *)this + 2);
  }
  return result;
}

void ITEpubFixedLayoutParser::ITEpubFixedLayoutParser(ITEpubFixedLayoutParser *this)
{
  _QWORD *v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *v1 = off_3787E0;
  v1[15] = 0;
  v1[16] = 0;
}

{
  _QWORD *v1;

  ITEpubXmlParseHandler::ITEpubXmlParseHandler(this);
  *v1 = off_3787E0;
  v1[15] = 0;
  v1[16] = 0;
}

void ITEpubFixedLayoutParser::~ITEpubFixedLayoutParser(ITEpubFixedLayoutParser *this)
{
  const void *v2;

  *(_QWORD *)this = off_3787E0;
  v2 = (const void *)*((_QWORD *)this + 16);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 16) = 0;
  }
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
}

{
  ITEpubFixedLayoutParser::~ITEpubFixedLayoutParser(this);
  operator delete();
}

uint64_t ITEpubFixedLayoutParser::StartElement(CFMutableArrayRef *this, const __CFString *a2, const __CFDictionary *a3)
{
  uint64_t result;
  const __CFString *v7;
  __CFArray *v8;

  ITEpubXmlParseHandler::StartElement(this, a2, a3);
  result = ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("head"));
  if ((_DWORD)result)
  {
    *((_DWORD *)this + 30) = 1;
  }
  else if (*((_DWORD *)this + 30))
  {
    if (!*((_DWORD *)this + 31))
    {
      result = ITEpubXmlParseHandler::doesNodeMatch((ITEpubXmlParseHandler *)this, a2, CFSTR("meta"));
      if ((_DWORD)result)
      {
        result = (uint64_t)CFDictionaryGetValue(a3, CFSTR("name"));
        if (result)
        {
          v7 = (const __CFString *)result;
          result = CFStringGetLength((CFStringRef)result);
          if (result)
          {
            result = CFStringCompare(v7, CFSTR("viewport"), 1uLL);
            if (!result)
            {
              result = (uint64_t)CFDictionaryGetValue(a3, CFSTR("content"));
              if (result)
              {
                v8 = (__CFArray *)result;
                result = CFStringGetLength((CFStringRef)result);
                if (result)
                {
                  *((_DWORD *)this + 31) = 1;
                  this[16] = v8;
                  return (uint64_t)CFRetain(v8);
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void ITEpubFixedLayoutParser::EndElement(ITEpubFixedLayoutParser *this, const __CFString *a2)
{
  if (ITEpubXmlParseHandler::doesNodeMatch(this, a2, CFSTR("head")))
    *((_DWORD *)this + 30) = 0;
  ITEpubXmlParseHandler::EndElement((CFArrayRef *)this, a2);
}

uint64_t ITEpubFixedLayoutParser::dimensionsFromData(ITEpubFixedLayoutParser *this, const __CFData *a2)
{
  if (this && CFDataGetLength(this))
    operator new();
  return -1;
}

void sub_2BED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ITEpubXmlParseHandler::ITEpubXmlParseHandler(ITEpubXmlParseHandler *this)
{
  uint64_t v2;
  int v3;

  ITRetain::ITRetain(this);
  *(_QWORD *)v2 = off_378840;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  v3 = 0;
  sub_2CB4C((_QWORD *)(v2 + 96), 1uLL, &v3);
  *((_QWORD *)this + 2) = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
}

void sub_2BF94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 104) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  ITRetain::~ITRetain((ITRetain *)v1);
  _Unwind_Resume(a1);
}

void ITEpubXmlParseHandler::~ITEpubXmlParseHandler(ITEpubXmlParseHandler *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  void *v6;

  *(_QWORD *)this = off_378840;
  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 3) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 7);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 7) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 8);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 8) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 2);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 2) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 13) = v6;
    operator delete(v6);
  }
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  ITRetain::~ITRetain(this);
}

{
  ITEpubXmlParseHandler::~ITEpubXmlParseHandler(this);
  operator delete();
}

uint64_t ITEpubXmlParseHandler::parse(ITEpubXmlParseHandler *this, char *__s)
{
  size_t v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;

  v4 = strlen(__s);
  if (!v4)
    return 0;
  v5 = CFStringCreateWithBytes(kCFAllocatorDefault, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = ITEpubXmlParseHandler::parse(this, v5);
  CFRelease(v6);
  return v7;
}

uint64_t ITEpubXmlParseHandler::parse(ITEpubXmlParseHandler *this, CFStringRef theString)
{
  const void *v4;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char *isa;
  unsigned __int8 v9;
  char *v10;
  char *v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  size_t v15;
  CFDataRef v16;
  const __CFData *v17;
  char *v19;
  __CFString __big;

  v19 = 0;
  __big.isa = 0;
  v4 = (const void *)*((_QWORD *)this + 7);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 7) = 0;
  }
  if (!theString || !CFStringGetLength(theString))
    return 4294967246;
  (*(void (**)(ITEpubXmlParseHandler *, CFStringRef))(*(_QWORD *)this + 48))(this, theString);
  v6 = ITFileUtil::slurp(*((const __CFString **)this + 7), &__big, &v19, v5);
  v7 = v6;
  isa = (char *)__big.isa;
  if (__big.isa && v19)
  {
    if ((unint64_t)v19 >= 0x64)
    {
      v9 = atomic_load((unsigned __int8 *)&qword_3C1B30);
      if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_3C1B30))
      {
        qword_3C1B28 = strlen(aEncoding_0);
        __cxa_guard_release(&qword_3C1B30);
      }
      v10 = strnstr(isa, "encoding=", 0x64uLL);
      if (v10)
      {
        v11 = &v10[qword_3C1B28];
        v12 = v10[qword_3C1B28];
        if (v12 == 39 || v12 == 34)
        {
          v13 = v11 + 1;
          if (v11 + 1 - isa <= 99)
          {
            v14 = -5;
            while (*((unsigned __int8 *)v13 + v14 + 5) != v12)
            {
              ++v14;
              if (&v10[qword_3C1B28] - isa - 99 + v14 == -5)
                goto LABEL_31;
            }
            if (v14 != -5
              && (!strncasecmp(v11 + 1, "us-ascii", v14 + 5)
               || !strncasecmp(v11 + 1, "ascii", v14 + 5)
               || !strncasecmp(v11 + 1, "iso-8859-1", v14 + 5)))
            {
              if ((unint64_t)(v14 + 6) >= 7)
                v15 = v14;
              else
                v15 = 0;
              memset(v11 + 7, 32, v15);
              *v13 = 759583829;
              *(_WORD *)(v11 + 5) = 8760;
            }
          }
        }
      }
    }
LABEL_31:
    v16 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, (const UInt8 *)__big.isa, (CFIndex)v19, kCFAllocatorMalloc);
    __big.isa = 0;
    if (v16)
    {
      v17 = v16;
      if (!*((_QWORD *)this + 7))
        (*(void (**)(ITEpubXmlParseHandler *, CFStringRef))(*(_QWORD *)this + 48))(this, theString);
      v7 = (uint64_t)ITParseXMLInObjectiveCWithData(this, v17);
      CFRelease(v17);
      isa = (char *)__big.isa;
      if (__big.isa)
        goto LABEL_35;
    }
  }
  else
  {
    if ((_DWORD)v6)
      v7 = v6;
    else
      v7 = 4294967253;
    if (__big.isa)
LABEL_35:
      free(isa);
  }
  return v7;
}

void ITEpubXmlParseHandler::SetXmlPath(ITEpubXmlParseHandler *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 7);
  if (v3 != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      v3 = (CFTypeRef)*((_QWORD *)this + 7);
    }
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 7) = cf;
  }
}

CFStringRef ITEpubXmlParseHandler::RelativePathBase(CFStringRef *this)
{
  const __CFURL *v2;
  const __CFURL *v3;
  const __CFURL *PathComponent;
  const __CFURL *v5;

  if (!this[8])
  {
    v2 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, this[7], kCFURLPOSIXPathStyle, 0);
    if (v2)
    {
      v3 = v2;
      PathComponent = CFURLCreateCopyDeletingLastPathComponent(kCFAllocatorDefault, v2);
      if (PathComponent)
      {
        v5 = PathComponent;
        this[8] = CFURLCopyPath(PathComponent);
        CFRelease(v5);
      }
      CFRelease(v3);
    }
  }
  return this[8];
}

id ITEpubXmlParseHandler::parseData(ITEpubXmlParseHandler *this, const __CFData *a2, const __CFString *a3)
{
  if (!a2)
    return 0;
  if (!*((_QWORD *)this + 7))
    (*(void (**)(ITEpubXmlParseHandler *, const __CFString *))(*(_QWORD *)this + 48))(this, a3);
  return ITParseXMLInObjectiveCWithData(this, a2);
}

uint64_t ITEpubXmlParseHandler::childIndexInParent(ITEpubXmlParseHandler *this)
{
  if (*((_QWORD *)this + 13) - *((_QWORD *)this + 12) < 5uLL)
    return 0;
  else
    return (*(_DWORD *)(*((_QWORD *)this + 13) - 8) - 1);
}

BOOL ITEpubXmlParseHandler::doesNodeMatch(ITEpubXmlParseHandler *this, CFStringRef theString, const __CFString *a3)
{
  CFRange v5;
  CFIndex v6;
  CFIndex Length;
  CFRange v9;

  v5 = CFStringFind(theString, CFSTR(":"), 4uLL);
  if (v5.length < 1)
  {
    Length = CFStringGetLength(theString);
    v6 = 0;
  }
  else
  {
    v6 = v5.location + 1;
    Length = CFStringGetLength(theString) - (v5.location + 1);
  }
  if (Length != CFStringGetLength(a3))
    return 0;
  v9.location = v6;
  v9.length = Length;
  return CFStringCompareWithOptions(theString, a3, v9, 0) == kCFCompareEqualTo;
}

const __CFString *ITEpubXmlParseHandler::doesAttributeMatch(ITEpubXmlParseHandler *this, const __CFString *a2, const __CFString *a3, CFDictionaryRef theDict)
{
  const __CFString *result;

  result = (const __CFString *)CFDictionaryGetValue(theDict, a2);
  if (result)
    return (const __CFString *)(CFStringCompare(a3, result, 0) == kCFCompareEqualTo);
  return result;
}

__CFArray *ITEpubXmlParseHandler::createArrayWithWhitespaceSplitting(ITEpubXmlParseHandler *this, const __CFString *a2)
{
  __CFArray *Mutable;
  CFIndex Length;
  CFCharacterSetRef Predefined;
  const __CFCharacterSet *v6;
  CFIndex location;
  CFRange v8;
  CFStringRef v9;
  CFStringRef v10;
  CFRange v12;
  CFRange v13;
  CFRange v14;

  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  Length = CFStringGetLength(a2);
  Predefined = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  if (Length)
  {
    v6 = Predefined;
    location = 0;
    v8.length = Length;
    do
    {
      v8.location = location;
      if (!CFStringFindCharacterFromSet(a2, v6, v8, 0, &v12))
        break;
      if (v12.location != location)
      {
        v13.location = location;
        v13.length = v12.location - location;
        v9 = CFStringCreateWithSubstring(kCFAllocatorDefault, a2, v13);
        CFArrayAppendValue(Mutable, v9);
        CFRelease(v9);
        location = v12.location;
      }
      ++location;
      v8.length = Length - location;
    }
    while (Length != location);
    if (Length > location)
    {
      v14.location = location;
      v14.length = Length - location;
      v10 = CFStringCreateWithSubstring(kCFAllocatorDefault, a2, v14);
      CFArrayAppendValue(Mutable, v10);
      CFRelease(v10);
    }
  }
  return Mutable;
}

void ITEpubXmlParseHandler::StartElement(CFMutableArrayRef *this, const __CFString *a2, const __CFDictionary *a3)
{
  CFMutableArrayRef v4;
  char *v5;
  __CFArray *v6;
  CFMutableArrayRef v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  __CFArray *v13;
  __CFArray *v14;
  int v15;

  if (a2)
    CFArrayAppendValue(this[2], a2);
  v4 = this[14];
  v5 = (char *)this[13];
  ++*((_DWORD *)v5 - 1);
  if (v5 >= (char *)v4)
  {
    v7 = this[12];
    v8 = (v5 - (char *)v7) >> 2;
    if ((unint64_t)(v8 + 1) >> 62)
      sub_797C();
    v9 = v4 - v7;
    v10 = (v4 - v7) >> 1;
    if (v10 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
    {
      v12 = (char *)sub_2CC0C((uint64_t)(this + 14), v11);
      v7 = this[12];
      v5 = (char *)this[13];
    }
    else
    {
      v12 = 0;
    }
    v13 = (__CFArray *)&v12[4 * v8];
    v14 = (__CFArray *)&v12[4 * v11];
    *(_DWORD *)v13 = 0;
    v6 = (__CFArray *)((char *)v13 + 4);
    while (v5 != (char *)v7)
    {
      v15 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v13 - 1) = v15;
      v13 = (__CFArray *)((char *)v13 - 4);
    }
    this[12] = v13;
    this[13] = v6;
    this[14] = v14;
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_DWORD *)v5 = 0;
    v6 = (__CFArray *)(v5 + 4);
  }
  this[13] = v6;
  if (*((char *)this + 95) < 0)
  {
    *(_BYTE *)this[9] = 0;
    this[10] = 0;
  }
  else
  {
    *((_BYTE *)this + 72) = 0;
    *((_BYTE *)this + 95) = 0;
  }
}

void ITEpubXmlParseHandler::PushNodeName(CFMutableArrayRef *this, const __CFString *a2)
{
  if (a2)
    CFArrayAppendValue(this[2], a2);
}

void ITEpubXmlParseHandler::SetCurrentNamespace(ITEpubXmlParseHandler *this, CFTypeRef cf)
{
  CFTypeRef v3;

  v3 = (CFTypeRef)*((_QWORD *)this + 3);
  if (v3 != cf)
  {
    if (v3)
      CFRelease(v3);
    *((_QWORD *)this + 3) = cf;
    if (cf)
      CFRetain(cf);
  }
}

void ITEpubXmlParseHandler::FoundText(std::string *this, CFStringRef theString)
{
  void **v3;
  void *__p[2];
  uint64_t v5;

  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  ITStrUtil::toString(theString, (uint64_t)__p);
  if (v5 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  std::string::append(this + 3, (const std::string::value_type *)v3);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

void sub_2C8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ITEpubXmlParseHandler::EndElement(CFArrayRef *this, const __CFString *a2)
{
  ITEpubXmlParseHandler::PopNodeName(this);
  this[13] = (CFArrayRef)((char *)this[13] - 4);
  if (*((char *)this + 95) < 0)
  {
    *(_BYTE *)this[9] = 0;
    this[10] = 0;
  }
  else
  {
    *((_BYTE *)this + 72) = 0;
    *((_BYTE *)this + 95) = 0;
  }
}

void ITEpubXmlParseHandler::PopNodeName(CFArrayRef *this)
{
  CFIndex Count;

  Count = CFArrayGetCount(this[2]);
  if (Count >= 1)
    CFArrayRemoveValueAtIndex(this[2], Count - 1);
}

CFStringRef ITEpubXmlParseHandler::copyHrefStrippingHash(const __CFString *this, const __CFString *a2)
{
  const __CFString *v2;
  CFRange v3;
  const __CFAllocator *v4;
  CFStringRef v5;
  CFRange v7;

  if (!this)
    return 0;
  v2 = this;
  v3 = CFStringFind(this, CFSTR("#"), 0);
  if (v3.length)
  {
    v7.length = v3.location;
    v4 = kCFAllocatorDefault;
    v7.location = 0;
    v2 = CFStringCreateWithSubstring(kCFAllocatorDefault, v2, v7);
  }
  else
  {
    CFRetain(v2);
    v4 = kCFAllocatorDefault;
  }
  v5 = CFURLCreateStringByReplacingPercentEscapes(v4, v2, &stru_38FF08);
  if (!v5)
  {
    CFRetain(v2);
    v5 = v2;
    if (!v2)
      return v5;
    goto LABEL_8;
  }
  if (v2)
LABEL_8:
    CFRelease(v2);
  return v5;
}

const __CFString *ITEpubXmlParseHandler::createHrefString(const __CFString *originalString, const __CFString *a2)
{
  const __CFString *v2;

  if (originalString)
  {
    v2 = originalString;
    originalString = CFURLCreateStringByReplacingPercentEscapes(kCFAllocatorDefault, originalString, &stru_38FF08);
    if (!originalString)
    {
      CFRetain(v2);
      return v2;
    }
  }
  return originalString;
}

std::string *ITEpubXmlParseHandler::FirstChapterQualityToString(unsigned int a1, std::string *this)
{
  const std::string::value_type *v3;

  if (a1 > 0xA)
    v3 = "000: Unknown [4]";
  else
    v3 = off_378890[a1];
  return std::string::assign(this, v3);
}

BOOL ITEpubXmlParseHandler::BOOLeanForString(ITEpubXmlParseHandler *this, CFStringRef theString1)
{
  return theString1 && CFStringCompare(theString1, CFSTR("true"), 1uLL) == kCFCompareEqualTo;
}

const void *ITEpubXmlParseHandler::CurrentNodeName(CFArrayRef *this)
{
  CFIndex Count;

  Count = CFArrayGetCount(this[2]);
  if (Count < 1)
    return 0;
  else
    return CFArrayGetValueAtIndex(this[2], Count - 1);
}

uint64_t ITEpubXmlParseHandler::DoesNodeStackContain(CFArrayRef *this, const __CFString *a2)
{
  uint64_t Count;
  CFRange v6;

  if (!a2)
    return 0;
  Count = CFArrayGetCount(this[2]);
  if (Count < 1)
    return 0;
  v6.length = Count;
  v6.location = 0;
  return CFArrayContainsValue(this[2], v6, a2);
}

_QWORD *sub_2CB4C(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2CBCC(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2CBB0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2CBCC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_797C();
  result = (char *)sub_2CC0C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *sub_2CC0C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_7A38();
  return operator new(4 * a2);
}

id _BEAreEquivalentURLsIgnoringFragment(void *a1, void *a2, int a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;

  v5 = a1;
  v6 = a2;
  if (a3)
  {
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "_be_urlWithoutFragment"));

    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "_be_urlWithoutFragment"));
    v6 = (id)v8;
    v5 = (id)v7;
  }
  v9 = BEURLHandleriBooksImgUrlFromiBooksURL(v5);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v11 = BEURLHandleriBooksImgUrlFromiBooksURL(v6);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  v13 = objc_msgSend(v10, "isEqual:", v12);
  return v13;
}

void ITEpubFolder::ITEpubFolder(ITEpubFolder *this, const __CFString *a2, const __CFString *a3)
{
  uint64_t v6;
  const __CFString *v7;
  const __CFString *v8;
  const void *v9;
  __CFString *MutableCopy;
  const void *v11;
  __CFString *v12;

  BKReadableFormat::BKReadableFormat(this, a2, a3);
  *(_QWORD *)v6 = off_3788F8;
  *(_QWORD *)(v6 + 216) = 0;
  *(_DWORD *)(v6 + 224) = 0;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_DWORD *)(v6 + 208) = 0;
  *(_OWORD *)(v6 + 248) = 0u;
  *(_QWORD *)(v6 + 328) = 0;
  *(_OWORD *)(v6 + 232) = 0u;
  *(_OWORD *)(v6 + 264) = 0u;
  *(_OWORD *)(v6 + 280) = 0u;
  *(_OWORD *)(v6 + 296) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  if (!ITFileUtil::hasTrailingSlash(a2, v7))
  {
    v9 = (const void *)*((_QWORD *)this + 2);
    if (v9)
    {
      CFRelease(v9);
      *((_QWORD *)this + 2) = 0;
    }
    MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, a2);
    CFStringAppend(MutableCopy, CFSTR("/"));
    *((_QWORD *)this + 2) = MutableCopy;
  }
  if (!ITFileUtil::hasTrailingSlash(a3, v8))
  {
    v11 = (const void *)*((_QWORD *)this + 3);
    if (v11)
    {
      CFRelease(v11);
      *((_QWORD *)this + 3) = 0;
    }
    v12 = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, a3);
    CFStringAppend(v12, CFSTR("/"));
    *((_QWORD *)this + 3) = v12;
  }
}

void sub_2D0D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 327) < 0)
    operator delete(*(void **)(v1 + 304));
  if (*(char *)(v1 + 303) < 0)
    operator delete(*(void **)(v1 + 280));
  if (*(char *)(v1 + 279) < 0)
    operator delete(*(void **)(v1 + 256));
  BKReadableFormat::~BKReadableFormat((BKReadableFormat *)v1);
  _Unwind_Resume(a1);
}

void ITEpubFolder::~ITEpubFolder(ITEpubFolder *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  ITRetain *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;

  *(_QWORD *)this = off_3788F8;
  v2 = (const void *)*((_QWORD *)this + 22);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 22) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 20);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 20) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 21);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 21) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 18);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 18) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 19);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 19) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 23);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 23) = 0;
  }
  v8 = (ITRetain *)*((_QWORD *)this + 24);
  if (v8)
  {
    ITRetain::release(v8);
    *((_QWORD *)this + 24) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 16);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 16) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 17);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 17) = 0;
  }
  v11 = (const void *)*((_QWORD *)this + 25);
  if (v11)
  {
    CFRelease(v11);
    *((_QWORD *)this + 25) = 0;
  }
  v12 = (const void *)*((_QWORD *)this + 27);
  if (v12)
  {
    CFRelease(v12);
    *((_QWORD *)this + 27) = 0;
  }
  v13 = (const void *)*((_QWORD *)this + 29);
  if (v13)
  {
    CFRelease(v13);
    *((_QWORD *)this + 29) = 0;
  }
  v14 = (const void *)*((_QWORD *)this + 30);
  if (v14)
  {
    CFRelease(v14);
    *((_QWORD *)this + 30) = 0;
  }
  v15 = (const void *)*((_QWORD *)this + 31);
  if (v15)
  {
    CFRelease(v15);
    *((_QWORD *)this + 31) = 0;
  }
  v16 = (const void *)*((_QWORD *)this + 41);
  if (v16)
  {
    CFRelease(v16);
    *((_QWORD *)this + 41) = 0;
  }
  if (*((char *)this + 327) < 0)
    operator delete(*((void **)this + 38));
  if (*((char *)this + 303) < 0)
    operator delete(*((void **)this + 35));
  if (*((char *)this + 279) < 0)
    operator delete(*((void **)this + 32));
  BKReadableFormat::~BKReadableFormat(this);
}

{
  ITEpubFolder::~ITEpubFolder(this);
  operator delete();
}

BOOL ITEpubFolder::isMimetypeFileContentsValid(ITEpubFolder *this, const char *a2, char *__s1, size_t __n)
{
  unsigned __int8 v7;
  _BOOL8 result;
  int v9;
  char *v10;
  size_t v11;
  __darwin_ct_rune_t v12;
  __uint32_t v13;
  BOOL v14;

  if (!__s1)
  {
    v7 = atomic_load((unsigned __int8 *)&qword_3C1B40);
    if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_3C1B40))
    {
      qword_3C1B38 = strlen(aApplicationEpu);
      __cxa_guard_release(&qword_3C1B40);
    }
    __n = qword_3C1B38;
    __s1 = aApplicationEpu;
  }
  result = 0;
  if (this)
  {
    if (a2)
    {
      v9 = strncmp(__s1, (const char *)this, __n);
      result = v9 == 0;
      if (!v9 && (unint64_t)a2 > __n)
      {
        v10 = (char *)this + __n;
        v11 = __n - (_QWORD)a2 + 1;
        do
        {
          v12 = *v10;
          if (v12 < 0)
            v13 = __maskrune(v12, 0x4000uLL);
          else
            v13 = _DefaultRuneLocale.__runetype[v12] & 0x4000;
          result = v13 != 0;
          ++v10;
          if (v13)
            v14 = v11 == 0;
          else
            v14 = 1;
          ++v11;
        }
        while (!v14);
      }
    }
  }
  return result;
}

BOOL ITEpubFolder::isMimeCorrect(CFStringRef theString, __CFString *a2, const char *a3)
{
  CFMutableStringRef MutableCopy;
  const __CFString *v7;
  unint64_t *v8;
  int v9;
  id v10;
  NSObject *v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  id v15;
  _BOOL8 isMimetypeFileContentsValid;
  void *isa;
  id v19;
  NSObject *v20;
  char *v21;
  id v22;
  NSObject *v23;
  char *v24;
  __CFString v25;

  v24 = 0;
  v25.isa = 0;
  if (!theString)
  {
    v15 = _BookEPUBLog();
    v11 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v25.info) = 0;
      v12 = "isMimeCorrect missing folderPath.";
      v13 = v11;
      v14 = 2;
      goto LABEL_11;
    }
LABEL_12:

    isMimetypeFileContentsValid = 0;
LABEL_13:
    isa = v25.isa;
    goto LABEL_14;
  }
  MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, theString);
  if (!ITFileUtil::hasTrailingSlash(theString, v7))
    CFStringAppend(MutableCopy, CFSTR("/"));
  CFStringAppend(MutableCopy, CFSTR("mimetype"));
  v9 = ITFileUtil::slurp(MutableCopy, &v25, &v24, v8);
  if (MutableCopy)
    CFRelease(MutableCopy);
  if (v9)
  {
    v10 = _BookEPUBLog();
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v25.info) = 67109120;
      HIDWORD(v25.info) = v9;
      v12 = "ITEpubFolder isMimeCorrect slurp error:%d";
      v13 = v11;
      v14 = 8;
LABEL_11:
      _os_log_impl(&dword_0, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v25.info, v14);
      goto LABEL_12;
    }
    goto LABEL_12;
  }
  if (!v25.isa)
  {
    v19 = _BookEPUBLog();
    v20 = objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v25.info) = 0;
      _os_log_impl(&dword_0, v20, OS_LOG_TYPE_ERROR, "ITEpubFolder isMimeCorrect slurp ERROR.  NULL data", (uint8_t *)&v25.info, 2u);
    }

  }
  v21 = v24;
  if (!v24)
  {
    v22 = _BookEPUBLog();
    v23 = objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v25.info) = 0;
      _os_log_impl(&dword_0, v23, OS_LOG_TYPE_ERROR, "ITEpubFolder isMimeCorrect slurp ERROR.  size == 0", (uint8_t *)&v25.info, 2u);
    }

    v21 = v24;
  }
  isMimetypeFileContentsValid = 0;
  isa = v25.isa;
  if (v25.isa && v21)
  {
    isMimetypeFileContentsValid = ITEpubFolder::isMimetypeFileContentsValid((ITEpubFolder *)v25.isa, v21, (char *)a2, (size_t)a3);
    goto LABEL_13;
  }
LABEL_14:
  if (isa)
    free(isa);
  return isMimetypeFileContentsValid;
}

BOOL ITEpubFolder::isMimeCorrect(CFStringRef *this)
{
  return ITEpubFolder::isMimeCorrect(this[2], 0, 0);
}

const void *ITEpubFolder::copyMimeFromDocumentHref(ITEpubFolder *this, const __CFString *a2)
{
  const void *v2;
  const __CFDictionary *v3;
  const __CFDictionary *Value;
  const void *v5;

  v2 = 0;
  if (a2)
  {
    v3 = (const __CFDictionary *)*((_QWORD *)this + 21);
    if (v3)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(v3, a2);
      if (Value)
      {
        v5 = CFDictionaryGetValue(Value, CFSTR("media-type"));
        v2 = v5;
        if (v5)
          CFRetain(v5);
      }
      else
      {
        return 0;
      }
    }
  }
  return v2;
}

const void *ITEpubFolder::sinfForHref(ITEpubFolder *this, const __CFString *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *Value;
  const __CFString *v6;
  const __CFString *v7;
  void **v8;
  CFNumberRef v9;
  const void *v10;
  int valuePtr;
  void *__p[2];
  uint64_t v14;

  if (!a2)
    return 0;
  v3 = (const __CFDictionary *)*((_QWORD *)this + 17);
  if (!v3)
    return 0;
  if (!*((_QWORD *)this + 16))
    return 0;
  if (!CFDictionaryGetCount(v3))
    return 0;
  if (!CFDictionaryGetCount(*((CFDictionaryRef *)this + 16)))
    return 0;
  Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 16), a2);
  if (!Value)
    return 0;
  v6 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("fairplay-id"));
  if (!v6)
    return 0;
  v7 = v6;
  if (CFStringCompare(v6, CFSTR("1"), 0))
  {
    __p[0] = 0;
    __p[1] = 0;
    v14 = 0;
    ITStrUtil::toString(v7, (uint64_t)__p);
    if (v14 >= 0)
      v8 = __p;
    else
      v8 = (void **)__p[0];
    valuePtr = atoi((const char *)v8);
    v9 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    v10 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 17), v9);
    CFRelease(v9);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
    return v10;
  }
  return CFDictionaryGetValue(*((CFDictionaryRef *)this + 17), CFSTR("1"));
}

void sub_2D780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ITEpubFolder::parse(ITEpubFolder *this)
{
  ITRetain *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  id v11;
  NSObject *v12;
  uint64_t v13;
  char *p_buf;
  id v15;
  NSObject *v16;
  void *v18[3];
  std::string v19;
  void *__p;
  uint64_t v21;
  uint64_t v22;
  __int128 buf;
  uint64_t v24;

  v2 = (ITRetain *)*((_QWORD *)this + 24);
  if (v2)
  {
    ITRetain::release(v2);
    *((_QWORD *)this + 24) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 22);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 22) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 20);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 20) = 0;
  }
  v5 = (const void *)*((_QWORD *)this + 21);
  if (v5)
  {
    CFRelease(v5);
    *((_QWORD *)this + 21) = 0;
  }
  v6 = (const void *)*((_QWORD *)this + 23);
  if (v6)
  {
    CFRelease(v6);
    *((_QWORD *)this + 23) = 0;
  }
  v7 = (const void *)*((_QWORD *)this + 4);
  if (v7)
  {
    CFRelease(v7);
    *((_QWORD *)this + 4) = 0;
  }
  v8 = (const void *)*((_QWORD *)this + 5);
  if (v8)
  {
    CFRelease(v8);
    *((_QWORD *)this + 5) = 0;
  }
  v9 = (const void *)*((_QWORD *)this + 6);
  if (v9)
  {
    CFRelease(v9);
    *((_QWORD *)this + 6) = 0;
  }
  v10 = (const void *)*((_QWORD *)this + 7);
  if (v10)
  {
    CFRelease(v10);
    *((_QWORD *)this + 7) = 0;
  }
  v11 = _BookEPUBLog();
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    v13 = *((_QWORD *)this + 2);
    LODWORD(buf) = 138412290;
    *(_QWORD *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_0, v12, OS_LOG_TYPE_INFO, "ITEpubFolder parse mBasePath:%@", (uint8_t *)&buf, 0xCu);
  }

  if (*((_QWORD *)this + 2))
  {
    if ((*(unsigned int (**)(ITEpubFolder *))(*(_QWORD *)this + 184))(this))
    {
      buf = 0uLL;
      v24 = 0;
      memset(v18, 0, sizeof(v18));
      ITStrUtil::toString(*((CFStringRef *)this + 2), (uint64_t)&buf);
      ITStrUtil::toString(*((CFStringRef *)this + 3), (uint64_t)v18);
      __p = 0;
      v21 = 0;
      v22 = 0;
      if (v24 >= 0)
        p_buf = (char *)&buf;
      else
        p_buf = (char *)buf;
      sub_2F668(&v19, p_buf);
      std::string::append(&v19, "META-INF/container.xml");
      operator new();
    }
    v15 = _BookEPUBLog();
    v16 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_0, v16, OS_LOG_TYPE_ERROR, "ITEpubFolder mime incorrect!", (uint8_t *)&buf, 2u);
    }

  }
  return 4294967246;
}

void sub_2E9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  void *v34;
  uint64_t v35;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  _Unwind_Resume(a1);
}

void sub_2EB90(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

const __CFString *ITEpubFolder::defaultExtension(ITEpubFolder *this)
{
  return CFSTR("epub");
}

const __CFArray *ITEpubFolder::countDocumentsInManifest(ITEpubFolder *this)
{
  const __CFArray *result;

  result = (const __CFArray *)*((_QWORD *)this + 22);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const void *ITEpubFolder::copyDocumentInfoFromManifestItemRef(ITEpubFolder *this, const __CFString *a2)
{
  const __CFDictionary *v2;
  const void *Value;
  const void *v4;

  v2 = (const __CFDictionary *)*((_QWORD *)this + 20);
  if (!v2)
    return 0;
  Value = CFDictionaryGetValue(v2, a2);
  v4 = Value;
  if (Value)
    CFRetain(Value);
  return v4;
}

const void *ITEpubFolder::copyDocumentInfoFromManifest(ITEpubFolder *this, unsigned int a2)
{
  const __CFArray *v3;
  const void *ValueAtIndex;
  const void *v6;

  v3 = (const __CFArray *)*((_QWORD *)this + 22);
  if (!v3 || CFArrayGetCount(v3) <= a2)
    return 0;
  ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)this + 22), a2);
  v6 = ValueAtIndex;
  if (ValueAtIndex)
    CFRetain(ValueAtIndex);
  return v6;
}

const __CFArray *ITEpubFolder::countDocumentsInReadingOrder(ITEpubFolder *this)
{
  const __CFArray *result;

  result = (const __CFArray *)*((_QWORD *)this + 23);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const void *ITEpubFolder::copyDocumentHrefFromReadingOrder(CFArrayRef *this, unsigned int a2)
{
  const __CFDictionary *ValueAtIndex;
  const __CFString *Value;
  const __CFString *v6;
  const __CFDictionary *v7;
  const void *v8;
  const void *v9;

  if ((*((unsigned int (**)(CFArrayRef *))*this + 7))(this) < a2)
    return 0;
  ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(this[23], a2);
  Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, CFSTR("itemref"));
  if (!Value)
    return 0;
  v6 = Value;
  if (!CFStringGetLength(Value))
    return 0;
  v7 = (const __CFDictionary *)CFDictionaryGetValue(this[20], v6);
  if (!v7)
    return 0;
  v8 = CFDictionaryGetValue(v7, CFSTR("unescaped_href"));
  v9 = v8;
  if (v8)
    CFRetain(v8);
  return v9;
}

CFBooleanRef ITEpubFolder::copyIsLinearFromReadingOrder(ITEpubFolder *this, unsigned int a2)
{
  void *Value;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v6;
  const __CFString *v7;

  Value = kCFBooleanTrue;
  if ((*(unsigned int (**)(ITEpubFolder *))(*(_QWORD *)this + 56))(this) >= a2)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 23), a2);
    Value = (void *)CFDictionaryGetValue(ValueAtIndex, CFSTR("linear"));
    if (objc_msgSend(*((id *)this + 6), "caseInsensitiveCompare:", CFSTR("ja")))
    {
      v6 = (const __CFDictionary *)*((_QWORD *)this + 41);
      if (v6)
      {
        v7 = (const __CFString *)CFDictionaryGetValue(v6, CFSTR("fixed-layout"));
        if (v7)
        {
          if (CFStringCompare(v7, CFSTR("true"), 0) == kCFCompareEqualTo)
            return kCFBooleanTrue;
        }
      }
    }
  }
  return (CFBooleanRef)Value;
}

id ITEpubFolder::copyFirstDocumentHref(ITEpubFolder *this, const __CFString *a2)
{
  id v3;
  const __CFString *v4;
  __CFString *v5;
  void *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  __CFString *Value;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;

  v3 = (id)*((_QWORD *)this + 18);
  v4 = (const __CFString *)*((_QWORD *)this + 25);
  if (v4)
  {
    v5 = (__CFString *)ITEpubXmlParseHandler::copyHrefStrippingHash(v4, a2);
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastPathComponent](v5, "lastPathComponent"));
    v7 = (const __CFDictionary *)(*(uint64_t (**)(ITEpubFolder *, void *))(*(_QWORD *)this + 48))(this, v6);
    v8 = v7;
    if (v7)
      Value = (__CFString *)CFDictionaryGetValue(v7, CFSTR("href"));
    else
      Value = 0;
    v10 = ITEpubFolder::copyMimeFromDocumentHref(this, v5);
    v11 = v10;
    if (Value)
    {
      v12 = ITEpubFolder::copyMimeFromDocumentHref(this, Value);
      v13 = v12;
      if (!v11)
      {
        if (v12)
        {
          v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", *((_QWORD *)this + 25)));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "fragment"));
          v3 = -[__CFString mutableCopy](Value, "mutableCopy");
          if (objc_msgSend(v15, "length"))
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("#%@"), v15));
            objc_msgSend(v3, "appendString:", v16);

          }
          if (v3)
            CFRetain(v3);

          goto LABEL_24;
        }
LABEL_21:
        if (v3)
          CFRetain(v3);
        v13 = 0;
LABEL_24:
        v17 = 1;
        if (!v5)
        {
LABEL_26:
          if (v8)
            CFRelease(v8);
          if (v13)
            CFRelease(v13);
          if ((v17 & 1) == 0)
            CFRelease(v11);

          return v3;
        }
LABEL_25:
        CFRelease(v5);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v10)
        goto LABEL_21;
      v13 = 0;
    }
    v3 = (id)*((_QWORD *)this + 25);
    if (v3)
      CFRetain(*((CFTypeRef *)this + 25));
    v17 = 0;
    if (!v5)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (v3)
    CFRetain(v3);
  return v3;
}

void sub_2EF98(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

const void *ITEpubFolder::copyStartPageHref(ITEpubFolder *this, const __CFString *a2)
{
  const void *v2;
  const __CFString *v4;
  const __CFString *v5;
  const void *v6;

  v2 = (const void *)*((_QWORD *)this + 19);
  if (!v2)
  {
    v4 = (const __CFString *)*((_QWORD *)this + 27);
    if (!v4)
      return 0;
    v5 = ITEpubXmlParseHandler::copyHrefStrippingHash(v4, a2);
    v6 = ITEpubFolder::copyMimeFromDocumentHref(this, v5);
    if (v5)
      CFRelease(v5);
    if (!v6)
      return 0;
    v2 = (const void *)*((_QWORD *)this + 27);
    CFRelease(v6);
    if (!v2)
      return v2;
  }
  CFRetain(v2);
  return v2;
}

uint64_t ITEpubFolder::firstDocumentQuality(ITEpubFolder *this)
{
  const __CFString *v1;
  unsigned int v2;
  const __CFString *v4;
  char v5;

  v1 = (const __CFString *)*((_QWORD *)this + 18);
  if (v1)
  {
    CFRetain(*((CFTypeRef *)this + 18));
    v2 = 0;
LABEL_6:
    CFRelease(v1);
    v5 = 1;
    goto LABEL_7;
  }
  v1 = (const __CFString *)(*(uint64_t (**)(ITEpubFolder *))(*(_QWORD *)this + 80))(this);
  v4 = (const __CFString *)*((_QWORD *)this + 25);
  if (v4 && CFStringCompare(v4, v1, 0) == kCFCompareEqualTo)
  {
    v2 = *((_DWORD *)this + 52);
    if (v1)
      goto LABEL_6;
  }
  else
  {
    v2 = 0;
    if (v1)
      goto LABEL_6;
  }
  v5 = 0;
LABEL_7:
  if (((v2 == 0) & v5) != 0)
    return 10;
  else
    return v2;
}

const void *ITEpubFolder::copyTocPageHref(ITEpubFolder *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 29);
  if (v1 || (v1 = *(const void **)(*((_QWORD *)this + 24) + 512)) != 0)
    CFRetain(v1);
  return v1;
}

uint64_t ITEpubFolder::copyTocTitle(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 30);
  if (v1)
    CFRetain(*((CFTypeRef *)this + 30));
  return v1;
}

uint64_t ITEpubFolder::copyTocCfiToIdMap(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    CFRetain(*((CFTypeRef *)this + 31));
  return v1;
}

const __CFString *ITEpubFolder::copyCoverArtHref(ITEpubFolder *this)
{
  uint64_t v2;
  const __CFString *v3;
  const __CFString *v4;
  const __CFString *v5;
  int HasPrefix;
  const void *v8;
  const __CFDictionary *Value;
  const __CFDictionary *v10;
  const __CFString *v11;
  const __CFString *v12;
  int v13;
  const __CFDictionary *v14;
  const __CFString *v15;
  const __CFString *v16;
  __CFString **v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  const __CFString *v20;
  const __CFString *v21;
  const __CFString *v22;
  const __CFString *v23;
  BOOL v24;
  const __CFString *v25;

  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    v3 = *(const __CFString **)(v2 + 520);
    v4 = (const __CFString *)ITEpubFolder::copyMimeFromDocumentHref(this, v3);
    if (v4)
    {
      v5 = v4;
      HasPrefix = CFStringHasPrefix(v4, CFSTR("image/"));
      CFRelease(v5);
      if (HasPrefix && v3 != 0)
      {
        v22 = 0;
        v23 = v3;
        goto LABEL_31;
      }
    }
    v8 = *(const void **)(*((_QWORD *)this + 24) + 528);
    if (v8)
    {
      Value = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 20), v8);
      if (Value)
      {
        v10 = Value;
        v11 = (const __CFString *)CFDictionaryGetValue(Value, CFSTR("unescaped_href"));
        if (v11)
        {
          v23 = v11;
          v12 = (const __CFString *)CFDictionaryGetValue(v10, CFSTR("media-type"));
          if (v12)
          {
            v13 = CFStringHasPrefix(v12, CFSTR("image/"));
            v22 = v3;
            if (v13)
              goto LABEL_31;
          }
          if (!v3)
            v3 = v23;
        }
      }
    }
  }
  else
  {
    v3 = 0;
  }
  v14 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 20), CFSTR("cover"));
  if (v14 && (v15 = (const __CFString *)CFDictionaryGetValue(v14, CFSTR("unescaped_href"))) != 0)
  {
    v23 = v15;
LABEL_26:
    v22 = v3;
  }
  else
  {
    v23 = 0;
    v16 = CFSTR("COVER");
    v17 = off_3789C0;
    while (1)
    {
      v18 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 20), v16);
      if (v18)
      {
        v19 = v18;
        v23 = (const __CFString *)CFDictionaryGetValue(v18, CFSTR("unescaped_href"));
        if (v23)
        {
          v20 = (const __CFString *)CFDictionaryGetValue(v19, CFSTR("media-type"));
          if (!v20 || !CFStringHasPrefix(v20, CFSTR("image/")))
            break;
        }
      }
      v21 = *v17++;
      v16 = v21;
      if (!v21)
        goto LABEL_26;
    }
    if (v3)
      v22 = v3;
    else
      v22 = v23;
    v23 = 0;
  }
LABEL_31:
  if (v23)
    v24 = 1;
  else
    v24 = v22 == 0;
  if (v24)
    v25 = v23;
  else
    v25 = v22;
  if (v25)
    CFRetain(v25);
  return v25;
}

__CFString *ITEpubFolder::copyRootPath(ITEpubFolder *this)
{
  const char *v2;
  __CFString *MutableCopy;
  __CFString *v4;
  const void *v5;

  if (*((char *)this + 279) < 0)
  {
    if (*((_QWORD *)this + 33))
      goto LABEL_3;
LABEL_7:
    v5 = (const void *)*((_QWORD *)this + 2);
    if (!v5)
      return 0;
    CFRetain(v5);
    return (__CFString *)*((_QWORD *)this + 2);
  }
  if (!*((_BYTE *)this + 279))
    goto LABEL_7;
LABEL_3:
  v2 = (char *)this + 256;
  MutableCopy = CFStringCreateMutableCopy(kCFAllocatorDefault, 0, *((CFStringRef *)this + 2));
  v4 = MutableCopy;
  if (*((char *)this + 279) < 0)
    v2 = *(const char **)v2;
  CFStringAppendCString(MutableCopy, v2, 0x8000100u);
  return v4;
}

CFStringRef ITEpubFolder::copyOPFPath(ITEpubFolder *this)
{
  const char *v1;

  v1 = (char *)this + 280;
  if (*((char *)this + 303) < 0)
    v1 = *(const char **)v1;
  return CFStringCreateWithCString(kCFAllocatorDefault, v1, 0x8000100u);
}

CFStringRef ITEpubFolder::copyNCXPath(ITEpubFolder *this)
{
  const char *v1;

  v1 = (char *)this + 304;
  if (*((char *)this + 327) < 0)
    v1 = *(const char **)v1;
  return CFStringCreateWithCString(kCFAllocatorDefault, v1, 0x8000100u);
}

uint64_t ITEpubFolder::spineIndexInPackage(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(unsigned int *)(v1 + 616);
  else
    return 0xFFFFFFFFLL;
}

uint64_t ITEpubFolder::dcTermsContributor(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 648);
  else
    return 0;
}

uint64_t ITEpubFolder::dcTermsModified(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 632);
  else
    return 0;
}

uint64_t ITEpubFolder::mediaActiveClass(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 640);
  else
    return 0;
}

uint64_t ITEpubFolder::readingDirection(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 416);
  else
    return 0;
}

uint64_t ITEpubFolder::pageProgressionDirection(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 424);
  else
    return 0;
}

uint64_t ITEpubFolder::coverWritingMode(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 432);
  else
    return 0;
}

uint64_t ITEpubFolder::scrollDirection(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 440);
  else
    return 0;
}

uint64_t ITEpubFolder::originalResolution(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 536);
  else
    return 0;
}

uint64_t ITEpubFolder::ebpajGuideVersion(ITEpubFolder *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 24);
  if (v1)
    return *(_QWORD *)(v1 + 544);
  else
    return 0;
}

void ITEpubFolder::countRootfileTags(CFStringRef *this)
{
  char *v1;
  std::string __p;
  void *v3[2];
  uint64_t v4;

  v3[0] = 0;
  v3[1] = 0;
  v4 = 0;
  ITStrUtil::toString(this[2], (uint64_t)v3);
  if (v4 >= 0)
    v1 = (char *)v3;
  else
    v1 = (char *)v3[0];
  sub_2F668(&__p, v1);
  std::string::append(&__p, "META-INF/container.xml");
  operator new();
}

void sub_2F604(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  operator delete();
}

_QWORD *sub_2F668(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_2F718();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_2F718()
{
  sub_7990("basic_string");
}

void sub_30A50(id a1)
{
  __BEPaginationLogsLogsLevelObserver *v1;
  void *v2;

  v1 = objc_alloc_init(__BEPaginationLogsLogsLevelObserver);
  v2 = (void *)qword_3C1B48;
  qword_3C1B48 = (uint64_t)v1;

}

uint64_t __BEPaginationLogsLogLevelEnabled()
{
  return 1;
}

void _BEPaginationLogsSetLogToLevel(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v3 = a2;
  v4 = a1;
  v5 = sub_30D40();
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9 = objc_msgSend(v6, "mutableCopy");

  objc_msgSend(v9, "setObject:forKeyedSubscript:", v3, v4);
  v7 = objc_msgSend(v9, "copy");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[__BEPaginationLogsLogsLevelObserver shared](__BEPaginationLogsLogsLevelObserver, "shared"));
  objc_msgSend(v8, "setLogLevels:", v7);

}

id sub_30D40()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[__BEPaginationLogsLogsLevelObserver shared](__BEPaginationLogsLogsLevelObserver, "shared"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "logLevels"));

  return v1;
}

id _BEPaginationLogsLevelForLog(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v4;

  v1 = a1;
  v2 = sub_30D40();
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v1));

  return v4;
}

void ITEpubManifest::ITEpubManifest(ITEpubManifest *this, const __CFDictionary *a2, const __CFDictionary *a3, const __CFString *a4)
{
  _QWORD *v8;
  const void *v9;

  ITRetain::ITRetain(this);
  *v8 = off_378A50;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a4;
  if (a2)
  {
    CFRetain(a2);
    a3 = (const __CFDictionary *)*((_QWORD *)this + 3);
  }
  if (a3)
    CFRetain(a3);
  v9 = (const void *)*((_QWORD *)this + 4);
  if (v9)
    CFRetain(v9);
}

void sub_30FE4(_Unwind_Exception *a1)
{
  ITRetain *v1;

  ITRetain::~ITRetain(v1);
  _Unwind_Resume(a1);
}

void ITEpubManifest::~ITEpubManifest(ITEpubManifest *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  *(_QWORD *)this = off_378A50;
  v2 = (const void *)*((_QWORD *)this + 2);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 2) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 3);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 3) = 0;
  }
  v4 = (const void *)*((_QWORD *)this + 4);
  if (v4)
  {
    CFRelease(v4);
    *((_QWORD *)this + 4) = 0;
  }
  ITRetain::~ITRetain(this);
}

{
  ITEpubManifest::~ITEpubManifest(this);
  operator delete();
}

const __CFDictionary *ITEpubManifest::countManifestedFiles(ITEpubManifest *this)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)*((_QWORD *)this + 2);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetCount(result);
  return result;
}

CFArrayRef ITEpubManifest::createManifestedArray(CFDictionaryRef *this)
{
  CFIndex Count;
  CFIndex v3;
  const void **v4;
  const void **v5;
  CFArrayRef v6;

  Count = CFDictionaryGetCount(this[2]);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
  if (!v4)
    return 0;
  v5 = v4;
  CFDictionaryGetKeysAndValues(this[2], 0, v4);
  v6 = CFArrayCreate(kCFAllocatorDefault, v5, v3, &kCFTypeArrayCallBacks);
  free(v5);
  return v6;
}

const __CFString *ITEpubManifest::firstPageHref(ITEpubManifest *this, const __CFString *a2)
{
  const __CFString *result;
  CFStringRef v5;
  const void *Value;

  result = (const __CFString *)*((_QWORD *)this + 4);
  if (a2 && !result)
  {
    v5 = ITEpubXmlParseHandler::copyHrefStrippingHash(a2, a2);
    Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 3), v5);
    CFRelease(v5);
    if (Value)
      return a2;
    else
      return 0;
  }
  return result;
}

const __CFString *ITEpubManifest::doesHrefMatchMimePrefix(CFDictionaryRef *this, const __CFString *a2, const __CFString *a3)
{
  const __CFString *result;

  if (!a2)
    return 0;
  result = (const __CFString *)CFDictionaryGetValue(this[3], a2);
  if (result)
    return (const __CFString *)CFStringHasPrefix(result, a3);
  return result;
}

id DragDismissGestureManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

char *PaginationQueue.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  objc_class *v16;
  char *v17;
  _QWORD v19[2];
  uint64_t v20;
  objc_super v21;
  _QWORD *v22;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = OBJC_IVAR____TtC8BookEPUB15PaginationQueue_queue;
  v19[0] = sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v11 = v0;
  static DispatchQoS.userInitiated.getter();
  v22 = _swiftEmptyArrayStorage;
  v12 = sub_34284((unint64_t *)&qword_3B5960, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_319AC((uint64_t *)&unk_3BC520);
  v14 = sub_319EC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v13, v14, v5, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v1);
  v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x80000000002C5C30, v10, v7, v4, 0);
  *(_QWORD *)(v19[1] + v20) = v15;
  if (qword_3B56B8 != -1)
    swift_once(&qword_3B56B8, sub_5EFF4);
  Logger.init(_:)((id)qword_3CEEF8);

  v16 = (objc_class *)type metadata accessor for PaginationQueue(0);
  v21.receiver = v11;
  v21.super_class = v16;
  v17 = (char *)objc_msgSendSuper2(&v21, "init");
  objc_msgSend(v17, "setQualityOfService:", 25);
  objc_msgSend(v17, "setUnderlyingQueue:", *(_QWORD *)&v17[OBJC_IVAR____TtC8BookEPUB15PaginationQueue_queue]);
  objc_msgSend(v17, "setMaxConcurrentOperationCount:", 1);

  return v17;
}

uint64_t sub_319AC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_319EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B5970;
  if (!qword_3B5970)
  {
    v1 = sub_31A38((uint64_t *)&unk_3BC520);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_3B5970);
  }
  return result;
}

uint64_t sub_31A38(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_31A9C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  Swift::String v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  uint64_t v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  Swift::String v18;
  void *v19;
  uint64_t v21;

  v1 = objc_msgSend(v0, "operations");
  v2 = sub_34450(0, &qword_3B5980, NSOperation_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  v4 = v0;
  v5 = sub_33B38(&_swiftEmptyDictionarySingleton, v3);
  swift_bridgeObjectRelease(v3);

  _StringGuts.grow(_:)(51);
  v6._countAndFlagsBits = 60;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7 = objc_msgSend(v4, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._object = (void *)0x80000000002C5C70;
  v12._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v12);
  v13 = objc_msgSend(v4, "operations");
  v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v2);

  if ((unint64_t)v14 >> 62)
  {
    if (v14 < 0)
      v21 = v14;
    else
      v21 = v14 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v14);
    _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v14);
  }
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._object = (void *)0x80000000002C5C90;
  v17._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v17);
  v18._countAndFlagsBits = Dictionary.description.getter(v5, &type metadata for String, &type metadata for Int, &protocol witness table for String);
  v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v19);
  return 0;
}

void sub_31CDC(_QWORD *a1, void **a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t ObjectType;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = *a2;
  v4 = type metadata accessor for PaginationOperation(0);
  v5 = swift_dynamicCastClass(v3, v4);
  if (v5)
  {
    v6 = v5 + OBJC_IVAR____TtC8BookEPUB19PaginationOperation_parameters;
    v7 = *a1;
    if (*(_QWORD *)(*a1 + 16))
    {
      v9 = *(_QWORD *)(v6 + 200);
      v8 = *(_QWORD *)(v6 + 208);
      v10 = v3;
      swift_bridgeObjectRetain(v8);
      v11 = sub_3B8A0(v9, v8);
      if ((v12 & 1) != 0)
      {
        v13 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v11);
        swift_bridgeObjectRelease(v8);
        goto LABEL_10;
      }
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v25 = v3;
    }
    v13 = 0;
LABEL_10:
    if (__OFADD__(v13, 1))
    {
      __break(1u);
    }
    else
    {
      v27 = *(_QWORD *)(v6 + 200);
      v26 = *(_QWORD *)(v6 + 208);
      swift_bridgeObjectRetain(v26);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
      v33 = *a1;
      *a1 = 0x8000000000000000;
      sub_17D498(v13 + 1, v27, v26, isUniquelyReferenced_nonNull_native);
      v29 = *a1;
      *a1 = v33;

      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v29);
    }
    return;
  }
  v14 = v3;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = (_QWORD *)swift_slowAlloc(8, -1);
    v30 = swift_slowAlloc(32, -1);
    v33 = v30;
    *(_DWORD *)v17 = 138412546;
    v31 = (uint64_t)v14;
    v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4);
    *v18 = v14;

    *(_WORD *)(v17 + 12) = 2080;
    ObjectType = swift_getObjectType(v19);
    v21 = _typeName(_:qualified:)(ObjectType, 0);
    v23 = v22;
    v31 = sub_33524(v21, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 14);

    swift_bridgeObjectRelease(v23);
    v24 = sub_319AC(&qword_3B8A70);
    swift_arrayDestroy(v18, 1, v24);
    swift_slowDealloc(v18, -1, -1);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {

  }
}

id PaginationQueue.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PaginationQueue(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

double PaginationQueue.cancelOperationsNotFor(layout:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  void *v3;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint8_t *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *i;
  id v27;
  void *v28;
  uint64_t v29;
  double result;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = &v2[OBJC_IVAR____TtC8BookEPUB15PaginationQueue_log];
  v7 = swift_unknownObjectRetain_n(a1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v32 = v6;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v34 = v11;
    *(_DWORD *)v10 = 136315138;
    ObjectType = swift_getObjectType(a1);
    v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 184))(ObjectType, a2);
    v15 = v14;
    v33 = sub_33524(v13, v14, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v10 + 4);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl(&dword_0, v8, v9, "Cancelling operations not for layout %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(a1, 2);
  }

  v16 = objc_msgSend(v3, "operations");
  v17 = sub_34450(0, &qword_3B5980, NSOperation_ptr);
  v18 = (uint8_t *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

  swift_unknownObjectRetain(a1);
  v19 = v3;
  v20 = (uint64_t)sub_33C68((unint64_t)v18, (uint64_t)v19, a1, (_QWORD *)a2);

  swift_unknownObjectRelease(a1);
  v21 = swift_bridgeObjectRetain_n(v20, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  v24 = (unint64_t)v20 >> 62;
  if (!os_log_type_enabled(v22, v23))
  {

    swift_bridgeObjectRelease_n(v20, 2);
    goto LABEL_9;
  }
  v18 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v18 = 134217984;
  if (v24)
    goto LABEL_23;
  v25 = *(_QWORD *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    swift_bridgeObjectRelease(v20);
    v34 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v18 + 4);
    swift_bridgeObjectRelease(v20);
    _os_log_impl(&dword_0, v22, v23, "Found %ld stale operations. Cancelling", v18, 0xCu);
    swift_slowDealloc(v18, -1, -1);

LABEL_9:
    if (v24)
    {
      if (v20 < 0)
        v29 = v20;
      else
        v29 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v22 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v20);
      if (!v22)
        goto LABEL_21;
    }
    else
    {
      v22 = *(NSObject **)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8));
      if (!v22)
        goto LABEL_21;
    }
    if ((uint64_t)v22 >= 1)
      break;
    __break(1u);
LABEL_23:
    if (v20 < 0)
      v31 = v20;
    else
      v31 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v25 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v20);
  }
  for (i = 0; i != v22; i = ((char *)i + 1))
  {
    if ((v20 & 0xC000000000000001) != 0)
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v20);
    else
      v27 = *(id *)(v20 + 8 * (_QWORD)i + 32);
    v28 = v27;
    objc_msgSend(v27, "cancel", v32);

  }
LABEL_21:
  *(_QWORD *)&result = swift_bridgeObjectRelease(v20).n128_u64[0];
  return result;
}

uint64_t sub_323F4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  id v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  double v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  uint64_t ObjectType;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *a1;
  v7 = type metadata accessor for PaginationOperation(0);
  v8 = swift_dynamicCastClass(v6, v7);
  if (!v8)
  {
    v22 = v6;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v26 = (_QWORD *)swift_slowAlloc(8, -1);
      v35 = swift_slowAlloc(32, -1);
      v36 = (uint64_t)v22;
      v38 = v35;
      *(_DWORD *)v25 = 138412546;
      v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v25 + 4);
      *v26 = v22;

      *(_WORD *)(v25 + 12) = 2080;
      ObjectType = swift_getObjectType(v27);
      v29 = _typeName(_:qualified:)(ObjectType, 0);
      v31 = v30;
      v36 = sub_33524(v29, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v25 + 14);

      swift_bridgeObjectRelease(v31);
      v32 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v26, 1, v32);
      swift_slowDealloc(v26, -1, -1);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {

    }
    return 0;
  }
  v9 = (void *)v8;
  v11 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8BookEPUB19PaginationOperation_parameters + 200);
  v10 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8BookEPUB19PaginationOperation_parameters + 208);
  v12 = swift_getObjectType(a3);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a4 + 184);
  v14 = v6;
  v15 = swift_bridgeObjectRetain(v10);
  v16 = v13(v12, a4, v15);
  if (v11 == v16 && v10 == v17)
  {

    swift_bridgeObjectRelease_n(v10, 2);
    return 0;
  }
  v19 = v17;
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, v16, v17, 0);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)&v21 = swift_bridgeObjectRelease(v19).n128_u64[0];
  if ((v20 & 1) != 0)
  {

    return 0;
  }
  v34 = objc_msgSend(v9, "isCancelled", v21);

  return v34 ^ 1;
}

Swift::Void __swiftcall PaginationQueue.cancelOperationsForWebView(webView:)(WKWebView webView)
{
  char *v1;
  void *v2;
  char *v3;
  objc_class *v4;
  NSObject *v5;
  os_log_type_t v6;
  __objc2_ivar *v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  objc_class *v18;
  id v19;
  uint64_t v20;
  objc_class *v21;
  objc_class *v22;
  NSObject *v23;
  os_log_type_t v24;
  unint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  NSObject *i;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39[2];

  v2 = v1;
  v3 = &v1[OBJC_IVAR____TtC8BookEPUB15PaginationQueue_log];
  v4 = webView.super.super.super.isa;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  v7 = &stru_3AC000;
  if (os_log_type_enabled(v5, v6))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = (unint64_t)v3;
    v9 = swift_slowAlloc(32, -1);
    v39[0] = v9;
    *(_DWORD *)v8 = 136315138;
    v36 = (uint64_t)(v8 + 4);
    v10 = -[objc_class be_identifier](v4, "be_identifier");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v14 = v11;
    v7 = &stru_3AC000;
    v38 = sub_33524(v14, v13, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v8 + 4);

    swift_bridgeObjectRelease(v13);
    _os_log_impl(&dword_0, v5, v6, "Cancelling operations for webView:%s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {

  }
  v15 = objc_msgSend(v2, "operations");
  v16 = sub_34450(0, &qword_3B5980, NSOperation_ptr);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

  v18 = v4;
  v19 = v2;
  v20 = (uint64_t)sub_33E18(v17, (uint64_t)v19, v18);

  v21 = v18;
  swift_bridgeObjectRetain_n(v20, 2);
  v22 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  v25 = (unint64_t)v20 >> 62;
  if (!os_log_type_enabled(v23, v24))
  {

    swift_bridgeObjectRelease_n(v20, 2);
    goto LABEL_9;
  }
  v17 = swift_slowAlloc(22, -1);
  v36 = swift_slowAlloc(32, -1);
  v39[0] = v36;
  *(_DWORD *)v17 = 134218242;
  v37 = (unint64_t)v20 >> 62;
  if (v25)
    goto LABEL_23;
  v26 = *(_QWORD *)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    swift_bridgeObjectRelease(v20);
    v38 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v17 + 4);
    *(_QWORD *)&v27 = swift_bridgeObjectRelease(v20).n128_u64[0];
    *(_WORD *)(v17 + 12) = 2080;
    v7 = (__objc2_ivar *)objc_msgSend(v22, v7[102].type, v27);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v30 = v29;

    v38 = sub_33524(v28, v30, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v17 + 14);

    swift_bridgeObjectRelease(v30);
    _os_log_impl(&dword_0, v23, v24, "Found %ld operations for webView:%s. Cancelling", (uint8_t *)v17, 0x16u);
    v22 = (objc_class *)v36;
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v25 = v37;
LABEL_9:
    if (v25)
    {
      if (v20 < 0)
        v34 = v20;
      else
        v34 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v20);
      v23 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v20);
      if (!v23)
        goto LABEL_21;
    }
    else
    {
      v23 = *(NSObject **)((char *)&dword_10 + (v20 & 0xFFFFFFFFFFFFF8));
      if (!v23)
        goto LABEL_21;
    }
    if ((uint64_t)v23 >= 1)
      break;
    __break(1u);
LABEL_23:
    if (v20 < 0)
      v35 = v20;
    else
      v35 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v26 = _CocoaArrayWrapper.endIndex.getter(v35);
    swift_bridgeObjectRelease(v20);
  }
  for (i = 0; i != v23; i = ((char *)i + 1))
  {
    if ((v20 & 0xC000000000000001) != 0)
      v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v20);
    else
      v32 = *(id *)(v20 + 8 * (_QWORD)i + 32);
    v33 = v32;
    objc_msgSend(v32, "cancel");

  }
LABEL_21:
  swift_bridgeObjectRelease(v20);
}

uint64_t sub_32B68(void **a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  char v11;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  _QWORD *v19;
  uint64_t ObjectType;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *log;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  v5 = type metadata accessor for PaginationOperation(0);
  v6 = swift_dynamicCastClass(v4, v5);
  if (v6)
  {
    v7 = v6;
    sub_34450(0, (unint64_t *)&qword_3B5C30, NSObject_ptr);
    v8 = *(void **)(v7 + OBJC_IVAR____TtC8BookEPUB19PaginationOperation_parameters + 40);
    v9 = v4;
    v10 = v8;
    v11 = static NSObject.== infix(_:_:)(v10, a3);

    return v11 & 1;
  }
  else
  {
    v13 = v4;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      log = v14;
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      v26 = swift_slowAlloc(32, -1);
      v27 = (uint64_t)v13;
      v29 = v26;
      *(_DWORD *)v16 = 138412546;
      v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v16 + 4);
      v19 = v17;
      *v17 = v13;

      *(_WORD *)(v16 + 12) = 2080;
      ObjectType = swift_getObjectType(v18);
      v21 = _typeName(_:qualified:)(ObjectType, 0);
      v23 = v22;
      v27 = sub_33524(v21, v22, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v16 + 14);

      swift_bridgeObjectRelease(v23);
      v14 = log;
      v24 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v19, 1, v24);
      swift_slowDealloc(v19, -1, -1);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {

    }
    return 0;
  }
}

uint64_t type metadata accessor for PaginationQueue(uint64_t a1)
{
  uint64_t result;

  result = qword_3B5A10;
  if (!qword_3B5A10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PaginationQueue);
  return result;
}

uint64_t sub_32E34(uint64_t a1, uint64_t a2)
{
  return sub_33438(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_32E4C(uint64_t a1, uint64_t a2)
{
  return sub_33438(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_32E64(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_32ED8(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_32F54@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

_QWORD *sub_32F98@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void SelectionInfo.id.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void sub_32FB4(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

void sub_32FC0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_32FC8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_32FDC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_32FF0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_3301C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_33040(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_33054@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_33068(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_3307C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_33090(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_330A4()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_330B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_330CC(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_330E0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

BOOL static DocumentEntityID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_33104@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_33118(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_33148(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_3315C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

uint64_t sub_33170(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_331F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_33B00(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_QWORD *sub_33234@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_33240@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_33284@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_332AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_34284((unint64_t *)&qword_3B5C08, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_2E53E8);
  v3 = sub_34284(&qword_3B5C10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_2E50C8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_33330(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_34284(&qword_3B5C90, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoKey, (uint64_t)&unk_2E5650);
  v3 = sub_34284(&qword_3B5C98, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoKey, (uint64_t)&unk_2E55F0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_333B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_34284(&qword_3B5C18, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_2E4FC4);
  v3 = sub_34284((unint64_t *)&unk_3B5C20, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_2E4F64);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_33438(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_33474(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_334B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_33524(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  sub_335F4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_344A8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_344A8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_34488(v12);
  return v7;
}

void sub_335F4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            *a1 = (uint64_t)__dst;
            return;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    sub_337AC(a5, a6);
    *a1 = v12;
    return;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v13) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v13, 1173, 0);
    __break(1u);
    return;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) == 0)
    swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_337AC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_33840(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_339B4(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_339B4(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_33840(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_46510(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_339B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_319AC(&qword_3B6980);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_33B00(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void *sub_33B38(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v13;
  void *v14;

  v3 = v2;
  v5 = a1;
  v14 = a1;
  if ((unint64_t)a2 >> 62)
    goto LABEL_13;
  v6 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a2);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v11))
  {
    for (i = 4; ; ++i)
    {
      v8 = (a2 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a2)
         : *(id *)(a2 + 8 * i);
      v5 = v8;
      v9 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v13 = v8;
      sub_31CDC(&v14, &v13);
      if (v3)
      {
        v10 = v14;
        swift_bridgeObjectRelease(a2);

        swift_bridgeObjectRelease(v10);
        return v5;
      }

      if (v9 == v6)
      {
        swift_bridgeObjectRelease(a2);
        return v14;
      }
    }
    __break(1u);
LABEL_13:
    if (a2 < 0)
      v11 = a2;
    else
      v11 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
  swift_bridgeObjectRelease(a2);
  return v5;
}

_QWORD *sub_33C68(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  _QWORD *v27;

  v8 = a1;
  v27 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v9 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  if (v9)
  {
    while (1)
    {
      v10 = 0;
      v24 = v8 & 0xFFFFFFFFFFFFFF8;
      v25 = v8 & 0xC000000000000001;
      v22 = a2;
      v23 = v8;
      while (v25)
      {
        v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
LABEL_9:
        v12 = v11;
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
          goto LABEL_17;
        v26 = v11;
        v14 = sub_323F4(&v26, a2, a3, (uint64_t)a4);
        if (v4)
        {
          swift_bridgeObjectRelease(v8);

          swift_release();
          return a4;
        }
        if ((v14 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
          v15 = v9;
          v16 = a3;
          v17 = v27[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a3 = v16;
          v9 = v15;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v12);
          specialized ContiguousArray._endMutation()(v19);
          a2 = v22;
          v8 = v23;
        }
        else
        {

        }
        ++v10;
        if (v13 == v9)
        {
          a4 = v27;
          goto LABEL_23;
        }
      }
      if (v10 < *(_QWORD *)(v24 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v8 < 0)
        v20 = v8;
      else
        v20 = v8 & 0xFFFFFFFFFFFFFF8;
      v9 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v9)
        goto LABEL_22;
    }
    v11 = *(id *)(v8 + 8 * v10 + 32);
    goto LABEL_9;
  }
LABEL_22:
  a4 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v8);
  return a4;
}

_QWORD *sub_33E18(unint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;

  v6 = a1;
  v24 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v9 = v6 & 0xC000000000000001;
      v21 = v6;
      v22 = v6 & 0xFFFFFFFFFFFFFF8;
      v20 = v7;
      while (v9)
      {
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
LABEL_9:
        v11 = v10;
        v12 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v23 = v10;
        v13 = sub_32B68(&v23, a2, (uint64_t)a3);
        if (v3)
        {
          swift_bridgeObjectRelease(v6);

          swift_release();
          return a3;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          v14 = v9;
          v15 = v24[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
          v16 = v15;
          v9 = v14;
          v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v11);
          specialized ContiguousArray._endMutation()(v17);
          v7 = v20;
          v6 = v21;
        }
        else
        {

        }
        ++v8;
        if (v12 == v7)
        {
          a3 = v24;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v22 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v6 < 0)
        v18 = v6;
      else
        v18 = v6 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v18);
      if (!v7)
        goto LABEL_22;
    }
    v10 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  a3 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v6);
  return a3;
}

uint64_t sub_33FBC()
{
  return type metadata accessor for PaginationQueue(0);
}

uint64_t sub_33FC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PaginationQueue(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PaginationQueue);
}

uint64_t initializeBufferWithCopyOfBuffer for BookContentSelection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for CFIRange(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for LocationHistoryConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LocationHistoryConfiguration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B40, (uint64_t)&unk_37A278);
}

void type metadata accessor for TouchType(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B48, (uint64_t)&unk_37A2A8);
}

void type metadata accessor for BEContentLayoutInfoOptions(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B50, (uint64_t)&unk_37A2C8);
}

void type metadata accessor for NavigationDirection(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B58, (uint64_t)&unk_37A2F0);
}

void type metadata accessor for BEImageFilterMode(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B60, (uint64_t)&unk_37A310);
}

void type metadata accessor for BookContentPreferredFontWeight(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B68, (uint64_t)&unk_37A330);
}

void type metadata accessor for BookContentLayoutJustification(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B70, (uint64_t)&unk_37A350);
}

void type metadata accessor for QueuePriority(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B78, (uint64_t)&unk_37A370);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B80, (uint64_t)&unk_37A390);
}

__n128 initializeBufferWithCopyOfBuffer for PageLocation(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PageLocation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PageLocation(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B88, (uint64_t)&unk_37A410);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B90, (uint64_t)&unk_37A438);
}

void type metadata accessor for BookLayoutMode(uint64_t a1)
{
  sub_34574(a1, &qword_3B5B98, (uint64_t)&unk_37A460);
}

void type metadata accessor for BEContentBlockingRule(uint64_t a1)
{
  sub_34574(a1, &qword_3B5BA0, (uint64_t)&unk_37A480);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_34574(a1, &qword_3B5BA8, (uint64_t)&unk_37A4F8);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_34574(a1, &qword_3B5BB0, (uint64_t)&unk_37A578);
}

uint64_t sub_34258()
{
  return sub_34284(&qword_3B5BB8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_2E4F28);
}

uint64_t sub_34284(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_342C4()
{
  return sub_34284(&qword_3B5BC0, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_2E4EFC);
}

uint64_t sub_342F0()
{
  return sub_34284(&qword_3B5BC8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_2E4F98);
}

uint64_t sub_3431C()
{
  return sub_34284(&qword_3B5BD0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_2E508C);
}

uint64_t sub_34348()
{
  return sub_34284(&qword_3B5BD8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_2E5060);
}

uint64_t sub_34374()
{
  return sub_34284(&qword_3B5BE0, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoOptions, (uint64_t)&unk_2E5210);
}

uint64_t sub_343A0()
{
  return sub_34284(&qword_3B5BE8, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoOptions, (uint64_t)&unk_2E51DC);
}

uint64_t sub_343CC()
{
  return sub_34284(&qword_3B5BF0, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoOptions, (uint64_t)&unk_2E523C);
}

uint64_t sub_343F8()
{
  return sub_34284(&qword_3B5BF8, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoOptions, (uint64_t)&unk_2E5278);
}

uint64_t sub_34424()
{
  return sub_34284(&qword_3B5C00, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_2E50FC);
}

uint64_t sub_34450(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_34488(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_344A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_34574(a1, &qword_3B5C40, (uint64_t)&unk_37A5A0);
}

void type metadata accessor for BEWebViewFactoryPaginationMode(uint64_t a1)
{
  sub_34574(a1, &qword_3B5C48, (uint64_t)&unk_37A5C8);
}

void type metadata accessor for BEContentLayoutInfoKey(uint64_t a1)
{
  sub_34574(a1, &qword_3B5C50, (uint64_t)&unk_37A5E8);
}

void type metadata accessor for BE_WKPaginationMode(uint64_t a1)
{
  sub_34574(a1, &qword_3B5C58, (uint64_t)&unk_37A610);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_34574(a1, &qword_3B5C60, (uint64_t)&unk_37A630);
}

void type metadata accessor for BEWKFontRegistrationResult(uint64_t a1)
{
  sub_34574(a1, &qword_3B5C68, (uint64_t)&unk_37A660);
}

void type metadata accessor for ContentMode(uint64_t a1)
{
  sub_34574(a1, &qword_3B5C70, (uint64_t)&unk_37A688);
}

void sub_34574(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_345B8()
{
  return sub_34284(&qword_3B5C78, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoKey, (uint64_t)&unk_2E55B4);
}

uint64_t sub_345E4()
{
  return sub_34284(&qword_3B5C80, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoKey, (uint64_t)&unk_2E5588);
}

uint64_t sub_34610()
{
  return sub_34284(&qword_3B5C88, (uint64_t (*)(uint64_t))type metadata accessor for BEContentLayoutInfoKey, (uint64_t)&unk_2E5624);
}

void ReadingLoupeVisibilityState.id.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *BookContentSelection.type.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*ReadingSettingsModuleFactory.ViewConfig.eventHandler.modify())()
{
  return address(of:);
}

uint64_t SpreadPaginationEntity.configuration.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t SelectionInfo.cfi.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*SearchResultLayoutManager.Configuration.maximumLines.modify())()
{
  return address(of:);
}

uint64_t _AnnotationProvidingOverlap.containingAnnotation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t _AnnotationProvidingOverlap.containingAnnotation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

uint64_t (*_AnnotationProvidingOverlap.containingAnnotation.modify())()
{
  return address(of:);
}

uint64_t BookPaginationEntity.documents.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
}

uint64_t BookContentSelection.selectionRects.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  *(_QWORD *)(v1 + 40) = a1;
  return result;
}

uint64_t (*ReadingSettingsModuleFactory.ViewConfig.viewModel.modify())()
{
  return address(of:);
}

uint64_t BookEntity.sessionID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t BookContentSelection.contextText.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 56));
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return result;
}

uint64_t (*ReadingSettingsModuleFactory.ViewConfig.usePopoverHeader.modify())()
{
  return address(of:);
}

uint64_t BookContentSelection.extendedCFI.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
  return v1;
}

uint64_t BookContentSelection.extendedCFI.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 72));
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  return result;
}

uint64_t (*ContentLoaderDocument.ordinal.modify())()
{
  return address(of:);
}

uint64_t BookContentSelection.intersectingHighlightIDs.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
}

uint64_t BookContentSelection.intersectingHighlightIDs.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 80));
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*ContentLoaderDocument.pageCount.modify())()
{
  return address(of:);
}

uint64_t BookContentSelection.containingHighlightID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
  return v1;
}

uint64_t BookContentSelection.containingHighlightID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 96));
  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = a2;
  return result;
}

uint64_t (*ContentLoaderDocument.protocolCacheItem.modify())()
{
  return address(of:);
}

void PageTransitionCompletionState.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL static PageTransitionCompletionState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int PageTransitionCompletionState.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_349DC(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL BookContentSelection.isAnnotation.getter()
{
  unsigned __int8 *v0;

  return *v0 > 1u;
}

BOOL BookContentSelection.isText.getter()
{
  unsigned __int8 *v0;

  return *v0 < 2u;
}

BOOL sub_34A40(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BOOL8 result;
  char v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v8 = a1[4];
  v7 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v34 = a1[9];
  v30 = (_QWORD *)a1[10];
  v28 = a1[12];
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = a2[4];
  v16 = a2[5];
  v15 = a2[6];
  v17 = a2[7];
  v31 = a2[8];
  v32 = a1[8];
  v33 = a2[9];
  v29 = (_QWORD *)a2[10];
  v25 = a2[11];
  v26 = a1[11];
  v27 = a2[12];
  if (v4 == v11 && v5 == v12
    || (v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v11, v12, 0), result = 0, (v18 & 1) != 0))
  {
    if (v8)
    {
      if (!v14)
        return 0;
      if (v6 != v13 || v8 != v14)
      {
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v13, v14, 0);
        result = 0;
        if ((v20 & 1) == 0)
          return result;
      }
    }
    else if (v14)
    {
      return 0;
    }
    if (v7)
    {
      if (!v16)
        return 0;
      swift_bridgeObjectRetain(v16);
      v21 = swift_bridgeObjectRetain(v7);
      v22 = sub_65864(v21, v16);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v16);
      if (!v22)
        return 0;
    }
    else if (v16)
    {
      return 0;
    }
    if (v10)
    {
      if (!v17)
        return 0;
      if (v9 != v15 || v10 != v17)
      {
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v15, v17, 0);
        result = 0;
        if ((v23 & 1) == 0)
          return result;
      }
    }
    else if (v17)
    {
      return 0;
    }
    if (v34)
    {
      if (!v33)
        return 0;
      if (v32 != v31 || v34 != v33)
      {
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v31, v33, 0);
        result = 0;
        if ((v24 & 1) == 0)
          return result;
      }
    }
    else if (v33)
    {
      return 0;
    }
    if ((sub_657A0(v30, v29) & 1) != 0)
    {
      if (v28)
        return v27
            && (v26 == v25 && v28 == v27
             || (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v25, v27, 0) & 1) != 0);
      if (!v27)
        return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_34C84()
{
  unint64_t result;

  result = qword_3B5CA0;
  if (!qword_3B5CA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookContentSelection.SelectionType, &type metadata for BookContentSelection.SelectionType);
    atomic_store(result, (unint64_t *)&qword_3B5CA0);
  }
  return result;
}

uint64_t destroy for BookContentSelection(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for BookContentSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v6 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v5;
  v8 = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v7;
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v10;
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v11;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for BookContentSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

__n128 initializeWithTake for BookContentSelection(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for BookContentSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v9 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookContentSelection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BookContentSelection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookContentSelection()
{
  return &type metadata for BookContentSelection;
}

_BYTE *initializeBufferWithCopyOfBuffer for BookContentSelection.SelectionType(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BookContentSelection.SelectionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BookContentSelection.SelectionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_35120 + 4 * byte_2E5725[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_35154 + 4 * byte_2E5720[v4]))();
}

uint64_t sub_35154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3515C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x35164);
  return result;
}

uint64_t sub_35170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x35178);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_3517C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_35184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_35190(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_35198(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BookContentSelection.SelectionType()
{
  return &type metadata for BookContentSelection.SelectionType;
}

uint64_t AnnotationStyle.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_351E0 + 4 * byte_2E5820[a1]))(0x776F6C6C6579, 0xE600000000000000);
}

uint64_t sub_351E0()
{
  return 0x6E65657267;
}

uint64_t sub_351F4()
{
  return 1702194274;
}

uint64_t sub_35204()
{
  return 1802398064;
}

uint64_t sub_35214()
{
  return 0x656C70727570;
}

uint64_t sub_35224()
{
  return 0x6E696C7265646E75;
}

void AnnotationStyle.accessibilityDescription.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_3526C()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v0 = BookEPUBBundle();
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

void AnnotationStyle.accessibilityAdditionalUserInputLabelsForNotes.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_353FC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_319AC(&qword_3BBEB0);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_2E5F80;
  v2 = BookEPUBBundle();
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, v4, 0);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  *(_QWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 40) = v8;
  return v1;
}

void sub_35700()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_319AC(&qword_3BBEB0);
  v1 = swift_allocObject(v0, 64, 7);
  *(_OWORD *)(v1 + 16) = xmmword_2E5F70;
  v2 = BookEPUBBundle();
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, v4, 0);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  *(_QWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 40) = v8;
  v9 = BookEPUBBundle();
  v10 = String._bridgeToObjectiveC()();
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "localizedStringForKey:value:table:", v10, v11, 0);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)(v1 + 48) = v13;
  *(_QWORD *)(v1 + 56) = v15;
  JUMPOUT(0x356E8);
}

void AnnotationStyle.color.getter(char a1)
{
  __asm { BR              X10 }
}

id sub_35884()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "yellowColor");
}

id sub_358A8()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "greenColor");
}

id sub_358CC()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "blueColor");
}

id sub_358F0()
{
  return objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 0.31372549, 1.0, 1.0);
}

id sub_35920()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "purpleColor");
}

id sub_35944()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "blackColor");
}

_UNKNOWN **static AnnotationStyle.allCases.getter()
{
  return &off_378B28;
}

void sub_35990(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_359DC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_35A54 + 4 * byte_2E582C[a1]))(0x6E65657267);
}

uint64_t sub_35A54(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E65657267 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6E65657267, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

void sub_35B20()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_35B68()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E65657267, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_35BF0()
{
  __asm { BR              X10 }
}

uint64_t sub_35C28(uint64_t a1)
{
  String.hash(into:)(a1, 0x6E65657267, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_35C9C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_35CE0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6E65657267, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

unint64_t sub_35D68@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8BookEPUB15AnnotationStyleO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_35D94()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_35DC0 + 4 * byte_2E5844[*v0]))();
}

void sub_35DC0(_QWORD *a1@<X8>)
{
  *a1 = 0x6E65657267;
  a1[1] = 0xE500000000000000;
}

void sub_35DD8(_QWORD *a1@<X8>)
{
  *a1 = 1702194274;
  a1[1] = 0xE400000000000000;
}

void sub_35DEC(_QWORD *a1@<X8>)
{
  *a1 = 1802398064;
  a1[1] = 0xE400000000000000;
}

void sub_35E00(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x656C70727570;
  a1[1] = v1;
}

void sub_35E14(_QWORD *a1@<X8>)
{
  *a1 = 0x6E696C7265646E75;
  a1[1] = 0xE900000000000065;
}

void sub_35E34(_QWORD *a1@<X8>)
{
  *a1 = &off_378B28;
}

uint64_t PaginationLayoutConfiguration.layoutMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_35E4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = *a1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, v3, v4);
}

uint64_t sub_35EB4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE v11[24];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *a2 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  swift_beginAccess(v8, v11, 33, 0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 40))(v8, v7, v4);
  return swift_endAccess(v11);
}

uint64_t sub_35F78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_35FDC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = v4[1];
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_36044()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_36098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*sub_360F4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_3613C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  __n128 v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  void *object;
  _QWORD v27[2];
  _BYTE v28[24];
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v31 = v29;
  v32 = v30;
  v6._object = (void *)0x80000000002C5FC0;
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v6);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 0x636F6C202020200ALL;
  v10._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v10);
  v11 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(v11, &v29, 0, 0);
  v12 = *v11;
  v13 = (void *)v11[1];
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0x646F6D202020200ALL;
  v15._object = (void *)0xEE00203A65746144;
  String.append(_:)(v15);
  v16 = v1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v17 = swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate, v28, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, v16, v2, v17);
  v18 = sub_3CB68();
  v19 = dispatch thunk of CustomStringConvertible.description.getter(v2, v18);
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 0x64726F202020200ALL;
  v23._object = (void *)0xEE00203A6C616E69;
  String.append(_:)(v23);
  v27[1] = *(_QWORD *)(v1 + 32);
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(object);
  return v31;
}

_QWORD *AnnotationEntity.__allocating_init(uniqueID:documentOrdinal:location:modificationDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;

  v13 = (_QWORD *)swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  v14 = (char *)v13 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v15 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v14, a6, v15);
  v16 = (_QWORD *)((char *)v13 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  *v16 = a4;
  v16[1] = a5;
  return v13;
}

_QWORD *AnnotationEntity.init(uniqueID:documentOrdinal:location:modificationDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  char *v10;
  uint64_t v11;
  _QWORD *v12;

  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  v10 = (char *)v6 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a6, v11);
  v12 = (_QWORD *)((char *)v6 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  *v12 = a4;
  v12[1] = a5;
  return v6;
}

uint64_t sub_3648C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[24];

  v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location, v9, 0, 0);
  v4 = *v2;
  v3 = v2[1];
  v5 = (_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(v5, &v8, 1, 0);
  v6 = v5[1];
  *v5 = v4;
  v5[1] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRelease(v6);
}

uint64_t AnnotationEntity.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location + 8));
  return v0;
}

uint64_t AnnotationEntity.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_365D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))();
}

uint64_t sub_36600@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E58B0);
  v5 = swift_getKeyPath(&unk_2E58D8);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_3667C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E58B0);
  v5 = swift_getKeyPath(&unk_2E58D8);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_366EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2E58B0);
  v2 = swift_getKeyPath(&unk_2E58D8);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_3675C()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style, &qword_3B5CB8);
}

uint64_t sub_36770@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E58F8);
  v5 = swift_getKeyPath(&unk_2E5920);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_367EC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v7;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E58F8);
  v5 = swift_getKeyPath(&unk_2E5920);
  v7 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v7, v3, KeyPath, v5);
}

uint64_t sub_3685C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2E58F8);
  v2 = swift_getKeyPath(&unk_2E5920);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

uint64_t sub_368CC()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText, (uint64_t *)&unk_3B8E70);
}

void sub_368E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t KeyPath;
  uint64_t v7;
  _QWORD v8[2];

  v1 = v0;
  v2 = sub_3613C();
  v4 = v3;
  v8[0] = v2;
  v8[1] = v3;
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = 0x6C79747320202020;
  v5._object = (void *)0xEB00000000203A65;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  KeyPath = swift_getKeyPath(&unk_2E58B0);
  v7 = swift_getKeyPath(&unk_2E58D8);
  static Published.subscript.getter(v8, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v7);
  __asm { BR              X10 }
}

unint64_t sub_369B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  Swift::String v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  char v15;
  unint64_t v16;
  unint64_t v17;

  swift_bridgeObjectRetain(v1);
  v4._countAndFlagsBits = 0x6E65657267;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(0xE000000000000000);
  v16 = 0xD000000000000011;
  v17 = 0x80000000002C5FE0;
  KeyPath = swift_getKeyPath(&unk_2E58F8);
  v6 = swift_getKeyPath(&unk_2E5920);
  static Published.subscript.getter(&v15, v0, KeyPath, v6);
  swift_release(KeyPath);
  swift_release(v6);
  if (v15)
    v7 = v2 + 1554;
  else
    v7 = 0x65736C6166;
  if (v15)
    v8 = 0xE400000000000000;
  else
    v8 = 0xE500000000000000;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 10;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11 = v16;
  v12 = (void *)v17;
  v16 = v3;
  v17 = v1;
  swift_bridgeObjectRetain(v1);
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v12);
  return v16;
}

_QWORD *HighlightAnnotationEntity.__allocating_init(uniqueID:documentOrdinal:location:modificationDate:style:hasNoteText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;
  _QWORD *v17;
  _QWORD *v18;

  v17 = (_QWORD *)swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v18 = sub_3CBC0(a1, a2, a3, a4, a5, a6, a7, a8, v17);
  swift_release(v17);
  return v18;
}

_QWORD *HighlightAnnotationEntity.init(uniqueID:documentOrdinal:location:modificationDate:style:hasNoteText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;

  v9 = sub_3CBC0(a1, a2, a3, a4, a5, a6, a7, a8, v11);
  swift_release(v8);
  return v9;
}

uint64_t sub_36C40(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  _BYTE v18[24];

  v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location, v18, 0, 0);
  v5 = *v3;
  v4 = v3[1];
  v6 = (_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location, (char *)v17 + 1, 1, 0);
  v7 = v6[1];
  *v6 = v5;
  v6[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v7);
  KeyPath = swift_getKeyPath(&unk_2E58B0);
  v9 = swift_getKeyPath(&unk_2E58D8);
  static Published.subscript.getter(v17, a1, KeyPath, v9);
  swift_release(KeyPath);
  swift_release(v9);
  LOBYTE(v9) = v17[0];
  v10 = swift_getKeyPath(&unk_2E58B0);
  v11 = swift_getKeyPath(&unk_2E58D8);
  LOBYTE(v17[0]) = v9;
  swift_retain(v1);
  static Published.subscript.setter(v17, v1, v10, v11);
  v12 = swift_getKeyPath(&unk_2E58F8);
  v13 = swift_getKeyPath(&unk_2E5920);
  static Published.subscript.getter(v17, a1, v12, v13);
  swift_release(v12);
  swift_release(v13);
  LOBYTE(v12) = v17[0];
  v14 = swift_getKeyPath(&unk_2E58F8);
  v15 = swift_getKeyPath(&unk_2E5920);
  LOBYTE(v17[0]) = v12;
  swift_retain(v1);
  return static Published.subscript.setter(v17, v1, v14, v15);
}

void HighlightAnnotationEntity.init(uniqueID:documentOrdinal:location:modificationDate:)()
{
  _swift_stdlib_reportUnimplementedInitializer("BookEPUB.HighlightAnnotationEntity", 34, "init(uniqueID:documentOrdinal:location:modificationDate:)", 57, 0);
  __break(1u);
}

uint64_t sub_36E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style;
  v2 = sub_319AC(&qword_3B5CB8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText;
  v4 = sub_319AC((uint64_t *)&unk_3B8E70);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
}

uint64_t HighlightAnnotationEntity.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location + 8));
  v3 = v0 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style;
  v4 = sub_319AC(&qword_3B5CB8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText;
  v6 = sub_319AC((uint64_t *)&unk_3B8E70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t HighlightAnnotationEntity.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location + 8));
  v3 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style;
  v4 = sub_319AC(&qword_3B5CB8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText;
  v6 = sub_319AC((uint64_t *)&unk_3B8E70);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_36FF0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_370A4(a1, (uint64_t)&unk_2E5940, (uint64_t)&unk_2E5968, a2);
}

uint64_t sub_37004(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_37130(a1, a2, a3, a4, (uint64_t)&unk_2E5940, (uint64_t)&unk_2E5968);
}

uint64_t sub_37018()
{
  return sub_371C0((uint64_t)&unk_2E5940, (uint64_t)&unk_2E5968);
}

uint64_t sub_3702C()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__selectedText, &qword_3B5CD0);
}

uint64_t sub_37040@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_370A4(a1, (uint64_t)&unk_2E5988, (uint64_t)&unk_2E59B0, a2);
}

uint64_t sub_37054(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_37130(a1, a2, a3, a4, (uint64_t)&unk_2E5988, (uint64_t)&unk_2E59B0);
}

uint64_t sub_37068()
{
  return sub_371C0((uint64_t)&unk_2E5988, (uint64_t)&unk_2E59B0);
}

uint64_t sub_3707C()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__representativeText, &qword_3B5CD0);
}

uint64_t sub_37090@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_370A4(a1, (uint64_t)&unk_2E59D0, (uint64_t)&unk_2E59F8, a2);
}

uint64_t sub_370A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[2];

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(v11, v6, KeyPath, v8);
  swift_release(KeyPath);
  result = swift_release(v8);
  v10 = v11[1];
  *a4 = v11[0];
  a4[1] = v10;
  return result;
}

uint64_t sub_3711C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_37130(a1, a2, a3, a4, (uint64_t)&unk_2E59D0, (uint64_t)&unk_2E59F8);
}

uint64_t sub_37130(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  _QWORD v13[2];

  v8 = *a1;
  v7 = a1[1];
  v9 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v11 = swift_getKeyPath(a6);
  v13[0] = v8;
  v13[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  return static Published.subscript.setter(v13, v9, KeyPath, v11);
}

uint64_t sub_371AC()
{
  return sub_371C0((uint64_t)&unk_2E59D0, (uint64_t)&unk_2E59F8);
}

uint64_t sub_371C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_37228()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__noteText, &qword_3B5CD0);
}

_QWORD *HighlightAnnotationDetailEntity.__allocating_init(uniqueID:documentOrdinal:location:style:creationDate:modificationDate:selectedText:representativeText:noteText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14)
{
  uint64_t v14;
  char *v22;
  _QWORD *v23;

  v22 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v23 = sub_3CD0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, v22);
  swift_release(v22);
  return v23;
}

_QWORD *HighlightAnnotationDetailEntity.init(uniqueID:documentOrdinal:location:style:creationDate:modificationDate:selectedText:representativeText:noteText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13)
{
  uint64_t v13;
  _QWORD *v14;
  unint64_t v16;
  char *v17;

  v14 = sub_3CD0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, v16, v17);
  swift_release(v13);
  return v14;
}

BOOL sub_37354()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;

  KeyPath = swift_getKeyPath(&unk_2E59D0);
  v2 = swift_getKeyPath(&unk_2E59F8);
  static Published.subscript.getter(&v7, v0, KeyPath, v2);
  swift_release(KeyPath);
  swift_release(v2);
  v4 = v7;
  v3 = v8;
  swift_bridgeObjectRelease(v8);
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v4 & 0xFFFFFFFFFFFFLL;
  return v5 != 0;
}

void HighlightAnnotationDetailEntity.init(uniqueID:documentOrdinal:location:modificationDate:style:hasNoteText:)()
{
  _swift_stdlib_reportUnimplementedInitializer("BookEPUB.HighlightAnnotationDetailEntity", 40, "init(uniqueID:documentOrdinal:location:modificationDate:style:hasNoteText:)", 75, 0);
  __break(1u);
}

uint64_t sub_37410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity_creationDate;
  v2 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__selectedText;
  v4 = sub_319AC(&qword_3B5CD0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(v3, v4);
  v6(v0 + OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__representativeText, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(v0 + OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__noteText, v4);
}

uint64_t HighlightAnnotationDetailEntity.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v2 = type metadata accessor for Date(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location + 8));
  v4 = v0 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style;
  v5 = sub_319AC(&qword_3B5CB8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = v0 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText;
  v7 = sub_319AC((uint64_t *)&unk_3B8E70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v3(v0 + OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity_creationDate, v2);
  v8 = v0 + OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__selectedText;
  v9 = sub_319AC(&qword_3B5CD0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v0 + OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__representativeText, v9);
  v10(v0 + OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__noteText, v9);
  return v0;
}

uint64_t HighlightAnnotationDetailEntity.__deallocating_deinit()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t);
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);

  swift_bridgeObjectRelease(*((_QWORD *)v0 + 3));
  v1 = &v0[OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate];
  v2 = type metadata accessor for Date(0);
  v3 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location + 8]);
  v4 = &v0[OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style];
  v5 = sub_319AC(&qword_3B5CB8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = &v0[OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText];
  v7 = sub_319AC((uint64_t *)&unk_3B8E70);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v3(&v0[OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity_creationDate], v2);
  v8 = &v0[OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__selectedText];
  v9 = sub_319AC(&qword_3B5CD0);
  v10 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(&v0[OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__representativeText], v9);
  v10(&v0[OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__noteText], v9);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t PaginationLayoutConfiguration.columnCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_37738@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_39F48(a1, (uint64_t)&unk_2E5A18, (uint64_t)&unk_2E5A40, a2);
}

uint64_t sub_3774C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_39FD4(a1, a2, a3, a4, (uint64_t)&unk_2E5A18, (uint64_t)&unk_2E5A40);
}

uint64_t sub_37760()
{
  return sub_3A05C((uint64_t)&unk_2E5A18, (uint64_t)&unk_2E5A40);
}

uint64_t sub_37774(uint64_t a1)
{
  return sub_3A0D8(a1, (uint64_t)&unk_2E5A18, (uint64_t)&unk_2E5A40);
}

uint64_t (*sub_37788(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2E5A18);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2E5A40);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

uint64_t sub_37804()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__bookmarks, &qword_3B5CF0);
}

uint64_t sub_37818(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3B5CF8, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__bookmarks, &qword_3B5CF0);
}

void (*sub_37834(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3B5CF8);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__bookmarks;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3B5CF0);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

uint64_t sub_37900@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_39F48(a1, (uint64_t)&unk_2E5A60, (uint64_t)&unk_2E5A88, a2);
}

uint64_t sub_37914(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_39FD4(a1, a2, a3, a4, (uint64_t)&unk_2E5A60, (uint64_t)&unk_2E5A88);
}

uint64_t sub_37928()
{
  return sub_3A05C((uint64_t)&unk_2E5A60, (uint64_t)&unk_2E5A88);
}

uint64_t sub_3793C(uint64_t a1)
{
  return sub_3A0D8(a1, (uint64_t)&unk_2E5A60, (uint64_t)&unk_2E5A88);
}

uint64_t (*sub_37950(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2E5A60);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2E5A88);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

uint64_t sub_379C8()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__highlights, &qword_3B5D08);
}

uint64_t sub_379DC(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3B5D10, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__highlights, &qword_3B5D08);
}

void (*sub_379F8(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3B5D10);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__highlights;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3B5D08);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

uint64_t sub_37AC0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_39F48(a1, (uint64_t)&unk_2E5AA8, (uint64_t)&unk_2E5AD0, a2);
}

uint64_t sub_37AD4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_39FD4(a1, a2, a3, a4, (uint64_t)&unk_2E5AA8, (uint64_t)&unk_2E5AD0);
}

uint64_t sub_37AE8()
{
  return sub_3A05C((uint64_t)&unk_2E5AA8, (uint64_t)&unk_2E5AD0);
}

uint64_t sub_37AFC(uint64_t a1)
{
  return sub_3A0D8(a1, (uint64_t)&unk_2E5AA8, (uint64_t)&unk_2E5AD0);
}

uint64_t (*sub_37B10(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2E5AA8);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2E5AD0);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

uint64_t sub_37B88()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__serializedUpgradeAnnotations, &qword_3B5D20);
}

uint64_t sub_37B9C(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3B5D28, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__serializedUpgradeAnnotations, &qword_3B5D20);
}

void (*sub_37BB8(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3B5D28);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__serializedUpgradeAnnotations;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3B5D20);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

uint64_t DocumentAnnotationsEntity.__allocating_init(documentOrdinal:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  DocumentAnnotationsEntity.init(documentOrdinal:)(a1);
  return v3;
}

uint64_t DocumentAnnotationsEntity.init(documentOrdinal:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  _BYTE v10[24];

  *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity_cancellables) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v1 + 16) = a1;
  v2 = sub_381B4((uint64_t)_swiftEmptyArrayStorage, &qword_3B66E0);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__bookmarks, v10, 33, 0);
  v9 = v2;
  v3 = sub_319AC(&qword_3B5D30);
  Published.init(initialValue:)(&v9, v3);
  swift_endAccess(v10);
  v4 = sub_381B4((uint64_t)_swiftEmptyArrayStorage, &qword_3B66D0);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__highlights, v10, 33, 0);
  v9 = v4;
  v5 = sub_319AC(&qword_3B5D38);
  Published.init(initialValue:)(&v9, v5);
  swift_endAccess(v10);
  v6 = sub_3900C((uint64_t)_swiftEmptyArrayStorage, &qword_3B66D8);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__serializedUpgradeAnnotations, v10, 33, 0);
  v9 = v6;
  v7 = sub_319AC(&qword_3B5D40);
  Published.init(initialValue:)(&v9, v7);
  swift_endAccess(v10);
  return v1;
}

unint64_t sub_37E1C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  void *v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(&qword_3B6620);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 40);
  while (1)
  {
    v6 = *v5;
    v7 = *(v5 - 1);
    v8 = v6;
    result = sub_3B904((uint64_t)v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = 8 * result;
    *(_QWORD *)(v3[6] + v11) = v7;
    *(_QWORD *)(v3[7] + v11) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_37F24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(&qword_3B66B8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_3F238(v7, (uint64_t)&v16, &qword_3B66C0);
    v8 = v16;
    v9 = v17;
    result = sub_3B8A0(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_3F180(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_38058(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(&qword_3B6688);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_3F238(v7, (uint64_t)&v14, &qword_3B6690);
    v8 = v14;
    result = sub_3B904(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_3F180(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_38184(uint64_t a1)
{
  return sub_381B4(a1, &qword_3BBE90);
}

unint64_t sub_38190(uint64_t a1)
{
  return sub_381B4(a1, &qword_3B6600);
}

unint64_t sub_3819C(uint64_t a1)
{
  return sub_381B4(a1, (uint64_t *)&unk_3BBE80);
}

unint64_t sub_381A8(uint64_t a1)
{
  return sub_381B4(a1, &qword_3B65F8);
}

unint64_t sub_381B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    result = sub_3B8A0(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_382C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  _OWORD *v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC((uint64_t *)&unk_3BBEC0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v26 = v3 + 64;
  swift_retain();
  v25 = v1;
  v6 = (uint64_t *)(v1 + 64);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v9 = *(v6 - 1);
    v10 = *v6;
    v11 = v6[1];
    v12 = v6[2];
    v13 = v6[3];
    v15 = v6[4];
    v14 = v6[5];
    v16 = v6[7];
    v27 = v6[6];
    *(_QWORD *)&v28 = *(v6 - 4);
    *((_QWORD *)&v28 + 1) = v7;
    *(_QWORD *)&v29 = v8;
    *((_QWORD *)&v29 + 1) = v9;
    *(_QWORD *)&v30 = v10;
    *((_QWORD *)&v30 + 1) = v11;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v16);
    result = sub_3B984((uint64_t *)&v28);
    if ((v18 & 1) != 0)
      break;
    *(_QWORD *)(v26 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v19 = (_OWORD *)(v4[6] + 48 * result);
    v20 = v29;
    *v19 = v28;
    v19[1] = v20;
    v19[2] = v30;
    v21 = (_QWORD *)(v4[7] + 48 * result);
    *v21 = v12;
    v21[1] = v13;
    v21[2] = v15;
    v21[3] = v14;
    v21[4] = v27;
    v21[5] = v16;
    v22 = v4[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_11;
    v4[2] = v24;
    v6 += 12;
    if (!--v5)
    {
      swift_release();
      v1 = v25;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_38454(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t result;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(&qword_3B6648);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 1);
    v7 = *v5;
    v8 = (id)*(v5 - 2);
    swift_bridgeObjectRetain(v7);
    result = sub_3B904((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v8;
    v11 = (_QWORD *)(v3[7] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_38568(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC((uint64_t *)&unk_3BC010);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (char *)(a1 + 56);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 3);
    v7 = *((_QWORD *)v5 - 2);
    v8 = *((_QWORD *)v5 - 1);
    v9 = *v5;
    swift_bridgeObjectRetain(v7);
    sub_3F1E4(v8, v9);
    result = sub_3B8A0(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = v3[7] + 16 * result;
    *(_QWORD *)v13 = v8;
    *(_BYTE *)(v13 + 8) = v9;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 32;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_38694(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(&qword_3BBED0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_3B8A0(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_387A4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(&qword_3B65E0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_QWORD *)(a1 + 48);
  while (1)
  {
    v6 = *((unsigned __int8 *)v5 - 16);
    v8 = *(v5 - 1);
    v7 = *v5;
    swift_bridgeObjectRetain(*v5);
    result = sub_3B828(v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v6;
    v11 = (_QWORD *)(v3[7] + 16 * result);
    *v11 = v8;
    v11[1] = v7;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 3;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_388B0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC((uint64_t *)&unk_3BBF10);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v9 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    result = sub_3B8A0(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (_QWORD *)(v3[7] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_389D0(uint64_t a1)
{
  return sub_3900C(a1, &qword_3B6668);
}

unint64_t sub_389DC(uint64_t a1)
{
  return sub_3900C(a1, (uint64_t *)&unk_3BBF40);
}

unint64_t sub_389E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_319AC(&qword_3BBF50);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_3F238(v7, (uint64_t)&v17, &qword_3B6650);
    v8 = v17;
    v9 = v18;
    result = sub_3B8A0(v17, v18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = sub_3F1CC(&v19, v4[7] + 40 * result);
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 56;
    if (!--v5)
    {
      swift_release();
      v16 = a1;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_38B28(uint64_t a1)
{
  return sub_3900C(a1, &qword_3BE330);
}

unint64_t sub_38B34(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC((uint64_t *)&unk_3BBF30);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (void **)(a1 + 48);
  while (1)
  {
    v6 = (uint64_t)*(v5 - 2);
    v7 = (uint64_t)*(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain(v7);
    v9 = v8;
    result = sub_3B8A0(v6, v7);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v9;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_38C4C(uint64_t a1)
{
  return sub_3900C(a1, &qword_3B6640);
}

unint64_t sub_38C58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(&qword_3B6628);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_3F238(v7, (uint64_t)v16, &qword_3B6630);
    result = sub_3BB34((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_3F180(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_38D98(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id *v5;
  char v6;
  id v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2
    && (sub_319AC(&qword_3B6618),
        v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2),
        (v4 = *(_QWORD *)(a1 + 16)) != 0))
  {
    swift_retain();
    v5 = (id *)(a1 + 40);
    while (1)
    {
      v6 = *((_BYTE *)v5 - 8);
      v7 = *v5;
      sub_3BA4C(v6);
      if ((v9 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
      *(_BYTE *)(v3[6] + v8) = v6;
      *(_QWORD *)(v3[7] + 8 * v8) = v7;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      v5 += 2;
      if (!--v4)
      {
        swift_release();
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease(a1);
  }
}

void sub_38E98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2
    && (sub_319AC(&qword_3B6610),
        v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2),
        (v4 = *(_QWORD *)(v1 + 16)) != 0))
  {
    swift_retain();
    v22 = v1;
    v5 = (char *)(v1 + 48);
    while (1)
    {
      v6 = *(v5 - 16);
      v7 = *((_QWORD *)v5 - 1);
      v8 = *v5;
      v9 = v5[1];
      v10 = *((_QWORD *)v5 + 1);
      v11 = *((_QWORD *)v5 + 2);
      v12 = *((_QWORD *)v5 + 3);
      v13 = v5[32];
      v14 = v5[33];
      v15 = *((_QWORD *)v5 + 5);
      swift_bridgeObjectRetain(v7);
      sub_3BA4C(v6);
      if ((v17 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v16;
      *(_BYTE *)(v3[6] + v16) = v6;
      v18 = v3[7] + 56 * v16;
      *(_QWORD *)v18 = v7;
      *(_BYTE *)(v18 + 8) = v8;
      *(_BYTE *)(v18 + 9) = v9;
      *(_QWORD *)(v18 + 16) = v10;
      *(_QWORD *)(v18 + 24) = v11;
      *(_QWORD *)(v18 + 32) = v12;
      *(_BYTE *)(v18 + 40) = v13;
      *(_BYTE *)(v18 + 41) = v14;
      *(_QWORD *)(v18 + 48) = v15;
      v19 = v3[2];
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
        goto LABEL_10;
      v3[2] = v21;
      v5 += 64;
      if (!--v4)
      {
        swift_release();
        v1 = v22;
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease(v1);
  }
}

unint64_t sub_39000(uint64_t a1)
{
  return sub_3900C(a1, &qword_3B65E8);
}

unint64_t sub_3900C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_319AC(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v8 = *(v7 - 2);
    v9 = *(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    result = sub_3B8A0(v8, v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v5[6] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

double sub_39120@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;

  static Date.distantPast.getter(a2);
  KeyPath = swift_getKeyPath(&unk_2E5A18);
  swift_getKeyPath(&unk_2E5A40);
  static Published.subscript.getter(&v9, v2, KeyPath);
  swift_release();
  swift_release();
  v5 = v9;
  sub_39214(v9, a1);
  swift_bridgeObjectRelease(v5);
  v6 = swift_getKeyPath(&unk_2E5A60);
  swift_getKeyPath(&unk_2E5A88);
  static Published.subscript.getter(&v9, v2, v6);
  swift_release();
  swift_release();
  v7 = v9;
  sub_39214(v9, a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

uint64_t sub_39214(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  char v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36[24];
  int64_t v37;

  v35 = a2;
  v3 = type metadata accessor for Date(0);
  v34 = *(_QWORD *)(v3 - 8);
  v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v31 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v32 = a1;
  v33 = (char *)&v28 - v6;
  v7 = *(_QWORD *)(a1 + 64);
  v29 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v30 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v12 = 0;
  v13 = v33;
  while (1)
  {
    if (v10)
    {
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v37 = v12;
      v15 = v14 | (v12 << 6);
      goto LABEL_23;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v30)
      return swift_release(v32);
    v17 = *(_QWORD *)(v29 + 8 * v16);
    v18 = v12 + 1;
    if (!v17)
    {
      v18 = v12 + 2;
      if (v12 + 2 >= v30)
        return swift_release(v32);
      v17 = *(_QWORD *)(v29 + 8 * v18);
      if (!v17)
      {
        v18 = v12 + 3;
        if (v12 + 3 >= v30)
          return swift_release(v32);
        v17 = *(_QWORD *)(v29 + 8 * v18);
        if (!v17)
        {
          v18 = v12 + 4;
          if (v12 + 4 >= v30)
            return swift_release(v32);
          v17 = *(_QWORD *)(v29 + 8 * v18);
          if (!v17)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v17 - 1) & v17;
    v37 = v18;
    v15 = __clz(__rbit64(v17)) + (v18 << 6);
LABEL_23:
    v20 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v15);
    v21 = v20 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
    swift_beginAccess(v20 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate, v36, 0, 0);
    v22 = v34;
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
    v23(v13, v21, v3);
    v24 = v31;
    v23(v31, v35, v3);
    swift_retain(v20);
    v25 = static Date.> infix(_:_:)(v13, v24);
    v26 = *(void (**)(char *, uint64_t))(v22 + 8);
    v26(v24, v3);
    v26(v13, v3);
    if ((v25 & 1) != 0)
    {
      v27 = v33;
      v23(v33, v21, v3);
      (*(void (**)(uint64_t, char *, uint64_t))(v34 + 40))(v35, v27, v3);
    }
    result = swift_release(v20);
    v12 = v37;
  }
  v19 = v12 + 5;
  if (v12 + 5 >= v30)
    return swift_release(v32);
  v17 = *(_QWORD *)(v29 + 8 * v19);
  if (v17)
  {
    v18 = v12 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v18 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v18 >= v30)
      return swift_release(v32);
    v17 = *(_QWORD *)(v29 + 8 * v18);
    ++v19;
    if (v17)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_394E0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  Swift::String v34;
  uint64_t v35;
  Swift::String v36;
  void *v37;
  uint64_t v38;
  Swift::String v39;
  uint64_t v40;
  Swift::String v41;
  _QWORD v43[4];
  uint64_t v44[2];

  v1 = v0;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease(0xE000000000000000);
  v44[0] = 0xD000000000000023;
  v44[1] = 0x80000000002C60F0;
  v43[3] = *(_QWORD *)(v0 + 16);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 10;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  KeyPath = swift_getKeyPath(&unk_2E5A18);
  v6 = swift_getKeyPath(&unk_2E5A40);
  static Published.subscript.getter(v44, v1, KeyPath);
  swift_release(v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v44[0] + 16);
  swift_bridgeObjectRelease(v44[0]);
  if (v7)
  {
    v8 = swift_getKeyPath(&unk_2E5A18);
    v9 = swift_getKeyPath(&unk_2E5A40);
    static Published.subscript.getter(v44, v1, v8);
    swift_release(v9);
    swift_release(v8);
    v10 = v44[0];
    v11 = sub_39930(v44[0]);
    swift_bridgeObjectRelease(v10);
    v44[0] = v11;
    v12 = sub_319AC((uint64_t *)&unk_3B8C90);
    v13 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
    v14 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v12, v13);
    v16 = v15;
    swift_bridgeObjectRelease(v11);
    strcpy((char *)v44, "  Bookmarks:\n");
    HIWORD(v44[1]) = -4864;
    v17._countAndFlagsBits = v14;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(v16);
    v18 = v44[1];
    swift_bridgeObjectRetain(v44[1]);
    v19._countAndFlagsBits = 10;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v18);
    v21 = v44[0];
    v20 = (void *)v44[1];
  }
  else
  {
    v20 = (void *)0x80000000002C6140;
    v21 = 0xD000000000000010;
  }
  v22 = swift_getKeyPath(&unk_2E5A60);
  v23 = swift_getKeyPath(&unk_2E5A88);
  static Published.subscript.getter(v44, v1, v22);
  swift_release(v23);
  swift_release(v22);
  v24 = *(_QWORD *)(v44[0] + 16);
  swift_bridgeObjectRelease(v44[0]);
  if (v24)
  {
    v25 = swift_getKeyPath(&unk_2E5A60);
    v26 = swift_getKeyPath(&unk_2E5A88);
    static Published.subscript.getter(v44, v1, v25);
    swift_release(v26);
    swift_release(v25);
    v27 = v44[0];
    v28 = sub_39B58(v44[0], (uint64_t)v43, (uint64_t (*)(uint64_t))sub_368E0);
    swift_bridgeObjectRelease(v27);
    v44[0] = v28;
    v29 = sub_319AC((uint64_t *)&unk_3B8C90);
    v30 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
    v31 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v29, v30);
    v33 = v32;
    swift_bridgeObjectRelease(v28);
    strcpy((char *)v44, "  Highlights:\n");
    HIBYTE(v44[1]) = -18;
    v34._countAndFlagsBits = v31;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v33);
    v35 = v44[1];
    swift_bridgeObjectRetain(v44[1]);
    v36._countAndFlagsBits = 10;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v35);
    v38 = v44[0];
    v37 = (void *)v44[1];
  }
  else
  {
    v38 = 0xD000000000000011;
    v37 = (void *)0x80000000002C6120;
  }
  v44[0] = 0xD000000000000023;
  v44[1] = 0x80000000002C60F0;
  swift_bridgeObjectRetain(0x80000000002C60F0);
  v39._countAndFlagsBits = v21;
  v39._object = v20;
  String.append(_:)(v39);
  swift_bridgeObjectRelease(0x80000000002C60F0);
  swift_bridgeObjectRelease(v20);
  v40 = v44[1];
  swift_bridgeObjectRetain(v44[1]);
  v41._countAndFlagsBits = v38;
  v41._object = v37;
  String.append(_:)(v41);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v37);
  return v44[0];
}

uint64_t sub_39930(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (!v1)
    return (uint64_t)v2;
  sub_F508C(0, v1, 0);
  v2 = _swiftEmptyArrayStorage;
  result = sub_3C9DC(a1);
  v6 = result;
  v7 = 0;
  v8 = a1 + 64;
  v28 = v1;
  v29 = v5;
  v30 = a1 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v5)
      goto LABEL_24;
    v31 = v7;
    v12 = v2;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6);
    v14 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 160);
    v15 = swift_retain(v13);
    v16 = v14(v15);
    v18 = v17;
    v19 = v13;
    v2 = v12;
    result = swift_release(v19);
    v21 = v12[2];
    v20 = v12[3];
    if (v21 >= v20 >> 1)
    {
      result = sub_F508C(v20 > 1, v21 + 1, 1);
      v2 = v12;
    }
    v2[2] = v21 + 1;
    v22 = &v2[2 * v21];
    v22[4] = v16;
    v22[5] = v18;
    v9 = 1 << *(_BYTE *)(a1 + 32);
    if (v6 >= v9)
      goto LABEL_25;
    v8 = a1 + 64;
    v23 = *(_QWORD *)(v30 + 8 * v11);
    if ((v23 & (1 << v6)) == 0)
      goto LABEL_26;
    v5 = v29;
    if (*(_DWORD *)(a1 + 36) != v29)
      goto LABEL_27;
    v24 = v23 & (-2 << (v6 & 0x3F));
    if (v24)
    {
      v9 = __clz(__rbit64(v24)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v10 = v28;
    }
    else
    {
      v25 = v11 + 1;
      v26 = (unint64_t)(v9 + 63) >> 6;
      v10 = v28;
      if (v11 + 1 < v26)
      {
        v27 = *(_QWORD *)(v30 + 8 * v25);
        if (v27)
        {
LABEL_20:
          v9 = __clz(__rbit64(v27)) + (v25 << 6);
        }
        else
        {
          while (v26 - 2 != v11)
          {
            v27 = *(_QWORD *)(a1 + 80 + 8 * v11++);
            if (v27)
            {
              v25 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v31 + 1;
    v6 = v9;
    if (v31 + 1 == v10)
      return (uint64_t)v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_39B58(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  int64_t v3;
  _QWORD *v4;
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v32;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (!v3)
    return (uint64_t)v4;
  sub_F508C(0, v3, 0);
  v4 = _swiftEmptyArrayStorage;
  result = sub_3C9DC(a1);
  v8 = result;
  v9 = 0;
  v10 = a1 + 64;
  v28 = v3;
  v29 = v7;
  v30 = a1 + 64;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(_BYTE *)(a1 + 32))
  {
    v13 = (unint64_t)v8 >> 6;
    if ((*(_QWORD *)(v10 + 8 * ((unint64_t)v8 >> 6)) & (1 << v8)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v7)
      goto LABEL_24;
    v14 = v4;
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v8);
    v16 = swift_retain(v15);
    v17 = a3(v16);
    v32 = v18;
    v19 = v15;
    v4 = v14;
    result = swift_release(v19);
    v21 = v14[2];
    v20 = v14[3];
    if (v21 >= v20 >> 1)
    {
      result = sub_F508C(v20 > 1, v21 + 1, 1);
      v4 = v14;
    }
    v4[2] = v21 + 1;
    v22 = &v4[2 * v21];
    v22[4] = v17;
    v22[5] = v32;
    v11 = 1 << *(_BYTE *)(a1 + 32);
    if (v8 >= v11)
      goto LABEL_25;
    v10 = a1 + 64;
    v23 = *(_QWORD *)(v30 + 8 * v13);
    if ((v23 & (1 << v8)) == 0)
      goto LABEL_26;
    v7 = v29;
    if (*(_DWORD *)(a1 + 36) != v29)
      goto LABEL_27;
    v24 = v23 & (-2 << (v8 & 0x3F));
    if (v24)
    {
      v11 = __clz(__rbit64(v24)) | v8 & 0xFFFFFFFFFFFFFFC0;
      v12 = v28;
    }
    else
    {
      v25 = v13 + 1;
      v26 = (unint64_t)(v11 + 63) >> 6;
      v12 = v28;
      if (v13 + 1 < v26)
      {
        v27 = *(_QWORD *)(v30 + 8 * v25);
        if (v27)
        {
LABEL_20:
          v11 = __clz(__rbit64(v27)) + (v25 << 6);
        }
        else
        {
          while (v26 - 2 != v13)
          {
            v27 = *(_QWORD *)(a1 + 80 + 8 * v13++);
            if (v27)
            {
              v25 = v13 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v9;
    v8 = v11;
    if (v9 == v12)
      return (uint64_t)v4;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t DocumentAnnotationsEntity.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__bookmarks;
  v2 = sub_319AC(&qword_3B5CF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__highlights;
  v4 = sub_319AC(&qword_3B5D08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__serializedUpgradeAnnotations;
  v6 = sub_319AC(&qword_3B5D20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity_cancellables));
  return v0;
}

uint64_t DocumentAnnotationsEntity.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__bookmarks;
  v2 = sub_319AC(&qword_3B5CF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__highlights;
  v4 = sub_319AC(&qword_3B5D08);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__serializedUpgradeAnnotations;
  v6 = sub_319AC(&qword_3B5D20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity_cancellables));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_39EE8()
{
  return sub_394E0();
}

uint64_t CFIRange.end.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_39F34@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_39F48(a1, (uint64_t)&unk_2E5AF0, (uint64_t)&unk_2E5B18, a2);
}

uint64_t sub_39F48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v8 = swift_getKeyPath(a3);
  static Published.subscript.getter(&v10, v6, KeyPath, v8);
  swift_release(v8);
  result = swift_release(KeyPath);
  *a4 = v10;
  return result;
}

uint64_t sub_39FC0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_39FD4(a1, a2, a3, a4, (uint64_t)&unk_2E5AF0, (uint64_t)&unk_2E5B18);
}

uint64_t sub_39FD4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v12;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v10 = swift_getKeyPath(a6);
  v12 = v7;
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return static Published.subscript.setter(&v12, v8, KeyPath, v10);
}

uint64_t sub_3A048()
{
  return sub_3A05C((uint64_t)&unk_2E5AF0, (uint64_t)&unk_2E5B18);
}

uint64_t sub_3A05C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v5 = swift_getKeyPath(a2);
  static Published.subscript.getter(&v7, v2, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  return v7;
}

uint64_t sub_3A0C4(uint64_t a1)
{
  return sub_3A0D8(a1, (uint64_t)&unk_2E5AF0, (uint64_t)&unk_2E5B18);
}

uint64_t sub_3A0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(a2);
  v7 = swift_getKeyPath(a3);
  v9 = a1;
  swift_retain(v3);
  return static Published.subscript.setter(&v9, v3, KeyPath, v7);
}

uint64_t (*sub_3A140(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2E5AF0);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2E5B18);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_37800;
}

void sub_3A1B8(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

uint64_t sub_3A204(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(*a1 + *a4, v8, 33, 0);
  v6 = sub_319AC(a5);
  Published.projectedValue.getter(v6);
  return swift_endAccess(v8);
}

uint64_t sub_3A270(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6, uint64_t *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[24];

  v11 = sub_319AC(a5);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = &v23[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v13);
  v17 = &v23[-v16 - 8];
  v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16);
  v18(&v23[-v16 - 8], a1, v11);
  v19 = *a2;
  v18(v15, v17, v11);
  swift_beginAccess(v19 + *a6, v23, 33, 0);
  v20 = sub_319AC(a7);
  Published.projectedValue.setter(v15, v20);
  swift_endAccess(v23);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v12 + 8))(v17, v11);
}

uint64_t sub_3A388()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations, &qword_3B5D50);
}

uint64_t sub_3A39C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(v2 + *a1, v6, 33, 0);
  v4 = sub_319AC(a2);
  Published.projectedValue.getter(v4);
  return swift_endAccess(v6);
}

uint64_t sub_3A400(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3B5D58, &OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations, &qword_3B5D50);
}

uint64_t sub_3A41C(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v15[24];

  v8 = sub_319AC(a2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v15[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  swift_beginAccess(v4 + *a3, v15, 33, 0);
  v12 = sub_319AC(a4);
  Published.projectedValue.setter(v11, v12);
  swift_endAccess(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
}

void (*sub_3A4F4(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3B5D58);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3B5D50);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

void sub_3A5BC(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = v3[15];
  v6 = v3[16];
  v7 = (void *)v3[13];
  v8 = (void *)v3[14];
  v10 = v3[11];
  v9 = (void *)v3[12];
  v11 = v3[9];
  v12 = v3[10];
  v13 = v11 + v5;
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess(v13, v3 + 3, 33, 0);
    Published.projectedValue.setter(v9, v6);
    swift_endAccess(v3 + 3);
    v14 = *(void (**)(void *, uint64_t))(v10 + 8);
    v14(v7, v12);
  }
  else
  {
    swift_beginAccess(v11 + v5, v3 + 6, 33, 0);
    Published.projectedValue.setter(v7, v6);
    swift_endAccess(v3 + 6);
    v14 = *(void (**)(void *, uint64_t))(v10 + 8);
  }
  v14(v8, v12);
  free(v8);
  free(v7);
  free(v9);
  free(v3);
}

uint64_t sub_3A6D4()
{
  return sub_3A6FC((uint64_t)&unk_2E5A18, (uint64_t)&unk_2E5A40);
}

uint64_t sub_3A6E8()
{
  return sub_3A6FC((uint64_t)&unk_2E5A60, (uint64_t)&unk_2E5A88);
}

uint64_t sub_3A6FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;

  KeyPath = swift_getKeyPath(&unk_2E5AF0);
  v6 = swift_getKeyPath(&unk_2E5B18);
  static Published.subscript.getter(&v26, v2, KeyPath, v6);
  swift_release(v6);
  swift_release(KeyPath);
  v7 = v26;
  v25 = v26 + 64;
  v8 = 1 << *(_BYTE *)(v26 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v26 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain(v26);
  v13 = 0;
  v14 = 0;
  do
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
    }
    else
    {
      v22 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_27;
      if (v22 >= v11)
      {
LABEL_25:
        swift_release(v7);
        swift_bridgeObjectRelease(v7);
        return v14;
      }
      v23 = *(_QWORD *)(v25 + 8 * v22);
      ++v13;
      if (!v23)
      {
        v13 = v22 + 1;
        if (v22 + 1 >= v11)
          goto LABEL_25;
        v23 = *(_QWORD *)(v25 + 8 * v13);
        if (!v23)
        {
          v13 = v22 + 2;
          if (v22 + 2 >= v11)
            goto LABEL_25;
          v23 = *(_QWORD *)(v25 + 8 * v13);
          if (!v23)
          {
            v13 = v22 + 3;
            if (v22 + 3 >= v11)
              goto LABEL_25;
            v23 = *(_QWORD *)(v25 + 8 * v13);
            if (!v23)
            {
              v13 = v22 + 4;
              if (v22 + 4 >= v11)
                goto LABEL_25;
              v23 = *(_QWORD *)(v25 + 8 * v13);
              if (!v23)
              {
                v24 = v22 + 5;
                if (v24 >= v11)
                  goto LABEL_25;
                v23 = *(_QWORD *)(v25 + 8 * v24);
                if (!v23)
                {
                  while (1)
                  {
                    v13 = v24 + 1;
                    if (__OFADD__(v24, 1))
                      goto LABEL_28;
                    if (v13 >= v11)
                      goto LABEL_25;
                    v23 = *(_QWORD *)(v25 + 8 * v13);
                    ++v24;
                    if (v23)
                      goto LABEL_24;
                  }
                }
                v13 = v24;
              }
            }
          }
        }
      }
LABEL_24:
      v10 = (v23 - 1) & v23;
      v16 = __clz(__rbit64(v23)) + (v13 << 6);
    }
    v17 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v16);
    v18 = swift_getKeyPath(a1);
    v19 = swift_getKeyPath(a2);
    static Published.subscript.getter(&v26, v17, v18, v19);
    swift_release(v19);
    swift_release(v18);
    v20 = *(_QWORD *)(v26 + 16);
    result = swift_bridgeObjectRelease(v26);
    v21 = __OFADD__(v14, v20);
    v14 += v20;
  }
  while (!v21);
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_3A93C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isStackAllocationSafe;
  uint64_t v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  size_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  int64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;

  KeyPath = swift_getKeyPath(&unk_2E5AF0);
  v2 = swift_getKeyPath(&unk_2E5B18);
  static Published.subscript.getter(&v71, v0, KeyPath);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = *(_QWORD *)(v71 + 64);
  v61 = v71 + 64;
  v4 = 1 << *(_BYTE *)(v71 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & v3;
  v62 = (unint64_t)(v4 + 63) >> 6;
  v63 = v71;
  swift_bridgeObjectRetain(v71);
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v68 = v8;
    if (v6)
    {
      v66 = (v6 - 1) & v6;
      v67 = v7;
      v12 = __clz(__rbit64(v6)) | (v7 << 6);
      goto LABEL_27;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_85;
    if (v13 >= v62)
      goto LABEL_78;
    v14 = *(_QWORD *)(v61 + 8 * v13);
    v15 = v7 + 1;
    if (!v14)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v62)
        goto LABEL_78;
      v14 = *(_QWORD *)(v61 + 8 * v15);
      if (!v14)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v62)
          goto LABEL_78;
        v14 = *(_QWORD *)(v61 + 8 * v15);
        if (!v14)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v62)
            goto LABEL_78;
          v14 = *(_QWORD *)(v61 + 8 * v15);
          if (!v14)
          {
            v15 = v7 + 5;
            if (v7 + 5 >= v62)
              goto LABEL_78;
            v14 = *(_QWORD *)(v61 + 8 * v15);
            if (!v14)
              break;
          }
        }
      }
    }
LABEL_26:
    v66 = (v14 - 1) & v14;
    v67 = v15;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_27:
    v17 = *(_QWORD *)(*(_QWORD *)(v63 + 56) + 8 * v12);
    v18 = swift_getKeyPath(&unk_2E5A60);
    v19 = swift_getKeyPath(&unk_2E5A88);
    static Published.subscript.getter(&v71, v17, v18);
    swift_release(v19);
    isStackAllocationSafe = swift_release(v18);
    v21 = v71;
    v22 = *(_BYTE *)(v71 + 32);
    v23 = v22 & 0x3F;
    v24 = (unint64_t)((1 << v22) + 63) >> 6;
    v65 = v24;
    v25 = 8 * v24;
    if (v23 > 0xD)
    {
      isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * v24, 8);
      if ((isStackAllocationSafe & 1) == 0)
      {
        v69 = (char *)swift_slowAlloc(v25, -1);
        bzero(v69, v25);
        v70 = 0;
        v42 = 0;
        v43 = v21 + 64;
        v44 = 1 << *(_BYTE *)(v21 + 32);
        if (v44 < 64)
          v45 = ~(-1 << v44);
        else
          v45 = -1;
        v46 = v45 & *(_QWORD *)(v21 + 64);
        v47 = (unint64_t)(v44 + 63) >> 6;
        while (1)
        {
          if (v46)
          {
            v48 = __clz(__rbit64(v46));
            v46 &= v46 - 1;
            v49 = v48 | (v42 << 6);
          }
          else
          {
            v55 = v42 + 1;
            if (__OFADD__(v42, 1))
              goto LABEL_80;
            if (v55 >= v47)
              goto LABEL_77;
            v56 = *(_QWORD *)(v43 + 8 * v55);
            ++v42;
            if (!v56)
            {
              v42 = v55 + 1;
              if (v55 + 1 >= v47)
                goto LABEL_77;
              v56 = *(_QWORD *)(v43 + 8 * v42);
              if (!v56)
              {
                v42 = v55 + 2;
                if (v55 + 2 >= v47)
                  goto LABEL_77;
                v56 = *(_QWORD *)(v43 + 8 * v42);
                if (!v56)
                {
                  v57 = v55 + 3;
                  if (v57 >= v47)
                    goto LABEL_77;
                  v56 = *(_QWORD *)(v43 + 8 * v57);
                  if (!v56)
                  {
                    while (1)
                    {
                      v42 = v57 + 1;
                      if (__OFADD__(v57, 1))
                        goto LABEL_82;
                      if (v42 >= v47)
                        break;
                      v56 = *(_QWORD *)(v43 + 8 * v42);
                      ++v57;
                      if (v56)
                        goto LABEL_73;
                    }
LABEL_77:
                    v58 = v69;
                    v9 = sub_3C758((unint64_t *)v69, v65, v70, v21);
                    swift_slowDealloc(v58, -1, -1);
                    goto LABEL_6;
                  }
                  v42 = v57;
                }
              }
            }
LABEL_73:
            v46 = (v56 - 1) & v56;
            v49 = __clz(__rbit64(v56)) + (v42 << 6);
          }
          v50 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v49 + 8);
          v51 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v49);
          v52 = swift_getKeyPath(&unk_2E58F8);
          v53 = swift_getKeyPath(&unk_2E5920);
          swift_bridgeObjectRetain(v50);
          v54 = swift_retain(v51);
          static Published.subscript.getter(&v71, v54, v52);
          swift_release(v53);
          swift_release(v52);
          swift_release(v51);
          swift_bridgeObjectRelease(v50);
          if (v71 == 1)
          {
            *(_QWORD *)&v69[(v49 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v49;
            v11 = __OFADD__(v70++, 1);
            if (v11)
              goto LABEL_86;
          }
        }
      }
    }
    v64 = &v61;
    __chkstk_darwin(isStackAllocationSafe);
    v69 = (char *)&v61 - ((v25 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v69, v25);
    v70 = 0;
    v26 = 0;
    v27 = v21 + 64;
    v28 = 1 << *(_BYTE *)(v21 + 32);
    if (v28 < 64)
      v29 = ~(-1 << v28);
    else
      v29 = -1;
    v30 = v29 & *(_QWORD *)(v21 + 64);
    v31 = (unint64_t)(v28 + 63) >> 6;
    while (1)
    {
      if (v30)
      {
        v32 = __clz(__rbit64(v30));
        v30 &= v30 - 1;
        v33 = v32 | (v26 << 6);
        goto LABEL_34;
      }
      v39 = v26 + 1;
      if (__OFADD__(v26, 1))
      {
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
      if (v39 >= v31)
        goto LABEL_5;
      v40 = *(_QWORD *)(v27 + 8 * v39);
      ++v26;
      if (!v40)
      {
        v26 = v39 + 1;
        if (v39 + 1 >= v31)
          goto LABEL_5;
        v40 = *(_QWORD *)(v27 + 8 * v26);
        if (!v40)
        {
          v26 = v39 + 2;
          if (v39 + 2 >= v31)
            goto LABEL_5;
          v40 = *(_QWORD *)(v27 + 8 * v26);
          if (!v40)
            break;
        }
      }
LABEL_49:
      v30 = (v40 - 1) & v40;
      v33 = __clz(__rbit64(v40)) + (v26 << 6);
LABEL_34:
      v34 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 16 * v33 + 8);
      v35 = *(_QWORD *)(*(_QWORD *)(v21 + 56) + 8 * v33);
      v36 = swift_getKeyPath(&unk_2E58F8);
      v37 = swift_getKeyPath(&unk_2E5920);
      swift_bridgeObjectRetain(v34);
      v38 = swift_retain(v35);
      static Published.subscript.getter(&v71, v38, v36);
      swift_release(v37);
      swift_release(v36);
      swift_release(v35);
      swift_bridgeObjectRelease(v34);
      if (v71 == 1)
      {
        *(_QWORD *)&v69[(v33 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v33;
        v11 = __OFADD__(v70++, 1);
        if (v11)
          goto LABEL_83;
      }
    }
    v41 = v39 + 3;
    if (v41 < v31)
    {
      v40 = *(_QWORD *)(v27 + 8 * v41);
      if (!v40)
      {
        while (1)
        {
          v26 = v41 + 1;
          if (__OFADD__(v41, 1))
            break;
          if (v26 >= v31)
            goto LABEL_5;
          v40 = *(_QWORD *)(v27 + 8 * v26);
          ++v41;
          if (v40)
            goto LABEL_49;
        }
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        __break(1u);
LABEL_87:
        __break(1u);
      }
      v26 = v41;
      goto LABEL_49;
    }
LABEL_5:
    v9 = sub_3C758((unint64_t *)v69, v65, v70, v21);
LABEL_6:
    swift_bridgeObjectRelease(v21);
    v10 = *(_QWORD *)(v9 + 16);
    swift_release(v9);
    v7 = v67;
    v11 = __OFADD__(v68, v10);
    v8 = v68 + v10;
    v6 = v66;
    if (v11)
      goto LABEL_84;
  }
  v16 = v7 + 6;
  if (v7 + 6 >= v62)
    goto LABEL_78;
  v14 = *(_QWORD *)(v61 + 8 * v16);
  if (v14)
  {
    v15 = v7 + 6;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      goto LABEL_87;
    if (v15 >= v62)
      break;
    v14 = *(_QWORD *)(v61 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_26;
  }
LABEL_78:
  v59 = v63;
  swift_release(v63);
  swift_bridgeObjectRelease(v59);
  return v8;
}

uint64_t BookAnnotationEntity.__allocating_init(assetID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v9;
  _BYTE v10[24];

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = sub_3D11C(_swiftEmptyArrayStorage, &qword_3B66C8);
  swift_beginAccess(v5 + OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations, v10, 33, 0);
  v9 = v6;
  v7 = sub_319AC(&qword_3B5D60);
  Published.init(initialValue:)(&v9, v7);
  swift_endAccess(v10);
  return v5;
}

uint64_t BookAnnotationEntity.init(assetID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v6;
  _BYTE v7[24];

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  v3 = sub_3D11C(_swiftEmptyArrayStorage, &qword_3B66C8);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations, v7, 33, 0);
  v6 = v3;
  v4 = sub_319AC(&qword_3B5D60);
  Published.init(initialValue:)(&v6, v4);
  swift_endAccess(v7);
  return v2;
}

uint64_t sub_3B140(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E5AF0);
  swift_getKeyPath(&unk_2E5B18);
  static Published.subscript.getter(&v9, v1, KeyPath);
  swift_release();
  swift_release();
  v4 = v9;
  if (*(_QWORD *)(v9 + 16) && (v5 = sub_3B7F8(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    swift_retain();
  }
  else
  {
    v7 = 0;
  }
  swift_bridgeObjectRelease(v4);
  return v7;
}

uint64_t sub_3B1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  KeyPath = swift_getKeyPath(&unk_2E5AF0);
  v6 = swift_getKeyPath(&unk_2E5B18);
  static Published.subscript.getter(&v10, v2, KeyPath);
  swift_release(v6);
  swift_release(KeyPath);
  v7 = v10;
  swift_bridgeObjectRetain(a2);
  v8 = sub_3D9B4(v7, a1, a2);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_3B2A0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v1 = v0;
  v2 = *(Swift::String *)(v0 + 16);
  v16 = 0xD00000000000001ELL;
  v17 = 0x80000000002C6160;
  String.append(_:)(v2);
  swift_bridgeObjectRetain(0x80000000002C6160);
  v3._countAndFlagsBits = 10;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(0x80000000002C6160);
  KeyPath = swift_getKeyPath(&unk_2E5AF0);
  v5 = swift_getKeyPath(&unk_2E5B18);
  static Published.subscript.getter(&v16, v1, KeyPath);
  swift_release(v5);
  swift_release(KeyPath);
  v6 = v16;
  v7 = sub_39B58(v16, (uint64_t)&v15, (uint64_t (*)(uint64_t))sub_394E0);
  swift_bridgeObjectRelease(v6);
  v16 = v7;
  v8 = sub_319AC((uint64_t *)&unk_3B8C90);
  v9 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
  v10 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v8, v9);
  v12 = v11;
  swift_bridgeObjectRelease(v7);
  v16 = 0xD00000000000001ELL;
  v17 = 0x80000000002C6160;
  swift_bridgeObjectRetain(0x80000000002C6160);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(0x80000000002C6160);
  return v16;
}

uint64_t BookAnnotationEntity.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations;
  v2 = sub_319AC(&qword_3B5D50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t BookAnnotationEntity.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations;
  v2 = sub_319AC(&qword_3B5D50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_3B4C8()
{
  return sub_3B2A0();
}

uint64_t AnnotationChange.documentOrdinal.getter()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)sub_3B50C + 4 * byte_2E5850[*(unsigned __int8 *)(v0 + 24)]))(*(_QWORD *)v0);
}

uint64_t sub_3B50C@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t sub_3B514(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

BOOL static AnnotationEventType.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AnnotationEventType.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int AnnotationEventType.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t Location.CFIRequest.location.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t _ContentLoaderViewSelection.text.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t ElementPaginationEntityReference.rects.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t _ContentLoaderViewSelection.rects.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = a1;
  return result;
}

uint64_t (*_ContentLoaderViewSelection.rects.modify())()
{
  return address(of:);
}

void __swiftcall _AnnotationProvidingOverlap.init(mergedCFI:intersectingAnnotations:containingAnnotation:)(BookEPUB::_AnnotationProvidingOverlap *__return_ptr retstr, Swift::String mergedCFI, Swift::OpaquePointer intersectingAnnotations, Swift::String_optional containingAnnotation)
{
  retstr->mergedCFI = mergedCFI;
  retstr->intersectingAnnotations = intersectingAnnotations;
  retstr->containingAnnotation = containingAnnotation;
}

void _AnnotationProvidingOverlap.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(*(_QWORD *)(v6 + 16));
  v8 = *(_QWORD *)(v6 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain(v6);
    v9 = (_QWORD *)(v6 + 40);
    do
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      swift_bridgeObjectRetain(*v9);
      String.hash(into:)(a1, v10, v11);
      swift_bridgeObjectRelease(v11);
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease(v6);
  }
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v7);
    String.hash(into:)(a1, v5, v7);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int _AnnotationProvidingOverlap.hashValue.getter()
{
  uint64_t v0;
  __int128 v1;
  _QWORD v3[10];
  __int128 v4;
  __int128 v5;

  v3[9] = *(_QWORD *)v0;
  v1 = *(_OWORD *)(v0 + 24);
  v4 = *(_OWORD *)(v0 + 8);
  v5 = v1;
  Hasher.init(_seed:)(v3, 0);
  _AnnotationProvidingOverlap.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

Swift::Int sub_3B7A8(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  _QWORD v4[10];
  __int128 v5;
  __int128 v6;

  v4[9] = *(_QWORD *)v1;
  v2 = *(_OWORD *)(v1 + 24);
  v5 = *(_OWORD *)(v1 + 8);
  v6 = v2;
  Hasher.init(_seed:)(v4, a1);
  _AnnotationProvidingOverlap.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

unint64_t sub_3B7F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_3BB94(a1, v3);
}

uint64_t sub_3B828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  v3 = BookFontTable.rawValue.getter();
  v5 = v4;
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v5);
  v6 = Hasher._finalize()();
  return sub_3BC30(a1, v6);
}

unint64_t sub_3B8A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_3BFD8(a1, a2, v5);
}

unint64_t sub_3B904(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_3C0B8(a1, v7);
}

unint64_t sub_3B984(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11, *(_QWORD *)(v1 + 40));
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v11, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v11, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v8);
  v9 = Hasher._finalize()();
  return sub_3C22C(a1, v9);
}

void sub_3BA4C(char a1)
{
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, *(_QWORD *)(v1 + 40));
  __asm { BR              X10 }
}

uint64_t sub_3BAA4()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 0x7465697571, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  v1 = Hasher._finalize()();
  return sub_3C37C(v0, v1);
}

unint64_t sub_3BB34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_3C58C(a1, v4);
}

unint64_t sub_3BB64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_3C650(a1, v4);
}

unint64_t sub_3BB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_3BC30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X8 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_3BFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_3C0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_3C22C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  v22 = v2 + 64;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v20 = ~v3;
    v21 = *(_QWORD *)(v2 + 48);
    v5 = *a1;
    v6 = a1[1];
    v7 = a1[3];
    v23 = a1[2];
    v8 = a1[4];
    v9 = a1[5];
    do
    {
      v10 = (_QWORD *)(v21 + 48 * v4);
      v11 = v10[1];
      v13 = v10[2];
      v12 = v10[3];
      v14 = v10[4];
      v15 = v10[5];
      v16 = *v10 == v5 && v11 == v6;
      if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, v5, v6, 0) & 1) != 0)
      {
        v17 = v13 == v23 && v12 == v7;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, v23, v7, 0) & 1) != 0)
        {
          v18 = v14 == v8 && v15 == v9;
          if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v8, v9, 0) & 1) != 0)
            break;
        }
      }
      v4 = (v4 + 1) & v20;
    }
    while (((*(_QWORD *)(v22 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_3C37C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_3C58C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_3F110(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_3F14C((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_3C650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_3F190();
    v7 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

Swift::Int sub_3C758(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v32;
  uint64_t v33;
  _QWORD v34[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_319AC(&qword_3B66D0);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_38;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v17 = v15 + 2;
          if (v17 >= v33)
            return v9;
          v16 = v32[v17];
          if (!v16)
          {
            while (1)
            {
              v11 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_39;
              if (v11 >= v33)
                return v9;
              v16 = v32[v11];
              ++v17;
              if (v16)
                goto LABEL_22;
            }
          }
          v11 = v17;
        }
      }
LABEL_22:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v14);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)(v34, *(_QWORD *)(v9 + 40));
    swift_bridgeObjectRetain(v19);
    swift_retain(v21);
    String.hash(into:)(v34, v20, v19);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v25);
    *v30 = v20;
    v30[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v25) = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_3C9DC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t _s8BookEPUB27_AnnotationProvidingOverlapV2eeoiySbAC_ACtFZ_0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = (_QWORD *)a1[2];
  v8 = a1[3];
  v7 = a1[4];
  v9 = a2[1];
  v11 = (_QWORD *)a2[2];
  v10 = a2[3];
  v12 = a2[4];
  v13 = v4 == *a2 && v5 == v9;
  if (v13 || (v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v9, 0), result = 0, (v14 & 1) != 0))
  {
    if ((sub_657A0(v6, v11) & 1) != 0)
    {
      if (v7)
      {
        if (v12
          && (v8 == v10 && v7 == v12 || (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v7, v10, v12, 0) & 1) != 0))
        {
          return 1;
        }
      }
      else if (!v12)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t _s8BookEPUB15AnnotationStyleO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_378A78, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

unint64_t sub_3CB68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B5CA8;
  if (!qword_3B5CA8)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_3B5CA8);
  }
  return result;
}

_QWORD *sub_3CBC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, _QWORD *a9)
{
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  char v21;
  _BYTE v22[24];

  swift_beginAccess((char *)a9 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style, v22, 33, 0);
  v21 = a7;
  swift_retain(a9);
  Published.init(initialValue:)(&v21, &type metadata for AnnotationStyle);
  swift_endAccess(v22);
  swift_beginAccess((char *)a9 + OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText, v22, 33, 0);
  v21 = a8;
  Published.init(initialValue:)(&v21, &type metadata for Bool);
  swift_endAccess(v22);
  a9[2] = a1;
  a9[3] = a2;
  a9[4] = a3;
  v17 = (char *)a9 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_modificationDate;
  v18 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a6, v18);
  v19 = (_QWORD *)((char *)a9 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  *v19 = a4;
  v19[1] = a5;
  return a9;
}

_QWORD *sub_3CD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, char *a15)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(uint64_t, uint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE v39[32];

  v29 = a7;
  v30 = a8;
  v36 = a6;
  v34 = a4;
  v35 = a5;
  v32 = a2;
  v33 = a3;
  v31 = a1;
  v27 = a12;
  v28 = a13;
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v20(&a15[OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity_creationDate], a7, v16);
  swift_beginAccess(&a15[OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__selectedText], v39, 33, 0);
  v37 = a9;
  v38 = a10;
  Published.init(initialValue:)(&v37, &type metadata for String);
  swift_endAccess(v39);
  swift_beginAccess(&a15[OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__representativeText], v39, 33, 0);
  v37 = a11;
  v38 = v27;
  Published.init(initialValue:)(&v37, &type metadata for String);
  swift_endAccess(v39);
  swift_beginAccess(&a15[OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__noteText], v39, 33, 0);
  v21 = v28;
  v37 = v28;
  v38 = a14;
  swift_bridgeObjectRetain(a14);
  Published.init(initialValue:)(&v37, &type metadata for String);
  swift_endAccess(v39);
  v22 = v30;
  v20(v19, v30, v16);
  swift_bridgeObjectRelease(a14);
  v23 = HIBYTE(a14) & 0xF;
  if ((a14 & 0x2000000000000000) == 0)
    v23 = v21 & 0xFFFFFFFFFFFFLL;
  v24 = sub_3CBC0(v31, v32, v33, v34, v35, (uint64_t)v19, v36, v23 != 0, a15);
  v25 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v25(v22, v16);
  v25(v29, v16);
  return v24;
}

unint64_t sub_3CF30(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE *i;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_319AC(&qword_3B6698);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_BYTE *)(a1 + 40); ; i += 16)
    {
      v5 = *((_QWORD *)i - 1);
      v6 = *i;
      result = sub_3B7F8(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      *(_BYTE *)(v3[7] + result) = v6;
      v9 = v3[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v3[2] = v11;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_3D004(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  __int128 v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_319AC((uint64_t *)&unk_3BC000);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (_QWORD *)(a1 + 56); ; i += 4)
    {
      v5 = *(i - 3);
      v13 = *((_OWORD *)i - 1);
      v6 = *i;
      result = sub_3B7F8(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v9 = v3[7] + 24 * result;
      *(_OWORD *)v9 = v13;
      *(_QWORD *)(v9 + 16) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_3D0F8(_QWORD *a1)
{
  return sub_3D11C(a1, &qword_3B6678);
}

unint64_t sub_3D104(_QWORD *a1)
{
  return sub_3D220(a1, &qword_3B6670);
}

unint64_t sub_3D110(_QWORD *a1)
{
  return sub_3D11C(a1, &qword_3B6680);
}

unint64_t sub_3D11C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v2 = a1[2];
  if (!v2)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_319AC(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v6 = a1[4];
  v5 = a1[5];
  result = sub_3B7F8(v6);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain(v5);
    return (unint64_t)v4;
  }
  v9 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v6;
    *(_QWORD *)(v4[7] + v10) = v5;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v4[2] = v13;
    if (!--v2)
      goto LABEL_8;
    v14 = v9 + 2;
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_retain(v5);
    result = sub_3B7F8(v6);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_3D214(_QWORD *a1)
{
  return sub_3D220(a1, (uint64_t *)&unk_3BC020);
}

unint64_t sub_3D220(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v2 = a1[2];
  if (!v2)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_319AC(a2);
  v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v6 = a1[4];
  v5 = a1[5];
  result = sub_3B7F8(v6);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v4;
  }
  v9 = a1 + 7;
  while (1)
  {
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v4[6] + v10) = v6;
    *(_QWORD *)(v4[7] + v10) = v5;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v4[2] = v13;
    if (!--v2)
      goto LABEL_8;
    v14 = v9 + 2;
    v6 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v5);
    result = sub_3B7F8(v6);
    v9 = v14;
    v5 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_3D318(uint64_t a1)
{
  return sub_3D7D0(a1, (uint64_t *)&unk_3BBE30);
}

unint64_t sub_3D324(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_319AC((uint64_t *)&unk_3BC060);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = a1 + 32; ; i += 72)
    {
      sub_3F238(i, (uint64_t)&v11, &qword_3B66A0);
      v5 = v11;
      result = sub_3B7F8(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = sub_3F1FC((uint64_t)&v12, v3[7] + (result << 6));
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_3D424(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_319AC(&qword_3B66A8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    v4 = (uint64_t *)(a1 + 48);
    while (1)
    {
      v19 = v1;
      v6 = *(v4 - 2);
      v5 = *(v4 - 1);
      v7 = *v4;
      v8 = v4[1];
      v9 = v4[2];
      v10 = v4[3];
      v12 = v4[4];
      v11 = v4[5];
      result = sub_3B7F8(v6);
      if ((v14 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v6;
      v15 = (_QWORD *)(v3[7] + 56 * result);
      *v15 = v5;
      v15[1] = v7;
      v15[2] = v8;
      v15[3] = v9;
      v15[4] = v10;
      v15[5] = v12;
      v15[6] = v11;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v4 += 8;
      v3[2] = v18;
      swift_unknownObjectRetain(v12);
      swift_unknownObjectRetain(v5);
      swift_unknownObjectRetain(v9);
      v1 = v19 - 1;
      if (v19 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_3D54C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_319AC(&qword_3B66B0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = sub_3B7F8(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain(v6);
    result = sub_3B7F8(v4);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

unint64_t sub_3D658(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_319AC((uint64_t *)&unk_3BBE00);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 64); ; i += 13)
    {
      v5 = *(i - 4);
      v6 = *((_BYTE *)i - 24);
      v8 = *(i - 2);
      v7 = *(i - 1);
      v10 = *i;
      v9 = i[1];
      v21 = v1;
      v22 = i[2];
      v11 = i[3];
      v12 = i[4];
      v23 = *(_OWORD *)(i + 5);
      v13 = i[7];
      v14 = i[8];
      result = sub_3B7F8(v5);
      if ((v16 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      v17 = v3[7] + 96 * result;
      *(_BYTE *)v17 = v6;
      *(_QWORD *)(v17 + 8) = v8;
      *(_QWORD *)(v17 + 16) = v7;
      *(_QWORD *)(v17 + 24) = v10;
      *(_QWORD *)(v17 + 32) = v9;
      *(_QWORD *)(v17 + 40) = v22;
      *(_QWORD *)(v17 + 48) = v11;
      *(_QWORD *)(v17 + 56) = v12;
      *(_OWORD *)(v17 + 64) = v23;
      *(_QWORD *)(v17 + 80) = v13;
      *(_QWORD *)(v17 + 88) = v14;
      v18 = v3[2];
      v19 = __OFADD__(v18, 1);
      v20 = v18 + 1;
      if (v19)
        goto LABEL_10;
      v3[2] = v20;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v14);
      v1 = v21 - 1;
      if (v21 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_3D7C4(uint64_t a1)
{
  return sub_3D7D0(a1, &qword_3B65F0);
}

unint64_t sub_3D7D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  _OWORD *i;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __int128 v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_319AC(a2);
    v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
    for (i = (_OWORD *)(a1 + 40); ; i = (_OWORD *)((char *)i + 24))
    {
      v6 = *((_QWORD *)i - 1);
      v12 = *i;
      result = sub_3B7F8(v6);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v4[6] + 8 * result) = v6;
      *(_OWORD *)(v4[7] + 16 * result) = v12;
      v9 = v4[2];
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
        goto LABEL_10;
      v4[2] = v11;
      if (!--v2)
        return (unint64_t)v4;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_3D8A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_319AC(&qword_3B6658);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = a1 + 32; ; i += 48)
    {
      sub_3F238(i, (uint64_t)&v11, &qword_3B6660);
      v5 = v11;
      result = sub_3B7F8(v11);
      if ((v7 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v3[6] + 8 * result) = v5;
      result = sub_3F1CC(&v12, v3[7] + 40 * result);
      v8 = v3[2];
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_10;
      v3[2] = v10;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_3D9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t j;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;

  v6 = a1 + 64;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 64);
  v29 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  i = 0;
  if (v9)
    goto LABEL_28;
LABEL_6:
  v12 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    return result;
  }
  if (v12 < v29)
  {
    v13 = *(_QWORD *)(v6 + 8 * v12);
    ++i;
    if (v13)
      goto LABEL_20;
    i = v12 + 1;
    if (v12 + 1 < v29)
    {
      v13 = *(_QWORD *)(v6 + 8 * i);
      if (v13)
        goto LABEL_20;
      i = v12 + 2;
      if (v12 + 2 < v29)
      {
        v13 = *(_QWORD *)(v6 + 8 * i);
        if (v13)
          goto LABEL_20;
        i = v12 + 3;
        if (v12 + 3 < v29)
        {
          v13 = *(_QWORD *)(v6 + 8 * i);
          if (v13)
            goto LABEL_20;
          v14 = v12 + 4;
          if (v14 < v29)
          {
            v13 = *(_QWORD *)(v6 + 8 * v14);
            for (i = v14; !v13; ++v14)
            {
              i = v14 + 1;
              if (__OFADD__(v14, 1))
                goto LABEL_33;
              if (i >= v29)
                goto LABEL_30;
              v13 = *(_QWORD *)(v6 + 8 * i);
            }
LABEL_20:
            v9 = (v13 - 1) & v13;
            for (j = __clz(__rbit64(v13)) + (i << 6); ; j = v28 | (i << 6))
            {
              v16 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * j);
              KeyPath = swift_getKeyPath(&unk_2E5A18);
              v18 = swift_getKeyPath(&unk_2E5A40);
              v19 = swift_retain(v16);
              static Published.subscript.getter(&v30, v19, KeyPath);
              swift_release(KeyPath);
              swift_release(v18);
              v20 = v30;
              if (*(_QWORD *)(v30 + 16))
              {
                sub_3B8A0(a2, a3);
                v22 = v21;
                swift_bridgeObjectRelease(v20);
                if ((v22 & 1) != 0)
                  goto LABEL_29;
              }
              else
              {
                swift_bridgeObjectRelease(v30);
              }
              v23 = swift_getKeyPath(&unk_2E5A60);
              v24 = swift_getKeyPath(&unk_2E5A88);
              static Published.subscript.getter(&v30, v16, v23);
              swift_release(v23);
              swift_release(v24);
              v25 = v30;
              if (*(_QWORD *)(v30 + 16))
              {
                sub_3B8A0(a2, a3);
                v27 = v26;
                swift_bridgeObjectRelease(v25);
                if ((v27 & 1) != 0)
                {
LABEL_29:
                  swift_release(a1);
                  return v16;
                }
                result = swift_release(v16);
                if (!v9)
                  goto LABEL_6;
              }
              else
              {
                swift_release(v16);
                result = swift_bridgeObjectRelease(v25);
                if (!v9)
                  goto LABEL_6;
              }
LABEL_28:
              v28 = __clz(__rbit64(v9));
              v9 &= v9 - 1;
            }
          }
        }
      }
    }
  }
LABEL_30:
  swift_release(a1);
  return 0;
}

unint64_t sub_3DC50()
{
  unint64_t result;

  result = qword_3B5D68;
  if (!qword_3B5D68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnnotationStyle, &type metadata for AnnotationStyle);
    atomic_store(result, (unint64_t *)&qword_3B5D68);
  }
  return result;
}

uint64_t sub_3DC94()
{
  return sub_3DCC0(&qword_3B5D70, &qword_3B5D78, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t sub_3DCC0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_31A38(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_3DD04()
{
  unint64_t result;

  result = qword_3B5D80;
  if (!qword_3B5D80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AnnotationEventType, &type metadata for AnnotationEventType);
    atomic_store(result, (unint64_t *)&qword_3B5D80);
  }
  return result;
}

unint64_t sub_3DD4C()
{
  unint64_t result;

  result = qword_3B5D88;
  if (!qword_3B5D88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AnnotationProvidingOverlap, &type metadata for _AnnotationProvidingOverlap);
    atomic_store(result, (unint64_t *)&qword_3B5D88);
  }
  return result;
}

uint64_t sub_3DD98@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC8BookEPUB16AnnotationEntity_location);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_3DDF0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style, &qword_3B5CB8);
}

uint64_t sub_3DE14(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3B6608, &OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__style, &qword_3B5CB8);
}

uint64_t sub_3DE40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText, (uint64_t *)&unk_3B8E70);
}

uint64_t sub_3DE64(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3B8E20, &OBJC_IVAR____TtC8BookEPUB25HighlightAnnotationEntity__hasNoteText, (uint64_t *)&unk_3B8E70);
}

uint64_t sub_3DE90(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__selectedText, &qword_3B5CD0);
}

uint64_t sub_3DEB4(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, (uint64_t *)&unk_3B82E0, &OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__selectedText, &qword_3B5CD0);
}

uint64_t sub_3DEE0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__representativeText, &qword_3B5CD0);
}

uint64_t sub_3DF04(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, (uint64_t *)&unk_3B82E0, &OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__representativeText, &qword_3B5CD0);
}

uint64_t sub_3DF30(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__noteText, &qword_3B5CD0);
}

uint64_t sub_3DF54(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, (uint64_t *)&unk_3B82E0, &OBJC_IVAR____TtC8BookEPUB31HighlightAnnotationDetailEntity__noteText, &qword_3B5CD0);
}

uint64_t sub_3DF80(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__bookmarks, &qword_3B5CF0);
}

uint64_t sub_3DFA4(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3B5CF8, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__bookmarks, &qword_3B5CF0);
}

uint64_t sub_3DFD0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__highlights, &qword_3B5D08);
}

uint64_t sub_3DFF4(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3B5D10, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__highlights, &qword_3B5D08);
}

uint64_t sub_3E020(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__serializedUpgradeAnnotations, &qword_3B5D20);
}

uint64_t sub_3E044(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3B5D28, &OBJC_IVAR____TtC8BookEPUB25DocumentAnnotationsEntity__serializedUpgradeAnnotations, &qword_3B5D20);
}

uint64_t sub_3E070(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations, &qword_3B5D50);
}

uint64_t sub_3E094(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3B5D58, &OBJC_IVAR____TtC8BookEPUB20BookAnnotationEntity__documentAnnotations, &qword_3B5D50);
}

uint64_t getEnumTagSinglePayload for AnnotationStyle(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnotationStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_3E19C + 4 * byte_2E589F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_3E1D0 + 4 * byte_2E589A[v4]))();
}

uint64_t sub_3E1D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3E1D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3E1E0);
  return result;
}

uint64_t sub_3E1EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3E1F4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_3E1F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3E200(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationStyle()
{
  return &type metadata for AnnotationStyle;
}

uint64_t sub_3E21C()
{
  return type metadata accessor for AnnotationEntity(0);
}

uint64_t type metadata accessor for AnnotationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3B5DB8, (uint64_t)&nominal type descriptor for AnnotationEntity);
}

uint64_t sub_3E238(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_2E5DD8;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = &unk_2E5DD8;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AnnotationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AnnotationEntity);
}

uint64_t dispatch thunk of ElementPaginationEntityReference.entityType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AnnotationEntity.location.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AnnotationEntity.location.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.$bookmarks.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of CurrentThemePersistence.themeType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of AnnotationEntity.__allocating_init(uniqueID:documentOrdinal:location:modificationDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of NavigationHistoryController.hasHistory(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t sub_3E318()
{
  return type metadata accessor for HighlightAnnotationEntity(0);
}

uint64_t type metadata accessor for HighlightAnnotationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3B5EC0, (uint64_t)&nominal type descriptor for HighlightAnnotationEntity);
}

void sub_3E334(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_3E56C(319, &qword_3B5ED0, (uint64_t)&type metadata for AnnotationStyle);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_3E56C(319, (unint64_t *)&qword_3B5ED8, (uint64_t)&type metadata for Bool);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 184);
    }
  }
}

uint64_t method lookup function for HighlightAnnotationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HighlightAnnotationEntity);
}

uint64_t dispatch thunk of ContentSizeCategoryManager.contentSizeCategory.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of HighlightAnnotationEntity.$style.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of HighlightAnnotationEntity.hasNoteText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of HighlightAnnotationEntity.$hasNoteText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of HighlightAnnotationEntity.__allocating_init(uniqueID:documentOrdinal:location:modificationDate:style:hasNoteText:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t dispatch thunk of HighlightAnnotationEntity.updateFrom(highlightAnnotationEntity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t sub_3E42C()
{
  return type metadata accessor for HighlightAnnotationDetailEntity(0);
}

uint64_t type metadata accessor for HighlightAnnotationDetailEntity(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3B6058, (uint64_t)&nominal type descriptor for HighlightAnnotationDetailEntity);
}

void sub_3E448(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(v2 - 8) + 64;
    sub_3E56C(319, (unint64_t *)&unk_3B6068, (uint64_t)&type metadata for String);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = v7;
      v9 = v7;
      swift_updateClassMetadata2(a1, 256, 4, &v6, a1 + 312);
    }
  }
}

uint64_t method lookup function for HighlightAnnotationDetailEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HighlightAnnotationDetailEntity);
}

uint64_t dispatch thunk of HighlightAnnotationDetailEntity.selectedText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of HighlightAnnotationDetailEntity.$selectedText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of HighlightAnnotationDetailEntity.representativeText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of HighlightAnnotationDetailEntity.$representativeText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of HighlightAnnotationDetailEntity.noteText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of HighlightAnnotationDetailEntity.$noteText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of HighlightAnnotationDetailEntity.__allocating_init(uniqueID:documentOrdinal:location:style:creationDate:modificationDate:selectedText:representativeText:noteText:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 488))();
}

uint64_t dispatch thunk of HighlightAnnotationDetailEntity.hasNote.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

void sub_3E56C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_3E5B0()
{
  return type metadata accessor for DocumentAnnotationsEntity(0);
}

uint64_t type metadata accessor for DocumentAnnotationsEntity(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3B62A8, (uint64_t)&nominal type descriptor for DocumentAnnotationsEntity);
}

void sub_3E5CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_3E8E4(319, &qword_3B62B8, &qword_3B5D30);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_3E8E4(319, &qword_3B62C0, &qword_3B5D38);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_3E8E4(319, (unint64_t *)&unk_3B62C8, &qword_3B5D40);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        v8[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        swift_updateClassMetadata2(a1, 256, 5, v8, a1 + 80);
      }
    }
  }
}

uint64_t method lookup function for DocumentAnnotationsEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for DocumentAnnotationsEntity);
}

uint64_t dispatch thunk of NavigationHistoryController.endOfList.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.bookmarks.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.$bookmarks.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of Stack.push(value:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.highlights.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.highlights.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.$highlights.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.$highlights.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.$highlights.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.serializedUpgradeAnnotations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.serializedUpgradeAnnotations.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.serializedUpgradeAnnotations.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.$serializedUpgradeAnnotations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.$serializedUpgradeAnnotations.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.$serializedUpgradeAnnotations.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.__allocating_init(documentOrdinal:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of DocumentAnnotationsEntity.debugDescription.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t sub_3E78C()
{
  return type metadata accessor for BookAnnotationEntity(0);
}

uint64_t type metadata accessor for BookAnnotationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3B6458, (uint64_t)&nominal type descriptor for BookAnnotationEntity);
}

uint64_t sub_3E7A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

void sub_3E7DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_2E5DD8;
  sub_3E8E4(319, (unint64_t *)&unk_3B6468, &qword_3B5D60);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t method lookup function for BookAnnotationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookAnnotationEntity);
}

uint64_t dispatch thunk of NavigationHistoryController.historyList.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PlatformViewProvider.view.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of Stack.stackContents.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of BookAnnotationEntity.$documentAnnotations.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of NavigationHistoryController.add(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of NavigationHistoryController.clearForwardHistory()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SearchBarResponderState.resignFirstResponder.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of BookAnnotationEntity.__allocating_init(assetID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of BookAnnotationEntity.documentAnnotationsEntity(containing:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of BookmarkPaginationEntity.annotationUUID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

void sub_3E8E4(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_31A38(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_3E930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_3E938(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 3 || a4 == 1)
    return swift_bridgeObjectRetain(a2);
  if (!a4)
    return swift_retain(result);
  return result;
}

uint64_t sub_3E960(uint64_t a1)
{
  return sub_3E974(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_3E974(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 3 || a4 == 1)
    return swift_bridgeObjectRelease(a2);
  if (!a4)
    return swift_release(result);
  return result;
}

uint64_t sub_3E99C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_3E938(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t sub_3E9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_3E938(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_3E974(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for SelectionInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_3EA78(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_3E974(v5, v7, v6, v8);
  return a1;
}

uint64_t sub_3EAC4(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_3EB0C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_3EB54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_3EB5C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

uint64_t type metadata accessor for AnnotationChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnnotationChange);
}

uint64_t getEnumTagSinglePayload for AnnotationEventType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AnnotationEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_3EC4C + 4 * byte_2E58A9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_3EC80 + 4 * byte_2E58A4[v4]))();
}

uint64_t sub_3EC80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_3EC88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x3EC90);
  return result;
}

uint64_t sub_3EC9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x3ECA4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_3ECA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_3ECB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnnotationEventType()
{
  return &type metadata for AnnotationEventType;
}

uint64_t destroy for _AnnotationProvidingOverlap(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for _AnnotationProvidingOverlap(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for _AnnotationProvidingOverlap(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for _AnnotationProvidingOverlap(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for _AnnotationProvidingOverlap(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = a1[4];
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _AnnotationProvidingOverlap(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _AnnotationProvidingOverlap(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _AnnotationProvidingOverlap()
{
  return &type metadata for _AnnotationProvidingOverlap;
}

uint64_t dispatch thunk of ExternalContentLoadEventHandler.externalApprovalCacheDidChange()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ExternalContentLoadEventHandler.reevaluateCurrentRules()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NavigationHistoryControlling.clearForwardHistory()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ContentSizeCategoryManaging.canDecreaseContentSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of NavigationHistoryControlling.next()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didTapResetTheme(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of AnnotationProviding.bookmark(location:documentOrdinal:pageOffset:eventType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 56))();
}

uint64_t dispatch thunk of AnnotationProviding.highlight(location:selectedText:representativeText:style:mergeWithExisting:updateCurrentHighlightStyle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  int *v18;
  _QWORD *v19;
  int *v21;

  v18 = *(int **)(a11 + 64);
  v21 = (int *)((char *)v18 + *v18);
  v19 = (_QWORD *)swift_task_alloc(v18[1]);
  *(_QWORD *)(v11 + 16) = v19;
  *v19 = v11;
  v19[1] = sub_3EFD8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))v21)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_3EFD8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of AnnotationProviding.determineOverlap(cfi:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of ContentMediatorEventHandling.contentWillExitFullscreen(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ContentMediatorEventHandling.contentDidExitFullscreen(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of AnnotationProviding.deleteAssociatedNotesFromAnnotationsWithUUIDs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 96);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_3F0C0;
  return v10(a1, a2, a3);
}

uint64_t sub_3F0C0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t dispatch thunk of AnnotationProviding.highlightAnnotationDetail(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t sub_3F110(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_3F14C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

_OWORD *sub_3F180(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_3F190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B6638;
  if (!qword_3B6638)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B6638);
  }
  return result;
}

uint64_t sub_3F1CC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_3F1E4(uint64_t result, char a2)
{
  if (a2 == 4 || a2 == 2)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t sub_3F1FC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for BookContentAdornmentState(a2, a1);
  return a2;
}

uint64_t sub_3F238(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_319AC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_3F27C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

void sub_3F2BC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_3F2FC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_3F35C + 4 * byte_2E5FA4[a2]))(0x6D756964656DLL);
}

uint64_t sub_3F35C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6D756964656DLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6D756964656DLL, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_3F400(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0x69526F547466656CLL;
  v3 = 0xEB00000000746867;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x4C6F547468676972;
    else
      v5 = 0x6C61636974726576;
    if (v4 == 1)
      v6 = 0xEB00000000746665;
    else
      v6 = 0xE800000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x69526F547466656CLL;
  v6 = 0xEB00000000746867;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x4C6F547468676972;
    else
      v2 = 0x6C61636974726576;
    if (v7 == 1)
      v3 = 0xEB00000000746665;
    else
      v3 = 0xE800000000000000;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

void sub_3F514(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_3F564(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_3F5DC + 4 * byte_2E5FAE[a2]))(0x7465697571);
}

uint64_t sub_3F5DC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7465697571 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x7465697571, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_3F6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v0 = BookFontTable.rawValue.getter();
  v2 = v1;
  v3 = BookFontTable.rawValue.getter();
  if (v0 == v3 && v2 == v4)
  {
    v7 = 1;
    v6 = v2;
  }
  else
  {
    v6 = v4;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_3F738(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6574616E69676170;
  else
    v3 = 0x6C6C6F726373;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE900000000000064;
  if ((a2 & 1) != 0)
    v5 = 0x6574616E69676170;
  else
    v5 = 0x6C6C6F726373;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000064;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_3F7DC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x676E696461656CLL;
  else
    v3 = 0x7265746E6563;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x676E696461656CLL;
  else
    v5 = 0x7265746E6563;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_3F87C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC00000065766974;
  v3 = 0x61767265736E6F63;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x647261646E617473;
    else
      v5 = 0x6973736572676761;
    if (v4 == 1)
      v6 = 0xE800000000000000;
    else
      v6 = 0xEA00000000006576;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x61767265736E6F63;
  v6 = 0xEC00000065766974;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x647261646E617473;
    else
      v3 = 0x6973736572676761;
    if (v7 == 1)
      v2 = 0xE800000000000000;
    else
      v2 = 0xEA00000000006576;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_3F9A4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_3F9FC@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_3FA74 + 4 * byte_2E5FBA[a1]))(a2 + 4);
}

uint64_t sub_3FA74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x80000000002C5B10;
  if (a1 == a2 + 4 && v2 == 0x80000000002C5B10)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, a2 + 4, 0x80000000002C5B10, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_3FB28(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_3FB78(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_3FBD8 + 4 * byte_2E5FC4[a2]))(0xD000000000000015);
}

uint64_t sub_3FBD8(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x80000000002C58B0;
  if (a1 == 0xD000000000000015 && v1 == 0x80000000002C58B0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000015, 0x80000000002C58B0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_3FC7C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_3FCC4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_3FD5C + 4 * byte_2E5FCE[a2]))(0x6B72616D6B6F6F62);
}

uint64_t sub_3FD5C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6B72616D6B6F6F62 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6B72616D6B6F6F62, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

uint64_t sub_3FE44(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000011;
  v3 = 0x80000000002C5A20;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6B63696C63;
    else
      v5 = 0x6E6F69746361;
    if (v4 == 1)
      v6 = 0xE500000000000000;
    else
      v6 = 0xE600000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000011;
  v6 = 0x80000000002C5A20;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x6B63696C63;
    else
      v2 = 0x6E6F69746361;
    if (v7 == 1)
      v3 = 0xE500000000000000;
    else
      v3 = 0xE600000000000000;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

void sub_3FF40(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_3FF80(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_3FFF8 + 4 * byte_2E5FD8[a2]))(0x73756F6976657270);
}

uint64_t sub_3FFF8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x73756F6976657270 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x73756F6976657270, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

uint64_t sub_400B4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C6C6F726373;
  else
    v3 = 1684107116;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6C6C6F726373;
  else
    v5 = 1684107116;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_4014C(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0x614D746E65696C63;
  if (v2)
    v4 = 0xED0000646567616ELL;
  else
    v4 = 0x80000000002C5C10;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0x614D746E65696C63;
  if ((a2 & 1) != 0)
    v6 = 0x80000000002C5C10;
  else
    v6 = 0xED0000646567616ELL;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_40200(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  char v7;

  v2 = 0xEF6E6F6974636172;
  v3 = 0x65746E4972657375;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x80000000002C5BC0;
    else
      v4 = 0x80000000002C5BE0;
    v5 = 0xD000000000000013;
    v6 = a2;
    if (!a2)
      goto LABEL_10;
    goto LABEL_6;
  }
  v5 = 0x65746E4972657375;
  v4 = 0xEF6E6F6974636172;
  v6 = a2;
  if (a2)
  {
LABEL_6:
    if (v6 == 1)
      v2 = 0x80000000002C5BC0;
    else
      v2 = 0x80000000002C5BE0;
    v3 = 0xD000000000000013;
  }
LABEL_10:
  if (v5 == v3 && v4 == v2)
  {
    v7 = 1;
    v2 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  return v7 & 1;
}

void sub_40310(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_40368(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_403EC + 4 * byte_2E5FE1[a2]))(0x646574726F6261);
}

uint64_t sub_403EC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x646574726F6261 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x646574726F6261, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE700000000000000);
  return v2 & 1;
}

void sub_404B8(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_40514(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_40588 + 4 * byte_2E5FEA[a2]))(0x4C6F547468676972);
}

uint64_t sub_40588(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4C6F547468676972 && v1 == 0xEB00000000746665)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x4C6F547468676972, 0xEB00000000746665, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB00000000746665);
  return v2 & 1;
}

uint64_t BookThemeViewModel.font.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t BookThemeViewModel.accessibilityDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  char v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t KeyPath;
  uint64_t v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v1 = sub_319AC(&qword_3BBEB0);
  v2 = (_QWORD *)swift_allocObject(v1, 48, 7);
  *((_OWORD *)v2 + 1) = xmmword_2E5F80;
  v3 = *(_BYTE *)(v0 + 49);
  v4 = *(_BYTE *)(v0 + 50);
  v5 = *(_QWORD *)(v0 + 104);
  LOBYTE(v31) = *(_BYTE *)(v0 + 48);
  BYTE1(v31) = v3;
  BYTE2(v31) = v4;
  v6 = *(_OWORD *)(v0 + 56);
  v32 = v6;
  v33 = *(_OWORD *)(v0 + 72);
  v34 = *(_OWORD *)(v0 + 88);
  v35 = v5;
  v7 = *(_QWORD *)(v0 + 16);
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 40);
    v8 = *(void **)(v7 + 48);
    v29 = v6;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)&v6 = v29;
  }
  else
  {
    v9 = 0;
    v8 = (void *)0xE000000000000000;
  }
  v10 = v6;
  swift_bridgeObjectRetain(v6);
  v11._countAndFlagsBits = v9;
  v11._object = v8;
  v12 = BookThemeEntity.accessibleDescription(fontDisplayName:)(v11);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v8);
  *((Swift::String *)v2 + 2) = v12;
  if ((BookThemeViewModel.enabled.getter() & 1) != 0)
  {
    if (!v7
      || (KeyPath = swift_getKeyPath(&unk_2E6010),
          v31 = v7,
          v14 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel), ObservationRegistrar.access<A, B>(_:keyPath:)(&v31, KeyPath, v14), swift_release(KeyPath), swift_beginAccess(v7 + 24, &v31, 0, 0), *(_BYTE *)(v7 + 32) != 1)|| *(_QWORD *)(v7 + 24) != 1)
    {
      BookThemeViewModel.overlayState.getter(&v30);
      __asm { BR              X10 }
    }
  }
  v15 = BookEPUBBundle();
  v16 = String._bridgeToObjectiveC()();
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, v17, 0);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v23 = v2[2];
  v22 = v2[3];
  if (v23 >= v22 >> 1)
    v2 = sub_42140((_QWORD *)(v22 > 1), v23 + 1, 1, v2);
  v2[2] = v23 + 1;
  v24 = &v2[2 * v23];
  v24[4] = v19;
  v24[5] = v21;
  v30 = v2;
  v25 = sub_319AC((uint64_t *)&unk_3B8C90);
  v26 = sub_41BF4();
  v27 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v25, v26);
  swift_bridgeObjectRelease(v2);
  return v27;
}

uint64_t BookThemeViewModel.enabled.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1
    || (v2 = swift_getKeyPath(&unk_2E6010),
        v8[0] = v1,
        v3 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel), ObservationRegistrar.access<A, B>(_:keyPath:)(v8, v2, v3), swift_release(v2), swift_beginAccess(v1 + 24, &v7, 0, 0), *(_BYTE *)(v1 + 32) != 1)|| *(_QWORD *)(v1 + 24))
  {
    KeyPath = swift_getKeyPath(&unk_2E6038);
    v8[0] = v0;
    v5 = sub_34284(&qword_3BBB40, type metadata accessor for BookThemeViewModel, (uint64_t)&protocol conformance descriptor for BookThemeViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
    swift_release(KeyPath);
    swift_beginAccess(v0 + 41, v8, 0, 0);
    if ((*(_BYTE *)(v0 + 41) & 1) == 0)
      __asm { BR              X11 }
  }
  return 1;
}

uint64_t BookThemeViewModel.unavailable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  _QWORD v5[3];

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return 0;
  KeyPath = swift_getKeyPath(&unk_2E6010);
  v5[0] = v1;
  v3 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v5, KeyPath, v3);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 24, v5, 0, 0);
  if (*(_QWORD *)(v1 + 24) == 1)
    return *(unsigned __int8 *)(v1 + 32);
  else
    return 0;
}

void BookThemeViewModel.overlayState.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD v12[3];

  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
  {
LABEL_7:
    if (*(_QWORD *)(v1 + 56))
      LOBYTE(v7) = 3;
    else
      LOBYTE(v7) = 0;
    goto LABEL_12;
  }
  KeyPath = swift_getKeyPath(&unk_2E6010);
  v12[0] = v3;
  v5 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v5);
  swift_release(KeyPath);
  v6 = (uint64_t *)(v3 + 24);
  swift_beginAccess(v3 + 24, v12, 0, 0);
  if (*(_BYTE *)(v3 + 32) != 1 || (v7 = *v6, *v6 != 1))
  {
    v8 = swift_getKeyPath(&unk_2E6010);
    v11[0] = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v11, v8, v5);
    swift_release(v8);
    swift_beginAccess(v3 + 24, v11, 0, 0);
    if (*(_BYTE *)(v3 + 32) == 1 && (unint64_t)*v6 > 1)
    {
      LOBYTE(v7) = 1;
      goto LABEL_12;
    }
    v9 = swift_getKeyPath(&unk_2E6010);
    v10 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, v9, v5);
    swift_release(v9);
    if (*(_BYTE *)(v3 + 32) != 1)
    {
      LOBYTE(v7) = 2;
      goto LABEL_12;
    }
    goto LABEL_7;
  }
LABEL_12:
  *a1 = v7;
}

uint64_t BookThemeViewModel.accessibilityHint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  NSString v21;
  id v22;
  _QWORD v24[3];
  char v25;

  v1 = v0;
  if ((BookThemeViewModel.enabled.getter() & 1) == 0
    || (v2 = *(_QWORD *)(v0 + 16)) != 0
    && (KeyPath = swift_getKeyPath(&unk_2E6010),
        v24[0] = v2,
        v4 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel), ObservationRegistrar.access<A, B>(_:keyPath:)(v24, KeyPath, v4), swift_release(KeyPath), swift_beginAccess(v2 + 24, v24, 0, 0), *(_BYTE *)(v2 + 32) == 1)&& *(_QWORD *)(v2 + 24) == 1)
  {
    v5 = BookEPUBBundle();
    v6 = String._bridgeToObjectiveC()();
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, v7, 0);

    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = sub_319AC(&qword_3B66F8);
    v13 = swift_allocObject(v12, 72, 7);
    v14 = v13;
    *(_OWORD *)(v13 + 16) = xmmword_2E5F80;
    v15 = *(_BYTE *)(v1 + 40) == 0;
    if (*(_BYTE *)(v1 + 40))
      v16 = 1312902231;
    else
      v16 = 0x69462D6957;
    if (v15)
      v17 = 0xE500000000000000;
    else
      v17 = 0xE400000000000000;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_42298();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v17;
    v18 = static String.localizedStringWithFormat(_:_:)(v9, v11, v14);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v14);
  }
  else
  {
    BookThemeViewModel.overlayState.getter(&v25);
    if (v25 == 1)
    {
      v19 = BookEPUBBundle();
      v20 = String._bridgeToObjectiveC()();
      v21 = String._bridgeToObjectiveC()();
      v22 = objc_msgSend(v19, "localizedStringForKey:value:table:", v20, v21, 0);

      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    }
    else
    {
      return 0;
    }
  }
  return v18;
}

uint64_t BookThemeViewModel.defaultFontAvailable.getter()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_2E6038);
  v4[0] = v0;
  v2 = sub_34284(&qword_3BBB40, type metadata accessor for BookThemeViewModel, (uint64_t)&protocol conformance descriptor for BookThemeViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 41, v4, 0, 0);
  return *(unsigned __int8 *)(v0 + 41);
}

void sub_41254(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v6[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E6038);
  v6[0] = v3;
  v5 = sub_34284(&qword_3BBB40, type metadata accessor for BookThemeViewModel, (uint64_t)&protocol conformance descriptor for BookThemeViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 41, v6, 0, 0);
  *a2 = *(_BYTE *)(v3 + 41);
}

uint64_t sub_412F4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E6038);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_34284(&qword_3BBB40, type metadata accessor for BookThemeViewModel, (uint64_t)&protocol conformance descriptor for BookThemeViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_422DC, v7, (char *)&type metadata for () + 8, v5);
  return swift_release(KeyPath);
}

uint64_t BookThemeViewModel.defaultFontAvailable.setter(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_2E6038);
  v7 = v1;
  v8 = a1;
  v9 = v1;
  v4 = sub_34284(&qword_3BBB40, type metadata accessor for BookThemeViewModel, (uint64_t)&protocol conformance descriptor for BookThemeViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_422DC, &v6, (char *)&type metadata for () + 8, v4);
  return swift_release(KeyPath);
}

uint64_t sub_41444(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE v5[24];

  result = swift_beginAccess(a1 + 41, v5, 1, 0);
  *(_BYTE *)(a1 + 41) = a2;
  return result;
}

void (*BookThemeViewModel.defaultFontAvailable.modify(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = malloc(0x30uLL);
  *a1 = v4;
  v4[3] = v2;
  KeyPath = swift_getKeyPath(&unk_2E6038);
  v4[4] = OBJC_IVAR____TtC8BookEPUB18BookThemeViewModel___observationRegistrar;
  *v4 = v2;
  v6 = sub_34284(&qword_3BBB40, type metadata accessor for BookThemeViewModel, (uint64_t)&protocol conformance descriptor for BookThemeViewModel);
  v4[5] = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v6);
  swift_release(KeyPath);
  *v4 = v2;
  v7 = swift_getKeyPath(&unk_2E6038);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v4, v7, v6);
  swift_release(v7);
  swift_beginAccess(v2 + 41, v4, 33, 0);
  return sub_41588;
}

void sub_41588(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;

  v1 = (_QWORD *)*a1;
  swift_endAccess(*a1);
  v2 = v1[5];
  *v1 = v1[3];
  KeyPath = swift_getKeyPath(&unk_2E6038);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v1, KeyPath, v2);
  swift_release(KeyPath);
  free(v1);
}

uint64_t PaginationLayoutConfiguration.pageProgressDirection.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

void BookThemeViewModel.title.getter()
{
  uint64_t v0;

  BookThemeType.localizedTitle.getter(*(_BYTE *)(v0 + 48));
}

uint64_t BookThemeViewModel.fontFamily.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + 48);
  v2 = *(unsigned __int8 *)(v0 + 50);
  v3 = *(_QWORD *)(v0 + 56);
  if (!v3 || !*(_QWORD *)(v3 + 16) || (v4 = sub_3B828(v2), (v5 & 1) == 0))
    __asm { BR              X9 }
  v6 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 16 * v4);
  v7 = *v6;
  swift_bridgeObjectRetain(v6[1]);
  return v7;
}

uint64_t BookThemeViewModel.backgroundColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_41774((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))BookThemeEntity.backgroundColor.getter, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t BookThemeViewModel.textColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_41774((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))BookThemeEntity.textColor.getter, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t BookThemeViewModel.textSecondaryColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_41774((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))BookThemeEntity.secondaryLabelColor.getter, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t BookThemeViewModel.textTertiaryColor.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_41774((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))BookThemeEntity.tertiaryLabel.getter, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_41774(uint64_t (*a1)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL BookThemeViewModel.isFontBolded.getter()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
    return *(_BYTE *)(v0 + 64) & 1;
  else
    return *(_BYTE *)(v0 + 48) == 3;
}

uint64_t BookThemeViewModel.isDarkTheme.getter()
{
  uint64_t v0;
  char v1;
  unint64_t v2;

  if (*(_BYTE *)(v0 + 49) == 1)
  {
    v1 = 1;
    v2 = 0xE400000000000000;
  }
  else
  {
    v2 = 0xE500000000000000;
    v1 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746867696CLL, 0xE500000000000000, 1802658148, 0xE400000000000000, 0);
  }
  swift_bridgeObjectRelease(v2);
  return v1 & 1;
}

uint64_t BookThemeViewModel.hasDarkBackground.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  if (*(_BYTE *)(v0 + 49) == 1)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
  }
  else
  {
    v1 = *(unsigned __int8 *)(v0 + 48);
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746867696CLL, 0xE500000000000000, 1802658148, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(0xE500000000000000);
    if ((v2 & 1) == 0)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t BookThemeViewModel.__allocating_init(theme:font:defaultFontFamily:defaultFontAvailable:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v18 = *(_OWORD *)(a1 + 24);
  v19 = *(_OWORD *)(a1 + 8);
  v17 = *(_OWORD *)(a1 + 40);
  v15 = *((_QWORD *)a1 + 7);
  *(_BYTE *)(v11 + 40) = MGGetBoolAnswer(CFSTR("wapi"));
  ObservationRegistrar.init()();
  *(_BYTE *)(v11 + 48) = v12;
  *(_BYTE *)(v11 + 49) = v13;
  *(_BYTE *)(v11 + 50) = v14;
  *(_OWORD *)(v11 + 56) = v19;
  *(_OWORD *)(v11 + 72) = v18;
  *(_OWORD *)(v11 + 88) = v17;
  *(_QWORD *)(v11 + 104) = v15;
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  *(_QWORD *)(v11 + 32) = a4;
  *(_BYTE *)(v11 + 41) = a5;
  return v11;
}

uint64_t BookThemeViewModel.init(theme:font:defaultFontFamily:defaultFontAvailable:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v16 = *(_OWORD *)(a1 + 24);
  v17 = *(_OWORD *)(a1 + 8);
  v15 = *(_OWORD *)(a1 + 40);
  v13 = *((_QWORD *)a1 + 7);
  *(_BYTE *)(v5 + 40) = MGGetBoolAnswer(CFSTR("wapi"));
  ObservationRegistrar.init()();
  *(_BYTE *)(v5 + 48) = v10;
  *(_BYTE *)(v5 + 49) = v11;
  *(_BYTE *)(v5 + 50) = v12;
  *(_OWORD *)(v5 + 56) = v17;
  *(_OWORD *)(v5 + 72) = v16;
  *(_OWORD *)(v5 + 88) = v15;
  *(_QWORD *)(v5 + 104) = v13;
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  *(_QWORD *)(v5 + 32) = a4;
  *(_BYTE *)(v5 + 41) = a5;
  return v5;
}

BOOL BookThemeViewModel.isOverride.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56) != 0;
}

BOOL BookThemeViewModel.downloadable.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  _QWORD v5[3];

  v1 = *(_QWORD *)(v0 + 16);
  if (v1
    && (KeyPath = swift_getKeyPath(&unk_2E6010),
        v5[0] = v1,
        v3 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel), ObservationRegistrar.access<A, B>(_:keyPath:)(v5, KeyPath, v3), swift_release(KeyPath), swift_beginAccess(v1 + 24, v5, 0, 0), *(_BYTE *)(v1 + 32) == 1))
  {
    return *(_QWORD *)(v1 + 24) > 1uLL;
  }
  else
  {
    return 0;
  }
}

unint64_t sub_41BF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B9380;
  if (!qword_3B9380)
  {
    v1 = sub_31A38((uint64_t *)&unk_3B8C90);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_3B9380);
  }
  return result;
}

uint64_t BookThemeViewModel.downloading.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  char v4;
  _QWORD v6[3];

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    KeyPath = swift_getKeyPath(&unk_2E6010);
    v6[0] = v1;
    v3 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v6, KeyPath, v3);
    swift_release(KeyPath);
    swift_beginAccess(v1 + 24, v6, 0, 0);
    v4 = *(_BYTE *)(v1 + 32) ^ 1;
  }
  else
  {
    v4 = 0;
  }
  return v4 & 1;
}

_QWORD *BookThemeViewModel.deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB18BookThemeViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t BookThemeViewModel.__deallocating_deinit()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  v1 = (char *)v0 + OBJC_IVAR____TtC8BookEPUB18BookThemeViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

void sub_41DB0(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)v1 + 48);
}

void sub_41DC0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  char v6;
  _QWORD v7[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E6010);
  v7[0] = v3;
  v5 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v7, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 24, v7, 0, 0);
  v6 = *(_BYTE *)(v3 + 32);
  *(_QWORD *)a2 = *(_QWORD *)(v3 + 24);
  *(_BYTE *)(a2 + 8) = v6;
}

uint64_t sub_41E68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[4];
  char v9;
  uint64_t v10;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E6010);
  v8[2] = v4;
  v8[3] = v2;
  v9 = v3;
  v10 = v4;
  v6 = sub_34284((unint64_t *)&qword_3B66E8, type metadata accessor for ThemeFontViewModel, (uint64_t)&protocol conformance descriptor for ThemeFontViewModel);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_44660, v8, (char *)&type metadata for () + 8, v6);
  return swift_release(KeyPath);
}

_QWORD *sub_41F14(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B6858);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_437F0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42034(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC((uint64_t *)&unk_3BBDD0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_438DC(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42140(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3BBEB0);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_439C4(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BookThemeViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_3B6738;
  if (!qword_3B6738)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookThemeViewModel);
  return result;
}

unint64_t sub_42298()
{
  unint64_t result;

  result = qword_3BE840;
  if (!qword_3BE840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_3BE840);
  }
  return result;
}

uint64_t sub_422DC()
{
  return sub_44610();
}

unint64_t sub_422F4()
{
  unint64_t result;

  result = qword_3B6700;
  if (!qword_3B6700)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookThemeViewModel.OverlayState, &type metadata for BookThemeViewModel.OverlayState);
    atomic_store(result, (unint64_t *)&qword_3B6700);
  }
  return result;
}

unint64_t sub_4233C()
{
  unint64_t result;

  result = qword_3B6708;
  if (!qword_3B6708)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookThemeType, &type metadata for BookThemeType);
    atomic_store(result, (unint64_t *)&qword_3B6708);
  }
  return result;
}

uint64_t sub_42380()
{
  return type metadata accessor for BookThemeViewModel(0);
}

uint64_t sub_42388(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_2E6178;
  v4[1] = &unk_2E6190;
  v4[2] = &unk_2E61A8;
  v4[3] = &unk_2E61A8;
  v4[4] = &unk_2E61C0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for BookThemeViewModel(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookThemeViewModel);
}

uint64_t dispatch thunk of BookThemeViewModel.__allocating_init(theme:font:defaultFontFamily:defaultFontAvailable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t storeEnumTagSinglePayload for BookThemeViewModel.OverlayState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_42480 + 4 * byte_2E6005[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_424B4 + 4 * byte_2E6000[v4]))();
}

uint64_t sub_424B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_424BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x424C4);
  return result;
}

uint64_t sub_424D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x424D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_424DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_424E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BookThemeViewModel.OverlayState()
{
  return &type metadata for BookThemeViewModel.OverlayState;
}

_QWORD *sub_42500(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B67E8);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_43AB4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42620(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B6840);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_437F0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42744(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_42CF4(a1, a2, a3, a4, &qword_3B6830, &qword_3B6808);
}

_QWORD *sub_42758(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC((uint64_t *)&unk_3B6860);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_43BA0(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42864(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3BBF70);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_43D78(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42988(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B67F0);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_437F0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42AAC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B6848);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_4421C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42BB8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC((uint64_t *)&unk_3BBE70);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_43E64(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42CE0(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_42CF4(a1, a2, a3, a4, (uint64_t *)&unk_3BBF00, &qword_3B6828);
}

_QWORD *sub_42CF4(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = a4[3];
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = a4[2];
    if (v10 <= v11)
      v12 = a4[2];
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_319AC(a5);
      v14 = (_QWORD *)swift_allocObject(v13, 16 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 17;
      v14[2] = v11;
      v14[3] = 2 * (v16 >> 4);
      v17 = v14 + 4;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
      v17 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[2 * v11 + 4])
          memmove(v17, a4 + 4, 16 * v11);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_443F4(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42E0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B6850);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_44304(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_42F18(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_42CF4(a1, a2, a3, a4, &qword_3B6800, &qword_3B6808);
}

_QWORD *sub_42F2C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3BBE40);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_437F0(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_43050(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B6818);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_43F50(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_43174(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_434D8(a1, a2, a3, a4, (uint64_t *)&unk_3BC030, type metadata accessor for ContentLoaderViewReusePool.DataEvent);
}

_QWORD *sub_43188(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_42CF4(a1, a2, a3, a4, &qword_3BBDE0, &qword_3B67F8);
}

_QWORD *sub_4319C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3BBE10);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_44128(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_432C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B6838);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_43C90(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_433CC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3BFB90);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_44044(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_434C4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_434D8(a1, a2, a3, a4, &qword_3B6820, type metadata accessor for HistoryEntity);
}

uint64_t sub_434D8(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v17 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_319AC(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v17 = (_QWORD *)swift_allocObject(v13, v16 + v15 * v12);
  v18 = j__malloc_size(v17);
  if (!v15)
    goto LABEL_29;
  if (v18 - v16 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v17[2] = v11;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  v20 = a6(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v17 + v22;
  if ((a1 & 1) != 0)
  {
    v24 = a4 + v22;
    if ((unint64_t)v17 < a4 || v23 >= v24 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v17 + v22, v24, v11, v20);
    }
    else if (v17 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v17 + v22);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_444F8(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v17;
}

_QWORD *sub_436E4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_319AC(&qword_3B6810);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_4421C(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_437F0(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 24 * a1 + 32);
  v6 = 24 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_438DC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_439C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_43AB4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 40 * a1 + 32);
  v6 = 40 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_43BA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_43C90(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_43D78(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 48 * a1 + 32);
  v6 = 48 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_43E64(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = (char *)(a4 + 72 * a1 + 32);
  v6 = 72 * v4;
  v7 = &__dst[v6];
  if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
  {
    memcpy(__dst, v5, v6);
    return v7;
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_43F50(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 48 * a1 + 32;
  v6 = a3 + 48 * v4;
  if (v5 >= v6 || v5 + 48 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_44044(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_44128(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 24 * a1 + 32;
  v6 = a3 + 24 * v4;
  if (v5 >= v6 || v5 + 24 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_4421C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_44304(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_443F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 16 * a1 + 32;
    v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      sub_319AC(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_444F8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_44610()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;
  _BYTE v4[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  result = swift_beginAccess(v1 + 41, v4, 1, 0);
  *(_BYTE *)(v1 + 41) = v2;
  return result;
}

uint64_t sub_44660()
{
  uint64_t v0;

  return sub_CC5A8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t SearchResultEntity.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SearchResultEntity.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

double SearchResultEntity.result.getter()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v1 = type metadata accessor for SearchResultEntity(0);
  *(_QWORD *)&result = swift_unknownObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 20))).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for SearchResultEntity(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3B68E8, (uint64_t)&nominal type descriptor for SearchResultEntity);
}

void SearchResultEntity.result.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for SearchResultEntity(0) + 20);
  swift_unknownObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*SearchResultEntity.result.modify())(_QWORD)
{
  type metadata accessor for SearchResultEntity(0);
  return address(of:);
}

uint64_t SearchResultEntity.chapter.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SearchResultEntity(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t SearchResultEntity.chapter.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SearchResultEntity(0) + 24));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SearchResultEntity.chapter.modify())(_QWORD)
{
  type metadata accessor for SearchResultEntity(0);
  return address(of:);
}

uint64_t SearchResultEntity.passage.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SearchResultEntity(0) + 28));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  v8 = v3[4];
  v9 = v3[5];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  return sub_44870(v4, v5, v6, v7, v8, v9);
}

uint64_t sub_44870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }
  return result;
}

__n128 SearchResultEntity.passage.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  __n128 result;
  __n128 v6;
  __int128 v7;

  v6 = (__n128)a1[1];
  v7 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  v4 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SearchResultEntity(0) + 28));
  sub_44914(*v4, v4[1], v4[2], v4[3], v4[4], v4[5]);
  result = v6;
  *(_OWORD *)v4 = v7;
  *((__n128 *)v4 + 1) = v6;
  v4[4] = v2;
  v4[5] = v3;
  return result;
}

uint64_t sub_44914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t (*SearchResultEntity.passage.modify())(_QWORD)
{
  type metadata accessor for SearchResultEntity(0);
  return address(of:);
}

uint64_t SearchResultEntity.pageName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for SearchResultEntity(0) + 32));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t SearchResultEntity.pageName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for SearchResultEntity(0) + 32));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*SearchResultEntity.pageName.modify())(_QWORD)
{
  type metadata accessor for SearchResultEntity(0);
  return address(of:);
}

uint64_t SearchResultEntity.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  int *v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];

  v30 = 0;
  v31 = 0xE000000000000000;
  _StringGuts.grow(_:)(100);
  v36[0] = 0;
  v36[1] = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  v1._object = (void *)0x80000000002C6570;
  String.append(_:)(v1);
  v2 = type metadata accessor for UUID(0);
  v3 = sub_44C84((unint64_t *)&qword_3B6870, (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 0x736572202020200ALL;
  v6._object = (void *)0xEE00203D20746C75;
  String.append(_:)(v6);
  v7 = (int *)type metadata accessor for SearchResultEntity(0);
  v30 = *(_QWORD *)(v0 + v7[5]);
  v8 = sub_319AC(&qword_3B6878);
  _print_unlocked<A, B>(_:_:)(&v30, v36, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9._countAndFlagsBits = 0x616863202020200ALL;
  v9._object = (void *)0xEF203D2072657470;
  String.append(_:)(v9);
  v10 = (uint64_t *)(v0 + v7[6]);
  v11 = *v10;
  v12 = (void *)v10[1];
  swift_bridgeObjectRetain(v12);
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 0x736170202020200ALL;
  v14._object = (void *)0xEF203D2065676173;
  String.append(_:)(v14);
  v15 = (uint64_t *)(v0 + v7[7]);
  v16 = v15[1];
  v17 = v15[2];
  v18 = v15[3];
  v19 = v15[4];
  v20 = v15[5];
  v30 = *v15;
  v31 = v16;
  v32 = v17;
  v33 = v18;
  v34 = v19;
  v35 = v20;
  sub_44870(v30, v16, v17, v18, v19, v20);
  v21 = sub_319AC(&qword_3B6880);
  v22._countAndFlagsBits = String.init<A>(describing:)(&v30, v21);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  v24._object = (void *)0x80000000002C6590;
  v24._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v24);
  v25 = (uint64_t *)(v0 + v7[8]);
  v26 = *v25;
  v27 = (void *)v25[1];
  swift_bridgeObjectRetain(v27);
  v28._countAndFlagsBits = v26;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  return v36[0];
}

uint64_t sub_44C60()
{
  return sub_44C84(&qword_3B6888, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_44C84(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SearchResultEntity(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = a3[7];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = *(uint64_t *)((char *)a2 + v12 + 8);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain(v11);
    if (v15)
    {
      *v13 = *v14;
      v13[1] = v15;
      v16 = v14[3];
      v13[2] = v14[2];
      v13[3] = v16;
      v17 = v14[4];
      v18 = v14[5];
      v13[4] = v17;
      v13[5] = v18;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v18);
    }
    else
    {
      v20 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v20;
      *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
    }
    v21 = a3[8];
    v22 = (uint64_t *)((char *)a1 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain(v24);
  }
  return a1;
}

uint64_t destroy for SearchResultEntity(uint64_t a1, int *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_unknownObjectRelease(*(_QWORD *)(a1 + a2[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  v5 = (_QWORD *)(a1 + a2[7]);
  v6 = v5[1];
  if (v6)
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5[3]);
    swift_bridgeObjectRelease(v5[5]);
  }
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t initializeWithCopy for SearchResultEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = *(_QWORD *)(a2 + v11 + 8);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain(v10);
  if (v14)
  {
    *v12 = *v13;
    v12[1] = v14;
    v15 = v13[3];
    v12[2] = v13[2];
    v12[3] = v15;
    v16 = v13[4];
    v17 = v13[5];
    v12[4] = v16;
    v12[5] = v17;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
  }
  else
  {
    v18 = *((_OWORD *)v13 + 1);
    *(_OWORD *)v12 = *(_OWORD *)v13;
    *((_OWORD *)v12 + 1) = v18;
    *((_OWORD *)v12 + 2) = *((_OWORD *)v13 + 2);
  }
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t assignWithCopy for SearchResultEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = *(_QWORD *)(a1 + v15 + 8);
  v19 = *(_QWORD *)(a2 + v15 + 8);
  if (v18)
  {
    if (v19)
    {
      *v16 = *v17;
      v20 = v17[1];
      v16[1] = v20;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRelease(v18);
      v16[2] = v17[2];
      v21 = v17[3];
      v22 = v16[3];
      v16[3] = v21;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRelease(v22);
      v16[4] = v17[4];
      v23 = v17[5];
      v24 = v16[5];
      v16[5] = v23;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRelease(v24);
    }
    else
    {
      sub_45134(v16);
      v29 = *((_OWORD *)v17 + 1);
      v28 = *((_OWORD *)v17 + 2);
      *(_OWORD *)v16 = *(_OWORD *)v17;
      *((_OWORD *)v16 + 1) = v29;
      *((_OWORD *)v16 + 2) = v28;
    }
  }
  else if (v19)
  {
    *v16 = *v17;
    v25 = v17[1];
    v16[1] = v25;
    v16[2] = v17[2];
    v26 = v17[3];
    v16[3] = v26;
    v16[4] = v17[4];
    v27 = v17[5];
    v16[5] = v27;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
  }
  else
  {
    v30 = *(_OWORD *)v17;
    v31 = *((_OWORD *)v17 + 2);
    *((_OWORD *)v16 + 1) = *((_OWORD *)v17 + 1);
    *((_OWORD *)v16 + 2) = v31;
    *(_OWORD *)v16 = v30;
  }
  v32 = a3[8];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  return a1;
}

_QWORD *sub_45134(_QWORD *a1)
{
  destroy for SearchPassage(a1);
  return a1;
}

uint64_t initializeWithTake for SearchResultEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = (_OWORD *)(a1 + v8);
  v11 = (__int128 *)(a2 + v8);
  v12 = v11[2];
  v13 = *v11;
  v10[1] = v11[1];
  v10[2] = v12;
  *v10 = v13;
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for SearchResultEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_unknownObjectRelease(v8);
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15 + 8);
  if (!v18)
    goto LABEL_5;
  v19 = *(_QWORD *)(v17 + 8);
  if (!v19)
  {
    sub_45134((_QWORD *)v16);
LABEL_5:
    v24 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v24;
    *(_OWORD *)(v16 + 32) = *(_OWORD *)(v17 + 32);
    goto LABEL_6;
  }
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = v19;
  swift_bridgeObjectRelease(v18);
  v20 = *(_QWORD *)(v17 + 24);
  v21 = *(_QWORD *)(v16 + 24);
  *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v16 + 24) = v20;
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(v17 + 40);
  v23 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
  *(_QWORD *)(v16 + 40) = v22;
  swift_bridgeObjectRelease(v23);
LABEL_6:
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchResultEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_45304);
}

uint64_t sub_45304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchResultEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_4538C);
}

uint64_t sub_4538C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_45404(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_2E6310;
    v4[3] = &unk_2E6328;
    v4[4] = &unk_2E6310;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

id sub_4548C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void *v10;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager);
  v2 = OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController;
  result = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                                 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController), "searchString"));
  if (result)
  {
    v4 = result;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v7 = v6;

    v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchRecentsPersistence + 8);
    ObjectType = swift_getObjectType(*(_QWORD *)(v1
                                               + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchRecentsPersistence));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(v5, v7, ObjectType, v8);
    swift_bridgeObjectRelease(v7);
    v10 = *(void **)(v1 + v2);
    result = objc_msgSend(v10, "isSearching");
    if ((result & 1) == 0)
    {
      if ((objc_msgSend(v10, "wasAborted") & 1) != 0)
        return objc_msgSend(v10, "beginSearchWithReportAnalytics:", 1);
      result = objc_msgSend(v10, "hasPartialResults");
      if ((result & 1) == 0)
      {
        result = objc_msgSend(v10, "searchWasCompleted");
        if ((result & 1) == 0)
          return objc_msgSend(v10, "beginSearchWithReportAnalytics:", 1);
      }
    }
  }
  return result;
}

void sub_455AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  double v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  BOOL v20;
  char v21;
  double v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  const char *v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager);
  v2 = OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController;
  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                             + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController), "searchString"));
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

    v8 = String.count.getter(v5);
    *(_QWORD *)&v9 = swift_bridgeObjectRelease(v7).n128_u64[0];
    if (v8 >= 3)
    {
      v10 = 0x6E69686372616573;
      v11 = *(void **)(v1 + v2);
      if ((objc_msgSend(v11, "isSearching", v9) & 1) != 0)
      {
        v12 = 0xE900000000000067;
      }
      else if ((objc_msgSend(v11, "wasAborted") & 1) != 0)
      {
        v10 = 0x646574726F6261;
        v12 = 0xE700000000000000;
      }
      else if ((objc_msgSend(v11, "hasPartialResults") & 1) != 0)
      {
        v10 = 0x526C616974726170;
        v12 = 0xEE0073746C757365;
      }
      else
      {
        if (objc_msgSend(v11, "searchWasCompleted"))
        {
          v13 = 0xE900000000000064;
LABEL_15:
          swift_bridgeObjectRelease(v13);
          return;
        }
        v10 = 1701736302;
        v12 = 0xE400000000000000;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, 0x6574656C706D6F63, 0xE900000000000064, 0);
      *(_QWORD *)&v15 = swift_bridgeObjectRelease(v12).n128_u64[0];
      if ((v14 & 1) == 0)
      {
        v16 = *(void **)(v1 + v2);
        if ((objc_msgSend(v16, "isSearching", v15) & 1) != 0)
        {
          v13 = 0xE900000000000067;
          goto LABEL_15;
        }
        if ((objc_msgSend(v16, "wasAborted") & 1) != 0)
        {
          v17 = 0x646574726F6261;
          v18 = 0xE700000000000000;
        }
        else if ((objc_msgSend(v16, "hasPartialResults") & 1) != 0)
        {
          v17 = 0x526C616974726170;
          v18 = 0xEE0073746C757365;
        }
        else
        {
          v19 = objc_msgSend(v16, "searchWasCompleted");
          v20 = v19 == 0;
          if (v19)
            v17 = 0x6574656C706D6F63;
          else
            v17 = 1701736302;
          if (v20)
            v18 = 0xE400000000000000;
          else
            v18 = 0xE900000000000064;
        }
        v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0x6E69686372616573, 0xE900000000000067, 0);
        *(_QWORD *)&v22 = swift_bridgeObjectRelease(v18).n128_u64[0];
        if ((v21 & 1) == 0)
        {
          v23 = objc_msgSend(*(id *)(v1 + v2), "results", v22);
          v24 = sub_319AC(&qword_3B6878);
          v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v23, v24);

          if ((unint64_t)v25 >> 62)
          {
            if (v25 < 0)
              v29 = v25;
            else
              v29 = v25 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v25);
            v26 = _CocoaArrayWrapper.endIndex.getter(v29);
            swift_bridgeObjectRelease(v25);
          }
          else
          {
            v26 = *(_QWORD *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8));
          }
          *(_QWORD *)&v27 = swift_bridgeObjectRelease(v25).n128_u64[0];
          if (v26)
            v28 = "continueSearch";
          else
            v28 = "beginSearchWithReportAnalytics:";
          objc_msgSend(*(id *)(v1 + v2), v28, v27);
        }
      }
    }
  }
}

uint64_t sub_45908(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  _QWORD v35[3];

  v4 = HIBYTE(a2) & 0xF;
  v5 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = result & 0xFFFFFFFFFFFFLL;
  if (!v6)
    return 0;
  v7 = v2;
  v8 = result;
  if ((a2 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(a2);
    v10 = (uint64_t)sub_465EC(v8, a2, 10);
    v12 = v34;
    swift_bridgeObjectRelease(a2);
    goto LABEL_44;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    v35[0] = result;
    v35[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v4)
      {
LABEL_67:
        __break(1u);
        return result;
      }
      if (v4 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_31;
      v10 = (BYTE1(result) - 48);
      if (v4 != 2)
      {
        if ((BYTE2(result) - 48) > 9u)
          goto LABEL_31;
        v10 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
        v13 = v4 - 3;
        if (v13)
        {
          v14 = (unsigned __int8 *)v35 + 3;
          while (1)
          {
            v15 = *v14 - 48;
            if (v15 > 9)
              goto LABEL_31;
            v16 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
              goto LABEL_31;
            v10 = v16 + v15;
            if (__OFADD__(v16, v15))
              goto LABEL_31;
            v12 = 0;
            ++v14;
            if (!--v13)
              goto LABEL_44;
          }
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (!v4)
        {
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        if (v4 != 1 && (BYTE1(result) - 48) <= 9u)
        {
          if (v4 == 2)
          {
            v12 = 0;
            v10 = -(uint64_t)(BYTE1(result) - 48);
            goto LABEL_44;
          }
          if ((BYTE2(result) - 48) <= 9u)
          {
            v10 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
            v21 = v4 - 3;
            if (!v21)
              goto LABEL_43;
            v31 = (unsigned __int8 *)v35 + 3;
            while (1)
            {
              v32 = *v31 - 48;
              if (v32 > 9)
                break;
              v33 = 10 * v10;
              if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
                break;
              v10 = v33 - v32;
              if (__OFSUB__(v33, v32))
                break;
              v12 = 0;
              ++v31;
              if (!--v21)
                goto LABEL_44;
            }
          }
        }
LABEL_31:
        v10 = 0;
        v12 = 1;
        goto LABEL_44;
      }
      if (!v4 || (result - 48) > 9u)
        goto LABEL_31;
      v10 = (result - 48);
      if (v4 != 1)
      {
        if ((BYTE1(result) - 48) > 9u)
          goto LABEL_31;
        v10 = 10 * (result - 48) + (BYTE1(result) - 48);
        v17 = v4 - 2;
        if (v17)
        {
          v18 = (unsigned __int8 *)v35 + 2;
          while (1)
          {
            v19 = *v18 - 48;
            if (v19 > 9)
              goto LABEL_31;
            v20 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
              goto LABEL_31;
            v10 = v20 + v19;
            if (__OFADD__(v20, v19))
              goto LABEL_31;
            v12 = 0;
            ++v18;
            if (!--v17)
              goto LABEL_44;
          }
        }
      }
    }
LABEL_43:
    v12 = 0;
    goto LABEL_44;
  }
  if ((result & 0x1000000000000000) != 0)
    v9 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
  else
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
  v10 = (uint64_t)sub_466D0(v9, v5, 10);
  v12 = v11 & 1;
LABEL_44:
  if ((v12 & 1) != 0)
    return 0;
  v35[0] = v10;
  v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  if (v22 == v8 && v23 == a2)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v25 = v23;
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, a2, v22, v23, 0);
    swift_bridgeObjectRelease(v25);
    if ((v26 & 1) == 0)
      return 0;
  }
  v27 = *(_QWORD *)(v7 + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager);
  v28 = *(_QWORD *)(v27 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v27 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 104))(ObjectType, v28);
  if (result < 1)
  {
    __break(1u);
    goto LABEL_66;
  }
  v30 = result;
  result = 0;
  if (v10 >= 1 && v30 >= v10)
  {
    sub_6C550(v10);
    return v10;
  }
  return result;
}

id sub_45CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  char v8;
  id result;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager);
  v2 = OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController);
  if ((objc_msgSend(v3, "isSearching") & 1) != 0)
  {
    v4 = 0xE900000000000067;
    v5 = 0x6E69686372616573;
    goto LABEL_13;
  }
  if ((objc_msgSend(v3, "wasAborted") & 1) != 0)
  {
    v4 = 0xE700000000000000;
    v5 = 0x646574726F6261;
    goto LABEL_13;
  }
  if ((objc_msgSend(v3, "hasPartialResults") & 1) == 0)
  {
    v6 = objc_msgSend(v3, "searchWasCompleted");
    v7 = v6 == 0;
    if (v6)
      v5 = 0x6574656C706D6F63;
    else
      v5 = 1701736302;
    if (v7)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE900000000000064;
LABEL_13:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, 0x526C616974726170, 0xEE0073746C757365, 0);
    result = (id)swift_bridgeObjectRelease(v4);
    if ((v8 & 1) == 0)
      return result;
    return objc_msgSend(*(id *)(v1 + v2), "loadMore");
  }
  swift_bridgeObjectRelease(0xEE0073746C757365);
  return objc_msgSend(*(id *)(v1 + v2), "loadMore");
}

id sub_45E54()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SearchInteractor(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_45EE8()
{
  return type metadata accessor for SearchInteractor(0);
}

uint64_t type metadata accessor for SearchInteractor(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3B6970, (uint64_t)&nominal type descriptor for SearchInteractor);
}

uint64_t sub_45F04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_2E6358;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_2E6310;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_45F84(uint64_t a1)
{
  char *v1;
  uint64_t Strong;
  double result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  char v9;
  char v10;

  Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_delegate]);
  if (Strong)
  {
    v5 = Strong;
    v6 = v1;
    v7 = sub_46E08(a1, (uint64_t)v6);

    v8 = *(void **)(*(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager]
                  + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController);
    if ((objc_msgSend(v8, "isSearching") & 1) != 0)
    {
      v9 = 0;
    }
    else if (objc_msgSend(v8, "wasAborted"))
    {
      v9 = 1;
    }
    else if ((objc_msgSend(v8, "hasPartialResults") & 1) != 0)
    {
      v9 = 2;
    }
    else if (objc_msgSend(v8, "searchWasCompleted"))
    {
      v9 = 3;
    }
    else
    {
      v9 = 4;
    }
    v10 = v9;
    sub_A9EC0(v7, &v10);
    swift_unknownObjectRelease(v5);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  }
  return result;
}

double sub_46098(uint64_t a1, char a2)
{
  char *v2;
  char *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t ObjectType;
  char *v8;
  uint64_t Strong;
  uint64_t v10;
  void *v11;
  char v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;

  v3 = v2;
  if ((a2 & 1) != 0)
  {
    v5 = (_QWORD *)(*(_QWORD *)&v2[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager]
                  + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_analyticsProvider);
    if (*v5)
    {
      v6 = v5[1];
      ObjectType = swift_getObjectType(*v5);
      v20 = 1;
      v21 = 0u;
      v22 = 0u;
      v23 = 0u;
      v24 = 0;
      v25 = 7;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v6 + 8))(&v20, ObjectType, v6);
    }
  }
  v8 = &v2[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_delegate];
  Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_delegate]);
  if (Strong)
  {
    v10 = Strong;
    v11 = *(void **)(*(_QWORD *)&v3[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager]
                   + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController);
    if ((objc_msgSend(v11, "isSearching") & 1) != 0)
    {
      v12 = 0;
    }
    else if (objc_msgSend(v11, "wasAborted"))
    {
      v12 = 1;
    }
    else if ((objc_msgSend(v11, "hasPartialResults") & 1) != 0)
    {
      v12 = 2;
    }
    else if (objc_msgSend(v11, "searchWasCompleted"))
    {
      v12 = 3;
    }
    else
    {
      v12 = 4;
    }
    LOBYTE(v20) = v12;
    sub_AA30C(&v20);
    swift_unknownObjectRelease(v10);
  }
  v13 = swift_unknownObjectWeakLoadStrong(v8);
  if (v13)
  {
    v15 = v13;
    v16 = v3;
    v17 = sub_46E08(a1, (uint64_t)v16);

    v18 = *(void **)(*(_QWORD *)&v16[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager]
                   + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController);
    if ((objc_msgSend(v18, "isSearching") & 1) != 0)
    {
      v19 = 0;
    }
    else if (objc_msgSend(v18, "wasAborted"))
    {
      v19 = 1;
    }
    else if ((objc_msgSend(v18, "hasPartialResults") & 1) != 0)
    {
      v19 = 2;
    }
    else if (objc_msgSend(v18, "searchWasCompleted"))
    {
      v19 = 3;
    }
    else
    {
      v19 = 4;
    }
    LOBYTE(v20) = v19;
    sub_A9EC0(v17, (char *)&v20);
    swift_unknownObjectRelease(v15);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v17).n128_u64[0];
  }
  return result;
}

double sub_462C0@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v4 = objc_msgSend(a1, "text");
  if (!v4)
    goto LABEL_8;
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v8 = v7;

  v9 = objc_msgSend(a1, "searchStringRange");
  v11 = Range<>.init(_:in:)(v9, v10, v6, v8);
  if ((v13 & 1) != 0)
  {
    swift_bridgeObjectRelease(v8);
LABEL_8:
    swift_unknownObjectRelease(a1);
    result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  v14 = v11;
  v15 = v12;
  v16 = String.subscript.getter(15, v11, v6, v8);
  v18 = v17;
  v50 = v19;
  v21 = v20;
  v22 = String.subscript.getter(v14, v15, v6, v8);
  v48 = v23;
  v49 = v22;
  v47 = v24;
  v26 = v25;
  v27 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0)
    v27 = v6 & 0xFFFFFFFFFFFFLL;
  if (v15 >> 14 == 4 * v27)
  {
    swift_bridgeObjectRelease(v8);
    v51 = Substring.init(_:)(0, 0xE000000000000000);
    v29 = v28;
    v31 = v30;
    v33 = v32;
  }
  else
  {
    v51 = sub_464C4(v15, v6, v8);
    v29 = v35;
    v31 = v36;
    v33 = v37;
    swift_bridgeObjectRelease(v8);
  }
  v38 = static String._fromSubstring(_:)(v16, v18, v50, v21);
  v40 = v39;
  swift_bridgeObjectRelease(v21);
  v41 = static String._fromSubstring(_:)(v49, v48, v47, v26);
  v43 = v42;
  swift_bridgeObjectRelease(v26);
  v44 = static String._fromSubstring(_:)(v51, v29, v31, v33);
  v46 = v45;
  swift_bridgeObjectRelease(v33);
  *(_QWORD *)a2 = v38;
  *(_QWORD *)(a2 + 8) = v40;
  *(_QWORD *)(a2 + 16) = v41;
  *(_QWORD *)(a2 + 24) = v43;
  *(_QWORD *)(a2 + 32) = v44;
  *(_QWORD *)(a2 + 40) = v46;
  sub_105648();
  *(_QWORD *)&result = swift_unknownObjectRelease(a1).n128_u64[0];
  return result;
}

unint64_t sub_464C4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return String.subscript.getter();
  __break(1u);
  return result;
}

_QWORD *sub_46510(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_319AC(&qword_3B6980);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_46574(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unsigned __int8 *sub_465EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_4694C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_466D0(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_466D0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_4694C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_469C8(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_469C8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_46B0C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_46510(v12, 0);
      v5 = sub_46BF8((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_46B0C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_46574(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_46574(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_46BF8(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_46574(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_46574(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_46E08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  double v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  __int128 *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t *v48;
  char *v49;
  __int128 v50;
  uint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD v55[2];
  _QWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  __int128 *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  _QWORD *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  char v78;
  _QWORD *v79;

  v3 = v2;
  v65 = type metadata accessor for SearchResultEntity(0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v54 = a1;
    else
      v54 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v54);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v8 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  v9 = _swiftEmptyArrayStorage;
  if (!v8)
    return (uint64_t)v9;
  v79 = _swiftEmptyArrayStorage;
  result = sub_F50C4(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v55[1] = v3;
    v11 = 0;
    v58 = a1 & 0xC000000000000001;
    v12 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager);
    v13 = (_QWORD *)(v12 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider);
    v57 = v12;
    v63 = (_QWORD *)(v12 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider);
    v9 = v79;
    v62 = &v70;
    v61 = &v74;
    v60 = a1;
    v59 = v8;
    v56 = (_QWORD *)(v12 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider);
    do
    {
      v68 = v9;
      if (v58)
      {
        v14 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
      }
      else
      {
        v14 = *(void **)(a1 + 8 * v11 + 32);
        *(_QWORD *)&v15 = swift_unknownObjectRetain(v14).n128_u64[0];
      }
      v16 = objc_msgSend(v14, "ordinal", v15);
      v17 = objc_msgSend(v14, "pageOffset");
      v78 = 1;
      v77 = 1;
      v18 = v13[1];
      ObjectType = swift_getObjectType(*v13);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v18 + 8))(&v69, ObjectType, v18);
      v20 = *((_QWORD *)&v70 + 1);
      v21 = v71;
      sub_472D0(&v69, *((uint64_t *)&v70 + 1));
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 104))(v20, v21);
      *(_QWORD *)&v67 = v17;
      if (v22 >= 2u)
      {
        v25 = v16;
        sub_34488(&v69);
        v30 = 0xE100000000000000;
        v28 = 49;
      }
      else
      {
        sub_34488(&v69);
        v23 = v63[1];
        v24 = swift_getObjectType(*v63);
        v25 = v16;
        *(_QWORD *)&v69 = v16;
        *((_QWORD *)&v69 + 1) = v17;
        v26 = v62;
        *v62 = 0u;
        v26[1] = 0u;
        v26[2] = 0u;
        v26[3] = 0u;
        *((_QWORD *)v26 + 8) = 0;
        v73 = v78;
        v27 = v61;
        *(_OWORD *)v61 = 0u;
        *((_OWORD *)v27 + 1) = 0u;
        v27[4] = 0;
        v75 = v77;
        v76 = 0;
        v28 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v23 + 144))(&v69, v24, v23);
        v30 = v29;
      }
      v31 = *v13;
      v32 = v13[1];
      v33 = swift_getObjectType(v31);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v32 + 8))(&v69, v33, v32);
      v34 = *((_QWORD *)&v70 + 1);
      v35 = v71;
      sub_472D0(&v69, *((uint64_t *)&v70 + 1));
      if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v35 + 104))(v34, v35) >= 2u)
      {
        sub_34488(&v69);
        v40 = 1;
      }
      else
      {
        sub_34488(&v69);
        v36 = v63[1];
        v37 = swift_getObjectType(*v63);
        *(_QWORD *)&v69 = v25;
        *((_QWORD *)&v69 + 1) = v67;
        v38 = v62;
        *v62 = 0u;
        v38[1] = 0u;
        v38[2] = 0u;
        v38[3] = 0u;
        *((_QWORD *)v38 + 8) = 0;
        v73 = v78;
        v39 = v61;
        *(_OWORD *)v61 = 0u;
        *((_OWORD *)v39 + 1) = 0u;
        v39[4] = 0;
        v75 = v77;
        v76 = 0;
        v40 = (*(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v36 + 72))(&v69, v37, v36);
      }
      v41 = sub_6C550(v40);
      v43 = v42;
      swift_unknownObjectRetain(v14);
      sub_462C0(v44, (uint64_t)&v69);
      v67 = v69;
      v66 = v70;
      v45 = v71;
      v46 = v72;
      UUID.init()();
      v47 = (int *)v65;
      *(_QWORD *)&v7[*(int *)(v65 + 20)] = v14;
      v48 = (uint64_t *)&v7[v47[6]];
      *v48 = v41;
      v48[1] = v43;
      v49 = &v7[v47[7]];
      v50 = v66;
      *(_OWORD *)v49 = v67;
      *((_OWORD *)v49 + 1) = v50;
      *((_QWORD *)v49 + 4) = v45;
      *((_QWORD *)v49 + 5) = v46;
      v51 = (uint64_t *)&v7[v47[8]];
      *v51 = v28;
      v51[1] = v30;
      v9 = v68;
      v79 = v68;
      v53 = v68[2];
      v52 = v68[3];
      if (v53 >= v52 >> 1)
      {
        sub_F50C4(v52 > 1, v53 + 1, 1);
        v9 = v79;
      }
      ++v11;
      v9[2] = v53 + 1;
      sub_472F4((uint64_t)v7, (uint64_t)v9+ ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80))+ *(_QWORD *)(v64 + 72) * v53);
      a1 = v60;
      v13 = v56;
    }
    while (v59 != v11);
    return (uint64_t)v9;
  }
  __break(1u);
  return result;
}

_QWORD *sub_472D0(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_472F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SearchResultEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_47338()
{
  uint64_t v0;
  uint64_t Strong;
  double result;
  uint64_t v3;
  void *v4;
  char v5;
  char v6;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_delegate);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(void **)(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager)
                  + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController);
    if ((objc_msgSend(v4, "isSearching") & 1) != 0)
    {
      v5 = 0;
    }
    else if (objc_msgSend(v4, "wasAborted"))
    {
      v5 = 1;
    }
    else if ((objc_msgSend(v4, "hasPartialResults") & 1) != 0)
    {
      v5 = 2;
    }
    else if (objc_msgSend(v4, "searchWasCompleted"))
    {
      v5 = 3;
    }
    else
    {
      v5 = 4;
    }
    v6 = v5;
    sub_AA328(&v6);
    *(_QWORD *)&result = swift_unknownObjectRelease(v3).n128_u64[0];
  }
  return result;
}

uint64_t sub_47418(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t PageNumberProvider.paginationProvider.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_47460(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  swift_beginAccess(*a2 + 32, v7, 1, 0);
  v5 = *(_QWORD *)(v4 + 32);
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  swift_unknownObjectRetain(v2);
  return swift_unknownObjectRelease(v5);
}

uint64_t BookContentDataManager.paginationService.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_474FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 32, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return swift_unknownObjectRelease(v5);
}

uint64_t (*sub_4754C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_47588()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[9];
  v2 = v0[10];
  sub_472D0(v0 + 6, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 312))(v1, v2) & 1;
}

void sub_475D0(unsigned __int8 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  int v5;
  void *v6;
  NSString v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = *a2;
  v4 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout);
  swift_beginAccess(v4, v8, 1, 0);
  v5 = *v4;
  *v4 = v2;
  if ((_DWORD)v2 != v5)
  {
    v6 = *(void **)(v3 + 88);
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "setBool:forKey:", v2, v7);

  }
}

uint64_t sub_47670()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout, v3, 0, 0);
  return *v1;
}

void sub_476B4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  int v5;
  void *v6;
  NSString v7;
  _BYTE v8[24];

  v3 = a1 & 1;
  v4 = (_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout, v8, 1, 0);
  v5 = *v4;
  *v4 = a1;
  if (v5 != (_DWORD)v3)
  {
    v6 = *(void **)(v1 + 88);
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "setBool:forKey:", v3, v7);

  }
}

void (*sub_47754(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout;
  v3[3] = v1;
  v3[4] = v4;
  v5 = (_BYTE *)(v1 + v4);
  swift_beginAccess(v1 + v4, v3, 1, 0);
  *((_BYTE *)v3 + 40) = *v5;
  return sub_477C0;
}

void sub_477C0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  NSString v7;

  v1 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = *(unsigned __int8 *)(*(_QWORD *)a1 + 40);
  v5 = *(unsigned __int8 *)(v3 + v2);
  *(_BYTE *)(v3 + v2) = v4;
  if (((v4 ^ v5) & 1) != 0)
  {
    v6 = *(void **)(v1[3] + 88);
    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v6, "setBool:forKey:", v4, v7);

  }
  free(v1);
}

_QWORD *PageNumberProvider.__allocating_init(paginationProvider:bookEntity:currentConfiguration:userDefaults:)(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6;
  _QWORD *v13;

  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v13 = sub_493EC(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease(a1);

  swift_unknownObjectRelease(a4);
  return v13;
}

_QWORD *PageNumberProvider.init(paginationProvider:bookEntity:currentConfiguration:userDefaults:)(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, void *a6)
{
  _QWORD *v9;

  v9 = sub_493EC(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease(a1);

  swift_unknownObjectRelease(a4);
  return v9;
}

uint64_t sub_47928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  NSString v6;
  id v7;
  _BYTE *v8;
  int v9;
  NSString v10;
  NSString v11;
  char v12;
  uint64_t v13;
  _BYTE v14[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(void **)(result + 88);
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "BOOLForKey:", v6);

    v8 = (_BYTE *)(v4 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout);
    swift_beginAccess(v4 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout, &v13, 1, 0);
    v9 = *v8;
    *v8 = (_BYTE)v7;
    if ((_DWORD)v7 != v9)
    {
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v5, "setBool:forKey:", v7, v10);

    }
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v5, "BOOLForKey:", v11);

    sub_47AB0(v12);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_47A78()
{
  uint64_t v1;

  CurrentValueSubject.value.getter(&v1);
  return v1;
}

void sub_47AB0(char a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  void *v7;
  NSString v8;
  char v9;
  uint64_t v10;

  v3 = v1[9];
  v4 = v1[10];
  sub_472D0(v1 + 6, v3);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 312))(v3, v4) & 1) != 0)
  {
    CurrentValueSubject.value.getter(&v10);
    v6 = a1 & 1;
    if (v10 != (_DWORD)v6)
    {
      v9 = v6;
      CurrentValueSubject.value.setter(&v9, v5);
      v7 = (void *)v1[11];
      v8 = String._bridgeToObjectiveC()();
      objc_msgSend(v7, "setBool:forKey:", v6, v8);

    }
  }
}

void (*sub_47B80(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  CurrentValueSubject.value.getter((_QWORD *)(a1 + 9));
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 9);
  return sub_47BC8;
}

void sub_47BC8(uint64_t a1)
{
  sub_47AB0(*(_BYTE *)(a1 + 8));
}

uint64_t sub_47BEC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_319AC((uint64_t *)&unk_3B89F0);
  v1 = sub_3DCC0(&qword_3B6990, (uint64_t *)&unk_3B89F0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t PageNumberProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  sub_34488((_QWORD *)(v0 + 48));

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_log;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_usePhysicalPagesSubject));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_subscribers));
  return v0;
}

uint64_t PageNumberProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  sub_34488((_QWORD *)(v0 + 48));

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_log;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_usePhysicalPagesSubject));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_subscribers));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

Swift::Int PageNumberProvider.pageNumber(for:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  _BYTE v14[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *(_QWORD *)(v1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 16));
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(ObjectType, v4);
  v7 = NSNotFound.getter(v6);
  v8 = BookPaginationEntity.document(for:)(v2);
  if (v8)
  {
    v9 = v8;
    v10 = (uint64_t *)(v8 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
    swift_beginAccess(v8 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v14, 0, 0);
    v11 = *v10;
    swift_release(v6);
    swift_release(v9);
    v12 = __OFADD__(v11, v3);
    v7 = v11 + v3;
    if (!v12)
      return PageNumberProvider.displayPageNumber(fromBookPageOffset:)(v7);
    __break(1u);
  }
  swift_release(v6);
  return PageNumberProvider.displayPageNumber(fromBookPageOffset:)(v7);
}

Swift::Int __swiftcall PageNumberProvider.displayPageNumber(fromBookPageOffset:)(Swift::Int fromBookPageOffset)
{
  uint64_t v1;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  BOOL v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  Swift::Int v15;
  uint64_t ObjectType;
  uint64_t (*v17)(uint64_t, uint64_t);
  Swift::Int v18;
  uint64_t v19;
  _QWORD v20[3];
  Swift::Int v21;
  uint64_t v22;

  v3 = NSNotFound.getter();
  if (fromBookPageOffset < 0 || v3 == fromBookPageOffset)
    goto LABEL_10;
  result = swift_beginAccess(v1 + 32, &v21, 0, 0);
  v5 = *(_QWORD *)(v1 + 32);
  if (!v5)
  {
    v8 = __OFADD__(fromBookPageOffset++, 1);
    if (!v8)
    {
      v12 = Logger.logObject.getter(result);
      v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_0, v12, v13, "Missing configuration, unable to properly determine adjustedPageNumber", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }

      return fromBookPageOffset;
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v6 = *(_QWORD *)(v1 + 40);
  v7 = (_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout);
  v3 = swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout, (char *)v20 + 1, 0, 0);
  if ((*v7 & 1) != 0)
  {
LABEL_7:
    v8 = __OFADD__(fromBookPageOffset++, 1);
    if (!v8)
      return fromBookPageOffset;
    __break(1u);
LABEL_10:
    v9 = Logger.logObject.getter(v3);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v11 = 134217984;
      v21 = fromBookPageOffset;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v11 + 4);
      _os_log_impl(&dword_0, v9, v10, "Invalid book pageOffset provided: %ld", v11, 0xCu);
      swift_slowDealloc(v11, -1, -1);
    }

    return 1;
  }
  swift_unknownObjectRetain(v5);
  CurrentValueSubject.value.getter(v20);
  if (LOBYTE(v20[0]) == 1)
  {
    v3 = swift_unknownObjectRelease(v5);
    goto LABEL_7;
  }
  v15 = fromBookPageOffset - 1;
  ObjectType = swift_getObjectType(v5);
  v17 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 120);
  result = v17(ObjectType, v6);
  v8 = __OFADD__(v15, result);
  v18 = v15 + result;
  if (v8)
    goto LABEL_24;
  v19 = v17(ObjectType, v6);
  result = swift_unknownObjectRelease(v5);
  if (!v19)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v18 == 0x8000000000000000 && v19 == -1)
    goto LABEL_27;
  v8 = __OFADD__(v18 / v19, 1);
  fromBookPageOffset = v18 / v19 + 1;
  if (!v8)
    return fromBookPageOffset;
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t PageNumberProvider.pageNumber(for:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int *v10;
  Swift::Int v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *(_QWORD *)(v1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 16));
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);
  v6 = a1[3];
  v7 = a1[4];
  sub_472D0(a1, v6);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
  v9 = BookPaginationEntity.document(for:)(v8);
  swift_release(v5);
  if (v9)
  {
    v10 = (Swift::Int *)(v9 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
    swift_beginAccess(v9 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, &v20, 0, 0);
    v11 = PageNumberProvider.displayPageNumber(fromBookPageOffset:)(*v10);
    swift_release(v9);
  }
  else
  {
    v12 = sub_49F1C((uint64_t)a1, (uint64_t)&v20);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134217984;
      v16 = v22;
      v17 = v23;
      sub_472D0(&v20, v22);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
      sub_34488(&v20);
      v20 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v15 + 4);
      _os_log_impl(&dword_0, v13, v14, "Failed to get paginated document for DocumentOrdinal %ld", v15, 0xCu);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      sub_34488(&v20);
    }

    return 1;
  }
  return v11;
}

Swift::Int PageNumberProvider.pageNumber(for:)(uint64_t a1)
{
  Swift::Int *v1;
  _BYTE v3[24];

  v1 = (Swift::Int *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v3, 0, 0);
  return PageNumberProvider.displayPageNumber(fromBookPageOffset:)(*v1);
}

Swift::Int __swiftcall PageNumberProvider.maxPageNumber()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  Swift::Int v13;
  _BYTE v15[24];
  _QWORD v16[18];

  v1 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16));
  v3 = Paginating.lastLocation.getter(v1, (uint64_t)v16);
  v4 = v16[0];
  v5 = v16[1];
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v1 + 8))(ObjectType, v1, v3);
  v7 = NSNotFound.getter(v6);
  v8 = BookPaginationEntity.document(for:)(v4);
  if (v8)
  {
    v9 = v8;
    v10 = (uint64_t *)(v8 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
    swift_beginAccess(v8 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v15, 0, 0);
    v11 = *v10;
    swift_release(v6);
    swift_release(v9);
    v12 = __OFADD__(v11, v5);
    v7 = v11 + v5;
    if (!v12)
      goto LABEL_6;
    __break(1u);
  }
  swift_release(v6);
LABEL_6:
  v13 = PageNumberProvider.displayPageNumber(fromBookPageOffset:)(v7);
  sub_49900((uint64_t)v16);
  return v13;
}

Swift::String __swiftcall PageNumberProvider.lastPageNumber()()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t ObjectType;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  Swift::Int v36;
  Swift::String v37;
  uint64_t v38;
  Swift::String result;
  _BYTE v40[24];
  uint64_t v41;
  uint64_t v42;

  v1 = v0;
  CurrentValueSubject.value.getter(&v41);
  if (v41 == 1)
  {
    v2 = v0[9];
    v3 = v0[10];
    sub_472D0(v0 + 6, v2);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 304))(v2, v3);
    if (!((unint64_t)v5 >> 62))
    {
      v6 = *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8));
      if (v6)
        goto LABEL_4;
LABEL_17:
      v23 = swift_bridgeObjectRelease(v5);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl(&dword_0, v24, v25, "Book doesn't have last physical page number.", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      v27 = v1[3];
      ObjectType = swift_getObjectType(v1[2]);
      v29 = Paginating.lastLocation.getter(v27, (uint64_t)&v41);
      v30 = v41;
      v31 = v42;
      v5 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v27 + 8))(ObjectType, v27, v29);
      v17 = NSNotFound.getter(v5);
      v32 = BookPaginationEntity.document(for:)(v30);
      if (v32)
      {
        v33 = v32;
        v34 = (uint64_t *)(v32 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
        swift_beginAccess(v32 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v40, 0, 0);
        v35 = *v34;
        swift_release(v5);
        swift_release(v33);
        v7 = __OFADD__(v35, v31);
        v17 = v35 + v31;
        if (!v7)
          goto LABEL_24;
        __break(1u);
      }
      goto LABEL_23;
    }
  }
  else
  {
    v12 = v0[3];
    v13 = swift_getObjectType(v0[2]);
    v14 = Paginating.lastLocation.getter(v12, (uint64_t)&v41);
    v15 = v41;
    v16 = v42;
    v5 = (*(uint64_t (**)(uint64_t, uint64_t, double))(v12 + 8))(v13, v12, v14);
    v17 = NSNotFound.getter(v5);
    v18 = BookPaginationEntity.document(for:)(v15);
    if (!v18)
    {
LABEL_23:
      swift_release(v5);
LABEL_24:
      v36 = PageNumberProvider.displayPageNumber(fromBookPageOffset:)(v17);
      sub_49900((uint64_t)&v41);
      v37 = PageNumberProvider.pageName(for:)(v36);
      countAndFlagsBits = v37._countAndFlagsBits;
      object = v37._object;
      goto LABEL_25;
    }
    v19 = v18;
    v20 = (uint64_t *)(v18 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
    swift_beginAccess(v18 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v40, 0, 0);
    v21 = *v20;
    swift_release(v5);
    swift_release(v19);
    v7 = __OFADD__(v21, v16);
    v17 = v21 + v16;
    if (!v7)
      goto LABEL_24;
    __break(1u);
  }
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  v6 = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!v6)
    goto LABEL_17;
LABEL_4:
  v7 = __OFSUB__(v6, 1);
  v8 = v6 - 1;
  if (v7)
  {
    __break(1u);
    goto LABEL_27;
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
LABEL_27:
    v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
    swift_bridgeObjectRelease(v5);
    countAndFlagsBits = *(_QWORD *)(v38 + 32);
    object = *(void **)(v38 + 40);
    swift_bridgeObjectRetain(object);
    swift_unknownObjectRelease(v38);
    goto LABEL_25;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v8 >= *(_QWORD *)((char *)&dword_10 + (v5 & 0xFFFFFFFFFFFFF8)))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = *(_QWORD *)(v5 + 8 * v8 + 32);
  swift_retain(v9);
  swift_bridgeObjectRelease(v5);
  countAndFlagsBits = *(_QWORD *)(v9 + 32);
  object = *(void **)(v9 + 40);
  swift_bridgeObjectRetain(object);
  swift_release(v9);
LABEL_25:
  v8 = countAndFlagsBits;
  v4 = object;
LABEL_30:
  result._object = v4;
  result._countAndFlagsBits = v8;
  return result;
}

Swift::String __swiftcall PageNumberProvider.pageName(for:)(Swift::Int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  Swift::String result;
  _OWORD v12[7];
  _OWORD v13[2];
  uint64_t v14[18];
  _OWORD v15[7];
  _OWORD v16[2];

  v3 = *(_QWORD *)(v1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 16));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 32))(ObjectType, v3) & 1) != 0)
  {
    CurrentValueSubject.value.getter(v15);
    if (LOBYTE(v15[0]) == 1
      && ((*(void (**)(_OWORD *__return_ptr, Swift::Int, uint64_t, uint64_t))(v3 + 208))(v12, a1, ObjectType, v3), sub_49AD8((uint64_t)v12, (uint64_t)v14), sub_49AD8((uint64_t)v14, (uint64_t)v15), sub_49B20((uint64_t)v15) != 1))
    {
      v12[6] = v15[6];
      v13[0] = v16[0];
      *(_OWORD *)((char *)v13 + 10) = *(_OWORD *)((char *)v16 + 10);
      v12[2] = v15[2];
      v12[3] = v15[3];
      v12[4] = v15[4];
      v12[5] = v15[5];
      v12[0] = v15[0];
      v12[1] = v15[1];
      v5 = PageNumberProvider.pageName(for:)((uint64_t)v12);
      v7 = v8;
      sub_49B44(v14);
    }
    else
    {
      v5 = sub_49934(a1);
      v7 = v6;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0xE000000000000000;
  }
  v9 = v5;
  v10 = (void *)v7;
  result._object = v10;
  result._countAndFlagsBits = v9;
  return result;
}

uint64_t PageNumberProvider.rawPageNumber(for:)(__int128 *a1)
{
  NSObject *v1;
  NSObject *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  Class isa;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v28[24];
  _OWORD v29[7];
  _OWORD v30[2];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[2];

  v2 = v1;
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[4];
  v37 = a1[5];
  v38 = v3;
  v39[0] = v4;
  *(_OWORD *)((char *)v39 + 10) = *(__int128 *)((char *)a1 + 122);
  v6 = a1[3];
  v34 = a1[2];
  v35 = v6;
  v36 = v5;
  v7 = a1[1];
  v32 = *a1;
  v33 = v7;
  isa = v1[3].isa;
  ObjectType = swift_getObjectType(v1[2].isa);
  v10 = (*((uint64_t (**)(uint64_t, Class))isa + 1))(ObjectType, isa);
  v11 = *((_QWORD *)&v32 + 1);
  v12 = NSNotFound.getter(v10);
  v13 = BookPaginationEntity.document(for:)(v32);
  if (!v13)
    goto LABEL_5;
  v14 = v13;
  v15 = (uint64_t *)(v13 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
  swift_beginAccess(v13 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v28, 0, 0);
  v16 = *v15;
  swift_release(v10);
  v17 = swift_release(v14);
  v18 = __OFADD__(v16, v11);
  v12 = v16 + v11;
  if (v18)
  {
    __break(1u);
LABEL_5:
    v17 = swift_release(v10);
  }
  if (v12 != NSNotFound.getter(v17))
  {
    v26 = v12 + 1;
    if (!__OFADD__(v12, 1))
      return v26;
    __break(1u);
    goto LABEL_12;
  }
  sub_49BD8((uint64_t)&v32);
  v19 = sub_49BD8((uint64_t)&v32);
  v2 = Logger.logObject.getter(v19);
  v20 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v2, v20))
  {
LABEL_12:

    sub_49900((uint64_t)&v32);
    sub_49900((uint64_t)&v32);
    return 1;
  }
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  v22 = swift_slowAlloc(32, -1);
  v31 = v22;
  *(_DWORD *)v21 = 136315138;
  v30[0] = v39[0];
  *(_OWORD *)((char *)v30 + 10) = *(_OWORD *)((char *)v39 + 10);
  v29[2] = v34;
  v29[3] = v35;
  v29[5] = v37;
  v29[6] = v38;
  v29[4] = v36;
  v29[0] = v32;
  v29[1] = v33;
  v23 = Location.description.getter();
  v25 = v24;
  *(_QWORD *)&v29[0] = sub_33524(v23, v24, &v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, (char *)v29 + 8, v21 + 4);
  swift_bridgeObjectRelease(v25);
  sub_49900((uint64_t)&v32);
  sub_49900((uint64_t)&v32);
  _os_log_impl(&dword_0, v2, v20, "Unable to find page number for location:%s", v21, 0xCu);
  v26 = 1;
  swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v22, -1, -1);
  swift_slowDealloc(v21, -1, -1);

  return v26;
}

uint64_t PageNumberProvider.pageName(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  Swift::Int v35[3];
  uint64_t v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _OWORD v43[2];

  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v1 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + 16));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v5 + 32))(ObjectType, v5) & 1) == 0)
    return 0;
  CurrentValueSubject.value.getter(v36);
  v7 = LOBYTE(v36[0]);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
  v9 = v8;
  if (v7 != 1)
  {
    v28 = NSNotFound.getter(v8);
    v29 = BookPaginationEntity.document(for:)(v3);
    if (v29)
    {
      v30 = v29;
      v31 = (uint64_t *)(v29 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
      swift_beginAccess(v29 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v36, 0, 0);
      v32 = *v31;
      swift_release(v9);
      swift_release(v30);
      v33 = __OFADD__(v32, v4);
      v28 = v32 + v4;
      if (!v33)
        goto LABEL_12;
      __break(1u);
    }
    swift_release(v9);
LABEL_12:
    v35[0] = PageNumberProvider.displayPageNumber(fromBookPageOffset:)(v28);
    return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  }
  v36[0] = v3;
  v36[1] = v4;
  v10 = *(_OWORD *)(a1 + 96);
  v41 = *(_OWORD *)(a1 + 80);
  v42 = v10;
  v43[0] = *(_OWORD *)(a1 + 112);
  *(_OWORD *)((char *)v43 + 10) = *(_OWORD *)(a1 + 122);
  v11 = *(_OWORD *)(a1 + 32);
  v37 = *(_OWORD *)(a1 + 16);
  v38 = v11;
  v12 = *(_OWORD *)(a1 + 64);
  v39 = *(_OWORD *)(a1 + 48);
  v40 = v12;
  v13 = (_QWORD *)BookPaginationEntity.pagePaginationEntity(for:)(v36);
  swift_release(v9);
  if (!v13)
    return 0;
  swift_beginAccess(v13 + 14, v36, 0, 0);
  v14 = v13[15];
  if (!v14)
  {
    swift_release(v13);
    return 0;
  }
  v15 = v13[14];
  swift_beginAccess(v13 + 16, v35, 0, 0);
  v16 = v13[17];
  if (v16)
  {
    v17 = v13[16];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v16);
    v18 = BookEPUBBundle();
    v19 = String._bridgeToObjectiveC()();
    v20 = String._bridgeToObjectiveC()();
    v21 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, v20, 0);

    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v25 = sub_319AC(&qword_3B66F8);
    v26 = swift_allocObject(v25, 112, 7);
    *(_OWORD *)(v26 + 16) = xmmword_2E5F70;
    *(_QWORD *)(v26 + 56) = &type metadata for String;
    v27 = sub_42298();
    *(_QWORD *)(v26 + 32) = v15;
    *(_QWORD *)(v26 + 40) = v14;
    *(_QWORD *)(v26 + 96) = &type metadata for String;
    *(_QWORD *)(v26 + 104) = v27;
    *(_QWORD *)(v26 + 64) = v27;
    *(_QWORD *)(v26 + 72) = v17;
    *(_QWORD *)(v26 + 80) = v16;
    v15 = static String.localizedStringWithFormat(_:_:)(v22, v24, v26);
    swift_bridgeObjectRelease(v26);
    swift_release(v13);
    swift_bridgeObjectRelease(v24);
  }
  else
  {
    swift_bridgeObjectRetain(v14);
    swift_release(v13);
  }
  return v15;
}

Swift::String __swiftcall PageNumberProvider.pageName(forPageOffset:)(Swift::Int forPageOffset)
{
  Swift::Int v1;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v4;
  Swift::String result;

  v1 = PageNumberProvider.displayPageNumber(fromBookPageOffset:)(forPageOffset);
  v4 = PageNumberProvider.pageName(for:)(v1);
  object = v4._object;
  countAndFlagsBits = v4._countAndFlagsBits;
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t PageNumberProvider.pageNamesInvalidatedPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = sub_319AC(&qword_3B8E20);
  v27 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v2 = (char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_319AC(&qword_3B8330);
  __chkstk_darwin(v28);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_319AC(&qword_3B69A8);
  __chkstk_darwin(v24);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_319AC(&qword_3B69B0);
  v26 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_usePhysicalPagesSubject);
  v10 = sub_319AC((uint64_t *)&unk_3B89F0);
  v11 = sub_3DCC0(&qword_3B6990, (uint64_t *)&unk_3B89F0, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v12 = Publisher.eraseToAnyPublisher()(v10, v11);
  v29 = v12;
  v13 = sub_319AC((uint64_t *)&unk_3BCEC0);
  v14 = sub_3DCC0((unint64_t *)&unk_3BE700, (uint64_t *)&unk_3BCEC0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(address(of:), 0, v13, (char *)&type metadata for () + 8, v14);
  swift_release(v12);
  v15 = *(_QWORD *)(v0 + 24);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v15 + 40))(ObjectType, v15);
  v17 = sub_3DCC0(&qword_3B8100, &qword_3B8E20, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v18 = v25;
  Publisher.map<A>(_:)(address(of:), 0, v25, (char *)&type metadata for () + 8, v17);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v2, v18);
  v19 = sub_3DCC0(&qword_3B69B8, &qword_3B69A8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v20 = sub_3DCC0((unint64_t *)&unk_3B8350, &qword_3B8330, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publishers.Merge.init(_:_:)(v6, v4, v24, v28, v19, v20);
  v21 = sub_3DCC0(&qword_3B69C0, &qword_3B69B0, (uint64_t)&protocol conformance descriptor for Publishers.Merge<A, B>);
  v22 = Publisher.eraseToAnyPublisher()(v7, v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  return v22;
}

Swift::Int_optional __swiftcall PageNumberProvider.pageOffset(fromDisplayNumber:)(Swift::Int fromDisplayNumber)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t ObjectType;
  uint64_t (*v15)(uint64_t, uint64_t);
  Swift::Int v16;
  Swift::Bool v17;
  Swift::Int v18;
  uint64_t v19;
  Swift::Int v20;
  BOOL v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  Swift::Int_optional result;

  v3 = NSNotFound.getter();
  v4 = fromDisplayNumber - 1;
  v5 = fromDisplayNumber < 1 || v3 == fromDisplayNumber;
  v6 = v5;
  if (v5)
  {
    v7 = Logger.logObject.getter(v3);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v9 = 134217984;
      v27 = fromDisplayNumber;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v9 + 4);
      _os_log_impl(&dword_0, v7, v8, "Invalid displayPageNumber provided: %ld", v9, 0xCu);
      swift_slowDealloc(v9, -1, -1);
    }

    v4 = 0;
    goto LABEL_22;
  }
  v10 = swift_beginAccess(v1 + 32, &v27, 0, 0);
  v11 = *(_QWORD *)(v1 + 32);
  if (!v11)
  {
    v23 = Logger.logObject.getter(v10);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_0, v23, v24, "Missing configuration, unable to properly determine pageOffset", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    goto LABEL_22;
  }
  v12 = *(_QWORD *)(v1 + 40);
  v13 = (_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout);
  swift_beginAccess(v13, &v26, 0, 0);
  if (*v13 != 1)
  {
    ObjectType = swift_getObjectType(v11);
    v15 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 120);
    swift_unknownObjectRetain(v11);
    v16 = v15(ObjectType, v12);
    v18 = fromDisplayNumber * v16;
    if ((unsigned __int128)(fromDisplayNumber * (__int128)v16) >> 64 == (fromDisplayNumber * v16) >> 63)
    {
      v19 = v15(ObjectType, v12);
      v16 = swift_unknownObjectRelease(v11);
      if (v19 + 0x4000000000000000 >= 0)
      {
        v20 = v18 - 2 * v19;
        if (!__OFSUB__(v18, 2 * v19))
        {
          v21 = __OFADD__(v20, 1);
          v22 = v20 + 1;
          if (!v21)
          {
            v4 = v22 & ~(v22 >> 63);
            goto LABEL_22;
          }
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_25;
  }
LABEL_22:
  v16 = v4;
  v17 = v6;
LABEL_27:
  result.value = v16;
  result.is_nil = v17;
  return result;
}

uint64_t (*sub_492FC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return j_j__swift_endAccess;
}

unint64_t sub_49358(Swift::Int a1)
{
  return (unint64_t)PageNumberProvider.pageOffset(fromDisplayNumber:)(a1);
}

void (*sub_49378(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = sub_47754(v2);
  return sub_493BC;
}

void sub_493BC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

_QWORD *sub_493EC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, void *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  NSString v46;
  id v47;
  _BYTE *v48;
  int v49;
  NSString v50;
  NSString v51;
  char v52;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62[3];
  _BYTE v63[24];

  v7 = v6;
  v55 = a5;
  v56 = a6;
  v61 = a2;
  v11 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v11);
  v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v15 = *(_QWORD *)(v14 - 8);
  v57 = v14;
  v58 = v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_319AC(&qword_3BC510);
  v19 = *(_QWORD *)(v18 - 8);
  v59 = v18;
  v60 = v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[5] = 0;
  v6[4] = 0;
  v22 = v6 + 4;
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v23 = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD000000000000021, 0x80000000002C6750);
  Logger.init(_:)(v23);
  *((_BYTE *)v6 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout) = 0;
  v24 = OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_usePhysicalPagesSubject;
  v63[0] = 0;
  v25 = sub_319AC((uint64_t *)&unk_3B89F0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  *(_QWORD *)((char *)v6 + v24) = CurrentValueSubject.init(_:)(v63);
  *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_subscribers) = _swiftEmptyArrayStorage;
  v26 = v61;
  v6[2] = a1;
  v6[3] = v26;
  v61 = a3;
  sub_49F1C((uint64_t)a3, (uint64_t)(v6 + 6));
  swift_beginAccess(v6 + 4, v63, 1, 0);
  v27 = v6[4];
  *v22 = a4;
  v7[5] = v55;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a4);
  swift_unknownObjectRelease(v27);
  v28 = v56;
  v7[11] = v56;
  v29 = (void *)objc_opt_self(NSNotificationCenter);
  v30 = v28;
  v31 = objc_msgSend(v29, "defaultCenter");
  v32 = v30;
  NSNotificationCenter.publisher(for:object:)(NSUserDefaultsDidChangeNotification, v30);

  v33 = sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v62[0] = (id)static OS_dispatch_queue.main.getter();
  v34 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v13, 1, 1, v34);
  v35 = sub_49F60();
  v36 = sub_49FA8();
  v37 = v57;
  Publisher.receive<A>(on:options:)(v62, v13, v57, v33, v35, v36);
  sub_4A000((uint64_t)v13);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v17, v37);
  v38 = swift_allocObject(&unk_37B078, 24, 7);
  swift_weakInit(v38 + 16, v7);
  v39 = sub_3DCC0((unint64_t *)&unk_3BC560, &qword_3BC510, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v40 = v59;
  v41 = Publisher<>.sink(receiveValue:)(sub_4A064, v38, v59, v39);
  swift_release(v38);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v21, v40);
  v42 = (char *)v7 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_subscribers;
  swift_beginAccess((char *)v7 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_subscribers, v62, 33, 0);
  v43 = sub_319AC(&qword_3B8390);
  v44 = sub_3DCC0((unint64_t *)&unk_3BD170, &qword_3B8390, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v42, v43, v44);
  swift_endAccess(v62);
  swift_release(v41);
  v45 = (void *)v7[11];
  v46 = String._bridgeToObjectiveC()();
  v47 = objc_msgSend(v45, "BOOLForKey:", v46);

  v48 = (char *)v7 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout;
  swift_beginAccess((char *)v7 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout, v62, 1, 0);
  v49 = *v48;
  *v48 = (_BYTE)v47;
  if ((_DWORD)v47 != v49)
  {
    v50 = String._bridgeToObjectiveC()();
    objc_msgSend(v45, "setBool:forKey:", v47, v50);

  }
  v51 = String._bridgeToObjectiveC()();
  v52 = objc_msgSend(v45, "BOOLForKey:", v51);

  sub_47AB0(v52);
  sub_34488(v61);
  return v7;
}

uint64_t sub_49900(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_49934(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  Class isa;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD v13[2];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(objc_allocWithZone((Class)NSNumberFormatter), "init");
  objc_msgSend(v6, "setNumberStyle:", 1);
  objc_msgSend(v6, "setUsesGroupingSeparator:", 0);
  v7 = objc_msgSend((id)objc_opt_self(NSLocale), "currentLocale");
  static Locale._unconditionallyBridgeFromObjectiveC(_:)();

  isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v6, "setLocale:", isa);

  v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a1 & ~(a1 >> 63));
  v10 = objc_msgSend(v6, "stringFromNumber:", v9);

  if (v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  }
  else
  {
    v13[1] = a1;
    v11 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);

  }
  return v11;
}

uint64_t sub_49AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3B8DF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_49B20(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t *sub_49B44(uint64_t *a1)
{
  sub_49BA4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t sub_49BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a4 != 1)
  {
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_49BD8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_49C0C@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  _BYTE v6[24];

  v3 = *a1;
  swift_beginAccess(*a1 + 32, v6, 0, 0);
  v4 = *(_OWORD *)(v3 + 32);
  *a2 = v4;
  return swift_unknownObjectRetain(v4);
}

uint64_t sub_49C5C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8BookEPUB18PageNumberProvider_useMultipleLabelsInTwoColumnLayout);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

_QWORD *sub_49CB0@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = CurrentValueSubject.value.getter(&v3);
  *a1 = v3;
  return result;
}

void sub_49CF4(char *a1)
{
  sub_47AB0(*a1);
}

uint64_t dispatch thunk of ContentNavigationEventHandler.handleExternalLoadRequest(externalURL:likelyUserInitiated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didSelect(pageNavigationStyle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of NavigationHistoryControlling.previous()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ContentSizeCategoryManaging.increaseContentSize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didTapIncreaseContentSize()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ContentMediatorEventHandling.contentDidEnterFullscreen(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.readingSettingsSetAdjustingBrightness(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didTapAllowCellular()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didTapWaitForWifi()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of PageNumberProviding.rawPageNumber(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of PageNumberProviding.pageName(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of ReadingSettingsProviding.readingLoupeAllowable.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of ReadingSettingsProviding.readingLoupeAllowable.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of ReadingSettingsProviding.readingLoupeAllowablePublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of PageNumberProviding.pageOffset(fromDisplayNumber:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of PageNumberProviding.displayPageNumber(fromBookPageOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of ContentNavigationEventHandler.handleInternalLoadRequestForNewWindow(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didSelect(theme:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didSelectVoiceOver(scroll:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_49DCC()
{
  return type metadata accessor for PageNumberProvider(0);
}

uint64_t type metadata accessor for PageNumberProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_3B69F0;
  if (!qword_3B69F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PageNumberProvider);
  return result;
}

uint64_t sub_49E10(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_2E6458;
  v4[1] = &unk_2E6470;
  v4[2] = &unk_2E6488;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_2E64A0;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PageNumberProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for PageNumberProvider);
}

uint64_t dispatch thunk of PageNumberProvider.currentConfiguration.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of Stack.clear()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SearchBarResponderState.$resignFirstResponder.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PageNumberProvider.__allocating_init(paginationProvider:bookEntity:currentConfiguration:userDefaults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t dispatch thunk of PageNumberProvider.usePhysicalPagesValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of ContentSizeCategoryManager.canDecreaseContentSize.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t sub_49F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_49F60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B6B28;
  if (!qword_3B6B28)
  {
    v1 = type metadata accessor for NSNotificationCenter.Publisher(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSNotificationCenter.Publisher, v1);
    atomic_store(result, (unint64_t *)&qword_3B6B28);
  }
  return result;
}

unint64_t sub_49FA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8E80;
  if (!qword_3B8E80)
  {
    v1 = sub_34450(255, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_3B8E80);
  }
  return result;
}

uint64_t sub_4A000(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC((uint64_t *)&unk_3B80B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_4A040()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_4A064(uint64_t a1)
{
  uint64_t v1;

  return sub_47928(a1, v1);
}

_QWORD *sub_4A070(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_F50A8(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (__int128 *)(a1 + 56);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v12 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        v10 = *v4;
        v11 = *(v4 - 1);
        sub_F50A8(v7 > 1, v8 + 1, 1);
        v6 = v10;
        v5 = v11;
        result = v12;
      }
      result[2] = v8 + 1;
      v9 = &result[4 * v8];
      *((_OWORD *)v9 + 2) = v5;
      *((_OWORD *)v9 + 3) = v6;
      v4 = (__int128 *)((char *)v4 + 40);
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t ElementPaginationEntityReference.pageOffset.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t ElementPaginationEntityReference.entity.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_4A164@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double *v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = (double *)swift_bridgeObjectRetain(v3);
  sub_4A1C8(v4, (uint64_t)&v6);
  result = swift_bridgeObjectRelease(v3);
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 24) = v8;
  }
  return result;
}

double *sub_4A1C8@<X0>(double *result@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unint64_t v12;
  uint64_t v13;
  CGRect v14;
  CGRect v15;

  v2 = result;
  v4 = *((_QWORD *)result + 2);
  v5 = v4 != 0;
  v6 = v4 == 0;
  if (v4)
  {
    v7 = *((_QWORD *)result + 4);
    x = result[5];
    y = result[6];
    width = result[7];
    height = result[8];
    v12 = v4 - v5;
    if (v4 != v5)
    {
      if (v4 <= v5)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRetain(result);
      v13 = (uint64_t)&v2[5 * v5 + 8];
      do
      {
        if (v6)
        {
          v6 = 1;
        }
        else if (*(_QWORD *)(v13 - 32) == v7)
        {
          v14.origin.x = x;
          v14.origin.y = y;
          v14.size.width = width;
          v14.size.height = height;
          v15 = CGRectUnion(v14, *(CGRect *)(v13 - 24));
          x = v15.origin.x;
          y = v15.origin.y;
          width = v15.size.width;
          height = v15.size.height;
          v6 = 0;
        }
        else
        {
          v7 = 0;
          v6 = 1;
          x = 0.0;
          y = 0.0;
          width = 0.0;
          height = 0.0;
        }
        v13 += 40;
        --v12;
      }
      while (v12);
      result = (double *)swift_bridgeObjectRelease(v2);
    }
  }
  else
  {
    v7 = 0;
    x = 0.0;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  *(_QWORD *)a2 = v7;
  *(CGFloat *)(a2 + 8) = x;
  *(CGFloat *)(a2 + 16) = y;
  *(CGFloat *)(a2 + 24) = width;
  *(CGFloat *)(a2 + 32) = height;
  *(_BYTE *)(a2 + 40) = v6;
  return result;
}

uint64_t sub_4A2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
}

_QWORD *ElementPaginationEntityReference.__allocating_init<A>(rects:pageOffset:entity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;

  swift_allocObject(v6, 48, 7);
  v13 = sub_4A79C(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v13;
}

_QWORD *ElementPaginationEntityReference.init<A>(rects:pageOffset:entity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v8;

  v8 = sub_4A79C(a1, a2, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v8;
}

uint64_t ElementPaginationEntityReference.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t ElementPaginationEntityReference.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_4A468()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 16));
}

uint64_t sub_4A474()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 24);
}

uint64_t sub_4A480()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 32));
}

uint64_t sub_4A4A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double *v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v4 = (double *)swift_bridgeObjectRetain(v3);
  sub_4A1C8(v4, (uint64_t)&v6);
  result = swift_bridgeObjectRelease(v3);
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v6;
    *(_OWORD *)(a1 + 8) = v7;
    *(_OWORD *)(a1 + 24) = v8;
  }
  return result;
}

uint64_t sub_4A510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(*(_QWORD *)v0 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
}

uint64_t sub_4A554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t (*v10)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;

  v14 = a1;
  v10 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(v5 + 120);
  v11 = sub_319AC(&qword_3B7330);
  v12 = sub_4A890();
  result = v10(&v14, a2, a3, a4, v11, v12);
  *a5 = result;
  return result;
}

uint64_t ElementPaginationEntityReference.description.getter()
{
  _QWORD *v0;
  _QWORD *v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  Swift::String v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  __int128 v18;
  _QWORD v19[2];

  v1 = v0;
  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v2._countAndFlagsBits = 15370;
  v2._object = (void *)0xE200000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = _typeName(_:qualified:)(*v0, 0);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0x6572202020200A3ELL;
  v5._object = (void *)0xEE00203D20737463;
  String.append(_:)(v5);
  v6 = v0[2];
  v7 = swift_bridgeObjectRetain(v6);
  v8 = sub_4A070(v7);
  swift_bridgeObjectRelease(v6);
  type metadata accessor for CGRect(0);
  v10._countAndFlagsBits = Array.description.getter(v8, v9);
  v11 = v10._object;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v11);
  v12._object = (void *)0x80000000002C6780;
  v12._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v12);
  *(_QWORD *)&v18 = v1[3];
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v14 = v13._object;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v14);
  v15._countAndFlagsBits = 0x746E65202020200ALL;
  v15._object = (void *)0xEE00203D20797469;
  String.append(_:)(v15);
  v18 = *((_OWORD *)v1 + 2);
  v16 = sub_319AC(&qword_3B6B30);
  _print_unlocked<A, B>(_:_:)(&v18, v19, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v19[0];
}

uint64_t sub_4A77C()
{
  return ElementPaginationEntityReference.description.getter();
}

_QWORD *sub_4A79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  __chkstk_darwin(a1);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = sub_319AC(&qword_3B6C00);
  v6[2] = Array.init<A>(_:)(v13, v15, a5, *(_QWORD *)(a6 + 8));
  v6[3] = a2;
  v6[4] = a3;
  v6[5] = a4;
  return v6;
}

uint64_t type metadata accessor for ElementPaginationEntityReference()
{
  return objc_opt_self(_TtC8BookEPUB32ElementPaginationEntityReference);
}

uint64_t method lookup function for ElementPaginationEntityReference(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ElementPaginationEntityReference);
}

uint64_t dispatch thunk of ElementPaginationEntityReference.boundingRect.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ElementPaginationEntityReference.__allocating_init<A>(rects:pageOffset:entity:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

unint64_t sub_4A890()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B6BF8;
  if (!qword_3B6BF8)
  {
    v1 = sub_31A38(&qword_3B7330);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_3B6BF8);
  }
  return result;
}

id sub_4A8DC()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.0, 0.0, 1.0);
  qword_3B6C08 = (uint64_t)result;
  return result;
}

CALayerCornerCurve sub_4A91C()
{
  qword_3B6C10 = (uint64_t)kCACornerCurveContinuous;
  return kCACornerCurveContinuous;
}

id sub_4A934()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.0, 0.0, 0.0, 0.3);
  qword_3B6C18 = (uint64_t)result;
  return result;
}

id sub_4A97C()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.235294118, 0.235294118, 0.262745098, 0.15);
  qword_3B6C20 = (uint64_t)result;
  return result;
}

void sub_4A9D0()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  v1 = objc_msgSend(v0, "CGColor");

  qword_3B6C28 = (uint64_t)v1;
}

id sub_4AA30()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 1.0, 1.0, 0.1);
  qword_3B6C30 = (uint64_t)result;
  return result;
}

id sub_4AA74(uint64_t a1)
{
  return sub_4AADC(a1, &qword_3B6C38);
}

id sub_4AA80()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 0.235294118, 0.235294118, 0.262745098, 0.05);
  qword_3B6C40 = (uint64_t)result;
  return result;
}

id sub_4AAD0(uint64_t a1)
{
  return sub_4AADC(a1, &qword_3B6C48);
}

id sub_4AADC(uint64_t a1, _QWORD *a2)
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)UIColor), "initWithRed:green:blue:alpha:", 1.0, 1.0, 1.0, 0.0);
  *a2 = result;
  return result;
}

id ContentLoaderPlaceholderView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", a1, a2, a3, a4);
}

char *ReadingLoupeView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  double v25;
  id v26;
  id v27;
  id v28;
  objc_super v30;

  *(_QWORD *)&v4[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewInset] = 0x3FF0000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeOverlayMaskBuffer] = 0x4059000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeTwoUpMarginInset] = 0x4010000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeTwoUpWidthAdjustment] = 0x3FE0000000000000;
  *(_QWORD *)&v4[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeOverlap] = 0x4024000000000000;
  v9 = OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView;
  v10 = v4;
  *(_QWORD *)&v4[v9] = sub_4AF60();
  v11 = OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewGradientLayer;
  v12 = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  objc_msgSend(v12, "setCornerRadius:", 8.0);
  v13 = qword_3B5658;
  v14 = v12;
  if (v13 != -1)
    swift_once(&qword_3B5658, sub_4A91C);
  objc_msgSend(v14, "setCornerCurve:", qword_3B6C10);

  objc_msgSend(v14, "setAllowsGroupOpacity:", 1);
  *(_QWORD *)&v10[v11] = v14;
  v15 = OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewInnerStrokeLayer;
  v16 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  objc_msgSend(v16, "setLineWidth:", 1.0);
  if (qword_3B5670 != -1)
    swift_once(&qword_3B5670, sub_4A9D0);
  objc_msgSend(v16, "setFillColor:", qword_3B6C28);
  objc_msgSend(v16, "setCornerCurve:", qword_3B6C10);
  objc_msgSend(v16, "setAllowsGroupOpacity:", 1);
  *(_QWORD *)&v10[v15] = v16;

  v30.receiver = v10;
  v30.super_class = (Class)type metadata accessor for ReadingLoupeView();
  v17 = (char *)objc_msgSendSuper2(&v30, "initWithFrame:", a1, a2, a3, a4);
  v18 = *(_QWORD *)&v17[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView];
  v19 = v17;
  objc_msgSend(v19, "addSubview:", v18);
  v20 = objc_msgSend(v19, "layer");
  objc_msgSend(v20, "addSublayer:", *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewGradientLayer]);

  v21 = objc_msgSend(v19, "layer");
  objc_msgSend(v21, "addSublayer:", *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewInnerStrokeLayer]);

  v22 = objc_msgSend(v19, "layer");
  objc_msgSend(v22, "setBorderWidth:", 0.5);

  v23 = objc_msgSend(v19, "layer");
  v24 = v23;
  v25 = a4 / 3.0;
  if (a4 / 3.0 > 8.0)
    v25 = 8.0;
  objc_msgSend(v23, "setCornerRadius:", v25);

  v26 = objc_msgSend(v19, "layer");
  objc_msgSend(v26, "setCornerCurve:", qword_3B6C10);

  v27 = objc_msgSend(v19, "layer");
  objc_msgSend(v27, "setMasksToBounds:", 0);

  v28 = objc_msgSend(v19, "layer");
  objc_msgSend(v28, "setAllowsGroupOpacity:", 0);

  objc_msgSend(v19, "setClipsToBounds:", 0);
  return v19;
}

id sub_4AF60()
{
  id v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  double v7;
  id v8;
  id v9;

  v0 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
  v1 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  objc_msgSend(v0, "setBackgroundColor:", v1);

  v2 = objc_msgSend(v0, "layer");
  if (qword_3B5650 != -1)
    swift_once(&qword_3B5650, sub_4A8DC);
  v3 = objc_msgSend((id)qword_3B6C08, "CGColor");
  objc_msgSend(v2, "setShadowColor:", v3);

  v4 = objc_msgSend(v0, "layer");
  objc_msgSend(v4, "setShadowOffset:", 0.0, 2.0);

  v5 = objc_msgSend(v0, "layer");
  objc_msgSend(v5, "setShadowRadius:", 5.0);

  v6 = objc_msgSend(v0, "layer");
  LODWORD(v7) = 1036831949;
  objc_msgSend(v6, "setShadowOpacity:", v7);

  v8 = objc_msgSend(v0, "layer");
  if (qword_3B5658 != -1)
    swift_once(&qword_3B5658, sub_4A91C);
  objc_msgSend(v8, "setCornerCurve:", qword_3B6C10);

  v9 = objc_msgSend(v0, "layer");
  objc_msgSend(v9, "setMasksToBounds:", 0);

  objc_msgSend(v0, "setClipsToBounds:", 0);
  return v0;
}

uint64_t type metadata accessor for ReadingLoupeView()
{
  return objc_opt_self(_TtC8BookEPUB16ReadingLoupeView);
}

void sub_4B1A8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  char v5;
  double v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;

  v8 = *(_QWORD *)(a1 + 32);
  sub_4BCB4();
  sub_4BF18();
  v2 = *(void **)(v1 + OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewInnerStrokeLayer);
  v3 = (void *)objc_opt_self(UIColor);
  v9 = v2;
  v4 = objc_msgSend(v3, "whiteColor");
  v5 = BookThemeEntity.hasDarkBackground.getter();
  v6 = 0.3;
  if ((v5 & 1) != 0)
    v6 = 0.2;
  v7 = objc_msgSend(v4, "colorWithAlphaComponent:", v6, v8);

  v10 = objc_msgSend(v7, "CGColor");
  objc_msgSend(v9, "setStrokeColor:", v10);

}

void sub_4B344(char *a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char v13;
  double v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = a1[1];
  v5 = a1[2];
  v6 = *((_QWORD *)a1 + 1);
  v23 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a1 + 5);
  v21 = *((_QWORD *)a1 + 7);
  v22 = *((_QWORD *)a1 + 6);
  v26 = *a1;
  v3 = v26;
  v27 = v4;
  v28 = v5;
  v29 = v6;
  v30 = v23;
  v31 = v8;
  v32 = v7;
  v33 = v9;
  v34 = v22;
  v35 = v21;
  sub_4B1A8((uint64_t)&v26);
  v10 = OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView;
  v11 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                              + OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView), "layer"));
  v26 = v3;
  v27 = v4;
  v28 = v5;
  v29 = v6;
  v30 = v23;
  v31 = v8;
  v32 = v7;
  v33 = v9;
  v12 = v2;
  v34 = v22;
  v35 = v21;
  v13 = BookThemeEntity.hasDarkBackground.getter();
  LODWORD(v14) = 1036831949;
  if ((v13 & 1) != 0)
    *(float *)&v14 = 0.15;
  objc_msgSend(v11, "setShadowOpacity:", v14, v21, v22, v23);

  v15 = objc_msgSend(*(id *)(v2 + v10), "layer");
  if (qword_3B5650 != -1)
    swift_once(&qword_3B5650, sub_4A8DC);
  v16 = objc_msgSend((id)qword_3B6C08, "CGColor");
  objc_msgSend(v15, "setShadowColor:", v16);

  v17 = objc_msgSend(*(id *)(v12 + v10), "layer");
  v18 = v17;
  v19 = 2.0;
  if (a2 == 3)
  {
    v20 = 5.0;
  }
  else
  {
    v19 = 8.0;
    v20 = 32.0;
  }
  objc_msgSend(v17, "setShadowOffset:", 0.0, v19);

  v25 = objc_msgSend(*(id *)(v12 + v10), "layer");
  objc_msgSend(v25, "setShadowRadius:", v20);

}

void sub_4B55C(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, double a5, double a6, double a7, double a8)
{
  char *v8;
  CGFloat v13;
  double Width;
  double v15;
  double v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  double v21;
  CGFloat v22;
  double Height;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  double v30;
  id v31;
  id v32;
  double v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  double v43;
  double v45;
  double v47;
  id v49;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v13 = a2 + -1.0;
  Width = CGRectGetWidth(*(CGRect *)&a1);
  objc_msgSend(v8, "frame");
  objc_msgSend(v8, "setFrame:", a1, v13, Width);
  v50.origin.x = a1;
  v50.origin.y = a2;
  v50.size.width = a3;
  v50.size.height = a4;
  v15 = (CGRectGetHeight(v50) + 2.0) / 3.0;
  if (v15 <= 8.0)
    v16 = v15;
  else
    v16 = 8.0;
  v17 = objc_msgSend(v8, "layer", *(_QWORD *)&a5, *(_QWORD *)&a6, *(_QWORD *)&a7);
  objc_msgSend(v17, "setCornerRadius:", v16);

  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    v18 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v18, "begin");
    v19 = objc_msgSend((id)objc_opt_self(CAMediaTimingFunction), "functionWithName:", kCAMediaTimingFunctionEaseInEaseOut);
    objc_msgSend(v18, "setAnimationTimingFunction:", v19);

    objc_msgSend(v18, "setDisableActions:", 1);
  }
  v20 = *(id *)&v8[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewGradientLayer];
  v51.origin.x = a1;
  v51.origin.y = a2;
  v51.size.width = a3;
  v51.size.height = a4;
  v21 = CGRectGetWidth(v51);
  v52.origin.x = a1;
  v52.origin.y = a2;
  v52.size.width = a3;
  v52.size.height = a4;
  objc_msgSend(v20, "setFrame:", 0.0, 1.5, v21, CGRectGetHeight(v52) * 0.5);

  objc_msgSend(v8, "frame");
  v22 = CGRectGetWidth(v53) + -2.0;
  v54.origin.x = a1;
  v54.origin.y = a2;
  v54.size.width = a3;
  v54.size.height = a4;
  Height = CGRectGetHeight(v54);
  v24 = (void *)objc_opt_self(UIBezierPath);
  v25 = objc_msgSend(v24, "bezierPathWithRoundedRect:cornerRadius:", 1.0, 1.0, v22, Height, v16 + -1.0);
  v26 = *(id *)&v8[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewInnerStrokeLayer];
  v27 = objc_msgSend(v25, "CGPath");
  objc_msgSend(v26, "setPath:", v27);

  v28 = OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView;
  v29 = *(id *)&v8[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView];
  v55.origin.x = a1;
  v55.origin.y = a2;
  v55.size.width = a3;
  v55.size.height = a4;
  v30 = CGRectGetWidth(v55);
  objc_msgSend(v8, "frame");
  objc_msgSend(v29, "setFrame:", 0.0, 0.0, v30);

  v31 = objc_msgSend(*(id *)&v8[v28], "layer");
  objc_msgSend(v31, "setCornerRadius:", v16);

  v32 = objc_msgSend(*(id *)&v8[v28], "layer");
  objc_msgSend(v32, "setCornerCurve:", kCACornerCurveContinuous);

  v56.origin.x = a1;
  v56.origin.y = a2;
  v56.size.width = a3;
  v56.size.height = a4;
  v33 = CGRectGetWidth(v56);
  v57.origin.x = a1;
  v57.origin.y = a2;
  v57.size.width = a3;
  v57.size.height = a4;
  v34 = objc_msgSend(v24, "bezierPathWithRoundedRect:cornerRadius:", 0.0, 0.0, v33, CGRectGetHeight(v57) + 2.0, v16);
  v35 = objc_msgSend(v24, "bezierPathWithRect:", v43, v45, v47, a8);
  objc_msgSend(v34, "appendPath:", v35);
  objc_msgSend(v34, "closePath");
  v49 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  v36 = objc_msgSend(v34, "CGPath");
  objc_msgSend(v49, "setPath:", v36);

  objc_msgSend(v49, "setFillRule:", kCAFillRuleEvenOdd);
  v37 = objc_msgSend(*(id *)&v8[v28], "layer");
  objc_msgSend(v37, "setMask:", v49);

  if (UIAccessibilityIsReduceMotionEnabled())
  {
    v58.origin.x = a1;
    v58.origin.y = a2;
    v58.size.width = a3;
    v58.size.height = a4;
    CGRectGetHeight(v58);
    objc_msgSend(v8, "frame");
    objc_msgSend(v8, "setFrame:");
    v38 = *(id *)&v8[v28];
    v59.origin.x = a1;
    v59.origin.y = a2;
    v59.size.width = a3;
    v59.size.height = a4;
    CGRectGetHeight(v59);
    objc_msgSend(v38, "frame");
    objc_msgSend(v38, "setFrame:");

  }
  else
  {
    v39 = (void *)objc_opt_self(CATransaction);
    objc_msgSend(v39, "setAnimationDuration:", 0.5);
    sub_4C140();
    v40 = swift_allocObject(&unk_37B0F0, 24, 7);
    v41 = swift_unknownObjectWeakInit(v40 + 16, v8);
    __chkstk_darwin(v41);
    static UIView.animate(springDuration:bounce:initialSpringVelocity:delay:options:animations:completion:)(0, sub_4C1A0, 0.5, 0.0, 0.0, 0.0);
    objc_msgSend(v39, "commit", swift_release(v40).n128_f64[0]);
  }

}

void sub_4BBA4(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v9;
  void *Strong;
  char *v11;
  id v12;
  _BYTE v13[24];
  CGRect v14;
  CGRect v15;

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v9);
  if (Strong)
  {
    v11 = Strong;
    v14.origin.x = a2;
    v14.origin.y = a3;
    v14.size.width = a4;
    v14.size.height = a5;
    CGRectGetHeight(v14);
    objc_msgSend(v11, "frame");
    objc_msgSend(v11, "setFrame:");

    v12 = *(id *)&v11[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView];
    v15.origin.x = a2;
    v15.origin.y = a3;
    v15.size.width = a4;
    v15.size.height = a5;
    CGRectGetHeight(v15);
    objc_msgSend(v12, "frame");
    objc_msgSend(v12, "setFrame:");

  }
}

void sub_4BCB4()
{
  void *v0;
  uint64_t *v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  char *v11;
  uint64_t v12;
  id v13;

  v9 = objc_msgSend(v0, "layer");
  if ((BookThemeEntity.hasDarkBackground.getter() & 1) != 0)
  {
    if (qword_3B5660 != -1)
      swift_once(&qword_3B5660, sub_4A934);
    v1 = &qword_3B6C18;
  }
  else
  {
    if (qword_3B5668 != -1)
      swift_once(&qword_3B5668, sub_4A97C);
    v1 = &qword_3B6C20;
  }
  v2 = objc_msgSend((id)*v1, "CGColor", v9);
  objc_msgSend(v10, "setBorderColor:", v2);

  v11 = (char *)OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView;
  v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v12
                                                             + OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView), "layer"));
  BookThemeEntity.backgroundColor.getter();
  v5 = v4;
  v6 = objc_msgSend(v4, "CGColor");

  objc_msgSend(v3, "setBorderColor:", v6);
  v7 = *(id *)&v11[v12];
  BookThemeEntity.backgroundColor.getter();
  v13 = v8;
  objc_msgSend(v7, "setBackgroundColor:", v8);

}

void sub_4BF18()
{
  uint64_t v0;
  char v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  Class isa;

  v1 = BookThemeEntity.hasDarkBackground.getter();
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewGradientLayer);
  v3 = sub_319AC(&qword_3B84F0);
  v4 = swift_allocObject(v3, 96, 7);
  *(_OWORD *)(v4 + 16) = xmmword_2E5F70;
  if ((v1 & 1) != 0)
  {
    v5 = qword_3B5678;
    v6 = v2;
    if (v5 != -1)
      swift_once(&qword_3B5678, sub_4AA30);
    v7 = objc_msgSend((id)qword_3B6C30, "CGColor");
    type metadata accessor for CGColor(0);
    v9 = v8;
    *(_QWORD *)(v4 + 56) = v8;
    *(_QWORD *)(v4 + 32) = v7;
    if (qword_3B5680 != -1)
      swift_once(&qword_3B5680, sub_4AA74);
    v10 = &qword_3B6C38;
  }
  else
  {
    v11 = qword_3B5688;
    v12 = v2;
    if (v11 != -1)
      swift_once(&qword_3B5688, sub_4AA80);
    v13 = objc_msgSend((id)qword_3B6C40, "CGColor");
    type metadata accessor for CGColor(0);
    v9 = v14;
    *(_QWORD *)(v4 + 56) = v14;
    *(_QWORD *)(v4 + 32) = v13;
    if (qword_3B5690 != -1)
      swift_once(&qword_3B5690, sub_4AAD0);
    v10 = &qword_3B6C48;
  }
  v15 = objc_msgSend((id)*v10, "CGColor");
  *(_QWORD *)(v4 + 88) = v9;
  *(_QWORD *)(v4 + 64) = v15;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setColors:", isa, swift_bridgeObjectRelease(v4).n128_f64[0]);

}

unint64_t sub_4C140()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8CB0;
  if (!qword_3B8CB0)
  {
    v1 = objc_opt_self(UIView);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B8CB0);
  }
  return result;
}

uint64_t sub_4C17C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_4C1A0()
{
  uint64_t v0;

  sub_4BBA4(*(_QWORD *)(v0 + 16), *(CGFloat *)(v0 + 24), *(CGFloat *)(v0 + 32), *(CGFloat *)(v0 + 40), *(CGFloat *)(v0 + 48));
}

id ReadingLoupeView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReadingLoupeView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t method lookup function for ReadingLoupeView(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ReadingLoupeView);
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.availableForReuse.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of PaginationOperation.configurationKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.offset + (swift_isaMask & *v0)))();
}

void sub_4C26C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewInset] = 0x3FF0000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeOverlayMaskBuffer] = 0x4059000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeTwoUpMarginInset] = 0x4010000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeTwoUpWidthAdjustment] = 0x3FE0000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeOverlap] = 0x4024000000000000;
  v1 = OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewShadowView;
  *(_QWORD *)&v0[v1] = sub_4AF60();
  v2 = OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewGradientLayer;
  v3 = objc_msgSend(objc_allocWithZone((Class)CAGradientLayer), "init");
  objc_msgSend(v3, "setCornerRadius:", 8.0);
  v4 = qword_3B5658;
  v5 = v3;
  if (v4 != -1)
    swift_once(&qword_3B5658, sub_4A91C);
  objc_msgSend(v5, "setCornerCurve:", qword_3B6C10);

  objc_msgSend(v5, "setAllowsGroupOpacity:", 1);
  *(_QWORD *)&v0[v2] = v5;
  v6 = OBJC_IVAR____TtC8BookEPUB16ReadingLoupeView_readingLoupeViewInnerStrokeLayer;
  v7 = objc_msgSend(objc_allocWithZone((Class)CAShapeLayer), "init");
  objc_msgSend(v7, "setLineWidth:", 1.0);
  if (qword_3B5670 != -1)
    swift_once(&qword_3B5670, sub_4A9D0);
  objc_msgSend(v7, "setFillColor:", qword_3B6C28);
  objc_msgSend(v7, "setCornerCurve:", qword_3B6C10);
  objc_msgSend(v7, "setAllowsGroupOpacity:", 1);
  *(_QWORD *)&v0[v6] = v7;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000000002C69C0, "BookEPUB/ReadingLoupeView.swift", 31, 2, 67, 0);
  __break(1u);
}

unint64_t static DebugOptions.kShowPageCurlOptions.getter()
{
  return 0xD000000000000014;
}

unint64_t static DebugOptions.kFullyFadeChrome.getter()
{
  return 0xD000000000000013;
}

unint64_t static DebugOptions.kMostlyFadeChrome.getter()
{
  return 0xD000000000000011;
}

unint64_t static DebugOptions.kMostlyFadeChromeAlpha.getter()
{
  return 0xD000000000000016;
}

void static DebugOptions.registerOptions()()
{
  id v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Class isa;
  uint64_t v17;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = sub_319AC((uint64_t *)&unk_3B9360);
  inited = swift_initStackObject(v1, &v17);
  *(_OWORD *)(inited + 16) = xmmword_2E65A0;
  *(_QWORD *)(inited + 32) = 0xD000000000000013;
  *(_QWORD *)(inited + 40) = 0x80000000002C6A10;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 72) = &type metadata for Bool;
  *(_QWORD *)(inited + 80) = 0xD000000000000011;
  *(_QWORD *)(inited + 88) = 0x80000000002C6A30;
  *(_BYTE *)(inited + 96) = 0;
  *(_QWORD *)(inited + 120) = &type metadata for Bool;
  *(_QWORD *)(inited + 128) = 0xD000000000000016;
  *(_QWORD *)(inited + 136) = 0x80000000002C6A50;
  *(_QWORD *)(inited + 144) = 0x3FD3333333333333;
  *(_QWORD *)(inited + 168) = &type metadata for Double;
  *(_QWORD *)(inited + 176) = 0xD000000000000017;
  *(_QWORD *)(inited + 184) = 0x80000000002C6A70;
  *(_QWORD *)(inited + 192) = 64;
  *(_QWORD *)(inited + 216) = &type metadata for Int;
  *(_QWORD *)(inited + 224) = 0xD000000000000022;
  *(_QWORD *)(inited + 232) = 0x80000000002C6A90;
  *(_QWORD *)(inited + 240) = 60;
  *(_QWORD *)(inited + 264) = &type metadata for Int;
  *(_QWORD *)(inited + 272) = 0xD00000000000001DLL;
  *(_QWORD *)(inited + 280) = 0x80000000002C6AC0;
  *(_QWORD *)(inited + 288) = 0x3FD0000000000000;
  *(_QWORD *)(inited + 312) = &type metadata for Double;
  *(_QWORD *)(inited + 320) = 0xD000000000000025;
  *(_QWORD *)(inited + 328) = 0x80000000002C6AE0;
  *(_QWORD *)(inited + 336) = 0x3FC999999999999ALL;
  *(_QWORD *)(inited + 360) = &type metadata for Double;
  *(_QWORD *)(inited + 368) = 0xD000000000000014;
  *(_QWORD *)(inited + 376) = 0x80000000002C69F0;
  *(_QWORD *)(inited + 408) = &type metadata for Bool;
  *(_BYTE *)(inited + 384) = 0;
  *(_QWORD *)(inited + 416) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputFrontColor"));
  *(_QWORD *)(inited + 424) = v3;
  *(_QWORD *)(inited + 456) = &type metadata for String;
  *(_QWORD *)(inited + 432) = 0x4646464646464646;
  *(_QWORD *)(inited + 440) = 0xE800000000000000;
  *(_QWORD *)(inited + 464) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputBackColor0"));
  *(_QWORD *)(inited + 472) = v4;
  *(_QWORD *)(inited + 504) = &type metadata for String;
  *(_QWORD *)(inited + 480) = 0x4646354635463546;
  *(_QWORD *)(inited + 488) = 0xE800000000000000;
  *(_QWORD *)(inited + 512) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputBackColor1"));
  *(_QWORD *)(inited + 520) = v5;
  *(_QWORD *)(inited + 552) = &type metadata for String;
  *(_QWORD *)(inited + 528) = 0x4646334233423342;
  *(_QWORD *)(inited + 536) = 0xE800000000000000;
  *(_QWORD *)(inited + 560) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputShadowColor"));
  *(_QWORD *)(inited + 568) = v6;
  *(_QWORD *)(inited + 600) = &type metadata for String;
  *(_QWORD *)(inited + 576) = 0x4646353235323532;
  *(_QWORD *)(inited + 584) = 0xE800000000000000;
  *(_QWORD *)(inited + 608) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputFrontStrength"));
  *(_QWORD *)(inited + 616) = v7;
  *(_QWORD *)(inited + 648) = &type metadata for Double;
  *(_QWORD *)(inited + 624) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 656) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputBack0Strength"));
  *(_QWORD *)(inited + 664) = v8;
  *(_QWORD *)(inited + 696) = &type metadata for Double;
  *(_QWORD *)(inited + 672) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 704) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputBack1Strength"));
  *(_QWORD *)(inited + 712) = v9;
  *(_QWORD *)(inited + 744) = &type metadata for Double;
  *(_QWORD *)(inited + 720) = 0x3FEEB851EB851EB8;
  *(_QWORD *)(inited + 752) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputShadowStrength"));
  *(_QWORD *)(inited + 760) = v10;
  *(_QWORD *)(inited + 792) = &type metadata for Double;
  *(_QWORD *)(inited + 768) = 0x3FC999999999999ALL;
  *(_QWORD *)(inited + 800) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputFrontOpacity"));
  *(_QWORD *)(inited + 808) = v11;
  *(_QWORD *)(inited + 840) = &type metadata for Double;
  *(_QWORD *)(inited + 816) = 0x3FF0000000000000;
  *(_QWORD *)(inited + 848) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputBack0Opacity"));
  *(_QWORD *)(inited + 856) = v12;
  *(_QWORD *)(inited + 888) = &type metadata for Double;
  *(_QWORD *)(inited + 864) = 0x3FE8000000000000;
  *(_QWORD *)(inited + 896) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputBack1Opacity"));
  *(_QWORD *)(inited + 904) = v13;
  *(_QWORD *)(inited + 936) = &type metadata for Double;
  *(_QWORD *)(inited + 912) = 0x3FEB333333333333;
  *(_QWORD *)(inited + 944) = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("kCurlInputShadowOpacity"));
  *(_QWORD *)(inited + 952) = v14;
  *(_QWORD *)(inited + 984) = &type metadata for Double;
  *(_QWORD *)(inited + 960) = 0x3FD999999999999ALL;
  v15 = sub_37F24(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  objc_msgSend(v0, "registerDefaults:", isa);

  _s8BookEPUB12DebugOptionsC7refreshyyFZ_0();
  objc_msgSend((id)objc_opt_self(UIView), "be_enablePageCurlHacks");

}

uint64_t static DebugOptions.showPageCurlOptions.getter()
{
  return byte_3B6CE8;
}

void static DebugOptions.showPageCurlOptions.setter(char a1)
{
  id v2;
  id v3;

  byte_3B6CE8 = a1;
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setBool:forKey:", a1 & 1, v3);

}

void (*static DebugOptions.showPageCurlOptions.modify(_BYTE *a1))(char *a1)
{
  *a1 = byte_3B6CE8;
  return sub_4C990;
}

void sub_4C990(char *a1)
{
  uint64_t v1;
  NSString v2;
  id v3;

  byte_3B6CE8 = *a1;
  v1 = byte_3B6CE8;
  v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setBool:forKey:", v1, v2);

}

double static DebugOptions.pageCurlTapAnimationDuration.getter()
{
  return *(double *)&qword_3B6CD8;
}

void static DebugOptions.pageCurlTapAnimationDuration.setter(double a1)
{
  sub_4CAC0((double *)&qword_3B6CD8, a1);
}

void (*static DebugOptions.pageCurlTapAnimationDuration.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  *a1 = qword_3B6CD8;
  return sub_4CA6C;
}

void sub_4CA6C(_QWORD *a1, uint64_t a2)
{
  sub_4CBA4(a1, a2, &qword_3B6CD8);
}

double static DebugOptions.pageCurlInteractiveAnimationDuration.getter()
{
  return *(double *)&qword_3B6CE0;
}

void static DebugOptions.pageCurlInteractiveAnimationDuration.setter(double a1)
{
  sub_4CAC0((double *)&qword_3B6CE0, a1);
}

void sub_4CAC0(double *a1, double a2)
{
  id v2;
  Class isa;
  id v4;

  *a1 = a2;
  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setObject:forKey:", isa, v4);

}

void (*static DebugOptions.pageCurlInteractiveAnimationDuration.modify(_QWORD *a1))(_QWORD *a1, uint64_t a2)
{
  *a1 = qword_3B6CE0;
  return sub_4CB80;
}

void sub_4CB80(_QWORD *a1, uint64_t a2)
{
  sub_4CBA4(a1, a2, &qword_3B6CE0);
}

void sub_4CBA4(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  Class isa;
  NSString v4;
  id v5;

  *a3 = *a1;
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setObject:forKey:", isa, v4);

}

uint64_t static DebugOptions.curlInputFrontColor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = *(_QWORD *)aFfffffff;
  v1 = *(_QWORD *)&aFfffffff[8];
  swift_bridgeObjectRetain(*(_QWORD *)&aFfffffff[8]);
  return Color.init(hex:)(v0, v1);
}

uint64_t static DebugOptions.curlInputFrontColor.setter(uint64_t a1)
{
  return sub_4CEBC(a1, (uint64_t *)&aFfffffff[8], (Swift::String *)aFfffffff, (id *)&kCurlInputFrontColor);
}

void (*static DebugOptions.curlInputFrontColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)aFfffffff;
  v3 = *(_QWORD *)&aFfffffff[8];
  swift_bridgeObjectRetain(*(_QWORD *)&aFfffffff[8]);
  *a1 = Color.init(hex:)(v2, v3);
  return sub_4CCE8;
}

void sub_4CCE8(uint64_t *a1, char a2)
{
  sub_4CFF8(a1, a2, (void **)&aFfffffff[8], (uint64_t *)aFfffffff, (id *)&kCurlInputFrontColor);
}

uint64_t static DebugOptions.curlInputBackColor0.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = *(_QWORD *)aFfffffff_0;
  v1 = *(_QWORD *)&aFfffffff_0[8];
  swift_bridgeObjectRetain(*(_QWORD *)&aFfffffff_0[8]);
  return Color.init(hex:)(v0, v1);
}

uint64_t static DebugOptions.curlInputBackColor0.setter(uint64_t a1)
{
  return sub_4CEBC(a1, (uint64_t *)&aFfffffff_0[8], (Swift::String *)aFfffffff_0, (id *)&kCurlInputBackColor0);
}

void (*static DebugOptions.curlInputBackColor0.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)aFfffffff_0;
  v3 = *(_QWORD *)&aFfffffff_0[8];
  swift_bridgeObjectRetain(*(_QWORD *)&aFfffffff_0[8]);
  *a1 = Color.init(hex:)(v2, v3);
  return sub_4CDA0;
}

void sub_4CDA0(uint64_t *a1, char a2)
{
  sub_4CFF8(a1, a2, (void **)&aFfffffff_0[8], (uint64_t *)aFfffffff_0, (id *)&kCurlInputBackColor0);
}

uint64_t static DebugOptions.curlInputBackColor1.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = *(_QWORD *)aFfffffff_1;
  v1 = *(_QWORD *)&aFfffffff_1[8];
  swift_bridgeObjectRetain(*(_QWORD *)&aFfffffff_1[8]);
  return Color.init(hex:)(v0, v1);
}

uint64_t static DebugOptions.curlInputBackColor1.setter(uint64_t a1)
{
  return sub_4CEBC(a1, (uint64_t *)&aFfffffff_1[8], (Swift::String *)aFfffffff_1, (id *)&kCurlInputBackColor1);
}

void (*static DebugOptions.curlInputBackColor1.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)aFfffffff_1;
  v3 = *(_QWORD *)&aFfffffff_1[8];
  swift_bridgeObjectRetain(*(_QWORD *)&aFfffffff_1[8]);
  *a1 = Color.init(hex:)(v2, v3);
  return sub_4CE58;
}

void sub_4CE58(uint64_t *a1, char a2)
{
  sub_4CFF8(a1, a2, (void **)&aFfffffff_1[8], (uint64_t *)aFfffffff_1, (id *)&kCurlInputBackColor1);
}

uint64_t static DebugOptions.curlInputShadowColor.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = *(_QWORD *)aFfffffff_2;
  v1 = *(_QWORD *)&aFfffffff_2[8];
  swift_bridgeObjectRetain(*(_QWORD *)&aFfffffff_2[8]);
  return Color.init(hex:)(v0, v1);
}

uint64_t static DebugOptions.curlInputShadowColor.setter(uint64_t a1)
{
  return sub_4CEBC(a1, (uint64_t *)&aFfffffff_2[8], (Swift::String *)aFfffffff_2, (id *)&kCurlInputShadowColor);
}

uint64_t sub_4CEBC(uint64_t a1, uint64_t *a2, Swift::String *a3, id *a4)
{
  Swift::String v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  NSString v12;
  id v13;

  v8 = Color.toHex()();
  v9 = *a2;
  *a3 = v8;
  swift_bridgeObjectRelease(v9);
  v10 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v11 = *a2;
  swift_bridgeObjectRetain(v11);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = *a4;
  objc_msgSend(v10, "setObject:forKey:", v12, v13);

  return swift_release(a1);
}

void (*static DebugOptions.curlInputShadowColor.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)aFfffffff_2;
  v3 = *(_QWORD *)&aFfffffff_2[8];
  swift_bridgeObjectRetain(*(_QWORD *)&aFfffffff_2[8]);
  *a1 = Color.init(hex:)(v2, v3);
  return sub_4CFE0;
}

void sub_4CFE0(uint64_t *a1, char a2)
{
  sub_4CFF8(a1, a2, (void **)&aFfffffff_2[8], (uint64_t *)aFfffffff_2, (id *)&kCurlInputShadowColor);
}

void sub_4CFF8(uint64_t *a1, char a2, void **a3, uint64_t *a4, id *a5)
{
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *v11;
  void *v12;
  NSString v13;
  id v14;
  Swift::String v15;
  void *v16;
  void *v17;
  id v18;

  v8 = *a1;
  v9 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_retain(v9);
    v10 = Color.toHex()();
    v11 = *a3;
    *a4 = v10._countAndFlagsBits;
    *a3 = v10._object;
    swift_bridgeObjectRelease(v11);
    v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v12 = *a3;
    swift_bridgeObjectRetain(*a3);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    v14 = *a5;
    objc_msgSend(v18, "setObject:forKey:", v13, v14);
    swift_release(v8);
  }
  else
  {
    v15 = Color.toHex()();
    v16 = *a3;
    *a4 = v15._countAndFlagsBits;
    *a3 = v15._object;
    swift_bridgeObjectRelease(v16);
    v18 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v17 = *a3;
    swift_bridgeObjectRetain(*a3);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    v14 = *a5;
    objc_msgSend(v18, "setObject:forKey:", v13, v14);
  }
  swift_release(v8);

}

double static DebugOptions.curlInputFrontOpacity.getter()
{
  return *(double *)&qword_3B6D30;
}

void static DebugOptions.curlInputFrontOpacity.setter(double a1)
{
  sub_4D3C4((double *)&qword_3B6D30, &kCurlInputFrontOpacity, a1);
}

void (*static DebugOptions.curlInputFrontOpacity.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  *a1 = qword_3B6D30;
  return sub_4D1B0;
}

void sub_4D1B0(double *a1, uint64_t a2)
{
  sub_4D464(a1, a2, &qword_3B6D30, &kCurlInputFrontOpacity);
}

double static DebugOptions.curlInputBack0Opacity.getter()
{
  return *(double *)&qword_3B6D38;
}

void static DebugOptions.curlInputBack0Opacity.setter(double a1)
{
  sub_4D3C4((double *)&qword_3B6D38, &kCurlInputBack0Opacity, a1);
}

void (*static DebugOptions.curlInputBack0Opacity.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  *a1 = qword_3B6D38;
  return sub_4D200;
}

void sub_4D200(double *a1, uint64_t a2)
{
  sub_4D464(a1, a2, &qword_3B6D38, &kCurlInputBack0Opacity);
}

double static DebugOptions.curlInputBack1Opacity.getter()
{
  return *(double *)&qword_3B6D40;
}

void static DebugOptions.curlInputBack1Opacity.setter(double a1)
{
  sub_4D3C4((double *)&qword_3B6D40, &kCurlInputBack1Opacity, a1);
}

void (*static DebugOptions.curlInputBack1Opacity.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  *a1 = qword_3B6D40;
  return sub_4D250;
}

void sub_4D250(double *a1, uint64_t a2)
{
  sub_4D464(a1, a2, &qword_3B6D40, &kCurlInputBack1Opacity);
}

double static DebugOptions.curlInputShadowOpacity.getter()
{
  return *(double *)&qword_3B6D48;
}

void static DebugOptions.curlInputShadowOpacity.setter(double a1)
{
  sub_4D3C4((double *)&qword_3B6D48, &kCurlInputShadowColor, a1);
}

void (*static DebugOptions.curlInputShadowOpacity.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  *a1 = qword_3B6D48;
  return sub_4D2A0;
}

void sub_4D2A0(double *a1, uint64_t a2)
{
  sub_4D464(a1, a2, &qword_3B6D48, &kCurlInputShadowColor);
}

double static DebugOptions.curlInputFrontStrength.getter()
{
  return *(double *)&qword_3B6D50;
}

void static DebugOptions.curlInputFrontStrength.setter(double a1)
{
  sub_4D3C4((double *)&qword_3B6D50, &kCurlInputFrontStrength, a1);
}

void (*static DebugOptions.curlInputFrontStrength.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  *a1 = qword_3B6D50;
  return sub_4D2F0;
}

void sub_4D2F0(double *a1, uint64_t a2)
{
  sub_4D464(a1, a2, &qword_3B6D50, &kCurlInputFrontStrength);
}

double static DebugOptions.curlInputBack0Strength.getter()
{
  return *(double *)&qword_3B6D58;
}

void static DebugOptions.curlInputBack0Strength.setter(double a1)
{
  sub_4D3C4((double *)&qword_3B6D58, &kCurlInputBack0Strength, a1);
}

void (*static DebugOptions.curlInputBack0Strength.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  *a1 = qword_3B6D58;
  return sub_4D340;
}

void sub_4D340(double *a1, uint64_t a2)
{
  sub_4D464(a1, a2, &qword_3B6D58, &kCurlInputBack0Strength);
}

double static DebugOptions.curlInputBack1Strength.getter()
{
  return *(double *)&qword_3B6D60;
}

void static DebugOptions.curlInputBack1Strength.setter(double a1)
{
  sub_4D3C4((double *)&qword_3B6D60, &kCurlInputBack1Strength, a1);
}

void (*static DebugOptions.curlInputBack1Strength.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  *a1 = qword_3B6D60;
  return sub_4D390;
}

void sub_4D390(double *a1, uint64_t a2)
{
  sub_4D464(a1, a2, &qword_3B6D60, &kCurlInputBack1Strength);
}

double static DebugOptions.curlInputShadowStrength.getter()
{
  return *(double *)&qword_3B6D68;
}

void static DebugOptions.curlInputShadowStrength.setter(double a1)
{
  sub_4D3C4((double *)&qword_3B6D68, &kCurlInputShadowStrength, a1);
}

void sub_4D3C4(double *a1, _QWORD *a2, double a3)
{
  id v5;

  *a1 = a3;
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  objc_msgSend(v5, "setDouble:forKey:", *a2, a3);

}

void (*static DebugOptions.curlInputShadowStrength.modify(_QWORD *a1))(double *a1, uint64_t a2)
{
  *a1 = qword_3B6D68;
  return sub_4D450;
}

void sub_4D450(double *a1, uint64_t a2)
{
  sub_4D464(a1, a2, &qword_3B6D68, &kCurlInputShadowStrength);
}

void sub_4D464(double *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  double v5;
  id v6;

  v5 = *a1;
  *a3 = *(_QWORD *)a1;
  v6 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  objc_msgSend(v6, "setDouble:forKey:", *a4, v5);

}

uint64_t static DebugOptions.fullyFadeChrome.getter()
{
  return byte_3B6CB8;
}

void static DebugOptions.fullyFadeChrome.setter(char a1)
{
  sub_4D5B0(a1);
}

void (*static DebugOptions.fullyFadeChrome.modify(_BYTE *a1))(unsigned __int8 *a1)
{
  *a1 = byte_3B6CB8;
  return sub_4D534;
}

void sub_4D534(unsigned __int8 *a1)
{
  sub_4D6E4(a1);
}

uint64_t static DebugOptions.mostlyFadeChrome.getter()
{
  return byte_3B6CB9;
}

void static DebugOptions.mostlyFadeChrome.setter(char a1)
{
  sub_4D5B0(a1);
}

void sub_4D5B0(char a1)
{
  void *v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;

  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setBool:forKey:", a1 & 1, v4);

  v5 = objc_msgSend(v2, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setBool:forKey:", 0, v6);

  _s8BookEPUB12DebugOptionsC7refreshyyFZ_0();
}

void (*static DebugOptions.mostlyFadeChrome.modify(_BYTE *a1))(unsigned __int8 *a1)
{
  *a1 = byte_3B6CB9;
  return sub_4D6AC;
}

void sub_4D6AC(unsigned __int8 *a1)
{
  sub_4D6E4(a1);
}

void sub_4D6E4(unsigned __int8 *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  NSString v6;

  v1 = *a1;
  v2 = (void *)objc_opt_self(NSUserDefaults);
  v3 = objc_msgSend(v2, "standardUserDefaults");
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "setBool:forKey:", v1, v4);

  v5 = objc_msgSend(v2, "standardUserDefaults");
  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setBool:forKey:", 0, v6);

  _s8BookEPUB12DebugOptionsC7refreshyyFZ_0();
}

double static DebugOptions.mostlyFadeChromeAlpha.getter()
{
  return *(double *)&qword_3B6CC0;
}

void static DebugOptions.mostlyFadeChromeAlpha.setter()
{
  sub_4D8AC();
}

void (*static DebugOptions.mostlyFadeChromeAlpha.modify(_QWORD *a1))()
{
  *a1 = qword_3B6CC0;
  return sub_4D808;
}

void sub_4D808()
{
  sub_4D97C();
}

double static DebugOptions.topTapToRevealChromeAreaHeight.getter()
{
  return *(double *)&qword_3B6CC8;
}

void static DebugOptions.topTapToRevealChromeAreaHeight.setter()
{
  sub_4D8AC();
}

void (*static DebugOptions.topTapToRevealChromeAreaHeight.modify(_QWORD *a1))()
{
  *a1 = qword_3B6CC8;
  return sub_4D868;
}

void sub_4D868()
{
  sub_4D97C();
}

double static DebugOptions.pageTurnMarginWidth.getter()
{
  return *(double *)&qword_3B6CD0;
}

void static DebugOptions.pageTurnMarginWidth.setter()
{
  sub_4D8AC();
}

void sub_4D8AC()
{
  id v0;
  Class isa;
  NSString v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setObject:forKey:", isa, v2);

  _s8BookEPUB12DebugOptionsC7refreshyyFZ_0();
}

void (*static DebugOptions.pageTurnMarginWidth.modify(_QWORD *a1))()
{
  *a1 = qword_3B6CD0;
  return sub_4D960;
}

void sub_4D960()
{
  sub_4D97C();
}

void sub_4D97C()
{
  id v0;
  Class isa;
  NSString v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setObject:forKey:", isa, v2);

  _s8BookEPUB12DebugOptionsC7refreshyyFZ_0();
}

uint64_t StandardAccessibilityStateProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t StandardAccessibilityStateProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

void _s8BookEPUB12DebugOptionsC7refreshyyFZ_0()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;
  NSString v3;
  unsigned __int8 v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[24];
  uint64_t v64;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  byte_3B6CB8 = v2;
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v0, "BOOLForKey:", v3);

  byte_3B6CB9 = v4;
  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "doubleForKey:", v5);
  v7 = v6;

  qword_3B6CC0 = v7;
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "doubleForKey:", v8);
  v10 = v9;

  qword_3B6CC8 = v10;
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "doubleForKey:", v11);
  v13 = v12;

  qword_3B6CD0 = v13;
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "doubleForKey:", v14);
  v16 = v15;

  qword_3B6CD8 = v16;
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "doubleForKey:", v17);
  v19 = v18;

  qword_3B6CE0 = v19;
  v20 = objc_msgSend(v0, "stringForKey:", CFSTR("kCurlInputFrontColor"));
  if (v20)
  {
    v21 = v20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v24 = v23;

    v25 = *(_QWORD *)&aFfffffff[8];
    *(_QWORD *)aFfffffff = v22;
    *(_QWORD *)&aFfffffff[8] = v24;
    swift_bridgeObjectRelease(v25);
  }
  v26 = objc_msgSend(v0, "stringForKey:", CFSTR("kCurlInputBackColor0"));
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

    v31 = *(_QWORD *)&aFfffffff_0[8];
    *(_QWORD *)aFfffffff_0 = v28;
    *(_QWORD *)&aFfffffff_0[8] = v30;
    swift_bridgeObjectRelease(v31);
  }
  v32 = objc_msgSend(v0, "stringForKey:", CFSTR("kCurlInputBackColor1"));
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

    v37 = *(_QWORD *)&aFfffffff_1[8];
    *(_QWORD *)aFfffffff_1 = v34;
    *(_QWORD *)&aFfffffff_1[8] = v36;
    swift_bridgeObjectRelease(v37);
  }
  v38 = objc_msgSend(v0, "stringForKey:", CFSTR("kCurlInputShadowColor"));
  if (v38)
  {
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v42 = v41;

    v43 = *(_QWORD *)&aFfffffff_2[8];
    *(_QWORD *)aFfffffff_2 = v40;
    *(_QWORD *)&aFfffffff_2[8] = v42;
    swift_bridgeObjectRelease(v43);
  }
  v44 = objc_msgSend(v0, "objectForKey:", CFSTR("kCurlInputFrontOpacity"));
  if (v44)
  {
    v45 = v44;
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v45);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_4E234((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    if ((swift_dynamicCast(&v60, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
      qword_3B6D30 = v60;
  }
  else
  {
    sub_4E27C((uint64_t)v63);
  }
  v46 = objc_msgSend(v0, "objectForKey:", CFSTR("kCurlInputBack0Opacity"));
  if (v46)
  {
    v47 = v46;
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v47);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_4E234((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    if ((swift_dynamicCast(&v60, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
      qword_3B6D38 = v60;
  }
  else
  {
    sub_4E27C((uint64_t)v63);
  }
  v48 = objc_msgSend(v0, "objectForKey:", CFSTR("kCurlInputBack1Opacity"));
  if (v48)
  {
    v49 = v48;
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v49);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_4E234((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    if ((swift_dynamicCast(&v60, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
      qword_3B6D40 = v60;
  }
  else
  {
    sub_4E27C((uint64_t)v63);
  }
  v50 = objc_msgSend(v0, "objectForKey:", CFSTR("kCurlInputShadowOpacity"));
  if (v50)
  {
    v51 = v50;
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v51);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_4E234((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    if ((swift_dynamicCast(&v60, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
      qword_3B6D48 = v60;
  }
  else
  {
    sub_4E27C((uint64_t)v63);
  }
  v52 = objc_msgSend(v0, "objectForKey:", CFSTR("kCurlInputFrontStrength"));
  if (v52)
  {
    v53 = v52;
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v53);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_4E234((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    if ((swift_dynamicCast(&v60, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
      qword_3B6D50 = v60;
  }
  else
  {
    sub_4E27C((uint64_t)v63);
  }
  v54 = objc_msgSend(v0, "objectForKey:", CFSTR("kCurlInputBack0Strength"));
  if (v54)
  {
    v55 = v54;
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v55);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_4E234((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    if ((swift_dynamicCast(&v60, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
      qword_3B6D58 = v60;
  }
  else
  {
    sub_4E27C((uint64_t)v63);
  }
  v56 = objc_msgSend(v0, "objectForKey:", CFSTR("kCurlInputBack1Strength"));
  if (v56)
  {
    v57 = v56;
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v57);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_4E234((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    if ((swift_dynamicCast(&v60, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
      qword_3B6D60 = v60;
  }
  else
  {
    sub_4E27C((uint64_t)v63);
  }
  v58 = objc_msgSend(v0, "objectForKey:", CFSTR("kCurlInputShadowStrength"));
  if (v58)
  {
    v59 = v58;
    _bridgeAnyObjectToAny(_:)(&v61);
    swift_unknownObjectRelease(v59);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  sub_4E234((uint64_t)&v61, (uint64_t)v63);
  if (v64)
  {
    if ((swift_dynamicCast(&v60, v63, (char *)&type metadata for Any + 8, &type metadata for Double, 6) & 1) != 0)
      qword_3B6D68 = v60;

  }
  else
  {

    sub_4E27C((uint64_t)v63);
  }
}

uint64_t type metadata accessor for DebugOptions()
{
  return objc_opt_self(_TtC8BookEPUB12DebugOptions);
}

uint64_t method lookup function for DebugOptions(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for DebugOptions);
}

uint64_t sub_4E234(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC((uint64_t *)&unk_3B96D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_4E27C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC((uint64_t *)&unk_3B96D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AnalyticsEvent()
{
  return &type metadata for AnalyticsEvent;
}

uint64_t destroy for AnalyticsEvent.Reading(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 64);
  if (v1 >= 7)
    v1 = *(_DWORD *)result + 7;
  if (v1 == 2 || v1 == 1)
    return swift_bridgeObjectRelease(*(_QWORD *)(result + 8));
  return result;
}

uint64_t initializeWithCopy for AnalyticsEvent.Reading(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = *(unsigned __int8 *)(a2 + 64);
  if (v3 >= 7)
    v3 = *(_DWORD *)a2 + 7;
  switch(v3)
  {
    case 0u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 64) = 0;
      return a1;
    case 1u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
      *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
      v6 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      v7 = 1;
      goto LABEL_8;
    case 2u:
      v6 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v6;
      v7 = 2;
LABEL_8:
      *(_BYTE *)(a1 + 64) = v7;
      swift_bridgeObjectRetain(v6);
      return a1;
    case 3u:
      *(_BYTE *)a1 = *(_BYTE *)a2;
      v8 = 3;
      goto LABEL_13;
    case 4u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = 4;
      goto LABEL_13;
    case 5u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = 5;
      goto LABEL_13;
    case 6u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v8 = 6;
LABEL_13:
      *(_BYTE *)(a1 + 64) = v8;
      break;
    default:
      v4 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v4;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      break;
  }
  return a1;
}

uint64_t assignWithCopy for AnalyticsEvent.Reading(uint64_t a1, __int128 *a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  char v11;
  __int128 v12;

  if ((__int128 *)a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 7)
      v4 = *(_DWORD *)a1 + 7;
    if (v4 == 2 || v4 == 1)
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v5 = *((unsigned __int8 *)a2 + 64);
    if (v5 >= 7)
      v5 = *(_DWORD *)a2 + 7;
    switch(v5)
    {
      case 0u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_BYTE *)(a1 + 64) = 0;
        return a1;
      case 1u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
        *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
        v9 = *((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 8) = v9;
        *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
        *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
        *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
        *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
        *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
        *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
        *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        v10 = 1;
        goto LABEL_14;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v9 = *((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 8) = v9;
        v10 = 2;
LABEL_14:
        *(_BYTE *)(a1 + 64) = v10;
        swift_bridgeObjectRetain(v9);
        return a1;
      case 3u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v11 = 3;
        goto LABEL_19;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v11 = 4;
        goto LABEL_19;
      case 5u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v11 = 5;
        goto LABEL_19;
      case 6u:
        v12 = *a2;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = v12;
        v11 = 6;
LABEL_19:
        *(_BYTE *)(a1 + 64) = v11;
        break;
      default:
        *(_OWORD *)a1 = *a2;
        v6 = a2[1];
        v7 = a2[2];
        v8 = a2[3];
        *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 16) = v6;
        break;
    }
  }
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent.Reading(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AnalyticsEvent.Reading(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 7)
      v4 = *(_DWORD *)a1 + 7;
    if (v4 == 2 || v4 == 1)
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v5 = *(unsigned __int8 *)(a2 + 64);
    if (v5 >= 7)
      v5 = *(_DWORD *)a2 + 7;
    switch(v5)
    {
      case 0u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_BYTE *)(a1 + 64) = 0;
        return a1;
      case 1u:
        v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        v9 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v9;
        v10 = 1;
        goto LABEL_18;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v10 = 2;
        goto LABEL_18;
      case 3u:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        v10 = 3;
        goto LABEL_18;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v10 = 4;
        goto LABEL_18;
      case 5u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v10 = 5;
        goto LABEL_18;
      case 6u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
        v10 = 6;
LABEL_18:
        *(_BYTE *)(a1 + 64) = v10;
        break;
      default:
        v6 = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 48) = v6;
        *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
        v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnalyticsEvent.Reading(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 8)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AnalyticsEvent.Reading(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 249;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_4E7A0(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 7)
    return (*(_DWORD *)a1 + 7);
  return result;
}

uint64_t sub_4E7BC(uint64_t result, unsigned int a2)
{
  if (a2 > 6)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 7;
    LOBYTE(a2) = 7;
  }
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsEvent.Reading()
{
  return &type metadata for AnalyticsEvent.Reading;
}

uint64_t dispatch thunk of ReadingAnalyticsEventSubmitting.submit(event:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ReadingAnalyticsEventSubmitting.setInitial(scrollViewEnabledStatus:baseTheme:fontFamily:fontSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(a8 + 16))(a1, a2, a3, a4, a5, a6 & 1);
}

id FootnoteRouter.__allocating_init(eventHandler:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  id v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  *(_QWORD *)&v5[OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler + 8] = 0;
  *(_QWORD *)(swift_unknownObjectWeakInit() + 8) = a2;
  swift_unknownObjectWeakAssign();
  v8.receiver = v5;
  v8.super_class = v2;
  v6 = objc_msgSendSuper2(&v8, "init");
  swift_unknownObjectRelease(a1);
  return v6;
}

id FootnoteRouter.init(eventHandler:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v5 = &v2[OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler];
  *((_QWORD *)v5 + 1) = 0;
  v6 = swift_unknownObjectWeakInit(v5, 0);
  *(_QWORD *)(v6 + 8) = a2;
  swift_unknownObjectWeakAssign(v6, a1);
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for FootnoteRouter();
  v7 = objc_msgSendSuper2(&v9, "init");
  swift_unknownObjectRelease(a1);
  return v7;
}

uint64_t type metadata accessor for FootnoteRouter()
{
  return objc_opt_self(_TtC8BookEPUB14FootnoteRouter);
}

void FootnoteRouter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookEPUB.FootnoteRouter", 23, "init()", 6, 0);
  __break(1u);
}

id FootnoteRouter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FootnoteRouter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t FootnoteRouter.presentAlertController(_:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  v7 = v3 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(v7 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t (*)(void), uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, a2, a3, ObjectType, v10);
    return swift_unknownObjectRelease(v9);
  }
  else if (a2)
  {
    return a2();
  }
  return result;
}

uint64_t FootnoteRouter.handleTableOfContentsRequest(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

uint64_t FootnoteRouter.handleInternalLoadRequest(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(result);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, ObjectType, v6);
    swift_unknownObjectRelease(v5);
    return v8 & 1;
  }
  return result;
}

uint64_t FootnoteRouter.handleExternalLoadRequest(externalURL:likelyUserInitiated:)(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  v5 = v2 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 32))(a1, a2 & 1, ObjectType, v8);
    return swift_unknownObjectRelease(v7);
  }
  return result;
}

uint64_t FootnoteRouter.handleUserRequestForFrameToLoadExternalURL(externalURL:completion:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  v7 = v3 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  Strong = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler);
  if (!Strong)
    return a2();
  v9 = Strong;
  v10 = *(_QWORD *)(v7 + 8);
  ObjectType = swift_getObjectType(Strong);
  (*(void (**)(uint64_t, uint64_t (*)(void), uint64_t, uint64_t, uint64_t))(v10 + 40))(a1, a2, a3, ObjectType, v10);
  return swift_unknownObjectRelease(v9);
}

uint64_t FootnoteRouter.footnoteViewDidFinishLoad(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

Swift::Void __swiftcall FootnoteRouter.footnoteViewDidDisappear(_:)(UIViewController a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(Class, uint64_t, uint64_t))(v6 + 56))(a1.super.super.isa, ObjectType, v6);
    swift_unknownObjectRelease(v5);
  }
}

uint64_t sub_4ED38(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  v7 = *v3 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)(v7 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t (*)(void), uint64_t, uint64_t, uint64_t))(v10 + 8))(a1, a2, a3, ObjectType, v10);
    return swift_unknownObjectRelease(v9);
  }
  else if (a2)
  {
    return a2();
  }
  return result;
}

uint64_t sub_4EDD8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v3 = *v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

uint64_t sub_4EE4C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  char v8;

  v3 = *v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(result);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(a1, ObjectType, v6);
    swift_unknownObjectRelease(v5);
    return v8 & 1;
  }
  return result;
}

uint64_t sub_4EEBC(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  v5 = *v2 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 32))(a1, a2 & 1, ObjectType, v8);
    return swift_unknownObjectRelease(v7);
  }
  return result;
}

uint64_t sub_4EF48(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;

  v7 = *v3 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (!Strong)
    return a2();
  v9 = Strong;
  v10 = *(_QWORD *)(v7 + 8);
  ObjectType = swift_getObjectType(Strong);
  (*(void (**)(uint64_t, uint64_t (*)(void), uint64_t, uint64_t, uint64_t))(v10 + 40))(a1, a2, a3, ObjectType, v10);
  return swift_unknownObjectRelease(v9);
}

uint64_t sub_4EFE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v3 = *v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

uint64_t sub_4F058(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;

  v3 = *v1 + OBJC_IVAR____TtC8BookEPUB14FootnoteRouter_eventHandler;
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(v3 + 8);
    ObjectType = swift_getObjectType(result);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 56))(a1, ObjectType, v6);
    return swift_unknownObjectRelease(v5);
  }
  return result;
}

uint64_t dispatch thunk of ArbitraryViewControllerPresenting.present(viewController:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ExpandedContentEventHandling.handleExternalLoadRequestFromExpandedContent(externalURL:likelyUserInitiated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of ExpandedContentEventHandling.handleUserRequestForFrameToLoadExternalURL(externalURL:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of ReadingSettingsEventHandling.didTapOptions(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t method lookup function for FootnoteRouter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for FootnoteRouter);
}

uint64_t dispatch thunk of ExpandedContentRouter.__allocating_init(eventHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

void *NSLayoutConstraint.with(identifier:)(uint64_t a1, uint64_t a2)
{
  return sub_4F118(a1, a2);
}

void *sub_4F118(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  NSString v18;

  v3 = v2;
  swift_bridgeObjectRetain(a2);
  v4 = objc_msgSend(v2, "firstAnchor", a1);
  v5 = objc_msgSend(v4, "name");

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 95;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11 = objc_msgSend(v3, "secondAnchor");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "name");

    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = (void *)0xE000000000000000;
  }
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  objc_msgSend(v3, "setIdentifier:", v18);

  return v3;
}

char *sub_4F270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  NSString v28;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  NSString v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  Class isa;
  double v43;
  void *v44;
  uint64_t v45;
  id v46;
  void *v47;
  id v48;
  char *result;
  void *v50;
  double v51;
  double v52;
  id v53;
  uint64_t v54;
  void (**v55)(_QWORD, _QWORD, _QWORD);
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  Class v65;
  char *v66;
  uint64_t v67;
  objc_class *TimeoutWarningView;
  char *v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  Class v82;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (**v90)(_QWORD, _QWORD, _QWORD);
  char *v91;
  __int128 v92;
  uint64_t v93;
  objc_super v94;
  uint64_t v95;

  v87 = a6;
  v88 = a1;
  v84 = a5;
  v93 = a4;
  *(_QWORD *)&v92 = a3;
  v8 = type metadata accessor for UIButton.Configuration.TitleAlignment(0);
  v90 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 - 8);
  v91 = (char *)v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for UIButton.Configuration.CornerStyle(0);
  v11 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89);
  v13 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UIButton.Configuration(0);
  v85 = *(_QWORD *)(v14 - 8);
  v86 = v14;
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v84 - v18;
  v20 = objc_allocWithZone((Class)UILabel);
  v21 = v6;
  v22 = objc_msgSend(v20, "init");
  v23 = OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_label;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_label] = v22;
  objc_msgSend(v22, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v24 = (void *)objc_opt_self(UIFont);
  v25 = v22;
  v26 = objc_msgSend(v24, "boldSystemFontOfSize:", 14.0);
  objc_msgSend(v25, "setFont:", v26);

  v27 = *(id *)&v21[v23];
  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(v27, "setText:", v28, swift_bridgeObjectRelease(a2).n128_f64[0]);

  v29 = *(void **)&v21[v23];
  objc_msgSend(v29, "setTextAlignment:", 1);
  objc_msgSend(v29, "setLineBreakMode:", 0);
  static UIButton.Configuration.filled()(objc_msgSend(v29, "setNumberOfLines:", 0));
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for UIButton.Configuration.CornerStyle.capsule(_:), v89);
  UIButton.Configuration.cornerStyle.setter(v13);
  ((void (**)(char *, _QWORD, char *))v90)[13](v10, enum case for UIButton.Configuration.TitleAlignment.center(_:), v91);
  v91 = v19;
  UIButton.Configuration.titleAlignment.setter(v10);
  sub_34450(0, &qword_3B6F10, UIButton_ptr);
  static UIButton.Configuration.borderedProminent()();
  v30 = (void *)UIButton.init(configuration:primaryAction:)(v17, 0);
  v31 = OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_button;
  *(_QWORD *)&v21[OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_button] = v30;
  v32 = v30;
  v33 = v93;
  v34 = String._bridgeToObjectiveC()();
  objc_msgSend(v32, "setTitle:forState:", v34, 0, swift_bridgeObjectRelease(v33).n128_f64[0]);

  v35 = *(void **)&v21[v31];
  objc_msgSend(v35, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v93 = sub_319AC((uint64_t *)&unk_3B8440);
  v36 = swift_allocObject(v93, 48, 7);
  v92 = xmmword_2E6690;
  *(_OWORD *)(v36 + 16) = xmmword_2E6690;
  v37 = *(void **)&v21[v23];
  *(_QWORD *)(v36 + 32) = v37;
  *(_QWORD *)(v36 + 40) = v35;
  v95 = v36;
  specialized Array._endMutation()(v36);
  v38 = v95;
  v39 = objc_allocWithZone((Class)UIStackView);
  sub_34450(0, (unint64_t *)&qword_3B8CB0, UIView_ptr);
  v40 = v37;
  v41 = v35;
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v43 = swift_bridgeObjectRelease(v38).n128_u64[0];
  v44 = v39;
  v45 = v23;
  v46 = objc_msgSend(v44, "initWithArrangedSubviews:", isa, v43);

  objc_msgSend(v46, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v46, "setAxis:", 1);
  objc_msgSend(v46, "setAlignment:", 3);
  objc_msgSend(v46, "setDistribution:", 3);
  objc_msgSend(v46, "setSpacing:", 24.0);
  v47 = *(void **)&v21[v23];
  v48 = objc_msgSend(v47, "heightAnchor");
  result = (char *)objc_msgSend(v47, "font");
  if (result)
  {
    v50 = result;
    objc_msgSend(result, "lineHeight");
    v52 = v51;

    v53 = objc_msgSend(v48, "constraintEqualToConstant:", v52);
    v54 = OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_labelHeightConstraint;
    *(_QWORD *)&v21[OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_labelHeightConstraint] = v53;
    v55 = (void (**)(_QWORD, _QWORD, _QWORD))objc_opt_self(NSLayoutConstraint);
    v90 = v55;
    v56 = v93;
    v57 = swift_allocObject(v93, 48, 7);
    *(_OWORD *)(v57 + 16) = v92;
    v58 = objc_msgSend(*(id *)&v21[v45], "widthAnchor");
    v59 = objc_msgSend(v46, "widthAnchor");
    v60 = objc_msgSend(v58, "constraintEqualToAnchor:", v59);

    *(_QWORD *)(v57 + 32) = v60;
    v61 = *(void **)&v21[v54];
    *(_QWORD *)(v57 + 40) = v61;
    v95 = v57;
    specialized Array._endMutation()(v62);
    v63 = v95;
    sub_34450(0, &qword_3BE540, NSLayoutConstraint_ptr);
    v64 = v61;
    v65 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v55, "activateConstraints:", v65, swift_bridgeObjectRelease(v63).n128_f64[0]);

    v66 = &v21[OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_action];
    v67 = v87;
    *(_QWORD *)v66 = v84;
    *((_QWORD *)v66 + 1) = v67;
    swift_retain(v67);

    TimeoutWarningView = (objc_class *)type metadata accessor for LoadTimeoutWarningView();
    v94.receiver = v21;
    v94.super_class = TimeoutWarningView;
    v69 = (char *)objc_msgSendSuper2(&v94, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v69, "addSubview:", v46);
    v70 = swift_allocObject(v56, 56, 7);
    *(_OWORD *)(v70 + 16) = xmmword_2E66A0;
    v71 = objc_msgSend(v46, "centerXAnchor");
    v72 = objc_msgSend(v69, "centerXAnchor");
    v73 = objc_msgSend(v71, "constraintEqualToAnchor:", v72);

    *(_QWORD *)(v70 + 32) = v73;
    v74 = objc_msgSend(v46, "centerYAnchor");
    v75 = objc_msgSend(v69, "centerYAnchor");
    v76 = objc_msgSend(v74, "constraintEqualToAnchor:", v75);

    *(_QWORD *)(v70 + 40) = v76;
    v77 = objc_msgSend(v46, "widthAnchor");
    v78 = objc_msgSend(v69, "widthAnchor");
    v79 = objc_msgSend(v77, "constraintEqualToAnchor:", v78);

    *(_QWORD *)(v70 + 48) = v79;
    v95 = v70;
    specialized Array._endMutation()(v80);
    v81 = v95;
    v82 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v83 = swift_bridgeObjectRelease(v81).n128_u64[0];
    objc_msgSend(v90, "activateConstraints:", v82, v83);

    objc_msgSend(*(id *)&v69[OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_button], "addTarget:action:forControlEvents:", v69, "buttonAction", 1);
    swift_release(v67);

    (*(void (**)(char *, uint64_t))(v85 + 8))(v91, v86);
    return v69;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_4FA5C()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  unint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  NSString v14;
  uint64_t v15;
  uint64_t inited;
  NSString *v17;
  id v18;
  unint64_t v19;
  Class isa;
  double v21;
  double v22;
  _BYTE v23[72];
  objc_super v24;

  v24.receiver = v0;
  v24.super_class = (Class)type metadata accessor for LoadTimeoutWarningView();
  objc_msgSendSuper2(&v24, "layoutSubviews");
  v1 = *(void **)&v0[OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_label];
  v2 = objc_msgSend(v1, "font");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v0, "superview");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v1, "text");
      if (v6)
      {
        v7 = v6;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        v9 = v8;

      }
      else
      {
        v9 = 0xE000000000000000;
      }
      objc_msgSend(v0, "frame");
      v11 = v10;
      objc_msgSend(v5, "frame");
      v13 = v12;
      v14 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v9);
      v15 = sub_319AC(&qword_3B6EF8);
      inited = swift_initStackObject(v15, v23);
      *(_OWORD *)(inited + 16) = xmmword_2E5F80;
      *(_QWORD *)(inited + 32) = NSFontAttributeName;
      *(_QWORD *)(inited + 64) = sub_34450(0, (unint64_t *)&qword_3B6F00, UIFont_ptr);
      *(_QWORD *)(inited + 40) = v3;
      v17 = NSFontAttributeName;
      v18 = v3;
      v19 = sub_38058(inited);
      type metadata accessor for Key(0);
      sub_520E0();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v19);
      objc_msgSend(v14, "boundingRectWithSize:options:attributes:context:", 3, isa, 0, v11, v13);
      v22 = v21;

      objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_labelHeightConstraint], "setConstant:", v22 + 10.0);
    }
    else
    {
      v5 = v3;
    }

  }
}

id sub_4FD50()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LoadTimeoutWarningView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_4FDDC(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = (void **)(*a2 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_scrollView);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

id sub_4FE3C()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_scrollView);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_scrollView, v3, 0, 0);
  return *v1;
}

void sub_4FE80(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_scrollView);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

uint64_t (*sub_4FED0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_scrollView, a1, 33, 0);
  return j__swift_endAccess;
}

double sub_4FF14()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale, v3, 0, 0);
  return *(double *)v1;
}

uint64_t sub_4FF58(double a1)
{
  uint64_t v1;
  double *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (double *)(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale);
  result = swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_4FFA8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_4FFEC()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_availableForReuse);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_availableForReuse, v3, 0, 0);
  return *v1;
}

uint64_t sub_50030(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_availableForReuse);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = a1;
  return result;
}

uint64_t (*sub_50078(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_availableForReuse, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_500BC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE v10[24];

  v4 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v4);
  v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_3F238(a1, (uint64_t)v6, (uint64_t *)&unk_3B8C50);
  v7 = *a2 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_url;
  swift_beginAccess(v7, v10, 33, 0);
  sub_50220((uint64_t)v6, v7);
  return swift_endAccess(v10);
}

uint64_t sub_50170@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_url;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_3F238(v3, a1, (uint64_t *)&unk_3B8C50);
}

uint64_t sub_501C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_url;
  swift_beginAccess(v3, v5, 33, 0);
  sub_50220(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_50220(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC((uint64_t *)&unk_3B8C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_50268(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_url, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_502AC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v7[24];

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_be_configurationKey);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = v4[1];
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_50314()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_be_configurationKey);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_be_configurationKey, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_50368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_be_configurationKey);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*sub_503C4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_be_configurationKey, a1, 33, 0);
  return j_j__swift_endAccess;
}

id sub_50408()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___activityIndicator;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___activityIndicator);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___activityIndicator);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIActivityIndicatorView), "initWithActivityIndicatorStyle:", 101);
    objc_msgSend(v4, "setHidesWhenStopped:", 1);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

char *sub_504A4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  char *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___reloadView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___reloadView);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___reloadView);
  }
  else
  {
    v4 = sub_50504(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

char *sub_50504(uint64_t a1)
{
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char *v18;

  v2 = BookEPUBBundle();
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, v4, 0);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = BookEPUBBundle();
  v10 = String._bridgeToObjectiveC()();
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "localizedStringForKey:value:table:", v10, v11, 0);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v16 = swift_allocObject(&unk_37B210, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, a1);
  v17 = objc_allocWithZone((Class)type metadata accessor for LoadTimeoutWarningView());
  v18 = sub_4F270(v6, v8, v13, v15, (uint64_t)sub_52190, v16);
  objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  return v18;
}

void sub_506BC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *Strong;
  void *v8;
  char v9[24];
  void **aBlock;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v2 = a1 + 16;
  v3 = (void *)objc_opt_self(UIView);
  v14 = sub_52198;
  v15 = a1;
  aBlock = _NSConcreteStackBlock;
  v11 = 1107296256;
  v12 = sub_525B8;
  v13 = &unk_37B438;
  v4 = _Block_copy(&aBlock);
  v5 = v15;
  swift_retain(a1);
  swift_release(v5);
  v6 = swift_allocObject(&unk_37B210, 24, 7);
  swift_beginAccess(v2, v9, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  swift_unknownObjectWeakInit(v6 + 16, Strong);

  v14 = sub_521A0;
  v15 = v6;
  aBlock = _NSConcreteStackBlock;
  v11 = 1107296256;
  v12 = sub_525E4;
  v13 = &unk_37B460;
  v8 = _Block_copy(&aBlock);
  swift_release(v15);
  objc_msgSend(v3, "animateWithDuration:animations:completion:", v4, v8, 0.2);
  _Block_release(v8);
  _Block_release(v4);
}

void sub_5081C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  id v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = (void *)sub_504A4();
    objc_msgSend(v4, "setAlpha:", 0.0);

    v5 = sub_50408();
    objc_msgSend(v5, "setAlpha:", 1.0);

  }
}

uint64_t sub_508A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  void (*v6)(void);
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    v4 = (void *)result;
    v6 = *(void (**)(void))(result + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_reloadAction);
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_reloadAction + 8);
    swift_retain(v5);

    v6();
    return swift_release(v5);
  }
  return result;
}

id sub_5091C(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  id v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  char *v34;
  id v35;
  id v36;
  id v37;
  char *v38;
  id v39;
  id v40;
  id v41;
  char *v42;
  id v43;
  id v44;
  id v45;
  char *v46;
  id v47;
  id v48;
  id v49;
  uint64_t v50;
  Class isa;
  id v53;
  objc_super v54;

  *(_QWORD *)&v2[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_ContentLoadShowReloadOptionTimeout] = 0x402E000000000000;
  v5 = OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_scrollView;
  v6 = objc_allocWithZone((Class)UIScrollView);
  v7 = v2;
  *(_QWORD *)&v2[v5] = objc_msgSend(v6, "init");
  *(_QWORD *)&v7[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale] = 0x3FF0000000000000;
  v7[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_availableForReuse] = 1;
  v8 = &v7[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_url];
  v9 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = &v7[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_be_configurationKey];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_watchdogTimer] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___activityIndicator] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___reloadView] = 0;
  v11 = &v7[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_reloadAction];
  *(_QWORD *)v11 = a1;
  *((_QWORD *)v11 + 1) = a2;
  swift_retain();

  v54.receiver = v7;
  v54.super_class = (Class)type metadata accessor for ContentLoaderPlaceholderView(0);
  v12 = objc_msgSendSuper2(&v54, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v13 = sub_50408();
  objc_msgSend(v12, "addSubview:", v13);

  v14 = v12;
  v15 = sub_504A4();
  objc_msgSend(v14, "addSubview:", v15);

  v53 = (id)objc_opt_self(NSLayoutConstraint);
  v16 = sub_319AC((uint64_t *)&unk_3B8440);
  v17 = swift_allocObject(v16, 96);
  *(_OWORD *)(v17 + 16) = xmmword_2E66B0;
  v18 = sub_50408();
  v19 = objc_msgSend(v18, "centerXAnchor");

  v20 = objc_msgSend(v14, "centerXAnchor");
  v21 = objc_msgSend(v19, "constraintEqualToAnchor:", v20);

  *(_QWORD *)(v17 + 32) = v21;
  v22 = sub_50408();
  v23 = objc_msgSend(v22, "centerYAnchor");

  v24 = objc_msgSend(v14, "centerYAnchor");
  v25 = objc_msgSend(v23, "constraintEqualToAnchor:", v24);

  *(_QWORD *)(v17 + 40) = v25;
  v26 = sub_50408();
  v27 = objc_msgSend(v26, "widthAnchor");

  v28 = objc_msgSend(v14, "widthAnchor");
  v29 = objc_msgSend(v27, "constraintEqualToAnchor:", v28);

  *(_QWORD *)(v17 + 48) = v29;
  v30 = sub_50408();
  v31 = objc_msgSend(v30, "heightAnchor");

  v32 = objc_msgSend(v14, "heightAnchor");
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:", v32);

  *(_QWORD *)(v17 + 56) = v33;
  v34 = sub_504A4();
  v35 = objc_msgSend(v34, "centerXAnchor");

  v36 = objc_msgSend(v14, "centerXAnchor");
  v37 = objc_msgSend(v35, "constraintEqualToAnchor:", v36);

  *(_QWORD *)(v17 + 64) = v37;
  v38 = sub_504A4();
  v39 = objc_msgSend(v38, "centerYAnchor");

  v40 = objc_msgSend(v14, "centerYAnchor");
  v41 = objc_msgSend(v39, "constraintEqualToAnchor:", v40);

  *(_QWORD *)(v17 + 72) = v41;
  v42 = sub_504A4();
  v43 = objc_msgSend(v42, "widthAnchor");

  v44 = objc_msgSend(v14, "widthAnchor");
  v45 = objc_msgSend(v43, "constraintEqualToAnchor:constant:", v44, -20.0);

  *(_QWORD *)(v17 + 80) = v45;
  v46 = sub_504A4();
  v47 = objc_msgSend(v46, "heightAnchor");

  v48 = objc_msgSend(v14, "heightAnchor");
  v49 = objc_msgSend(v47, "constraintEqualToAnchor:multiplier:", v48, 0.5);

  *(_QWORD *)(v17 + 88) = v49;
  specialized Array._endMutation()(v50);
  sub_34450(0, &qword_3BE540, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v53, "activateConstraints:", isa, swift_bridgeObjectRelease(v17).n128_f64[0]);

  swift_release();
  return v14;
}

id ContentLoaderPlaceholderView.__deallocating_deinit()
{
  char *v0;
  void *v1;
  objc_super v3;

  v1 = *(void **)&v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_watchdogTimer];
  if (v1)
    objc_msgSend(v1, "invalidate");
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ContentLoaderPlaceholderView(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for ContentLoaderPlaceholderView(uint64_t a1)
{
  uint64_t result;

  result = qword_3B6EE8;
  if (!qword_3B6EE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContentLoaderPlaceholderView);
  return result;
}

void sub_51070(uint64_t a1)
{
  uint64_t v1;
  id v3;
  void *v4;
  char *v5;
  id v6;
  char *v7;
  char *v8;
  id v9;
  char *v10;

  v3 = sub_50408();
  v4 = v3;
  if (a1)
  {
    objc_msgSend(v3, "startAnimating");

  }
  else
  {
    objc_msgSend(v3, "stopAnimating");

    v5 = sub_504A4();
    objc_msgSend(v5, "setAlpha:", 0.0);

    v6 = sub_50408();
    objc_msgSend(v6, "setAlpha:", 1.0);

    v7 = sub_504A4();
    objc_msgSend(v7, "setHidden:", 1);

    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_watchdogTimer), "invalidate");
  }
  v8 = sub_504A4();
  objc_msgSend(v8, "setAlpha:", 0.0);

  v9 = sub_50408();
  objc_msgSend(v9, "setAlpha:", 1.0);

  v10 = sub_504A4();
  objc_msgSend(v10, "setHidden:", 1);

}

void sub_511E4()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  char *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  _QWORD v10[6];

  v1 = OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_watchdogTimer;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_watchdogTimer), "invalidate");
  v2 = sub_504A4();
  objc_msgSend(v2, "setAlpha:", 0.0);

  v3 = sub_50408();
  objc_msgSend(v3, "setAlpha:", 1.0);

  v4 = sub_504A4();
  objc_msgSend(v4, "setHidden:", 1);

  v5 = (void *)objc_opt_self(NSTimer);
  v6 = swift_allocObject(&unk_37B210, 24);
  swift_unknownObjectWeakInit(v6 + 16, v0);
  v10[4] = sub_5149C;
  v10[5] = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_51504;
  v10[3] = &unk_37B228;
  v7 = _Block_copy(v10);
  swift_release();
  v8 = objc_msgSend(v5, "scheduledTimerWithTimeInterval:repeats:block:", 0, v7, 15.0);
  _Block_release(v7);
  v9 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = v8;

}

uint64_t sub_51330()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_51354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  char *v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD aBlock[6];
  _BYTE v13[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = sub_504A4();
    objc_msgSend(v5, "setHidden:", 0);

    v6 = sub_504A4();
    objc_msgSend(v6, "setAlpha:", 0.0);

    v7 = sub_50408();
    objc_msgSend(v7, "setAlpha:", 1.0);

    v8 = (void *)objc_opt_self(UIView);
    v9 = swift_allocObject(&unk_37B3F8, 24);
    *(_QWORD *)(v9 + 16) = v4;
    aBlock[4] = sub_52188;
    aBlock[5] = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_525B8;
    aBlock[3] = &unk_37B410;
    v10 = _Block_copy(aBlock);
    v11 = v4;
    swift_release();
    objc_msgSend(v8, "animateWithDuration:animations:", v10, 0.2);
    _Block_release(v10);

  }
}

void sub_5149C(uint64_t a1)
{
  uint64_t v1;

  sub_51354(a1, v1);
}

void sub_514A4()
{
  char *v0;
  id v1;

  v0 = sub_504A4();
  objc_msgSend(v0, "setAlpha:", 1.0);

  v1 = sub_50408();
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_51504(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_51554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_51564(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_5156C()
{
  char *v0;
  id v1;
  char *v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  char *v11;
  void *v12;
  void *v13;
  char **v14;
  id v15;
  id v16;
  char v17;
  id v18;
  void *v19;
  CGRect v20;

  v0 = sub_504A4();
  v1 = *(id *)&v0[OBJC_IVAR____TtC8BookEPUB22LoadTimeoutWarningView_label];

  v2 = sub_504A4();
  objc_msgSend(v2, "frame");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v20.origin.x = v4;
  v20.origin.y = v6;
  v20.size.width = v8;
  v20.size.height = v10;
  objc_msgSend(v1, "setPreferredMaxLayoutWidth:", CGRectGetWidth(v20) + -20.0);

  v17 = BookThemeEntity.hasDarkBackground.getter();
  v11 = sub_504A4();
  BookThemeEntity.backgroundColor.getter();
  v13 = v12;
  if ((v17 & 1) != 0)
    v14 = &selRef_whiteColor;
  else
    v14 = &selRef_grayColor;
  sub_518E4(v17 & 1);

  v15 = sub_50408();
  v16 = objc_msgSend((id)objc_opt_self(UIColor), *v14);
  objc_msgSend(v15, "setColor:", v16);

  v18 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v19, "setBackgroundColor:", v18);

}

void ContentLoaderPlaceholderView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer("BookEPUB.ContentLoaderPlaceholderView", 37, "init(frame:)", 12, 0);
  __break(1u);
}

void sub_517C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _swift_stdlib_reportUnimplementedInitializer(a3, a4, "init(frame:)", 12, 0);
  __break(1u);
}

void ContentLoaderPlaceholderView.selection.getter(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

unint64_t ContentLoaderPlaceholderView.identifier.getter()
{
  return 0xD000000000000011;
}

uint64_t CONTENTLAYOUTCONTROLLERLOG_ENABLED.getter()
{
  return 1;
}

uint64_t ContentLoaderPlaceholderView.be_estimatedContentSize.getter()
{
  void *v0;
  uint64_t v1;

  objc_msgSend(v0, "frame");
  return v1;
}

uint64_t ContentLoaderPlaceholderView.be_desiredContentOffset.getter()
{
  return 0;
}

uint64_t (*ContentLoaderPlaceholderView.be_desiredContentOffset.modify(uint64_t a1))()
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return address(of:);
}

uint64_t ContentLoaderPlaceholderView.be_imageFilterMode()()
{
  return 0;
}

uint64_t sub_5187C()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "be_constraintsToFillSuperview");
  v2 = sub_34450(0, &qword_3BE540, NSLayoutConstraint_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  return v3;
}

uint64_t sub_518E4(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  void *v11;
  char **v12;
  void *v13;
  char **v14;
  uint64_t v16;

  v2 = sub_319AC(&qword_3B6F08);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v16 - v7;
  UIButton.configuration.getter(v6);
  v9 = type metadata accessor for UIButton.Configuration(0);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  if (!v10(v8, 1, v9))
  {
    v11 = (void *)objc_opt_self(UIColor);
    v12 = &selRef_whiteColor;
    if ((a1 & 1) == 0)
      v12 = &selRef_blackColor;
    UIButton.Configuration.baseBackgroundColor.setter(objc_msgSend(v11, *v12));
  }
  if (!v10(v8, 1, v9))
  {
    v13 = (void *)objc_opt_self(UIColor);
    v14 = &selRef_blackColor;
    if ((a1 & 1) == 0)
      v14 = &selRef_whiteColor;
    UIButton.Configuration.baseForegroundColor.setter(objc_msgSend(v13, *v14));
  }
  sub_3F238((uint64_t)v8, (uint64_t)v5, &qword_3B6F08);
  UIButton.configuration.setter(v5);
  return sub_52128((uint64_t)v8, &qword_3B6F08);
}

id sub_51A6C@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;
  _BYTE v6[24];

  v3 = (void **)(*a1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_scrollView);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

double sub_51AC0@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double *v3;
  double result;
  _BYTE v5[24];

  v3 = (double *)(*a1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale);
  swift_beginAccess(v3, v5, 0, 0);
  result = *v3;
  *a2 = *(_QWORD *)v3;
  return result;
}

uint64_t sub_51B10(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

uint64_t sub_51B64@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_availableForReuse);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_51BB4(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_availableForReuse);
  result = swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return result;
}

uint64_t sub_51C00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_url;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_3F238(v3, a2, (uint64_t *)&unk_3B8C50);
}

uint64_t sub_51C60@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (_QWORD *)(*a1 + OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_be_configurationKey);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

void sub_51CB8(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t type metadata accessor for LoadTimeoutWarningView()
{
  return objc_opt_self(_TtC8BookEPUB22LoadTimeoutWarningView);
}

uint64_t sub_51CE8()
{
  return type metadata accessor for ContentLoaderPlaceholderView(0);
}

void sub_51CF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[3] = &unk_2E6740;
  sub_51F74(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    v4[5] = &unk_2E6758;
    v4[6] = &unk_2E6770;
    v4[7] = (char *)&value witness table for () + 64;
    v4[8] = &unk_2E6770;
    v4[9] = &unk_2E6770;
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

uint64_t method lookup function for ContentLoaderPlaceholderView(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ContentLoaderPlaceholderView);
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.scrollView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.scrollView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.scrollView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_68.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.zoomScale.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.zoomScale.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.zoomScale.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.availableForReuse.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_B8.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.availableForReuse.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.url.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.url.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.url.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.be_configurationKey.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_B8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.be_configurationKey.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.be_configurationKey.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_108.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.startReloadWatchdog()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_158.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContentLoaderPlaceholderView.updateStyle(theme:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_158.segname[(swift_isaMask & *v0) + 8])();
}

void sub_51F74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_3BA7B0)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_3BA7B0);
  }
}

void sub_51FC8()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_ContentLoadShowReloadOptionTimeout] = 0x402E000000000000;
  v1 = OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_scrollView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UIScrollView), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_zoomScale] = 0x3FF0000000000000;
  v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_availableForReuse] = 1;
  v2 = &v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_url];
  v3 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = &v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_be_configurationKey];
  *v4 = 0;
  v4[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView_watchdogTimer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___activityIndicator] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB28ContentLoaderPlaceholderView____lazy_storage___reloadView] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000000002C69C0, "BookEPUB/ContentLoaderPlaceholderView.swift", 43, 2, 165, 0);
  __break(1u);
}

unint64_t sub_520E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B5C08;
  if (!qword_3B5C08)
  {
    type metadata accessor for Key(255);
    result = swift_getWitnessTable(&unk_2E53E8, v1);
    atomic_store(result, (unint64_t *)&qword_3B5C08);
  }
  return result;
}

uint64_t sub_52128(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_319AC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_52164()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_52188()
{
  sub_514A4();
}

void sub_52190()
{
  uint64_t v0;

  sub_506BC(v0);
}

void sub_52198()
{
  uint64_t v0;

  sub_5081C(v0);
}

uint64_t sub_521A0(uint64_t a1)
{
  uint64_t v1;

  return sub_508A4(a1, v1);
}

uint64_t ContentLayoutControllerLogSignPostBegin(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_52228(a1, a2, a3, (uint64_t (*)(uint64_t))&static os_signpost_type_t.begin.getter);
}

id _ContentLayoutControllerLog()()
{
  if (qword_3B5698 != -1)
    swift_once(&qword_3B5698, sub_52378);
  return (id)qword_3CEEF0;
}

uint64_t ContentLayoutControllerLogSignPostEvent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_52228(a1, a2, a3, (uint64_t (*)(uint64_t))&static os_signpost_type_t.event.getter);
}

uint64_t ContentLayoutControllerLogSignPostEnd(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_52228(a1, a2, a3, (uint64_t (*)(uint64_t))&static os_signpost_type_t.end.getter);
}

uint64_t sub_52228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a4(v10);
  if (qword_3B5698 != -1)
    swift_once(&qword_3B5698, sub_52378);
  v14 = (id)qword_3CEEF0;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v13, &dword_0, v14, a1, a2, a3, v12);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t ContentLayoutControllerLogger()()
{
  if (qword_3B5698 != -1)
    swift_once(&qword_3B5698, sub_52378);
  return Logger.init(_:)((id)qword_3CEEF0);
}

uint64_t sub_52378()
{
  uint64_t result;

  sub_523DC();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000000002C6E50, 0xD00000000000001ELL, 0x80000000002C6E70);
  qword_3CEEF0 = result;
  return result;
}

unint64_t sub_523DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B80A0;
  if (!qword_3B80A0)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B80A0);
  }
  return result;
}

void sub_52418(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  _QWORD v20[3];
  char v21;
  _QWORD *v22;

  v4 = a3;
  v18 = *(_QWORD *)(a3 + 16);
  if (v18)
  {
    v5 = 0;
    v6 = (_BYTE *)(a3 + 56);
    v7 = _swiftEmptyArrayStorage;
    while (v5 < *(_QWORD *)(v4 + 16))
    {
      v9 = *((_QWORD *)v6 - 3);
      v8 = *((_QWORD *)v6 - 2);
      v10 = *((_QWORD *)v6 - 1);
      v11 = *v6;
      v20[0] = v9;
      v20[1] = v8;
      v20[2] = v10;
      v21 = v11;
      swift_bridgeObjectRetain(v10);
      v12 = a1(v20);
      if (v3)
      {
        swift_release(v7);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v10);
        return;
      }
      if ((v12 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
        v22 = v7;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_F5154(0, v7[2] + 1, 1);
          v7 = v22;
        }
        v15 = v7[2];
        v14 = v7[3];
        v3 = 0;
        if (v15 >= v14 >> 1)
        {
          sub_F5154(v14 > 1, v15 + 1, 1);
          v3 = 0;
          v7 = v22;
        }
        v7[2] = v15 + 1;
        v16 = &v7[4 * v15];
        v16[4] = v9;
        v16[5] = v8;
        v16[6] = v10;
        *((_BYTE *)v16 + 56) = v11;
        v4 = a3;
      }
      else
      {
        swift_bridgeObjectRelease(v10);
        v3 = 0;
      }
      ++v5;
      v6 += 32;
      if (v18 == v5)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease(v4);
  }
}

uint64_t sub_525B8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_525E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_52620()
{
  id v0;
  NSString v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "BOOLForKey:", v1);

  byte_3B6F18 = v2;
}

uint64_t DebugContentLayout.getter()
{
  if (qword_3B56A0 != -1)
    swift_once(&qword_3B56A0, sub_52620);
  return byte_3B6F18;
}

id SearchResultLayoutManager.Configuration.boldFont.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

uint64_t BookContentModule.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  sub_47418(v0 + 40);
  return v0;
}

uint64_t BookContentModule.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  sub_47418(v0 + 40);
  return swift_deallocClassInstance(v0, 56, 7);
}

double BookContentModule.view.getter@<D0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double result;

  v3 = v1[3];
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 5);
  v5 = v1[6];
  v6 = v1[4];
  swift_unknownObjectWeakInit(a1, 0);
  *(_QWORD *)(a1 + 24) = 0;
  swift_unknownObjectWeakInit(a1 + 16, 0);
  v7 = (_QWORD *)(a1 + *(int *)(type metadata accessor for BookContentView(0) + 28));
  *v7 = swift_getKeyPath(&unk_2E6798);
  v8 = sub_319AC(&qword_3B6F20);
  swift_storeEnumTagMultiPayload(v7, v8, 0);
  swift_unknownObjectWeakAssign(a1, v3);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  swift_unknownObjectWeakAssign(a1 + 16, Strong);
  swift_retain(v6);
  *(_QWORD *)&result = swift_unknownObjectRelease(Strong).n128_u64[0];
  return result;
}

Swift::Void __swiftcall BookContentModule.registerScrollGestureHostView(_:)(UIView_optional a1)
{
  uint64_t v1;
  Class isa;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  objc_class *v7;
  id v8;
  id v9;
  void *v10;
  void *Strong;
  id v12;
  id v13;

  isa = a1.value.super.super.isa;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_scrollGestureHostView;
  swift_unknownObjectWeakAssign(v3 + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_scrollGestureHostView, a1.value.super.super.isa);
  v5 = OBJC_IVAR____TtC8BookEPUB25BookContentViewController__uberScrollContainer;
  v6 = *(void **)(v3 + OBJC_IVAR____TtC8BookEPUB25BookContentViewController__uberScrollContainer);
  if (v6)
  {
    v7 = isa;
    v8 = v6;
    v9 = objc_msgSend(v8, "panGestureRecognizer");
    v10 = *(void **)(v3 + v5);
    v13 = v9;
    if (v10)
    {
      Strong = (void *)swift_unknownObjectWeakLoadStrong(v4);
      if (!Strong)
      {
        objc_msgSend(v10, "addGestureRecognizer:", v13);
        goto LABEL_9;
      }
      v12 = Strong;
      objc_msgSend(Strong, "addGestureRecognizer:", v13);
    }
    else
    {
      v12 = objc_msgSend(v9, "view");
      objc_msgSend(v12, "removeGestureRecognizer:", v13);
    }

    v7 = (objc_class *)v8;
    v8 = v13;
    v13 = v12;
LABEL_9:

  }
}

Swift::Void __swiftcall BookContentModule.setShowingExpandedPageLabels(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  uint64_t v2;
  _BOOL4 v5;
  char *v6;
  Swift::Bool *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void **aBlock;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  char v24[24];

  v5 = _;
  v6 = *(char **)(v2 + 24);
  v7 = (Swift::Bool *)&v6[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_isShowingExpandedPageLabels];
  swift_beginAccess(&v6[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_isShowingExpandedPageLabels], v24, 1, 0);
  if (*v7 != v5)
  {
    if (animated)
    {
      v8 = swift_allocObject(&unk_37B4A0, 24, 7);
      swift_unknownObjectWeakInit(v8 + 16, v6);
      v9 = swift_allocObject(&unk_37B4C8, 25, 7);
      *(_QWORD *)(v9 + 16) = v8;
      *(_BYTE *)(v9 + 24) = _;
      v10 = (void *)objc_opt_self(UIView);
      v11 = swift_allocObject(&unk_37B4F0, 24, 7);
      *(_QWORD *)(v11 + 16) = v6;
      v22 = sub_54270;
      v23 = v11;
      aBlock = _NSConcreteStackBlock;
      v19 = 1107296256;
      v20 = sub_525B8;
      v21 = &unk_37B508;
      v12 = _Block_copy(&aBlock);
      v13 = v23;
      swift_retain(v8);
      v14 = v6;
      swift_release(v13);
      v15 = swift_allocObject(&unk_37B540, 32, 7);
      *(_QWORD *)(v15 + 16) = sub_54240;
      *(_QWORD *)(v15 + 24) = v9;
      v22 = sub_542B4;
      v23 = v15;
      aBlock = _NSConcreteStackBlock;
      v19 = 1107296256;
      v20 = sub_525E4;
      v21 = &unk_37B558;
      v16 = _Block_copy(&aBlock);
      v17 = v23;
      swift_retain(v9);
      swift_release(v17);
      objc_msgSend(v10, "animateWithDuration:delay:options:animations:completion:", 4, v12, v16, 0.1, 0.0);
      _Block_release(v16);
      _Block_release(v12);
      swift_release(v8);
      swift_release(v9);
    }
    else
    {
      *v7 = _;
      aBlock = 0;
      v19 = 0;
      LOBYTE(v20) = 1;
      sub_161A90(0, (uint64_t)&aBlock, 0, 1, 2);
    }
  }
}

uint64_t BookContentModule.movementStatePublisher.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t result;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 32));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 136))(ObjectType, v4);
  *a1 = result;
  return result;
}

uint64_t BookContentModule.revealSearchResult(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 40) = v1;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)a1;
  *(_BYTE *)(v2 + 33) = *(_BYTE *)(a1 + 16);
  v3 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v2 + 64) = static MainActor.shared.getter();
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  *(_QWORD *)(v2 + 72) = v4;
  *(_QWORD *)(v2 + 80) = v5;
  return swift_task_switch(sub_52C4C, v4, v5);
}

uint64_t sub_52C4C()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;

  v1 = *(_BYTE *)(v0 + 33);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 48);
  *(_BYTE *)(v0 + 32) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_3BB4A4);
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_52CB0;
  return sub_CEEE0(v0 + 16);
}

uint64_t sub_52CB0()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  return swift_task_switch(sub_52CFC, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_52CFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BookContentModule.presentingViewController.getter()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(*(_QWORD *)(v0 + 16) + 176);
}

Swift::Void __swiftcall BookContentModule.readingSettingsPresentationChanged(presented:)(Swift::Bool presented)
{
  uint64_t v1;
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;

  v2 = presented;
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 32));
  (*(void (**)(_BOOL8, uint64_t, uint64_t))(v4 + 240))(v2, ObjectType, v4);
}

Swift::Void __swiftcall BookContentModule.fullscreenContentPresentationChanged(presented:)(Swift::Bool presented)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v3 + 40);
  ObjectType = swift_getObjectType(*(_QWORD *)(v3 + 32));
  v6 = 232;
  if (presented)
    v6 = 216;
  (*(void (**)(uint64_t, uint64_t))(v4 + v6))(ObjectType, v4);
}

uint64_t BookContentModule.representativePageText.getter()
{
  return sub_CF684();
}

uint64_t BookContentModule.representativePageTextIsVertical.getter()
{
  return sub_CF758() & 1;
}

uint64_t BookContentModule.contentLayoutController.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 152));
}

uint64_t BookContentModule.contentLayoutProviderProviding.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 16) + 32));
}

BookEPUB::SelectionInfo::ID_optional __swiftcall BookContentModule.addSelectionInfo(cfi:lifecycle:)(Swift::String cfi, BookEPUB::SelectionInfo::PresentationLifecycle lifecycle)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Bool v5;
  char v6;
  uint64_t v7;
  BookEPUB::SelectionInfo::ID_optional result;

  v3 = v2;
  v6 = *(_BYTE *)lifecycle;
  sub_1B1E4C(cfi._countAndFlagsBits, (uint64_t)cfi._object, &v6, &v7);
  *(_QWORD *)v3 = v7;
  *(_BYTE *)(v3 + 8) = 0;
  result.value.rawValue = v4;
  result.is_nil = v5;
  return result;
}

Swift::Void __swiftcall BookContentModule.removeSelectionInfo(_:)(BookEPUB::SelectionInfo::ID a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  __n128 v5;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[40];

  v1 = *(_QWORD *)a1.rawValue;
  v2 = sub_319AC(&qword_3B6F30);
  inited = swift_initStackObject(v2, v9);
  *(_OWORD *)(inited + 16) = xmmword_2E5F80;
  *(_QWORD *)(inited + 32) = v1;
  v8 = inited;
  CurrentValueSubject.value.getter(&v7);
  v6[2] = &v8;
  sub_52418((uint64_t (*)(_QWORD *))sub_542BC, (uint64_t)v6, v7);
  v7 = v4;
  CurrentValueSubject.value.setter(&v7, v5);
  swift_setDeallocating(inited);
}

double BookContentModule.convertToUI(_:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = *a1;
  v2 = *(_OWORD *)(a1 + 3);
  v5 = *(_OWORD *)(a1 + 1);
  v6 = v2;
  return sub_1C37FC((uint64_t)&v4, a2);
}

uint64_t BookContentModule.rects(forCFI:clippedToBounds:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 120) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 40) = v5;
  *(_QWORD *)(v4 + 48) = static MainActor.shared.getter();
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  *(_QWORD *)(v4 + 56) = v6;
  *(_QWORD *)(v4 + 64) = v7;
  return swift_task_switch(sub_52FF4, v6, v7);
}

uint64_t sub_52FF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[5];
  v0[9] = *(_QWORD *)(v0[4] + 16);
  v0[10] = static MainActor.shared.getter();
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  v0[11] = v2;
  v0[12] = v3;
  return swift_task_switch(sub_5305C, v2, v3);
}

uint64_t sub_5305C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_3C164C);
  *(_QWORD *)(v0 + 104) = v1;
  *v1 = v0;
  v1[1] = sub_530B4;
  return sub_1C21C0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 120));
}

uint64_t sub_530B4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_5310C, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_5310C()
{
  _QWORD *v0;

  swift_release(v0[10]);
  return swift_task_switch(sub_53144, v0[7], v0[8]);
}

uint64_t sub_53144()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 112));
}

uint64_t BookContentModule.presentEditMenu()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[2] = v0;
  v2 = type metadata accessor for MainActor(0);
  v1[3] = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_531E4, v3, v4);
}

uint64_t sub_531E4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_3BB454);
  *(_QWORD *)(v0 + 48) = v1;
  *v1 = v0;
  v1[1] = sub_53230;
  return sub_CF8A4();
}

uint64_t sub_53230(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_BYTE *)(*v1 + 56) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_53288, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_53288()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 56));
}

uint64_t BookContentModule.selection.getter@<X0>(uint64_t *a1@<X8>)
{
  return sub_C8770(a1);
}

uint64_t BookContentModule.select(annotationID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[6] = v5;
  v3[7] = v6;
  return swift_task_switch(sub_53350, v5, v6);
}

uint64_t sub_53350()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_3BB44C);
  v0[8] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_533A4;
  return sub_CFCBC(v0[2], v0[3]);
}

uint64_t sub_533A4(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_BYTE *)(*v1 + 72) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_533FC, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_533FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 72));
}

uint64_t BookContentModule.select(cfi:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = v4;
  v3[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v3[7] = v5;
  v3[8] = v6;
  return swift_task_switch(sub_534A4, v5, v6);
}

uint64_t sub_534A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = v1[5];
  v1[9] = *(_QWORD *)(v1[4] + 16);
  v1[10] = static MainActor.shared.getter(a1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  v1[11] = v3;
  v1[12] = v4;
  return swift_task_switch(sub_5350C, v3, v4);
}

uint64_t sub_5350C()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_3BAF14);
  v0[13] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_53560;
  return sub_C98A4(v0[2], v0[3]);
}

uint64_t sub_53560(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_BYTE *)(*v1 + 112) = a1;
  swift_task_dealloc(v3);
  return swift_task_switch(sub_535B8, *(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 96));
}

uint64_t sub_535B8()
{
  _QWORD *v0;

  swift_release(v0[10]);
  return swift_task_switch(sub_535F0, v0[7], v0[8]);
}

uint64_t sub_535F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 112));
}

Swift::Void __swiftcall BookContentModule.clearSelection()()
{
  sub_C96D0();
}

uint64_t BookContentModule.externalContentLoadEventHandler.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 16));
}

uint64_t BookContentModule.isHeaderVisible.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24)
                                        + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_hostView)
                            + OBJC_IVAR____TtC8BookEPUB19BookContentHostView_isHeaderVisible);
}

Swift::Void __swiftcall BookContentModule.setHeaderVisible(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  uint64_t v2;
  char *v3;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  double v10;
  _QWORD v11[5];
  uint64_t v12;

  v3 = *(char **)(*(_QWORD *)(v2 + 24) + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_hostView);
  if (v3[OBJC_IVAR____TtC8BookEPUB19BookContentHostView_isHeaderVisible] != _)
  {
    if (animated)
    {
      v5 = (void *)objc_opt_self(UIView);
      v6 = swift_allocObject(&unk_37B590, 25, 7);
      *(_QWORD *)(v6 + 16) = v3;
      *(_BYTE *)(v6 + 24) = _;
      v11[4] = sub_54310;
      v12 = v6;
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 1107296256;
      v11[2] = sub_525B8;
      v11[3] = &unk_37B5A8;
      v7 = _Block_copy(v11);
      v8 = v12;
      v9 = v3;
      swift_release(v8);
      objc_msgSend(v5, "animateWithDuration:animations:", v7, 0.2);
      _Block_release(v7);
    }
    else
    {
      v3[OBJC_IVAR____TtC8BookEPUB19BookContentHostView_isHeaderVisible] = _;
      v10 = 0.0;
      if (_)
        v10 = 1.0;
      objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC8BookEPUB19BookContentHostView_headerLabelContainerView], "setAlpha:", v10);
    }
  }
}

void BookContentModule.headerStyle.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_hostView)
                 + OBJC_IVAR____TtC8BookEPUB19BookContentHostView_headerStyle);
}

Swift::Void __swiftcall BookContentModule.setHeaderStyle(_:animated:)(BookEPUB::BookContentHeaderStyle _, Swift::Bool animated)
{
  uint64_t v2;
  int v3;
  unsigned __int8 *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD v10[5];
  uint64_t v11;

  v3 = *(unsigned __int8 *)_;
  v4 = *(unsigned __int8 **)(*(_QWORD *)(v2 + 24) + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_hostView);
  if (v3 != v4[OBJC_IVAR____TtC8BookEPUB19BookContentHostView_headerStyle])
  {
    if (animated)
    {
      v5 = (void *)objc_opt_self(UIView);
      v6 = swift_allocObject(&unk_37B5E0, 25, 7);
      *(_QWORD *)(v6 + 16) = v4;
      *(_BYTE *)(v6 + 24) = v3;
      v10[4] = sub_5431C;
      v11 = v6;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 1107296256;
      v10[2] = sub_525B8;
      v10[3] = &unk_37B5F8;
      v7 = _Block_copy(v10);
      v8 = v11;
      v9 = v4;
      swift_release(v8);
      objc_msgSend(v5, "animateWithDuration:animations:", v7, 0.2);
      _Block_release(v7);
    }
    else
    {
      v4[OBJC_IVAR____TtC8BookEPUB19BookContentHostView_headerStyle] = v3;
      sub_1A88B0();
    }
  }
}

Swift::Void __swiftcall BookContentModule.readingLoupeMoveLine(_:)(BookEPUB::LocationMovement::Direction a1)
{
  sub_10DA5C((a1 & 1) == 0);
}

_QWORD *BookContentModule.__allocating_init<A>(currentLocationProvider:currentLocationController:pageTurnController:contentHostEnvironmentProvider:bookProviderService:headerText:imageFilterMode:paginationService:accessoryAdornmentFactory:contentLayoutProvider:readingSettingsProvider:layoutModeProvider:contentSizeCategoryProvider:annotationProviderService:stylesheetProvider:pageNumberProvider:router:contentViewProxy:snapshotDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  __n128 v47;
  __n128 v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t ObjectType;
  void (*v72)(uint64_t *__return_ptr, uint64_t, uint64_t);
  _QWORD v76[3];
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;

  ObjectType = swift_getObjectType(a8);
  v72 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a9 + 8);
  v72(&v77, ObjectType, a9);
  v38 = v79;
  v39 = v80;
  sub_472D0(&v77, v79);
  LODWORD(v38) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v39 + 104))(v38, v39);
  sub_34488(&v77);
  if (v38 > 1)
  {
    v77 = 0;
    v78 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    v58 = swift_bridgeObjectRelease(v78);
    v76[0] = 0xD000000000000011;
    v76[1] = 0x80000000002C6E90;
    ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))v72)(&v77, ObjectType, a9, v58);
    v59 = v79;
    v60 = v80;
    sub_472D0(&v77, v79);
    v61 = (char *)sub_540B4
        + 4 * byte_2E6790[(*(unsigned __int8 (**)(uint64_t, uint64_t))(v60 + 104))(v59, v60)];
    __asm { BR              X10 }
  }
  v40 = type metadata accessor for BookContentDataManager();
  v41 = (_QWORD *)swift_allocObject(v40, 48);
  v41[2] = a8;
  v41[3] = a9;
  v41[4] = a13;
  v41[5] = a14;
  v42 = (uint64_t)v41;
  v66 = (_QWORD *)a5;
  sub_49F1C(a5, (uint64_t)&v77);
  v43 = type metadata accessor for BookContentInteractor(0);
  v44 = swift_allocObject(v43, *(unsigned int *)(v43 + 48));
  swift_unknownObjectRetain(a8);
  swift_unknownObjectRetain(a13);
  swift_unknownObjectRetain(a6);
  swift_retain();
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRetain(a17);
  swift_unknownObjectRetain(a19);
  swift_unknownObjectRetain(a21);
  swift_unknownObjectRetain(a23);
  swift_unknownObjectRetain(a25);
  v62 = v44;
  v46 = (uint64_t)v45;
  v68 = sub_54328(a6, a7, v42, a1, a2, a3, a4, &v77, a17, a18, a19, a20, a21, a22, a23, a24, v45, a26, v62);
  swift_unknownObjectRelease(a6);
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(a17);
  swift_unknownObjectRelease(a19);
  swift_unknownObjectRelease(a21);
  swift_unknownObjectRelease(a23);
  swift_unknownObjectRelease(v46);
  v64 = swift_getObjectType(v46);
  v65 = swift_getObjectType(a13);
  type metadata accessor for BookContentPresenter(0);
  swift_retain();
  v47 = swift_unknownObjectRetain(a30);
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))v72)(&v77, ObjectType, a9, v47);
  sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  swift_unknownObjectRetain(a13);
  swift_unknownObjectRetain(a6);
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a3);
  swift_unknownObjectRetain(a19);
  swift_unknownObjectRetain(v46);
  swift_retain();
  swift_unknownObjectRetain(a15);
  v48 = swift_unknownObjectRetain(a28);
  v63 = (void *)static OS_dispatch_queue.main.getter(v48);
  v49 = (_QWORD *)sub_D4F80(v68, (uint64_t)&protocol witness table for BookContentInteractor, a30, a35, &v77, a6, a7, a12, a19, a20, a27, a1, a2, a3, a4, v46, a13, a15, a16,
                    a28,
                    a29,
                    v63,
                    v64,
                    v65,
                    a26,
                    a14);
  swift_release();
  swift_unknownObjectRelease(a30);
  swift_unknownObjectRelease(a6);
  swift_unknownObjectRelease(a19);
  swift_release();
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(v46);
  swift_unknownObjectRelease(a13);
  swift_unknownObjectRelease(a15);
  swift_unknownObjectRelease(a28);

  swift_beginAccess(v68 + 160, v76, 1, 0);
  *(_QWORD *)(v68 + 168) = &off_37FEB8;
  swift_unknownObjectWeakAssign(v68 + 160, v49);
  (*(void (**)(uint64_t))(a14 + 240))(v65);
  v72(&v77, ObjectType, a9);
  v50 = v49[19];
  v51 = v49[4];
  v52 = *(_QWORD *)(v49[5] + 8);
  v53 = objc_allocWithZone((Class)type metadata accessor for BookContentViewController(0));
  swift_unknownObjectRetain(a13);
  swift_unknownObjectRetain(a6);
  swift_unknownObjectRetain(a19);
  swift_unknownObjectRetain(a21);
  swift_unknownObjectRetain(a28);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(v51);
  v54 = sub_54C38((uint64_t)&v77, a10, a11, v50, v51, v52, (uint64_t)v49, (uint64_t)v49, a6, a7, a19, a20, a21, a22, a13, a14, a28, a29, (uint64_t)v49,
          v53);
  swift_release();
  swift_unknownObjectRelease(v51);
  swift_release();
  swift_unknownObjectRelease(a6);
  swift_unknownObjectRelease(a19);
  swift_unknownObjectRelease(a21);
  swift_unknownObjectRelease(a13);
  swift_unknownObjectRelease(a28);
  v55 = (_QWORD *)swift_allocObject(v67, 56);
  v55[6] = 0;
  v56 = swift_unknownObjectWeakInit(v55 + 5, 0);
  v55[2] = v49;
  v55[3] = v54;
  v55[4] = a31;
  v55[6] = a33;
  swift_unknownObjectWeakAssign(v56, a32);
  swift_release();
  swift_release();
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(a3);
  swift_unknownObjectRelease(a6);
  swift_unknownObjectRelease(a8);
  swift_unknownObjectRelease(a13);
  swift_unknownObjectRelease(a15);
  swift_unknownObjectRelease(a17);
  swift_unknownObjectRelease(a19);
  swift_unknownObjectRelease(a21);
  swift_unknownObjectRelease(a23);
  swift_unknownObjectRelease(a25);
  swift_release();
  swift_unknownObjectRelease(a28);
  swift_unknownObjectRelease(a30);
  swift_unknownObjectRelease(a32);
  sub_34488(v66);
  return v55;
}

#error "54130: call analysis failed (funcsize=22)"

uint64_t sub_54138()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_54158()
{
  return EnvironmentValues.colorScheme.getter();
}

uint64_t sub_54178(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for ColorScheme(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return EnvironmentValues.colorScheme.setter(v4);
}

uint64_t sub_541F8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_5421C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_54240()
{
  uint64_t v0;

  sub_16F144(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_5424C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_54270()
{
  uint64_t v0;

  return sub_16F2CC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_54278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_54288(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_54290()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_542B4(uint64_t a1)
{
  uint64_t v1;

  return sub_606C0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_542BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1B345C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), **(_QWORD **)(v1 + 16)) & 1;
}

uint64_t sub_542EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

id sub_54310()
{
  uint64_t v0;

  return sub_1A7428(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_5431C()
{
  uint64_t v0;

  sub_1A745C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_54328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint8_t *a17, uint64_t a18, uint64_t a19)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __objc2_meth_list **p_opt_class_meths;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t ObjectType;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  id v74;
  uint64_t KeyPath;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint8_t *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  char v110[24];
  char v111[24];
  _QWORD v112[5];

  v105 = a7;
  v106 = a8;
  v104 = a6;
  v87 = a5;
  v86 = a4;
  v84 = a2;
  v85 = a1;
  v99 = a17;
  v98 = a18;
  v97 = a16;
  v96 = a15;
  v95 = a14;
  v94 = a13;
  v92 = a11;
  v90 = a12;
  v89 = a10;
  v20 = sub_319AC((uint64_t *)&unk_3BE6F0);
  v101 = *(_QWORD *)(v20 - 8);
  v102 = v20;
  __chkstk_darwin(v20);
  v100 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for Date(0);
  v91 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v23 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112[3] = type metadata accessor for BookContentDataManager();
  v112[4] = &protocol witness table for BookContentDataManager;
  v112[0] = a3;
  v88 = a19 + 144;
  *(_QWORD *)(a19 + 152) = 0;
  swift_unknownObjectWeakInit(a19 + 144, 0);
  *(_QWORD *)(a19 + 168) = 0;
  swift_unknownObjectWeakInit(a19 + 160, 0);
  *(_BYTE *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePage) = 0;
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePageObservation) = 0;
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_approvalCacheDidChangeObservation) = 0;
  v24 = a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentHostEnvironmentProvider;
  *(_QWORD *)(v24 + 8) = 0;
  swift_unknownObjectWeakInit(v24, 0);
  v25 = a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_currentLocationController;
  *(_QWORD *)(v25 + 8) = 0;
  swift_unknownObjectWeakInit(v25, 0);
  v26 = OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_onlyPaginateLiveContent;
  v103 = (id)objc_opt_self(NSUserDefaults);
  v27 = objc_msgSend(v103, "standardUserDefaults");
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v27, "BOOLForKey:", v28);

  *(_BYTE *)(a19 + v26) = v29;
  v30 = a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_configurationStorage;
  *(_WORD *)v30 = 0;
  *(_BYTE *)(v30 + 2) = 0;
  *(_OWORD *)(v30 + 8) = 0u;
  *(_OWORD *)(v30 + 24) = 0u;
  *(_BYTE *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_ignoreAllPageTurns) = 0;
  v31 = a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_readingSettingsProvider;
  *(_QWORD *)(v31 + 8) = 0;
  swift_unknownObjectWeakInit(v31, 0);
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v32 = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD000000000000024, 0x80000000002C6FF0);
  Logger.init(_:)(v32);
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_cancellables) = &_swiftEmptySetSingleton;
  *(_BYTE *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_lastKnownPastEnd) = 0;
  swift_beginAccess(v24, v111, 1, 0);
  *(_QWORD *)(v24 + 8) = v84;
  swift_unknownObjectWeakAssign(v24, v85);
  sub_49F1C((uint64_t)v112, a19 + 16);
  v33 = v86;
  v34 = v87;
  *(_QWORD *)(a19 + 96) = v86;
  *(_QWORD *)(a19 + 104) = v34;
  swift_beginAccess(v25, v110, 1, 0);
  v35 = v104;
  *(_QWORD *)(v25 + 8) = v105;
  swift_unknownObjectWeakAssign(v25, v35);
  sub_49F1C((uint64_t)v106, a19 + 56);
  v36 = v89;
  v108 = a9;
  v109 = v89;
  v37 = sub_319AC(&qword_3B7028);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  swift_unknownObjectRetain(v33);
  swift_unknownObjectRetain(a9);
  p_opt_class_meths = &OBJC_PROTOCOL___UITextInteractionDelegatePrivate.opt_class_meths;
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_contentLayoutProviderSubject) = CurrentValueSubject.init(_:)(&v108);
  *(_QWORD *)(v31 + 8) = v90;
  swift_unknownObjectWeakAssign(v31, v92);
  v39 = v94;
  v40 = v95;
  *(_QWORD *)(a19 + 112) = v94;
  *(_QWORD *)(a19 + 120) = v40;
  v41 = v96;
  v42 = v97;
  *(_QWORD *)(a19 + 128) = v96;
  *(_QWORD *)(a19 + 136) = v42;
  *(_QWORD *)(a19 + 152) = v98;
  swift_unknownObjectWeakAssign(v88, v99);
  swift_unknownObjectRetain(v39);
  v43 = swift_unknownObjectRetain(v41);
  static Date.distantPast.getter(v43);
  (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_centerTapTimestamp, v23, v93);
  ObjectType = swift_getObjectType(a9);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 32))(ObjectType, v36);
  v47 = v46;
  v48 = swift_getObjectType(v45);
  LOBYTE(v47) = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(v48, v47);
  swift_unknownObjectRelease(v45);
  v49 = 200.0;
  if ((v47 & 1) != 0)
    v49 = 150.0;
  *(double *)(a19 + 176) = v49;
  v50 = swift_retain_n(a19, 2);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    *(_DWORD *)v53 = 136315138;
    v107 = v54;
    v99 = v53 + 4;
    CurrentValueSubject.value.getter(&v108);
    v55 = v108;
    v56 = v109;
    v57 = swift_getObjectType(v108);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 184))(v57, v56);
    v60 = v59;
    swift_unknownObjectRelease(v55);
    v108 = (id)sub_33524(v58, v60, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, &v109, v99);
    swift_release_n(a19, 2);
    v61 = v60;
    p_opt_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___UITextInteractionDelegatePrivate + 48);
    swift_bridgeObjectRelease(v61);
    _os_log_impl(&dword_0, v51, v52, "Initialized with configuration: %s #contentConfig", v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    swift_release_n(a19, 2);
  }

  v62 = swift_getObjectType(v104);
  v108 = *(id *)((char *)p_opt_class_meths[225] + a19);
  v63 = sub_3DCC0(&qword_3B7030, &qword_3B7028, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v64 = (void *)Publisher.eraseToAnyPublisher()(v37, v63);
  v108 = v64;
  v65 = sub_319AC((uint64_t *)&unk_3BE710);
  v66 = sub_3DCC0((unint64_t *)&unk_3BD180, (uint64_t *)&unk_3BE710, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v67 = v100;
  Publisher.dropFirst(_:)(1, v65, v66);
  swift_release(v64);
  v68 = sub_3DCC0((unint64_t *)&unk_3BE720, (uint64_t *)&unk_3BE6F0, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v69 = v102;
  v70 = Publisher.eraseToAnyPublisher()(v102, v68);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v67, v69);
  v71 = v105;
  v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 136);
  v73 = sub_319AC(&qword_3B7038);
  v72(v70, v73, v62, v71);
  swift_release(v70);
  sub_A3BC4();
  v74 = v103;
  v108 = objc_msgSend(v103, "standardUserDefaults");
  KeyPath = swift_getKeyPath(&unk_2E6838);
  v76 = swift_allocObject(&unk_37B630, 24, 7);
  swift_weakInit(v76 + 16, a19);
  v77 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 5, sub_556C8, v76, &protocol witness table for NSObject);
  swift_release(KeyPath);
  swift_release(v76);

  v78 = *(void **)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePageObservation);
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_isBothMarginsAdvancePageObservation) = v77;

  v108 = objc_msgSend(v74, "standardUserDefaults");
  v79 = swift_getKeyPath(&unk_2E6890);
  v80 = swift_allocObject(&unk_37B630, 24, 7);
  swift_weakInit(v80 + 16, a19);
  v81 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v79, 0, sub_556E0, v80, &protocol witness table for NSObject);
  swift_release(v79);
  swift_release(v80);

  v82 = *(void **)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_approvalCacheDidChangeObservation);
  *(_QWORD *)(a19 + OBJC_IVAR____TtC8BookEPUB21BookContentInteractor_approvalCacheDidChangeObservation) = v81;

  sub_34488(v106);
  sub_34488(v112);
  return a19;
}

char *sub_54C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, _BYTE *a20)
{
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  objc_class *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  id v48;
  NSString v49;
  unsigned __int8 v50;
  id v51;
  NSString v52;
  uint64_t v53;
  id v54;
  id v55;
  char *v56;
  id v57;
  void *v58;
  id v59;
  unint64_t v60;
  void *v61;
  uint64_t ObjectType;
  uint64_t (*v63)(uint64_t, uint64_t, __n128);
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, _UNKNOWN **, uint64_t, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  objc_super v87;
  char v88[24];
  _QWORD v89[3];
  _BYTE v90[152];

  swift_bridgeObjectRelease(a3);
  v22 = (uint64_t)&a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_bookEntity];
  *(_QWORD *)(v22 + 32) = 0;
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  v23 = &a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_contentLayoutProviderProviding];
  *((_QWORD *)v23 + 1) = 0;
  swift_unknownObjectWeakInit(v23, 0);
  v24 = &a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingSettingsProvider];
  *((_QWORD *)v24 + 1) = 0;
  swift_unknownObjectWeakInit(v24, 0);
  a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_isShowingExpandedPageLabels] = 0;
  *(_QWORD *)&a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_unhandledTapRecognizer] = 0;
  *(_QWORD *)&a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController____lazy_storage___readingLoupeOverlayView] = 0;
  *(_QWORD *)&a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController____lazy_storage___readingLoupeView] = 0;
  *(_QWORD *)&a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_unhandledTapTouchType] = 0;
  v25 = (uint64_t)&a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_axCurrentLocation];
  sub_555CC((uint64_t)v90);
  sub_49AD8((uint64_t)v90, v25);
  sub_49AD8((uint64_t)v90, (uint64_t)&a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_failedLocation]);
  a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_isHandlingPageDrag] = 0;
  v26 = &a20[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_log];
  v27 = qword_3B57C8;
  v28 = a20;
  if (v27 != -1)
    swift_once(&qword_3B57C8, sub_1614F8);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_555F0(v29, (uint64_t)qword_3BE450);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v26, v30, v29);
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_stateHandler] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_debugLayers] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingLoupeLongPressTipController] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_paginatingHostView] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController____lazy_storage___pagedModeView] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController____lazy_storage___scrollContainerView] = 0;
  swift_unknownObjectWeakInit(&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_scrollGestureHostView], 0);
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController__uberScrollContainer] = 0;
  v31 = &v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_uberScrollLastOffset];
  *v31 = 0;
  v31[1] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController____lazy_storage___pageLabelContainerView] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_bookmarkCenterYConstraint] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController____lazy_storage___bookmarkWidthConstraint] = 0;
  v32 = OBJC_IVAR____TtC8BookEPUB25BookContentViewController_bookmarkView;
  *(_QWORD *)&v28[v32] = sub_165344();
  v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_adjustingForSinglePage] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_layout] = 1;
  v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_updateLocationOnScroll] = 0;
  v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_userIsScrolling] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_slidePanRecognizer] = 0;
  v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_isCurlPanRecognizerEnabled] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_curlPanRecognizer] = 0;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_contentSnapshotView] = 0;
  bzero(&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_cancellables], 0x280uLL);
  v33 = &v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_ConstraintPrefix];
  *v33 = 0xD000000000000010;
  v33[1] = 0x80000000002C6F70;
  swift_beginAccess(v22, v89, 33, 0);
  sub_55608(a1, v22);
  swift_endAccess(v89);
  v34 = (objc_class *)type metadata accessor for BookContentViewController(0);
  v89[0] = v34;
  v35 = sub_319AC(&qword_3B7020);
  v36 = String.init<A>(describing:)(v89, v35);
  v38 = v37;
  v39 = objc_allocWithZone((Class)type metadata accessor for BookContentHostView(0));
  sub_1A7678(v36, v38, 0, 0, 0);
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_hostView] = v40;
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_contentLayoutController] = a4;
  swift_beginAccess(v23, v89, 1, 0);
  *((_QWORD *)v23 + 1) = a6;
  swift_unknownObjectWeakAssign(v23, a5);
  v41 = &v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_contentEventHandler];
  *v41 = a7;
  v41[1] = &off_37FE30;
  v42 = &v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_contentNavigationEventHandler];
  *v42 = a8;
  v42[1] = &off_37FD88;
  v43 = &v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_contentHostEnvironmentProvider];
  *v43 = a9;
  v43[1] = a10;
  swift_beginAccess(v24, v88, 1, 0);
  *((_QWORD *)v24 + 1) = a12;
  swift_unknownObjectWeakAssign(v24, a11);
  v44 = (uint64_t *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_layoutModeProvider];
  *v44 = a13;
  v44[1] = a14;
  v45 = &v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_paginatingService];
  *v45 = a15;
  v45[1] = a16;
  v46 = &v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_pageNumberProvider];
  *v46 = a17;
  v46[1] = a18;
  v47 = (void *)objc_opt_self(NSUserDefaults);
  swift_retain(a4);
  swift_retain(a7);
  swift_retain(a8);
  swift_unknownObjectRetain(a9);
  swift_unknownObjectRetain(a13);
  swift_unknownObjectRetain(a15);
  v48 = objc_msgSend(v47, "standardUserDefaults", swift_unknownObjectRetain(a17).n128_f64[0]);
  v49 = String._bridgeToObjectiveC()();
  v50 = objc_msgSend(v48, "BOOLForKey:", v49);

  v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_showPaginatingWebView] = v50;
  v51 = objc_msgSend(v47, "standardUserDefaults");
  v52 = String._bridgeToObjectiveC()();
  LOBYTE(v49) = objc_msgSend(v51, "BOOLForKey:", v52);

  v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_showLayoutGuides] = (_BYTE)v49;
  v53 = type metadata accessor for ReadingLoupeStateController();
  swift_allocObject(v53, 384, 7);
  *(_QWORD *)&v28[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingLoupeStateController] = sub_1116B8();

  v87.receiver = v28;
  v87.super_class = v34;
  v54 = objc_msgSendSuper2(&v87, "initWithNibName:bundle:", 0, 0);
  v55 = objc_allocWithZone((Class)UITapGestureRecognizer);
  v56 = (char *)v54;
  v57 = objc_msgSend(v55, "initWithTarget:action:", v56, "unhandledTapAction:");
  objc_msgSend(v57, "setDelegate:", v56);
  objc_msgSend(v57, "setCancelsTouchesInView:", 0);
  v58 = *(void **)&v56[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_unhandledTapRecognizer];
  *(_QWORD *)&v56[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_unhandledTapRecognizer] = v57;

  v59 = objc_msgSend(objc_allocWithZone((Class)UIPanGestureRecognizer), "initWithTarget:action:", v56, "pageDrag:");
  v60 = 1;
  objc_msgSend(v59, "setDelegate:", v56);
  UIGestureRecognizer.be_allowedTouchTypes.setter((uint64_t)&off_378E50);
  objc_msgSend(v59, "setAllowedScrollTypesMask:", 2);
  v61 = *(void **)&v56[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_slidePanRecognizer];
  *(_QWORD *)&v56[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_slidePanRecognizer] = v59;

  if (a5)
  {
    ObjectType = swift_getObjectType(a5);
    v63 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a6 + 8);
    v64 = swift_unknownObjectRetain(a5);
    v65 = v63(ObjectType, a6, v64);
    v67 = v66;
    swift_unknownObjectRelease(a5);
    v68 = swift_getObjectType(v65);
    v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 24))(v68, v67);
    swift_unknownObjectRelease(v65);
  }
  *(_QWORD *)&v56[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_layout] = v60;
  sub_16263C(v60);
  sub_162DA8();
  swift_unknownObjectWeakAssign(a7 + 176, v56);
  v69 = *(_QWORD *)(a7 + 40);
  v70 = swift_getObjectType(*(_QWORD *)(a7 + 32));
  v71 = *(void (**)(char *, _UNKNOWN **, uint64_t, uint64_t))(v69 + 208);
  v72 = v56;
  v71(v56, &protocol witness table for BookContentViewController, v70, v69);

  sub_34450(0, (unint64_t *)&unk_3BE690, UITraitCollection_ptr);
  v73 = v72;
  v74 = static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
  v75 = UIViewController.registerForTraitChanges(_:action:)(v74, "_traitCollectionDidChangeWithSender:previousTraitCollection:");
  swift_unknownObjectRelease(v75);

  swift_bridgeObjectRelease(v74);
  sub_1647A0();
  sub_164A30();
  v76 = OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingLoupeStateController;
  v77 = *(_QWORD *)&v73[OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingLoupeStateController];
  swift_unknownObjectWeakAssign(v77 + 344, v73);
  v78 = v73;
  swift_retain(v77);
  sub_10B0A4();
  swift_release();

  v79 = *(_QWORD *)&v73[v76];
  *(_QWORD *)(v79 + 304) = a12;
  swift_unknownObjectWeakAssign(v79 + 296, a11);
  swift_retain(v79);
  swift_unknownObjectRetain(a11);
  sub_10AD9C();
  swift_release();
  swift_unknownObjectRelease(a11);
  v80 = *(_QWORD *)&v73[v76];
  swift_unknownObjectRetain(a13);
  swift_retain(v80);
  sub_112114(a13, a14);
  swift_release();
  swift_unknownObjectRelease(a13);
  v81 = *(_QWORD *)&v73[v76];
  *(_QWORD *)(v81 + 328) = &off_37FD60;
  swift_unknownObjectWeakAssign(v81 + 320, a19);

  sub_55650(a1);
  return v78;
}

uint64_t type metadata accessor for BookContentModule()
{
  return objc_opt_self(_TtC8BookEPUB17BookContentModule);
}

uint64_t method lookup function for BookContentModule(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookContentModule);
}

uint64_t sub_555A0()
{
  return sub_3DCC0(&qword_3B7010, (uint64_t *)&unk_3BE7C0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
}

double sub_555CC(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 122) = 0u;
  return result;
}

uint64_t sub_555F0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_55608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3B7018);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_55650(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC(&qword_3B7018);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

const char *sub_55690()
{
  return "BKLeftTapTurnToNext";
}

uint64_t sub_556A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_556C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_A388C(a1, a2, v2);
}

const char *sub_556D0()
{
  return "BEDocumentExternalLoadApprovalCacheDidReset";
}

uint64_t sub_556E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_A3940(a1, a2, v2);
}

uint64_t sub_55704()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3B7040);
  sub_555F0(v0, (uint64_t)qword_3B7040);
  if (qword_3B5698 != -1)
    swift_once(&qword_3B5698, sub_52378);
  return Logger.init(_:)((id)qword_3CEEF0);
}

void sub_55784(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  double *v11;
  uint64_t v12;
  unint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double *v51;
  double v52;
  double v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _BYTE v66[32];

  if (!*(_QWORD *)(a1 + 16))
  {
    if (qword_3B56A8 != -1)
      swift_once(&qword_3B56A8, sub_55704);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_555F0(v30, (uint64_t)qword_3B7040);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_0, v32, v33, "Cannot determine offset without any page locations", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    goto LABEL_20;
  }
  v4 = v2;
  v6 = *(_QWORD *)(a1 + 32);
  swift_retain(v4);
  v7 = swift_bridgeObjectRetain(a1);
  v8 = sub_55DEC(v7, v4);
  swift_bridgeObjectRelease(a1);
  swift_release();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    swift_bridgeObjectRelease(v8);
    v35 = (uint64_t *)(v4 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    v36 = v4 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages;
    if (*(_QWORD *)(v4 + 16) < v6)
    {
      swift_beginAccess(v36, v66, 0, 0);
      v37 = *v35;
      if ((unint64_t)v37 >> 62)
      {
        if (v37 < 0)
          v57 = v37;
        else
          v57 = v37 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v37);
        v38 = _CocoaArrayWrapper.endIndex.getter(v57);
        if (v38)
        {
LABEL_24:
          v39 = v38 - 1;
          if (__OFSUB__(v38, 1))
          {
            __break(1u);
          }
          else
          {
            if ((v37 & 0xC000000000000001) != 0)
            {
LABEL_68:
              v59 = specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v37);
              swift_bridgeObjectRelease(v37);
              v62 = *(_OWORD *)(v59 + 24);
              v56 = *(_QWORD *)(v59 + 40);
              swift_unknownObjectRelease(v59);
              goto LABEL_51;
            }
            if ((v39 & 0x8000000000000000) == 0)
            {
              if (v39 < *(_QWORD *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFF8)))
              {
                v40 = *(_QWORD *)(v37 + 8 * v39 + 32);
LABEL_50:
                swift_retain(v40);
                swift_bridgeObjectRelease(v37);
                v62 = *(_OWORD *)(v40 + 24);
                v56 = *(_QWORD *)(v40 + 40);
                swift_release();
LABEL_51:
                *(_OWORD *)a2 = v62;
                *(_QWORD *)(a2 + 16) = v56;
                *(_BYTE *)(a2 + 24) = 0;
                return;
              }
              goto LABEL_66;
            }
          }
          __break(1u);
LABEL_66:
          __break(1u);
LABEL_67:
          v39 = 0;
          goto LABEL_68;
        }
      }
      else
      {
        v38 = *(_QWORD *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFF8));
        swift_bridgeObjectRetain(v37);
        if (v38)
          goto LABEL_24;
      }
      goto LABEL_63;
    }
    swift_beginAccess(v36, v66, 0, 0);
    v37 = *v35;
    if ((unint64_t)v37 >> 62)
    {
      if (v37 < 0)
        v58 = v37;
      else
        v58 = v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v37);
      if (_CocoaArrayWrapper.endIndex.getter(v58))
      {
LABEL_47:
        if ((v37 & 0xC000000000000001) == 0)
        {
          if (!*(_QWORD *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFF8)))
          {
            __break(1u);
            return;
          }
          v40 = *(_QWORD *)(v37 + 32);
          goto LABEL_50;
        }
        goto LABEL_67;
      }
    }
    else
    {
      v55 = *(_QWORD *)((char *)&dword_10 + (v37 & 0xFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain(v37);
      if (v55)
        goto LABEL_47;
    }
LABEL_63:
    swift_bridgeObjectRelease(v37);
LABEL_20:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 24) = 1;
    return;
  }
  v60 = a1;
  v61 = a2;
  v10 = (uint64_t *)(v4 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_retain(v4);
  swift_bridgeObjectRetain(v8);
  swift_beginAccess(v10, v66, 0, 0);
  v11 = (double *)_swiftEmptyArrayStorage;
  v12 = 40;
  v13 = sub_55F08();
  do
  {
    v15 = *v10;
    v63 = *(_QWORD *)(v8 + v12);
    v64 = v15;
    v16 = sub_319AC(&qword_3B7058);
    Collection.subscript.getter(&v65, &v63, v16, v13);
    if (v65)
    {
      v17 = v65[3];
      v18 = v65[4];
      v19 = v65[5];
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = (double *)sub_42988(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
      v21 = *((_QWORD *)v11 + 2);
      v20 = *((_QWORD *)v11 + 3);
      if (v21 >= v20 >> 1)
        v11 = (double *)sub_42988((_QWORD *)(v20 > 1), v21 + 1, 1, v11);
      *((_QWORD *)v11 + 2) = v21 + 1;
      v14 = &v11[3 * v21];
      *((_QWORD *)v14 + 4) = v17;
      *((_QWORD *)v14 + 5) = v18;
      *((_QWORD *)v14 + 6) = v19;
    }
    v12 += 16;
    --v9;
  }
  while (v9);
  swift_release();
  swift_bridgeObjectRelease_n(v8, 2);
  v22 = *((_QWORD *)v11 + 2);
  if (v22)
  {
    v23 = *((_QWORD *)v11 + 4);
    v24 = v11[5];
    v25 = v11[6];
    v26 = v22 - 1;
    if (v26)
    {
      v51 = v11 + 9;
      v52 = v11[5];
      v53 = v11[6];
      do
      {
        v27 = *((_QWORD *)v51 - 2);
        v28 = *(v51 - 1);
        v29 = *v51;
        if (v28 >= v52)
        {
          v54 = v29 < v53;
          if (v29 < v53)
            v52 = *(v51 - 1);
          else
            v27 = v23;
          if (v29 < v53)
            v53 = *v51;
          else
            v28 = v24;
          if (!v54)
            v29 = v25;
        }
        else
        {
          v52 = *(v51 - 1);
          v53 = *v51;
        }
        v51 += 3;
        v23 = v27;
        v24 = v28;
        v25 = v29;
        --v26;
      }
      while (v26);
    }
    else
    {
      v27 = *((_QWORD *)v11 + 4);
      v28 = v11[5];
      v29 = v11[6];
    }
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)v61 = v27;
    *(double *)(v61 + 8) = v28;
    *(double *)(v61 + 16) = v29;
    *(_BYTE *)(v61 + 24) = 0;
  }
  else
  {
    if (qword_3B56A8 != -1)
      swift_once(&qword_3B56A8, sub_55704);
    v41 = type metadata accessor for Logger(0);
    sub_555F0(v41, (uint64_t)qword_3B7040);
    v42 = swift_bridgeObjectRetain_n(a1, 2);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v46 = (_QWORD *)swift_slowAlloc(32, -1);
      v65 = v46;
      *(_DWORD *)v45 = 136315138;
      v47 = swift_bridgeObjectRetain(v60);
      v48 = Array.description.getter(v47, &type metadata for PageLocation);
      v50 = v49;
      swift_bridgeObjectRelease(v60);
      v64 = sub_33524(v48, v50, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v45 + 4);
      swift_bridgeObjectRelease_n(v60, 2);
      swift_bridgeObjectRelease(v50);
      _os_log_impl(&dword_0, v43, v44, "Unable to find a pageOrigin for pages intersecting locations: %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
      swift_bridgeObjectRelease(v11);

    }
    else
    {
      swift_bridgeObjectRelease(v11);

      swift_bridgeObjectRelease_n(v60, 2);
    }
    *(_QWORD *)v61 = 0;
    *(_QWORD *)(v61 + 8) = 0;
    *(_QWORD *)(v61 + 16) = 0;
    *(_BYTE *)(v61 + 24) = 1;
  }
}

uint64_t sub_55DEC(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = 0;
  v4 = *(_QWORD *)(result + 16);
  v5 = result + 32;
LABEL_2:
  if (v3 <= v4)
    v6 = v4;
  else
    v6 = v3;
  v7 = v6 + 1;
  v8 = (uint64_t *)(v5 + 16 * v3);
  while (1)
  {
    if (v4 == v3)
      return (uint64_t)_swiftEmptyArrayStorage;
    if (v7 == ++v3)
      break;
    v9 = v8 + 2;
    v10 = *v8;
    v8 += 2;
    if (v10 == *(_QWORD *)(a2 + 16))
    {
      v14 = *(v9 - 1);
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_F521C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        result = sub_F521C(v11 > 1, v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v10;
      v13[5] = v14;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_55F08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3BBB80;
  if (!qword_3BBB80)
  {
    v1 = sub_31A38(&qword_3B7058);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_3BBB80);
  }
  return result;
}

uint64_t *sub_55F54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

void BookThemeEntity.secondaryLabelColor.getter()
{
  __asm { BR              X10 }
}

id sub_55FC8()
{
  char v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void **v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  void *v10;
  id (*v11)(void *);
  uint64_t v12;

  v1 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  if ((v0 & 1) != 0)
  {
    v11 = sub_57158;
    v12 = 0;
    v7 = _NSConcreteStackBlock;
    v8 = 1107296256;
    v9 = sub_57168;
    v10 = &unk_37B6A8;
    v2 = _Block_copy(&v7);
    v3 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v2);
    _Block_release(v2);
    swift_release();
    if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1) & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x564B0);
    }
  }
  else
  {
    v11 = sub_57148;
    v12 = 0;
    v7 = _NSConcreteStackBlock;
    v8 = 1107296256;
    v9 = sub_57168;
    v10 = &unk_37B6D0;
    v4 = _Block_copy(&v7);
    v3 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v4);
    _Block_release(v4);
    swift_release();
    if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1) & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x564B8);
    }
  }
  v5 = objc_msgSend(v1, "resolvedColorWithTraitCollection:", v3);

  return v5;
}

void BookThemeEntity.tertiaryLabel.getter()
{
  uint64_t v1;

  v1 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v1);
  __asm { BR              X10 }
}

uint64_t sub_56540()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  double v3;
  double v4;

  (*(void (**)(uint64_t, _QWORD))(v0 + 104))(v1, enum case for Color.RGBColorSpace.sRGB(_:));
  if ((v2 & 1) != 0)
  {
    v3 = 0.921568627;
    v4 = 0.960784314;
  }
  else
  {
    v3 = 0.235294118;
    v4 = 0.262745098;
  }
  return Color.init(_:red:green:blue:opacity:)(v1, v3, v3, v4, 0.3);
}

uint64_t BookThemeEntity.primaryLabel.getter()
{
  uint64_t v0;
  char v1;
  id v2;
  void *v3;
  id v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void **v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  if (*(_BYTE *)v0 == 1)
  {
    v2 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    *((_QWORD *)&v21 + 1) = sub_57158;
    *(_QWORD *)&v22 = 0;
    v19 = _NSConcreteStackBlock;
    *(_QWORD *)&v20 = 1107296256;
    *((_QWORD *)&v20 + 1) = sub_57168;
    *(_QWORD *)&v21 = &unk_37B798;
    v6 = _Block_copy(&v19);
    v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v6);
    _Block_release(v6);
    swift_release();
    result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1);
    if ((result & 1) == 0)
      goto LABEL_10;
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v1 = *(_BYTE *)(v0 + 1);
  if (*(_BYTE *)v0)
  {
    v7 = *(_QWORD *)(v0 + 56);
    v8 = *(_BYTE *)(v0 + 2);
    LOBYTE(v19) = *(_BYTE *)v0;
    BYTE1(v19) = v1;
    BYTE2(v19) = v8;
    v20 = *(_OWORD *)(v0 + 8);
    v21 = *(_OWORD *)(v0 + 24);
    v22 = *(_OWORD *)(v0 + 40);
    v23 = v7;
    BookThemeEntity.textColor.getter();
    v17 = v16;
    return Color.init(_:)(v17, v9, v10, v11, v12, v13, v14, v15);
  }
  v2 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  if ((v1 & 1) != 0)
  {
    *((_QWORD *)&v21 + 1) = sub_57158;
    *(_QWORD *)&v22 = 0;
    v19 = _NSConcreteStackBlock;
    *(_QWORD *)&v20 = 1107296256;
    *((_QWORD *)&v20 + 1) = sub_57168;
    *(_QWORD *)&v21 = &unk_37B7C0;
    v3 = _Block_copy(&v19);
    v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v3);
    _Block_release(v3);
    swift_release();
    result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1);
    if ((result & 1) == 0)
      goto LABEL_10;
    goto LABEL_13;
  }
  *((_QWORD *)&v21 + 1) = sub_57148;
  *(_QWORD *)&v22 = 0;
  v19 = _NSConcreteStackBlock;
  *(_QWORD *)&v20 = 1107296256;
  *((_QWORD *)&v20 + 1) = sub_57168;
  *(_QWORD *)&v21 = &unk_37B7E8;
  v18 = _Block_copy(&v19);
  v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v18);
  _Block_release(v18);
  swift_release();
  result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1);
  if ((result & 1) == 0)
  {
LABEL_10:
    v17 = objc_msgSend(v2, "resolvedColorWithTraitCollection:", v4);

    return Color.init(_:)(v17, v9, v10, v11, v12, v13, v14, v15);
  }
LABEL_14:
  __break(1u);
  return result;
}

void BookThemeEntity.primaryLabelColor.getter()
{
  uint64_t v0;
  char v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  void **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  if (*(_BYTE *)v0 == 1)
  {
    v2 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    *((_QWORD *)&v11 + 1) = sub_57158;
    *(_QWORD *)&v12 = 0;
    v9 = _NSConcreteStackBlock;
    *(_QWORD *)&v10 = 1107296256;
    *((_QWORD *)&v10 + 1) = sub_57168;
    *(_QWORD *)&v11 = &unk_37B810;
    v5 = _Block_copy(&v9);
    v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v5);
    _Block_release(v5);
    swift_release();
    if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1) & 1) == 0)
      goto LABEL_10;
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v1 = *(_BYTE *)(v0 + 1);
  if (*(_BYTE *)v0)
  {
    v6 = *(_QWORD *)(v0 + 56);
    v7 = *(_BYTE *)(v0 + 2);
    LOBYTE(v9) = *(_BYTE *)v0;
    BYTE1(v9) = v1;
    BYTE2(v9) = v7;
    v10 = *(_OWORD *)(v0 + 8);
    v11 = *(_OWORD *)(v0 + 24);
    v12 = *(_OWORD *)(v0 + 40);
    v13 = v6;
    BookThemeEntity.textColor.getter();
    return;
  }
  v2 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  if ((v1 & 1) != 0)
  {
    *((_QWORD *)&v11 + 1) = sub_57158;
    *(_QWORD *)&v12 = 0;
    v9 = _NSConcreteStackBlock;
    *(_QWORD *)&v10 = 1107296256;
    *((_QWORD *)&v10 + 1) = sub_57168;
    *(_QWORD *)&v11 = &unk_37B838;
    v3 = _Block_copy(&v9);
    v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v3);
    _Block_release(v3);
    swift_release();
    if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1) & 1) == 0)
      goto LABEL_10;
    goto LABEL_12;
  }
  *((_QWORD *)&v11 + 1) = sub_57148;
  *(_QWORD *)&v12 = 0;
  v9 = _NSConcreteStackBlock;
  *(_QWORD *)&v10 = 1107296256;
  *((_QWORD *)&v10 + 1) = sub_57168;
  *(_QWORD *)&v11 = &unk_37B860;
  v8 = _Block_copy(&v9);
  v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v8);
  _Block_release(v8);
  swift_release();
  if ((swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1) & 1) == 0)
  {
LABEL_10:
    objc_msgSend(v2, "resolvedColorWithTraitCollection:", v4);

    return;
  }
LABEL_13:
  __break(1u);
}

uint64_t BookThemeEntity.secondaryLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  BookThemeEntity.secondaryLabelColor.getter();
  return Color.init(_:)(v0, v1, v2, v3, v4, v5, v6, v7);
}

uint64_t BookThemeEntity.gaijiImageInversionPercentage.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_57114 + 4 * byte_2E6918[*v0]))();
}

uint64_t sub_57114@<X0>(char a1@<W8>)
{
  if ((a1 & 1) != 0)
    return 90;
  else
    return 0;
}

id sub_57148(void *a1)
{
  return objc_msgSend(a1, "setUserInterfaceStyle:", 1);
}

id sub_57158(void *a1)
{
  return objc_msgSend(a1, "setUserInterfaceStyle:", 2);
}

uint64_t sub_57168(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v3(a2);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_571A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_571B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_57224(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_F5114(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 2;
      v5 = v6;
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_F5114(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      result[v8 + 4] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_572E0(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = (_BYTE *)(swift_bridgeObjectRetain(a1) + 48);
  v4 = _swiftEmptyArrayStorage;
  do
  {
    if ((*v3 & 1) == 0)
    {
      v8 = *((_OWORD *)v3 - 1);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_42034(0, v4[2] + 1, 1, v4);
      v6 = v4[2];
      v5 = v4[3];
      if (v6 >= v5 >> 1)
        v4 = sub_42034((_QWORD *)(v5 > 1), v6 + 1, 1, v4);
      v4[2] = v6 + 1;
      *(_OWORD *)&v4[2 * v6 + 4] = v8;
    }
    v3 += 24;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(a1);
  return v4;
}

uint64_t sub_573E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v6;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3B7060);
  sub_555F0(v0, (uint64_t)qword_3B7060);
  v6 = type metadata accessor for BookContentAccessoryController();
  v1 = sub_319AC(&qword_3B72E8);
  v2 = String.init<A>(describing:)(&v6, v1);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000002C7150, v2, v3, v4);
}

uint64_t sub_57474(uint64_t *a1, uint64_t *a2)
{
  return sub_8AA4C(*a1, *a2);
}

uint64_t BookContentAccessoryController.__allocating_init(currentLocationProvider:contentLayoutController:paginatingService:accessoryAdornmentFactory:selectionHighlightController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_574D8(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_5B1C8);
}

uint64_t BookContentAccessoryController.init(currentLocationProvider:contentLayoutController:paginatingService:accessoryAdornmentFactory:selectionHighlightController:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_574D8(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_5B084);
}

uint64_t sub_574D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v19;

  ObjectType = swift_getObjectType(a4);
  v19 = a10(a1, a2, a3, a4, a6, a7, a8, a9, v10, ObjectType, a5);
  swift_unknownObjectRelease(a1);
  swift_release(a3);
  swift_unknownObjectRelease(a4);
  swift_unknownObjectRelease(a6);
  swift_unknownObjectRelease(a8);
  return v19;
}

double sub_575A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t Strong;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  id v81[5];

  v1 = v0;
  v2 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v2);
  v77 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_319AC(&qword_3B7260);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_319AC(&qword_3B7268);
  __chkstk_darwin(v71);
  v9 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_319AC(&qword_3B7270);
  v72 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_319AC(&qword_3B7278);
  v75 = *(_QWORD *)(v12 - 8);
  v76 = v12;
  __chkstk_darwin(v12);
  v73 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_319AC(&qword_3B7280);
  v79 = *(_QWORD *)(v14 - 8);
  v80 = v14;
  __chkstk_darwin(v14);
  v78 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_319AC(&qword_3B7288);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 16);
  if (Strong)
  {
    v22 = Strong;
    v69 = v19;
    v70 = v17;
    v23 = *(_QWORD *)(v1 + 24);
    v24 = swift_weakLoadStrong(v1 + 32);
    if (v24)
    {
      v25 = v24;
      v26 = swift_unknownObjectWeakLoadStrong(v1 + 40);
      if (v26)
      {
        v27 = *(_QWORD *)(v1 + 48);
        v64 = v26;
        v65 = v27;
        v81[0] = *(id *)(v25 + 104);
        v68 = v25;
        v28 = sub_319AC(&qword_3B7290);
        v67 = v16;
        v29 = v28;
        v30 = sub_3DCC0((unint64_t *)&unk_3BE730, &qword_3B7290, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
        v81[0] = (id)Publisher.eraseToAnyPublisher()(v29, v30);
        ObjectType = swift_getObjectType(v22);
        v81[3] = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 48))(ObjectType, v23);
        v32 = sub_319AC(&qword_3B7298);
        v33 = sub_319AC(&qword_3B72A0);
        v66 = v22;
        v34 = v33;
        v35 = sub_3DCC0(&qword_3BE7B0, &qword_3B7298, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        Publisher.map<A>(_:)(sub_57DD0, 0, v32, v34, v35);
        swift_release();
        v36 = sub_3DCC0(&qword_3B72A8, &qword_3B7260, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        Publisher.removeDuplicates(by:)(sub_57DFC, 0, v4, v36);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v37 = sub_319AC(&qword_3B72B0);
        v38 = sub_3DCC0((unint64_t *)&unk_3BE740, &qword_3B72B0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        v39 = sub_3DCC0(&qword_3B72B8, &qword_3B7268, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
        Publishers.CombineLatest.init(_:_:)(v81, v9, v37, v71, v38, v39);
        v40 = sub_5B5E4();
        v81[0] = (id)static OS_dispatch_queue.main.getter();
        v41 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
        v42 = (uint64_t)v77;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v77, 1, 1, v41);
        v43 = sub_3DCC0(&qword_3B72C0, &qword_3B7270, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest<A, B>);
        v44 = sub_49FA8();
        v46 = v73;
        v45 = v74;
        Publisher.receive<A>(on:options:)(v81, v42, v74, v40, v43, v44);
        sub_4A000(v42);

        (*(void (**)(char *, uint64_t))(v72 + 8))(v11, v45);
        v47 = sub_3DCC0(&qword_3B72C8, &qword_3B7278, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
        v48 = v78;
        v49 = v76;
        Publisher.filter(_:)(sub_57FE8, 0, v76, v47);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v46, v49);
        v50 = swift_allocObject(&unk_37B958, 32, 7);
        v52 = v64;
        v51 = v65;
        *(_QWORD *)(v50 + 16) = v64;
        *(_QWORD *)(v50 + 24) = v51;
        v53 = swift_allocObject(&unk_37B980, 32, 7);
        *(_QWORD *)(v53 + 16) = sub_5B644;
        *(_QWORD *)(v53 + 24) = v50;
        v54 = sub_3DCC0(&qword_3B72D0, &qword_3B7280, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
        swift_unknownObjectRetain(v52);
        v55 = v69;
        v56 = v80;
        Publisher.map<A>(_:)(sub_5B670, v53, v80, &type metadata for BookContentAccessoryController.State, v54);
        v57 = swift_release();
        (*(void (**)(char *, uint64_t, __n128))(v79 + 8))(v48, v56, v57);
        v58 = swift_allocObject(&unk_37B9A8, 24, 7);
        swift_weakInit(v58 + 16, v1);
        v59 = sub_3DCC0(&qword_3B72D8, &qword_3B7288, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        v60 = v67;
        Publisher<>.sink(receiveValue:)(sub_5B6C8, v58, v67, v59);
        v61 = swift_release();
        (*(void (**)(char *, uint64_t, __n128))(v70 + 8))(v55, v60, v61);
        v62 = v1 + 88;
        v63 = swift_beginAccess(v62, v81, 33, 0);
        AnyCancellable.store(in:)(v62, v63);
        swift_endAccess(v81);
        swift_unknownObjectRelease(v66);
        swift_release();
        swift_unknownObjectRelease(v52);
        *(_QWORD *)&result = swift_release().n128_u64[0];
      }
      else
      {
        swift_unknownObjectRelease(v22);
        *(_QWORD *)&result = swift_release().n128_u64[0];
      }
    }
    else
    {
      *(_QWORD *)&result = swift_unknownObjectRelease(v22).n128_u64[0];
    }
  }
  return result;
}

double sub_57C38@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  _BYTE v16[24];

  swift_beginAccess(v2 + 104, v16, 0, 0);
  v5 = *(_QWORD *)(v2 + 104);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_5;
  v6 = sub_3B7F8(a1);
  if ((v7 & 1) == 0)
    goto LABEL_5;
  v8 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 56 * v6);
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v13 = v8[4];
  v14 = v8[5];
  swift_unknownObjectRetain(v14);
  swift_unknownObjectRetain_n(v9, 2);
  swift_unknownObjectRetain(v12);
  sub_5B25C(v9, v10, v11, v12, v13, v14);
  if (v9)
  {
    *(_QWORD *)(a2 + 24) = swift_getObjectType(v9);
    *(_QWORD *)(a2 + 32) = v11;
    *(_QWORD *)a2 = v9;
  }
  else
  {
LABEL_5:
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

_QWORD *BookContentAccessoryController.deinit()
{
  _QWORD *v0;

  sub_47418((uint64_t)(v0 + 2));
  swift_weakDestroy(v0 + 4);
  sub_47418((uint64_t)(v0 + 5));
  sub_47418((uint64_t)(v0 + 7));
  sub_47418((uint64_t)(v0 + 9));
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  return v0;
}

uint64_t BookContentAccessoryController.__deallocating_deinit()
{
  _QWORD *v0;

  sub_47418((uint64_t)(v0 + 2));
  swift_weakDestroy(v0 + 4);
  sub_47418((uint64_t)(v0 + 5));
  sub_47418((uint64_t)(v0 + 7));
  sub_47418((uint64_t)(v0 + 9));
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t sub_57DD0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;

  v2 = *(_QWORD *)(result + 24);
  v3 = *(_QWORD *)(result + 48);
  v4 = *(_BYTE *)(result + 137);
  *(_OWORD *)a2 = *(_OWORD *)result;
  if (v2 | v3)
    v5 = 1;
  else
    v5 = v4;
  *(_BYTE *)(a2 + 16) = v5;
  *(_BYTE *)(a2 + 17) = v4;
  return result;
}

BOOL sub_57DFC(uint64_t a1, uint64_t a2)
{
  BOOL v3;

  v3 = *(_QWORD *)a1 != *(_QWORD *)a2 || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
  return ((v3 | (*(_BYTE *)(a1 + 16) ^ *(_BYTE *)(a2 + 16) | *(_BYTE *)(a2 + 17) ^ *(_BYTE *)(a1 + 17))) & 1) == 0;
}

uint64_t sub_57E3C(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;

  v6 = *a2;
  v7 = a2[1];
  if (qword_3B56B0 != -1)
    swift_once(&qword_3B56B0, sub_573E0);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_555F0(v8, (uint64_t)qword_3B7060);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v23 = v13;
    *(_DWORD *)v12 = 136315138;
    v19 = v6;
    v20 = v7;
    v21 = a3 & 1;
    v22 = a4 & 1;
    v14 = sub_319AC(&qword_3B72A0);
    v15 = String.init<A>(describing:)(&v19, v14);
    v17 = v16;
    v19 = sub_33524(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v12 + 4);
    swift_bridgeObjectRelease(v17);
    _os_log_impl(&dword_0, v10, v11, "Received #stateChange location %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  return a4 & 1 | ((a3 & 1) == 0);
}

uint64_t sub_57FE8(uint64_t a1)
{
  return sub_57E3C(a1, (uint64_t *)(a1 + 40), *(_BYTE *)(a1 + 56), *(_BYTE *)(a1 + 57));
}

uint64_t sub_57FF8(uint64_t a1, uint64_t *a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint8_t *v19;
  uint64_t ObjectType;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[16];
  uint64_t v45[2];
  _OWORD v46[2];
  uint64_t v47;

  v10 = *(_OWORD *)(a1 + 16);
  v46[0] = *(_OWORD *)a1;
  v46[1] = v10;
  v47 = *(_QWORD *)(a1 + 32);
  v12 = *a2;
  v11 = a2[1];
  if ((objc_msgSend((id)objc_opt_self(NSThread), "isMainThread") & 1) == 0)
  {
    if (qword_3B56B0 != -1)
      swift_once(&qword_3B56B0, sub_573E0);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_555F0(v13, (uint64_t)qword_3B7060);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = v11;
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_0, v15, v16, "Unexpectedly received value on non-main thread. This class is not thread-safe", v18, 2u);
      v19 = v18;
      v11 = v17;
      swift_slowDealloc(v19, -1, -1);
    }

  }
  ObjectType = swift_getObjectType(a5);
  (*(void (**)(uint64_t, uint64_t))(a6 + 8))(ObjectType, a6);
  v45[0] = v12;
  v45[1] = v11;
  v21 = sub_583A4(v45);
  swift_release();
  v22 = sub_57224((uint64_t)v21);
  v42 = sub_134824((uint64_t)v22);
  swift_bridgeObjectRelease(v22);
  if (qword_3B56B0 != -1)
    swift_once(&qword_3B56B0, sub_573E0);
  v23 = type metadata accessor for Logger(0);
  sub_555F0(v23, (uint64_t)qword_3B7060);
  v24 = swift_bridgeObjectRetain_n(v21, 2);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v45[0] = v28;
    *(_DWORD *)v27 = 136315138;
    v29 = swift_bridgeObjectRetain(v21);
    v30 = a4;
    v31 = Array.description.getter(v29, &type metadata for PageLocation);
    v41 = v11;
    v33 = v32;
    swift_bridgeObjectRelease(v21);
    v34 = v31;
    a4 = v30;
    v43 = sub_33524(v34, v33, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v27 + 4);
    swift_bridgeObjectRelease_n(v21, 2);
    v35 = v33;
    v11 = v41;
    swift_bridgeObjectRelease(v35);
    _os_log_impl(&dword_0, v25, v26, "Handling #stateChange adornmentStateChange for %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v21, 2);
  }
  v36 = sub_3D324((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v21);
  sub_5B784((uint64_t *)v46);
  if ((a4 & 1) != 0)
    v37 = 256;
  else
    v37 = 0;
  sub_5AE88(v36, v42, v46, v12, v11, v37 & 0xFFFE | a3 & 1, (uint64_t)v21);
  v39 = v38;
  swift_bridgeObjectRelease(v21);
  sub_5B7C8(v46);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v21);
  return v39;
}

_QWORD *sub_583A4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = *a1;
  v2 = a1[1];
  v4 = *(_QWORD *)(v1 + 40);
  if (!((unint64_t)v4 >> 62))
  {
    v5 = *(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8));
    result = (_QWORD *)swift_bridgeObjectRetain(*(_QWORD *)(v1 + 40));
    if (v5)
      goto LABEL_3;
LABEL_12:
    swift_bridgeObjectRelease(v4);
    return _swiftEmptyArrayStorage;
  }
  if (v4 < 0)
    v14 = *(_QWORD *)(v1 + 40);
  else
    v14 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 40));
  result = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v14);
  if (!result)
    goto LABEL_12;
LABEL_3:
  if ((v4 & 0xC000000000000001) != 0)
  {
    v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    swift_bridgeObjectRelease(v4);
    v17 = *(unsigned __int8 *)(v16 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode);
    swift_unknownObjectRelease(v16);
    if (v17 == 1)
    {
LABEL_6:
      v30 = v3;
      v31 = v2;
      v10 = &v30;
      BookPaginationEntity.spread(containing:)(*(BookEPUB::PageLocation *)(&v9 - 1));
      v11 = v27;
      if (v27)
      {
        v12 = swift_bridgeObjectRetain(v27);
        sub_5B838(v12, v28, v29);
        v13 = sub_572E0(v27);
LABEL_18:
        v15 = v13;
        swift_bridgeObjectRelease(v11);
        return v15;
      }
      return _swiftEmptyArrayStorage;
    }
LABEL_15:
    v30 = v3;
    v31 = v2;
    v18 = 1;
    sub_59ABC(&v30, 1, (uint64_t)&v27);
    v19 = v27;
    v20 = v28;
    v21 = v29;
    v22 = v27;
    v23 = v28;
    if ((v29 & 1) == 0)
    {
      v30 = v27;
      v31 = v28;
      sub_59ABC(&v30, 1, (uint64_t)&v27);
      v22 = v27;
      v23 = v28;
      v18 = v29;
    }
    v24 = sub_319AC(&qword_3B72F0);
    v11 = swift_allocObject(v24, 128, 7);
    *(_OWORD *)(v11 + 16) = xmmword_2E6930;
    v27 = v3;
    v28 = v2;
    sub_59ABC(&v27, -1, v11 + 32);
    *(_QWORD *)(v11 + 56) = v3;
    *(_QWORD *)(v11 + 64) = v2;
    *(_BYTE *)(v11 + 72) = 0;
    *(_QWORD *)(v11 + 80) = v19;
    *(_QWORD *)(v11 + 88) = v20;
    *(_BYTE *)(v11 + 96) = v21;
    *(_QWORD *)(v11 + 104) = v22;
    *(_QWORD *)(v11 + 112) = v23;
    *(_BYTE *)(v11 + 120) = v18;
    v27 = v11;
    v25 = sub_319AC(&qword_3B72F8);
    v26 = sub_3DCC0(&qword_3B7300, &qword_3B72F8, (uint64_t)&protocol conformance descriptor for [A]);
    v13 = (_QWORD *)Sequence.compact<A>()(v25, &type metadata for PageLocation, v26);
    goto LABEL_18;
  }
  if (*(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8)))
  {
    v7 = *(_QWORD *)(v4 + 32);
    swift_retain(v7);
    swift_bridgeObjectRelease(v4);
    v8 = *(_BYTE *)(v7 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_paginationMode);
    swift_release();
    if ((v8 & 1) != 0)
      goto LABEL_6;
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

void sub_585F4(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t (*v13)(uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  double (*v29)(uint64_t, uint64_t);
  id v30;
  id v31;
  double v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  _QWORD v49[4];
  _QWORD v50[2];

  v7 = *a2;
  v50[0] = *a3;
  v8 = *(_QWORD *)(v50[0] + 16);
  if (v8)
  {
    swift_bridgeObjectRetain_n(v50[0], 2);
    for (i = (uint64_t *)(v50[0] + 40); ; i += 2)
    {
      v10 = *(i - 1);
      v11 = *i;
      ObjectType = swift_getObjectType(v10);
      v13 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v11 + 24);
      v14 = swift_unknownObjectRetain(v10);
      v15 = v13(ObjectType, v11, v14);
      if ((v16 & 1) == 0 && v15 == v7)
        break;
      swift_unknownObjectRelease(v10);
      if (!--v8)
      {
        sub_5B810(v50);
        sub_5B810(v50);
        return;
      }
    }
    sub_5B810(v50);
    sub_5B810(v50);
    v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    if (v17)
    {
      v42 = (void *)v17;
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(ObjectType, v11);
      if (v18)
      {
        v20 = (void *)v18;
        v41 = v19;
        v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 160))(ObjectType, v11);
        if (v21)
        {
          v39 = (void *)v21;
          v40 = v20;
          v46 = v7;
          v22 = *(_QWORD *)(a7 + 16);
          if (v22)
          {
            v23 = (uint64_t *)(swift_bridgeObjectRetain(a7) + 40);
            v24 = _swiftEmptyArrayStorage;
            do
            {
              if (*(v23 - 1) == v46)
              {
                v28 = *v23;
                v47[0] = v24;
                if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
                {
                  sub_F521C(0, v24[2] + 1, 1);
                  v24 = (_QWORD *)v47[0];
                }
                v26 = v24[2];
                v25 = v24[3];
                if (v26 >= v25 >> 1)
                {
                  sub_F521C(v25 > 1, v26 + 1, 1);
                  v24 = (_QWORD *)v47[0];
                }
                v24[2] = v26 + 1;
                v27 = &v24[2 * v26];
                v27[4] = v46;
                v27[5] = v28;
              }
              v23 += 2;
              --v22;
            }
            while (v22);
            swift_bridgeObjectRelease(a7);
          }
          else
          {
            v24 = _swiftEmptyArrayStorage;
          }
          v29 = *(double (**)(uint64_t, uint64_t))(v11 + 168);
          v30 = v42;
          v31 = v39;
          v32 = v29(ObjectType, v11);
          v33 = swift_getObjectType(v40);
          v34 = (void *)(*(uint64_t (**)(uint64_t))(v41 + 8))(v33);
          objc_msgSend(v34, "contentOffset");
          v36 = v35;
          v38 = v37;

          v47[0] = a4;
          v47[1] = a5;
          v47[2] = v24;
          swift_unknownObjectWeakInit(&v48, v30);

          swift_unknownObjectWeakInit(v49, v31);
          *(double *)&v49[1] = v32;
          v49[2] = v36;
          v49[3] = v38;
          sub_109EA8((uint64_t)v47, v46);
          swift_unknownObjectRelease(v10);

        }
        else
        {
          swift_unknownObjectRelease(v10);

        }
      }
      else
      {
        swift_unknownObjectRelease(v10);

      }
    }
    else
    {
      swift_unknownObjectRelease(v10);
    }
  }
}

double sub_5892C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  char v7;
  _BYTE v8[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = *(_QWORD *)(Strong + 96);
    *(_QWORD *)(Strong + 96) = v2;
    swift_bridgeObjectRetain_n(v2, 2);
    v7 = sub_8AA4C(v6, v2);
    swift_bridgeObjectRelease(v2);
    if ((v7 & 1) == 0)
      sub_589C4();
    swift_release();
    *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  }
  return result;
}

void sub_589C4()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ObjectType;
  void (*v33)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD *, __n128, _UNKNOWN **, uint64_t, uint64_t);
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  unint64_t v106;
  char v107;
  unint64_t v108;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t Strong;
  uint64_t v132;
  uint64_t v133;
  int64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  _BYTE v147[64];
  _QWORD *v148;
  _OWORD v149[4];
  uint64_t v150;
  char v151[24];
  uint64_t v152;
  _QWORD v153[9];

  v1 = (int *)sub_319AC(&qword_3B72E0);
  v125 = swift_allocBox();
  v3 = v2;
  v4 = v1[12];
  v5 = v1[16];
  v6 = v1[20];
  Date.init()(v125);
  v140 = v4;
  *(_QWORD *)(v3 + v4) = _swiftEmptyArrayStorage;
  v128 = v5;
  *(_QWORD *)(v3 + v5) = _swiftEmptyArrayStorage;
  v133 = v6;
  *(_QWORD *)(v3 + v6) = _swiftEmptyArrayStorage;
  v142 = v0;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 5);
  if (!Strong)
    goto LABEL_99;
  v145 = v0[6];
  v130 = swift_unknownObjectWeakLoadStrong(v0 + 9);
  if (!v130)
  {
    v97 = Strong;
LABEL_98:
    swift_unknownObjectRelease(v97);
    goto LABEL_99;
  }
  v127 = v0[10];
  v7 = swift_weakLoadStrong(v0 + 4);
  if (!v7)
  {
    swift_unknownObjectRelease(Strong);
    v97 = v130;
    goto LABEL_98;
  }
  v8 = v7;
  v144 = swift_unknownObjectWeakLoadStrong(v0 + 7);
  if (v144)
  {
    v143 = v0[8];
    v9 = v0[12];
    v124 = v9 + 64;
    v10 = 1 << *(_BYTE *)(v9 + 32);
    v11 = -1;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    v12 = v11 & *(_QWORD *)(v9 + 64);
    v13 = v0 + 13;
    v129 = v0[12];
    swift_bridgeObjectRetain(v9);
    swift_beginAccess(v0 + 13, v151, 0, 0);
    v134 = 0;
    v126 = (unint64_t)(v10 + 63) >> 6;
    v139 = v3;
    v132 = v8;
    v146 = v0 + 13;
    while (v12)
    {
      v14 = __clz(__rbit64(v12));
      v15 = (v12 - 1) & v12;
      v16 = v14 | (v134 << 6);
LABEL_10:
      v17 = *(_QWORD *)(v129 + 56);
      *(_QWORD *)&v149[0] = *(_QWORD *)(*(_QWORD *)(v129 + 48) + 8 * v16);
      sub_5B6D0(v17 + (v16 << 6), (uint64_t)v149 + 8);
LABEL_29:
      sub_5B70C((uint64_t)v149, (uint64_t)&v152, (uint64_t *)&unk_3B8E10);
      if (!v153[2])
      {
        swift_release();
        v98 = *v13;
        v99 = swift_bridgeObjectRetain(*v13);
        v100 = sub_F4B90(v99);
        swift_bridgeObjectRelease(v98);
        v101 = v100[2];
        if (v101)
        {
          v102 = v100 + 4;
          do
          {
            v104 = *v102++;
            v103 = v104;
            if (!*(_QWORD *)(v142[12] + 16) || (sub_3B7F8(v103), (v105 & 1) == 0))
            {
              swift_beginAccess(v13, &v152, 33, 0);
              v106 = sub_3B7F8(v103);
              if ((v107 & 1) != 0)
              {
                v108 = v106;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
                v110 = *v13;
                *(_QWORD *)&v149[0] = *v13;
                *v13 = 0x8000000000000000;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_F2234();
                  v110 = *(_QWORD *)&v149[0];
                }
                v111 = (uint64_t *)(*(_QWORD *)(v110 + 56) + 56 * v108);
                v112 = *v111;
                v113 = v111[3];
                v114 = v111[5];
                sub_188038(v108, v110);
                v115 = *v13;
                *v13 = v110;
                swift_bridgeObjectRelease(v115);
                swift_unknownObjectRelease(v112);
                swift_unknownObjectRelease(v113);
                swift_unknownObjectRelease(v114);
                v3 = v139;
              }
              swift_endAccess(&v152);
              v116 = *(_QWORD **)(v3 + v133);
              if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0)
                v116 = sub_42AAC(0, v116[2] + 1, 1, v116);
              v118 = v116[2];
              v117 = v116[3];
              if (v118 >= v117 >> 1)
                v116 = sub_42AAC((_QWORD *)(v117 > 1), v118 + 1, 1, v116);
              v116[2] = v118 + 1;
              v116[v118 + 4] = v103;
              *(_QWORD *)(v3 + v133) = v116;
            }
            --v101;
          }
          while (v101);
        }
        swift_unknownObjectRelease(Strong);
        swift_release();
        swift_unknownObjectRelease(v144);
        swift_release();
        swift_unknownObjectRelease(v130);
        goto LABEL_100;
      }
      v21 = v152;
      sub_3F1FC((uint64_t)v153, (uint64_t)v149);
      v22 = *v13;
      v141 = v15;
      if (*(_QWORD *)(*v13 + 16) && (v23 = sub_3B7F8(v21), (v24 & 1) != 0))
      {
        v25 = (_QWORD *)(*(_QWORD *)(v22 + 56) + 56 * v23);
        v26 = *v25;
        v27 = v25[3];
        v28 = v25[4];
        v29 = v25[5];
        v30 = v25[6];
        if (*v25)
        {
          v31 = v25[1];
          ObjectType = swift_getObjectType(*v25);
          sub_5B6D0((uint64_t)v149, (uint64_t)v147);
          v33 = *(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v31 + 16);
          swift_unknownObjectRetain(v29);
          swift_unknownObjectRetain(v26);
          v34 = swift_unknownObjectRetain(v27);
          v33(v147, ObjectType, v31, v34);
          if (!v27)
            goto LABEL_35;
LABEL_34:
          v35 = swift_getObjectType(v27);
          sub_5B6D0((uint64_t)v149, (uint64_t)v147);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v28 + 16))(v147, v35, v28);
          goto LABEL_35;
        }
        swift_unknownObjectRetain(v25[5]);
        swift_unknownObjectRetain(v27);
        if (v27)
          goto LABEL_34;
LABEL_35:
        v8 = v132;
        if (v29)
        {
          v36 = swift_getObjectType(v29);
          sub_5B6D0((uint64_t)v149, (uint64_t)v147);
          (*(void (**)(_BYTE *, uint64_t, uint64_t))(v30 + 16))(v147, v36, v30);
        }
        v37 = *(_QWORD **)(v139 + v128);
        v12 = v141;
        if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
          v37 = sub_42AAC(0, v37[2] + 1, 1, v37);
        v39 = v37[2];
        v38 = v37[3];
        if (v39 >= v38 >> 1)
          v37 = sub_42AAC((_QWORD *)(v38 > 1), v39 + 1, 1, v37);
        v37[2] = v39 + 1;
        v37[v39 + 4] = v21;
        swift_unknownObjectRelease(v26);
        swift_unknownObjectRelease(v27);
        swift_unknownObjectRelease(v29);
        v3 = v139;
        *(_QWORD *)(v139 + v128) = v37;
        sub_5B750((uint64_t)v149);
        v13 = v146;
      }
      else
      {
        v40 = swift_getObjectType(v144);
        v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t))(v143 + 8))(v21, Strong, v145, v8, v130, v127, v149, v40, v143);
        if (v43)
        {
          v136 = v42;
          v137 = v41;
          if (qword_3B56B0 != -1)
            swift_once(&qword_3B56B0, sub_573E0);
          v44 = type metadata accessor for Logger(0);
          v45 = sub_555F0(v44, (uint64_t)qword_3B7060);
          v46 = Logger.logObject.getter(v45);
          v47 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v46, v47))
          {
            v48 = swift_slowAlloc(12, -1);
            *(_DWORD *)v48 = 134217984;
            *(_QWORD *)(v48 + 4) = v21;
            _os_log_impl(&dword_0, v46, v47, "Adding highlight adornment controller for ordinal: %ld", (uint8_t *)v48, 0xCu);
            swift_slowDealloc(v48, -1, -1);
          }

        }
        else
        {
          v136 = 0;
          v137 = 0;
        }
        v49 = v21;
        v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))(v143 + 16))(v21, Strong, v145, v8, v149, v40);
        if (v138)
        {
          v135 = v50;
          v51 = v8;
          if (qword_3B56B0 != -1)
            swift_once(&qword_3B56B0, sub_573E0);
          v52 = v43;
          v53 = type metadata accessor for Logger(0);
          v54 = sub_555F0(v53, (uint64_t)qword_3B7060);
          v55 = Logger.logObject.getter(v54);
          v56 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v55, v56))
          {
            v57 = swift_slowAlloc(12, -1);
            *(_DWORD *)v57 = 134217984;
            *(_QWORD *)(v57 + 4) = v49;
            _os_log_impl(&dword_0, v55, v56, "Adding note adornment controller for ordinal: %ld", (uint8_t *)v57, 0xCu);
            swift_slowDealloc(v57, -1, -1);
          }
          v58 = v142;

        }
        else
        {
          v51 = v8;
          v52 = v43;
          v58 = v142;
          v135 = 0;
        }
        v60 = *(_QWORD *)(v51 + 64);
        v59 = *(_QWORD *)(v51 + 72);
        v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD *, __n128, _UNKNOWN **, uint64_t, uint64_t))(v143 + 24);
        v62 = swift_unknownObjectRetain(v60);
        v63 = v61(v49, Strong, v145, v51, v149, v60, v59, v58, v62, &protocol witness table for BookContentAccessoryController, v40, v143);
        v65 = v64;
        swift_unknownObjectRelease(v60);
        if (v63)
        {
          v66 = v52;
          v67 = v138;
          if (qword_3B56B0 != -1)
            swift_once(&qword_3B56B0, sub_573E0);
          v68 = type metadata accessor for Logger(0);
          v69 = sub_555F0(v68, (uint64_t)qword_3B7060);
          v70 = Logger.logObject.getter(v69);
          v71 = static os_log_type_t.info.getter();
          v72 = v49;
          if (os_log_type_enabled(v70, v71))
          {
            v73 = swift_slowAlloc(12, -1);
            *(_DWORD *)v73 = 134217984;
            *(_QWORD *)(v73 + 4) = v49;
            _os_log_impl(&dword_0, v70, v71, "Adding accessibility controller for ordinal: %ld", (uint8_t *)v73, 0xCu);
            swift_slowDealloc(v73, -1, -1);
          }

        }
        else
        {
          v65 = 0;
          v66 = v52;
          v67 = v138;
          v72 = v49;
        }
        swift_beginAccess(v146, v147, 33, 0);
        swift_unknownObjectRetain(v63);
        v74 = *v146;
        swift_unknownObjectRetain(v66);
        swift_unknownObjectRetain(v67);
        v75 = swift_isUniquelyReferenced_nonNull_native(v74);
        v148 = (_QWORD *)*v146;
        v76 = v148;
        *v146 = 0x8000000000000000;
        v78 = sub_3B7F8(v72);
        v79 = v76[2];
        v80 = (v77 & 1) == 0;
        v81 = v79 + v80;
        if (__OFADD__(v79, v80))
        {
          __break(1u);
LABEL_103:
          __break(1u);
LABEL_104:
          __break(1u);
LABEL_105:
          __break(1u);
LABEL_106:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
          __break(1u);
          return;
        }
        v82 = v77;
        if (v76[3] >= v81)
        {
          if ((v75 & 1) != 0)
          {
            v85 = v148;
            if ((v77 & 1) != 0)
              goto LABEL_71;
          }
          else
          {
            sub_F2234();
            v85 = v148;
            if ((v82 & 1) != 0)
              goto LABEL_71;
          }
        }
        else
        {
          sub_ED834(v81, v75);
          v83 = sub_3B7F8(v72);
          if ((v82 & 1) != (v84 & 1))
            goto LABEL_106;
          v78 = v83;
          v85 = v148;
          if ((v82 & 1) != 0)
          {
LABEL_71:
            v90 = (uint64_t *)(v85[7] + 56 * v78);
            v91 = v90[3];
            v92 = v90[5];
            swift_unknownObjectRelease(*v90);
            swift_unknownObjectRelease(v91);
            swift_unknownObjectRelease(v92);
            *v90 = v66;
            v90[1] = v137;
            v90[2] = v136;
            v90[3] = v67;
            v90[4] = v135;
            v90[5] = v63;
            v90[6] = v65;
            goto LABEL_72;
          }
        }
        v85[(v78 >> 6) + 8] |= 1 << v78;
        *(_QWORD *)(v85[6] + 8 * v78) = v72;
        v86 = (uint64_t *)(v85[7] + 56 * v78);
        *v86 = v66;
        v86[1] = v137;
        v86[2] = v136;
        v86[3] = v67;
        v86[4] = v135;
        v86[5] = v63;
        v86[6] = v65;
        v87 = v85[2];
        v88 = __OFADD__(v87, 1);
        v89 = v87 + 1;
        if (v88)
          goto LABEL_104;
        v85[2] = v89;
LABEL_72:
        v93 = *v146;
        *v146 = (uint64_t)v85;
        swift_bridgeObjectRelease(v93);
        swift_endAccess(v147);
        v3 = v139;
        v94 = *(_QWORD **)(v139 + v140);
        v8 = v132;
        if ((swift_isUniquelyReferenced_nonNull_native(v94) & 1) == 0)
          v94 = sub_42AAC(0, v94[2] + 1, 1, v94);
        v96 = v94[2];
        v95 = v94[3];
        if (v96 >= v95 >> 1)
          v94 = sub_42AAC((_QWORD *)(v95 > 1), v96 + 1, 1, v94);
        v94[2] = v96 + 1;
        v94[v96 + 4] = v72;
        *(_QWORD *)(v139 + v140) = v94;
        sub_5B750((uint64_t)v149);
        swift_unknownObjectRelease(v63);
        swift_unknownObjectRelease(v67);
        swift_unknownObjectRelease(v66);
        v13 = v146;
        v12 = v141;
      }
    }
    v18 = v134 + 1;
    if (__OFADD__(v134, 1))
      goto LABEL_103;
    if (v18 >= v126)
    {
LABEL_28:
      v15 = 0;
      v150 = 0;
      memset(v149, 0, sizeof(v149));
      goto LABEL_29;
    }
    v19 = *(_QWORD *)(v124 + 8 * v18);
    if (!v19)
    {
      v20 = v134 + 2;
      ++v134;
      if (v18 + 1 >= v126)
        goto LABEL_28;
      v19 = *(_QWORD *)(v124 + 8 * v20);
      if (!v19)
      {
        v134 = v18 + 1;
        if (v18 + 2 >= v126)
          goto LABEL_28;
        v19 = *(_QWORD *)(v124 + 8 * (v18 + 2));
        if (v19)
        {
          v18 += 2;
          goto LABEL_14;
        }
        v20 = v18 + 3;
        v134 = v18 + 2;
        if (v18 + 3 >= v126)
          goto LABEL_28;
        v19 = *(_QWORD *)(v124 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v18 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_105;
            if (v18 >= v126)
            {
              v134 = v126 - 1;
              goto LABEL_28;
            }
            v19 = *(_QWORD *)(v124 + 8 * v18);
            ++v20;
            if (v19)
              goto LABEL_14;
          }
        }
      }
      v18 = v20;
    }
LABEL_14:
    v15 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v18 << 6);
    v134 = v18;
    goto LABEL_10;
  }
  swift_unknownObjectRelease(Strong);
  swift_unknownObjectRelease(v130);
  swift_release();
LABEL_99:
  swift_beginAccess(v0 + 13, &v152, 1, 0);
  v119 = v0[13];
  v120 = swift_bridgeObjectRetain(v119);
  v121 = sub_F4B90(v120);
  swift_bridgeObjectRelease(v119);
  *(_QWORD *)(v3 + v133) = v121;
  v122 = sub_3D424((uint64_t)_swiftEmptyArrayStorage);
  v123 = v142[13];
  v142[13] = v122;
  swift_bridgeObjectRelease(v123);
LABEL_100:
  sub_59650(v125);
  swift_release();
}

void sub_59650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];
  uint64_t v40;
  _BYTE v41[24];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)sub_319AC(&qword_3B72E0);
  v7 = swift_projectBox(a1);
  v8 = swift_beginAccess(v7, v41, 0, 0);
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))(v5, v7, v2, v8);
  v10 = Date.timeIntervalSinceNow.getter(v9);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_3B56B0 != -1)
    swift_once(&qword_3B56B0, sub_573E0);
  v11 = type metadata accessor for Logger(0);
  sub_555F0(v11, (uint64_t)qword_3B7060);
  v12 = swift_retain_n(a1, 6);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(42, -1);
    v33 = swift_slowAlloc(96, -1);
    v40 = v33;
    *(_DWORD *)v15 = 136315906;
    swift_beginAccess(v7, v39, 0, 0);
    v16 = *(_QWORD *)(v7 + v6[12]);
    v17 = swift_bridgeObjectRetain(v16);
    v18 = Array.description.getter(v17, &type metadata for Int);
    v20 = v19;
    swift_bridgeObjectRelease(v16);
    v37 = sub_33524(v18, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v15 + 4);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v15 + 12) = 2080;
    swift_beginAccess(v7, &v37, 0, 0);
    v21 = *(_QWORD *)(v7 + v6[16]);
    v22 = swift_bridgeObjectRetain(v21);
    v23 = Array.description.getter(v22, &type metadata for Int);
    v25 = v24;
    swift_bridgeObjectRelease(v21);
    v35 = sub_33524(v23, v25, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v15 + 14);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v15 + 22) = 2080;
    swift_beginAccess(v7, &v35, 0, 0);
    v26 = *(_QWORD *)(v7 + v6[20]);
    v27 = swift_bridgeObjectRetain(v26);
    v28 = Array.description.getter(v27, &type metadata for Int);
    v30 = v29;
    swift_bridgeObjectRelease(v26);
    v34 = COERCE_DOUBLE(sub_33524(v28, v30, &v40));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v15 + 24);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v15 + 32) = 2048;
    v34 = round(v10 * -1000000.0) / 1000.0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v15 + 34);
    _os_log_impl(&dword_0, v13, v14, "updateAccessoryControllers: created: %s, updated: %s, deleted: %s in %fms", (uint8_t *)v15, 0x2Au);
    v31 = v33;
    swift_arrayDestroy(v33, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release_n(a1, 6);
  }
}

double BookContentAccessoryController.applyToAccessibility(for:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  uint64_t v11;
  char v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  if (swift_weakLoadStrong(v2 + 32))
  {
    v7 = BookContentLayoutController.contentLoader(ordinal:)(a1);
    v9 = v8;
    *(_QWORD *)&result = swift_release().n128_u64[0];
    if (v7)
    {
      ObjectType = swift_getObjectType(v7);
      v11 = v4;
      v12 = v5;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 320))(&v11, ObjectType, v9);
      *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
    }
  }
  return result;
}

unint64_t sub_59ABC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  BookEPUB::SpreadPaginationEntity v17;
  Swift::Int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BookEPUB::SpreadPaginationEntity v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *a1;
  v5 = a1[1];
  v31 = *a1;
  v32 = v5;
  v7 = &v31;
  result = (unint64_t)BookPaginationEntity.spread(containing:)(*(BookEPUB::PageLocation *)(&a2 - 1));
  v9 = v36;
  if (!v36)
    goto LABEL_11;
  v11 = v37;
  v10 = v38;
  if (a2 == -1)
  {
    v22 = swift_bridgeObjectRetain(v36);
    sub_5B864(v22, v11, v10);
    v23 = sub_572E0(v9);
    swift_bridgeObjectRelease(v9);
    sub_5B838(v9, v11, v10);
    v31 = (uint64_t)v23;
    v36 = v6;
    v37 = v5;
    v24 = sub_319AC(&qword_3B7308);
    v25 = sub_3DCC0((unint64_t *)&unk_3BBFE0, &qword_3B7308, (uint64_t)&protocol conformance descriptor for [A]);
    v26 = sub_5B890();
    RandomAccessCollection<>.element(_:offsetBy:)(v34, &v36, -1, v24, v25, v26);
    swift_bridgeObjectRelease(v23);
    if ((v35 & 1) == 0)
      goto LABEL_12;
    v31 = v9;
    v32 = v11;
    v33 = v10;
    v27.columns._rawValue = &v31;
    v27.configuration._countAndFlagsBits = -1;
    BookPaginationEntity.spread(_:offsetBy:)(v27, v28);
    result = sub_5B838(v9, v11, v10);
    v19 = v36;
    if (v36)
    {
      v21 = v37;
      v20 = v38;
      v31 = v36;
      v32 = v37;
      v33 = v38;
      SpreadPaginationEntity.lastLocation.getter(a3);
      return sub_5B838(v19, v21, v20);
    }
LABEL_11:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  if (a2 != 1)
  {
    if (a2)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000007ALL, 0x80000000002C71A0, "BookEPUB/BookContentAccessoryController.swift", 45, 2, 273, 0);
      __break(1u);
      return result;
    }
    result = sub_5B838(v36, v37, v38);
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v5;
    goto LABEL_15;
  }
  sub_5B864(v36, v37, v38);
  v12 = swift_bridgeObjectRetain(v9);
  v13 = sub_572E0(v12);
  swift_bridgeObjectRelease(v9);
  sub_5B838(v9, v11, v10);
  v31 = (uint64_t)v13;
  v36 = v6;
  v37 = v5;
  v14 = sub_319AC(&qword_3B7308);
  v15 = sub_3DCC0((unint64_t *)&unk_3BBFE0, &qword_3B7308, (uint64_t)&protocol conformance descriptor for [A]);
  v16 = sub_5B890();
  RandomAccessCollection<>.element(_:offsetBy:)(v34, &v36, 1, v14, v15, v16);
  swift_bridgeObjectRelease(v13);
  if ((v35 & 1) == 0)
  {
LABEL_12:
    v30 = v34[0];
    v29 = v34[1];
    result = sub_5B838(v9, v11, v10);
    *(_QWORD *)a3 = v30;
    *(_QWORD *)(a3 + 8) = v29;
LABEL_15:
    *(_BYTE *)(a3 + 16) = 0;
    return result;
  }
  v31 = v9;
  v32 = v11;
  v33 = v10;
  v17.columns._rawValue = &v31;
  v17.configuration._countAndFlagsBits = 1;
  BookPaginationEntity.spread(_:offsetBy:)(v17, v18);
  result = sub_5B838(v9, v11, v10);
  v19 = v36;
  if (v36)
  {
    v21 = v37;
    v20 = v38;
    v31 = v36;
    v32 = v37;
    v33 = v38;
    SpreadPaginationEntity.firstLocation.getter(a3);
    return sub_5B838(v19, v21, v20);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_59DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[3];
  _QWORD v12[3];

  v1 = sub_319AC(&qword_3B7238);
  v2 = swift_allocObject(v1, 80);
  *(_OWORD *)(v2 + 16) = xmmword_2E6940;
  sub_5B70C(v0, (uint64_t)v11, &qword_3B7228);
  sub_5B70C((uint64_t)v11, (uint64_t)v12, &qword_3B7228);
  v3 = v12[1];
  if (!v12[0])
    v3 = 0;
  *(_QWORD *)(v2 + 32) = v12[0];
  *(_QWORD *)(v2 + 40) = v3;
  sub_5B70C(v0 + 24, (uint64_t)v10, &qword_3B7230);
  sub_5B70C((uint64_t)v10, v2 + 48, &qword_3B7230);
  sub_5B70C(v0 + 40, (uint64_t)v9, &qword_3B7230);
  sub_5B70C((uint64_t)v9, v2 + 64, &qword_3B7230);
  sub_5B5BC(v11);
  sub_5B5BC(v10);
  sub_5B5BC(v9);
  v4 = sub_319AC(&qword_3B7240);
  v5 = sub_319AC(&qword_3B7248);
  v6 = sub_3DCC0(&qword_3B7250, &qword_3B7240, (uint64_t)&protocol conformance descriptor for [A]);
  v7 = Sequence.compact<A>()(v4, v5, v6);
  swift_bridgeObjectRelease(v2);
  return v7;
}

_QWORD *sub_59F34@<X0>(uint64_t *a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[2];
  _QWORD v14[2];

  v3 = v1[1];
  v8 = *v1;
  v9 = v3;
  v10 = v1[2];
  v11 = *((_QWORD *)v1 + 6);
  v4 = sub_59DDC();
  v6 = v5;
  sub_5B70C((uint64_t)&v8, (uint64_t)v12, &qword_3B7228);
  sub_5B594(v12);
  sub_5B70C((uint64_t)&v9 + 8, (uint64_t)v13, &qword_3B7230);
  sub_5B594(v13);
  sub_5B70C((uint64_t)&v10 + 8, (uint64_t)v14, &qword_3B7230);
  result = sub_5B594(v14);
  *a1 = v4;
  a1[1] = v6;
  return result;
}

uint64_t sub_59FEC()
{
  return 2;
}

uint64_t sub_59FF4()
{
  __int128 *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD v9[3];
  _QWORD v10[2];
  _QWORD v11[2];

  v1 = v0[1];
  v5 = *v0;
  v6 = v1;
  v7 = v0[2];
  v8 = *((_QWORD *)v0 + 6);
  sub_5A0FC((uint64_t)&v5);
  v3 = v2;
  sub_5B70C((uint64_t)&v5, (uint64_t)v9, &qword_3B7228);
  sub_5B594(v9);
  sub_5B70C((uint64_t)&v6 + 8, (uint64_t)v10, &qword_3B7230);
  sub_5B594(v10);
  sub_5B70C((uint64_t)&v7 + 8, (uint64_t)v11, &qword_3B7230);
  sub_5B594(v11);
  return v3;
}

void sub_5A09C(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  sub_5A328(a1, a2, a3);
}

uint64_t sub_5A0DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

void sub_5A0FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  BOOL v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[3];

  sub_5B70C(a1, (uint64_t)v30, &qword_3B7228);
  sub_5B70C(a1 + 24, (uint64_t)v29, &qword_3B7230);
  sub_5B70C(a1 + 40, (uint64_t)v28, &qword_3B7230);
  sub_5B5BC(v30);
  sub_5B5BC(v29);
  sub_5B5BC(v28);
  v2 = sub_59DDC();
  v4 = v3;
  sub_5B594(v30);
  sub_5B594(v29);
  sub_5B594(v28);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = _swiftEmptyArrayStorage;
  v7 = v5 - v4;
  if (v5 != v4)
  {
    if (v5 <= v4)
      goto LABEL_34;
    if (v4 < 0)
    {
LABEL_35:
      __break(1u);
    }
    else if (v5)
    {
      v8 = 0;
      v9 = (_QWORD *)(v2 + 16 * v4 + 32);
      v10 = &_swiftEmptyArrayStorage[4];
      while (1)
      {
        v27 = *(_OWORD *)v9;
        if (v8)
        {
          swift_unknownObjectRetain(*v9);
          v11 = __OFSUB__(v8--, 1);
          if (v11)
            goto LABEL_32;
        }
        else
        {
          v12 = v6[3];
          if ((uint64_t)((v12 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_33;
          v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
          if (v13 <= 1)
            v14 = 1;
          else
            v14 = v13;
          v15 = sub_319AC(&qword_3B7258);
          v16 = (_QWORD *)swift_allocObject(v15, 16 * v14 + 32);
          v17 = j__malloc_size(v16);
          v18 = v17 - 32;
          if (v17 < 32)
            v18 = v17 - 17;
          v19 = v18 >> 4;
          v16[2] = v14;
          v16[3] = 2 * (v18 >> 4);
          v20 = v16 + 4;
          v21 = v6[3] >> 1;
          v10 = &v16[2 * v21 + 4];
          v22 = (v19 & 0x7FFFFFFFFFFFFFFFLL) - v21;
          if (v6[2])
          {
            if (v16 != v6 || v20 >= &v6[2 * v21 + 4])
              memmove(v20, v6 + 4, 16 * v21);
            swift_unknownObjectRetain(v27);
            v6[2] = 0;
          }
          else
          {
            swift_unknownObjectRetain(v27);
          }
          swift_release();
          v6 = v16;
          v11 = __OFSUB__(v22, 1);
          v8 = v22 - 1;
          if (v11)
          {
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
            goto LABEL_35;
          }
        }
        *v10++ = v27;
        v9 += 2;
        if (!--v7)
          goto LABEL_28;
      }
    }
    __break(1u);
    goto LABEL_37;
  }
  v8 = 0;
LABEL_28:
  swift_bridgeObjectRelease(v2);
  v24 = v6[3];
  if (v24 >= 2)
  {
    v25 = v24 >> 1;
    v11 = __OFSUB__(v25, v8);
    v26 = v25 - v8;
    if (!v11)
    {
      v6[2] = v26;
      return;
    }
LABEL_37:
    __break(1u);
  }
}

void sub_5A328(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD v21[2];
  _QWORD v22[3];

  v7 = sub_59DDC();
  v9 = v8;
  sub_5B70C(v3, (uint64_t)v22, &qword_3B7228);
  sub_5B594(v22);
  sub_5B70C(v3 + 24, (uint64_t)v21, &qword_3B7230);
  sub_5B594(v21);
  sub_5B70C(v3 + 40, (uint64_t)v20, &qword_3B7230);
  sub_5B594(v20);
  if (!a2 || !a3)
    goto LABEL_17;
  if (a3 < 0)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v10 = *(_QWORD *)(v7 + 16);
  if (v10 == v9)
    goto LABEL_17;
  if (v10 > v9)
  {
    v11 = v9 + 1;
    v12 = *(_OWORD *)(v7 + 16 * v9 + 32);
    *a2 = v12;
    v13 = v12;
    if (a3 == 1)
    {
LABEL_16:
      swift_unknownObjectRetain(v13);
      v9 = v11;
LABEL_17:
      *a1 = v7;
      a1[1] = v9;
      return;
    }
    if (v11 == v10)
    {
      v11 = v10;
      goto LABEL_16;
    }
    v18 = v12;
    v14 = 0;
    v15 = a2 + 1;
    while (v9 + v14 + 1 < *(_QWORD *)(v7 + 16))
    {
      v16 = *(_OWORD *)(v7 + 16 * v9 + 48 + 16 * v14);
      v15[v14] = v16;
      if (a3 - 2 == v14)
      {
        v17 = v18;
        v19 = v16;
        swift_unknownObjectRetain(v17);
        v13 = v19;
        v11 = v9 + v14 + 2;
        goto LABEL_16;
      }
      swift_unknownObjectRetain(v16);
      ++v14;
      if (!(v9 - v10 + 1 + v14))
      {
        v11 = v10;
        v13 = v18;
        goto LABEL_16;
      }
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_20:
  __break(1u);
}

void sub_5A4C8(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v5 = *v3;
  v4 = v3[1];
  v7 = v3[2];
  v6 = v3[3];
  v8 = v3[4];
  if (!a2)
  {
    *a1 = v5;
    a1[1] = v4;
    a1[2] = v7;
    a1[3] = v6;
    a1[5] = 0;
    a1[6] = 0;
    a1[4] = v8;
    return;
  }
  v9 = a3;
  if (!a3)
  {
    v25 = 0;
    v24 = 0;
    goto LABEL_23;
  }
  if (a3 < 0)
    goto LABEL_52;
  v10 = *(_QWORD *)(v5 + 16);
  v11 = v7 - 1;
  v12 = __OFSUB__(v7, 1);
  v43 = v3[3];
  v44 = v3[4];
  v41 = a1;
  v42 = v3[1];
  if (v10)
  {
    if (v12)
    {
LABEL_53:
      __break(1u);
      goto LABEL_54;
    }
    v13 = v5 + 24 * v10;
    v48 = (_QWORD *)(v13 + 16);
    v49 = (_QWORD *)(v13 + 24);
    v14 = *(_QWORD *)(v13 + 24);
    v15 = __OFADD__(*v48, v14);
    v16 = *v48 + v14;
    if (v15)
    {
LABEL_44:
      __break(1u);
    }
    else
    {
      v15 = __OFADD__(v11, v16);
      v17 = v11 + v16;
      if (!v15)
      {
        v15 = __OFADD__(v17, v7);
        v18 = v17 + v7;
        if (!v15)
        {
          v15 = __OFSUB__(v18, 1);
          v19 = v18 - 1;
          if (!v15)
          {
            if (!v7)
            {
LABEL_54:
              __break(1u);
              return;
            }
            if (v19 == 0x8000000000000000 && v7 == -1)
              goto LABEL_51;
            sub_13AE64(0, 0, &v50);
            if (!__OFSUB__(v7, v11))
            {
              v23 = v50;
              v22 = v51;
              v46 = v52;
              v24 = sub_13BE64(1, 0, v5);
              *a2 = v23;
              a2[1] = v22;
              a2[2] = v46;
              if (v9 == 1)
              {
                v25 = 1;
                v6 = v43;
                v8 = v44;
                a1 = v41;
                v4 = v42;
LABEL_23:
                *a1 = v5;
                a1[1] = v4;
                a1[2] = v7;
                a1[3] = v6;
                a1[4] = v8;
                a1[5] = v25;
                a1[6] = v24;
                return;
              }
              v45 = v7 - 1;
              v47 = v7;
              v27 = a2 + 5;
              v26 = 1;
              while (v10 <= *(_QWORD *)(v5 + 16))
              {
                v28 = *v48 + *v49;
                v7 = v47;
                if (__OFADD__(*v48, *v49))
                  goto LABEL_44;
                v15 = __OFADD__(v45, v28);
                v29 = v45 + v28;
                if (v15)
                  goto LABEL_45;
                v15 = __OFADD__(v29, v47);
                v30 = v29 + v47;
                if (v15)
                  goto LABEL_46;
                v15 = __OFSUB__(v30, 1);
                v31 = v30 - 1;
                if (v15)
                  goto LABEL_47;
                if (v31 == 0x8000000000000000 && v47 == -1)
                  goto LABEL_51;
                if (v26 == v31 / v47 && v24 == v10)
                  goto LABEL_25;
                v34 = v26 + 1;
                sub_13AE64(v26, v24, &v50);
                v35 = v34 * v47;
                if ((unsigned __int128)(v34 * (__int128)v47) >> 64 != (v34 * v47) >> 63)
                  goto LABEL_50;
                if (__OFSUB__(v35, v45))
                  goto LABEL_48;
                v36 = v10;
                v37 = v9;
                v38 = v50;
                v39 = v51;
                v40 = v52;
                v24 = sub_13BE64(v35 - v45, v24, v5);
                *(v27 - 2) = v38;
                *(v27 - 1) = v39;
                v9 = v37;
                v10 = v36;
                *v27 = v40;
                v27 += 3;
                v26 = v34;
                if (v9 == v34)
                {
                  v25 = v9;
                  v6 = v43;
                  v8 = v44;
                  a1 = v41;
                  v4 = v42;
                  v7 = v47;
                  goto LABEL_23;
                }
              }
              goto LABEL_49;
            }
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
            goto LABEL_53;
          }
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v26 = 0;
LABEL_25:
  *v41 = v5;
  v41[1] = v42;
  v41[2] = v7;
  v41[3] = v43;
  v41[4] = v44;
  v41[5] = v26;
  v41[6] = v10;
}

uint64_t sub_5A754(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      swift_retain(v20);
      goto LABEL_38;
    }
    ++v11;
    result = swift_retain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_5A94C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v16);
    v11[1] = v20;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v20);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_5AB50(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_OWORD *)(*(_QWORD *)(a4 + 56) + 16 * v12);
    *(_QWORD *)a2 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    *(_OWORD *)(a2 + 8) = v13;
    a2 += 24;
    if (v9 == a3)
      goto LABEL_35;
  }
  v14 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v10)
    goto LABEL_30;
  v15 = *(_QWORD *)(v4 + 8 * v14);
  if (v15)
    goto LABEL_19;
  v8 += 2;
  if (v14 + 1 >= v10)
  {
    v7 = 0;
    v8 = v14;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v4 + 8 * v8);
  if (v15)
  {
LABEL_15:
    v14 = v8;
LABEL_19:
    v17 = __clz(__rbit64(v15));
    v7 = (v15 - 1) & v15;
    v12 = v17 + (v14 << 6);
    v8 = v14;
    goto LABEL_8;
  }
  v16 = v14 + 2;
  if (v14 + 2 >= v10)
    goto LABEL_30;
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
LABEL_18:
    v14 = v16;
    goto LABEL_19;
  }
  v8 = v14 + 3;
  if (v14 + 3 >= v10)
  {
    v7 = 0;
    v8 = v14 + 2;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v4 + 8 * v8);
  if (v15)
    goto LABEL_15;
  v16 = v14 + 4;
  if (v14 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
    goto LABEL_18;
  while (1)
  {
    v14 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v14 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

_QWORD *sub_5ACF4(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_5AE88(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, __int16 a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a1;
  v24 = a2 + 56;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(a2 + 56);
  v25 = (unint64_t)(v13 + 63) >> 6;
  v16 = a6 & 0x101;
  swift_bridgeObjectRetain(a2);
  v17 = 0;
  while (v15)
  {
    v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v19 = v18 | (v17 << 6);
LABEL_5:
    v26 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v19);
    sub_585F4((uint64_t)&v27, &v26, a3, a4, a5, v16, a7);
    if (v7)
    {
      v23 = v27;
      swift_release();
      swift_bridgeObjectRelease(v23);
      return;
    }
  }
  if (__OFADD__(v17++, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v17 >= v25)
    goto LABEL_25;
  v21 = *(_QWORD *)(v24 + 8 * v17);
  if (v21)
  {
LABEL_19:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_5;
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v25)
    goto LABEL_25;
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v17 + 2;
  if (v17 + 2 >= v25)
    goto LABEL_25;
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v17 + 3;
  if (v17 + 3 >= v25)
    goto LABEL_25;
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v17 + 4;
  if (v17 + 4 >= v25)
  {
LABEL_25:
    swift_release();
    return;
  }
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
LABEL_18:
    v17 = v22;
    goto LABEL_19;
  }
  while (1)
  {
    v17 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v17 >= v25)
      goto LABEL_25;
    v21 = *(_QWORD *)(v24 + 8 * v17);
    ++v22;
    if (v21)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
}

_QWORD *sub_5B084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11)
{
  a9[3] = 0;
  swift_unknownObjectWeakInit(a9 + 2, 0);
  swift_weakInit(a9 + 4, 0);
  a9[6] = 0;
  swift_unknownObjectWeakInit(a9 + 5, 0);
  a9[8] = 0;
  swift_unknownObjectWeakInit(a9 + 7, 0);
  a9[10] = 0;
  swift_unknownObjectWeakInit(a9 + 9, 0);
  a9[11] = &_swiftEmptySetSingleton;
  a9[13] = sub_3D424((uint64_t)_swiftEmptyArrayStorage);
  a9[3] = a2;
  swift_unknownObjectWeakAssign(a9 + 2, a1);
  swift_weakAssign(a9 + 4, a3);
  a9[6] = a11;
  swift_unknownObjectWeakAssign(a9 + 5, a4);
  a9[8] = a6;
  swift_unknownObjectWeakAssign(a9 + 7, a5);
  a9[10] = a8;
  swift_unknownObjectWeakAssign(a9 + 9, a7);
  a9[12] = sub_3D324((uint64_t)_swiftEmptyArrayStorage);
  sub_575A0();
  return a9;
}

_QWORD *sub_5B1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19;
  _QWORD *v21;

  v19 = type metadata accessor for BookContentAccessoryController();
  v21 = (_QWORD *)swift_allocObject(v19, 112, 7);
  return sub_5B084(a1, a2, a3, a4, a5, a6, a7, a8, v21, a10, a11);
}

uint64_t sub_5B25C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result != 1)
  {
    swift_unknownObjectRelease(result);
    swift_unknownObjectRelease(a4);
    return swift_unknownObjectRelease(a6);
  }
  return result;
}

uint64_t type metadata accessor for BookContentAccessoryController()
{
  return objc_opt_self(_TtC8BookEPUB30BookContentAccessoryController);
}

uint64_t method lookup function for BookContentAccessoryController(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookContentAccessoryController);
}

uint64_t dispatch thunk of BookContentAccessoryController.__allocating_init(currentLocationProvider:contentLayoutController:paginatingService:accessoryAdornmentFactory:selectionHighlightController:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t dispatch thunk of BookContentAccessoryController.highlightsController(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t destroy for BookContentAccessoryController.ControllerSet(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  swift_unknownObjectRelease(a1[3]);
  return swift_unknownObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for BookContentAccessoryController.ControllerSet(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v6;
  __int128 v7;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 40) = v7;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for BookContentAccessoryController.ControllerSet(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v4 = *a1;
  v5 = swift_unknownObjectRetain(*(_QWORD *)a2);
  v13 = *(_OWORD *)(a2 + 8);
  *a1 = v5;
  swift_unknownObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = v13;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = a1[3];
  a1[3] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v8);
  a1[4] = v7;
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = a1[5];
  a1[5] = v9;
  swift_unknownObjectRetain(v9);
  swift_unknownObjectRelease(v11);
  a1[6] = v10;
  return a1;
}

__n128 initializeWithTake for BookThemeEntity.Overrides(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for BookContentAccessoryController.ControllerSet(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  swift_unknownObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  swift_unknownObjectRelease(v4);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_unknownObjectRelease(v7);
  *(_QWORD *)(a1 + 48) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for BookContentAccessoryController.ControllerSet(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BookContentAccessoryController.ControllerSet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookContentAccessoryController.ControllerSet()
{
  return &type metadata for BookContentAccessoryController.ControllerSet;
}

ValueMetadata *type metadata accessor for BookContentAccessoryController.State()
{
  return &type metadata for BookContentAccessoryController.State;
}

uint64_t sub_5B568()
{
  return sub_3DCC0(&qword_3B7218, &qword_3B7220, (uint64_t)&protocol conformance descriptor for IndexingIterator<A>);
}

_QWORD *sub_5B594(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  return a1;
}

_QWORD *sub_5B5BC(_QWORD *a1)
{
  swift_unknownObjectRetain(*a1);
  return a1;
}

unint64_t sub_5B5E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B96E0;
  if (!qword_3B96E0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B96E0);
  }
  return result;
}

uint64_t sub_5B620()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_5B644(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v4;

  return sub_57FF8(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_5B64C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_5B670@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v2 + 16))(a1, a1 + 40, *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57));
  *a2 = result;
  return result;
}

uint64_t sub_5B6A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_5B6C8(uint64_t *a1)
{
  uint64_t v1;

  return sub_5892C(a1, v1);
}

uint64_t sub_5B6D0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for BookContentAdornmentState(a2, a1);
  return a2;
}

uint64_t sub_5B70C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_319AC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_5B750(uint64_t a1)
{
  destroy for BookContentAdornmentState(a1);
  return a1;
}

uint64_t *sub_5B784(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  swift_unknownObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v2);
  swift_unknownObjectRetain(v3);
  return a1;
}

_QWORD *sub_5B7C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[3];
  swift_bridgeObjectRelease(*a1);
  swift_unknownObjectRelease(v2);
  swift_unknownObjectRelease(v3);
  return a1;
}

_QWORD *sub_5B810(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_5B838(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_5B864(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

unint64_t sub_5B890()
{
  unint64_t result;

  result = qword_3B7310;
  if (!qword_3B7310)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageLocation, &type metadata for PageLocation);
    atomic_store(result, (unint64_t *)&qword_3B7310);
  }
  return result;
}

uint64_t Color.init(hex:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void (*v15)(char *, uint64_t);
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *i;
  unint64_t v37;
  char v38;
  uint64_t v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 v42;
  BOOL v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 v47;
  uint64_t *v48;
  int v49;
  unsigned __int8 v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  char *v59;
  char v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[2];
  uint64_t v66;
  uint64_t v67;

  v4 = type metadata accessor for Color.RGBColorSpace(0);
  v63 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  __chkstk_darwin(v4);
  v62 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CharacterSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = a1;
  v67 = a2;
  static CharacterSet.whitespacesAndNewlines.getter(v8);
  v11 = sub_5C170();
  v12 = StringProtocol.trimmingCharacters(in:)(v10, &type metadata for String, v11);
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v10, v6);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRetain(v14);
  v16 = sub_5C514(1uLL, v12, v14);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_bridgeObjectRelease(v14);
  v23 = static String._fromSubstring(_:)(v16, v18, v20, v22);
  v25 = v24;
  v26 = swift_bridgeObjectRelease(v22);
  v66 = v23;
  v67 = v25;
  static CharacterSet.whitespacesAndNewlines.getter(v26);
  v27 = StringProtocol.trimmingCharacters(in:)(v10, &type metadata for String, v11);
  v29 = v28;
  v15(v10, v6);
  swift_bridgeObjectRelease(v67);
  v66 = v12;
  v67 = v14;
  v65[0] = 35;
  v65[1] = 0xE100000000000000;
  v30 = sub_5C5B0();
  v31 = sub_5C5F4();
  if ((BidirectionalCollection<>.starts<A>(with:)(v65, &type metadata for String, &type metadata for String, v30, v31) & 1) != 0)
  {
    result = swift_bridgeObjectRelease(v14);
  }
  else
  {
    result = swift_bridgeObjectRelease(v29);
    v27 = v12;
    v29 = v14;
  }
  v33 = HIBYTE(v29) & 0xF;
  v34 = v27 & 0xFFFFFFFFFFFFLL;
  if ((v29 & 0x2000000000000000) != 0)
    v35 = HIBYTE(v29) & 0xF;
  else
    v35 = v27 & 0xFFFFFFFFFFFFLL;
  if (v35)
  {
    if ((v29 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v29);
      v37 = (unint64_t)sub_5C1B4(v27, v29, 16);
      v61 = v60;
      swift_bridgeObjectRelease(v29);
      if ((v61 & 1) == 0)
        goto LABEL_52;
    }
    else
    {
      if ((v29 & 0x2000000000000000) != 0)
      {
        v66 = v27;
        v67 = v29 & 0xFFFFFFFFFFFFFFLL;
        if (v27 == 43)
        {
          if (v33)
          {
            v44 = v33 - 1;
            if (v44)
            {
              v37 = 0;
              v45 = (unsigned __int8 *)&v66 + 1;
              while (1)
              {
                v46 = *v45;
                v47 = v46 - 48;
                if ((v46 - 48) >= 0xA)
                {
                  if ((v46 - 65) < 6)
                  {
                    v47 = v46 - 55;
                  }
                  else
                  {
                    if ((v46 - 97) > 5)
                      goto LABEL_50;
                    v47 = v46 - 87;
                  }
                }
                if (v37 >> 60)
                  break;
                v37 = 16 * v37 + v47;
                ++v45;
                if (!--v44)
                  goto LABEL_52;
              }
            }
            goto LABEL_50;
          }
        }
        else
        {
          if (v27 != 45)
          {
            if (v33)
            {
              v37 = 0;
              v48 = &v66;
              while (1)
              {
                v49 = *(unsigned __int8 *)v48;
                v50 = v49 - 48;
                if ((v49 - 48) >= 0xA)
                {
                  if ((v49 - 65) < 6)
                  {
                    v50 = v49 - 55;
                  }
                  else
                  {
                    if ((v49 - 97) > 5)
                      goto LABEL_50;
                    v50 = v49 - 87;
                  }
                }
                if (v37 >> 60)
                  break;
                v37 = 16 * v37 + v50;
                v48 = (uint64_t *)((char *)v48 + 1);
                if (!--v33)
                  goto LABEL_52;
              }
            }
            goto LABEL_50;
          }
          if (v33)
          {
            v39 = v33 - 1;
            if (v39)
            {
              v37 = 0;
              v40 = (unsigned __int8 *)&v66 + 1;
              while (1)
              {
                v41 = *v40;
                v42 = v41 - 48;
                if ((v41 - 48) >= 0xA)
                {
                  if ((v41 - 65) < 6)
                  {
                    v42 = v41 - 55;
                  }
                  else
                  {
                    if ((v41 - 97) > 5)
                      goto LABEL_50;
                    v42 = v41 - 87;
                  }
                }
                if (v37 >> 60)
                  break;
                v43 = 16 * v37 >= v42;
                v37 = 16 * v37 - v42;
                if (!v43)
                  break;
                ++v40;
                if (!--v39)
                  goto LABEL_52;
              }
            }
            goto LABEL_50;
          }
          __break(1u);
        }
        __break(1u);
        return result;
      }
      if ((v27 & 0x1000000000000000) == 0)
        goto LABEL_62;
      for (i = (unsigned __int8 *)((v29 & 0xFFFFFFFFFFFFFFFLL) + 32);
            ;
            i = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v27, v29))
      {
        v37 = (unint64_t)sub_5C298(i, v34, 16);
        if ((v38 & 1) != 0)
          break;
LABEL_52:
        if ((v37 & 0x8000000000000000) == 0)
          goto LABEL_53;
        __break(1u);
LABEL_62:
        ;
      }
    }
  }
LABEL_50:
  LODWORD(v37) = 0;
LABEL_53:
  v51 = (double)BYTE2(v37) / 255.0;
  v52 = (double)BYTE1(v37) / 255.0;
  v66 = v27;
  v67 = v29;
  v53 = (double)v37 / 255.0;
  v54 = String.init<A>(_:)(&v66, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v56 = v55;
  v57 = String.count.getter(v54);
  swift_bridgeObjectRelease(v56);
  if (v57 == 8)
    v58 = (double)v37 / 255.0;
  else
    v58 = 1.0;
  if (v57 == 8)
  {
    v53 = (double)BYTE1(v37) / 255.0;
    v52 = (double)BYTE2(v37) / 255.0;
    v51 = (double)BYTE3(v37) / 255.0;
  }
  v59 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v62, enum case for Color.RGBColorSpace.sRGB(_:), v64);
  return Color.init(_:red:green:blue:opacity:)(v59, v51, v52, v53, v58);
}

Swift::String __swiftcall Color.toHex()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  double v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  Swift::String result;

  v1 = v0;
  sub_5C638();
  v2 = swift_retain(v1);
  v3 = (void *)UIColor.init(_:)(v2);
  v4 = objc_msgSend(v3, "CGColor");
  v5 = CGColorRef.components.getter();

  if (!v5)
    goto LABEL_4;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 >= 3)
  {
    v9 = *(double *)(v5 + 32);
    v10 = *(double *)(v5 + 40);
    v11 = *(double *)(v5 + 48);
    if (v6 == 3)
    {
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v12 = *(double *)(v5 + 56);
      swift_bridgeObjectRelease(v5);
      v13 = v12;
      if (v13 != 1.0)
      {
        v21 = sub_319AC(&qword_3B66F8);
        v15 = swift_allocObject(v21, 192, 7);
        *(_OWORD *)(v15 + 16) = xmmword_2E6930;
        v22 = lroundf(v9 * 255.0);
        *(_QWORD *)(v15 + 56) = &type metadata for Int;
        *(_QWORD *)(v15 + 64) = &protocol witness table for Int;
        *(_QWORD *)(v15 + 32) = v22;
        v23 = lroundf(v10 * 255.0);
        *(_QWORD *)(v15 + 96) = &type metadata for Int;
        *(_QWORD *)(v15 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v15 + 72) = v23;
        v24 = lroundf(v11 * 255.0);
        *(_QWORD *)(v15 + 136) = &type metadata for Int;
        *(_QWORD *)(v15 + 144) = &protocol witness table for Int;
        *(_QWORD *)(v15 + 112) = v24;
        v25 = lroundf(v13 * 255.0);
        *(_QWORD *)(v15 + 176) = &type metadata for Int;
        *(_QWORD *)(v15 + 184) = &protocol witness table for Int;
        *(_QWORD *)(v15 + 152) = v25;
        v20 = 0x80000000002C7220;
        v19 = 0xD000000000000014;
        goto LABEL_10;
      }
    }
    v14 = sub_319AC(&qword_3B66F8);
    v15 = swift_allocObject(v14, 152, 7);
    *(_OWORD *)(v15 + 16) = xmmword_2E6940;
    v16 = lroundf(v9 * 255.0);
    *(_QWORD *)(v15 + 56) = &type metadata for Int;
    *(_QWORD *)(v15 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v15 + 32) = v16;
    v17 = lroundf(v10 * 255.0);
    *(_QWORD *)(v15 + 96) = &type metadata for Int;
    *(_QWORD *)(v15 + 104) = &protocol witness table for Int;
    *(_QWORD *)(v15 + 72) = v17;
    v18 = lroundf(v11 * 255.0);
    *(_QWORD *)(v15 + 136) = &type metadata for Int;
    *(_QWORD *)(v15 + 144) = &protocol witness table for Int;
    *(_QWORD *)(v15 + 112) = v18;
    v19 = 0x323025586C323025;
    v20 = 0xEF586C323025586CLL;
LABEL_10:
    v7 = String.init(format:_:)(v19, v20, v15);
    v8 = v26;

    goto LABEL_11;
  }
  swift_bridgeObjectRelease(v5);
LABEL_4:

  v7 = 0;
  v8 = 0xE000000000000000;
LABEL_11:
  v27 = v7;
  v28 = (void *)v8;
  result._object = v28;
  result._countAndFlagsBits = v27;
  return result;
}

uint64_t Color.init(r:g:b:alpha:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;

  v8 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v11 + 104))(v10, enum case for Color.RGBColorSpace.sRGB(_:));
  return Color.init(_:red:green:blue:opacity:)(v10, (double)a1 / 255.0, (double)a2 / 255.0, (double)a3 / 255.0, a4);
}

uint64_t Color.init(rgbaHex:)(int a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v5 + 104))(v4, enum case for Color.RGBColorSpace.sRGB(_:));
  return Color.init(_:red:green:blue:opacity:)(v4, (double)HIBYTE(a1) / 255.0, (double)BYTE2(a1) / 255.0, (double)BYTE1(a1) / 255.0, (double)a1 / 255.0);
}

unint64_t sub_5C170()
{
  unint64_t result;

  result = qword_3B9370;
  if (!qword_3B9370)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_3B9370);
  }
  return result;
}

unsigned __int8 *sub_5C1B4(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_4694C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_5C298(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_5C298(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 v15;
  BOOL v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 *v21;
  unsigned int v22;
  char v23;
  unint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unint64_t v29;
  unsigned int v30;
  char v31;
  unint64_t v32;
  unsigned __int8 v33;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v14 = v9 * a3;
              v15 = v11 + v12;
              v16 = v14 >= v15;
              v9 = v14 - v15;
              if (!v16)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      v26 = a3 + 48;
      v27 = a3 + 55;
      v28 = a3 + 87;
      if (a3 > 10)
      {
        v26 = 58;
      }
      else
      {
        v28 = 97;
        v27 = 65;
      }
      if (result)
      {
        v29 = 0;
        do
        {
          v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              v13 = 0;
              if (v30 < 0x61 || v30 >= v28)
                return (unsigned __int8 *)v13;
              v31 = -87;
            }
            else
            {
              v31 = -55;
            }
          }
          else
          {
            v31 = -48;
          }
          if (!is_mul_ok(v29, a3))
            return 0;
          v32 = v29 * a3;
          v33 = v30 + v31;
          v16 = __CFADD__(v32, v33);
          v29 = v32 + v33;
          if (v16)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  v17 = a2 - 1;
  if (a2 == 1)
    return 0;
  v18 = a3 + 48;
  v19 = a3 + 55;
  v20 = a3 + 87;
  if (a3 > 10)
  {
    v18 = 58;
  }
  else
  {
    v20 = 97;
    v19 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v21 = result + 1;
  do
  {
    v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        v13 = 0;
        if (v22 < 0x61 || v22 >= v20)
          return (unsigned __int8 *)v13;
        v23 = -87;
      }
      else
      {
        v23 = -55;
      }
    }
    else
    {
      v23 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v24 = v9 * a3;
    v25 = v22 + v23;
    v16 = __CFADD__(v24, v25);
    v9 = v24 + v25;
    if (v16)
      return 0;
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

unint64_t sub_5C514(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v5, a2, a3);
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t sub_5C5B0()
{
  unint64_t result;

  result = qword_3B7318;
  if (!qword_3B7318)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_3B7318);
  }
  return result;
}

unint64_t sub_5C5F4()
{
  unint64_t result;

  result = qword_3B7320;
  if (!qword_3B7320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_3B7320);
  }
  return result;
}

unint64_t sub_5C638()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B7328;
  if (!qword_3B7328)
  {
    v1 = objc_opt_self(UIColor);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_3B7328);
  }
  return result;
}

void sub_5C674(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v3 = a1;
    v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v5 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
      goto LABEL_4;
    }
  }
  if (v2 < 0)
    v16 = v2;
  else
    v16 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v5 = _CocoaArrayWrapper.endIndex.getter(v16);
  swift_bridgeObjectRelease(v2);
LABEL_4:
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  if (v5 < 0)
    v6 = v3;
  if (v3)
    v7 = v6;
  else
    v7 = 0;
  if (v5 < v7)
  {
    __break(1u);
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v4)
  {
    if (v2 < 0)
      v9 = v2;
    else
      v9 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v8 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
  }
  if (v8 < v7)
    goto LABEL_45;
  if (v7 < 0)
  {
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v4)
  {
    if (v2 < 0)
      v11 = v2;
    else
      v11 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v10 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    v10 = *(_QWORD *)((char *)&dword_10 + (v2 & 0xFFFFFFFFFFFFF8));
  }
  if (v10 < v5)
    goto LABEL_47;
  if ((v2 & 0xC000000000000001) != 0 && v7 != v5)
  {
    if (v7 < (unint64_t)v5)
    {
      type metadata accessor for DocumentPaginationEntity(0);
      v12 = v7;
      do
      {
        v13 = v12 + 1;
        _ArrayBuffer._typeCheckSlowPath(_:)(v12);
        v12 = v13;
      }
      while (v5 != v13);
      goto LABEL_33;
    }
LABEL_48:
    __break(1u);
    return;
  }
LABEL_33:
  if (v4)
  {
    if (v2 < 0)
      v14 = v2;
    else
      v14 = v2 & 0xFFFFFFFFFFFFFF8;
    v15 = swift_bridgeObjectRetain(v2);
    _CocoaArrayWrapper.subscript.getter(v7, v5, v14, v15);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    swift_bridgeObjectRetain(v2);
  }
}

uint64_t ElementPaginationEntity.uniqueIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_5D920();
  swift_bridgeObjectRetain(v1);
  return v0;
}

uint64_t ElementPaginationEntity.rects.getter()
{
  uint64_t v0;

  v0 = PaginationLayoutConfiguration.layoutMode.getter();
  return swift_bridgeObjectRetain(v0);
}

void sub_5C894()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002ELL, 0x80000000002C7270, "BookEPUB/ElementPaginationEntity.swift", 38, 2, 31, 0);
  __break(1u);
}

uint64_t sub_5C8EC()
{
  uint64_t v0;

  v0 = sub_5D8F0();
  return swift_bridgeObjectRetain(v0);
}

uint64_t sub_5C900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 40, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;
  return swift_bridgeObjectRelease(v3);
}

_QWORD *ElementPaginationEntity.__allocating_init(uniqueIdentifier:rects:pageOffsets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;

  result = (_QWORD *)swift_allocObject(v4, 48, 7);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_QWORD *ElementPaginationEntity.init(uniqueIdentifier:rects:pageOffsets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

void sub_5C9A4(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;

  v3 = *(_QWORD *)(v1 + 32);
  v4 = (double *)swift_bridgeObjectRetain(v3);
  sub_4A1C8(v4, (uint64_t)&v5);
  swift_bridgeObjectRelease(v3);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)a1 = v5;
    *(_OWORD *)(a1 + 8) = v6;
    *(_OWORD *)(a1 + 24) = v7;
  }
}

uint64_t sub_5CA08(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000000002C7320;
    if (a2 == 0x80000000002C7320)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000002C7320, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x7374636572 && a2 == 0xE500000000000000)
  {
    v6 = 0xE500000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374636572, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x7366664F65676170 && a2 == 0xEB00000000737465)
  {
    swift_bridgeObjectRelease(0xEB00000000737465);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7366664F65676170, 0xEB00000000737465, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_5CB68(char a1)
{
  if (!a1)
    return 0xD000000000000010;
  if (a1 == 1)
    return 0x7374636572;
  return 0x7366664F65676170;
}

BOOL sub_5CBC8(char *a1, char *a2)
{
  return static AnnotationEventType.== infix(_:_:)(*a1, *a2);
}

Swift::Int sub_5CBD4()
{
  unsigned __int8 *v0;

  return AnnotationEventType.hashValue.getter(*v0);
}

void sub_5CBDC(uint64_t a1)
{
  unsigned __int8 *v1;

  AnnotationEventType.hash(into:)(a1, *v1);
}

Swift::Int sub_5CBE4(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  AnnotationEventType.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_5CC20()
{
  char *v0;

  return sub_5CB68(*v0);
}

uint64_t sub_5CC28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_5CA08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_5CC4C()
{
  return 0;
}

uint64_t sub_5CC58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_5DDCC();
  *a1 = result;
  return result;
}

uint64_t sub_5CC80(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_2E6C68, a1);
  return CodingKey.description.getter(a1, WitnessTable);
}

uint64_t sub_5CCB4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_2E6C68, a1);
  return CodingKey.debugDescription.getter(a1, WitnessTable);
}

uint64_t ElementPaginationEntity.__allocating_init(from:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v6 = v4;
  v8 = type metadata accessor for ElementPaginationEntity.CodingKeys(255, *(_QWORD *)(v4 + 80), a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_2E6C68, v8);
  v31 = type metadata accessor for KeyedDecodingContainer(0, v8, WitnessTable);
  v10 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v12 = (char *)&v29 - v11;
  v13 = a1[3];
  v14 = a1[4];
  v15 = sub_472D0(a1, v13);
  v16 = v8;
  v17 = v8;
  v18 = (uint64_t)v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v16, v17, WitnessTable, v13, v14);
  if (!v5)
  {
    v19 = v10;
    LOBYTE(v33) = 0;
    v20 = v31;
    v21 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v31);
    v23 = v22;
    v24 = sub_319AC(&qword_3B7330);
    v32 = 1;
    v25 = sub_5D9FC(&qword_3B7338, (unint64_t *)&unk_3B7340, (uint64_t)&protocol conformance descriptor for <> RelativeValue<A, B>, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, v24, &v32, v20, v24, v25);
    v30 = v33;
    v26 = sub_319AC(&qword_3B7370);
    v32 = 2;
    v27 = sub_5DB20(&qword_3B7378, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, v26, &v32, v20, v26, v27);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v20);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 144))(v21, v23, v30, v33);
  }
  sub_34488(a1);
  return v18;
}

uint64_t sub_5CF68(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  char v24;
  _QWORD v25[3];
  uint64_t v26;

  v5 = v4;
  v7 = type metadata accessor for ElementPaginationEntity.CodingKeys(255, *(_QWORD *)(*v5 + 80), a3, a4);
  WitnessTable = swift_getWitnessTable(&unk_2E6C68, v7);
  v9 = type metadata accessor for KeyedEncodingContainer(0, v7, WitnessTable);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v23 - v11;
  v13 = a1[3];
  v14 = a1[4];
  sub_472D0(a1, v13);
  dispatch thunk of Encoder.container<A>(keyedBy:)(v7, v7, WitnessTable, v13, v14);
  v15 = v5[2];
  v16 = v5[3];
  LOBYTE(v25[0]) = 0;
  v17 = v23[1];
  KeyedEncodingContainer.encode(_:forKey:)(v15, v16, v25, v9);
  if (!v17)
  {
    v25[0] = v5[4];
    LOBYTE(v26) = 1;
    v18 = sub_319AC(&qword_3B7330);
    v19 = sub_5D9FC(&qword_3B7380, &qword_3B7388, (uint64_t)&protocol conformance descriptor for <> RelativeValue<A, B>, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v26, v9, v18, v19);
    swift_beginAccess(v5 + 5, v25, 0, 0);
    v26 = v5[5];
    v24 = 2;
    v20 = sub_319AC(&qword_3B7370);
    v21 = sub_5DB20(qword_3B7390, (uint64_t)&protocol witness table for Int, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v24, v9, v20, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

_QWORD *ElementPaginationEntity.deinit()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return v0;
}

uint64_t ElementPaginationEntity.__deallocating_deinit()
{
  uint64_t v0;

  ElementPaginationEntity.deinit();
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_5D1B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  uint64_t result;

  result = ElementPaginationEntity.__allocating_init(from:)(a1, a2, a3, a4);
  if (!v5)
    *a5 = result;
  return result;
}

uint64_t sub_5D1D8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_5CF68(a1, a2, a3, a4);
}

void ElementPaginationEntity.description.getter()
{
  _QWORD *v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  Swift::String v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[5];
  _BYTE v26[24];

  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(109);
  v23 = 0;
  v24 = 0xE000000000000000;
  v1._countAndFlagsBits = 15370;
  v1._object = (void *)0xE200000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = _typeName(_:qualified:)(*v0, 0);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0xD000000000000019;
  v4._object = (void *)0x80000000002C72A0;
  String.append(_:)(v4);
  v5 = v0[2];
  v6 = (void *)v0[3];
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0x636572202020200ALL;
  v8._object = (void *)0xED0000203D207374;
  String.append(_:)(v8);
  v9 = v0[4];
  swift_bridgeObjectRetain(v9);
  v10 = sub_319AC(&qword_3B6C00);
  v11._countAndFlagsBits = Array.description.getter(v9, v10);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0xD000000000000014;
  v13._object = (void *)0x80000000002C72C0;
  String.append(_:)(v13);
  sub_5C9A4((uint64_t)v25);
  v14._countAndFlagsBits = sub_5D4E8();
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 0xD000000000000013;
  v16._object = (void *)0x80000000002C72E0;
  String.append(_:)(v16);
  swift_beginAccess(v0 + 5, v26, 0, 0);
  v17 = v0[5];
  v18 = swift_bridgeObjectRetain(v17);
  v19._countAndFlagsBits = Set.description.getter(v18, &type metadata for Int, &protocol witness table for Int);
  v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v20);
  v21._object = (void *)0x80000000002C7300;
  v21._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v21);
  (*(void (**)(char *__return_ptr))(*v0 + 112))(&v22);
  __asm { BR              X10 }
}

uint64_t sub_5D420()
{
  Swift::String v0;
  uint64_t v2;

  v0._countAndFlagsBits = 0x6B72616D6B6F6F62;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2;
}

void sub_5D4C8()
{
  ElementPaginationEntity.description.getter();
}

uint64_t sub_5D4E8()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  __int128 v3;
  uint64_t v4;
  Swift::String v5;
  _OWORD v7[2];
  __int128 v8;

  *(_QWORD *)&v7[0] = 0;
  *((_QWORD *)&v7[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v8 = v7[0];
  v1._object = (void *)0x80000000002C7350;
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  *(_QWORD *)&v7[0] = *(_QWORD *)v0;
  _print_unlocked<A, B>(_:_:)(v7, &v8, &type metadata for DocumentEntityID, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 0x3A65756C6176202CLL;
  v2._object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  v3 = *(_OWORD *)(v0 + 24);
  v7[0] = *(_OWORD *)(v0 + 8);
  v7[1] = v3;
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)(v7, &v8, v4, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v8;
}

uint64_t sub_5D5E4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  __int128 v4;
  uint64_t v5;
  Swift::String v6;
  _OWORD v8[2];
  __int128 v9;

  *(_QWORD *)&v8[0] = 0;
  *((_QWORD *)&v8[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v9 = v8[0];
  v1._object = (void *)0x80000000002C7350;
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  *(_QWORD *)&v8[0] = *(_QWORD *)v0;
  v2 = sub_319AC(&qword_3B7498);
  _print_unlocked<A, B>(_:_:)(v8, &v9, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 0x3A65756C6176202CLL;
  v3._object = (void *)0xE900000000000020;
  String.append(_:)(v3);
  v4 = *(_OWORD *)(v0 + 24);
  v8[0] = *(_OWORD *)(v0 + 8);
  v8[1] = v4;
  type metadata accessor for CGRect(0);
  _print_unlocked<A, B>(_:_:)(v8, &v9, v5, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v6._countAndFlagsBits = 41;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v9;
}

uint64_t sub_5D6E8(uint64_t a1, double a2, double a3)
{
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  _QWORD v11[2];
  _QWORD v12[2];

  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v6._object = (void *)0x80000000002C7350;
  v6._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v6);
  v11[0] = a1;
  _print_unlocked<A, B>(_:_:)(v11, v12, &type metadata for DocumentEntityID, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7._countAndFlagsBits = 0x3A65756C6176202CLL;
  v7._object = (void *)0xE900000000000020;
  String.append(_:)(v7);
  *(double *)v11 = a2;
  *(double *)&v11[1] = a3;
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)(v11, v12, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return v12[0];
}

uint64_t sub_5D7E8(uint64_t a1, double a2, double a3)
{
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v6._object = (void *)0x80000000002C7350;
  v6._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v6);
  v12[0] = a1;
  v7 = sub_319AC(&qword_3B7498);
  _print_unlocked<A, B>(_:_:)(v12, v13, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v8._countAndFlagsBits = 0x3A65756C6176202CLL;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  *(double *)v12 = a2;
  *(double *)&v12[1] = a3;
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)(v12, v13, v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v13[0];
}

uint64_t sub_5D8F0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 40, v2, 0, 0);
  return *(_QWORD *)(v0 + 40);
}

uint64_t sub_5D920()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t type metadata accessor for ElementPaginationEntity.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ElementPaginationEntity.CodingKeys);
}

unint64_t sub_5D934()
{
  unint64_t result;

  result = qword_3B7350;
  if (!qword_3B7350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentEntityID, &type metadata for DocumentEntityID);
    atomic_store(result, (unint64_t *)&qword_3B7350);
  }
  return result;
}

unint64_t sub_5D978()
{
  unint64_t result;

  result = qword_3B7358;
  if (!qword_3B7358)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DocumentEntityID, &type metadata for DocumentEntityID);
    atomic_store(result, (unint64_t *)&qword_3B7358);
  }
  return result;
}

uint64_t sub_5D9BC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CGRect(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5D9FC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_31A38(&qword_3B7330);
    sub_5DA78(a2, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5DA78(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_31A38(&qword_3B6C00);
    sub_5D934();
    sub_5D978();
    sub_5D9BC(&qword_3B7360, (uint64_t)&protocol conformance descriptor for CGRect);
    sub_5D9BC(&qword_3B7368, (uint64_t)&protocol conformance descriptor for CGRect);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5DB20(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_31A38(&qword_3B7370);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_5DB80(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = swift_getWitnessTable(&protocol conformance descriptor for ElementPaginationEntity<A>, a2);
  result = swift_getWitnessTable(&protocol conformance descriptor for ElementPaginationEntity<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_5DBC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  v2 = sub_5D8F0();
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_5DBEC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_bridgeObjectRetain(*a1);
  return sub_5C900(v1);
}

uint64_t sub_5DC14()
{
  return 8;
}

_QWORD *sub_5DC20(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_5DC30(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = &unk_2E6B78;
  v2[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 88);
}

uint64_t type metadata accessor for ElementPaginationEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ElementPaginationEntity);
}

uint64_t method lookup function for ElementPaginationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ElementPaginationEntity);
}

uint64_t dispatch thunk of ElementPaginationEntity.__allocating_init(uniqueIdentifier:rects:pageOffsets:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ElementPaginationEntity.boundingRect.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ElementPaginationEntity.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ElementPaginationEntity.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t sub_5DCE0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_5DD2C + 4 * byte_2E6A8B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_5DD60 + 4 * byte_2E6A86[v4]))();
}

uint64_t sub_5DD60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_5DD68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x5DD70);
  return result;
}

uint64_t sub_5DD7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x5DD84);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_5DD88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5DD90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_5DD9C(uint64_t a1)
{
  return swift_getWitnessTable(&unk_2E6C40, a1);
}

uint64_t sub_5DDAC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_2E6BB0, a1);
}

uint64_t sub_5DDBC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_2E6BD8, a1);
}

uint64_t sub_5DDCC()
{
  return 3;
}

void sub_5DDD4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

unint64_t HighlightPaginationEntity.debugDescription.getter()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  Swift::String v9;
  void *object;

  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = v0[2];
  v2 = (void *)v0[3];
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x636572202020200ALL;
  v4._object = (void *)0xEB000000003A7374;
  String.append(_:)(v4);
  v5 = v0[4];
  v6 = swift_bridgeObjectRetain(v5);
  v7 = sub_4A070(v6);
  swift_bridgeObjectRelease(v5);
  type metadata accessor for CGRect(0);
  v9._countAndFlagsBits = Array.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(object);
  return 0xD000000000000014;
}

unint64_t sub_5DEF4()
{
  return HighlightPaginationEntity.debugDescription.getter();
}

uint64_t sub_5DF14()
{
  return sub_5E0A8(type metadata accessor for HighlightPaginationEntity);
}

uint64_t type metadata accessor for HighlightPaginationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3B74C8, (uint64_t)&nominal type descriptor for HighlightPaginationEntity);
}

uint64_t ExpandableContentPaginationEntityReference.init<A>(rects:pageOffset:entity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_5E47C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_5E6E8);
}

uint64_t HighlightPaginationEntityReference.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  Swift::String v6;
  void *object;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;

  v1 = v0;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease(0xE000000000000000);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = swift_bridgeObjectRetain(v2);
  v4 = sub_4A070(v3);
  swift_bridgeObjectRelease(v2);
  type metadata accessor for CGRect(0);
  v6._countAndFlagsBits = Array.description.getter(v4, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(object);
  v8._object = (void *)0x80000000002C7390;
  v8._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v8);
  v9 = *(_QWORD *)(v1 + 32);
  v10 = type metadata accessor for HighlightPaginationEntity(0);
  v11 = swift_dynamicCastClassUnconditional(v9, v10, 0, 0, 0);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(void **)(v11 + 24);
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  return 0x7463657220202020;
}

uint64_t sub_5E070()
{
  return HighlightPaginationEntityReference.debugDescription.getter();
}

void sub_5E090(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_5E09C()
{
  return sub_5E0A8(type metadata accessor for BookmarkPaginationEntity);
}

uint64_t sub_5E0A8(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = a1(0);
  v4 = swift_dynamicCastClassUnconditional(v2, v3, 0, 0, 0);
  swift_unknownObjectRetain(v2);
  return v4;
}

void BookmarkPaginationEntity.debugDescription.getter()
{
  _QWORD *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  _BYTE v9[24];
  char v10;
  __int128 v11;

  *(_QWORD *)v9 = 0;
  *(_QWORD *)&v9[8] = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v11 = *(_OWORD *)v9;
  v1._object = (void *)0x80000000002C7370;
  v1._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v1);
  v2 = v0[2];
  v3 = (void *)v0[3];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._countAndFlagsBits = 0x636572202020200ALL;
  v5._object = (void *)0xEA00000000003A74;
  String.append(_:)(v5);
  v6 = v0[4];
  v7 = (double *)swift_bridgeObjectRetain(v6);
  sub_4A1C8(v7, (uint64_t)v9);
  swift_bridgeObjectRelease(v6);
  if ((v10 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)&v9[8];
    type metadata accessor for CGPoint(0);
    _print_unlocked<A, B>(_:_:)(v9, &v11, v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  }
}

void sub_5E200()
{
  BookmarkPaginationEntity.debugDescription.getter();
}

uint64_t LandmarkPaginationEntity.__allocating_init(name:rect:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;

  v6 = *a3;
  v12 = *(_OWORD *)(a3 + 1);
  v7 = a3[3];
  v8 = a3[4];
  v9 = sub_319AC(&qword_3B67E8);
  v10 = swift_allocObject(v9, 72);
  *(_OWORD *)(v10 + 16) = xmmword_2E5F80;
  *(_QWORD *)(v10 + 32) = v6;
  *(_OWORD *)(v10 + 40) = v12;
  *(_QWORD *)(v10 + 56) = v7;
  *(_QWORD *)(v10 + 64) = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(v3 + 144))(a1, a2, v10, &_swiftEmptySetSingleton);
}

_QWORD *LandmarkPaginationEntity.__allocating_init(uniqueIdentifier:rects:pageOffsets:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  swift_allocObject(v4, 48);
  return ElementPaginationEntity.init(uniqueIdentifier:rects:pageOffsets:)(a1, a2, a3, a4);
}

uint64_t LandmarkPaginationEntity.__deallocating_deinit()
{
  _QWORD *v0;

  v0 = ElementPaginationEntity.deinit();
  return swift_deallocClassInstance(v0, 48, 7);
}

_QWORD *AnchorPaginationEntity.__allocating_init(name:rect:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_5E35C(a1, a2, a3, type metadata accessor for AnchorPaginationEntity);
}

void sub_5E33C(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AnchorPaginationEntityReference.init<A>(rects:pageOffset:entity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_5E47C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void))sub_5E4C4);
}

_QWORD *MediaElementPaginationEntity.__allocating_init(name:rect:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_5E35C(a1, a2, a3, type metadata accessor for MediaElementPaginationEntity);
}

_QWORD *sub_5E35C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  __int128 v14;

  v7 = *a3;
  v14 = *(_OWORD *)(a3 + 1);
  v8 = a3[3];
  v9 = a3[4];
  v10 = sub_319AC(&qword_3B67E8);
  v11 = swift_allocObject(v10, 72);
  *(_OWORD *)(v11 + 16) = xmmword_2E5F80;
  *(_QWORD *)(v11 + 32) = v7;
  *(_OWORD *)(v11 + 40) = v14;
  *(_QWORD *)(v11 + 56) = v8;
  *(_QWORD *)(v11 + 64) = v9;
  v12 = a4(0);
  result = (_QWORD *)swift_allocObject(v12, 48);
  result[2] = a1;
  result[3] = a2;
  result[4] = v11;
  result[5] = &_swiftEmptySetSingleton;
  return result;
}

void sub_5E40C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

_QWORD *ExpandableContentPaginationEntity.__allocating_init(name:rect:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_5E35C(a1, a2, a3, type metadata accessor for ExpandableContentPaginationEntity);
}

void sub_5E424(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

_QWORD *HistoryPaginationEntity.__allocating_init(name:rect:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_5E35C(a1, a2, a3, type metadata accessor for HistoryPaginationEntity);
}

void sub_5E43C(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t _s8BookEPUB33ExpandableContentPaginationEntityCfD_0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_5E47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v9;

  v9 = a7();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v9;
}

uint64_t type metadata accessor for BookmarkPaginationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3B76A0, (uint64_t)&nominal type descriptor for BookmarkPaginationEntity);
}

uint64_t type metadata accessor for AnchorPaginationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3B7900, (uint64_t)&nominal type descriptor for AnchorPaginationEntity);
}

uint64_t type metadata accessor for MediaElementPaginationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3B7AE8, (uint64_t)&nominal type descriptor for MediaElementPaginationEntity);
}

uint64_t type metadata accessor for ExpandableContentPaginationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3B7CD0, (uint64_t)&nominal type descriptor for ExpandableContentPaginationEntity);
}

uint64_t type metadata accessor for HistoryPaginationEntity(uint64_t a1)
{
  return sub_3E7A8(a1, qword_3B7EB8, (uint64_t)&nominal type descriptor for HistoryPaginationEntity);
}

uint64_t type metadata accessor for HighlightPaginationEntityReference()
{
  return objc_opt_self(_TtC8BookEPUB34HighlightPaginationEntityReference);
}

uint64_t method lookup function for HighlightPaginationEntityReference(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for HighlightPaginationEntityReference);
}

uint64_t sub_5E55C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 192);
}

uint64_t method lookup function for BookmarkPaginationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookmarkPaginationEntity);
}

uint64_t type metadata accessor for BookmarkPaginationEntityReference()
{
  return objc_opt_self(_TtC8BookEPUB33BookmarkPaginationEntityReference);
}

uint64_t method lookup function for BookmarkPaginationEntityReference(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookmarkPaginationEntityReference);
}

uint64_t dispatch thunk of BookmarkPaginationEntityReference.bookmarkEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t sub_5E5D4(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + 200);
}

uint64_t type metadata accessor for LandmarkPaginationEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LandmarkPaginationEntity);
}

uint64_t method lookup function for LandmarkPaginationEntity(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for LandmarkPaginationEntity);
}

uint64_t dispatch thunk of LandmarkPaginationEntity.rect.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t type metadata accessor for AnchorPaginationEntityReference()
{
  return objc_opt_self(_TtC8BookEPUB31AnchorPaginationEntityReference);
}

uint64_t type metadata accessor for MediaElementPaginationEntityReference()
{
  return objc_opt_self(_TtC8BookEPUB37MediaElementPaginationEntityReference);
}

uint64_t type metadata accessor for ExpandableContentPaginationEntityReference()
{
  return objc_opt_self(_TtC8BookEPUB42ExpandableContentPaginationEntityReference);
}

uint64_t sub_5E690(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 256, 0, v2, a1 + 216);
}

uint64_t type metadata accessor for HistoryPaginationEntityReference()
{
  return objc_opt_self(_TtC8BookEPUB32HistoryPaginationEntityReference);
}

unint64_t destroy for BookContentAccessoryChange(uint64_t a1)
{
  unint64_t result;
  int v2;

  result = *(_QWORD *)(a1 + 8);
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for BookContentAccessoryChange(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 8);
  if ((int)v4 - 1 < 0)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
    *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
    *(_QWORD *)(a1 + 8) = v3;
    *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
  }
  return a1;
}

uint64_t assignWithCopy for BookContentAccessoryChange(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  LODWORD(v5) = -1;
  if (v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 - 1;
  if (*((_QWORD *)a2 + 1) < 0xFFFFFFFFuLL)
    v5 = *((_QWORD *)a2 + 1);
  v8 = v5 - 1;
  if (v7 < 0)
  {
    if (v8 < 0)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
      *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
      v14 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v4);
      *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
      *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
      *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
      *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
      *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
      return a1;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if ((v8 & 0x80000000) == 0)
  {
LABEL_11:
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v12;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v11;
    return a1;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
  *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
  v9 = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
  swift_bridgeObjectRetain(v9);
  return a1;
}

__n128 initializeWithTake for BookThemeEntity(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for BookContentAccessoryChange(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = -1;
  if (v4 < 0xFFFFFFFF)
    v5 = v4;
  if (v5 - 1 < 0)
  {
    v6 = *(_QWORD *)(a2 + 8);
    LODWORD(v7) = -1;
    if (v6 < 0xFFFFFFFF)
      v7 = *(_QWORD *)(a2 + 8);
    if ((int)v7 - 1 < 0)
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
      *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRelease(v4);
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      return a1;
    }
    swift_bridgeObjectRelease(v4);
  }
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for BookContentAccessoryChange(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  unsigned int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = v4 + 1;
  v6 = v4 - 2;
  if (v5 >= 4)
    return v6;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BookContentAccessoryChange(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_5EA88(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

double sub_5EAAC(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(a1 + 56) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)a1 = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookContentAccessoryChange()
{
  return &type metadata for BookContentAccessoryChange;
}

uint64_t dispatch thunk of ContentMediatorEventHandling.content(_:handleTextInteractionWith:shouldReceive:webView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

unint64_t destroy for BookContentAccessoryAdornmentOverlap(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  }
  return result;
}

uint64_t _s8BookEPUB36BookContentAccessoryAdornmentOverlapOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v4;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
  }
  return a1;
}

_QWORD *assignWithCopy for BookContentAccessoryAdornmentOverlap(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v9 = a2[1];
      a1[1] = v9;
      v10 = a2[2];
      a1[2] = v10;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v10);
      return a1;
    }
LABEL_7:
    v11 = *(_OWORD *)a2;
    a1[2] = a2[2];
    *(_OWORD *)a1 = v11;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    swift_bridgeObjectRelease(a1[2]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  v7 = a2[2];
  v8 = a1[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

__n128 initializeWithTake for Location.AnchorRequest(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for BookContentAccessoryAdornmentOverlap(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookContentAccessoryAdornmentOverlap(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for BookContentAccessoryAdornmentOverlap(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_5EDBC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_5EDD4(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for BookContentAccessoryAdornmentOverlap()
{
  return &type metadata for BookContentAccessoryAdornmentOverlap;
}

uint64_t dispatch thunk of ContentMediatorEventHandling.content(_:didNotHandleTapAsClickAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of BookContentAccessoryAdornmentFactory.createHighlightsController(for:with:contentLayoutController:selectionHighlightController:adornmentState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 8))();
}

uint64_t dispatch thunk of BookContentAccessoryAdornmentFactory.createNotesController(for:with:contentLayoutController:adornmentState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of BookContentAccessoryAdornmentFactory.createAccessibilityController(for:with:contentLayoutController:adornmentState:with:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return (*(uint64_t (**)(void))(a11 + 24))();
}

uint64_t PaginationLogger()()
{
  if (qword_3B56B8 != -1)
    swift_once(&qword_3B56B8, sub_5EFF4);
  return Logger.init(_:)((id)qword_3CEEF8);
}

uint64_t PaginationLogSignPostBegin(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5EEF8(a1, a2, a3, (uint64_t (*)(__n128))&static os_signpost_type_t.begin.getter);
}

id _PaginationLog()()
{
  if (qword_3B56B8 != -1)
    swift_once(&qword_3B56B8, sub_5EFF4);
  return (id)qword_3CEEF8;
}

uint64_t PaginationLogSignPostEvent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5EEF8(a1, a2, a3, (uint64_t (*)(__n128))&static os_signpost_type_t.event.getter);
}

uint64_t PaginationLogSignPostEnd(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_5EEF8(a1, a2, a3, (uint64_t (*)(__n128))&static os_signpost_type_t.end.getter);
}

uint64_t sub_5EEF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(__n128))
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v16;

  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a4(v10);
  if (qword_3B56B8 != -1)
    swift_once(&qword_3B56B8, sub_5EFF4);
  v14 = (id)qword_3CEEF8;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)(v13, &dword_0, v14, a1, a2, a3, v12);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_5EFF4()
{
  uint64_t result;

  sub_523DC();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000000002C6E50, 0x6974616E69676150, 0xEA00000000006E6FLL);
  qword_3CEEF8 = result;
  return result;
}

id sub_5F0A8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Document();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Document()
{
  return objc_opt_self(Document);
}

UIColor __swiftcall UIColor.init(rgbaHex:)(Swift::Int rgbaHex)
{
  return (UIColor)objc_msgSend(objc_allocWithZone((Class)((uint64_t (*)())swift_getObjCClassFromMetadata)()), "initWithRed:green:blue:alpha:", (double)BYTE3(rgbaHex) / 255.0, (double)BYTE2(rgbaHex) / 255.0, (double)BYTE1(rgbaHex) / 255.0, (double)rgbaHex / 255.0);
}

uint64_t SearchModule.view.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 28));
}

uint64_t Location.documentOrdinal.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

Swift::Void __swiftcall SearchModule.performSearch(query:)(Swift::String query)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v7[2];

  object = query._object;
  countAndFlagsBits = query._countAndFlagsBits;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  KeyPath = swift_getKeyPath(&unk_2E7150);
  v6 = swift_getKeyPath(&unk_2E7178);
  v7[0] = countAndFlagsBits;
  v7[1] = object;
  swift_bridgeObjectRetain(object);
  swift_retain();
  static Published.subscript.setter(v7, v4, KeyPath, v6);
  sub_A97E4();
}

uint64_t sub_5F228@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Location.documentOrdinal.getter();
  *a1 = result;
  return result;
}

uint64_t sub_5F24C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  swift_beginAccess(v4, v10, 0, 0);
  v7 = type metadata accessor for SearchModuleFactory.SavedModule(255, *(_QWORD *)(v3 + 80), v5, v6);
  v8 = type metadata accessor for Optional(0, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, v4, v8);
}

uint64_t sub_5F2C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 136);
  swift_beginAccess(v4, v10, 33, 0);
  v7 = type metadata accessor for SearchModuleFactory.SavedModule(255, *(_QWORD *)(v3 + 80), v5, v6);
  v8 = type metadata accessor for Optional(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v4, a1, v8);
  return swift_endAccess(v10);
}

uint64_t sub_5F34C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = type metadata accessor for SearchModule(0, a4, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for SearchModuleFactory.SavedModule(0, a4, v11, v12);
  *(_QWORD *)(a5 + *(int *)(result + 28)) = a2;
  *(_QWORD *)(a5 + *(int *)(result + 32)) = a3;
  return result;
}

_QWORD *SearchModuleFactory.__allocating_init(bookProvider:searchController:paginationService:pageNumberProvider:stylesheetProvider:analyticsProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v17 = (_QWORD *)swift_allocObject(v10, *(unsigned int *)(v10 + 48));
  v18 = (char *)v17 + *(_QWORD *)(*v17 + 136);
  v21 = type metadata accessor for SearchModuleFactory.SavedModule(0, *(_QWORD *)(*v17 + 80), v19, v20);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v18, 1, 1, v21);
  v17[2] = a1;
  v17[3] = a2;
  v17[4] = a3;
  v17[5] = a4;
  v17[6] = a5;
  v17[7] = a6;
  v17[8] = a7;
  v17[9] = a8;
  v17[10] = a9;
  v17[11] = a10;
  return v17;
}

_QWORD *SearchModuleFactory.init(bookProvider:searchController:paginationService:pageNumberProvider:stylesheetProvider:analyticsProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  char *v17;
  uint64_t v18;

  v17 = (char *)v10 + *(_QWORD *)(*v10 + 136);
  v18 = type metadata accessor for SearchModuleFactory.SavedModule(0, *(_QWORD *)(*v10 + 80), a3, a4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v10[2] = a1;
  v10[3] = a2;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  v10[7] = a6;
  v10[8] = a7;
  v10[9] = a8;
  v10[10] = a9;
  v10[11] = a10;
  return v10;
}

uint64_t sub_5F544@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD *, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, char *a5@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  char *v33;
  id v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  objc_class *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char **v44;
  char *v45;
  char *v46;
  __n128 v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD *, uint64_t);
  char *v65;
  char *v66;
  _QWORD v67[5];
  objc_super v68;

  v62 = a4;
  v63 = a3;
  v64 = a2;
  v61 = a1;
  v66 = a5;
  v6 = *(_QWORD *)(*v5 + 80);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(a1);
  v65 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SearchModuleFactory.SavedModule(255, v6, v9, v10);
  v12 = type metadata accessor for Optional(0, v11);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v56 - v14;
  v18 = type metadata accessor for SearchModule(0, v6, v16, v17);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v56 - v20;
  sub_5F24C((uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v15, 1, v11))
  {
    v58 = v18;
    v59 = v7;
    v60 = v6;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    v23 = v5[2];
    v22 = v5[3];
    v24 = v5[4];
    v25 = v5[5];
    v26 = v5[7];
    v56 = v5[6];
    v57 = v22;
    v27 = v5[8];
    v28 = v5[9];
    v29 = qword_3B5910;
    swift_unknownObjectRetain(v23);
    swift_unknownObjectRetain(v24);
    swift_unknownObjectRetain(v25);
    swift_unknownObjectRetain(v26);
    swift_retain();
    if (v29 != -1)
      swift_once(&qword_3B5910, sub_1B17A8);
    v30 = (void *)qword_3C09D0;
    v31 = v5[10];
    v32 = (void *)v5[11];
    v33 = (char *)objc_allocWithZone((Class)type metadata accessor for SearchDataManager());
    swift_unknownObjectRetain(v31);
    v34 = v30;
    v35 = sub_60F0C(v23, v57, v24, v25, v56, v26, v27, v28, v34, v31, v32, v33);
    v36 = type metadata accessor for SearchViewModel(0);
    swift_allocObject(v36, *(unsigned int *)(v36 + 48));
    v37 = SearchViewModel.init(searchText:)(0, 0xE000000000000000);
    v38 = (objc_class *)type metadata accessor for SearchInteractor(0);
    v39 = (char *)objc_allocWithZone(v38);
    v40 = &v39[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_delegate];
    *((_QWORD *)v40 + 1) = 0;
    swift_unknownObjectWeakInit(v40, 0);
    sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
    v41 = v35;
    v42 = v39;
    v43 = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD00000000000001FLL, 0x80000000002C7640);
    Logger.init(_:)(v43);
    v44 = (char **)&v42[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager];
    *v44 = v41;
    v44[1] = (char *)&off_37CAD0;
    swift_unknownObjectRetain(v41);

    v68.receiver = v42;
    v68.super_class = v38;
    v45 = (char *)objc_msgSendSuper2(&v68, "init");
    v46 = &v41[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_delegate];
    *((_QWORD *)v46 + 1) = &off_37AEF8;
    swift_unknownObjectWeakAssign(v46, v45);

    sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
    swift_retain();
    v48 = (void *)static OS_dispatch_queue.main.getter(v47);
    v49 = type metadata accessor for SearchPresenter();
    v50 = (_QWORD *)swift_allocObject(v49, 88);
    v51 = v61;
    swift_unknownObjectRetain(v61);
    v52 = sub_60B54(v45, v51, v62, v37, v48, v50);
    v67[3] = v49;
    v67[4] = &off_37E5B8;
    v67[0] = v52;
    swift_retain();
    v53 = v65;
    v64(v67, v37);
    swift_release();

    sub_34488(v67);
    v54 = v66;
    *(_QWORD *)v66 = v52;
    return (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 32))(&v54[*(int *)(v58 + 28)], v53, v60);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v21, v15, v18);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v66, v21, v18);
  }
}

uint64_t sub_5F994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = type metadata accessor for SearchModuleFactory.SavedModule(255, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v5 - 8) + 56))((char *)&v11 - v8, 1, 1, v5, v7);
  return sub_5F2C8((uint64_t)v9);
}

double sub_5FA24(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  unint64_t v35;
  unint64_t v36;
  double result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t ObjectType;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  unint64_t v103;

  v83 = a3;
  v82 = a2;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v7 = type metadata accessor for SearchModule(0, v6, a3, a4);
  v94 = *(_QWORD *)(v7 - 8);
  v95 = v7;
  __chkstk_darwin(v7);
  v98 = (char *)&v77 - v8;
  v101 = v6;
  v99 = type metadata accessor for SearchModuleFactory.SavedModule(255, v6, v9, v10);
  v11 = type metadata accessor for Optional(0, v99);
  __chkstk_darwin(v11);
  v97 = (uint64_t)&v77 - v12;
  v13 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v13);
  v93 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_319AC(&qword_3B8E20);
  v78 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_319AC(&qword_3B80C0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v19 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_319AC(&qword_3B80C8);
  v81 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_319AC(&qword_3B80D0);
  v85 = *(_QWORD *)(v22 - 8);
  v86 = v22;
  __chkstk_darwin(v22);
  v24 = (char *)&v77 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_319AC(&qword_3B80D8);
  v88 = *(_QWORD *)(v25 - 8);
  v89 = v25;
  __chkstk_darwin(v25);
  v87 = (char *)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_319AC((uint64_t *)&unk_3B80E0);
  v91 = *(_QWORD *)(v27 - 8);
  v92 = v27;
  __chkstk_darwin(v27);
  v90 = (char *)&v77 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v29);
  v31 = (char *)&v77 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = a1;
  v32 = *a1;
  v33 = *(_QWORD *)(v32 + 16);
  KeyPath = swift_getKeyPath(&unk_2E7150);
  swift_getKeyPath(&unk_2E7178);
  static Published.subscript.getter(&v102, v33, KeyPath);
  swift_release();
  swift_release();
  v36 = (unint64_t)v102;
  v35 = v103;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v103).n128_u64[0];
  v38 = HIBYTE(v35) & 0xF;
  if ((v35 & 0x2000000000000000) == 0)
    v38 = v36 & 0xFFFFFFFFFFFFLL;
  if (v38)
  {
    v39 = swift_allocObject(&unk_37BED8, 24);
    v40 = v100;
    swift_weakInit(v39 + 16, v100);
    v41 = (_QWORD *)swift_allocObject(&unk_37BF00, 40);
    v41[2] = v101;
    v41[3] = v39;
    v41[4] = v32;
    v42 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v31, 1, 1, v42);
    type metadata accessor for MainActor(0);
    v43 = swift_retain();
    v44 = static MainActor.shared.getter(v43);
    v45 = (_QWORD *)swift_allocObject(&unk_37BF28, 64);
    v45[2] = v44;
    v45[3] = &protocol witness table for MainActor;
    v46 = v83;
    v45[4] = v82;
    v45[5] = v46;
    v45[6] = sub_61810;
    v45[7] = v41;
    v83 = sub_6057C((uint64_t)v31, (uint64_t)&unk_3B80F8, (uint64_t)v45);
    v47 = *(_QWORD *)(v40 + 48);
    ObjectType = swift_getObjectType(*(_QWORD *)(v40 + 40));
    (*(void (**)(uint64_t, uint64_t))(v47 + 40))(ObjectType, v47);
    v49 = sub_3DCC0(&qword_3B8100, &qword_3B8E20, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    Publisher.dropFirst(_:)(1, v15, v49);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v17, v15);
    v50 = sub_3DCC0(&qword_3B8108, &qword_3B80C0, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
    v51 = v80;
    Publisher.filter(_:)(sub_606B0, 0, v80, v50);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v19, v51);
    v52 = sub_3DCC0(&qword_3B8110, &qword_3B80C8, (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    v53 = v84;
    Publisher.map<A>(_:)(address(of:), 0, v84, (char *)&type metadata for () + 8, v52);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v21, v53);
    v54 = sub_3DCC0(&qword_3B8118, &qword_3B80D0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v55 = v86;
    v56 = v87;
    Publisher.first()(v86, v54);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v24, v55);
    v57 = sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
    v102 = (id)static OS_dispatch_queue.main.getter(v58);
    v59 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v60 = (uint64_t)v93;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v93, 1, 1, v59);
    v61 = sub_3DCC0((unint64_t *)&unk_3B8120, &qword_3B80D8, (uint64_t)&protocol conformance descriptor for Publishers.First<A>);
    v62 = sub_49FA8();
    v64 = v89;
    v63 = v90;
    Publisher.receive<A>(on:options:)(&v102, v60, v89, v57, v61, v62);
    sub_52128(v60, (uint64_t *)&unk_3B80B0);

    (*(void (**)(char *, uint64_t))(v88 + 8))(v56, v64);
    v65 = swift_allocObject(&unk_37BF50, 32);
    *(_QWORD *)(v65 + 16) = sub_61810;
    *(_QWORD *)(v65 + 24) = v41;
    v66 = swift_allocObject(&unk_37BF78, 32);
    *(_QWORD *)(v66 + 16) = sub_618F8;
    *(_QWORD *)(v66 + 24) = v65;
    v67 = sub_3DCC0(qword_3B8130, (uint64_t *)&unk_3B80E0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain();
    v68 = v92;
    v69 = Publisher<>.sink(receiveValue:)(sub_618F8, v66, v92, v67);
    v70 = swift_release();
    (*(void (**)(char *, uint64_t, __n128))(v91 + 8))(v63, v68, v70);
    v71 = (uint64_t)v98;
    v72.n128_f64[0] = (*(double (**)(char *, _QWORD *, uint64_t))(v94 + 16))(v98, v96, v95);
    v73 = type metadata accessor for AnyCancellable(0, v72);
    swift_allocObject(v73, *(unsigned int *)(v73 + 48));
    v74 = v83;
    swift_retain();
    v75 = AnyCancellable.init(_:)(sub_61918, v74);
    v76 = v97;
    sub_5F34C(v71, v75, v69, v101, v97);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v76, 0, 1);
    swift_retain();
    sub_5F2C8(v76);
    swift_release();
    swift_release();
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

double sub_601E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  double result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v7 = type metadata accessor for SearchModule(0, a3, a3, a4);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)&v25[-v9 - 8];
  v13 = type metadata accessor for SearchModuleFactory.SavedModule(255, a3, v11, v12);
  v14 = type metadata accessor for Optional(0, v13);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = &v25[-v16 - 8];
  swift_beginAccess(a1 + 16, v25, 0, 0);
  if (swift_weakLoadStrong(a1 + 16))
  {
    sub_5F24C((uint64_t)v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v17, 1, v13))
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }
    else
    {
      (*(void (**)(uint64_t *, char *, uint64_t))(v8 + 16))(v10, v17, v7);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      v19 = *v10;
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
      if (v19 == a2)
        sub_5F994(v20, v21, v22, v23);
    }
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t sub_6035C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = type metadata accessor for ContinuousClock(0);
  v7[6] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v7[7] = v9;
  v7[8] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MainActor(0);
  v7[9] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v7[10] = v11;
  v7[11] = v12;
  return swift_task_switch(sub_603F4, v11, v12);
}

uint64_t sub_603F4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  ContinuousClock.init()(a1);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_3B82C0 + dword_3B82C0);
  v2 = (_QWORD *)swift_task_alloc(unk_3B82C4);
  v1[12] = v2;
  *v2 = v1;
  v2[1] = sub_6046C;
  return v4(v1[2], v1[3], 0, 0, 1);
}

uint64_t sub_6046C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  v5 = *(_QWORD *)(*v1 + 56);
  v4 = *(_QWORD *)(*v1 + 64);
  v6 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_60540;
  else
    v7 = sub_604F4;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_604F4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(void (**)(uint64_t))(v0 + 32);
  v3 = swift_release(*(_QWORD *)(v0 + 72));
  v2(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_60540()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_6057C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_52128(a1, &qword_3B8450);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

BOOL sub_606B0(_BYTE *a1)
{
  return (*a1 & 1) == 0;
}

uint64_t sub_606C0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

_QWORD *SearchModuleFactory.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[7]);
  swift_release();
  swift_unknownObjectRelease(v0[10]);
  v2 = (char *)v0 + *(_QWORD *)(*v0 + 136);
  v5 = type metadata accessor for SearchModuleFactory.SavedModule(255, *(_QWORD *)(v1 + 80), v3, v4);
  v6 = type metadata accessor for Optional(0, v5);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v2, v6);
  return v0;
}

uint64_t SearchModuleFactory.__deallocating_deinit()
{
  uint64_t v0;

  SearchModuleFactory.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_60794@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E7150);
  v5 = swift_getKeyPath(&unk_2E7178);
  static Published.subscript.getter(v8, v3, KeyPath, v5);
  swift_release(KeyPath);
  result = swift_release(v5);
  v7 = v8[1];
  *a2 = v8[0];
  a2[1] = v7;
  return result;
}

uint64_t sub_60810(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v8[2];

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E7150);
  v6 = swift_getKeyPath(&unk_2E7178);
  v8[0] = v3;
  v8[1] = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v4);
  return static Published.subscript.setter(v8, v4, KeyPath, v6);
}

uint64_t type metadata accessor for SearchModuleFactory.SavedModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchModuleFactory.SavedModule);
}

uint64_t type metadata accessor for SearchModule(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchModule);
}

uint64_t sub_608B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_60954, 0, 0);
}

uint64_t sub_60954()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_34284((unint64_t *)&qword_3B82C8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_34284(&qword_3B82D0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_60A6C;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_60A6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_60B18, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_60B18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_60B54(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];

  v12 = sub_319AC(&qword_3B82D8);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  __chkstk_darwin(v12);
  v42 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_319AC((uint64_t *)&unk_3B82E0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a6[6] = 0;
  swift_unknownObjectWeakInit(a6 + 5, 0);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_181934((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  a6[9] = 0;
  a6[10] = 0;
  a6[8] = v18;
  a6[3] = a1;
  a6[4] = &off_37AE70;
  a6[6] = a3;
  v41 = a2;
  swift_unknownObjectWeakAssign(a6 + 5, a2);
  a6[2] = a4;
  a6[7] = a5;
  v19 = &a1[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_delegate];
  *((_QWORD *)v19 + 1) = &off_37E598;
  swift_unknownObjectWeakAssign(v19, a6);
  swift_beginAccess(a4 + OBJC_IVAR____TtC8BookEPUB15SearchViewModel__searchText, v45, 33, 0);
  v20 = a1;
  swift_retain();
  v40 = a5;
  v21 = sub_319AC(&qword_3B5CD0);
  Published.projectedValue.getter(v21);
  swift_endAccess(v45);
  v22 = swift_allocObject(&unk_37C130, 24);
  swift_weakInit(v22 + 16, a6);
  v23 = sub_3DCC0(&qword_3B82F0, (uint64_t *)&unk_3B82E0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v24 = Publisher<>.sink(receiveValue:)(sub_6284C, v22, v14, v23);
  v25 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v17, v14, v25);
  a6[9] = v24;
  swift_release();
  v26 = (_QWORD *)(*(_QWORD *)&v20[OBJC_IVAR____TtC8BookEPUB16SearchInteractor_dataManager]
                 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchRecentsPersistence);
  v27 = v26[1];
  ObjectType = swift_getObjectType(*v26);
  v45[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 8))(ObjectType, v27);
  v29 = sub_319AC(&qword_3B82F8);
  v30 = swift_allocObject(v29, 40);
  *(_OWORD *)(v30 + 16) = xmmword_2E5F80;
  *(_QWORD *)(v30 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 16))(ObjectType, v27);
  v31 = sub_319AC(&qword_3B8300);
  v32 = sub_3DCC0(&qword_3B8308, &qword_3B8300, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v33 = v42;
  Publisher.prepend(_:)(v30, v31, v32);
  swift_release();
  swift_bridgeObjectRelease(v30);
  KeyPath = swift_getKeyPath(&unk_2E72D8);
  v45[0] = a4;
  v35 = sub_3DCC0(&qword_3B8310, &qword_3B82D8, (uint64_t)&protocol conformance descriptor for Publishers.Concatenate<A, B>);
  v36 = v44;
  v37 = Publisher<>.assign<A>(to:on:)(KeyPath, v45, v44, v35);

  swift_unknownObjectRelease(v41);
  v38 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v43 + 8))(v33, v36, v38);
  swift_release();
  a6[10] = v37;
  swift_release();
  return a6;
}

char *sub_60F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, char *a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  id v43;
  objc_class *v44;
  double v45;
  char *v46;
  void *v47;
  char *v48;
  uint64_t ObjectType;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v84;
  char *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  id v114[2];
  objc_super v115;

  v87 = a7;
  v112 = a10;
  v113 = a6;
  v86 = a9;
  v106 = a11;
  v18 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v18);
  v111 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_319AC(&qword_3B8318);
  v100 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v93 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_319AC(&qword_3B8320);
  v103 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101);
  v95 = (char *)&v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_319AC(&qword_3B8328);
  __chkstk_darwin(v105);
  v96 = (char *)&v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_319AC(&qword_3B8E20);
  v89 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v24 = (char *)&v84 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_319AC(&qword_3B8330);
  v91 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v84 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_319AC(&qword_3B8338);
  __chkstk_darwin(v94);
  v85 = (char *)&v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_319AC(&qword_3B8340);
  v104 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v92 = (char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_319AC(&qword_3B8348);
  v29 = *(_QWORD *)(v28 - 8);
  v109 = v28;
  v110 = v29;
  __chkstk_darwin(v28);
  v97 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = &a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_delegate];
  *((_QWORD *)v31 + 1) = 0;
  swift_unknownObjectWeakInit(v31, 0);
  *(_QWORD *)&a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_subscribers] = _swiftEmptyArrayStorage;
  v32 = &a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider];
  v107 = a1;
  v108 = a3;
  *(_QWORD *)v32 = a1;
  *((_QWORD *)v32 + 1) = a2;
  v33 = a3;
  *(_QWORD *)&a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController] = a3;
  v34 = &a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_paginationService];
  *(_QWORD *)v34 = a4;
  *((_QWORD *)v34 + 1) = a5;
  v35 = &a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider];
  v36 = v113;
  v37 = v87;
  *(_QWORD *)v35 = v113;
  *((_QWORD *)v35 + 1) = v37;
  v38 = a8;
  *(_QWORD *)&a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_stylesheetProvider] = a8;
  v39 = &a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchRecentsPersistence];
  v40 = v86;
  *(_QWORD *)v39 = v86;
  *((_QWORD *)v39 + 1) = &protocol witness table for SearchRecentsPersistence;
  v41 = &a12[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_analyticsProvider];
  v42 = v112;
  v43 = v106;
  *(_QWORD *)v41 = v112;
  *((_QWORD *)v41 + 1) = v43;
  v44 = (objc_class *)type metadata accessor for SearchDataManager();
  v115.receiver = a12;
  v115.super_class = v44;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(v33);
  swift_unknownObjectRetain(a4);
  swift_unknownObjectRetain(v36);
  swift_retain();
  v106 = v40;
  *(_QWORD *)&v45 = swift_unknownObjectRetain(v42).n128_u64[0];
  v46 = (char *)objc_msgSendSuper2(&v115, "init", v45);
  v47 = *(void **)&v46[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController];
  v48 = v46;
  objc_msgSend(v47, "setDelegate:", v48);
  v99 = a4;
  ObjectType = swift_getObjectType(a4);
  (*(void (**)(uint64_t, uint64_t))(a5 + 40))(ObjectType, a5);
  v50 = sub_3DCC0(&qword_3B8100, &qword_3B8E20, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v51 = v84;
  v52 = v88;
  Publisher.map<A>(_:)(address(of:), 0, v88, (char *)&type metadata for () + 8, v50);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v24, v52);
  v53 = sub_3DCC0((unint64_t *)&unk_3B8350, &qword_3B8330, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v54 = v85;
  v55 = v90;
  Publisher.dropFirst(_:)(1, v90, v53);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v51, v55);
  swift_beginAccess(v38 + OBJC_IVAR____TtC8BookEPUB18StylesheetProvider__stylesheetSet, v114, 33, 0);
  v56 = sub_319AC((uint64_t *)&unk_3B9170);
  v57 = v93;
  Published.projectedValue.getter(v56);
  swift_endAccess(v114);
  v58 = sub_3DCC0(&qword_3B8360, &qword_3B8318, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v59 = v95;
  v60 = v98;
  Publisher.map<A>(_:)(address(of:), 0, v98, (char *)&type metadata for () + 8, v58);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v57, v60);
  v61 = sub_3DCC0(&qword_3B8368, &qword_3B8320, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v62 = v96;
  v63 = v101;
  Publisher.dropFirst(_:)(1, v101, v61);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v59, v63);
  v64 = sub_3DCC0(&qword_3B8370, &qword_3B8338, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v65 = sub_3DCC0(&qword_3B8378, &qword_3B8328, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v66 = v92;
  Publishers.Merge.init(_:_:)(v54, v62, v94, v105, v64, v65);
  v67 = sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v114[0] = (id)static OS_dispatch_queue.main.getter(v68);
  v69 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v70 = (uint64_t)v111;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v111, 1, 1, v69);
  v71 = sub_3DCC0(&qword_3B8380, &qword_3B8340, (uint64_t)&protocol conformance descriptor for Publishers.Merge<A, B>);
  v72 = sub_49FA8();
  v73 = v97;
  v74 = v102;
  Publisher.receive<A>(on:options:)(v114, v70, v102, v67, v71, v72);
  sub_52128(v70, (uint64_t *)&unk_3B80B0);

  (*(void (**)(char *, uint64_t))(v104 + 8))(v66, v74);
  v75 = swift_allocObject(&unk_37C158, 24);
  swift_unknownObjectWeakInit(v75 + 16, v48);
  v76 = swift_allocObject(&unk_37C180, 32);
  *(_QWORD *)(v76 + 16) = sub_62880;
  *(_QWORD *)(v76 + 24) = v75;
  v77 = sub_3DCC0(&qword_3B8388, &qword_3B8348, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v78 = v109;
  Publisher<>.sink(receiveValue:)(sub_62894, v76, v109, v77);
  v79 = swift_release();
  (*(void (**)(char *, uint64_t, __n128))(v110 + 8))(v73, v78, v79);
  v80 = &v48[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_subscribers];
  swift_beginAccess(&v48[OBJC_IVAR____TtC8BookEPUB17SearchDataManager_subscribers], v114, 33, 0);
  v81 = sub_319AC(&qword_3B8390);
  v82 = sub_3DCC0((unint64_t *)&unk_3BD170, &qword_3B8390, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v80, v81, v82);
  swift_endAccess(v114);
  swift_release();
  sub_6C160();

  swift_unknownObjectRelease(v107);
  swift_unknownObjectRelease(v108);
  swift_unknownObjectRelease(v99);
  swift_unknownObjectRelease(v113);
  swift_release();

  swift_unknownObjectRelease(v112);
  return v48;
}

uint64_t sub_617C8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_617EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

double sub_61810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_601E4(v4[3], v4[4], v4[2], a4);
}

uint64_t sub_6181C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_61848(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_3B80F4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_3F0C0;
  return sub_6035C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_618D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_618F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void sub_61918()
{
  sub_319AC(&qword_3B82B8);
  Task.cancel()();
}

void *sub_61950()
{
  return &protocol witness table for ObjectIdentifier;
}

uint64_t sub_6195C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t sub_61964(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_619E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64);
  v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v9);
  }
  else
  {
    v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain(v9);
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_61A9C(_QWORD *a1, uint64_t a2)
{
  swift_release(*a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

uint64_t *sub_61AE0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_retain(v4);
  v10(v8, v9, v5);
  return a1;
}

uint64_t *sub_61B50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_QWORD *sub_61BC0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t *sub_61C10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_61C78(_QWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  uint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 8) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(_WORD *)((char *)a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
      v15 = *a1;
      if (*a1 >= 0xFFFFFFFFuLL)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((_BYTE *)a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_61D4C + 4 * byte_2E7130[(v9 - 1)]))();
}

void sub_61DBC(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_4;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &dword_0 + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_61FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD v8[7];

  v8[0] = &unk_2E7268;
  v8[1] = &unk_2E7280;
  v8[2] = &unk_2E7268;
  v8[3] = &unk_2E7268;
  v8[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v8[5] = &unk_2E7298;
  v5 = type metadata accessor for SearchModuleFactory.SavedModule(255, *(_QWORD *)(a1 + 80), a3, a4);
  result = type metadata accessor for Optional(319, v5);
  if (v7 <= 0x3F)
  {
    v8[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_initClassMetadata2(a1, 0, 7, v8, a1 + 88);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for SearchModuleFactory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_3F27C(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchModuleFactory);
}

uint64_t method lookup function for SearchModuleFactory(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for SearchModuleFactory);
}

uint64_t dispatch thunk of SearchModuleFactory.__allocating_init(bookProvider:searchController:paginationService:pageNumberProvider:stylesheetProvider:analyticsProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of SearchModuleFactory.create<A>(router:buildView:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PagePaginationEntity.bookmarkEntityReferences.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SearchModuleFactory.save(_:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t sub_620A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_620B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[3];

  result = type metadata accessor for SearchModule(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v6 <= 0x3F)
  {
    v7[0] = *(_QWORD *)(result - 8) + 64;
    v7[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v7[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 0, 3, v7, a1 + 24);
    return 0;
  }
  return result;
}

uint64_t *sub_6212C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_DWORD *)(v4 + 80);
  v6 = ((v5 + 8) & ~v5) + *(_QWORD *)(v4 + 64);
  v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  v8 = *a2;
  *a1 = *a2;
  if (v5 > 7 || v7 != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    v12 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    v12 = a1;
    v13 = ((unint64_t)a1 + v5 + 8) & ~v5;
    v14 = ((unint64_t)a2 + v5 + 8) & ~v5;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain(v8);
    v15(v13, v14, v3);
    v16 = (_QWORD *)(((unint64_t)v12 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v17 = (uint64_t *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFF8);
    v18 = *v17;
    *v16 = *v17;
    v19 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8);
    v8 = *v19;
    *(_QWORD *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFF8) = *v19;
    swift_retain(v18);
  }
  swift_retain(v8);
  return v12;
}

uint64_t sub_62244(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  swift_release(*a1);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(((unint64_t)a1 + v5 + 8) & ~v5);
  v6 = (uint64_t)a1 + *(_QWORD *)(v4 + 64) + ((v5 + 8) & ~v5) + 7;
  v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release(*(_QWORD *)(v6 & 0xFFFFFFFFFFFFFFF8));
  return swift_release(*(_QWORD *)(v7 & 0xFFFFFFFFFFFFF8));
}

uint64_t *sub_622BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v5 = *a2;
  *a1 = *a2;
  v6 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a2 + v8 + 8) & ~v8;
  v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_retain(v5);
  v10(((unint64_t)a1 + v8 + 8) & ~v8, v9, v6);
  v11 = ((v8 + 8) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v12 = (_QWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  v13 = (uint64_t *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  v14 = *v13;
  *v12 = *v13;
  v15 = (uint64_t *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFF8);
  v16 = *v15;
  *(_QWORD *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFF8) = *v15;
  swift_retain(v14);
  swift_retain(v16);
  return a1;
}

uint64_t *sub_62384(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)a1 + v9 + 8) & ~v9, ((unint64_t)a2 + v9 + 8) & ~v9);
  v10 = ((v9 + 8) & ~v9) + *(_QWORD *)(v8 + 64) + 7;
  v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  v12 = (unint64_t)a2 + v10;
  v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 15;
  v13 = *(_QWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  v15 = *(_QWORD *)v11;
  *(_QWORD *)v11 = v13;
  v11 += 15;
  swift_retain(v13);
  swift_release(v15);
  v16 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFF8);
  v17 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = v16;
  swift_retain(v16);
  swift_release(v17);
  return a1;
}

_QWORD *sub_62454(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + v6 + 8) & ~v6, ((unint64_t)a2 + v6 + 8) & ~v6);
  v7 = ((v6 + 8) & ~v6) + *(_QWORD *)(v5 + 64) + 7;
  v8 = (_QWORD *)(((unint64_t)a1 + v7) & 0xFFFFFFFFFFFFFFF8);
  v9 = (_QWORD *)(((unint64_t)a2 + v7) & 0xFFFFFFFFFFFFFFF8);
  *v8 = *v9;
  *(_QWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *sub_624F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)a1 + v8 + 8) & ~v8, ((unint64_t)a2 + v8 + 8) & ~v8);
  v9 = ((v8 + 8) & ~v8) + *(_QWORD *)(v7 + 64) + 7;
  v10 = ((unint64_t)a1 + v9) & 0xFFFFFFFFFFFFFFF8;
  v11 = (_QWORD *)(((unint64_t)a2 + v9) & 0xFFFFFFFFFFFFFFF8);
  v12 = *(_QWORD *)v10;
  *(_QWORD *)v10 = *v11;
  v10 += 15;
  swift_release(v12);
  v13 = *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)(v10 & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFF8);
  swift_release(v13);
  return a1;
}

uint64_t sub_625A8(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  if (v6 >= a2)
  {
    if ((v5 & 0x80000000) != 0)
    {
      return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v7 + 8) & ~v7);
    }
    else
    {
      v12 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
  }
  else
  {
    if (((((((*(_QWORD *)(v4 + 64) + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_6263C + 4 * byte_2E713E[v10]))();
  }
}

void sub_626BC(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X13 }
  }
  if (((((*(_DWORD *)(v5 + 64) + (((_DWORD)v7 + 8) & ~(_DWORD)v7) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((((*(_QWORD *)(v5 + 64) + ((v7 + 8) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_627CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x62834);
}

void sub_627D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x627DCLL);
  JUMPOUT(0x62834);
}

void sub_627EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x62834);
}

void sub_627F4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x62834);
}

void sub_627FC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_WORD *)(v3 + v4) = 0;
  if (a2)
  {
    if ((a3 & 0x80000000) == 0)
    {
      if ((a2 & 0x80000000) == 0)
        JUMPOUT(0x62830);
      JUMPOUT(0x6282CLL);
    }
    JUMPOUT(0x62808);
  }
  JUMPOUT(0x62834);
}

double sub_6284C(uint64_t a1)
{
  uint64_t v1;

  return sub_A9190(a1, v1);
}

uint64_t sub_6285C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_62880()
{
  uint64_t v0;

  sub_6C110(v0);
}

unint64_t sub_62898(__int16 a1)
{
  unint64_t v2;
  void *v3;
  __CFString *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v11;
  __CFString *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  void *v18;
  __CFString *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  __CFString *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  void *v32;
  __CFString *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;
  __CFString *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  void *v46;
  __CFString *v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v2 = sub_38454((uint64_t)_swiftEmptyArrayStorage);
  if ((a1 & 1) != 0)
  {
    v11 = (void *)objc_opt_self(BEContentLayoutInfo);
    v12 = CFSTR("anchorFrames");
    v13 = objc_msgSend(v11, "anchorFramesScript");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_17DBA4(v14, v16, v12, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(0x8000000000000000);
    if ((a1 & 4) == 0)
    {
LABEL_3:
      if ((a1 & 0x100) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_3;
  }
  v18 = (void *)objc_opt_self(BEContentLayoutInfo);
  v19 = CFSTR("mediaFrames");
  v20 = objc_msgSend(v18, "mediaFramesScript");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v24 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_17DBA4(v21, v23, v19, v24);

  swift_bridgeObjectRelease(0x8000000000000000);
  if ((a1 & 0x100) == 0)
  {
LABEL_4:
    if ((a1 & 0x10) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v25 = (void *)objc_opt_self(BEContentLayoutInfo);
  v26 = CFSTR("expandableContentFrames");
  v27 = objc_msgSend(v25, "expandableContentFramesScript");
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  v31 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_17DBA4(v28, v30, v26, v31);

  swift_bridgeObjectRelease(0x8000000000000000);
  if ((a1 & 0x10) == 0)
  {
LABEL_5:
    if ((a1 & 0x20) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v32 = (void *)objc_opt_self(BEContentLayoutInfo);
  v33 = CFSTR("textContent");
  v34 = objc_msgSend(v32, "textContentScript");
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  v38 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_17DBA4(v35, v37, v33, v38);

  swift_bridgeObjectRelease(0x8000000000000000);
  if ((a1 & 0x20) == 0)
  {
LABEL_6:
    if ((a1 & 0x40) == 0)
      goto LABEL_7;
LABEL_15:
    v46 = (void *)objc_opt_self(BEContentLayoutInfo);
    v47 = CFSTR("writingMode");
    v48 = objc_msgSend(v46, "writingModeScript");
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    v52 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_17DBA4(v49, v51, v47, v52);

    swift_bridgeObjectRelease(0x8000000000000000);
    if ((a1 & 0x80) == 0)
      return v2;
    goto LABEL_8;
  }
LABEL_14:
  v39 = (void *)objc_opt_self(BEContentLayoutInfo);
  v40 = CFSTR("textDirection");
  v41 = objc_msgSend(v39, "textDirectionScript");
  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;

  v45 = swift_isUniquelyReferenced_nonNull_native(v2);
  sub_17DBA4(v42, v44, v40, v45);

  swift_bridgeObjectRelease(0x8000000000000000);
  if ((a1 & 0x40) != 0)
    goto LABEL_15;
LABEL_7:
  if ((a1 & 0x80) != 0)
  {
LABEL_8:
    v3 = (void *)objc_opt_self(BEContentLayoutInfo);
    v4 = CFSTR("scrollingElementSize");
    v5 = objc_msgSend(v3, "scrollingElementSizeScript");
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_17DBA4(v6, v8, v4, v9);

    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return v2;
}

id sub_62CA4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  double v16;
  unint64_t v17;
  char v18;
  double v19;
  id v21;
  id v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v47 - v9;
  if (a1
    && (v11 = objc_opt_self(NSDictionary), (v12 = swift_dynamicCastObjCClass(a1, v11)) != 0)
    && (v50 = 0,
        static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v12, &v50, &type metadata for String, &type metadata for Double, &protocol witness table for String), (v13 = v50) != 0))
  {
    if (*(_QWORD *)(v50 + 16))
    {
      v14 = sub_3B8A0(0x6874646977, 0xE500000000000000);
      if ((v15 & 1) != 0)
      {
        if (*(_QWORD *)(v13 + 16))
        {
          v16 = *(double *)(*(_QWORD *)(v13 + 56) + 8 * v14);
          v17 = sub_3B8A0(0x746867696568, 0xE600000000000000);
          if ((v18 & 1) != 0)
          {
            v19 = *(double *)(*(_QWORD *)(v13 + 56) + 8 * v17);
            swift_bridgeObjectRelease(v13);
            return objc_msgSend((id)objc_opt_self(NSValue), "valueWithCGSize:", v16, v19);
          }
        }
      }
    }
    if (qword_3B56B8 != -1)
      swift_once(&qword_3B56B8, sub_5EFF4);
    Logger.init(_:)((id)qword_3CEEF8);
    swift_bridgeObjectRetain(v13);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v50 = v42;
      v48 = v5;
      *(_DWORD *)v41 = 136315138;
      v47 = v41 + 4;
      swift_bridgeObjectRetain(v13);
      v44 = Dictionary.description.getter(v43, &type metadata for String, &type metadata for Double, &protocol witness table for String);
      v46 = v45;
      swift_bridgeObjectRelease(v13);
      v49 = sub_33524(v44, v46, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v47);
      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease(v46);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v4);
    }
    else
    {

      swift_bridgeObjectRelease_n(v13, 2);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  else
  {
    if (qword_3B56B8 != -1)
      swift_once(&qword_3B56B8, sub_5EFF4);
    Logger.init(_:)((id)qword_3CEEF8);
    v21 = a1;
    swift_errorRetain(a2);
    v22 = v21;
    v23 = swift_errorRetain(a2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v48 = v5;
      v49 = (uint64_t)a1;
      v28 = v27;
      v50 = v27;
      *(_DWORD *)v26 = 136315394;
      v29 = v22;
      v30 = sub_319AC(&qword_3B8A70);
      v47 = (uint8_t *)v4;
      v31 = String.init<A>(describing:)(&v49, v30);
      v33 = v32;
      v49 = sub_33524(v31, v32, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 4);

      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v26 + 12) = 2080;
      v49 = a2;
      swift_errorRetain(a2);
      v34 = sub_319AC(&qword_3BE350);
      v35 = String.init<A>(describing:)(&v49, v34);
      v37 = v36;
      v49 = sub_33524(v35, v36, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 14);
      swift_bridgeObjectRelease(v37);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl(&dword_0, v24, v25, "Failed to get results as needed type ([String: Double]) result: %s -- error: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      (*(void (**)(char *, uint8_t *))(v48 + 8))(v10, v47);
    }
    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
  }
  return 0;
}

_QWORD *sub_631E4(void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = (_QWORD *)type metadata accessor for Logger(0);
  v5 = *(v4 - 1);
  __chkstk_darwin(v4);
  isa = (Class)((char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v8 = objc_opt_self(NSDictionary);
    v9 = swift_dynamicCastObjCClass(a1, v8);
    if (v9)
    {
      v10 = v9;
      v35 = 0;
      v11 = sub_319AC(&qword_3BE360);
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v10, &v35, &type metadata for String, v11, &protocol witness table for String);
      v12 = v35;
      if (v35)
      {
        v13 = (void *)objc_opt_self(BEJavascriptUtilities);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v4 = objc_msgSend(v13, "keyedRectsFromKeyedDOMRects:", isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

        if (v4)
          return v4;
        __break(1u);
      }
    }
  }
  if (qword_3B56B8 != -1)
    swift_once(&qword_3B56B8, sub_5EFF4);
  Logger.init(_:)((id)qword_3CEEF8);
  v14 = a1;
  swift_errorRetain(a2);
  v15 = v14;
  v16 = swift_errorRetain(a2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v33 = v5;
    v34 = (uint64_t)a1;
    v21 = v20;
    v35 = v20;
    *(_DWORD *)v19 = 136315394;
    v22 = v15;
    v23 = sub_319AC(&qword_3B8A70);
    v32 = v4;
    v24 = String.init<A>(describing:)(&v34, v23);
    v26 = v25;
    v34 = sub_33524(v24, v25, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4);

    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v19 + 12) = 2080;
    v34 = a2;
    swift_errorRetain(a2);
    v27 = sub_319AC(&qword_3BE350);
    v28 = String.init<A>(describing:)(&v34, v27);
    v30 = v29;
    v34 = sub_33524(v28, v29, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 14);
    swift_bridgeObjectRelease(v30);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl(&dword_0, v17, v18, "Failed to get results as needed type ([String : [String : NSNumber]]) result: %s -- error: %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    (*(void (**)(Class, _QWORD *))(v33 + 8))(isa, v32);
  }
  else
  {

    swift_errorRelease(a2);
    swift_errorRelease(a2);

    (*(void (**)(Class, _QWORD *))(v5 + 8))(isa, v4);
  }
  return 0;
}

void sub_63548()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  CGFloat *v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  double MinY;
  double v16;
  double MaxY;
  double v18;
  double v19;
  double MinX;
  uint64_t v21;
  CGFloat x;
  CGFloat y;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  unint64_t v28;
  unint64_t v29;
  CGFloat *v30;
  unint64_t v31;
  unint64_t v32;
  __int128 v33;
  CGFloat *v34;
  _QWORD *v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  double r1;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat height;
  CGFloat v47;
  CGFloat width;
  __int128 rect;
  CGRect v50;
  CGRect v51;
  CGRect v52;
  CGRect v53;
  CGRect v54;
  CGRect v55;
  CGRect v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;
  CGRect v60;
  CGRect v61;
  CGRect v62;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyArrayStorage;
LABEL_28:
    swift_bridgeObjectRelease(v1);
    *v0 = v4;
    return;
  }
  swift_bridgeObjectRetain(*v0);
  v3 = v1 + 48;
  v4 = _swiftEmptyArrayStorage;
  while (1)
  {
    v5 = *(_QWORD *)(v3 - 16);
    v43 = *(double *)v3;
    v44 = *(double *)(v3 + 8);
    v6 = *(double *)(v3 + 24);
    v45 = *(double *)(v3 + 16);
    v47 = *(double *)(v3 - 8);
    rect = *(_OWORD *)(v3 + 32);
    v7 = *(double *)(v3 + 48);
    v8 = v4[2];
    if (!v8)
      goto LABEL_18;
    v9 = (CGFloat *)&v4[9 * v8];
    v10 = *((_QWORD *)v9 - 5);
    v39 = *(v9 - 3);
    v40 = *(v9 - 4);
    v11 = *v9;
    v37 = *(v9 - 1);
    v38 = *(v9 - 2);
    v13 = v9[1];
    v12 = v9[2];
    v14 = v9[3];
    v50.origin.x = *v9;
    v50.origin.y = v13;
    v50.size.width = v12;
    v50.size.height = v14;
    MinY = CGRectGetMinY(v50);
    *(_QWORD *)&v51.origin.y = rect;
    v51.origin.x = v6;
    v51.size.width = *((CGFloat *)&rect + 1);
    v51.size.height = v7;
    v16 = CGRectGetMinY(v51);
    if (MinY > v16)
      v16 = MinY;
    v41 = v13;
    r1 = v16;
    v52.origin.x = v11;
    v52.origin.y = v13;
    v52.size.width = v12;
    v52.size.height = v14;
    MaxY = CGRectGetMaxY(v52);
    v53.origin.x = v6;
    *(_OWORD *)&v53.origin.y = rect;
    v53.size.height = v7;
    v18 = CGRectGetMaxY(v53);
    if (v18 >= MaxY)
      v18 = MaxY;
    if (r1 >= v18)
      goto LABEL_18;
    v54.origin.x = v11;
    v54.origin.y = v13;
    v54.size.width = v12;
    v54.size.height = v14;
    v19 = CGRectGetMaxY(v54);
    v55.origin.x = v6;
    *(_OWORD *)&v55.origin.y = rect;
    v55.size.height = v7;
    if (vabdd_f64(v19, CGRectGetMaxY(v55)) >= 5.0)
      goto LABEL_18;
    v56.origin.x = v6;
    *(_OWORD *)&v56.origin.y = rect;
    v56.size.height = v7;
    MinX = CGRectGetMinX(v56);
    v57.origin.x = v11;
    v57.origin.y = v13;
    v57.size.width = v12;
    v57.size.height = v14;
    if (vabdd_f64(MinX, CGRectGetMaxX(v57)) >= 15.0)
    {
LABEL_18:
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_42BB8(0, v4[2] + 1, 1, v4);
      v32 = v4[2];
      v31 = v4[3];
      v33 = rect;
      if (v32 >= v31 >> 1)
      {
        v35 = sub_42BB8((_QWORD *)(v31 > 1), v32 + 1, 1, v4);
        v33 = rect;
        v4 = v35;
      }
      v4[2] = v32 + 1;
      v34 = (CGFloat *)&v4[9 * v32];
      *((_QWORD *)v34 + 4) = v5;
      v34[5] = v47;
      v34[6] = v43;
      v34[7] = v44;
      v34[8] = v45;
      v34[9] = v6;
      *((_OWORD *)v34 + 5) = v33;
      v34[12] = v7;
      goto LABEL_23;
    }
    v36 = v14;
    if (!v4[2])
      break;
    if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) != 0)
    {
      v21 = v4[2];
      if (!v21)
        goto LABEL_31;
    }
    else
    {
      v4 = sub_E3A3C(v4);
      v21 = v4[2];
      if (!v21)
        goto LABEL_31;
    }
    v4[2] = v21 - 1;
    if (v5 != v10)
      goto LABEL_30;
    v58.origin.y = v39;
    v58.origin.x = v40;
    v58.size.height = v37;
    v58.size.width = v38;
    v61.size.height = v45;
    v61.origin.x = v47;
    v61.origin.y = v43;
    v61.size.width = v44;
    v59 = CGRectUnion(v58, v61);
    x = v59.origin.x;
    y = v59.origin.y;
    height = v59.size.height;
    width = v59.size.width;
    v59.origin.x = v11;
    v59.origin.y = v41;
    v59.size.width = v12;
    v62.size.width = *((CGFloat *)&rect + 1);
    v59.size.height = v36;
    v62.origin.x = v6;
    *(_QWORD *)&v62.origin.y = rect;
    v62.size.height = v7;
    v60 = CGRectUnion(v59, v62);
    v24 = v60.origin.x;
    v25 = v60.origin.y;
    v26 = v60.size.width;
    v27 = v60.size.height;
    v29 = v4[2];
    v28 = v4[3];
    if (v29 >= v28 >> 1)
      v4 = sub_42BB8((_QWORD *)(v28 > 1), v29 + 1, 1, v4);
    v4[2] = v29 + 1;
    v30 = (CGFloat *)&v4[9 * v29];
    *((_QWORD *)v30 + 4) = v5;
    v30[5] = x;
    v30[6] = y;
    v30[7] = width;
    v30[8] = height;
    v30[9] = v24;
    v30[10] = v25;
    v30[11] = v26;
    v30[12] = v27;
LABEL_23:
    v3 += 72;
    if (!--v2)
    {
      swift_bridgeObjectRelease(v1);
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
}

BOOL sub_638E0(double *a1)
{
  CGFloat *v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  double MinY;
  double v10;
  double MaxY;
  double v12;
  double v13;
  CGFloat rect_16;
  double rect_24;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  v2 = a1[5];
  v3 = a1[6];
  v5 = a1[7];
  v4 = a1[8];
  v6 = v1[5];
  v17.origin.y = v1[6];
  rect_16 = v17.origin.y;
  v7 = v1[7];
  v8 = v1[8];
  v17.origin.x = v6;
  v17.size.width = v7;
  v17.size.height = v8;
  MinY = CGRectGetMinY(v17);
  v18.origin.x = v2;
  v18.origin.y = v3;
  v18.size.width = v5;
  v18.size.height = v4;
  v10 = CGRectGetMinY(v18);
  if (MinY > v10)
    v10 = MinY;
  rect_24 = v10;
  v19.origin.x = v6;
  v19.origin.y = rect_16;
  v19.size.width = v7;
  v19.size.height = v8;
  MaxY = CGRectGetMaxY(v19);
  v20.origin.x = v2;
  v20.origin.y = v3;
  v20.size.width = v5;
  v20.size.height = v4;
  v12 = CGRectGetMaxY(v20);
  if (v12 >= MaxY)
    v12 = MaxY;
  if (rect_24 >= v12)
    return 0;
  v21.origin.x = v6;
  v21.origin.y = rect_16;
  v21.size.width = v7;
  v21.size.height = v8;
  v13 = CGRectGetMaxY(v21);
  v22.origin.x = v2;
  v22.origin.y = v3;
  v22.size.width = v5;
  v22.size.height = v4;
  return vabdd_f64(v13, CGRectGetMaxY(v22)) < 5.0;
}

BOOL sub_639F0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  __int128 v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double MinX;
  double MinY;
  double v20;
  __int128 v21;
  __int128 v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  CGRect v34;
  CGRect v35;

  v3 = a1[5];
  v2 = a1[6];
  v5 = a1[7];
  v4 = a1[8];
  v6 = *(double *)a2;
  v8 = *((double *)a2 + 5);
  v7 = *((double *)a2 + 6);
  v10 = *((double *)a2 + 7);
  v9 = *((double *)a2 + 8);
  v27 = *a1;
  v11 = *(_OWORD *)(a1 + 3);
  v28 = *(_OWORD *)(a1 + 1);
  v29 = v11;
  v30 = v3;
  v31 = v2;
  v32 = v5;
  v33 = v4;
  v20 = v6;
  v21 = *(_OWORD *)(a2 + 1);
  v22 = *(_OWORD *)(a2 + 3);
  v23 = v8;
  v24 = v7;
  v25 = v10;
  v26 = v9;
  v12 = sub_638E0(&v20);
  v13 = v3;
  v14 = v2;
  v15 = v5;
  v16 = v4;
  if (v12)
  {
    MinX = CGRectGetMinX(*(CGRect *)&v13);
    v34.origin.x = v8;
    v34.origin.y = v7;
    v34.size.width = v10;
    v34.size.height = v9;
    MinY = CGRectGetMinX(v34);
  }
  else
  {
    MinX = CGRectGetMinY(*(CGRect *)&v13);
    v35.origin.x = v8;
    v35.origin.y = v7;
    v35.size.width = v10;
    v35.size.height = v9;
    MinY = CGRectGetMinY(v35);
  }
  return MinX < MinY;
}

BOOL sub_63AE0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_63B38((double *)v7, (double *)v9);
}

BOOL sub_63B38(double *a1, double *a2)
{
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  double MinY;
  double v10;
  double MaxY;
  double v12;
  double v13;
  double MinX;
  double v15;
  CGFloat v17;
  double v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v3 = a1[5];
  v2 = a1[6];
  v4 = a1[8];
  v17 = a1[7];
  v6 = a2[5];
  v5 = a2[6];
  v8 = a2[7];
  v7 = a2[8];
  v19.origin.x = v6;
  v19.origin.y = v5;
  v19.size.width = v8;
  v19.size.height = v7;
  MinY = CGRectGetMinY(v19);
  v20.origin.x = v3;
  v20.origin.y = v2;
  v20.size.width = v17;
  v20.size.height = v4;
  v10 = CGRectGetMinY(v20);
  if (MinY > v10)
    v10 = MinY;
  v18 = v10;
  v21.origin.x = v6;
  v21.origin.y = v5;
  v21.size.width = v8;
  v21.size.height = v7;
  MaxY = CGRectGetMaxY(v21);
  v22.origin.x = v3;
  v22.origin.y = v2;
  v22.size.width = v17;
  v22.size.height = v4;
  v12 = CGRectGetMaxY(v22);
  if (v12 >= MaxY)
    v12 = MaxY;
  if (v18 >= v12)
    goto LABEL_8;
  v23.origin.x = v6;
  v23.origin.y = v5;
  v23.size.width = v8;
  v23.size.height = v7;
  v13 = CGRectGetMaxY(v23);
  v24.origin.x = v3;
  v24.origin.y = v2;
  v24.size.width = v17;
  v24.size.height = v4;
  if (vabdd_f64(v13, CGRectGetMaxY(v24)) >= 5.0)
  {
LABEL_8:
    v27.origin.x = v6;
    v27.origin.y = v5;
    v27.size.width = v8;
    v27.size.height = v7;
    MinX = CGRectGetMinY(v27);
    v28.origin.x = v3;
    v28.origin.y = v2;
    v28.size.width = v17;
    v28.size.height = v4;
    v15 = CGRectGetMinY(v28);
  }
  else
  {
    v25.origin.x = v6;
    v25.origin.y = v5;
    v25.size.width = v8;
    v25.size.height = v7;
    MinX = CGRectGetMinX(v25);
    v26.origin.x = v3;
    v26.origin.y = v2;
    v26.size.width = v17;
    v26.size.height = v4;
    v15 = CGRectGetMinX(v26);
  }
  return MinX >= v15;
}

BOOL sub_63CAC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_63D04((double *)v7, (double *)v9);
}

BOOL sub_63D04(double *a1, double *a2)
{
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  double MinY;
  double v10;
  double MaxY;
  double v12;
  double v13;
  double MinX;
  double v15;
  CGFloat v17;
  double v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v3 = a2[5];
  v2 = a2[6];
  v4 = a2[8];
  v17 = a2[7];
  v6 = a1[5];
  v5 = a1[6];
  v8 = a1[7];
  v7 = a1[8];
  v19.origin.x = v6;
  v19.origin.y = v5;
  v19.size.width = v8;
  v19.size.height = v7;
  MinY = CGRectGetMinY(v19);
  v20.origin.x = v3;
  v20.origin.y = v2;
  v20.size.width = v17;
  v20.size.height = v4;
  v10 = CGRectGetMinY(v20);
  if (MinY > v10)
    v10 = MinY;
  v18 = v10;
  v21.origin.x = v6;
  v21.origin.y = v5;
  v21.size.width = v8;
  v21.size.height = v7;
  MaxY = CGRectGetMaxY(v21);
  v22.origin.x = v3;
  v22.origin.y = v2;
  v22.size.width = v17;
  v22.size.height = v4;
  v12 = CGRectGetMaxY(v22);
  if (v12 >= MaxY)
    v12 = MaxY;
  if (v18 >= v12)
    goto LABEL_8;
  v23.origin.x = v6;
  v23.origin.y = v5;
  v23.size.width = v8;
  v23.size.height = v7;
  v13 = CGRectGetMaxY(v23);
  v24.origin.x = v3;
  v24.origin.y = v2;
  v24.size.width = v17;
  v24.size.height = v4;
  if (vabdd_f64(v13, CGRectGetMaxY(v24)) >= 5.0)
  {
LABEL_8:
    v27.origin.x = v6;
    v27.origin.y = v5;
    v27.size.width = v8;
    v27.size.height = v7;
    MinX = CGRectGetMinY(v27);
    v28.origin.x = v3;
    v28.origin.y = v2;
    v28.size.width = v17;
    v28.size.height = v4;
    v15 = CGRectGetMinY(v28);
  }
  else
  {
    v25.origin.x = v6;
    v25.origin.y = v5;
    v25.size.width = v8;
    v25.size.height = v7;
    MinX = CGRectGetMinX(v25);
    v26.origin.x = v3;
    v26.origin.y = v2;
    v26.size.width = v17;
    v26.size.height = v4;
    v15 = CGRectGetMinX(v26);
  }
  return MinX >= v15;
}

BOOL sub_63E78(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_63ED0((double *)v7, (double *)v9);
}

BOOL sub_63ED0(double *a1, double *a2)
{
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  double MinY;
  double v10;
  double MaxY;
  double v12;
  double v13;
  double MinX;
  double v15;
  CGFloat v17;
  double v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v3 = a1[5];
  v2 = a1[6];
  v4 = a1[8];
  v17 = a1[7];
  v6 = a2[5];
  v5 = a2[6];
  v8 = a2[7];
  v7 = a2[8];
  v19.origin.x = v6;
  v19.origin.y = v5;
  v19.size.width = v8;
  v19.size.height = v7;
  MinY = CGRectGetMinY(v19);
  v20.origin.x = v3;
  v20.origin.y = v2;
  v20.size.width = v17;
  v20.size.height = v4;
  v10 = CGRectGetMinY(v20);
  if (MinY > v10)
    v10 = MinY;
  v18 = v10;
  v21.origin.x = v6;
  v21.origin.y = v5;
  v21.size.width = v8;
  v21.size.height = v7;
  MaxY = CGRectGetMaxY(v21);
  v22.origin.x = v3;
  v22.origin.y = v2;
  v22.size.width = v17;
  v22.size.height = v4;
  v12 = CGRectGetMaxY(v22);
  if (v12 >= MaxY)
    v12 = MaxY;
  if (v18 >= v12)
    goto LABEL_8;
  v23.origin.x = v6;
  v23.origin.y = v5;
  v23.size.width = v8;
  v23.size.height = v7;
  v13 = CGRectGetMaxY(v23);
  v24.origin.x = v3;
  v24.origin.y = v2;
  v24.size.width = v17;
  v24.size.height = v4;
  if (vabdd_f64(v13, CGRectGetMaxY(v24)) >= 5.0)
  {
LABEL_8:
    v27.origin.x = v6;
    v27.origin.y = v5;
    v27.size.width = v8;
    v27.size.height = v7;
    MinX = CGRectGetMinY(v27);
    v28.origin.x = v3;
    v28.origin.y = v2;
    v28.size.width = v17;
    v28.size.height = v4;
    v15 = CGRectGetMinY(v28);
  }
  else
  {
    v25.origin.x = v6;
    v25.origin.y = v5;
    v25.size.width = v8;
    v25.size.height = v7;
    MinX = CGRectGetMinX(v25);
    v26.origin.x = v3;
    v26.origin.y = v2;
    v26.size.width = v17;
    v26.size.height = v4;
    v15 = CGRectGetMinX(v26);
  }
  return MinX < v15;
}

BOOL sub_64040(uint64_t a1, uint64_t a2)
{
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  _BOOL8 result;
  CGRect v11;
  CGRect v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(double *)(a1 + 40);
  v3 = *(double *)(a1 + 48);
  v4 = *(double *)(a1 + 56);
  v5 = *(double *)(a1 + 64);
  v6 = *(double *)(a2 + 40);
  v7 = *(double *)(a2 + 48);
  v8 = *(double *)(a2 + 56);
  v9 = *(double *)(a2 + 64);
  result = CGRectEqualToRect(*(CGRect *)(a1 + 8), *(CGRect *)(a2 + 8));
  if (result)
  {
    v11.origin.x = v2;
    v11.origin.y = v3;
    v11.size.width = v4;
    v11.size.height = v5;
    v12.origin.x = v6;
    v12.origin.y = v7;
    v12.size.width = v8;
    v12.size.height = v9;
    return CGRectEqualToRect(v11, v12);
  }
  return result;
}

unint64_t sub_640D8()
{
  unint64_t result;

  result = qword_3B8398;
  if (!qword_3B8398)
  {
    result = swift_getWitnessTable(&unk_2E7300, &type metadata for DocumentRectList.Element);
    atomic_store(result, (unint64_t *)&qword_3B8398);
  }
  return result;
}

_QWORD *sub_6411C(uint64_t a1, char a2)
{
  int64_t v3;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    sub_F5238(0, v3, 0);
    result = _swiftEmptyArrayStorage;
    v6 = _swiftEmptyArrayStorage[2];
    v7 = 72 * v6 + 48;
    v8 = (uint64_t *)(a1 + 64);
    do
    {
      v9 = *(v8 - 4);
      v10 = *(v8 - 3);
      v11 = *(v8 - 2);
      v12 = *(v8 - 1);
      v13 = *v8;
      if ((a2 & 1) != 0)
        v14 = *(v8 - 2);
      else
        v14 = *(v8 - 3);
      if ((a2 & 1) != 0)
        v15 = *(v8 - 3);
      else
        v15 = *(v8 - 2);
      if ((a2 & 1) != 0)
        v16 = *v8;
      else
        v16 = *(v8 - 1);
      if ((a2 & 1) != 0)
        v17 = *(v8 - 1);
      else
        v17 = *v8;
      v21 = result;
      v18 = result[3];
      v19 = v6 + 1;
      if (v6 >= v18 >> 1)
      {
        sub_F5238(v18 > 1, v6 + 1, 1);
        result = v21;
      }
      result[2] = v19;
      v20 = (_QWORD *)((char *)result + v7);
      *(v20 - 2) = v9;
      *(v20 - 1) = v10;
      *v20 = v11;
      v20[1] = v12;
      v20[2] = v13;
      v20[3] = v14;
      v20[4] = v15;
      v7 += 72;
      v20[5] = v16;
      v20[6] = v17;
      v8 += 5;
      v6 = v19;
      --v3;
    }
    while (v3);
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentRectList()
{
  return &type metadata for DocumentRectList;
}

__n128 initializeWithTake for ContentMessage.Selection(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DocumentRectList.Element(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DocumentRectList.Element(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DocumentRectList.Element()
{
  return &type metadata for DocumentRectList.Element;
}

void sub_642E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;

  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(a6 + 32))(a4, a6);
  v13 = v12;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  (*(void (**)(uint64_t, uint64_t))(a5 + 8))(a3, a5);
  v16 = v15;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 16))(a4, a6);
  v19 = v18 & ~(v18 >> 63);
  v20 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  v21 = objc_msgSend(v20, "initWithManifestId:assetId:chapterIndex:spineIndex:", v14, v17, v19, (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 120))(a3, a5));

  if (!v21)
    __break(1u);
}

id static UIFont.preferredFont(forTextStyle:weight:)(uint64_t a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v2 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", a1);
  v3 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:", a1);
  v4 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v3, "pointSize");
  v5 = objc_msgSend(v4, "systemFontOfSize:weight:");
  v6 = objc_msgSend(v2, "scaledFontForFont:", v5);

  return v6;
}

id sub_644E8(uint64_t a1, uint64_t a2)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v4 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", a1);
  v5 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:", a1);
  v6 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v5, "pointSize");
  v7 = objc_msgSend(v6, "systemFontOfSize:weight:");
  v8 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithPreferredContentSizeCategory:", a2);
  v9 = objc_msgSend(v6, "preferredFontForTextStyle:compatibleWithTraitCollection:", a1, v8);

  objc_msgSend(v9, "pointSize");
  v10 = objc_msgSend(v4, "scaledFontForFont:maximumPointSize:", v7);

  return v10;
}

BOOL String.isCFI.getter()
{
  Swift::String v0;
  Swift::String v1;

  v0._countAndFlagsBits = 0x2869666362757065;
  v0._object = (void *)0xE800000000000000;
  if (!String.hasPrefix(_:)(v0))
    return 0;
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  return String.hasSuffix(_:)(v1);
}

uint64_t String.redactedCFI.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[4];
  uint64_t v16;

  v4 = sub_319AC(&qword_3B83A0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8._countAndFlagsBits = 0x2869666362757065;
  v8._object = (void *)0xE800000000000000;
  if (String.hasPrefix(_:)(v8)
    && (v9._countAndFlagsBits = 41, v9._object = (void *)0xE100000000000000, String.hasSuffix(_:)(v9)))
  {
    v10 = sub_319AC(&qword_3B83A8);
    v11 = sub_3DCC0(&qword_3B83B0, &qword_3B83A0, (uint64_t)&protocol conformance descriptor for Regex<A>);
    Regex.init<A>(_:)(sub_6483C, 0, v10, v4, v11);
    v15[2] = a1;
    v15[3] = a2;
    v15[0] = 0x657463616465725BLL;
    v15[1] = 0xEA00000000005D64;
    v12 = sub_64A7C();
    v13 = sub_64AC0();
    RangeReplaceableCollection<>.replacing<A, B>(_:with:maxReplacements:)(&v16, v7, v15, 0x7FFFFFFFFFFFFFFFLL, &type metadata for String, &type metadata for String, v4, v12, v13, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return v16;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
  }
  return a1;
}

uint64_t sub_6483C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a1;
  v1 = sub_319AC(&qword_3B83D0);
  v26 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_319AC(&qword_3B83A0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for _RegexFactory(0, v5);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_319AC(&qword_3B83D8);
  v25 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v17 = (uint64_t *)((char *)&v24 - v16);
  makeFactory()(v18);
  sub_64B04((uint64_t)v3);
  v19 = sub_319AC(&qword_3B83A8);
  v20 = sub_3DCC0(&qword_3B83E0, &qword_3B83D0, (uint64_t)&protocol conformance descriptor for Regex<A>);
  _RegexFactory.capture<A, B>(_:)(v3, v19, v1, v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  Capture.init(_:)(v7, v19);
  v21 = sub_3DCC0(&qword_3B83E8, &qword_3B83D8, (uint64_t)&protocol conformance descriptor for Capture<A>);
  static RegexComponentBuilder.buildExpression<A>(_:)(v17, v14, v12, v21);
  v22 = *(void (**)(char *, uint64_t))(v25 + 8);
  v22(v14, v12);
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(v17, v12, v21);
  return ((uint64_t (*)(_QWORD *, uint64_t))v22)(v17, v12);
}

unint64_t sub_64A7C()
{
  unint64_t result;

  result = qword_3B83B8;
  if (!qword_3B83B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_3B83B8);
  }
  return result;
}

unint64_t sub_64AC0()
{
  unint64_t result;

  result = qword_3B83C0;
  if (!qword_3B83C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_3B83C0);
  }
  return result;
}

uint64_t sub_64B04@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __n128 v46;
  unint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v57 = a1;
  v53 = sub_319AC(&qword_3B83D0);
  v56 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v54 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v51 = (char *)&v48 - v3;
  __chkstk_darwin(v4);
  v55 = (char *)&v48 - v5;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v48 - v8;
  v60 = type metadata accessor for _RegexFactory(0, v7);
  v52 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_319AC(&qword_3B83F0);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CharacterClass(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_319AC(&qword_3B83F8);
  v19 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v58 = (unint64_t *)((char *)&v48 - v23);
  v63 = 91;
  v64 = 0xE100000000000000;
  v24 = sub_5C5F4();
  v25 = static RegexComponentBuilder.buildExpression<A>(_:)(&v65, &v63, &type metadata for String, v24);
  static RegexComponent<>.word.getter(v25);
  v26 = type metadata accessor for RegexRepetitionBehavior(0);
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v14, 1, 1, v26);
  makeFactory()(v27);
  v28 = sub_6563C();
  _RegexFactory.oneOrMore<A, B>(_:_:)(v18, v14, &type metadata for Substring, v15, v28);
  sub_65684((uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v50 = *(void (**)(char *, uint64_t))(v52 + 8);
  v50(v11, v60);
  v29 = v9;
  v49 = v9;
  OneOrMore.init(_:)(v9, &type metadata for Substring);
  v30 = sub_3DCC0(&qword_3B8408, &qword_3B83F8, (uint64_t)&protocol conformance descriptor for OneOrMore<A>);
  v31 = v58;
  v32 = v59;
  static RegexComponentBuilder.buildExpression<A>(_:)(v58, v21, v59, v30);
  v52 = *(_QWORD *)(v19 + 8);
  ((void (*)(char *, uint64_t))v52)(v21, v32);
  v61 = 93;
  v62 = 0xE100000000000000;
  v48 = v24;
  static RegexComponentBuilder.buildExpression<A>(_:)(&v63, &v61, &type metadata for String, v24);
  v33 = v66;
  v61 = v65;
  v62 = v66;
  static RegexComponentBuilder.buildPartialBlock<A>(first:)(&v61, &type metadata for String, v24);
  swift_bridgeObjectRelease(v33);
  makeFactory()(v34);
  v35 = sub_3DCC0(&qword_3B83E0, &qword_3B83D0, (uint64_t)&protocol conformance descriptor for Regex<A>);
  v36 = v51;
  v37 = v53;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v29, v53, v35);
  v38 = v54;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v31, v32, v30);
  v39 = v55;
  v40 = v36;
  _RegexFactory.accumulate<A, B, C>(_:_:)(v36, v38, &type metadata for Substring, v37, v37, v35, v35);
  v41 = *(void (**)(char *, uint64_t))(v56 + 8);
  v41(v38, v37);
  v41(v36, v37);
  v42 = v50;
  v43 = ((uint64_t (*)(char *, uint64_t))v50)(v11, v60);
  v45 = v63;
  v44 = v64;
  makeFactory()(v43);
  v61 = v45;
  v62 = v44;
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(v39, v37, v35);
  _RegexFactory.ignoreCapturesInTypedOutput<A>(_:)(&v61, &type metadata for String, v48);
  _RegexFactory.accumulate<A, B, C>(_:_:)(v40, v38, &type metadata for Substring, v37, v37, v35, v35);
  v41(v38, v37);
  v41(v40, v37);
  v42(v11, v60);
  v46 = swift_bridgeObjectRelease(v44);
  ((void (*)(char *, uint64_t, __n128))v41)(v39, v37, v46);
  v41(v49, v37);
  return ((uint64_t (*)(_QWORD *, uint64_t))v52)(v58, v59);
}

uint64_t String.cfiSpineIndex.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t result;
  char v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD v45[2];

  v4 = type metadata accessor for NSScanner.NumberRepresentation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8._countAndFlagsBits = 0x2869666362757065;
  v8._object = (void *)0xE800000000000000;
  if (!String.hasPrefix(_:)(v8))
    return 0;
  v9._countAndFlagsBits = 41;
  v9._object = (void *)0xE100000000000000;
  if (!String.hasSuffix(_:)(v9))
    return 0;
  swift_bridgeObjectRetain(a2);
  v10 = sub_5C514(8uLL, a1, a2);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = swift_bridgeObjectRelease(a2);
  result = Substring.index(_:offsetBy:limitedBy:)(v12, -1, v10, v10, v12, v14, v16, v17);
  if ((v19 & 1) != 0)
    v20 = v10;
  else
    v20 = result;
  if (v20 >> 14 < v10 >> 14)
  {
    __break(1u);
    return result;
  }
  v21 = Substring.subscript.getter(v10);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  swift_bridgeObjectRelease(v16);
  v28 = static String._fromSubstring(_:)(v21, v23, v25, v27);
  v30 = v29;
  swift_bridgeObjectRelease(v27);
  v45[0] = v28;
  v45[1] = v30;
  v31 = sub_5C170();
  v32 = (_QWORD *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(47, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v31);
  swift_bridgeObjectRelease(v30);
  if (v32[2] < 2uLL)
  {
    swift_bridgeObjectRelease(v32);
    return 0;
  }
  v33 = v32[8];
  v34 = v32[9];
  v35 = v32[10];
  v36 = v32[11];
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease(v32);
  static String._fromSubstring(_:)(v33, v34, v35, v36);
  v38 = v37;
  swift_bridgeObjectRelease(v36);
  v39 = objc_allocWithZone((Class)NSScanner);
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend(v39, "initWithString:", v40, swift_bridgeObjectRelease(v38).n128_f64[0]);

  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for NSScanner.NumberRepresentation.decimal(_:), v4);
  v42 = NSScanner.scanInt(representation:)(v7);
  LOBYTE(v39) = v43;

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  result = 0;
  if ((v39 & 1) == 0 && (v42 & 1) == 0)
  {
    if (v42 >= 0)
      v44 = v42;
    else
      v44 = v42 + 1;
    return (v44 >> 1) - 1;
  }
  return result;
}

uint64_t String.cfiManifestID.getter(uint64_t a1, unint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  id v38;
  unint64_t v39;
  Swift::String v40;
  Swift::String_optional v41;
  Swift::String v42;
  Swift::String_optional v43;
  uint64_t countAndFlagsBits;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  unint64_t v50;
  Swift::String_optional v51;
  uint64_t v52;
  uint64_t v53;

  v4._countAndFlagsBits = 0x2869666362757065;
  v4._object = (void *)0xE800000000000000;
  if (!String.hasPrefix(_:)(v4))
    return 0;
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  if (!String.hasSuffix(_:)(v5))
    return 0;
  swift_bridgeObjectRetain(a2);
  v6 = sub_5C514(8uLL, a1, a2);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = swift_bridgeObjectRelease(a2);
  result = Substring.index(_:offsetBy:limitedBy:)(v8, -1, v6, v6, v8, v10, v12, v13);
  if ((v15 & 1) != 0)
    v16 = v6;
  else
    v16 = result;
  if (v16 >> 14 >= v6 >> 14)
  {
    v17 = Substring.subscript.getter(v6);
    v19 = v18;
    v21 = v20;
    v23 = v22;
    swift_bridgeObjectRelease(v12);
    v24 = static String._fromSubstring(_:)(v17, v19, v21, v23);
    v26 = v25;
    swift_bridgeObjectRelease(v23);
    v51.value._countAndFlagsBits = v24;
    v51.value._object = v26;
    v27 = sub_5C170();
    v28 = (_QWORD *)StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)(47, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, &type metadata for String, v27);
    swift_bridgeObjectRelease(v26);
    if (v28[2] >= 2uLL)
    {
      v30 = v28[8];
      v31 = (void *)v28[9];
      v33 = v28[10];
      v32 = v28[11];
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v28);
      static String._fromSubstring(_:)(v30, v31, v33, v32);
      v35 = v34;
      v36 = objc_allocWithZone((Class)NSScanner);
      v37 = String._bridgeToObjectiveC()();
      v38 = objc_msgSend(v36, "initWithString:", v37, swift_bridgeObjectRelease(v35).n128_f64[0]);

      v51.value._countAndFlagsBits = v30;
      v51.value._object = v31;
      v52 = v33;
      v53 = v32;
      v49 = 93;
      v50 = 0xE100000000000000;
      v39 = sub_655E8();
      LOBYTE(v37) = StringProtocol.contains<A>(_:)(&v49, &type metadata for Substring, &type metadata for String, v39, v27);
      swift_bridgeObjectRelease(v32);
      if ((v37 & 1) == 0)
      {

        return 0;
      }
      v40._countAndFlagsBits = 91;
      v40._object = (void *)0xE100000000000000;
      v41 = NSScanner.scanUpToString(_:)(v40);
      swift_bridgeObjectRelease(v41.value._object);
      v42._countAndFlagsBits = 93;
      v42._object = (void *)0xE100000000000000;
      v43 = NSScanner.scanUpToString(_:)(v42);
      countAndFlagsBits = v43.value._countAndFlagsBits;
      if (!v43.value._object)
      {

        return countAndFlagsBits;
      }
      v51 = v43;
      v49 = 91;
      v50 = 0xE100000000000000;
      v48[0] = 0;
      v48[1] = 0xE000000000000000;
      countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v49, v48, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v27, v27, v27);
      v46 = (unint64_t)v45;
      swift_bridgeObjectRelease(v43.value._object);

      v47 = HIBYTE(v46) & 0xF;
      if ((v46 & 0x2000000000000000) == 0)
        v47 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
      if (v47)
        return countAndFlagsBits;
      v29 = (_QWORD *)v46;
    }
    else
    {
      v29 = v28;
    }
    swift_bridgeObjectRelease(v29);
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t String.isUnknownLocation.getter(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000017 && a2 == 0x80000000002C7710)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 0xD000000000000017, 0x80000000002C7710, 0);
}

unint64_t sub_655E8()
{
  unint64_t result;

  result = qword_3B83C8;
  if (!qword_3B83C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_3B83C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for CFI()
{
  return &type metadata for CFI;
}

unint64_t sub_6563C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8400;
  if (!qword_3B8400)
  {
    v1 = type metadata accessor for CharacterClass(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CharacterClass, v1);
    atomic_store(result, (unint64_t *)&qword_3B8400);
  }
  return result;
}

uint64_t sub_65684(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC(&qword_3B83F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_656C4()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 60;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return swift_bridgeObjectRelease(0xE100000000000000);
}

uint64_t sub_657A0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_65864(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a2 + 64;
    for (i = a1 + 64; *(_QWORD *)(i - 32) == *(_QWORD *)(v3 - 32); i += 40)
    {
      result = CGRectEqualToRect(*(CGRect *)(i - 24), *(CGRect *)(v3 - 24));
      if (!result)
        return result;
      v3 += 40;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_658EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a2 + 48);
    v4 = (_BYTE *)(a1 + 48);
    do
    {
      if (*v4 == 1)
      {
        if ((*v3 & 1) == 0)
          return 0;
      }
      else
      {
        if ((*v3 & 1) != 0)
          return 0;
        if (*((_QWORD *)v4 - 2) != *((_QWORD *)v3 - 2) || *((_QWORD *)v4 - 1) != *((_QWORD *)v3 - 1))
          return 0;
      }
      v3 += 24;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_65960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (!CGRectEqualToRect(*(CGRect *)(a1 + 32), *(CGRect *)(a2 + 32)))
    return 0;
  v5 = a2 + 88;
  v6 = a1 + 88;
  do
  {
    v7 = --v2 == 0;
    if (!v2)
      break;
    v8 = v5 + 32;
    v9 = v6 + 32;
    v10 = CGRectEqualToRect(*(CGRect *)(v6 - 24), *(CGRect *)(v5 - 24));
    v6 = v9;
    v5 = v8;
  }
  while (v10);
  return v7;
}

uint64_t sub_65A0C(int64x2_t *a1, int64x2_t *a2)
{
  uint64_t v2;
  int64x2_t *v3;
  int64x2_t *v4;
  uint64_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int32x2_t v9;
  BOOL v11;

  v2 = a1[1].i64[0];
  if (v2 != a2[1].i64[0])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = a1 + 2;
  v4 = a2 + 2;
  v5 = v2 - 1;
  do
  {
    v6 = *v3++;
    v7 = v6;
    v8 = *v4++;
    v9 = vmovn_s64(vceqq_s64(v7, v8));
    v11 = v5-- != 0;
  }
  while ((v9.i8[0] & v9.i8[4] & 1) != 0 && v11);
  return v9.i8[0] & v9.i8[4] & 1;
}

BOOL sub_65A7C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  if (v2 == 1)
    return 1;
  v4 = v2 - 2;
  v5 = a1 + 5;
  v6 = a2 + 5;
  do
  {
    v8 = *v5++;
    v7 = v8;
    v10 = *v6++;
    v9 = v10;
    v12 = v4-- != 0;
    result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_65AF0(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t result;
  Swift::Int v29;
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *);
  uint64_t v48;
  char *v49;
  Swift::Int v50;
  uint64_t v51;
  _BYTE v52[32];
  uint64_t v53;

  v39 = a5;
  v40 = a8;
  v47 = a1;
  v48 = a2;
  v38 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v49 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8));
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v18 = (char *)&v38 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a6);
  v41 = *(_QWORD *)(v21 - 8);
  v42 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v38 - v22;
  v24 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v24)
    return static Array._allocateUninitialized(_:)(0, a4);
  v45 = AssociatedTypeWitness;
  v25 = v8;
  v26 = a4;
  v27 = v24;
  v53 = ContiguousArray.init()(v26);
  v43 = type metadata accessor for ContiguousArray(0, v26);
  ContiguousArray.reserveCapacity(_:)(v27);
  v46 = v25;
  result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v29 = v27;
    v44 = v20;
    while (v29)
    {
      v50 = v29;
      v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v52, v23, a3, a6);
      v31 = *(void (**)(char *))(v15 + 16);
      v32 = v15;
      v33 = v45;
      v31(v18);
      v30(v52, 0);
      v34 = v23;
      v35 = v18;
      v36 = v44;
      v37 = v51;
      v47(v35, v49);
      if (v37)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
        swift_release(v53);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v40, v49, v39);
      }
      v51 = 0;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      ContiguousArray.append(_:)(v36, v43);
      result = dispatch thunk of Collection.formIndex(after:)(v34, a3, a6);
      v29 = v50 - 1;
      v15 = v32;
      v18 = v35;
      v23 = v34;
      if (v50 == 1)
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
        return v53;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void SpreadPaginationEntity.Column.location.getter(uint64_t a1@<X8>)
{
  __int128 *v1;
  char v2;
  __int128 v3;

  v2 = *((_BYTE *)v1 + 16);
  v3 = 0uLL;
  if ((v2 & 1) == 0)
    v3 = *v1;
  *(_OWORD *)a1 = v3;
  *(_BYTE *)(a1 + 16) = v2;
}

void SpreadPaginationEntity.lastLocation.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v2)
    goto LABEL_10;
  v3 = (_BYTE *)(*(_QWORD *)v1 + 24 * v2 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  while (*v3 == 1)
  {
    v3 -= 24;
    if (!--v4)
      goto LABEL_10;
  }
  if (v4)
  {
    if (v4 > v2)
    {
      __break(1u);
    }
    else if ((*v3 & 1) == 0)
    {
      *(_OWORD *)a1 = *((_OWORD *)v3 - 1);
      *(_BYTE *)(a1 + 16) = 0;
      return;
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
  }
}

void SpreadPaginationEntity.firstLocation.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _BYTE *v4;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v2)
    goto LABEL_7;
  v3 = 0;
  v4 = (_BYTE *)(*(_QWORD *)v1 + 48);
  while (*v4 == 1)
  {
    ++v3;
    v4 += 24;
    if (v2 == v3)
      goto LABEL_7;
  }
  if (v2 == v3)
  {
LABEL_7:
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    return;
  }
  if (v3 >= v2)
  {
    __break(1u);
  }
  else if ((*v4 & 1) == 0)
  {
    *(_OWORD *)a1 = *((_OWORD *)v4 - 1);
    *(_BYTE *)(a1 + 16) = 0;
    return;
  }
  __break(1u);
}

uint64_t SpreadPaginationEntity.columns.getter()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t SpreadPaginationEntity.Column.description.getter()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
    return 1600085855;
  sub_656C4();
  return 0;
}

void SpreadPaginationEntity.Column.hash(into:)()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;

  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    v1 = 0;
  }
  else
  {
    v2 = *(_QWORD *)v0;
    v1 = *(_QWORD *)(v0 + 8);
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(v1);
}

BOOL static SpreadPaginationEntity.Column.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 16) == 1)
    return (*(_BYTE *)(a2 + 16) & 1) != 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    return 0;
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

Swift::Int SpreadPaginationEntity.Column.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;
  Swift::UInt v2;
  char v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v6, 0);
  v4 = 0;
  if ((v3 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    v4 = v2;
  }
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

Swift::Int sub_66040(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt v3;
  char v4;
  _QWORD v6[9];

  v3 = *(_QWORD *)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  if ((v4 & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v3);
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t static SpreadPaginationEntity.initial(location:columnCount:configuration:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  __int128 v15;

  if (__OFSUB__(a2, 1))
  {
    __break(1u);
  }
  else
  {
    v5 = a3;
    v6 = a5;
    v15 = *a1;
    v7 = sub_664A4(0, 0, 1, a2 - 1);
    v9 = swift_bridgeObjectRetain(v7);
    v10 = v7;
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) != 0)
      goto LABEL_3;
  }
  v10 = sub_41F14(0, v7[2] + 1, 1, v7);
LABEL_3:
  v12 = v10[2];
  v11 = v10[3];
  if (v12 >= v11 >> 1)
    v10 = sub_41F14((_QWORD *)(v11 > 1), v12 + 1, 1, v10);
  v10[2] = v12 + 1;
  v13 = &v10[3 * v12];
  *((_OWORD *)v13 + 2) = v15;
  *((_BYTE *)v13 + 48) = 0;
  swift_bridgeObjectRelease(v7);
  *v6 = v10;
  v6[1] = v5;
  v6[2] = a4;
  return swift_bridgeObjectRetain(a4);
}

uint64_t static SpreadPaginationEntity.nonInitial<A>(locations:columnCount:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v14 = *(_QWORD *)(a5 - 8);
  v15 = __chkstk_darwin(a1);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v17, a1, v18, v15);
  if (a2 < 1)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v20 = dispatch thunk of Collection.count.getter(a5, a6);
  result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, a5);
  if (v20 < 1 || v20 > a2)
    goto LABEL_10;
  v23 = sub_65AF0((void (*)(char *, char *))sub_66304, 0, a5, (uint64_t)&type metadata for SpreadPaginationEntity.Column, (uint64_t)&type metadata for Never, a6, (uint64_t)&protocol witness table for Never, v21);
  result = dispatch thunk of Collection.count.getter(a5, a6);
  if (!__OFSUB__(a2, result))
  {
    v24 = sub_664A4(0, 0, 1, a2 - result);
    v25 = v23;
    sub_6656C((uint64_t)v24);
    *a7 = v25;
    a7[1] = a3;
    a7[2] = a4;
    return swift_bridgeObjectRetain(a4);
  }
LABEL_11:
  __break(1u);
  return result;
}

__n128 sub_66304@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u8[0] = 0;
  return result;
}

Swift::Bool __swiftcall SpreadPaginationEntity.contains(_:)(BookEPUB::PageLocation a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *i;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  if (!v2)
    return 0;
  for (i = (_BYTE *)(*(_QWORD *)v1 + 48);
        *i == 1
     || *((_QWORD *)i - 2) != *(_QWORD *)a1.documentOrdinal
     || *((_QWORD *)i - 1) != *(_QWORD *)(a1.documentOrdinal + 8);
        i += 24)
  {
    if (!--v2)
      return 0;
  }
  return 1;
}

uint64_t SpreadPaginationEntity.description.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;

  v1 = *v0;
  v2 = swift_bridgeObjectRetain(*v0);
  v3 = sub_E49E0(v2);
  swift_bridgeObjectRelease(v1);
  v4 = sub_319AC((uint64_t *)&unk_3B8C90);
  v5 = sub_41BF4();
  v6 = BidirectionalCollection<>.joined(separator:)(124, 0xE100000000000000, v4, v5);
  v8 = v7;
  swift_bridgeObjectRelease(v3);
  v9._countAndFlagsBits = v6;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v8);
  v10._countAndFlagsBits = 93;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 91;
}

uint64_t static SpreadPaginationEntity.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if ((sub_658EC(*a1, *a2) & 1) == 0)
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v4, v5, 0);
}

_QWORD *sub_664A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v9;
  char *v10;

  if (a4 < 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    v4 = a4;
    if (a4)
    {
      result = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(a4, &type metadata for SpreadPaginationEntity.Column);
      result[2] = v4;
      v9 = 4;
      do
      {
        v10 = (char *)&result[v9];
        *(_QWORD *)v10 = a1;
        *((_QWORD *)v10 + 1) = a2;
        v10[16] = a3 & 1;
        v9 += 3;
        --v4;
      }
      while (v4);
    }
    else
    {
      return &_swiftEmptyArrayStorage;
    }
  }
  return result;
}

void sub_6656C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_41F14(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[3 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[3 * v2] && (unint64_t)v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 24 * v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_666B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_42140(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_66808(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_43188(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  sub_319AC(&qword_3B67F8);
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_66968(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_42034(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

uint64_t sub_66AAC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8));
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((char *)&dword_18 + (v4 & 0xFFFFFFFFFFFFFF8)) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_F9F20(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8));
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((char *)&dword_10 + (*v1 & 0xFFFFFFFFFFFFFF8)) = v14;
LABEL_19:
    swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

void sub_66C64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_42500(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[5 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[5 * v2] && (unint64_t)v9 < a1 + 32 + 40 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 40 * v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

unint64_t sub_66DB4()
{
  unint64_t result;

  result = qword_3B8410;
  if (!qword_3B8410)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SpreadPaginationEntity.Column, &type metadata for SpreadPaginationEntity.Column);
    atomic_store(result, (unint64_t *)&qword_3B8410);
  }
  return result;
}

uint64_t destroy for SpreadPaginationEntity(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s8BookEPUB22SpreadPaginationEntityVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for SpreadPaginationEntity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for SpreadPaginationEntity(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SpreadPaginationEntity(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SpreadPaginationEntity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpreadPaginationEntity()
{
  return &type metadata for SpreadPaginationEntity;
}

__n128 initializeWithTake for ContentMessage.ReadAloud.Payload(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpreadPaginationEntity.Column(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SpreadPaginationEntity.Column(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_67004(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_67020(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SpreadPaginationEntity.Column()
{
  return &type metadata for SpreadPaginationEntity.Column;
}

uint64_t WKWebView.identifier.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, "be_identifier");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

void ContentLoaderView.setDelegate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4;

  v4 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  objc_msgSend(v4, "setDelegate:", a1);

}

void ContentLoaderView.addPeripheralView(_:length:)(void *a1, double a2)
{
  void *v2;
  void *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  Class isa;

  v3 = v2;
  objc_msgSend(v2, "addSubview:", a1);
  v6 = (void *)objc_opt_self(NSLayoutConstraint);
  v7 = sub_319AC((uint64_t *)&unk_3B8440);
  v8 = swift_allocObject(v7, 64);
  *(_OWORD *)(v8 + 16) = xmmword_2E74C0;
  v9 = objc_msgSend(a1, "leftAnchor");
  v10 = objc_msgSend(v3, "leftAnchor");
  v11 = objc_msgSend(v9, "constraintEqualToAnchor:constant:", v10, -a2);

  *(_QWORD *)(v8 + 32) = v11;
  v12 = objc_msgSend(a1, "topAnchor");
  v13 = objc_msgSend(v3, "topAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:constant:", v13, -a2);

  *(_QWORD *)(v8 + 40) = v14;
  v15 = objc_msgSend(a1, "rightAnchor");
  v16 = objc_msgSend(v3, "rightAnchor");
  v17 = objc_msgSend(v15, "constraintEqualToAnchor:constant:", v16, a2);

  *(_QWORD *)(v8 + 48) = v17;
  v18 = objc_msgSend(a1, "bottomAnchor");
  v19 = objc_msgSend(v3, "bottomAnchor");
  v20 = objc_msgSend(v18, "constraintEqualToAnchor:constant:", v19, a2);

  *(_QWORD *)(v8 + 56) = v20;
  specialized Array._endMutation()(v21);
  sub_34450(0, &qword_3BE540, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "activateConstraints:", isa, swift_bridgeObjectRelease(v8).n128_f64[0]);

}

Swift::Void __swiftcall ContentLoaderView.removePeripheralView(_:)(UIView a1)
{
  -[objc_class removeFromSuperview](a1.super.super.isa, "removeFromSuperview");
}

uint64_t ContentLoaderView.prepareForReuse(completion:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t ContentLoaderView.shortDescription.getter()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, "description");
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id sub_673FC()
{
  uint64_t v0;
  id result;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3B8420);
  sub_555F0(v0, (uint64_t)qword_3B8420);
  result = _BookEPUBLog();
  if (result)
    return (id)Logger.init(_:)(result);
  __break(1u);
  return result;
}

id ContentLoaderView.apply(layoutProvider:paginationOptions:cfiOptions:cleanupOptions:stylesheetSet:styleManager:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t ObjectType;
  uint64_t v5;

  ObjectType = swift_getObjectType(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 48))(ObjectType, a2);
  static CGRect.from(size:)(v5);
  return objc_msgSend(v2, "setFrame:");
}

Swift::Void __swiftcall WKWebView.preparingForReuse()()
{
  void *v0;

  objc_msgSend(v0, "be_preparingForReuse");
}

Swift::Void __swiftcall WKWebView.fontRegistrationCompleted(fontRegistrationSuccess:)(Swift::Bool fontRegistrationSuccess)
{
  void *v1;

  objc_msgSend(v1, "be_fontRegistrationCompleted:", fontRegistrationSuccess);
}

Swift::Void __swiftcall WKWebView.processingContentViewForHost()()
{
  void *v0;

  objc_msgSend(v0, "be_processingContentViewForHost");
}

Swift::Void __swiftcall WKWebView.returningContentViewToPool()()
{
  void *v0;

  objc_msgSend(v0, "be_returningContentViewToPool");
}

Swift::Void __swiftcall WKWebView.discardingContentView()()
{
  void *v0;

  objc_msgSend(v0, "be_discardingContentView");
}

Swift::Bool __swiftcall WKWebView.fontRegistered(font:)(Swift::String_optional font)
{
  void *v1;
  NSString v2;
  unsigned __int8 v3;

  if (!font.value._object)
    return 1;
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "be_isFontRegistered:", v2);

  return v3;
}

void WKWebView.registerFont(styleManager:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  _QWORD v6[6];

  v6[4] = a2;
  v6[5] = a3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_525E4;
  v6[3] = &unk_37C420;
  v5 = _Block_copy(v6);
  swift_retain();
  objc_msgSend(v3, "be_configureFontWithStyleManager:completion:", a1, v5, swift_release().n128_f64[0]);
  _Block_release(v5);
}

uint64_t sub_675FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_6760C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id WKWebView.setContentOffset(offset:bypassingJS:)(char a1)
{
  void *v1;

  return objc_msgSend(v1, "be_setContentOffset:bypassingJS:", a1 & 1);
}

double WKWebView.update(contentBlockingRules:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  double result;
  uint64_t v11;

  v3 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for MainActor(0);
  v7 = v1;
  v8 = static MainActor.shared.getter(v7);
  v9 = (_QWORD *)swift_allocObject(&unk_37C458, 48);
  v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = a1;
  v9[5] = v7;
  sub_67B40((uint64_t)v5, (uint64_t)&unk_3B8460, (uint64_t)v9);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_67710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[15] = a4;
  v5[16] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[17] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v5[18] = v7;
  v5[19] = v8;
  return swift_task_switch(sub_6777C, v7, v8);
}

uint64_t sub_6777C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + 2;
  v3 = v0[15];
  v2 = v0[16];
  v4 = objc_msgSend((id)objc_opt_self(BEContentBlockingRules), "sharedInstance");
  v0[20] = v4;
  v0[7] = v0 + 22;
  v0[2] = v0;
  v0[3] = sub_67850;
  v5 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v6 = v0 + 10;
  v6[1] = 0x40000000;
  v6[2] = sub_1C1610;
  v6[3] = &unk_37C908;
  v6[4] = v5;
  objc_msgSend(v4, "applyContentBlockingRule:toWebView:completion:", v3, v2, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_67850()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 168) = v2;
  if (v2)
    v3 = sub_678E4;
  else
    v3 = sub_678AC;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
}

uint64_t sub_678AC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 136));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_678E4()
{
  uint64_t v0;
  void *v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 160);
  v2 = swift_release();
  swift_willThrow(v2);

  if (qword_3B56C0 != -1)
    swift_once(&qword_3B56C0, sub_673FC);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = type metadata accessor for Logger(0);
  sub_555F0(v4, (uint64_t)qword_3B8420);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 168);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 80) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v10 + 4);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl(&dword_0, v6, v7, "Failed to apply content blocking rules: %{public}@", v10, 0xCu);
    v13 = sub_319AC(&qword_3B8A70);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 168));
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_67AC8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_3B845C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_6B4A4;
  return sub_67710(a1, v4, v5, v7, v6);
}

uint64_t sub_67B40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_52128(a1, &qword_3B8450);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_37C8F0, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_3B8520, v16);
}

uint64_t sub_67C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_52128(a1, &qword_3B8450);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_37C800, 32);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  v17 = sub_319AC(&qword_3B84D8);
  if (v14 | v12)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v12;
    v20[3] = v14;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, &unk_3B84D0, v16);
}

uint64_t WKWebView.availableForReuse.getter()
{
  void *v0;

  return objc_msgSend(v0, "be_hasPendingOperations") ^ 1;
}

id WKWebView.availableForReuse.setter(char a1)
{
  void *v1;

  return objc_msgSend(v1, "setBe_hasPendingOperations:", (a1 & 1) == 0);
}

id (*WKWebView.availableForReuse.modify(uint64_t a1))(uint64_t a1)
{
  void *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = objc_msgSend(v1, "be_hasPendingOperations") ^ 1;
  return sub_67E60;
}

id sub_67E60(uint64_t a1)
{
  return objc_msgSend(*(id *)a1, "setBe_hasPendingOperations:", (*(_BYTE *)(a1 + 8) & 1) == 0);
}

id WKWebView.zoomScale.getter()
{
  void *v0;

  return objc_msgSend(v0, "be_viewScale");
}

id WKWebView.zoomScale.setter()
{
  void *v0;

  return objc_msgSend(v0, "setBe_viewScale:");
}

id (*WKWebView.zoomScale.modify(_QWORD *a1))(uint64_t a1)
{
  void *v1;
  uint64_t v3;

  a1[1] = v1;
  objc_msgSend(v1, "be_viewScale");
  *a1 = v3;
  return sub_67EE0;
}

id sub_67EE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 8), "setBe_viewScale:", *(double *)a1);
}

void WKWebView.selection.getter(uint64_t *a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  _QWORD *v14;
  _QWORD *v15;

  v2 = v1;
  v4 = objc_msgSend(v1, "be_selectedText");
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v8 = v7;

    v9 = objc_msgSend(v2, "be_selectionRects");
    if (v9)
    {
      v10 = v9;
      v11 = sub_34450(0, (unint64_t *)&unk_3B8468, NSValue_ptr);
      v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

      v13 = v2;
      v14 = sub_6AB20(v12, v13);
      swift_bridgeObjectRelease(v12);

      if (v14[2])
      {
        *a1 = v6;
        a1[1] = (uint64_t)v8;
        a1[2] = (uint64_t)v14;
        return;
      }
      swift_bridgeObjectRelease(v8);
      v15 = v14;
    }
    else
    {
      v15 = v8;
    }
    swift_bridgeObjectRelease(v15);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

id WKWebView.setDelegate(_:)(uint64_t a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend(v1, "be_navigationHandler");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "setDelegate:", a1);

  }
  v5 = objc_msgSend(v1, "scrollView");
  objc_msgSend(v5, "setDelegate:", a1);

  return objc_msgSend(v1, "setBe_textInteractionAssistantDelegate:", a1);
}

uint64_t sub_680A0()
{
  void *v0;
  id v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  swift_beginAccess(&unk_3B8438, v7, 32, 0);
  v1 = objc_getAssociatedObject(v0, &unk_3B8438);
  swift_endAccess(v7);
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(v6);
    swift_unknownObjectRelease(v1);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_4E234((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    v3 = type metadata accessor for AnyCancellable(0, v2);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_52128((uint64_t)v7, (uint64_t *)&unk_3B96D0);
    return 0;
  }
}

void WKWebView.prepareForReuse(completion:)(uint8_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  __objc2_ivar *v16;
  id v17;
  __objc2_meth_list **p_class_meths;
  void *v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void *v40;
  uint8_t *v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  __objc2_meth_list *v47;
  id v48;
  uint64_t v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint8_t *v54;
  void *v55;
  id v56;
  id v57;
  __objc2_meth_list **v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint8_t *v64;
  uint8_t *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint8_t *v80;
  void *v81;
  __n128 v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  void *v87;
  id v88;
  void *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  void *v96;
  id v97;
  uint64_t v98;
  id v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  void *v103;
  id v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  Class isa;
  uint8_t *v110;
  void *v111;
  uint8_t *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint8_t *v122;
  uint8_t *v123;
  id aBlock[6];
  uint64_t v125;
  uint64_t v126;

  v3 = v2;
  v6 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_319AC(&qword_3B8478);
  v116 = *(_QWORD *)(v9 - 8);
  v117 = v9;
  __chkstk_darwin(v9);
  v115 = (char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_319AC(&qword_3B8480);
  v119 = *(_QWORD *)(v11 - 8);
  v120 = v11;
  __chkstk_darwin(v11);
  v118 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_319AC(&qword_3B8488);
  v122 = *(uint8_t **)(v13 - 8);
  v123 = (uint8_t *)v13;
  *(_QWORD *)&v14 = __chkstk_darwin(v13).n128_u64[0];
  v121 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &stru_3AC000;
  v17 = objc_msgSend(v2, "be_navigationHandler", v14);
  p_class_meths = &OBJC_PROTOCOL___BEJavascriptProvider.class_meths;
  if (v17)
  {
    v19 = v17;
    if (qword_3B56C0 != -1)
      swift_once(&qword_3B56C0, sub_673FC);
    v20 = type metadata accessor for Logger(0);
    sub_555F0(v20, (uint64_t)qword_3B8420);
    v21 = v2;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v113 = v8;
      v24 = swift_slowAlloc(12, -1);
      v114 = a2;
      v25 = (uint8_t *)v24;
      v26 = (void *)swift_slowAlloc(32, -1);
      aBlock[0] = v26;
      v112 = a1;
      *(_DWORD *)v25 = 136315138;
      v110 = v25 + 4;
      v27 = objc_msgSend(v21, "be_identifier");
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v111 = v3;
      v30 = v29;

      v8 = v113;
      v31 = v28;
      v16 = &stru_3AC000;
      v125 = sub_33524(v31, v30, (uint64_t *)aBlock);
      a1 = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v110);

      v32 = v30;
      v3 = v111;
      swift_bridgeObjectRelease(v32);
      _os_log_impl(&dword_0, v22, v23, "Requesting Cancelation of current #reuse navigation for WebView: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      v33 = v26;
      p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEJavascriptProvider + 32);
      swift_slowDealloc(v33, -1, -1);
      v34 = v25;
      a2 = v114;
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

    }
    objc_msgSend(v19, "requestCancelationOfCurrentNavigation");

  }
  if ((objc_msgSend(v3, "be_hasPendingOperations") & 1) != 0)
  {
    if (p_class_meths[216] != (__objc2_meth_list *)-1)
      swift_once(&qword_3B56C0, sub_673FC);
    v35 = type metadata accessor for Logger(0);
    sub_555F0(v35, (uint64_t)qword_3B8420);
    v36 = v3;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v114 = a2;
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = (void *)swift_slowAlloc(32, -1);
      aBlock[0] = v40;
      v113 = v8;
      *(_DWORD *)v39 = 136315138;
      v112 = v39 + 4;
      v41 = a1;
      v42 = objc_msgSend(v36, "be_identifier");
      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v45 = v44;

      a1 = v41;
      v125 = sub_33524(v43, v45, (uint64_t *)aBlock);
      a2 = v114;
      v8 = v113;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v112);

      swift_bridgeObjectRelease(v45);
      _os_log_impl(&dword_0, v37, v38, "Setting up be_hasPendingOperations #reuse observer in WebView: %s", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

    }
    swift_getKeyPath(&unk_2E7508);
    v66 = v115;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();
    swift_release();
    v67 = sub_3DCC0((unint64_t *)&unk_3B8490, &qword_3B8478, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
    v68 = v117;
    v69 = v118;
    Publisher<>.removeDuplicates()(v117, v67, &protocol witness table for Bool);
    (*(void (**)(char *, uint64_t))(v116 + 8))(v66, v68);
    v70 = sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
    aBlock[0] = (id)static OS_dispatch_queue.main.getter(v71);
    v72 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v8, 1, 1, v72);
    v73 = sub_3DCC0((unint64_t *)&unk_3B84A0, &qword_3B8480, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
    v74 = sub_49FA8();
    v75 = v120;
    v76 = v121;
    Publisher.receive<A>(on:options:)(aBlock, v8, v120, v70, v73, v74);
    sub_52128((uint64_t)v8, (uint64_t *)&unk_3B80B0);

    (*(void (**)(char *, uint64_t))(v119 + 8))(v69, v75);
    v77 = swift_allocObject(&unk_37C4D0, 24);
    swift_unknownObjectWeakInit(v77 + 16, v36);
    v78 = (_QWORD *)swift_allocObject(&unk_37C4F8, 40);
    v78[2] = v77;
    v78[3] = a1;
    v78[4] = a2;
    v79 = sub_3DCC0(&qword_3B84B0, &qword_3B8488, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain();
    v80 = v123;
    v81 = (void *)Publisher<>.sink(receiveValue:)(sub_6ADD0, v78, v123, v79);
    v82 = swift_release();
    (*((void (**)(char *, uint8_t *, __n128))v122 + 1))(v76, v80, v82);
    swift_beginAccess(&unk_3B8438, aBlock, 32, 0);
    objc_setAssociatedObject(v36, &unk_3B8438, v81, &stru_2E8.segname[9]);
    swift_endAccess(aBlock);
    swift_release();
    return;
  }
  v46 = objc_msgSend(v3, v16[104].name);
  v47 = p_class_meths[216];
  if (v46)
  {
    v48 = v46;
    if (v47 != (__objc2_meth_list *)-1)
      swift_once(&qword_3B56C0, sub_673FC);
    v49 = type metadata accessor for Logger(0);
    sub_555F0(v49, (uint64_t)qword_3B8420);
    v50 = v3;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v112 = a1;
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = (uint8_t *)swift_slowAlloc(32, -1);
      v114 = a2;
      v123 = v54;
      aBlock[0] = v54;
      v122 = v53;
      *(_DWORD *)v53 = 136315138;
      v121 = (char *)(v53 + 4);
      v55 = v3;
      v56 = objc_msgSend(v50, "be_identifier");
      v57 = v48;
      v58 = p_class_meths;
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v61 = v60;

      v3 = v55;
      v62 = v59;
      p_class_meths = v58;
      v48 = v57;
      v125 = sub_33524(v62, v61, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v121);

      v63 = v61;
      a1 = v112;
      swift_bridgeObjectRelease(v63);
      v64 = v122;
      _os_log_impl(&dword_0, v51, v52, "Preparing NavigationHandler for #reuse for WebView: %s", v122, 0xCu);
      v65 = v123;
      swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
      a2 = v114;
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);

    }
    else
    {

    }
    v95 = (_QWORD *)swift_allocObject(&unk_37C480, 40);
    v95[2] = v50;
    v95[3] = a1;
    v95[4] = a2;
    aBlock[4] = sub_6AD4C;
    aBlock[5] = v95;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_69380;
    aBlock[3] = &unk_37C498;
    v96 = _Block_copy(aBlock);
    v97 = v50;
    swift_retain();
    objc_msgSend(v48, "performAfterLoadCompleteOrFailure:", v96, swift_release().n128_f64[0]);
    _Block_release(v96);
    goto LABEL_27;
  }
  if (v47 != (__objc2_meth_list *)-1)
    swift_once(&qword_3B56C0, sub_673FC);
  v83 = type metadata accessor for Logger(0);
  sub_555F0(v83, (uint64_t)qword_3B8420);
  v48 = v3;
  v84 = Logger.logObject.getter(v48);
  v85 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v84, v85))
  {

LABEL_27:
    goto LABEL_28;
  }
  v86 = (uint8_t *)swift_slowAlloc(12, -1);
  v87 = (void *)swift_slowAlloc(32, -1);
  *(_DWORD *)v86 = 136315138;
  v123 = v86 + 4;
  aBlock[0] = v87;
  v88 = objc_msgSend(v48, "be_identifier");
  v89 = v3;
  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
  v92 = v91;

  v93 = v90;
  v3 = v89;
  v125 = sub_33524(v93, v92, (uint64_t *)aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v123);

  v94 = v92;
  p_class_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEJavascriptProvider + 32);
  swift_bridgeObjectRelease(v94);
  _os_log_impl(&dword_0, v84, v85, "Missing Navigation handler in prepareFor#Reuse for WebView: %s", v86, 0xCu);
  swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v87, -1, -1);
  swift_slowDealloc(v86, -1, -1);

LABEL_28:
  if (p_class_meths[216] != (__objc2_meth_list *)-1)
    swift_once(&qword_3B56C0, sub_673FC);
  v98 = type metadata accessor for Logger(0);
  sub_555F0(v98, (uint64_t)qword_3B8420);
  v99 = v3;
  v100 = Logger.logObject.getter(v99);
  v101 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v100, v101))
  {
    v102 = (uint8_t *)swift_slowAlloc(12, -1);
    v103 = (void *)swift_slowAlloc(32, -1);
    aBlock[0] = v103;
    *(_DWORD *)v102 = 136315138;
    v104 = objc_msgSend(v99, "be_identifier");
    v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
    v107 = v106;

    v125 = sub_33524(v105, v107, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v102 + 4);

    swift_bridgeObjectRelease(v107);
    _os_log_impl(&dword_0, v100, v101, "Load .aboutBlank in #reuse WebView: %s", v102, 0xCu);
    swift_arrayDestroy(v103, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v103, -1, -1);
    swift_slowDealloc(v102, -1, -1);

  }
  else
  {

  }
  objc_msgSend(v99, "be_willLoadAboutBlank");
  if (qword_3B56C8 != -1)
    swift_once(&qword_3B56C8, sub_6A978);
  v108 = type metadata accessor for URLRequest(0);
  sub_555F0(v108, (uint64_t)qword_3CEF00);
  isa = URLRequest._bridgeToObjectiveC()().super.isa;

}

uint64_t sub_68E58(uint64_t a1, void (*a2)(__n128), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  __n128 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];

  v34 = a4;
  v35 = a5;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v11 - 8);
  v38 = v11;
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchTime(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v34 - v21;
  a2(v20);
  sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v24 = (void *)static OS_dispatch_queue.main.getter(v23);
  static DispatchTime.now()();
  + infix(_:_:)(v18, 0.3);
  v36 = *(void (**)(char *, uint64_t))(v16 + 8);
  v36(v18, v15);
  v25 = swift_allocObject(&unk_37C4D0, 24);
  swift_unknownObjectWeakInit(v25 + 16, v34);
  v26 = (_QWORD *)swift_allocObject(&unk_37C8A0, 40);
  v27 = v35;
  v26[2] = v25;
  v26[3] = v27;
  v26[4] = a6;
  aBlock[4] = sub_6B3D8;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_37C8B8;
  v28 = _Block_copy(aBlock);
  swift_retain();
  v29 = swift_release();
  static DispatchQoS.unspecified.getter(v29);
  aBlock[0] = _swiftEmptyArrayStorage;
  v30 = sub_6B3E4();
  v31 = sub_319AC(&qword_3B96F0);
  v32 = sub_3DCC0((unint64_t *)&qword_3B8510, &qword_3B96F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v31, v32, v8, v30);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v22, v14, v10, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v38);
  return ((uint64_t (*)(char *, uint64_t))v36)(v22, v15);
}

uint64_t sub_69128(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    if (qword_3B56C0 != -1)
      swift_once(&qword_3B56C0, sub_673FC);
    v6 = type metadata accessor for Logger(0);
    sub_555F0(v6, (uint64_t)qword_3B8420);
    v7 = v5;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v18 = a2;
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v20 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = objc_msgSend(v7, "be_identifier");
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = v13;
      a2 = v18;
      v19 = sub_33524(v16, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4);

      swift_bridgeObjectRelease(v15);
      _os_log_impl(&dword_0, v8, v9, "NavigationHandler completed #reuse .aboutBlank load for WebView: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

    }
    objc_msgSend(v7, "setBe_hasPendingOperations:", 0);
    objc_msgSend(v7, "setBe_estimatedContentSizeValue:", 0);
    objc_msgSend(v7, "setBe_requestedContentOffset:", 0);
    objc_msgSend(v7, "be_completedLoad");

  }
  return a2();
}

double sub_69380(uint64_t a1, void *a2, void *aBlock)
{
  void (*v4)(void *, uint64_t (*)(), uint64_t);
  void *v5;
  uint64_t v6;
  id v7;
  double result;

  v4 = *(void (**)(void *, uint64_t (*)(), uint64_t))(a1 + 32);
  v5 = _Block_copy(aBlock);
  v6 = swift_allocObject(&unk_37C878, 24);
  *(_QWORD *)(v6 + 16) = v5;
  swift_retain();
  v7 = a2;
  v4(a2, sub_6B3A0, v6);
  swift_release();

  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

void sub_6940C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  _BYTE v34[24];

  v6 = *a1;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v34, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (!Strong)
    return;
  v9 = (void *)Strong;
  if (qword_3B56C0 != -1)
    swift_once(&qword_3B56C0, sub_673FC);
  v10 = type metadata accessor for Logger(0);
  sub_555F0(v10, (uint64_t)qword_3B8420);
  v11 = v9;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
  {

    if ((v6 & 1) == 0)
      goto LABEL_6;
LABEL_10:
    v22 = v11;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(18, -1);
      v26 = swift_slowAlloc(32, -1);
      v33[0] = v26;
      *(_DWORD *)v25 = 136315394;
      v27 = objc_msgSend(v22, "be_identifier");
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      v32 = sub_33524(v28, v30, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v25 + 4);

      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v25 + 12) = 1024;
      LODWORD(v32) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4, v25 + 14);
      _os_log_impl(&dword_0, v23, v24, "WebView: %s not available for reuse yet -- availableFor#Reuse: %{BOOL}d", (uint8_t *)v25, 0x12u);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

    }
    return;
  }
  v31 = a3;
  v14 = swift_slowAlloc(18, -1);
  v15 = swift_slowAlloc(32, -1);
  v33[0] = v15;
  *(_DWORD *)v14 = 67109378;
  LODWORD(v32) = v6 ^ 1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, (char *)&v32 + 4, v14 + 4);
  *(_WORD *)(v14 + 8) = 2080;
  v16 = objc_msgSend(v11, "be_identifier");
  v17 = v6;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v20 = v19;

  v32 = sub_33524(v18, v20, v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v14 + 10);

  swift_bridgeObjectRelease(v20);
  _os_log_impl(&dword_0, v12, v13, "be_hasPendingOperations notify Observer availableFor#Reuse:%{BOOL}d in WebView: %s", (uint8_t *)v14, 0x12u);
  swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v15, -1, -1);
  v21 = v14;
  a3 = v31;
  swift_slowDealloc(v21, -1, -1);

  if ((v17 & 1) != 0)
    goto LABEL_10;
LABEL_6:
  if (sub_680A0())
  {
    AnyCancellable.cancel()();
    swift_release();
  }
  swift_beginAccess(&unk_3B8438, v33, 32, 0);
  objc_setAssociatedObject(v11, &unk_3B8438, 0, &stru_2E8.segname[9]);
  swift_endAccess(v33);
  WKWebView.prepareForReuse(completion:)(a3, a4);

}

uint64_t WKWebView.shortDescription.getter()
{
  void *v0;
  void *v1;
  uint64_t ObjectType;
  Swift::String v3;
  void *object;
  Swift::String v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  void *v13;
  _QWORD v14[2];

  v1 = v0;
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  ObjectType = swift_getObjectType(v0);
  v3._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6 = objc_msgSend(v0, "be_identifier");
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v13 = v1;
  _print_unlocked<A, B>(_:_:)(&v13, v14, &type metadata for UnsafeMutableRawPointer, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v14[0];
}

Swift::Void __swiftcall WKWebView.dismissInteractionMenus()()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  double v14;
  uint64_t v15;

  v1 = objc_msgSend(v0, "be_textInputChild");
  v2 = objc_msgSend(v1, "interactions");

  v3 = sub_319AC(&qword_3B84B8);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
    goto LABEL_17;
  v5 = *(_QWORD *)((char *)&dword_10 + (v4 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    while (1)
    {
      v6 = 4;
      v7 = 0;
      if ((v4 & 0xC000000000000001) == 0)
        break;
      while (1)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
        v9 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
LABEL_8:
        v10 = objc_opt_self(UIEditMenuInteraction);
        v11 = (void *)swift_dynamicCastObjCClass(v8, v10);
        if (v11)
        {
          objc_msgSend(v11, "dismissMenu");
          swift_unknownObjectRelease(v8);
          if (v9 == v5)
            goto LABEL_21;
        }
        else
        {
          v12 = objc_opt_self(UIContextMenuInteraction);
          v13 = (void *)swift_dynamicCastObjCClass(v8, v12);
          if (v13)
            *(_QWORD *)&v14 = swift_unknownObjectRetain(v8).n128_u64[0];
          objc_msgSend(v13, "dismissMenu", v14);
          swift_unknownObjectRelease(v8);

          if (v9 == v5)
            goto LABEL_21;
        }
        v7 = ++v6 - 4;
        if ((v4 & 0xC000000000000001) == 0)
          goto LABEL_7;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      if (v4 < 0)
        v15 = v4;
      else
        v15 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v5 = _CocoaArrayWrapper.endIndex.getter(v15);
      if (!v5)
        goto LABEL_21;
    }
LABEL_7:
    v8 = *(_QWORD *)(v4 + 8 * v6);
    swift_unknownObjectRetain(v8);
    v9 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_16;
    goto LABEL_8;
  }
LABEL_21:
  swift_bridgeObjectRelease_n(v4, 2);
}

void sub_69AA8(uint64_t a1)
{
  void *v1;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  Class isa;
  id v16;

  v16 = objc_msgSend(v1, "layer");
  if (a1 == 1 && (BookThemeEntity.hasDarkBackground.getter() & 1) != 0
    || (BookThemeEntity.hasDarkBackground.getter() & 1) != 0)
  {
    objc_msgSend(v16, "setFilters:", 0);
    objc_msgSend(v16, "setCreatesCompositingGroup:", 0);
  }
  else
  {
    BookThemeEntity.backgroundColor.getter();
    v4 = v3;
    static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterMultiplyColor);
    v6 = v5;
    v7 = objc_allocWithZone((Class)CAFilter);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "initWithType:", v8, swift_bridgeObjectRelease(v6).n128_f64[0]);

    v10 = objc_msgSend(v4, "CGColor");
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setValue:forKeyPath:", v10, v11);

    v12 = sub_319AC(&qword_3B84F0);
    v13 = swift_allocObject(v12, 64);
    *(_OWORD *)(v13 + 16) = xmmword_2E5F80;
    *(_QWORD *)(v13 + 56) = sub_34450(0, &qword_3B84F8, CAFilter_ptr);
    *(_QWORD *)(v13 + 32) = v9;
    v14 = v9;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v16, "setFilters:", isa, swift_bridgeObjectRelease(v13).n128_f64[0]);

    objc_msgSend(v16, "setCreatesCompositingGroup:", 1);
  }

}

Swift::Void __swiftcall WKWebView.updateStyle(theme:)(BookEPUB::BookThemeEntity *theme)
{
  void *v1;
  BookEPUB::BookThemeType themeType;
  BookEPUB::BookThemeVariant variant;
  BookEPUB::BookFontTable fontTable;
  void *rawValue;
  uint64_t (*v6)(uint64_t, uint64_t, void *);
  Swift::Double lineHeight;
  Swift::Double letterSpacing;
  Swift::Double wordSpacing;
  void *v10;
  uint64_t v11;
  NSString v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  Swift::Double marginAdjustment;
  void **aBlock;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, void *);
  Swift::Double v22;
  void (*v23)(uint64_t, uint64_t);
  Swift::Double v24;
  uint64_t v25;
  Swift::Double v26;

  themeType = theme->themeType;
  variant = theme->variant;
  fontTable = theme->fontTable;
  rawValue = theme->overrides.value.fontFamilyByTable._rawValue;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, void *))&theme->overrides.value.isFontBolded;
  lineHeight = theme->overrides.value.lineHeight;
  letterSpacing = theme->overrides.value.letterSpacing;
  wordSpacing = theme->overrides.value.wordSpacing;
  v16 = *(_QWORD *)&theme->overrides.value.justify;
  marginAdjustment = theme->overrides.value.marginAdjustment;
  v17 = objc_msgSend(v1, "be_imageFilterMode");
  sub_69AA8((uint64_t)v17);
  LOBYTE(aBlock) = themeType;
  BYTE1(aBlock) = variant;
  BYTE2(aBlock) = fontTable;
  v20 = (uint64_t)rawValue;
  v21 = v6;
  v22 = lineHeight;
  v23 = *(void (**)(uint64_t, uint64_t))&letterSpacing;
  v24 = wordSpacing;
  v25 = v16;
  v10 = v1;
  v26 = marginAdjustment;
  if ((BookThemeEntity.hasDarkBackground.getter() & 1) != 0)
    v11 = 2;
  else
    v11 = 1;
  objc_msgSend(v1, "setOverrideUserInterfaceStyle:", v11);
  objc_msgSend(v1, "be_updateTextInputTraits");
  if (v17 != objc_msgSend(v1, "be_imageFilterMode"))
  {
    objc_msgSend(v1, "setBe_imageFilterMode:", v17);
    v12 = objc_msgSend((id)objc_opt_self(BEContentSupportJS), "javascriptForUpdatedImageFilterMode:", v17);
    if (!v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v14 = v13;
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
    }
    v23 = sub_6A0A4;
    v24 = 0.0;
    aBlock = _NSConcreteStackBlock;
    v20 = 1107296256;
    v21 = sub_6A0C0;
    v22 = COERCE_DOUBLE(&unk_37C510);
    v15 = _Block_copy(&aBlock);
    objc_msgSend(v10, "evaluateJavaScript:completionHandler:", v12, v15);
    _Block_release(v15);

  }
}

void WKWebView.updateImageFiltering(theme:filterMode:shouldUpdateLayerFilters:)(char *a1, id a2, char a3)
{
  void *v3;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, void *);
  void *v11;
  void (*v12)(uint64_t, uint64_t);
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **aBlock;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, void *);
  void *v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  v9 = *((_QWORD *)a1 + 1);
  v10 = (uint64_t (*)(uint64_t, uint64_t, void *))*((_QWORD *)a1 + 2);
  v11 = (void *)*((_QWORD *)a1 + 3);
  v12 = (void (*)(uint64_t, uint64_t))*((_QWORD *)a1 + 4);
  v18 = *((_QWORD *)a1 + 6);
  v19 = *((_QWORD *)a1 + 5);
  v17 = *((_QWORD *)a1 + 7);
  if (objc_msgSend(v3, "be_imageFilterMode") != a2)
  {
    objc_msgSend(v3, "setBe_imageFilterMode:", a2);
    if ((a3 & 1) != 0)
    {
      LOBYTE(aBlock) = v6;
      BYTE1(aBlock) = v7;
      BYTE2(aBlock) = v8;
      v21 = v9;
      v22 = v10;
      v23 = v11;
      v24 = v12;
      v25 = v19;
      v26 = v18;
      v27 = v17;
      sub_69AA8((uint64_t)a2);
    }
    v13 = objc_msgSend((id)objc_opt_self(BEContentSupportJS), "javascriptForUpdatedImageFilterMode:", a2);
    if (!v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v15 = v14;
      v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v15);
    }
    v24 = sub_6A0A4;
    v25 = 0;
    aBlock = _NSConcreteStackBlock;
    v21 = 1107296256;
    v22 = sub_6A0C0;
    v23 = &unk_37C538;
    v16 = _Block_copy(&aBlock);
    objc_msgSend(v3, "evaluateJavaScript:completionHandler:", v13, v16);
    _Block_release(v16);

  }
}

void sub_6A0A4(uint64_t a1, uint64_t a2)
{
  sub_6A29C(a1, a2, 0xD000000000000040, 0x80000000002C7800);
}

uint64_t sub_6A0C0(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(__int128 *, void *);
  id v6;
  __int128 v8;
  __int128 v9;

  v5 = *(void (**)(__int128 *, void *))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v9 + 1) = swift_getObjectType(a2);
    *(_QWORD *)&v8 = a2;
  }
  else
  {
    v8 = 0u;
    v9 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain(a2);
  v6 = a3;
  v5(&v8, a3);
  swift_release();

  return sub_52128((uint64_t)&v8, (uint64_t *)&unk_3B96D0);
}

Swift::Void __swiftcall WKWebView.updateLineGuideEnabledState(on:)(Swift::Bool on)
{
  void *v1;
  id v3;
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v3 = objc_msgSend(v1, "configuration");
  v4 = objc_msgSend(v3, "preferences");

  objc_msgSend(v4, "setTextInteractionEnabled:", !on);
  v5 = objc_msgSend((id)objc_opt_self(BEContentSupportJS), "javascriptForUpdatedLineGuideDisplayEnabled:", on);
  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = v6;
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }
  v9[4] = sub_6A280;
  v9[5] = 0;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_6A0C0;
  v9[3] = &unk_37C560;
  v8 = _Block_copy(v9);
  objc_msgSend(v1, "evaluateJavaScript:completionHandler:", v5, v8);
  _Block_release(v8);

}

void sub_6A280(uint64_t a1, uint64_t a2)
{
  sub_6A29C(a1, a2, 0xD000000000000020, 0x80000000002C77D0);
}

void sub_6A29C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  NSObject *oslog;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;
  uint64_t v19;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_3B56C0 != -1)
      swift_once(&qword_3B56C0, sub_673FC);
    v7 = type metadata accessor for Logger(0);
    sub_555F0(v7, (uint64_t)qword_3B8420);
    swift_errorRetain(a2);
    v8 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v19 = v11;
      *(_DWORD *)v10 = 136315394;
      v18 = sub_33524(a3, a4, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4);
      *(_WORD *)(v10 + 12) = 2080;
      swift_getErrorValue(a2, v17, v16);
      v12 = Error.localizedDescription.getter(v16[1], v16[2]);
      v14 = v13;
      v18 = sub_33524(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 14);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl(&dword_0, oslog, v9, "Failed executing js for %s: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
}

id sub_6A4C8()
{
  void *v0;

  return objc_msgSend(v0, "scrollView");
}

uint64_t sub_6A4EC()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "be_configurationKey");
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

void sub_6A550(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;

  if (a2)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v4 = 0;
  }
  objc_msgSend(v2, "setBe_configurationKey:", v4);

}

void (*sub_6A5A8(uint64_t **a1))(_QWORD *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)sub_6A5EC(v2);
  return sub_493BC;
}

void (*sub_6A5EC(uint64_t *a1))(uint64_t a1, char a2)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  a1[2] = (uint64_t)v1;
  v3 = objc_msgSend(v1, "be_configurationKey");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a1 = v5;
  a1[1] = v7;
  return sub_6A660;
}

void sub_6A660(uint64_t a1, char a2)
{
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    if (v3)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
      v4 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v3);
    }
    else
    {
      v4 = 0;
    }
    objc_msgSend(*(id *)(a1 + 16), "setBe_configurationKey:", v4);
    swift_bridgeObjectRelease(v3);
  }
  else if (v3)
  {
    v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v3);
    objc_msgSend(*(id *)(a1 + 16), "setBe_configurationKey:", v4);
  }
  else
  {
    v4 = 0;
    objc_msgSend(*(id *)(a1 + 16), "setBe_configurationKey:", 0);
  }

}

uint64_t sub_6A720@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(v1, "URL");
  if (v3)
  {
    v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for URL(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a1;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

id sub_6A7A8()
{
  void *v0;

  return objc_msgSend(v0, "be_imageFilterMode");
}

id sub_6A7B8(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, "setBe_imageFilterMode:", a1);
}

void sub_6A7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  _QWORD v6[6];

  v6[4] = a2;
  v6[5] = a3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_525E4;
  v6[3] = &unk_37C840;
  v5 = _Block_copy(v6);
  swift_retain();
  objc_msgSend(v3, "be_configureFontWithStyleManager:completion:", a1, v5, swift_release().n128_f64[0]);
  _Block_release(v5);
}

double sub_6A888(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  _QWORD *v9;
  double result;
  uint64_t v11;

  v3 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  type metadata accessor for MainActor(0);
  v7 = v1;
  v8 = static MainActor.shared.getter(v7);
  v9 = (_QWORD *)swift_allocObject(&unk_37C828, 48);
  v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = a1;
  v9[5] = v7;
  sub_67B40((uint64_t)v5, (uint64_t)&unk_3B84E0, (uint64_t)v9);
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_6A978()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v0 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v0);
  v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URLRequest(0);
  sub_55F54(v3, qword_3CEF00);
  sub_555F0(v3, (uint64_t)qword_3CEF00);
  URL.init(string:)(0x6C623A74756F6261, 0xEB000000006B6E61);
  v4 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v2, 1, v4);
  if ((_DWORD)result != 1)
    return URLRequest.init(url:cachePolicy:timeoutInterval:)(v2, 0, 60.0);
  __break(1u);
  return result;
}

uint64_t sub_6AA68(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = v2;
  v3[1] = sub_6AAD0;
  return v5(v2 + 32);
}

uint64_t sub_6AAD0()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_BYTE **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  *v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

_QWORD *sub_6AB20(unint64_t a1, void *a2)
{
  char **v2;
  char **v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  id v28;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  unint64_t v33;
  unint64_t v34;
  CGFloat *v35;
  uint64_t v36;
  char **v37;
  unint64_t v38;
  CGRect v39;
  CGRect v40;

  v3 = v2;
  v5 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v6 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  while (1)
  {
    if (!v6)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_F5170(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0)
      break;
    v8 = 0;
    v37 = v3;
    v38 = v5 & 0xC000000000000001;
    v3 = &selRef_accessibilityScroll_;
    v9 = v5;
    while (v6 != v8)
    {
      if (v38)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v5);
      else
        v10 = *(id *)(v5 + 8 * v8 + 32);
      v11 = v10;
      objc_msgSend(v10, "CGRectValue", v37);
      v13 = v12;
      v15 = v14;
      v17 = v16;
      v19 = v18;
      objc_msgSend(a2, "be_convertPointFromContentsToView:");
      v21 = v20;
      v23 = v22;
      objc_msgSend(a2, "be_convertPointFromContentsToView:", v13 + v17, v15 + v19);
      v25 = v24 - v21;
      v27 = v26 - v23;
      v28 = a2;
      v39.origin.x = v21;
      v39.origin.y = v23;
      v39.size.width = v25;
      v39.size.height = v27;
      v40 = CGRectStandardize(v39);
      x = v40.origin.x;
      y = v40.origin.y;
      width = v40.size.width;
      height = v40.size.height;

      v34 = _swiftEmptyArrayStorage[2];
      v33 = _swiftEmptyArrayStorage[3];
      if (v34 >= v33 >> 1)
        sub_F5170(v33 > 1, v34 + 1, 1);
      _swiftEmptyArrayStorage[2] = v34 + 1;
      v35 = (CGFloat *)&_swiftEmptyArrayStorage[5 * v34];
      *((_QWORD *)v35 + 4) = v28;
      ++v8;
      v35[5] = x;
      v35[6] = y;
      v35[7] = width;
      v35[8] = height;
      v5 = v9;
      if (v6 == v8)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v5 < 0)
      v36 = v5;
    else
      v36 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease(v5);
  }
  __break(1u);
  return result;
}

uint64_t sub_6AD20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_6AD4C(uint64_t a1, void (*a2)(__n128), uint64_t a3)
{
  uint64_t *v3;

  return sub_68E58(a1, a2, a3, v3[2], v3[3], v3[4]);
}

const char *sub_6AD58()
{
  return "be_hasPendingOperations";
}

id sub_6AD64@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "be_hasPendingOperations");
  *a2 = (_BYTE)result;
  return result;
}

id sub_6AD94(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setBe_hasPendingOperations:", *a1);
}

uint64_t sub_6ADA8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_6ADD0(unsigned __int8 *a1)
{
  uint64_t *v1;

  sub_6940C(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_6ADE0()
{
  unint64_t result;

  result = qword_3B84C0;
  if (!qword_3B84C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentLoaderViewState, &type metadata for ContentLoaderViewState);
    atomic_store(result, (unint64_t *)&qword_3B84C0);
  }
  return result;
}

id sub_6AE24@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "be_hasPendingOperations");
  *a2 = result ^ 1;
  return result;
}

id sub_6AE58(_BYTE *a1, id *a2)
{
  return objc_msgSend(*a2, "setBe_hasPendingOperations:", (*a1 & 1) == 0);
}

id sub_6AE74@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;

  result = objc_msgSend(*a1, "be_viewScale");
  *a2 = v4;
  return result;
}

id sub_6AEA4(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setBe_viewScale:", *a1);
}

uint64_t storeEnumTagSinglePayload for ContentLoaderViewState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_6AF04 + 4 * byte_2E74E5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_6AF38 + 4 * byte_2E74E0[v4]))();
}

uint64_t sub_6AF38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6AF40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6AF48);
  return result;
}

uint64_t sub_6AF54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6AF5CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_6AF60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6AF68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentLoaderViewState()
{
  return &type metadata for ContentLoaderViewState;
}

uint64_t destroy for _ContentLoadingSelection(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *_s8BookEPUB24_ContentLoadingSelectionVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for _ContentLoadingSelection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for _ContentLoadingSelection(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ContentLoadingSelection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ContentLoadingSelection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ContentLoaderViewSelection()
{
  return &type metadata for _ContentLoaderViewSelection;
}

uint64_t dispatch thunk of ContentLoaderView.be_estimatedContentSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ContentLoaderView.be_desiredContentOffset.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ContentLoaderView.be_desiredContentOffset.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a5 + 80))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of ReadingSettingsProviding.readingLoupeActiveDimming.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of ContentLoaderView.be_configurationKey.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of ThemeOptionsEventHandling.didTapWaitForWifi()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of LocationProviding.navigatedToNextPageNotificationPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of LocationControlling.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of ContentLoaderView.setBe_imageFilterMode(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 160))();
}

uint64_t dispatch thunk of ContentLoaderView.updateImageFiltering(theme:filterMode:shouldUpdateLayerFilters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 168))();
}

uint64_t dispatch thunk of ContentLoaderView.updateLineGuideEnabledState(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of ContentLoaderView.setDelegate(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 184))();
}

uint64_t dispatch thunk of ContentLoaderView.addPeripheralView(_:length:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 192))();
}

uint64_t dispatch thunk of ContentLoaderView.removePeripheralView(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of ContentLoaderView.prepareForReuse(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 208))();
}

uint64_t dispatch thunk of ContentLoaderView.preparingForReuse()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of ContentLoaderView.processingContentViewForHost()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of ContentLoaderView.fontRegistrationCompleted(fontRegistrationSuccess:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 232))();
}

uint64_t dispatch thunk of ContentLoaderView.returningContentViewToPool()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of ContentLoaderView.discardingContentView()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of ContentLoaderView.fontRegistered(font:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 256))();
}

uint64_t dispatch thunk of ContentLoaderView.registerFont(styleManager:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 264))();
}

uint64_t dispatch thunk of ContentLoaderView.setContentOffset(offset:bypassingJS:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 272))();
}

uint64_t dispatch thunk of ContentLoaderView.updateStyle(theme:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 280))();
}

uint64_t dispatch thunk of ContentLoaderView.update(contentBlockingRules:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 288))();
}

uint64_t dispatch thunk of ContentLoaderView.shortDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 296))();
}

uint64_t dispatch thunk of ContentLoaderView.dismissInteractionMenus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 304))();
}

uint64_t sub_6B240()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_6B264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_3B84CC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_3F0C0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_3B84C8 + dword_3B84C8))(a1, v4);
}

uint64_t sub_6B2D8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_6B304(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_3B845C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_3F0C0;
  return sub_67710(a1, v4, v5, v7, v6);
}

uint64_t sub_6B37C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_6B3A0()
{
  uint64_t v0;

  return sub_115650(*(_QWORD *)(v0 + 16));
}

uint64_t sub_6B3AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_6B3D8()
{
  uint64_t v0;

  return sub_69128(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24));
}

unint64_t sub_6B3E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8500;
  if (!qword_3B8500)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_3B8500);
  }
  return result;
}

uint64_t sub_6B42C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_3BD984);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_6B4A4;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_3BD980 + dword_3BD980))(a1, v4);
}

_UNKNOWN **static ThemeAppearance.availableCases.getter()
{
  return &off_378F28;
}

uint64_t ThemeAppearance.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_6B51C + 4 * byte_2E7644[a1]))(0x746867696CLL, 0xE500000000000000);
}

uint64_t sub_6B51C()
{
  return 1802658148;
}

uint64_t sub_6B52C()
{
  return 0x766544686374616DLL;
}

unint64_t sub_6B54C()
{
  return 0xD000000000000011;
}

void sub_6B568(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_6B5B4@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_6B618 + 4 * byte_2E764C[a1]))(1802658148);
}

uint64_t sub_6B618(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1802658148 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1802658148, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

void sub_6B6C4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_6B70C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1802658148, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

void sub_6B780()
{
  __asm { BR              X10 }
}

uint64_t sub_6B7B8(uint64_t a1)
{
  String.hash(into:)(a1, 1802658148, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

void sub_6B818(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_6B85C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 1802658148, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

unint64_t sub_6B8D0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8BookEPUB15ThemeAppearanceO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_6B8FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_6B928 + 4 * byte_2E765C[*v0]))();
}

void sub_6B928(_QWORD *a1@<X8>)
{
  *a1 = 1802658148;
  a1[1] = 0xE400000000000000;
}

void sub_6B93C(_QWORD *a1@<X8>)
{
  *a1 = 0x766544686374616DLL;
  a1[1] = 0xEB00000000656369;
}

void sub_6B960(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000011;
  a1[1] = 0x80000000002C5850;
}

unint64_t _s8BookEPUB15ThemeAppearanceO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_378F50, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_6B9CC()
{
  unint64_t result;

  result = qword_3B8528;
  if (!qword_3B8528)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemeAppearance, &type metadata for ThemeAppearance);
    atomic_store(result, (unint64_t *)&qword_3B8528);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ThemeAppearance(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_6BA5C + 4 * byte_2E7665[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_6BA90 + 4 * byte_2E7660[v4]))();
}

uint64_t sub_6BA90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6BA98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6BAA0);
  return result;
}

uint64_t sub_6BAAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6BAB4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_6BAB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6BAC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThemeAppearance()
{
  return &type metadata for ThemeAppearance;
}

id BESearchResult.pageLocation.getter@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  id v3;
  id result;

  v3 = objc_msgSend(v1, "ordinal");
  result = objc_msgSend(v1, "pageOffset");
  *a1 = v3;
  a1[1] = result;
  return result;
}

BookEPUB::SearchState_optional __swiftcall SearchState.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookEPUB::SearchState_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_378FD0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t SearchState.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_6BBB8 + 4 * byte_2E7730[*v0]))(0x6E69686372616573, 0xE900000000000067);
}

uint64_t sub_6BBB8()
{
  return 0x646574726F6261;
}

uint64_t sub_6BBD0()
{
  return 0x526C616974726170;
}

uint64_t sub_6BBF4()
{
  return 0x6574656C706D6F63;
}

uint64_t sub_6BC10()
{
  return 1701736302;
}

void sub_6BC20(char *a1)
{
  sub_40310(*a1);
}

unint64_t sub_6BC30()
{
  unint64_t result;

  result = qword_3B8530;
  if (!qword_3B8530)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SearchState, &type metadata for SearchState);
    atomic_store(result, (unint64_t *)&qword_3B8530);
  }
  return result;
}

void sub_6BC74()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_6BCC8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x646574726F6261, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

void sub_6BD58()
{
  __asm { BR              X10 }
}

uint64_t sub_6BD9C(uint64_t a1)
{
  String.hash(into:)(a1, 0x646574726F6261, 0xE700000000000000);
  return swift_bridgeObjectRelease(0xE700000000000000);
}

void sub_6BE18(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_6BE68()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x646574726F6261, 0xE700000000000000);
  swift_bridgeObjectRelease(0xE700000000000000);
  return Hasher._finalize()();
}

BookEPUB::SearchState_optional sub_6BEF8(Swift::String *a1)
{
  return SearchState.init(rawValue:)(*a1);
}

uint64_t sub_6BF04()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_6BF3C + 4 * byte_2E7744[*v0]))();
}

void sub_6BF3C(_QWORD *a1@<X8>)
{
  *a1 = 0x646574726F6261;
  a1[1] = 0xE700000000000000;
}

void sub_6BF58(char *a1@<X8>)
{
  strcpy(a1, "partialResults");
  a1[15] = -18;
}

void sub_6BF80(_QWORD *a1@<X8>)
{
  *a1 = 0x6574656C706D6F63;
  a1[1] = 0xE900000000000064;
}

void sub_6BFA0(_QWORD *a1@<X8>)
{
  *a1 = 1701736302;
  a1[1] = 0xE400000000000000;
}

uint64_t getEnumTagSinglePayload for SearchState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_6C090 + 4 * byte_2E774E[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_6C0C4 + 4 * byte_2E7749[v4]))();
}

uint64_t sub_6C0C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6C0CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6C0D4);
  return result;
}

uint64_t sub_6C0E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6C0E8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_6C0EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6C0F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SearchState()
{
  return &type metadata for SearchState;
}

void sub_6C110(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_6C160();

  }
}

void sub_6C160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  objc_class *v17;
  char *v18;
  double *v19;
  id v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[3];
  objc_super v24;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_paginationService + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_paginationService));
  v4 = sub_FB40C(ObjectType, v2);
  v5 = sub_FB47C(ObjectType, v2);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_stylesheetProvider);
  KeyPath = swift_getKeyPath(&unk_2E78C0);
  swift_getKeyPath(&unk_2E78E8);
  static Published.subscript.getter(v23, v6, KeyPath);
  swift_release();
  v8 = swift_release();
  v9 = v23[0];
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v2 + 24))(ObjectType, v2, v8);
  v12 = v11;
  v13 = swift_getObjectType(v10);
  v14 = (*(double (**)(uint64_t, uint64_t))(v12 + 48))(v13, v12);
  v16 = v15;
  swift_unknownObjectRelease(v10);
  v17 = (objc_class *)type metadata accessor for SearchConfiguration();
  v18 = (char *)objc_allocWithZone(v17);
  *(_QWORD *)&v18[OBJC_IVAR____TtC8BookEPUB19SearchConfiguration_paginationOptions] = v4;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8BookEPUB19SearchConfiguration_cleanupOptions] = v5;
  *(_QWORD *)&v18[OBJC_IVAR____TtC8BookEPUB19SearchConfiguration_stylesheetSet] = v9;
  v19 = (double *)&v18[OBJC_IVAR____TtC8BookEPUB19SearchConfiguration_contentLayoutSize];
  *v19 = v14;
  *((_QWORD *)v19 + 1) = v16;
  v24.receiver = v18;
  v24.super_class = v17;
  v20 = objc_msgSendSuper2(&v24, "init");
  v21 = *(void **)(v1 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  swift_beginAccess(v22 + 24, v23, 0, 0);
  objc_msgSend(v21, "setPageCount:", *(_QWORD *)(v22 + 24) & ~(*(uint64_t *)(v22 + 24) >> 63), swift_release().n128_f64[0]);
  objc_msgSend(v21, "setSearchConfiguration:", v20);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(ObjectType, v2) & 1) != 0)
    objc_msgSend(v21, "beginSearchWithReportAnalytics:", 0);
  else
    objc_msgSend(v21, "cancelSearch");

}

double sub_6C380()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  char v3;
  double result;
  char v5;
  uint64_t Strong;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController);
  if ((objc_msgSend(v1, "isSearching") & 1) == 0
    && !objc_msgSend(v1, "wasAborted")
    && (objc_msgSend(v1, "hasPartialResults") & 1) == 0)
  {
    objc_msgSend(v1, "searchWasCompleted");
  }
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setSearchString:", v2);

  if ((objc_msgSend(v1, "isSearching") & 1) != 0)
  {
    v3 = 0;
  }
  else if (objc_msgSend(v1, "wasAborted"))
  {
    v3 = 1;
  }
  else if ((objc_msgSend(v1, "hasPartialResults") & 1) != 0)
  {
    v3 = 2;
  }
  else if (objc_msgSend(v1, "searchWasCompleted"))
  {
    v3 = 3;
  }
  else
  {
    v3 = 4;
  }
  sub_40310(v3);
  if ((v5 & 1) == 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_delegate);
    if (Strong)
    {
      v7 = Strong;
      v8 = objc_msgSend(v1, "results");
      v9 = sub_319AC(&qword_3B6878);
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

      sub_45F84(v10);
      swift_bridgeObjectRelease(v10);
      *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_6C550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t ObjectType;
  void (*v6)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider + 8);
  ObjectType = swift_getObjectType(*(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_bookProvider));
  v6 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8);
  v6(v20, ObjectType, v4);
  v7 = v21;
  v8 = v22;
  sub_472D0(v20, v21);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 216))(v7, v8);
  v10 = sub_34488(v20);
  if ((v9 & 1) != 0 || NSNotFound.getter(v10) == a1)
    return 0;
  v6(v20, ObjectType, v4);
  v11 = v21;
  v12 = v22;
  sub_472D0(v20, v21);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(v12 + 104))(v11, v12) >= 2u)
  {
    sub_34488(v20);
    return 0;
  }
  sub_34488(v20);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider + 8);
  v14 = swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_pageNumberProvider));
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 160))(a1, v14, v13);
  if ((v16 & 1) != 0)
    return 0;
  v17 = result + 1;
  if (__OFADD__(result, 1))
  {
    __break(1u);
  }
  else
  {
    v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_paginationService + 8);
    v19 = swift_getObjectType(*(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_paginationService));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 184))(v17, v19, v18);
  }
  return result;
}

id sub_6C70C()
{
  return sub_6CA60(type metadata accessor for SearchDataManager);
}

uint64_t type metadata accessor for SearchDataManager()
{
  return objc_opt_self(_TtC8BookEPUB17SearchDataManager);
}

id sub_6CA54()
{
  return sub_6CA60(type metadata accessor for SearchConfiguration);
}

id sub_6CA60(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for SearchConfiguration()
{
  return objc_opt_self(_TtC8BookEPUB19SearchConfiguration);
}

double sub_6CAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_delegate;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_delegate);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                               + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController), "results"));
    v6 = sub_319AC(&qword_3B6878);
    v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

    sub_45F84(v7);
    swift_bridgeObjectRelease(v7);
    swift_unknownObjectRelease(v4);
  }
  v8 = swift_unknownObjectWeakLoadStrong(v2);
  if (v8)
  {
    v10 = v8;
    objc_release(objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                                       + OBJC_IVAR____TtC8BookEPUB17SearchDataManager_searchController), "results")));
    sub_47338();
    *(_QWORD *)&result = swift_unknownObjectRelease(v10).n128_u64[0];
  }
  return result;
}

uint64_t sub_6CBF8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_6CCBC(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain(a2);
    __asm { BR              X9 }
  }
  return 0;
}

uint64_t sub_6CE80(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_QWORD *)(a2 + 32) == result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 5; ; ++i)
  {
    v4 = i - 3;
    if (__OFADD__(i - 4, 1))
      break;
    v6 = *(_QWORD *)(a2 + 8 * i) == result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t sub_6CEE4()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3CEF18);
  sub_555F0(v0, (uint64_t)qword_3CEF18);
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v1 = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000000002C6E50, 0xD000000000000013, 0x80000000002C7B80);
  return Logger.init(_:)(v1);
}

uint64_t ThemeAppearanceManager.analyticsProvider.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v0 + 24);
}

uint64_t ThemeAppearanceManager.analyticsProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v6[24];

  swift_beginAccess(v2 + 24, v6, 1, 0);
  *(_QWORD *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign(v2 + 24, a1);
  return swift_unknownObjectRelease(a1);
}

void (*ThemeAppearanceManager.analyticsProvider.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t Strong;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  swift_beginAccess(v1 + 24, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v3[3] = Strong;
  v3[4] = v5;
  return sub_6D090;
}

void sub_6D090(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign(v5 + 24, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t ThemeAppearanceManager.appearancePublisher.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_319AC(&qword_3B86B8);
  v1 = sub_3DCC0(&qword_3B86C0, &qword_3B86B8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v0, v1);
}

uint64_t ThemeAppearanceManager.appearance.getter()
{
  uint64_t v1;

  CurrentValueSubject.value.getter(&v1);
  return v1;
}

void ThemeAppearanceManager.appearance.setter(uint64_t a1)
{
  char v1;
  char v2;
  _QWORD v3[12];

  v1 = a1;
  if ((sub_6CCBC(a1, (uint64_t)&off_379068) & 1) != 0)
    v2 = v1;
  else
    v2 = 2;
  CurrentValueSubject.value.getter(v3);
  __asm { BR              X11 }
}

uint64_t sub_6D228@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)sub_6D298 + 4 * byte_2E791C[a2]))(1802658148, a1, 0x746867696CLL);
}

void sub_6D298(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  __n128 v5;
  char v6;

  if (a1 == 1802658148 && v1 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease_n(0xE400000000000000, 2);
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1802658148, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(0xE400000000000000);
    if ((v4 & 1) == 0)
    {
      sub_6D680();
      ObservableObject<>.objectWillChange.getter(v2);
      ObservableObjectPublisher.send()();
      v5 = swift_release();
      v6 = v3;
      CurrentValueSubject.value.setter(&v6, v5);
      __asm { BR              X11 }
    }
  }
}

void sub_6D578(char a1)
{
  __asm { BR              X12 }
}

void sub_6D5C4()
{
  void *v0;
  uint64_t v1;
  NSString v2;
  _QWORD v3[8];

  v3[0] = 1802658148;
  v3[1] = 0xE400000000000000;
  v1 = _bridgeAnythingToObjectiveC<A>(_:)(v3, &type metadata for String);
  sub_6E4E4((uint64_t)v3);
  v2 = String._bridgeToObjectiveC()();
  objc_msgSend(v0, "setValue:forKey:", v1, v2);
  swift_unknownObjectRelease(v1);

}

unint64_t sub_6D680()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B86C8;
  if (!qword_3B86C8)
  {
    v1 = type metadata accessor for ThemeAppearanceManager();
    result = swift_getWitnessTable(&protocol conformance descriptor for ThemeAppearanceManager, v1);
    atomic_store(result, (unint64_t *)&qword_3B86C8);
  }
  return result;
}

uint64_t type metadata accessor for ThemeAppearanceManager()
{
  return objc_opt_self(_TtC8BookEPUB22ThemeAppearanceManager);
}

void (*ThemeAppearanceManager.appearance.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;

  *a1 = v1;
  CurrentValueSubject.value.getter(a1 + 1);
  return sub_6D71C;
}

void sub_6D71C(uint64_t a1)
{
  ThemeAppearanceManager.appearance.setter(*(unsigned __int8 *)(a1 + 8));
}

uint64_t ThemeAppearanceManager.currentThemePersistence.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t ThemeAppearanceManager.traitCollection.getter()
{
  uint64_t v1;

  CurrentValueSubject.value.getter(&v1);
  return v1;
}

void ThemeAppearanceManager.traitCollection.setter(id a1)
{
  id v2;
  char v3;
  __n128 v4;
  id v5;
  char *v6;
  id v7;

  CurrentValueSubject.value.getter(&v7);
  v2 = v7;
  sub_34450(0, (unint64_t *)&unk_3BE690, UITraitCollection_ptr);
  v3 = static NSObject.== infix(_:_:)(a1, v2);

  if ((v3 & 1) == 0)
  {
    v7 = a1;
    a1 = a1;
    CurrentValueSubject.value.setter(&v7, v4);
    CurrentValueSubject.value.getter(&v7);
    v5 = v7;
    v6 = (char *)objc_msgSend(v7, "userInterfaceStyle");

    LOBYTE(v7) = v6 == (_BYTE *)&dword_0 + 2;
    CurrentValueSubject.send(_:)(&v7);
  }

}

void (*ThemeAppearanceManager.traitCollection.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  CurrentValueSubject.value.getter(a1);
  return sub_6D8A8;
}

void sub_6D8A8(void **a1, char a2)
{
  void *v2;
  id v3;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = v2;
    ThemeAppearanceManager.traitCollection.setter(v3);

  }
  else
  {
    ThemeAppearanceManager.traitCollection.setter(v2);
  }
}

uint64_t ThemeAppearanceManager.lightLevelController.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 72));
}

_QWORD *sub_6D920(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  id v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  char v25;
  id v26;
  Swift::String v27;

  v4 = v3;
  v3[4] = 0;
  swift_unknownObjectWeakInit(v3 + 3, 0);
  v8 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v9 = type metadata accessor for CurrentThemePersistence();
  swift_allocObject(v9, 41);
  v4[6] = CurrentThemePersistence.init(userDefaults:)(v8);
  v4[7] = &protocol witness table for CurrentThemePersistence;
  v10 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v4[9] = a1;
  v4[10] = a2;
  v26 = v10;
  v11 = sub_319AC(&qword_3B8808);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48));
  swift_unknownObjectRetain(a1);
  v12 = v10;
  v4[8] = CurrentValueSubject.init(_:)(&v26);
  v4[2] = a3;
  v13 = a3;
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "stringForKey:", v14);

  if ((!v15
     || (v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15),
         v18 = v17,
         v15,
         v27._countAndFlagsBits = v16,
         v27._object = v18,
         v19 = _s8BookEPUB15ThemeAppearanceO8rawValueACSgSS_tcfC_0(v27),
         v19 == 4))
    && (v19 = sub_6DB70(), v19 == 4)
    || (sub_6CCBC(v19, (uint64_t)&off_379090) & 1) == 0)
  {
    LOBYTE(v19) = 2;
  }
  v25 = v19;
  v20 = sub_319AC(&qword_3B86B8);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48));
  v4[5] = CurrentValueSubject.init(_:)(&v25);
  v24 = objc_msgSend(v12, "userInterfaceStyle") == (char *)&dword_0 + 2;
  v21 = sub_319AC(&qword_3B86E8);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48));
  v22 = CurrentValueSubject.init(_:)(&v24);

  swift_unknownObjectRelease(a1);
  v4[11] = v22;
  return v4;
}

uint64_t sub_6DB70()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "stringForKey:", v1);

  if (!v2)
    return 4;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  if (v3 == 48 && v5 == 0xE100000000000000)
  {
    v7 = 0xE100000000000000;
    goto LABEL_9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(48, 0xE100000000000000, v3, v5, 0) & 1) == 0)
  {
    if (v3 == 49 && v5 == 0xE100000000000000)
    {
      v10 = 0xE100000000000000;
      goto LABEL_18;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(49, 0xE100000000000000, v3, v5, 0) & 1) != 0)
    {
      v10 = v5;
LABEL_18:
      swift_bridgeObjectRelease(v10);
      v8 = 1;
      goto LABEL_10;
    }
    if (v3 == 50 && v5 == 0xE100000000000000)
    {
      v11 = 0xE100000000000000;
LABEL_24:
      swift_bridgeObjectRelease(v11);
      v8 = 2;
      goto LABEL_10;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(50, 0xE100000000000000, v3, v5, 0) & 1) != 0)
    {
      v11 = v5;
      goto LABEL_24;
    }
    if (v3 == 51 && v5 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease(0xE100000000000000);
LABEL_29:
      v8 = 3;
      goto LABEL_10;
    }
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(51, 0xE100000000000000, v3, v5, 0);
    swift_bridgeObjectRelease(v5);
    if ((v12 & 1) != 0)
      goto LABEL_29;
    return 4;
  }
  v7 = v5;
LABEL_9:
  swift_bridgeObjectRelease(v7);
  v8 = 0;
LABEL_10:
  sub_6D578(v8);
  return v8;
}

void ThemeAppearanceManager.themeVariant.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v4;

  CurrentValueSubject.value.getter((uint64_t *)((char *)&v4 + 1));
  v1 = BYTE1(v4);
  CurrentValueSubject.value.getter(&v4);
  v2 = *(_QWORD *)(v0 + 80);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  __asm { BR              X10 }
}

uint64_t sub_6DD88()
{
  return 0;
}

uint64_t ThemeAppearanceManager.themeVariantPublisher.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = sub_319AC(&qword_3B86D0);
  v2 = *(_QWORD *)(v1 - 8);
  v32 = v1;
  v33 = v2;
  __chkstk_darwin(v1);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_319AC(&qword_3B86D8);
  v36 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_319AC(&qword_3B86E0);
  v37 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = v0[5];
  v9 = sub_319AC(&qword_3B86B8);
  v10 = sub_3DCC0(&qword_3B86C0, &qword_3B86B8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v11 = Publisher.eraseToAnyPublisher()(v9, v10);
  v39 = v0[11];
  v40 = v11;
  v12 = sub_319AC(&qword_3B86E8);
  v13 = sub_3DCC0(&qword_3B86F0, &qword_3B86E8, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v39 = Publisher.eraseToAnyPublisher()(v12, v13);
  v14 = v0[10];
  ObjectType = swift_getObjectType(v0[9]);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14);
  v16 = sub_319AC(&qword_3B86F8);
  v17 = sub_319AC(&qword_3B8700);
  v18 = sub_319AC((uint64_t *)&unk_3BCEC0);
  v19 = sub_3DCC0(&qword_3B8708, &qword_3B86F8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v20 = sub_3DCC0(&qword_3B8710, &qword_3B8700, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v21 = sub_3DCC0((unint64_t *)&unk_3BE700, (uint64_t *)&unk_3BCEC0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publishers.CombineLatest3.init(_:_:_:)(&v40, &v39, &v38, v16, v17, v18, v19, v20, v21);
  v22 = sub_3DCC0(&qword_3B8718, &qword_3B86D0, (uint64_t)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  v23 = v32;
  Publisher.map<A>(_:)(sub_6E150, 0, v32, &type metadata for BookThemeVariant, v22);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v4, v23);
  v24 = sub_3DCC0(&qword_3B8720, &qword_3B86D8, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v25 = sub_6E24C();
  v26 = v34;
  Publisher<>.removeDuplicates()(v34, v24, v25);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v26);
  v27 = sub_3DCC0(&qword_3B8730, &qword_3B86E0, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v28 = v35;
  v29 = Publisher.eraseToAnyPublisher()(v35, v27);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v8, v28);
  return v29;
}

uint64_t sub_6E110(unsigned __int8 a1)
{
  return ((uint64_t (*)())((char *)sub_6E130 + 4 * byte_2E7931[a1]))();
}

uint64_t sub_6E130()
{
  return 0;
}

uint64_t sub_6E13C(uint64_t a1, _BYTE *a2)
{
  return *a2 & 1;
}

uint64_t sub_6E148(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t sub_6E150@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_6E110(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t ThemeAppearanceManager.deinit()
{
  uint64_t v0;

  sub_47418(v0 + 24);
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  swift_release();
  return v0;
}

uint64_t ThemeAppearanceManager.__deallocating_deinit()
{
  uint64_t v0;

  sub_47418(v0 + 24);
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  swift_release();
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t sub_6E224@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_6E24C()
{
  unint64_t result;

  result = qword_3B8728;
  if (!qword_3B8728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookThemeVariant, &type metadata for BookThemeVariant);
    atomic_store(result, (unint64_t *)&qword_3B8728);
  }
  return result;
}

double static ThemeAppearanceManager.setupIfNeeded(lightLevelController:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  double result;

  if (!qword_3B86B0)
  {
    v5 = (void *)objc_opt_self(NSUserDefaults);
    v6 = objc_msgSend(v5, "standardUserDefaults", swift_unknownObjectRetain(a1).n128_f64[0]);
    swift_allocObject(v2, 96);
    qword_3B86B0 = (uint64_t)sub_6D920(a1, a2, v6);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

uint64_t static ThemeAppearanceManager.shared.getter()
{
  uint64_t result;

  result = qword_3B86B0;
  if (qword_3B86B0)
    return swift_retain(qword_3B86B0);
  __break(1u);
  return result;
}

void *sub_6E358()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_6E364@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7[24];

  v3 = *a1;
  v4 = *a1 + 24;
  swift_beginAccess(v4, v7, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_6E3BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = *a2 + 24;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v4 + 32) = v3;
  return swift_unknownObjectWeakAssign(v5, v2);
}

_QWORD *sub_6E414@<X0>(_BYTE *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = CurrentValueSubject.value.getter(&v3);
  *a1 = v3;
  return result;
}

void sub_6E450(unsigned __int8 *a1)
{
  ThemeAppearanceManager.appearance.setter(*a1);
}

_QWORD *sub_6E474@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;
  uint64_t v3;

  result = CurrentValueSubject.value.getter(&v3);
  *a1 = v3;
  return result;
}

void sub_6E4B0(id *a1)
{
  ThemeAppearanceManager.traitCollection.setter(*a1);
}

uint64_t method lookup function for ThemeAppearanceManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ThemeAppearanceManager);
}

uint64_t sub_6E4E4(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

uint64_t PageTurnStyle.rawValue.getter(char a1)
{
  if (!a1)
    return 0x6564696C73;
  if (a1 == 1)
    return 1819440483;
  return 0x6564614674736166;
}

uint64_t sub_6E568(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE400000000000000;
  v4 = 1819440483;
  if (v2 != 1)
  {
    v4 = 0x6564614674736166;
    v3 = 0xE800000000000000;
  }
  if (*a1)
    v5 = v4;
  else
    v5 = 0x6564696C73;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE500000000000000;
  v7 = 0xE400000000000000;
  v8 = 1819440483;
  if (*a2 != 1)
  {
    v8 = 0x6564614674736166;
    v7 = 0xE800000000000000;
  }
  if (*a2)
    v9 = v8;
  else
    v9 = 0x6564696C73;
  if (*a2)
    v10 = v7;
  else
    v10 = 0xE500000000000000;
  if (v5 == v9 && v6 == v10)
  {
    v11 = 1;
    v10 = v6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
  return v11 & 1;
}

Swift::Int sub_6E658()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE400000000000000;
  v3 = 1819440483;
  if (v1 != 1)
  {
    v3 = 0x6564614674736166;
    v2 = 0xE800000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6564696C73;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_6E6EC(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE400000000000000;
  v3 = 1819440483;
  if (*v1 != 1)
  {
    v3 = 0x6564614674736166;
    v2 = 0xE800000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6564696C73;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_6E75C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE400000000000000;
  v4 = 1819440483;
  if (v2 != 1)
  {
    v4 = 0x6564614674736166;
    v3 = 0xE800000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6564696C73;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE500000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_6E7EC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s8BookEPUB13PageTurnStyleO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_6E818(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE400000000000000;
  v5 = 1819440483;
  if (v2 != 1)
  {
    v5 = 0x6564614674736166;
    v4 = 0xE800000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6564696C73;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t _s8BookEPUB13PageTurnStyleO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_3790B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_6E8B8()
{
  unint64_t result;

  result = qword_3B8810;
  if (!qword_3B8810)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PageTurnStyle, &type metadata for PageTurnStyle);
    atomic_store(result, (unint64_t *)&qword_3B8810);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PageTurnStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_6E948 + 4 * byte_2E79ED[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_6E97C + 4 * byte_2E79E8[v4]))();
}

uint64_t sub_6E97C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_6E984(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x6E98CLL);
  return result;
}

uint64_t sub_6E998(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x6E9A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_6E9A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_6E9AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PageTurnStyle()
{
  return &type metadata for PageTurnStyle;
}

void BookThemeEntity.backgroundColor.getter()
{
  __asm { BR              X10 }
}

id sub_6E9F4()
{
  char v0;
  id v1;
  double v2;
  double v3;
  double v4;

  v1 = objc_allocWithZone((Class)UIColor);
  if ((v0 & 1) != 0)
  {
    v2 = 0.0;
    v3 = 0.0;
    v4 = 0.0;
  }
  else
  {
    v2 = 1.0;
    v3 = 1.0;
    v4 = 1.0;
  }
  return objc_msgSend(v1, "initWithRed:green:blue:alpha:", v2, v3, v4, 1.0);
}

void BookThemeEntity.textColor.getter()
{
  __asm { BR              X10 }
}

id sub_6EB90()
{
  char v0;
  id v1;
  double v2;
  double v3;
  double v4;

  v1 = objc_allocWithZone((Class)UIColor);
  if ((v0 & 1) != 0)
  {
    v2 = 1.0;
    v3 = 1.0;
    v4 = 1.0;
  }
  else
  {
    v2 = 0.0;
    v3 = 0.0;
    v4 = 0.0;
  }
  return objc_msgSend(v1, "initWithRed:green:blue:alpha:", v2, v3, v4, 1.0);
}

uint64_t BookThemeEntity.hasDarkBackground.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  char v2;

  if ((v0[1] & 1) != 0)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
  }
  else
  {
    v1 = *v0;
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746867696CLL, 0xE500000000000000, 1802658148, 0xE400000000000000, 0);
    swift_bridgeObjectRelease(0xE500000000000000);
    if ((v2 & 1) == 0)
      __asm { BR              X10 }
  }
  return 1;
}

void BookThemeEntity.linkColor.getter()
{
  __asm { BR              X10 }
}

id sub_6EEA0()
{
  char v0;
  id v1;
  double v2;
  double v3;

  v1 = objc_allocWithZone((Class)UIColor);
  if ((v0 & 1) != 0)
  {
    v2 = 0.615686275;
    v3 = 0.862745098;
  }
  else
  {
    v2 = 0.478431373;
    v3 = 1.0;
  }
  return objc_msgSend(v1, "initWithRed:green:blue:alpha:", 0.0, v2, v3, 1.0);
}

uint64_t BookThemeEntity.hasBlackBackground.getter()
{
  unsigned __int8 *v0;
  int v1;

  v1 = *v0;
  if (v1 == 3)
  {
    if ((v0[1] & 1) != 0)
      return 1;
  }
  else if (v1 == 1)
  {
    if ((v0[1] & 1) != 0)
      return 1;
  }
  else if (!*v0 && (v0[1] & 1) != 0)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_6EF84()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(_QWORD, unint64_t))((char *)nullsub_6 + 4 * byte_2E7B50[*v0]))(0, 0xE000000000000000);
}

uint64_t sub_6EFAC()
{
  return 1634100555;
}

uint64_t sub_6EFBC()
{
  return 0x73756373616D6144;
}

uint64_t sub_6EFD4()
{
  return 0x726F6F6E69686F4BLL;
}

uint64_t sub_6F1B0()
{
  return 0x697275626E6F6854;
}

uint64_t sub_6F1C8()
{
  return 0x676E6146676E6950;
}

uint64_t sub_6F1E8()
{
  return 0x676E6146676E6950;
}

uint64_t sub_6F208()
{
  return 0x676E6146676E6950;
}

uint64_t MultipleColumnMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PageMovementState.isIdle.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t PageMovementState.isDragging.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t PageMovementState.isDragging.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

uint64_t (*PageMovementState.isDragging.modify())()
{
  return address(of:);
}

uint64_t FontDownloadAlert.downloadOverCellularAccepted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t FontDownloadAlert.downloadOverCellularAccepted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

uint64_t (*FontDownloadAlert.downloadOverCellularAccepted.modify())()
{
  return address(of:);
}

uint64_t FontDownloadAlert.fontDownloadAlertPresented.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t FontDownloadAlert.fontDownloadAlertPresented.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

uint64_t (*FontDownloadAlert.fontDownloadAlertPresented.modify())()
{
  return address(of:);
}

uint64_t FontDownloadAlert.requiresCellularPrompt.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return 0;
  else
    return v0[1] & (v0[2] ^ 1) & 1;
}

uint64_t FontDownloadAlert.isDownloadAllowed.getter()
{
  _BYTE *v0;

  if ((*v0 & 1) != 0)
    return 1;
  else
    return v0[1] & v0[2] & 1;
}

uint64_t FontDownloadAlert.updateFrom(path:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void (*v12)(_BYTE *, _QWORD, uint64_t);
  char v13;
  uint64_t (*v14)(_BYTE *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  char v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void (*v27)(_BYTE *, uint64_t);
  _BYTE v28[12];
  int v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;

  v35 = type metadata accessor for NWPath(0);
  v31 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v30 = &v28[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v32 = type metadata accessor for NWPath.Status(0);
  v34 = *(_QWORD *)(v32 - 8);
  v3 = __chkstk_darwin(v32);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v28[-v6];
  v8 = type metadata accessor for NWInterface.InterfaceType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104);
  v12(v11, enum case for NWInterface.InterfaceType.cellular(_:), v8);
  v13 = NWPath.usesInterfaceType(_:)(v11);
  v14 = *(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8);
  v15 = v14(v11, v8);
  if ((v13 & 1) != 0)
  {
    NWPath.status.getter(v15);
    v16 = v34;
    v17 = v32;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v34 + 104))(v5, enum case for NWPath.Status.satisfied(_:), v32);
    v29 = static NWPath.Status.== infix(_:_:)(v7, v5);
    v18 = *(void (**)(_BYTE *, uint64_t))(v16 + 8);
    v18(v5, v17);
    v18(v7, v17);
    v33[1] = v29 & 1;
  }
  v12(v11, enum case for NWInterface.InterfaceType.wifi(_:), v8);
  v19 = NWPath.usesInterfaceType(_:)(v11);
  v14(v11, v8);
  v20 = v30;
  v21 = v31;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v31 + 16))(v30, a1, v35);
  if ((v19 & 1) != 0)
  {
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v21 + 8))(v20, v35);
  }
  else
  {
    v12(v11, enum case for NWInterface.InterfaceType.wiredEthernet(_:), v8);
    v23 = NWPath.usesInterfaceType(_:)(v11);
    v14(v11, v8);
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v21 + 8))(v20, v35);
    if ((v23 & 1) == 0)
      return result;
  }
  NWPath.status.getter(result);
  v24 = v34;
  v25 = v32;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v34 + 104))(v5, enum case for NWPath.Status.satisfied(_:), v32);
  v26 = static NWPath.Status.== infix(_:_:)(v7, v5);
  v27 = *(void (**)(_BYTE *, uint64_t))(v24 + 8);
  v27(v5, v25);
  result = ((uint64_t (*)(_BYTE *, uint64_t))v27)(v7, v25);
  *v33 = v26 & 1;
  return result;
}

Swift::Void __swiftcall FontDownloadAlert.presentAlert()()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 3) = 1;
}

uint64_t FontDownloadAlert.waitForWifiButton.getter()
{
  uint64_t v0;
  int v1;
  id v2;
  NSString v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = *(unsigned __int8 *)(v0 + 6);
  v2 = BookEPUBBundle();
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, v4, 0);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = sub_319AC(&qword_3B66F8);
  v10 = swift_allocObject(v9, 72);
  v11 = v10;
  *(_OWORD *)(v10 + 16) = xmmword_2E5F80;
  if (v1)
    v12 = 1312902231;
  else
    v12 = 0x69462D6957;
  if (v1)
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  *(_QWORD *)(v10 + 64) = sub_42298();
  *(_QWORD *)(v11 + 32) = v12;
  *(_QWORD *)(v11 + 40) = v13;
  v14 = static String.localizedStringWithFormat(_:_:)(v6, v8, v11);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v11);
  return v14;
}

uint64_t FontDownloadAlert.themeTitle.getter()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v0 = BookEPUBBundle();
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

uint64_t FontDownloadAlert.themeMessage.getter()
{
  _BYTE *v0;
  int v1;
  id v2;
  int v3;
  NSString v4;
  NSString v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v1 = v0[4];
  if (v0[5] == 1 || (*v0 & 1) != 0 || v0[1])
  {
    v2 = BookEPUBBundle();
LABEL_6:
    v4 = String._bridgeToObjectiveC()();
    v5 = String._bridgeToObjectiveC()();
    v18 = objc_msgSend(v2, "localizedStringForKey:value:table:", v4, v5, 0);

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    return v19;
  }
  v3 = v0[6];
  v2 = BookEPUBBundle();
  if (v1)
    goto LABEL_6;
  v6 = String._bridgeToObjectiveC()();
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v2, "localizedStringForKey:value:table:", v6, v7, 0);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = sub_319AC(&qword_3B66F8);
  v13 = swift_allocObject(v12, 72);
  v14 = v13;
  *(_OWORD *)(v13 + 16) = xmmword_2E5F80;
  if (v3)
    v15 = 1312902231;
  else
    v15 = 0x69462D6957;
  if (v3)
    v16 = 0xE400000000000000;
  else
    v16 = 0xE500000000000000;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_42298();
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v16;
  v17 = static String.localizedStringWithFormat(_:_:)(v9, v11, v14);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v14);
  return v17;
}

uint64_t FontDownloadAlert.fontTitle.getter()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v0 = BookEPUBBundle();
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

uint64_t FontDownloadAlert.fontMessage.getter()
{
  _BYTE *v0;
  int v1;
  id v2;
  int v3;
  NSString v4;
  NSString v5;
  NSString v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v1 = v0[4];
  if (v0[5] == 1 || (*v0 & 1) != 0 || v0[1])
  {
    v2 = BookEPUBBundle();
LABEL_6:
    v4 = String._bridgeToObjectiveC()();
    v5 = String._bridgeToObjectiveC()();
    v18 = objc_msgSend(v2, "localizedStringForKey:value:table:", v4, v5, 0);

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    return v19;
  }
  v3 = v0[6];
  v2 = BookEPUBBundle();
  if (v1)
    goto LABEL_6;
  v6 = String._bridgeToObjectiveC()();
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v2, "localizedStringForKey:value:table:", v6, v7, 0);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = sub_319AC(&qword_3B66F8);
  v13 = swift_allocObject(v12, 72);
  v14 = v13;
  *(_OWORD *)(v13 + 16) = xmmword_2E5F80;
  if (v3)
    v15 = 1312902231;
  else
    v15 = 0x69462D6957;
  if (v3)
    v16 = 0xE400000000000000;
  else
    v16 = 0xE500000000000000;
  *(_QWORD *)(v13 + 56) = &type metadata for String;
  *(_QWORD *)(v13 + 64) = sub_42298();
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = v16;
  v17 = static String.localizedStringWithFormat(_:_:)(v9, v11, v14);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v14);
  return v17;
}

uint64_t destroy for FontDownloadAlert(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for FontDownloadAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for FontDownloadAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for FontDownloadAlert(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for FontDownloadAlert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FontDownloadAlert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FontDownloadAlert()
{
  return &type metadata for FontDownloadAlert;
}

void sub_70404(char a1@<W0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  id v8;
  NSString v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_BYTE *)a7 = a1;
  *(_BYTE *)(a7 + 1) = a2;
  *(_BYTE *)(a7 + 2) = a3;
  *(_BYTE *)(a7 + 3) = a4;
  *(_BYTE *)(a7 + 4) = a5;
  *(_BYTE *)(a7 + 5) = a6;
  *(_BYTE *)(a7 + 6) = MGGetBoolAnswer(CFSTR("wapi"));
  v8 = BookEPUBBundle();
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, v10, 0);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(a7 + 8) = v12;
  *(_QWORD *)(a7 + 16) = v14;
  v15 = BookEPUBBundle();
  v16 = String._bridgeToObjectiveC()();
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, v17, 0);

  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  *(_QWORD *)(a7 + 24) = v19;
  *(_QWORD *)(a7 + 32) = v21;
}

uint64_t sub_7055C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3B8818);
  sub_555F0(v0, (uint64_t)qword_3B8818);
  sub_523DC();
  v1 = OS_os_log.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEF736B6F6F422E65, 0xD000000000000029, 0x80000000002C8440);
  return Logger.init(_:)(v1);
}

void sub_705F0(char a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t type;
  char v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *log;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = *(_QWORD *)v2;
  v5 = *(_BYTE *)(v2 + 8);
  v6 = *(_BYTE *)(v2 + 9);
  v7 = *(_BYTE *)(v2 + 10);
  v9 = *(_QWORD *)(v2 + 16);
  v8 = *(_QWORD *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  v11 = *(_QWORD *)(v2 + 40);
  v13 = *(_QWORD *)(v2 + 48);
  v12 = *(_QWORD *)(v2 + 56);
  v14 = *(_QWORD *)(v2 + 64);
  v16 = *(_QWORD *)(v2 + 72);
  v15 = *(_QWORD *)(v2 + 80);
  switch(*(_QWORD *)v2)
  {
    case 0:
      v24 = a1;
      v25 = *(_QWORD *)(v2 + 48);
      v26 = *(_QWORD *)(v2 + 56);
      if (qword_3B5870 != -1)
        swift_once(&qword_3B5870, sub_189FDC);
      v17 = type metadata accessor for Logger(0);
      sub_555F0(v17, (uint64_t)qword_3BF5F0);
      swift_bridgeObjectRetain(v9);
      v19 = Logger.logObject.getter(v18);
      log = v19;
      type = static os_log_type_t.error.getter(v19);
      if (os_log_type_enabled(v19, type))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        v22 = swift_slowAlloc(32, -1);
        v29 = v22;
        *(_DWORD *)v20 = 136315138;
        v28 = sub_33524(0xD00000000000001ALL, 0x80000000002C8420, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v20 + 4);
        swift_bridgeObjectRelease(v9);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v20, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease(v9);
      }
      v13 = v25;
      v12 = v26;
      a1 = v24;
      goto LABEL_10;
    case 1:
LABEL_10:
      v29 = v3;
      v30 = v5;
      v31 = v6;
      v32 = v7;
      v33 = v9;
      v34 = v8;
      v35 = v10;
      v36 = v11;
      v37 = v13;
      v38 = v12;
      v39 = v14;
      v40 = v16;
      v41 = v15;
      sub_70D14(a1 & 1, a2);
      break;
    case 2:
      v29 = 2;
      v30 = v5;
      v31 = v6;
      v32 = v7;
      v33 = v9;
      v34 = v8;
      v35 = v10;
      v36 = v11;
      v37 = v13;
      v38 = v12;
      v39 = v14;
      v40 = v16;
      v41 = v15;
      sub_70A84(a2);
      break;
    case 3:
      v29 = 3;
      v30 = v5;
      v31 = v6;
      v32 = v7;
      v33 = v9;
      v34 = v8;
      v35 = v10;
      v36 = v11;
      v37 = v13;
      v38 = v12;
      v39 = v14;
      v40 = v16;
      v41 = v15;
      sub_708D0(a2);
      break;
    default:
      type metadata accessor for BookLayoutMode(0);
      v29 = v3;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v21, &v29, v21, &type metadata for UInt);
      __break(1u);
      break;
  }
}

double sub_708D0(double a1)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  __int128 v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint64_t v17;
  double v19;
  _OWORD v20[3];
  uint64_t v21;

  v2 = *(_BYTE *)(v1 + 9);
  v3 = *(_BYTE *)(v1 + 10);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = ceil(a1 * 0.085);
  v6 = floor((a1 - *(double *)(v1 + 80) * (*(double *)(v1 + 72) + 5.0)) * 0.5);
  if (v5 > v6)
    v7 = v5;
  else
    v7 = v6;
  LOBYTE(v19) = *(_BYTE *)(v1 + 8);
  BYTE1(v19) = v2;
  BYTE2(v19) = v3;
  v8 = *(_OWORD *)(v1 + 32);
  v20[0] = *(_OWORD *)(v1 + 16);
  v20[1] = v8;
  v20[2] = *(_OWORD *)(v1 + 48);
  v21 = v4;
  v9 = BookThemeEntity.marginAdjustmentScaleFactor.getter();
  if (qword_3B56D8 != -1)
    swift_once(&qword_3B56D8, sub_7055C);
  v10 = v7 * v9;
  v11 = type metadata accessor for Logger(0);
  v12 = sub_555F0(v11, (uint64_t)qword_3B8818);
  v13 = Logger.logObject.getter(v12);
  v16 = static os_log_type_t.debug.getter(v13, v14, v15);
  if (os_log_type_enabled(v13, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    *(_DWORD *)v17 = 134218240;
    v19 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v17 + 4);
    *(_WORD *)(v17 + 12) = 2048;
    v19 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v17 + 14);
    _os_log_impl(&dword_0, v13, v16, "Horizontal Scroll margin:%f, defaultGutter:%f", (uint8_t *)v17, 0x16u);
    swift_slowDealloc(v17, -1, -1);
  }

  return floor(fmax(v10, 2.0));
}

double sub_70A84(double a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _BOOL4 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint64_t v22;
  double v24;
  BOOL v25;
  double v26;
  double v27;
  uint64_t v28;

  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = *(double *)(v1 + 80);
  v5 = ceil(a1 * 0.085);
  v6 = fmax(floor((a1 + v4 * -250.0) * 0.5), 10.0);
  v7 = floor((a1 - v4 * (*(double *)(v1 + 72) + 5.0)) * 0.5);
  if (v5 > v7)
    v8 = v5;
  else
    v8 = v7;
  v9 = floor((a1 + v4 * -25.0) * 0.5);
  if (v5 > v9)
    v9 = v5;
  v10 = *(unsigned __int8 *)(v1 + 8) != 0;
  if (v3)
    v10 = (v2 >> 8) & 1;
  if (!v10)
  {
    v12 = v8 - v6;
    v13 = 0.0;
    if (!v3 || (v2 & 0x100) == 0)
      goto LABEL_21;
    v11 = *(double *)(v1 + 64);
    goto LABEL_18;
  }
  if (!v3)
  {
    v12 = v8 - v6;
    v13 = 0.0;
LABEL_21:
    v14 = v13 * v12 * 10.0;
    goto LABEL_22;
  }
  v11 = *(double *)(v1 + 64);
  if (v11 < -0.1 || v11 < 0.1 && v11 <= 0.0)
  {
    v12 = v8 - v6;
    v13 = 0.0;
    if ((v2 & 0x100) == 0)
      goto LABEL_21;
LABEL_18:
    v13 = -0.1;
    if (v11 >= -0.1)
      v13 = fmin(v11, 0.1);
    goto LABEL_21;
  }
  v24 = v11 * 10.0;
  v25 = v11 < 0.1;
  v26 = 1.0;
  if (v25)
    v26 = v24;
  if ((v2 & 0x100) == 0)
    v26 = 0.0;
  v14 = v26 * (v9 - v8);
LABEL_22:
  if (qword_3B56D8 != -1)
    swift_once(&qword_3B56D8, sub_7055C);
  v15 = v8 + v14;
  v16 = type metadata accessor for Logger(0);
  v17 = sub_555F0(v16, (uint64_t)qword_3B8818);
  v18 = Logger.logObject.getter(v17);
  v21 = static os_log_type_t.debug.getter(v18, v19, v20);
  if (os_log_type_enabled(v18, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    *(_DWORD *)v22 = 134218240;
    v27 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v22 + 4);
    *(_WORD *)(v22 + 12) = 2048;
    v27 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v22 + 14);
    _os_log_impl(&dword_0, v18, v21, "Interpolated Veritcal Scroll margin:%f, defaultGutter:%f", (uint8_t *)v22, 0x16u);
    swift_slowDealloc(v22, -1, -1);
  }

  return floor(fmax(v15, 2.0));
}

double sub_70D14(char a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  __int128 v10;
  char v11;
  char v12;
  uint64_t v13;
  double v14;
  double v15;
  Swift::String v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  double v26;
  _OWORD v27[3];
  uint64_t v28;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 * 0.085;
  if ((a1 & 1) != 0)
    v9 = a2 * 0.085 * 0.666666667;
  v10 = *(_OWORD *)(v2 + 32);
  v27[0] = *(_OWORD *)(v2 + 16);
  v11 = *(_BYTE *)(v2 + 9);
  v12 = *(_BYTE *)(v2 + 10);
  v13 = *(_QWORD *)(v2 + 64);
  v14 = ceil(v9);
  LOBYTE(v26) = *(_BYTE *)(v2 + 8);
  BYTE1(v26) = v11;
  BYTE2(v26) = v12;
  v27[1] = v10;
  v27[2] = *(_OWORD *)(v2 + 48);
  v28 = v13;
  v15 = v14 * BookThemeEntity.marginAdjustmentScaleFactor.getter();
  if (qword_3B56D8 != -1)
    swift_once(&qword_3B56D8, sub_7055C);
  sub_555F0(v5, (uint64_t)qword_3B8818);
  v26 = 0.0;
  *(_QWORD *)&v27[0] = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  v16._object = (void *)0x80000000002C8470;
  v16._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v16);
  v17.n128_f64[0] = v14 + a2 + v15;
  Double.write<A>(to:)(&v26, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v17);
  v18 = *(_QWORD *)&v27[0];
  Logger.once(per:)((uint64_t)v8);
  swift_bridgeObjectRelease(v18);
  v20 = Logger.logObject.getter(v19);
  v23 = static os_log_type_t.debug.getter(v20, v21, v22);
  if (os_log_type_enabled(v20, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    *(_DWORD *)v24 = 134218240;
    v26 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v24 + 4);
    *(_WORD *)(v24 + 12) = 2048;
    v26 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v24 + 14);
    _os_log_impl(&dword_0, v20, v23, "Paged margin:%f, defaultGutter:%f", (uint8_t *)v24, 0x16u);
    swift_slowDealloc(v24, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return floor(fmax(v15, 2.0));
}

uint64_t static AccessibilityStateProviding<>.standard.getter()
{
  uint64_t v0;

  return swift_initStaticObject(v0, &unk_3B5940);
}

BOOL StandardAccessibilityStateProvider.isReduceMotionEnabled.getter()
{
  return UIAccessibilityIsReduceMotionEnabled();
}

uint64_t StandardAccessibilityStateProvider.isReduceMotionEnabledPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_319AC(&qword_3B8830);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.publisher(for:object:)(UIAccessibilityReduceMotionStatusDidChangeNotification, 0);

  v9 = sub_49F60();
  Publisher.map<A>(_:)(sub_710F8, 0, v0, &type metadata for Bool, v9);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v10 = sub_7111C();
  v11 = Publisher.eraseToAnyPublisher()(v4, v10);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v11;
}

BOOL sub_710F8@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = UIAccessibilityIsReduceMotionEnabled();
  *a1 = result;
  return result;
}

unint64_t sub_7111C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_3B8838;
  if (!qword_3B8838)
  {
    v1 = sub_31A38(&qword_3B8830);
    result = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Map<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_3B8838);
  }
  return result;
}

uint64_t type metadata accessor for StandardAccessibilityStateProvider()
{
  return objc_opt_self(_TtC8BookEPUB34StandardAccessibilityStateProvider);
}

uint64_t method lookup function for StandardAccessibilityStateProvider(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StandardAccessibilityStateProvider);
}

uint64_t sub_71198(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _BYTE v5[24];
  __int128 v6[2];

  sub_49F1C(a1, (uint64_t)v6);
  v3 = (_QWORD *)(*a2 + OBJC_IVAR___BEExpandedContentPresenter_bookEntity);
  swift_beginAccess(v3, v5, 33, 0);
  sub_34488(v3);
  sub_3F1CC(v6, (uint64_t)v3);
  return swift_endAccess(v5);
}

uint64_t sub_71204@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR___BEExpandedContentPresenter_bookEntity;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_49F1C(v3, a1);
}

id ExpandedContentPresenter.__allocating_init(bookEntity:router:)(_QWORD *a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  objc_super v11;
  _BYTE v12[24];

  v3 = v2;
  v6 = objc_allocWithZone(v3);
  v7 = (uint64_t)v6 + OBJC_IVAR___BEExpandedContentPresenter_router;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_QWORD *)(v7 + 32) = 0;
  sub_49F1C((uint64_t)a1, (uint64_t)v6 + OBJC_IVAR___BEExpandedContentPresenter_bookEntity);
  swift_beginAccess(v7, v12, 33, 0);
  v8 = v6;
  sub_713E4(a2, v7);
  swift_endAccess(v12);

  v11.receiver = v8;
  v11.super_class = v3;
  v9 = objc_msgSendSuper2(&v11, "init");
  sub_7142C(a2);
  sub_34488(a1);
  return v9;
}

id ExpandedContentPresenter.init(bookEntity:router:)(_QWORD *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  id v7;
  objc_super v9;
  _BYTE v10[24];

  v5 = (uint64_t)v2 + OBJC_IVAR___BEExpandedContentPresenter_router;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 32) = 0;
  sub_49F1C((uint64_t)a1, (uint64_t)v2 + OBJC_IVAR___BEExpandedContentPresenter_bookEntity);
  swift_beginAccess(v5, v10, 33, 0);
  v6 = v2;
  sub_713E4(a2, v5);
  swift_endAccess(v10);

  v9.receiver = v6;
  v9.super_class = (Class)type metadata accessor for ExpandedContentPresenter();
  v7 = objc_msgSendSuper2(&v9, "init");
  sub_7142C(a2);
  sub_34488(a1);
  return v7;
}

uint64_t sub_713E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3B88F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_7142C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_319AC(&qword_3B88F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ExpandedContentPresenter()
{
  return objc_opt_self(BEExpandedContentPresenter);
}

void ExpandedContentPresenter.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookEPUB.ExpandedContentPresenter", 33, "init()", 6, 0);
  __break(1u);
}

id ExpandedContentPresenter.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExpandedContentPresenter();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t ExpandedContentPresenter.expandedContentViewController(_:handleUserRequestForFrameToLoadExternalURL:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v8 = v4 + OBJC_IVAR___BEExpandedContentPresenter_router;
  swift_beginAccess(v8, v12, 0, 0);
  sub_71618(v8, (uint64_t)&v13);
  if (v14)
  {
    sub_3F1CC(&v13, (uint64_t)v15);
    v9 = v16;
    v10 = v17;
    sub_472D0(v15, v16);
    (*(void (**)(uint64_t, uint64_t (*)(_QWORD), uint64_t, uint64_t, uint64_t))(v10 + 40))(a2, a3, a4, v9, v10);
    return sub_34488(v15);
  }
  else
  {
    sub_7142C((uint64_t)&v13);
    return a3(0);
  }
}

uint64_t sub_71618(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3B88F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ExpandedContentPresenter.expandedContentViewController(_:handleExternalLoadRequest:likelyUserInitiated:)(uint64_t a1, uint64_t a2, char a3)
{
  return sub_71E70(a2, a3);
}

uint64_t ExpandedContentPresenter.expandedContentViewController(_:handleInternalLoadRequest:)(uint64_t a1, uint64_t a2)
{
  return sub_71F30(a2);
}

void ExpandedContentPresenter.expandedContentViewController(_:handleInternalLoadRequestForNewWindow:)(uint64_t a1@<X0>, NSURL *a2@<X8>)
{
  void *v2;
  void *v4;
  id v5;

  URL._bridgeToObjectiveC()(a2);
  v5 = v4;
  objc_msgSend(v2, "expandedContentViewController:handleInternalLoadRequest:", a1, v4);

}

uint64_t ExpandedContentPresenter.expandedContentViewController(_:present:completion:)(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  return sub_720CC(a2, a3, a4);
}

Swift::String __swiftcall ExpandedContentPresenter.expandedContentViewController(_:stringForCopyFrom:)(UIViewController _, Swift::String stringForCopyFrom)
{
  uint64_t v2;
  void *v3;
  Swift::String result;

  v2 = sub_722C4(stringForCopyFrom._countAndFlagsBits, (uint64_t)stringForCopyFrom._object);
  result._object = v3;
  result._countAndFlagsBits = v2;
  return result;
}

id ExpandedContentPresenter.expandedContentViewController(_:shareText:sourceRect:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v7;
  id result;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];
  _BYTE v25[24];
  uint64_t v26;

  result = objc_msgSend(a1, "viewIfLoaded");
  if (result)
  {
    v15 = result;
    v16 = v7 + OBJC_IVAR___BEExpandedContentPresenter_router;
    swift_beginAccess(v16, v24, 0, 0);
    sub_71618(v16, (uint64_t)v25);
    if (v26)
    {
      sub_49F1C((uint64_t)v25, (uint64_t)v21);
      v17 = v15;
      sub_7142C((uint64_t)v25);
      v18 = v22;
      v19 = v23;
      sub_472D0(v21, v22);
      v20[0] = v17;
      *(double *)&v20[1] = a4;
      *(double *)&v20[2] = a5;
      *(double *)&v20[3] = a6;
      *(double *)&v20[4] = a7;
      (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(v19 + 64))(a2, a3, v20, v18, v19);

      return (id)sub_34488(v21);
    }
    else
    {

      return (id)sub_7142C((uint64_t)v25);
    }
  }
  return result;
}

double sub_71D5C(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  double result;
  _BYTE v12[24];
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v6 = swift_allocObject(&unk_37CE50, 24);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = a2 + OBJC_IVAR___BEExpandedContentPresenter_router;
  swift_beginAccess(v7, v12, 0, 0);
  sub_71618(v7, (uint64_t)&v13);
  if (v14)
  {
    sub_3F1CC(&v13, (uint64_t)v15);
    v8 = v16;
    v9 = v17;
    sub_472D0(v15, v16);
    v10 = *(void (**)(uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v9 + 40);
    _Block_copy(a3);
    v10(a1, sub_72450, v6, v8, v9);
    sub_34488(v15);
  }
  else
  {
    _Block_copy(a3);
    sub_7142C((uint64_t)&v13);
    a3[2](a3, 0);
  }
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_71E70(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];
  uint64_t v14;

  v5 = v2 + OBJC_IVAR___BEExpandedContentPresenter_router;
  swift_beginAccess(v5, v12, 0, 0);
  sub_71618(v5, (uint64_t)v13);
  if (!v14)
    return sub_7142C((uint64_t)v13);
  sub_49F1C((uint64_t)v13, (uint64_t)v9);
  sub_7142C((uint64_t)v13);
  v6 = v10;
  v7 = v11;
  sub_472D0(v9, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 32))(a1, a2 & 1, v6, v7);
  return sub_34488(v9);
}

uint64_t sub_71F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE v19[24];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = v1 + OBJC_IVAR___BEExpandedContentPresenter_bookEntity;
  swift_beginAccess(v4, v19, 0, 0);
  sub_49F1C(v4, (uint64_t)v20);
  v5 = v21;
  v6 = v22;
  sub_472D0(v20, v21);
  LOBYTE(v5) = BookEntityType.urlReferencesTableOfContents(_:)(a1, v5, v6);
  sub_34488(v20);
  if ((v5 & 1) != 0)
  {
    v7 = v2 + OBJC_IVAR___BEExpandedContentPresenter_router;
    swift_beginAccess(v2 + OBJC_IVAR___BEExpandedContentPresenter_router, v18, 0, 0);
    sub_71618(v7, (uint64_t)v20);
    if (v21)
    {
      sub_49F1C((uint64_t)v20, (uint64_t)v15);
      sub_7142C((uint64_t)v20);
      v8 = v16;
      v9 = v17;
      sub_472D0(v15, v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, v8, v9);
      sub_34488(v15);
LABEL_7:
      v13 = 0;
      return v13 & 1;
    }
LABEL_6:
    sub_7142C((uint64_t)v20);
    goto LABEL_7;
  }
  v10 = v2 + OBJC_IVAR___BEExpandedContentPresenter_router;
  swift_beginAccess(v2 + OBJC_IVAR___BEExpandedContentPresenter_router, v18, 0, 0);
  sub_71618(v10, (uint64_t)v20);
  if (!v21)
    goto LABEL_6;
  sub_49F1C((uint64_t)v20, (uint64_t)v15);
  sub_7142C((uint64_t)v20);
  v11 = v16;
  v12 = v17;
  sub_472D0(v15, v16);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(a1, v11, v12);
  sub_34488(v15);
  return v13 & 1;
}

uint64_t sub_720CC(void *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v18[24];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v7 = v3 + OBJC_IVAR___BEExpandedContentPresenter_router;
  swift_beginAccess(v3 + OBJC_IVAR___BEExpandedContentPresenter_router, v18, 0, 0);
  sub_71618(v7, (uint64_t)&v19);
  if (v20)
  {
    sub_3F1CC(&v19, (uint64_t)v22);
    v8 = v3 + OBJC_IVAR___BEExpandedContentPresenter_bookEntity;
    swift_beginAccess(v8, &v17, 0, 0);
    sub_49F1C(v8, (uint64_t)&v19);
    v9 = v20;
    v10 = v21;
    sub_472D0(&v19, v20);
    (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
    v12 = v11;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    sub_34488(&v19);
    objc_msgSend(a1, "setTitle:", v13);

    v14 = v23;
    v15 = v24;
    sub_472D0(v22, v23);
    (*(void (**)(void *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v15 + 8))(a1, a2, a3, v14, v15);
    return sub_34488(v22);
  }
  else
  {
    result = sub_7142C((uint64_t)&v19);
    if (a2)
      return a2(result);
  }
  return result;
}

uint64_t _s8BookEPUB24ExpandedContentPresenterC08expandedD16ViewDidDisappearyySo16UIViewControllerCF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[24];
  uint64_t v10;

  v1 = v0 + OBJC_IVAR___BEExpandedContentPresenter_router;
  swift_beginAccess(v0 + OBJC_IVAR___BEExpandedContentPresenter_router, v8, 0, 0);
  sub_71618(v1, (uint64_t)v9);
  if (!v10)
    return sub_7142C((uint64_t)v9);
  sub_49F1C((uint64_t)v9, (uint64_t)v5);
  sub_7142C((uint64_t)v9);
  v2 = v6;
  v3 = v7;
  sub_472D0(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 48))(v2, v3);
  return sub_34488(v5);
}

uint64_t sub_722C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v5 = v2 + OBJC_IVAR___BEExpandedContentPresenter_router;
  swift_beginAccess(v5, v9, 0, 0);
  sub_71618(v5, (uint64_t)&v10);
  if (v11)
  {
    sub_3F1CC(&v10, (uint64_t)v12);
    v6 = v13;
    v7 = v14;
    sub_472D0(v12, v13);
    a1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, a2, v6, v7);
    sub_34488(v12);
  }
  else
  {
    sub_7142C((uint64_t)&v10);
    swift_bridgeObjectRetain(a2);
  }
  return a1;
}

uint64_t sub_72394@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR___BEExpandedContentPresenter_bookEntity;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_49F1C(v3, a2);
}

uint64_t method lookup function for ExpandedContentPresenter(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ExpandedContentPresenter);
}

uint64_t dispatch thunk of ExpandedContentPresenter.bookEntity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_68.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ExpandedContentPresenter.__allocating_init(bookEntity:router:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t sub_7241C(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_7242C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_72450(char a1)
{
  uint64_t v1;

  return sub_B7364(a1, *(_QWORD *)(v1 + 16));
}

void sub_7245C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[5];
  uint64_t v29;

  v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v5 = type metadata accessor for AnyCancellable(0, v4);
    v6 = sub_34284((unint64_t *)&unk_3B8F00, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v7 = Set.Iterator.init(_cocoa:)(v28, v3, v5, v6);
    v1 = v28[0];
    v26 = v28[1];
    v8 = v28[2];
    v9 = v28[3];
    v10 = v28[4];
  }
  else
  {
    v11 = -1 << *(_BYTE *)(a1 + 32);
    v26 = a1 + 56;
    v8 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(a1 + 56);
    v7 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v9 = 0;
  }
  v14 = (unint64_t)(v8 + 64) >> 6;
  if (v1 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v10)
    {
      v15 = (v10 - 1) & v10;
      v16 = __clz(__rbit64(v10)) | (v9 << 6);
      v17 = v9;
      goto LABEL_32;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
    if (v23 >= v14)
      goto LABEL_35;
    v24 = *(_QWORD *)(v26 + 8 * v23);
    v17 = v9 + 1;
    if (!v24)
    {
      v17 = v9 + 2;
      if (v9 + 2 >= v14)
        goto LABEL_35;
      v24 = *(_QWORD *)(v26 + 8 * v17);
      if (!v24)
      {
        v17 = v9 + 3;
        if (v9 + 3 >= v14)
          goto LABEL_35;
        v24 = *(_QWORD *)(v26 + 8 * v17);
        if (!v24)
        {
          v17 = v9 + 4;
          if (v9 + 4 >= v14)
            goto LABEL_35;
          v24 = *(_QWORD *)(v26 + 8 * v17);
          if (!v24)
          {
            v17 = v9 + 5;
            if (v9 + 5 >= v14)
              goto LABEL_35;
            v24 = *(_QWORD *)(v26 + 8 * v17);
            if (!v24)
            {
              v25 = v9 + 6;
              while (v14 != v25)
              {
                v24 = *(_QWORD *)(v26 + 8 * v25++);
                if (v24)
                {
                  v17 = v25 - 1;
                  goto LABEL_31;
                }
              }
LABEL_35:
              sub_89AA0(v1);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v15 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_32:
    v22 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v16);
    swift_retain(v22);
    if (!v22)
      goto LABEL_35;
    while (1)
    {
      AnyCancellable.cancel()();
      swift_release(v22);
      v9 = v17;
      v10 = v15;
      if ((v1 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v18 = __CocoaSet.Iterator.next()(v7);
      if (v18)
      {
        v20 = v18;
        v27 = v18;
        v21 = type metadata accessor for AnyCancellable(0, v19);
        swift_unknownObjectRetain(v20);
        swift_dynamicCast(&v29, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v22 = v29;
        swift_unknownObjectRelease(v20);
        v17 = v9;
        v15 = v10;
        if (v22)
          continue;
      }
      goto LABEL_35;
    }
  }
  __break(1u);
}

uint64_t ContentLoaderState.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7272C + 4 * byte_2E7CC0[*v0]))(0x6C616974696E69, 0xE700000000000000);
}

unint64_t sub_7272C()
{
  return 0xD000000000000015;
}

uint64_t sub_72748()
{
  return 0x676E6964616F6CLL;
}

uint64_t sub_7275C()
{
  return 0x646564616F6CLL;
}

BookEPUB::ContentLoaderState_optional __swiftcall ContentLoaderState.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookEPUB::ContentLoaderState_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_379120, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

void sub_727C8(char *a1)
{
  sub_3FB28(*a1);
}

void sub_727D4()
{
  char *v0;

  sub_1850FC(*v0);
}

void sub_727DC()
{
  __asm { BR              X10 }
}

uint64_t sub_72818(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000015, 0x80000000002C58B0);
  return swift_bridgeObjectRelease(0x80000000002C58B0);
}

void sub_72870(uint64_t a1)
{
  char *v1;

  sub_18569C(a1, *v1);
}

BookEPUB::ContentLoaderState_optional sub_72878(Swift::String *a1)
{
  return ContentLoaderState.init(rawValue:)(*a1);
}

uint64_t sub_72884()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_728B4 + 4 * byte_2E7CC8[*v0]))();
}

void sub_728B4(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x80000000002C58B0;
}

void sub_728D4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x676E6964616F6CLL;
  a1[1] = v1;
}

void sub_728EC(_QWORD *a1@<X8>)
{
  *a1 = 0x646564616F6CLL;
  a1[1] = 0xE600000000000000;
}

NSString sub_72904()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_3CEF30 = (uint64_t)result;
  return result;
}

uint64_t sub_72938()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3CEF38);
  sub_555F0(v0, (uint64_t)qword_3CEF38);
  if (qword_3B5698 != -1)
    swift_once(&qword_3B5698, sub_52378);
  return Logger.init(_:)((id)qword_3CEEF0);
}

uint64_t ContentLoader.loaderID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_loaderID;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void sub_729FC(_BYTE *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE v5[24];

  v3 = *a2;
  v5[0] = *a1;
  v2 = v5[0];
  sub_72A5C();
  v4 = (_BYTE *)(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_state);
  swift_beginAccess(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_state, v5, 1, 0);
  *v4 = v2;
}

void sub_72A5C()
{
  void *v0;
  char *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  NSObject *oslog;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = swift_slowAlloc(42, -1);
    v11 = swift_slowAlloc(128, -1);
    *(_DWORD *)v3 = 136446978;
    v4 = ContentLoader.shortDescription.getter();
    v6 = v5;
    v9 = sub_33524(v4, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v3 + 4);

    swift_bridgeObjectRelease(v6);
    *(_WORD *)(v3 + 12) = 2082;
    v7 = &v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state];
    swift_beginAccess(&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state], &v9, 0, 0);
    __asm { BR              X10 }
  }

}

void sub_72BF8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_33524(0x676E6964616F6CLL, v1, &v6);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v4, &v5, v2 + 14);

  swift_bridgeObjectRelease(v1);
  *(_WORD *)(v2 + 22) = 2082;
  __asm { BR              X9 }
}

void sub_72C0C()
{
  JUMPOUT(0x72C1CLL);
}

void sub_72C7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  void *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  void *v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  NSObject *v41;
  uint64_t v42;
  _QWORD v43[4];
  uint64_t v44[11];

  v42 = sub_33524(0xD000000000000015, 0x80000000002C58B0, v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v27 + 24);
  swift_bridgeObjectRelease(0x80000000002C58B0);
  *(_WORD *)(v27 + 32) = 2082;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v42, v26, KeyPath);
  swift_release();
  swift_release();
  v31 = (void *)v42;
  if (v42)
  {
    v32 = v43[0];
    ObjectType = swift_getObjectType(v42);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 96))(ObjectType, v32);
    v36 = v35;

  }
  else
  {
    v34 = 0;
    v36 = 0;
  }
  v42 = v34;
  v43[0] = v36;
  v37 = sub_319AC((uint64_t *)&unk_3BBB20);
  v38 = String.init<A>(describing:)(&v42, v37);
  v40 = v39;
  v42 = sub_33524(v38, v39, v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v27 + 34);

  swift_bridgeObjectRelease(v40);
  _os_log_impl(&dword_0, v41, v28, "Transitioning loader:%{public}s #loaderState %{public}s to %{public}s for webView:%{public}s", (uint8_t *)v27, 0x2Au);
  swift_arrayDestroy(v29, 4, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v29, -1, -1);
  swift_slowDealloc(v27, -1, -1);

}

uint64_t ContentLoader.shortDescription.getter()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  Swift::String v21;
  void *v22;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  objc_super v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  v28.receiver = v0;
  v28.super_class = (Class)type metadata accessor for ContentLoader(0);
  v2 = objc_msgSendSuper2(&v28, "description");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  swift_bridgeObjectRelease(0xE000000000000000);
  v29 = v3;
  v30 = v5;
  v6._countAndFlagsBits = 0x726564616F6C203ALL;
  v6._object = (void *)0xEC000000203A4449;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._object = (void *)0x80000000002C8590;
  v11._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v11);
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(v25, v1, KeyPath);
  swift_release();
  swift_release();
  v13 = v26;
  if (v26)
  {
    v14 = v27;
    v15 = sub_472D0(v25, v26);
    v16 = *(_QWORD *)(v13 - 8);
    v17 = __chkstk_darwin(v15);
    v19 = (char *)&v25[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v16 + 16))(v19, v17);
    sub_52128((uint64_t)v25, &qword_3B8990);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(v13, v14);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v13);
  }
  else
  {
    sub_52128((uint64_t)v25, &qword_3B8990);
    v20 = -1;
  }
  v25[0] = v20;
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  return v29;
}

uint64_t type metadata accessor for ContentLoader(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3B8AC8, (uint64_t)&nominal type descriptor for ContentLoader);
}

uint64_t sub_730B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_state);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a1 = *v3;
  return result;
}

uint64_t sub_730FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(v12, v0, KeyPath);
  swift_release();
  swift_release();
  v2 = v13;
  if (v13)
  {
    v3 = v14;
    v4 = sub_472D0(v12, v13);
    v5 = *(_QWORD *)(v2 - 8);
    v6 = __chkstk_darwin(v4);
    v8 = (char *)&v12[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v5 + 16))(v8, v6);
    sub_52128((uint64_t)v12, &qword_3B8990);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v2);
  }
  else
  {
    sub_52128((uint64_t)v12, &qword_3B8990);
    return 0;
  }
  return v9;
}

double sub_7322C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  double result;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider);
  swift_beginAccess(v4, v7, 1, 0);
  v5 = *v4;
  *v4 = v2;
  v4[1] = v3;
  swift_unknownObjectRetain_n(v2, 2);
  swift_unknownObjectRelease(v5);
  if (!*v4)
    ContentLoader.prepareForReuse()();
  *(_QWORD *)&result = swift_unknownObjectRelease(v2).n128_u64[0];
  return result;
}

Swift::Void __swiftcall ContentLoader.prepareForReuse()()
{
  void *v0;
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void *v29;
  _UNKNOWN **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t Strong;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  uint64_t v39;
  double v40;
  void *v41;
  id v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  double v52;
  void *v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_WORD *);
  char *v101;
  uint64_t v102;
  _QWORD v103[4];
  char v104[24];
  char v105[24];
  _WORD v106[12];
  char v107[24];
  char v108[24];
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char v114[32];

  v1 = v0;
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = swift_slowAlloc(22, -1);
    v5 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v111 = v5;
    *(_DWORD *)v4 = 136446466;
    v6 = ContentLoader.shortDescription.getter();
    v8 = v7;
    *(_QWORD *)&v109 = sub_33524(v6, v7, (uint64_t *)&v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v4 + 4);

    swift_bridgeObjectRelease(v8);
    *(_WORD *)(v4 + 12) = 2050;
    v9 = sub_730FC();
    v11 = v10;

    v12 = -5;
    if ((v11 & 1) == 0)
      v12 = v9;
    *(_QWORD *)&v109 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v4 + 14);

    _os_log_impl(&dword_0, v2, v3, "Preparing #loadingStatus loader %{public}s for ordinal %{public}ld for reuse", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);

  }
  else
  {

  }
  v13 = &v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables], v114, 1, 0);
  v14 = *(_QWORD *)v13;
  v15 = swift_bridgeObjectRetain(*(_QWORD *)v13);
  sub_7245C(v15);
  swift_bridgeObjectRelease(v14);
  v16 = *(_QWORD *)v13;
  *(_QWORD *)v13 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v16);
  if (qword_3B56A0 != -1)
    swift_once(&qword_3B56A0, sub_52620);
  if (byte_3B6F18 == 1)
  {
    v17 = (uint64_t *)&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pageLayers];
    swift_beginAccess(&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pageLayers], v104, 1, 0);
    v18 = *v17;
    if ((unint64_t)*v17 >> 62)
    {
      if (v18 < 0)
        v23 = *v17;
      else
        v23 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v17);
      v19 = _CocoaArrayWrapper.endIndex.getter(v23);
      if (v19)
        goto LABEL_11;
    }
    else
    {
      v19 = *(_QWORD *)((char *)&dword_10 + (v18 & 0xFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain(*v17);
      if (v19)
      {
LABEL_11:
        if (v19 < 1)
          goto LABEL_66;
        for (i = 0; i != v19; ++i)
        {
          if ((v18 & 0xC000000000000001) != 0)
            v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v18);
          else
            v21 = *(id *)(v18 + 8 * i + 32);
          v22 = v21;
          objc_msgSend(v21, "removeFromSuperlayer");

        }
      }
    }
    swift_bridgeObjectRelease(v18);
    v24 = *v17;
    *v17 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v24);
  }
  sub_7D1EC();
  v113 = 0;
  v111 = 0u;
  v112 = 0u;
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  v26 = swift_getKeyPath(&unk_2E7D10);
  sub_3F238((uint64_t)&v111, (uint64_t)&v109, &qword_3B8990);
  v27 = v1;
  static Published.subscript.setter(&v109, v27, KeyPath, v26);
  sub_52128((uint64_t)&v111, &qword_3B8990);
  v28 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v111, v27, v28);
  swift_release();
  swift_release();
  v29 = (void *)v111;
  v30 = &_ss6HasherV8_combineyys5UInt8VF_ptr;
  if ((_QWORD)v111)
  {
    v31 = objc_opt_self(WKWebView);
    v32 = swift_dynamicCastObjCClass(v29, v31);
    if (v32
      && (v33 = v32,
          v34 = &v27[OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService],
          swift_beginAccess(&v27[OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService], v105, 0, 0),
          (Strong = swift_unknownObjectWeakLoadStrong(v34)) != 0))
    {
      v36 = Strong;
      v37 = *((_QWORD *)v34 + 1);
      ObjectType = swift_getObjectType(Strong);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 88))(v33, ObjectType, v37);

      swift_unknownObjectRelease(v36);
    }
    else
    {

    }
  }
  v39 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v111, v27, v39);
  swift_release();
  *(_QWORD *)&v40 = swift_release().n128_u64[0];
  v41 = (void *)v111;
  if ((_QWORD)v111)
  {
    v42 = objc_msgSend((id)v111, "superview", v40);

    if (v42)
    {

      v43 = v27;
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v111 = v47;
        *(_DWORD *)v46 = 136446210;
        v48 = ContentLoader.shortDescription.getter();
        v50 = v49;
        *(_QWORD *)&v109 = sub_33524(v48, v49, (uint64_t *)&v111);
        v30 = &_ss6HasherV8_combineyys5UInt8VF_ptr;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, (char *)&v109 + 8, v46 + 4);

        swift_bridgeObjectRelease(v50);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);
      }
      else
      {

      }
      v51 = swift_getKeyPath(&unk_2E7D30);
      swift_getKeyPath(&unk_2E7D58);
      static Published.subscript.getter(&v111, v43, v51);
      swift_release();
      *(_QWORD *)&v52 = swift_release().n128_u64[0];
      v53 = (void *)v111;
      if ((_QWORD)v111)
      {
        objc_msgSend((id)v111, "removeFromSuperview", v52);

      }
      v54 = swift_unknownObjectWeakLoadStrong(&v43[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator]);
      if (v54)
      {
        v55 = (void *)v54;
        v56 = swift_getKeyPath(&unk_2E7D30);
        swift_getKeyPath(&unk_2E7D58);
        static Published.subscript.getter(&v111, v43, v56);
        swift_release();
        swift_release();
        v57 = (id)v111;
        if ((_QWORD)v111)
        {
          v58 = objc_opt_self(v30[277]);
          v59 = swift_dynamicCastObjCClass(v57, v58);
          if (v59)
          {
            v60 = (void *)v59;
            v61 = v57;
            v62 = objc_msgSend(v60, "be_uiHandler");
            if (v62)
            {
              v63 = v62;
              objc_msgSend(v62, "setDelegate:", 0);

            }
            v64 = objc_msgSend(v60, "configuration");
            v57 = objc_msgSend(v64, "userContentController");

            sub_1191BC();
          }
          else
          {
            v61 = v55;
          }

          v55 = v57;
        }

      }
    }
  }
  v65 = (uint64_t)&v27[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost];
  swift_beginAccess(&v27[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost], v108, 0, 0);
  sub_3F238(v65, (uint64_t)&v109, &qword_3B89A0);
  if (v110)
  {
    sub_3F1CC(&v109, (uint64_t)&v111);
    v66 = swift_weakLoadStrong(&v27[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaderViewReusePool]);
    if (!v66)
    {
LABEL_48:
      sub_34488(&v111);
      goto LABEL_50;
    }
    v67 = v66;
    __chkstk_darwin(v66);
    v103[2] = &v111;
    swift_beginAccess(v68 + 32, &v109, 33, 0);
    v69 = sub_85F84((uint64_t (*)(uint64_t *))sub_85F68, (uint64_t)v103);
    v70 = v69;
    v71 = *(_QWORD *)(v67 + 32);
    if ((unint64_t)v71 >> 62)
    {
      if (v71 < 0)
        v102 = *(_QWORD *)(v67 + 32);
      else
        v102 = v71 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v67 + 32));
      v72 = _CocoaArrayWrapper.endIndex.getter(v102);
      swift_bridgeObjectRelease(v71);
      if (v72 >= v70)
        goto LABEL_47;
    }
    else
    {
      v72 = *(_QWORD *)((char *)&dword_10 + (v71 & 0xFFFFFFFFFFFFF8));
      if (v72 >= v69)
      {
LABEL_47:
        sub_88AE4(v70, v72, type metadata accessor for ContentViewHost);
        swift_endAccess(&v109);
        v73 = *((_QWORD *)&v112 + 1);
        v74 = v113;
        sub_472D0(&v111, *((uint64_t *)&v112 + 1));
        v75 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v74 + 24))(v73, v74);
        sub_BFC34(v75);
        swift_release();

        goto LABEL_48;
      }
    }
    __break(1u);
LABEL_66:
    __break(1u);
    return;
  }
  sub_52128((uint64_t)&v109, &qword_3B89A0);
LABEL_50:
  sub_76C8C();
  v76 = swift_getKeyPath(&unk_2E7D30);
  v77 = swift_getKeyPath(&unk_2E7D58);
  v111 = 0uLL;
  v78 = v27;
  static Published.subscript.setter(&v111, v78, v76, v77);
  sub_76E84();
  v79 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v111, v78, v79);
  swift_release();
  swift_release();
  v80 = (void *)v111;
  if ((_QWORD)v111)
  {
    v81 = objc_opt_self(v30[277]);
    v82 = (void *)swift_dynamicCastObjCClass(v80, v81);
    if (v82)
    {
      v83 = objc_msgSend(v82, "be_viewForFindUI");

      if (v83)
      {
        v84 = swift_allocObject(&unk_37CE78, 24);
        swift_unknownObjectWeakInit(v84 + 16, v78);
        *(_QWORD *)&v111 = v83;
        v85 = swift_getKeyPath(&unk_2E7D80);
        v86 = swift_allocObject(&unk_37CEA0, 32);
        *(_QWORD *)(v86 + 16) = sub_85EC4;
        *(_QWORD *)(v86 + 24) = v84;
        swift_retain_n(v84, 2);
        v87 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v85, 0, sub_618F8, v86, &protocol witness table for NSObject);
        swift_release();
        swift_release();
        v88 = swift_allocObject(&unk_37CEC8, 24);
        *(_QWORD *)(v88 + 16) = v87;
        v90 = type metadata accessor for AnyCancellable(0, v89);
        swift_allocObject(v90, *(unsigned int *)(v90 + 48));
        v80 = (void *)AnyCancellable.init(_:)(sub_85F48, v88);

        swift_release_n(v84);
        goto LABEL_56;
      }
    }
    else
    {

    }
    v80 = 0;
  }
LABEL_56:
  *(_QWORD *)&v78[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentAccessoryBoundsObservation] = v80;
  swift_release();
  v113 = 0;
  v111 = 0u;
  v112 = 0u;
  swift_beginAccess(v65, &v109, 33, 0);
  sub_85E58((uint64_t)&v111, v65);
  swift_endAccess(&v109);
  v91 = sub_38568((uint64_t)_swiftEmptyArrayStorage);
  v92 = (unint64_t *)&v78[OBJC_IVAR____TtC8BookEPUB13ContentLoader_axKeyUpdates];
  swift_beginAccess(&v78[OBJC_IVAR____TtC8BookEPUB13ContentLoader_axKeyUpdates], &v111, 1, 0);
  v93 = *v92;
  *v92 = v91;
  swift_bridgeObjectRelease(v93);
  v94 = &v78[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded];
  swift_beginAccess(&v78[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded], &v109, 1, 0);
  *v94 = 0;
  sub_74EDC();
  v95 = &v78[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates];
  swift_beginAccess(&v78[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates], v107, 1, 0);
  v96 = *(_QWORD *)v95;
  v97 = *(_QWORD *)(*(_QWORD *)v95 + 16);
  if (v97)
  {
    swift_bridgeObjectRetain(*(_QWORD *)v95);
    v98 = v96 + 56;
    do
    {
      v99 = *(_QWORD *)(v98 - 24);
      v100 = *(void (**)(_WORD *))(v98 - 8);
      v106[0] = 1;
      swift_unknownObjectRetain(v99);
      swift_retain();
      v100(v106);
      swift_release();
      swift_unknownObjectRelease(v99);
      v98 += 32;
      --v97;
    }
    while (v97);
    swift_bridgeObjectRelease(v96);
    v96 = *(_QWORD *)v95;
  }
  *(_QWORD *)v95 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v96);
  LOBYTE(v106[0]) = 1;
  sub_72A5C();
  v101 = &v78[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state];
  swift_beginAccess(v101, v106, 1, 0);
  *v101 = 1;
}

uint64_t sub_73EF8()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider, v3, 0, 0);
  return swift_unknownObjectRetain(*v1);
}

uint64_t sub_73F44@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  v5 = swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(a2, v3, KeyPath, v5);
  swift_release(v5);
  return swift_release(KeyPath);
}

uint64_t sub_73FAC(uint64_t a1, void **a2)
{
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  _BYTE v7[40];
  _BYTE v8[40];

  sub_3F238(a1, (uint64_t)v8, &qword_3B8990);
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  v5 = swift_getKeyPath(&unk_2E7D10);
  sub_3F238((uint64_t)v8, (uint64_t)v7, &qword_3B8990);
  static Published.subscript.setter(v7, v3, KeyPath, v5);
  return sub_52128((uint64_t)v8, &qword_3B8990);
}

uint64_t sub_74044@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  v4 = swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(a1, v1, KeyPath, v4);
  swift_release(v4);
  return swift_release(KeyPath);
}

uint64_t sub_740B0(uint64_t a1)
{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;
  _BYTE v6[40];

  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  v4 = swift_getKeyPath(&unk_2E7D10);
  sub_3F238(a1, (uint64_t)v6, &qword_3B8990);
  static Published.subscript.setter(v6, v1, KeyPath, v4);
  return sub_52128(a1, &qword_3B8990);
}

void (*sub_74140(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;
  uint64_t v5;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  v3[4] = KeyPath;
  v5 = swift_getKeyPath(&unk_2E7D10);
  v3[5] = v5;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v5);
  return sub_3A1B8;
}

uint64_t sub_741B8()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB13ContentLoader__document, &qword_3B89C8);
}

uint64_t sub_741CC(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3B89D0, &OBJC_IVAR____TtC8BookEPUB13ContentLoader__document, &qword_3B89C8);
}

void (*sub_741E8(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3B89D0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB13ContentLoader__document;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3B89C8);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

double sub_742B0@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  __int128 v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v5 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v7, v3, KeyPath, v5);
  swift_release(v5);
  swift_release(KeyPath);
  result = *(double *)&v7;
  *a2 = v7;
  return result;
}

void sub_7432C(uint64_t a1)
{
  id v1;
  uint64_t v2;
  id v3;

  v1 = *(id *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(id *)a1;
  sub_8688C(v1, v2);

}

uint64_t sub_74374()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v2 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v4, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  return v4;
}

void sub_743E4(void *a1, uint64_t a2)
{
  sub_8688C(a1, a2);

}

void (*sub_74408(_QWORD *a1))(void ***a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t KeyPath;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v3 + 2, v1, KeyPath);
  swift_release();
  swift_release();
  *(_OWORD *)v3 = *((_OWORD *)v3 + 1);
  return sub_744A4;
}

void sub_744A4(void ***a1, char a2)
{
  void **v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;

  v2 = *a1;
  v3 = *a1 + 2;
  v4 = **a1;
  v5 = (*a1)[1];
  v6 = (*a1)[4];
  if ((a2 & 1) == 0)
  {
    sub_76C8C();
    KeyPath = swift_getKeyPath(&unk_2E7D30);
    v26 = swift_getKeyPath(&unk_2E7D58);
    v2[2] = v4;
    v2[3] = v5;
    v27 = v4;
    v28 = v6;
    static Published.subscript.setter(v3, v28, KeyPath, v26);
    sub_76E84();
    v29 = swift_getKeyPath(&unk_2E7D30);
    swift_getKeyPath(&unk_2E7D58);
    static Published.subscript.getter(v3, v28, v29);
    swift_release();
    swift_release();
    v30 = v2[2];
    if (v30)
    {
      v31 = objc_opt_self(WKWebView);
      v32 = (void *)swift_dynamicCastObjCClass(v30, v31);
      if (v32)
      {
        v33 = objc_msgSend(v32, "be_viewForFindUI");

        if (v33)
        {
          v34 = v2[4];
          v35 = swift_allocObject(&unk_37CE78, 24);
          swift_unknownObjectWeakInit(v35 + 16, v34);
          v2[2] = v33;
          v36 = swift_getKeyPath(&unk_2E7D80);
          v37 = swift_allocObject(&unk_37CF40, 32);
          *(_QWORD *)(v37 + 16) = sub_85EC4;
          *(_QWORD *)(v37 + 24) = v35;
          swift_retain_n(v35, 2);
          v38 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v36, 0, sub_62894, v37, &protocol witness table for NSObject);
          swift_release();
          swift_release();
          v39 = swift_allocObject(&unk_37CF68, 24);
          *(_QWORD *)(v39 + 16) = v38;
          v41 = type metadata accessor for AnyCancellable(0, v40);
          swift_allocObject(v41, *(unsigned int *)(v41 + 48));
          v30 = (void *)AnyCancellable.init(_:)(sub_89AB0, v39);

          swift_release_n(v35);
          goto LABEL_15;
        }
      }
      else
      {

      }
      v30 = 0;
    }
LABEL_15:
    *(_QWORD *)((char *)v2[4] + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentAccessoryBoundsObservation) = v30;

    swift_release();
    goto LABEL_16;
  }
  v7 = v4;
  sub_76C8C();
  v8 = swift_getKeyPath(&unk_2E7D30);
  v9 = swift_getKeyPath(&unk_2E7D58);
  v2[2] = v4;
  v2[3] = v5;
  v10 = v6;
  v11 = v7;
  static Published.subscript.setter(v3, v10, v8, v9);
  sub_76E84();
  v12 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v3, v10, v12);
  swift_release();
  swift_release();
  v13 = v2[2];
  if (v13)
  {
    v14 = objc_opt_self(WKWebView);
    v15 = (void *)swift_dynamicCastObjCClass(v13, v14);
    if (v15)
    {
      v16 = objc_msgSend(v15, "be_viewForFindUI");

      if (v16)
      {
        v17 = v2[4];
        v18 = swift_allocObject(&unk_37CE78, 24);
        swift_unknownObjectWeakInit(v18 + 16, v17);
        v2[2] = v16;
        v19 = swift_getKeyPath(&unk_2E7D80);
        v20 = swift_allocObject(&unk_37CEF0, 32);
        *(_QWORD *)(v20 + 16) = sub_85EC4;
        *(_QWORD *)(v20 + 24) = v18;
        swift_retain_n(v18, 2);
        v21 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v19, 0, sub_62894, v20, &protocol witness table for NSObject);
        swift_release();
        swift_release();
        v22 = swift_allocObject(&unk_37CF18, 24);
        *(_QWORD *)(v22 + 16) = v21;
        v24 = type metadata accessor for AnyCancellable(0, v23);
        swift_allocObject(v24, *(unsigned int *)(v24 + 48));
        v13 = (void *)AnyCancellable.init(_:)(sub_89AB0, v22);

        swift_release_n(v18);
        goto LABEL_12;
      }
    }
    else
    {

    }
    v13 = 0;
  }
LABEL_12:
  *(_QWORD *)((char *)v2[4] + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentAccessoryBoundsObservation) = v13;

  swift_release();
LABEL_16:
  free(v2);
}

uint64_t sub_74908()
{
  return sub_3A39C(&OBJC_IVAR____TtC8BookEPUB13ContentLoader__contentView, &qword_3B89D8);
}

uint64_t sub_7491C(uint64_t a1)
{
  return sub_3A41C(a1, &qword_3B89E0, &OBJC_IVAR____TtC8BookEPUB13ContentLoader__contentView, &qword_3B89D8);
}

void (*sub_74938(_QWORD *a1))(uint64_t, char)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = sub_319AC(&qword_3B89E0);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC8BookEPUB13ContentLoader__contentView;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess(v1 + v8, v3, 33, 0);
  v9 = sub_319AC(&qword_3B89D8);
  v3[16] = v9;
  Published.projectedValue.getter(v9);
  swift_endAccess(v3);
  return sub_378FC;
}

uint64_t sub_74A00(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[24];
  _BYTE v6[40];

  sub_3F238(a1, (uint64_t)v6, &qword_3B89A0);
  v3 = *a2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost;
  swift_beginAccess(v3, v5, 33, 0);
  sub_85E58((uint64_t)v6, v3);
  return swift_endAccess(v5);
}

uint64_t sub_74A6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_3F238(v3, a1, &qword_3B89A0);
}

id sub_74ACC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v8;

  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v2 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v8, v0, KeyPath, v2);
  swift_release(v2);
  swift_release(KeyPath);
  v3 = v8;
  if (!v8)
    return 0;
  v4 = objc_opt_self(WKWebView);
  v5 = (void *)swift_dynamicCastObjCClass(v3, v4);
  if (!v5)
  {

    return 0;
  }
  v6 = objc_msgSend(v5, "be_viewForFindUI");

  return v6;
}

id sub_74B98()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC8BookEPUB13ContentLoader____lazy_storage___accessoryPageView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader____lazy_storage___accessoryPageView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader____lazy_storage___accessoryPageView);
  }
  else
  {
    v4 = type metadata accessor for ContentLoader.AccessoryPageView();
    v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4)), "init");
    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v6 = (void *)objc_opt_self(UIColor);
    v3 = v5;
    v7 = objc_msgSend(v6, "clearColor");
    objc_msgSend(v3, "setBackgroundColor:", v7);

    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id ExpandedContentAnimator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_74DFC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR____TtC8BookEPUB13ContentLoader____lazy_storage___accessoryScrollView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader____lazy_storage___accessoryScrollView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader____lazy_storage___accessoryScrollView);
  }
  else
  {
    v4 = type metadata accessor for ContentLoader.AccessoryScrollView();
    v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v4)), "init");
    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v5, "setAutomaticallyAdjustsScrollIndicatorInsets:", 0);
    v6 = (void *)objc_opt_self(UIColor);
    v3 = v5;
    v7 = objc_msgSend(v6, "clearColor");
    objc_msgSend(v3, "setBackgroundColor:", v7);

    v8 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

double sub_74EDC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  double result;
  uint64_t (*v26)(_BYTE *, char *, uint64_t);
  uint64_t v27;
  NSObject *v28;
  os_signpost_type_t v29;
  char *v30;
  uint8_t *v31;
  os_signpost_id_t v32;
  void (*v33)(_BYTE *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _BYTE *v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  _BYTE *v48;
  uint8_t *v49;
  os_signpost_id_t v50;
  _BYTE v51[4];
  int v52;
  void (*v53)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];

  v56 = type metadata accessor for OSSignpostError(0);
  v1 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v3 = &v51[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for OSSignpostID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v51[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v58 = &v51[-v9];
  __chkstk_darwin(v10);
  v12 = &v51[-v11];
  v13 = v0;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v57 = v7;
  v54 = v3;
  v55 = v1;
  if (v16)
  {
    v17 = swift_slowAlloc(18, -1);
    v18 = swift_slowAlloc(32, -1);
    v62[0] = v18;
    *(_DWORD *)v17 = 136446466;
    v19 = ContentLoader.shortDescription.getter();
    v21 = v20;
    v60 = sub_33524(v19, v20, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v17 + 4);
    swift_bridgeObjectRelease(v21);

    *(_WORD *)(v17 + 12) = 1024;
    v22 = &v13[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded];
    swift_beginAccess(&v13[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded], &v60, 0, 0);
    LODWORD(v22) = *v22;

    v59 = (int)v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v17 + 14);

    _os_log_impl(&dword_0, v14, v15, "loader: %{public}s #contentLoaded: %{BOOL}d", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v23 = (_QWORD *)&unk_3CE000;
  }
  else
  {

    v23 = &unk_3CE000;
  }
  v24 = &v13[v23[495]];
  swift_beginAccess(v24, v62, 0, 0);
  LOBYTE(v59) = *v24;
  CurrentValueSubject.send(_:)(&v59);
  if (*v24 == 1)
  {
    v26 = *(uint64_t (**)(_BYTE *, char *, uint64_t))(v5 + 16);
    v27 = v26(v12, &v13[OBJC_IVAR____TtC8BookEPUB13ContentLoader_signpostID], v4);
    v28 = OSSignposter.logHandle.getter(v27);
    v29 = static os_signpost_type_t.event.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v30 = v58;
      v26(v58, v12, v4);
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      v32 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_0, v28, v29, v32, "REI.ContentLoaded", "", v31, 2u);
      swift_slowDealloc(v31, -1, -1);

      v33 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v33(v12, v4);
      v34 = v30;
    }
    else
    {

      v33 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
      v34 = v12;
    }
    v33(v34, v4);
    v35 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_viewCreationIntervalState;
    if (*(_QWORD *)&v13[OBJC_IVAR____TtC8BookEPUB13ContentLoader_viewCreationIntervalState])
    {
      v36 = swift_retain();
      v37 = OSSignposter.logHandle.getter(v36);
      v38 = v57;
      v39 = OSSignpostIntervalState.signpostID.getter();
      v40 = static os_signpost_type_t.end.getter(v39);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v52 = v40;
        v53 = (void (*)(_BYTE *, _BYTE *, uint64_t))v26;
        v41 = swift_retain();
        v42 = v54;
        checkForErrorAndConsumeState(state:)(v41);
        v43 = swift_release();
        v45 = v55;
        v44 = v56;
        if ((*(unsigned int (**)(_BYTE *, uint64_t, __n128))(v55 + 88))(v42, v56, v43) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v46 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v42, v44);
          v46 = "";
        }
        v47 = v58;
        v48 = v38;
        v53(v58, v38, v4);
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        v50 = OSSignpostID.rawValue.getter();
        _os_signpost_emit_with_name_impl(&dword_0, v37, (os_signpost_type_t)v52, v50, "REI.ViewCreation", v46, v49, 2u);
        swift_slowDealloc(v49, -1, -1);

        v33(v48, v4);
      }
      else
      {

        v47 = v38;
      }
      v33(v47, v4);
      *(_QWORD *)&v13[v35] = 0;
      swift_release();
      *(_QWORD *)&result = swift_release().n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_753F0()
{
  uint64_t v0;
  unsigned __int8 *v1;
  _BYTE v3[24];

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded, v3, 0, 0);
  return *v1;
}

double sub_75434(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  _BYTE v5[24];

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded, v5, 1, 0);
  *v3 = a1;
  return sub_74EDC();
}

double (*sub_75488(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded, a1, 33, 0);
  return sub_754D0;
}

double sub_754D0(uint64_t a1, char a2)
{
  double result;

  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    return sub_74EDC();
  return result;
}

uint64_t sub_75500()
{
  return sub_75548((uint64_t)&OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoadedSubject, (uint64_t *)&unk_3B89F0, &qword_3B6990, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
}

uint64_t sub_75524()
{
  return sub_75548((uint64_t)&OBJC_IVAR____TtC8BookEPUB13ContentLoader_accessoryViewBoundsChangedSubject, (uint64_t *)&unk_3B8EA0, (unint64_t *)&qword_3B8A10, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
}

uint64_t sub_75548(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = sub_319AC(a2);
  v8 = sub_3DCC0(a3, a2, a4);
  return Publisher.eraseToAnyPublisher()(v7, v8);
}

uint64_t sub_755BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = (uint64_t *)(*a2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_75624()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_7566C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_756BC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_75700()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService, v3, 0, 0);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_7574C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  v5 = v2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService;
  swift_beginAccess(v5, v7, 1, 0);
  *(_QWORD *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1);
}

void (*sub_757B4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_75828;
}

void sub_75828(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(v6 + 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4);
  }
  free(v3);
}

uint64_t sub_7589C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider, v3, 0, 0);
  return swift_weakLoadStrong(v1);
}

uint64_t sub_758E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider;
  swift_beginAccess(v3, v5, 1, 0);
  swift_weakAssign(v3, a1);
  return swift_release(a1);
}

void (*sub_7593C(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v3[3] = swift_weakLoadStrong(v5);
  return sub_759AC;
}

void sub_759AC(uint64_t a1, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  swift_weakAssign(*(_QWORD *)(*(_QWORD *)a1 + 32) + *(_QWORD *)(*(_QWORD *)a1 + 40), v4);
  if ((a2 & 1) != 0)
  {
    swift_release(v3[3]);
    swift_endAccess(v3);
  }
  else
  {
    swift_endAccess(v3);
    swift_release(v4);
  }
  free(v3);
}

id SnapshotContentLoader.__allocating_init(layoutProvider:contentMediator:paginatingService:stylesheetProvider:contentLoaderViewReusePool:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return ContentLoader.init(layoutProvider:contentMediator:paginatingService:stylesheetProvider:contentLoaderViewReusePool:)(a1, a2, a3, a4, a5, a6, a7);
}

id ContentLoader.init(layoutProvider:contentMediator:paginatingService:stylesheetProvider:contentLoaderViewReusePool:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  char *v44;
  objc_class *v45;
  id v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t ObjectType;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  objc_super v79;
  char v80[24];
  char v81[24];
  _BYTE v82[40];
  _OWORD v83[2];
  uint64_t v84;

  v74 = a7;
  v73 = a6;
  v67 = a5;
  v72 = a4;
  v75 = a3;
  v76 = a2;
  v71 = a1;
  v70 = type metadata accessor for OSSignpostID(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70);
  v68 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_319AC(&qword_3B89D8);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_319AC(&qword_3B89C8);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v7;
  UUID.init()();
  v20 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_signposter];
  if (qword_3B56E8 != -1)
    swift_once(&qword_3B56E8, sub_72938);
  v21 = sub_555F0(v15, (uint64_t)qword_3CEF38);
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v65(v18, v21, v15);
  OSSignposter.init(logger:)(v18);
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_viewCreationIntervalState] = 0;
  v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_attemptingReload] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates] = _swiftEmptyArrayStorage;
  v22 = (uint64_t *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider];
  *v22 = 0;
  v22[1] = 0;
  v66 = v20;
  v23 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader__document];
  v84 = 0;
  memset(v83, 0, sizeof(v83));
  sub_3F238((uint64_t)v83, (uint64_t)v82, &qword_3B8990);
  v24 = sub_319AC(&qword_3B8990);
  Published.init(initialValue:)(v82, v24);
  sub_52128((uint64_t)v83, &qword_3B8990);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v23, v14, v11);
  v25 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader__contentView];
  v83[0] = 0uLL;
  v26 = sub_319AC(&qword_3B8A30);
  Published.init(initialValue:)(v83, v26);
  (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v25, v10, v64);
  v27 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost];
  *(_OWORD *)v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  *((_QWORD *)v27 + 4) = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_imageFilterMode] = 0;
  v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_lineGuideEnabled] = 0;
  v28 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_axKeyUpdates;
  *(_QWORD *)&v19[v28] = sub_38568((uint64_t)_swiftEmptyArrayStorage);
  v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_mediaContentState] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentAccessoryBoundsObservation] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader____lazy_storage___accessoryPageView] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader____lazy_storage___accessoryScrollView] = 0;
  v29 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded];
  v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded] = 0;
  v30 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_accessoryViewBoundsChangedSubject;
  v31 = sub_319AC((uint64_t *)&unk_3B8EA0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48));
  *(_QWORD *)&v19[v30] = PassthroughSubject.init()();
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables] = &_swiftEmptySetSingleton;
  v32 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator];
  swift_unknownObjectWeakInit(&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator], 0);
  v33 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService];
  *((_QWORD *)v33 + 1) = 0;
  swift_unknownObjectWeakInit(v33, 0);
  v34 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider];
  swift_weakInit(&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider], 0);
  v35 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaderViewReusePool];
  swift_weakInit(&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaderViewReusePool], 0);
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pageLayers] = _swiftEmptyArrayStorage;
  v65(&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_log], v21, v15);
  v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer] = 0;
  v36 = &v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusStartPoint];
  *v36 = 0;
  v36[1] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusLongPressRecognizer] = 0;
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusPanRecognizer] = 0;
  v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state] = 0;
  swift_beginAccess(v22, v83, 1, 0);
  v37 = *v22;
  v38 = v71;
  v39 = v76;
  *v22 = v71;
  v22[1] = v39;
  swift_unknownObjectRetain(v38);
  swift_unknownObjectRelease(v37);
  swift_unknownObjectWeakAssign(v32, v75);
  swift_beginAccess(v33, v82, 1, 0);
  *((_QWORD *)v33 + 1) = v67;
  v40 = v72;
  swift_unknownObjectWeakAssign(v33, v72);
  swift_beginAccess(v34, v81, 1, 0);
  swift_weakAssign(v34, v73);
  swift_weakAssign(v35, v74);
  swift_beginAccess(v29, v80, 0, 0);
  LOBYTE(v78) = *v29;
  v41 = sub_319AC((uint64_t *)&unk_3B89F0);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48));
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoadedSubject] = CurrentValueSubject.init(_:)(&v78);
  v42 = objc_msgSend(objc_allocWithZone((Class)UIEditMenuInteraction), "initWithDelegate:", 0);
  *(_QWORD *)&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_editMenuInteraction] = v42;
  v43 = OSSignposter.logHandle.getter(v42);
  v44 = v68;
  OSSignpostID.init(log:)(v43);
  (*(void (**)(_BYTE *, char *, uint64_t))(v69 + 32))(&v19[OBJC_IVAR____TtC8BookEPUB13ContentLoader_signpostID], v44, v70);

  v45 = (objc_class *)type metadata accessor for ContentLoader(0);
  v79.receiver = v19;
  v79.super_class = v45;
  v46 = objc_msgSendSuper2(&v79, "init");
  swift_unknownObjectRetain_n(v38, 2);
  v47 = v46;
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.info.getter();
  v50 = os_log_type_enabled(v48, v49);
  v51 = v76;
  if (v50)
  {
    v52 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(64, -1);
    v78 = v53;
    *(_DWORD *)v52 = 136446466;
    v54 = ContentLoader.shortDescription.getter();
    v56 = v55;
    v77 = sub_33524(v54, v55, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v52 + 4);
    swift_bridgeObjectRelease(v56);

    *(_WORD *)(v52 + 12) = 2082;
    ObjectType = swift_getObjectType(v38);
    v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 192))(ObjectType, v51);
    v60 = v59;
    v77 = sub_33524(v58, v59, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v52 + 14);
    swift_bridgeObjectRelease(v60);
    swift_unknownObjectRelease_n(v38, 2);
    _os_log_impl(&dword_0, v48, v49, "ContentLoader %{public}s Instantiated with: #contentConfig:%{public}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);

    swift_release();
    swift_release();
    swift_unknownObjectRelease(v72);

    swift_unknownObjectRelease(v38);
  }
  else
  {

    swift_unknownObjectRelease_n(v38, 3);
    swift_release();
    swift_release();
    swift_unknownObjectRelease(v40);

  }
  return v47;
}

id ContentLoader.__deallocating_deinit()
{
  void *v0;
  uint64_t KeyPath;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  objc_super v17;
  _QWORD v18[2];

  sub_76C8C();
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v2 = swift_getKeyPath(&unk_2E7D58);
  v18[0] = 0;
  v18[1] = 0;
  v3 = v0;
  static Published.subscript.setter(v18, v3, KeyPath, v2);
  sub_76E84();
  v4 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v18, v3, v4);
  swift_release();
  swift_release();
  v5 = (void *)v18[0];
  if (v18[0])
  {
    v6 = objc_opt_self(WKWebView);
    v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
    if (v7)
    {
      v8 = objc_msgSend(v7, "be_viewForFindUI");

      if (v8)
      {
        v9 = swift_allocObject(&unk_37CE78, 24);
        swift_unknownObjectWeakInit(v9 + 16, v3);
        v18[0] = v8;
        v10 = swift_getKeyPath(&unk_2E7D80);
        v11 = swift_allocObject(&unk_37CF90, 32);
        *(_QWORD *)(v11 + 16) = sub_85EC4;
        *(_QWORD *)(v11 + 24) = v9;
        swift_retain_n(v9, 2);
        v12 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v10, 0, sub_62894, v11, &protocol witness table for NSObject);
        swift_release();
        swift_release();
        v13 = swift_allocObject(&unk_37CFB8, 24);
        *(_QWORD *)(v13 + 16) = v12;
        v15 = type metadata accessor for AnyCancellable(0, v14);
        swift_allocObject(v15, *(unsigned int *)(v15 + 48));
        v5 = (void *)AnyCancellable.init(_:)(sub_89AB0, v13);
        swift_release_n(v9);

        goto LABEL_7;
      }
    }
    else
    {

    }
    v5 = 0;
  }
LABEL_7:
  *(_QWORD *)&v3[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentAccessoryBoundsObservation] = v5;
  swift_release();
  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for ContentLoader(0);
  return objc_msgSendSuper2(&v17, "dealloc");
}

void sub_76788(uint64_t *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t KeyPath;
  void *v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v14, v2, KeyPath);
  swift_release();
  swift_release();
  v5 = v14;
  if (v14)
  {
    v6 = v15;
    ObjectType = swift_getObjectType(v14);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v6 + 144))(&v14, ObjectType, v6);

    v8 = v15;
    if (v15)
    {
      v9 = (uint64_t)v14;
      v10 = v16;
      v11 = v2;
      swift_bridgeObjectRetain(v8);
      v12 = swift_bridgeObjectRetain(v10);
      v13 = sub_865CC(v12);

      sub_86ABC(v9, v8, v10);
      swift_bridgeObjectRelease(v10);
      if (v13[2])
      {
        *a1 = v9;
        a1[1] = v8;
        a1[2] = (uint64_t)v13;
        return;
      }
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v13);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void ContentLoader.convertToDocument(_:)(double *a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  double v44;

  v4 = *((_OWORD *)a1 + 1);
  v42 = *(_OWORD *)a1;
  v43 = v4;
  v44 = a1[4];
  v5 = sub_81DE4();
  if (v5)
  {
    v6 = v5;
    KeyPath = swift_getKeyPath(&unk_2E7CE8);
    swift_getKeyPath(&unk_2E7D10);
    static Published.subscript.getter(v38, v2, KeyPath);
    swift_release();
    swift_release();
    v8 = v39;
    if (v39)
    {
      v9 = v40;
      v10 = sub_472D0(v38, v39);
      v11 = *(_QWORD *)(v8 - 8);
      v12 = __chkstk_darwin(v10);
      v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v11 + 16))(v14, v12);
      sub_52128((uint64_t)v38, &qword_3B8990);
      sub_1B841C(v9, &v41);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v8);
      v15 = v41;
      objc_msgSend((id)v42, "convertRect:toCoordinateSpace:", v6, *((double *)&v42 + 1), v43, v44);
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v23 = v22;
      swift_unknownObjectRelease(v6);
      *(_QWORD *)a2 = v15;
      *(_QWORD *)(a2 + 8) = v17;
      *(_QWORD *)(a2 + 16) = v19;
      *(_QWORD *)(a2 + 24) = v21;
      *(_QWORD *)(a2 + 32) = v23;
      *(_BYTE *)(a2 + 40) = 0;
      return;
    }
    swift_unknownObjectRelease(v6);
    sub_52128((uint64_t)v38, &qword_3B8990);
  }
  v24 = v2;
  sub_5B5BC(&v42);
  v25 = v24;
  v26 = sub_5B5BC(&v42);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(32, -1);
    v30 = (_QWORD *)swift_slowAlloc(8, -1);
    v37 = swift_slowAlloc(64, -1);
    v38[0] = v37;
    *(_DWORD *)v29 = 138412802;
    v41 = (uint64_t)v25;
    v31 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v29 + 4);
    *v30 = v25;

    *(_WORD *)(v29 + 12) = 2080;
    v41 = sub_33524(0xD000000000000015, 0x80000000002C85B0, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v29 + 14);
    *(_WORD *)(v29 + 22) = 2080;
    sub_5B5BC(&v42);
    v32 = sub_5D5E4();
    v34 = v33;
    sub_5B594(&v42);
    v41 = sub_33524(v32, v34, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v29 + 24);
    swift_bridgeObjectRelease(v34);
    sub_5B594(&v42);
    sub_5B594(&v42);
    _os_log_impl(&dword_0, v27, v28, "%@.%s: Unable to convert %s: missing document base and/or document", (uint8_t *)v29, 0x20u);
    v35 = sub_319AC(&qword_3B8A70);
    swift_arrayDestroy(v30, 1, v35);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    sub_5B594(&v42);
    sub_5B594(&v42);
  }
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_BYTE *)(a2 + 40) = 1;
}

void sub_76C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  void *v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t ObjectType;
  id v16;
  void (*v17)(id, uint64_t, uint64_t);
  id v18;
  _QWORD v19[2];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v19, v1, KeyPath);
  swift_release();
  swift_release();
  v3 = (void *)v19[0];
  if (v19[0])
  {
    v4 = v19[1];
    Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
    if (Strong)
    {
      v6 = (void *)Strong;
      v7 = objc_opt_self(WKWebView);
      v8 = swift_dynamicCastObjCClass(v3, v7);
      if (v8)
      {
        v9 = (void *)v8;
        v10 = v3;
        v11 = objc_msgSend(v9, "be_uiHandler");
        if (v11)
        {
          v12 = v11;
          objc_msgSend(v11, "setDelegate:", 0);

        }
        v13 = objc_msgSend(v9, "configuration");
        v14 = objc_msgSend(v13, "userContentController");

        sub_1191BC();
      }

    }
    ObjectType = swift_getObjectType(v3);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v4 + 184))(0, ObjectType, v4);
    objc_msgSend(v3, "setClipsToBounds:", 1);
    v16 = sub_74DFC();
    v17 = *(void (**)(id, uint64_t, uint64_t))(v4 + 200);
    v17(v16, ObjectType, v4);

    v18 = sub_74B98();
    v17(v18, ObjectType, v4);

    objc_msgSend(v3, "removeInteraction:", *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_editMenuInteraction));
  }
}

void sub_76E84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  void *v3;
  uint64_t v4;
  uint64_t Strong;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  uint64_t ObjectType;
  id v15;
  void (*v16)(id, uint64_t, uint64_t, double);
  id v17;
  _QWORD v18[2];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v18, v1, KeyPath);
  swift_release();
  swift_release();
  v3 = (void *)v18[0];
  if (v18[0])
  {
    v4 = v18[1];
    Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
    if (Strong)
    {
      v6 = (void *)Strong;
      v7 = objc_opt_self(WKWebView);
      v8 = (void *)swift_dynamicCastObjCClass(v3, v7);
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "be_uiHandler", v3, v4, v1);
        if (v10)
        {
          v11 = v10;
          objc_msgSend(v10, "setDelegate:", v6);

        }
        v12 = objc_msgSend(v9, "configuration");
        v13 = objc_msgSend(v12, "userContentController");

        JUMPOUT(0x77028);
      }

    }
    ObjectType = swift_getObjectType(v3);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 184))(v1, ObjectType, v4);
    objc_msgSend(v3, "setClipsToBounds:", 0);
    v15 = sub_74DFC();
    v16 = *(void (**)(id, uint64_t, uint64_t, double))(v4 + 192);
    v16(v15, ObjectType, v4, 38.0);

    v17 = sub_74B98();
    v16(v17, ObjectType, v4, 38.0);

    objc_msgSend(v3, "addInteraction:", *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_editMenuInteraction));
  }
}

double ContentLoader.peripheralAccessoryLength.getter()
{
  return 38.0;
}

double sub_772A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v4 = (void *)Strong;
    swift_retain();

    v5 = sub_319AC((uint64_t *)&unk_3B8EA0);
    v6 = sub_3DCC0((unint64_t *)&unk_3B8CC0, (uint64_t *)&unk_3B8EA0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v5, v6);
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  return result;
}

void sub_77350(char *a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *((_QWORD *)a1 + 1);
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  v17 = *((_QWORD *)a1 + 5);
  v18 = *((_QWORD *)a1 + 4);
  v15 = *((_QWORD *)a1 + 7);
  v16 = *((_QWORD *)a1 + 6);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_imageFilterMode) = a2;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v11 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v19, v2, KeyPath, v11);
  swift_release(v11);
  swift_release(KeyPath);
  v12 = v19;
  if (v19)
  {
    v13 = v20;
    ObjectType = swift_getObjectType(v19);
    LOBYTE(v19) = v4;
    BYTE1(v19) = v5;
    BYTE2(v19) = v6;
    v20 = v7;
    v21 = v8;
    v22 = v9;
    v23 = v18;
    v24 = v17;
    v25 = v16;
    v26 = v15;
    (*(void (**)(void **, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 168))(&v19, a2, 1, ObjectType, v13);

  }
}

void sub_7746C(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t ObjectType;
  _QWORD v8[2];

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_lineGuideEnabled) = a1;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v4 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v8, v1, KeyPath, v4);
  swift_release(v4);
  swift_release(KeyPath);
  v5 = (void *)v8[0];
  if (v8[0])
  {
    v6 = v8[1];
    ObjectType = swift_getObjectType(v8[0]);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v6 + 176))(a1 & 1, ObjectType, v6);

  }
}

uint64_t sub_77514(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double MidX;
  double MinY;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD v31[5];
  __int128 v32;
  __int128 v33;
  double v34;
  CGRect v35;
  CGRect v36;

  v2 = v1;
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v32, v2, KeyPath);
  swift_release();
  swift_release();
  v10 = (void *)v32;
  if ((_QWORD)v32)
  {
    v31[0] = v3;
    v31[1] = v4;
    v31[2] = v5;
    v31[3] = v6;
    v31[4] = v7;
    ContentLoader.convertToUI(_:)((uint64_t)v31, (uint64_t)&v32);
    v11 = (void *)v32;
    if ((_QWORD)v32)
    {
      v13 = *((double *)&v33 + 1);
      v12 = v34;
      v15 = *((double *)&v32 + 1);
      v14 = *(double *)&v33;
      swift_unknownObjectRetain(v10);
      objc_msgSend(v11, "convertRect:toCoordinateSpace:", v10, v15, v14, v13, v12);
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v23 = v22;
      swift_unknownObjectRelease(v11);
      v35.origin.x = v17;
      v35.origin.y = v19;
      v35.size.width = v21;
      v35.size.height = v23;
      MidX = CGRectGetMidX(v35);
      v36.origin.x = v17;
      v36.origin.y = v19;
      v36.size.width = v21;
      v36.size.height = v23;
      MinY = CGRectGetMinY(v36);
      sub_34450(0, &qword_3B8A78, UIEditMenuConfiguration_ptr);
      v34 = 0.0;
      v32 = 0u;
      v33 = 0u;
      v26 = UIEditMenuConfiguration.init(identifier:sourcePoint:)(&v32, MidX, MinY);
      objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_editMenuInteraction), "presentEditMenuWithConfiguration:", v26);

      v27 = 1;
      goto LABEL_8;
    }

  }
  v26 = Logger.logObject.getter(v9);
  v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_0, v26, v28, "Unable to present edit menu: no content view or could not convert source rect to UI", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }
  v27 = 0;
LABEL_8:

  return v27;
}

double ContentLoader.convertToUI(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v3;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  double result;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  Swift::String v38;
  void *object;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49[2];
  uint64_t v50;
  uint64_t v51;
  id v52;
  _BYTE v53[40];

  v3 = v2;
  v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v53 = *(_OWORD *)a1;
  *(_OWORD *)&v53[16] = v5;
  *(_QWORD *)&v53[32] = *(_QWORD *)(a1 + 32);
  v6 = sub_81DE4();
  if (!v6)
    goto LABEL_6;
  v7 = v6;
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(&v48, v3, KeyPath);
  swift_release();
  swift_release();
  v9 = v50;
  if (!v50)
  {
    swift_unknownObjectRelease(v7);
    sub_52128((uint64_t)&v48, &qword_3B8990);
LABEL_6:
    v18 = v3;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(32, -1);
      v22 = (_QWORD *)swift_slowAlloc(8, -1);
      v46 = swift_slowAlloc(64, -1);
      v48 = v46;
      *(_DWORD *)v21 = 138412802;
      v52 = v18;
      v23 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v21 + 4);
      *v22 = v18;

      *(_WORD *)(v21 + 12) = 2080;
      v52 = (id)sub_33524(0x54747265766E6F63, 0xEF293A5F2849556FLL, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v21 + 14);
      *(_WORD *)(v21 + 22) = 2080;
      v24 = sub_5D4E8();
      v26 = v25;
      v52 = (id)sub_33524(v24, v25, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v21 + 24);
      swift_bridgeObjectRelease(v26);
      _os_log_impl(&dword_0, v19, v20, "%@.%s: Unable to convert %s: missing document base and/or document", (uint8_t *)v21, 0x20u);
      v27 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v22, 1, v27);
      swift_slowDealloc(v22, -1, -1);
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
    goto LABEL_12;
  }
  v10 = v51;
  v11 = sub_472D0(&v48, v50);
  v12 = *(_QWORD *)(v9 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v12 + 16))(v15, v13);
  sub_52128((uint64_t)&v48, &qword_3B8990);
  sub_1B841C(v10, (uint64_t *)&v52);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v9);
  v16 = (uint64_t)v52;
  if (*(id *)v53 == v52)
  {
    *(_QWORD *)a2 = v7;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)&v53[8];
    result = *(double *)&v53[24];
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v53[24];
    return result;
  }
  v28 = v3;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter();
  v31 = v30;
  if (os_log_type_enabled(v29, v30))
  {
    v32 = swift_slowAlloc(42, -1);
    v33 = (_QWORD *)swift_slowAlloc(8, -1);
    v46 = swift_slowAlloc(96, -1);
    v52 = (id)v46;
    *(_DWORD *)v32 = 138413058;
    HIDWORD(v44) = v31;
    v48 = (uint64_t)v28;
    v45 = a2;
    v34 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v32 + 4);
    *v33 = v28;

    *(_WORD *)(v32 + 12) = 2080;
    v48 = sub_33524(0x54747265766E6F63, 0xEF293A5F2849556FLL, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v32 + 14);
    *(_WORD *)(v32 + 22) = 2080;
    v35 = sub_5D4E8();
    v37 = v36;
    v48 = sub_33524(v35, v36, (uint64_t *)&v52);
    a2 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v32 + 24);
    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v32 + 32) = 2080;
    v48 = 0;
    v49[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease(v49[0]);
    v48 = 0xD000000000000011;
    v49[0] = 0x80000000002C85D0;
    v47 = v16;
    v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v38._object;
    String.append(_:)(v38);
    swift_bridgeObjectRelease(object);
    v40._countAndFlagsBits = 41;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    v41 = v49[0];
    v48 = sub_33524(v48, v49[0], (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v32 + 34);
    swift_bridgeObjectRelease(v41);
    _os_log_impl(&dword_0, v29, BYTE4(v44), "%@.%s: Refusing to convert %s: Does not match document ID: %s", (uint8_t *)v32, 0x2Au);
    v42 = sub_319AC(&qword_3B8A70);
    swift_arrayDestroy(v33, 1, v42);
    swift_slowDealloc(v33, -1, -1);
    v43 = v46;
    swift_arrayDestroy(v46, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v32, -1, -1);
    swift_unknownObjectRelease(v7);

  }
  else
  {
    swift_unknownObjectRelease(v7);

  }
LABEL_12:
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_77D54(char *a1, uint64_t a2, void *a3, _QWORD *a4, void (*a5)(uint64_t *), uint64_t a6)
{
  char *v6;
  void *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t Strong;
  uint64_t KeyPath;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t ObjectType;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  int v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_t v61;
  id v62;
  char *v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double (*v77)(uint64_t, uint64_t);
  double v78;
  double v79;
  double v80;
  double (*v81)(uint64_t, uint64_t);
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  id v89;
  id v90;
  NSObject *v91;
  os_log_type_t v92;
  int v93;
  uint64_t v94;
  id v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  __n128 v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  os_log_t v119;
  uint64_t v120;
  uint64_t v121;
  os_log_t v122;
  NSObject *v123;
  uint64_t v124;
  int v125;
  void (*v126)(os_log_t, uint64_t);
  os_log_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  int64_t v131;
  unint64_t v132;
  _QWORD *v133;
  int64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  id v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  __n128 v172;
  _BYTE v174[4];
  int v175;
  void *v176;
  uint64_t v177;
  _QWORD *v178;
  void *v179;
  void (*v180)(uint64_t *);
  NSObject *v181;
  os_log_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  _BYTE *v190;
  _BYTE *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  __int128 v196[2];
  char v197[24];
  __int128 v198;
  uint64_t v199;
  uint64_t v200[2];
  uint64_t v201;
  uint64_t v202;
  char v203[8];
  uint64_t v204;

  v7 = v6;
  v194 = a6;
  v189 = a3;
  v193 = a2;
  v192 = a1;
  v10 = sub_319AC(&qword_3B8450);
  __chkstk_darwin(v10);
  v191 = &v174[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v186 = type metadata accessor for UUID(0);
  v185 = *(_QWORD *)(v186 - 8);
  __chkstk_darwin(v186);
  v190 = &v174[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v184 = v12;
  __chkstk_darwin(v13);
  v195 = &v174[-v14];
  v188 = type metadata accessor for URL(0);
  v187 = *(_QWORD *)(v188 - 8);
  __chkstk_darwin(v188);
  v181 = &v174[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = sub_319AC(&qword_3B8C78);
  __chkstk_darwin(v16);
  v18 = &v174[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v19);
  v182 = (os_log_t)&v174[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21);
  v23 = &v174[-v22];
  __chkstk_darwin(v24);
  v26 = &v174[-v25];
  v27 = a4[3];
  v28 = a4[4];
  sub_472D0(a4, v27);
  v29 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v28 + 96);
  v30 = v28;
  v31 = v6;
  v29(&v204, v27, v30);
  v32 = &v6[OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService];
  swift_beginAccess(v32, v203, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v32);
  if (!Strong)
  {
    sub_49F1C((uint64_t)a4, (uint64_t)v200);
    v50 = v7;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc(22, -1);
      v54 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v198 = v54;
      *(_DWORD *)v53 = 136446466;
      v55 = ContentLoader.shortDescription.getter();
      v57 = v56;
      *(_QWORD *)&v196[0] = sub_33524(v55, v56, (uint64_t *)&v198);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v196, (char *)v196 + 8, v53 + 4);
      swift_bridgeObjectRelease(v57);

      *(_WORD *)(v53 + 12) = 2050;
      v58 = v201;
      v59 = v202;
      sub_472D0(v200, v201);
      v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 40))(v58, v59);
      sub_34488(v200);
      *(_QWORD *)&v196[0] = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v196, (char *)v196 + 8, v53 + 14);
      _os_log_impl(&dword_0, v51, v52, "ContentLoader(%{public}s) for ordinal %{public}ld has no paginating service reference", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {
      sub_34488(v200);

    }
    LOWORD(v200[0]) = 256;
    a5(v200);
    goto LABEL_35;
  }
  v183 = Strong;
  v180 = a5;
  v177 = *((_QWORD *)v32 + 1);
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v200, v7, KeyPath);
  swift_release();
  *(_QWORD *)&v35 = swift_release().n128_u64[0];
  v36 = v200[0];
  v178 = a4;
  if (v200[0])
  {
    v176 = v7;
    v37 = v200[1];
    ObjectType = swift_getObjectType(v200[0]);
    v175 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 40))(ObjectType, v37);
    v39 = a4;
    v40 = a4[3];
    v179 = (void *)v36;
    v41 = v39[4];
    sub_472D0(v39, v40);
    v42 = *(void (**)(uint64_t, uint64_t))(v41 + 72);
    v43 = v41;
    v44 = v179;
    v42(v40, v43);
    v45 = v187;
    v46 = v188;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v187 + 56))(v26, 0, 1, v188);
    (*(void (**)(uint64_t, uint64_t))(v37 + 128))(ObjectType, v37);
    v47 = (uint64_t)&v18[*(int *)(v16 + 48)];
    sub_3F238((uint64_t)v26, (uint64_t)v18, (uint64_t *)&unk_3B8C50);
    sub_3F238((uint64_t)v23, v47, (uint64_t *)&unk_3B8C50);
    v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    if (v48((uint64_t)v18, 1, v46) == 1)
    {
      sub_52128((uint64_t)v23, (uint64_t *)&unk_3B8C50);
      sub_52128((uint64_t)v26, (uint64_t *)&unk_3B8C50);
      v49 = v48(v47, 1, v46);
      v31 = v176;
      if (v49 == 1)
      {
        sub_52128((uint64_t)v18, (uint64_t *)&unk_3B8C50);
LABEL_11:

        goto LABEL_12;
      }
    }
    else
    {
      v61 = v182;
      sub_3F238((uint64_t)v18, (uint64_t)v182, (uint64_t *)&unk_3B8C50);
      if (v48(v47, 1, v46) != 1)
      {
        v122 = v61;
        v123 = v181;
        (*(void (**)(NSObject *, uint64_t, uint64_t))(v45 + 32))(v181, v47, v46);
        v124 = sub_34284((unint64_t *)&qword_3B8CA0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v125 = dispatch thunk of static Equatable.== infix(_:_:)(v122, v123, v46, v124);
        v126 = *(void (**)(os_log_t, uint64_t))(v45 + 8);
        v126(v123, v46);
        sub_52128((uint64_t)v23, (uint64_t *)&unk_3B8C50);
        sub_52128((uint64_t)v26, (uint64_t *)&unk_3B8C50);
        v127 = v122;
        v44 = v179;
        v126(v127, v46);
        sub_52128((uint64_t)v18, (uint64_t *)&unk_3B8C50);
        v31 = v176;
        if (((v175 | v125) & 1) != 0)
          goto LABEL_11;
        goto LABEL_26;
      }
      sub_52128((uint64_t)v23, (uint64_t *)&unk_3B8C50);
      sub_52128((uint64_t)v26, (uint64_t *)&unk_3B8C50);
      (*(void (**)(os_log_t, uint64_t))(v45 + 8))(v61, v46);
      v31 = v176;
    }
    sub_52128((uint64_t)v18, &qword_3B8C78);
    if ((v175 & 1) != 0)
      goto LABEL_11;
LABEL_26:
    v128 = sub_42140(0, 1, 1, _swiftEmptyArrayStorage);
    v130 = v128[2];
    v129 = v128[3];
    v131 = v129 >> 1;
    v132 = v130 + 1;
    if (v129 >> 1 <= v130)
    {
      v128 = sub_42140((_QWORD *)(v129 > 1), v130 + 1, 1, v128);
      v129 = v128[3];
      v131 = v129 >> 1;
    }
    v128[2] = v132;
    v133 = &v128[2 * v130];
    v133[4] = 0xD000000000000020;
    v133[5] = 0x80000000002C8C00;
    v134 = v130 + 2;
    if (v131 < v134)
      v128 = sub_42140((_QWORD *)(v129 > 1), v134, 1, v128);
    v128[2] = v134;
    v135 = &v128[2 * v132];
    v135[4] = 0xD000000000000032;
    v135[5] = 0x80000000002C8C30;
    v200[0] = (uint64_t)v128;
    v136 = sub_319AC((uint64_t *)&unk_3B8C90);
    v137 = sub_3DCC0((unint64_t *)&qword_3B9380, (uint64_t *)&unk_3B8C90, (uint64_t)&protocol conformance descriptor for [A]);
    v138 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v136, v137);
    v140 = v139;
    swift_bridgeObjectRelease(v128);
    v141 = v31;
    v142 = swift_bridgeObjectRetain(v140);
    v143 = Logger.logObject.getter(v142);
    v144 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v143, v144))
    {
      v145 = swift_slowAlloc(42, -1);
      v146 = swift_slowAlloc(128, -1);
      v200[0] = v146;
      *(_DWORD *)v145 = 136315906;
      v147 = swift_getObjectType(v141);
      v148 = _typeName(_:qualified:)(v147, 0);
      v150 = v149;
      *(_QWORD *)&v198 = sub_33524(v148, v149, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v145 + 4);
      swift_bridgeObjectRelease(v150);

      *(_WORD *)(v145 + 12) = 2082;
      v151 = ContentLoader.shortDescription.getter();
      v153 = v152;
      *(_QWORD *)&v198 = sub_33524(v151, v152, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v145 + 14);
      swift_bridgeObjectRelease(v153);

      *(_WORD *)(v145 + 22) = 2080;
      *(_QWORD *)&v198 = sub_33524(0xD000000000000042, 0x80000000002C8C70, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v145 + 24);
      *(_WORD *)(v145 + 32) = 2080;
      swift_bridgeObjectRetain(v140);
      *(_QWORD *)&v198 = sub_33524(v138, v140, v200);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v145 + 34);
      swift_bridgeObjectRelease_n(v140, 3);
      _os_log_impl(&dword_0, v143, v144, "We should not continue in %s(%{public}s) %s -- %s", (uint8_t *)v145, 0x2Au);
      swift_arrayDestroy(v146, 4, (char *)&type metadata for Any + 8);
      v154 = v146;
      v44 = v179;
      swift_slowDealloc(v154, -1, -1);
      swift_slowDealloc(v145, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v140, 2);
    }
    LOWORD(v200[0]) = 258;
    v180(v200);

    goto LABEL_34;
  }
LABEL_12:
  v62 = v189;
  objc_msgSend(v189, "setBe_requestedContentOffset:", 0, v35);
  v63 = v31;
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc(12, -1);
    v67 = swift_slowAlloc(32, -1);
    v200[0] = v67;
    *(_DWORD *)v66 = 136446210;
    v68 = ContentLoader.shortDescription.getter();
    v70 = v69;
    *(_QWORD *)&v198 = sub_33524(v68, v69, v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v66 + 4);
    swift_bridgeObjectRelease(v70);

    _os_log_impl(&dword_0, v64, v65, "Loader %{public}s paginating #loadingStatus", v66, 0xCu);
    swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v66, -1, -1);

  }
  else
  {

  }
  v71 = (uint64_t)v192;
  v72 = (uint64_t)&v63[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost];
  swift_beginAccess(&v63[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost], v197, 0, 0);
  sub_3F238(v72, (uint64_t)&v198, &qword_3B89A0);
  if (!v199)
  {
    sub_52128((uint64_t)&v198, &qword_3B89A0);
LABEL_34:
    swift_unknownObjectRelease(v183);
LABEL_35:
    v155 = &v204;
    return sub_34488(v155);
  }
  sub_3F1CC(&v198, (uint64_t)v200);
  v73 = v201;
  v74 = v202;
  sub_472D0(v200, v201);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v74);
  v75 = v193;
  ContentLoader.updateStyle(with:)(v71, v193);
  v76 = swift_getObjectType(v71);
  v77 = *(double (**)(uint64_t, uint64_t))(v75 + 48);
  v78 = v77(v76, v75);
  v80 = v79;
  v81 = *(double (**)(uint64_t, uint64_t))(v75 + 56);
  v82 = v81(v76, v75);
  v84 = v83;
  objc_msgSend(v62, "frame");
  if (v78 != v86 || v80 != v85)
  {
    objc_msgSend(v62, "frame");
    if (v82 != v88 || v84 != v87)
    {
      v89 = v62;
      swift_unknownObjectRetain_n(v71, 4);
      v90 = v89;
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter();
      v93 = v92;
      if (os_log_type_enabled(v91, v92))
      {
        v94 = swift_slowAlloc(52, -1);
        v188 = swift_slowAlloc(160, -1);
        *(_QWORD *)&v196[0] = v188;
        *(_DWORD *)v94 = 136316162;
        LODWORD(v187) = v93;
        v95 = objc_msgSend(v90, "be_identifier");
        v182 = v91;
        v96 = v95;
        v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
        v99 = v98;

        *(_QWORD *)&v198 = sub_33524(v97, v99, (uint64_t *)v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v94 + 4);
        swift_bridgeObjectRelease(v99);

        *(_WORD *)(v94 + 12) = 2080;
        objc_msgSend(v90, "frame");
        *(_QWORD *)&v198 = v100;
        *((_QWORD *)&v198 + 1) = v101;
        type metadata accessor for CGSize(0);
        v103 = v102;
        v104 = String.init<A>(describing:)(&v198, v102);
        v106 = v105;
        *(_QWORD *)&v198 = sub_33524(v104, v105, (uint64_t *)v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v94 + 14);
        swift_bridgeObjectRelease(v106);

        *(_WORD *)(v94 + 22) = 2080;
        *(double *)&v198 = v78;
        *((double *)&v198 + 1) = v80;
        v107 = String.init<A>(describing:)(&v198, v103);
        v109 = v108;
        *(_QWORD *)&v198 = sub_33524(v107, v108, (uint64_t *)v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v94 + 24);
        v110 = swift_bridgeObjectRelease(v109);
        *(_WORD *)(v94 + 32) = 2080;
        v111 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v193 + 184))(v76, v193, v110);
        v113 = v112;
        *(_QWORD *)&v198 = sub_33524(v111, v112, (uint64_t *)v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v94 + 34);
        swift_bridgeObjectRelease(v113);
        swift_unknownObjectRelease_n(v192, 2);
        *(_WORD *)(v94 + 42) = 2080;
        *(_QWORD *)&v198 = v81(v76, v193);
        *((_QWORD *)&v198 + 1) = v114;
        v115 = v103;
        v75 = v193;
        v116 = String.init<A>(describing:)(&v198, v115);
        v118 = v117;
        *(_QWORD *)&v198 = sub_33524(v116, v117, (uint64_t *)v196);
        v71 = (uint64_t)v192;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, (char *)&v198 + 8, v94 + 44);
        swift_bridgeObjectRelease(v118);
        swift_unknownObjectRelease_n(v71, 2);
        v119 = v182;
        _os_log_impl(&dword_0, v182, (os_log_type_t)v187, "ContentLoader #sizeMismatch updating webView: %s size: %s to layoutProvider.contentSize: %s for:%s fullContentSize: %s", (uint8_t *)v94, 0x34u);
        v120 = v188;
        swift_arrayDestroy(v188, 5, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v120, -1, -1);
        v121 = v94;
        v62 = v189;
        swift_slowDealloc(v121, -1, -1);

      }
      else
      {

        swift_unknownObjectRelease_n(v71, 4);
      }
      v77(v76, v75);
      objc_msgSend(v90, "frame");
      objc_msgSend(v90, "setFrame:");
    }
  }
  v156 = type metadata accessor for TaskPriority(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v156 - 8) + 56))(v191, 1, 1, v156);
  sub_49F1C((uint64_t)&v204, (uint64_t)&v198);
  v157 = v185;
  v158 = v62;
  v159 = v186;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v185 + 16))(v190, v195, v186);
  sub_49F1C((uint64_t)v178, (uint64_t)v196);
  type metadata accessor for MainActor(0);
  v192 = v63;
  v189 = v158;
  swift_unknownObjectRetain(v71);
  v160 = v183;
  swift_unknownObjectRetain(v183);
  v161 = v194;
  v162 = swift_retain();
  v163 = static MainActor.shared.getter(v162);
  v164 = (*(unsigned __int8 *)(v157 + 80) + 120) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80);
  v165 = (v184 + v164 + 7) & 0xFFFFFFFFFFFFFFF8;
  v166 = v71;
  v167 = (v165 + 47) & 0xFFFFFFFFFFFFFFF8;
  v168 = (char *)swift_allocObject(&unk_37D6F0, v167 + 16);
  *((_QWORD *)v168 + 2) = v163;
  *((_QWORD *)v168 + 3) = &protocol witness table for MainActor;
  v169 = v177;
  *((_QWORD *)v168 + 4) = v160;
  *((_QWORD *)v168 + 5) = v169;
  sub_3F1CC(&v198, (uint64_t)(v168 + 48));
  *((_QWORD *)v168 + 11) = v189;
  *((_QWORD *)v168 + 12) = v166;
  v170 = v192;
  *((_QWORD *)v168 + 13) = v193;
  *((_QWORD *)v168 + 14) = v170;
  (*(void (**)(char *, _BYTE *, uint64_t))(v157 + 32))(&v168[v164], v190, v159);
  sub_3F1CC(v196, (uint64_t)&v168[v165]);
  v171 = &v168[v167];
  *(_QWORD *)v171 = v180;
  *((_QWORD *)v171 + 1) = v161;
  sub_67B40((uint64_t)v191, (uint64_t)&unk_3B8C88, (uint64_t)v168);
  swift_release();
  v172 = swift_unknownObjectRelease(v160);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v157 + 8))(v195, v159, v172);
  sub_34488(&v204);
  v155 = v200;
  return sub_34488(v155);
}

void ContentLoader.updateStyle(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  void *v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  __int16 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v26, v3, KeyPath);
  swift_release();
  swift_release();
  v7 = v26;
  if (v26)
  {
    v8 = v27;
    ObjectType = swift_getObjectType(v26);
    v10 = swift_getObjectType(a1);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(a2 + 160))(&v26, v10, a2);
    v20 = (__int16)v26;
    v21 = BYTE2(v26);
    v19 = v27;
    v22 = v27;
    v23 = v28;
    v24 = v29;
    v25 = v30;
    (*(void (**)(__int16 *, uint64_t, uint64_t))(v8 + 280))(&v20, ObjectType, v8);

    swift_bridgeObjectRelease(v19);
  }
  v11 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v26, v3, v11);
  swift_release();
  swift_release();
  v12 = v26;
  if (v26)
  {
    v13 = objc_opt_self(WKWebView);
    v14 = swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      v15 = v14;
      v16 = v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider;
      swift_beginAccess(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider, &v26, 0, 0);
      if (swift_weakLoadStrong(v16))
      {
        v17 = swift_getObjectType(a1);
        v18 = sub_9A8B8(a1, v17, a2);
        objc_msgSend(v18, "applyVariableStylesheetsToWebView:", v15, swift_release().n128_f64[0]);

      }
    }

  }
}

uint64_t sub_791FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  int *v20;
  _QWORD *v21;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  *(_QWORD *)(v10 + 88) = a10;
  *(_OWORD *)(v10 + 72) = *(_OWORD *)&v26;
  *(_OWORD *)(v10 + 56) = v25;
  *(_QWORD *)(v10 + 40) = a8;
  *(_QWORD *)(v10 + 48) = v24;
  *(_QWORD *)(v10 + 32) = a7;
  v16 = type metadata accessor for UUID(0);
  *(_QWORD *)(v10 + 96) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v10 + 104) = v17;
  *(_QWORD *)(v10 + 112) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v10 + 120) = v18;
  *(_QWORD *)(v10 + 128) = static MainActor.shared.getter(v18);
  ObjectType = swift_getObjectType(a4);
  *(_BYTE *)(v10 + 145) = 1;
  v20 = *(int **)(a5 + 120);
  v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v20 + *v20);
  v21 = (_QWORD *)swift_task_alloc(v20[1]);
  *(_QWORD *)(v10 + 136) = v21;
  *v21 = v10;
  v21[1] = sub_79330;
  return v23(v10 + 144, a6, a7, a8, v24, 1, 8, v10 + 145, ObjectType, a5);
}

uint64_t sub_79330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  v2 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor);
  return swift_task_switch(sub_793A0, v2, v3);
}

uint64_t sub_793A0()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  void *v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  void (*v20)(__int16 *);
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  v2 = swift_release();
  v3 = *(void **)(v0 + 56);
  if (*(_BYTE *)(v0 + 144) == 1)
  {
    sub_79604(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 32), v1, *(void (**)(id *))(v0 + 80), *(_QWORD *)(v0 + 88));
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 104) + 16))(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 96), v2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter();
    v6 = os_log_type_enabled(v4, v5);
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(void **)(v0 + 56);
    if (v6)
    {
      v23 = *(_QWORD *)(v0 + 104);
      v11 = swift_slowAlloc(22, -1);
      v22 = swift_slowAlloc(64, -1);
      v25 = v22;
      *(_DWORD *)v11 = 136446466;
      v12 = ContentLoader.shortDescription.getter();
      v14 = v13;
      *(_QWORD *)(v0 + 16) = sub_33524(v12, v13, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4);

      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v11 + 12) = 2080;
      v15 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v9, v15);
      v18 = v17;
      *(_QWORD *)(v0 + 24) = sub_33524(v16, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 14);
      v19 = swift_bridgeObjectRelease(v18);
      (*(void (**)(uint64_t, uint64_t, __n128))(v23 + 8))(v7, v9, v19);
      _os_log_impl(&dword_0, v4, v5, "Loader %{public}s ignoring paginationResults due to stale contentViewHost: %s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    v20 = *(void (**)(__int16 *))(v0 + 80);
    v24 = 257;
    v20(&v24);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_79604(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(id *), uint64_t a7)
{
  void *v7;
  void *v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t KeyPath;
  void *v26;
  uint64_t v27;
  uint64_t ObjectType;
  id v29;
  id v30;
  char *v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  id v56;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t, __n128);
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  char *v74;
  char *v75;
  char *v76;
  NSObject *v77;
  uint64_t v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  id v87;
  char *v88;
  char *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, __n128);
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t *);
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  uint64_t v121;
  void (*v122)(id *);
  uint64_t v123;
  uint64_t v124;
  _QWORD v125[2];
  id v126;
  char v127[24];
  __int128 v128;
  uint64_t v129;
  uint64_t v130[3];
  uint64_t v131;
  uint64_t v132;

  v8 = v7;
  v121 = a7;
  v122 = a6;
  v120 = a4;
  v119 = a2;
  v11 = type metadata accessor for Logger(0);
  v118 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v114 - v19;
  v21 = (uint64_t)v7 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost;
  swift_beginAccess(v21, v127, 0, 0);
  sub_3F238(v21, (uint64_t)&v128, &qword_3B89A0);
  if (v129)
  {
    v116 = v11;
    v117 = a3;
    sub_3F1CC(&v128, (uint64_t)v130);
    v22 = v131;
    v23 = v132;
    sub_472D0(v130, v131);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    v24 = static UUID.== infix(_:_:)(a1, v20);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    if ((v24 & 1) != 0)
    {
      KeyPath = swift_getKeyPath(&unk_2E7D30);
      swift_getKeyPath(&unk_2E7D58);
      static Published.subscript.getter(&v128, v8, KeyPath);
      swift_release();
      swift_release();
      v26 = (void *)v128;
      if ((_QWORD)v128)
      {
        v27 = *((_QWORD *)&v128 + 1);
        ObjectType = swift_getObjectType(v128);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(1, ObjectType, v27);

      }
      if (qword_3B56B8 != -1)
        swift_once(&qword_3B56B8, sub_5EFF4);
      Logger.init(_:)((id)qword_3CEEF8);
      v29 = v8;
      v30 = v120;
      v31 = (char *)v29;
      v32 = v30;
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc(22, -1);
        v120 = (id)swift_slowAlloc(64, -1);
        *(_QWORD *)&v128 = v120;
        *(_DWORD *)v35 = 136446466;
        v36 = ContentLoader.shortDescription.getter();
        v38 = v37;
        v124 = sub_33524(v36, v37, (uint64_t *)&v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v35 + 4);
        swift_bridgeObjectRelease(v38);

        *(_WORD *)(v35 + 12) = 2080;
        v115 = v35 + 14;
        v39 = objc_msgSend(v32, "be_identifier");
        v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
        v42 = v41;

        v124 = sub_33524(v40, v42, (uint64_t *)&v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v115);
        swift_bridgeObjectRelease(v42);

        _os_log_impl(&dword_0, v33, v34, "Loader %{public}s completed pagination using WebView: %s #contentConfig", (uint8_t *)v35, 0x16u);
        v43 = v120;
        swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v35, -1, -1);
      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v118 + 8))(v13, v116);
      v58 = v119;
      v59 = &v31[OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider];
      swift_beginAccess(&v31[OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider], &v128, 0, 0);
      v60 = *(_QWORD *)v59;
      if (*(_QWORD *)v59)
      {
        v61 = *((_QWORD *)v59 + 1);
        v62 = swift_getObjectType(v58);
        v63 = v117;
        v64 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v117 + 184);
        v65 = swift_unknownObjectRetain(v60);
        v66 = v64(v62, v63, v65);
        v68 = v67;
        v69 = swift_getObjectType(v60);
        v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 184))(v69, v61);
        v72 = v70;
        if (v66 == v71 && v68 == v70)
        {
          swift_bridgeObjectRelease_n(v68, 2);
LABEL_21:
          sub_7A158();
          v74 = &v31[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded];
          swift_beginAccess(&v31[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded], &v124, 1, 0);
          *v74 = 1;
          sub_74EDC();
          v75 = v31;
          swift_unknownObjectRetain_n(v58, 2);
          v76 = v75;
          v77 = Logger.logObject.getter(v76);
          v78 = v58;
          v79 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v77, v79))
          {
            v80 = swift_slowAlloc(22, -1);
            v120 = (id)swift_slowAlloc(64, -1);
            v126 = v120;
            *(_DWORD *)v80 = 136446466;
            v81 = ContentLoader.shortDescription.getter();
            v83 = v82;
            v123 = sub_33524(v81, v82, (uint64_t *)&v126);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v80 + 4);
            swift_bridgeObjectRelease(v83);

            *(_WORD *)(v80 + 12) = 2082;
            v84 = (*(uint64_t (**)(uint64_t))(v117 + 192))(v62);
            v86 = v85;
            v123 = sub_33524(v84, v85, (uint64_t *)&v126);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v80 + 14);
            swift_bridgeObjectRelease(v86);
            swift_unknownObjectRelease_n(v78, 2);
            _os_log_impl(&dword_0, v77, v79, "ContentLoader %{public}s reloadDocument: paginated document with #contentConfig:%{public}s", (uint8_t *)v80, 0x16u);
            v87 = v120;
            swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v87, -1, -1);
            swift_slowDealloc(v80, -1, -1);

          }
          else
          {

            swift_unknownObjectRelease_n(v78, 2);
          }
          LOWORD(v126) = 1;
          v122(&v126);
          swift_unknownObjectRelease(v60);
          return sub_34488(v130);
        }
        v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v71, v70, 0);
        swift_bridgeObjectRelease(v72);
        swift_bridgeObjectRelease(v68);
        if ((v73 & 1) != 0)
          goto LABEL_21;
        swift_unknownObjectRelease(v60);
      }
      v88 = v31;
      swift_unknownObjectRetain_n(v58, 2);
      v89 = v88;
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v90, v91))
      {
        v92 = swift_slowAlloc(32, -1);
        v120 = (id)swift_slowAlloc(96, -1);
        v126 = v120;
        *(_DWORD *)v92 = 136446722;
        v93 = ContentLoader.shortDescription.getter();
        v95 = v94;
        v124 = sub_33524(v93, v94, (uint64_t *)&v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v92 + 4);
        swift_bridgeObjectRelease(v95);

        *(_WORD *)(v92 + 12) = 2082;
        v96 = swift_getObjectType(v58);
        v97 = (*(uint64_t (**)(uint64_t))(v117 + 192))(v96);
        v99 = v98;
        v124 = sub_33524(v97, v98, (uint64_t *)&v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v92 + 14);
        swift_bridgeObjectRelease(v99);
        swift_unknownObjectRelease_n(v58, 2);
        *(_WORD *)(v92 + 22) = 2082;
        v100 = *(_QWORD *)v59;
        if (*(_QWORD *)v59)
        {
          v101 = *((_QWORD *)v59 + 1);
          v102 = swift_getObjectType(*(_QWORD *)v59);
          v103 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v101 + 184);
          v104 = swift_unknownObjectRetain(v100);
          v105 = v103(v102, v101, v104);
          v107 = v106;
          swift_unknownObjectRelease(v100);
        }
        else
        {
          v105 = 0;
          v107 = 0;
        }
        v108 = (void (*)(uint64_t *))v122;
        v124 = v105;
        v125[0] = v107;
        v109 = sub_319AC((uint64_t *)&unk_3BBB20);
        v110 = String.init<A>(describing:)(&v124, v109);
        v112 = v111;
        v124 = sub_33524(v110, v111, (uint64_t *)&v126);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125, v92 + 24);
        swift_bridgeObjectRelease(v112);

        _os_log_impl(&dword_0, v90, v91, "Content Loader %{public}s received stale pagination results for\n    #contentConfig: %{public}s,\n    removing placeholder view #loadingStatus\n    current: %{public}s", (uint8_t *)v92, 0x20u);
        v113 = v120;
        swift_arrayDestroy(v120, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v113, -1, -1);
        swift_slowDealloc(v92, -1, -1);

      }
      else
      {

        swift_unknownObjectRelease_n(v58, 2);
        v108 = (void (*)(uint64_t *))v122;
      }
      LOWORD(v124) = 257;
      v108(&v124);
      return sub_34488(v130);
    }
    sub_34488(v130);
  }
  else
  {
    sub_52128((uint64_t)&v128, &qword_3B89A0);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  v44 = v8;
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = swift_slowAlloc(22, -1);
    v120 = (id)swift_slowAlloc(64, -1);
    v130[0] = (uint64_t)v120;
    *(_DWORD *)v47 = 136446466;
    v48 = ContentLoader.shortDescription.getter();
    v50 = v49;
    *(_QWORD *)&v128 = sub_33524(v48, v49, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 8, v47 + 4);
    swift_bridgeObjectRelease(v50);

    *(_WORD *)(v47 + 12) = 2080;
    v51 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v52 = dispatch thunk of CustomStringConvertible.description.getter(v14, v51);
    v54 = v53;
    *(_QWORD *)&v128 = sub_33524(v52, v53, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 8, v47 + 14);
    v55 = swift_bridgeObjectRelease(v54);
    (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v17, v14, v55);
    _os_log_impl(&dword_0, v45, v46, "Loader %{public}s ignoring paginationResults due to stale contentViewHost: %s", (uint8_t *)v47, 0x16u);
    v56 = v120;
    swift_arrayDestroy(v120, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  LOWORD(v130[0]) = 257;
  return ((uint64_t (*)(uint64_t *))v122)(v130);
}

void sub_7A158()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t ObjectType;
  uint64_t v10;
  __objc2_class **p_superclass;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  void *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  Swift::String v38;
  void *object;
  Swift::String v40;
  Swift::String v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  void *v45;
  unint64_t v46;
  NSString v47;
  void *v48;
  id v49;
  id v50;
  char **v51;
  const char *v52;
  id v53;
  id v54;
  id v55;
  __int128 v56;
  void *v57;
  double v58;
  double v59;
  double v60;
  double v61;
  char *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  id v72;
  id v73;
  id v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  __objc2_class **v83;
  unint64_t v84;
  _QWORD *v85;
  char *v86;
  char v87[24];
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  double v93;
  double v94;
  double v95;
  char v96[24];
  char v97[24];
  char v98[32];

  v1 = v0;
  if (qword_3B56A0 != -1)
    swift_once(&qword_3B56A0, sub_52620);
  if (byte_3B6F18 != 1)
    return;
  v2 = &v0[OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService], v98, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (!Strong)
    return;
  v4 = Strong;
  v5 = *((_QWORD *)v2 + 1);
  v6 = sub_730FC();
  if ((v7 & 1) != 0
    || (v8 = v6,
        ObjectType = swift_getObjectType(v4),
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5),
        v10 = BookPaginationEntity.document(for:)(v8),
        swift_release(),
        (v81 = v10) == 0))
  {
    v20 = v4;
LABEL_17:
    swift_unknownObjectRelease(v20);
    return;
  }
  p_superclass = _TtC8BookEPUB32HistoryPaginationEntityReference.superclass;
  v86 = v1;
  if ((byte_3B6F18 & 1) != 0)
  {
    v12 = v8;
    v13 = (uint64_t *)&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pageLayers];
    swift_beginAccess(&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pageLayers], v87, 1, 0);
    v14 = *v13;
    v15 = v4;
    if ((unint64_t)*v13 >> 62)
    {
      if (v14 < 0)
        v21 = *v13;
      else
        v21 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v13);
      v16 = _CocoaArrayWrapper.endIndex.getter(v21);
      if (v16)
        goto LABEL_10;
    }
    else
    {
      v16 = *(_QWORD *)((char *)&dword_10 + (v14 & 0xFFFFFFFFFFFFF8));
      swift_bridgeObjectRetain(*v13);
      if (v16)
      {
LABEL_10:
        if (v16 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v16; ++i)
        {
          if ((v14 & 0xC000000000000001) != 0)
            v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v14);
          else
            v18 = *(id *)(v14 + 8 * i + 32);
          v19 = v18;
          objc_msgSend(v18, "removeFromSuperlayer");

        }
      }
    }
    swift_bridgeObjectRelease(v14);
    v22 = *v13;
    *v13 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v22);
    v4 = v15;
    v8 = v12;
    v1 = v86;
  }
  v79 = v4;
  v23 = (uint64_t *)(v81 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
  swift_beginAccess(v81 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v97, 0, 0);
  v24 = *v23;
  if ((unint64_t)*v23 >> 62)
    goto LABEL_50;
  v25 = *(_QWORD *)((char *)&dword_10 + (v24 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(*v23);
  while (v25)
  {
    v80 = (__objc2_class **)((char *)&p_superclass[312]->isa + (_QWORD)v1);
    v85 = (_QWORD *)(v81 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset);
    swift_beginAccess(v81 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_startingPageOffset, v96, 0, 0);
    v84 = v8 & 0x8000000000000001;
    v26 = 4;
    v82 = v8;
    v83 = (__objc2_class **)v25;
    while (1)
    {
      v27 = v26 - 4;
      if ((v24 & 0xC000000000000001) == 0)
        break;
      v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(v26 - 4, v24);
      p_superclass = (__objc2_class **)(v26 - 3);
      if (__OFADD__(v27, 1))
        goto LABEL_47;
LABEL_34:
      KeyPath = swift_getKeyPath(&unk_2E7D30);
      swift_getKeyPath(&unk_2E7D58);
      static Published.subscript.getter(&v91, v1, KeyPath);
      swift_release();
      swift_release();
      v30 = (void *)v91;
      if (!v91)
        goto LABEL_46;
      v31 = objc_opt_self(WKWebView);
      v32 = (void *)swift_dynamicCastObjCClass(v30, v31);
      if (!v32)
      {

LABEL_46:
        swift_bridgeObjectRelease(v24);
        swift_release();
        swift_release();
        v20 = v79;
        goto LABEL_17;
      }
      v1 = (char *)objc_msgSend(v32, "be_viewForFindUI");

      if (!v1)
        goto LABEL_46;
      v33 = objc_msgSend(objc_allocWithZone((Class)CATextLayer), "init");
      v91 = 0;
      *(double *)&v92 = -2.68156159e154;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease(v92);
      v91 = 0x3A232065676150;
      *(double *)&v92 = -1.39234638e188;
      v34 = *(_QWORD *)(v28 + 16);
      v35 = *v85 + v34;
      if (__OFADD__(*v85, v34))
        goto LABEL_48;
      v36 = __OFADD__(v35, 1);
      v37 = v35 + 1;
      if (v36)
        goto LABEL_49;
      v88 = v37;
      v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v38._object;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(object);
      v40._countAndFlagsBits = 0x6C616E6964726F20;
      v40._object = (void *)0xE90000000000003ALL;
      String.append(_:)(v40);
      v88 = v8;
      v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v42 = v41._object;
      String.append(_:)(v41);
      swift_bridgeObjectRelease(v42);
      v43._countAndFlagsBits = 0x3A74657366666F20;
      v43._object = (void *)0xE800000000000000;
      String.append(_:)(v43);
      v88 = *(_QWORD *)(v28 + 16);
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v45 = v44._object;
      String.append(_:)(v44);
      swift_bridgeObjectRelease(v45);
      v46 = v92;
      v47 = String._bridgeToObjectiveC()();
      objc_msgSend(v33, "setString:", v47, swift_bridgeObjectRelease(v46).n128_f64[0]);

      objc_msgSend(v33, "setFontSize:", 18.0);
      v48 = (void *)objc_opt_self(UIColor);
      v49 = objc_msgSend(v48, "blueColor");
      v50 = objc_msgSend(v49, "CGColor");

      objc_msgSend(v33, "setForegroundColor:", v50);
      objc_msgSend(v33, "setAlignmentMode:", kCAAlignmentCenter);
      objc_msgSend(v33, "setBorderWidth:", 2.0);
      v51 = &selRef_redColor;
      if (v84 != 1)
        v51 = &selRef_blueColor;
      v52 = *v51;
      v53 = v33;
      v54 = objc_msgSend(v48, v52);
      v55 = objc_msgSend(v54, "CGColor");

      objc_msgSend(v53, "setBorderColor:", v55);
      v88 = *(_QWORD *)(v28 + 24);
      v56 = *(_OWORD *)(v28 + 48);
      v89 = *(_OWORD *)(v28 + 32);
      v90 = v56;
      ContentLoader.convertToUI(_:)((uint64_t)&v88, (uint64_t)&v91);
      v57 = (void *)v91;
      if (v91)
      {
        v59 = v94;
        v58 = v95;
        v61 = *(double *)&v92;
        v60 = v93;
        v62 = v1;
        objc_msgSend(v57, "convertRect:toCoordinateSpace:", v62, v61, v60, v59, v58);
        v64 = v63;
        swift_unknownObjectRelease(v57);

        v65 = sub_89374(v64);
        v67 = v66;
        v69 = v68;
        v71 = v70;
        v72 = v53;
        objc_msgSend(v72, "setFrame:", v65, v67, v69, v71);

        v73 = objc_msgSend(v62, "layer");
        objc_msgSend(v73, "addSublayer:", v72);

        swift_beginAccess(v80, &v91, 33, 0);
        v74 = v72;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v74);
        v76 = *(_QWORD *)((char *)&dword_10 + (*v80 & 0xFFFFFFFFFFFFFF8));
        v75 = *(_QWORD *)((char *)&dword_18 + (*v80 & 0xFFFFFFFFFFFFFF8));
        if (v76 >= v75 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v75 > 1, v76 + 1, 1);
        v77 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v76, v74);
        specialized Array._endMutation()(v77);
        swift_endAccess(&v91);

        swift_release();
        v8 = v82;
      }
      else
      {
        swift_release();

        v8 = v82;
      }
      ++v26;
      v1 = v86;
      if (p_superclass == v83)
        goto LABEL_54;
    }
    v28 = *(_QWORD *)(v24 + 8 * v26);
    swift_retain();
    p_superclass = (__objc2_class **)(v26 - 3);
    if (!__OFADD__(v27, 1))
      goto LABEL_34;
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    if (v24 < 0)
      v78 = v24;
    else
      v78 = v24 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v24);
    v25 = _CocoaArrayWrapper.endIndex.getter(v78);
  }
LABEL_54:
  swift_unknownObjectRelease(v79);
  swift_bridgeObjectRelease(v24);
  swift_release();
}

uint64_t sub_7A95C(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  char *v6;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  id v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  double v43;
  id v44;
  char *v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  _QWORD *v53;
  id v54;
  id v55;
  id v56;
  __n128 v57;
  uint64_t result;
  unint64_t v59;
  void (*v60)(uint64_t, char *, uint64_t);
  void (*v61)(uint64_t, char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, char *, uint64_t);
  void (*v66)(char *, char *, uint64_t);
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  id v72;
  id v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  __int128 aBlock;
  double (*v83)(uint64_t, void *, void *);
  void *v84;
  uint64_t (*v85)(uint64_t, void (*)(__n128), int);
  uint64_t v86;
  char v87[24];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v7 = v6;
  v69 = a6;
  v75 = a5;
  v73 = a3;
  v77 = a1;
  v78 = a2;
  v76 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v76 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v76);
  v81 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v13 = (char *)&v59 - v12;
  v14 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v74 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v15;
  __chkstk_darwin(v16);
  v18 = (char *)&v59 - v17;
  v19 = a4[3];
  v20 = a4[4];
  sub_472D0(a4, v19);
  (*(void (**)(uint64_t, uint64_t))(v20 + 72))(v19, v20);
  v72 = v7;
  v21 = (uint64_t)&v7[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost];
  swift_beginAccess(&v7[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost], v87, 0, 0);
  sub_3F238(v21, (uint64_t)&aBlock, &qword_3B89A0);
  if (v84)
  {
    v79 = v18;
    sub_3F1CC(&aBlock, (uint64_t)&v88);
    v22 = v89;
    v23 = v90;
    sub_472D0(&v88, v89);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v23);
    v67 = objc_msgSend(v73, "be_navigationHandler");
    if (v67)
    {
      v24 = v9;
      v66 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
      v70 = v13;
      v25 = v76;
      v66(v81, v13, v76);
      v26 = v80;
      v65 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
      v65(v74, v79, v14);
      v27 = *(unsigned __int8 *)(v24 + 80);
      v28 = (v27 + 24) & ~v27;
      v63 = v28;
      v29 = (v10 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
      v68 = v24;
      v64 = *(unsigned __int8 *)(v26 + 80);
      v59 = v29;
      v30 = (v64 + v29 + 16) & ~v64;
      v62 = v27 | v64 | 7;
      v31 = (v71 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
      v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8;
      v33 = swift_allocObject(&unk_37D650, v32 + 16);
      *(_QWORD *)(v33 + 16) = v72;
      v61 = *(void (**)(uint64_t, char *, uint64_t))(v24 + 32);
      v61(v33 + v28, v81, v25);
      v34 = (_QWORD *)(v33 + v29);
      v35 = v69;
      *v34 = v75;
      v34[1] = v35;
      v60 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
      v36 = v74;
      v37 = v14;
      v60(v33 + v30, v74, v14);
      v38 = v73;
      *(_QWORD *)(v33 + v31) = v73;
      v39 = (_QWORD *)(v33 + v32);
      v41 = v77;
      v40 = v78;
      *v39 = v77;
      v39[1] = v40;
      v85 = sub_89038;
      v86 = v33;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v83 = sub_69380;
      v84 = &unk_37D668;
      v42 = _Block_copy(&aBlock);
      v72 = v72;
      swift_retain();
      v73 = v38;
      swift_unknownObjectRetain(v41);
      *(_QWORD *)&v43 = swift_release().n128_u64[0];
      v44 = v67;
      objc_msgSend(v67, "performAfterLoadCompleteOrFailure:", v42, v43);
      _Block_release(v42);

      v45 = v81;
      v46 = v76;
      v66(v81, v70, v76);
      v47 = v36;
      v65(v36, v79, v37);
      v48 = v59;
      v49 = (v59 + 23) & 0xFFFFFFFFFFFFFFF8;
      v50 = (v64 + v49 + 8) & ~v64;
      v51 = swift_allocObject(&unk_37D6A0, v50 + v71);
      v52 = v72;
      *(_QWORD *)(v51 + 16) = v72;
      v61(v51 + v63, v45, v46);
      v53 = (_QWORD *)(v51 + v48);
      *v53 = v75;
      v53[1] = v35;
      v54 = v73;
      *(_QWORD *)(v51 + v49) = v73;
      v60(v51 + v50, v47, v37);
      v55 = v52;
      swift_retain();
      v56 = v54;
      sub_7BAD8(v77, v78, 1, 0, (void (*)(void))sub_891F8, v51);
      v57 = swift_release();
      (*(void (**)(char *, uint64_t, __n128))(v68 + 8))(v70, v46, v57);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v79, v37);
      return sub_34488(&v88);
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002ELL, 0x80000000002C8BD0, "BookEPUB/ContentLoader.swift", 28, 2, 473, 0);
      __break(1u);
    }
  }
  else
  {
    sub_52128((uint64_t)&aBlock, &qword_3B89A0);
    return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v18, v14);
  }
  return result;
}

uint64_t sub_7AF18(uint64_t a1, void (*a2)(__n128), int a3, char *a4, uint64_t a5, uint64_t (*a6)(uint64_t *), uint64_t a7, char *a8, id a9, uint64_t a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  os_log_t v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  __n128 v68;
  uint64_t v70;
  uint64_t (*v71)(uint64_t *);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  os_log_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t *);
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  char v95[8];
  uint64_t v96;
  _BYTE v97[24];
  __int128 v98;
  uint64_t v99;
  uint64_t v100[3];
  uint64_t v101;
  uint64_t v102;

  v85 = a8;
  v91 = a6;
  v92 = a7;
  v89 = a1;
  v88 = type metadata accessor for URL(0);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v86 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v18 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v77 - v21;
  a2(v20);
  v23 = a4;
  v24 = (uint64_t)&a4[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost];
  swift_beginAccess(&a4[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost], v97, 0, 0);
  sub_3F238(v24, (uint64_t)&v98, &qword_3B89A0);
  v93 = v16;
  if (!v99)
  {
    sub_52128((uint64_t)&v98, &qword_3B89A0);
LABEL_8:
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, v15);
    v55 = a4;
    v56 = Logger.logObject.getter(v55);
    v57 = v16;
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v58))
    {
      v59 = swift_slowAlloc(22, -1);
      v60 = swift_slowAlloc(64, -1);
      v100[0] = v60;
      *(_DWORD *)v59 = 136446466;
      v61 = ContentLoader.shortDescription.getter();
      v63 = v62;
      *(_QWORD *)&v98 = sub_33524(v61, v62, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, (char *)&v98 + 8, v59 + 4);
      swift_bridgeObjectRelease(v63);

      *(_WORD *)(v59 + 12) = 2080;
      v64 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = dispatch thunk of CustomStringConvertible.description.getter(v15, v64);
      v67 = v66;
      *(_QWORD *)&v98 = sub_33524(v65, v66, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, (char *)&v98 + 8, v59 + 14);
      v68 = swift_bridgeObjectRelease(v67);
      (*(void (**)(char *, uint64_t, __n128))(v93 + 8))(v18, v15, v68);
      _os_log_impl(&dword_0, v56, v58, "Loader %{public}s ignoring load complete due to stale contentViewHost: %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v57 + 8))(v18, v15);
    }
    LOWORD(v100[0]) = 257;
    return v91(v100);
  }
  sub_3F1CC(&v98, (uint64_t)v100);
  v26 = v101;
  v25 = v102;
  v90 = v15;
  sub_472D0(v100, v101);
  v27 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  v28 = v25;
  v16 = v93;
  v15 = v90;
  v27(v26, v28);
  v29 = static UUID.== infix(_:_:)(a5, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
  if ((v29 & 1) == 0)
  {
    sub_34488(v100);
    goto LABEL_8;
  }
  v30 = v89;
  v84 = a11;
  v83 = a10;
  v82 = a5;
  if (v89)
  {
    v81 = a9;
    v31 = v86;
    v32 = v88;
    v33 = v23;
    v34 = v87;
    (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v86, v85, v88);
    swift_errorRetain(v30);
    swift_errorRetain(v30);
    v85 = v33;
    v35 = v33;
    swift_errorRetain(v30);
    v36 = v35;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      v40 = swift_slowAlloc(32, -1);
      v80 = v37;
      v41 = v40;
      v78 = swift_slowAlloc(96, -1);
      *(_QWORD *)&v98 = v78;
      *(_DWORD *)v41 = 136446722;
      v79 = v39;
      v42 = ContentLoader.shortDescription.getter();
      v44 = v43;
      v96 = sub_33524(v42, v43, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v41 + 4);
      swift_bridgeObjectRelease(v44);

      *(_WORD *)(v41 + 12) = 2080;
      v45 = sub_34284((unint64_t *)&qword_3B8C68, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v32, v45);
      v48 = v47;
      v96 = sub_33524(v46, v47, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v41 + 14);
      v49 = swift_bridgeObjectRelease(v48);
      (*(void (**)(char *, uint64_t, __n128))(v34 + 8))(v31, v32, v49);
      *(_WORD *)(v41 + 22) = 2080;
      v30 = v89;
      swift_getErrorValue(v89, v95, v94);
      v50 = Error.localizedDescription.getter(v94[1], v94[2]);
      v52 = v51;
      v96 = sub_33524(v50, v51, (uint64_t *)&v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v41 + 24);
      swift_bridgeObjectRelease(v52);
      swift_errorRelease(v30);
      swift_errorRelease(v30);
      v53 = v80;
      _os_log_impl(&dword_0, v80, (os_log_type_t)v79, "Loader %{public}s Failed to load %s -- %s", (uint8_t *)v41, 0x20u);
      v54 = v78;
      swift_arrayDestroy(v78, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v32);
      swift_errorRelease(v30);
      swift_errorRelease(v30);
    }
    objc_msgSend(v81, "be_failedLoad");
    swift_errorRelease(v30);
    v71 = v91;
    v70 = v92;
    a4 = v85;
  }
  else
  {
    objc_msgSend(a9, "be_completedLoad");
    v71 = v91;
    v70 = v92;
  }
  v72 = swift_allocObject(&unk_37CE78, 24);
  swift_unknownObjectWeakInit(v72 + 16, a4);
  v73 = v93;
  v74 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v22, v82, v90);
  v75 = (*(unsigned __int8 *)(v73 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  v76 = (char *)swift_allocObject(&unk_37D6C8, v75 + v17);
  *((_QWORD *)v76 + 2) = v72;
  *((_QWORD *)v76 + 3) = v71;
  *((_QWORD *)v76 + 4) = v70;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(&v76[v75], v22, v74);
  swift_retain();
  swift_retain();
  sub_7BAD8(v83, v84, 1, 1, sub_89340, (uint64_t)v76);
  swift_release();
  swift_release();
  return sub_34488(v100);
}

void sub_7B6B4(uint64_t a1, void (*a2)(__int16 *), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t Strong;
  char *v17;
  uint64_t v18;
  void (*v19)(__int16 *);
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t v24;
  void *v25;
  _BYTE *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(__int16 *);
  uint64_t v43;
  __int16 v44;
  _WORD v45[12];
  __int128 v46;
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;
  char v51[32];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - v13;
  v15 = a1 + 16;
  swift_beginAccess(v15, v51, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v15);
  if (Strong)
  {
    v17 = (char *)Strong;
    v18 = Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost;
    swift_beginAccess(Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost, v45, 0, 0);
    sub_3F238(v18, (uint64_t)&v46, &qword_3B89A0);
    v43 = a3;
    if (v47)
    {
      v19 = a2;
      sub_3F1CC(&v46, (uint64_t)v48);
      v20 = v49;
      v21 = v50;
      sub_472D0(v48, v49);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
      v22 = static UUID.== infix(_:_:)(a4, v14);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      if ((v22 & 1) != 0)
      {
        v23 = &v17[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded];
        swift_beginAccess(&v17[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded], &v46, 1, 0);
        *v23 = 1;
        sub_74EDC();
        sub_7A158();
        v44 = 1;
        v19(&v44);

        sub_34488(v48);
        return;
      }
      sub_34488(v48);
      a2 = v19;
    }
    else
    {
      sub_52128((uint64_t)&v46, &qword_3B89A0);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a4, v8);
    v27 = v17;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v48[0] = v41;
      *(_DWORD *)v30 = 136446466;
      v31 = ContentLoader.shortDescription.getter();
      v33 = v32;
      *(_QWORD *)&v46 = sub_33524(v31, v32, v48);
      v42 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8, v30 + 4);
      swift_bridgeObjectRelease(v33);

      *(_WORD *)(v30 + 12) = 2080;
      v34 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v8, v34);
      v37 = v36;
      *(_QWORD *)&v46 = sub_33524(v35, v36, v48);
      a2 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8, v30 + 14);
      v38 = swift_bridgeObjectRelease(v37);
      (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v11, v8, v38);
      _os_log_impl(&dword_0, v28, v29, "Loader %{public}s ignoring post-load configuration due to stale contentViewHost: %s", (uint8_t *)v30, 0x16u);
      v39 = v41;
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
    LOWORD(v48[0]) = 257;
    a2((__int16 *)v48);

  }
  else
  {
    swift_beginAccess(v15, v48, 0, 0);
    v24 = swift_unknownObjectWeakLoadStrong(v15);
    if (v24)
    {
      v25 = (void *)v24;
      v26 = (_BYTE *)(v24 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded);
      swift_beginAccess(v24 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded, &v46, 1, 0);
      *v26 = 1;
      sub_74EDC();

    }
    v45[0] = 256;
    a2(v45);
  }
}

void sub_7BAD8(uint64_t a1, uint64_t a2, int a3, int a4, void (*a5)(void), uint64_t a6)
{
  char *v6;
  char *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t KeyPath;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  id v29;
  uint64_t ObjectType;
  uint64_t (*v31)(uint64_t, uint64_t);
  id v32;
  double v33;
  double v34;
  char v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void (*v45)(uint64_t, uint64_t);
  id v46;
  id v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(void);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  int v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t (*v101)(uint64_t, _QWORD *);
  _QWORD *v102;
  uint64_t v103;
  os_log_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  char *v111;
  id v112;
  double v113;
  __int128 v114;
  void *v115;
  void *v116;
  void *v117;
  _QWORD *v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  id v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  char *v132;
  char *v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unint64_t v141;
  os_log_t v142;
  int v143;
  uint64_t v144;
  uint64_t (*v145)(uint64_t, uint64_t);
  id v146;
  uint64_t v147;
  uint64_t (*v148)(uint64_t, uint64_t);
  char *v149;
  void (*v150)(void);
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t Strong;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  void *v165;
  void *v166;
  _QWORD *v167;
  void *v168;
  uint64_t v169;
  char v170;
  _QWORD v171[2];

  v7 = v6;
  v160 = a6;
  v151 = a4;
  v158 = a3;
  v154 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v154);
  v153 = (uint64_t)&v142 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v152 = (uint64_t)&v142 - v13;
  __chkstk_darwin(v14);
  v16 = (char *)&v142 - v15;
  __chkstk_darwin(v17);
  v156 = (uint64_t)&v142 - v18;
  __chkstk_darwin(v19);
  v21 = (char *)&v142 - v20;
  __chkstk_darwin(v22);
  v24 = (char *)&v142 - v23;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v164, v7, KeyPath);
  swift_release();
  swift_release();
  v27 = (void *)v164;
  if (!(_QWORD)v164)
  {
    v50 = Logger.logObject.getter(v26);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_0, v50, v51, "contentView not set -- no view to apply layout to!", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    if (a5)
      a5();
    return;
  }
  v159 = *((_QWORD *)&v164 + 1);
  v28 = swift_getKeyPath(&unk_2E7CE8);
  swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(&v164, v7, v28);
  swift_release();
  swift_release();
  if (!v166)
  {
    v53 = sub_52128((uint64_t)&v164, &qword_3B8990);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_0, v54, v55, "Cannot configure web content. Missing Document.", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    if (a5)
      a5();

    return;
  }
  v149 = v16;
  v155 = v24;
  v150 = a5;
  sub_3F1CC(&v164, (uint64_t)v171);
  v29 = sub_74DFC();
  ObjectType = swift_getObjectType(a1);
  v31 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  objc_msgSend(v29, "setHidden:", (v31(ObjectType, a2) & 0xFFFFFFFFFFFFFFFELL) != 2);

  v32 = sub_74B98();
  objc_msgSend(v32, "setHidden:", (v31(ObjectType, a2) & 0xFFFFFFFFFFFFFFFELL) == 2);

  v33 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(ObjectType, a2));
  if ((v35 & 1) == 0)
  {
    v36 = v34;
    v37 = (*(double (**)(uint64_t, uint64_t))(a2 + 48))(ObjectType, a2) / v33;
    v39 = v38 / v36;
    if (v39 >= v37)
      v40 = v37;
    else
      v40 = v39;
    v41 = swift_getObjectType(v27);
    (*(void (**)(uint64_t, double))(v159 + 24))(v41, v40);
  }
  v157 = ObjectType;
  v42 = objc_opt_self(WKWebView);
  v43 = swift_dynamicCastObjCClass(v27, v42);
  if (v43)
  {
    v44 = (void *)v43;
    v45 = *(void (**)(uint64_t, uint64_t))(a2 + 144);
    v46 = v27;
    v45(v157, a2);
    objc_msgSend(v44, "setBe_textZoomFactor:");
    v47 = objc_msgSend(v44, "URL");
    if (v47)
    {
      v48 = v47;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v47);

      v49 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v21, 0, 1, v49);
    }
    else
    {

      v61 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v21, 1, 1, v61);
    }
    v59 = v150;
    v58 = (uint64_t)v155;
    v60 = v159;
    sub_8927C((uint64_t)v21, (uint64_t)v155);
  }
  else
  {
    v57 = type metadata accessor for URL(0);
    v58 = (uint64_t)v155;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v155, 1, 1, v57);
    v59 = v150;
    v60 = v159;
  }
  v62 = swift_getObjectType(v27);
  v145 = *(uint64_t (**)(uint64_t, uint64_t))(v60 + 104);
  v63 = v145(v62, v60);
  v65 = v64;
  v148 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 184);
  v66 = v148(v157, a2);
  v68 = v67;
  if (!v65)
  {
    swift_bridgeObjectRelease(v67);
    goto LABEL_29;
  }
  if (v63 != v66 || v65 != v67)
  {
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v65, v66, v67, 0);
    swift_bridgeObjectRelease(v68);
    v69 = swift_bridgeObjectRelease(v65);
    if ((v70 & 1) != 0)
      goto LABEL_39;
LABEL_29:
    v147 = v62;
    v71 = v156;
    sub_3F238(v58, v156, (uint64_t *)&unk_3B8C50);
    v72 = (uint64_t)v149;
    sub_3F238(v58, (uint64_t)v149, (uint64_t *)&unk_3B8C50);
    sub_49F1C((uint64_t)v171, (uint64_t)&v164);
    v73 = v27;
    swift_unknownObjectRetain_n(a1, 2);
    v74 = v73;
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter();
    v77 = v76;
    if (os_log_type_enabled(v75, v76))
    {
      v78 = swift_slowAlloc(52, -1);
      v144 = swift_slowAlloc(128, -1);
      v163 = v144;
      *(_DWORD *)v78 = 136447234;
      v146 = v74;
      v79 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 192);
      v143 = v77;
      v80 = v79(v157, a2);
      v82 = v81;
      Strong = sub_33524(v80, v81, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v162, v78 + 4);
      swift_bridgeObjectRelease(v82);
      swift_unknownObjectRelease_n(a1, 2);
      *(_WORD *)(v78 + 12) = 2080;
      v142 = v75;
      v83 = v152;
      sub_3F238(v71, v152, (uint64_t *)&unk_3B8C50);
      v84 = type metadata accessor for URL(0);
      v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 48))(v83, 1, v84);
      sub_52128(v83, (uint64_t *)&unk_3B8C50);
      if (v85 == 1)
        v86 = 0x56746E65746E6F63;
      else
        v86 = 0x77656956626577;
      if (v85 == 1)
        v87 = 0xEB00000000776569;
      else
        v87 = 0xE700000000000000;
      Strong = sub_33524(v86, v87, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v162, v78 + 14);
      swift_bridgeObjectRelease(v87);
      sub_52128(v71, (uint64_t *)&unk_3B8C50);
      *(_WORD *)(v78 + 22) = 2080;
      v88 = (uint64_t)v149;
      v89 = v153;
      sub_3F238((uint64_t)v149, v153, (uint64_t *)&unk_3B8C50);
      v90 = String.init<A>(describing:)(v89, v154);
      v92 = v91;
      Strong = sub_33524(v90, v91, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v162, v78 + 24);
      swift_bridgeObjectRelease(v92);
      sub_52128(v88, (uint64_t *)&unk_3B8C50);
      *(_WORD *)(v78 + 32) = 2080;
      v93 = v159;
      Strong = v145(v147, v159);
      v162 = v94;
      v95 = sub_319AC((uint64_t *)&unk_3BBB20);
      v96 = String.init<A>(describing:)(&Strong, v95);
      v98 = v97;
      Strong = sub_33524(v96, v97, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v162, v78 + 34);
      swift_bridgeObjectRelease(v98);

      *(_WORD *)(v78 + 42) = 2050;
      v156 = v78 + 44;
      v99 = (uint64_t)v166;
      v100 = v167;
      sub_472D0(&v164, (uint64_t)v166);
      v101 = (uint64_t (*)(uint64_t, _QWORD *))v100[5];
      v102 = v100;
      v59 = v150;
      v103 = v101(v99, v102);
      sub_34488(&v164);
      Strong = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v162, v156);
      v104 = v142;
      _os_log_impl(&dword_0, v142, (os_log_type_t)v143, "ContentLoader setting #contentConfig:%{public}s to %s.url:%s from %s for ordinal %{public}ld", (uint8_t *)v78, 0x34u);
      v105 = v144;
      swift_arrayDestroy(v144, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v105, -1, -1);
      swift_slowDealloc(v78, -1, -1);

      v106 = v157;
    }
    else
    {
      sub_34488(&v164);

      swift_unknownObjectRelease_n(a1, 2);
      sub_52128(v71, (uint64_t *)&unk_3B8C50);
      sub_52128(v72, (uint64_t *)&unk_3B8C50);

      v93 = v159;
      v106 = v157;
    }
    v107 = v148(v106, a2);
    (*(void (**)(uint64_t))(v93 + 112))(v107);
    v58 = (uint64_t)v155;
    goto LABEL_39;
  }
  swift_bridgeObjectRelease(v67);
  v69 = swift_bridgeObjectRelease(v65);
LABEL_39:
  if ((v158 & 1) != 0)
  {
    v108 = objc_opt_self(WKWebView);
    v109 = swift_dynamicCastObjCClass(v27, v108);
    if (v109)
    {
      v110 = (void *)v109;
      v111 = &v7[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaderViewReusePool];
      if (swift_weakLoadStrong(&v7[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaderViewReusePool]))
      {
        v112 = v27;
        ContentLoaderViewReusePool.configuration(forDocument:)(v171, (uint64_t)&v164);
        *(_QWORD *)&v113 = swift_release().n128_u64[0];
        v114 = v164;
        v116 = v165;
        v115 = v166;
        v118 = v167;
        v117 = v168;
        v119 = v169;
        v120 = v170;
        objc_msgSend(v110, "be_willFullyConfigure", v113);
        v164 = v114;
        v165 = v116;
        v166 = v115;
        v167 = v118;
        v168 = v117;
        v169 = v119;
        v170 = v120;
        sub_15D520((uint64_t)&v164, v151 & 1, (uint64_t)v150, v160);

        sub_52128((uint64_t)v155, (uint64_t *)&unk_3B8C50);
        sub_34488(v171);

        swift_unknownObjectRelease(v119);
        return;
      }
      v132 = v7;
      v122 = v27;
      v133 = v132;
      v134 = Logger.logObject.getter(v133);
      v135 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v134, v135))
      {
        v136 = (uint8_t *)swift_slowAlloc(12, -1);
        v137 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v164 = v137;
        *(_DWORD *)v136 = 136446210;
        Strong = swift_weakLoadStrong(v111);
        v138 = sub_319AC(&qword_3B8C60);
        v139 = String.init<A>(describing:)(&Strong, v138);
        v141 = v140;
        Strong = sub_33524(v139, v140, (uint64_t *)&v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v162, v136 + 4);
        swift_bridgeObjectRelease(v141);

        _os_log_impl(&dword_0, v134, v135, "Failed to get #loadingStatus configuration for document from pool %{public}s", v136, 0xCu);
        swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1, -1);
        swift_slowDealloc(v136, -1, -1);

      }
      else
      {

      }
      if (v150)
        v150();

    }
    else
    {
      v122 = v27;
      v123 = Logger.logObject.getter(v122);
      v124 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v123, v124))
      {
        v125 = (uint8_t *)swift_slowAlloc(12, -1);
        v126 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v164 = v126;
        *(_DWORD *)v125 = 136446210;
        v127 = swift_getObjectType(v122);
        v128 = _typeName(_:qualified:)(v127, 0);
        v130 = v129;
        Strong = sub_33524(v128, v129, (uint64_t *)&v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&Strong, &v162, v125 + 4);
        v131 = v130;
        v59 = v150;
        swift_bridgeObjectRelease(v131);

        _os_log_impl(&dword_0, v123, v124, "Unable to fully configure contentView of type: %{public}s currently only supported on Web Content", v125, 0xCu);
        swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v126, -1, -1);
        swift_slowDealloc(v125, -1, -1);

      }
      else
      {

      }
      if (v59)
        v59();
    }

    v121 = (uint64_t)v155;
  }
  else
  {
    if (v59)
      ((void (*)(__n128))v59)(v69);

    v121 = v58;
  }
  sub_52128(v121, (uint64_t *)&unk_3B8C50);
  sub_34488(v171);
}

uint64_t sub_7C93C(char *a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, void *a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD);
  uint64_t v23;
  uint64_t v24;
  char v25;
  id v26;
  uint64_t (*v27)(_QWORD);
  NSURL *v28;
  void *v29;
  void *v30;
  char *v31;
  Class isa;
  id v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  char *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(_QWORD);
  uint64_t v60;
  char v61[24];
  __int128 v62;
  uint64_t v63;
  uint64_t v64[3];
  uint64_t v65;
  uint64_t v66;

  v59 = a6;
  v60 = a4;
  v56 = type metadata accessor for URL(0);
  v54 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56);
  v55 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URLRequest(0);
  v57 = *(_QWORD *)(v11 - 8);
  v58 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)&v51 - v19;
  v21 = (uint64_t)&a1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost];
  swift_beginAccess(&a1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost], v61, 0, 0);
  sub_3F238(v21, (uint64_t)&v62, &qword_3B89A0);
  if (v63)
  {
    v52 = a5;
    v53 = v17;
    v22 = a3;
    sub_3F1CC(&v62, (uint64_t)v64);
    v23 = v65;
    v24 = v66;
    sub_472D0(v64, v65);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
    v25 = static UUID.== infix(_:_:)(a2, v20);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    if ((v25 & 1) != 0)
    {
      v26 = v52;
      objc_msgSend(v52, "be_prepareForLoad");
      v27 = v59;
      URL._bridgeToObjectiveC()(v28);
      v30 = v29;
      objc_msgSend(v26, "be_willAttemptLoad:", v29);

      v31 = v55;
      (*(void (**)(char *, uint64_t (*)(_QWORD), uint64_t))(v54 + 16))(v55, v27, v56);
      URLRequest.init(url:cachePolicy:timeoutInterval:)(v31, 0, 60.0);
      isa = URLRequest._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v13, v58);
      v33 = objc_msgSend(v26, "loadRequest:", isa);

      return sub_34488(v64);
    }
    sub_34488(v64);
    a3 = v22;
    v17 = v53;
  }
  else
  {
    sub_52128((uint64_t)&v62, &qword_3B89A0);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  v35 = v15;
  v36 = a1;
  v37 = v14;
  v38 = Logger.logObject.getter(v36);
  v39 = v17;
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v40))
  {
    v41 = swift_slowAlloc(22, -1);
    v58 = swift_slowAlloc(64, -1);
    v64[0] = v58;
    *(_DWORD *)v41 = 136446466;
    v42 = ContentLoader.shortDescription.getter();
    v44 = v43;
    *(_QWORD *)&v62 = sub_33524(v42, v43, v64);
    v59 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8, v41 + 4);
    swift_bridgeObjectRelease(v44);

    *(_WORD *)(v41 + 12) = 2080;
    v45 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v37, v45);
    v48 = v47;
    *(_QWORD *)&v62 = sub_33524(v46, v47, v64);
    a3 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8, v41 + 14);
    v49 = swift_bridgeObjectRelease(v48);
    (*(void (**)(char *, uint64_t, __n128))(v35 + 8))(v39, v37, v49);
    _os_log_impl(&dword_0, v38, v40, "Loader %{public}s ignoring pre-load configuration due to stale contentViewHost: %s", (uint8_t *)v41, 0x16u);
    v50 = v58;
    swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v35 + 8))(v39, v14);
  }
  LOWORD(v64[0]) = 257;
  return a3(v64);
}

void ContentLoader.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BookEPUB.ContentLoader", 22, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_7CE20@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for ContentLoader(0);
  result = ObservableObject<>.objectWillChange.getter(v2);
  *a1 = result;
  return result;
}

id sub_7CE5C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*a1, "bounds");
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_7CE90(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setBounds:", *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_7CEA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  _QWORD *v9;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, __n128);
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  uint64_t v47;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;

  v9 = (_QWORD *)a4;
  sub_49F1C(a4, (uint64_t)v48);
  swift_unknownObjectRetain_n(a1, 2);
  v13 = v6;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v39 = a3;
    v40 = v9;
    v41 = a5;
    v42 = a6;
    v16 = swift_slowAlloc(32, -1);
    v38 = swift_slowAlloc(64, -1);
    v47 = v38;
    *(_DWORD *)v16 = 134218498;
    v18 = v49;
    v17 = v50;
    sub_472D0(v48, v49);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 40))(v18, v17);
    sub_34488(v48);
    v45 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v16 + 4);
    *(_WORD *)(v16 + 12) = 2080;
    ObjectType = swift_getObjectType(a1);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 184))(ObjectType, a2);
    v23 = v22;
    v45 = sub_33524(v21, v22, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46, v16 + 14);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v16 + 22) = 2080;
    v24 = &v13[OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider];
    swift_beginAccess(&v13[OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider], &v45, 0, 0);
    v25 = *(_QWORD *)v24;
    if (*(_QWORD *)v24)
    {
      v26 = *((_QWORD *)v24 + 1);
      v27 = swift_getObjectType(v25);
      v28 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 184);
      v29 = swift_unknownObjectRetain(v25);
      v30 = v28(v27, v26, v29);
      v32 = v31;
      swift_unknownObjectRelease(v25);
    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    v43 = v30;
    v44 = v32;
    v33 = sub_319AC((uint64_t *)&unk_3BBB20);
    v34 = String.init<A>(describing:)(&v43, v33);
    v36 = v35;
    v43 = sub_33524(v34, v35, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v16 + 24);

    swift_bridgeObjectRelease(v36);
    _os_log_impl(&dword_0, v14, v15, "SnapshotContentLoader reloadDocument for ordinal:%ld applying #contentConfig:%s, currently:%s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    a5 = v41;
    a6 = v42;
    a3 = v39;
    v9 = v40;
  }
  else
  {
    sub_34488(v48);

    swift_unknownObjectRelease_n(a1, 2);
  }
  return sub_7A95C(a1, a2, a3, v9, a5, a6);
}

id SnapshotContentLoader.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SnapshotContentLoader(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_7D1EC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v1 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer), "invalidate");
  v2 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

  v3 = (_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusStartPoint);
  *v3 = 0;
  v3[1] = 0;
  *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState) = 0;
  v4 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusLongPressRecognizer);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusLongPressRecognizer) = 0;

  v5 = *(void **)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusPanRecognizer);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusPanRecognizer) = 0;

}

void ContentLoader.scrollViewDidEndZooming(_:with:atScale:)(void *a1)
{
  id v2;

  v2 = sub_74DFC();
  objc_msgSend(a1, "contentOffset");
  objc_msgSend(v2, "setContentOffset:");

}

id ContentLoader.peripheralAccessoryView.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t, __n128);
  __n128 v6;
  uint64_t v7;
  _BYTE v9[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider);
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider, v9, 0, 0);
  v2 = *v1;
  if (*v1
    && (v3 = v1[1],
        ObjectType = swift_getObjectType(v2),
        v5 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v3 + 24),
        v6 = swift_unknownObjectRetain(v2),
        v7 = v5(ObjectType, v3, v6),
        swift_unknownObjectRelease(v2),
        (v7 & 0xFFFFFFFFFFFFFFFELL) == 2))
  {
    return sub_74DFC();
  }
  else
  {
    return sub_74B98();
  }
}

void sub_7D458(char a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(__int128 *);
  char v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];

  v3 = v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates;
  swift_beginAccess(v3, v18, 1, 0);
  v4 = *(_QWORD **)v3;
  if (!*(_QWORD *)(*(_QWORD *)v3 + 16))
    return;
  *(_QWORD *)v3 = _swiftEmptyArrayStorage;
  if (!v4[2])
  {
    __break(1u);
LABEL_11:
    v4 = sub_E3A50(v4);
    v5 = v4[2];
    if (v5)
      goto LABEL_5;
LABEL_12:
    __break(1u);
    return;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
    goto LABEL_11;
  v5 = v4[2];
  if (!v5)
    goto LABEL_12;
LABEL_5:
  v13 = a1;
  v6 = v5 - 1;
  v7 = &v4[4 * v5 - 4];
  v14 = *((_OWORD *)v7 + 2);
  v9 = v7[6];
  v8 = v7[7];
  v4[2] = v6;
  if (v6)
  {
    v10 = v4 + 7;
    do
    {
      v11 = *(v10 - 3);
      v12 = (void (*)(__int128 *))*(v10 - 1);
      LOWORD(v15) = 1;
      swift_unknownObjectRetain(v11);
      swift_retain();
      v12(&v15);
      swift_release();
      swift_unknownObjectRelease(v11);
      v10 += 4;
      --v6;
    }
    while (v6);
  }
  swift_bridgeObjectRelease(v4);
  v15 = v14;
  v16 = v9;
  v17 = v8;
  sub_7D5B4((uint64_t *)&v15, v13 & 1);
  swift_release();
  swift_unknownObjectRelease(v14);
}

void sub_7D5B4(uint64_t *a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void (*v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  id v20;
  char *v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  double v37;
  uint64_t v38;
  os_log_t v39;
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  char *v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(__int128 *);
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  void (*v56)(__int128 *);
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  int v64;
  os_log_t v65;
  uint64_t v66;
  id v67;
  void (*v68)(_QWORD);
  id v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[16];
  __int128 v77;
  uint64_t v78;
  char v79[24];
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v3 = v2;
  v73 = a2;
  v5 = type metadata accessor for UUID(0);
  __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  v8 = (char *)&v61 - v7;
  v9 = *a1;
  v74 = a1[1];
  v10 = (void (*)(_QWORD))a1[2];
  v11 = a1[3];
  v12 = (uint64_t)&v3[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost];
  swift_beginAccess(&v3[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost], v79, 0, 0);
  sub_3F238(v12, (uint64_t)&v80, &qword_3B89A0);
  if (v81)
  {
    v72 = v8;
    v71 = v5;
    sub_3F1CC(&v80, (uint64_t)&v82);
    KeyPath = swift_getKeyPath(&unk_2E7CE8);
    swift_getKeyPath(&unk_2E7D10);
    static Published.subscript.getter(&v77, v3, KeyPath);
    swift_release();
    swift_release();
    if (v78)
    {
      sub_3F1CC(&v77, (uint64_t)&v80);
      v14 = swift_getKeyPath(&unk_2E7D30);
      swift_getKeyPath(&unk_2E7D58);
      static Published.subscript.getter(&v77, v3, v14);
      swift_release();
      swift_release();
      v16 = (void *)v77;
      if ((_QWORD)v77)
      {
        v17 = objc_opt_self(WKWebView);
        v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
        if (v18)
        {
          v69 = v18;
          v68 = v10;
          v19 = v3;
          swift_unknownObjectRetain_n(v9, 2);
          swift_retain_n(v11, 2);
          v20 = v16;
          v21 = v19;
          v22 = v20;
          v23 = Logger.logObject.getter(v22);
          v24 = static os_log_type_t.info.getter();
          v25 = v24;
          v26 = os_log_type_enabled(v23, v24);
          v70 = v11;
          v67 = v22;
          if (v26)
          {
            v27 = swift_slowAlloc(32, -1);
            v66 = swift_slowAlloc(64, -1);
            *(_QWORD *)&v77 = v66;
            *(_DWORD *)v27 = 136446722;
            v65 = v23;
            v28 = ContentLoader.shortDescription.getter();
            v30 = v29;
            v75 = sub_33524(v28, v29, (uint64_t *)&v77);
            v63 = v76;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v27 + 4);

            swift_bridgeObjectRelease(v30);
            *(_WORD *)(v27 + 12) = 2080;
            v64 = v25;
            v62 = v27 + 14;
            ObjectType = swift_getObjectType(v9);
            v32 = v74;
            v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 184))(ObjectType, v74);
            v35 = v34;
            v75 = sub_33524(v33, v34, (uint64_t *)&v77);
            v36 = v63;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v63, v62);
            swift_release_n(v70);
            swift_unknownObjectRelease_n(v9, 2);
            *(_QWORD *)&v37 = swift_bridgeObjectRelease(v35).n128_u64[0];
            *(_WORD *)(v27 + 22) = 2048;
            objc_msgSend(v69, "be_textZoomFactor", v37);
            v75 = v38;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v36, v27 + 24);

            v39 = v65;
            _os_log_impl(&dword_0, v65, (os_log_type_t)v64, "ContentLoader: %{public}s reload with configuration:%s, current #contentConfig textZoomFactor:%f", (uint8_t *)v27, 0x20u);
            v40 = v66;
            swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v40, -1, -1);
            swift_slowDealloc(v27, -1, -1);

          }
          else
          {

            swift_release_n(v11);
            swift_unknownObjectRelease_n(v9, 2);

            v32 = v74;
          }
          ContentLoader.updateStyle(with:)(v9, v32);
          v60 = &v21[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state];
          swift_beginAccess(&v21[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state], &v75, 1, 0);
          __asm { BR              X10 }
        }

      }
      v56 = (void (*)(__int128 *))v10;
      v57 = Logger.logObject.getter(v15);
      v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v59 = 0;
        _os_log_impl(&dword_0, v57, v58, "Failed to get contentView as WebView", v59, 2u);
        swift_slowDealloc(v59, -1, -1);
      }

      LOWORD(v77) = 256;
      v56(&v77);
      sub_34488(&v80);
    }
    else
    {
      v51 = (void (*)(__int128 *))v10;
      v52 = sub_52128((uint64_t)&v77, &qword_3B8990);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v55 = 0;
        _os_log_impl(&dword_0, v53, v54, "We have no document -- nothing to reload to get contentView as WebView", v55, 2u);
        swift_slowDealloc(v55, -1, -1);
      }

      LOWORD(v80) = 256;
      v51(&v80);
    }
    sub_34488(&v82);
  }
  else
  {
    sub_52128((uint64_t)&v80, &qword_3B89A0);
    v41 = v3;
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v82 = v45;
      *(_DWORD *)v44 = 136315138;
      v46 = v41;
      v47 = objc_msgSend(v46, "description");
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      v50 = v49;

      *(_QWORD *)&v80 = sub_33524(v48, v50, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 8, v44 + 4);

      swift_bridgeObjectRelease(v50);
      _os_log_impl(&dword_0, v42, v43, "Loader %s missing contentViewHost!", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {

    }
  }
}

void sub_7DF58()
{
  uint64_t v0;

  if ((*(_DWORD *)(v0 - 316) & 1) == 0)
    JUMPOUT(0x7DCF0);
  JUMPOUT(0x7DCD4);
}

Swift::Void __swiftcall ContentLoader.applicationForegroundStateDidChange(to:)(BookEPUB::BookContentApplicationForegroundState to)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t KeyPath;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18[2];

  v2 = v1;
  v3 = *(unsigned __int8 *)to;
  v4 = Logger.logObject.getter(to);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v18[0] = v7;
    *(_DWORD *)v6 = 136315138;
    LOBYTE(v17) = v3;
    v8 = String.init<A>(describing:)(&v17, &type metadata for BookContentApplicationForegroundState);
    v10 = v9;
    v17 = sub_33524(v8, v9, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v6 + 4);
    swift_bridgeObjectRelease(v10);
    _os_log_impl(&dword_0, v4, v5, "#loadingStatus state change to: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  if (v3 == 1)
  {
    KeyPath = swift_getKeyPath(&unk_2E7D30);
    swift_getKeyPath(&unk_2E7D58);
    static Published.subscript.getter(v18, v2, KeyPath);
    swift_release();
    swift_release();
    v12 = (void *)v18[0];
    if (v18[0])
    {
      v13 = objc_opt_self(WKWebView);
      v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
      if (v14)
      {
        v15 = v14;
        if (objc_msgSend(v14, "be_requiresReload"))
        {
          v16 = objc_msgSend(v15, "be_navigationHandler");
          objc_msgSend(v16, "attemptReload");

          v12 = v16;
        }
      }

    }
  }
}

double ContentLoader.load(document:layoutProvider:completion:)(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  _UNKNOWN **v38;
  uint64_t v39;
  char *v40;
  double result;
  uint64_t KeyPath;
  uint64_t v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  NSObject *v71;
  os_signpost_type_t v72;
  char *v73;
  uint8_t *v74;
  os_signpost_id_t v75;
  uint8_t *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _UNKNOWN **v92;
  char *v93;
  __n128 v94;
  _QWORD *v95;
  void (*v96)(_QWORD);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  _UNKNOWN **v112;
  char v113[32];

  v106 = a5;
  v105 = type metadata accessor for UUID(0);
  v99 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105);
  v98 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for OSSignpostID(0);
  v11 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102);
  v100 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v104 = (char *)&v95 - v14;
  v15 = v5;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v101 = v11;
  if (v18)
  {
    v19 = swift_slowAlloc(12, -1);
    v97 = a2;
    v96 = a4;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v103 = a3;
    v22 = v21;
    *(_QWORD *)&v110 = v21;
    *(_DWORD *)v20 = 136446210;
    v23 = ContentLoader.shortDescription.getter();
    v25 = v24;
    *(_QWORD *)&v108 = sub_33524(v23, v24, (uint64_t *)&v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, (char *)&v108 + 8, v20 + 4);

    swift_bridgeObjectRelease(v25);
    _os_log_impl(&dword_0, v16, v17, "#loadingStatus Loader %{public}s loading", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v26 = v22;
    a3 = v103;
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    a4 = v96;
    a2 = v97;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {

  }
  v28 = a1[3];
  v29 = a1[4];
  sub_472D0(a1, v28);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 40))(v28, v29);
  v31 = sub_730FC();
  if ((v32 & 1) != 0 || v30 != v31)
  {
    v40 = &v15[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state];
    swift_beginAccess(&v15[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state], v113, 1, 0);
    if (*v40)
    {
      ContentLoader.prepareForReuse()();
    }
    else
    {
      LOBYTE(v110) = 1;
      sub_72A5C();
      *v40 = 1;
    }
    sub_49F1C((uint64_t)a1, (uint64_t)&v110);
    KeyPath = swift_getKeyPath(&unk_2E7CE8);
    v43 = swift_getKeyPath(&unk_2E7D10);
    sub_3F238((uint64_t)&v110, (uint64_t)&v108, &qword_3B8990);
    v44 = v15;
    static Published.subscript.setter(&v108, v44, KeyPath, v43);
    sub_52128((uint64_t)&v110, &qword_3B8990);
    v45 = &v44[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates];
    swift_beginAccess(&v44[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates], &v110, 33, 0);
    v46 = *(_QWORD **)v45;
    swift_unknownObjectRetain_n(a2, 2);
    swift_retain_n(v106, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
    *(_QWORD *)v45 = v46;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v46 = sub_42E0C(0, v46[2] + 1, 1, v46);
      *(_QWORD *)v45 = v46;
    }
    v49 = v46[2];
    v48 = v46[3];
    if (v49 >= v48 >> 1)
    {
      v46 = sub_42E0C((_QWORD *)(v48 > 1), v49 + 1, 1, v46);
      *(_QWORD *)v45 = v46;
    }
    v46[2] = v49 + 1;
    v50 = &v46[4 * v49];
    v50[4] = a2;
    v50[5] = a3;
    v51 = v106;
    v50[6] = a4;
    v50[7] = v51;
    swift_endAccess(&v110);
    sub_49F1C((uint64_t)a1, (uint64_t)&v110);
    v52 = v44;
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.info.getter();
    v55 = os_log_type_enabled(v53, v54);
    v95 = a1;
    if (v55)
    {
      v56 = swift_slowAlloc(22, -1);
      v57 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v108 = v57;
      *(_DWORD *)v56 = 136446466;
      v58 = ContentLoader.shortDescription.getter();
      v60 = v59;
      v107 = sub_33524(v58, v59, (uint64_t *)&v108);
      v103 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v56 + 4);

      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v56 + 12) = 2080;
      v61 = *((_QWORD *)&v111 + 1);
      v62 = (uint64_t)v112;
      sub_472D0(&v110, *((uint64_t *)&v111 + 1));
      v63 = ContentLoadingDocument.shortDescription.getter(v61, v62);
      v65 = v64;
      v107 = sub_33524(v63, v64, (uint64_t *)&v108);
      a3 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v56 + 14);
      swift_bridgeObjectRelease(v65);
      sub_34488(&v110);
      _os_log_impl(&dword_0, v53, v54, "Loader %{public}s attempting setupContentView for document: %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);

    }
    else
    {

      sub_34488(&v110);
    }
    v67 = v101;
    v66 = v102;
    v68 = v104;
    v69 = *(uint64_t (**)(char *, char *, uint64_t))(v101 + 16);
    v70 = v69(v104, &v52[OBJC_IVAR____TtC8BookEPUB13ContentLoader_signpostID], v102);
    v71 = OSSignposter.logHandle.getter(v70);
    v72 = static os_signpost_type_t.begin.getter();
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v73 = v100;
      v69(v100, v68, v66);
      v74 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v74 = 0;
      v75 = OSSignpostID.rawValue.getter(v74);
      _os_signpost_emit_with_name_impl(&dword_0, v71, v72, v75, "REI.ViewCreation", "", v74, 2u);
      v76 = v74;
      v68 = v104;
      swift_slowDealloc(v76, -1, -1);

      v77 = v73;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v73, v66);
    }
    else
    {

      v77 = v100;
    }
    v69(v77, v68, v66);
    v78 = type metadata accessor for OSSignpostIntervalState(0);
    swift_allocObject(v78, *(unsigned int *)(v78 + 48));
    v79 = OSSignpostIntervalState.init(id:isOpen:)(v77, 1);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v68, v66);
    *(_QWORD *)&v52[OBJC_IVAR____TtC8BookEPUB13ContentLoader_viewCreationIntervalState] = v79;
    v80 = swift_release();
    v81 = swift_allocBox(v105, v80);
    v83 = v82;
    UUID.init()(v81);
    if (swift_weakLoadStrong(&v52[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaderViewReusePool]))
    {
      v84 = swift_allocObject(&unk_37CE78, 24);
      swift_unknownObjectWeakInit(v84 + 16, v52);
      v85 = (_QWORD *)swift_allocObject(&unk_37CFE0, 40);
      v85[2] = v84;
      v85[3] = a2;
      v85[4] = a3;
      v86 = swift_allocObject(&unk_37CE78, 24);
      swift_unknownObjectWeakInit(v86 + 16, v52);
      v87 = swift_allocObject(&unk_37D008, 32);
      *(_QWORD *)(v87 + 16) = v86;
      *(_QWORD *)(v87 + 24) = v81;
      v88 = a2;
      swift_unknownObjectRetain(a2);
      swift_retain();
      swift_retain();
      swift_retain();
      v89 = ContentLoaderViewReusePool.requestContentViewHost(document:updatePlaceholder:updateContentView:)(v95, (uint64_t)sub_86B10, (uint64_t)v85, (uint64_t)sub_86B70, v87);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      *((_QWORD *)&v111 + 1) = type metadata accessor for ContentViewHost(0);
      v112 = &protocol witness table for ContentViewHost;
      *(_QWORD *)&v110 = v89;
    }
    else
    {
      v88 = a2;
      v112 = 0;
      v110 = 0u;
      v111 = 0u;
    }
    v90 = (uint64_t)&v52[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost];
    swift_beginAccess(&v52[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost], &v108, 33, 0);
    sub_85E58((uint64_t)&v110, v90);
    swift_endAccess(&v108);
    sub_3F238(v90, (uint64_t)&v108, &qword_3B89A0);
    if (v109)
    {
      sub_3F1CC(&v108, (uint64_t)&v110);
      v91 = *((_QWORD *)&v111 + 1);
      v92 = v112;
      sub_472D0(&v110, *((uint64_t *)&v111 + 1));
      v93 = v98;
      ((void (*)(uint64_t, _UNKNOWN **))v92[1])(v91, v92);
      swift_release();
      swift_unknownObjectRelease(v88);
      v94 = swift_beginAccess(v83, &v108, 1, 0);
      (*(void (**)(uint64_t, char *, uint64_t, __n128))(v99 + 40))(v83, v93, v105, v94);
      sub_34488(&v110);
    }
    else
    {
      swift_release();
      swift_unknownObjectRelease(v88);
      sub_52128((uint64_t)&v108, &qword_3B89A0);
    }
    *(_QWORD *)&result = swift_release().n128_u64[0];
  }
  else
  {
    v33 = sub_49F1C((uint64_t)a1, (uint64_t)&v110);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v36 = 134349056;
      v37 = *((_QWORD *)&v111 + 1);
      v38 = v112;
      sub_472D0(&v110, *((uint64_t *)&v111 + 1));
      v39 = ((uint64_t (*)(uint64_t, _UNKNOWN **))v38[5])(v37, v38);
      sub_34488(&v110);
      *(_QWORD *)&v110 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, (char *)&v110 + 8, v36 + 4);
      _os_log_impl(&dword_0, v34, v35, "Will not attempt to #loadingStatus load same ordinal %{public}ld", v36, 0xCu);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      sub_34488(&v110);
    }

    LOWORD(v110) = 257;
    a4(&v110);
  }
  return result;
}

void sub_7EBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  int v16;
  uint64_t Strong;
  void *v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_signpost_type_t v22;
  uint8_t *v23;
  os_signpost_id_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  void *v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  id v43;
  uint64_t KeyPath;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[3];
  uint64_t v71;
  _BYTE v72[24];

  v8 = type metadata accessor for OSSignpostID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = (char *)&v65 - v13;
  v15 = *(void **)a1;
  v69 = *(_QWORD *)(a1 + 8);
  a2 += 16;
  v16 = *(unsigned __int8 *)(a1 + 16);
  swift_beginAccess(a2, v72, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (!Strong)
    return;
  v18 = (void *)Strong;
  v67 = v16;
  v68 = a4;
  v66 = a3;
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v20 = v19(v14, Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_signpostID, v8);
  v21 = OSSignposter.logHandle.getter(v20);
  v22 = static os_signpost_type_t.event.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v19(v11, (uint64_t)v14, v8);
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    v24 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_0, v21, v22, v24, "REI.PlaceholderView", "", v23, 2u);
    swift_slowDealloc(v23, -1, -1);

    v25 = *(void (**)(char *, uint64_t))(v9 + 8);
    v25(v14, v8);
    v25(v11, v8);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  }
  v26 = v68;
  v27 = v15;
  if ((v67 & 1) != 0)
  {
    v28 = v18;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = (uint64_t *)swift_slowAlloc(8, -1);
      v33 = swift_slowAlloc(32, -1);
      v70[0] = v33;
      *(_DWORD *)v31 = 136446466;
      v34 = ContentLoader.shortDescription.getter();
      v36 = v35;
      v71 = sub_33524(v34, v35, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v31 + 4);

      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v31 + 12) = 2112;
      v37 = sub_89A38();
      v38 = swift_allocError(&type metadata for ViewProxyError, v37, 0, 0);
      v39 = _swift_stdlib_bridgeErrorToNSError(v38);
      v71 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, v72, v31 + 14);
      *v32 = v39;
      _os_log_impl(&dword_0, v29, v30, "Loader %{public}s error setup placeholder error:%@", (uint8_t *)v31, 0x16u);
      v40 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v32, 1, v40);
      swift_slowDealloc(v32, -1, -1);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {

    }
    return;
  }
  v41 = v15;
  v42 = v69;
  sub_89A2C(v41, v69, 0);
  v43 = v27;
  sub_76C8C();
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v45 = swift_getKeyPath(&unk_2E7D58);
  v70[0] = (uint64_t)v27;
  v70[1] = v42;
  sub_89A2C(v27, v42, 0);
  v46 = v18;
  static Published.subscript.setter(v70, v46, KeyPath, v45);
  sub_76E84();
  v47 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v70, v46, v47);
  swift_release();
  swift_release();
  v48 = (void *)v70[0];
  if (v70[0])
  {
    v49 = objc_opt_self(WKWebView);
    v50 = (void *)swift_dynamicCastObjCClass(v48, v49);
    if (v50)
    {
      v51 = objc_msgSend(v50, "be_viewForFindUI");

      if (v51)
      {
        v52 = swift_allocObject(&unk_37CE78, 24);
        swift_unknownObjectWeakInit(v52 + 16, v46);
        v70[0] = (uint64_t)v51;
        v53 = swift_getKeyPath(&unk_2E7D80);
        v54 = swift_allocObject(&unk_37D8F8, 32);
        *(_QWORD *)(v54 + 16) = sub_85EC4;
        *(_QWORD *)(v54 + 24) = v52;
        swift_retain_n(v52, 2);
        v55 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v53, 0, sub_62894, v54, &protocol witness table for NSObject);
        swift_release();
        swift_release();
        v56 = swift_allocObject(&unk_37D920, 24);
        *(_QWORD *)(v56 + 16) = v55;
        v58 = type metadata accessor for AnyCancellable(0, v57);
        swift_allocObject(v58, *(unsigned int *)(v58 + 48));
        v48 = (void *)AnyCancellable.init(_:)(sub_89AB0, v56);

        swift_release_n(v52);
        goto LABEL_16;
      }
    }
    else
    {

    }
    v48 = 0;
  }
LABEL_16:
  *(_QWORD *)&v46[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentAccessoryBoundsObservation] = v48;
  swift_release();
  sub_89A10(v27, v42, 0);
  v59 = &v46[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates];
  swift_beginAccess(&v46[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates], v70, 0, 0);
  v60 = *(_QWORD *)v59;
  v61 = *(_QWORD *)(*(_QWORD *)v59 + 16);
  v62 = v66;
  if (v61)
  {
    v63 = (uint64_t *)(v60 + 32 * v61);
    v62 = *v63;
    v26 = v63[1];
  }
  swift_unknownObjectRetain(v62);
  ContentLoader.updateStyle(with:)(v64, v26);
  swift_unknownObjectRelease(v62);

  sub_89A10(v27, v42, 0);
}

uint64_t sub_7F1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  char v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v9 - 8);
  v26 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void **)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v14 = *(_BYTE *)(a1 + 16);
  sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v24 = static OS_dispatch_queue.main.getter(v15);
  v16 = swift_allocObject(&unk_37D858, 49);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  *(_QWORD *)(v16 + 32) = v13;
  *(_QWORD *)(v16 + 40) = v12;
  *(_BYTE *)(v16 + 48) = v14;
  aBlock[4] = sub_89A1C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_525B8;
  aBlock[3] = &unk_37D870;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_89A2C(v13, v12, v14);
  v18 = swift_release();
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_34284((unint64_t *)&qword_3B8500, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_319AC(&qword_3B96F0);
  v21 = sub_3DCC0((unint64_t *)&qword_3B8510, &qword_3B96F0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v6, v19);
  v22 = (void *)v24;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v11, v26);
}

void sub_7F42C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t Strong;
  char *v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_signpost_type_t v34;
  char *v35;
  uint8_t *v36;
  os_signpost_id_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  uint64_t KeyPath;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  id v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v87[24];
  __int128 v88;
  uint64_t v89;
  uint64_t v90[3];
  uint64_t v91;
  uint64_t v92;
  char v93[32];

  v81 = a5;
  v82 = a3;
  v8 = type metadata accessor for OSSignpostID(0);
  v83 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v80 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v12 = (char *)&v78 - v11;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v78 - v18;
  v20 = a1 + 16;
  v21 = swift_projectBox(a2);
  swift_beginAccess(v20, v93, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v20);
  if (Strong)
  {
    v23 = (char *)Strong;
    v24 = Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost;
    swift_beginAccess(Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost, v87, 0, 0);
    sub_3F238(v24, (uint64_t)&v88, &qword_3B89A0);
    if (v89)
    {
      v79 = a4;
      sub_3F1CC(&v88, (uint64_t)v90);
      v25 = swift_beginAccess(v21, &v88, 0, 0);
      (*(void (**)(char *, uint64_t, uint64_t, __n128))(v14 + 16))(v19, v21, v13, v25);
      v26 = v91;
      v27 = v92;
      sub_472D0(v90, v91);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v27);
      v28 = static UUID.== infix(_:_:)(v19, v16);
      v29 = *(void (**)(char *, uint64_t))(v14 + 8);
      v29(v16, v13);
      v29(v19, v13);
      if ((v28 & 1) != 0)
      {
        v30 = v83;
        v31 = *(uint64_t (**)(char *, char *, uint64_t))(v83 + 16);
        v32 = v31(v12, &v23[OBJC_IVAR____TtC8BookEPUB13ContentLoader_signpostID], v8);
        v33 = OSSignposter.logHandle.getter(v32);
        v34 = static os_signpost_type_t.event.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v35 = v80;
          v31(v80, v12, v8);
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          v37 = OSSignpostID.rawValue.getter();
          _os_signpost_emit_with_name_impl(&dword_0, v33, v34, v37, "REI.WebViewCreation", "", v36, 2u);
          swift_slowDealloc(v36, -1, -1);

          v38 = *(void (**)(char *, uint64_t))(v30 + 8);
          v38(v12, v8);
          v38(v35, v8);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v8);
        }
        v47 = v79;
        v48 = v82;
        if ((v81 & 1) != 0)
        {
          v65 = v23;
          v66 = Logger.logObject.getter(v65);
          v67 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v66, v67))
          {
            v68 = swift_slowAlloc(22, -1);
            v69 = (uint64_t *)swift_slowAlloc(8, -1);
            v70 = swift_slowAlloc(32, -1);
            v84 = (id)v70;
            *(_DWORD *)v68 = 136446466;
            v71 = ContentLoader.shortDescription.getter();
            v73 = v72;
            v86 = sub_33524(v71, v72, (uint64_t *)&v84);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v68 + 4);

            swift_bridgeObjectRelease(v73);
            *(_WORD *)(v68 + 12) = 2112;
            v74 = sub_89A38();
            v75 = swift_allocError(&type metadata for ViewProxyError, v74, 0, 0);
            v76 = _swift_stdlib_bridgeErrorToNSError(v75);
            v86 = v76;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v68 + 14);
            *v69 = v76;
            _os_log_impl(&dword_0, v66, v67, "Loader %{public}s error setupContentView error:%@", (uint8_t *)v68, 0x16u);
            v77 = sub_319AC(&qword_3B8A70);
            swift_arrayDestroy(v69, 1, v77);
            swift_slowDealloc(v69, -1, -1);
            swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v70, -1, -1);
            swift_slowDealloc(v68, -1, -1);
          }
          else
          {

          }
LABEL_29:
          sub_7D458(0);

          sub_34488(v90);
          return;
        }
        sub_89A2C(v82, v79, 0);
        v49 = v48;
        sub_76C8C();
        KeyPath = swift_getKeyPath(&unk_2E7D30);
        v51 = swift_getKeyPath(&unk_2E7D58);
        v84 = v48;
        v85 = v47;
        sub_89A2C(v48, v47, 0);
        v52 = v23;
        static Published.subscript.setter(&v84, v52, KeyPath, v51);
        sub_76E84();
        v53 = swift_getKeyPath(&unk_2E7D30);
        swift_getKeyPath(&unk_2E7D58);
        static Published.subscript.getter(&v84, v52, v53);
        swift_release();
        swift_release();
        v54 = v84;
        if (v84)
        {
          v55 = objc_opt_self(WKWebView);
          v56 = (void *)swift_dynamicCastObjCClass(v54, v55);
          if (v56)
          {
            v57 = objc_msgSend(v56, "be_viewForFindUI");

            if (v57)
            {
              v58 = swift_allocObject(&unk_37CE78, 24);
              swift_unknownObjectWeakInit(v58 + 16, v52);
              v84 = v57;
              v59 = swift_getKeyPath(&unk_2E7D80);
              v60 = swift_allocObject(&unk_37D8A8, 32);
              *(_QWORD *)(v60 + 16) = sub_85EC4;
              *(_QWORD *)(v60 + 24) = v58;
              swift_retain_n(v58, 2);
              v61 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v59, 0, sub_62894, v60, &protocol witness table for NSObject);
              swift_release();
              swift_release();
              v62 = swift_allocObject(&unk_37D8D0, 24);
              *(_QWORD *)(v62 + 16) = v61;
              v64 = type metadata accessor for AnyCancellable(0, v63);
              swift_allocObject(v64, *(unsigned int *)(v64 + 48));
              v54 = (void *)AnyCancellable.init(_:)(sub_89AB0, v62);

              swift_release_n(v58);
              goto LABEL_24;
            }
          }
          else
          {

          }
          v54 = 0;
        }
LABEL_24:
        *(_QWORD *)&v52[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentAccessoryBoundsObservation] = v54;
        swift_release();
        sub_89A10(v48, v79, 0);
        if (v52[OBJC_IVAR____TtC8BookEPUB13ContentLoader_mediaContentState])
        {
          if (v52[OBJC_IVAR____TtC8BookEPUB13ContentLoader_mediaContentState] == 1)
            ContentLoader.pauseMediaContent()();
          else
            ContentLoader.resumeMediaContent()();
        }
        sub_89A10(v48, v79, 0);
        goto LABEL_29;
      }
      sub_34488(v90);
    }
    else
    {
      sub_52128((uint64_t)&v88, &qword_3B89A0);
    }
    v39 = v23;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(32, -1);
      v90[0] = v43;
      *(_DWORD *)v42 = 136446210;
      v44 = ContentLoader.shortDescription.getter();
      v46 = v45;
      v84 = (id)sub_33524(v44, v45, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v42 + 4);

      swift_bridgeObjectRelease(v46);
      _os_log_impl(&dword_0, v40, v41, "Loader %{public}s stale contentViewHost, discarding", v42, 0xCu);
      swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {

    }
  }
}

void ContentLoader.move(to:completion:)(uint64_t *a1, void (*a2)(_QWORD), uint64_t a3)
{
  void *v3;
  uint64_t v5;
  double v6;
  double v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD);
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t KeyPath;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  double v28;
  double v29;
  id v30;
  double v31;
  double v32;
  double v33;
  double v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  double v51;
  id v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  id v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(_QWORD);
  id v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  id v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  os_log_type_t type;
  uint64_t v96;
  id v97;
  uint64_t v98;
  void (*v99)(_QWORD);
  void (*v100)(_QWORD);
  void (*v101)(_QWORD);
  uint64_t v103;
  _QWORD v104[2];
  uint64_t v105[3];
  CGPoint v106;
  CGRect v107;

  v5 = *a1;
  v7 = *((double *)a1 + 1);
  v6 = *((double *)a1 + 2);
  v8 = v3;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v105[0] = v12;
    *(_DWORD *)v11 = 136315394;
    v13 = sub_8071C(v5, v7, v6);
    v14 = v5;
    v15 = a2;
    v17 = v16;
    v103 = sub_33524(v13, v16, v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v11 + 4);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 12) = 2080;
    v18 = ContentLoader.shortDescription.getter();
    v20 = v19;
    v103 = sub_33524(v18, v19, v105);
    a2 = v15;
    v5 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v11 + 14);

    swift_bridgeObjectRelease(v20);
    _os_log_impl(&dword_0, v9, v10, "move(to: %s in loader: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {

  }
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v105, v8, KeyPath);
  swift_release();
  swift_release();
  v22 = (void *)v105[0];
  if (v105[0])
  {
    v23 = objc_opt_self(WKWebView);
    v24 = swift_dynamicCastObjCClass(v22, v23);
    if (v24)
    {
      v25 = (void *)v24;
      v103 = v5;
      *(double *)v104 = v7;
      *(double *)&v104[1] = v6;
      v26 = v22;
      ContentLoader.convertToUI(_:)(&v103, (double *)v105);
      v27 = (void *)v105[0];
      if (v105[0])
      {
        v29 = *(double *)&v105[1];
        v28 = *(double *)&v105[2];
        v30 = objc_msgSend(v25, "scrollView");
        objc_msgSend(v27, "convertPoint:toCoordinateSpace:", v30, v29, v28);
        v32 = v31;
        v34 = v33;

        v35 = objc_msgSend(v25, "scrollView", swift_unknownObjectRelease(v27).n128_f64[0]);
        objc_msgSend(v35, "contentSize");

        static CGRect.from(size:)(v36);
        v106.x = v32;
        v106.y = v34;
        if (!CGRectContainsPoint(v107, v106))
        {
          v37 = v8;
          v38 = v26;
          v39 = v37;
          v97 = v38;
          v40 = Logger.logObject.getter(v97);
          v41 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v40, v41))
          {
            v42 = swift_slowAlloc(32, -1);
            v96 = swift_slowAlloc(96, -1);
            v105[0] = v96;
            *(_DWORD *)v42 = 136315650;
            v99 = a2;
            v43 = v39;
            v44 = objc_msgSend(v43, "description");
            type = v41;
            v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
            v47 = v46;

            v103 = sub_33524(v45, v47, v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v42 + 4);

            swift_bridgeObjectRelease(v47);
            *(_WORD *)(v42 + 12) = 2080;
            v48 = sub_8071C(v5, v7, v6);
            v50 = v49;
            v103 = sub_33524(v48, v49, v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v42 + 14);
            *(_QWORD *)&v51 = swift_bridgeObjectRelease(v50).n128_u64[0];
            *(_WORD *)(v42 + 22) = 2080;
            a2 = v99;
            v52 = objc_msgSend(v25, "scrollView", v51);
            objc_msgSend(v52, "contentSize");
            v54 = v53;
            v56 = v55;

            v57 = CGSize.debugDescription.getter(v54, v56);
            v59 = v58;
            v103 = sub_33524(v57, v58, v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v42 + 24);

            swift_bridgeObjectRelease(v59);
            _os_log_impl(&dword_0, v40, type, "Requested content offset outside available content! loader:%s offset: %s contentSize: %s", (uint8_t *)v42, 0x20u);
            swift_arrayDestroy(v96, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v96, -1, -1);
            swift_slowDealloc(v42, -1, -1);
          }
          else
          {

          }
        }
        v94 = swift_allocObject(&unk_37D030, 32);
        *(_QWORD *)(v94 + 16) = a2;
        *(_QWORD *)(v94 + 24) = a3;
        swift_retain();
        sub_8100C(v25, (uint64_t)sub_86B78, v94, v32, v34);

        swift_release();
      }
      else
      {
        v82 = v8;
        v83 = Logger.logObject.getter(v82);
        v84 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v83, v84))
        {
          v85 = swift_slowAlloc(22, -1);
          v98 = swift_slowAlloc(64, -1);
          v105[0] = v98;
          *(_DWORD *)v85 = 136315394;
          v86 = sub_5D6E8(v5, v7, v6);
          v101 = a2;
          v88 = v87;
          v103 = sub_33524(v86, v87, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v85 + 4);
          swift_bridgeObjectRelease(v88);
          *(_WORD *)(v85 + 12) = 2080;
          v89 = v82;
          v90 = objc_msgSend(v89, "description");
          v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
          v93 = v92;

          v103 = sub_33524(v91, v93, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v85 + 14);

          a2 = v101;
          swift_bridgeObjectRelease(v93);
          swift_arrayDestroy(v98, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v98, -1, -1);
          swift_slowDealloc(v85, -1, -1);
        }
        else
        {

        }
        a2(0);

      }
    }
    else
    {
      v71 = v8;
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v100 = a2;
        v74 = (uint8_t *)swift_slowAlloc(12, -1);
        v75 = swift_slowAlloc(32, -1);
        v105[0] = v75;
        *(_DWORD *)v74 = 136315138;
        v76 = v71;
        v77 = objc_msgSend(v76, "description");
        v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
        v80 = v79;

        v103 = sub_33524(v78, v80, v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v74 + 4);

        v81 = v80;
        a2 = v100;
        swift_bridgeObjectRelease(v81);
        swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);
      }
      else
      {

      }
      a2(0);

    }
  }
  else
  {
    v60 = v8;
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, (os_log_type_t)v62))
    {
      v63 = swift_slowAlloc(22, -1);
      v64 = swift_slowAlloc(64, -1);
      v105[0] = v64;
      *(_DWORD *)v63 = 136315394;
      v65 = a2;
      v66 = v60;
      v67 = objc_msgSend(v66, "description");
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v70 = v69;

      v103 = sub_33524(v68, v70, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v63 + 4);

      a2 = v65;
      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v63 + 12) = 2080;
      v103 = sub_33524(0xD000000000000014, 0x80000000002C8630, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v63 + 14);
      swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {

    }
    a2(0);
  }
}

unint64_t sub_8071C(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  void *object;
  Swift::String v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  *(_QWORD *)&v20 = 0;
  *((_QWORD *)&v20 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  v23 = 0xD000000000000014;
  v24 = 0x80000000002C7350;
  v19 = a1;
  v6 = sub_319AC(&qword_3B8C40);
  if (swift_dynamicCast(&v20, &v19, &type metadata for DocumentEntityID, v6, 6))
  {
    v7 = *((_QWORD *)&v21 + 1);
    v8 = v22;
    sub_472D0(&v20, *((uint64_t *)&v21 + 1));
    v9 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter(v7, v8);
    v11 = v10;
    sub_34488(&v20);
  }
  else
  {
    v22 = 0;
    v20 = 0u;
    v21 = 0u;
    sub_52128((uint64_t)&v20, &qword_3B8C48);
    *(_QWORD *)&v20 = a1;
    v9 = String.init<A>(describing:)(&v20, &type metadata for DocumentEntityID);
    v11 = v12;
  }
  v13._countAndFlagsBits = v9;
  v13._object = v11;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v11);
  v14._countAndFlagsBits = 0x3A65756C6176202CLL;
  v14._object = (void *)0xE900000000000020;
  String.append(_:)(v14);
  v15._countAndFlagsBits = CGPoint.debugDescription.getter(a2, a3);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._countAndFlagsBits = 41;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v23;
}

unint64_t sub_80898()
{
  double *v0;
  double *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  void *object;
  Swift::String v14;
  double v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v1 = v0;
  *(_QWORD *)&v17 = 0;
  *((_QWORD *)&v17 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease(0xE000000000000000);
  v20 = 0xD000000000000014;
  v21 = 0x80000000002C7350;
  v2 = *v0;
  v16 = v2;
  v3 = sub_319AC(&qword_3B8C40);
  if (swift_dynamicCast(&v17, &v16, &type metadata for DocumentEntityID, v3, 6))
  {
    v4 = *((_QWORD *)&v18 + 1);
    v5 = v19;
    sub_472D0(&v17, *((uint64_t *)&v18 + 1));
    v6 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter(v4, v5);
    v8 = v7;
    sub_34488(&v17);
  }
  else
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    sub_52128((uint64_t)&v17, &qword_3B8C48);
    *(double *)&v17 = v2;
    v6 = String.init<A>(describing:)(&v17, &type metadata for DocumentEntityID);
    v8 = v9;
  }
  v10._countAndFlagsBits = v6;
  v10._object = v8;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v8);
  v11._countAndFlagsBits = 0x3A65756C6176202CLL;
  v11._object = (void *)0xE900000000000020;
  String.append(_:)(v11);
  v12._countAndFlagsBits = CGRect.debugDescription.getter(v1[1], v1[2], v1[3], v1[4]);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 41;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  return v20;
}

void ContentLoader.convertToUI(_:)(_QWORD *a1@<X0>, double *a2@<X8>)
{
  void *v2;
  void *v3;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  NSObject *v31;
  os_log_type_t v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::String v40;
  void *object;
  Swift::String v42;
  unint64_t v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  os_log_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54[2];
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;

  v3 = v2;
  v5 = *a1;
  v7 = *((double *)a1 + 1);
  v6 = *((double *)a1 + 2);
  v8 = sub_81DE4();
  if (!v8)
  {
LABEL_6:
    v19 = v3;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(32, -1);
      v23 = (_QWORD *)swift_slowAlloc(8, -1);
      v24 = swift_slowAlloc(64, -1);
      v53 = v24;
      *(_DWORD *)v22 = 138412802;
      v50 = (uint64_t)a2;
      v51 = v5;
      v57 = v19;
      v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v22 + 4);
      *v23 = v19;

      *(_WORD *)(v22 + 12) = 2080;
      v57 = (id)sub_33524(0x54747265766E6F63, 0xEF293A5F2849556FLL, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v22 + 14);
      *(_WORD *)(v22 + 22) = 2080;
      v26 = sub_5D6E8(v51, v7, v6);
      v28 = v27;
      v57 = (id)sub_33524(v26, v27, &v53);
      a2 = (double *)v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v22 + 24);
      swift_bridgeObjectRelease(v28);
      _os_log_impl(&dword_0, v20, v21, "%@.%s: Unable to convert %s: missing document base and/or document", (uint8_t *)v22, 0x20u);
      v29 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v23, 1, v29);
      swift_slowDealloc(v23, -1, -1);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {

    }
    goto LABEL_14;
  }
  v9 = v8;
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(&v53, v3, KeyPath);
  swift_release();
  swift_release();
  v11 = v55;
  if (!v55)
  {
    swift_unknownObjectRelease(v9);
    sub_52128((uint64_t)&v53, &qword_3B8990);
    goto LABEL_6;
  }
  v12 = v56;
  v13 = sub_472D0(&v53, v55);
  v14 = *(_QWORD *)(v11 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v14 + 16))(v17, v15);
  sub_52128((uint64_t)&v53, &qword_3B8990);
  sub_1B841C(v12, (uint64_t *)&v57);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v11);
  v18 = (uint64_t)v57;
  if ((id)v5 == v57)
  {
    *(_QWORD *)a2 = v9;
    a2[1] = v7;
    a2[2] = v6;
    return;
  }
  v51 = v5;
  v30 = v3;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter();
  v33 = v32;
  if (os_log_type_enabled(v31, v32))
  {
    v34 = swift_slowAlloc(42, -1);
    v35 = (_QWORD *)swift_slowAlloc(8, -1);
    v50 = swift_slowAlloc(96, -1);
    v57 = (id)v50;
    *(_DWORD *)v34 = 138413058;
    v49 = v31;
    v53 = (uint64_t)v30;
    v48 = v33;
    v36 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v34 + 4);
    *v35 = v30;

    *(_WORD *)(v34 + 12) = 2080;
    v53 = sub_33524(0x54747265766E6F63, 0xEF293A5F2849556FLL, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v34 + 14);
    *(_WORD *)(v34 + 22) = 2080;
    v37 = sub_5D6E8(v51, v7, v6);
    v39 = v38;
    v53 = sub_33524(v37, v38, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v34 + 24);
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v34 + 32) = 2080;
    v53 = 0;
    v54[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease(v54[0]);
    v53 = 0xD000000000000011;
    v54[0] = 0x80000000002C85D0;
    v52 = v18;
    v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v40._object;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(object);
    v42._countAndFlagsBits = 41;
    v42._object = (void *)0xE100000000000000;
    String.append(_:)(v42);
    v43 = v54[0];
    v53 = sub_33524(v53, v54[0], (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v34 + 34);
    swift_bridgeObjectRelease(v43);
    v44 = v49;
    _os_log_impl(&dword_0, v49, (os_log_type_t)v48, "%@.%s: Refusing to convert %s: Does not match document ID: %s", (uint8_t *)v34, 0x2Au);
    v45 = sub_319AC(&qword_3B8A70);
    swift_arrayDestroy(v35, 1, v45);
    swift_slowDealloc(v35, -1, -1);
    v46 = v50;
    swift_arrayDestroy(v50, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

  }
  swift_unknownObjectRelease(v9);
LABEL_14:
  *a2 = 0.0;
  a2[1] = 0.0;
  a2[2] = 0.0;
}

void sub_8100C(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  double (*v17)(uint64_t, uint64_t, __n128);
  id v18;
  __n128 v19;
  double v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  id v27;
  double v28;
  double v29;
  double v30;
  double v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  double aBlock;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v45;
  void (*v46)();
  uint64_t v47;
  char v48[32];

  v11 = swift_allocObject(&unk_37D790, 56);
  *(_QWORD *)(v11 + 16) = a1;
  *(double *)(v11 + 24) = a4;
  *(double *)(v11 + 32) = a5;
  *(_QWORD *)(v11 + 40) = a2;
  *(_QWORD *)(v11 + 48) = a3;
  v12 = (uint64_t *)(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider);
  swift_beginAccess(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider, v48, 0, 0);
  v13 = *v12;
  if (*v12)
  {
    v14 = v12[1];
    ObjectType = swift_getObjectType(v13);
    v16 = a3;
    v17 = *(double (**)(uint64_t, uint64_t, __n128))(v14 + 176);
    v41 = v16;
    sub_899C8(a2, v16);
    v18 = a1;
    v19 = swift_unknownObjectRetain(v13);
    v20 = v17(ObjectType, v14, v19);
    v21 = objc_msgSend(v18, "scrollView", swift_unknownObjectRelease(v13).n128_f64[0]);
    objc_msgSend(v21, "contentSize");
    v23 = v22;
    v25 = v24;

    v26 = (double)sub_15D010();
    v27 = objc_msgSend(v18, "scrollView");
    objc_msgSend(v27, "contentSize");
    v29 = v28;
    v31 = v30;

    v32 = (char *)objc_msgSend(v18, "be_paginationMode");
    if (v32 != (_BYTE *)&dword_0 + 3)
    {
      v32 = (char *)objc_msgSend(v18, "be_paginationMode");
      if (v32)
        v31 = v29;
    }
    if (v31 / v26 < v20 * 0.8)
    {
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v33, v34))
      {
        v35 = swift_slowAlloc(42, -1);
        *(_DWORD *)v35 = 134218752;
        aBlock = v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v43, v35 + 4);
        *(_WORD *)(v35 + 12) = 2048;
        aBlock = v20 * v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v43, v35 + 14);
        *(_WORD *)(v35 + 22) = 2048;
        aBlock = v31 / v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v43, v35 + 24);
        *(_WORD *)(v35 + 32) = 2048;
        aBlock = v20 * 0.8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v43, v35 + 34);
        _os_log_impl(&dword_0, v33, v34, "contentLength is %f but a size more like %f seems more plausible. we compared %f against %f", (uint8_t *)v35, 0x2Au);
        swift_slowDealloc(v35, -1, -1);
      }

      goto LABEL_15;
    }
    if (v23 == 0.0 && v25 == 0.0)
    {
LABEL_15:
      v46 = sub_899B8;
      v47 = v11;
      aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      v43 = 1107296256;
      v44 = sub_525B8;
      v45 = &unk_37D7D0;
      v40 = _Block_copy(&aBlock);
      swift_retain();
      objc_msgSend(v18, "be_doAfterNextPresentationUpdate:", v40, swift_release().n128_f64[0]);
      swift_release();
      _Block_release(v40);
      return;
    }
    if (a2)
    {
      v46 = (void (*)())a2;
      v47 = v41;
      aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      v43 = 1107296256;
      v44 = sub_525B8;
      v45 = &unk_37D7A8;
      v39 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
    }
    else
    {
      v39 = 0;
    }
  }
  else
  {
    sub_899C8(a2, a3);
    v18 = a1;
    v36 = Logger.logObject.getter(v18);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_0, v36, v37, "Unable to get pageLength from layoutProvider -- applyingOffset", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    if (a2)
    {
      v46 = (void (*)())a2;
      v47 = a3;
      aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      v43 = 1107296256;
      v44 = sub_525B8;
      v45 = &unk_37D7F8;
      v39 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
    }
    else
    {
      v39 = 0;
    }
  }
  objc_msgSend(v18, "be_setContentOffset:bypassingJS:completion:", 1, v39, a4, a5, v41);
  _Block_release(v39);
  swift_release();
}

void ContentLoader.takeSnapshot(completion:)(void (*a1)(uint64_t, uint64_t), uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[6];

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v21, v3, KeyPath);
  swift_release();
  swift_release();
  v7 = (id)v21[0];
  if (v21[0])
  {
    v8 = objc_opt_self(WKWebView);
    v9 = swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      v10 = (void *)v9;
      v11 = (_QWORD *)swift_allocObject(&unk_37D058, 40);
      v11[2] = a1;
      v11[3] = a2;
      v11[4] = v3;
      v21[4] = sub_86C0C;
      v21[5] = v11;
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 1107296256;
      v21[2] = sub_8181C;
      v21[3] = &unk_37D070;
      v12 = _Block_copy(v21);
      v7 = v7;
      swift_retain();
      v13 = v3;
      objc_msgSend(v10, "takeSnapshotWithConfiguration:completionHandler:", 0, v12, swift_release().n128_f64[0]);
      _Block_release(v12);

    }
    else
    {
      ObjectType = swift_getObjectType(v7);
      v18 = sub_86B9C();
      v19 = swift_allocError(&type metadata for BookContent.SnapshotError, v18, 0, 0);
      *(_QWORD *)v20 = ObjectType;
      *(_BYTE *)(v20 + 8) = 2;
      a1(v19, 1);
      swift_errorRelease(v19);
    }

  }
  else
  {
    v14 = sub_86B9C();
    v15 = swift_allocError(&type metadata for BookContent.SnapshotError, v14, 0, 0);
    *(_QWORD *)v16 = 3;
    *(_BYTE *)(v16 + 8) = 4;
    a1(v15, 1);
    swift_errorRelease(v15);
  }
}

void sub_816D8(void *a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint8_t *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;

  if (a1)
  {
    v12 = a1;
    a3(a1, 0);

  }
  else
  {
    v5 = a2;
    if (a2)
    {
      swift_errorRetain(a2);
      v6 = v5;
    }
    else
    {
      v7 = Logger.logObject.getter(0);
      v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, (os_log_type_t)v8))
      {
        v9 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_0, v7, (os_log_type_t)v8, "takeSnapshot failed with no image nor error", v9, 2u);
        swift_slowDealloc(v9, -1, -1);
      }

      v10 = sub_86B9C();
      v6 = swift_allocError(&type metadata for BookContent.SnapshotError, v10, 0, 0);
      v5 = v6;
      *(_QWORD *)v11 = 9;
      *(_BYTE *)(v11 + 8) = 4;
    }
    a3((void *)v6, 1);
    swift_errorRelease(v5);
  }
}

void sub_8181C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void ContentLoader.selectText(cfi:completion:)(uint64_t a1, void *a2, void (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD v20[4];
  char v21;

  v5 = v4;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v20, v5, KeyPath);
  swift_release();
  swift_release();
  v11 = (void *)v20[0];
  if (v20[0])
  {
    v12 = objc_opt_self(WKWebView);
    v13 = swift_dynamicCastObjCClass(v11, v12);
    if (v13)
    {
      v14 = v13;
      v15 = (_QWORD *)swift_allocObject(&unk_37D0A8, 56);
      v15[2] = v14;
      v15[3] = a1;
      v15[4] = a2;
      v15[5] = a3;
      v15[6] = a4;
      v16 = v11;
      swift_bridgeObjectRetain(a2);
      swift_retain();
      sub_15CCC8(a1, a2, (uint64_t)sub_86CA8, (uint64_t)v15);

      swift_release();
      return;
    }

  }
  v17 = sub_86C30();
  v18 = swift_allocError(&type metadata for ContentLoader.SelectionError, v17, 0, 0);
  *v19 = 0;
  v20[0] = v18;
  memset(&v20[1], 0, 24);
  v21 = 1;
  a3(v20);
  swift_errorRelease(v18);
}

void sub_81A08(char a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(_QWORD *), uint64_t a6)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD v14[4];
  char v15;

  if ((a1 & 1) != 0)
  {
    v10 = swift_allocObject(&unk_37D768, 32);
    *(_QWORD *)(v10 + 16) = a5;
    *(_QWORD *)(v10 + 24) = a6;
    swift_retain();
    sub_15CE8C(a3, a4, (uint64_t)sub_89978, v10);
    swift_release();
  }
  else
  {
    v11 = sub_86C30();
    v12 = swift_allocError(&type metadata for ContentLoader.SelectionError, v11, 0, 0);
    *v13 = 2;
    v14[0] = v12;
    memset(&v14[1], 0, 24);
    v15 = 1;
    a5(v14);
    swift_errorRelease(v12);
  }
}

void ContentLoader.rects(from:completion:)(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void *v16;

  v5 = v4;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v16, v5, KeyPath);
  swift_release();
  swift_release();
  v11 = v16;
  if (v16)
  {
    v12 = objc_opt_self(WKWebView);
    if (swift_dynamicCastObjCClass(v11, v12))
    {
      sub_15CE8C(a1, a2, (uint64_t)a3, a4);

      return;
    }

  }
  v13 = sub_86C30();
  v14 = swift_allocError(&type metadata for ContentLoader.SelectionError, v13, 0, 0);
  *v15 = 0;
  a3(v14, 1);
  swift_errorRelease(v14);
}

Swift::Void __swiftcall ContentLoader.clearSelection()()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v2 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v6, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v6;
  if (v6)
  {
    v4 = objc_opt_self(WKWebView);
    v5 = (void *)swift_dynamicCastObjCClass(v3, v4);
    if (v5)
      objc_msgSend(v5, "be_clearSelection");

  }
}

void ContentLoader.convertToDocument(contentRect:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v5;
  uint64_t KeyPath;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  CGRect v23;
  CGRect v24;
  CGRect v25;

  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v22, v5, KeyPath);
  swift_release();
  swift_release();
  v12 = v22;
  if (v22)
  {
    v13 = objc_opt_self(WKWebView);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, "be_convertPointFromContentsToView:", a2, a3);
      v17 = v16;
      v19 = v18;
      objc_msgSend(v15, "be_convertPointFromContentsToView:", a2 + a4, a3 + a5);
      v24.size.width = v20 - v17;
      v24.size.height = v21 - v19;
      v24.origin.x = v17;
      v24.origin.y = v19;
      v25 = CGRectStandardize(v24);
      v22 = v15;
      v23 = v25;
      ContentLoader.convertToDocument(_:)((double *)&v22, a1);

      return;
    }

  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 1;
}

uint64_t sub_81DE4()
{
  void *v0;
  uint64_t KeyPath;
  void *v2;
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16[2];

  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v16, v0, KeyPath);
  swift_release();
  swift_release();
  v2 = (void *)v16[0];
  if (v16[0])
  {
    v3 = v16[1];
    ObjectType = swift_getObjectType(v16[0]);
    v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(ObjectType, v3);

  }
  else
  {
    v6 = v0;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = (_QWORD *)swift_slowAlloc(8, -1);
      v11 = swift_slowAlloc(32, -1);
      v15 = (uint64_t)v6;
      v16[0] = v11;
      *(_DWORD *)v9 = 138412546;
      v12 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v9 + 4);
      *v10 = v6;

      *(_WORD *)(v9 + 12) = 2080;
      v15 = sub_33524(0x746E656D75636F64, 0xEC00000065736142, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v9 + 14);
      _os_log_impl(&dword_0, v7, v8, "%@.%s: Unable to determine 'document' coordinate system: missing content view", (uint8_t *)v9, 0x16u);
      v13 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v10, 1, v13);
      swift_slowDealloc(v10, -1, -1);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  return v5;
}

void ContentLoader.convertToDocument(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v2;
  void *v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(void **)a1;
  v6 = *(double *)(a1 + 8);
  v5 = *(double *)(a1 + 16);
  v7 = sub_81DE4();
  if (v7)
  {
    v8 = v7;
    KeyPath = swift_getKeyPath(&unk_2E7CE8);
    swift_getKeyPath(&unk_2E7D10);
    static Published.subscript.getter(v37, v2, KeyPath);
    swift_release();
    swift_release();
    v10 = v38;
    if (v38)
    {
      v11 = v39;
      v12 = sub_472D0(v37, v38);
      v13 = *(_QWORD *)(v10 - 8);
      v14 = __chkstk_darwin(v12);
      v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, __n128))(v13 + 16))(v16, v14);
      sub_52128((uint64_t)v37, &qword_3B8990);
      sub_1B841C(v11, &v40);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v10);
      v17 = v40;
      objc_msgSend(v4, "convertPoint:toCoordinateSpace:", v8, v6, v5);
      v19 = v18;
      v21 = v20;
      swift_unknownObjectRelease(v8);
      *(_QWORD *)a2 = v17;
      *(_QWORD *)(a2 + 8) = v19;
      *(_QWORD *)(a2 + 16) = v21;
      *(_BYTE *)(a2 + 24) = 0;
      return;
    }
    swift_unknownObjectRelease(v8);
    sub_52128((uint64_t)v37, &qword_3B8990);
  }
  v22 = v2;
  swift_unknownObjectRetain_n(v4, 2);
  v23 = v22;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(32, -1);
    v35 = v24;
    v27 = (_QWORD *)swift_slowAlloc(8, -1);
    v36 = swift_slowAlloc(64, -1);
    v37[0] = v36;
    *(_DWORD *)v26 = 138412802;
    v40 = (uint64_t)v23;
    v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 4);
    v29 = v27;
    *v27 = v23;

    *(_WORD *)(v26 + 12) = 2080;
    v40 = sub_33524(0xD000000000000015, 0x80000000002C85B0, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 14);
    *(_WORD *)(v26 + 22) = 2080;
    swift_unknownObjectRetain(v4);
    v31 = sub_5D7E8(v30, v6, v5);
    v33 = v32;
    swift_unknownObjectRelease(v4);
    v40 = sub_33524(v31, v33, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 24);
    swift_unknownObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease(v33);
    v24 = v35;
    _os_log_impl(&dword_0, v35, v25, "%@.%s: Unable to convert %s: missing document base and/or document", (uint8_t *)v26, 0x20u);
    v34 = sub_319AC(&qword_3B8A70);
    swift_arrayDestroy(v29, 1, v34);
    swift_slowDealloc(v29, -1, -1);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    swift_unknownObjectRelease_n(v4, 2);

  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
}

id ContentLoader.peripheralAccessoryView(at:)(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  double v3;
  double v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  _BYTE v16[24];

  v2 = *(void **)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v5 = (uint64_t *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider, v16, 0, 0);
  v6 = *v5;
  if (*v5
    && (v7 = v5[1],
        ObjectType = swift_getObjectType(v6),
        v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v7 + 24),
        v10 = swift_unknownObjectRetain(v6),
        v11 = v9(ObjectType, v7, v10),
        swift_unknownObjectRelease(v6),
        (v11 & 0xFFFFFFFFFFFFFFFELL) == 2))
  {
    v12 = sub_74DFC();
  }
  else
  {
    v12 = sub_74B98();
  }
  v13 = v12;
  objc_msgSend(v2, "convertPoint:toCoordinateSpace:", v12, v3, v4);
  v14 = objc_msgSend(v13, "hitTest:withEvent:", 0);

  return v14;
}

Swift::Void __swiftcall ContentLoader.pauseMediaContent()()
{
  _BYTE *v0;
  uint64_t KeyPath;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _BYTE *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v0[OBJC_IVAR____TtC8BookEPUB13ContentLoader_mediaContentState] = 1;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v15, v0, KeyPath);
  swift_release();
  swift_release();
  v2 = v15;
  if (v15)
  {
    v3 = objc_opt_self(WKWebView);
    v4 = (void *)swift_dynamicCastObjCClass(v2, v3);
    if (v4)
    {
      objc_msgSend(v4, "be_suspendAllMediaPlayback");
      goto LABEL_8;
    }

  }
  v5 = v0;
  v2 = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315394;
    v15 = sub_33524(0xD000000000000013, 0x80000000002C8670, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4);
    *(_WORD *)(v7 + 12) = 2080;
    v9 = swift_getKeyPath(&unk_2E7D30);
    swift_getKeyPath(&unk_2E7D58);
    static Published.subscript.getter(&v15, v5, v9);
    swift_release();
    swift_release();
    v10 = sub_319AC(&qword_3B8A30);
    v11 = String.init<A>(describing:)(&v15, v10);
    v13 = v12;
    v15 = sub_33524(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 14);

    swift_bridgeObjectRelease(v13);
    _os_log_impl(&dword_0, v2, v6, "%s, unsupported content view: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {

  }
LABEL_8:

}

Swift::Void __swiftcall ContentLoader.resumeMediaContent()()
{
  _BYTE *v0;
  uint64_t KeyPath;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  _BYTE *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v0[OBJC_IVAR____TtC8BookEPUB13ContentLoader_mediaContentState] = 2;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v15, v0, KeyPath);
  swift_release();
  swift_release();
  v2 = v15;
  if (v15)
  {
    v3 = objc_opt_self(WKWebView);
    v4 = (void *)swift_dynamicCastObjCClass(v2, v3);
    if (v4)
    {
      objc_msgSend(v4, "be_resumeAllMediaPlayback");
      goto LABEL_8;
    }

  }
  v5 = v0;
  v2 = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315394;
    v15 = sub_33524(0xD000000000000014, 0x80000000002C8690, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4);
    *(_WORD *)(v7 + 12) = 2080;
    v9 = swift_getKeyPath(&unk_2E7D30);
    swift_getKeyPath(&unk_2E7D58);
    static Published.subscript.getter(&v15, v5, v9);
    swift_release();
    swift_release();
    v10 = sub_319AC(&qword_3B8A30);
    v11 = String.init<A>(describing:)(&v15, v10);
    v13 = v12;
    v15 = sub_33524(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 14);

    swift_bridgeObjectRelease(v13);
    _os_log_impl(&dword_0, v2, v6, "%s, unsupported content view: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {

  }
LABEL_8:

}

double ContentLoader.reloadDocument(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v9;
  char *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t ObjectType;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double result;
  char *v43;
  _QWORD *v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];
  char v77[24];

  v9 = &v4[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state];
  swift_beginAccess(&v4[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state], v77, 0, 0);
  if (*v9 - 1 < 2)
  {
    v10 = v4;
    swift_unknownObjectRetain_n(a1, 2);
    v11 = v10;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v72 = a3;
      v15 = swift_slowAlloc(64, -1);
      v76[0] = v15;
      *(_DWORD *)v14 = 136315394;
      v16 = type metadata accessor for UUID(0);
      v17 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
      v20 = v19;
      v75 = sub_33524(v18, v19, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v14 + 4);

      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v14 + 12) = 2080;
      ObjectType = swift_getObjectType(a1);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 184))(ObjectType, a2);
      v24 = v23;
      v75 = sub_33524(v22, v23, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v14 + 14);
      swift_unknownObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v24);
      _os_log_impl(&dword_0, v12, v13, "loaderID:%s requested reloadDocument for #contentConfig: %s, Capturing.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      v25 = v15;
      a3 = v72;
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n(a1, 2);

    }
    v43 = &v11[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates];
    swift_beginAccess(&v11[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates], v76, 33, 0);
    v44 = *(_QWORD **)v43;
    swift_unknownObjectRetain_n(a1, 2);
    swift_retain_n(a4, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
    *(_QWORD *)v43 = v44;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v44 = sub_42E0C(0, v44[2] + 1, 1, v44);
      *(_QWORD *)v43 = v44;
    }
    v47 = v44[2];
    v46 = v44[3];
    if (v47 >= v46 >> 1)
    {
      v44 = sub_42E0C((_QWORD *)(v46 > 1), v47 + 1, 1, v44);
      *(_QWORD *)v43 = v44;
    }
    v44[2] = v47 + 1;
    v48 = &v44[4 * v47];
    v48[4] = a1;
    v48[5] = a2;
    v48[6] = a3;
    v48[7] = a4;
    swift_endAccess(v76);
LABEL_22:
    swift_release();
    *(_QWORD *)&result = swift_unknownObjectRelease(a1).n128_u64[0];
    return result;
  }
  if (*v9)
  {
    v49 = v4;
    swift_unknownObjectRetain_n(a1, 2);
    v50 = v49;
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc(22, -1);
      v73 = a3;
      v54 = swift_slowAlloc(64, -1);
      v76[0] = v54;
      *(_DWORD *)v53 = 136315394;
      v74 = a4;
      v55 = a2;
      v56 = type metadata accessor for UUID(0);
      v57 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v58 = dispatch thunk of CustomStringConvertible.description.getter(v56, v57);
      v60 = v59;
      v75 = sub_33524(v58, v59, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v53 + 4);

      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v53 + 12) = 2080;
      v61 = swift_getObjectType(a1);
      v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 184))(v61, v55);
      v64 = v63;
      v75 = sub_33524(v62, v63, v76);
      a2 = v55;
      a4 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v53 + 14);
      swift_unknownObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v64);
      _os_log_impl(&dword_0, v51, v52, "loaderID:%s requested reloadDocument for #contentConfig: %s, Processing.", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
      v65 = v54;
      a3 = v73;
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n(a1, 2);

    }
    v66 = &v50[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates];
    swift_beginAccess(&v50[OBJC_IVAR____TtC8BookEPUB13ContentLoader_pendingLayoutUpdates], v76, 33, 0);
    v67 = *(_QWORD **)v66;
    swift_unknownObjectRetain_n(a1, 2);
    swift_retain_n(a4, 2);
    v68 = swift_isUniquelyReferenced_nonNull_native(v67);
    *(_QWORD *)v66 = v67;
    if ((v68 & 1) == 0)
    {
      v67 = sub_42E0C(0, v67[2] + 1, 1, v67);
      *(_QWORD *)v66 = v67;
    }
    v70 = v67[2];
    v69 = v67[3];
    if (v70 >= v69 >> 1)
    {
      v67 = sub_42E0C((_QWORD *)(v69 > 1), v70 + 1, 1, v67);
      *(_QWORD *)v66 = v67;
    }
    v67[2] = v70 + 1;
    v71 = &v67[4 * v70];
    v71[4] = a1;
    v71[5] = a2;
    v71[6] = a3;
    v71[7] = a4;
    swift_endAccess(v76);
    sub_7D458(1);
    goto LABEL_22;
  }
  v26 = v4;
  swift_unknownObjectRetain_n(a1, 2);
  v27 = v26;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = a2;
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v76[0] = v32;
    *(_DWORD *)v31 = 136315394;
    v33 = type metadata accessor for UUID(0);
    v34 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
    v37 = v36;
    v75 = sub_33524(v35, v36, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v31 + 4);

    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v31 + 12) = 2080;
    v38 = swift_getObjectType(a1);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 184))(v38, v30);
    v41 = v40;
    v75 = sub_33524(v39, v40, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v31 + 14);
    swift_unknownObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v41);
    _os_log_impl(&dword_0, v28, v29, "loaderID:%s requested reloadDocument for #contentConfig: %s, but we have no document.  Ignoring.", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {
    swift_unknownObjectRelease_n(a1, 2);

  }
  return result;
}

BOOL sub_831D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType;
  uint64_t (*v9)(uint64_t, uint64_t, __n128);
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  CGFloat v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  __n128 v26;
  int v27;
  int v28;
  __n128 v29;
  int v30;
  uint64_t v31;
  char v32;
  double v33;
  __n128 v34;
  uint64_t v35;
  char v36;
  double v37;
  __n128 v38;
  uint64_t v39;
  double v40;
  __n128 v41;
  uint64_t v42;
  double v43;
  __n128 v44;
  uint64_t v45;
  double v46;
  __n128 v47;
  uint64_t v48;
  double v49;
  __n128 v50;
  uint64_t v51;
  double v52;
  double v53;
  uint64_t v55;
  double v56;
  double v57;
  void (*v58)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void (*v59)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  double v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  double v71;
  CGSize v72;
  CGSize v73;

  if (!a1)
    return 1;
  ObjectType = swift_getObjectType(a1);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(a2 + 24);
  v10 = swift_unknownObjectRetain(a1);
  v11 = v9(ObjectType, a2, v10);
  if (v11 != (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4))
    goto LABEL_61;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 120))(ObjectType, a2);
  if (v12 != (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 120))(a3, a4))
    goto LABEL_61;
  v13 = (*(double (**)(uint64_t, uint64_t))(a2 + 48))(ObjectType, a2);
  v15 = v14;
  v73.width = (*(double (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
  v73.height = v16;
  v72.width = v13;
  v72.height = v15;
  if (!CGSizeEqualToSize(v72, v73))
    goto LABEL_61;
  v58 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 160);
  v58(&v67, ObjectType, a2);
  LOWORD(v62) = v67;
  BYTE2(v62) = BYTE2(v67);
  v60 = v68;
  v63 = v68;
  v64 = v69;
  v65 = v70;
  v66 = v71;
  v17 = BookThemeEntity.fontFamily.getter();
  v19 = v18;
  v20 = swift_bridgeObjectRelease(v60);
  v59 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(a4 + 160);
  v59(&v62, a3, a4, v20);
  v61 = v63;
  v21 = BookThemeEntity.fontFamily.getter();
  v23 = v22;
  swift_bridgeObjectRelease(v61);
  if (v17 == v21 && v19 == v23)
  {
    swift_bridgeObjectRelease_n(v19, 2);
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v23, 0);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v23);
    if ((v24 & 1) == 0)
      goto LABEL_61;
  }
  v58(&v67, ObjectType, a2);
  if ((_QWORD)v68)
  {
    v25 = BYTE8(v68) & 1;
    v26 = swift_bridgeObjectRelease(v68);
  }
  else
  {
    v27 = v67;
    v26 = swift_bridgeObjectRelease(0);
    v25 = v27 == 3;
  }
  v59(&v62, a3, a4, v26);
  if (!(_QWORD)v63)
  {
    v30 = v62;
    v29 = swift_bridgeObjectRelease(0);
    if (v25 == (v30 == 3))
      goto LABEL_16;
LABEL_61:
    swift_unknownObjectRelease(a1);
    return 1;
  }
  v28 = BYTE8(v63) & 1;
  v29 = swift_bridgeObjectRelease(v63);
  if (v25 != v28)
    goto LABEL_61;
LABEL_16:
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))v58)(&v67, ObjectType, a2, v29);
  v31 = (char)v67;
  v32 = (_BYTE)v67 != 0;
  if ((_QWORD)v68)
    v32 = BYTE9(v68);
  if ((v32 & 1) != 0)
  {
    if ((_QWORD)v68)
    {
      v33 = *(double *)&v69;
      v34 = swift_bridgeObjectRelease(v68);
    }
    else
    {
      v34 = swift_bridgeObjectRelease(0);
      v33 = dbl_2E8208[v31];
    }
  }
  else
  {
    v34 = swift_bridgeObjectRelease(v68);
    v33 = 0.0;
  }
  v59(&v62, a3, a4, v34);
  v35 = (char)v62;
  v36 = (_BYTE)v62 != 0;
  if ((_QWORD)v63)
    v36 = BYTE9(v63);
  if ((v36 & 1) != 0)
  {
    if ((_QWORD)v63)
    {
      v37 = *(double *)&v64;
      v38 = swift_bridgeObjectRelease(v63);
    }
    else
    {
      v38 = swift_bridgeObjectRelease(0);
      v37 = dbl_2E8208[v35];
    }
  }
  else
  {
    v38 = swift_bridgeObjectRelease(v63);
    v37 = 0.0;
  }
  if (v33 != v37)
    goto LABEL_61;
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))v58)(&v67, ObjectType, a2, v38);
  v39 = v68;
  if ((_QWORD)v68)
  {
    if ((BYTE9(v68) & 1) != 0)
    {
      v40 = *(double *)&v70;
      v41 = swift_bridgeObjectRelease(v68);
      goto LABEL_37;
    }
  }
  else if ((_BYTE)v67)
  {
    v39 = 0;
  }
  v41 = swift_bridgeObjectRelease(v39);
  v40 = 0.0;
LABEL_37:
  v59(&v62, a3, a4, v41);
  v42 = v63;
  if ((_QWORD)v63)
  {
    if ((BYTE9(v63) & 1) != 0)
    {
      v43 = *(double *)&v65;
      v44 = swift_bridgeObjectRelease(v63);
      goto LABEL_43;
    }
  }
  else if ((_BYTE)v62)
  {
    v42 = 0;
  }
  v44 = swift_bridgeObjectRelease(v42);
  v43 = 0.0;
LABEL_43:
  if (v40 != v43)
    goto LABEL_61;
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))v58)(&v67, ObjectType, a2, v44);
  v45 = v68;
  if ((_QWORD)v68)
  {
    if ((BYTE9(v68) & 1) != 0)
    {
      v46 = *((double *)&v69 + 1);
      v47 = swift_bridgeObjectRelease(v68);
      goto LABEL_50;
    }
  }
  else if ((_BYTE)v67)
  {
    v45 = 0;
  }
  v47 = swift_bridgeObjectRelease(v45);
  v46 = 0.0;
LABEL_50:
  v59(&v62, a3, a4, v47);
  v48 = v63;
  if ((_QWORD)v63)
  {
    if ((BYTE9(v63) & 1) != 0)
    {
      v49 = *((double *)&v64 + 1);
      v50 = swift_bridgeObjectRelease(v63);
      goto LABEL_56;
    }
  }
  else if ((_BYTE)v62)
  {
    v48 = 0;
  }
  v50 = swift_bridgeObjectRelease(v48);
  v49 = 0.0;
LABEL_56:
  if (v46 != v49)
    goto LABEL_61;
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))v58)(&v67, ObjectType, a2, v50);
  v51 = v68;
  if (!(_QWORD)v68)
  {
    if ((_BYTE)v67)
      v51 = 0;
    goto LABEL_65;
  }
  if ((BYTE9(v68) & 1) == 0)
  {
LABEL_65:
    swift_bridgeObjectRelease(v51);
    v53 = 0.0;
    goto LABEL_66;
  }
  v52 = v71;
  swift_bridgeObjectRelease(v68);
  v53 = -0.1;
  if (v52 >= -0.1)
    v53 = fmin(v52, 0.1);
LABEL_66:
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v59)(&v62, a3, a4);
  swift_unknownObjectRelease(a1);
  v55 = v63;
  if ((_QWORD)v63)
  {
    if ((BYTE9(v63) & 1) != 0)
    {
      v56 = v66;
      swift_bridgeObjectRelease(v63);
      v57 = -0.1;
      if (v56 >= -0.1)
        v57 = fmin(v56, 0.1);
      return v53 != v57;
    }
  }
  else if ((_BYTE)v62)
  {
    v55 = 0;
  }
  swift_bridgeObjectRelease(v55);
  v57 = 0.0;
  return v53 != v57;
}

uint64_t sub_83784(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *), uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void (*v33)(uint64_t, uint64_t, id, uint64_t, void (*)(unsigned __int8 *), uint64_t);
  id v34;
  _QWORD *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t *);
  uint64_t v54;
  char v55[24];
  __int128 v56;
  uint64_t v57;
  uint64_t v58[3];
  uint64_t v59;
  uint64_t v60;

  v50 = a7;
  v51 = a3;
  v52 = a4;
  v53 = a5;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v18 = (char *)&v49 - v17;
  v19 = (uint64_t)a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost;
  swift_beginAccess((char *)a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost, v55, 0, 0);
  sub_3F238(v19, (uint64_t)&v56, &qword_3B89A0);
  v54 = a6;
  if (v57)
  {
    v49 = a8;
    sub_3F1CC(&v56, (uint64_t)v58);
    v20 = v59;
    v21 = v60;
    sub_472D0(v58, v59);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
    v22 = static UUID.== infix(_:_:)(a2, v18);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    if ((v22 & 1) != 0)
    {
      v23 = swift_allocObject(&unk_37CE78, 24);
      swift_unknownObjectWeakInit(v23 + 16, a1);
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, a2, v12);
      v24 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      v25 = (v14 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
      v26 = (v25 + 39) & 0xFFFFFFFFFFFFFFF8;
      v27 = swift_allocObject(&unk_37D740, v26 + 8);
      *(_QWORD *)(v27 + 16) = v23;
      (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v27 + v24, v18, v12);
      v28 = (_QWORD *)(v27 + v25);
      v30 = v51;
      v29 = v52;
      *v28 = v51;
      v28[1] = v29;
      v31 = v54;
      v28[2] = v53;
      v28[3] = v31;
      v32 = v50;
      *(_QWORD *)(v27 + v26) = v50;
      v33 = *(void (**)(uint64_t, uint64_t, id, uint64_t, void (*)(unsigned __int8 *), uint64_t))&stru_478.sectname[swift_isaMask & *a1];
      swift_retain();
      swift_unknownObjectRetain(v30);
      swift_retain();
      v34 = v32;
      v33(v30, v29, v34, v49, sub_898E4, v27);
      swift_release();
      swift_release();
      return sub_34488(v58);
    }
    sub_34488(v58);
  }
  else
  {
    sub_52128((uint64_t)&v56, &qword_3B89A0);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  v36 = a1;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(22, -1);
    v52 = swift_slowAlloc(64, -1);
    v58[0] = v52;
    *(_DWORD *)v39 = 136446466;
    v40 = ContentLoader.shortDescription.getter();
    v42 = v41;
    *(_QWORD *)&v56 = sub_33524(v40, v41, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 8, v39 + 4);

    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v39 + 12) = 2080;
    v43 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v12, v43);
    v46 = v45;
    *(_QWORD *)&v56 = sub_33524(v44, v45, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 8, v39 + 14);
    v47 = swift_bridgeObjectRelease(v46);
    (*(void (**)(char *, uint64_t, __n128))(v13 + 8))(v15, v12, v47);
    _os_log_impl(&dword_0, v37, v38, "Loader %{public}s ignoring configuration for stale contentViewHost: %s)", (uint8_t *)v39, 0x16u);
    v48 = v52;
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  LOWORD(v58[0]) = 257;
  return v53(v58);
}

void sub_83BDC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t Strong;
  _BYTE *v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _BYTE *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  char v45[24];
  __int128 v46;
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49;
  uint64_t v50;
  char v51[32];

  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v20 = (char *)v41 - v19;
  LODWORD(v42) = *a1;
  LODWORD(v43) = a1[1];
  a2 += 16;
  swift_beginAccess(a2, v51, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v22 = (_BYTE *)Strong;
    v23 = Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost;
    swift_beginAccess(Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost, v45, 0, 0);
    sub_3F238(v23, (uint64_t)&v46, &qword_3B89A0);
    v44 = a7;
    if (v47)
    {
      v41[1] = a8;
      v24 = a6;
      sub_3F1CC(&v46, (uint64_t)v48);
      v26 = v49;
      v25 = v50;
      sub_472D0(v48, v49);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v25);
      LOBYTE(v25) = static UUID.== infix(_:_:)(a3, v20);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
      if ((v25 & 1) != 0)
      {
        WKWebView.updateLineGuideEnabledState(on:)(v22[OBJC_IVAR____TtC8BookEPUB13ContentLoader_lineGuideEnabled]);
        v27 = &v22[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state];
        swift_beginAccess(&v22[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state], &v46, 1, 0);
        __asm { BR              X10 }
      }
      sub_34488(v48);
      a6 = v24;
    }
    else
    {
      sub_52128((uint64_t)&v46, &qword_3B89A0);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a3, v14);
    v28 = v22;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(64, -1);
      v48[0] = v42;
      *(_DWORD *)v31 = 136446466;
      v43 = a6;
      v32 = ContentLoader.shortDescription.getter();
      v34 = v33;
      *(_QWORD *)&v46 = sub_33524(v32, v33, v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8, v31 + 4);

      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v31 + 12) = 2080;
      v35 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v14, v35);
      v38 = v37;
      *(_QWORD *)&v46 = sub_33524(v36, v37, v48);
      a6 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, (char *)&v46 + 8, v31 + 14);
      v39 = swift_bridgeObjectRelease(v38);
      (*(void (**)(char *, uint64_t, __n128))(v15 + 8))(v17, v14, v39);
      _os_log_impl(&dword_0, v29, v30, "Loader %{public}s ignoring load results for stale contentViewHost: %s", (uint8_t *)v31, 0x16u);
      v40 = v42;
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    }
    LOWORD(v48[0]) = 257;
    a6(v48);

  }
}

uint64_t sub_841E4()
{
  return sub_730FC();
}

uint64_t sub_841FC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  v4 = swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(a1, v1, KeyPath);
  swift_release(KeyPath);
  return swift_release(v4);
}

uint64_t sub_84260()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v2 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v4, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  return v4;
}

id sub_842D0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v8;

  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v2 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v8, v0, KeyPath);
  swift_release(KeyPath);
  swift_release(v2);
  v3 = v8;
  if (!v8)
    return 0;
  v4 = objc_opt_self(WKWebView);
  v5 = (void *)swift_dynamicCastObjCClass(v3, v4);
  if (!v5)
  {

    return 0;
  }
  v6 = objc_msgSend(v5, "be_viewForFindUI");

  return v6;
}

uint64_t sub_8438C(uint64_t a1, uint64_t a2)
{
  return sub_843D4(a1, a2, (uint64_t)&OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoadedSubject, (uint64_t *)&unk_3B89F0, &qword_3B6990, (uint64_t)&protocol conformance descriptor for CurrentValueSubject<A, B>);
}

uint64_t sub_843B0(uint64_t a1, uint64_t a2)
{
  return sub_843D4(a1, a2, (uint64_t)&OBJC_IVAR____TtC8BookEPUB13ContentLoader_accessoryViewBoundsChangedSubject, (uint64_t *)&unk_3B8EA0, (unint64_t *)&qword_3B8A10, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
}

uint64_t sub_843D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;

  v9 = sub_319AC(a4);
  v10 = sub_3DCC0(a5, a4, a6);
  return Publisher.eraseToAnyPublisher()(v9, v10);
}

uint64_t (*sub_84448(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t dispatch thunk of ContentLoader.__allocating_init(layoutProvider:contentMediator:paginatingService:stylesheetProvider:contentLoaderViewReusePool:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 960))();
}

void ContentLoader.updateAccessibilityValue(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t KeyPath;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37[16];

  v2 = v1;
  v3 = *(_QWORD *)a1;
  v4 = *(_BYTE *)(a1 + 8);
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v36, v2, KeyPath);
  swift_release();
  swift_release();
  v6 = v36;
  if (v36)
  {
    v7 = objc_opt_self(WKWebView);
    if (swift_dynamicCastObjCClass(v6, v7))
    {
      v36 = v3;
      v37[0] = v4;
      v8 = sub_1B8444();
      v10 = v9;
      v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_axKeyUpdates);
      swift_beginAccess(v11, &v36, 0, 0);
      v12 = *v11;
      if (*(_QWORD *)(*v11 + 16))
      {
        swift_bridgeObjectRetain(*v11);
        v13 = sub_3B8A0(v8, v10);
        if ((v14 & 1) != 0)
        {
          v15 = *(_QWORD *)(v12 + 56) + 16 * v13;
          v16 = *(_QWORD *)v15;
          v17 = *(_BYTE *)(v15 + 8);
          sub_3F1E4(*(_QWORD *)v15, v17);
          swift_bridgeObjectRelease(v10);
          swift_bridgeObjectRelease(v12);
          v34 = v16;
          v35 = v17;
          v32 = v3;
          v33 = v4;
          sub_3F1E4(v16, v17);
          v18 = _s8BookEPUB31ContentLoadingAccessibilityKeysO2eeoiySbAC_ACtFZ_0((uint64_t)&v34, (uint64_t)&v32);
          sub_86CB8(v34, v35);
          sub_86CB8(v16, v17);
          if ((v18 & 1) != 0)
            goto LABEL_15;
          goto LABEL_14;
        }
        swift_bridgeObjectRelease(v10);
        v26 = v12;
      }
      else
      {
        v26 = v10;
      }
      swift_bridgeObjectRelease(v26);
      sub_3F1E4(v3, v4);
      sub_86CD0(0, 255);
      sub_86CD0(v3, v4);
LABEL_14:
      v34 = v3;
      v35 = v4;
      sub_15D89C(&v34);
LABEL_15:
      v34 = v3;
      v35 = v4;
      v27 = sub_1B8444();
      v29 = v28;
      swift_beginAccess(v11, &v34, 33, 0);
      sub_3F1E4(v3, v4);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
      v32 = *v11;
      *v11 = 0x8000000000000000;
      sub_17DA5C(v3, v4, v27, v29, isUniquelyReferenced_nonNull_native);
      v31 = *v11;
      *v11 = v32;
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v31);
      swift_endAccess(&v34);
      goto LABEL_16;
    }

  }
  sub_3F1E4(v3, v4);
  v19 = sub_3F1E4(v3, v4);
  v6 = Logger.logObject.getter(v19);
  v20 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v6, v20))
  {

    sub_86CB8(v3, v4);
    sub_86CB8(v3, v4);
    return;
  }
  v21 = (uint8_t *)swift_slowAlloc(12, -1);
  v22 = swift_slowAlloc(32, -1);
  v34 = v22;
  *(_DWORD *)v21 = 136315138;
  v36 = v3;
  v37[0] = v4;
  v23 = sub_1B8444();
  v25 = v24;
  v36 = sub_33524(v23, v24, &v34);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v21 + 4);
  swift_bridgeObjectRelease(v25);
  sub_86CB8(v3, v4);
  sub_86CB8(v3, v4);
  swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v22, -1, -1);
  swift_slowDealloc(v21, -1, -1);
LABEL_16:

}

Swift::Void __swiftcall ContentLoader.dismissInteractionMenus()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t ObjectType;
  _QWORD v7[2];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v3 = swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v7, v1, KeyPath);
  swift_release(KeyPath);
  swift_release(v3);
  v4 = (void *)v7[0];
  if (v7[0])
  {
    v5 = v7[1];
    ObjectType = swift_getObjectType(v7[0]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 304))(ObjectType, v5);

  }
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_editMenuInteraction), "dismissMenu");
}

void sub_8496C(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  void *v8;
  _QWORD v9[6];

  if (a2)
  {
    v9[4] = a2;
    v9[5] = a3;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_525B8;
    v9[3] = &unk_37D820;
    v8 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(a1, "be_setContentOffset:bypassingJS:completion:", 1, v8, a4, a5);
  _Block_release(v8);
}

void _s8BookEPUB13ContentLoaderC020navigationHandlerWebC22ProcessFailedWithNoURLyySo9WKWebViewCF_0(void *a1)
{
  char *v1;
  char *v2;
  uint64_t KeyPath;
  void *v5;
  id v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  char *v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];
  char v40[24];

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v38, v2, KeyPath);
  swift_release();
  swift_release();
  v5 = (void *)v38;
  if (v38
    && (sub_34450(0, (unint64_t *)&qword_3B8CB0, UIView_ptr),
        v6 = a1,
        v7 = static NSObject.== infix(_:_:)(v6, v5),
        v6,
        v6,
        v5,
        (v7 & 1) != 0))
  {
    v8 = (uint64_t *)&v2[OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider];
    swift_beginAccess(&v2[OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider], v40, 0, 0);
    v10 = *v8;
    if (*v8)
    {
      v11 = v8[1];
      v12 = swift_getKeyPath(&unk_2E7CE8);
      swift_getKeyPath(&unk_2E7D10);
      swift_unknownObjectRetain(v10);
      static Published.subscript.getter(&v36, v2, v12);
      swift_release();
      swift_release();
      if (v37)
      {
        sub_3F1CC(&v36, (uint64_t)&v38);
        v13 = swift_allocObject(&unk_37CE78, 24);
        swift_unknownObjectWeakInit(v13 + 16, v2);
        swift_retain();
        sub_7A95C(v10, v11, v6, &v38, (uint64_t)sub_89708, v13);
        swift_release();
        swift_unknownObjectRelease(v10);
        sub_34488(&v38);
        swift_release();
        return;
      }
      swift_unknownObjectRelease(v10);
      v9 = sub_52128((uint64_t)&v36, &qword_3B8990);
    }
    v19 = Logger.logObject.getter(v9);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v33))
    {
      v21 = swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_0, v19, v33, "Loader does not have a layout provider or document, unable to reload.", (uint8_t *)v21, 2u);
LABEL_15:
      swift_slowDealloc(v21, -1, -1);
    }
  }
  else
  {
    v14 = v2;
    v15 = a1;
    v16 = v14;
    v17 = v15;
    v18 = v16;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(32, -1);
      v34 = (uint64_t *)swift_slowAlloc(8, -1);
      v35 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v36 = v35;
      *(_DWORD *)v21 = 136446722;
      v22 = ContentLoader.shortDescription.getter();
      v24 = v23;
      v38 = sub_33524(v22, v23, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v21 + 4);

      *(_QWORD *)&v25 = swift_bridgeObjectRelease(v24).n128_u64[0];
      *(_WORD *)(v21 + 12) = 2080;
      v26 = objc_msgSend(v17, "be_identifier", v25);
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      v38 = sub_33524(v27, v29, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v21 + 14);

      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v21 + 22) = 2112;
      v30 = swift_getKeyPath(&unk_2E7D30);
      swift_getKeyPath(&unk_2E7D58);
      static Published.subscript.getter(&v38, v18, v30);
      swift_release();
      swift_release();
      v31 = v38;
      if (!v38)
        v38 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v21 + 24);
      *v34 = v31;

      _os_log_impl(&dword_0, v19, v20, "Loader %{public}s request to apply current layout to:%s ≠ content view %@", (uint8_t *)v21, 0x20u);
      v32 = sub_319AC(&qword_3B8A70);
      swift_arrayDestroy(v34, 1, v32);
      swift_slowDealloc(v34, -1, -1);
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      goto LABEL_15;
    }

  }
}

void sub_84F3C(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  void *Strong;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  v2 = *(_BYTE *)(a1 + 1);
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = Logger.logObject.getter(v5);
    if ((v2 & 1) != 0)
    {
      v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(12, -1);
        v9 = swift_slowAlloc(32, -1);
        v18 = v9;
        *(_DWORD *)v8 = 136446210;
        v10 = ContentLoader.shortDescription.getter();
        v12 = v11;
        v17 = sub_33524(v10, v11, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4);

        swift_bridgeObjectRelease(v12);
        v13 = "Loader error #loadingStatus loading:%{public}s";
LABEL_7:
        _os_log_impl(&dword_0, v6, v7, v13, v8, 0xCu);
        swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v9, -1, -1);
        swift_slowDealloc(v8, -1, -1);
LABEL_9:

        return;
      }
    }
    else
    {
      v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(12, -1);
        v9 = swift_slowAlloc(32, -1);
        v18 = v9;
        *(_DWORD *)v8 = 136446210;
        v14 = ContentLoader.shortDescription.getter();
        v16 = v15;
        v17 = sub_33524(v14, v15, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v8 + 4);

        swift_bridgeObjectRelease(v16);
        v13 = "Loader successful #loadingStatus loading:%{public}s";
        goto LABEL_7;
      }
    }

    goto LABEL_9;
  }
}

uint64_t ContentLoader.navigationHandler(_:handleInternalLoadRequest:)(uint64_t a1, uint64_t a2)
{
  return sub_86CE4(a2);
}

void ContentLoader.navigationHandler(_:handleInternalLoadRequestForNewWindow:)(uint64_t a1, uint64_t a2)
{
  sub_86F9C(a2);
}

void ContentLoader.navigationHandler(_:handleExternalLoadRequest:likelyUserInitiated:)(uint64_t a1, uint64_t a2, char a3)
{
  sub_87050(a2, a3);
}

void ContentLoader.navigationHandler(_:handleUserRequestForFrameToLoadExternalURL:completion:)(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t Strong;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  id v14;

  Strong = swift_unknownObjectWeakLoadStrong(v4 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
  if (Strong)
  {
    v14 = (id)Strong;
    v9 = Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler;
    v10 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)(v9 + 8);
      ObjectType = swift_getObjectType(v10);
      (*(void (**)(uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t))(v12 + 32))(a2, a3, a4, ObjectType, v12);

      swift_unknownObjectRelease(v11);
    }
    else
    {
      a3();

    }
  }
}

void ContentLoader.navigationHandler(_:failedToLoad:error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_87268(a2, a3);
}

void ContentLoader.navigationHandlerWebContentLoadFailed(_:reason:)(uint64_t a1, uint64_t a2)
{
  sub_875FC(a2);
}

void sub_85640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t KeyPath;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD v19[3];
  _BYTE v20[24];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + 16;
  swift_beginAccess(v6, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    KeyPath = swift_getKeyPath(&unk_2E7D30);
    swift_getKeyPath(&unk_2E7D58);
    static Published.subscript.getter(v19, v8, KeyPath);
    swift_release();
    swift_release();
    v10 = (void *)v19[0];
    if (v19[0])
    {
      v11 = objc_opt_self(WKWebView);
      v12 = (void *)swift_dynamicCastObjCClass(v10, v11);
      if (v12)
      {
        _s8BookEPUB13ContentLoaderC020navigationHandlerWebC22ProcessFailedWithNoURLyySo9WKWebViewCF_0(v12);

        return;
      }

    }
  }
  swift_beginAccess(v6, v19, 0, 0);
  v13 = swift_unknownObjectWeakLoadStrong(v6);
  if (v13)
  {
    v14 = (void *)v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v13 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_log, v2);

    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_0, v16, v17, "Unable to use contentView as WebView in load failed.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void ContentLoader.navigationHandler(_:didFinishLoadOf:)()
{
  sub_8770C();
}

uint64_t sub_85890(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = a3;
  v14 = a1;
  a5(v12);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Void __swiftcall ContentLoader.navigationHandlerWebContentProcessAttemptingReload(_:)(BENavigationHandler *a1)
{
  uint64_t v1;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_attemptingReload) = 1;
}

uint64_t ContentLoader.description.getter()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  char *v13;
  Swift::String v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  void *object;
  Swift::String v32;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  char v37[24];
  char v38[24];
  objc_super v39;
  __int128 v40;

  v1 = v0;
  *(_QWORD *)&v34 = 0;
  *((_QWORD *)&v34 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(79);
  v40 = v34;
  v39.receiver = v0;
  v39.super_class = (Class)type metadata accessor for ContentLoader(0);
  v2 = objc_msgSendSuper2(&v39, "description");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0xD000000000000016;
  v7._object = (void *)0x80000000002C86B0;
  String.append(_:)(v7);
  v8 = &v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded], v38, 0, 0);
  if (*v8)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (*v8)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x617473202020200ALL;
  v12._object = (void *)0xEC000000203A6574;
  String.append(_:)(v12);
  v13 = &v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state];
  swift_beginAccess(&v1[OBJC_IVAR____TtC8BookEPUB13ContentLoader_state], v37, 0, 0);
  LOBYTE(v34) = *v13;
  _print_unlocked<A, B>(_:_:)(&v34, &v40, &type metadata for ContentLoaderState, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v14._countAndFlagsBits = 0x636F64202020200ALL;
  v14._object = (void *)0xEF203A746E656D75;
  String.append(_:)(v14);
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(&v34, v1, KeyPath);
  swift_release();
  swift_release();
  v16 = v35;
  if (v35)
  {
    v17 = v36;
    v18 = sub_472D0(&v34, v35);
    v19 = *(_QWORD *)(v16 - 8);
    v20 = __chkstk_darwin(v18);
    v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v19 + 16))(v22, v20);
    sub_52128((uint64_t)&v34, &qword_3B8990);
    v23 = ContentLoadingDocument.shortDescription.getter(v16, v17);
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v16);
  }
  else
  {
    sub_52128((uint64_t)&v34, &qword_3B8990);
    v25 = (void *)0xE100000000000000;
    v23 = 45;
  }
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v27._object = (void *)0x80000000002C86D0;
  v27._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v27);
  v28 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(&v34, v1, v28);
  swift_release();
  swift_release();
  v29 = sub_319AC(&qword_3B8A30);
  v30._countAndFlagsBits = String.init<A>(describing:)(&v34, v29);
  object = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(object);
  v32._countAndFlagsBits = 15882;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  return v40;
}

uint64_t sub_85D34(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_14;
  v7 = *(_QWORD *)((char *)&dword_10 + (a3 & 0xFFFFFFFFFFFFF8));
  v8 = 0;
  if (v7)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3);
      }
      else
      {
        v9 = *(_QWORD *)(a3 + 8 * v8 + 32);
        swift_retain(v9);
      }
      v14 = v9;
      v10 = a1(&v14);
      swift_release(v9);
      if (v4 || (v10 & 1) != 0)
        break;
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_14:
        if (a3 < 0)
          v12 = a3;
        else
          v12 = a3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a3);
        v7 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(a3);
        v8 = 0;
        if (!v7)
          return v8;
      }
      else
      {
        ++v8;
        if (v11 == v7)
          return 0;
      }
    }
  }
  return v8;
}

uint64_t sub_85E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC(&qword_3B89A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_85EA0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_85EC4()
{
  uint64_t v0;

  return sub_772A8(v0);
}

const char *sub_85ECC()
{
  return "bounds";
}

id sub_85ED8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = objc_msgSend(*a1, "bounds");
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_85F0C(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setBounds:", *a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_85F24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_85F48()
{
  return dispatch thunk of NSKeyValueObservation.invalidate()();
}

BOOL sub_85F68(_QWORD *a1)
{
  uint64_t v1;

  return sub_C00DC(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_85F84(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = v2;
  v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  v8 = sub_85D34(a1, a2, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  if (v3)
    return v8;
  if ((v10 & 1) == 0)
  {
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_57;
    v10 = *v4;
    if ((unint64_t)*v4 >> 62)
    {
LABEL_58:
      if (v10 < 0)
        v27 = v10;
      else
        v27 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v28 = _CocoaArrayWrapper.endIndex.getter(v27);
      swift_bridgeObjectRelease(v10);
      if (v11 != v28)
        goto LABEL_6;
    }
    else if (v11 != *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8)))
    {
LABEL_6:
      v11 = v8 + 5;
      v31 = a2;
      while (1)
      {
        v12 = v11 - 4;
        v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v13);
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (v12 >= *(_QWORD *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8)))
            goto LABEL_48;
          v14 = *(_QWORD *)(v13 + 8 * v11);
          swift_retain();
        }
        v32 = v14;
        v10 = a1(&v32);
        swift_release();
        if ((v10 & 1) == 0)
          break;
LABEL_32:
        v22 = v11 - 3;
        if (__OFADD__(v12, 1))
          goto LABEL_49;
        v10 = *v4;
        if ((unint64_t)*v4 >> 62)
        {
          if (v10 < 0)
            v24 = *v4;
          else
            v24 = v10 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v4);
          v23 = _CocoaArrayWrapper.endIndex.getter(v24);
          swift_bridgeObjectRelease(v10);
        }
        else
        {
          v23 = *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8));
        }
        ++v11;
        if (v22 == v23)
          return v8;
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1))
          goto LABEL_50;
        goto LABEL_32;
      }
      v10 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, *v4);
        v10 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v12 >= *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8)))
            goto LABEL_54;
          v16 = *(_QWORD *)(v10 + 8 * v11);
          swift_retain();
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v8 >= *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFF8)))
          goto LABEL_52;
        v15 = *(_QWORD *)(v10 + 8 * v8 + 32);
        swift_retain();
        if ((v10 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v10);
      v10 = *v4;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *v4 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_E3A24(v10);
        *v4 = v10;
      }
      *(_QWORD *)((char *)&stru_20.cmd + 8 * v8 + (v10 & 0xFFFFFFFFFFFFFF8)) = v16;
      swift_release();
      specialized Array._endMutation()(v18);
      v10 = *v4;
      v19 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
      *v4 = v10;
      if (!v19 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_E3A24(v10);
        *v4 = v10;
      }
      a2 = v31;
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_55;
      if (v12 >= *(_QWORD *)((char *)&dword_10 + (v10 & 0xFFFFFFFFFFFFFF8)))
        goto LABEL_56;
      *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v11) = v15;
      swift_release();
      v10 = (uint64_t)v4;
      specialized Array._endMutation()(v20);
      goto LABEL_31;
    }
    return v8;
  }
  v25 = *v4;
  if (!((unint64_t)*v4 >> 62))
    return *(_QWORD *)((char *)&dword_10 + (v25 & 0xFFFFFFFFFFFFF8));
  if (v25 < 0)
    v29 = *v4;
  else
    v29 = v25 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  swift_bridgeObjectRelease(v25);
  return v30;
}

char *sub_862E4(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v15;
  _QWORD *v16;
  char *result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v6 = (_QWORD *)*v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11)
      v15 = v7 + v10;
    else
      v15 = v7;
    v6 = sub_42140(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  v16 = &v6[2 * a1 + 4];
  result = (char *)swift_arrayDestroy(v16, v9, &type metadata for String);
  if (!v10)
    goto LABEL_20;
  v18 = v6[2];
  v19 = __OFSUB__(v18, a2);
  v20 = v18 - a2;
  if (v19)
    goto LABEL_26;
  if ((v20 & 0x8000000000000000) == 0)
  {
    result = (char *)(v16 + 2);
    v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20])
      result = (char *)memmove(result, v21, 16 * v20);
    v22 = v6[2];
    v19 = __OFADD__(v22, v10);
    v23 = v22 + v10;
    if (!v19)
    {
      v6[2] = v23;
LABEL_20:
      *v16 = a3;
      v16[1] = a4;
      *v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v24 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

void *sub_86464(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_42140(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[2 * a1 + 4], v7, &type metadata for String);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[2 * a2 + 4];
    if (a1 != a2 || &v4[2 * a1 + 4] >= (_QWORD *)&v16[16 * v15])
      result = memmove(&v4[2 * a1 + 4], v16, 16 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_865CC(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = (_OWORD *)(swift_bridgeObjectRetain(a1) + 56);
  v4 = _swiftEmptyArrayStorage;
  do
  {
    v6 = *((_QWORD *)v3 - 3);
    v14 = v6;
    v7 = *v3;
    v15 = *(v3 - 1);
    v16 = v7;
    swift_unknownObjectRetain(v6);
    ContentLoader.convertToDocument(_:)((double *)&v14, (uint64_t)&v17);
    swift_unknownObjectRelease(v6);
    if ((v20 & 1) == 0)
    {
      v8 = v17;
      v12 = v19;
      v13 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_42500(0, v4[2] + 1, 1, v4);
      v10 = v4[2];
      v9 = v4[3];
      if (v10 >= v9 >> 1)
        v4 = sub_42500((_QWORD *)(v9 > 1), v10 + 1, 1, v4);
      v4[2] = v10 + 1;
      v5 = &v4[5 * v10];
      v5[4] = v8;
      *(_OWORD *)(v5 + 5) = v13;
      *(_OWORD *)(v5 + 7) = v12;
    }
    v3 = (_OWORD *)((char *)v3 + 40);
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(a1);
  return v4;
}

char *sub_86720(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_42500(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[40 * a1 + 32];
    v15 = &v4[40 * a2 + 32];
    if (a1 != a2 || result >= &v15[40 * v14])
      result = (char *)memmove(result, v15, 40 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_86880(uint64_t a1, uint64_t a2)
{
  return sub_88AE4(a1, a2, type metadata accessor for ContentViewHost);
}

double sub_8688C(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  double result;
  _QWORD v22[2];

  sub_76C8C();
  KeyPath = swift_getKeyPath(&unk_2E7D30);
  v6 = swift_getKeyPath(&unk_2E7D58);
  v22[0] = a1;
  v22[1] = a2;
  v7 = a1;
  v8 = v2;
  static Published.subscript.setter(v22, v8, KeyPath, v6);
  sub_76E84();
  v9 = swift_getKeyPath(&unk_2E7D30);
  swift_getKeyPath(&unk_2E7D58);
  static Published.subscript.getter(v22, v8, v9);
  swift_release();
  swift_release();
  v10 = (void *)v22[0];
  if (v22[0])
  {
    v11 = objc_opt_self(WKWebView);
    v12 = (void *)swift_dynamicCastObjCClass(v10, v11);
    if (v12)
    {
      v13 = objc_msgSend(v12, "be_viewForFindUI");

      if (v13)
      {
        v14 = swift_allocObject(&unk_37CE78, 24);
        swift_unknownObjectWeakInit(v14 + 16, v8);
        v22[0] = v13;
        v15 = swift_getKeyPath(&unk_2E7D80);
        v16 = swift_allocObject(&unk_37D948, 32);
        *(_QWORD *)(v16 + 16) = sub_85EC4;
        *(_QWORD *)(v16 + 24) = v14;
        swift_retain_n(v14, 2);
        v17 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(v15, 0, sub_62894, v16, &protocol witness table for NSObject);
        swift_release();
        swift_release();
        v18 = swift_allocObject(&unk_37D970, 24);
        *(_QWORD *)(v18 + 16) = v17;
        v20 = type metadata accessor for AnyCancellable(0, v19);
        swift_allocObject(v20, *(unsigned int *)(v20 + 48));
        v10 = (void *)AnyCancellable.init(_:)(sub_89AB0, v18);
        swift_release_n(v14);

        goto LABEL_7;
      }
    }
    else
    {

    }
    v10 = 0;
  }
LABEL_7:
  *(_QWORD *)&v8[OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentAccessoryBoundsObservation] = v10;
  *(_QWORD *)&result = swift_release().n128_u64[0];
  return result;
}

uint64_t sub_86ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t type metadata accessor for SnapshotContentLoader(uint64_t a1)
{
  return sub_3E7A8(a1, (uint64_t *)&unk_3B8B60, (uint64_t)&nominal type descriptor for SnapshotContentLoader);
}

uint64_t sub_86B00()
{
  return sub_86B2C((void (*)(_QWORD))&_swift_unknownObjectRelease, 40);
}

void sub_86B10(uint64_t a1)
{
  uint64_t *v1;

  sub_7EBD0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_86B1C()
{
  return sub_86B2C((void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_86B2C(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 16));
  a1(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_86B70(uint64_t a1)
{
  uint64_t v1;

  return sub_7F1E8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_86B78()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

unint64_t sub_86B9C()
{
  unint64_t result;

  result = qword_3B8A80;
  if (!qword_3B8A80)
  {
    result = swift_getWitnessTable("9N\t", &type metadata for BookContent.SnapshotError);
    atomic_store(result, (unint64_t *)&qword_3B8A80);
  }
  return result;
}

uint64_t sub_86BE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_86C0C(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_816D8(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_86C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_86C28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_86C30()
{
  unint64_t result;

  result = qword_3B8A88;
  if (!qword_3B8A88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentLoader.SelectionError, &type metadata for ContentLoader.SelectionError);
    atomic_store(result, (unint64_t *)&qword_3B8A88);
  }
  return result;
}

uint64_t sub_86C74()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_86CA8(char a1)
{
  uint64_t v1;

  sub_81A08(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(_QWORD *))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_86CB8(uint64_t result, char a2)
{
  if (a2 == 4 || a2 == 2)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_86CD0(uint64_t result, char a2)
{
  if (a2 != -1)
    return sub_86CB8(result, a2);
  return result;
}

uint64_t sub_86CE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char v20;
  uint64_t Strong;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v4);
  v6 = (char *)&v30[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_2E7CE8);
  swift_getKeyPath(&unk_2E7D10);
  static Published.subscript.getter(v30, v2, KeyPath);
  swift_release();
  swift_release();
  v12 = v31;
  if (v31)
  {
    v29 = a1;
    v13 = v32;
    v14 = sub_472D0(v30, v31);
    v15 = *(_QWORD *)(v12 - 8);
    v16 = __chkstk_darwin(v14);
    v18 = (char *)&v30[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, __n128))(v15 + 16))(v18, v16);
    sub_52128((uint64_t)v30, &qword_3B8990);
    (*(void (**)(uint64_t, uint64_t))(v13 + 72))(v12, v13);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      v19 = v29;
      if ((URL.isEquivalent(to:)(v10) & 1) != 0)
      {
        v20 = 1;
LABEL_12:
        (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
        return v20 & 1;
      }
      Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
      if (Strong)
      {
        v22 = (void *)Strong;
        v23 = Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler;
        v24 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler);
        if (v24)
        {
          v25 = v24;
          v26 = *(_QWORD *)(v23 + 8);
          ObjectType = swift_getObjectType(v24);
          v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 8))(v19, ObjectType, v26);

          swift_unknownObjectRelease(v25);
          goto LABEL_12;
        }

      }
      v20 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    sub_52128((uint64_t)v30, &qword_3B8990);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  }
  sub_52128((uint64_t)v6, (uint64_t *)&unk_3B8C50);
  v20 = 0;
  return v20 & 1;
}

void sub_86F9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  id v9;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
  if (Strong)
  {
    v9 = (id)Strong;
    v4 = Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler;
    v5 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v4 + 8);
      ObjectType = swift_getObjectType(v5);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, ObjectType, v7);

      swift_unknownObjectRelease(v6);
    }
    else
    {

    }
  }
}

void sub_87050(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ObjectType;
  id v11;

  Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
  if (Strong)
  {
    v11 = (id)Strong;
    v6 = Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler;
    v7 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(v6 + 8);
      ObjectType = swift_getObjectType(v7);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 24))(a1, a2 & 1, ObjectType, v9);

      swift_unknownObjectRelease(v8);
    }
    else
    {

    }
  }
}

void sub_87120(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  void (*v13)(uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t);
  id v14;

  v6 = swift_allocObject(&unk_37D628, 24);
  *(_QWORD *)(v6 + 16) = a3;
  Strong = swift_unknownObjectWeakLoadStrong(a2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
  if (Strong)
  {
    v14 = (id)Strong;
    v8 = Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler;
    v9 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_navigationEventHandler);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)(v8 + 8);
      ObjectType = swift_getObjectType(v9);
      v13 = *(void (**)(uint64_t, uint64_t (*)(char), uint64_t, uint64_t, uint64_t))(v11 + 32);
      _Block_copy(a3);
      v13(a1, sub_72450, v6, ObjectType, v11);
      swift_release();

      swift_unknownObjectRelease(v10);
    }
    else
    {
      _Block_copy(a3);
      a3[2](a3, 0);
      swift_release();

    }
  }
  else
  {
    _Block_copy(a3);
    swift_release();
  }
}

void sub_87268(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = sub_319AC((uint64_t *)&unk_3B8C50);
  __chkstk_darwin(v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v10 = (char *)&v37 - v9;
  sub_3F238(a1, (uint64_t)&v37 - v9, (uint64_t *)&unk_3B8C50);
  v11 = v2;
  swift_errorRetain(a2);
  v12 = v11;
  v13 = swift_errorRetain(a2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(32, -1);
    v37 = swift_slowAlloc(96, -1);
    v40 = v37;
    *(_DWORD *)v16 = 136446722;
    v17 = type metadata accessor for UUID(0);
    v18 = sub_34284((unint64_t *)&qword_3B6870, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    v21 = v20;
    v38 = sub_33524(v19, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v16 + 4);

    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v16 + 12) = 2082;
    sub_3F238((uint64_t)v10, (uint64_t)v7, (uint64_t *)&unk_3B8C50);
    v22 = type metadata accessor for URL(0);
    v23 = *(_QWORD *)(v22 - 8);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v22);
    if ((_DWORD)v24 == 1)
    {
      sub_52128((uint64_t)v7, (uint64_t *)&unk_3B8C50);
      v25 = 0;
      v26 = 0;
    }
    else
    {
      v25 = URL.lastPathComponent.getter(v24);
      v26 = v27;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v22);
    }
    v38 = v25;
    v39 = v26;
    v28 = sub_319AC((uint64_t *)&unk_3BBB20);
    v29 = String.init<A>(describing:)(&v38, v28);
    v31 = v30;
    v38 = sub_33524(v29, v30, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v16 + 14);
    swift_bridgeObjectRelease(v31);
    sub_52128((uint64_t)v10, (uint64_t *)&unk_3B8C50);
    *(_WORD *)(v16 + 22) = 2082;
    v38 = a2;
    swift_errorRetain(a2);
    v32 = sub_319AC(&qword_3BE350);
    v33 = String.init<A>(describing:)(&v38, v32);
    v35 = v34;
    v38 = sub_33524(v33, v34, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v16 + 24);
    swift_bridgeObjectRelease(v35);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl(&dword_0, v14, v15, "Loader: %{public}s failedToLoad:%{public}s error:%{public}s", (uint8_t *)v16, 0x20u);
    v36 = v37;
    swift_arrayDestroy(v37, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    sub_52128((uint64_t)v10, (uint64_t *)&unk_3B8C50);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
}

void sub_875FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  void (*v10)(char *, uint64_t, void (*)(), uint64_t, uint64_t, uint64_t);
  char *v11;

  *(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_attemptingReload) = 0;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
  if (Strong)
  {
    v11 = (char *)Strong;
    v4 = swift_allocObject(&unk_37CE78, 24);
    swift_unknownObjectWeakInit(v4 + 16, v1);
    v5 = &v11[OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler];
    v6 = swift_unknownObjectWeakLoadStrong(&v11[OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler]);
    if (v6)
    {
      v7 = v6;
      v8 = *((_QWORD *)v5 + 1);
      ObjectType = swift_getObjectType(v6);
      v10 = *(void (**)(char *, uint64_t, void (*)(), uint64_t, uint64_t, uint64_t))(v8 + 56);
      swift_retain();
      v10(v11, a1, sub_89700, v4, ObjectType, v8);
      swift_release_n(v4);
      swift_unknownObjectRelease(v7);
    }
    else
    {
      swift_release();
    }

  }
}

void sub_8770C()
{
  uint64_t v0;
  uint64_t KeyPath;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_attemptingReload) == 1)
  {
    *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_attemptingReload) = 0;
    KeyPath = swift_getKeyPath(&unk_2E7D30);
    swift_getKeyPath(&unk_2E7D58);
    static Published.subscript.getter(&v5, v0, KeyPath);
    swift_release();
    swift_release();
    v2 = v5;
    if (v5)
    {
      v3 = objc_opt_self(WKWebView);
      v4 = (void *)swift_dynamicCastObjCClass(v2, v3);
      if (v4)
        _s8BookEPUB13ContentLoaderC020navigationHandlerWebC22ProcessFailedWithNoURLyySo9WKWebViewCF_0(v4);

    }
  }
}

unint64_t sub_877C0()
{
  unint64_t result;

  result = qword_3B8A90;
  if (!qword_3B8A90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentLoaderState, &type metadata for ContentLoaderState);
    atomic_store(result, (unint64_t *)&qword_3B8A90);
  }
  return result;
}

unint64_t sub_87808()
{
  unint64_t result;

  result = qword_3B8A98;
  if (!qword_3B8A98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentLoader.SelectionError, &type metadata for ContentLoader.SelectionError);
    atomic_store(result, (unint64_t *)&qword_3B8A98);
  }
  return result;
}

uint64_t sub_8784C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_state);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

uint64_t sub_878A0@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  __int128 *v3;
  __int128 v4;
  _BYTE v6[24];

  v3 = (__int128 *)(*a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return swift_unknownObjectRetain(v4);
}

uint64_t sub_878FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB13ContentLoader__document, &qword_3B89C8);
}

uint64_t sub_87920(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3B89D0, &OBJC_IVAR____TtC8BookEPUB13ContentLoader__document, &qword_3B89C8);
}

uint64_t sub_8794C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_3A204(a1, a2, a3, &OBJC_IVAR____TtC8BookEPUB13ContentLoader__contentView, &qword_3B89D8);
}

uint64_t sub_87970(_BYTE *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_3A270(a1, a2, a3, a4, &qword_3B89E0, &OBJC_IVAR____TtC8BookEPUB13ContentLoader__contentView, &qword_3B89D8);
}

uint64_t sub_8799C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentViewHost;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_3F238(v3, a2, &qword_3B89A0);
}

uint64_t sub_879FC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = (_BYTE *)(*a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded);
  result = swift_beginAccess(v3, v5, 0, 0);
  *a2 = *v3;
  return result;
}

double sub_87A4C(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentLoaded);
  swift_beginAccess(v3, v5, 1, 0);
  *v3 = v2;
  return sub_74EDC();
}

uint64_t sub_87AA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_cancellables);
  swift_beginAccess(v3, v6, 0, 0);
  v4 = *v3;
  *a2 = *v3;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_87AFC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char v6[24];

  v3 = *a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService;
  swift_beginAccess(v3, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_87B54(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_paginatingService;
  swift_beginAccess(v4, v6, 1, 0);
  *(_QWORD *)(v4 + 8) = v3;
  return swift_unknownObjectWeakAssign(v4, v2);
}

uint64_t sub_87BB4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider;
  swift_beginAccess(v3, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  *a2 = result;
  return result;
}

uint64_t sub_87C08(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  v2 = *a1;
  v3 = *a2 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylesheetProvider;
  swift_beginAccess(v3, v5, 1, 0);
  return swift_weakAssign(v3, v2);
}

uint64_t storeEnumTagSinglePayload for ContentLoaderState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_87CA8 + 4 * byte_2E7CD9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_87CDC + 4 * byte_2E7CD4[v4]))();
}

uint64_t sub_87CDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_87CE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x87CECLL);
  return result;
}

uint64_t sub_87CF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x87D00);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_87D04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_87D0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentLoaderState()
{
  return &type metadata for ContentLoaderState;
}

uint64_t destroy for StyleUpdate(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result != 1)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t initializeWithCopy for StyleUpdate(uint64_t a1, uint64_t a2)
{
  void *v4;
  _OWORD *v5;
  uint64_t v6;
  id v7;
  __int128 v8;
  __int128 v9;

  v4 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = (_OWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = v4;
  if (v6 == 1)
  {
    v8 = *(_OWORD *)(a2 + 24);
    *v5 = *(_OWORD *)(a2 + 8);
    v5[1] = v8;
    v9 = *(_OWORD *)(a2 + 56);
    v5[2] = *(_OWORD *)(a2 + 40);
    v5[3] = v9;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
    *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
    *(_QWORD *)(a1 + 16) = v6;
    *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    swift_bridgeObjectRetain(v6);
  }
  return a1;
}

uint64_t assignWithCopy for StyleUpdate(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  v7 = (_OWORD *)(a1 + 8);
  v8 = (__int128 *)(a2 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a2 + 16);
  if (v9 == 1)
  {
    if (v10 == 1)
    {
      v11 = *v8;
      v12 = *(_OWORD *)(a2 + 24);
      v13 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = v13;
      *v7 = v11;
      *(_OWORD *)(a1 + 24) = v12;
    }
    else
    {
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
      *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
      v17 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 16) = v17;
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain(v17);
    }
  }
  else if (v10 == 1)
  {
    sub_87F84(a1 + 8);
    v14 = *(_OWORD *)(a2 + 56);
    v16 = *v8;
    v15 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v14;
    *v7 = v16;
    *(_OWORD *)(a1 + 24) = v15;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
    *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
    v18 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v18;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRelease(v9);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t sub_87F84(uint64_t a1)
{
  destroy for BookThemeEntity(a1);
  return a1;
}

uint64_t assignWithTake for StyleUpdate(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a1 + 16);
  if (v5 != 1)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6 != 1)
    {
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
      *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
      *(_QWORD *)(a1 + 16) = v6;
      swift_bridgeObjectRelease(v5);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      return a1;
    }
    sub_87F84(a1 + 8);
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for StyleUpdate(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for StyleUpdate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for StyleUpdate()
{
  return &type metadata for StyleUpdate;
}

uint64_t destroy for LayoutUpdate(_QWORD *a1)
{
  swift_unknownObjectRelease(*a1);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for LayoutUpdate(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *a2;
  *(_OWORD *)a1 = *a2;
  v4 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_QWORD *)(a1 + 24) = v4;
  swift_unknownObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for LayoutUpdate(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  v8 = a2[2];
  v7 = a2[3];
  v9 = a1[3];
  a1[2] = v8;
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v9);
  return a1;
}

uint64_t assignWithTake for LayoutUpdate(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  __int128 v5;

  swift_unknownObjectRelease(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v5;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for UberScrollContainerView.DocumentDataState(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UberScrollContainerView.DocumentDataState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutUpdate()
{
  return &type metadata for LayoutUpdate;
}

uint64_t sub_882F4()
{
  return type metadata accessor for ContentLoader(0);
}

void sub_882FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[34];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for OSSignposter(319);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      v6 = type metadata accessor for OSSignpostID(319);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        v14[3] = &unk_2E7FB0;
        v14[4] = &unk_2E7FC8;
        v14[5] = &unk_2E7FE0;
        v14[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v14[7] = &unk_2E7FF8;
        sub_3E8E4(319, &qword_3B8AD8, &qword_3B8990);
        if (v9 <= 0x3F)
        {
          v14[8] = *(_QWORD *)(v8 - 8) + 64;
          sub_3E8E4(319, &qword_3B8AE0, &qword_3B8A30);
          if (v11 <= 0x3F)
          {
            v14[9] = *(_QWORD *)(v10 - 8) + 64;
            v14[10] = &unk_2E8010;
            v14[11] = (char *)&value witness table for Builtin.Int64 + 64;
            v14[12] = &unk_2E7FC8;
            v14[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
            v14[14] = &unk_2E8028;
            v14[15] = &unk_2E7FB0;
            v14[16] = &unk_2E7FB0;
            v14[17] = &unk_2E7FB0;
            v14[18] = &unk_2E7FC8;
            v14[19] = (char *)&value witness table for Builtin.NativeObject + 64;
            v14[20] = (char *)&value witness table for Builtin.NativeObject + 64;
            v14[21] = (char *)&value witness table for Builtin.BridgeObject + 64;
            v14[22] = &unk_2E8040;
            v14[23] = &unk_2E8058;
            v14[24] = &unk_2E8040;
            v14[25] = &unk_2E8040;
            v14[26] = (char *)&value witness table for Builtin.BridgeObject + 64;
            v12 = type metadata accessor for Logger(319);
            if (v13 <= 0x3F)
            {
              v14[27] = *(_QWORD *)(v12 - 8) + 64;
              v14[28] = &unk_2E8028;
              v14[29] = &unk_2E7FB0;
              v14[30] = &unk_2E8070;
              v14[31] = &unk_2E7FB0;
              v14[32] = &unk_2E7FB0;
              v14[33] = (char *)&value witness table for Builtin.UnknownObject + 64;
              swift_updateClassMetadata2(a1, 256, 34, v14, a1 + 80);
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for ContentLoader(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for ContentLoader);
}

uint64_t dispatch thunk of ContentLoader.state.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_158.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.ordinal.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1A8.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ContentLoader.currentLayoutProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1A8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of ContentLoader.document.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1A8.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.document.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1A8.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.document.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1A8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.$document.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1F8.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContentLoader.$document.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1F8.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ContentLoader.$document.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1F8.segname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContentLoader.contentView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1F8.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ContentLoader.contentView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_1F8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of ContentLoader.contentView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1F8.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.$contentView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1F8.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.$contentView.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1F8.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.$contentView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1F8.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.contentViewHost.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_1F8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.contentAccessoryView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_298.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of ContentLoader.contentLoaded.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_2E8.segname[(swift_isaMask & *v0) + 16])();
}

uint64_t dispatch thunk of ContentLoader.contentLoaded.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_2E8.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.contentLoaded.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_2E8.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.contentLoadedPublisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_2E8.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.accessoryViewBoundsChangedPublisher.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_2E8.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.cancellables.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_2E8.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.cancellables.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_338.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContentLoader.cancellables.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_338.segname[(swift_isaMask & *v0) - 8])();
}

uint64_t dispatch thunk of ContentLoader.paginatingService.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_338.size + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.paginatingService.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_338.offset + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.paginatingService.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_338.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.stylesheetProvider.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_338.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.stylesheetProvider.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_338.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.stylesheetProvider.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_388.sectname[swift_isaMask & *v0])();
}

uint64_t dispatch thunk of ContentLoader.selection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))&stru_428.segname[(swift_isaMask & *v0) + 8])();
}

uint64_t dispatch thunk of ContentLoader.updateImageFiltering(theme:filterMode:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_428.reloff + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.updateLineGuideEnabledState(on:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_428.flags + (swift_isaMask & *v0)))();
}

uint64_t dispatch thunk of ContentLoader.presentEditMenu(from:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((char *)&stru_428.reserved2 + (swift_isaMask & *v0)))();
}

uint64_t type metadata accessor for ContentLoader.AccessoryPageView()
{
  return objc_opt_self(_TtCC8BookEPUB13ContentLoaderP33_7236986884C30F2C28720AFEABE314A617AccessoryPageView);
}

uint64_t type metadata accessor for ContentLoader.AccessoryScrollView()
{
  return objc_opt_self(_TtCC8BookEPUB13ContentLoaderP33_7236986884C30F2C28720AFEABE314A619AccessoryScrollView);
}

uint64_t sub_8890C()
{
  return type metadata accessor for SnapshotContentLoader(0);
}

uint64_t sub_88914(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 1168);
}

ValueMetadata *type metadata accessor for ContentLoader.SelectionError()
{
  return &type metadata for ContentLoader.SelectionError;
}

ValueMetadata *type metadata accessor for ContentLoader.StylusState()
{
  return &type metadata for ContentLoader.StylusState;
}

uint64_t _s8BookEPUB13ContentLoaderC17MediaContentStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_889BC + 4 * byte_2E7CE3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_889F0 + 4 * byte_2E7CDE[v4]))();
}

uint64_t sub_889F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_889F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x88A00);
  return result;
}

uint64_t sub_88A0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x88A14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_88A18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_88A20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ContentLoader.MediaContentState()
{
  return &type metadata for ContentLoader.MediaContentState;
}

unint64_t sub_88A40()
{
  unint64_t result;

  result = qword_3B8C30;
  if (!qword_3B8C30)
  {
    result = swift_getWitnessTable(&unk_2E8174, &type metadata for ContentLoader.MediaContentState);
    atomic_store(result, (unint64_t *)&qword_3B8C30);
  }
  return result;
}

unint64_t sub_88A88()
{
  unint64_t result;

  result = qword_3B8C38;
  if (!qword_3B8C38)
  {
    result = swift_getWitnessTable(&unk_2E81DC, &type metadata for ContentLoader.StylusState);
    atomic_store(result, (unint64_t *)&qword_3B8C38);
  }
  return result;
}

uint64_t sub_88ACC(uint64_t a1, uint64_t a2)
{
  return sub_88AE4(a1, a2, type metadata accessor for BookmarkPaginationEntity);
}

uint64_t sub_88AD8(uint64_t a1, uint64_t a2)
{
  return sub_88AE4(a1, a2, type metadata accessor for HighlightPaginationEntity);
}

uint64_t sub_88AE4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a3;
    v3 = a2;
    v5 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v23 = v7;
  else
    v23 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v23);
  swift_bridgeObjectRelease(v7);
  if (v9 < v3)
    goto LABEL_34;
LABEL_4:
  v9 = v3 - v5;
  if (__OFSUB__(v3, v5))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = v5 - v3;
  if (__OFSUB__(0, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
    v11 = v10 - v9;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v25 = v7;
    else
      v25 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((char *)&dword_18 + (v7 & 0xFFFFFFFFFFFFFF8)) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((char *)&dword_10 + (v7 & 0xFFFFFFFFFFFFF8));
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = v6(0);
  v16 = (void *)swift_arrayDestroy(v13 + 32 + 8 * v5, v9, v15);
  if (!v8)
    return specialized Array._endMutation()(v16);
  if (!((unint64_t)v7 >> 62))
  {
    v17 = *(_QWORD *)(v13 + 16);
    v18 = v17 - v3;
    if (!__OFSUB__(v17, v3))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v26 = v7;
  else
    v26 = v13;
  swift_bridgeObjectRetain(v7);
  v27 = _CocoaArrayWrapper.endIndex.getter(v26);
  v16 = (void *)swift_bridgeObjectRelease(v7);
  v18 = v27 - v3;
  if (__OFSUB__(v27, v3))
    goto LABEL_52;
LABEL_21:
  if ((v18 & 0x8000000000000000) == 0)
  {
    v19 = (const void *)(v13 + 32 + 8 * v3);
    if (v5 != v3 || v13 + 32 + 8 * v5 >= (unint64_t)v19 + 8 * v18)
      v16 = memmove((void *)(v13 + 32 + 8 * v5), v19, 8 * v18);
    if (!((unint64_t)v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        return specialized Array._endMutation()(v16);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v28 = v7;
    else
      v28 = v13;
    swift_bridgeObjectRetain(v7);
    v29 = _CocoaArrayWrapper.endIndex.getter(v28);
    v16 = (void *)swift_bridgeObjectRelease(v7);
    v21 = v29 + v8;
    if (!__OFADD__(v29, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_88DB4(uint64_t a1, int64_t a2)
{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = *v2;
  v5 = *((_QWORD *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= *((_QWORD *)v4 + 3) >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_42BB8(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = *((_QWORD *)v4 + 2);
  v13 = __OFSUB__(v12, a2);
  v14 = v12 - a2;
  if (v13)
    goto LABEL_27;
  if ((v14 & 0x8000000000000000) == 0)
  {
    result = &v4[72 * a1 + 32];
    v15 = &v4[72 * a2 + 32];
    if (a1 != a2 || result >= &v15[72 * v14])
      result = (char *)memmove(result, v15, 72 * v14);
    v16 = *((_QWORD *)v4 + 2);
    v13 = __OFADD__(v16, v8);
    v17 = v16 + v8;
    if (!v13)
    {
      *((_QWORD *)v4 + 2) = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_88F14()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_88F38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 16) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = v10;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  swift_unknownObjectRelease(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 16, v14);
}

uint64_t sub_89038(uint64_t a1, void (*a2)(__n128), int a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_7AF18(a1, a2, a3, *(char **)(v3 + 16), v3 + v8, *(uint64_t (**)(uint64_t *))(v3 + v9), *(_QWORD *)(v3 + v9 + 8), (char *)(v3 + v11), *(id *)(v3 + v12), *(_QWORD *)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v3 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_89108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v9 + v6 + 8) & ~v9;
  v13 = v10 + *(_QWORD *)(v8 + 64);
  v11 = v3 | v9 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5 + 8));

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v10, v7);
  return swift_deallocObject(v0, v13, v11);
}

uint64_t sub_891F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_7C93C(*(char **)(v0 + 16), v0 + v2, *(uint64_t (**)(_QWORD))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(void **)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), (uint64_t (*)(_QWORD))(v0 + ((v4 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4)));
}

uint64_t sub_8927C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC((uint64_t *)&unk_3B8C50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_892C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_89340()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_7B6B4(*(_QWORD *)(v0 + 16), *(void (**)(__int16 *))(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

double sub_89374(double a1)
{
  return a1 + 3.0;
}

uint64_t sub_89390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 120) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  sub_34488((_QWORD *)(v0 + 48));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 96));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_34488((_QWORD *)(v0 + v6));
  swift_release();
  return swift_deallocObject(v0, ((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t sub_8945C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for UUID(0);
  v19 = v10[2];
  v18 = v10[3];
  v17 = v10[4];
  v16 = v10[5];
  v12 = v10[11];
  v13 = v10[12];
  v14 = (_QWORD *)swift_task_alloc(dword_3B8C84);
  *(_QWORD *)(v11 + 16) = v14;
  *v14 = v11;
  v14[1] = sub_3F0C0;
  return sub_791FC(a1, v19, v18, v17, v16, (uint64_t)(v10 + 6), v12, v13, a9, a10);
}

uint64_t sub_89558(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_434C4(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for HistoryEntity(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

void sub_89700()
{
  uint64_t v0;

  sub_85640(v0);
}

void sub_89708(uint64_t a1)
{
  uint64_t v1;

  sub_84F3C(a1, v1);
}

uint64_t sub_89710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  swift_release();

  sub_34488((_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 40, v5);
}

uint64_t sub_897D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_83784(*(_QWORD **)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(uint64_t (**)(uint64_t *))(v0 + v3 + 16), *(_QWORD *)(v0 + v3 + 24), *(void **)(v0 + ((v3 + 39) & 0xFFFFFFFFFFFFFFF8)), v0 + ((((v3 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_89838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v6 + 24));

  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_898E4(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_83BDC(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(void (**)(_QWORD))(v1 + v5 + 16), *(_QWORD *)(v1 + v5 + 24), *(_QWORD *)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_8994C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_89978(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_15E96C(a1, a2 & 1, *(void (**)(__int128 *))(v2 + 16));
}

uint64_t sub_89984()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_899B8()
{
  uint64_t v0;

  sub_8496C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_899C8(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_899D8()
{
  uint64_t v0;

  swift_release();
  swift_release();
  sub_89A10(*(id *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject(v0, 49, 7);
}

void sub_89A10(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)

}

void sub_89A1C()
{
  uint64_t v0;

  sub_7F42C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

id sub_89A2C(id result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
    return result;
  return result;
}

unint64_t sub_89A38()
{
  unint64_t result;

  result = qword_3B8CB8;
  if (!qword_3B8CB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ViewProxyError, &type metadata for ViewProxyError);
    atomic_store(result, (unint64_t *)&qword_3B8CB8);
  }
  return result;
}

uint64_t sub_89A7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_89AA0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

id RelativeValue<>.converted(to:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  void *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(void **)v2;
  v6 = *(double *)(v2 + 8);
  v7 = *(double *)(v2 + 16);
  v8 = *(double *)(v2 + 24);
  v9 = *(double *)(v2 + 32);
  swift_unknownObjectRetain(a1);
  result = objc_msgSend(v5, "convertRect:toCoordinateSpace:", a1, v6, v7, v8, v9);
  *a2 = a1;
  a2[1] = v11;
  a2[2] = v12;
  a2[3] = v13;
  a2[4] = v14;
  return result;
}

{
  uint64_t v2;
  void *v5;
  double v6;
  double v7;
  id result;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void **)v2;
  v6 = *(double *)(v2 + 8);
  v7 = *(double *)(v2 + 16);
  swift_unknownObjectRetain(a1);
  result = objc_msgSend(v5, "convertPoint:toCoordinateSpace:", a1, v6, v7);
  *a2 = a1;
  a2[1] = v9;
  a2[2] = v10;
  return result;
}

BOOL UICoordinateSpace.contains(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  _BOOL8 v9;
  CGPoint v11;
  CGRect v12;

  v2 = *(void **)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  swift_unknownObjectRetain(v1);
  objc_msgSend(v2, "convertPoint:toCoordinateSpace:", v1, v3, v4);
  v6 = v5;
  v8 = v7;
  objc_msgSend(v1, "bounds");
  v11.x = v6;
  v11.y = v8;
  v9 = CGRectContainsPoint(v12, v11);
  swift_unknownObjectRelease(v1);
  return v9;
}

{
  void *v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  _BOOL8 v15;
  CGRect v17;
  CGRect v18;

  v2 = *(void **)a1;
  v3 = *(double *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v5 = *(double *)(a1 + 24);
  v6 = *(double *)(a1 + 32);
  swift_unknownObjectRetain(v1);
  objc_msgSend(v2, "convertRect:toCoordinateSpace:", v1, v3, v4, v5, v6);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  objc_msgSend(v1, "bounds");
  v18.origin.x = v8;
  v18.origin.y = v10;
  v18.size.width = v12;
  v18.size.height = v14;
  v15 = CGRectContainsRect(v17, v18);
  swift_unknownObjectRelease(v1);
  return v15;
}

id static RelativeValue<>.bounds(of:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  double v4;
  id v5;
  id result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)&v4 = swift_unknownObjectRetain(a1).n128_u64[0];
  result = objc_msgSend(v5, "bounds", v4);
  *a2 = a1;
  a2[1] = v7;
  a2[2] = v8;
  a2[3] = v9;
  a2[4] = v10;
  return result;
}

BOOL RelativeValue<>.contains(_:)(uint64_t a1)
{
  double *v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGPoint v9;
  CGRect v10;

  v2 = v1[1];
  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[4];
  objc_msgSend(*(id *)a1, "convertPoint:toCoordinateSpace:", *(_QWORD *)v1, *(double *)(a1 + 8), *(double *)(a1 + 16));
  v9.x = v6;
  v9.y = v7;
  v10.origin.x = v2;
  v10.origin.y = v3;
  v10.size.width = v4;
  v10.size.height = v5;
  return CGRectContainsPoint(v10, v9);
}

{
  uint64_t v1;

  return *(_QWORD *)v1 == *(_QWORD *)a1 && CGRectContainsPoint(*(CGRect *)(v1 + 8), *(CGPoint *)(a1 + 8));
}

void RelativeValue<>.union(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  v4 = *(void **)a1;
  v5 = *(double *)(a1 + 8);
  v6 = *(double *)(a1 + 16);
  v7 = *(double *)(a1 + 24);
  v8 = *(double *)(a1 + 32);
  v9 = *v2;
  v10 = v2[1];
  v11 = v2[2];
  v12 = v2[3];
  v13 = v2[4];
  swift_unknownObjectRetain(*(_QWORD *)v2);
  objc_msgSend(v4, "convertRect:toCoordinateSpace:", *(_QWORD *)&v9, v5, v6, v7, v8);
  v20.origin.x = v14;
  v20.origin.y = v15;
  v20.size.width = v16;
  v20.size.height = v17;
  v18.origin.x = v10;
  v18.origin.y = v11;
  v18.size.width = v12;
  v18.size.height = v13;
  v19 = CGRectUnion(v18, v20);
  *(double *)a2 = v9;
  *(CGRect *)(a2 + 8) = v19;
}

void RelativeValue<>.intersected(with:)(uint64_t a1@<X0>, CGFloat *a2@<X8>)
{
  double *v2;
  double v4;
  CGFloat v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGRect v17;
  CGRect v18;
  CGRect v19;

  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  objc_msgSend(*(id *)a1, "convertRect:toCoordinateSpace:", *(_QWORD *)v2, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)(a1 + 32));
  v19.origin.x = v9;
  v19.origin.y = v10;
  v19.size.width = v11;
  v19.size.height = v12;
  v17.origin.x = v5;
  v17.origin.y = v6;
  v17.size.width = v7;
  v17.size.height = v8;
  v18 = CGRectIntersection(v17, v19);
  x = v18.origin.x;
  y = v18.origin.y;
  width = v18.size.width;
  height = v18.size.height;
  if (CGRectIsNull(v18))
  {
    v4 = 0.0;
    x = 0.0;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else
  {
    swift_unknownObjectRetain(*(_QWORD *)&v4);
  }
  *a2 = v4;
  a2[1] = x;
  a2[2] = y;
  a2[3] = width;
  a2[4] = height;
}

uint64_t static RelativeValue<>.union<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  __n128 v17;
  _OWORD v19[2];
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = __chkstk_darwin(AssociatedTypeWitness);
  v14 = (char *)v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v12);
  Collection.dropFirst(_:)(1, a2, a3);
  Collection.first.getter(v22, a2, a3);
  v19[0] = v22[0];
  v20[0] = v22[0];
  v20[1] = v22[1];
  v21 = v23;
  v15 = sub_319AC((uint64_t *)&unk_3B8D30);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Collection, &associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  Sequence.reduce<A>(_:_:)(v20, sub_8A0E4, 0, AssociatedTypeWitness, v15, *(_QWORD *)(AssociatedConformanceWitness + 8));
  v17 = swift_unknownObjectRelease(*(_QWORD *)&v19[0]);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v11 + 8))(v14, AssociatedTypeWitness, v17);
}

{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t AssociatedConformanceWitness;
  _BYTE v18[16];
  _OWORD v19[2];
  uint64_t v20;
  char v21;
  _OWORD v22[2];
  uint64_t v23;
  char v24;

  v6 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v9);
  v11 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v12 = __chkstk_darwin(AssociatedTypeWitness);
  v14 = &v18[-v13];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a1, a2, v12);
  Collection.dropFirst(_:)(1, a2, a3);
  Collection.first.getter(v22, a2, a3);
  v19[0] = v22[0];
  v19[1] = v22[1];
  v20 = v23;
  v21 = v24;
  v15 = sub_319AC(&qword_3B9D30);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for Collection, &associated conformance descriptor for Collection.Collection.SubSequence: Collection);
  Sequence.reduce<A>(_:_:)(v19, sub_B08DC, 0, AssociatedTypeWitness, v15, *(_QWORD *)(AssociatedConformanceWitness + 8));
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
}

void sub_8A0E4(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  CGFloat v9;
  CGFloat v10;
  void *v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  v4 = *a1;
  if (*(_QWORD *)a1)
  {
    v6 = *(double *)(a2 + 24);
    v5 = *(double *)(a2 + 32);
    v8 = *(double *)(a2 + 8);
    v7 = *(double *)(a2 + 16);
    v9 = a1[1];
    v10 = a1[2];
    v11 = *(void **)a2;
    v12 = a1[3];
    v13 = a1[4];
    swift_unknownObjectRetain(*(_QWORD *)a1);
    objc_msgSend(v11, "convertRect:toCoordinateSpace:", *(_QWORD *)&v4, v8, v7, v6, v5);
    v20.origin.x = v14;
    v20.origin.y = v15;
    v20.size.width = v16;
    v20.size.height = v17;
    v18.origin.x = v9;
    v18.origin.y = v10;
    v18.size.width = v12;
    v18.size.height = v13;
    v19 = CGRectUnion(v18, v20);
  }
  else
  {
    v19 = *(CGRect *)(a1 + 1);
  }
  *(double *)a3 = v4;
  *(CGRect *)(a3 + 8) = v19;
}

uint64_t RelativeValue<>.baseView.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = objc_opt_self(UIView);
  v3 = swift_dynamicCastObjCClassUnconditional(v1, v2, 0, 0, 0);
  swift_unknownObjectRetain(v1);
  return v3;
}

uint64_t sub_8A220()
{
  unsigned __int8 *v0;
  int v1;
  id v2;
  void *v3;
  id v4;
  uint64_t result;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  id (*v17)(void *);
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  NSString v45;
  void **v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t);
  void *v49;
  id (*v50)(void *);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v1 = *v0;
  if (v1 == 1)
  {
    v2 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
    v50 = sub_57158;
    v51 = 0;
    v46 = _NSConcreteStackBlock;
    v47 = 1107296256;
    v48 = sub_57168;
    v49 = &unk_37DA30;
    v3 = _Block_copy(&v46);
    v4 = objc_msgSend((id)objc_opt_self(UITraitCollection), "traitCollectionWithTraits:", v3);
    _Block_release(v3);
    swift_release(v51);
    result = swift_isEscapingClosureAtFileLocation(0, "", 0, 0, 0, 1);
    if ((result & 1) == 0)
    {
      v6 = objc_msgSend(v2, "resolvedColorWithTraitCollection:", v4);

      Color.init(_:)(v6, v7, v8, v9, v10, v11, v12, v13);
LABEL_6:
      static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterPlusL);
      v31 = v30;
      v32 = objc_allocWithZone((Class)CAFilter);
      v33 = String._bridgeToObjectiveC()();
      objc_msgSend(v32, "initWithType:", v33, swift_bridgeObjectRelease(v31).n128_f64[0]);

      return 2;
    }
    __break(1u);
  }
  else
  {
    v14 = v0[2];
    v16 = *((_QWORD *)v0 + 1);
    v15 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v0 + 2);
    v18 = (void *)*((_QWORD *)v0 + 3);
    v17 = (id (*)(void *))*((_QWORD *)v0 + 4);
    v20 = *((_QWORD *)v0 + 5);
    v19 = *((_QWORD *)v0 + 6);
    v21 = *((_QWORD *)v0 + 7);
    if ((v0[1] & 1) != 0)
    {
      LOBYTE(v46) = *v0;
      BYTE1(v46) = 1;
      BYTE2(v46) = v14;
      v47 = v16;
      v48 = v15;
      v49 = v18;
      v50 = v17;
      v51 = v20;
      v52 = v19;
      v53 = v21;
      swift_bridgeObjectRetain(v16);
      BookThemeEntity.secondaryLabelColor.getter();
      Color.init(_:)(v22, v23, v24, v25, v26, v27, v28, v29);
      swift_bridgeObjectRelease(v16);
      goto LABEL_6;
    }
    LOWORD(v46) = v1;
    BYTE2(v46) = v14;
    v47 = v16;
    v48 = v15;
    v49 = v18;
    v50 = v17;
    v51 = v20;
    v52 = v19;
    v53 = v21;
    swift_bridgeObjectRetain(v16);
    BookThemeEntity.secondaryLabelColor.getter();
    Color.init(_:)(v34, v35, v36, v37, v38, v39, v40, v41);
    swift_bridgeObjectRelease(v16);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kCAFilterPlusD);
    v43 = v42;
    v44 = objc_allocWithZone((Class)CAFilter);
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v44, "initWithType:", v45, swift_bridgeObjectRelease(v43).n128_f64[0], v46, v47, v48, v49, v50, v51, v52, v53);

    return 1;
  }
  return result;
}

uint64_t sub_8A4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_8A4D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_8A4D8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_55F54(v0, qword_3CEFD0);
  sub_555F0(v0, (uint64_t)qword_3CEFD0);
  sub_34450(0, (unint64_t *)&qword_3B80A0, OS_os_log_ptr);
  v1 = OS_os_log.init(subsystem:category:)(0xD000000000000013, 0x80000000002C6E50, 0xD000000000000017, 0x80000000002E83A0);
  return Logger.init(_:)(v1);
}

BOOL static LocationMovement.Direction.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void LocationMovement.Direction.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int ContentScrollSupportScrollOrientation.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL static ContentLoadingResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ContentScrollSupportScrollOrientation.debugDescription.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E6F7A69726F68;
  else
    return 0x6C61636974726576;
}

unint64_t sub_8A648()
{
  unint64_t result;

  result = qword_3B8D40;
  if (!qword_3B8D40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ContentScrollSupportScrollOrientation, &type metadata for ContentScrollSupportScrollOrientation);
    atomic_store(result, (unint64_t *)&qword_3B8D40);
  }
  return result;
}

uint64_t sub_8A68C()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E6F7A69726F68;
  else
    return 0x6C61636974726576;
}

uint64_t getEnumTagSinglePayload for BookThemeVariant(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ContentScrollSupportScrollOrientation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_8A7A8 + 4 * byte_2E82A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_8A7DC + 4 * byte_2E82A0[v4]))();
}

uint64_t sub_8A7DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8A7E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8A7ECLL);
  return result;
}

uint64_t sub_8A7F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8A800);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_8A804(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8A80C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_8A818(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ContentScrollSupportScrollOrientation()
{
  return &type metadata for ContentScrollSupportScrollOrientation;
}

uint64_t dispatch thunk of ContentScrollSupport.orientation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() & 1;
}

uint64_t dispatch thunk of ContentScrollSupport.offset(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t sub_8A87C()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = sub_3D7C4((uint64_t)_swiftEmptyArrayStorage);
  v1 = sub_3D318((uint64_t)_swiftEmptyArrayStorage);
  result = sub_93B5C(v0, v1);
  qword_3CEFE8 = result;
  unk_3CEFF0 = v3;
  qword_3CEFF8 = v4;
  unk_3CF000 = v5;
  return result;
}

unint64_t sub_8A8CC(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  char v15;
  int32x2_t v16;
  float64x2_t v17;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
          break;
      }
    }
LABEL_21:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    v17 = *(float64x2_t *)(*(_QWORD *)(v3 + 56) + 16 * v11);
    result = sub_3B7F8(*(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v11));
    if ((v15 & 1) != 0)
    {
      v16 = vmovn_s64(vceqq_f64(*(float64x2_t *)(*(_QWORD *)(a2 + 56) + 16 * result), v17));
      if ((v16.i32[0] & v16.i32[1] & 1) != 0)
        continue;
    }
    return 0;
  }
  v14 = v12 + 3;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_21;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_8AA4C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  int64x2_t *v19;
  int64x2_t *v20;
  int32x2_t v21;
  void *v22;
  uint64_t Strong;
  void *v24;
  id v25;
  char v26;
  uint64_t v27;
  id v28;
  char v29;
  double v30;
  double v31;
  int64_t v32;
  __int128 v33;
  int64x2_t *v34;
  uint64_t v35;
  double v36[4];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[9];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v32 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
LABEL_8:
      v11 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v10);
      sub_5B6D0(*(_QWORD *)(v3 + 56) + (v10 << 6), (uint64_t)&v37 + 8);
      *(_QWORD *)&v37 = v11;
      goto LABEL_27;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_57;
    }
    if (v12 < v32)
    {
      v13 = *(_QWORD *)(v5 + 8 * v12);
      if (v13)
        goto LABEL_12;
      v14 = v4 + 2;
      ++v4;
      if (v12 + 1 < v32)
      {
        v13 = *(_QWORD *)(v5 + 8 * v14);
        if (v13)
          goto LABEL_15;
        v4 = v12 + 1;
        if (v12 + 2 < v32)
        {
          v13 = *(_QWORD *)(v5 + 8 * (v12 + 2));
          if (v13)
          {
            v12 += 2;
            goto LABEL_12;
          }
          v14 = v12 + 3;
          v4 = v12 + 2;
          if (v12 + 3 < v32)
            break;
        }
      }
    }
LABEL_26:
    v8 = 0;
    v41 = 0;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
LABEL_27:
    sub_5B70C((uint64_t)&v37, (uint64_t)&v42, (uint64_t *)&unk_3B8E10);
    if (!v43[2])
      return 1;
    v15 = v42;
    sub_3F1FC((uint64_t)v43, (uint64_t)&v37);
    v16 = sub_3B7F8(v15);
    if ((v17 & 1) == 0)
      goto LABEL_54;
    sub_5B6D0(*(_QWORD *)(a2 + 56) + (v16 << 6), (uint64_t)&v33);
    if (v33 != v37)
      goto LABEL_53;
    v18 = v34[1].i64[0];
    if (v18 != *(_QWORD *)(v38 + 16))
      goto LABEL_53;
    if (v18 && v34 != (int64x2_t *)v38)
    {
      v19 = v34 + 2;
      v20 = (int64x2_t *)(v38 + 32);
      while (1)
      {
        v21 = vmovn_s64(vceqq_s64(*v19, *v20));
        if ((v21.i32[0] & v21.i32[1] & 1) == 0)
          break;
        ++v19;
        ++v20;
        if (!--v18)
          goto LABEL_36;
      }
LABEL_53:
      sub_5B750((uint64_t)&v33);
LABEL_54:
      sub_5B750((uint64_t)&v37);
      return 0;
    }
LABEL_36:
    v22 = (void *)swift_unknownObjectWeakLoadStrong(&v35);
    Strong = swift_unknownObjectWeakLoadStrong((char *)&v38 + 8);
    v24 = (void *)Strong;
    if (v22)
    {
      if (!Strong)
        goto LABEL_51;
      sub_34450(0, (unint64_t *)&qword_3B8CB0, UIView_ptr);
      v25 = v22;
      v26 = static NSObject.== infix(_:_:)(v25, v24);

      if ((v26 & 1) == 0)
        goto LABEL_53;
    }
    else if (Strong)
    {
      goto LABEL_52;
    }
    v22 = (void *)swift_unknownObjectWeakLoadStrong(v36);
    v27 = swift_unknownObjectWeakLoadStrong(&v39);
    v24 = (void *)v27;
    if (v22)
    {
      if (!v27)
      {
LABEL_51:
        v24 = v22;
LABEL_52:

        goto LABEL_53;
      }
      sub_34450(0, (unint64_t *)&qword_3B8CB0, UIView_ptr);
      v28 = v22;
      v29 = static NSObject.== infix(_:_:)(v28, v24);

      if ((v29 & 1) == 0)
        goto LABEL_53;
    }
    else if (v27)
    {
      goto LABEL_52;
    }
    if (v36[1] != *((double *)&v39 + 1) || v36[2] != *(double *)&v40)
      goto LABEL_53;
    v30 = *((double *)&v40 + 1);
    v31 = v36[3];
    sub_5B750((uint64_t)&v33);
    result = sub_5B750((uint64_t)&v37);
    if (v31 != v30)
      return 0;
  }
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
LABEL_15:
    v12 = v14;
LABEL_12:
    v8 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v12 << 6);
    v4 = v12;
    goto LABEL_8;
  }
  while (1)
  {
    v12 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v12 >= v32)
    {
      v4 = v32 - 1;
      goto LABEL_26;
    }
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v14;
    if (v13)
      goto LABEL_12;
  }
LABEL_57:
  __break(1u);
  return result;
}

void sub_8AE40(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  char v24;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_25;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v12 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_25:
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v11);
    v17 = *v15;
    v16 = v15[1];
    v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v11);
    swift_bridgeObjectRetain(v16);
    v19 = sub_3B828(v18);
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease(v16);
      return;
    }
    v21 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v19);
    v22 = v21[1];
    if (*v21 == v17 && v22 == v16)
    {
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v17, v16, 0);
      swift_bridgeObjectRelease(v16);
      if ((v24 & 1) == 0)
        return;
    }
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
}

uint64_t sub_8B014(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(void))
{
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v14;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v14 = a2;
  sub_93108(a1, a3, 0, isUniquelyReferenced_nonNull_native, &v14, a4, a5);
  v12 = v14;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v5)
    swift_bridgeObjectRelease(v12);
  return v12;
}

uint64_t sub_8B0B0()
{
  uint64_t v0;

  return sub_936F8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_8B0B8(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  char v4;

  v2 = a1[1];
  v3 = a2[1];
  if ((sub_8A8CC(*a1, *a2) & 1) != 0)
    v4 = sub_8A8CC(v2, v3);
  else
    v4 = 0;
  return v4 & 1;
}

double sub_8B100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t Strong;
  double result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  _BYTE v28[24];
  _BYTE v29[24];
  _BYTE v30[24];
  _QWORD v31[3];
  uint64_t v32;
  void *v33;

  v1 = v0;
  v2 = sub_319AC(&qword_3B8E20);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService;
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v9 = Strong;
    v10 = *(_QWORD *)(v6 + 8);
    v11 = v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginationCompleteSubscription;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginationCompleteSubscription, v30, 0, 0);
    sub_93884(v11, (uint64_t)v31);
    v12 = v32;
    sub_52128((uint64_t)v31, (uint64_t *)&unk_3B8E28);
    if (!v12)
    {
      ObjectType = swift_getObjectType(v9);
      (*(void (**)(uint64_t, uint64_t))(v10 + 40))(ObjectType, v10);
      v14 = swift_allocObject(&unk_37DBD8, 24, 7);
      swift_unknownObjectWeakInit(v14 + 16, v1);
      v15 = (_QWORD *)swift_allocObject(&unk_37DC00, 40, 7);
      v15[2] = v14;
      v15[3] = v9;
      v15[4] = v10;
      v16 = sub_3DCC0(&qword_3B8100, &qword_3B8E20, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
      swift_unknownObjectRetain(v9);
      v17 = Publisher<>.sink(receiveValue:)(sub_93900, v15, v2, v16);
      v18 = swift_release(v15);
      v19.n128_f64[0] = (*(double (**)(_BYTE *, uint64_t, __n128))(v3 + 8))(v5, v2, v18);
      v32 = type metadata accessor for AnyCancellable(0, v19);
      v33 = &protocol witness table for AnyCancellable;
      v31[0] = v17;
      swift_beginAccess(v11, v29, 33, 0);
      sub_9390C((uint64_t)v31, v11);
      swift_endAccess(v29);
    }
    v20 = v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_bookPaginationSubscription;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_bookPaginationSubscription, v29, 0, 0);
    sub_93884(v20, (uint64_t)v31);
    if (v32)
    {
      swift_unknownObjectRelease(v9);
      sub_52128((uint64_t)v31, (uint64_t *)&unk_3B8E28);
    }
    else
    {
      sub_52128((uint64_t)v31, (uint64_t *)&unk_3B8E28);
      v21 = swift_allocObject(&unk_37DBD8, 24, 7);
      swift_unknownObjectWeakInit(v21 + 16, v1);
      v22 = swift_getObjectType(v9);
      v31[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v22, v10);
      v23 = swift_allocObject(&unk_37DC28, 32, 7);
      *(_QWORD *)(v23 + 16) = sub_93954;
      *(_QWORD *)(v23 + 24) = v21;
      swift_retain(v21);
      v24 = sub_319AC(&qword_3B8E38);
      v25 = sub_3DCC0(&qword_3B8E40, &qword_3B8E38, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v26 = Publisher<>.sink(receiveValue:)(sub_9395C, v23, v24, v25);
      swift_release(v23);
      v27 = swift_release(v31[0]);
      v32 = type metadata accessor for AnyCancellable(0, v27);
      v33 = &protocol witness table for AnyCancellable;
      v31[0] = v26;
      swift_beginAccess(v20, v28, 33, 0);
      sub_9390C((uint64_t)v31, v20);
      swift_endAccess(v28);
      swift_unknownObjectRelease(v9);
      *(_QWORD *)&result = swift_release(v21).n128_u64[0];
    }
  }
  return result;
}

id sub_8B45C(char a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  char v10;
  char *v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  id v30;
  objc_super v32;

  v10 = a1 & 1;
  v11 = &v5[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService];
  *((_QWORD *)v11 + 1) = 0;
  swift_unknownObjectWeakInit(v11, 0);
  swift_weakInit(&v5[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_layoutController], 0);
  v12 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_viewDocumentMap;
  v13 = (void *)objc_opt_self(NSMapTable);
  v14 = v5;
  *(_QWORD *)&v5[v12] = objc_msgSend(v13, "weakToStrongObjectsMapTable");
  v15 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentViewMap;
  *(_QWORD *)&v14[v15] = objc_msgSend((id)objc_opt_self(NSMapTable), "strongToWeakObjectsMapTable");
  v16 = &v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_scrollDelegate];
  *((_QWORD *)v16 + 1) = 0;
  swift_unknownObjectWeakInit(v16, 0);
  v17 = &v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_locationProvider];
  *((_QWORD *)v17 + 1) = 0;
  swift_unknownObjectWeakInit(v17, 0);
  v18 = &v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  v19 = &v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginationCompleteSubscription];
  *(_OWORD *)v19 = 0u;
  *((_OWORD *)v19 + 1) = 0u;
  *((_QWORD *)v19 + 4) = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentSubscriptions] = &_swiftEmptySetSingleton;
  v20 = &v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_bookPaginationSubscription];
  *(_OWORD *)v20 = 0u;
  *((_OWORD *)v20 + 1) = 0u;
  *((_QWORD *)v20 + 4) = 0;
  v21 = &v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_updateStateCancellable];
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  *((_QWORD *)v21 + 4) = 0;
  v22 = &v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_log];
  if (qword_3B56F0 != -1)
    swift_once(&qword_3B56F0, sub_8A4D8);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_555F0(v23, (uint64_t)qword_3CEFD0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, v24, v23);
  v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation] = v10;
  if (qword_3B56F8 != -1)
    swift_once(&qword_3B56F8, sub_8A87C);
  v25 = qword_3CEFE8;
  v26 = unk_3CEFF0;
  v27 = qword_3CEFF8;
  v28 = unk_3CF000;
  v29 = &v14[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state];
  *(_QWORD *)v29 = qword_3CEFE8;
  *((_QWORD *)v29 + 1) = v26;
  *((_QWORD *)v29 + 2) = v27;
  *((_QWORD *)v29 + 3) = v28;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);

  v32.receiver = v14;
  v32.super_class = (Class)type metadata accessor for UberScrollContainerView(0);
  v30 = objc_msgSendSuper2(&v32, "initWithFrame:", a2, a3, a4, a5);
  objc_msgSend(v30, "setDelegate:", v30);
  objc_msgSend(v30, "setShowsVerticalScrollIndicator:", 0);
  objc_msgSend(v30, "setShowsHorizontalScrollIndicator:", 0);
  objc_msgSend(v30, "setScrollsToTop:", 0);
  objc_msgSend(v30, "setMinimumZoomScale:", 1.0);
  objc_msgSend(v30, "setMaximumZoomScale:", 1.0);
  objc_msgSend(v30, "setDelaysContentTouches:", 0);
  objc_msgSend(v30, "setContentInsetAdjustmentBehavior:", 2);

  return v30;
}

id sub_8B7D8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UberScrollContainerView(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_8B950()
{
  return type metadata accessor for UberScrollContainerView(0);
}

uint64_t type metadata accessor for UberScrollContainerView(uint64_t a1)
{
  uint64_t result;

  result = qword_3B8DE0;
  if (!qword_3B8DE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UberScrollContainerView);
  return result;
}

uint64_t sub_8B994(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  v4[0] = &unk_2E83D8;
  v4[1] = &unk_2E83F0;
  v4[2] = &unk_2E8408;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = &unk_2E83F0;
  v4[6] = &unk_2E83F0;
  v4[7] = &unk_2E8420;
  v4[8] = &unk_2E8438;
  v4[9] = &unk_2E8450;
  v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[11] = &unk_2E8450;
  v4[12] = &unk_2E8450;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[13] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
  return result;
}

id sub_8BA60()
{
  void *v0;

  if ((objc_msgSend(v0, "isTracking") & 1) != 0 || objc_msgSend(v0, "isDecelerating"))
    return &dword_0 + 1;
  else
    return objc_msgSend(v0, "be_isAnimatingScroll");
}

uint64_t sub_8BAB4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation);
}

id sub_8BAC8(char a1, char a2, double a3, double a4)
{
  char *v4;
  uint64_t Strong;
  uint64_t v9;

  if ((a2 & 1) != 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(&v4[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_scrollDelegate]);
    if (Strong)
    {
      *(_BYTE *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_updateLocationOnScroll) = 1;
      *(_BYTE *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_userIsScrolling) = 1;
      if ((*(_QWORD *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_layout) & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        v9 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingLoupeStateController);
        if (*(_BYTE *)(v9 + 192) == 1)
          *(_BYTE *)(v9 + 193) = 1;
      }
      swift_unknownObjectRelease(Strong);
    }
  }
  return objc_msgSend(v4, "setContentOffset:animated:", a1 & 1, a3, a4);
}

void sub_8BB8C(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>)
{
  char *v3;
  double v4;
  double v5;
  char *v6;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  CGFloat v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  CGFloat Width;
  double v54;
  CGFloat Height;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  char v72[24];
  _BYTE v73[40];
  _BYTE v74[24];
  char v75[24];
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  unint64_t v81;
  double v82;
  CGFloat v83;
  char v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int16 v88;
  char v89[32];
  CGPoint v90;
  CGRect v91;
  CGRect v92;

  v6 = v3;
  v10 = swift_allocObject(&unk_37DBB0, 32, 7);
  *(CGFloat *)(v10 + 16) = a2;
  v11 = (double *)(v10 + 16);
  *(CGFloat *)(v10 + 24) = a3;
  v12 = *(_QWORD *)&v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 16];
  v13 = *(_QWORD *)&v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 24];
  v14 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation;
  if (v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation] == 1)
  {
    Strong = swift_weakLoadStrong(&v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_layoutController]);
    if (Strong)
    {
      v16 = Strong;
      swift_beginAccess(Strong + 112, v72, 0, 0);
      v17 = *(_QWORD *)(v16 + 112);
      v18 = *(_QWORD *)(v16 + 120);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      swift_unknownObjectRetain(v17);
      swift_release(v16);
      ObjectType = swift_getObjectType(v17);
      a3 = (*(double (**)(uint64_t, uint64_t))(v18 + 48))(ObjectType, v18);
      swift_unknownObjectRelease(v17);
      a2 = a3 + a2;
    }
    else
    {
      swift_bridgeObjectRetain(v12);
      v21 = swift_bridgeObjectRetain(v13);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl(&dword_0, v22, v23, "UberScrollContainerView unable to access contentLayoutProvider", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      objc_msgSend(v6, "bounds");
      a2 = CGRectGetWidth(v91) + *v11;
    }
    *v11 = a2;
    v20 = *(_QWORD *)(v12 + 16);
    if (!v20)
      goto LABEL_19;
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)&v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 16]);
    swift_bridgeObjectRetain(v13);
    v20 = *(_QWORD *)(v12 + 16);
    if (!v20)
      goto LABEL_19;
  }
  v25 = 0;
  v26 = v12 + 32;
  v27 = (double *)(v12 + 48);
  do
  {
    if (!v6[v14])
    {
      if (*(double *)(v10 + 24) >= *v27)
        goto LABEL_12;
      v28 = v20 - 1;
      --v25;
LABEL_21:
      v33 = v25 & ~(v25 >> 63);
      if (v33 >= v28)
        v34 = v28;
      else
        v34 = v33;
      if (v34 >= v20)
      {
        __break(1u);
      }
      else
      {
        v35 = v26 + 24 * v34;
        v20 = *(_QWORD *)v35;
        v5 = *(double *)(v35 + 8);
        a3 = *(double *)(v35 + 16);
        swift_bridgeObjectRelease(v12);
        if (v34 < *(_QWORD *)(v13 + 16))
        {
          v36 = *(double *)(v13 + 24 * v34 + 40);
          swift_bridgeObjectRelease(v13);
          v37 = &v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService];
          v38 = swift_unknownObjectWeakLoadStrong(&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService]);
          if (!v38
            || (v39 = v38,
                v40 = *((_QWORD *)v37 + 1),
                v41 = swift_getObjectType(v38),
                v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 8))(v41, v40),
                swift_unknownObjectRelease(v39),
                v12 = BookPaginationEntity.document(for:)(v20),
                swift_release(v42),
                !v12))
          {
            v43 = Logger.logObject.getter(v38);
            v44 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v43, v44))
            {
              v45 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v45 = 134217984;
              v76 = v20;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v45 + 4);
              _os_log_impl(&dword_0, v43, v44, "Failed to get paginated document for %ld", v45, 0xCu);
              swift_slowDealloc(v45, -1, -1);
            }
            swift_release(v10);

            goto LABEL_33;
          }
          if ((v6[v14] & 1) != 0)
          {
            v4 = a2 - v5;
            v5 = v5 + v36 - a2;
          }
          else
          {
            swift_beginAccess(v11, v73, 0, 0);
            a3 = *(double *)(v10 + 24) - a3;
            v4 = v5;
          }
          v46 = (uint64_t *)(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
          swift_beginAccess(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, v75, 0, 0);
          v26 = *v46;
          if (!((unint64_t)v26 >> 62))
          {
            v47 = *(_QWORD *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFF8));
            swift_bridgeObjectRetain(v26);
            if (v47)
              goto LABEL_38;
            goto LABEL_64;
          }
LABEL_60:
          if (v26 < 0)
            v66 = v26;
          else
            v66 = v26 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v26);
          if (_CocoaArrayWrapper.endIndex.getter(v66))
          {
LABEL_38:
            if ((v26 & 0xC000000000000001) != 0)
            {
              v48 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
            }
            else
            {
              if (!*(_QWORD *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFF8)))
              {
                __break(1u);
LABEL_73:
                __break(1u);
LABEL_74:
                __break(1u);
                goto LABEL_75;
              }
              v48 = *(_QWORD **)(v26 + 32);
              swift_retain(v48);
            }
            swift_bridgeObjectRelease(v26);
            v49 = v48[4];
            v50 = v48[5];
            v51 = v48[6];
            v52 = v48[7];
            if ((v6[v14] & 1) != 0)
            {
              Width = CGRectGetWidth(*(CGRect *)&v49);
              v54 = CGFloat.floor.getter(v5 / Width);
              if ((~*(_QWORD *)&v54 & 0x7FF0000000000000) == 0)
              {
LABEL_75:
                __break(1u);
                goto LABEL_76;
              }
              if (v54 <= -9.22337204e18)
              {
LABEL_76:
                __break(1u);
                goto LABEL_77;
              }
              v49 = 0x43E0000000000000;
              if (v54 < 9.22337204e18)
                goto LABEL_49;
              __break(1u);
            }
            Height = CGRectGetHeight(*(CGRect *)&v49);
            v54 = CGFloat.floor.getter(a3 / Height);
            if ((~*(_QWORD *)&v54 & 0x7FF0000000000000) == 0)
            {
LABEL_77:
              __break(1u);
              goto LABEL_78;
            }
            if (v54 <= -9.22337204e18)
            {
LABEL_78:
              __break(1u);
              goto LABEL_79;
            }
            if (v54 >= 9.22337204e18)
            {
LABEL_79:
              __break(1u);
              return;
            }
LABEL_49:
            v56 = (uint64_t *)(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
            swift_beginAccess(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v74, 0, 0);
            v57 = *v56 - 1;
            if (!__OFSUB__(*v56, 1))
            {
              v58 = (uint64_t)v54;
              if (v57 >= (uint64_t)v54)
                v57 = (uint64_t)v54;
              v59 = v57 & ~(v57 >> 63);
              if ((v58 & 0x8000000000000000) == 0 && *v56 > v58)
              {
                swift_release(v10);
                swift_release(v48);
LABEL_69:
                swift_release(v12);
                goto LABEL_70;
              }
              v60 = swift_retain(v12);
              v61 = Logger.logObject.getter(v60);
              v62 = static os_log_type_t.error.getter();
              if (!os_log_type_enabled(v61, v62))
              {
                swift_release(v10);
                swift_release_n(v12, 2);
                swift_release(v48);

LABEL_70:
                v73[32] = 0;
                v73[24] = 1;
                v76 = v20;
                v77 = v59;
                v78 = 0u;
                v79 = 0u;
                v80 = 0u;
                v81 = v20;
                v82 = v4;
                v83 = a3;
                v84 = 0;
                v85 = 0u;
                v86 = 0u;
                v87 = 0;
                v88 = 1;
                address(of:)(&v76);
                goto LABEL_34;
              }
              v71 = v59;
              v63 = swift_slowAlloc(42, -1);
              *(_DWORD *)v63 = 134218752;
              v76 = (uint64_t)v54;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v63 + 4);
              *(_WORD *)(v63 + 12) = 2048;
              v76 = *v56;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v63 + 14);
              *(_WORD *)(v63 + 22) = 2048;
              v76 = *(_QWORD *)(v12 + 16);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v63 + 24);
              swift_release(v12);
              *(_WORD *)(v63 + 32) = 2048;
              v76 = v71;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v63 + 34);
              _os_log_impl(&dword_0, v61, v62, "Calculated an estimated page of %ld when we only have %ld pages in %ld. Clamping to %ld", (uint8_t *)v63, 0x2Au);
              v64 = v63;
              v59 = v71;
              swift_slowDealloc(v64, -1, -1);
              swift_release(v10);
              v65 = v48;
LABEL_68:
              swift_release(v65);

              goto LABEL_69;
            }
            goto LABEL_73;
          }
LABEL_64:
          swift_bridgeObjectRelease(v26);
          v67 = (_QWORD *)(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
          swift_beginAccess(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, v74, 0, 0);
          if (!__OFSUB__(*v67, 1))
          {
            v59 = (*v67 - 1) & ~((*v67 - 1) >> 63);
            v61 = Logger.logObject.getter(v68);
            v69 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v61, v69))
            {
              v70 = (uint8_t *)swift_slowAlloc(12, -1);
              *(_DWORD *)v70 = 134217984;
              v76 = v59;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v70 + 4);
              _os_log_impl(&dword_0, v61, v69, "Unable to estimate page - returning : %ld", v70, 0xCu);
              swift_slowDealloc(v70, -1, -1);
            }
            v65 = (_QWORD *)v10;
            goto LABEL_68;
          }
          goto LABEL_74;
        }
      }
      __break(1u);
      goto LABEL_60;
    }
    if (*(v27 - 1) < a2)
    {
      v28 = v20 - 1;
      goto LABEL_21;
    }
LABEL_12:
    ++v25;
    v27 += 3;
  }
  while (v20 != v25);
  v29 = *(_QWORD *)(v13 + 16);
  if (v29)
  {
    v30 = v26 + 24 * v20;
    v4 = *(double *)(v30 - 16);
    a3 = *(double *)(v30 - 8);
    v31 = v13 + 24 * v29;
    v5 = *(double *)(v31 + 16);
    v32 = *(double *)(v31 + 24);
    swift_beginAccess(v11, v89, 0, 0);
    v90.y = *(CGFloat *)(v10 + 24);
    v92.origin.x = v4;
    v92.origin.y = a3;
    v92.size.width = v5;
    v92.size.height = v32;
    v90.x = a2;
    if (CGRectContainsPoint(v92, v90))
    {
      v28 = v20 - 1;
      v20 = *(_QWORD *)(v12 + 16);
      v25 = v28;
      goto LABEL_21;
    }
  }
LABEL_19:
  swift_bridgeObjectRelease(v13);
  sub_8DDF4(v6, v10, v12);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
LABEL_33:
  sub_555CC((uint64_t)&v76);
LABEL_34:
  sub_5B70C((uint64_t)&v76, a1, &qword_3B8DF0);
}

void sub_8C454(_OWORD *a1)
{
  _OWORD v1[5];
  uint64_t v2;
  char v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;

  v9 = 1;
  v8 = 1;
  v1[0] = *a1;
  memset(&v1[1], 0, 64);
  v2 = 0;
  v3 = 1;
  v4 = 0u;
  v5 = 0u;
  v6 = 0;
  v7 = 1;
  sub_8D4C0((uint64_t)v1, 0);
}

void sub_8C4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  char *v44;
  _BYTE v45[24];
  char v46[24];
  _QWORD v47[3];
  uint64_t v48;
  void *v49;

  v5 = v4;
  v10 = sub_319AC(&qword_3C0000);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t *)&v5[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState];
  v14 = *(_QWORD *)&v5[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState];
  if (v14)
  {
    a3 = v13[2];
    a4 = v13[3];
    v15 = v13[1];
    swift_bridgeObjectRetain(*(_QWORD *)&v5[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState]);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    if (a1)
    {
      swift_bridgeObjectRetain(v14);
      v16 = swift_bridgeObjectRetain(a1);
      v17 = sub_8B014(v16, v14, (uint64_t)sub_94028, sub_F2D00, (void (*)(void))sub_EEA1C);
      v44 = v12;
      v18 = v17;
      swift_bridgeObjectRetain(v15);
      v19 = swift_bridgeObjectRetain(a2);
      v20 = sub_8B014(v19, v15, (uint64_t)sub_933D8, sub_F2B44, (void (*)(void))sub_EE748);
      a1 = sub_93B5C(v18, v20);
      a2 = v21;
      v23 = v22;
      v25 = v24;
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v14);
      a3 = v23;
      v12 = v44;
      a4 = v25;
    }
    else
    {
      a1 = v14;
      a2 = v15;
    }
  }
  else
  {
    sub_93838(a1, a2, a3, a4);
  }
  v26 = *v13;
  v27 = v13[1];
  v28 = v13[2];
  v29 = v13[3];
  *v13 = a1;
  v13[1] = a2;
  v13[2] = a3;
  v13[3] = a4;
  sub_939E4(v26, v27, v28, v29);
  if ((objc_msgSend(v5, "isTracking") & 1) != 0
    || (objc_msgSend(v5, "isDecelerating") & 1) != 0
    || objc_msgSend(v5, "be_isAnimatingScroll"))
  {
    v30 = (uint64_t)&v5[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_updateStateCancellable];
    swift_beginAccess(&v5[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_updateStateCancellable], v46, 0, 0);
    sub_93884(v30, (uint64_t)v47);
    v31 = v48;
    sub_52128((uint64_t)v47, (uint64_t *)&unk_3B8E28);
    if (!v31)
    {
      sub_34450(0, &qword_3B8ED0, NSTimer_ptr);
      v32 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
      v33 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v12, 1, 1, v33);
      v34 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v32, NSRunLoopCommonModes, v12, 0.2);

      sub_52128((uint64_t)v12, &qword_3C0000);
      v47[0] = v34;
      v35 = type metadata accessor for NSTimer.TimerPublisher(0);
      v36 = sub_34284(&qword_3B8ED8, (uint64_t (*)(uint64_t))&type metadata accessor for NSTimer.TimerPublisher, (uint64_t)&protocol conformance descriptor for NSTimer.TimerPublisher);
      v37 = ConnectablePublisher.autoconnect()(v35, v36);
      swift_release(v34);
      v47[0] = v37;
      v38 = swift_allocObject(&unk_37DBD8, 24, 7);
      swift_unknownObjectWeakInit(v38 + 16, v5);
      v39 = sub_319AC(&qword_3B8EE0);
      v40 = sub_3DCC0(&qword_3B8EE8, &qword_3B8EE0, (uint64_t)&protocol conformance descriptor for Publishers.Autoconnect<A>);
      v41 = Publisher<>.sink(receiveValue:)(sub_93C40, v38, v39, v40);
      swift_release(v38);
      v42 = swift_release(v47[0]);
      v48 = type metadata accessor for AnyCancellable(0, v42);
      v49 = &protocol witness table for AnyCancellable;
      v47[0] = v41;
      swift_beginAccess(v30, v45, 33, 0);
      sub_9390C((uint64_t)v47, v30);
      swift_endAccess(v45);
    }
  }
  else
  {
    sub_8C944();
  }
}

void sub_8C8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    if ((objc_msgSend(Strong, "isTracking") & 1) == 0
      && (objc_msgSend(v4, "isDecelerating") & 1) == 0
      && (objc_msgSend(v4, "be_isAnimatingScroll") & 1) == 0)
    {
      sub_8C944();
    }

  }
}

void sub_8C944()
{
  char *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  void *v30;
  uint64_t KeyPath;
  char *v32;
  uint64_t Strong;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  uint64_t v37;
  char v38;
  double v39;
  double v40;
  double v41;
  double v42;
  id v43;
  double v44;
  double v45;
  double v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _DWORD *v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  uint64_t v69;
  Swift::String v70;
  void *object;
  Swift::String v72;
  uint64_t v73;
  Swift::String v74;
  void *v75;
  __int128 v76;
  double v77;
  double v78;
  char *v79;
  os_log_type_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  NSObject *log;
  os_log_t loga;
  uint8_t *buf;
  uint8_t *bufa;
  uint8_t *bufb;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD v101[7];
  _OWORD v102[2];
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  double v111;
  double v112;

  *(_QWORD *)&v105 = 0;
  v103 = 0u;
  v104 = 0u;
  v1 = (uint64_t)&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_updateStateCancellable];
  swift_beginAccess(&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_updateStateCancellable], v101, 33, 0);
  sub_9390C((uint64_t)&v103, v1);
  v2 = swift_endAccess(v101);
  v3 = (uint64_t *)&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState];
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState];
  if (!v4
    || (v5 = v3[1],
        v6 = v3[2],
        v7 = v3[3],
        v8 = (uint64_t *)&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state],
        v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 8],
        (sub_8A8CC(*(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState], *(_QWORD *)&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state]) & 1) != 0)&& (v2 = sub_8A8CC(v5, v9), (v2 & 1) != 0))
  {
    v10 = Logger.logObject.getter(v2);
    v11 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v11))
    {
LABEL_31:

      return;
    }
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_0, v10, v11, "Either we have no pending state or our current state and the pending state are the same. No need to update.", v12, 2u);
    v13 = (uint64_t)v12;
LABEL_29:
    swift_slowDealloc(v13, -1, -1);
    goto LABEL_31;
  }
  v14 = *v8;
  buf = (uint8_t *)v8[1];
  v98 = *v8;
  v16 = v8[2];
  v15 = v8[3];
  *v8 = v4;
  v8[1] = v5;
  v8[2] = v6;
  v8[3] = v7;
  swift_bridgeObjectRetain_n(v4, 2);
  swift_bridgeObjectRetain_n(v5, 2);
  swift_bridgeObjectRetain_n(v6, 2);
  swift_bridgeObjectRetain_n(v7, 2);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(buf);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v15);
  sub_93838(v4, v5, v6, v7);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  v92 = v15;
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(buf);
  swift_bridgeObjectRelease(v98);
  v17 = *v3;
  v18 = v3[1];
  v19 = v3[2];
  v20 = v3[3];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  sub_939E4(v17, v18, v19, v20);
  v21 = v7;
  v22 = v8[1];
  v23 = v0;
  v24 = swift_bridgeObjectRetain(v22);
  sub_93A30(v24, (uint64_t)v23, 0.0);
  v26 = v25;
  swift_bridgeObjectRelease(v22);

  objc_msgSend(v23, "contentSize");
  v111 = v27;
  v112 = v28;
  v29 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation;
  if (v23[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation])
    v30 = &unk_2E8550;
  else
    v30 = &unk_2E8530;
  KeyPath = swift_getKeyPath(v30);
  *(double *)&v103 = v26;
  swift_setAtWritableKeyPath(&v111, KeyPath, &v103);
  swift_release(KeyPath);
  v32 = &v23[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_locationProvider];
  Strong = swift_unknownObjectWeakLoadStrong(&v23[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_locationProvider]);
  if (Strong)
  {
    v34 = Strong;
    v35 = *((_QWORD *)v32 + 1);
    ObjectType = swift_getObjectType(Strong);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v35 + 16))(v101, ObjectType, v35);
    swift_unknownObjectRelease(v34);
    v108 = v101[5];
    v109 = v101[6];
    v110[0] = v102[0];
    *(_OWORD *)((char *)v110 + 10) = *(_OWORD *)((char *)v102 + 10);
    v105 = v101[2];
    v106 = v101[3];
    v107 = v101[4];
    v103 = v101[0];
    v104 = v101[1];
    sub_49900((uint64_t)&v103);
    v37 = v103;
    if (!*(_QWORD *)(v8[1] + 16) || (sub_3B7F8(v103), (v38 & 1) == 0))
    {
      swift_bridgeObjectRelease(buf);
      swift_bridgeObjectRelease(v98);
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v6);
      v52 = swift_bridgeObjectRetain(v21);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v53, v54))
      {
        log = v53;
        v55 = swift_slowAlloc(22, -1);
        bufa = (uint8_t *)swift_slowAlloc(32, -1);
        v100 = v37;
        *(_QWORD *)&v101[0] = bufa;
        *(_DWORD *)v55 = 134218242;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v55 + 4);
        *(_WORD *)(v55 + 12) = 2080;
        type metadata accessor for CGSize(0);
        v57 = v56;
        v58 = swift_bridgeObjectRetain(v5);
        v59 = Dictionary.Keys.description.getter(v58, &type metadata for Int, v57, &protocol witness table for Int);
        v61 = v60;
        swift_bridgeObjectRelease(v5);
        v100 = sub_33524(v59, v61, (uint64_t *)v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v55 + 14);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease_n(v6, 2);
        swift_bridgeObjectRelease_n(v5, 2);
        swift_bridgeObjectRelease_n(v4, 2);
        swift_bridgeObjectRelease(v61);
        swift_bridgeObjectRelease(v21);
        swift_arrayDestroy(bufa, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(bufa, -1, -1);
        swift_slowDealloc(v55, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n(v21, 2);
        swift_bridgeObjectRelease_n(v6, 2);
        swift_bridgeObjectRelease_n(v5, 2);
        swift_bridgeObjectRelease_n(v4, 2);

      }
      v77 = v111;
      v78 = v112;
      v79 = v23;
      v10 = Logger.logObject.getter(v79);
      v80 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v10, v80))
      {

        goto LABEL_31;
      }
      v81 = swift_slowAlloc(22, -1);
      v82 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v101[0] = v82;
      *(_DWORD *)v81 = 136315394;
      v83 = CGSize.debugDescription.getter(v77, v78);
      v85 = v84;
      v100 = sub_33524(v83, v84, (uint64_t *)v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v81 + 4);
      *(_QWORD *)&v86 = swift_bridgeObjectRelease(v85).n128_u64[0];
      *(_WORD *)(v81 + 12) = 2080;
      objc_msgSend(v79, "contentSize", v86);
      v89 = CGSize.debugDescription.getter(v87, v88);
      v91 = v90;
      v100 = sub_33524(v89, v90, (uint64_t *)v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v81 + 14);

      swift_bridgeObjectRelease(v91);
      swift_arrayDestroy(v82, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v82, -1, -1);
      v13 = v81;
      goto LABEL_29;
    }
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    objc_msgSend(v23, "contentOffset", swift_bridgeObjectRelease(v4).n128_f64[0]);
    v40 = v39;
    v42 = v41;
    v43 = objc_msgSend(v23, "contentSize");
    if (v23[v29])
      v46 = v44;
    else
      v46 = v45;
    if (v46 != v26)
    {
      v47 = Logger.logObject.getter(v43);
      v48 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = swift_slowAlloc(22, -1);
        *(_DWORD *)v49 = 134218240;
        *(double *)v101 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v101, (char *)v101 + 8, v49 + 4);
        *(_WORD *)(v49 + 12) = 2048;
        *(double *)v101 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v101, (char *)v101 + 8, v49 + 14);
        _os_log_impl(&dword_0, v47, v48, "changing size of uberscroll from %f to %f", (uint8_t *)v49, 0x16u);
        swift_slowDealloc(v49, -1, -1);
      }

      objc_msgSend(v23, "setContentSize:", v111, v112);
    }
    v50 = swift_unknownObjectWeakLoadStrong(&v23[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_scrollDelegate]);
    if (v50)
    {
      v51 = v50;
      sub_13D894(v23, v98, v40, v42);
      swift_bridgeObjectRelease(buf);
      swift_bridgeObjectRelease(v98);
      swift_unknownObjectRelease(v51);
    }
    else
    {
      swift_bridgeObjectRelease(buf);
      swift_bridgeObjectRelease(v98);
    }
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    swift_bridgeObjectRelease(v92);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(buf);
    swift_bridgeObjectRelease(v98);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    v62 = swift_bridgeObjectRetain(v21);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (_DWORD *)swift_slowAlloc(12, -1);
      v99 = swift_slowAlloc(32, -1);
      bufb = (uint8_t *)v65;
      *v65 = 136315138;
      *(_QWORD *)&v101[0] = v99;
      loga = (os_log_t)(v65 + 1);
      *(_QWORD *)&v103 = 0;
      *((_QWORD *)&v103 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v21);
      _StringGuts.grow(_:)(66);
      v66._countAndFlagsBits = 60;
      v66._object = (void *)0xE100000000000000;
      String.append(_:)(v66);
      v67._object = (void *)0x80000000002E8450;
      v67._countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v67);
      v68._countAndFlagsBits = 0xD00000000000001ELL;
      v68._object = (void *)0x80000000002C8E90;
      String.append(_:)(v68);
      swift_bridgeObjectRetain(v6);
      v69 = sub_319AC(&qword_3B8DF8);
      v70._countAndFlagsBits = Array.description.getter(v6, v69);
      object = v70._object;
      String.append(_:)(v70);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(object);
      v72._countAndFlagsBits = 0xD00000000000001DLL;
      v72._object = (void *)0x80000000002C8EB0;
      String.append(_:)(v72);
      swift_bridgeObjectRetain(v21);
      v73 = sub_319AC(&qword_3B8E00);
      v74._countAndFlagsBits = Array.description.getter(v21, v73);
      v75 = v74._object;
      String.append(_:)(v74);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v75);
      v76 = v103;
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)&v103 = sub_33524(v76, *((unint64_t *)&v76 + 1), (uint64_t *)v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, (char *)&v103 + 8, loga);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease_n(v5, 2);
      swift_bridgeObjectRelease_n(v4, 2);
      swift_bridgeObjectRelease(*((_QWORD *)&v76 + 1));
      swift_bridgeObjectRelease(v21);
      swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(bufb, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v21, 2);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease_n(v5, 2);
      swift_bridgeObjectRelease_n(v4, 2);
    }

  }
}

void sub_8D4C0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  char v9;
  double v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  char *v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double MinX;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  const char *v43;
  double MaxX;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  double MinY;
  uint64_t v62;
  _BYTE v63[16];
  uint64_t v64;
  _BYTE v65[16];
  uint64_t v66;
  _BYTE v67[16];
  double v68;
  double v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;

  v3 = v2;
  v6 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v7 = *(double *)(a1 + 72);
  v8 = *(double *)(a1 + 80);
  v9 = *(_BYTE *)(a1 + 88);
  v11 = *(double *)(a1 + 104);
  v10 = *(double *)(a1 + 112);
  v12 = *(double *)(a1 + 120);
  v13 = *(double *)(a1 + 128);
  v14 = *(_BYTE *)(a1 + 136);
  if (a2)
  {
    v15 = a2;
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_17;
  }
  else
  {
    v15 = *(_QWORD *)&v2[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state];
    swift_bridgeObjectRetain(*(_QWORD *)&v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state]);
    if (!*(_QWORD *)(v15 + 16))
    {
LABEL_17:
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRelease(v15);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v40, v41))
      {
LABEL_20:

        return;
      }
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v42 = 134217984;
      v66 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 4);
      v43 = "Unable to find starting offset for ordinal %ld";
LABEL_19:
      _os_log_impl(&dword_0, v40, v41, v43, v42, 0xCu);
      swift_slowDealloc(v42, -1, -1);
      goto LABEL_20;
    }
  }
  v16 = sub_3B7F8(v6);
  if ((v17 & 1) == 0)
    goto LABEL_17;
  v18 = (double *)(*(_QWORD *)(v15 + 56) + 16 * v16);
  v20 = *v18;
  v19 = v18[1];
  swift_bridgeObjectRetain(a2);
  *(_QWORD *)&v22 = swift_bridgeObjectRelease(v15).n128_u64[0];
  v68 = v20;
  v69 = v19;
  if ((v14 & 1) == 0)
  {
    if (v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation] == 1)
    {
      v70.origin.x = v11;
      v70.origin.y = v10;
      v70.size.width = v12;
      v70.size.height = v13;
      MaxX = CGRectGetMaxX(v70);
      objc_msgSend(v3, "frame");
      v20 = v20 + MaxX - CGRectGetWidth(v71);
      v68 = v20;
    }
    else
    {
      v19 = v10 + v19;
      v69 = v19;
    }
    v45 = Logger.logObject.getter(v21);
    v46 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v45, v46))
      goto LABEL_34;
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v66 = v48;
    *(_DWORD *)v47 = 136315138;
    v49 = CGPoint.debugDescription.getter(v20, v19);
    v51 = v50;
    v64 = sub_33524(v49, v50, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v47 + 4);
    swift_bridgeObjectRelease(v51);
    v52 = "Contained requested offset -- utilizing that to scroll to %s";
    goto LABEL_33;
  }
  if ((v9 & 1) == 0)
  {
    if (v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation] == 1)
    {
      objc_msgSend(v3, "frame", v22);
      v20 = v20 + v7 - CGRectGetWidth(v72);
      v68 = v20;
    }
    else
    {
      v19 = v8 + v19;
      v69 = v19;
    }
    v45 = Logger.logObject.getter(v21);
    v46 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v45, v46))
      goto LABEL_34;
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v66 = v48;
    *(_DWORD *)v47 = 136315138;
    v53 = CGPoint.debugDescription.getter(v20, v19);
    v55 = v54;
    v64 = sub_33524(v53, v54, &v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v47 + 4);
    swift_bridgeObjectRelease(v55);
    v52 = "Contained locationOffset -- utilizing that to scroll to %s";
LABEL_33:
    _os_log_impl(&dword_0, v45, v46, v52, v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);
LABEL_34:

LABEL_35:
    swift_beginAccess(&v68, &v62, 0, 0);
    return;
  }
  v23 = &v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService];
  Strong = swift_unknownObjectWeakLoadStrong(&v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService]);
  if (!Strong
    || (v25 = Strong,
        v26 = *((_QWORD *)v23 + 1),
        ObjectType = swift_getObjectType(Strong),
        v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(ObjectType, v26),
        swift_unknownObjectRelease(v25),
        v29 = BookPaginationEntity.document(for:)(v6),
        swift_release(v28),
        !v29))
  {
    v40 = Logger.logObject.getter(Strong);
    v41 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v40, v41))
      goto LABEL_20;
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v42 = 134217984;
    v66 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v42 + 4);
    v43 = "Failed to get paginated document for %ld. Unable to get offset";
    goto LABEL_19;
  }
  v30 = (uint64_t *)(v29 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount);
  swift_beginAccess(v29 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pageCount, &v66, 0, 0);
  if (v5 >= *v30)
  {
    v56 = swift_retain(v29);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(32, -1);
      v60 = swift_slowAlloc(32, -1);
      v64 = v60;
      *(_DWORD *)v59 = 136315650;
      v62 = sub_33524(0xD000000000000012, 0x80000000002C8E70, &v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v59 + 4);
      *(_WORD *)(v59 + 12) = 2048;
      v62 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v59 + 14);
      *(_WORD *)(v59 + 22) = 2048;
      v62 = *v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v59 + 24);
      swift_release(v29);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);
      swift_release(v29);
    }
    else
    {
      swift_release_n(v29, 2);
    }

  }
  else
  {
    v31 = (_QWORD *)(v29 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages);
    swift_beginAccess(v29 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_pages, &v64, 0, 0);
    v32 = *v31;
    if ((*v31 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(*v31);
      v33 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v32);
      swift_bridgeObjectRelease(v32);
LABEL_15:
      v34 = v33[4];
      v35 = v33[5];
      v36 = v33[6];
      v37 = v33[7];
      if (v3[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation] == 1)
      {
        MinX = CGRectGetMinX(*(CGRect *)&v34);
        swift_release(v29);
        swift_release(v33);
        v68 = v20 + MinX;
      }
      else
      {
        MinY = CGRectGetMinY(*(CGRect *)&v34);
        swift_release(v29);
        swift_release(v33);
        v69 = v19 + MinY;
      }
      goto LABEL_35;
    }
    if (v5 < 0)
    {
      __break(1u);
    }
    else if ((unint64_t)v5 < *(_QWORD *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFF8)))
    {
      v33 = *(_QWORD **)(v32 + 8 * v5 + 32);
      swift_retain(v33);
      goto LABEL_15;
    }
    __break(1u);
  }
}

uint64_t sub_8DC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v5;
  char *v6;
  uint64_t v11;
  unint64_t v12;
  char v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t result;
  double v22;
  uint64_t v23;
  uint64_t v24;

  v6 = v5;
  if (a2)
  {
    v11 = a2;
    if (!*(_QWORD *)(a2 + 16))
      goto LABEL_8;
  }
  else
  {
    v11 = *(_QWORD *)&v5[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state];
    swift_bridgeObjectRetain(*(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state]);
    if (!*(_QWORD *)(v11 + 16))
    {
LABEL_8:
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRelease(v11);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v20 = 134217984;
        v23 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v20 + 4);
        _os_log_impl(&dword_0, v18, v19, "Unable to find starting offset for ordinal %ld", v20, 0xCu);
        swift_slowDealloc(v20, -1, -1);
      }

      *(double *)&result = 0.0;
      return result;
    }
  }
  v12 = sub_3B7F8(a1);
  if ((v13 & 1) == 0)
    goto LABEL_8;
  v14 = *(double *)(*(_QWORD *)(v11 + 56) + 16 * v12);
  swift_bridgeObjectRetain(a2);
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v11).n128_u64[0];
  if ((a5 & 1) != 0)
    objc_msgSend(v6, "contentOffset", v15);
  else
    v16 = *(double *)&a3;
  v22 = 0.0;
  if (v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation])
    v22 = v14;
  *(double *)&result = v16 - v22;
  return result;
}

void sub_8DDF4(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  _BYTE *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  void *object;
  Swift::String v28;
  uint64_t v29;
  Swift::String v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *oslog;
  uint64_t v43;
  _QWORD v44[3];
  _BYTE v45[24];
  uint64_t v46;

  v5 = a1;
  swift_retain_n(a2, 2);
  swift_bridgeObjectRetain_n(a3, 2);
  v6 = v5;
  oslog = Logger.logObject.getter(v6);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = swift_slowAlloc(52, -1);
    v41 = swift_slowAlloc(160, -1);
    v46 = v41;
    *(_DWORD *)v8 = 136316162;
    swift_beginAccess(a2 + 16, v45, 0, 0);
    v9 = CGPoint.debugDescription.getter(*(double *)(a2 + 16), *(double *)(a2 + 24));
    v11 = v10;
    v43 = sub_33524(v9, v10, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v8 + 4);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v8 + 12) = 2080;
    if (v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation])
      v12 = 0x746E6F7A69726F68;
    else
      v12 = 0x6C61636974726576;
    if (v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation])
      v13 = 0xEA00000000006C61;
    else
      v13 = 0xE800000000000000;
    v43 = sub_33524(v12, v13, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v8 + 14);

    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v8 + 22) = 2080;
    swift_bridgeObjectRetain(a3);
    v14 = sub_319AC(&qword_3B8DF8);
    v15 = Array.description.getter(a3, v14);
    v17 = v16;
    swift_bridgeObjectRelease(a3);
    v43 = sub_33524(v15, v17, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v8 + 24);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v8 + 32) = 2080;
    v18 = *(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state];
    v19 = *(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 8];
    v21 = *(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 16];
    v20 = *(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 24];
    v43 = 0;
    v44[0] = 0xE000000000000000;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v20);
    _StringGuts.grow(_:)(66);
    v22._countAndFlagsBits = 60;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    v23._object = (void *)0x80000000002E8450;
    v23._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v23);
    v24._countAndFlagsBits = 0xD00000000000001ELL;
    v24._object = (void *)0x80000000002C8E90;
    String.append(_:)(v24);
    v25 = swift_bridgeObjectRetain(v21);
    v26._countAndFlagsBits = Array.description.getter(v25, v14);
    object = v26._object;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(object);
    v28._countAndFlagsBits = 0xD00000000000001DLL;
    v28._object = (void *)0x80000000002C8EB0;
    String.append(_:)(v28);
    swift_bridgeObjectRetain(v20);
    v29 = sub_319AC(&qword_3B8E00);
    v30._countAndFlagsBits = Array.description.getter(v20, v29);
    v31 = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v31);
    v32 = v43;
    v33 = v44[0];
    swift_bridgeObjectRelease(v20);
    v43 = sub_33524(v32, v33, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v8 + 34);

    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v8 + 42) = 2080;
    v34 = *(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState + 8];
    v35 = *(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState + 16];
    v36 = *(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState + 24];
    v43 = *(_QWORD *)&v6[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState];
    v44[0] = v34;
    v44[1] = v35;
    v44[2] = v36;
    sub_93838(v43, v34, v35, v36);
    v37 = sub_319AC(&qword_3B8E08);
    v38 = String.init<A>(describing:)(&v43, v37);
    v40 = v39;
    v43 = sub_33524(v38, v39, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v8 + 44);

    swift_bridgeObjectRelease(v40);
    _os_log_impl(&dword_0, oslog, v7, "Failed to find associated ordinal for offset %s orientation: %s\n    offsetMap: %s\n    state: %s\n    pendingState: %s", (uint8_t *)v8, 0x34u);
    swift_arrayDestroy(v41, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a3, 2);

    swift_release_n(a2, 2);
  }
}

void sub_8E300()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(__int128 *, _QWORD);
  double *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  double (*v19)(uint64_t, uint64_t);
  double v20;
  double v21;
  double v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  double v57;
  char v58;
  void *v59;
  double v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(__int128 *, _QWORD);
  double *v67;
  double v68;
  _BOOL4 v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t DynamicType;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  id v87;
  char *v88;
  id v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  double v105;
  NSObject *v106;
  os_log_type_t v107;
  uint64_t v108;
  char *v109;
  NSObject *v110;
  os_log_type_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  NSObject *v123;
  int v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  Swift::String v131;
  Swift::String v132;
  Swift::String v133;
  uint64_t v134;
  Swift::String v135;
  void *object;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  Swift::String v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  NSObject *v147;
  char *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  char v157;
  int v158;
  os_log_type_t v159;
  uint8_t *v160;
  os_log_type_t v161;
  os_log_t v162;
  uint64_t v163;
  double v164;
  double v165;
  double v166;
  uint64_t v167;
  double v168;
  double v169;
  double x;
  double v171;
  NSObject *v172;
  os_log_type_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _DWORD *v178;
  uint64_t v179;
  int v180;
  os_log_t v181;
  char *v182;
  char *v183;
  void *v184;
  void *v185;
  void *v186;
  __int128 v187;
  unint64_t v188;
  unint64_t v189;
  __int128 v190;
  __int128 v191;
  char *v192;
  uint64_t *v193;
  char *v194;
  char *v195;
  char *v196;
  NSObject *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  double v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  char *v207;
  __int128 v208;
  char *v209;
  uint64_t v210;
  char *v211;
  char *v212;
  _OWORD v213[7];
  _OWORD v214[2];
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  _OWORD v222[2];
  _OWORD v223[2];
  __int128 v224;
  uint64_t v225;
  char v226[32];
  CGRect v227;

  v1 = v0;
  v2 = type metadata accessor for NSFastEnumerationIterator(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v175 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation;
  if (v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation])
    v6 = &unk_2E8550;
  else
    v6 = &unk_2E8530;
  if (v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation])
    v7 = &unk_2E8590;
  else
    v7 = &unk_2E8570;
  KeyPath = swift_getKeyPath(v6);
  v9 = swift_getKeyPath(v7);
  swift_retain(v9);
  objc_msgSend(v1, "contentOffset");
  *(_QWORD *)&v213[0] = v10;
  *((_QWORD *)&v213[0] + 1) = v11;
  v12 = (void (*)(__int128 *, _QWORD))swift_readAtKeyPath(&v215, v213, v9);
  v203 = *v13;
  v12(&v215, 0);
  v205 = v9;
  swift_release(v9);
  Strong = swift_weakLoadStrong(&v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_layoutController]);
  if (!Strong)
  {
    v172 = Logger.logObject.getter(0);
    v173 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v172, v173))
    {
      v174 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v174 = 0;
      swift_slowDealloc(v174, -1, -1);
    }

    goto LABEL_92;
  }
  v15 = Strong;
  v198 = v3;
  v199 = v2;
  swift_beginAccess(Strong + 112, v226, 0, 0);
  v16 = *(_QWORD *)(v15 + 112);
  v17 = *(_QWORD *)(v15 + 120);
  swift_unknownObjectRetain(v16);
  swift_release(v15);
  ObjectType = swift_getObjectType(v16);
  v19 = *(double (**)(uint64_t, uint64_t))(v17 + 48);
  v201 = v17;
  v202 = v16;
  v200 = ObjectType;
  v20 = v19(ObjectType, v17);
  v22 = v21;
  v210 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentViewMap;
  v23 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentViewMap], "keyEnumerator");
  NSEnumerator.makeIterator()();

  v24 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_log;
  v25 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state;
  v26 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_locationProvider;
  v27 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState;
  NSFastEnumerationIterator.next()(&v224);
  if (!v225)
  {
LABEL_88:
    (*(void (**)(char *, uint64_t))(v198 + 8))(v5, v199);
    swift_unknownObjectRelease(v202);
LABEL_92:
    swift_release(KeyPath);
    swift_release(v205);
    return;
  }
  v211 = &v1[v24];
  v207 = &v1[v25];
  v196 = &v1[v26];
  v193 = (uint64_t *)&v1[v27];
  v192 = (char *)&v215 + 8;
  v194 = (char *)&v215 + 4;
  v195 = (char *)v213 + 8;
  v29 = -1;
  v212 = (char *)&type metadata for Any + 8;
  *(_QWORD *)&v28 = 136315138;
  v208 = v28;
  *(_QWORD *)&v28 = 134218240;
  v191 = v28;
  *(_QWORD *)&v28 = 136315394;
  v190 = v28;
  v188 = 0x80000000002C8F00;
  v189 = 0x80000000002C8ED0;
  *(_QWORD *)&v28 = 136315650;
  v187 = v28;
  v185 = (void *)0x80000000002C8E90;
  v186 = (void *)0x80000000002E8450;
  v184 = (void *)0x80000000002C8EB0;
  v209 = v5;
  while (2)
  {
    v197 = v29;
    while (1)
    {
      sub_3F180(&v224, v223);
      sub_344A8((uint64_t)v223, (uint64_t)&v215);
      v30 = sub_34450(0, (unint64_t *)&qword_3B8EF0, NSNumber_ptr);
      if (!swift_dynamicCast(v213, &v215, v212, v30, 6))
      {
        v75 = sub_344A8((uint64_t)v223, (uint64_t)&v215);
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v77))
        {
          v78 = swift_slowAlloc(12, -1);
          v79 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v213[0] = v79;
          *(_DWORD *)v78 = v208;
          v80 = *((_QWORD *)&v216 + 1);
          v81 = sub_472D0(&v215, *((uint64_t *)&v216 + 1));
          DynamicType = swift_getDynamicType(v81, v80, 1);
          v83 = _typeName(_:qualified:)(DynamicType, 0);
          v85 = v84;
          *(_QWORD *)(v78 + 4) = sub_33524(v83, v84, (uint64_t *)v213);
          swift_bridgeObjectRelease(v85);
          sub_34488(&v215);
          swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v79, -1, -1);
          swift_slowDealloc(v78, -1, -1);
        }
        else
        {
          sub_34488(&v215);
        }

        sub_34488(v223);
        goto LABEL_13;
      }
      v31 = *(void **)&v213[0];
      v32 = objc_msgSend(*(id *)&v1[v210], "objectForKey:", *(_QWORD *)&v213[0]);
      if (!v32)
        goto LABEL_49;
      v33 = v32;
      v34 = swift_getObjectType(v32);
      v35 = swift_conformsToProtocol2(v34, &protocol descriptor for ContentLoaderView);
      v36 = v35 ? v35 : 0;
      v37 = v35 ? v33 : 0;
      if (v37)
        break;

LABEL_49:
      v86 = v1;
      v87 = v31;
      v88 = v86;
      v89 = v87;
      v90 = Logger.logObject.getter(v89);
      v91 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v90, v91))
      {
        v92 = swift_slowAlloc(12, -1);
        v93 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v215 = v93;
        *(_DWORD *)v92 = v208;

        v94 = sub_319AC(&qword_3B8EF8);
        v95 = _typeName(_:qualified:)(v94, 0);
        v97 = v96;
        *(_QWORD *)(v92 + 4) = sub_33524(v95, v96, (uint64_t *)&v215);

        swift_bridgeObjectRelease(v97);
        swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v93, -1, -1);
        swift_slowDealloc(v92, -1, -1);

      }
      else
      {

      }
LABEL_12:
      sub_34488(v223);
      v5 = v209;
LABEL_13:
      NSFastEnumerationIterator.next()(&v224);
      if (!v225)
        goto LABEL_88;
    }
    v38 = objc_msgSend(v31, "integerValue");
    v39 = (uint64_t)v38;
    v40 = *(_QWORD *)v207;
    if (*(_QWORD *)(*(_QWORD *)v207 + 16))
    {
      v41 = sub_3B7F8((uint64_t)v38);
      if ((v42 & 1) != 0)
      {
        v43 = *((_QWORD *)v207 + 1);
        if (*(_QWORD *)(v43 + 16))
        {
          v206 = *(_OWORD *)(*(_QWORD *)(v40 + 56) + 16 * v41);
          v44 = sub_3B7F8(v39);
          if ((v45 & 1) != 0)
          {
            v46 = (uint64_t *)(*(_QWORD *)(v43 + 56) + 16 * v44);
            v47 = *v46;
            v48 = v46[1];
            v215 = v206;
            v49 = v205;
            swift_retain(v205);
            swift_getAtKeyPath(v213, &v215, v49);
            swift_release(v49);
            v50 = *(double *)v213 - v203;
            *(_QWORD *)&v215 = v47;
            *((_QWORD *)&v215 + 1) = v48;
            swift_retain(KeyPath);
            swift_getAtKeyPath(v213, &v215, KeyPath);
            swift_release(KeyPath);
            v51 = *(double *)v213;
            v52 = swift_getObjectType(v37);
            swift_retain(KeyPath);
            objc_msgSend(v37, "bounds");
            *(_QWORD *)&v215 = v53;
            *((_QWORD *)&v215 + 1) = v54;
            swift_getAtKeyPath(v213, &v215, KeyPath);
            swift_release(KeyPath);
            v55 = v51 - *(double *)v213;
            v56 = -v50;
            if (v51 - *(double *)v213 <= -v50)
              v56 = v51 - *(double *)v213;
            if (v56 < 0.0)
              v57 = 0.0;
            else
              v57 = v56;
            objc_msgSend(v37, "frame");
            (*(void (**)(uint64_t, uint64_t))(v36 + 72))(v52, v36);
            if ((v58 & 1) != 0)
            {
              v59 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v52, v36);
              objc_msgSend(v59, "contentOffset");

            }
            v60 = v50 + v57;
            objc_msgSend(v37, "frame");
            v61 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v52, v36);
            swift_retain(KeyPath);
            objc_msgSend(v61, "contentSize");
            v63 = v62;
            v65 = v64;

            *(_QWORD *)&v213[0] = v63;
            *((_QWORD *)&v213[0] + 1) = v65;
            v66 = (void (*)(__int128 *, _QWORD))swift_readAtKeyPath(&v215, v213, KeyPath);
            v68 = *v67;
            v66(&v215, 0);
            swift_release(KeyPath);
            v69 = v51 < v68 && v55 == v57;
            v70 = v68 + -1.0;
            if (v1[v204] == 1)
            {
              if (!v69)
                v70 = v57;
              if (v20 >= v51)
                v71 = v51;
              else
                v71 = v20;
              v72 = 0.0;
              v73 = 0.0;
              v74 = v22;
            }
            else
            {
              (*(void (**)(uint64_t))(v201 + 64))(v200);
              v73 = v60;
              if (v69)
                v72 = v70;
              else
                v72 = v57;
              if (v22 >= v51)
                v74 = v51;
              else
                v74 = v22;
              v70 = 0.0;
              v60 = v98;
              v71 = v20;
            }
            objc_msgSend(v37, "setFrame:", v60, v73, v71, v74);
            (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v36 + 272))(1, v52, v36, v70, v72);

            goto LABEL_12;
          }
        }
      }
    }
    v99 = v196;
    v100 = swift_unknownObjectWeakLoadStrong(v196);
    if (!v100)
    {
      v104 = v197;
      if (__OFADD__(v197, 1))
        goto LABEL_94;
      *(_QWORD *)&v206 = (char *)&v197->isa + 1;
LABEL_64:
      v105 = (double)(uint64_t)v104;
      v106 = Logger.logObject.getter(v100);
      v107 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v106, v107))
      {
        v108 = swift_slowAlloc(22, -1);
        *(_DWORD *)v108 = v191;
        *(_QWORD *)(v108 + 4) = v39;
        *(_WORD *)(v108 + 12) = 2048;
        *(double *)(v108 + 14) = v105;
        _os_log_impl(&dword_0, v106, v107, "Failed to find start offset and size for %ld. Adjusting origin by %f", (uint8_t *)v108, 0x16u);
        swift_slowDealloc(v108, -1, -1);
      }

      v109 = v1;
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.debug.getter();
      v112 = v111;
      if (os_log_type_enabled(v110, v111))
      {
        v113 = swift_slowAlloc(22, -1);
        v197 = v110;
        v114 = v113;
        v182 = (char *)swift_slowAlloc(64, -1);
        *(_QWORD *)&v215 = v182;
        *(_DWORD *)v114 = v190;
        LODWORD(v181) = v112;
        v115 = CGSize.debugDescription.getter(v20, v22);
        v183 = v109;
        v117 = v116;
        *(_QWORD *)&v213[0] = sub_33524(v115, v116, (uint64_t *)&v215);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v213, v195, v114 + 4);
        swift_bridgeObjectRelease(v117);
        *(_WORD *)(v114 + 12) = 2080;
        v118 = swift_unknownObjectWeakLoadStrong(v196);
        swift_unknownObjectRelease(v118);
        if (v118)
          v119 = 0xD000000000000029;
        else
          v119 = 0xD000000000000013;
        if (v118)
          v120 = v189;
        else
          v120 = v188;
        *(_QWORD *)&v213[0] = sub_33524(v119, v120, (uint64_t *)&v215);
        v109 = v183;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v213, v195, v114 + 14);

        swift_bridgeObjectRelease(v120);
        _os_log_impl(&dword_0, v197, (os_log_type_t)v181, "Ensuring frame is at least content size %s & Origin is set. %s", (uint8_t *)v114, 0x16u);
        v121 = v182;
        swift_arrayDestroy(v182, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v121, -1, -1);
        swift_slowDealloc(v114, -1, -1);

      }
      else
      {

      }
      v122 = v109;
      v123 = Logger.logObject.getter(v122);
      v124 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v123, (os_log_type_t)v124))
      {

        goto LABEL_84;
      }
      v180 = v124;
      v181 = v123;
      v125 = swift_slowAlloc(24, -1);
      v126 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v213[0] = v126;
      v197 = v125;
      LODWORD(v125->isa) = v187;
      v178 = (_DWORD *)&v125->isa + 1;
      v179 = v126;
      v127 = *(_QWORD *)v207;
      v176 = *((_QWORD *)v207 + 1);
      v128 = v176;
      v177 = v127;
      v182 = v122;
      v130 = *((_QWORD *)v207 + 2);
      v183 = (char *)*((_QWORD *)v207 + 3);
      v129 = (uint64_t)v183;
      *(_QWORD *)&v215 = 0;
      *((_QWORD *)&v215 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRetain(v128);
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRetain(v129);
      _StringGuts.grow(_:)(66);
      v131._countAndFlagsBits = 60;
      v131._object = (void *)0xE100000000000000;
      String.append(_:)(v131);
      v132._countAndFlagsBits = 0xD000000000000011;
      v132._object = v186;
      String.append(_:)(v132);
      v133._countAndFlagsBits = 0xD00000000000001ELL;
      v133._object = v185;
      String.append(_:)(v133);
      swift_bridgeObjectRetain(v130);
      v134 = sub_319AC(&qword_3B8DF8);
      v135._countAndFlagsBits = Array.description.getter(v130, v134);
      object = v135._object;
      String.append(_:)(v135);
      swift_bridgeObjectRelease(v130);
      swift_bridgeObjectRelease(object);
      v137._countAndFlagsBits = 0xD00000000000001DLL;
      v137._object = v184;
      String.append(_:)(v137);
      v138 = (uint64_t)v183;
      swift_bridgeObjectRetain(v183);
      v139 = sub_319AC(&qword_3B8E00);
      v140._countAndFlagsBits = Array.description.getter(v138, v139);
      v141 = v140._object;
      String.append(_:)(v140);
      swift_bridgeObjectRelease(v130);
      swift_bridgeObjectRelease(v176);
      swift_bridgeObjectRelease(v177);
      v142 = (uint64_t)v183;
      swift_bridgeObjectRelease(v183);
      swift_bridgeObjectRelease(v141);
      v144 = *((_QWORD *)&v215 + 1);
      v143 = v215;
      swift_bridgeObjectRelease(v142);
      v145 = v144;
      v146 = sub_33524(v143, v144, (uint64_t *)v213);
      v147 = v197;
      *(_QWORD *)&v215 = v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v192, v178);
      v148 = v182;

      swift_bridgeObjectRelease(v145);
      WORD2(v147[1].isa) = 1024;
      v183 = (char *)&v147[1].isa + 6;
      v149 = v193;
      v178 = (_DWORD *)*v193;

      LODWORD(v215) = v178 != 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v194, v183);

      WORD1(v147[2].isa) = 1024;
      v150 = *v149;
      if (*v149)
      {
        v151 = v149;
        v153 = v149 + 2;
        v152 = v149[2];
        v183 = (char *)v153[1];
        v154 = v151[1];
        sub_93838(v150, v154, v152, (uint64_t)v183);
        v155 = swift_bridgeObjectRetain(v150);
        sub_939E4(v155, v154, v152, (uint64_t)v183);
        if (*(_QWORD *)(v150 + 16))
        {
          sub_3B7F8(v39);
          v157 = v156;
          v148 = v182;

          swift_bridgeObjectRelease(v150);
          v158 = v157 & 1;
LABEL_83:
          v159 = v180;
          v160 = (uint8_t *)v197;
          LODWORD(v215) = v158;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v194, (char *)&v197[2].isa + 4);

          v161 = v159;
          v162 = v181;
          _os_log_impl(&dword_0, v181, v161, "CurrentState %s hasPendingState: %{BOOL}d pending state will likely resolve: %{BOOL}d", v160, 0x18u);
          v163 = v179;
          swift_arrayDestroy(v179, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v163, -1, -1);
          swift_slowDealloc(v160, -1, -1);

LABEL_84:
          objc_msgSend(v37, "frame");
          if (v1[v204] == 1)
          {
            v166 = 0.0;
            v167 = 0;
            v168 = v20;
            v169 = v22;
            x = v164 + CGRectGetWidth(*(CGRect *)&v164) * v105;
          }
          else
          {
            v171 = v165;
            v227.origin.x = (*(double (**)(uint64_t))(v201 + 64))(v200);
            x = v227.origin.x;
            v227.origin.y = v171;
            v227.size.width = v20;
            v227.size.height = v22;
            v166 = v171 + CGRectGetHeight(v227) * v105;
          }
          objc_msgSend(v37, "setFrame:", x, v166, v20, v22);

          sub_34488(v223);
          v5 = v209;
          NSFastEnumerationIterator.next()(&v224);
          v29 = v206;
          if (!v225)
            goto LABEL_88;
          continue;
        }
        v148 = v182;

        swift_bridgeObjectRelease(v150);
      }
      else
      {

      }
      v158 = 0;
      goto LABEL_83;
    }
    break;
  }
  v101 = v100;
  v102 = *((_QWORD *)v99 + 1);
  v103 = swift_getObjectType(v100);
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v102 + 16))(v213, v103, v102);
  swift_unknownObjectRelease(v101);
  v221 = v213[6];
  v222[0] = v214[0];
  *(_OWORD *)((char *)v222 + 10) = *(_OWORD *)((char *)v214 + 10);
  v217 = v213[2];
  v218 = v213[3];
  v219 = v213[4];
  v220 = v213[5];
  v215 = v213[0];
  v216 = v213[1];
  v100 = sub_49900((uint64_t)&v215);
  if (!__OFSUB__(v39, (_QWORD)v215))
  {
    *(_QWORD *)&v206 = v197;
    v104 = (v39 - v215);
    goto LABEL_64;
  }
  __break(1u);
LABEL_94:
  __break(1u);
}

double sub_8F388(int64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  _DWORD *v4;
  id v5;
  id v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  double v13;
  os_log_type_t v14;
  uint8_t *v15;
  double result;
  uint64_t v17;
  os_log_t v18;
  char *v19;
  BOOL v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t (*v29)(uint64_t, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  Class isa;
  objc_class *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  char **v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  _DWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  char *v63;
  unint64_t v64;
  NSObject *oslog;
  os_log_t osloga;
  __int128 v67;
  uint64_t v68;
  uint64_t v69[3];
  uint64_t v70;
  uint64_t v71;

  v2 = v1;
  v4 = (_DWORD *)OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_viewDocumentMap;
  v5 = objc_msgSend(*(id *)((char *)v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_viewDocumentMap), "keyEnumerator");
  v6 = objc_msgSend(v5, "allObjects");

  v7 = (char *)&type metadata for Any;
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, (char *)&type metadata for Any + 8);

  v9 = sub_8FA40(v8);
  swift_bridgeObjectRelease(v8);
  if (v9)
    v10 = v9;
  else
    v10 = _swiftEmptyArrayStorage;
  v11 = sub_1C1690((uint64_t)v10, a1);
  *(_QWORD *)&v13 = swift_bridgeObjectRelease(v10).n128_u64[0];
  if ((v11 & 1) == 0)
  {
    objc_msgSend(*(id *)((char *)v4 + (_QWORD)v2), "removeAllObjects", v13);
    v58 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentViewMap;
    objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentViewMap), "removeAllObjects");
    if ((unint64_t)a1 >> 62)
      goto LABEL_37;
    v17 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(a1);
    if (!v17)
    {
LABEL_41:
      *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
      return result;
    }
LABEL_10:
    v18 = 0;
    v63 = (char *)v2 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_layoutController;
    v64 = a1 & 0xC000000000000001;
    v59 = a1 + 32;
    v60 = a1 & 0xFFFFFFFFFFFFFF8;
    v55 = v7 + 8;
    v56 = v4;
    v57 = v2;
    v61 = v17;
    v62 = a1;
    while (1)
    {
      if (v64)
      {
        v19 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a1);
      }
      else
      {
        if ((unint64_t)v18 >= *(_QWORD *)(v60 + 16))
          goto LABEL_36;
        v19 = (char *)*(id *)(v59 + 8 * (_QWORD)v18);
      }
      v7 = v19;
      v20 = __OFADD__(v18, 1);
      v18 = (os_log_t)((char *)v18 + 1);
      if (v20)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        if (a1 < 0)
          v53 = a1;
        else
          v53 = a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v17 = _CocoaArrayWrapper.endIndex.getter(v53);
        if (!v17)
          goto LABEL_41;
        goto LABEL_10;
      }
      Strong = swift_weakLoadStrong(v63);
      if (Strong)
      {
        v22 = Strong;
        osloga = v18;
        CurrentValueSubject.value.getter(v69);
        swift_release(v22);
        v23 = v69[0];
        v24 = v70;
        swift_unknownObjectRelease(v69[1]);
        swift_unknownObjectRelease(v24);
        v25 = *(_QWORD *)(v23 + 16);
        if (v25)
        {
          swift_bridgeObjectRetain(v23);
          v2 = (uint64_t *)(v23 + 40);
          while (1)
          {
            v27 = *(v2 - 1);
            v26 = *v2;
            ObjectType = swift_getObjectType(v27);
            v29 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v26 + 48);
            v30 = swift_unknownObjectRetain(v27);
            v31 = v29(ObjectType, v26, v30);
            if (v31)
            {
              v4 = (_DWORD *)v31;
              sub_34450(0, (unint64_t *)&qword_3B8CB0, UIView_ptr);
              v32 = v7;
              v33 = static NSObject.== infix(_:_:)(v4, v32);

              if ((v33 & 1) != 0)
                break;
            }
            swift_unknownObjectRelease(v27);
            v2 += 2;
            if (!--v25)
            {
              swift_bridgeObjectRelease(v23);
              v17 = v61;
              a1 = v62;
              goto LABEL_27;
            }
          }
          swift_bridgeObjectRelease_n(v23, 2);
          (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v26 + 40))(&v67, ObjectType, v26);
          if (v68)
          {
            sub_3F1CC(&v67, (uint64_t)v69);
            v34 = v70;
            v35 = v71;
            sub_472D0(v69, v70);
            (*(void (**)(uint64_t, uint64_t))(v35 + 40))(v34, v35);
            isa = Int._bridgeToObjectiveC()().super.super.isa;
            v4 = v56;
            v2 = v57;
            objc_msgSend(*(id *)((char *)v56 + (_QWORD)v57), "setObject:forKey:", isa, v32);
            v7 = (char *)*(id *)((char *)v57 + v58);
            v37 = isa;
            objc_msgSend(v7, "setObject:forKey:", v32, v37);

            swift_unknownObjectRelease(v27);
            sub_34488(v69);
            v17 = v61;
            a1 = v62;
            v18 = osloga;
          }
          else
          {
            sub_52128((uint64_t)&v67, &qword_3B8990);
            v44 = swift_unknownObjectRetain_n(v27, 2);
            v45 = Logger.logObject.getter(v44);
            v46 = static os_log_type_t.error.getter();
            v7 = (char *)v46;
            v18 = osloga;
            if (os_log_type_enabled(v45, v46))
            {
              v4 = (_DWORD *)swift_slowAlloc(12, -1);
              v47 = swift_slowAlloc(32, -1);
              v69[0] = v47;
              *v4 = 136315138;
              v54 = v47;
              v48 = ObjectType;
              v49 = v45;
              v50 = ContentLoading.shortDescription.getter(v48, v26);
              v52 = v51;
              *(_QWORD *)&v67 = sub_33524(v50, v51, v69);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 8, v4 + 1);
              swift_unknownObjectRelease_n(v27, 2);
              swift_bridgeObjectRelease(v52);
              _os_log_impl(&dword_0, v49, (os_log_type_t)v7, "failed to get document for loader: %s", (uint8_t *)v4, 0xCu);
              swift_arrayDestroy(v54, 1, v55);
              swift_slowDealloc(v54, -1, -1);
              swift_slowDealloc(v4, -1, -1);
              swift_unknownObjectRelease(v27);

            }
            else
            {
              swift_unknownObjectRelease_n(v27, 3);

            }
            v17 = v61;
            a1 = v62;
          }
          goto LABEL_12;
        }
LABEL_27:
        swift_bridgeObjectRelease(v23);
        v18 = osloga;
      }
      v38 = v7;
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      v7 = (char *)v40;
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(12, -1);
        v42 = (char **)swift_slowAlloc(8, -1);
        *(_DWORD *)v41 = 138412290;
        *(_QWORD *)(v41 + 4) = v38;
        *v42 = v38;
        _os_log_impl(&dword_0, v39, (os_log_type_t)v7, "Failed to get loader that has a content view of %@", (uint8_t *)v41, 0xCu);
        v43 = sub_319AC(&qword_3B8A70);
        swift_arrayDestroy(v42, 1, v43);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

      }
LABEL_12:
      if (v18 == (os_log_t)v17)
        goto LABEL_41;
    }
  }
  oslog = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_0, oslog, v14, "Asked to update tracked views but they're the same", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  return result;
}

_QWORD *sub_8FA40(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v10;
  _BYTE v11[32];
  _QWORD *v12;

  v12 = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2)
    return v12;
  for (i = a1 + 32; ; i += 32)
  {
    sub_344A8(i, (uint64_t)v11);
    v4 = sub_34450(0, (unint64_t *)&qword_3B8CB0, UIView_ptr);
    v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6);
    if (!(_DWORD)v5)
      break;
    v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2)
      return v12;
  }
  v10 = 0;
  swift_release(v12);

  return 0;
}

void sub_8FB58(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  uint64_t ObjectType;
  uint64_t v11;
  char v12;
  char v13;
  _BYTE v14[24];

  v6 = *a1;
  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    ObjectType = swift_getObjectType(a3);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(ObjectType, a4);
    v12 = *(_BYTE *)(v11 + 97);
    swift_release(v11);
    if ((v12 & 1) != 0)
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574616E69676170, 0xE900000000000064, 0x6C6C6F726373, 0xE600000000000000, 0);
      swift_bridgeObjectRelease(0xE900000000000064);
      if ((v13 & 1) == 0)
      {
LABEL_10:

        return;
      }
      if (v6)
      {
LABEL_5:
        sub_8FC78();
        goto LABEL_10;
      }
    }
    else
    {
      swift_bridgeObjectRelease(0xE600000000000000);
      if (v6)
        goto LABEL_5;
    }
    if (qword_3B56F8 != -1)
      swift_once(&qword_3B56F8, sub_8A87C);
    sub_8C4B0(qword_3CEFE8, unk_3CEFF0, qword_3CEFF8, unk_3CF000);
    goto LABEL_10;
  }
}

void sub_8FC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  double v28;
  void (*v29)(_QWORD *, _QWORD);
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  char v40;
  unint64_t v41;
  char v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  __n128 v65;
  double v66;
  void (*v67)(_QWORD *, _QWORD);
  double *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  char v78;
  unint64_t v79;
  char v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  _BOOL8 v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  char v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[4];
  double v121;
  __int128 v122;
  _QWORD v123[3];
  uint64_t v124;
  uint64_t v125;

  v1 = v0;
  v124 = 0;
  v125 = 0;
  v2 = v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService);
  if (!Strong)
    return;
  v4 = Strong;
  v5 = *(_QWORD *)(v2 + 8);
  ObjectType = swift_getObjectType(Strong);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
  swift_unknownObjectRelease(v4);
  v8 = *(_QWORD *)(v7 + 40);
  swift_bridgeObjectRetain(v8);
  swift_release(v7);
  v120[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v8 >> 62)
  {
    if (v8 < 0)
      v18 = v8;
    else
      v18 = v8 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v8);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v8);
    if (v9)
      goto LABEL_4;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    v17 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v9 = *(_QWORD *)((char *)&dword_10 + (v8 & 0xFFFFFFFFFFFFF8));
  if (!v9)
    goto LABEL_18;
LABEL_4:
  if (v9 < 1)
  {
    __break(1u);
LABEL_101:
    __break(1u);
LABEL_102:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
    __break(1u);
    return;
  }
  for (i = 0; i != v9; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0)
    {
      v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v8);
    }
    else
    {
      v13 = *(_QWORD *)(v8 + 8 * i + 32);
      swift_retain(v13);
    }
    KeyPath = swift_getKeyPath(&unk_2E84E8);
    v15 = swift_getKeyPath(&unk_2E8510);
    static Published.subscript.getter(v123, v13, KeyPath);
    swift_release(KeyPath);
    swift_release(v15);
    if (LOBYTE(v123[0]) == 1)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
      v11 = *(_QWORD *)(v120[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v11);
      v12 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v13);
      specialized ContiguousArray._endMutation()(v12);
    }
    else
    {
      swift_release(v13);
    }
  }
  swift_bridgeObjectRelease(v8);
  v17 = v120[0];
LABEL_19:
  v19 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation) & 1) != 0)
    v17 = sub_91ECC(v17);
  v20 = (_QWORD *)sub_3D7C4((uint64_t)_swiftEmptyArrayStorage);
  v21 = (_QWORD *)sub_3D318((uint64_t)_swiftEmptyArrayStorage);
  if (*(_BYTE *)(v1 + v19))
    v22 = &unk_2E8590;
  else
    v22 = &unk_2E8570;
  if (*(_BYTE *)(v1 + v19))
    v23 = &unk_2E8550;
  else
    v23 = &unk_2E8530;
  v119 = swift_getKeyPath(v22);
  v118 = swift_getKeyPath(v23);
  if (v17 >> 62)
    goto LABEL_90;
  v24 = *(_QWORD *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFF8));
  if (v24)
  {
    while (1)
    {
      if (v24 < 1)
        goto LABEL_101;
      v116 = v24;
      v117 = v17;
      if ((v17 & 0xC000000000000001) == 0)
        break;
      v25 = 0;
      while (1)
      {
        v31 = specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v17);
        v32 = *(_QWORD *)(v31 + 16);
        v34 = v124;
        v33 = v125;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
        v120[0] = v20;
        v17 = sub_3B7F8(v32);
        v37 = v20[2];
        v38 = (v36 & 1) == 0;
        v39 = v37 + v38;
        if (__OFADD__(v37, v38))
          break;
        v40 = v36;
        if (v20[3] >= v39)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v20 = (_QWORD *)v120[0];
            if ((v36 & 1) != 0)
              goto LABEL_41;
          }
          else
          {
            sub_F2D00();
            v20 = (_QWORD *)v120[0];
            if ((v40 & 1) != 0)
              goto LABEL_41;
          }
        }
        else
        {
          sub_EEA1C(v39, isUniquelyReferenced_nonNull_native);
          v41 = sub_3B7F8(v32);
          if ((v40 & 1) != (v42 & 1))
            goto LABEL_102;
          v17 = v41;
          v20 = (_QWORD *)v120[0];
          if ((v40 & 1) != 0)
          {
LABEL_41:
            v43 = (_QWORD *)(v20[7] + 16 * v17);
            *v43 = v34;
            v43[1] = v33;
            goto LABEL_45;
          }
        }
        v20[(v17 >> 6) + 8] |= 1 << v17;
        *(_QWORD *)(v20[6] + 8 * v17) = v32;
        v44 = (_QWORD *)(v20[7] + 16 * v17);
        *v44 = v34;
        v44[1] = v33;
        v45 = v20[2];
        v46 = __OFADD__(v45, 1);
        v47 = v45 + 1;
        if (v46)
          goto LABEL_86;
        v20[2] = v47;
LABEL_45:
        swift_bridgeObjectRelease(0x8000000000000000);
        v17 = *(_QWORD *)(v31 + 16);
        v48 = (uint64_t *)(v31 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
        swift_beginAccess(v31 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v123, 0, 0);
        v50 = *v48;
        v49 = v48[1];
        v51 = swift_isUniquelyReferenced_nonNull_native(v21);
        v120[0] = v21;
        v53 = sub_3B7F8(v17);
        v54 = v21[2];
        v55 = (v52 & 1) == 0;
        v56 = v54 + v55;
        if (__OFADD__(v54, v55))
          goto LABEL_83;
        v57 = v52;
        if (v21[3] >= v56)
        {
          if ((v51 & 1) != 0)
          {
            v21 = (_QWORD *)v120[0];
            if ((v52 & 1) != 0)
              goto LABEL_32;
          }
          else
          {
            sub_F2B44();
            v21 = (_QWORD *)v120[0];
            if ((v57 & 1) != 0)
              goto LABEL_32;
          }
        }
        else
        {
          sub_EE748(v56, v51);
          v58 = sub_3B7F8(v17);
          if ((v57 & 1) != (v59 & 1))
            goto LABEL_102;
          v53 = v58;
          v21 = (_QWORD *)v120[0];
          if ((v57 & 1) != 0)
          {
LABEL_32:
            v26 = (_QWORD *)(v21[7] + 16 * v53);
            *v26 = v50;
            v26[1] = v49;
            goto LABEL_33;
          }
        }
        v21[(v53 >> 6) + 8] |= 1 << v53;
        *(_QWORD *)(v21[6] + 8 * v53) = v17;
        v60 = (_QWORD *)(v21[7] + 16 * v53);
        *v60 = v50;
        v60[1] = v49;
        v61 = v21[2];
        v46 = __OFADD__(v61, 1);
        v62 = v61 + 1;
        if (v46)
          goto LABEL_87;
        v21[2] = v62;
LABEL_33:
        ++v25;
        swift_bridgeObjectRelease(0x8000000000000000);
        v122 = *(_OWORD *)v48;
        swift_retain(v118);
        swift_getAtKeyPath(&v121, &v122, v118);
        v27 = swift_release(v118);
        v28 = v121;
        v29 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath(v120, &v124, v119, v27);
        *v30 = v28 + *v30;
        v29(v120, 0);
        swift_unknownObjectRelease(v31);
        v17 = v117;
        if (v116 == v25)
          goto LABEL_94;
      }
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      if ((v17 & 0x8000000000000000) != 0)
        v100 = v17;
      else
        v100 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v24 = _CocoaArrayWrapper.endIndex.getter(v100);
      swift_bridgeObjectRelease(v17);
      if (!v24)
        goto LABEL_94;
    }
    v63 = 0;
    do
    {
      v69 = *(_QWORD *)(v17 + 8 * v63 + 32);
      v70 = *(_QWORD *)(v69 + 16);
      v72 = v124;
      v71 = v125;
      swift_retain(v69);
      v73 = swift_isUniquelyReferenced_nonNull_native(v20);
      v120[0] = v20;
      v17 = sub_3B7F8(v70);
      v75 = v20[2];
      v76 = (v74 & 1) == 0;
      v77 = v75 + v76;
      if (__OFADD__(v75, v76))
        goto LABEL_84;
      v78 = v74;
      if (v20[3] >= v77)
      {
        if ((v73 & 1) != 0)
        {
          v20 = (_QWORD *)v120[0];
          if ((v74 & 1) != 0)
            goto LABEL_66;
        }
        else
        {
          sub_F2D00();
          v20 = (_QWORD *)v120[0];
          if ((v78 & 1) != 0)
            goto LABEL_66;
        }
      }
      else
      {
        sub_EEA1C(v77, v73);
        v79 = sub_3B7F8(v70);
        if ((v78 & 1) != (v80 & 1))
          goto LABEL_102;
        v17 = v79;
        v20 = (_QWORD *)v120[0];
        if ((v78 & 1) != 0)
        {
LABEL_66:
          v81 = (_QWORD *)(v20[7] + 16 * v17);
          *v81 = v72;
          v81[1] = v71;
          goto LABEL_70;
        }
      }
      v20[(v17 >> 6) + 8] |= 1 << v17;
      *(_QWORD *)(v20[6] + 8 * v17) = v70;
      v82 = (_QWORD *)(v20[7] + 16 * v17);
      *v82 = v72;
      v82[1] = v71;
      v83 = v20[2];
      v46 = __OFADD__(v83, 1);
      v84 = v83 + 1;
      if (v46)
        goto LABEL_88;
      v20[2] = v84;
LABEL_70:
      swift_bridgeObjectRelease(0x8000000000000000);
      v17 = *(_QWORD *)(v69 + 16);
      v85 = (uint64_t *)(v69 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
      swift_beginAccess(v69 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v123, 0, 0);
      v87 = *v85;
      v86 = v85[1];
      v88 = swift_isUniquelyReferenced_nonNull_native(v21);
      v120[0] = v21;
      v90 = sub_3B7F8(v17);
      v91 = v21[2];
      v92 = (v89 & 1) == 0;
      v93 = v91 + v92;
      if (__OFADD__(v91, v92))
        goto LABEL_85;
      v94 = v89;
      if (v21[3] >= v93)
      {
        if ((v88 & 1) != 0)
        {
          v21 = (_QWORD *)v120[0];
          if ((v89 & 1) == 0)
            goto LABEL_77;
        }
        else
        {
          sub_F2B44();
          v21 = (_QWORD *)v120[0];
          if ((v94 & 1) == 0)
            goto LABEL_77;
        }
      }
      else
      {
        sub_EE748(v93, v88);
        v95 = sub_3B7F8(v17);
        if ((v94 & 1) != (v96 & 1))
          goto LABEL_102;
        v90 = v95;
        v21 = (_QWORD *)v120[0];
        if ((v94 & 1) == 0)
        {
LABEL_77:
          v21[(v90 >> 6) + 8] |= 1 << v90;
          *(_QWORD *)(v21[6] + 8 * v90) = v17;
          v97 = (_QWORD *)(v21[7] + 16 * v90);
          *v97 = v87;
          v97[1] = v86;
          v98 = v21[2];
          v46 = __OFADD__(v98, 1);
          v99 = v98 + 1;
          if (v46)
            goto LABEL_89;
          v21[2] = v99;
          goto LABEL_58;
        }
      }
      v64 = (_QWORD *)(v21[7] + 16 * v90);
      *v64 = v87;
      v64[1] = v86;
LABEL_58:
      ++v63;
      swift_bridgeObjectRelease(0x8000000000000000);
      v122 = *(_OWORD *)v85;
      swift_retain(v118);
      swift_getAtKeyPath(&v121, &v122, v118);
      v65 = swift_release(v118);
      v66 = v121;
      v67 = (void (*)(_QWORD *, _QWORD))swift_modifyAtWritableKeyPath(v120, &v124, v119, v65);
      *v68 = v66 + *v68;
      v67(v120, 0);
      swift_release(v69);
      v17 = v117;
    }
    while (v116 != v63);
  }
LABEL_94:
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRetain(v20);
  v101 = swift_bridgeObjectRetain(v21);
  sub_920E8(v101);
  v103 = v102;
  swift_bridgeObjectRelease(v21);
  v104 = sub_8A8CC((unint64_t)v20, v103);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v103);
  if ((v104 & 1) == 0)
  {
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, v107))
    {
      v108 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v108 = 0;
      _os_log_impl(&dword_0, v106, v107, "documentStartOffsetMap != startOffsets(basedOn: documentContentSizeMap) -- Please file a radar!", v108, 2u);
      swift_slowDealloc(v108, -1, -1);
    }

  }
  v109 = sub_93B5C((uint64_t)v20, (uint64_t)v21);
  v111 = v110;
  v113 = v112;
  v115 = v114;
  sub_8C4B0(v109, v110, v112, v114);
  swift_release(v119);
  swift_release(v118);
  swift_bridgeObjectRelease(v115);
  swift_bridgeObjectRelease(v113);
  swift_bridgeObjectRelease(v111);
  swift_bridgeObjectRelease(v109);
}

void sub_905E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  NSObject *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44[2];
  _BYTE v45[24];
  _BYTE v46[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v46, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (!Strong)
  {
    if (qword_3B56F0 != -1)
      swift_once(&qword_3B56F0, sub_8A4D8);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_555F0(v7, (uint64_t)qword_3CEFD0);
    v5 = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      swift_slowDealloc(v10, -1, -1);
    }
    goto LABEL_49;
  }
  v5 = Strong;
  if ((*(_BYTE *)(a1 + 97) & 1) != 0)
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574616E69676170, 0xE900000000000064, 0x6C6C6F726373, 0xE600000000000000, 0);
    swift_bridgeObjectRelease(0xE900000000000064);
    if ((v6 & 1) == 0)
      goto LABEL_49;
  }
  else
  {
    swift_bridgeObjectRelease(0xE600000000000000);
  }
  v11 = (Class *)((char *)&v5->isa + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentSubscriptions);
  swift_beginAccess((char *)v5 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentSubscriptions, v45, 1, 0);
  v12 = *v11;
  v13 = swift_bridgeObjectRetain(*v11);
  sub_7245C(v13);
  swift_bridgeObjectRelease(v12);
  v14 = *v11;
  *v11 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a1 + 40);
  v44[0] = (uint64_t)_swiftEmptyArrayStorage;
  v16 = (unint64_t)v15 >> 62;
  if (!((unint64_t)v15 >> 62))
  {
    v17 = *(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v15);
    if (v17)
      goto LABEL_12;
LABEL_30:
    swift_bridgeObjectRelease(v15);
    v33 = v44[0];
    if (v44[0] < 0)
      goto LABEL_50;
    goto LABEL_31;
  }
  if (v15 < 0)
    v34 = v15;
  else
    v34 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v17 = _CocoaArrayWrapper.endIndex.getter(v34);
  if (!v17)
    goto LABEL_30;
LABEL_12:
  if (v17 < 1)
  {
    __break(1u);
    goto LABEL_53;
  }
  if ((v15 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v17; ++i)
    {
      v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v15);
      KeyPath = swift_getKeyPath(&unk_2E84E8);
      v23 = swift_getKeyPath(&unk_2E8510);
      static Published.subscript.getter(&v43, v21, KeyPath);
      swift_release(KeyPath);
      swift_release(v23);
      if (v43 == 1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
        v19 = *(_QWORD *)(v44[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
        v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v21);
        specialized ContiguousArray._endMutation()(v20);
      }
      else
      {
        swift_unknownObjectRelease(v21);
      }
    }
  }
  else
  {
    for (j = 0; j != v17; ++j)
    {
      v26 = *(_QWORD *)(v15 + 8 * j + 32);
      v27 = swift_getKeyPath(&unk_2E84E8);
      v28 = swift_getKeyPath(&unk_2E8510);
      v29 = swift_retain(v26);
      static Published.subscript.getter(&v43, v29, v27);
      swift_release(v27);
      swift_release(v28);
      if (v43 == 1)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v30);
        v31 = *(_QWORD *)(v44[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v31);
        v32 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v26);
        specialized ContiguousArray._endMutation()(v32);
      }
      else
      {
        swift_release(v26);
      }
    }
  }
  swift_bridgeObjectRelease(v15);
  v16 = (unint64_t)v15 >> 62;
  v33 = v44[0];
  if (v44[0] < 0)
  {
LABEL_50:
    v41 = swift_retain(v33);
    v42 = _CocoaArrayWrapper.endIndex.getter(v41);
    swift_release(v33);
    if (!v42)
      goto LABEL_34;
    goto LABEL_33;
  }
LABEL_31:
  if ((v33 & 0x4000000000000000) != 0)
    goto LABEL_50;
  if (*(_QWORD *)(v33 + 16))
LABEL_33:
    sub_90AC4(v33);
LABEL_34:
  swift_release(v33);
  if (v16)
  {
    if (v15 < 0)
      v36 = v15;
    else
      v36 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v15, 2);
    v35 = _CocoaArrayWrapper.endIndex.getter(v36);
    if (!v35)
      goto LABEL_48;
  }
  else
  {
    v35 = *(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain_n(v15, 2);
    if (!v35)
    {
LABEL_48:
      swift_bridgeObjectRelease_n(v15, 2);
LABEL_49:

      return;
    }
  }
  if (v35 >= 1)
  {
    if ((v15 & 0xC000000000000001) != 0)
    {
      v37 = 0;
      do
      {
        v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v37++, v15);
        v44[0] = v38;
        sub_90DD0(v44, (uint64_t)v5);
        swift_unknownObjectRelease(v38);
      }
      while (v35 != v37);
    }
    else
    {
      v39 = (uint64_t *)(v15 + 32);
      do
      {
        v40 = *v39++;
        v44[0] = v40;
        swift_retain(v40);
        sub_90DD0(v44, (uint64_t)v5);
        swift_release(v40);
        --v35;
      }
      while (v35);
    }
    goto LABEL_48;
  }
LABEL_53:
  __break(1u);
}

void sub_90AC4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE v44[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState);
  if (v4)
  {
    v6 = v3[2];
    v5 = v3[3];
    v7 = (_QWORD *)v3[1];
    sub_93838(*(_QWORD *)(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState), (uint64_t)v7, v6, v5);
    swift_bridgeObjectRetain(v7);
    sub_939E4(v4, (uint64_t)v7, v6, v5);
    if (!((unint64_t)a1 >> 62))
      goto LABEL_3;
LABEL_25:
    if (a1 < 0)
      v31 = a1;
    else
      v31 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v31);
    if (v8)
      goto LABEL_4;
LABEL_29:
    swift_bridgeObjectRelease(a1);
LABEL_30:
    v32 = swift_bridgeObjectRetain(v7);
    sub_920E8(v32);
    v34 = v33;
    swift_bridgeObjectRelease(v7);
    v35 = sub_93B5C(v34, (uint64_t)v7);
    v37 = v36;
    v39 = v38;
    v41 = v40;
    sub_8C4B0(v35, v36, v38, v40);
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v37);
    swift_bridgeObjectRelease(v35);
    return;
  }
  v7 = *(_QWORD **)(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 8);
  swift_bridgeObjectRetain(v7);
  if ((unint64_t)a1 >> 62)
    goto LABEL_25;
LABEL_3:
  v8 = *(_QWORD *)((char *)&dword_10 + (a1 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a1);
  if (!v8)
    goto LABEL_29;
LABEL_4:
  v42 = a1;
  v43 = a1 & 0xC000000000000001;
  v9 = 4;
  while (1)
  {
    v11 = v9 - 4;
    if (!v43)
      break;
    v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, a1);
    v13 = v9 - 3;
    if (__OFADD__(v11, 1))
      goto LABEL_31;
LABEL_12:
    v14 = *(_QWORD *)(v12 + 16);
    v15 = (uint64_t *)(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
    swift_beginAccess(v12 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, v44, 0, 0);
    v17 = *v15;
    v16 = v15[1];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    v20 = sub_3B7F8(v14);
    v21 = v7[2];
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      goto LABEL_32;
    v24 = v19;
    if (v7[3] >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v19 & 1) != 0)
          goto LABEL_5;
      }
      else
      {
        sub_F2B44();
        if ((v24 & 1) != 0)
          goto LABEL_5;
      }
    }
    else
    {
      sub_EE748(v23, isUniquelyReferenced_nonNull_native);
      v25 = sub_3B7F8(v14);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_34;
      v20 = v25;
      if ((v24 & 1) != 0)
      {
LABEL_5:
        v10 = (_QWORD *)(v7[7] + 16 * v20);
        *v10 = v17;
        v10[1] = v16;
        goto LABEL_6;
      }
    }
    v7[(v20 >> 6) + 8] |= 1 << v20;
    *(_QWORD *)(v7[6] + 8 * v20) = v14;
    v27 = (_QWORD *)(v7[7] + 16 * v20);
    *v27 = v17;
    v27[1] = v16;
    v28 = v7[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_33;
    v7[2] = v30;
LABEL_6:
    swift_release(v12);
    swift_bridgeObjectRelease(0x8000000000000000);
    ++v9;
    a1 = v42;
    if (v13 == v8)
    {
      swift_bridgeObjectRelease(v42);
      goto LABEL_30;
    }
  }
  v12 = *(_QWORD *)(a1 + 8 * v9);
  swift_retain(v12);
  v13 = v9 - 3;
  if (!__OFADD__(v11, 1))
    goto LABEL_12;
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
}

double sub_90DD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  __n128 v53;
  double result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  id v69[3];
  id v70;

  v65 = a2;
  v3 = sub_319AC((uint64_t *)&unk_3B8E48);
  v4 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  v68 = v4;
  __chkstk_darwin(v3);
  v66 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_319AC((uint64_t *)&unk_3B80B0);
  __chkstk_darwin(v6);
  v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_319AC(&qword_3B8E20);
  v55 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_319AC(&qword_3B8E58);
  v56 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_319AC(&qword_3B8E60);
  v16 = *(_QWORD *)(v15 - 8);
  v57 = v15;
  v58 = v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_319AC(&qword_3B8E68);
  v20 = *(_QWORD *)(v19 - 8);
  v60 = v19;
  v61 = v20;
  __chkstk_darwin(v19);
  v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = *a1;
  swift_beginAccess(v59 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity__paginationComplete, v69, 33, 0);
  v23 = sub_319AC((uint64_t *)&unk_3B8E70);
  Published.projectedValue.getter(v23);
  swift_endAccess(v69);
  v24 = sub_34450(0, (unint64_t *)&qword_3B96E0, OS_dispatch_queue_ptr);
  v69[0] = (id)static OS_dispatch_queue.main.getter();
  v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v63 = v25;
  v62(v8, 1, 1, v25);
  v26 = sub_3DCC0(&qword_3B8100, &qword_3B8E20, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v64 = sub_49FA8();
  Publisher.receive<A>(on:options:)(v69, v8, v9, v24, v26, v64);
  sub_52128((uint64_t)v8, (uint64_t *)&unk_3B80B0);

  (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v9);
  v27 = sub_3DCC0(&qword_3B8E88, &qword_3B8E58, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  Publisher.dropFirst(_:)(1, v12, v27);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v14, v12);
  v28 = sub_3DCC0(&qword_3B8E90, &qword_3B8E60, (uint64_t)&protocol conformance descriptor for Publishers.Drop<A>);
  v29 = v57;
  Publisher<>.removeDuplicates()(v57, v28, &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v18, v29);
  v30 = swift_allocObject(&unk_37DBD8, 24, 7);
  v31 = v65;
  swift_unknownObjectWeakInit(v30 + 16, v65);
  v32 = swift_allocObject(&unk_37DC50, 32, 7);
  v33 = v59;
  *(_QWORD *)(v32 + 16) = v30;
  *(_QWORD *)(v32 + 24) = v33;
  v34 = sub_3DCC0(&qword_3B8E98, &qword_3B8E68, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  swift_retain(v33);
  v35 = v60;
  v36 = Publisher<>.sink(receiveValue:)(sub_9397C, v32, v60, v34);
  v37 = swift_release(v32);
  (*(void (**)(char *, uint64_t, __n128))(v61 + 8))(v22, v35, v37);
  v38 = v31 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentSubscriptions;
  v39 = swift_beginAccess(v31 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentSubscriptions, v69, 33, 0);
  AnyCancellable.store(in:)(v38, v39);
  swift_endAccess(v69);
  swift_release(v36);
  v69[0] = *(id *)(v33 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_dataUpdatedSubject);
  v40 = sub_319AC((uint64_t *)&unk_3B8EA0);
  v41 = sub_3DCC0((unint64_t *)&qword_3B8A10, (uint64_t *)&unk_3B8EA0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v69[0] = (id)Publisher.eraseToAnyPublisher()(v40, v41);
  v70 = (id)static OS_dispatch_queue.main.getter();
  v62(v8, 1, 1, v63);
  v42 = sub_319AC(&qword_3B8EB0);
  v43 = sub_3DCC0(&qword_3B8EB8, &qword_3B8EB0, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v44 = v66;
  Publisher.receive<A>(on:options:)(&v70, v8, v42, v24, v43, v64);
  sub_52128((uint64_t)v8, (uint64_t *)&unk_3B80B0);

  swift_release(v69[0]);
  v45 = swift_allocObject(&unk_37DBD8, 24, 7);
  swift_unknownObjectWeakInit(v45 + 16, v31);
  v46 = swift_allocObject(&unk_37DC78, 24, 7);
  swift_weakInit(v46 + 16, v33);
  v47 = swift_allocObject(&unk_37DCA0, 32, 7);
  *(_QWORD *)(v47 + 16) = v45;
  *(_QWORD *)(v47 + 24) = v46;
  v48 = swift_allocObject(&unk_37DCC8, 32, 7);
  *(_QWORD *)(v48 + 16) = sub_939B8;
  *(_QWORD *)(v48 + 24) = v47;
  v49 = sub_3DCC0((unint64_t *)&unk_3B8EC0, (uint64_t *)&unk_3B8E48, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v50 = v67;
  v51 = Publisher<>.sink(receiveValue:)(sub_542B4, v48, v67, v49);
  v52 = swift_release(v48);
  (*(void (**)(char *, uint64_t, __n128))(v68 + 8))(v44, v50, v52);
  v53 = swift_beginAccess(v38, v69, 33, 0);
  AnyCancellable.store(in:)(v38, v53);
  swift_endAccess(v69);
  *(_QWORD *)&result = swift_release(v51).n128_u64[0];
  return result;
}

void sub_91410(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v4 = *a1;
  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    if (v4)
      sub_91478(a3);

  }
}

void sub_91478(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double *v30;
  double v31;
  double v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[16];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v4 = swift_retain(a1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134217984;
    v49 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v7 + 4);
    swift_release(a1);
    _os_log_impl(&dword_0, v5, v6, "Adding document %ld information to our uber scroll container", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_release(a1);
  }

  v8 = (_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState);
  v9 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState);
  if (v9)
  {
    v11 = v8[2];
    v10 = v8[3];
    v12 = v8[1];
    sub_93838(*(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState), v12, v11, v10);
    swift_bridgeObjectRetain(v12);
    sub_939E4(v9, v12, v11, v10);
  }
  else
  {
    v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_state + 8);
    swift_bridgeObjectRetain(v12);
  }
  v13 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v12 + 16))
  {
    v14 = sub_3B7F8(*(_QWORD *)(a1 + 16));
    if ((v15 & 1) != 0)
    {
      v16 = (double *)(*(_QWORD *)(v12 + 56) + 16 * v14);
      v17 = *v16;
      v18 = v16[1];
      v19 = swift_retain_n(a1, 3);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = swift_slowAlloc(32, -1);
        v45 = swift_slowAlloc(64, -1);
        v46 = v13;
        v49 = v45;
        *(_DWORD *)v22 = 134218498;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v22 + 4);
        swift_release(a1);
        *(_WORD *)(v22 + 12) = 2080;
        v23 = CGSize.debugDescription.getter(v17, v18);
        v25 = v24;
        v46 = sub_33524(v23, v24, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v22 + 14);
        swift_bridgeObjectRelease(v25);
        *(_WORD *)(v22 + 22) = 2080;
        v26 = (double *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
        swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, &v46, 0, 0);
        v27 = CGSize.debugDescription.getter(*v26, v26[1]);
        v29 = v28;
        v48 = sub_33524(v27, v28, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v22 + 24);
        swift_release_n(a1, 2);
        swift_bridgeObjectRelease(v29);
        _os_log_impl(&dword_0, v20, v21, "Updating ordinal: %ld from %s to %s", (uint8_t *)v22, 0x20u);
        swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1, -1);
        swift_slowDealloc(v22, -1, -1);
      }
      else
      {
        swift_release_n(a1, 3);
      }

    }
  }
  v30 = (double *)(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize);
  swift_beginAccess(a1 + OBJC_IVAR____TtC8BookEPUB24DocumentPaginationEntity_contentSize, &v49, 0, 0);
  v31 = *v30;
  v32 = v30[1];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
  v48 = v12;
  sub_17DCD4(v13, isUniquelyReferenced_nonNull_native, v31, v32);
  v34 = v48;
  swift_bridgeObjectRelease(0x8000000000000000);
  v35 = swift_bridgeObjectRetain(v34);
  sub_920E8(v35);
  v37 = v36;
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRetain(v34);
  v38 = sub_93B5C(v37, v34);
  v40 = v39;
  v42 = v41;
  v44 = v43;
  sub_8C4B0(v38, v39, v41, v43);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v44);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v40);
  swift_bridgeObjectRelease(v38);
}

void sub_91890(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = a2 + 16;
    swift_beginAccess(v6, &v9, 0, 0);
    v7 = swift_weakLoadStrong(v6);
    if (v7)
    {
      v8 = v7;
      sub_91478(v7);

      swift_release(v8);
    }
    else
    {

    }
  }
}

uint64_t sub_9191C(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  char v4;
  uint64_t result;

  v3 = *a1;
  if ((*(_BYTE *)(*a1 + 97) & 1) == 0)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return a2(v3);
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574616E69676170, 0xE900000000000064, 0x6C6C6F726373, 0xE600000000000000, 0);
  result = swift_bridgeObjectRelease(0xE900000000000064);
  if ((v4 & 1) != 0)
    return a2(v3);
  return result;
}

uint64_t sub_919A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[24];
  _BYTE v18[24];
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginationCompleteSubscription;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginationCompleteSubscription, v18, 0, 0);
  sub_93884(v2, (uint64_t)&v19);
  if (*((_QWORD *)&v20 + 1))
  {
    sub_49F1C((uint64_t)&v19, (uint64_t)v13);
    sub_52128((uint64_t)&v19, (uint64_t *)&unk_3B8E28);
    v3 = v14;
    v4 = v15;
    sub_472D0(v13, v14);
    dispatch thunk of Cancellable.cancel()(v3, v4);
    sub_34488(v13);
  }
  else
  {
    sub_52128((uint64_t)&v19, (uint64_t *)&unk_3B8E28);
  }
  v21 = 0;
  v20 = 0u;
  v19 = 0u;
  swift_beginAccess(v2, v13, 33, 0);
  sub_9390C((uint64_t)&v19, v2);
  swift_endAccess(v13);
  v5 = (_QWORD *)(v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentSubscriptions);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentSubscriptions, v17, 1, 0);
  v6 = *v5;
  v7 = swift_bridgeObjectRetain(*v5);
  sub_7245C(v7);
  swift_bridgeObjectRelease(v6);
  v8 = *v5;
  *v5 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v8);
  v9 = v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_bookPaginationSubscription;
  swift_beginAccess(v9, v16, 0, 0);
  sub_93884(v9, (uint64_t)&v19);
  if (*((_QWORD *)&v20 + 1))
  {
    sub_49F1C((uint64_t)&v19, (uint64_t)v13);
    sub_52128((uint64_t)&v19, (uint64_t *)&unk_3B8E28);
    v10 = v14;
    v11 = v15;
    sub_472D0(v13, v14);
    dispatch thunk of Cancellable.cancel()(v10, v11);
    sub_34488(v13);
  }
  else
  {
    sub_52128((uint64_t)&v19, (uint64_t *)&unk_3B8E28);
  }
  v21 = 0;
  v20 = 0u;
  v19 = 0u;
  swift_beginAccess(v9, v13, 33, 0);
  sub_9390C((uint64_t)&v19, v9);
  return swift_endAccess(v13);
}

uint64_t sub_91BB8(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v21 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v1);
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    v19 = swift_retain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v19);
    swift_bridgeObjectRelease(v1);
    swift_release(v2);
    v20 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v20 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v8 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        v9 = v21;
        if ((v21 & 0xC000000000000001) != 0)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v21);
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - (v5 + 1), v21);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v10 = *(_QWORD *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8));
          if (v5 >= v10)
            goto LABEL_34;
          v11 = *(id *)(v21 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v10)
            goto LABEL_37;
          v12 = (uint64_t)v11;
          v13 = *(id *)(v21 + 32 + 8 * v1);
        }
        v14 = v13;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v21)
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v9 = sub_E3A24(v21);
          v21 = v9;
        }
        v15 = (v9 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v15 + 32) = v14;
        specialized Array._endMutation()(v16);
        v17 = v21;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v21)
          || v21 < 0
          || (v21 & 0x4000000000000000) != 0)
        {
          v17 = sub_E3A24(v21);
          v21 = v17;
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((char *)&dword_10 + (v17 & 0xFFFFFFFFFFFFFF8)))
          goto LABEL_38;
        v6 = (v17 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(_QWORD *)(v6 + 32) = v12;
        specialized Array._endMutation()(v7);
      }
      v5 = v8;
      if (v4 == v8)
        return v21;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)sub_F466C(v1);
    v21 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t sub_91DD0(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = v2 >> 1;
  v5 = v2 - 1;
  v6 = 3 * v2;
  v7 = 5;
  while (1)
  {
    if (v3 == v5)
      goto LABEL_5;
    v10 = v1[2];
    if (v3 >= v10)
      break;
    if (v5 >= v10)
      goto LABEL_12;
    v11 = v1[v7 - 1];
    v12 = v1[v6 + 1];
    v13 = *(_OWORD *)&v1[v6 + 2];
    v14 = *(_OWORD *)&v1[v7];
    result = swift_isUniquelyReferenced_nonNull_native(v1);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_E3A78(v1);
      v1 = (_QWORD *)result;
    }
    v8 = &v1[v7];
    *((_QWORD *)v8 - 1) = v12;
    *v8 = v13;
    v9 = &v1[v6];
    v9[1] = v11;
    *((_OWORD *)v9 + 1) = v14;
LABEL_5:
    ++v3;
    v7 += 3;
    --v5;
    v6 -= 3;
    if (v4 == v3)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_91ECC(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v19 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease(v1);
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    v17 = swift_retain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v1);
    swift_release(v2);
    v18 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v18 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v8 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        v9 = v19;
        if ((v19 & 0xC000000000000001) != 0)
        {
          v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v19);
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - (v5 + 1), v19);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v10 = *(_QWORD *)((char *)&dword_10 + (v19 & 0xFFFFFFFFFFFFF8));
          if (v5 >= v10)
            goto LABEL_34;
          v11 = *(_QWORD *)(v19 + 8 * v5 + 32);
          swift_retain(v11);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v10)
            goto LABEL_37;
          v12 = *(_QWORD *)(v19 + 32 + 8 * v1);
          swift_retain(v12);
        }
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v19)
          || v19 < 0
          || (v19 & 0x4000000000000000) != 0)
        {
          v9 = sub_E3A24(v19);
          v19 = v9;
        }
        v13 = (v9 & 0xFFFFFFFFFFFFFF8) + 8 * v5;
        swift_release(*(_QWORD *)(v13 + 32));
        *(_QWORD *)(v13 + 32) = v12;
        specialized Array._endMutation()(v14);
        v15 = v19;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v19)
          || v19 < 0
          || (v19 & 0x4000000000000000) != 0)
        {
          v15 = sub_E3A24(v19);
          v19 = v15;
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((char *)&dword_10 + (v15 & 0xFFFFFFFFFFFFFF8)))
          goto LABEL_38;
        v6 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1;
        swift_release(*(_QWORD *)(v6 + 32));
        *(_QWORD *)(v6 + 32) = v11;
        specialized Array._endMutation()(v7);
      }
      v5 = v8;
      if (v4 == v8)
        return v19;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)sub_F4760(v1);
    v19 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

void sub_920E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  __n128 v15;
  double v16;
  void (*v17)(uint64_t *, _QWORD);
  double *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[4];
  double v40;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;

  v3 = (_QWORD *)sub_3D7C4((uint64_t)_swiftEmptyArrayStorage);
  v42 = 0;
  v43 = 0;
  v4 = swift_bridgeObjectRetain(a1);
  v5 = sub_F4A74(v4);
  swift_bridgeObjectRelease(a1);
  v39[0] = (uint64_t)v5;
  sub_92694(v39, sub_1D3520, &qword_3B8E00, (void (*)(_QWORD, _QWORD, _QWORD))sub_1D333C);
  v6 = v39[0];
  v7 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation) & 1) != 0
    && (v6 = sub_91DD0(v39[0]), (*(_BYTE *)(v1 + v7) & 1) != 0))
  {
    v8 = &unk_2E8550;
    v9 = &unk_2E8590;
  }
  else
  {
    v8 = &unk_2E8530;
    v9 = &unk_2E8570;
  }
  KeyPath = swift_getKeyPath(v9);
  v11 = swift_getKeyPath(v8);
  v12 = *(_QWORD *)(v6 + 16);
  if (!v12)
  {
    swift_release(KeyPath);
    v37 = v6;
LABEL_22:
    swift_bridgeObjectRelease(v37);
    swift_release(v11);
    return;
  }
  v38 = v6;
  v13 = (uint64_t *)(v6 + 48);
  while (1)
  {
    v19 = *(v13 - 2);
    v20 = *(v13 - 1);
    v21 = *v13;
    v23 = v42;
    v22 = v43;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    v39[0] = (uint64_t)v3;
    v26 = sub_3B7F8(v19);
    v27 = v3[2];
    v28 = (v25 & 1) == 0;
    v29 = v27 + v28;
    if (__OFADD__(v27, v28))
      break;
    v30 = v25;
    if (v3[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v3 = (_QWORD *)v39[0];
        if ((v25 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_F2D00();
        v3 = (_QWORD *)v39[0];
        if ((v30 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_EEA1C(v29, isUniquelyReferenced_nonNull_native);
      v31 = sub_3B7F8(v19);
      if ((v30 & 1) != (v32 & 1))
        goto LABEL_25;
      v26 = v31;
      v3 = (_QWORD *)v39[0];
      if ((v30 & 1) != 0)
      {
LABEL_7:
        v14 = (_QWORD *)(v3[7] + 16 * v26);
        *v14 = v23;
        v14[1] = v22;
        goto LABEL_8;
      }
    }
    v3[(v26 >> 6) + 8] |= 1 << v26;
    *(_QWORD *)(v3[6] + 8 * v26) = v19;
    v33 = (_QWORD *)(v3[7] + 16 * v26);
    *v33 = v23;
    v33[1] = v22;
    v34 = v3[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_24;
    v3[2] = v36;
LABEL_8:
    swift_bridgeObjectRelease(0x8000000000000000);
    v41[0] = v20;
    v41[1] = v21;
    swift_retain(v11);
    swift_getAtKeyPath(&v40, v41, v11);
    v15 = swift_release(v11);
    v16 = v40;
    v17 = (void (*)(uint64_t *, _QWORD))swift_modifyAtWritableKeyPath(v39, &v42, KeyPath, v15);
    *v18 = v16 + *v18;
    v17(v39, 0);
    v13 += 3;
    if (!--v12)
    {
      swift_release(KeyPath);
      v37 = v38;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
  swift_release(v19);
  __break(1u);
}

uint64_t destroy for UberScrollContainerView.DocumentDataState(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for UberScrollContainerView.DocumentDataState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for UberScrollContainerView.DocumentDataState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for UberScrollContainerView.DocumentDataState(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for UberScrollContainerView.DocumentDataState()
{
  return &type metadata for UberScrollContainerView.DocumentDataState;
}

void sub_92694(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t *a3, void (*a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10[2];

  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = a2(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v10[0] = v8 + 32;
  v10[1] = v9;
  sub_92728(v10, a3, a4);
  *a1 = v8;
}

uint64_t sub_92718()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_92728(uint64_t *a1, uint64_t *a2, void (*a3)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  Swift::Int v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  _QWORD *v109;
  Swift::Int v110;
  Swift::Int v111;
  uint64_t v112;
  char *v113;

  v6 = a1[1];
  v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if ((v6 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v6 < 2)
        return;
      v91 = 0;
      v92 = *a1;
      v93 = 1;
      while (1)
      {
        v94 = *(_QWORD *)(v92 + 24 * v93);
        v95 = v91;
        do
        {
          v96 = v92 + v95;
          if (v94 >= *(_QWORD *)(v92 + v95))
            break;
          if (!v92)
            goto LABEL_142;
          v97 = v92 + v95;
          v98 = *(_OWORD *)(v92 + v95 + 32);
          *(_OWORD *)(v92 + v95 + 24) = *(_OWORD *)v96;
          *(_QWORD *)(v92 + v95 + 40) = *(_QWORD *)(v96 + 16);
          *(_QWORD *)v97 = v94;
          *(_OWORD *)(v97 + 8) = v98;
          v95 -= 24;
        }
        while (v95 != -24);
        ++v93;
        v91 += 24;
        if (v93 == v6)
          return;
      }
    }
    goto LABEL_138;
  }
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  if (v6 < -1)
  {
LABEL_147:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return;
  }
  v110 = v7;
  v107 = a1;
  if (v6 < 2)
  {
    v12 = _swiftEmptyArrayStorage;
    v113 = (char *)&_swiftEmptyArrayStorage[4];
    if (v6 != 1)
    {
      v16 = _swiftEmptyArrayStorage[2];
      v15 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_103;
    }
    v109 = _swiftEmptyArrayStorage;
  }
  else
  {
    v9 = v8 >> 1;
    v10 = sub_319AC(a2);
    v11 = static Array._allocateBufferUninitialized(minimumCapacity:)(v9, v10);
    *(_QWORD *)(v11 + 16) = v9;
    v109 = (_QWORD *)v11;
    v113 = (char *)(v11 + 32);
  }
  v13 = 0;
  v14 = *a1;
  v108 = *a1 + 48;
  v106 = *a1 - 24;
  v15 = (char *)_swiftEmptyArrayStorage;
  v111 = v6;
  v112 = *a1;
  while (1)
  {
    v17 = v13++;
    if (v13 < v6)
    {
      v18 = *(_QWORD *)(v14 + 24 * v13);
      v19 = *(_QWORD *)(v14 + 24 * v17);
      v13 = v17 + 2;
      if (v17 + 2 < v6)
      {
        v20 = (uint64_t *)(v108 + 24 * v17);
        v21 = v18;
        while (1)
        {
          v23 = *v20;
          v20 += 3;
          v22 = v23;
          if (v18 < v19 == v23 >= v21)
            break;
          ++v13;
          v21 = v22;
          if (v6 == v13)
          {
            v13 = v6;
            break;
          }
        }
      }
      if (v18 < v19)
      {
        if (v13 < v17)
          goto LABEL_139;
        if (v17 < v13)
        {
          v24 = 24 * v13;
          v25 = 24 * v17;
          v26 = v13;
          v27 = v17;
          do
          {
            if (v27 != --v26)
            {
              if (!v14)
                goto LABEL_145;
              v28 = v14 + v25;
              v29 = v14 + v24;
              v30 = *(_QWORD *)(v14 + v25);
              v31 = *(_OWORD *)(v14 + v25 + 8);
              v32 = *(_OWORD *)(v14 + v24 - 24);
              *(_QWORD *)(v28 + 16) = *(_QWORD *)(v14 + v24 - 8);
              *(_OWORD *)v28 = v32;
              *(_QWORD *)(v29 - 24) = v30;
              *(_OWORD *)(v29 - 16) = v31;
            }
            ++v27;
            v24 -= 24;
            v25 += 24;
          }
          while (v27 < v26);
        }
      }
    }
    if (v13 < v6)
    {
      if (__OFSUB__(v13, v17))
        goto LABEL_137;
      if (v13 - v17 < v110)
      {
        v33 = v17 + v110;
        if (__OFADD__(v17, v110))
          goto LABEL_140;
        if (v33 >= v6)
          v33 = v6;
        if (v33 < v17)
          goto LABEL_141;
        if (v13 != v33)
        {
          v34 = v106 + 24 * v13;
          do
          {
            v35 = *(_QWORD *)(v14 + 24 * v13);
            v36 = v17;
            v37 = v34;
            do
            {
              if (v35 >= *(_QWORD *)v37)
                break;
              if (!v14)
                goto LABEL_143;
              v38 = *(_OWORD *)(v37 + 32);
              *(_OWORD *)(v37 + 24) = *(_OWORD *)v37;
              *(_QWORD *)(v37 + 40) = *(_QWORD *)(v37 + 16);
              *(_QWORD *)v37 = v35;
              *(_OWORD *)(v37 + 8) = v38;
              v37 -= 24;
              ++v36;
            }
            while (v13 != v36);
            ++v13;
            v34 += 24;
          }
          while (v13 != v33);
          v13 = v33;
        }
      }
    }
    if (v13 < v17)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
      v15 = sub_1D3038(0, *((_QWORD *)v15 + 2) + 1, 1, v15);
    v40 = *((_QWORD *)v15 + 2);
    v39 = *((_QWORD *)v15 + 3);
    v16 = v40 + 1;
    v14 = v112;
    if (v40 >= v39 >> 1)
    {
      v88 = sub_1D3038((char *)(v39 > 1), v40 + 1, 1, v15);
      v14 = v112;
      v15 = v88;
    }
    *((_QWORD *)v15 + 2) = v16;
    v41 = v15 + 32;
    v42 = &v15[16 * v40 + 32];
    *(_QWORD *)v42 = v17;
    *((_QWORD *)v42 + 1) = v13;
    if (v40)
      break;
    v16 = 1;
LABEL_15:
    v6 = v111;
    if (v13 >= v111)
    {
      v12 = v109;
LABEL_103:
      v109 = v12;
      if (v16 < 2)
      {
LABEL_114:
        v90 = v15;
        goto LABEL_115;
      }
      v99 = *v107;
      while (1)
      {
        v100 = v16 - 2;
        if (v16 < 2)
          break;
        if (!v99)
          goto LABEL_146;
        v89 = v15;
        v101 = v15 + 32;
        v102 = *(_QWORD *)&v15[16 * v100 + 32];
        v103 = *(_QWORD *)&v101[16 * v16 - 8];
        sub_92E40((char *)(v99 + 24 * v102), (char *)(v99 + 24 * *(_QWORD *)&v101[16 * v16 - 16]), v99 + 24 * v103, v113, a3);
        if (v3)
          goto LABEL_94;
        if (v103 < v102)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
          v89 = sub_1D34BC((uint64_t)v89);
        if (v100 >= *((_QWORD *)v89 + 2))
          goto LABEL_135;
        v104 = &v89[16 * v100 + 32];
        *(_QWORD *)v104 = v102;
        *((_QWORD *)v104 + 1) = v103;
        v105 = *((_QWORD *)v89 + 2);
        if (v16 > v105)
          goto LABEL_136;
        memmove(&v89[16 * v16 + 16], &v89[16 * v16 + 32], 16 * (v105 - v16));
        v15 = v89;
        *((_QWORD *)v89 + 2) = v105 - 1;
        v16 = v105 - 1;
        if (v105 <= 2)
          goto LABEL_114;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v43 = v16 - 1;
    if (v16 >= 4)
    {
      v48 = &v41[16 * v16];
      v49 = *((_QWORD *)v48 - 8);
      v50 = *((_QWORD *)v48 - 7);
      v54 = __OFSUB__(v50, v49);
      v51 = v50 - v49;
      if (v54)
        goto LABEL_121;
      v53 = *((_QWORD *)v48 - 6);
      v52 = *((_QWORD *)v48 - 5);
      v54 = __OFSUB__(v52, v53);
      v46 = v52 - v53;
      v47 = v54;
      if (v54)
        goto LABEL_122;
      v55 = v16 - 2;
      v56 = &v41[16 * v16 - 32];
      v58 = *(_QWORD *)v56;
      v57 = *((_QWORD *)v56 + 1);
      v54 = __OFSUB__(v57, v58);
      v59 = v57 - v58;
      if (v54)
        goto LABEL_124;
      v54 = __OFADD__(v46, v59);
      v60 = v46 + v59;
      if (v54)
        goto LABEL_127;
      if (v60 >= v51)
      {
        v78 = &v41[16 * v43];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v54 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v54)
          goto LABEL_131;
        v71 = v46 < v81;
        goto LABEL_83;
      }
    }
    else
    {
      if (v16 != 3)
      {
        v72 = *((_QWORD *)v15 + 4);
        v73 = *((_QWORD *)v15 + 5);
        v54 = __OFSUB__(v73, v72);
        v65 = v73 - v72;
        v66 = v54;
        goto LABEL_77;
      }
      v45 = *((_QWORD *)v15 + 4);
      v44 = *((_QWORD *)v15 + 5);
      v54 = __OFSUB__(v44, v45);
      v46 = v44 - v45;
      v47 = v54;
    }
    if ((v47 & 1) != 0)
      goto LABEL_123;
    v55 = v16 - 2;
    v61 = &v41[16 * v16 - 32];
    v63 = *(_QWORD *)v61;
    v62 = *((_QWORD *)v61 + 1);
    v64 = __OFSUB__(v62, v63);
    v65 = v62 - v63;
    v66 = v64;
    if (v64)
      goto LABEL_126;
    v67 = &v41[16 * v43];
    v69 = *(_QWORD *)v67;
    v68 = *((_QWORD *)v67 + 1);
    v54 = __OFSUB__(v68, v69);
    v70 = v68 - v69;
    if (v54)
      goto LABEL_129;
    if (__OFADD__(v65, v70))
      goto LABEL_130;
    if (v65 + v70 >= v46)
    {
      v71 = v46 < v70;
LABEL_83:
      if (v71)
        v43 = v55;
      goto LABEL_85;
    }
LABEL_77:
    if ((v66 & 1) != 0)
      goto LABEL_125;
    v74 = &v41[16 * v43];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v54 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v54)
      goto LABEL_128;
    if (v77 < v65)
      goto LABEL_15;
LABEL_85:
    v82 = v43 - 1;
    if (v43 - 1 >= v16)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v14)
      goto LABEL_144;
    v83 = &v41[16 * v82];
    v84 = *(_QWORD *)v83;
    v85 = &v41[16 * v43];
    v86 = *((_QWORD *)v85 + 1);
    sub_92E40((char *)(v14 + 24 * *(_QWORD *)v83), (char *)(v14 + 24 * *(_QWORD *)v85), v14 + 24 * v86, v113, a3);
    if (v3)
      break;
    if (v86 < v84)
      goto LABEL_118;
    if (v43 > *((_QWORD *)v15 + 2))
      goto LABEL_119;
    *(_QWORD *)v83 = v84;
    *(_QWORD *)&v41[16 * v82 + 8] = v86;
    v87 = *((_QWORD *)v15 + 2);
    if (v43 >= v87)
      goto LABEL_120;
    v16 = v87 - 1;
    memmove(&v41[16 * v43], v85 + 16, 16 * (v87 - 1 - v43));
    *((_QWORD *)v15 + 2) = v87 - 1;
    v14 = v112;
    if (v87 <= 2)
      goto LABEL_15;
  }
  v89 = v15;
LABEL_94:
  v90 = v89;
LABEL_115:
  swift_bridgeObjectRelease(v90);
  v109[2] = 0;
  swift_bridgeObjectRelease(v109);
}

uint64_t sub_92E40(char *__src, char *a2, unint64_t a3, char *__dst, void (*a5)(_QWORD, _QWORD, _QWORD))
{
  char *v5;
  char *v7;
  char *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, _QWORD, _QWORD);
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  char *v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  char *v27;
  char *v28;
  char *v29;

  v5 = __dst;
  v7 = a2;
  v8 = __src;
  v9 = a2 - __src;
  v10 = (a2 - __src) / 24;
  v11 = a3 - (_QWORD)a2;
  v12 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v29 = __src;
  v28 = __dst;
  if (v10 >= v12)
  {
    if (v11 >= -23)
    {
      if (__dst != a2 || &a2[24 * v12] <= __dst)
      {
        v18 = a5;
        memmove(__dst, a2, 24 * v12);
        a5 = v18;
      }
      v19 = &v5[24 * v12];
      v27 = v19;
      v29 = v7;
      if (v8 < v7 && v11 >= 24)
      {
        v20 = a3 - 24;
        v21 = v7;
        while (1)
        {
          v22 = (char *)(v20 + 24);
          v23 = *((_QWORD *)v21 - 3);
          v21 -= 24;
          if (*((_QWORD *)v19 - 3) >= v23)
          {
            v27 = v19 - 24;
            if (v22 < v19 || v20 >= (unint64_t)v19 || v22 != v19)
            {
              v25 = *(_OWORD *)(v19 - 24);
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 - 1);
              *(_OWORD *)v20 = v25;
            }
            v21 = v7;
            v19 -= 24;
            if (v7 <= v8)
              goto LABEL_38;
          }
          else
          {
            if (v22 != v7 || v20 >= (unint64_t)v7)
            {
              v24 = *(_OWORD *)v21;
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v21 + 2);
              *(_OWORD *)v20 = v24;
            }
            v29 = v21;
            if (v21 <= v8)
              goto LABEL_38;
          }
          v20 -= 24;
          v7 = v21;
          if (v19 <= v5)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v9 >= -23)
  {
    if (__dst != __src || &__src[24 * v10] <= __dst)
    {
      v13 = a5;
      memmove(__dst, __src, 24 * v10);
      a5 = v13;
    }
    v14 = &v5[24 * v10];
    v27 = v14;
    if ((unint64_t)v7 < a3 && v9 >= 24)
    {
      do
      {
        if (*(_QWORD *)v7 >= *(_QWORD *)v5)
        {
          if (v8 != v5)
          {
            v17 = *(_OWORD *)v5;
            *((_QWORD *)v8 + 2) = *((_QWORD *)v5 + 2);
            *(_OWORD *)v8 = v17;
          }
          v5 += 24;
          v28 = v5;
          v15 = v7;
        }
        else
        {
          v15 = v7 + 24;
          if (v8 < v7 || v8 >= v15 || v8 != v7)
          {
            v16 = *(_OWORD *)v7;
            *((_QWORD *)v8 + 2) = *((_QWORD *)v7 + 2);
            *(_OWORD *)v8 = v16;
          }
        }
        v8 += 24;
        if (v5 >= v14)
          break;
        v7 = v15;
      }
      while ((unint64_t)v15 < a3);
      v29 = v8;
    }
LABEL_38:
    a5(&v29, &v28, &v27);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_93108(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5, void (*a6)(void), void (*a7)(void))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  char v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57;

  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  v13 = sub_933EC();
  if ((v16 & 1) != 0)
    goto LABEL_23;
  v17 = v13;
  v55 = a6;
  v56 = v14;
  v57 = v15;
  v18 = (_QWORD *)*a5;
  v20 = sub_3B7F8(v13);
  v21 = v18[2];
  v22 = (v19 & 1) == 0;
  if (__OFADD__(v21, v22))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v23 = v19;
  if (v18[3] >= v21 + v22)
  {
    if ((a4 & 1) != 0)
    {
      v26 = (_QWORD *)*a5;
      if ((v19 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      v55();
      v26 = (_QWORD *)*a5;
      if ((v23 & 1) != 0)
        goto LABEL_9;
    }
LABEL_11:
    v26[(v20 >> 6) + 8] |= 1 << v20;
    *(_QWORD *)(v26[6] + 8 * v20) = v17;
    v28 = (_QWORD *)(v26[7] + 16 * v20);
    *v28 = v56;
    v28[1] = v57;
    v29 = v26[2];
    v30 = __OFADD__(v29, 1);
    v31 = v29 + 1;
    if (v30)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v26[2] = v31;
LABEL_13:
    v32 = sub_933EC();
    if ((v35 & 1) == 0)
    {
      v36 = v32;
      v37 = v33;
      v38 = v34;
      do
      {
        v43 = (_QWORD *)*a5;
        v44 = sub_3B7F8(v36);
        v46 = v43[2];
        v47 = (v45 & 1) == 0;
        v30 = __OFADD__(v46, v47);
        v48 = v46 + v47;
        if (v30)
          goto LABEL_24;
        v49 = v45;
        if (v43[3] < v48)
        {
          ((void (*)(uint64_t, uint64_t))a7)(v48, 1);
          v44 = sub_3B7F8(v36);
          if ((v49 & 1) != (v50 & 1))
            goto LABEL_26;
        }
        v51 = (_QWORD *)*a5;
        if ((v49 & 1) != 0)
        {
          v39 = (_QWORD *)(v51[7] + 16 * v44);
          *v39 = v37;
          v39[1] = v38;
        }
        else
        {
          v51[(v44 >> 6) + 8] |= 1 << v44;
          *(_QWORD *)(v51[6] + 8 * v44) = v36;
          v52 = (_QWORD *)(v51[7] + 16 * v44);
          *v52 = v37;
          v52[1] = v38;
          v53 = v51[2];
          v30 = __OFADD__(v53, 1);
          v54 = v53 + 1;
          if (v30)
            goto LABEL_25;
          v51[2] = v54;
        }
        v36 = sub_933EC();
        v37 = v40;
        v38 = v41;
      }
      while ((v42 & 1) == 0);
    }
LABEL_23:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_89AA0(a1);
    swift_release(a3);
    return;
  }
  a7();
  v24 = sub_3B7F8(v17);
  if ((v23 & 1) == (v25 & 1))
  {
    v20 = v24;
    v26 = (_QWORD *)*a5;
    if ((v23 & 1) == 0)
      goto LABEL_11;
LABEL_9:
    v27 = (_QWORD *)(v26[7] + 16 * v20);
    *v27 = v56;
    v27[1] = v57;
    goto LABEL_13;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
  __break(1u);
}

__n128 sub_933D8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_933EC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *__return_ptr, uint64_t *);
  __int128 v10;
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v8 = *(_QWORD *)(v1 + 48);
    v7 = *(_QWORD *)(v1 + 56);
    v9 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[5];
    v19 = *(_QWORD *)(v8 + 8 * v6);
    v10 = *(_OWORD *)(v7 + 16 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v20 = v10;
    v9(&v18, &v19);
    return v18;
  }
  v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      v14 = v0[1];
      v15 = *(_QWORD *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        v5 = (v15 - 1) & v15;
        v6 = __clz(__rbit64(v15)) + (v12 << 6);
        v4 = v12;
        goto LABEL_3;
      }
      v16 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          v12 = v16;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          v15 = *(_QWORD *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            v12 = v3 + 3;
            goto LABEL_7;
          }
          v16 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            v15 = *(_QWORD *)(v14 + 8 * v16);
            if (v15)
              goto LABEL_10;
            v12 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              v15 = *(_QWORD *)(v14 + 8 * v12);
              if (v15)
                goto LABEL_7;
              v4 = v13 - 1;
              v17 = v3 + 6;
              while (v13 != v17)
              {
                v15 = *(_QWORD *)(v14 + 8 * v17++);
                if (v15)
                {
                  v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_9355C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 16 * v6;
    v8 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v9 = *v8;
    v10 = v8[1];
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v7);
    v12 = *v11;
    v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    v14 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    v14(&v22, v23);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v10);
    return v22;
  }
  v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      v18 = v0[1];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        v5 = (v19 - 1) & v19;
        v6 = __clz(__rbit64(v19)) + (v16 << 6);
        v4 = v16;
        goto LABEL_3;
      }
      v20 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          v16 = v20;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            v16 = v3 + 3;
            goto LABEL_7;
          }
          v20 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v20);
            if (v19)
              goto LABEL_10;
            v16 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              v19 = *(_QWORD *)(v18 + 8 * v16);
              if (v19)
                goto LABEL_7;
              v4 = v17 - 1;
              v21 = v3 + 6;
              while (v17 != v21)
              {
                v19 = *(_QWORD *)(v18 + 8 * v21++);
                if (v19)
                {
                  v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_936F8(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *v13;

  _StringGuts.grow(_:)(66);
  v4._countAndFlagsBits = 60;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._object = (void *)0x80000000002E8450;
  v5._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xD00000000000001ELL;
  v6._object = (void *)0x80000000002C8E90;
  String.append(_:)(v6);
  swift_bridgeObjectRetain(a1);
  v7 = sub_319AC(&qword_3B8DF8);
  v8._countAndFlagsBits = Array.description.getter(a1, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0xD00000000000001DLL;
  v10._object = (void *)0x80000000002C8EB0;
  String.append(_:)(v10);
  swift_bridgeObjectRetain(a2);
  v11 = sub_319AC(&qword_3B8E00);
  v12._countAndFlagsBits = Array.description.getter(a2, v11);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v13);
  return 0;
}

uint64_t sub_93838(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_93884(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC((uint64_t *)&unk_3B8E28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_938CC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_938F0()
{
  return sub_86B2C((void (*)(_QWORD))&_swift_unknownObjectRelease, 40);
}

void sub_93900(unsigned __int8 *a1)
{
  uint64_t *v1;

  sub_8FB58(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_9390C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_319AC((uint64_t *)&unk_3B8E28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_93954(uint64_t a1)
{
  uint64_t v1;

  sub_905E8(a1, v1);
}

uint64_t sub_9395C(uint64_t *a1)
{
  uint64_t v1;

  return sub_9191C(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_9396C()
{
  return sub_86B2C((void (*)(_QWORD))&_swift_release, 32);
}

void sub_9397C(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_91410(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_93984()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_939A8()
{
  return sub_86B2C((void (*)(_QWORD))&_swift_release, 32);
}

void sub_939B8()
{
  uint64_t v0;

  sub_91890(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_939C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_939E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_93A30(uint64_t result, uint64_t a2, double a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v3 = 0;
  v4 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v8)
      return result;
    v13 = *(_QWORD *)(v4 + 8 * v12);
    ++v3;
    if (!v13)
    {
      v3 = v12 + 1;
      if (v12 + 1 >= v8)
        return result;
      v13 = *(_QWORD *)(v4 + 8 * v3);
      if (!v13)
      {
        v3 = v12 + 2;
        if (v12 + 2 >= v8)
          return result;
        v13 = *(_QWORD *)(v4 + 8 * v3);
        if (!v13)
        {
          v3 = v12 + 3;
          if (v12 + 3 >= v8)
            return result;
          v13 = *(_QWORD *)(v4 + 8 * v3);
          if (!v13)
            break;
        }
      }
    }
LABEL_24:
    v7 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v3 << 6);
LABEL_5:
    v11 = (double *)(*(_QWORD *)(result + 56) + 16 * v10);
    if (!*(_BYTE *)(a2 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_orientation))
      ++v11;
    a3 = a3 + *v11;
  }
  v14 = v12 + 4;
  if (v14 >= v8)
    return result;
  v13 = *(_QWORD *)(v4 + 8 * v14);
  if (v13)
  {
    v3 = v14;
    goto LABEL_24;
  }
  while (1)
  {
    v3 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v3 >= v8)
      return result;
    v13 = *(_QWORD *)(v4 + 8 * v3);
    ++v14;
    if (v13)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_93B5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;

  v4 = swift_bridgeObjectRetain(a1);
  v5 = sub_F4A88(v4);
  swift_bridgeObjectRelease(a1);
  v9 = v5;
  sub_92694((uint64_t *)&v9, sub_1D3534, &qword_3B8DF8, (void (*)(_QWORD, _QWORD, _QWORD))sub_1D333C);
  v6 = swift_bridgeObjectRetain(a2);
  v7 = sub_F4A74(v6);
  swift_bridgeObjectRelease(a2);
  v9 = v7;
  sub_92694((uint64_t *)&v9, sub_1D3520, &qword_3B8E00, (void (*)(_QWORD, _QWORD, _QWORD))sub_1D333C);
  return a1;
}

void sub_93C40(uint64_t a1)
{
  uint64_t v1;

  sub_8C8BC(a1, v1);
}

void sub_93C48()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t ObjectType;
  Swift::String v15;
  void *object;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginatingService];
  *((_QWORD *)v2 + 1) = 0;
  swift_unknownObjectWeakInit(v2, 0);
  swift_weakInit(&v0[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_layoutController], 0);
  v3 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_viewDocumentMap;
  *(_QWORD *)&v1[v3] = objc_msgSend((id)objc_opt_self(NSMapTable), "weakToStrongObjectsMapTable");
  v4 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentViewMap;
  *(_QWORD *)&v1[v4] = objc_msgSend((id)objc_opt_self(NSMapTable), "strongToWeakObjectsMapTable");
  v5 = &v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_scrollDelegate];
  *((_QWORD *)v5 + 1) = 0;
  swift_unknownObjectWeakInit(v5, 0);
  v6 = &v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_locationProvider];
  *((_QWORD *)v6 + 1) = 0;
  swift_unknownObjectWeakInit(v6, 0);
  v7 = &v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_pendingState];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v8 = &v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_paginationCompleteSubscription];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_QWORD *)v8 + 4) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_documentSubscriptions] = &_swiftEmptySetSingleton;
  v9 = &v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_bookPaginationSubscription];
  *(_OWORD *)v9 = 0u;
  *((_OWORD *)v9 + 1) = 0u;
  *((_QWORD *)v9 + 4) = 0;
  v10 = &v1[OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_updateStateCancellable];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_QWORD *)v10 + 4) = 0;
  v11 = OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_log;
  if (qword_3B56F0 != -1)
    swift_once(&qword_3B56F0, sub_8A4D8);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_555F0(v12, (uint64_t)qword_3CEFD0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(&v1[v11], v13, v12);
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  ObjectType = swift_getObjectType(v1);
  v15._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._countAndFlagsBits = 8254;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = 0x646F632874696E69;
  v18._object = (void *)0xEC000000293A7265;
  String.append(_:)(v18);
  v19._object = (void *)0x80000000002C8F80;
  v19._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v19);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 60, 0xE100000000000000, "BookEPUB/UberScrollContainerView.swift", 38, 2, 193, 0);
  __break(1u);
}

double sub_93EB0()
{
  uint64_t v0;
  uint64_t Strong;
  double result;
  uint64_t v3;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_scrollDelegate);
  if (Strong)
  {
    *(_BYTE *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_updateLocationOnScroll) = 1;
    *(_BYTE *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_userIsScrolling) = 1;
    if ((*(_QWORD *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_layout) & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      v3 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingLoupeStateController);
      if (*(_BYTE *)(v3 + 192) == 1)
        *(_BYTE *)(v3 + 193) = 1;
    }
    *(_QWORD *)&result = swift_unknownObjectRelease(Strong).n128_u64[0];
  }
  return result;
}

double sub_93F3C(char a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  uint64_t v4;
  uint64_t v5;

  if ((a1 & 1) == 0)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_scrollDelegate);
    if (Strong)
    {
      v4 = Strong;
      v5 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingLoupeStateController);
      *(_BYTE *)(v5 + 193) = 0;
      if (*(_BYTE *)(v5 + 192) == 1)
        BookContentViewController.updateScrollingReadingLoupe()();
      *(_QWORD *)&result = swift_unknownObjectRelease(v4).n128_u64[0];
    }
  }
  return result;
}

double sub_93FA4()
{
  uint64_t v0;
  uint64_t Strong;
  double result;
  uint64_t v3;
  uint64_t v4;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC8BookEPUB23UberScrollContainerView_scrollDelegate);
  if (Strong)
  {
    v3 = Strong;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_userIsScrolling) == 1)
    {
      *(_BYTE *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_userIsScrolling) = 0;
      v4 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8BookEPUB25BookContentViewController_readingLoupeStateController);
      *(_BYTE *)(v4 + 193) = 0;
      if (*(_BYTE *)(v4 + 192) == 1)
        BookContentViewController.updateScrollingReadingLoupe()();
    }
    *(_QWORD *)&result = swift_unknownObjectRelease(v3).n128_u64[0];
  }
  return result;
}

Swift::Void __swiftcall ContentLoader.setIgnorePageTurnGestures(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  id v9;

  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
  if (Strong)
  {
    v9 = (id)Strong;
    v4 = Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler;
    v5 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v4 + 8);
      ObjectType = swift_getObjectType(v5);
      (*(void (**)(id, Swift::Bool, uint64_t, uint64_t))(v7 + 48))(v9, a1, ObjectType, v7);

      swift_unknownObjectRelease(v6);
    }
    else
    {

    }
  }
}

void ContentLoader.adjustGestures(for:view:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  double v14;
  id v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t (*v20)(uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  _QWORD v31[3];

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_2E85B8);
  swift_getKeyPath(&unk_2E85E0);
  static Published.subscript.getter(v31, v3, KeyPath);
  swift_release();
  swift_release();
  v7 = (void *)v31[0];
  if (v31[0])
  {
    v8 = objc_opt_self(WKWebView);
    v9 = swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      v10 = (void *)v9;
      sub_34450(0, (unint64_t *)&qword_3B5C30, NSObject_ptr);
      v11 = objc_msgSend(v10, "be_textInputChild");
      LOBYTE(v10) = static NSObject.== infix(_:_:)(a2, v11);

      if ((v10 & 1) != 0)
      {
        v12 = objc_msgSend(a1, "loupeGesture");
        if (v12)
        {
          v13 = v12;
          v14 = 0.25;
          objc_msgSend(v12, "setMinimumPressDuration:", 0.25);
          v15 = v13;
          UIGestureRecognizer.be_allowedTouchTypes.setter((uint64_t)&off_3791A0);

          v16 = (uint64_t *)(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider);
          swift_beginAccess(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider, v31, 0, 0);
          v17 = *v16;
          if (*v16)
          {
            v18 = v16[1];
            ObjectType = swift_getObjectType(v17);
            v20 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v18 + 24);
            v21 = swift_unknownObjectRetain(v17);
            v22 = v20(ObjectType, v18, v21);
            swift_unknownObjectRelease(v17);
            v14 = 0.5;
            if (v22 != 2)
            {
              if (v22 == 3)
                v14 = 0.5;
              else
                v14 = 0.25;
            }
          }
          objc_msgSend(v15, "setBe_gestureDelay:", v14);
          objc_msgSend(v15, "addTarget:action:", v3, "handleLoupeGesture:");

        }
        v23 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusLongPressRecognizer;
        if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusLongPressRecognizer))
        {
          v24 = objc_msgSend(objc_allocWithZone((Class)UILongPressGestureRecognizer), "initWithTarget:action:", v3, "handleStylusGesture:");
          objc_msgSend(v24, "setDelegate:", v3);
          v25 = v24;
          UIGestureRecognizer.be_allowedTouchTypes.setter((uint64_t)&off_3791C8);

          objc_msgSend(a2, "addGestureRecognizer:", v25);
          v26 = *(void **)(v3 + v23);
          *(_QWORD *)(v3 + v23) = v25;

        }
        v27 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusPanRecognizer;
        if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusPanRecognizer))
        {
          v28 = objc_msgSend(objc_allocWithZone((Class)UIPanGestureRecognizer), "initWithTarget:action:", v3, "handleStylusGesture:");
          objc_msgSend(v28, "setDelegate:", v3);
          v29 = v28;
          UIGestureRecognizer.be_allowedTouchTypes.setter((uint64_t)&off_3791F0);

          objc_msgSend(a2, "addGestureRecognizer:", v29);
          v30 = *(void **)(v3 + v27);
          *(_QWORD *)(v3 + v27) = v29;

          v7 = v30;
        }
      }
    }

  }
}

void sub_944BC(void *a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;

  KeyPath = swift_getKeyPath(&unk_2E85B8);
  swift_getKeyPath(&unk_2E85E0);
  static Published.subscript.getter(&v14, v1, KeyPath);
  swift_release();
  swift_release();
  v4 = v14;
  if (v14)
  {
    v5 = objc_opt_self(WKWebView);
    v6 = swift_dynamicCastObjCClass(v4, v5);
    if (v6)
    {
      v7 = (void *)v6;
      v8 = objc_msgSend(a1, "state");
      v9 = objc_msgSend(v7, "be_textInputChild");
      objc_msgSend(a1, "locationInView:", v9);
      v11 = v10;
      v13 = v12;

      sub_945D0((uint64_t)v8, v7, 0, v11, v13);
    }

  }
}

void sub_945D0(uint64_t a1, void *a2, char a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  double v32;
  double v33;
  double v34;
  double *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, __n128);
  __n128 v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  NSObject *oslog;
  _BYTE v56[24];
  _QWORD aBlock[6];

  v6 = v5;
  v12 = sub_730FC();
  if ((v13 & 1) != 0)
  {
    oslog = Logger.logObject.getter(v12);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_0, oslog, v23, "Attempted to handle text interaction with no document or ordinal. Ignoring.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }
    goto LABEL_10;
  }
  v14 = v12;
  if ((unint64_t)(a1 - 4) < 2)
  {
    *(_BYTE *)(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState) = 0;
    v25 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer;
    objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer), "invalidate");
    v26 = *(void **)(v6 + v25);
    *(_QWORD *)(v6 + v25) = 0;

    Strong = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
    if (!Strong)
      return;
    oslog = Strong;
    v28 = Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler;
    v29 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler);
    if (v29)
    {
      v20 = v29;
      v30 = *(_QWORD *)(v28 + 8);
      ObjectType = swift_getObjectType(v29);
      (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v30 + 32))(oslog, v14, ObjectType, v30);
      goto LABEL_14;
    }
LABEL_10:

    return;
  }
  if (a1 == 1)
  {
    v32 = sub_94CE0(a2, a4, a5);
    v34 = v33;
    objc_msgSend(a2, "be_clearSelection");
    *(_BYTE *)(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState) = 1;
    v35 = (double *)(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusStartPoint);
    *v35 = v32;
    v35[1] = v34;
    if ((a3 & 1) != 0)
    {
      v36 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer;
      objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer), "invalidate");
      v37 = *(void **)(v5 + v36);
      *(_QWORD *)(v5 + v36) = 0;

      v38 = (uint64_t *)(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider);
      swift_beginAccess(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_currentLayoutProvider, v56, 0, 0);
      v39 = *v38;
      if (*v38)
      {
        v40 = v38[1];
        v41 = swift_getObjectType(v39);
        v42 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(v40 + 24);
        v43 = swift_unknownObjectRetain(v39);
        v44 = v42(v41, v40, v43);
        swift_unknownObjectRelease(v39);
        v45 = 0.5;
        if (v44 != 2)
        {
          if (v44 == 3)
            v45 = 0.5;
          else
            v45 = 0.25;
        }
      }
      else
      {
        v45 = 0.25;
      }
      v48 = objc_msgSend((id)objc_opt_self(NSTimer), "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", v6, "stylusTimerFired:", 0, 0, v45);
      v49 = *(void **)(v6 + v36);
      *(_QWORD *)(v6 + v36) = v48;

    }
    v50 = objc_msgSend(a2, "be_textInputChild");
    v51 = swift_allocObject(&unk_37DD50, 24);
    swift_unknownObjectWeakInit(v51 + 16, v6);
    v52 = swift_allocObject(&unk_37DD78, 32);
    *(_QWORD *)(v52 + 16) = v51;
    *(_QWORD *)(v52 + 24) = a2;
    aBlock[4] = sub_956DC;
    aBlock[5] = v52;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_525B8;
    aBlock[3] = &unk_37DD90;
    v53 = _Block_copy(aBlock);
    v54 = a2;
    swift_release();
    objc_msgSend(v50, "selectTextWithGranularity:atPoint:completionHandler:", 1, v53, v32, v34);
    _Block_release(v53);

    sub_94E34(v6, a3 & 1, v54, v14, v32, v34);
  }
  else
  {
    if (a1 == 3)
    {
      *(_BYTE *)(v5 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState) = 0;
      v15 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer;
      objc_msgSend(*(id *)(v6 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer), "invalidate");
      v16 = *(void **)(v6 + v15);
      *(_QWORD *)(v6 + v15) = 0;

      v17 = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
      if (!v17)
        return;
      oslog = v17;
      v18 = v17 + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler;
      v19 = swift_unknownObjectWeakLoadStrong(v17 + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler);
      if (v19)
      {
        v20 = v19;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = swift_getObjectType(v19);
        (*(void (**)(NSObject *, uint64_t, uint64_t, uint64_t))(v21 + 24))(oslog, v14, v22, v21);
LABEL_14:

        swift_unknownObjectRelease(v20);
        return;
      }
      goto LABEL_10;
    }
    v46 = sub_94CE0(a2, a4, a5);
    sub_94E34(v5, a3 & 1, a2, v14, v46, v47);
  }
}

void sub_94B70(void *a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t Strong;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  id v14;

  v2 = (char *)objc_msgSend(a1, "state");
  if ((unint64_t)(v2 - 3) >= 3)
  {
    if (v2 == (_BYTE *)&dword_0 + 1)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
      if (Strong)
      {
        v14 = (id)Strong;
        v10 = Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler;
        v11 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler);
        if (v11)
        {
          v6 = v11;
          v12 = *(_QWORD *)(v10 + 8);
          ObjectType = swift_getObjectType(v11);
          (*(void (**)(id, uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, ObjectType, v12);
          goto LABEL_9;
        }
        goto LABEL_11;
      }
    }
  }
  else
  {
    v3 = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
    if (v3)
    {
      v14 = (id)v3;
      v4 = v3 + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler;
      v5 = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)(v4 + 8);
        v8 = swift_getObjectType(v5);
        (*(void (**)(id, _QWORD, uint64_t, uint64_t))(v7 + 48))(v14, 0, v8, v7);
LABEL_9:

        swift_unknownObjectRelease(v6);
        return;
      }
LABEL_11:

    }
  }
}

double sub_94CE0(void *a1, double a2, double a3)
{
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double MinX;
  double MaxX;
  double MinY;
  double MaxY;
  double v23;
  id v24;
  double v25;
  double v26;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;

  objc_msgSend(a1, "bounds");
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = objc_msgSend(a1, "be_textInputChild");
  objc_msgSend(v14, "convertPoint:toCoordinateSpace:", a1, a2, a3);
  v16 = v15;
  v18 = v17;

  v28.origin.x = v7;
  v28.origin.y = v9;
  v28.size.width = v11;
  v28.size.height = v13;
  MinX = CGRectGetMinX(v28);
  if (v16 <= MinX)
    v16 = MinX;
  v29.origin.x = v7;
  v29.origin.y = v9;
  v29.size.width = v11;
  v29.size.height = v13;
  MaxX = CGRectGetMaxX(v29);
  if (MaxX < v16)
    v16 = MaxX;
  v30.origin.x = v7;
  v30.origin.y = v9;
  v30.size.width = v11;
  v30.size.height = v13;
  MinY = CGRectGetMinY(v30);
  if (v18 <= MinY)
    v18 = MinY;
  v31.origin.x = v7;
  v31.origin.y = v9;
  v31.size.width = v11;
  v31.size.height = v13;
  MaxY = CGRectGetMaxY(v31);
  if (MaxY >= v18)
    v23 = v18;
  else
    v23 = MaxY;
  v24 = objc_msgSend(a1, "be_textInputChild");
  objc_msgSend(a1, "convertPoint:toCoordinateSpace:", v24, v16, v23);
  v26 = v25;

  return v26;
}

void sub_94E34(uint64_t a1, char a2, void *a3, uint64_t a4, double a5, double a6)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  _QWORD v20[6];

  if ((a2 & 1) != 0
    && (a5 - *(double *)(a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusStartPoint))
     * (a5 - *(double *)(a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusStartPoint))
     + (a6 - *(double *)(a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusStartPoint + 8))
     * (a6 - *(double *)(a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusStartPoint + 8)) < 113.2096)
  {
    *(_BYTE *)(a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState) = 0;
    v11 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer;
    objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer), "invalidate");
    v12 = *(void **)(a1 + v11);
    *(_QWORD *)(a1 + v11) = 0;

  }
  else
  {
    v13 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer;
    objc_msgSend(*(id *)(a1 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer), "invalidate");
    v14 = *(void **)(a1 + v13);
    *(_QWORD *)(a1 + v13) = 0;

    if (objc_msgSend(a3, "be_hasSelectablePositionAtPoint:", a5, a6))
    {
      v15 = objc_msgSend(a3, "be_textInputChild");
      v16 = swift_allocObject(&unk_37DD50, 24);
      swift_unknownObjectWeakInit(v16 + 16, a1);
      v17 = swift_allocObject(&unk_37DDC8, 56);
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = a4;
      *(double *)(v17 + 32) = a5;
      *(double *)(v17 + 40) = a6;
      *(_QWORD *)(v17 + 48) = a3;
      v20[4] = sub_95728;
      v20[5] = v17;
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 1107296256;
      v20[2] = sub_525E4;
      v20[3] = &unk_37DDE0;
      v18 = _Block_copy(v20);
      v19 = a3;
      swift_release();
      objc_msgSend(v15, "updateSelectionWithExtentPoint:withBoundary:completionHandler:", 1, v18, a5, a6);
      _Block_release(v18);

    }
  }
}

void sub_95030(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  _BYTE v20[24];

  v10 = a4 + 16;
  swift_beginAccess(a4 + 16, v20, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v10);
  if (Strong)
  {
    v12 = (void *)Strong;
    if (*(_BYTE *)(Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState) == 1)
    {
      v13 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator);
      if (v13)
      {
        v14 = (void *)v13;
        v15 = v13 + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler;
        v16 = swift_unknownObjectWeakLoadStrong(v13 + OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler);
        if (v16)
        {
          v17 = v16;
          v18 = *(_QWORD *)(v15 + 8);
          ObjectType = swift_getObjectType(v16);
          (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, double, double))(v18 + 40))(v14, a5, a6, ObjectType, v18, a1, a2);

          swift_unknownObjectRelease(v17);
          return;
        }

      }
    }

  }
}

void sub_9513C(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned __int8 *Strong;
  int v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = (unsigned __int8 *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong[OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState];

    if (v5 == 2)
      objc_msgSend(a2, "be_selectForWebView:", 0);
  }
}

Swift::Bool __swiftcall ContentLoader.gestureRecognizer(_:shouldReceive:)(UIGestureRecognizer _, UITouch shouldReceive)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t Strong;
  char *v12;
  void *v13;
  id v14;
  objc_class *v15;
  char v16;
  void *v17;
  objc_class *v18;
  id v19;
  char v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  char v26;
  void *v28;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_2E85B8);
  swift_getKeyPath(&unk_2E85E0);
  static Published.subscript.getter(&v28, v3, KeyPath);
  swift_release();
  swift_release();
  v7 = v28;
  if (!v28)
    goto LABEL_12;
  v8 = objc_opt_self(WKWebView);
  v9 = swift_dynamicCastObjCClass(v7, v8);
  if (!v9
    || (v10 = v9,
        (Strong = swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_contentMediator)) == 0))
  {

LABEL_12:
    v26 = 1;
    return v26 & 1;
  }
  v12 = (char *)Strong;
  v13 = *(void **)(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusLongPressRecognizer);
  if (!v13
    || (sub_34450(0, (unint64_t *)&qword_3BECF0, UIGestureRecognizer_ptr),
        v14 = v13,
        v15 = _.super.isa,
        v16 = static NSObject.== infix(_:_:)(v15, v14),
        v15,
        v14,
        (v16 & 1) == 0))
  {
    v17 = *(void **)(v3 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusPanRecognizer);
    if (!v17)
      goto LABEL_11;
    sub_34450(0, (unint64_t *)&qword_3BECF0, UIGestureRecognizer_ptr);
    v18 = _.super.isa;
    v19 = v17;
    v20 = static NSObject.== infix(_:_:)(v18, v19);

    if ((v20 & 1) == 0)
      goto LABEL_11;
  }
  v21 = &v12[OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler];
  v22 = swift_unknownObjectWeakLoadStrong(&v12[OBJC_IVAR____TtC8BookEPUB22ContentMessageMediator_eventHandler]);
  if (!v22)
  {
LABEL_11:

    goto LABEL_12;
  }
  v23 = v22;
  v24 = *((_QWORD *)v21 + 1);
  ObjectType = swift_getObjectType(v22);
  v26 = (*(uint64_t (**)(char *, Class, Class, uint64_t, uint64_t, uint64_t))(v24 + 16))(v12, _.super.isa, shouldReceive.super.isa, v10, ObjectType, v24);

  swift_unknownObjectRelease(v23);
  return v26 & 1;
}

void ContentLoader._performHighlighterAction(withGestureState:location:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t KeyPath;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  KeyPath = swift_getKeyPath(&unk_2E85B8);
  swift_getKeyPath(&unk_2E85E0);
  static Published.subscript.getter(&v11, v3, KeyPath);
  swift_release();
  swift_release();
  v8 = v11;
  if (v11)
  {
    v9 = objc_opt_self(WKWebView);
    v10 = (void *)swift_dynamicCastObjCClass(v8, v9);
    if (v10)
      sub_945D0(a1, v10, 1, a2, a3);

  }
}

void sub_955A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t KeyPath;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v1 = OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusTimer), "invalidate");
  v2 = *(void **)(v0 + v1);
  *(_QWORD *)(v0 + v1) = 0;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState) != 2)
  {
    *(_BYTE *)(v0 + OBJC_IVAR____TtC8BookEPUB13ContentLoader_stylusState) = 2;
    KeyPath = swift_getKeyPath(&unk_2E85B8);
    v4 = swift_getKeyPath(&unk_2E85E0);
    static Published.subscript.getter(&v8, v0, KeyPath);
    swift_release(KeyPath);
    swift_release(v4);
    v5 = v8;
    if (v8)
    {
      v6 = objc_opt_self(WKWebView);
      v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
      if (v7)
        objc_msgSend(v7, "be_selectForWebView:", 0);

    }
  }
}

uint64_t sub_9568C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_956B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_956DC()
{
  uint64_t v0;

  sub_9513C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_956E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_956F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_956FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

void sub_95728(uint64_t a1)
{
  uint64_t v1;

  sub_95030(*(double *)(v1 + 32), *(double *)(v1 + 40), a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 48));
}

uint64_t ElementEntityType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_9576C + 4 * byte_2E8600[*v0]))(0x726F68636E61, 0xE600000000000000);
}

uint64_t sub_9576C()
{
  return 0x6B72616D6B6F6F62;
}

uint64_t sub_95784()
{
  return 0x6261646E61707865;
}

uint64_t sub_957A0()
{
  return 0x6867696C68676968;
}

uint64_t sub_957BC()
{
  return 0x616964656DLL;
}

uint64_t sub_957D0()
{
  return 0x79726F74736968;
}

void ElementEntityType.concreteType()()
{
  __asm { BR              X10 }
}

uint64_t sub_95810()
{
  uint64_t v0;

  v0 = type metadata accessor for AnchorPaginationEntity(0);
  sub_958E4(&qword_3B90B8, type metadata accessor for AnchorPaginationEntity);
  return v0;
}

uint64_t sub_958E4(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ElementPaginationEntity<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

BookEPUB::ElementEntityType_optional __swiftcall ElementEntityType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BookEPUB::ElementEntityType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_379218, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 6;
  if (v5 < 6)
    v7 = v5;
  *v4 = v7;
  return result;
}

void sub_9597C(char *a1)
{
  sub_3FC7C(*a1);
}

void sub_95988()
{
  char *v0;

  sub_1851B8(*v0);
}

void sub_95990()
{
  __asm { BR              X10 }
}

uint64_t sub_959C8(uint64_t a1)
{
  String.hash(into:)(a1, 0x6B72616D6B6F6F62, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_95A58(uint64_t a1)
{
  char *v1;

  sub_1855B0(a1, *v1);
}

BookEPUB::ElementEntityType_optional sub_95A60(Swift::String *a1)
{
  return ElementEntityType.init(rawValue:)(*a1);
}

uint64_t sub_95A6C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_95A98 + 4 * byte_2E8612[*v0]))();
}

void sub_95A98(_QWORD *a1@<X8>)
{
  *a1 = 0x6B72616D6B6F6F62;
  a1[1] = 0xE800000000000000;
}

void sub_95AB4(_QWORD *a1@<X8>)
{
  *a1 = 0x6261646E61707865;
  a1[1] = 0xEA0000000000656CLL;
}

void sub_95AD4(_QWORD *a1@<X8>)
{
  *a1 = 0x6867696C68676968;
  a1[1] = 0xE900000000000074;
}

void sub_95AF4(_QWORD *a1@<X8>)
{
  *a1 = 0x616964656DLL;
  a1[1] = 0xE500000000000000;
}

void sub_95B0C(_QWORD *a1@<X8>)
{
  *a1 = 0x79726F74736968;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_95B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_95F24();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_95B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_95F24();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t ElementEntity.startingPageOffset.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = (*(uint64_t (**)(void))(a2 + 56))();
  v3 = sub_95C18(v2);
  swift_bridgeObjectRelease(v2);
  return v3;
}

uint64_t sub_95C18(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = result + 56;
  v2 = *(_BYTE *)(result + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(result + 56);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v17 = *(_QWORD *)(result + 64);
    if (v17)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v17 = *(_QWORD *)(result + 72);
      if (v17)
      {
        v6 = 2;
      }
      else
      {
        v17 = *(_QWORD *)(result + 80);
        if (v17)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v17 = *(_QWORD *)(result + 88);
          if (v17)
          {
            v6 = 4;
          }
          else
          {
            v17 = *(_QWORD *)(result + 96);
            if (!v17)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v17 - 1) & v17;
    v7 = __clz(__rbit64(v17)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(result + 48);
  result = *(_QWORD *)(v10 + 8 * v7);
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v6 << 6);
LABEL_7:
    v13 = *(_QWORD *)(v10 + 8 * v12);
    if (v13 < result)
      result = v13;
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      return result;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v18 = 0;
  v19 = 6;
  if (v9 > 6)
    v19 = v9;
  v20 = v19 - 6;
  while (v20 != v18)
  {
    v17 = *(_QWORD *)(result + 104 + 8 * v18++);
    if (v17)
    {
      v6 = v18 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

unint64_t sub_95E14()
{
  unint64_t result;

  result = qword_3B90C0;
  if (!qword_3B90C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ElementEntityType, &type metadata for ElementEntityType);
    atomic_store(result, (unint64_t *)&qword_3B90C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ElementEntityType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_95EA4 + 4 * byte_2E861D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_95ED8 + 4 * byte_2E8618[v4]))();
}

uint64_t sub_95ED8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_95EE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x95EE8);
  return result;
}

uint64_t sub_95EF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x95EFCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_95F00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_95F08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ElementEntityType()
{
  return &type metadata for ElementEntityType;
}

unint64_t sub_95F24()
{
  unint64_t result;

  result = qword_3B90C8;
  if (!qword_3B90C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ElementEntityType, &type metadata for ElementEntityType);
    atomic_store(result, (unint64_t *)&qword_3B90C8);
  }
  return result;
}

uint64_t BEBookLayoutMode.description.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  result = 0x6465767265736572;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6465676170;
      break;
    case 2:
      result = 0x6C61636974726576;
      break;
    case 3:
      result = 0x746E6F7A69726F68;
      break;
    default:
      v10[1] = v2;
      v10[2] = v1;
      v10[3] = v3;
      v10[4] = v4;
      v8 = a1;
      type metadata accessor for BookLayoutMode(0);
      v10[0] = v8;
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v9, v10, v9, &type metadata for UInt);
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_9601C()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;

  result = 0x6465767265736572;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      result = 0x6465676170;
      break;
    case 2:
      result = 0x6C61636974726576;
      break;
    case 3:
      result = 0x746E6F7A69726F68;
      break;
    default:
      v2 = *v0;
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(0x6465767265736572, &v2, 0x6465767265736572, &type metadata for UInt);
      __break(1u);
      break;
  }
  return result;
}

uint64_t BEContentCleanupJSOptions.init<A, B>(layoutProvider:bookEntity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;

  sub_964D8(a1, a2, a3, a4, a5, a6);
  v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 8))(a2, a4);
  swift_unknownObjectRelease(a1);
  return v10;
}

uint64_t BEContentCleanupJSOptions.init<A>(bookEntity:theme:useNewTextStyling:readingMode:)(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;

  sub_96164(a1, a2, a3, a4, a5, a6);
  v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 8))(a1, a5);
  return v9;
}

void sub_96164(uint64_t a1, _QWORD *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  __n128 v23;
  unint64_t v24;
  unint64_t v25;
  __n128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  char v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  char v51;
  NSString v52;
  void *v53;
  void *v54;

  v8 = *(char *)a2;
  v49 = a2[1];
  v50 = a2[2];
  v9 = a2[3];
  v10 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 104))(a5, a6);
  v14 = 2;
  if ((v13 - 1) < 3u)
    v14 = 3;
  v44 = v11;
  v45 = v14;
  v43 = v9;
  v15 = v12;
  BookThemeEntity.fontFamily.getter();
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  v19 = swift_bridgeObjectRelease(v17);
  (*(void (**)(uint64_t, uint64_t, __n128))(a6 + 192))(a5, a6, v19);
  v21 = v20;
  v22 = String._bridgeToObjectiveC()();
  v23 = swift_bridgeObjectRelease(v21);
  (*(void (**)(uint64_t, uint64_t, __n128))(a6 + 184))(a5, a6, v23);
  if (v24)
    v25 = v24;
  else
    v25 = 0xE000000000000000;
  v52 = String._bridgeToObjectiveC()();
  v26 = swift_bridgeObjectRelease(v25);
  v51 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(a6 + 168))(a5, a6, v26);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 256))(a5, a6);
  v28 = (v50 >> 8) & 1;
  if (!v49)
    LODWORD(v28) = v8 != 0;
  v53 = v22;
  v54 = v18;
  if ((_DWORD)v28 == 1)
  {
    if (v49)
    {
      if ((v15 & 1) != 0)
        v29 = 1;
      else
        v29 = 2;
      v30 = 2 * (v50 & 1);
      v31 = (v43 & 0x7FFFFFFFFFFFFFFFLL) != 0;
      v33 = v47;
      v32 = a4;
      v34 = v27;
      if ((v50 & 0x100) == 0)
      {
        v35 = v45;
        swift_bridgeObjectRelease(v49);
        v36 = 0;
        v37 = 0;
LABEL_30:
        v39 = a3;
        goto LABEL_34;
      }
      v35 = v45;
LABEL_29:
      v37 = (v10 & 0x7FFFFFFFFFFFFFFFLL) != 0;
      swift_bridgeObjectRelease(v49);
      v36 = (v44 & 0x7FFFFFFFFFFFFFFFLL) != 0;
      goto LABEL_30;
    }
    v33 = v47;
    v32 = a4;
    if (v8 > 4)
      v29 = 1;
    else
      v29 = qword_2E8798[v8];
    v39 = a3;
    v35 = v45;
    v34 = v27;
    v30 = 2 * ((_DWORD)v8 == 3);
    if (!(_DWORD)v8)
      goto LABEL_33;
LABEL_26:
    swift_bridgeObjectRelease(0);
    v36 = 0;
    v37 = 0;
    v31 = 1;
    goto LABEL_34;
  }
  v38 = (_DWORD)v8 == 3;
  if (v49)
    v38 = v50;
  if (v38)
    v30 = 2;
  else
    v30 = 0;
  if (!v49)
  {
    v34 = v27;
    v35 = v45;
    v29 = 0;
    v39 = a3;
    v33 = v47;
    v32 = a4;
    if (!(_DWORD)v8)
      goto LABEL_33;
    goto LABEL_26;
  }
  v29 = 0;
  v33 = v47;
  v32 = a4;
  v34 = v27;
  if ((v50 & 0x100) != 0)
  {
    v35 = v45;
    v31 = 0;
    goto LABEL_29;
  }
  v35 = v45;
  v39 = a3;
LABEL_33:
  swift_bridgeObjectRelease(v49);
  v36 = 0;
  v37 = 0;
  v31 = 0;
LABEL_34:
  BYTE2(v42) = v36;
  BYTE1(v42) = v37;
  LOBYTE(v42) = v31;
  LOBYTE(v41) = v34 & 1;
  v40 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v33)), "initWithMode:useNewTextStyling:fontFamily:language:respectImageSizeClass:respectImageSizeClassIsPrefix:hasBuiltInFonts:justification:fontWeight:overrideLineHeight:overrideLetterSpacing:overrideWordSpacing:readingMode:", v35, v39 & 1, v54, v53, v52, v51 & 1, v41, v29, v30, v42, v32);

  if (!v40)
    __break(1u);
}

void sub_964D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 160))(&v18, a3, a5);
  LOWORD(v13) = v18;
  BYTE2(v13) = BYTE2(v18);
  v14 = v19;
  v15 = v20;
  v16 = v21;
  v17 = v22;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 152))(a3, a5);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a3, a5);
  sub_96164(a2, &v13, v11 & 1, v12, a4, a6);
}

