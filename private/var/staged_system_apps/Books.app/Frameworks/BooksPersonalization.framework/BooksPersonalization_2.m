unint64_t sub_E4F48()
{
  unint64_t result;

  result = qword_1F4750;
  if (!qword_1F4750)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserInfo, &type metadata for UserInfo);
    atomic_store(result, (unint64_t *)&qword_1F4750);
  }
  return result;
}

unint64_t sub_E4F8C()
{
  unint64_t result;

  result = qword_1F4758;
  if (!qword_1F4758)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreInfo, &type metadata for StoreInfo);
    atomic_store(result, (unint64_t *)&qword_1F4758);
  }
  return result;
}

unint64_t sub_E4FD0()
{
  unint64_t result;

  result = qword_1F4760;
  if (!qword_1F4760)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SaleOptions, &type metadata for SaleOptions);
    atomic_store(result, (unint64_t *)&qword_1F4760);
  }
  return result;
}

uint64_t sub_E5014(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(&qword_1F2700);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_E5074()
{
  unint64_t result;

  result = qword_1F4768;
  if (!qword_1F4768)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClusteringOptions, &type metadata for ClusteringOptions);
    atomic_store(result, (unint64_t *)&qword_1F4768);
  }
  return result;
}

uint64_t sub_E50B8(unint64_t *a1, void (*a2)(void), void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_5F68(&qword_1F4728);
    a2();
    a3();
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_E5134()
{
  unint64_t result;

  result = qword_1F4778;
  if (!qword_1F4778)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionRecommendationOptions, &type metadata for CollectionRecommendationOptions);
    atomic_store(result, (unint64_t *)&qword_1F4778);
  }
  return result;
}

unint64_t sub_E5178()
{
  unint64_t result;

  result = qword_1F4780;
  if (!qword_1F4780)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaTypeMethod, &type metadata for MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F4780);
  }
  return result;
}

_QWORD *sub_E51BC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[3];
  v3 = a1[7];
  v4 = a1[10];
  v5 = a1[12];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_E5224(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[7];
  v5 = a1[10];
  swift_bridgeObjectRelease(a1[12]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *sub_E528C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return CollectionRecommendationRequest.init(from:)(a1, a2);
}

uint64_t sub_E52A0(_QWORD *a1)
{
  return CollectionRecommendationRequest.encode(to:)(a1);
}

BooksPersonalization::CollectionRecommendationType_optional __swiftcall CollectionRecommendationType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::CollectionRecommendationType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA000, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 10;
  if (v5 < 0xA)
    v7 = v5;
  *v4 = v7;
  return result;
}

BooksPersonalization::CollectionRecommendationType_optional sub_E530C(Swift::String *a1)
{
  return CollectionRecommendationType.init(rawValue:)(*a1);
}

uint64_t sub_E5318@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CollectionRecommendationType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

Swift::Int sub_E533C()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_F8978((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_E5380(uint64_t a1)
{
  char *v1;

  sub_F8978(a1, *v1);
}

Swift::Int sub_E5388(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_F8978((uint64_t)v4, v2);
  return Hasher._finalize()();
}

void sub_E53C8(char *a1)
{
  sub_79370(*a1);
}

uint64_t sub_E53D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_F2B2C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_E5430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_F2B2C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_E547C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_F2B2C();
  return RawRepresentable<>.codingKey.getter(a1, a2, v4);
}

uint64_t sub_E54BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_F2B2C();
  return RawRepresentable<>.init<A>(codingKey:)(a1, a4, a2, a5, v10, a3);
}

uint64_t sub_E5524()
{
  _BYTE *v0;

  if (*v0)
    return 0x707954616964656DLL;
  else
    return 0x746E756F4378616DLL;
}

uint64_t sub_E5564@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F2058(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_E5588(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E5748();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E55B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E5748();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionRecommendationOptions.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v4 = sub_5EDC(&qword_1F4788);
  v17 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v16 = v1[2];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_E5748();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionRecommendationOptions.CodingKeys, &type metadata for CollectionRecommendationOptions.CodingKeys, v11, v9, v10);
  v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v7, v8, &v20, v4);
  if (!v2)
  {
    v18 = v16;
    v19 = 1;
    v12 = sub_5EDC(&qword_1F4798);
    v13 = sub_E5968(&qword_1F47A0, (void (*)(void))sub_E578C, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v19, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
}

unint64_t sub_E5748()
{
  unint64_t result;

  result = qword_1F4790;
  if (!qword_1F4790)
  {
    result = swift_getWitnessTable(&unk_195E64, &type metadata for CollectionRecommendationOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F4790);
  }
  return result;
}

unint64_t sub_E578C()
{
  unint64_t result;

  result = qword_1F47A8;
  if (!qword_1F47A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClusteringOptions.MediaType, &type metadata for ClusteringOptions.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F47A8);
  }
  return result;
}

uint64_t CollectionRecommendationOptions.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  v5 = sub_5EDC(&qword_1F47B0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_E5748();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionRecommendationOptions.CodingKeys, &type metadata for CollectionRecommendationOptions.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v22 = 0;
    v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v22, v5);
    v14 = v13;
    v15 = sub_5EDC(&qword_1F4798);
    v21 = 1;
    v16 = sub_E5968(&qword_1F47B8, (void (*)(void))sub_E59D0, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v20, v15, &v21, v5, v15, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v20;
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v14 & 1;
    *(_QWORD *)(a2 + 16) = v17;
  }
  return sub_62F8(a1);
}

uint64_t sub_E5968(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_5F68(&qword_1F4798);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_E59D0()
{
  unint64_t result;

  result = qword_1F47C0;
  if (!qword_1F47C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClusteringOptions.MediaType, &type metadata for ClusteringOptions.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F47C0);
  }
  return result;
}

uint64_t sub_E5A14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CollectionRecommendationOptions.init(from:)(a1, a2);
}

uint64_t sub_E5A28(_QWORD *a1)
{
  return CollectionRecommendationOptions.encode(to:)(a1);
}

void sub_E5A3C()
{
  __asm { BR              X10 }
}

uint64_t sub_E5A74()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for CollectionRecommendation(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

void CollectionRecommendation.mediaTypes.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = sub_5EDC(&qword_1F0D90);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v0, (uint64_t)v4);
  v5 = (char *)sub_E5CE0 + 4 * byte_195827[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_E5CE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v1, v0);
  v4 = sub_E36EC((uint64_t)&_swiftEmptySetSingleton, v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v0);
  return v4;
}

void CollectionRecommendation.source.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = v0;
  v2 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v1, (uint64_t)v4);
  v5 = (char *)sub_E5F1C + 4 * byte_195831[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_E5F1C()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;

  *v1 = *(_BYTE *)(v0 + *(int *)(sub_5EDC(&qword_1F3420) + 48));
  v2 = sub_5EDC(&qword_1F0D90);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v0, v2);
}

void sub_E5F94()
{
  uint64_t v0;
  _BYTE *v1;

  *v1 = 2;
  sub_5229C(v0);
  JUMPOUT(0xE5F7CLL);
}

void sub_E5FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F0D98);
  memcpy((void *)(v0 + 8), (const void *)(v1 + *(int *)(v2 + 48)), 0x221uLL);
  sub_6228((_QWORD *)(v0 + 8));
  swift_bridgeObjectRelease();
  JUMPOUT(0xE5F58);
}

void CollectionRecommendation.count.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = sub_5EDC(&qword_1F0D90);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v0, (uint64_t)v4);
  v5 = (char *)sub_E60B4 + 4 * byte_19583B[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_E60B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
  v4 = ((uint64_t (*)(uint64_t))NonEmpty.count.getter)(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return v4;
}

void sub_E6108()
{
  uint64_t v0;

  sub_5229C(v0);
  JUMPOUT(0xE60E8);
}

uint64_t sub_E611C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F0D98);
  memcpy((void *)(v0 + 8), (const void *)(v1 + *(int *)(v2 + 48)), 0x221uLL);
  sub_6228((_QWORD *)(v0 + 8));
  swift_bridgeObjectRelease();
  return sub_E60B4();
}

void sub_E6158()
{
  uint64_t v0;

  sub_5229C(v0);
  JUMPOUT(0xE60E8);
}

uint64_t CollectionRecommendation.debugDescription.getter()
{
  char v0;
  char v1;
  Swift::String v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  int64_t v8;
  int v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD v31[2];

  CollectionRecommendation.count.getter();
  v1 = v0;
  v31[0] = 0;
  v31[1] = 0xE000000000000000;
  CollectionRecommendation.collectionRecommendationType.getter();
  _print_unlocked<A, B>(_:_:)(&v29, v31, &type metadata for CollectionRecommendationType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  CollectionRecommendation.mediaTypes.getter();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v27 = v1;
    v29 = _swiftEmptyArrayStorage;
    v28 = v3;
    sub_340F4(0, v4, 0);
    v5 = v28;
    v6 = v29;
    result = sub_EDD90(v28);
    v8 = result;
    v10 = v9;
    v12 = v11 & 1;
    while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << *(_BYTE *)(v5 + 32))
    {
      if (((*(_QWORD *)(v28 + 56 + (((unint64_t)v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(v5 + 36) != v10)
        goto LABEL_24;
      if (*(_BYTE *)(*(_QWORD *)(v5 + 48) + v8))
        v13 = 0x6F6F626F69647561;
      else
        v13 = 0x6B6F6F6265;
      if (*(_BYTE *)(*(_QWORD *)(v5 + 48) + v8))
        v14 = 0xE90000000000006BLL;
      else
        v14 = 0xE500000000000000;
      v29 = v6;
      v16 = v6[2];
      v15 = v6[3];
      if (v16 >= v15 >> 1)
      {
        sub_340F4(v15 > 1, v16 + 1, 1);
        v5 = v28;
        v6 = v29;
      }
      v6[2] = v16 + 1;
      v17 = &v6[2 * v16];
      v17[4] = v13;
      v17[5] = v14;
      result = sub_EDE34(v8, v10, v12 & 1, v5);
      v8 = result;
      v10 = v18;
      v12 = v19 & 1;
      if (!--v4)
      {
        sub_41814(result, v18, v19 & 1);
        swift_bridgeObjectRelease();
        v1 = v27;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v6 = _swiftEmptyArrayStorage;
LABEL_18:
    v20._countAndFlagsBits = Array.description.getter(v6, &type metadata for String);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 32;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    if ((v1 & 1) != 0)
    {
      v24 = 0;
      v25 = 0xE000000000000000;
    }
    else
    {
      v29 = (_QWORD *)(&stru_20 + 8);
      v30 = 0xE100000000000000;
      v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._countAndFlagsBits = 41;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      v24 = v29;
      v25 = v30;
    }
    v26 = v25;
    String.append(_:)(*(Swift::String *)&v24);
    swift_bridgeObjectRelease();
    return v31[0];
  }
  return result;
}

uint64_t sub_E6438(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)(v2 + 7976) = v1;
  *(_QWORD *)(v2 + 7968) = a1;
  v4 = type metadata accessor for CollectionRecommendation(0);
  *(_QWORD *)(v2 + 7984) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 7992) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 8000) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 8008) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 8016) = swift_task_alloc(v6);
  *(_BYTE *)(v2 + 7090) = *(_BYTE *)(a1 + 104);
  return swift_task_switch(sub_E64C8, 0, 0);
}

uint64_t sub_E64C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 7976);
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 8024) = v5;
  *v5 = v0;
  v5[1] = sub_E6558;
  return v7(v0 + 16, v2, v3);
}

uint64_t sub_E6558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 8024);
  *(_QWORD *)(*(_QWORD *)v1 + 8032) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_E7BFC;
  else
    v3 = sub_E65BC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_E65BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD **)(v0 + 7976);
  memcpy((void *)(v0 + 3280), (const void *)(v0 + 16), 0x440uLL);
  v2 = *(_QWORD *)(v0 + 3808);
  v3 = *(_QWORD *)(v0 + 3816);
  v4 = *(_BYTE *)(v0 + 3840);
  v5 = *(_QWORD *)(v0 + 3864);
  v6 = *(_QWORD *)(v0 + 3872);
  *(_QWORD *)&v15 = *(_QWORD *)(v0 + 3800);
  *((_QWORD *)&v15 + 1) = v2;
  v16 = v3;
  v17 = *(_OWORD *)(v0 + 3824);
  v18 = v4;
  v19 = *(_OWORD *)(v0 + 3848);
  v20 = v5;
  v21 = v6;
  v7 = sub_E87A8(v0 + 7392, &v15);
  *(_QWORD *)(v0 + 8040) = v7;
  sub_41300(v0 + 7392, v0 + 7536, &qword_1F49C8);
  sub_41300(v0 + 7536, v0 + 7096, &qword_1F49C8);
  *(_QWORD *)(v0 + 7240) = v7;
  *(_QWORD *)(v0 + 7912) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + 7896) = &_swiftEmptySetSingleton;
  v8 = *(_QWORD *)(v0 + 3704);
  v9 = v1[36];
  v10 = v1[37];
  sub_49F4(v1 + 33, v9);
  memcpy((void *)(v0 + 4368), (const void *)(v0 + 3280), 0x440uLL);
  v11 = *(int **)(v10 + 8);
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  v12 = (_QWORD *)swift_task_alloc(v11[1]);
  *(_QWORD *)(v0 + 8048) = v12;
  *v12 = v0;
  v12[1] = sub_E6788;
  return v14(v0 + 4368, v8, v9, v10);
}

uint64_t sub_E6788(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = (*v2)[1006];
  v3[1007] = a1;
  v3[1008] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_F2154(v3 + 887);
    v5 = sub_E7C50;
  }
  else
  {
    v5 = sub_E6804;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_E6804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  _BYTE *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  uint8_t *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;

  v1 = *(_QWORD *)(v0 + 8056);
  *(_QWORD *)(v0 + 8072) = OBJC_IVAR____TtC20BooksPersonalization31CollectionRecommendationService_logger;
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 8064);
    v6 = *(_QWORD *)(v0 + 8056);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v44 = v8;
    v45 = 0x202020200A5BLL;
    v46 = 0xE600000000000000;
    v9 = swift_bridgeObjectRetain(v6);
    v47 = sub_37EB0(v9);
    sub_9046C((uint64_t *)&v47);
    if (v5)
      return swift_release(v47);
    v41 = v8;
    v12 = *(_QWORD *)(v0 + 8056);
    swift_bridgeObjectRelease();
    v40 = v7 + 4;
    v13 = (uint64_t)v47;
    swift_bridgeObjectRetain(v12);
    v43 = v0 + 7952;
    v39 = v7;
    v14 = sub_F0D18(v13, v12);
    swift_bridgeObjectRelease();
    swift_release(v13);
    *(_QWORD *)(v0 + 7960) = v14;
    v15 = sub_5EDC(&qword_1F03E0);
    v16 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
    v17 = BidirectionalCollection<>.joined(separator:)(0x202020200A2CLL, 0xE600000000000000, v15, v16);
    v19 = v18;
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 93;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    *(_QWORD *)(v0 + 7888) = sub_9DA98(v45, v46, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7888, v0 + 7896, v40, v39 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v12, 2);
    _os_log_impl(&dword_0, v3, v4, "seedBooksByID=%s", v39, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {
    v43 = v0 + 7952;
    v11 = *(_QWORD *)(v0 + 8056);

    swift_bridgeObjectRelease_n(v11, 2);
  }
  v22 = (_BYTE *)(v0 + 7089);
  v23 = sub_E34A0((uint64_t)_swiftEmptyDictionarySingleton, *(_QWORD *)(v0 + 8056));
  v24 = sub_4F54((uint64_t)v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = sub_58BC(v24);
  *(_QWORD *)(v0 + 8080) = v25;
  swift_bridgeObjectRelease();
  v26 = swift_retain_n(v25, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(32, -1);
    v42 = swift_slowAlloc(32, -1);
    v45 = v42;
    *(_DWORD *)v29 = 136315650;
    *(_QWORD *)(v0 + 7928) = sub_9DA98(0xD00000000000001ALL, 0x80000000001A2320, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7928, v0 + 7936, v29 + 4, v29 + 12);
    *(_WORD *)(v29 + 12) = 2048;
    v30 = *(_QWORD *)(v25 + 16);
    if (v30)
    {
      v31 = sub_3933C(0);
      if ((v32 & 1) != 0)
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v31) + 16);
      else
        v30 = 0;
    }
    *(_QWORD *)(v0 + 7936) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7936, v0 + 7944, v29 + 14, v29 + 22);
    *(_WORD *)(v29 + 22) = 2048;
    if (*(_QWORD *)(v25 + 16))
    {
      v33 = sub_3933C(1);
      v34 = v42;
      if ((v35 & 1) != 0)
        v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 56) + 8 * v33) + 16);
      else
        v36 = 0;
    }
    else
    {
      v36 = 0;
      v34 = v42;
    }
    swift_release(v25);
    *(_QWORD *)(v0 + 7944) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7944, v43, v29 + 24, v29 + 32);
    swift_release(v25);
    _os_log_impl(&dword_0, v27, v28, "%s\nseed books=%ld\nseed audiobooks=%ld", (uint8_t *)v29, 0x20u);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_release_n(v25, 2);
  }
  v37 = *(_BYTE *)(v0 + 7090);
  memcpy((void *)(v0 + 2192), (const void *)(v0 + 3280), 0x440uLL);
  *v22 = v37;
  v38 = (_QWORD *)swift_task_alloc(dword_1F55CC);
  *(_QWORD *)(v0 + 8088) = v38;
  *v38 = v0;
  v38[1] = sub_E6D48;
  return sub_102BD8(v25, v0 + 2192, v22);
}

uint64_t sub_E6D48(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = (*v2)[1011];
  v3[1012] = a1;
  v3[1013] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[1010];
    sub_F2154(v3 + 887);
    swift_release(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = sub_E7CAC;
  }
  else
  {
    swift_release(v3[1010]);
    v6 = sub_E6DE8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_E6DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_F221C((uint64_t *)(v0 + 7096));
  swift_bridgeObjectRelease();
  sub_41300(v0 + 7536, v0 + 7248, &qword_1F49C8);
  if (sub_CD7C0(v0 + 7248) != 1)
  {
    v7 = *(_OWORD *)(v0 + 7312);
    *(_OWORD *)(v0 + 7760) = *(_OWORD *)(v0 + 7328);
    v8 = *(_OWORD *)(v0 + 7360);
    *(_OWORD *)(v0 + 7776) = *(_OWORD *)(v0 + 7344);
    *(_OWORD *)(v0 + 7792) = v8;
    v9 = *(_OWORD *)(v0 + 7248);
    *(_OWORD *)(v0 + 7696) = *(_OWORD *)(v0 + 7264);
    v10 = *(_OWORD *)(v0 + 7296);
    *(_OWORD *)(v0 + 7712) = *(_OWORD *)(v0 + 7280);
    *(_OWORD *)(v0 + 7728) = v10;
    *(_OWORD *)(v0 + 7744) = v7;
    *(_OWORD *)(v0 + 7680) = v9;
    *(_OWORD *)(v0 + 7802) = *(_OWORD *)(v0 + 7370);
    memcpy((void *)(v0 + 5456), (const void *)(v0 + 3280), 0x440uLL);
    v11 = swift_task_alloc(dword_1F49DC);
    *(_QWORD *)(v0 + 8112) = v11;
    *(_QWORD *)v11 = v0;
    *(_QWORD *)(v11 + 8) = sub_E7318;
    v12 = *(_QWORD *)(v0 + 8096);
    *(_QWORD *)(v11 + 8176) = *(_QWORD *)(v0 + 7976);
    *(_QWORD *)(v11 + 8168) = v12;
    *(_OWORD *)(v11 + 7928) = *(_OWORD *)(v0 + 7680);
    v13 = *(_OWORD *)(v0 + 7712);
    v14 = *(_OWORD *)(v0 + 7744);
    v15 = *(_OWORD *)(v0 + 7696);
    *(_OWORD *)(v11 + 7976) = *(_OWORD *)(v0 + 7728);
    *(_OWORD *)(v11 + 7992) = v14;
    *(_OWORD *)(v11 + 7944) = v15;
    *(_OWORD *)(v11 + 7960) = v13;
    v16 = *(_OWORD *)(v0 + 7776);
    v17 = *(_OWORD *)(v0 + 7792);
    v18 = *(_OWORD *)(v0 + 7760);
    *(_OWORD *)(v11 + 8050) = *(_OWORD *)(v0 + 7802);
    *(_OWORD *)(v11 + 8024) = v16;
    *(_OWORD *)(v11 + 8040) = v17;
    *(_OWORD *)(v11 + 8008) = v18;
    memcpy((void *)(v11 + 16), (const void *)(v0 + 5456), 0x440uLL);
    v6 = sub_E899C;
    return swift_task_switch(v6, 0, 0);
  }
  *(_QWORD *)(v0 + 8144) = 0;
  v1 = *(_QWORD *)(v0 + 8040);
  if (v1)
  {
    memcpy((void *)(v0 + 1104), (const void *)(v0 + 3280), 0x440uLL);
    v2 = *(_QWORD *)(v0 + 7896);
    *(_QWORD *)(v0 + 8152) = v2;
    v3 = dword_1F49D4;
    swift_bridgeObjectRetain(v2);
    v4 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 8160) = v4;
    *v4 = v0;
    v4[1] = sub_E77EC;
    v5 = *(_QWORD *)(v0 + 8096);
    v4[142] = *(_QWORD *)(v0 + 7976);
    v4[141] = v2;
    v4[140] = v5;
    v4[139] = v1;
    memcpy(v4 + 2, (const void *)(v0 + 1104), 0x440uLL);
    v6 = sub_E9BAC;
    return swift_task_switch(v6, 0, 0);
  }
  swift_bridgeObjectRelease();
  sub_5B70(v0 + 3280);
  v20 = *(_QWORD *)(v0 + 8144);
  if (v20)
  {
    swift_errorRetain(*(_QWORD *)(v0 + 8144));
    v21 = *(_QWORD *)(v0 + 8144);
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 7912) + 16))
    {
      swift_bridgeObjectRelease();
      v33 = swift_bridgeObjectRelease();
      swift_willThrow(v33);
      swift_errorRelease(v21);
      v34 = *(_QWORD *)(v0 + 8008);
      v35 = *(_QWORD *)(v0 + 8000);
      swift_task_dealloc(*(_QWORD *)(v0 + 8016));
      swift_task_dealloc(v34);
      swift_task_dealloc(v35);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_errorRelease(v20);
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_QWORD *)(v0 + 7912);
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(v0 + 7992);
    swift_bridgeObjectRetain(v22);
    sub_34300(0, v23, 0);
    v25 = *(unsigned __int8 *)(v24 + 80);
    v26 = *(_QWORD *)(v0 + 8008);
    v27 = *(_QWORD *)(v0 + 8000);
    v28 = *(_QWORD *)(v0 + 7984);
    sub_52258(v22 + ((v25 + 32) & ~v25), v26);
    sub_52258(v26, v27);
    v29 = (char *)&loc_E70E8 + 4 * byte_195845[swift_getEnumCaseMultiPayload(v27, v28)];
    __asm { BR              X9 }
  }
  swift_errorRelease(v21);
  v30 = *(_QWORD *)(v0 + 8016);
  v31 = *(_QWORD *)(v0 + 8008);
  v32 = *(_QWORD *)(v0 + 8000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_E7318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)();

  v6 = *v3;
  v7 = (*v3)[1014];
  (*v3)[1015] = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    v8 = sub_E7D08;
  }
  else
  {
    v6[1016] = a2;
    v6[1017] = a1;
    sub_F22E4(v6 + 942);
    v8 = sub_E73A0;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_E73A0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (uint64_t *)(v0 + 7912);
  v2 = *(_QWORD *)(v0 + 8128);
  v3 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8136));
  sub_10F544(v3);
  v4 = swift_bridgeObjectRetain(v2);
  sub_8F8C8(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_F22E4((uint64_t *)(v0 + 7536));
  *(_QWORD *)(v0 + 8144) = 0;
  v5 = *(_QWORD *)(v0 + 8040);
  if (v5)
  {
    memcpy((void *)(v0 + 1104), (const void *)(v0 + 3280), 0x440uLL);
    v6 = *(_QWORD *)(v0 + 7896);
    *(_QWORD *)(v0 + 8152) = v6;
    v7 = dword_1F49D4;
    swift_bridgeObjectRetain(v6);
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 8160) = v8;
    *v8 = v0;
    v8[1] = sub_E77EC;
    v9 = *(_QWORD *)(v0 + 8096);
    v8[142] = *(_QWORD *)(v0 + 7976);
    v8[141] = v6;
    v8[140] = v9;
    v8[139] = v5;
    memcpy(v8 + 2, (const void *)(v0 + 1104), 0x440uLL);
    return swift_task_switch(sub_E9BAC, 0, 0);
  }
  swift_bridgeObjectRelease();
  sub_5B70(v0 + 3280);
  v11 = *(_QWORD *)(v0 + 8144);
  if (v11)
  {
    swift_errorRetain(*(_QWORD *)(v0 + 8144));
    v12 = *(_QWORD *)(v0 + 8144);
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 7912) + 16))
    {
      swift_bridgeObjectRelease();
      v24 = swift_bridgeObjectRelease();
      swift_willThrow(v24);
      swift_errorRelease(v12);
      v25 = *(_QWORD *)(v0 + 8008);
      v26 = *(_QWORD *)(v0 + 8000);
      swift_task_dealloc(*(_QWORD *)(v0 + 8016));
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_errorRelease(v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = *v1;
  v14 = *(_QWORD *)(*v1 + 16);
  if (v14)
  {
    v15 = *(_QWORD *)(v0 + 7992);
    swift_bridgeObjectRetain(v13);
    sub_34300(0, v14, 0);
    v16 = *(unsigned __int8 *)(v15 + 80);
    v17 = *(_QWORD *)(v0 + 8008);
    v18 = *(_QWORD *)(v0 + 8000);
    v19 = *(_QWORD *)(v0 + 7984);
    sub_52258(v13 + ((v16 + 32) & ~v16), v17);
    sub_52258(v17, v18);
    v20 = (char *)&loc_E75BC + 4 * byte_19584F[swift_getEnumCaseMultiPayload(v18, v19)];
    __asm { BR              X9 }
  }
  swift_errorRelease(v12);
  v21 = *(_QWORD *)(v0 + 8016);
  v22 = *(_QWORD *)(v0 + 8008);
  v23 = *(_QWORD *)(v0 + 8000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_E77EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 8160);
  *(_QWORD *)(*v2 + 8168) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    v6 = sub_E82C0;
  }
  else
  {
    *(_QWORD *)(v4 + 8176) = a1;
    sub_5B70(v4 + 3280);
    v6 = sub_E78B4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_E78B4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (uint64_t *)(v0 + 7912);
  sub_10F544(*(_QWORD *)(v0 + 8176));
  v2 = *(_QWORD *)(v0 + 8144);
  if (v2)
  {
    swift_errorRetain(*(_QWORD *)(v0 + 8144));
    v3 = *(_QWORD *)(v0 + 8144);
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 7912) + 16))
    {
      swift_bridgeObjectRelease();
      v16 = swift_bridgeObjectRelease();
      swift_willThrow(v16);
      swift_errorRelease(v3);
      v17 = *(_QWORD *)(v0 + 8008);
      v18 = *(_QWORD *)(v0 + 8000);
      swift_task_dealloc(*(_QWORD *)(v0 + 8016));
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_errorRelease(v2);
  }
  else
  {
    v3 = 0;
  }
  v4 = *v1;
  v5 = *(_QWORD *)(*v1 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(v0 + 7992);
    swift_bridgeObjectRetain(v4);
    sub_34300(0, v5, 0);
    v7 = *(unsigned __int8 *)(v6 + 80);
    v8 = *(_QWORD *)(v0 + 8008);
    v9 = *(_QWORD *)(v0 + 8000);
    v10 = *(_QWORD *)(v0 + 7984);
    sub_52258(v4 + ((v7 + 32) & ~v7), v8);
    sub_52258(v8, v9);
    v11 = (char *)&loc_E79C8 + 4 * byte_195859[swift_getEnumCaseMultiPayload(v9, v10)];
    __asm { BR              X9 }
  }
  swift_errorRelease(v3);
  v12 = *(_QWORD *)(v0 + 8016);
  v13 = *(_QWORD *)(v0 + 8008);
  v14 = *(_QWORD *)(v0 + 8000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_E7BFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 8008);
  v2 = *(_QWORD *)(v0 + 8000);
  swift_task_dealloc(*(_QWORD *)(v0 + 8016));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E7C50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_5B70(v0 + 3280);
  v1 = *(_QWORD *)(v0 + 8008);
  v2 = *(_QWORD *)(v0 + 8000);
  swift_task_dealloc(*(_QWORD *)(v0 + 8016));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E7CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_5B70(v0 + 3280);
  v1 = *(_QWORD *)(v0 + 8008);
  v2 = *(_QWORD *)(v0 + 8000);
  swift_task_dealloc(*(_QWORD *)(v0 + 8016));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E7D08()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  v1 = (const void *)(v0 + 3280);
  v2 = *(_QWORD *)(v0 + 8120);
  sub_F22E4((uint64_t *)(v0 + 7536));
  swift_errorRetain(v2);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 8120);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (_QWORD *)swift_slowAlloc(32, -1);
    v34 = v8;
    *(_DWORD *)v7 = 136315138;
    v1 = (const void *)(v0 + 3280);
    swift_getErrorValue(v6, v0 + 7904, v0 + 7824);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 7832), *(_QWORD *)(v0 + 7840));
    *(_QWORD *)(v0 + 7920) = sub_9DA98(v9, v10, (uint64_t *)&v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7920, v0 + 7928, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl(&dword_0, v4, v5, "Error deriving recommendations %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
    swift_errorRelease(v6);

  }
  else
  {
    v11 = *(_QWORD *)(v0 + 8120);
    swift_errorRelease(v11);

    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }
  sub_F22E4((uint64_t *)(v0 + 7536));
  *(_QWORD *)(v0 + 8144) = v2;
  v12 = *(_QWORD *)(v0 + 8040);
  if (v12)
  {
    memcpy((void *)(v0 + 1104), v1, 0x440uLL);
    v13 = *(_QWORD *)(v0 + 7896);
    *(_QWORD *)(v0 + 8152) = v13;
    v14 = dword_1F49D4;
    swift_bridgeObjectRetain(v13);
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 8160) = v15;
    *v15 = v0;
    v15[1] = sub_E77EC;
    v16 = *(_QWORD *)(v0 + 8096);
    v15[142] = *(_QWORD *)(v0 + 7976);
    v15[141] = v13;
    v15[140] = v16;
    v15[139] = v12;
    memcpy(v15 + 2, (const void *)(v0 + 1104), 0x440uLL);
    return swift_task_switch(sub_E9BAC, 0, 0);
  }
  swift_bridgeObjectRelease();
  sub_5B70((uint64_t)v1);
  v18 = *(_QWORD *)(v0 + 8144);
  if (v18)
  {
    swift_errorRetain(*(_QWORD *)(v0 + 8144));
    v19 = *(_QWORD *)(v0 + 8144);
    if (!*(_QWORD *)(*(_QWORD *)(v0 + 7912) + 16))
    {
      swift_bridgeObjectRelease();
      v31 = swift_bridgeObjectRelease();
      swift_willThrow(v31);
      swift_errorRelease(v19);
      v32 = *(_QWORD *)(v0 + 8008);
      v33 = *(_QWORD *)(v0 + 8000);
      swift_task_dealloc(*(_QWORD *)(v0 + 8016));
      swift_task_dealloc(v32);
      swift_task_dealloc(v33);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    swift_errorRelease(v18);
  }
  else
  {
    v19 = 0;
  }
  v20 = *(_QWORD *)(v0 + 7912);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v22 = *(_QWORD *)(v0 + 7992);
    v34 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v20);
    sub_34300(0, v21, 0);
    v23 = v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v24 = *(_QWORD *)(v0 + 8008);
    v25 = *(_QWORD *)(v0 + 8000);
    v26 = *(_QWORD *)(v0 + 7984);
    sub_52258(v23, v24);
    sub_52258(v24, v25);
    v27 = (char *)&loc_E808C + 4 * byte_195863[swift_getEnumCaseMultiPayload(v25, v26)];
    __asm { BR              X9 }
  }
  swift_errorRelease(v19);
  v28 = *(_QWORD *)(v0 + 8016);
  v29 = *(_QWORD *)(v0 + 8008);
  v30 = *(_QWORD *)(v0 + 8000);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_E82C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint8_t *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;

  v1 = (uint64_t *)(v0 + 7912);
  v2 = *(_QWORD *)(v0 + 8144);
  sub_5B70(v0 + 3280);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 8144);
    v4 = *(_QWORD *)(v0 + 8168);
  }
  else
  {
    swift_errorRetain(*(_QWORD *)(v0 + 8168));
    v4 = *(_QWORD *)(v0 + 8168);
    v3 = v4;
  }
  swift_errorRetain(v4);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 8168);
  if (v8)
  {
    v31 = v3;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (_QWORD *)swift_slowAlloc(32, -1);
    v32 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_getErrorValue(v9, v0 + 7872, v0 + 7848);
    v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 7856), *(_QWORD *)(v0 + 7864));
    *(_QWORD *)(v0 + 7880) = sub_9DA98(v12, v13, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7880, v0 + 7888, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl(&dword_0, v6, v7, "Error fetching standalone recommendations %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    v14 = v11;
    v1 = (uint64_t *)(v0 + 7912);
    swift_slowDealloc(v14, -1, -1);
    v15 = v10;
    v3 = v31;
    swift_slowDealloc(v15, -1, -1);
    swift_errorRelease(v9);

  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 8168));

    swift_errorRelease(v9);
    swift_errorRelease(v9);
  }
  swift_errorRetain(v3);
  if (*(_QWORD *)(*v1 + 16))
  {
    swift_errorRelease(v3);
    v16 = *v1;
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v18 = *(_QWORD *)(v0 + 7992);
      v32 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v16);
      sub_34300(0, v17, 0);
      v19 = v16 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      v20 = *(_QWORD *)(v0 + 8008);
      v21 = *(_QWORD *)(v0 + 8000);
      v22 = *(_QWORD *)(v0 + 7984);
      sub_52258(v19, v20);
      sub_52258(v20, v21);
      v23 = (char *)&loc_E8574 + 4 * byte_19586D[swift_getEnumCaseMultiPayload(v21, v22)];
      __asm { BR              X9 }
    }
    swift_errorRelease(v3);
    v28 = *(_QWORD *)(v0 + 8016);
    v29 = *(_QWORD *)(v0 + 8008);
    v30 = *(_QWORD *)(v0 + 8000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = swift_bridgeObjectRelease();
    swift_willThrow(v24);
    swift_errorRelease(v3);
    v25 = *(_QWORD *)(v0 + 8008);
    v26 = *(_QWORD *)(v0 + 8000);
    swift_task_dealloc(*(_QWORD *)(v0 + 8016));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

_QWORD *sub_E87A8(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v13[7];
  _OWORD v14[2];
  _OWORD v15[7];
  _OWORD v16[3];
  _QWORD *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[6];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;

  v4 = a2[3];
  v21 = a2[2];
  v22 = v4;
  v23 = a2[4];
  v5 = a2[1];
  v19 = *a2;
  v20 = v5;
  v6 = *(_QWORD *)(v2 + 96);
  v18 = &_swiftEmptySetSingleton;
  v17 = _swiftEmptyDictionarySingleton;
  v7 = swift_bridgeObjectRetain(v6);
  sub_F19F4(v7, (void (*)(_BYTE *, uint64_t *))sub_F2B04);
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&_swiftEmptySetSingleton + 2))
  {
    v8 = *(_OWORD *)(v2 + 48);
    v24[2] = *(_OWORD *)(v2 + 32);
    v24[3] = v8;
    v9 = *(_OWORD *)(v2 + 80);
    v24[4] = *(_OWORD *)(v2 + 64);
    v24[5] = v9;
    v10 = *(_OWORD *)(v2 + 16);
    v24[0] = *(_OWORD *)v2;
    v24[1] = v10;
    v25 = v6;
    v28 = *(_WORD *)(v2 + 136);
    v27 = *(_OWORD *)(v2 + 120);
    v26 = *(_OWORD *)(v2 + 104);
    v11 = swift_bridgeObjectRetain(v18);
    sub_EDB9C(v11, (uint64_t)v13);
    swift_bridgeObjectRelease_n(&_swiftEmptySetSingleton, 2);
    v15[6] = v13[6];
    v16[0] = v14[0];
    *(_OWORD *)((char *)v16 + 10) = *(_OWORD *)((char *)v14 + 10);
    v15[2] = v13[2];
    v15[3] = v13[3];
    v15[4] = v13[4];
    v15[5] = v13[5];
    v15[0] = v13[0];
    v15[1] = v13[1];
    AuthorRecommendationSource.id.getter(v15);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_F2B10(v15);
  }
  sub_41300((uint64_t)v15, (uint64_t)v24, &qword_1F49C8);
  sub_41300((uint64_t)v24, a1, &qword_1F49C8);
  return v17;
}

uint64_t sub_E8920(_OWORD *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  *(_QWORD *)(v4 + 8176) = v3;
  *(_QWORD *)(v4 + 8168) = a3;
  v5 = a1[7];
  *(_OWORD *)(v4 + 8024) = a1[6];
  *(_OWORD *)(v4 + 8040) = v5;
  *(_OWORD *)(v4 + 8050) = *(_OWORD *)((char *)a1 + 122);
  v6 = a1[3];
  *(_OWORD *)(v4 + 7960) = a1[2];
  *(_OWORD *)(v4 + 7976) = v6;
  v7 = a1[5];
  *(_OWORD *)(v4 + 7992) = a1[4];
  *(_OWORD *)(v4 + 8008) = v7;
  v8 = a1[1];
  *(_OWORD *)(v4 + 7928) = *a1;
  *(_OWORD *)(v4 + 7944) = v8;
  memcpy((void *)(v4 + 16), a2, 0x440uLL);
  return swift_task_switch(sub_E899C, 0, 0);
}

uint64_t sub_E899C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  unsigned __int8 v12[9];

  v1 = *(_QWORD *)(v0 + 8176);
  v2 = *(_QWORD *)(v0 + 8168);
  memcpy((void *)(v0 + 7560), (const void *)(v0 + 104), 0x16BuLL);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v0 + 7928;
  *(_QWORD *)(v3 + 24) = v0 + 7560;
  v4 = sub_F0A7C(v2, (void (*)(char *, uint64_t))sub_F2344, v3);
  *(_QWORD *)(v0 + 8184) = v4;
  swift_task_dealloc(v3);
  if (*(_BYTE *)(v0 + 8065) == 3)
    v5 = *(_BYTE *)(v0 + 41);
  else
    v5 = *(_BYTE *)(v0 + 8065);
  sub_49F4((_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 248));
  v12[0] = v5;
  sub_1422B8(v12, v0 + 8072);
  v6 = *(_QWORD *)(v0 + 8096);
  v7 = *(_QWORD *)(v0 + 8104);
  sub_49F4((_QWORD *)(v0 + 8072), v6);
  memcpy((void *)(v0 + 3280), (const void *)(v0 + 16), 0x440uLL);
  v8 = *(int **)(v7 + 16);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  *(_QWORD *)(v0 + 0x2000) = v9;
  *v9 = v0;
  v9[1] = sub_E8B24;
  return v11(v4, v0 + 3280, v6, v7);
}

uint64_t sub_E8B24(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 0x2000);
  *(_QWORD *)(v3 + 8200) = a1;
  *(_QWORD *)(v3 + 8208) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
    v5 = sub_E9A2C;
  else
    v5 = sub_E8BA4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_E8BA4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[1022];
  v2 = v1[16];
  v3 = v1[17];
  sub_49F4(v1 + 13, v2);
  memcpy(v0 + 274, v0 + 2, 0x440uLL);
  v4 = *(int **)(v3 + 16);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[1027] = v5;
  *v5 = v0;
  v5[1] = sub_E8C60;
  return ((uint64_t (*)(char *, _QWORD, _QWORD *, uint64_t, uint64_t))v7)((char *)v0 + 4913, v0[1021], v0 + 274, v2, v3);
}

uint64_t sub_E8C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 8216);
  *(_QWORD *)(*(_QWORD *)v1 + 8224) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_E9A64;
  }
  else
  {
    v3 = sub_E8CCC;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_E8CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  const void *v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  void *__dst;
  char *v44;
  uint64_t v45;

  v3 = (_QWORD *)v0;
  v4 = *(_QWORD *)(v0 + 8168);
  *(_BYTE *)(v0 + 4915) = *(_BYTE *)(v0 + 4913);
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_E3328(v5, sub_10EC18);
  *(_QWORD *)(v0 + 8232) = v6;
  swift_bridgeObjectRelease();
  v45 = v6[2];
  if (!v45)
  {
LABEL_31:
    v3[1032] = _swiftEmptyDictionarySingleton;
    v3[1031] = &_swiftEmptySetSingleton;
    v3[1030] = &_swiftEmptySetSingleton;
    v29 = v3[1022];
    v30 = sub_E3328(v3[1025], sub_1104F8);
    swift_bridgeObjectRelease();
    v3[1018] = v30;
    v31 = sub_5EDC(&qword_1F1638);
    v3[1033] = v31;
    v32 = sub_3EDBC(&qword_1F49E0, &qword_1F1638, (uint64_t)&protocol conformance descriptor for [A]);
    v3[1034] = v32;
    v33 = Sequence.uniqueWithOptionals<A>(by:)(sub_EA534, 0, v31, &type metadata for UInt64, v32, &protocol witness table for UInt64);
    v3[1035] = v33;
    swift_bridgeObjectRelease();
    v34 = OBJC_IVAR____TtC20BooksPersonalization31CollectionRecommendationService_logger;
    v3[1036] = OBJC_IVAR____TtC20BooksPersonalization31CollectionRecommendationService_logger;
    v35 = v29 + v34;
    v36 = (_QWORD *)swift_task_alloc(dword_1F49EC);
    v3[1037] = v36;
    *v36 = v3;
    v36[1] = sub_E9574;
    v36[8] = v35;
    v36[9] = v33;
    v36[7] = v29 + 144;
    return swift_task_switch(sub_EA564, 0, 0);
  }
  v40 = v6;
  swift_bridgeObjectRetain(v6);
  v44 = (char *)(v6 + 4);
  memcpy((void *)(v0 + 4368), v6 + 4, 0x221uLL);
  sub_41300(v0 + 4520, v0 + 6408, &qword_1F2D68);
  if (sub_8E6A0(v0 + 6408) != 1)
    JUMPOUT(0xE8E68);
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v6);
  memcpy(__dst, v44, 0x221uLL);
  sub_41300(v0 + 5072, v2, &qword_1F2D68);
  v7 = v41;
  if (sub_8E6A0(v2) == 1)
  {
LABEL_10:
    __break(1u);
  }
  else
  {
    v8 = 1;
    while (1)
    {
      if (*(_QWORD *)(v1 + 3872))
        JUMPOUT(0xE905CLL);
      if (v8 == v45)
        break;
      memcpy(__dst, &v44[552 * v8++], 0x221uLL);
      sub_41300(v0 + 5072, v2, &qword_1F2D68);
      if (sub_8E6A0(v2) == 1)
        goto LABEL_10;
    }
  }
  v9 = v6;
  swift_bridgeObjectRelease();
  v10 = (uint64_t)(v39 + 703);
  swift_bridgeObjectRetain(v6);
  memcpy(v41, v44, 0x221uLL);
  v11 = v45 - 1;
  for (i = 73; ; i += 69)
  {
    v13 = *v7;
    sub_41300(v10, v42, &qword_1F2D68);
    if (sub_8E6A0(v42) == 1)
    {
      v14 = sub_39228(v13);
      if ((v15 & 1) != 0)
      {
        v16 = v14;
        sub_6100(v7);
        if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton))
          sub_16B32C();
        sub_16F0F4(v16, (uint64_t)_swiftEmptyDictionarySingleton);
        swift_bridgeObjectRelease();
        sub_6228(v7);
      }
      goto LABEL_28;
    }
    sub_6100(v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v19 = sub_39228(v13);
    v20 = _swiftEmptyDictionarySingleton[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      JUMPOUT(0xE94E4);
    }
    v23 = v18;
    if (_swiftEmptyDictionarySingleton[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_16B32C();
      goto LABEL_23;
    }
    sub_159E64(v22, isUniquelyReferenced_nonNull_native);
    v24 = sub_39228(v13);
    if ((v23 & 1) != (v25 & 1))
      break;
    v19 = v24;
LABEL_23:
    sub_41300(v10, (uint64_t)v38, &qword_1F2D68);
    if ((v23 & 1) != 0)
    {
      memcpy((void *)(_swiftEmptyDictionarySingleton[7] + 384 * v19), v38, 0x179uLL);
    }
    else
    {
      _swiftEmptyDictionarySingleton[(v19 >> 6) + 8] |= 1 << v19;
      *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v19) = v13;
      memcpy((void *)(_swiftEmptyDictionarySingleton[7] + 384 * v19), v38, 0x179uLL);
      v26 = _swiftEmptyDictionarySingleton[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_34;
      _swiftEmptyDictionarySingleton[2] = v28;
    }
    swift_bridgeObjectRelease();
    v7 = v41;
    sub_6228(v41);
    v9 = v40;
LABEL_28:
    if (!v11)
    {
      swift_bridgeObjectRelease();
      v3 = v39;
      goto LABEL_31;
    }
    memcpy(v7, &v9[i], 0x221uLL);
    --v11;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
}

uint64_t sub_E9574(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 8296);
  *(_QWORD *)(*v2 + 8304) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_E9A9C;
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 8312) = a1;
    v6 = sub_E95F0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_E95F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 8256);
  v2 = *(_QWORD *)(v0 + 8240);
  v8 = *(_BYTE *)(v0 + 4915);
  v9 = *(_QWORD *)(v0 + 8176);
  v3 = sub_EAE44(*(_QWORD *)(v0 + 8248), v9 + *(_QWORD *)(v0 + 8288), *(_QWORD *)(v0 + 8312));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = sub_ADFC4(v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_605D0(v0 + 104);
  v5 = sub_F1330(v4, v1, (const void *)(v0 + 7560));
  *(_QWORD *)(v0 + 8320) = v5;
  sub_60AF8(v0 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 4914) = v8;
  v6 = swift_task_alloc(dword_1F49F4);
  *(_QWORD *)(v0 + 8328) = v6;
  *(_QWORD *)v6 = v0;
  *(_QWORD *)(v6 + 8) = sub_E973C;
  *(_QWORD *)(v6 + 24) = v9 + 144;
  *(_QWORD *)(v6 + 32) = v5;
  *(_BYTE *)(v6 + 128) = *(_BYTE *)(v0 + 4914);
  return swift_task_switch(sub_EB060, 0, 0);
}

uint64_t sub_E973C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 8328);
  *(_QWORD *)(*v2 + 8336) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    v6 = sub_E9B20;
  }
  else
  {
    *(_QWORD *)(v4 + 8344) = a1;
    v6 = sub_E97CC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_E97CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[1034];
  v2 = v0[1033];
  v0[1020] = v0[1043];
  v0[1044] = Sequence.uniqueWithOptionals<A>(by:)(sub_F2B70, 0, v2, &type metadata for UInt64, v1, &protocol witness table for UInt64);
  swift_bridgeObjectRelease();
  memcpy(v0 + 138, v0 + 2, 0x440uLL);
  v3 = (_QWORD *)swift_task_alloc(dword_1F49FC);
  v0[1045] = v3;
  *v3 = v0;
  v3[1] = sub_E98A8;
  v4 = v0[213];
  v3[7] = v0[1022];
  v3[8] = v4;
  v3[9] = v0[215];
  return swift_task_switch(sub_EB8B0, 0, 0);
}

uint64_t sub_E98A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 8360);
  *(_QWORD *)(*(_QWORD *)v1 + 8368) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_E9904, 0, 0);
}

uint64_t sub_E9904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t (*v9)(uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE __dst[1088];
  _OWORD v15[2];

  v1 = *(_QWORD *)(v0 + 8368);
  v2 = *(_QWORD *)(v0 + 8352);
  v3 = *(_QWORD *)(v0 + 8232);
  v4 = *(_QWORD **)(v0 + 8176);
  v5 = v4[10];
  v6 = v4[11];
  sub_49F4(v4 + 7, v5);
  memcpy(__dst, (const void *)(v0 + 16), sizeof(__dst));
  *(_OWORD *)(v0 + 8112) = *(_OWORD *)(v0 + 7992);
  v7 = *(_OWORD *)(v0 + 7992);
  *(_OWORD *)(v0 + 8128) = *(_OWORD *)(v0 + 8008);
  v8 = *(_OWORD *)(v0 + 8008);
  v15[0] = v7;
  v15[1] = v8;
  v9 = *(uint64_t (**)(uint64_t, uint64_t, _BYTE *, _OWORD *, uint64_t, uint64_t, uint64_t))(v6 + 8);
  sub_B0668(v0 + 8112);
  v10 = v9(v2, v3, __dst, v15, v1, v5, v6);
  v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_B0690(v0 + 8112);
  sub_62F8((_QWORD *)(v0 + 8072));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v12);
}

uint64_t sub_E9A2C()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 8072));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E9A64()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 8072));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E9A9C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_62F8((_QWORD *)(v0 + 8072));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E9B20()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 8072));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_E9B58(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;

  v5[142] = v4;
  v5[141] = a4;
  v5[140] = a3;
  v5[139] = a1;
  memcpy(v5 + 2, a2, 0x440uLL);
  return swift_task_switch(sub_E9BAC, 0, 0);
}

uint64_t sub_E9BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int128 v12;

  v1 = *(_QWORD *)(v0 + 1112);
  if (!*(_QWORD *)(v1 + 16))
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v0 + 1136);
  v3 = sub_5EDC(&qword_1F4A00);
  v4 = swift_allocObject(v3, 96, 7);
  *(_QWORD *)(v0 + 1144) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_18CB60;
  *(_BYTE *)(v4 + 32) = 1;
  v5 = v2 + 304;
  v12 = *(_OWORD *)(v0 + 1120);
  *(_QWORD *)(v4 + 40) = sub_8DDDC((uint64_t)&off_1DA110);
  *(_BYTE *)(v4 + 48) = 2;
  *(_QWORD *)(v4 + 56) = sub_8DDDC((uint64_t)&off_1DA138);
  *(_BYTE *)(v4 + 64) = 4;
  *(_QWORD *)(v4 + 72) = sub_8DDDC((uint64_t)&off_1DA160);
  *(_BYTE *)(v4 + 80) = 5;
  *(_QWORD *)(v4 + 88) = sub_8DDDC((uint64_t)&off_1DA188);
  v6 = v2 + OBJC_IVAR____TtC20BooksPersonalization31CollectionRecommendationService_logger;
  v7 = sub_5EDC(&qword_1F15E8);
  v8 = sub_5EDC(&qword_1F4A08);
  v9 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 1152) = v9;
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v1;
  *(_OWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 48) = v5;
  *(_QWORD *)(v9 + 56) = v0 + 16;
  *(_QWORD *)(v9 + 64) = v6;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 1160) = v10;
  *v10 = v0;
  v10[1] = sub_E9D70;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 1104, v7, v8, 0, 0, &unk_1F4A18, v9, v7);
}

uint64_t sub_E9D70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1160));
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_70C90, 0, 0);
}

void sub_E9DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = sub_5EDC(&qword_1F0D90);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v0, (uint64_t)v4);
  v5 = (char *)sub_E9EB4 + 4 * word_195878[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_E9EB4()
{
  _DWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *v1;
  v5 = *((_BYTE *)v1 + 8);
  v6 = v1[2];
  *v0 = *((unsigned __int8 *)v1 + 24);
  v7 = v1[4];
  v8 = v1[6];
  v9 = v1[9];
  v10 = *((_BYTE *)v1 + 40);
  swift_bridgeObjectRetain(v8);
  sub_40554(v7, v10);
  sub_40568(v7, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)v2 = v4;
  *(_BYTE *)(v2 + 8) = v5;
  *(_QWORD *)(v2 + 16) = v6;
  *(_BYTE *)(v2 + 24) = *v0;
  *(_QWORD *)(v2 + 32) = v7;
  *(_BYTE *)(v2 + 40) = v10;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = v8;
  *(_QWORD *)(v2 + 72) = v9;
  return swift_storeEnumTagMultiPayload(v2, v3, 0);
}

uint64_t sub_EA3C0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  __int128 v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  int *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v27 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  UUID.init()(v11);
  v15 = *a3;
  v28 = a3[1];
  v29 = v15;
  v16 = (uint64_t *)(a3 + 8);
  if (*((_BYTE *)a3 + 136))
    v16 = (uint64_t *)(a4 + 288);
  v17 = *v16;
  v18 = (uint64_t *)(a3 + 7);
  if (*((_BYTE *)a3 + 120))
    v18 = (uint64_t *)(a4 + 296);
  v19 = *v18;
  v20 = *((_BYTE *)a3 + 32);
  v21 = *((_QWORD *)a3 + 5);
  v22 = *((_BYTE *)a3 + 48);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5, v13, v9);
  v23 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  v24 = v27;
  *(_QWORD *)(a5 + v23[5]) = v27;
  *(_OWORD *)(a5 + v23[6]) = v29;
  *(_OWORD *)(a5 + v23[7]) = v28;
  *(_BYTE *)(a5 + v23[8]) = v14;
  *(_BYTE *)(a5 + v23[9]) = v20;
  *(_QWORD *)(a5 + v23[10]) = v21;
  *(_BYTE *)(a5 + v23[11]) = v22;
  *(_QWORD *)(a5 + v23[12]) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a5 + v23[13]) = v17;
  *(_QWORD *)(a5 + v23[14]) = v19;
  sub_B0904((uint64_t)&v29);
  sub_B0904((uint64_t)&v28);
  return swift_bridgeObjectRetain(v24);
}

uint64_t sub_EA534@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 24);
  *(_QWORD *)a2 = *(_QWORD *)(result + 16);
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_EA548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = a3;
  v3[7] = a1;
  return swift_task_switch(sub_EA564, 0, 0);
}

uint64_t sub_EA564()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int *v36;

  v1 = v0[9];
  v2 = *(_QWORD *)(v1 + 16);
  v0[10] = v2;
  if (!v2)
  {
    v23 = _swiftEmptyArrayStorage;
    v4 = _swiftEmptyArrayStorage;
    goto LABEL_25;
  }
  v3 = (_QWORD *)(swift_bridgeObjectRetain(v1) + 136);
  v4 = _swiftEmptyArrayStorage;
  v31 = _swiftEmptyArrayStorage;
  do
  {
    if ((*(_BYTE *)(v3 - 10) & 1) == 0)
    {
      v35 = v4;
      v33 = *(v3 - 13);
      v32 = *((_BYTE *)v3 - 96);
      v5 = *(v3 - 9);
      v6 = *((_BYTE *)v3 - 64);
      v7 = *(v3 - 7);
      v9 = *(v3 - 3);
      v8 = *(v3 - 2);
      v11 = *(v3 - 1);
      v10 = *v3;
      v12 = *(v3 - 5);
      v34 = *(v3 - 11);
      sub_40554(v5, v6);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v12);
      v13 = v9;
      v14 = v6;
      swift_bridgeObjectRetain(v13);
      v15 = v8;
      v16 = v5;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v10);
      sub_40554(v5, v6);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain_n(v12, 2);
      sub_40568(v5, v6);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v34)
      {
        v4 = v35;
LABEL_4:
        sub_40568(v16, v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      v4 = v35;
      if ((v32 & 1) != 0)
      {
        v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) != 0)
            v18 = v31;
          else
            v18 = sub_2FA6C(0, v31[2] + 1, 1, v31);
          v20 = v18[2];
          v19 = v18[3];
          v21 = v20 + 1;
          if (v20 >= v19 >> 1)
            v18 = sub_2FA6C((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
          v31 = v18;
LABEL_20:
          v18[2] = v21;
          v18[v20 + 4] = v33;
          goto LABEL_4;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
        v4 = sub_2FA6C(0, v35[2] + 1, 1, v35);
      v20 = v4[2];
      v22 = v4[3];
      v21 = v20 + 1;
      if (v20 >= v22 >> 1)
      {
        v18 = sub_2FA6C((_QWORD *)(v22 > 1), v20 + 1, 1, v4);
        v4 = v18;
      }
      else
      {
        v18 = v4;
      }
      goto LABEL_20;
    }
LABEL_5:
    v3 += 14;
    --v2;
  }
  while (v2);
  v0 = v30;
  swift_bridgeObjectRelease();
  v23 = v31;
LABEL_25:
  v0[11] = v23;
  v0[12] = v4;
  v24 = (_QWORD *)v0[7];
  v25 = v24[3];
  v26 = v24[4];
  sub_49F4(v24, v25);
  v27 = *(int **)(v26 + 8);
  v36 = (int *)((char *)v27 + *v27);
  v28 = (_QWORD *)swift_task_alloc(v27[1]);
  v0[13] = v28;
  *v28 = v0;
  v28[1] = sub_EA8D0;
  return ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))v36)(v4, v23, v25, v26);
}

uint64_t sub_EA8D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_EAE08;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_EA94C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_EA94C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];

  v1 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 40) = &_swiftEmptySetSingleton;
  v37 = (uint64_t *)(v0 + 40);
  if (!v1)
  {
    v25 = swift_bridgeObjectRelease();
    if (*((_QWORD *)&_swiftEmptySetSingleton + 2))
      goto LABEL_26;
    goto LABEL_29;
  }
  v2 = 0;
  v38 = *(_QWORD *)(v0 + 72) + 32;
  v39 = *(_QWORD *)(v0 + 112);
  do
  {
    v3 = v38 + 112 * v2;
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(_BYTE *)(v3 + 40);
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(_QWORD *)(v3 + 64);
    v9 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 88);
    v11 = *(_QWORD *)(v3 + 96);
    v10 = *(_QWORD *)(v3 + 104);
    v41 = *(_QWORD *)v3;
    if (*(_BYTE *)(v3 + 24) != 1)
    {
      v12 = *(_QWORD *)(v3 + 16);
      if (*((_QWORD *)&_swiftEmptySetSingleton + 2))
      {
        v13 = static Hasher._hash(seed:_:)(*((_QWORD *)&_swiftEmptySetSingleton + 5), v12);
        v14 = -1 << *((_BYTE *)&_swiftEmptySetSingleton + 32);
        v15 = v13 & ~v14;
        if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v15 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v15) & 1) != 0)
        {
          v16 = *((_QWORD *)&_swiftEmptySetSingleton + 6);
          if (*(_QWORD *)(v16 + 8 * v15) == v12)
          {
LABEL_13:
            sub_40554(v4, v5);
            swift_bridgeObjectRetain(v7);
            swift_bridgeObjectRetain(v9);
            swift_bridgeObjectRetain(v8);
            swift_bridgeObjectRetain(v11);
            swift_bridgeObjectRetain(v10);
            swift_bridgeObjectRetain(v6);
            v18 = v41;
LABEL_15:
            sub_1628D4(v42, v18);
            goto LABEL_16;
          }
          v17 = ~v14;
          while (1)
          {
            v15 = (v15 + 1) & v17;
            if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v15 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v15) & 1) == 0)
              break;
            if (*(_QWORD *)(v16 + 8 * v15) == v12)
              goto LABEL_13;
          }
        }
      }
      sub_40554(v4, v5);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v6);
      v18 = v12;
      goto LABEL_15;
    }
    sub_40554(v4, v5);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v6);
LABEL_16:
    if (*(_QWORD *)(v39 + 16) && (v19 = sub_39228(v41), (v20 & 1) != 0))
    {
      v21 = *(_QWORD *)(v39 + 56) + 72 * v19;
      v22 = *(_QWORD *)(v21 + 56);
      v23 = *(_BYTE *)(v21 + 64);
      sub_40568(v4, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v23 & 1) == 0)
      {
        if (sub_28554(v22, (uint64_t)&_swiftEmptySetSingleton))
          v24 = v41;
        else
          v24 = v22;
        sub_1628D4(v42, v24);
      }
    }
    else
    {
      sub_40568(v4, v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v0 = v40;
    ++v2;
  }
  while (v2 != *(_QWORD *)(v40 + 80));
  v25 = swift_bridgeObjectRelease();
  if (!*(_QWORD *)(*(_QWORD *)(v40 + 40) + 16))
    goto LABEL_29;
LABEL_26:
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v42[0] = v29;
    *(_DWORD *)v28 = 136315138;
    swift_beginAccess(v37, v37 - 3, 0, 0);
    v30 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
    v31 = Set.description.getter(v30, &type metadata for UInt64, &protocol witness table for UInt64);
    v33 = v32;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 48) = sub_9DA98(v31, v33, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v37 + 1, v0 + 56, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v26, v27, "Filtering recommendations because earlier selections already used the series or mapped series ID: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }

LABEL_29:
  v34 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 72));
  v35 = sub_F107C(v34, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v35);
}

uint64_t sub_EAE08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_EAE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[2];

  swift_bridgeObjectRetain(a1);
  v5 = sub_F165C(a3, a1);
  swift_bridgeObjectRelease();
  v6 = sub_3CD28((uint64_t)v5);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v6 + 16))
  {
    v7 = swift_bridgeObjectRetain_n(v6, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v20[0] = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = swift_bridgeObjectRetain(v6);
      v13 = Set.description.getter(v12, &type metadata for UInt64, &protocol witness table for UInt64);
      v15 = v14;
      swift_bridgeObjectRelease();
      v19 = sub_9DA98(v13, v15, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v8, v9, "Filtered recommendation(s) %s because the user already owns at least one title in this series.", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v6, 2);
    }

  }
  v16 = swift_bridgeObjectRetain(a3);
  v17 = sub_ADFC4(v16, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_EB040(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  *(_BYTE *)(v3 + 128) = *a1;
  return swift_task_switch(sub_EB060, 0, 0);
}

uint64_t sub_EB060()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  unint64_t v41;
  int *v42;

  v1 = *(unsigned __int8 *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 32);
  if (v1 == 2)
  {
    v40 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v3 = swift_bridgeObjectRetain(v2);
    return v40(v3);
  }
  v5 = 0xE90000000000006BLL;
  v6 = *(_QWORD *)(v2 + 16);
  if (!v6)
  {
    v35 = _swiftEmptyArrayStorage;
    if ((v1 & 1) == 0)
      goto LABEL_29;
LABEL_32:
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
    {
      v25 = _swiftEmptyArrayStorage;
    }
    else
    {
      v25 = v35;
      swift_bridgeObjectRetain(v35);
    }
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  v34 = v0;
  v33 = *(_BYTE *)(v0 + 128);
  v7 = (v1 & 1) == 0;
  if ((v1 & 1) != 0)
    v8 = 0x6F6F626F69647561;
  else
    v8 = 0x6B6F6F6265;
  v38 = v8;
  if (v7)
    v5 = 0xE500000000000000;
  v41 = v5;
  v9 = swift_bridgeObjectRetain(v2) + 72;
  v35 = _swiftEmptyArrayStorage;
  do
  {
    v39 = v6;
    v10 = *(_QWORD *)(v9 - 8);
    v11 = *(_BYTE *)v9;
    v12 = *(_QWORD *)(v9 + 8);
    v13 = *(_QWORD *)(v9 + 24);
    v15 = *(_QWORD *)(v9 + 40);
    v14 = *(_QWORD *)(v9 + 48);
    v17 = *(_QWORD *)(v9 + 56);
    v16 = *(_QWORD *)(v9 + 64);
    if (*(_BYTE *)(v9 - 32))
      v18 = 0x6F6F626F69647561;
    else
      v18 = 0x6B6F6F6265;
    if (*(_BYTE *)(v9 - 32))
      v19 = 0xE90000000000006BLL;
    else
      v19 = 0xE500000000000000;
    if (v18 == v38 && v19 == v41)
    {
      sub_40554(*(_QWORD *)(v9 - 8), *(_BYTE *)v9);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease_n(v41, 2);
      sub_40568(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v36 = *(_QWORD *)(v9 - 40);
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v38, v41, 0);
      sub_40554(v10, v11);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_40568(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0)
      {
        v21 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
          v21 = sub_2FA6C(0, v35[2] + 1, 1, v35);
        v23 = v21[2];
        v22 = v21[3];
        if (v23 >= v22 >> 1)
          v21 = sub_2FA6C((_QWORD *)(v22 > 1), v23 + 1, 1, v21);
        v21[2] = v23 + 1;
        v35 = v21;
        v21[v23 + 4] = v36;
      }
    }
    v9 += 112;
    v6 = v39 - 1;
  }
  while (v39 != 1);
  v0 = v34;
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
    goto LABEL_32;
LABEL_29:
  swift_bridgeObjectRelease();
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
  swift_bridgeObjectRelease();
  v25 = _swiftEmptyArrayStorage;
  if ((v24 & 1) != 0)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    v26 = _swiftEmptyArrayStorage;
    goto LABEL_37;
  }
  v26 = v35;
LABEL_37:
  *(_QWORD *)(v0 + 40) = v25;
  *(_QWORD *)(v0 + 48) = v26;
  v28 = *(_QWORD **)(v0 + 24);
  v29 = v28[3];
  v30 = v28[4];
  sub_49F4(v28, v29);
  v31 = *(int **)(v30 + 8);
  v42 = (int *)((char *)v31 + *v31);
  v32 = (_QWORD *)swift_task_alloc(v31[1]);
  *(_QWORD *)(v0 + 56) = v32;
  *v32 = v0;
  v32[1] = sub_EB4C8;
  return ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))v42)(v25, v26, v29, v30);
}

uint64_t sub_EB4C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 56);
  *(_QWORD *)(*v2 + 64) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_EB80C;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 72) = a1;
    v6 = sub_EB54C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_EB54C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  int *v16;

  v1 = *(_BYTE *)(v0 + 128);
  v2 = sub_E39A8(*(_QWORD *)(v0 + 72));
  *(_QWORD *)(v0 + 80) = v2;
  swift_bridgeObjectRelease();
  if ((v1 & 1) != 0)
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
    {
      v6 = _swiftEmptyArrayStorage;
      goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v4 = *(_BYTE *)(v0 + 128);
  v5 = swift_bridgeObjectRetain(v2);
  v6 = sub_38E18(v5);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
LABEL_8:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
LABEL_9:
    v9 = swift_bridgeObjectRetain(v2);
    v8 = sub_38E18(v9);
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v8 = _swiftEmptyArrayStorage;
LABEL_10:
  *(_QWORD *)(v0 + 88) = v6;
  *(_QWORD *)(v0 + 96) = v8;
  v10 = *(_QWORD **)(v0 + 24);
  v11 = v10[3];
  v12 = v10[4];
  sub_49F4(v10, v11);
  v13 = *(int **)(v12 + 8);
  v16 = (int *)((char *)v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc(v13[1]);
  *(_QWORD *)(v0 + 104) = v14;
  *v14 = v0;
  v14[1] = sub_EB6E4;
  return ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))v16)(v6, v8, v11, v12);
}

uint64_t sub_EB6E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(*v2 + 112) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_EB848;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 120) = a1;
    v6 = sub_EB768;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_EB768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 128) & 1;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  v5 = sub_F0374(v3, v2, v1, v4);
  swift_bridgeObjectRelease_n(v1, 2);
  swift_bridgeObjectRelease_n(v2, 2);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v5);
}

uint64_t sub_EB80C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_EB848()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_EB88C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 600);
  v2[7] = v1;
  v2[8] = v3;
  v2[9] = *(_QWORD *)(a1 + 616);
  return swift_task_switch(sub_EB8B0, 0, 0);
}

uint64_t sub_EB8B0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v1 = v0[9];
  v2 = (_QWORD *)v0[7];
  v12 = v0[8];
  swift_bridgeObjectRetain(v12);
  v3 = swift_bridgeObjectRetain(v1);
  sub_10F158(v3);
  v4 = sub_3CD28(v12);
  v0[10] = v4;
  swift_bridgeObjectRelease();
  v5 = v2 + 23;
  v6 = v2[26];
  v7 = v2[27];
  sub_49F4(v5, v6);
  v8 = *(int **)(v7 + 8);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[11] = v9;
  *v9 = v0;
  v9[1] = sub_EB970;
  return v11(v4, v6, v7);
}

uint64_t sub_EB970(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 88);
  *(_QWORD *)(*v2 + 96) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v6 = sub_EBEC8;
  }
  else
  {
    *(_QWORD *)(v4 + 104) = a1;
    v6 = sub_EB9EC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_EB9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  char v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = -1;
  v3 = -1 << *(_BYTE *)(v1 + 32);
  if (-v3 < 64)
    v2 = ~(-1 << -(char)v3);
  v4 = v2 & *(_QWORD *)(v1 + 64);
  v47 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain(v1);
  v6 = 0;
  while (1)
  {
    if (v4)
    {
      v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v8 = v7 | (v6 << 6);
      goto LABEL_27;
    }
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
      goto LABEL_67;
    if (v9 >= v47)
    {
LABEL_63:
      swift_release(v1);
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(_QWORD *))(v45 + 8))(_swiftEmptyDictionarySingleton);
    }
    v10 = *(_QWORD *)(v46 + 8 * v9);
    ++v6;
    if (!v10)
    {
      v6 = v9 + 1;
      if (v9 + 1 >= v47)
        goto LABEL_63;
      v10 = *(_QWORD *)(v46 + 8 * v6);
      if (!v10)
      {
        v6 = v9 + 2;
        if (v9 + 2 >= v47)
          goto LABEL_63;
        v10 = *(_QWORD *)(v46 + 8 * v6);
        if (!v10)
        {
          v6 = v9 + 3;
          if (v9 + 3 >= v47)
            goto LABEL_63;
          v10 = *(_QWORD *)(v46 + 8 * v6);
          if (!v10)
          {
            v6 = v9 + 4;
            if (v9 + 4 >= v47)
              goto LABEL_63;
            v10 = *(_QWORD *)(v46 + 8 * v6);
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_26:
    v4 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_27:
    v12 = (uint64_t *)(*(_QWORD *)(v1 + 56) + 16 * v8);
    v14 = *v12;
    v13 = (_QWORD *)v12[1];
    swift_bridgeObjectRetain(v13);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v17 = sub_39228(v14);
    v18 = _swiftEmptyDictionarySingleton[2];
    v19 = (v16 & 1) == 0;
    result = v18 + v19;
    if (__OFADD__(v18, v19))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    v20 = v16;
    if (_swiftEmptyDictionarySingleton[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v16 & 1) != 0)
          goto LABEL_34;
      }
      else
      {
        result = (uint64_t)sub_16DBAC();
        if ((v20 & 1) != 0)
          goto LABEL_34;
      }
    }
    else
    {
      sub_15F7E8(result, isUniquelyReferenced_nonNull_native);
      result = sub_39228(v14);
      if ((v20 & 1) != (v21 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v17 = result;
      if ((v20 & 1) != 0)
      {
LABEL_34:
        *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v17) = 0;
        goto LABEL_38;
      }
    }
    _swiftEmptyDictionarySingleton[(v17 >> 6) + 8] |= 1 << v17;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v17) = v14;
    *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v17) = 0;
    v22 = _swiftEmptyDictionarySingleton[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_66;
    _swiftEmptyDictionarySingleton[2] = v24;
LABEL_38:
    swift_bridgeObjectRelease();
    if (!v13[2])
      goto LABEL_6;
    v25 = v13[4];
    v26 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v28 = sub_39228(v25);
    v29 = _swiftEmptyDictionarySingleton[2];
    v30 = (v27 & 1) == 0;
    result = v29 + v30;
    if (__OFADD__(v29, v30))
      goto LABEL_65;
    v31 = v27;
    if (_swiftEmptyDictionarySingleton[3] >= result)
    {
      if ((v26 & 1) != 0)
      {
        if ((v27 & 1) != 0)
          goto LABEL_46;
      }
      else
      {
        result = (uint64_t)sub_16DBAC();
        if ((v31 & 1) != 0)
          goto LABEL_46;
      }
    }
    else
    {
      sub_15F7E8(result, v26);
      result = sub_39228(v25);
      if ((v31 & 1) != (v32 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v28 = result;
      if ((v31 & 1) != 0)
      {
LABEL_46:
        *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v28) = 1;
        goto LABEL_50;
      }
    }
    _swiftEmptyDictionarySingleton[(v28 >> 6) + 8] |= 1 << v28;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v28) = v25;
    *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v28) = 1;
    v33 = _swiftEmptyDictionarySingleton[2];
    v23 = __OFADD__(v33, 1);
    v34 = v33 + 1;
    if (v23)
      goto LABEL_68;
    _swiftEmptyDictionarySingleton[2] = v34;
LABEL_50:
    swift_bridgeObjectRelease();
    if (v13[2] > 1uLL)
    {
      v35 = v13[5];
      v36 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v38 = sub_39228(v35);
      v39 = _swiftEmptyDictionarySingleton[2];
      v40 = (v37 & 1) == 0;
      result = v39 + v40;
      if (__OFADD__(v39, v40))
        goto LABEL_69;
      v41 = v37;
      if (_swiftEmptyDictionarySingleton[3] < result)
      {
        sub_15F7E8(result, v36);
        result = sub_39228(v35);
        if ((v41 & 1) != (v42 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        v38 = result;
        if ((v41 & 1) == 0)
          goto LABEL_58;
LABEL_4:
        *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v38) = 2;
LABEL_5:
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      if ((v36 & 1) != 0)
      {
        if ((v37 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        result = (uint64_t)sub_16DBAC();
        if ((v41 & 1) != 0)
          goto LABEL_4;
      }
LABEL_58:
      _swiftEmptyDictionarySingleton[(v38 >> 6) + 8] |= 1 << v38;
      *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v38) = v35;
      *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v38) = 2;
      v43 = _swiftEmptyDictionarySingleton[2];
      v23 = __OFADD__(v43, 1);
      v44 = v43 + 1;
      if (v23)
        goto LABEL_70;
      _swiftEmptyDictionarySingleton[2] = v44;
      goto LABEL_5;
    }
LABEL_6:
    result = swift_bridgeObjectRelease();
  }
  v11 = v9 + 5;
  if (v11 >= v47)
    goto LABEL_63;
  v10 = *(_QWORD *)(v46 + 8 * v11);
  if (v10)
  {
    v6 = v11;
    goto LABEL_26;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v47)
      goto LABEL_63;
    v10 = *(_QWORD *)(v46 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_26;
  }
LABEL_71:
  __break(1u);
  return result;
}

uint64_t sub_EBEC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int64_t v55;
  _QWORD *v56;

  v1 = v0[12];
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  v54 = v0;
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[12];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136315138;
    v56 = (_QWORD *)v7;
    swift_getErrorValue(v5, v0 + 5, v0 + 2);
    v8 = Error.localizedDescription.getter(v0[3], v0[4]);
    v0[6] = sub_9DA98(v8, v9, (uint64_t *)&v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "Error fetching genres: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_errorRelease(v5);

  }
  else
  {
    v10 = v0[12];
    swift_errorRelease(v10);

    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }
  v11 = -1;
  v12 = -1 << LOBYTE(_swiftEmptyDictionarySingleton[4]);
  if (-v12 < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & _swiftEmptyDictionarySingleton[8];
  v55 = (unint64_t)(63 - v12) >> 6;
  result = swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
  v15 = 0;
  v16 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = __OFADD__(v15++, 1);
    if (v19)
      goto LABEL_71;
    if (v15 >= v55)
    {
LABEL_67:
      swift_release(_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease();
      return ((uint64_t (*)(_QWORD *))v54[1])(v16);
    }
    v20 = _swiftEmptyDictionarySingleton[v15 + 8];
    if (!v20)
      break;
LABEL_26:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = (uint64_t *)(_swiftEmptyDictionarySingleton[7] + 16 * v18);
    v24 = *v22;
    v23 = (_QWORD *)v22[1];
    swift_bridgeObjectRetain(v23);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
    v56 = v16;
    v27 = sub_39228(v24);
    v28 = v16[2];
    v29 = (v26 & 1) == 0;
    result = v28 + v29;
    if (__OFADD__(v28, v29))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
      goto LABEL_75;
    }
    v30 = v26;
    if (v16[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v26 & 1) != 0)
          goto LABEL_35;
      }
      else
      {
        result = (uint64_t)sub_16DBAC();
        v16 = v56;
        if ((v30 & 1) != 0)
          goto LABEL_35;
      }
    }
    else
    {
      sub_15F7E8(result, isUniquelyReferenced_nonNull_native);
      v16 = v56;
      result = sub_39228(v24);
      if ((v30 & 1) != (v31 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v27 = result;
      if ((v30 & 1) != 0)
      {
LABEL_35:
        *(_BYTE *)(v16[7] + v27) = 0;
        goto LABEL_36;
      }
    }
    v16[(v27 >> 6) + 8] |= 1 << v27;
    *(_QWORD *)(v16[6] + 8 * v27) = v24;
    *(_BYTE *)(v16[7] + v27) = 0;
    v32 = v16[2];
    v19 = __OFADD__(v32, 1);
    v33 = v32 + 1;
    if (v19)
      goto LABEL_70;
    v16[2] = v33;
LABEL_36:
    swift_bridgeObjectRelease();
    if (!v23[2])
      goto LABEL_9;
    v34 = v23[4];
    v35 = swift_isUniquelyReferenced_nonNull_native(v16);
    v56 = v16;
    v37 = sub_39228(v34);
    v38 = v16[2];
    v39 = (v36 & 1) == 0;
    result = v38 + v39;
    if (__OFADD__(v38, v39))
      goto LABEL_69;
    v40 = v36;
    if (v16[3] >= result)
    {
      if ((v35 & 1) != 0)
      {
        if ((v36 & 1) != 0)
          goto LABEL_45;
      }
      else
      {
        result = (uint64_t)sub_16DBAC();
        v16 = v56;
        if ((v40 & 1) != 0)
          goto LABEL_45;
      }
    }
    else
    {
      sub_15F7E8(result, v35);
      v16 = v56;
      result = sub_39228(v34);
      if ((v40 & 1) != (v41 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v37 = result;
      if ((v40 & 1) != 0)
      {
LABEL_45:
        *(_BYTE *)(v16[7] + v37) = 1;
        goto LABEL_46;
      }
    }
    v16[(v37 >> 6) + 8] |= 1 << v37;
    *(_QWORD *)(v16[6] + 8 * v37) = v34;
    *(_BYTE *)(v16[7] + v37) = 1;
    v42 = v16[2];
    v19 = __OFADD__(v42, 1);
    v43 = v42 + 1;
    if (v19)
      goto LABEL_72;
    v16[2] = v43;
LABEL_46:
    swift_bridgeObjectRelease();
    if (v23[2] > 1uLL)
    {
      v44 = v23[5];
      v45 = swift_isUniquelyReferenced_nonNull_native(v16);
      v56 = v16;
      v47 = sub_39228(v44);
      v48 = v16[2];
      v49 = (v46 & 1) == 0;
      result = v48 + v49;
      if (__OFADD__(v48, v49))
        goto LABEL_73;
      v50 = v46;
      if (v16[3] < result)
      {
        sub_15F7E8(result, v45);
        v16 = v56;
        result = sub_39228(v44);
        if ((v50 & 1) != (v51 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        v47 = result;
        if ((v50 & 1) == 0)
          goto LABEL_54;
LABEL_7:
        *(_BYTE *)(v16[7] + v47) = 2;
LABEL_8:
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      if ((v45 & 1) != 0)
      {
        if ((v46 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        result = (uint64_t)sub_16DBAC();
        v16 = v56;
        if ((v50 & 1) != 0)
          goto LABEL_7;
      }
LABEL_54:
      v16[(v47 >> 6) + 8] |= 1 << v47;
      *(_QWORD *)(v16[6] + 8 * v47) = v44;
      *(_BYTE *)(v16[7] + v47) = 2;
      v52 = v16[2];
      v19 = __OFADD__(v52, 1);
      v53 = v52 + 1;
      if (v19)
        goto LABEL_74;
      v16[2] = v53;
      goto LABEL_8;
    }
LABEL_9:
    result = swift_bridgeObjectRelease();
  }
  v21 = v15 + 1;
  if (v15 + 1 >= v55)
    goto LABEL_67;
  v20 = _swiftEmptyDictionarySingleton[v21 + 8];
  if (v20)
    goto LABEL_25;
  v21 = v15 + 2;
  if (v15 + 2 >= v55)
    goto LABEL_67;
  v20 = _swiftEmptyDictionarySingleton[v21 + 8];
  if (v20)
    goto LABEL_25;
  v21 = v15 + 3;
  if (v15 + 3 >= v55)
    goto LABEL_67;
  v20 = _swiftEmptyDictionarySingleton[v21 + 8];
  if (v20)
    goto LABEL_25;
  v21 = v15 + 4;
  if (v15 + 4 >= v55)
    goto LABEL_67;
  v20 = _swiftEmptyDictionarySingleton[v21 + 8];
  if (v20)
    goto LABEL_25;
  v21 = v15 + 5;
  if (v15 + 5 >= v55)
    goto LABEL_67;
  v20 = _swiftEmptyDictionarySingleton[v21 + 8];
  if (v20)
  {
LABEL_25:
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v55)
      goto LABEL_67;
    v20 = _swiftEmptyDictionarySingleton[v15 + 8];
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_75:
  __break(1u);
  return result;
}

uint64_t sub_EC518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v8[30] = a8;
  v8[31] = v22;
  v8[28] = a6;
  v8[29] = a7;
  v8[26] = a4;
  v8[27] = a5;
  v8[24] = a2;
  v8[25] = a3;
  v8[23] = a1;
  v9 = sub_5EDC(&qword_1F15E8);
  v8[32] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[33] = v10;
  v8[34] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CollectionRecommendation(0);
  v8[35] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[36] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[37] = swift_task_alloc(v13);
  v8[38] = swift_task_alloc(v13);
  v14 = type metadata accessor for Logger(0);
  v8[39] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v8[40] = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v8[41] = v16;
  v8[42] = swift_task_alloc((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F15F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[43] = swift_task_alloc(v17);
  v8[44] = swift_task_alloc(v17);
  v18 = sub_5EDC(&qword_1F4A20);
  v8[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_5EDC(&qword_1F4A28);
  v8[46] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v8[47] = v20;
  v8[48] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_EC678, 0, 0);
}

uint64_t sub_EC678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  _QWORD v54[11];

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 208);
    v4 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    v5 = 0;
    v48 = v0;
    v45 = v3;
    v46 = v2;
    v44 = v4;
    do
    {
      if (*(_QWORD *)(v3 + 16))
      {
        v6 = (unsigned __int8 *)(v4 + 16 * v5);
        v7 = *v6;
        v8 = *((_QWORD *)v6 + 1);
        swift_bridgeObjectRetain(v8);
        v49 = v7;
        v9 = sub_39A20(v7);
        if ((v10 & 1) == 0)
          goto LABEL_3;
        v47 = v5;
        v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 24 * v9 + 16);
        v51 = v8 + 56;
        v12 = -1 << *(_BYTE *)(v8 + 32);
        if (-v12 < 64)
          v13 = ~(-1 << -(char)v12);
        else
          v13 = -1;
        v14 = v13 & *(_QWORD *)(v8 + 56);
        v52 = (unint64_t)(63 - v12) >> 6;
        v53 = v11 + 56;
        swift_bridgeObjectRetain(v11);
        v15 = 0;
        v50 = v8;
        while (2)
        {
          while (2)
          {
            if (v14)
            {
              v16 = __clz(__rbit64(v14));
              v14 &= v14 - 1;
              v17 = v16 | (v15 << 6);
              if (!*(_QWORD *)(v11 + 16))
                continue;
              goto LABEL_26;
            }
            break;
          }
          if (__OFADD__(v15++, 1))
          {
            __break(1u);
            goto LABEL_74;
          }
          if (v15 >= v52)
            break;
          v19 = *(_QWORD *)(v51 + 8 * v15);
          if (v19)
            goto LABEL_25;
          v20 = v15 + 1;
          if (v15 + 1 >= v52)
            break;
          v19 = *(_QWORD *)(v51 + 8 * v20);
          if (v19)
            goto LABEL_24;
          v20 = v15 + 2;
          if (v15 + 2 >= v52)
            break;
          v19 = *(_QWORD *)(v51 + 8 * v20);
          if (v19)
            goto LABEL_24;
          v20 = v15 + 3;
          if (v15 + 3 < v52)
          {
            v19 = *(_QWORD *)(v51 + 8 * v20);
            if (!v19)
            {
              while (1)
              {
                v15 = v20 + 1;
                if (__OFADD__(v20, 1))
                  break;
                if (v15 >= v52)
                  goto LABEL_70;
                v19 = *(_QWORD *)(v51 + 8 * v15);
                ++v20;
                if (v19)
                  goto LABEL_25;
              }
LABEL_74:
              __break(1u);
              JUMPOUT(0xECF4CLL);
            }
LABEL_24:
            v15 = v20;
LABEL_25:
            v14 = (v19 - 1) & v19;
            v17 = __clz(__rbit64(v19)) + (v15 << 6);
            if (!*(_QWORD *)(v11 + 16))
              continue;
LABEL_26:
            v21 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 48) + v17);
            Hasher.init(_seed:)(v54, *(_QWORD *)(v11 + 40));
            v22 = 0x6F6F626F69647561;
            if (v21 != 1)
              v22 = 0x646578696DLL;
            v23 = 0xE90000000000006BLL;
            if (v21 != 1)
              v23 = 0xE500000000000000;
            if (v21)
              v24 = v22;
            else
              v24 = 0x6B6F6F6265;
            if (v21)
              v25 = v23;
            else
              v25 = 0xE500000000000000;
            swift_bridgeObjectRetain(v11);
            String.hash(into:)(v54, v24, v25);
            swift_bridgeObjectRelease();
            v26 = Hasher._finalize()();
            v27 = -1 << *(_BYTE *)(v11 + 32);
            v28 = v26 & ~v27;
            if (((*(_QWORD *)(v53 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
            {
LABEL_11:
              swift_bridgeObjectRelease();
              v8 = v50;
              continue;
            }
            v29 = ~v27;
LABEL_38:
            if (*(_BYTE *)(*(_QWORD *)(v11 + 48) + v28))
            {
              if (*(_BYTE *)(*(_QWORD *)(v11 + 48) + v28) == 1)
              {
                v30 = 0x6F6F626F69647561;
                v31 = 0xE90000000000006BLL;
                if (v21)
                  goto LABEL_41;
LABEL_52:
                v33 = 0xE500000000000000;
                v32 = 0x6B6F6F6265;
                if (v30 == 0x6B6F6F6265)
                {
LABEL_53:
                  if (v31 == v33)
                  {
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
LABEL_58:
                    swift_bridgeObjectRelease();
                    v8 = v50;
                    if (v21 != 2)
                    {
                      v35 = *(_QWORD *)(v48 + 216);
                      LOBYTE(v54[0]) = v21;
                      v36 = sub_180F74();
                      swift_bridgeObjectRetain(v35);
                      v37 = sub_F17EC(v36, v35);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v54[0] = &_swiftEmptySetSingleton;
                      v38 = *(_QWORD *)(v37 + 16);
                      if (v38)
                      {
                        swift_bridgeObjectRetain(v37);
                        for (i = 0; i != v38; ++i)
                        {
                          v40 = *(_QWORD *)(v37 + 8 * i + 32);
                          v41 = (_QWORD *)swift_bridgeObjectRetain(v40);
                          sub_8F5F8(v41);
                        }
                        swift_bridgeObjectRelease_n(v37, 2);
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                      }
                      __asm { BR              X8 }
                    }
                    continue;
                  }
                }
LABEL_54:
                v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v32, v33, 0);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v34 & 1) != 0)
                  goto LABEL_58;
                v28 = (v28 + 1) & v29;
                if (((*(_QWORD *)(v53 + ((v28 >> 3) & 0xFFFFFFFFFFFFF8)) >> v28) & 1) == 0)
                  goto LABEL_11;
                goto LABEL_38;
              }
              v31 = 0xE500000000000000;
              v30 = 0x646578696DLL;
              if (!v21)
                goto LABEL_52;
            }
            else
            {
              v31 = 0xE500000000000000;
              v30 = 0x6B6F6F6265;
              if (!v21)
                goto LABEL_52;
            }
LABEL_41:
            if (v21 == 1)
              v32 = 0x6F6F626F69647561;
            else
              v32 = 0x646578696DLL;
            if (v21 == 1)
              v33 = 0xE90000000000006BLL;
            else
              v33 = 0xE500000000000000;
            if (v30 == v32)
              goto LABEL_53;
            goto LABEL_54;
          }
          break;
        }
LABEL_70:
        swift_release(v8);
        v5 = v47;
        v0 = v48;
        v3 = v45;
        v2 = v46;
        v4 = v44;
LABEL_3:
        swift_bridgeObjectRelease();
      }
      ++v5;
    }
    while (v5 != v2);
    swift_bridgeObjectRelease();
  }
  TaskGroup.makeAsyncIterator()(**(_QWORD **)(v0 + 192), *(_QWORD *)(v0 + 256));
  *(_QWORD *)(v0 + 392) = _swiftEmptyArrayStorage;
  v42 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 400) = v42;
  *v42 = v0;
  v42[1] = sub_ECF68;
  return TaskGroup.Iterator.next(isolation:)(*(_QWORD *)(v0 + 360), 0, 0, *(_QWORD *)(v0 + 368));
}

uint64_t sub_ECF68()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 400));
  return swift_task_switch(sub_ECFBC, 0, 0);
}

uint64_t sub_ECFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 264) + 48))(v1, 1, *(_QWORD *)(v0 + 256)) == 1)
  {
    v2 = *(_QWORD *)(v0 + 384);
    v3 = *(_QWORD *)(v0 + 392);
    v5 = *(_QWORD *)(v0 + 344);
    v4 = *(_QWORD *)(v0 + 352);
    v6 = *(_QWORD *)(v0 + 336);
    v8 = *(_QWORD *)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 304);
    v27 = *(_QWORD *)(v0 + 272);
    v9 = *(_QWORD **)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 376) + 8))(v2, *(_QWORD *)(v0 + 368));
    *v9 = v3;
    swift_task_dealloc(v2);
    swift_task_dealloc(v1);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 280);
    v12 = *(_QWORD *)(v0 + 288);
    v13 = *(_QWORD *)(v0 + 272);
    sub_41300(v1, v13, &qword_1F15E8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
    {
      sub_417D8(*(_QWORD *)(v0 + 272), &qword_1F15E8);
    }
    else
    {
      v14 = *(_QWORD *)(v0 + 392);
      v16 = *(_QWORD *)(v0 + 296);
      v15 = *(_QWORD *)(v0 + 304);
      sub_A2618(*(_QWORD *)(v0 + 272), v15, type metadata accessor for CollectionRecommendation);
      sub_52258(v15, v16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      v18 = *(_QWORD *)(v0 + 392);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v18 = sub_2FFE0(0, *(_QWORD *)(v18 + 16) + 1, 1, *(_QWORD *)(v0 + 392));
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      v21 = v20 + 1;
      if (v20 >= v19 >> 1)
      {
        v26 = sub_2FFE0(v19 > 1, v20 + 1, 1, v18);
        v21 = v20 + 1;
        v18 = v26;
      }
      v22 = *(_QWORD *)(v0 + 296);
      v23 = *(_QWORD *)(v0 + 304);
      v24 = *(_QWORD *)(v0 + 288);
      *(_QWORD *)(v18 + 16) = v21;
      sub_A2618(v22, v18+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v20, type metadata accessor for CollectionRecommendation);
      sub_5229C(v23);
      *(_QWORD *)(v0 + 392) = v18;
    }
    v25 = (_QWORD *)swift_task_alloc(async function pointer to TaskGroup.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 400) = v25;
    *v25 = v0;
    v25[1] = sub_ECF68;
    return TaskGroup.Iterator.next(isolation:)(*(_QWORD *)(v0 + 360), 0, 0, *(_QWORD *)(v0 + 368));
  }
}

uint64_t sub_ED204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  *(_QWORD *)(v8 + 1264) = v16;
  *(_BYTE *)(v8 + 1370) = a8;
  *(_QWORD *)(v8 + 1256) = a7;
  *(_QWORD *)(v8 + 1248) = a6;
  *(_QWORD *)(v8 + 1240) = a5;
  *(_QWORD *)(v8 + 1232) = a4;
  *(_QWORD *)(v8 + 1224) = a1;
  v9 = sub_5EDC(&qword_1F15E8);
  *(_QWORD *)(v8 + 1272) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CollectionRecommendation(0);
  *(_QWORD *)(v8 + 1280) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 1288) = v11;
  *(_QWORD *)(v8 + 1296) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5EDC(&qword_1F15E0);
  *(_QWORD *)(v8 + 1304) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5EDC(&qword_1F0D90);
  *(_QWORD *)(v8 + 1312) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 1320) = v14;
  *(_QWORD *)(v8 + 1328) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_ED2F4, 0, 0);
}

uint64_t sub_ED2F4()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 1280);
  v2 = *(const void **)(v0 + 1248);
  v3 = *(_QWORD *)(v0 + 1240);
  v4 = *(_QWORD **)(v0 + 1232);
  v5 = *(_QWORD *)(v0 + 1224);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1288) + 56);
  *(_QWORD *)(v0 + 1336) = v6;
  v6(v5, 1, 1, v1);
  sub_49F4(v4, v4[3]);
  sub_F2958(v3, v0 + 1104);
  memcpy((void *)(v0 + 16), v2, 0x440uLL);
  *(_BYTE *)(v0 + 1368) = 5;
  v7 = (_QWORD *)swift_task_alloc(dword_1F631C);
  *(_QWORD *)(v0 + 1344) = v7;
  *v7 = v0;
  v7[1] = sub_ED3D8;
  return sub_12FD90(v0 + 1369, v0 + 1104, v0 + 16, (_BYTE *)(v0 + 1368));
}

uint64_t sub_ED3D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1344);
  *(_QWORD *)(*v2 + 1352) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_ED67C;
  }
  else
  {
    *(_QWORD *)(v4 + 1360) = a1;
    v6 = sub_ED44C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_ED44C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 1360);
  v2 = *(_QWORD *)(v0 + 1256);
  swift_bridgeObjectRetain(v2);
  v3 = sub_F0E34(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v0 + 1320);
    v5 = *(_QWORD *)(v0 + 1312);
    v6 = *(_QWORD *)(v0 + 1304);
    *(_QWORD *)(v0 + 1200) = v3;
    v7 = sub_5EDC(&qword_1F1378);
    v8 = sub_3EDBC(&qword_1F1608, &qword_1F1378, (uint64_t)&protocol conformance descriptor for [A]);
    NonEmpty.init(_:)(v0 + 1200, v7, v8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
    {
      sub_417D8(*(_QWORD *)(v0 + 1304), &qword_1F15E0);
    }
    else
    {
      v9 = *(_QWORD *)(v0 + 1328);
      v10 = *(_QWORD *)(v0 + 1320);
      v11 = *(_QWORD *)(v0 + 1312);
      v12 = *(_QWORD *)(v0 + 1288);
      v13 = *(_QWORD *)(v0 + 1280);
      v14 = *(_QWORD *)(v0 + 1272);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v10 + 32))(v9, *(_QWORD *)(v0 + 1304), v11);
      sub_E5A3C();
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13) == 1)
      {
        sub_417D8(*(_QWORD *)(v0 + 1272), &qword_1F15E8);
      }
      else
      {
        v15 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 1336);
        v16 = *(_QWORD *)(v0 + 1296);
        v17 = *(_QWORD *)(v0 + 1280);
        v18 = *(_QWORD *)(v0 + 1272);
        v19 = *(_QWORD *)(v0 + 1224);
        sub_417D8(v19, &qword_1F15E8);
        sub_A2618(v18, v16, type metadata accessor for CollectionRecommendation);
        sub_A2618(v16, v19, type metadata accessor for CollectionRecommendation);
        v15(v19, 0, 1, v17);
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v20 = *(_QWORD *)(v0 + 1304);
  v21 = *(_QWORD *)(v0 + 1296);
  v22 = *(_QWORD *)(v0 + 1272);
  swift_task_dealloc(*(_QWORD *)(v0 + 1328));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_ED67C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 1352);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 1352);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v15 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v5, v0 + 1208, v0 + 1176);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 1184), *(_QWORD *)(v0 + 1192));
    *(_QWORD *)(v0 + 1216) = sub_9DA98(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1216, v0 + 1224, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl(&dword_0, v3, v4, "Error fetching legacy MAPI collection: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_errorRelease(v5);

  }
  else
  {
    v10 = *(_QWORD *)(v0 + 1352);
    swift_errorRelease(v10);

    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }
  v11 = *(_QWORD *)(v0 + 1304);
  v12 = *(_QWORD *)(v0 + 1296);
  v13 = *(_QWORD *)(v0 + 1272);
  swift_task_dealloc(*(_QWORD *)(v0 + 1328));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_ED860()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_62F8(v0 + 2);
  sub_62F8(v0 + 7);
  swift_release(v0[12]);
  sub_62F8(v0 + 13);
  sub_62F8(v0 + 18);
  sub_62F8(v0 + 23);
  sub_62F8(v0 + 28);
  sub_62F8(v0 + 33);
  sub_62F8(v0 + 38);
  v1 = (char *)v0 + OBJC_IVAR____TtC20BooksPersonalization31CollectionRecommendationService_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_ED8EC()
{
  uint64_t v0;

  sub_ED860();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_ED910(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1F49C4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_70AB4;
  return sub_E6438(a1);
}

uint64_t sub_ED960(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  Swift::Int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  _BYTE v13[9];
  uint64_t v14;
  char v15;
  unsigned __int8 v16;

  v6 = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(_BYTE *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v15 = *a1;
  sub_EDA30();
  v10 = v16;
  if (v16 == 7)
    return sub_1637DC(v13, v6);
  swift_bridgeObjectRetain(v9);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a5);
  v14 = *a5;
  *a5 = 0x8000000000000000;
  sub_1705F4(v7, v8, v9, v10, isUniquelyReferenced_nonNull_native);
  *a5 = v14;
  return swift_bridgeObjectRelease();
}

void sub_EDA30()
{
  __asm { BR              X11 }
}

void sub_EDA74(char a1@<W8>)
{
  _BYTE *v1;

  *v1 = a1;
}

void sub_EDA90()
{
  sub_EDA74(1);
}

void sub_EDA98()
{
  sub_EDA74(2);
}

void sub_EDAA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;

  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain_n(v0, 2);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  v4 = sub_3CD28(v0);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRelease();
    v6 = swift_bridgeObjectRetain(v3);
    v7 = sub_3CD28(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v3, 2);
    v8 = sub_28554(10016, v7);
    swift_bridgeObjectRelease();
    if (!v8)
      goto LABEL_3;
LABEL_6:
    sub_EDA74(7);
    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = sub_28554(10016, v4);
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_6;
LABEL_3:
  sub_EDA74(4);
}

uint64_t sub_EDB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v6 = *v2;
  v5 = v2[1];
  v8 = v2[2];
  v7 = v2[3];
  v17 = *((_BYTE *)v2 + 32);
  v16 = v2[5];
  v15 = *((_BYTE *)v2 + 48);
  v9 = v2[10];
  v19 = v2[9];
  v20 = v2[8];
  v10 = v2[12];
  v18 = v2[11];
  v21 = *((_BYTE *)v2 + 137);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a1);
  v11 = sub_F250C(v9, a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a1);
  v12 = swift_bridgeObjectRetain(v10);
  v13 = sub_F250C(v12, a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 24) = v7;
  *(_BYTE *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v16;
  *(_BYTE *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = &_swiftEmptySetSingleton;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v19;
  *(_QWORD *)(a2 + 80) = v11;
  *(_QWORD *)(a2 + 88) = v18;
  *(_QWORD *)(a2 + 96) = v13;
  *(_BYTE *)(a2 + 104) = 4;
  *(_QWORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = 1;
  *(_QWORD *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 136) = 1;
  *(_BYTE *)(a2 + 137) = v21;
  return result;
}

uint64_t sub_EDD00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_EDD14(a1, a2);
}

uint64_t sub_EDD14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_BYTE *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_BYTE *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  v8 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = v6;
  *(_QWORD *)(a2 + 72) = v7;
  swift_bridgeObjectRetain(v6);
  return sub_40554(v5, v8);
}

uint64_t sub_EDD90(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_EDE34(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

unint64_t sub_EDF1C()
{
  unint64_t result;

  result = qword_1F47C8;
  if (!qword_1F47C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionRecommendationType, &type metadata for CollectionRecommendationType);
    atomic_store(result, (unint64_t *)&qword_1F47C8);
  }
  return result;
}

uint64_t destroy for CollectionRecommendationRequest(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[10]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for CollectionRecommendationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  v6 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 88) = v6;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v8;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for CollectionRecommendationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  v14 = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = v14;
  v15 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = v15;
  *(_BYTE *)(a1 + 137) = *(_BYTE *)(a2 + 137);
  return a1;
}

__n128 initializeWithTake for CollectionRecommendationRequest(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 122) = *(_OWORD *)(a2 + 122);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for CollectionRecommendationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionRecommendationRequest(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 138))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionRecommendationRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 136) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 138) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 138) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CollectionRecommendationRequest()
{
  return &type metadata for CollectionRecommendationRequest;
}

uint64_t storeEnumTagSinglePayload for CollectionRecommendationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_EE370 + 4 * byte_19589B[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_EE3A4 + 4 * byte_195896[v4]))();
}

uint64_t sub_EE3A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_EE3AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xEE3B4);
  return result;
}

uint64_t sub_EE3C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xEE3C8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_EE3CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_EE3D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionRecommendationType()
{
  return &type metadata for CollectionRecommendationType;
}

uint64_t assignWithCopy for CollectionRecommendationOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = a2[2];
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for CollectionRecommendationOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionRecommendationOptions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionRecommendationOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CollectionRecommendationOptions()
{
  return &type metadata for CollectionRecommendationOptions;
}

uint64_t initializeBufferWithCopyOfBuffer for CollectionRecommendation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_EE570 + 4 * byte_1958A0[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t destroy for CollectionRecommendation(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      if (*(unsigned __int8 *)(a1 + 40) != 255)
        swift_bridgeObjectRelease();
      goto LABEL_5;
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      v4 = sub_5EDC(&qword_1F0D90);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
    case 2:
      v5 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = (uint64_t *)(a1 + *(int *)(sub_5EDC(&qword_1F0D98) + 48));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v6[16];
      if (v7 >> 1 != 0xFFFFFFFF)
        sub_62E8(v6[10], v6[11], v6[12], v6[13], v6[14], v6[15], v7);
LABEL_5:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 9:
      result = *(_QWORD *)(a1 + 64);
      if (!result)
        return result;
      if (*(unsigned __int8 *)(a1 + 56) != 255)
        swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    default:
      return result;
  }
}

void initializeWithCopy for CollectionRecommendation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_EEC64 + 4 * byte_1958B4[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

uint64_t sub_EEC64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)v0 = *(_QWORD *)v2;
  *(_BYTE *)(v0 + 8) = *(_BYTE *)(v2 + 8);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v2 + 16);
  *(_BYTE *)(v0 + 24) = *(_BYTE *)(v2 + 24);
  v3 = (_QWORD *)(v2 + 32);
  v4 = *(unsigned __int8 *)(v2 + 40);
  if (v4 == 255)
  {
    *(_QWORD *)(v0 + 32) = *v3;
    *(_BYTE *)(v0 + 40) = *(_BYTE *)(v2 + 40);
  }
  else
  {
    v5 = *v3;
    *(_QWORD *)(v0 + 32) = *v3;
    *(_BYTE *)(v0 + 40) = v4 & 1;
    swift_bridgeObjectRetain(v5);
  }
  v6 = *(_QWORD *)(v2 + 48);
  v7 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v0 + 48) = v6;
  *(_QWORD *)(v0 + 56) = v7;
  v9 = *(_QWORD *)(v2 + 64);
  v8 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(v0 + 64) = v9;
  *(_QWORD *)(v0 + 72) = v8;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v9);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t assignWithCopy for CollectionRecommendation(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_5229C(result);
    v5 = (char *)&loc_EF1D8 + 4 * byte_1958BE[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

_BYTE *initializeWithTake for CollectionRecommendation(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 1u:
      v6 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_11;
    case 2u:
      v10 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = sub_5EDC(&qword_1F0D98);
      memcpy(&a1[*(int *)(v11 + 48)], &a2[*(int *)(v11 + 48)], 0x221uLL);
      *(_QWORD *)&a1[*(int *)(v11 + 64)] = *(_QWORD *)&a2[*(int *)(v11 + 64)];
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_11;
    case 3u:
      v12 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
      v13 = sub_5EDC(&qword_1F3418);
      *(_QWORD *)&a1[*(int *)(v13 + 48)] = *(_QWORD *)&a2[*(int *)(v13 + 48)];
      a1[*(int *)(v13 + 64)] = a2[*(int *)(v13 + 64)];
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_11;
    case 4u:
      v14 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
      v15 = sub_5EDC(&qword_1F3420);
      a1[*(int *)(v15 + 48)] = a2[*(int *)(v15 + 48)];
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_11;
    case 5u:
      v16 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
      v17 = sub_5EDC(&qword_1F3418);
      *(_QWORD *)&a1[*(int *)(v17 + 48)] = *(_QWORD *)&a2[*(int *)(v17 + 48)];
      a1[*(int *)(v17 + 64)] = a2[*(int *)(v17 + 64)];
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_11;
    case 6u:
      v18 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
      v19 = sub_5EDC(&qword_1F3420);
      a1[*(int *)(v19 + 48)] = a2[*(int *)(v19 + 48)];
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_11;
    case 7u:
      v20 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a1, a2, v20);
      v21 = sub_5EDC(&qword_1F3420);
      a1[*(int *)(v21 + 48)] = a2[*(int *)(v21 + 48)];
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_11;
    case 8u:
      v22 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
      v23 = sub_5EDC(&qword_1F3420);
      a1[*(int *)(v23 + 48)] = a2[*(int *)(v23 + 48)];
      v7 = a1;
      v8 = a3;
      v9 = 8;
LABEL_11:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

_BYTE *assignWithTake for CollectionRecommendation(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_5229C((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 1u:
        v6 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_12;
      case 2u:
        v10 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
        v11 = sub_5EDC(&qword_1F0D98);
        memcpy(&a1[*(int *)(v11 + 48)], &a2[*(int *)(v11 + 48)], 0x221uLL);
        *(_QWORD *)&a1[*(int *)(v11 + 64)] = *(_QWORD *)&a2[*(int *)(v11 + 64)];
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_12;
      case 3u:
        v12 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, a2, v12);
        v13 = sub_5EDC(&qword_1F3418);
        *(_QWORD *)&a1[*(int *)(v13 + 48)] = *(_QWORD *)&a2[*(int *)(v13 + 48)];
        a1[*(int *)(v13 + 64)] = a2[*(int *)(v13 + 64)];
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_12;
      case 4u:
        v14 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = sub_5EDC(&qword_1F3420);
        a1[*(int *)(v15 + 48)] = a2[*(int *)(v15 + 48)];
        v7 = a1;
        v8 = a3;
        v9 = 4;
        goto LABEL_12;
      case 5u:
        v16 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a1, a2, v16);
        v17 = sub_5EDC(&qword_1F3418);
        *(_QWORD *)&a1[*(int *)(v17 + 48)] = *(_QWORD *)&a2[*(int *)(v17 + 48)];
        a1[*(int *)(v17 + 64)] = a2[*(int *)(v17 + 64)];
        v7 = a1;
        v8 = a3;
        v9 = 5;
        goto LABEL_12;
      case 6u:
        v18 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(a1, a2, v18);
        v19 = sub_5EDC(&qword_1F3420);
        a1[*(int *)(v19 + 48)] = a2[*(int *)(v19 + 48)];
        v7 = a1;
        v8 = a3;
        v9 = 6;
        goto LABEL_12;
      case 7u:
        v20 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(a1, a2, v20);
        v21 = sub_5EDC(&qword_1F3420);
        a1[*(int *)(v21 + 48)] = a2[*(int *)(v21 + 48)];
        v7 = a1;
        v8 = a3;
        v9 = 7;
        goto LABEL_12;
      case 8u:
        v22 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(a1, a2, v22);
        v23 = sub_5EDC(&qword_1F3420);
        a1[*(int *)(v23 + 48)] = a2[*(int *)(v23 + 48)];
        v7 = a1;
        v8 = a3;
        v9 = 8;
LABEL_12:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void sub_EFD0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[32];
  _BYTE v7[32];
  _BYTE v8[32];
  _BYTE v9[32];
  _BYTE v10[32];
  _BYTE v11[32];
  _QWORD v12[10];

  v12[0] = "P";
  sub_EFE68(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v12[1] = v4;
    swift_getTupleTypeLayout3(v11, v4, &unk_195BB8, (char *)&value witness table for Builtin.BridgeObject + 64);
    v12[2] = v11;
    swift_getTupleTypeLayout3(v10, v4, (char *)&value witness table for Builtin.Int64 + 64, &unk_195BD0);
    v12[3] = v10;
    swift_getTupleTypeLayout2(v9, v4, &unk_195BD0);
    v12[4] = v9;
    swift_getTupleTypeLayout3(v8, v4, (char *)&value witness table for Builtin.Int64 + 64, &unk_195BD0);
    v12[5] = v8;
    swift_getTupleTypeLayout2(v7, v4, &unk_195BD0);
    v12[6] = v7;
    swift_getTupleTypeLayout2(v6, v4, &unk_195BD0);
    v12[7] = v6;
    swift_getTupleTypeLayout2(v5, v4, &unk_195BD0);
    v12[8] = v5;
    v12[9] = &unk_195BE8;
    swift_initEnumMetadataMultiPayload(a1, 256, 10, v12);
  }
}

void sub_EFE68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1F4850)
  {
    v2 = sub_5F68(&qword_1F1378);
    v3 = sub_3EDBC(&qword_1F1608, &qword_1F1378, (uint64_t)&protocol conformance descriptor for [A]);
    v4 = type metadata accessor for NonEmpty(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1F4850);
  }
}

uint64_t sub_EFEEC()
{
  return type metadata accessor for CollectionRecommendationService(0);
}

uint64_t type metadata accessor for CollectionRecommendationService(uint64_t a1)
{
  return sub_A2060(a1, qword_1F48B8, (uint64_t)&nominal type descriptor for CollectionRecommendationService);
}

uint64_t sub_EFF08(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "(";
  v4[4] = "(";
  v4[5] = "(";
  v4[6] = "(";
  v4[7] = "(";
  v4[8] = "(";
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollectionRecommendationOptions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_EFFE8 + 4 * byte_1958DD[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_F001C + 4 * byte_1958D8[v4]))();
}

uint64_t sub_F001C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F0024(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF002CLL);
  return result;
}

uint64_t sub_F0038(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF0040);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_F0044(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F004C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionRecommendationOptions.CodingKeys()
{
  return &type metadata for CollectionRecommendationOptions.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CollectionRecommendationRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CollectionRecommendationRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_F0144 + 4 * byte_1958E7[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_F0178 + 4 * byte_1958E2[v4]))();
}

uint64_t sub_F0178(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F0180(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF0188);
  return result;
}

uint64_t sub_F0194(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF019CLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_F01A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F01A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionRecommendationRequest.CodingKeys()
{
  return &type metadata for CollectionRecommendationRequest.CodingKeys;
}

unint64_t sub_F01C8()
{
  unint64_t result;

  result = qword_1F4988;
  if (!qword_1F4988)
  {
    result = swift_getWitnessTable(&unk_195D74, &type metadata for CollectionRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F4988);
  }
  return result;
}

unint64_t sub_F0210()
{
  unint64_t result;

  result = qword_1F4990;
  if (!qword_1F4990)
  {
    result = swift_getWitnessTable(&unk_195E2C, &type metadata for CollectionRecommendationOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F4990);
  }
  return result;
}

unint64_t sub_F0258()
{
  unint64_t result;

  result = qword_1F49A0;
  if (!qword_1F49A0)
  {
    result = swift_getWitnessTable(&unk_195D9C, &type metadata for CollectionRecommendationOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F49A0);
  }
  return result;
}

unint64_t sub_F02A0()
{
  unint64_t result;

  result = qword_1F49A8;
  if (!qword_1F49A8)
  {
    result = swift_getWitnessTable(&unk_195DC4, &type metadata for CollectionRecommendationOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F49A8);
  }
  return result;
}

unint64_t sub_F02E8()
{
  unint64_t result;

  result = qword_1F49B0;
  if (!qword_1F49B0)
  {
    result = swift_getWitnessTable(&unk_195CE4, &type metadata for CollectionRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F49B0);
  }
  return result;
}

unint64_t sub_F0330()
{
  unint64_t result;

  result = qword_1F49B8;
  if (!qword_1F49B8)
  {
    result = swift_getWitnessTable(&unk_195D0C, &type metadata for CollectionRecommendationRequest.CodingKeys);
    atomic_store(result, &qword_1F49B8);
  }
  return result;
}

_QWORD *sub_F0374(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char isUniquelyReferenced_nonNull_native;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  char v82[40];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v63 = a4 & 1;
  v69 = *(_QWORD *)(a1 + 16);
  sub_3432C(0, v4, 0);
  v8 = v69;
  v9 = 0;
  result = _swiftEmptyArrayStorage;
  v70 = a1 + 32;
  v64 = a2;
  v65 = a3;
  while (1)
  {
    v11 = v70 + 112 * v9;
    v12 = *(_QWORD *)v11;
    v13 = *(_BYTE *)(v11 + 8);
    v73 = *(_BYTE *)(v11 + 24);
    v78 = *(_QWORD *)(v11 + 32);
    v77 = *(_BYTE *)(v11 + 40);
    v74 = *(_QWORD *)(v11 + 16);
    v75 = *(_QWORD *)(v11 + 48);
    v14 = *(_QWORD *)(v11 + 64);
    v71 = *(_QWORD *)(v11 + 56);
    v72 = result;
    v15 = *(_QWORD *)(v11 + 72);
    v80 = *(_QWORD *)(v11 + 80);
    v79 = *(_QWORD *)(v11 + 88);
    v81 = *(_OWORD *)(v11 + 96);
    v76 = v14;
    if (!*(_QWORD *)(a2 + 16)
      || (v16 = sub_39228(v12), v8 = v69, (v17 & 1) == 0)
      || !*(_QWORD *)(a3 + 16)
      || (v68 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v16), v18 = sub_39228(v68), v8 = v69, (v19 & 1) == 0))
    {
      sub_40554(v78, v77);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(*((_QWORD *)&v81 + 1));
      v26 = v75;
      swift_bridgeObjectRetain(v75);
      goto LABEL_10;
    }
    v20 = *(_QWORD *)(a3 + 56) + 72 * v18;
    v22 = *(_QWORD *)(v20 + 8);
    v21 = *(_QWORD *)(v20 + 16);
    v74 = *(_QWORD *)(v20 + 40);
    v73 = *(_BYTE *)(v20 + 48);
    v23 = *(_QWORD *)(v22 + 16);
    v66 = v21;
    v67 = v22;
    if (v23)
      break;
    sub_40554(v78, v77);
    swift_bridgeObjectRetain_n(v76, 2);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(*((_QWORD *)&v81 + 1));
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain_n(v21, 2);
    swift_bridgeObjectRetain_n(v75, 2);
    v25 = _swiftEmptyArrayStorage;
LABEL_46:
    v51 = v25[2];
    v52 = Set.init(minimumCapacity:)(v51, &type metadata for UInt64, &protocol witness table for UInt64);
    v53 = v52;
    if (v51)
    {
      v54 = 0;
      v55 = v52 + 56;
      while (1)
      {
        v56 = v25[v54++ + 4];
        v57 = static Hasher._hash(seed:_:)(*(_QWORD *)(v53 + 40), v56);
        v58 = -1 << *(_BYTE *)(v53 + 32);
        v59 = v57 & ~v58;
        if (((*(_QWORD *)(v55 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
          goto LABEL_55;
        v60 = *(_QWORD *)(v53 + 48);
        if (*(_QWORD *)(v60 + 8 * v59) == v56)
        {
LABEL_48:
          if (v54 == v51)
            break;
        }
        else
        {
          v61 = ~v58;
          while (1)
          {
            v59 = (v59 + 1) & v61;
            if (((*(_QWORD *)(v55 + ((v59 >> 3) & 0xFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
              break;
            if (*(_QWORD *)(v60 + 8 * v59) == v56)
              goto LABEL_48;
          }
LABEL_55:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v53);
          sub_1668AC(v56, v59, isUniquelyReferenced_nonNull_native);
          swift_bridgeObjectRelease();
          if (v54 == v51)
            break;
          v55 = v53 + 56;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(*((_QWORD *)&v81 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_40568(v78, v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v26 = v75;
    v78 = 0;
    v79 = v53;
    v77 = -1;
    v80 = v66;
    v12 = v68;
    v8 = v69;
    v13 = v63;
    a2 = v64;
    a3 = v65;
LABEL_10:
    result = v72;
    v28 = v72[2];
    v27 = v72[3];
    if (v28 >= v27 >> 1)
    {
      sub_3432C(v27 > 1, v28 + 1, 1);
      v26 = v75;
      v8 = v69;
      result = v72;
    }
    result[2] = v28 + 1;
    v29 = &result[14 * v28];
    v29[4] = v12;
    ++v9;
    *((_BYTE *)v29 + 40) = v13;
    v29[6] = v74;
    *((_BYTE *)v29 + 56) = v73;
    v29[8] = v78;
    *((_BYTE *)v29 + 72) = v77;
    v29[10] = v26;
    v29[11] = v71;
    v29[12] = v76;
    v29[13] = v15;
    v29[14] = v80;
    v29[15] = v79;
    *((_OWORD *)v29 + 8) = v81;
    if (v9 == v8)
      return result;
  }
  swift_bridgeObjectRetain(v22);
  sub_40554(v78, v77);
  swift_bridgeObjectRetain_n(v76, 2);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain(*((_QWORD *)&v81 + 1));
  swift_bridgeObjectRetain_n(v22, 2);
  swift_bridgeObjectRetain_n(v21, 2);
  swift_bridgeObjectRetain_n(v75, 2);
  v24 = (uint64_t *)(v22 + 40);
  v25 = _swiftEmptyArrayStorage;
  while (1)
  {
    v30 = *(v24 - 1);
    v31 = *v24;
    v32 = sub_5EDC(&qword_1F1090);
    inited = swift_initStackObject(v32, v82);
    *(_OWORD *)(inited + 16) = xmmword_1875E0;
    v34 = (_QWORD *)(inited + 16);
    *(_QWORD *)(inited + 32) = v30;
    v35 = *(_QWORD *)(v31 + 16);
    swift_bridgeObjectRetain(v31);
    if (!v35)
      goto LABEL_17;
    v47 = sub_2FA6C((int *)((char *)&dword_0 + 1), v35 + 1, 1, (_QWORD *)inited);
    if (!*(_QWORD *)(v31 + 16))
      break;
    inited = (uint64_t)v47;
    v48 = v47[2];
    if ((v47[3] >> 1) - v48 < v35)
      goto LABEL_63;
    v49 = &v47[v48 + 4];
    if (v31 + 32 < (unint64_t)&v49[v35] && (unint64_t)v49 < v31 + 32 + 8 * v35)
      goto LABEL_66;
    v34 = (_QWORD *)(inited + 16);
    memcpy(v49, (const void *)(v31 + 32), 8 * v35);
    if (__OFADD__(*(_QWORD *)(inited + 16), v35))
      goto LABEL_64;
    *v34 = *(_QWORD *)(inited + 16) + v35;
LABEL_17:
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)(inited + 16);
    v37 = v25[2];
    v38 = v37 + v36;
    if (__OFADD__(v37, v36))
    {
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
    }
    v39 = swift_isUniquelyReferenced_nonNull_native(v25);
    if ((v39 & 1) != 0 && v38 <= v25[3] >> 1)
    {
      if (*v34)
        goto LABEL_26;
    }
    else
    {
      if (v37 <= v38)
        v40 = v37 + v36;
      else
        v40 = v37;
      v25 = sub_2FA6C((_QWORD *)v39, v40, 1, v25);
      if (*v34)
      {
LABEL_26:
        v41 = v25[2];
        if ((v25[3] >> 1) - v41 < v36)
          goto LABEL_61;
        v42 = &v25[v41 + 4];
        if (inited + 32 < (unint64_t)&v42[v36] && (unint64_t)v42 < inited + 32 + 8 * v36)
          goto LABEL_66;
        memcpy(v42, (const void *)(inited + 32), 8 * v36);
        if (v36)
        {
          v44 = v25[2];
          v45 = __OFADD__(v44, v36);
          v46 = v44 + v36;
          if (v45)
            goto LABEL_62;
          v25[2] = v46;
        }
        goto LABEL_15;
      }
    }
    if (v36)
      goto LABEL_60;
LABEL_15:
    swift_bridgeObjectRelease();
    v24 += 2;
    if (!--v23)
    {
      swift_bridgeObjectRelease_n(v67, 2);
      goto LABEL_46;
    }
  }
  __break(1u);
LABEL_66:
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_F0A7C(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  char v35[8];
  uint64_t v36;
  _QWORD *v37;

  v33 = a2;
  v34 = a3;
  v5 = type metadata accessor for SeedBasedRecommendationRequest(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (!v8)
    return (uint64_t)v9;
  v27 = v3;
  v37 = _swiftEmptyArrayStorage;
  sub_3436C(0, v8, 0);
  v9 = v37;
  result = sub_DF71C(a1);
  v12 = result;
  v13 = 0;
  v14 = a1 + 64;
  v28 = a1 + 80;
  v29 = v8;
  v30 = v11;
  v31 = a1 + 64;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(a1 + 32))
  {
    v17 = (unint64_t)v12 >> 6;
    if ((*(_QWORD *)(v14 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v11)
      goto LABEL_24;
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    v35[0] = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v12);
    v36 = v18;
    swift_bridgeObjectRetain(v18);
    v33(v35, v18);
    swift_bridgeObjectRelease();
    v37 = v9;
    v19 = (uint64_t)v7;
    v21 = v9[2];
    v20 = v9[3];
    if (v21 >= v20 >> 1)
    {
      sub_3436C(v20 > 1, v21 + 1, 1);
      v9 = v37;
    }
    v9[2] = v21 + 1;
    result = sub_A2618(v19, (uint64_t)v9+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v21, type metadata accessor for SeedBasedRecommendationRequest);
    v15 = 1 << *(_BYTE *)(a1 + 32);
    if (v12 >= v15)
      goto LABEL_25;
    v14 = v31;
    v22 = *(_QWORD *)(v31 + 8 * v17);
    if ((v22 & (1 << v12)) == 0)
      goto LABEL_26;
    LODWORD(v11) = v30;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v30)
      goto LABEL_27;
    v7 = (char *)v19;
    v23 = v22 & (-2 << (v12 & 0x3F));
    if (v23)
    {
      v15 = __clz(__rbit64(v23)) | v12 & 0xFFFFFFFFFFFFFFC0;
      v16 = v29;
    }
    else
    {
      v24 = v17 + 1;
      v25 = (unint64_t)(v15 + 63) >> 6;
      v16 = v29;
      if (v17 + 1 < v25)
      {
        v26 = *(_QWORD *)(v31 + 8 * v24);
        if (v26)
        {
LABEL_20:
          v15 = __clz(__rbit64(v26)) + (v24 << 6);
        }
        else
        {
          while (v25 - 2 != v17)
          {
            v26 = *(_QWORD *)(v28 + 8 * v17++);
            if (v26)
            {
              v24 = v17 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v13;
    v12 = v15;
    if (v13 == v16)
      return (uint64_t)v9;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_F0D18(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  _QWORD *v3;
  unint64_t result;
  uint64_t *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _BYTE __dst[545];
  _QWORD *v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (unint64_t)v3;
  v16 = _swiftEmptyArrayStorage;
  result = sub_340F4(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  v7 = (uint64_t *)(a1 + 32);
  while (*(_QWORD *)(a2 + 16))
  {
    result = sub_39228(*v7);
    if ((v8 & 1) == 0)
      goto LABEL_10;
    memcpy(__dst, (const void *)(*(_QWORD *)(a2 + 56) + 552 * result), sizeof(__dst));
    result = sub_11FA6C();
    v9 = result;
    v11 = v10;
    v16 = v3;
    v13 = v3[2];
    v12 = v3[3];
    if (v13 >= v12 >> 1)
    {
      result = sub_340F4(v12 > 1, v13 + 1, 1);
      v3 = v16;
    }
    v3[2] = v13 + 1;
    v14 = &v3[2 * v13];
    v14[4] = v9;
    v14[5] = v11;
    ++v7;
    if (!--v2)
      return (unint64_t)v3;
  }
  __break(1u);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_F0E34(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return (uint64_t)_swiftEmptyArrayStorage;
  v3 = a2;
  v4 = 0;
  v24 = result + 32;
  v5 = a2 + 56;
  v6 = _swiftEmptyArrayStorage;
  do
  {
    v23 = v6;
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    while (1)
    {
      if (v4 == v7)
      {
        __break(1u);
        return result;
      }
      v8 = v24 + 80 * v4;
      v9 = *(_QWORD *)v8;
      v28 = *(_BYTE *)(v8 + 8);
      v27 = *(_QWORD *)(v8 + 16);
      v26 = *(_BYTE *)(v8 + 24);
      v29 = *(_QWORD *)(v8 + 32);
      v10 = *(_BYTE *)(v8 + 40);
      v11 = *(_QWORD *)(v8 + 48);
      v25 = *(_QWORD *)(v8 + 56);
      v12 = *(_QWORD *)(v8 + 64);
      v13 = *(_QWORD *)(v8 + 72);
      ++v4;
      if (!*(_QWORD *)(v3 + 16))
        break;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), v9);
      v14 = -1 << *(_BYTE *)(v3 + 32);
      v15 = result & ~v14;
      if (((*(_QWORD *)(v5 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        break;
      v16 = *(_QWORD *)(v3 + 48);
      if (*(_QWORD *)(v16 + 8 * v15) != v9)
      {
        v17 = ~v14;
        do
        {
          v15 = (v15 + 1) & v17;
          if (((*(_QWORD *)(v5 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            goto LABEL_15;
        }
        while (*(_QWORD *)(v16 + 8 * v15) != v9);
      }
      if (v4 == v2)
        return (uint64_t)v23;
    }
LABEL_15:
    sub_40554(v29, v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v11);
    v6 = v23;
    result = swift_isUniquelyReferenced_nonNull_native(v23);
    if ((result & 1) == 0)
    {
      result = sub_342E4(0, v23[2] + 1, 1);
      v6 = v23;
    }
    v19 = v6[2];
    v18 = v6[3];
    v20 = v19 + 1;
    if (v19 >= v18 >> 1)
    {
      result = sub_342E4(v18 > 1, v19 + 1, 1);
      v20 = v19 + 1;
      v6 = v23;
    }
    v6[2] = v20;
    v21 = &v6[10 * v19];
    v21[4] = v9;
    *((_BYTE *)v21 + 40) = v28;
    v21[6] = v27;
    *((_BYTE *)v21 + 56) = v26;
    v21[8] = v29;
    *((_BYTE *)v21 + 72) = v10;
    v21[10] = v11;
    v21[11] = v25;
    v21[12] = v12;
    v21[13] = v13;
    v3 = a2;
  }
  while (v4 != v2);
  return (uint64_t)v6;
}

uint64_t sub_F107C(uint64_t a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  char v35[24];
  uint64_t v36;

  v3 = *(_QWORD *)(a1 + 16);
  swift_beginAccess(a2, v35, 0, 0);
  if (!v3)
    return (uint64_t)_swiftEmptyArrayStorage;
  v4 = 0;
  v27 = a1 + 32;
  result = (uint64_t)_swiftEmptyArrayStorage;
  do
  {
    v26 = result;
    if (v4 <= v3)
      v6 = v3;
    else
      v6 = v4;
    v32 = v6;
    while (1)
    {
      if (v4 == v32)
      {
        __break(1u);
        return result;
      }
      v7 = (uint64_t *)(v27 + 112 * v4);
      v8 = *v7;
      v31 = *((_BYTE *)v7 + 8);
      v30 = v7[2];
      v29 = *((_BYTE *)v7 + 24);
      v9 = v7[4];
      v10 = *((_BYTE *)v7 + 40);
      v11 = v7[6];
      v28 = v7[7];
      v12 = v7[8];
      v13 = v7[9];
      v33 = *((_OWORD *)v7 + 6);
      v34 = *((_OWORD *)v7 + 5);
      ++v4;
      v14 = *a2;
      if (!*(_QWORD *)(*a2 + 16))
        break;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v14 + 40), v8);
      v15 = -1 << *(_BYTE *)(v14 + 32);
      v16 = result & ~v15;
      if (((*(_QWORD *)(v14 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
        break;
      v17 = *(_QWORD *)(v14 + 48);
      if (*(_QWORD *)(v17 + 8 * v16) != v8)
      {
        v18 = ~v15;
        do
        {
          v16 = (v16 + 1) & v18;
          if (((*(_QWORD *)(v14 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            goto LABEL_16;
        }
        while (*(_QWORD *)(v17 + 8 * v16) != v8);
      }
      if (v4 == v3)
        return v26;
    }
LABEL_16:
    sub_40554(v9, v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(*((_QWORD *)&v34 + 1));
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(*((_QWORD *)&v33 + 1));
    swift_bridgeObjectRetain(v11);
    v19 = v26;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
    v36 = v26;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_3432C(0, *(_QWORD *)(v26 + 16) + 1, 1);
      v19 = v36;
    }
    result = v19;
    v21 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(result + 24);
    v23 = v21 + 1;
    if (v21 >= v22 >> 1)
    {
      sub_3432C(v22 > 1, v21 + 1, 1);
      v23 = v21 + 1;
      result = v36;
    }
    *(_QWORD *)(result + 16) = v23;
    v24 = result + 112 * v21;
    *(_QWORD *)(v24 + 32) = v8;
    *(_BYTE *)(v24 + 40) = v31;
    *(_QWORD *)(v24 + 48) = v30;
    *(_BYTE *)(v24 + 56) = v29;
    *(_QWORD *)(v24 + 64) = v9;
    *(_BYTE *)(v24 + 72) = v10;
    *(_QWORD *)(v24 + 80) = v11;
    *(_QWORD *)(v24 + 88) = v28;
    *(_QWORD *)(v24 + 96) = v12;
    *(_QWORD *)(v24 + 104) = v13;
    *(_OWORD *)(v24 + 112) = v34;
    *(_OWORD *)(v24 + 128) = v33;
  }
  while (v4 != v3);
  return result;
}

uint64_t sub_F1330(uint64_t result, uint64_t a2, const void *a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v32;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[368];
  _BYTE __dst[377];
  _QWORD *v45;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return (uint64_t)_swiftEmptyArrayStorage;
  v4 = a2;
  v5 = 0;
  v28 = v3 - 1;
  v29 = result + 64;
  v6 = _swiftEmptyArrayStorage;
  v32 = *(_QWORD *)(result + 16);
  do
  {
    v30 = v6;
    if (v5 <= v3)
      v7 = v3;
    else
      v7 = v5;
    v39 = v7;
    v8 = v29 + 112 * v5;
    v9 = v5;
    while (1)
    {
      if (v39 == v9)
      {
        __break(1u);
        return result;
      }
      v40 = v9;
      v37 = *(_BYTE *)(v8 - 24);
      v36 = *(_QWORD *)(v8 - 16);
      v35 = *(_BYTE *)(v8 - 8);
      v10 = *(_QWORD *)v8;
      v11 = *(_BYTE *)(v8 + 8);
      v12 = *(_QWORD *)(v8 + 16);
      v34 = *(_QWORD *)(v8 + 24);
      v13 = *(_QWORD *)(v8 + 32);
      v14 = *(_QWORD *)(v8 + 40);
      v41 = *(_OWORD *)(v8 + 64);
      v42 = *(_OWORD *)(v8 + 48);
      v15 = *(_QWORD *)(v8 + 56);
      v16 = *(_QWORD *)(v8 + 72);
      v38 = *(_QWORD *)(v8 - 32);
      if (!*(_QWORD *)(v4 + 16))
        break;
      v17 = sub_39228(*(_QWORD *)(v8 - 32));
      if ((v18 & 1) == 0)
        break;
      memcpy(__dst, (const void *)(*(_QWORD *)(v4 + 56) + 384 * v17), sizeof(__dst));
      memcpy(v43, a3, 0x16BuLL);
      sub_40554(v10, v11);
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(v15);
      v19 = v12;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v12);
      BookHistory.isEligibleForRecommendation(with:)(v43);
      if ((v20 & 1) != 0)
        goto LABEL_14;
      sub_40568(v10, v11);
      swift_bridgeObjectRelease();
      v9 = v40 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v8 += 112;
      v4 = a2;
      if (v32 == v40 + 1)
        return (uint64_t)v30;
    }
    sub_40554(v10, v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v12);
    v19 = v12;
LABEL_14:
    v21 = v11;
    v22 = v19;
    v6 = v30;
    result = swift_isUniquelyReferenced_nonNull_native(v30);
    v45 = v30;
    if ((result & 1) == 0)
    {
      result = sub_3432C(0, v30[2] + 1, 1);
      v6 = v45;
    }
    v24 = v41;
    v23 = v42;
    v26 = v6[2];
    v25 = v6[3];
    if (v26 >= v25 >> 1)
    {
      result = sub_3432C(v25 > 1, v26 + 1, 1);
      v24 = v41;
      v23 = v42;
      v6 = v45;
    }
    v6[2] = v26 + 1;
    v27 = &v6[14 * v26];
    v27[4] = v38;
    v5 = v40 + 1;
    *((_BYTE *)v27 + 40) = v37;
    v27[6] = v36;
    *((_BYTE *)v27 + 56) = v35;
    v27[8] = v10;
    *((_BYTE *)v27 + 72) = v21;
    v4 = a2;
    v27[10] = v22;
    v27[11] = v34;
    v27[12] = v13;
    v27[13] = v14;
    *((_OWORD *)v27 + 7) = v23;
    *((_OWORD *)v27 + 8) = v24;
    v3 = v32;
  }
  while (v28 != v40);
  return (uint64_t)v6;
}

_QWORD *sub_F165C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = a1 + 32;
  v5 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  do
  {
    v8 = (uint64_t *)(v4 + 112 * v6);
    if ((v8[3] & 1) == 0)
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v9 = *v8;
        v10 = v8[2];
        v11 = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), v10);
        v12 = -1 << *(_BYTE *)(a2 + 32);
        v13 = v11 & ~v12;
        if (((*(_QWORD *)(v5 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
        {
          v14 = *(_QWORD *)(a2 + 48);
          if (*(_QWORD *)(v14 + 8 * v13) == v10)
          {
LABEL_12:
            if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
              v7 = sub_2FA6C(0, v7[2] + 1, 1, v7);
            v17 = v7[2];
            v16 = v7[3];
            if (v17 >= v16 >> 1)
              v7 = sub_2FA6C((_QWORD *)(v16 > 1), v17 + 1, 1, v7);
            v7[2] = v17 + 1;
            v7[v17 + 4] = v9;
          }
          else
          {
            v15 = ~v12;
            while (1)
            {
              v13 = (v13 + 1) & v15;
              if (((*(_QWORD *)(v5 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
                break;
              if (*(_QWORD *)(v14 + 8 * v13) == v10)
                goto LABEL_12;
            }
          }
        }
      }
    }
    ++v6;
  }
  while (v6 != v2);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_F17EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v3 = v2;
  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v12 = 0;
  v13 = _swiftEmptyArrayStorage;
  while (1)
  {
    while (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      if (*(_QWORD *)(a2 + 16))
      {
LABEL_4:
        result = sub_3933C(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v16));
        if ((v14 & 1) != 0)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * result);
          swift_bridgeObjectRetain(v20);
          result = swift_isUniquelyReferenced_nonNull_native(v13);
          v24 = v3;
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_31768(0, v13[2] + 1, 1, v13);
            v13 = (_QWORD *)result;
          }
          v22 = v13[2];
          v21 = v13[3];
          v23 = v13;
          if (v22 >= v21 >> 1)
          {
            result = (uint64_t)sub_31768((_QWORD *)(v21 > 1), v22 + 1, 1, v13);
            v23 = (_QWORD *)result;
          }
          v23[2] = v22 + 1;
          v13 = v23;
          v23[v22 + 4] = v20;
          v3 = v24;
        }
      }
    }
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v12 >= v10)
      goto LABEL_31;
    v18 = *(_QWORD *)(v6 + 8 * v12);
    if (!v18)
      break;
LABEL_20:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
    if (*(_QWORD *)(a2 + 16))
      goto LABEL_4;
  }
  v19 = v12 + 1;
  if (v12 + 1 >= v10)
    goto LABEL_31;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_19;
  v19 = v12 + 2;
  if (v12 + 2 >= v10)
    goto LABEL_31;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_19;
  v19 = v12 + 3;
  if (v12 + 3 >= v10)
    goto LABEL_31;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_19;
  v19 = v12 + 4;
  if (v12 + 4 >= v10)
  {
LABEL_31:
    swift_release(a1);
    return (uint64_t)v13;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_19:
    v12 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v10)
      goto LABEL_31;
    v18 = *(_QWORD *)(v6 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_F19F4(uint64_t a1, void (*a2)(_BYTE *, uint64_t *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _BYTE v21[8];
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v18 >= v8)
      return swift_release(a1);
    v19 = *(_QWORD *)(v4 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v8)
        return swift_release(a1);
      v19 = *(_QWORD *)(v4 + 8 * v10);
      if (!v19)
      {
        v10 = v18 + 2;
        if (v18 + 2 >= v8)
          return swift_release(a1);
        v19 = *(_QWORD *)(v4 + 8 * v10);
        if (!v19)
        {
          v10 = v18 + 3;
          if (v18 + 3 >= v8)
            return swift_release(a1);
          v19 = *(_QWORD *)(v4 + 8 * v10);
          if (!v19)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v19 - 1) & v19;
    v12 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    v13 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v12);
    v14 = *(_QWORD *)(a1 + 56) + 24 * v12;
    v15 = *(_QWORD *)v14;
    v16 = *(_BYTE *)(v14 + 8);
    v17 = *(_QWORD *)(v14 + 16);
    v21[0] = v13;
    v22 = v15;
    v23 = v16;
    v24 = v17;
    swift_bridgeObjectRetain(v17);
    a2(v21, &v22);
    result = swift_bridgeObjectRelease(v17);
  }
  v20 = v18 + 4;
  if (v20 >= v8)
    return swift_release(a1);
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v19 = *(_QWORD *)(v4 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_F1B9C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E4972657375, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x666E4965726F7473 && a2 == 0xE90000000000006FLL)
  {
    v7 = 0xE90000000000006FLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666E4965726F7473, 0xE90000000000006FLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x80000000001A21F0;
    if (a2 == 0x80000000001A21F0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001A21F0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x536465776F6C6C61 && a2 == 0xEC00000073656C61)
  {
    v9 = 0xEC00000073656C61;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x536465776F6C6C61, 0xEC00000073656C61, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x746963696C707865 && a2 == 0xEF6465776F6C6C41)
  {
    v10 = 0xEF6465776F6C6C41;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746963696C707865, 0xEF6465776F6C6C41, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000010)
  {
    v11 = 0x80000000001A2210;
    if (a2 == 0x80000000001A2210)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001A2210, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000000001A2230)
  {
    v12 = 0x80000000001A2230;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000001A2230, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0xD000000000000025)
  {
    v13 = 0x80000000001A2250;
    if (a2 == 0x80000000001A2250)
      goto LABEL_47;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000000001A2250, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_47:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x80000000001A2280)
  {
    v14 = 0x80000000001A2280;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x80000000001A2280, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_53;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000000001A22A0)
  {
    v15 = 0x80000000001A22A0;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000000001A22A0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_59;
  }
  if (a1 == 0xD000000000000025)
  {
    v16 = 0x80000000001A22C0;
    if (a2 == 0x80000000001A22C0)
      goto LABEL_64;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000000001A22C0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_64:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0xD000000000000025 && a2 == 0x80000000001A22F0)
  {
    swift_bridgeObjectRelease(0x80000000001A22F0);
    return 11;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000000001A22F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 11;
    else
      return 12;
  }
}

uint64_t sub_F2058(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x746E756F4378616DLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F4378616DLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x707954616964656DLL && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x707954616964656DLL, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t *sub_F2154(uint64_t *a1)
{
  sub_F21C0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_F21C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a13);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t *sub_F221C(uint64_t *a1)
{
  uint64_t v2;

  v2 = a1[18];
  sub_F2288(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_F2288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a11);
    return swift_bridgeObjectRetain(a13);
  }
  return result;
}

uint64_t *sub_F22E4(uint64_t *a1)
{
  sub_F21C0(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12]);
  return a1;
}

uint64_t sub_F2344@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_EA3C0(a1, a2, *(__int128 **)(v3 + 16), *(_QWORD *)(v3 + 24), a3);
}

unint64_t *sub_F234C(unint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t *v21;
  uint64_t v22;

  v21 = result;
  v22 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v16 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v16 >= v11)
      return sub_DF2F8(v21, a2, v22, a3);
    v17 = *(_QWORD *)(v7 + 8 * v16);
    ++v6;
    if (!v17)
    {
      v6 = v16 + 1;
      if (v16 + 1 >= v11)
        return sub_DF2F8(v21, a2, v22, a3);
      v17 = *(_QWORD *)(v7 + 8 * v6);
      if (!v17)
      {
        v6 = v16 + 2;
        if (v16 + 2 >= v11)
          return sub_DF2F8(v21, a2, v22, a3);
        v17 = *(_QWORD *)(v7 + 8 * v6);
        if (!v17)
          break;
      }
    }
LABEL_20:
    v10 = (v17 - 1) & v17;
    v13 = __clz(__rbit64(v17)) + (v6 << 6);
LABEL_5:
    v14 = *(_BYTE *)(*(_QWORD *)(a3 + 48) + v13);
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 24 * v13 + 16));
    v15 = sub_289C8(v14, a4);
    result = (unint64_t *)swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      *(unint64_t *)((char *)v21 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v22++, 1))
      {
        __break(1u);
        return sub_DF2F8(v21, a2, v22, a3);
      }
    }
  }
  v18 = v16 + 3;
  if (v18 >= v11)
    return sub_DF2F8(v21, a2, v22, a3);
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
  {
    v6 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v6 >= v11)
      return sub_DF2F8(v21, a2, v22, a3);
    v17 = *(_QWORD *)(v7 + 8 * v6);
    ++v18;
    if (v17)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t *sub_F250C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  unint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  isStackAllocationSafe = swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_F234C((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v11 = swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow(v11);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_F234C((unint64_t *)v12, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc(v12, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v10;
}

uint64_t sub_F26C0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = v2[5];
  v10 = v2[6];
  v11 = v2[7];
  v12 = (_QWORD *)swift_task_alloc(dword_1F4A14);
  *(_QWORD *)(v3 + 16) = v12;
  *v12 = v3;
  v12[1] = sub_6AA68;
  return sub_EC518(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_F2764()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  sub_62F8((_QWORD *)v0 + 4);
  sub_F28F4(*((_QWORD *)v0 + 9), *((_QWORD *)v0 + 10), *((_QWORD *)v0 + 11), *((_QWORD *)v0 + 12), *((_QWORD *)v0 + 13), *((_QWORD *)v0 + 14), *((_QWORD *)v0 + 15), *((_QWORD *)v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v0 + 127))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*((_QWORD *)v0 + 130))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*((_QWORD *)v0 + 138))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)v0 + 148))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v5 = (v3 + 1241) & ~v3;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v5], v1);
  return swift_deallocObject(v0, v5 + v4, v3 | 7);
}

uint64_t sub_F28F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  switch(a7 >> 61)
  {
    case 0uLL:
    case 4uLL:
      goto LABEL_6;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      goto LABEL_5;
    case 5uLL:
      goto LABEL_4;
    case 6uLL:
      swift_bridgeObjectRelease(a4);
      a3 = a8;
LABEL_4:
      swift_bridgeObjectRelease(a3);
LABEL_5:
      result = a2;
LABEL_6:
      result = swift_bridgeObjectRelease(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_F2958(uint64_t a1, uint64_t a2)
{
  initializeWithTake for InternalAffinitySource(a2, a1);
  return a2;
}

uint64_t sub_F2994(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = v1 + 32;
  v7 = v1 + 72;
  v8 = v1 + 144;
  v9 = *(_QWORD *)(v1 + 1232);
  v10 = *(_BYTE *)(v1 + 1240);
  v11 = (_QWORD *)swift_task_alloc(dword_1F4A34);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_4814;
  return sub_ED204(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_F2A58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_F2A7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1F4A44);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_4814;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1F4A40 + dword_1F4A40))(a1, v4);
}

_QWORD *sub_F2AEC(char *a1)
{
  uint64_t v1;

  return sub_60A8(a1, *(_QWORD **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_F2B04(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_ED960(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32));
}

double sub_F2B10(_OWORD *a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 122) = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unint64_t sub_F2B2C()
{
  unint64_t result;

  result = qword_1F4A50;
  if (!qword_1F4A50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionRecommendationType, &type metadata for CollectionRecommendationType);
    atomic_store(result, (unint64_t *)&qword_1F4A50);
  }
  return result;
}

uint64_t sub_F2B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_EA534(a1, a2);
}

uint64_t sub_F2B84()
{
  return 0x6C696261626F7270;
}

uint64_t sub_F2BA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7030();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F2BD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7030();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F2BF8@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D10, (uint64_t (*)(void))sub_F7030, (uint64_t)&_s29EventAggregationConfigurationV25AddToWantToReadConditionsV10CodingKeysON, a2);
}

uint64_t sub_F2C24(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4BF0, (uint64_t (*)(void))sub_F7030, (uint64_t)&_s29EventAggregationConfigurationV25AddToWantToReadConditionsV10CodingKeysON);
}

uint64_t sub_F2C50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7074();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F2C78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7074();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F2CA0@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D18, (uint64_t (*)(void))sub_F7074, (uint64_t)&_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsV10CodingKeysON, a2);
}

uint64_t sub_F2CCC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C00, (uint64_t (*)(void))sub_F7074, (uint64_t)&_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsV10CodingKeysON);
}

uint64_t sub_F2CF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F70B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F2D20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F70B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F2D48@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D20, (uint64_t (*)(void))sub_F70B8, (uint64_t)&_s29EventAggregationConfigurationV24BookImpressionConditionsV10CodingKeysON, a2);
}

uint64_t sub_F2D74(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C10, (uint64_t (*)(void))sub_F70B8, (uint64_t)&_s29EventAggregationConfigurationV24BookImpressionConditionsV10CodingKeysON);
}

uint64_t sub_F2DA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F70FC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F2DC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F70FC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F2DF0@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D28, (uint64_t (*)(void))sub_F70FC, (uint64_t)&_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsV10CodingKeysON, a2);
}

uint64_t sub_F2E1C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C20, (uint64_t (*)(void))sub_F70FC, (uint64_t)&_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsV10CodingKeysON);
}

uint64_t sub_F2E48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7140();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F2E70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7140();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F2E98@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D30, (uint64_t (*)(void))sub_F7140, (uint64_t)&_s29EventAggregationConfigurationV23BookPurchasedConditionsV10CodingKeysON, a2);
}

uint64_t sub_F2EC4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C30, (uint64_t (*)(void))sub_F7140, (uint64_t)&_s29EventAggregationConfigurationV23BookPurchasedConditionsV10CodingKeysON);
}

uint64_t sub_F2EF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7184();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F2F18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7184();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F2F40@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D38, (uint64_t (*)(void))sub_F7184, (uint64_t)&_s29EventAggregationConfigurationV21BookWasReadConditionsV10CodingKeysON, a2);
}

uint64_t sub_F2F6C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C40, (uint64_t (*)(void))sub_F7184, (uint64_t)&_s29EventAggregationConfigurationV21BookWasReadConditionsV10CodingKeysON);
}

uint64_t sub_F2F98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F71C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F2FC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F71C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F2FE8@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D40, (uint64_t (*)(void))sub_F71C8, (uint64_t)&_s29EventAggregationConfigurationV24DownloadSampleConditionsV10CodingKeysON, a2);
}

uint64_t sub_F3014(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C50, (uint64_t (*)(void))sub_F71C8, (uint64_t)&_s29EventAggregationConfigurationV24DownloadSampleConditionsV10CodingKeysON);
}

uint64_t sub_F3040(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F720C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F3068(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F720C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F3090@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D48, (uint64_t (*)(void))sub_F720C, (uint64_t)&_s29EventAggregationConfigurationV25ExplicitDeclineConditionsV10CodingKeysON, a2);
}

uint64_t sub_F30BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C60, (uint64_t (*)(void))sub_F720C, (uint64_t)&_s29EventAggregationConfigurationV25ExplicitDeclineConditionsV10CodingKeysON);
}

uint64_t sub_F30E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7250();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F3110(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7250();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F3138@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D50, (uint64_t (*)(void))sub_F7250, (uint64_t)&_s29EventAggregationConfigurationV18HideBookConditionsV10CodingKeysON, a2);
}

uint64_t sub_F3164(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C70, (uint64_t (*)(void))sub_F7250, (uint64_t)&_s29EventAggregationConfigurationV18HideBookConditionsV10CodingKeysON);
}

uint64_t sub_F3190(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7294();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F31B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7294();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F31E0@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D58, (uint64_t (*)(void))sub_F7294, (uint64_t)&_s29EventAggregationConfigurationV24MarkAsFinishedConditionsV10CodingKeysON, a2);
}

uint64_t sub_F320C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C80, (uint64_t (*)(void))sub_F7294, (uint64_t)&_s29EventAggregationConfigurationV24MarkAsFinishedConditionsV10CodingKeysON);
}

uint64_t sub_F3238(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F72D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F3260(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F72D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F3288@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D60, (uint64_t (*)(void))sub_F72D8, (uint64_t)&_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsV10CodingKeysON, a2);
}

uint64_t sub_F32B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4C90, (uint64_t (*)(void))sub_F72D8, (uint64_t)&_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsV10CodingKeysON);
}

uint64_t sub_F32E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F731C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F3308(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F731C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F3330@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D68, (uint64_t (*)(void))sub_F731C, (uint64_t)&_s29EventAggregationConfigurationV16RatingConditionsV10CodingKeysON, a2);
}

uint64_t sub_F335C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4CA0, (uint64_t (*)(void))sub_F731C, (uint64_t)&_s29EventAggregationConfigurationV16RatingConditionsV10CodingKeysON);
}

uint64_t sub_F3388(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7360();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F33B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7360();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F33D8@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D70, (uint64_t (*)(void))sub_F7360, (uint64_t)&_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsV10CodingKeysON, a2);
}

uint64_t sub_F3404(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4CB0, (uint64_t (*)(void))sub_F7360, (uint64_t)&_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsV10CodingKeysON);
}

uint64_t sub_F3430(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F73A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F3458(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F73A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F3480@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D78, (uint64_t (*)(void))sub_F73A4, (uint64_t)&_s29EventAggregationConfigurationV22RemoveSampleConditionsV10CodingKeysON, a2);
}

uint64_t sub_F34AC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4CC0, (uint64_t (*)(void))sub_F73A4, (uint64_t)&_s29EventAggregationConfigurationV22RemoveSampleConditionsV10CodingKeysON);
}

uint64_t sub_F34D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F73E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F3500(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F73E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F3528@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D80, (uint64_t (*)(void))sub_F73E8, (uint64_t)&_s29EventAggregationConfigurationV21SuggestLessConditionsV10CodingKeysON, a2);
}

uint64_t sub_F3554(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4CD0, (uint64_t (*)(void))sub_F73E8, (uint64_t)&_s29EventAggregationConfigurationV21SuggestLessConditionsV10CodingKeysON);
}

uint64_t sub_F3580(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F742C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F35A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F742C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F35D0@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D88, (uint64_t (*)(void))sub_F742C, (uint64_t)&_s29EventAggregationConfigurationV21SuggestMoreConditionsV10CodingKeysON, a2);
}

uint64_t sub_F35FC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4CE0, (uint64_t (*)(void))sub_F742C, (uint64_t)&_s29EventAggregationConfigurationV21SuggestMoreConditionsV10CodingKeysON);
}

uint64_t sub_F3628(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7470();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F3650(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F7470();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F3678@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D90, (uint64_t (*)(void))sub_F7470, (uint64_t)&_s29EventAggregationConfigurationV15ShareConditionsV10CodingKeysON, a2);
}

uint64_t sub_F36A4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4CF0, (uint64_t (*)(void))sub_F7470, (uint64_t)&_s29EventAggregationConfigurationV15ShareConditionsV10CodingKeysON);
}

uint64_t sub_F36D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6C696261626F7270 && a2 == 0xEB00000000797469)
  {
    result = swift_bridgeObjectRelease(0xEB00000000797469);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C696261626F7270, 0xEB00000000797469, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_F377C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F74B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F37A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F74B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_F37CC@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return sub_F37F8(a1, &qword_1F4D98, (uint64_t (*)(void))sub_F74B4, (uint64_t)&_s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysON, a2);
}

uint64_t sub_F37F8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, double *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t result;
  double *v18;
  uint64_t v19;

  v18 = a5;
  v9 = sub_5EDC(a2);
  v19 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = a3();
  v15 = dispatch thunk of Decoder.container<A>(keyedBy:)(a4, a4, v14, v12, v13);
  if (v5)
    return sub_62F8(a1);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(v15, v9);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v9);
  result = sub_62F8(a1);
  *v18 = v16;
  return result;
}

uint64_t sub_F3920(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_F394C(a1, a2, a3, &qword_1F4D00, (uint64_t (*)(void))sub_F74B4, (uint64_t)&_s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysON);
}

uint64_t sub_F394C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  double *v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v10 = sub_5EDC(a4);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v6;
  v15 = a1[3];
  v16 = a1[4];
  sub_49F4(a1, v15);
  v17 = a5();
  v18 = dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v17, v15, v16);
  KeyedEncodingContainer.encode(_:forKey:)(v18, v10, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_F3A40(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F3A80 + 4 * byte_195F10[a1]))(0x6E61576F54646461, 0xEF646165526F5474);
}

unint64_t sub_F3A80()
{
  return 0xD000000000000012;
}

uint64_t sub_F3BAC()
{
  return 0x676E69746172;
}

void sub_F3BC0()
{
  JUMPOUT(0xF3BD4);
}

uint64_t sub_F3BE0()
{
  return 0x615365766F6D6572;
}

uint64_t sub_F3C00()
{
  return 0x4C74736567677573;
}

uint64_t sub_F3C20()
{
  return 0x4D74736567677573;
}

uint64_t sub_F3C40()
{
  return 0x6572616873;
}

uint64_t sub_F3C54()
{
  return 0x657461726E75;
}

uint64_t sub_F3C68(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v3 = v1;
  v5 = sub_5EDC(&qword_1F4AA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_F6398();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON, &_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON, v11, v9, v10);
  v32 = *v3;
  HIBYTE(v31) = 0;
  v12 = sub_F63DC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsVN, v12);
  if (!v2)
  {
    v32 = v3[1];
    HIBYTE(v31) = 1;
    v13 = sub_F6420();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsVN, v13);
    v32 = v3[2];
    HIBYTE(v31) = 2;
    v14 = sub_F6464();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV24BookImpressionConditionsVN, v14);
    v32 = v3[3];
    HIBYTE(v31) = 3;
    v15 = sub_F64A8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsVN, v15);
    v32 = v3[4];
    HIBYTE(v31) = 4;
    v16 = sub_F64EC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV23BookPurchasedConditionsVN, v16);
    v32 = v3[5];
    HIBYTE(v31) = 5;
    v17 = sub_F6530();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV21BookWasReadConditionsVN, v17);
    v32 = v3[6];
    HIBYTE(v31) = 6;
    v18 = sub_F6574();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV24DownloadSampleConditionsVN, v18);
    v32 = v3[7];
    HIBYTE(v31) = 7;
    v19 = sub_F65B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsVN, v19);
    v32 = v3[8];
    HIBYTE(v31) = 8;
    v20 = sub_F65FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV18HideBookConditionsVN, v20);
    v32 = v3[9];
    HIBYTE(v31) = 9;
    v21 = sub_F6640();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsVN, v21);
    v32 = v3[10];
    HIBYTE(v31) = 10;
    v22 = sub_F6684();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsVN, v22);
    v32 = v3[11];
    HIBYTE(v31) = 11;
    v23 = sub_F66C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV16RatingConditionsVN, v23);
    v32 = v3[12];
    HIBYTE(v31) = 12;
    v24 = sub_F670C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsVN, v24);
    v32 = v3[13];
    HIBYTE(v31) = 13;
    v25 = sub_F6750();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV22RemoveSampleConditionsVN, v25);
    v32 = v3[14];
    HIBYTE(v31) = 14;
    v26 = sub_F6794();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV21SuggestLessConditionsVN, v26);
    v32 = v3[15];
    HIBYTE(v31) = 15;
    v27 = sub_F67D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV21SuggestMoreConditionsVN, v27);
    v32 = v3[16];
    HIBYTE(v31) = 16;
    v28 = sub_F681C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV15ShareConditionsVN, v28);
    v32 = v3[17];
    HIBYTE(v31) = 17;
    v29 = sub_F6860();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v32, (char *)&v31 + 7, v5, &_s29EventAggregationConfigurationV16UnrateConditionsVN, v29);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_F41AC()
{
  unsigned __int8 *v0;

  return sub_F3A40(*v0);
}

uint64_t sub_F41B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F587C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F41D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F6398();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F4200(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F6398();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_F4228@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];

  sub_F5178(a1, (double *)v8);
  if (!v2)
  {
    v5 = v8[7];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v8[8];
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_F4280(_QWORD *a1)
{
  return sub_F3C68(a1);
}

uint64_t sub_F4294()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F42C8 + 4 * byte_195F22[*v0]))(0x746E65764578616DLL, 0xE900000000000073);
}

uint64_t sub_F42C8()
{
  return 0x65726E654778616DLL;
}

uint64_t sub_F42E8()
{
  return 0x6F6874754178616DLL;
}

uint64_t sub_F4308()
{
  return 0x6E6F43746E657665;
}

uint64_t sub_F432C()
{
  return 0x614E74757074756FLL;
}

unint64_t sub_F434C()
{
  return 0xD000000000000014;
}

uint64_t sub_F4368@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F60A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F438C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F4654();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F43B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_F4654();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TabiConfiguration.EventAggregationConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[10];
  char v32;

  v3 = v1;
  v5 = sub_5EDC(&qword_1F4A60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v9 = v3[1];
  v29 = v3[2];
  v30 = v9;
  v28 = v3[21];
  v27 = v3[22];
  v12 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v12);
  v13 = sub_F4654();
  v14 = v12;
  v15 = v5;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s29EventAggregationConfigurationV10CodingKeysON, &_s29EventAggregationConfigurationV10CodingKeysON, v13, v14, v11);
  LOBYTE(v31[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v10, v31, v5);
  if (!v2)
  {
    v16 = v29;
    v17 = v28;
    v18 = v27;
    LOBYTE(v31[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v30, v31, v15);
    LOBYTE(v31[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v31, v15);
    v19 = *(_OWORD *)(v3 + 17);
    v31[6] = *(_OWORD *)(v3 + 15);
    v31[7] = v19;
    v31[8] = *(_OWORD *)(v3 + 19);
    v20 = *(_OWORD *)(v3 + 9);
    v31[2] = *(_OWORD *)(v3 + 7);
    v31[3] = v20;
    v21 = *(_OWORD *)(v3 + 13);
    v31[4] = *(_OWORD *)(v3 + 11);
    v31[5] = v21;
    v22 = *(_OWORD *)(v3 + 5);
    v31[0] = *(_OWORD *)(v3 + 3);
    v31[1] = v22;
    v32 = 3;
    v23 = sub_F4698();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v32, v15, &_s29EventAggregationConfigurationV15EventConditionsVN, v23);
    *(_QWORD *)&v31[0] = v17;
    v32 = 4;
    v24 = sub_5EDC(&qword_1F03E0);
    v25 = sub_F4AF0(&qword_1F03E8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v32, v15, v24, v25);
    *(_QWORD *)&v31[0] = v18;
    v32 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v31, &v32, v15, v24, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v15);
}

unint64_t sub_F4654()
{
  unint64_t result;

  result = qword_1F4A68;
  if (!qword_1F4A68)
  {
    result = swift_getWitnessTable(&unk_1960E4, &_s29EventAggregationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4A68);
  }
  return result;
}

unint64_t sub_F4698()
{
  unint64_t result;

  result = qword_1F4A70;
  if (!qword_1F4A70)
  {
    result = swift_getWitnessTable(&unk_1960BC, &_s29EventAggregationConfigurationV15EventConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4A70);
  }
  return result;
}

uint64_t TabiConfiguration.EventAggregationConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _OWORD v32[10];
  uint64_t v33;
  _QWORD v34[3];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _QWORD *v76;

  v5 = sub_5EDC(&qword_1F4A78);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v76 = a1;
  sub_49F4(a1, v9);
  v11 = sub_F4654();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s29EventAggregationConfigurationV10CodingKeysON, &_s29EventAggregationConfigurationV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_62F8(v76);
  v12 = v6;
  LOBYTE(v34[0]) = 0;
  v13 = v5;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(v34, v5);
  LOBYTE(v34[0]) = 1;
  v15 = KeyedDecodingContainer.decode(_:forKey:)(v34, v5);
  LOBYTE(v34[0]) = 2;
  v30 = KeyedDecodingContainer.decode(_:forKey:)(v34, v13);
  v57 = 3;
  v16 = sub_F4AAC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &_s29EventAggregationConfigurationV15EventConditionsVN, &v57, v13, &_s29EventAggregationConfigurationV15EventConditionsVN, v16);
  v54 = v64;
  v55 = v65;
  v56 = v66;
  v50 = v60;
  v51 = v61;
  v52 = v62;
  v53 = v63;
  v48 = v58;
  v49 = v59;
  v73 = v64;
  v74 = v65;
  v75 = v66;
  v69 = v60;
  v70 = v61;
  v71 = v62;
  v72 = v63;
  v67 = v58;
  v68 = v59;
  v17 = sub_5EDC(&qword_1F03E0);
  LOBYTE(v31) = 4;
  v28 = sub_F4AF0(&qword_1F0410, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v29 = v17;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v17, &v31, v13, v17, v28);
  v46 = 5;
  v27 = v34[0];
  swift_bridgeObjectRetain(v34[0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v47, v29, &v46, v13, v29, v28);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v13);
  *(_OWORD *)((char *)&v32[5] + 8) = v53;
  *(_OWORD *)((char *)&v32[6] + 8) = v54;
  *(_OWORD *)((char *)&v32[7] + 8) = v55;
  *(_OWORD *)((char *)&v32[8] + 8) = v56;
  *(_OWORD *)((char *)&v32[1] + 8) = v49;
  *(_OWORD *)((char *)&v32[2] + 8) = v50;
  *(_OWORD *)((char *)&v32[3] + 8) = v51;
  *(_OWORD *)((char *)&v32[4] + 8) = v52;
  v18 = v47;
  *(_QWORD *)&v31 = v14;
  *((_QWORD *)&v31 + 1) = v15;
  v19 = v30;
  *(_QWORD *)&v32[0] = v30;
  *(_OWORD *)((char *)v32 + 8) = v48;
  v20 = v27;
  *((_QWORD *)&v32[9] + 1) = v27;
  v33 = v47;
  sub_F4B50((uint64_t)&v31);
  swift_bridgeObjectRelease();
  v21 = v32[8];
  *(_OWORD *)(a2 + 128) = v32[7];
  *(_OWORD *)(a2 + 144) = v21;
  *(_OWORD *)(a2 + 160) = v32[9];
  *(_QWORD *)(a2 + 176) = v33;
  v22 = v32[4];
  *(_OWORD *)(a2 + 64) = v32[3];
  *(_OWORD *)(a2 + 80) = v22;
  v23 = v32[6];
  *(_OWORD *)(a2 + 96) = v32[5];
  *(_OWORD *)(a2 + 112) = v23;
  v24 = v32[0];
  *(_OWORD *)a2 = v31;
  *(_OWORD *)(a2 + 16) = v24;
  v25 = v32[2];
  *(_OWORD *)(a2 + 32) = v32[1];
  *(_OWORD *)(a2 + 48) = v25;
  sub_62F8(v76);
  v40 = v72;
  v41 = v73;
  v42 = v74;
  v43 = v75;
  v36 = v68;
  v37 = v69;
  v38 = v70;
  v39 = v71;
  v34[0] = v14;
  v34[1] = v15;
  v35 = v67;
  v34[2] = v19;
  v44 = v20;
  v45 = v18;
  return sub_F4B84((uint64_t)v34);
}

unint64_t sub_F4AAC()
{
  unint64_t result;

  result = qword_1F4A80;
  if (!qword_1F4A80)
  {
    result = swift_getWitnessTable(&unk_196094, &_s29EventAggregationConfigurationV15EventConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4A80);
  }
  return result;
}

uint64_t sub_F4AF0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(&qword_1F03E0);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_F4B50(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 176);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 168));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_F4B84(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 168);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 176));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_F4BB4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TabiConfiguration.EventAggregationConfiguration.init(from:)(a1, a2);
}

uint64_t sub_F4BC8(_QWORD *a1)
{
  return TabiConfiguration.EventAggregationConfiguration.encode(to:)(a1);
}

uint64_t _s29EventAggregationConfigurationVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 168));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 176));
}

uint64_t _s29EventAggregationConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 168);
  v4 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = v3;
  *(_QWORD *)(a1 + 176) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *_s29EventAggregationConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  v4 = a2[21];
  v5 = a1[21];
  a1[21] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[22];
  v7 = a1[22];
  a1[22] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 _s29EventAggregationConfigurationVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t _s29EventAggregationConfigurationVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 168));
  v4 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t _s29EventAggregationConfigurationVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 184))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 168);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s29EventAggregationConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 184) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 168) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 184) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabiConfiguration.EventAggregationConfiguration()
{
  return &type metadata for TabiConfiguration.EventAggregationConfiguration;
}

__n128 _s29EventAggregationConfigurationV15EventConditionsVwcp(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t _s29EventAggregationConfigurationV15EventConditionsVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 144))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s29EventAggregationConfigurationV15EventConditionsVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 144) = v3;
  return result;
}

ValueMetadata *_s29EventAggregationConfigurationV15EventConditionsVMa()
{
  return &_s29EventAggregationConfigurationV15EventConditionsVN;
}

uint64_t _s29EventAggregationConfigurationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_F5020 + 4 * byte_195F2D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_F5054 + 4 * byte_195F28[v4]))();
}

uint64_t sub_F5054(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F505C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF5064);
  return result;
}

uint64_t sub_F5070(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF5078);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_F507C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F5084(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s29EventAggregationConfigurationV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV10CodingKeysON;
}

unint64_t sub_F50A4()
{
  unint64_t result;

  result = qword_1F4A88;
  if (!qword_1F4A88)
  {
    result = swift_getWitnessTable(&unk_19606C, &_s29EventAggregationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4A88);
  }
  return result;
}

unint64_t sub_F50EC()
{
  unint64_t result;

  result = qword_1F4A90;
  if (!qword_1F4A90)
  {
    result = swift_getWitnessTable(&unk_195FDC, &_s29EventAggregationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4A90);
  }
  return result;
}

unint64_t sub_F5134()
{
  unint64_t result;

  result = qword_1F4A98;
  if (!qword_1F4A98)
  {
    result = swift_getWitnessTable(&unk_196004, &_s29EventAggregationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4A98);
  }
  return result;
}

uint64_t sub_F5178@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  unint64_t v19;
  unint64_t v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  double v25;
  unint64_t v26;
  double v27;
  unint64_t v28;
  double v29;
  unint64_t v30;
  double v31;
  unint64_t v32;
  double v33;
  unint64_t v34;
  double v35;
  unint64_t v36;
  double v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  double v41;
  unint64_t v42;
  double v43;
  unint64_t v44;
  double v45;
  int v46;
  unint64_t v47;
  uint64_t result;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  unsigned __int8 v68;
  char v69;

  v5 = sub_5EDC(&qword_1F4B40);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_F6398();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON, &_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v69 = 0;
  v12 = sub_F68A4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsVN, v12);
  v13 = 0.0;
  if (v68)
    v14 = 0.0;
  else
    v14 = v67;
  v69 = 1;
  v15 = sub_F68E8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsVN, v15);
  if (!v68)
    v13 = v67;
  v69 = 2;
  v16 = sub_F692C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV24BookImpressionConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV24BookImpressionConditionsVN, v16);
  v17 = 0.0;
  if (v68)
    v18 = 0.0;
  else
    v18 = v67;
  v69 = 3;
  v19 = sub_F6970();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsVN, v19);
  if (!v68)
    v17 = v67;
  v69 = 4;
  v20 = sub_F69B4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV23BookPurchasedConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV23BookPurchasedConditionsVN, v20);
  v21 = 0.0;
  if (v68)
    v22 = 0.0;
  else
    v22 = v67;
  v69 = 5;
  v23 = sub_F69F8();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV21BookWasReadConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV21BookWasReadConditionsVN, v23);
  if (!v68)
    v21 = v67;
  v69 = 6;
  v24 = sub_F6A3C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV24DownloadSampleConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV24DownloadSampleConditionsVN, v24);
  if (v68)
    v25 = 0.0;
  else
    v25 = v67;
  v69 = 7;
  v26 = sub_F6A80();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsVN, v26);
  v27 = v67;
  if (v68)
    v27 = 0.0;
  v66 = v27;
  v69 = 8;
  v28 = sub_F6AC4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV18HideBookConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV18HideBookConditionsVN, v28);
  v29 = v67;
  if (v68)
    v29 = 0.0;
  v65 = v29;
  v69 = 9;
  v30 = sub_F6B08();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsVN, v30);
  v31 = v67;
  if (v68)
    v31 = 0.0;
  v64 = v31;
  v69 = 10;
  v32 = sub_F6B4C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsVN, v32);
  v33 = v67;
  if (v68)
    v33 = 0.0;
  v63 = v33;
  v69 = 11;
  v34 = sub_F6B90();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV16RatingConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV16RatingConditionsVN, v34);
  v35 = v67;
  if (v68)
    v35 = 0.0;
  v62 = v35;
  v69 = 12;
  v36 = sub_F6BD4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsVN, v36);
  v37 = v67;
  if (v68)
    v37 = 0.0;
  v61 = v37;
  v69 = 13;
  v38 = sub_F6C18();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV22RemoveSampleConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV22RemoveSampleConditionsVN, v38);
  v39 = v67;
  if (v68)
    v39 = 0.0;
  v60 = v39;
  v69 = 14;
  v40 = sub_F6C5C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV21SuggestLessConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV21SuggestLessConditionsVN, v40);
  v41 = v67;
  if (v68)
    v41 = 0.0;
  v59 = v41;
  v69 = 15;
  v42 = sub_F6CA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV21SuggestMoreConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV21SuggestMoreConditionsVN, v42);
  v43 = v67;
  if (v68)
    v43 = 0.0;
  v58 = v43;
  v69 = 16;
  v44 = sub_F6CE4();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV15ShareConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV15ShareConditionsVN, v44);
  v45 = v67;
  v46 = v68;
  v69 = 17;
  v47 = sub_F6D28();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &_s29EventAggregationConfigurationV16UnrateConditionsVN, &v69, v5, &_s29EventAggregationConfigurationV16UnrateConditionsVN, v47);
  v49 = 0.0;
  if (!v46)
    v49 = v45;
  v50 = 0.0;
  v57 = v49;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (!v68)
    v50 = v67;
  result = sub_62F8(a1);
  *a2 = v14;
  a2[1] = v13;
  a2[2] = v18;
  a2[3] = v17;
  a2[4] = v22;
  a2[5] = v21;
  v51 = v66;
  a2[6] = v25;
  a2[7] = v51;
  v52 = v64;
  a2[8] = v65;
  a2[9] = v52;
  v53 = v62;
  a2[10] = v63;
  a2[11] = v53;
  v54 = v60;
  a2[12] = v61;
  a2[13] = v54;
  v55 = v58;
  a2[14] = v59;
  a2[15] = v55;
  a2[16] = v57;
  a2[17] = v50;
  return result;
}

uint64_t sub_F587C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;

  if (a1 == 0x6E61576F54646461 && a2 == 0xEF646165526F5474)
  {
    v5 = 0xEF646165526F5474;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E61576F54646461, 0xEF646165526F5474, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x80000000001A07E0;
    if (a2 == 0x80000000001A07E0)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000001A07E0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x72706D496B6F6F62 && a2 == 0xEE006E6F69737365)
  {
    v8 = 0xEE006E6F69737365;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72706D496B6F6F62, 0xEE006E6F69737365, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000000001A07C0)
  {
    v9 = 0x80000000001A07C0;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000000001A07C0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x637275506B6F6F62 && a2 == 0xED00006465736168)
  {
    v10 = 0xED00006465736168;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x637275506B6F6F62, 0xED00006465736168, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x527361576B6F6F62 && a2 == 0xEB00000000646165)
  {
    v11 = 0xEB00000000646165;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x527361576B6F6F62, 0xEB00000000646165, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x64616F6C6E776F64 && a2 == 0xEE00656C706D6153)
  {
    v12 = 0xEE00656C706D6153;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64616F6C6E776F64, 0xEE00656C706D6153, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x746963696C707865 && a2 == 0xEF656E696C636544)
  {
    v13 = 0xEF656E696C636544;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746963696C707865, 0xEF656E696C636544, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x6B6F6F4265646968 && a2 == 0xE800000000000000)
  {
    v14 = 0xE800000000000000;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F4265646968, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x694673416B72616DLL && a2 == 0xEE0064656873696ELL)
  {
    v15 = 0xEE0064656873696ELL;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x694673416B72616DLL, 0xEE0064656873696ELL, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0xD000000000000012)
  {
    v16 = 0x80000000001A07A0;
    if (a2 == 0x80000000001A07A0)
      goto LABEL_66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000001A07A0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0x676E69746172 && a2 == 0xE600000000000000)
  {
    v17 = 0xE600000000000000;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E69746172, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000001A0780)
  {
    v18 = 0x80000000001A0780;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001A0780, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_78;
  }
  if (a1 == 0x615365766F6D6572 && a2 == 0xEC000000656C706DLL)
  {
    v19 = 0xEC000000656C706DLL;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x615365766F6D6572, 0xEC000000656C706DLL, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_84;
  }
  if (a1 == 0x4C74736567677573 && a2 == 0xEB00000000737365)
  {
    v20 = 0xEB00000000737365;
LABEL_90:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C74736567677573, 0xEB00000000737365, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_90;
  }
  if (a1 == 0x4D74736567677573 && a2 == 0xEB0000000065726FLL)
  {
    v21 = 0xEB0000000065726FLL;
LABEL_96:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4D74736567677573, 0xEB0000000065726FLL, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_96;
  }
  if (a1 == 0x6572616873 && a2 == 0xE500000000000000)
  {
    v22 = 0xE500000000000000;
LABEL_102:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6572616873, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
    goto LABEL_102;
  }
  if (a1 == 0x657461726E75 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 17;
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657461726E75, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v23 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t sub_F60A4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x746E65764578616DLL && a2 == 0xE900000000000073)
  {
    v5 = 0xE900000000000073;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65764578616DLL, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65726E654778616DLL && a2 == 0xEB00000000734449)
  {
    v7 = 0xEB00000000734449;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726E654778616DLL, 0xEB00000000734449, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6F6874754178616DLL && a2 == 0xEC00000073444972)
  {
    v8 = 0xEC00000073444972;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6874754178616DLL, 0xEC00000073444972, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E6F43746E657665 && a2 == 0xEF736E6F69746964)
  {
    v9 = 0xEF736E6F69746964;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F43746E657665, 0xEF736E6F69746964, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x614E74757074756FLL && a2 == 0xEB0000000073656DLL)
  {
    v10 = 0xEB0000000073656DLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614E74757074756FLL, 0xEB0000000073656DLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000001A2340)
  {
    swift_bridgeObjectRelease(0x80000000001A2340);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001A2340, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_F6398()
{
  unint64_t result;

  result = qword_1F4AA8;
  if (!qword_1F4AA8)
  {
    result = swift_getWitnessTable(&unk_1969D4, &_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4AA8);
  }
  return result;
}

unint64_t sub_F63DC()
{
  unint64_t result;

  result = qword_1F4AB0;
  if (!qword_1F4AB0)
  {
    result = swift_getWitnessTable(&unk_1969AC, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AB0);
  }
  return result;
}

unint64_t sub_F6420()
{
  unint64_t result;

  result = qword_1F4AB8;
  if (!qword_1F4AB8)
  {
    result = swift_getWitnessTable(&unk_196984, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AB8);
  }
  return result;
}

unint64_t sub_F6464()
{
  unint64_t result;

  result = qword_1F4AC0;
  if (!qword_1F4AC0)
  {
    result = swift_getWitnessTable(&unk_19695C, &_s29EventAggregationConfigurationV24BookImpressionConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AC0);
  }
  return result;
}

unint64_t sub_F64A8()
{
  unint64_t result;

  result = qword_1F4AC8;
  if (!qword_1F4AC8)
  {
    result = swift_getWitnessTable(&unk_196934, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AC8);
  }
  return result;
}

unint64_t sub_F64EC()
{
  unint64_t result;

  result = qword_1F4AD0;
  if (!qword_1F4AD0)
  {
    result = swift_getWitnessTable(&unk_19690C, &_s29EventAggregationConfigurationV23BookPurchasedConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AD0);
  }
  return result;
}

unint64_t sub_F6530()
{
  unint64_t result;

  result = qword_1F4AD8;
  if (!qword_1F4AD8)
  {
    result = swift_getWitnessTable(&unk_1968E4, &_s29EventAggregationConfigurationV21BookWasReadConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AD8);
  }
  return result;
}

unint64_t sub_F6574()
{
  unint64_t result;

  result = qword_1F4AE0;
  if (!qword_1F4AE0)
  {
    result = swift_getWitnessTable(&unk_1968BC, &_s29EventAggregationConfigurationV24DownloadSampleConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AE0);
  }
  return result;
}

unint64_t sub_F65B8()
{
  unint64_t result;

  result = qword_1F4AE8;
  if (!qword_1F4AE8)
  {
    result = swift_getWitnessTable(&unk_196894, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AE8);
  }
  return result;
}

unint64_t sub_F65FC()
{
  unint64_t result;

  result = qword_1F4AF0;
  if (!qword_1F4AF0)
  {
    result = swift_getWitnessTable(&unk_19686C, &_s29EventAggregationConfigurationV18HideBookConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AF0);
  }
  return result;
}

unint64_t sub_F6640()
{
  unint64_t result;

  result = qword_1F4AF8;
  if (!qword_1F4AF8)
  {
    result = swift_getWitnessTable(&unk_196844, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4AF8);
  }
  return result;
}

unint64_t sub_F6684()
{
  unint64_t result;

  result = qword_1F4B00;
  if (!qword_1F4B00)
  {
    result = swift_getWitnessTable(&unk_19681C, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B00);
  }
  return result;
}

unint64_t sub_F66C8()
{
  unint64_t result;

  result = qword_1F4B08;
  if (!qword_1F4B08)
  {
    result = swift_getWitnessTable(&unk_1967F4, &_s29EventAggregationConfigurationV16RatingConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B08);
  }
  return result;
}

unint64_t sub_F670C()
{
  unint64_t result;

  result = qword_1F4B10;
  if (!qword_1F4B10)
  {
    result = swift_getWitnessTable(&unk_1967CC, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B10);
  }
  return result;
}

unint64_t sub_F6750()
{
  unint64_t result;

  result = qword_1F4B18;
  if (!qword_1F4B18)
  {
    result = swift_getWitnessTable(&unk_1967A4, &_s29EventAggregationConfigurationV22RemoveSampleConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B18);
  }
  return result;
}

unint64_t sub_F6794()
{
  unint64_t result;

  result = qword_1F4B20;
  if (!qword_1F4B20)
  {
    result = swift_getWitnessTable(&unk_19677C, &_s29EventAggregationConfigurationV21SuggestLessConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B20);
  }
  return result;
}

unint64_t sub_F67D8()
{
  unint64_t result;

  result = qword_1F4B28;
  if (!qword_1F4B28)
  {
    result = swift_getWitnessTable(&unk_196754, &_s29EventAggregationConfigurationV21SuggestMoreConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B28);
  }
  return result;
}

unint64_t sub_F681C()
{
  unint64_t result;

  result = qword_1F4B30;
  if (!qword_1F4B30)
  {
    result = swift_getWitnessTable(&unk_19672C, &_s29EventAggregationConfigurationV15ShareConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B30);
  }
  return result;
}

unint64_t sub_F6860()
{
  unint64_t result;

  result = qword_1F4B38;
  if (!qword_1F4B38)
  {
    result = swift_getWitnessTable(&unk_196704, &_s29EventAggregationConfigurationV16UnrateConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B38);
  }
  return result;
}

unint64_t sub_F68A4()
{
  unint64_t result;

  result = qword_1F4B48;
  if (!qword_1F4B48)
  {
    result = swift_getWitnessTable(&unk_1966DC, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B48);
  }
  return result;
}

unint64_t sub_F68E8()
{
  unint64_t result;

  result = qword_1F4B50;
  if (!qword_1F4B50)
  {
    result = swift_getWitnessTable(&unk_1966B4, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B50);
  }
  return result;
}

unint64_t sub_F692C()
{
  unint64_t result;

  result = qword_1F4B58;
  if (!qword_1F4B58)
  {
    result = swift_getWitnessTable(&unk_19668C, &_s29EventAggregationConfigurationV24BookImpressionConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B58);
  }
  return result;
}

unint64_t sub_F6970()
{
  unint64_t result;

  result = qword_1F4B60;
  if (!qword_1F4B60)
  {
    result = swift_getWitnessTable(&unk_196664, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B60);
  }
  return result;
}

unint64_t sub_F69B4()
{
  unint64_t result;

  result = qword_1F4B68;
  if (!qword_1F4B68)
  {
    result = swift_getWitnessTable(&unk_19663C, &_s29EventAggregationConfigurationV23BookPurchasedConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B68);
  }
  return result;
}

unint64_t sub_F69F8()
{
  unint64_t result;

  result = qword_1F4B70;
  if (!qword_1F4B70)
  {
    result = swift_getWitnessTable(&unk_196614, &_s29EventAggregationConfigurationV21BookWasReadConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B70);
  }
  return result;
}

unint64_t sub_F6A3C()
{
  unint64_t result;

  result = qword_1F4B78;
  if (!qword_1F4B78)
  {
    result = swift_getWitnessTable(&unk_1965EC, &_s29EventAggregationConfigurationV24DownloadSampleConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B78);
  }
  return result;
}

unint64_t sub_F6A80()
{
  unint64_t result;

  result = qword_1F4B80;
  if (!qword_1F4B80)
  {
    result = swift_getWitnessTable(&unk_1965C4, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B80);
  }
  return result;
}

unint64_t sub_F6AC4()
{
  unint64_t result;

  result = qword_1F4B88;
  if (!qword_1F4B88)
  {
    result = swift_getWitnessTable(&unk_19659C, &_s29EventAggregationConfigurationV18HideBookConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B88);
  }
  return result;
}

unint64_t sub_F6B08()
{
  unint64_t result;

  result = qword_1F4B90;
  if (!qword_1F4B90)
  {
    result = swift_getWitnessTable(&unk_196574, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B90);
  }
  return result;
}

unint64_t sub_F6B4C()
{
  unint64_t result;

  result = qword_1F4B98;
  if (!qword_1F4B98)
  {
    result = swift_getWitnessTable(&unk_19654C, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4B98);
  }
  return result;
}

unint64_t sub_F6B90()
{
  unint64_t result;

  result = qword_1F4BA0;
  if (!qword_1F4BA0)
  {
    result = swift_getWitnessTable(&unk_196524, &_s29EventAggregationConfigurationV16RatingConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4BA0);
  }
  return result;
}

unint64_t sub_F6BD4()
{
  unint64_t result;

  result = qword_1F4BA8;
  if (!qword_1F4BA8)
  {
    result = swift_getWitnessTable(&unk_1964FC, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4BA8);
  }
  return result;
}

unint64_t sub_F6C18()
{
  unint64_t result;

  result = qword_1F4BB0;
  if (!qword_1F4BB0)
  {
    result = swift_getWitnessTable(&unk_1964D4, &_s29EventAggregationConfigurationV22RemoveSampleConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4BB0);
  }
  return result;
}

unint64_t sub_F6C5C()
{
  unint64_t result;

  result = qword_1F4BB8;
  if (!qword_1F4BB8)
  {
    result = swift_getWitnessTable(&unk_1964AC, &_s29EventAggregationConfigurationV21SuggestLessConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4BB8);
  }
  return result;
}

unint64_t sub_F6CA0()
{
  unint64_t result;

  result = qword_1F4BC0;
  if (!qword_1F4BC0)
  {
    result = swift_getWitnessTable(&unk_196484, &_s29EventAggregationConfigurationV21SuggestMoreConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4BC0);
  }
  return result;
}

unint64_t sub_F6CE4()
{
  unint64_t result;

  result = qword_1F4BC8;
  if (!qword_1F4BC8)
  {
    result = swift_getWitnessTable(&unk_19645C, &_s29EventAggregationConfigurationV15ShareConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4BC8);
  }
  return result;
}

unint64_t sub_F6D28()
{
  unint64_t result;

  result = qword_1F4BD0;
  if (!qword_1F4BD0)
  {
    result = swift_getWitnessTable(&unk_196434, &_s29EventAggregationConfigurationV16UnrateConditionsVN);
    atomic_store(result, (unint64_t *)&qword_1F4BD0);
  }
  return result;
}

uint64_t _s29EventAggregationConfigurationV15EventConditionsV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_F6DB8 + 4 * byte_195F37[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_F6DEC + 4 * byte_195F32[v4]))();
}

uint64_t sub_F6DEC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_F6DF4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xF6DFCLL);
  return result;
}

uint64_t sub_F6E08(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xF6E10);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_F6E14(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_F6E1C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV16UnrateConditionsVMa()
{
  return &_s29EventAggregationConfigurationV16UnrateConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV15ShareConditionsVMa()
{
  return &_s29EventAggregationConfigurationV15ShareConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV21SuggestMoreConditionsVMa()
{
  return &_s29EventAggregationConfigurationV21SuggestMoreConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV21SuggestLessConditionsVMa()
{
  return &_s29EventAggregationConfigurationV21SuggestLessConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV22RemoveSampleConditionsVMa()
{
  return &_s29EventAggregationConfigurationV22RemoveSampleConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsVMa()
{
  return &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV16RatingConditionsVMa()
{
  return &_s29EventAggregationConfigurationV16RatingConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsVMa()
{
  return &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV24MarkAsFinishedConditionsVMa()
{
  return &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV18HideBookConditionsVMa()
{
  return &_s29EventAggregationConfigurationV18HideBookConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV25ExplicitDeclineConditionsVMa()
{
  return &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV24DownloadSampleConditionsVMa()
{
  return &_s29EventAggregationConfigurationV24DownloadSampleConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV21BookWasReadConditionsVMa()
{
  return &_s29EventAggregationConfigurationV21BookWasReadConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV23BookPurchasedConditionsVMa()
{
  return &_s29EventAggregationConfigurationV23BookPurchasedConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsVMa()
{
  return &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV24BookImpressionConditionsVMa()
{
  return &_s29EventAggregationConfigurationV24BookImpressionConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsVMa()
{
  return &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsVN;
}

ValueMetadata *_s29EventAggregationConfigurationV25AddToWantToReadConditionsVMa()
{
  return &_s29EventAggregationConfigurationV25AddToWantToReadConditionsVN;
}

unint64_t sub_F6F5C()
{
  unint64_t result;

  result = qword_1F4BD8;
  if (!qword_1F4BD8)
  {
    result = swift_getWitnessTable(&unk_19640C, &_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4BD8);
  }
  return result;
}

unint64_t sub_F6FA4()
{
  unint64_t result;

  result = qword_1F4BE0;
  if (!qword_1F4BE0)
  {
    result = swift_getWitnessTable(&unk_19637C, &_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4BE0);
  }
  return result;
}

unint64_t sub_F6FEC()
{
  unint64_t result;

  result = qword_1F4BE8;
  if (!qword_1F4BE8)
  {
    result = swift_getWitnessTable(&unk_1963A4, &_s29EventAggregationConfigurationV15EventConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4BE8);
  }
  return result;
}

unint64_t sub_F7030()
{
  unint64_t result;

  result = qword_1F4BF8;
  if (!qword_1F4BF8)
  {
    result = swift_getWitnessTable(&unk_197C64, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4BF8);
  }
  return result;
}

unint64_t sub_F7074()
{
  unint64_t result;

  result = qword_1F4C08;
  if (!qword_1F4C08)
  {
    result = swift_getWitnessTable(&unk_197C14, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C08);
  }
  return result;
}

unint64_t sub_F70B8()
{
  unint64_t result;

  result = qword_1F4C18;
  if (!qword_1F4C18)
  {
    result = swift_getWitnessTable(&unk_197BC4, &_s29EventAggregationConfigurationV24BookImpressionConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C18);
  }
  return result;
}

unint64_t sub_F70FC()
{
  unint64_t result;

  result = qword_1F4C28;
  if (!qword_1F4C28)
  {
    result = swift_getWitnessTable(&unk_197B74, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C28);
  }
  return result;
}

unint64_t sub_F7140()
{
  unint64_t result;

  result = qword_1F4C38;
  if (!qword_1F4C38)
  {
    result = swift_getWitnessTable(&unk_197B24, &_s29EventAggregationConfigurationV23BookPurchasedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C38);
  }
  return result;
}

unint64_t sub_F7184()
{
  unint64_t result;

  result = qword_1F4C48;
  if (!qword_1F4C48)
  {
    result = swift_getWitnessTable(&unk_197AD4, &_s29EventAggregationConfigurationV21BookWasReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C48);
  }
  return result;
}

unint64_t sub_F71C8()
{
  unint64_t result;

  result = qword_1F4C58;
  if (!qword_1F4C58)
  {
    result = swift_getWitnessTable(&unk_197A84, &_s29EventAggregationConfigurationV24DownloadSampleConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C58);
  }
  return result;
}

unint64_t sub_F720C()
{
  unint64_t result;

  result = qword_1F4C68;
  if (!qword_1F4C68)
  {
    result = swift_getWitnessTable(&unk_197A34, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C68);
  }
  return result;
}

unint64_t sub_F7250()
{
  unint64_t result;

  result = qword_1F4C78;
  if (!qword_1F4C78)
  {
    result = swift_getWitnessTable(&unk_1979E4, &_s29EventAggregationConfigurationV18HideBookConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C78);
  }
  return result;
}

unint64_t sub_F7294()
{
  unint64_t result;

  result = qword_1F4C88;
  if (!qword_1F4C88)
  {
    result = swift_getWitnessTable(&unk_197994, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C88);
  }
  return result;
}

unint64_t sub_F72D8()
{
  unint64_t result;

  result = qword_1F4C98;
  if (!qword_1F4C98)
  {
    result = swift_getWitnessTable(&unk_197944, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4C98);
  }
  return result;
}

unint64_t sub_F731C()
{
  unint64_t result;

  result = qword_1F4CA8;
  if (!qword_1F4CA8)
  {
    result = swift_getWitnessTable(&unk_1978F4, &_s29EventAggregationConfigurationV16RatingConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4CA8);
  }
  return result;
}

unint64_t sub_F7360()
{
  unint64_t result;

  result = qword_1F4CB8;
  if (!qword_1F4CB8)
  {
    result = swift_getWitnessTable(&unk_1978A4, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4CB8);
  }
  return result;
}

unint64_t sub_F73A4()
{
  unint64_t result;

  result = qword_1F4CC8;
  if (!qword_1F4CC8)
  {
    result = swift_getWitnessTable(&unk_197854, &_s29EventAggregationConfigurationV22RemoveSampleConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4CC8);
  }
  return result;
}

unint64_t sub_F73E8()
{
  unint64_t result;

  result = qword_1F4CD8;
  if (!qword_1F4CD8)
  {
    result = swift_getWitnessTable(&unk_197804, &_s29EventAggregationConfigurationV21SuggestLessConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4CD8);
  }
  return result;
}

unint64_t sub_F742C()
{
  unint64_t result;

  result = qword_1F4CE8;
  if (!qword_1F4CE8)
  {
    result = swift_getWitnessTable(&unk_1977B4, &_s29EventAggregationConfigurationV21SuggestMoreConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4CE8);
  }
  return result;
}

unint64_t sub_F7470()
{
  unint64_t result;

  result = qword_1F4CF8;
  if (!qword_1F4CF8)
  {
    result = swift_getWitnessTable(&unk_197764, &_s29EventAggregationConfigurationV15ShareConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4CF8);
  }
  return result;
}

unint64_t sub_F74B4()
{
  unint64_t result;

  result = qword_1F4D08;
  if (!qword_1F4D08)
  {
    result = swift_getWitnessTable(&unk_197714, &_s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4D08);
  }
  return result;
}

ValueMetadata *_s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV15ShareConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV15ShareConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV21SuggestMoreConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV21SuggestMoreConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV21SuggestLessConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV21SuggestLessConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV22RemoveSampleConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV22RemoveSampleConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV16RatingConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV16RatingConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV24MarkAsFinishedConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV18HideBookConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV18HideBookConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV25ExplicitDeclineConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV24DownloadSampleConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV24DownloadSampleConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV21BookWasReadConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV21BookWasReadConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV23BookPurchasedConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV23BookPurchasedConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV24BookImpressionConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV24BookImpressionConditionsV10CodingKeysON;
}

ValueMetadata *_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsV10CodingKeysON;
}

uint64_t _s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_F764C + 4 * byte_195F3C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_F766C + 4 * byte_195F41[v4]))();
}

_BYTE *sub_F764C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_F766C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_F7674(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_F767C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_F7684(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_F768C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *_s29EventAggregationConfigurationV25AddToWantToReadConditionsV10CodingKeysOMa()
{
  return &_s29EventAggregationConfigurationV25AddToWantToReadConditionsV10CodingKeysON;
}

unint64_t sub_F76AC()
{
  unint64_t result;

  result = qword_1F4DA0;
  if (!qword_1F4DA0)
  {
    result = swift_getWitnessTable(&unk_196AB4, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DA0);
  }
  return result;
}

unint64_t sub_F76F4()
{
  unint64_t result;

  result = qword_1F4DA8;
  if (!qword_1F4DA8)
  {
    result = swift_getWitnessTable(&unk_196B6C, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DA8);
  }
  return result;
}

unint64_t sub_F773C()
{
  unint64_t result;

  result = qword_1F4DB0;
  if (!qword_1F4DB0)
  {
    result = swift_getWitnessTable(&unk_196C24, &_s29EventAggregationConfigurationV24BookImpressionConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DB0);
  }
  return result;
}

unint64_t sub_F7784()
{
  unint64_t result;

  result = qword_1F4DB8;
  if (!qword_1F4DB8)
  {
    result = swift_getWitnessTable(&unk_196CDC, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DB8);
  }
  return result;
}

unint64_t sub_F77CC()
{
  unint64_t result;

  result = qword_1F4DC0;
  if (!qword_1F4DC0)
  {
    result = swift_getWitnessTable(&unk_196D94, &_s29EventAggregationConfigurationV23BookPurchasedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DC0);
  }
  return result;
}

unint64_t sub_F7814()
{
  unint64_t result;

  result = qword_1F4DC8;
  if (!qword_1F4DC8)
  {
    result = swift_getWitnessTable(&unk_196E4C, &_s29EventAggregationConfigurationV21BookWasReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DC8);
  }
  return result;
}

unint64_t sub_F785C()
{
  unint64_t result;

  result = qword_1F4DD0;
  if (!qword_1F4DD0)
  {
    result = swift_getWitnessTable(&unk_196F04, &_s29EventAggregationConfigurationV24DownloadSampleConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DD0);
  }
  return result;
}

unint64_t sub_F78A4()
{
  unint64_t result;

  result = qword_1F4DD8;
  if (!qword_1F4DD8)
  {
    result = swift_getWitnessTable(&unk_196FBC, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DD8);
  }
  return result;
}

unint64_t sub_F78EC()
{
  unint64_t result;

  result = qword_1F4DE0;
  if (!qword_1F4DE0)
  {
    result = swift_getWitnessTable(&unk_197074, &_s29EventAggregationConfigurationV18HideBookConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DE0);
  }
  return result;
}

unint64_t sub_F7934()
{
  unint64_t result;

  result = qword_1F4DE8;
  if (!qword_1F4DE8)
  {
    result = swift_getWitnessTable(&unk_19712C, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DE8);
  }
  return result;
}

unint64_t sub_F797C()
{
  unint64_t result;

  result = qword_1F4DF0;
  if (!qword_1F4DF0)
  {
    result = swift_getWitnessTable(&unk_1971E4, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DF0);
  }
  return result;
}

unint64_t sub_F79C4()
{
  unint64_t result;

  result = qword_1F4DF8;
  if (!qword_1F4DF8)
  {
    result = swift_getWitnessTable(&unk_19729C, &_s29EventAggregationConfigurationV16RatingConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4DF8);
  }
  return result;
}

unint64_t sub_F7A0C()
{
  unint64_t result;

  result = qword_1F4E00;
  if (!qword_1F4E00)
  {
    result = swift_getWitnessTable(&unk_197354, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E00);
  }
  return result;
}

unint64_t sub_F7A54()
{
  unint64_t result;

  result = qword_1F4E08;
  if (!qword_1F4E08)
  {
    result = swift_getWitnessTable(&unk_19740C, &_s29EventAggregationConfigurationV22RemoveSampleConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E08);
  }
  return result;
}

unint64_t sub_F7A9C()
{
  unint64_t result;

  result = qword_1F4E10;
  if (!qword_1F4E10)
  {
    result = swift_getWitnessTable(&unk_1974C4, &_s29EventAggregationConfigurationV21SuggestLessConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E10);
  }
  return result;
}

unint64_t sub_F7AE4()
{
  unint64_t result;

  result = qword_1F4E18;
  if (!qword_1F4E18)
  {
    result = swift_getWitnessTable(&unk_19757C, &_s29EventAggregationConfigurationV21SuggestMoreConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E18);
  }
  return result;
}

unint64_t sub_F7B2C()
{
  unint64_t result;

  result = qword_1F4E20;
  if (!qword_1F4E20)
  {
    result = swift_getWitnessTable(&unk_197634, &_s29EventAggregationConfigurationV15ShareConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E20);
  }
  return result;
}

unint64_t sub_F7B74()
{
  unint64_t result;

  result = qword_1F4E28;
  if (!qword_1F4E28)
  {
    result = swift_getWitnessTable(&unk_1976EC, &_s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E28);
  }
  return result;
}

unint64_t sub_F7BBC()
{
  unint64_t result;

  result = qword_1F4E30;
  if (!qword_1F4E30)
  {
    result = swift_getWitnessTable(&unk_19765C, &_s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E30);
  }
  return result;
}

unint64_t sub_F7C04()
{
  unint64_t result;

  result = qword_1F4E38;
  if (!qword_1F4E38)
  {
    result = swift_getWitnessTable(&unk_197684, &_s29EventAggregationConfigurationV16UnrateConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E38);
  }
  return result;
}

unint64_t sub_F7C4C()
{
  unint64_t result;

  result = qword_1F4E40;
  if (!qword_1F4E40)
  {
    result = swift_getWitnessTable(&unk_1975A4, &_s29EventAggregationConfigurationV15ShareConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E40);
  }
  return result;
}

unint64_t sub_F7C94()
{
  unint64_t result;

  result = qword_1F4E48;
  if (!qword_1F4E48)
  {
    result = swift_getWitnessTable(&unk_1975CC, &_s29EventAggregationConfigurationV15ShareConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E48);
  }
  return result;
}

unint64_t sub_F7CDC()
{
  unint64_t result;

  result = qword_1F4E50;
  if (!qword_1F4E50)
  {
    result = swift_getWitnessTable(&unk_1974EC, &_s29EventAggregationConfigurationV21SuggestMoreConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E50);
  }
  return result;
}

unint64_t sub_F7D24()
{
  unint64_t result;

  result = qword_1F4E58;
  if (!qword_1F4E58)
  {
    result = swift_getWitnessTable(&unk_197514, &_s29EventAggregationConfigurationV21SuggestMoreConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E58);
  }
  return result;
}

unint64_t sub_F7D6C()
{
  unint64_t result;

  result = qword_1F4E60;
  if (!qword_1F4E60)
  {
    result = swift_getWitnessTable(&unk_197434, &_s29EventAggregationConfigurationV21SuggestLessConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E60);
  }
  return result;
}

unint64_t sub_F7DB4()
{
  unint64_t result;

  result = qword_1F4E68;
  if (!qword_1F4E68)
  {
    result = swift_getWitnessTable(&unk_19745C, &_s29EventAggregationConfigurationV21SuggestLessConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E68);
  }
  return result;
}

unint64_t sub_F7DFC()
{
  unint64_t result;

  result = qword_1F4E70;
  if (!qword_1F4E70)
  {
    result = swift_getWitnessTable(&unk_19737C, &_s29EventAggregationConfigurationV22RemoveSampleConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E70);
  }
  return result;
}

unint64_t sub_F7E44()
{
  unint64_t result;

  result = qword_1F4E78;
  if (!qword_1F4E78)
  {
    result = swift_getWitnessTable(&unk_1973A4, &_s29EventAggregationConfigurationV22RemoveSampleConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E78);
  }
  return result;
}

unint64_t sub_F7E8C()
{
  unint64_t result;

  result = qword_1F4E80;
  if (!qword_1F4E80)
  {
    result = swift_getWitnessTable(&unk_1972C4, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E80);
  }
  return result;
}

unint64_t sub_F7ED4()
{
  unint64_t result;

  result = qword_1F4E88;
  if (!qword_1F4E88)
  {
    result = swift_getWitnessTable(&unk_1972EC, &_s29EventAggregationConfigurationV30RemoveFromWantToReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E88);
  }
  return result;
}

unint64_t sub_F7F1C()
{
  unint64_t result;

  result = qword_1F4E90;
  if (!qword_1F4E90)
  {
    result = swift_getWitnessTable(&unk_19720C, &_s29EventAggregationConfigurationV16RatingConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E90);
  }
  return result;
}

unint64_t sub_F7F64()
{
  unint64_t result;

  result = qword_1F4E98;
  if (!qword_1F4E98)
  {
    result = swift_getWitnessTable(&unk_197234, &_s29EventAggregationConfigurationV16RatingConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4E98);
  }
  return result;
}

unint64_t sub_F7FAC()
{
  unint64_t result;

  result = qword_1F4EA0;
  if (!qword_1F4EA0)
  {
    result = swift_getWitnessTable(&unk_197154, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EA0);
  }
  return result;
}

unint64_t sub_F7FF4()
{
  unint64_t result;

  result = qword_1F4EA8;
  if (!qword_1F4EA8)
  {
    result = swift_getWitnessTable(&unk_19717C, &_s29EventAggregationConfigurationV28MarkAsStillReadingConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EA8);
  }
  return result;
}

unint64_t sub_F803C()
{
  unint64_t result;

  result = qword_1F4EB0;
  if (!qword_1F4EB0)
  {
    result = swift_getWitnessTable(&unk_19709C, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EB0);
  }
  return result;
}

unint64_t sub_F8084()
{
  unint64_t result;

  result = qword_1F4EB8;
  if (!qword_1F4EB8)
  {
    result = swift_getWitnessTable(&unk_1970C4, &_s29EventAggregationConfigurationV24MarkAsFinishedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EB8);
  }
  return result;
}

unint64_t sub_F80CC()
{
  unint64_t result;

  result = qword_1F4EC0;
  if (!qword_1F4EC0)
  {
    result = swift_getWitnessTable(&unk_196FE4, &_s29EventAggregationConfigurationV18HideBookConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EC0);
  }
  return result;
}

unint64_t sub_F8114()
{
  unint64_t result;

  result = qword_1F4EC8;
  if (!qword_1F4EC8)
  {
    result = swift_getWitnessTable(&unk_19700C, &_s29EventAggregationConfigurationV18HideBookConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EC8);
  }
  return result;
}

unint64_t sub_F815C()
{
  unint64_t result;

  result = qword_1F4ED0;
  if (!qword_1F4ED0)
  {
    result = swift_getWitnessTable(&unk_196F2C, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4ED0);
  }
  return result;
}

unint64_t sub_F81A4()
{
  unint64_t result;

  result = qword_1F4ED8;
  if (!qword_1F4ED8)
  {
    result = swift_getWitnessTable(&unk_196F54, &_s29EventAggregationConfigurationV25ExplicitDeclineConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4ED8);
  }
  return result;
}

unint64_t sub_F81EC()
{
  unint64_t result;

  result = qword_1F4EE0;
  if (!qword_1F4EE0)
  {
    result = swift_getWitnessTable(&unk_196E74, &_s29EventAggregationConfigurationV24DownloadSampleConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EE0);
  }
  return result;
}

unint64_t sub_F8234()
{
  unint64_t result;

  result = qword_1F4EE8;
  if (!qword_1F4EE8)
  {
    result = swift_getWitnessTable(&unk_196E9C, &_s29EventAggregationConfigurationV24DownloadSampleConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EE8);
  }
  return result;
}

unint64_t sub_F827C()
{
  unint64_t result;

  result = qword_1F4EF0;
  if (!qword_1F4EF0)
  {
    result = swift_getWitnessTable(&unk_196DBC, &_s29EventAggregationConfigurationV21BookWasReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EF0);
  }
  return result;
}

unint64_t sub_F82C4()
{
  unint64_t result;

  result = qword_1F4EF8;
  if (!qword_1F4EF8)
  {
    result = swift_getWitnessTable(&unk_196DE4, &_s29EventAggregationConfigurationV21BookWasReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4EF8);
  }
  return result;
}

unint64_t sub_F830C()
{
  unint64_t result;

  result = qword_1F4F00;
  if (!qword_1F4F00)
  {
    result = swift_getWitnessTable(&unk_196D04, &_s29EventAggregationConfigurationV23BookPurchasedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F00);
  }
  return result;
}

unint64_t sub_F8354()
{
  unint64_t result;

  result = qword_1F4F08;
  if (!qword_1F4F08)
  {
    result = swift_getWitnessTable(&unk_196D2C, &_s29EventAggregationConfigurationV23BookPurchasedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F08);
  }
  return result;
}

unint64_t sub_F839C()
{
  unint64_t result;

  result = qword_1F4F10;
  if (!qword_1F4F10)
  {
    result = swift_getWitnessTable(&unk_196C4C, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F10);
  }
  return result;
}

unint64_t sub_F83E4()
{
  unint64_t result;

  result = qword_1F4F18;
  if (!qword_1F4F18)
  {
    result = swift_getWitnessTable(&unk_196C74, &_s29EventAggregationConfigurationV35BookProductPageImpressionConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F18);
  }
  return result;
}

unint64_t sub_F842C()
{
  unint64_t result;

  result = qword_1F4F20;
  if (!qword_1F4F20)
  {
    result = swift_getWitnessTable(&unk_196B94, &_s29EventAggregationConfigurationV24BookImpressionConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F20);
  }
  return result;
}

unint64_t sub_F8474()
{
  unint64_t result;

  result = qword_1F4F28;
  if (!qword_1F4F28)
  {
    result = swift_getWitnessTable(&unk_196BBC, &_s29EventAggregationConfigurationV24BookImpressionConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F28);
  }
  return result;
}

unint64_t sub_F84BC()
{
  unint64_t result;

  result = qword_1F4F30;
  if (!qword_1F4F30)
  {
    result = swift_getWitnessTable(&unk_196ADC, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F30);
  }
  return result;
}

unint64_t sub_F8504()
{
  unint64_t result;

  result = qword_1F4F38;
  if (!qword_1F4F38)
  {
    result = swift_getWitnessTable(&unk_196B04, &_s29EventAggregationConfigurationV28AudiobookWasPlayedConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F38);
  }
  return result;
}

unint64_t sub_F854C()
{
  unint64_t result;

  result = qword_1F4F40;
  if (!qword_1F4F40)
  {
    result = swift_getWitnessTable(&unk_196A24, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F40);
  }
  return result;
}

unint64_t sub_F8594()
{
  unint64_t result;

  result = qword_1F4F48;
  if (!qword_1F4F48)
  {
    result = swift_getWitnessTable(&unk_196A4C, &_s29EventAggregationConfigurationV25AddToWantToReadConditionsV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F4F48);
  }
  return result;
}

void sub_F85D8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F861C(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000014, 0x800000000019EB00);
  return swift_bridgeObjectRelease(0x800000000019EB00);
}

void sub_F86A8(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_F86F0(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 2, 0x800000000019ED80);
  return swift_bridgeObjectRelease(0x800000000019ED80);
}

void sub_F87B8(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_F8800(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 7, 0x800000000019EBE0);
  return swift_bridgeObjectRelease(0x800000000019EBE0);
}

void sub_F88A8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F88E8(uint64_t a1)
{
  String.hash(into:)(a1, 0x64496B6F6F62, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_F8978(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F89B0(uint64_t a1)
{
  String.hash(into:)(a1, 0x736B6F6F62, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_F8AA8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F8AEC(uint64_t a1)
{
  String.hash(into:)(a1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  return swift_bridgeObjectRelease(0xEB0000000079726FLL);
}

void sub_F8B58(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F8B98(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000014, 0x800000000019F8B0);
  return swift_bridgeObjectRelease(0x800000000019F8B0);
}

void sub_F8C94(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F8CD8(uint64_t a1)
{
  String.hash(into:)(a1, 0x495041616964656DLL, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_F8D4C(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_F8D94(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, v1 + 11, 0x800000000019F7F0);
  return swift_bridgeObjectRelease(0x800000000019F7F0);
}

void sub_F8E44(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F8E80(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000017, 0x800000000019EF80);
  return swift_bridgeObjectRelease(0x800000000019EF80);
}

void sub_F8F28(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F8F6C(uint64_t a1)
{
  String.hash(into:)(a1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  return swift_bridgeObjectRelease(0xEB0000000079726FLL);
}

void sub_F8FD8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F901C(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2 + 5, 0x800000000019EED0);
  return swift_bridgeObjectRelease(0x800000000019EED0);
}

void sub_F9080(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F90C4(uint64_t a1)
{
  String.hash(into:)(a1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  return swift_bridgeObjectRelease(0xEB0000000079726FLL);
}

void sub_F9138(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_F9174(uint64_t a1)
{
  String.hash(into:)(a1, 0xD000000000000017, 0x800000000019EF80);
  return swift_bridgeObjectRelease(0x800000000019EF80);
}

void InternalAffinitySource.affinity.getter()
{
  sub_FBFEC();
}

BooksPersonalization::ReviewInfo __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ReviewInfo.init(score:secondsSinceReviewed:)(Swift::Double score, Swift::Double secondsSinceReviewed)
{
  Swift::Double *v2;
  _BOOL4 v4;
  double v5;
  _BOOL4 v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BooksPersonalization::ReviewInfo result;

  v4 = score >= -1.0;
  v5 = 1.0;
  v6 = score <= 1.0 && v4;
  if (v6)
  {
    if (secondsSinceReviewed >= 0.0)
    {
      *v2 = score;
      v2[1] = secondsSinceReviewed;
      goto LABEL_10;
    }
    v8 = sub_C9310();
    v9 = swift_allocError(&type metadata for ReviewInfo.Errors, v8, 0, 0);
    *(Swift::Double *)v10 = secondsSinceReviewed;
  }
  else
  {
    v11 = sub_C9310();
    v9 = swift_allocError(&type metadata for ReviewInfo.Errors, v11, 0, 0);
    *(Swift::Double *)v10 = score;
  }
  *(_BYTE *)(v10 + 8) = v6;
  swift_willThrow(v9);
LABEL_10:
  result.secondsSinceReviewed = secondsSinceReviewed;
  result.score = v5;
  return result;
}

uint64_t SeedBook.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_BYTE *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = *(_BYTE *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_BYTE *)(v1 + 72);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v3);
}

uint64_t SeedBook.internalAffinitySource.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1[10];
  v3 = v1[11];
  v4 = v1[12];
  v5 = v1[13];
  v6 = v1[14];
  v7 = v1[15];
  v8 = v1[16];
  v9 = v1[17];
  v10 = v1[18];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  return sub_61A8(v2, v3, v4, v5, v6, v7, v8);
}

uint64_t SeedBook.bookHistory.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[392];

  sub_8E32C(v1 + 152, (uint64_t)v4);
  return sub_8E32C((uint64_t)v4, a1);
}

uint64_t SeedBook.affinityInfosByImplicitFeature.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 536));
}

void SeedBook.positiveAffinitySource.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 544);
}

void sub_F93F4()
{
  __asm { BR              X10 }
}

uint64_t sub_F9430()
{
  unint64_t v0;
  uint64_t v1;

  v0 = sub_10219C();
  v1 = swift_allocError(&type metadata for InternalAffinitySource.Errors, v0, 0, 0);
  return swift_willThrow(v1);
}

uint64_t sub_F94A0()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_F94BC + 4 * byte_197D20[*(unsigned __int8 *)(v0 + 8)]))();
}

void sub_F94BC()
{
  JUMPOUT(0xF9460);
}

void sub_F94E0()
{
  _BYTE *v0;

  *v0 = 0;
  JUMPOUT(0xF9488);
}

void sub_F94E8()
{
  JUMPOUT(0xF9460);
}

void sub_F94F0()
{
  JUMPOUT(0xF9460);
}

void sub_F94F8()
{
  JUMPOUT(0xF9460);
}

void sub_F9500()
{
  JUMPOUT(0xF9460);
}

void sub_F9508()
{
  JUMPOUT(0xF9460);
}

void sub_F9510()
{
  JUMPOUT(0xF9460);
}

void sub_F9518()
{
  JUMPOUT(0xF9460);
}

void sub_F9520()
{
  JUMPOUT(0xF9460);
}

void sub_F9528()
{
  JUMPOUT(0xF9460);
}

void *SeedBook.init(storeID:metadata:positiveAffinitySource:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char v15;
  _BYTE v17[384];
  _OWORD __src[35];

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 3);
  v8 = a2[32];
  v9 = *((_QWORD *)a2 + 5);
  v10 = a2[48];
  v11 = *((_QWORD *)a2 + 7);
  v12 = a2[64];
  v15 = *a3;
  sub_FEB5C((uint64_t)v17);
  v13 = sub_53844((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&__src[0] = a1;
  BYTE8(__src[0]) = v6;
  __src[1] = *(_OWORD *)(a2 + 8);
  *(_QWORD *)&__src[2] = v7;
  BYTE8(__src[2]) = v8;
  *(_QWORD *)&__src[3] = v9;
  BYTE8(__src[3]) = v10;
  *(_QWORD *)&__src[4] = v11;
  BYTE8(__src[4]) = v12;
  memset(&__src[5], 0, 48);
  *(_QWORD *)&__src[9] = 0;
  __src[8] = 0x1FFFFFFFEuLL;
  sub_8E32C((uint64_t)v17, (uint64_t)&__src[9] + 8);
  *((_QWORD *)&__src[33] + 1) = v13;
  LOBYTE(__src[34]) = v15;
  return memcpy(a4, __src, 0x221uLL);
}

void SeedBook.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  int v22;
  _BYTE __dst[377];
  _BYTE __src[384];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[392];

  v3 = *(_QWORD *)v1;
  v4 = *(_BYTE *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_BYTE *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v20 = *(_BYTE *)(v1 + 72);
  v17 = *(_QWORD *)(v1 + 88);
  v18 = *(_QWORD *)(v1 + 80);
  v15 = *(_QWORD *)(v1 + 104);
  v16 = *(_QWORD *)(v1 + 96);
  v10 = *(_QWORD *)(v1 + 128);
  v13 = *(_QWORD *)(v1 + 120);
  v14 = *(_QWORD *)(v1 + 112);
  v11 = *(_QWORD *)(v1 + 144);
  v12 = *(_QWORD *)(v1 + 136);
  v19 = *(_OWORD *)(v1 + 16);
  sub_8E32C(v1 + 152, (uint64_t)v33);
  v21 = *(_QWORD *)(v1 + 536);
  v22 = *(unsigned __int8 *)(v1 + 544);
  Hasher._combine(_:)(v3);
  LOBYTE(v25) = v4;
  v26 = v19;
  v27 = v5;
  LOBYTE(v28) = v6;
  v29 = v7;
  LOBYTE(v30) = v8;
  v31 = v9;
  LOBYTE(v32) = v20;
  Book.Metadata.hash(into:)(a1);
  if (v10 >> 1 == 0xFFFFFFFF)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v25 = v18;
    *(_QWORD *)&v26 = v17;
    *((_QWORD *)&v26 + 1) = v16;
    v27 = v15;
    v28 = v14;
    v29 = v13;
    v30 = v10;
    v31 = v12;
    v32 = v11;
    Hasher._combine(_:)(1u);
    InternalAffinitySource.hash(into:)();
  }
  sub_8E32C((uint64_t)v33, (uint64_t)&v25);
  if (sub_8E6A0((uint64_t)&v25) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_8E32C((uint64_t)v33, (uint64_t)__src);
    memcpy(__dst, __src, sizeof(__dst));
    Hasher._combine(_:)(1u);
    BookHistory.hash(into:)();
  }
  swift_bridgeObjectRetain(v21);
  sub_FDDF0(a1, v21);
  swift_bridgeObjectRelease(v21);
  if (v22 == 12)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    __src[0] = v22;
    Hasher._combine(_:)(1u);
    PositiveAffinitySource.hash(into:)(a1);
  }
}

uint64_t sub_F9858(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_F988C + 4 * byte_197D2D[a1]))(0x444965726F7473, 0xE700000000000000);
}

uint64_t sub_F988C()
{
  return 0x617461646174656DLL;
}

unint64_t sub_F98A4()
{
  return 0xD000000000000016;
}

uint64_t sub_F990C()
{
  unsigned __int8 *v0;

  return sub_F9858(*v0);
}

uint64_t sub_F9914@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_101720(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_F9938(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FEBB8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_F9960(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FEBB8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SeedBook.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[392];
  int v55;
  char v56;

  v3 = sub_5EDC(&qword_1F4F50);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v55 = *((unsigned __int8 *)v1 + 8);
  v44 = *((_OWORD *)v1 + 1);
  v43 = v1[4];
  v42 = *((unsigned __int8 *)v1 + 40);
  v41 = v1[6];
  v40 = *((unsigned __int8 *)v1 + 56);
  v39 = v1[8];
  v38 = *((unsigned __int8 *)v1 + 72);
  v8 = v1[10];
  v36 = v1[11];
  v37 = v8;
  v9 = v1[12];
  v34 = v1[13];
  v35 = v9;
  v10 = v1[14];
  v32 = v1[15];
  v33 = v10;
  v11 = v1[16];
  v30 = v1[17];
  v31 = v11;
  v29 = v1[18];
  sub_8E32C((uint64_t)(v1 + 19), (uint64_t)v54);
  v28 = v1[67];
  v27 = *((unsigned __int8 *)v1 + 544);
  v13 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v13);
  v14 = sub_FEBB8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SeedBook.CodingKeys, &type metadata for SeedBook.CodingKeys, v14, v13, v12);
  LOBYTE(v46) = 0;
  v15 = v45;
  KeyedEncodingContainer.encode(_:forKey:)(v7, &v46, v3);
  if (!v15)
  {
    v16 = v35;
    v17 = v36;
    v18 = v37;
    LOBYTE(v46) = v55;
    v47 = v44;
    v48 = v43;
    LOBYTE(v49) = v42;
    v50 = v41;
    LOBYTE(v51) = v40;
    v52 = v39;
    LOBYTE(v53) = v38;
    v56 = 1;
    v19 = sub_FEBFC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v56, v3, &type metadata for Book.Metadata, v19);
    v46 = v18;
    *(_QWORD *)&v47 = v17;
    *((_QWORD *)&v47 + 1) = v16;
    v48 = v34;
    v49 = v33;
    v50 = v32;
    v51 = v31;
    v52 = v30;
    v53 = v29;
    v56 = 2;
    v20 = sub_FEC40();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v46, &v56, v3, &type metadata for InternalAffinitySource, v20);
    sub_8E32C((uint64_t)v54, (uint64_t)&v46);
    v56 = 3;
    v21 = sub_FEC84();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v46, &v56, v3, &type metadata for BookHistory, v21);
    v46 = v28;
    v56 = 4;
    v22 = sub_5EDC(&qword_1F4F78);
    v23 = sub_FECC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v46, &v56, v3, v22, v23);
    LOBYTE(v46) = v27;
    v56 = 5;
    v24 = sub_FEDD4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v46, &v56, v3, &type metadata for PositiveAffinitySource, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int SeedBook.hashValue.getter()
{
  const void *v0;
  _QWORD v2[9];
  _BYTE __dst[545];

  memcpy(__dst, v0, sizeof(__dst));
  Hasher.init(_seed:)(v2, 0);
  SeedBook.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

_QWORD *SeedBook.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  _QWORD *v56;
  _QWORD v57[69];
  uint64_t v58[69];
  _BYTE v59[384];
  _QWORD v60[48];
  _QWORD v61[70];
  int v62;
  char v63;
  uint64_t v64;

  v5 = sub_5EDC(&qword_1F4FB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v56 = a1;
  sub_49F4(a1, v9);
  v11 = sub_FEBB8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SeedBook.CodingKeys, &type metadata for SeedBook.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)sub_62F8(v56);
  v12 = v6;
  v55 = a2;
  LOBYTE(v58[0]) = 0;
  v13 = v5;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(v58, v5);
  v61[0] = v14;
  LOBYTE(v57[0]) = 1;
  v15 = sub_FEE18();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v58, &type metadata for Book.Metadata, v57, v13, &type metadata for Book.Metadata, v15);
  v53 = v14;
  v16 = v58[1];
  v17 = v58[2];
  LODWORD(v14) = LOBYTE(v58[8]);
  v62 = LOBYTE(v58[0]);
  LOBYTE(v61[1]) = v58[0];
  v61[2] = v58[1];
  v61[3] = v58[2];
  v52 = v58[3];
  v61[4] = v58[3];
  v51 = LOBYTE(v58[4]);
  LOBYTE(v61[5]) = v58[4];
  v50 = v58[5];
  v61[6] = v58[5];
  v49 = LOBYTE(v58[6]);
  LOBYTE(v61[7]) = v58[6];
  v48 = v58[7];
  v61[8] = v58[7];
  LOBYTE(v61[9]) = v58[8];
  LOBYTE(v57[0]) = 2;
  v18 = sub_FEE5C();
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v58, &type metadata for InternalAffinitySource, v57, v13, &type metadata for InternalAffinitySource, v18);
  v54 = 0;
  v38 = v14;
  v46 = v16;
  v47 = v17;
  v19 = v58[6];
  v20 = v58[8];
  v61[10] = v58[0];
  v61[11] = v58[1];
  v61[12] = v58[2];
  v61[13] = v58[3];
  v61[14] = v58[4];
  v61[15] = v58[5];
  v61[16] = v58[6];
  v61[17] = v58[7];
  v61[18] = v58[8];
  BYTE1(v64) = 3;
  v43 = v58[0];
  v44 = v58[3];
  v39 = v58[1];
  v40 = v58[2];
  v41 = v58[4];
  v42 = v58[5];
  v45 = v58[7];
  sub_61A8(v58[0], v58[1], v58[2], v58[3], v58[4], v58[5], v58[6]);
  v21 = sub_FEEA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v60, &type metadata for BookHistory, (char *)&v64 + 1, v13, &type metadata for BookHistory, v21);
  v37 = v20;
  sub_8E32C((uint64_t)v60, (uint64_t)v59);
  sub_8E32C((uint64_t)v59, (uint64_t)&v61[19]);
  v22 = sub_5EDC(&qword_1F4F78);
  LOBYTE(v57[0]) = 4;
  v23 = sub_FEEE4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v58, v22, v57, v13, v22, v23);
  v36 = v19;
  v24 = v58[0];
  v61[67] = v58[0];
  v63 = 5;
  v25 = sub_FF058();
  v35 = v24;
  swift_bridgeObjectRetain(v24);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v64, &type metadata for PositiveAffinitySource, &v63, v13, &type metadata for PositiveAffinitySource, v25);
  v26 = v46;
  v27 = v44;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v13);
  LODWORD(v54) = v64;
  LOBYTE(v61[68]) = v64;
  v57[0] = v53;
  LOBYTE(v57[1]) = v62;
  v28 = v27;
  v57[2] = v26;
  v57[3] = v47;
  v57[4] = v52;
  LOBYTE(v57[5]) = v51;
  v57[6] = v50;
  LOBYTE(v57[7]) = v49;
  v57[8] = v48;
  LOBYTE(v57[9]) = v38;
  v29 = v42;
  v31 = v39;
  v30 = v40;
  v57[10] = v43;
  v57[11] = v39;
  v57[12] = v40;
  v57[13] = v28;
  v32 = v41;
  v57[14] = v41;
  v57[15] = v42;
  v33 = v36;
  v57[16] = v36;
  v57[17] = v45;
  v57[18] = v37;
  sub_8E32C((uint64_t)v59, (uint64_t)&v57[19]);
  v57[67] = v35;
  LOBYTE(v57[68]) = v54;
  sub_6100(v57);
  swift_bridgeObjectRelease();
  sub_62CC(v43, v31, v30, v44, v32, v29, v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memcpy(v55, v57, 0x221uLL);
  sub_62F8(v56);
  memcpy(v58, v61, 0x221uLL);
  return sub_6228(v58);
}

_QWORD *sub_FA31C@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return SeedBook.init(from:)(a1, a2);
}

uint64_t sub_FA330(_QWORD *a1)
{
  return SeedBook.encode(to:)(a1);
}

Swift::Int sub_FA348(uint64_t a1)
{
  const void *v1;
  _QWORD v4[9];
  _BYTE __dst[545];

  memcpy(__dst, v1, sizeof(__dst));
  Hasher.init(_seed:)(v4, a1);
  SeedBook.hash(into:)((uint64_t)v4);
  return Hasher._finalize()();
}

BooksPersonalization::PositiveAffinitySource::PositiveStarRating_optional __swiftcall PositiveAffinitySource.PositiveStarRating.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::PositiveAffinitySource::PositiveStarRating_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA228, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t PositiveAffinitySource.PositiveStarRating.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1920298854;
  if (*v0 != 1)
    v1 = 1702259046;
  if (*v0)
    return v1;
  else
    return 0x6565726874;
}

BooksPersonalization::PositiveAffinitySource::PositiveStarRating_optional sub_FA444(Swift::String *a1)
{
  return PositiveAffinitySource.PositiveStarRating.init(rawValue:)(*a1);
}

void sub_FA450(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 1920298854;
  if (v2 != 1)
    v4 = 1702259046;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x6565726874;
  if (!v5)
    v3 = 0xE400000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_FA49C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_102158();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_FA4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_102158();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_FA544(char *a1, unsigned __int8 *a2)
{
  return sub_79890(*a1, *a2);
}

Swift::Int sub_FA550()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 1920298854;
  if (v1 != 1)
    v2 = 1702259046;
  if (v1)
    v3 = v2;
  else
    v3 = 0x6565726874;
  if (v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_FA5DC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 1920298854;
  if (*v1 != 1)
    v2 = 1702259046;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x6565726874;
  if (*v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_FA644(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 1920298854;
  if (v2 != 1)
    v3 = 1702259046;
  if (v2)
    v4 = v3;
  else
    v4 = 0x6565726874;
  if (v2)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

void PositiveAffinitySource.hash(into:)(uint64_t a1)
{
  _BYTE *v1;
  int v3;
  Swift::UInt v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *v1;
  switch(*v1)
  {
    case 3:
      v4 = 0;
      goto LABEL_20;
    case 4:
      v4 = 2;
      goto LABEL_20;
    case 5:
      v4 = 3;
      goto LABEL_20;
    case 6:
      v4 = 4;
      goto LABEL_20;
    case 7:
      v4 = 5;
      goto LABEL_20;
    case 8:
      v4 = 6;
      goto LABEL_20;
    case 9:
      v4 = 7;
      goto LABEL_20;
    case 0xA:
      v4 = 8;
      goto LABEL_20;
    case 0xB:
      v4 = 9;
LABEL_20:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      v5 = 1920298854;
      if (v3 != 1)
        v5 = 1702259046;
      if (v3)
        v6 = v5;
      else
        v6 = 0x6565726874;
      if (v3)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
      String.hash(into:)(a1, v6, v7);
      swift_bridgeObjectRelease(v7);
      break;
  }
}

uint64_t sub_FA7D4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_FA810 + 4 * byte_197D3C[a1]))(0xD000000000000015, 0x80000000001A23C0);
}

uint64_t sub_FA810()
{
  return 0x6465776569766572;
}

uint64_t sub_FA828()
{
  return 1684104562;
}

uint64_t sub_FA838()
{
  return 0x64656873696E6966;
}

uint64_t sub_FA850()
{
  return 0x706D615364616572;
}

uint64_t sub_FA86C()
{
  return 0x6573616863727570;
}

uint64_t sub_FA888()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_FA8A0()
{
  return 0x64656C706D6173;
}

unint64_t sub_FA8B8()
{
  return 0xD000000000000011;
}

uint64_t sub_FA8E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF124();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FA908(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF124();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FA930()
{
  unsigned __int8 *v0;

  return sub_FA7D4(*v0);
}

uint64_t sub_FA938@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1019A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FA95C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF09C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FA984(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF09C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FA9AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF1AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FA9D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF1AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FA9FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF278();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FAA24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF278();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FAA4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF388();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FAA74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF388();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FAA9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF1F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FAAC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF1F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FAAEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF2BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FAB14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF2BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FAB3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF234();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FAB64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF234();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FAB8C()
{
  return 0x676E69746172;
}

uint64_t sub_FABA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x676E69746172 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease(0xE600000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x676E69746172, 0xE600000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_FAC2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF300();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FAC54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF300();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FAC7C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF168();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FACA4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF168();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FACCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF0E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FACF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF0E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PositiveAffinitySource.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t result;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char v87;
  char v88;
  char v89[9];
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;

  v3 = sub_5EDC(&qword_1F4FF8);
  v82 = *(_QWORD *)(v3 - 8);
  v83 = v3;
  __chkstk_darwin(v3);
  v81 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F5000);
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  __chkstk_darwin(v5);
  v78 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5EDC(&qword_1F5008);
  v76 = *(_QWORD *)(v7 - 8);
  v77 = v7;
  __chkstk_darwin(v7);
  v75 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5EDC(&qword_1F5010);
  v73 = *(_QWORD *)(v9 - 8);
  v74 = v9;
  __chkstk_darwin(v9);
  v72 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F5018);
  v70 = *(_QWORD *)(v11 - 8);
  v71 = v11;
  __chkstk_darwin(v11);
  v69 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_5EDC(&qword_1F5020);
  v67 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v66 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_5EDC(&qword_1F5028);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v63 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_5EDC(&qword_1F5030);
  v60 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v58 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5EDC(&qword_1F5038);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_5EDC(&qword_1F5040);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_5EDC(&qword_1F5048);
  v84 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin(v86);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *v1;
  v25 = a1;
  v26 = a1[3];
  v27 = v25[4];
  sub_49F4(v25, v26);
  v28 = sub_FF09C();
  v85 = v23;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PositiveAffinitySource.CodingKeys, &type metadata for PositiveAffinitySource.CodingKeys, v28, v26, v27);
  switch(v24)
  {
    case 3:
      v87 = 0;
      v29 = sub_FF388();
      v30 = v85;
      v31 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.IndicatedMoreLikeThisCodingKeys, &v87, v86, &type metadata for PositiveAffinitySource.IndicatedMoreLikeThisCodingKeys, v29);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
      return (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v30, v31);
    case 4:
      v90 = 2;
      v39 = sub_FF2BC();
      v40 = v58;
      v42 = v85;
      v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.ReadCodingKeys, &v90, v86, &type metadata for PositiveAffinitySource.ReadCodingKeys, v39);
      v43 = *(void (**)(char *, uint64_t))(v60 + 8);
      v44 = v40;
      v45 = &v98;
      goto LABEL_6;
    case 5:
      v91 = 3;
      v46 = sub_FF278();
      v47 = v63;
      v42 = v85;
      v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.FinishedCodingKeys, &v91, v86, &type metadata for PositiveAffinitySource.FinishedCodingKeys, v46);
      v43 = *(void (**)(char *, uint64_t))(v64 + 8);
      v44 = v47;
      v45 = &v99;
LABEL_6:
      v48 = *(v45 - 32);
      goto LABEL_14;
    case 6:
      v92 = 4;
      v49 = sub_FF234();
      v50 = v66;
      v42 = v85;
      v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.ReadSampleCodingKeys, &v92, v86, &type metadata for PositiveAffinitySource.ReadSampleCodingKeys, v49);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v50, v68);
      goto LABEL_15;
    case 7:
      v93 = 5;
      v51 = sub_FF1F0();
      v52 = v69;
      v42 = v85;
      v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.PurchasedCodingKeys, &v93, v86, &type metadata for PositiveAffinitySource.PurchasedCodingKeys, v51);
      v53 = v70;
      v48 = v71;
      goto LABEL_13;
    case 8:
      v94 = 6;
      v54 = sub_FF1AC();
      v52 = v72;
      v42 = v85;
      v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.DownloadedViaFamilySharingCodingKeys, &v94, v86, &type metadata for PositiveAffinitySource.DownloadedViaFamilySharingCodingKeys, v54);
      v53 = v73;
      v48 = v74;
      goto LABEL_13;
    case 9:
      v95 = 7;
      v55 = sub_FF168();
      v52 = v75;
      v42 = v85;
      v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.SampledCodingKeys, &v95, v86, &type metadata for PositiveAffinitySource.SampledCodingKeys, v55);
      v53 = v76;
      v48 = v77;
      goto LABEL_13;
    case 10:
      v96 = 8;
      v56 = sub_FF124();
      v52 = v78;
      v42 = v85;
      v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.AddedToWantToReadCodingKeys, &v96, v86, &type metadata for PositiveAffinitySource.AddedToWantToReadCodingKeys, v56);
      v53 = v79;
      v48 = v80;
      goto LABEL_13;
    case 11:
      v97 = 9;
      v57 = sub_FF0E0();
      v52 = v81;
      v42 = v85;
      v41 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.ViewedProductPageCodingKeys, &v97, v86, &type metadata for PositiveAffinitySource.ViewedProductPageCodingKeys, v57);
      v53 = v82;
      v48 = v83;
LABEL_13:
      v43 = *(void (**)(char *, uint64_t))(v53 + 8);
      v44 = v52;
LABEL_14:
      v43(v44, v48);
LABEL_15:
      result = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v42, v41);
      break;
    default:
      v89[0] = 1;
      v33 = sub_FF300();
      v35 = v85;
      v34 = v86;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for PositiveAffinitySource.ReviewedCodingKeys, v89, v86, &type metadata for PositiveAffinitySource.ReviewedCodingKeys, v33);
      v88 = v24;
      v36 = sub_FF344();
      v37 = v61;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v88, v38, v61, &type metadata for PositiveAffinitySource.PositiveStarRating, v36);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v37);
      result = (*(uint64_t (**)(char *, uint64_t))(v84 + 8))(v35, v34);
      break;
  }
  return result;
}

Swift::Int PositiveAffinitySource.hashValue.getter()
{
  char *v0;
  _QWORD v2[9];
  char v3;

  v3 = *v0;
  Hasher.init(_seed:)(v2, 0);
  PositiveAffinitySource.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t PositiveAffinitySource.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[6];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;

  v56 = a2;
  v3 = sub_5EDC(&qword_1F50B0);
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  __chkstk_darwin(v3);
  v61 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F50B8);
  v49 = *(_QWORD *)(v5 - 8);
  v50 = v5;
  __chkstk_darwin(v5);
  v55 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5EDC(&qword_1F50C0);
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  __chkstk_darwin(v7);
  v60 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5EDC(&qword_1F50C8);
  v45 = *(_QWORD *)(v9 - 8);
  v46 = v9;
  __chkstk_darwin(v9);
  v54 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_5EDC(&qword_1F50D0);
  v39 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v53 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_5EDC(&qword_1F50D8);
  v43 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v59 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_5EDC(&qword_1F50E0);
  v40 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v58 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_5EDC(&qword_1F50E8);
  v36[4] = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v57 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5EDC(&qword_1F50F0);
  v36[5] = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5EDC(&qword_1F50F8);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_5EDC(&qword_1F5100);
  v21 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v23 = (char *)v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  v25 = a1[4];
  v63 = a1;
  sub_49F4(a1, v24);
  v26 = sub_FF09C();
  v27 = v64;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PositiveAffinitySource.CodingKeys, &type metadata for PositiveAffinitySource.CodingKeys, v26, v24, v25);
  if (!v27)
  {
    v36[2] = v20;
    v36[0] = v18;
    v36[1] = v17;
    v36[3] = v16;
    v64 = v21;
    v28 = KeyedDecodingContainer.allKeys.getter(v62);
    if (*(_QWORD *)(v28 + 16) == 1)
      __asm { BR              X10 }
    v29 = type metadata accessor for DecodingError(0);
    swift_allocError(v29, &protocol witness table for DecodingError, 0, 0);
    v31 = v30;
    sub_5EDC(&qword_1F2C58);
    *v31 = &type metadata for PositiveAffinitySource;
    v32 = v62;
    v33 = KeyedDecodingContainer.codingPath.getter(v62);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v33, 0xD00000000000002BLL, 0x80000000001A0EA0, 0);
    v34 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for DecodingError.typeMismatch(_:), v29);
    swift_willThrow(v34);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v23, v32);
  }
  return sub_62F8(v63);
}

uint64_t sub_FBE90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return PositiveAffinitySource.init(from:)(a1, a2);
}

uint64_t sub_FBEA4(_QWORD *a1)
{
  return PositiveAffinitySource.encode(to:)(a1);
}

Swift::Int sub_FBEBC(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];
  char v4;

  v4 = *v1;
  Hasher.init(_seed:)(v3, a1);
  PositiveAffinitySource.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void InternalAffinitySource.affinityInfos.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_FBF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v7 = sub_5EDC(&qword_1F12B0);
  v8 = swift_allocObject(v7, 88, 7);
  *(_OWORD *)(v8 + 16) = xmmword_1875E0;
  *(_QWORD *)(v8 + 32) = v0;
  *(_QWORD *)(v8 + 40) = v6;
  *(_QWORD *)(v8 + 48) = v1;
  *(_QWORD *)(v8 + 56) = v2;
  *(_QWORD *)(v8 + 64) = v3;
  *(_QWORD *)(v8 + 72) = v4;
  *(_BYTE *)(v8 + 80) = v5 & 1;
  sub_61C4(v0, v6, v1, v2, v3, v4, v5);
  return v8;
}

void InternalAffinitySource.rawAffinity.getter()
{
  sub_FBFEC();
}

void sub_FBFEC()
{
  __asm { BR              X10 }
}

uint64_t sub_FC03C(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v9 = sub_5EDC(&qword_1F12B0);
  v10 = swift_allocObject(v9, 88, 7);
  *(_OWORD *)(v10 + 16) = xmmword_1875E0;
  *(_QWORD *)(v10 + 32) = v1;
  *(_QWORD *)(v10 + 40) = v2;
  *(_QWORD *)(v10 + 48) = v3;
  *(_QWORD *)(v10 + 56) = v4;
  *(_QWORD *)(v10 + 64) = v5;
  *(_QWORD *)(v10 + 72) = v6;
  *(_BYTE *)(v10 + 80) = v7 & 1;
  sub_61C4(v1, v2, v3, v4, v5, v6, v7);
  a1(v10);
  return swift_bridgeObjectRelease();
}

void ReviewInfo.starRating.getter(_BYTE *a1@<X8>)
{
  double *v1;
  double v2;
  double v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = round((*v1 * 0.5 + 0.5) * 5.0);
  if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v4 = (uint64_t)v3 - 1;
  if (v4 >= 5)
  {
    v5 = sub_C9310();
    v6 = swift_allocError(&type metadata for ReviewInfo.Errors, v5, 0, 0);
    *(double *)v7 = v2;
    *(_BYTE *)(v7 + 8) = 0;
    swift_willThrow(v6);
  }
  else
  {
    *a1 = v4;
  }
}

BOOL static DatedAffinity.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void InternalAffinitySource.hash(into:)()
{
  __asm { BR              X10 }
}

void sub_FC250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;

  Hasher._combine(_:)(0);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v1, v7, v6);
  sub_62E8(v7, v6, v5, v4, v2, v0, v3);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v5;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v4;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v10 = v2;
    else
      v10 = 0;
    Hasher._combine(_:)(v10);
    if ((v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v11 = v0;
    else
      v11 = 0;
    Hasher._combine(_:)(v11);
  }
}

void sub_FC40C()
{
  JUMPOUT(0xFC494);
}

uint64_t sub_FC41C()
{
  uint64_t v0;

  String.hash(into:)(v0, 0x6863727550736177, 0xEC00000064657361);
  return swift_bridgeObjectRelease(0xEC00000064657361);
}

void sub_FC43C()
{
  JUMPOUT(0xFC448);
}

uint64_t sub_FC454()
{
  uint64_t v0;

  String.hash(into:)(v0, 0x6C706D6153736177, 0xEA00000000006465);
  return swift_bridgeObjectRelease(0xEA00000000006465);
}

void sub_FC470()
{
  JUMPOUT(0xFC494);
}

uint64_t sub_FC4C4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_FC4FC + 4 * byte_197D78[*v0]))(0x656B694C7373656CLL, 0xEC00000073696854);
}

uint64_t sub_FC4FC()
{
  return 0x656B694C65726F6DLL;
}

uint64_t sub_FC510()
{
  return 0x776569766572;
}

uint64_t sub_FC524()
{
  return 0x746963696C706D69;
}

uint64_t sub_FC53C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_101D94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FC560(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF410();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FC588(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF410();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FC5B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF454();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FC5D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF454();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FC600(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF520();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FC628(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF520();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FC650(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF4DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FC678(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF4DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_FC6A0()
{
  _BYTE *v0;

  if (*v0)
    return 12639;
  else
    return 12383;
}

uint64_t sub_FC6BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_101F70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FC6E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF498();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FC708(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF498();
  return CodingKey.debugDescription.getter(a1, v2);
}

void InternalAffinitySource.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = sub_5EDC(&qword_1F5110);
  v22 = *(_QWORD *)(v3 - 8);
  v23 = v3;
  __chkstk_darwin(v3);
  v21 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5EDC(&qword_1F5118);
  v19 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v18 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_5EDC(&qword_1F5120);
  v16[1] = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v6 = sub_5EDC(&qword_1F5128);
  v16[0] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v7 = sub_5EDC(&qword_1F5130);
  v8 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  v31 = v8;
  __chkstk_darwin(v7);
  v9 = *v1;
  v28 = v1[1];
  v29 = v9;
  v10 = v1[3];
  v24 = v1[2];
  v25 = v10;
  v11 = v1[5];
  v12 = v1[6];
  v26 = v1[4];
  v27 = v11;
  v14 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v14);
  v15 = sub_FF410();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InternalAffinitySource.CodingKeys, &type metadata for InternalAffinitySource.CodingKeys, v15, v14, v13);
  __asm { BR              X10 }
}

uint64_t sub_FC934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *(_BYTE *)(v4 - 160) = 0;
  v5 = sub_FF520();
  v6 = *(_QWORD *)(v4 - 176);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for InternalAffinitySource.LessLikeThisCodingKeys, v4 - 160, v6, &type metadata for InternalAffinitySource.LessLikeThisCodingKeys, v5);
  v7 = *(_QWORD *)(v4 - 200);
  *(_QWORD *)(v4 - 160) = *(_QWORD *)(v4 - 192);
  *(_QWORD *)(v4 - 152) = v7;
  v8 = *(_QWORD *)(v4 - 224);
  *(_QWORD *)(v4 - 144) = *(_QWORD *)(v4 - 232);
  *(_QWORD *)(v4 - 136) = v8;
  v9 = *(_QWORD *)(v4 - 208);
  *(_QWORD *)(v4 - 128) = *(_QWORD *)(v4 - 216);
  *(_QWORD *)(v4 - 120) = v9;
  *(_BYTE *)(v4 - 112) = v3 & 1;
  v10 = sub_FED90();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v4 - 160, v11, v1, &type metadata for FeatureAffinityInfo, v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 304) + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 168) + 8))(v0, v6);
}

Swift::Int InternalAffinitySource.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _QWORD v5[9];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 8);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  v10 = v1;
  Hasher.init(_seed:)(v5, 0);
  InternalAffinitySource.hash(into:)();
  return Hasher._finalize()();
}

uint64_t InternalAffinitySource.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;

  v34 = a2;
  v3 = sub_5EDC(&qword_1F5160);
  v4 = *(_QWORD *)(v3 - 8);
  v32 = v3;
  v33 = v4;
  __chkstk_darwin(v3);
  v39 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_5EDC(&qword_1F5168);
  v35 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v38 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v37 = sub_5EDC(&qword_1F5170);
  v31 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  *(_QWORD *)&v36 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F5178);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5EDC(&qword_1F5180);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  v40 = a1;
  sub_49F4(a1, v17);
  v18 = sub_FF410();
  v19 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InternalAffinitySource.CodingKeys, &type metadata for InternalAffinitySource.CodingKeys, v18, v17, v16);
  if (!v19)
  {
    v29[3] = v11;
    v29[1] = v9;
    v29[2] = v8;
    v41 = v13;
    v20 = KeyedDecodingContainer.allKeys.getter(v12);
    v21 = v12;
    v22 = v15;
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X10 }
    v23 = type metadata accessor for DecodingError(0);
    swift_allocError(v23, &protocol witness table for DecodingError, 0, 0);
    v25 = v24;
    sub_5EDC(&qword_1F2C58);
    *v25 = &type metadata for InternalAffinitySource;
    v26 = KeyedDecodingContainer.codingPath.getter(v21);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000000001A0EA0, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for DecodingError.typeMismatch(_:), v23);
    swift_willThrow(v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v22, v21);
  }
  return sub_62F8(v40);
}

uint64_t sub_FD4E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return InternalAffinitySource.init(from:)(a1, a2);
}

void sub_FD4FC(_QWORD *a1)
{
  InternalAffinitySource.encode(to:)(a1);
}

Swift::Int sub_FD514(uint64_t a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _QWORD v6[9];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v2 = *((_QWORD *)v1 + 8);
  v3 = v1[1];
  v7 = *v1;
  v8 = v3;
  v4 = v1[3];
  v9 = v1[2];
  v10 = v4;
  v11 = v2;
  Hasher.init(_seed:)(v6, a1);
  InternalAffinitySource.hash(into:)();
  return Hasher._finalize()();
}

uint64_t ReviewInfo.StarRating.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0 + 1;
}

BooksPersonalization::ReviewInfo::StarRating_optional __swiftcall ReviewInfo.StarRating.init(rawValue:)(Swift::Int rawValue)
{
  _BYTE *v1;
  unint64_t v2;

  v2 = 0x40302010005uLL >> (8 * rawValue);
  if ((unint64_t)rawValue >= 6)
    LOBYTE(v2) = 5;
  *v1 = v2;
  return (BooksPersonalization::ReviewInfo::StarRating_optional)rawValue;
}

Swift::Int sub_FD59C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_FD5E0()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_FD60C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

BooksPersonalization::ReviewInfo::StarRating_optional sub_FD64C(Swift::Int *a1)
{
  return ReviewInfo.StarRating.init(rawValue:)(*a1);
}

void sub_FD654(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

double DatedAffinity.secondsSinceReferenceDate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void ReviewInfo.scoreInStars.getter()
{
  char v0;

  ReviewInfo.starRating.getter(&v0);
}

uint64_t ReviewInfo.maxStarCount.getter()
{
  return 5;
}

void DatedAffinity.hash(into:)()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;

  v1 = v0[1];
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v0;
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
}

uint64_t sub_FD6FC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000014;
  else
    return 0x65726F6373;
}

uint64_t sub_FD738@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_102030(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_FD75C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF564();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_FD784(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_FF564();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ReviewInfo.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v4 = sub_5EDC(&qword_1F5188);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_FF564();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ReviewInfo.CodingKeys, &type metadata for ReviewInfo.CodingKeys, v12, v10, v11);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v16, v4, v9);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v15, v4, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int DatedAffinity.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v6, 0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t ReviewInfo.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_5EDC(&qword_1F5198);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_FF564();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ReviewInfo.CodingKeys, &type metadata for ReviewInfo.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
  return sub_62F8(a1);
}

Swift::Int sub_FDA7C(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v7, a1);
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = v2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = v3;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_FDAD8@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return ReviewInfo.init(from:)(a1, a2);
}

uint64_t sub_FDAEC(_QWORD *a1)
{
  return ReviewInfo.encode(to:)(a1);
}

BooksPersonalization::ImplicitFeature_optional __swiftcall ImplicitFeature.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::ImplicitFeature_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA290, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 8;
  if (v5 < 8)
    v7 = v5;
  *v4 = v7;
  return result;
}

_UNKNOWN **static ImplicitFeature.allCases.getter()
{
  return &off_1D6208;
}

uint64_t ImplicitFeature.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_FDB9C + 4 * byte_197D84[*v0]))(0xD000000000000019, 0x800000000019F7D0);
}

uint64_t sub_FDB9C@<X0>(uint64_t a1@<X8>)
{
  return a1 + 11;
}

uint64_t sub_FDBF4()
{
  return 0x6C706D6153736177;
}

unint64_t sub_FDC10()
{
  return 0xD000000000000014;
}

BooksPersonalization::ImplicitFeature_optional sub_FDC38(Swift::String *a1)
{
  return ImplicitFeature.init(rawValue:)(*a1);
}

uint64_t sub_FDC44@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = ImplicitFeature.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_FDC68(_QWORD *a1@<X8>)
{
  *a1 = &off_1D6208;
}

uint64_t sub_FDC78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_102114();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_FDCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_102114();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_FDD20(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_102114();
  return RawRepresentable<>.codingKey.getter(a1, a2, v4);
}

uint64_t sub_FDD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_102114();
  return RawRepresentable<>.init<A>(codingKey:)(a1, a4, a2, a5, v10, a3);
}

void sub_FDDC8(char *a1)
{
  sub_79980(*a1);
}

void sub_FDDD4()
{
  char *v0;

  sub_152734(0, *v0);
}

void sub_FDDE0(uint64_t a1)
{
  char *v1;

  sub_F8D4C(a1, *v1);
}

void sub_FDDE8(uint64_t a1)
{
  char *v1;

  sub_152734(a1, *v1);
}

void sub_FDDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = (_QWORD *)(a2 + 64);
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  if (v5)
  {
    v7 = __clz(__rbit64(v5));
    goto LABEL_16;
  }
  if (v6 > 1)
  {
    v8 = v11[1];
    v9 = 1;
    if (v8)
      goto LABEL_15;
    v9 = 2;
    if (v6 <= 2)
      goto LABEL_17;
    v8 = v11[2];
    if (v8)
    {
LABEL_15:
      v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_16:
      __asm { BR              X8 }
    }
    v10 = 3;
    if (v6 > 3)
    {
      v8 = v11[3];
      if (v8)
      {
        v9 = 3;
        goto LABEL_15;
      }
      while (1)
      {
        v9 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
          JUMPOUT(0xFE0B4);
        }
        if (v9 >= v6)
          break;
        v8 = v11[v9];
        ++v10;
        if (v8)
          goto LABEL_15;
      }
    }
  }
LABEL_17:
  swift_release(a2);
  Hasher._combine(_:)(0);
}

void _s20BooksPersonalization22InternalAffinitySourceO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_FE160()
{
  double v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[6];
  char v34;
  double v35[6];
  char v36;
  uint64_t v37[31];

  if (v6 >> 62)
  {
    v15 = v12;
    v16 = *(_QWORD *)&v4;
    v17 = v10;
    v18 = *(_QWORD *)&v3;
    v19 = *(_QWORD *)&v1;
    v20 = v9;
    v21 = *(_QWORD *)&v0;
    v22 = v8;
    v23 = v6;
    v24 = *(_QWORD *)&v2;
    v25 = *(_QWORD *)&v5;
    sub_61C4(v15, v13, v17, v11, v20, v22, v23);
    sub_61C4(v25, v24, v16, v18, v19, v21, v7);
    sub_8E6B4(v37, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_62E8);
    v14 = 0;
  }
  else
  {
    v35[0] = v5;
    v35[1] = v2;
    v35[2] = v4;
    v35[3] = v3;
    v35[4] = v1;
    v35[5] = v0;
    v36 = v7 & 1;
    v33[0] = v12;
    v33[1] = v13;
    v33[2] = v10;
    v33[3] = v11;
    v33[4] = v9;
    v33[5] = v8;
    v34 = v6 & 1;
    v31 = *(_QWORD *)&v1;
    v32 = *(_QWORD *)&v0;
    v29 = *(_QWORD *)&v3;
    v30 = *(_QWORD *)&v2;
    v28 = *(_QWORD *)&v4;
    v27 = *(_QWORD *)&v5;
    v14 = _s20BooksPersonalization19FeatureAffinityInfoV2eeoiySbAC_ACtFZ_0(v35, (uint64_t)v33);
    sub_61C4(v12, v13, v10, v11, v9, v8, v6);
    sub_61C4(v27, v30, v28, v29, v31, v32, v7);
    sub_8E6B4(v37, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_62E8);
  }
  return v14 & 1;
}

uint64_t _s20BooksPersonalization22PositiveAffinitySourceO2eeoiySbAC_ACtFZ_0(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v2 = *a2;
  switch(*a1)
  {
    case 3:
      if (v2 != 3)
        goto LABEL_23;
      goto LABEL_9;
    case 4:
      if (v2 == 4)
        goto LABEL_9;
      goto LABEL_23;
    case 5:
      if (v2 != 5)
        goto LABEL_23;
      goto LABEL_9;
    case 6:
      if (v2 != 6)
        goto LABEL_23;
      goto LABEL_9;
    case 7:
      if (v2 != 7)
        goto LABEL_23;
      goto LABEL_9;
    case 8:
      if (v2 != 8)
        goto LABEL_23;
      goto LABEL_9;
    case 9:
      if (v2 != 9)
        goto LABEL_23;
      goto LABEL_9;
    case 0xA:
      if (v2 != 10)
        goto LABEL_23;
      goto LABEL_9;
    case 0xB:
      if (v2 != 11)
        goto LABEL_23;
LABEL_9:
      result = 1;
      break;
    default:
      if ((v2 - 3) < 9)
      {
LABEL_23:
        result = 0;
      }
      else
      {
        if (*a1)
        {
          v3 = 0xE400000000000000;
          if (*a1 == 1)
            v4 = 1920298854;
          else
            v4 = 1702259046;
        }
        else
        {
          v3 = 0xE500000000000000;
          v4 = 0x6565726874;
        }
        v6 = 1920298854;
        if (v2 != 1)
          v6 = 1702259046;
        if (*a2)
          v7 = v6;
        else
          v7 = 0x6565726874;
        if (*a2)
          v8 = 0xE400000000000000;
        else
          v8 = 0xE500000000000000;
        if (v4 == v7 && v3 == v8)
        {
          swift_bridgeObjectRelease_n(v3, 2);
          result = 1;
        }
        else
        {
          v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v3, v7, v8, 0);
          swift_bridgeObjectRelease(v3);
          swift_bridgeObjectRelease(v8);
          result = v9 & 1;
        }
      }
      break;
  }
  return result;
}

BOOL _s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int128 v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  __int128 v52;
  int v53;
  _BYTE __dst[384];
  _BYTE __src[384];
  _BYTE v56[137];
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[384];
  _BYTE v82[392];

  v4 = *a1;
  v50 = *((_BYTE *)a1 + 8);
  v52 = *((_OWORD *)a1 + 1);
  v49 = a1[4];
  v48 = *((_BYTE *)a1 + 40);
  v47 = a1[6];
  v46 = *((_BYTE *)a1 + 56);
  v45 = a1[8];
  v44 = *((_BYTE *)a1 + 72);
  v35 = a1[10];
  v36 = *(_OWORD *)(a1 + 11);
  v37 = a1[13];
  v38 = a1[14];
  v39 = a1[15];
  v40 = a1[17];
  v41 = a1[16];
  v34 = a1[18];
  sub_8E32C((uint64_t)(a1 + 19), (uint64_t)v81);
  v26 = a1[67];
  v25 = *((unsigned __int8 *)a1 + 544);
  v5 = *a2;
  v6 = *((_BYTE *)a2 + 8);
  v43 = *((_OWORD *)a2 + 1);
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  v9 = a2[6];
  v10 = *((_BYTE *)a2 + 56);
  v11 = a2[8];
  v12 = *((_BYTE *)a2 + 72);
  v28 = a2[10];
  v29 = *(_OWORD *)(a2 + 11);
  v30 = a2[13];
  v31 = a2[14];
  v32 = a2[15];
  v42 = a2[16];
  v33 = a2[17];
  v27 = a2[18];
  sub_8E32C((uint64_t)(a2 + 19), (uint64_t)v82);
  if (v4 != v5)
    return 0;
  v13 = a2[67];
  v14 = *((unsigned __int8 *)a2 + 544);
  LOBYTE(v65) = v50;
  v66 = v52;
  v67 = v49;
  LOBYTE(v68) = v48;
  v69 = v47;
  LOBYTE(v70) = v46;
  v71 = v45;
  LOBYTE(v72) = v44;
  LOBYTE(v57) = v6;
  v58 = v43;
  v59 = v7;
  LOBYTE(v60) = v8;
  v61 = v9;
  LOBYTE(v62) = v10;
  v63 = v11;
  LOBYTE(v64) = v12;
  if (!_s20BooksPersonalization4BookV8MetadataV2eeoiySbAE_AEtFZ_0((uint64_t)&v65, (uint64_t)&v57))
    return 0;
  if (v41 >> 1 == 0xFFFFFFFF)
  {
    v53 = v14;
    v15 = v42;
    v17 = v39;
    v16 = v40;
    v19 = v37;
    v18 = v38;
    v20 = *((_QWORD *)&v36 + 1);
    v21 = v36;
    v22 = v35;
    if (v42 >> 1 == 0xFFFFFFFF)
      goto LABEL_11;
LABEL_8:
    v65 = v22;
    *(_QWORD *)&v66 = v21;
    *((_QWORD *)&v66 + 1) = v20;
    v67 = v19;
    v68 = v18;
    v69 = v17;
    v70 = v41;
    v71 = v16;
    v72 = v34;
    v73 = v28;
    v74 = v29;
    v75 = v30;
    v76 = v31;
    v77 = v32;
    v78 = v15;
    v79 = v33;
    v80 = v27;
    sub_61A8(v28, v29, *((uint64_t *)&v29 + 1), v30, v31, v32, v15);
    sub_8E6B4(&v65, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_62CC);
    return 0;
  }
  v22 = v35;
  v21 = v36;
  v65 = v35;
  v66 = v36;
  v20 = *((_QWORD *)&v36 + 1);
  v19 = v37;
  v67 = v37;
  v18 = v38;
  v17 = v39;
  v68 = v38;
  v69 = v39;
  v70 = v41;
  v16 = v40;
  v71 = v40;
  v72 = v34;
  if (v42 >> 1 == 0xFFFFFFFF)
  {
    sub_61C4(v35, v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v41);
    sub_61C4(v35, v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v41);
    sub_62E8(v35, v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v41);
    v15 = v42;
    goto LABEL_8;
  }
  v53 = v14;
  v57 = v28;
  v58 = v29;
  v59 = v30;
  v60 = v31;
  v61 = v32;
  v62 = v42;
  v63 = v33;
  v64 = v27;
  sub_61A8(v35, v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v41);
  sub_61C4(v35, v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v41);
  _s20BooksPersonalization22InternalAffinitySourceO2eeoiySbAC_ACtFZ_0((uint64_t)&v65);
  v51 = v24;
  sub_62E8(v65, v66, *((uint64_t *)&v66 + 1), v67, v68, v69, v70);
  sub_62CC(v35, v36, *((uint64_t *)&v36 + 1), v37, v38, v39, v41);
  if ((v51 & 1) == 0)
    return 0;
LABEL_11:
  sub_8E32C((uint64_t)v81, (uint64_t)&v65);
  if (sub_8E6A0((uint64_t)&v65) == 1)
  {
    sub_8E32C((uint64_t)v82, (uint64_t)&v57);
    if (sub_8E6A0((uint64_t)&v57) != 1)
      return 0;
  }
  else
  {
    sub_8E32C((uint64_t)v81, (uint64_t)v56);
    sub_8E32C((uint64_t)v82, (uint64_t)&v57);
    if (sub_8E6A0((uint64_t)&v57) == 1)
      return 0;
    sub_8E32C((uint64_t)v82, (uint64_t)__src);
    memcpy(__dst, __src, 0x179uLL);
    if (!_s20BooksPersonalization11BookHistoryV2eeoiySbAC_ACtFZ_0((uint64_t)v56, (uint64_t)__dst))
      return 0;
  }
  if ((sub_88934(v26, v13) & 1) == 0)
    return 0;
  if (v25 != 12)
  {
    LOBYTE(v57) = v25;
    if (v53 != 12)
    {
      v56[0] = v53;
      if ((_s20BooksPersonalization22PositiveAffinitySourceO2eeoiySbAC_ACtFZ_0(&v57, v56) & 1) != 0)
        return 1;
    }
    return 0;
  }
  return v53 == 12;
}

_OWORD *sub_FEB5C(uint64_t a1)
{
  _OWORD *result;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = 254;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_BYTE *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  result = (_OWORD *)(a1 + 88);
  result[11] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[14] = 0u;
  result[15] = 0u;
  result[16] = 0u;
  result[17] = 0u;
  return result;
}

unint64_t sub_FEBB8()
{
  unint64_t result;

  result = qword_1F4F58;
  if (!qword_1F4F58)
  {
    result = swift_getWitnessTable(&unk_19958C, &type metadata for SeedBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F4F58);
  }
  return result;
}

unint64_t sub_FEBFC()
{
  unint64_t result;

  result = qword_1F4F60;
  if (!qword_1F4F60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Metadata, &type metadata for Book.Metadata);
    atomic_store(result, (unint64_t *)&qword_1F4F60);
  }
  return result;
}

unint64_t sub_FEC40()
{
  unint64_t result;

  result = qword_1F4F68;
  if (!qword_1F4F68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InternalAffinitySource, &type metadata for InternalAffinitySource);
    atomic_store(result, (unint64_t *)&qword_1F4F68);
  }
  return result;
}

unint64_t sub_FEC84()
{
  unint64_t result;

  result = qword_1F4F70;
  if (!qword_1F4F70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory, &type metadata for BookHistory);
    atomic_store(result, (unint64_t *)&qword_1F4F70);
  }
  return result;
}

unint64_t sub_FECC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F4F80;
  if (!qword_1F4F80)
  {
    v1 = sub_5F68(&qword_1F4F78);
    sub_FED4C();
    sub_FEFAC(&qword_1F4F90, (void (*)(void))sub_FED90, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1F4F80);
  }
  return result;
}

unint64_t sub_FED4C()
{
  unint64_t result;

  result = qword_1F4F88;
  if (!qword_1F4F88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImplicitFeature, &type metadata for ImplicitFeature);
    atomic_store(result, (unint64_t *)&qword_1F4F88);
  }
  return result;
}

unint64_t sub_FED90()
{
  unint64_t result;

  result = qword_1F4FA0;
  if (!qword_1F4FA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FeatureAffinityInfo, &type metadata for FeatureAffinityInfo);
    atomic_store(result, (unint64_t *)&qword_1F4FA0);
  }
  return result;
}

unint64_t sub_FEDD4()
{
  unint64_t result;

  result = qword_1F4FA8;
  if (!qword_1F4FA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PositiveAffinitySource, &type metadata for PositiveAffinitySource);
    atomic_store(result, (unint64_t *)&qword_1F4FA8);
  }
  return result;
}

unint64_t sub_FEE18()
{
  unint64_t result;

  result = qword_1F4FB8;
  if (!qword_1F4FB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Metadata, &type metadata for Book.Metadata);
    atomic_store(result, (unint64_t *)&qword_1F4FB8);
  }
  return result;
}

unint64_t sub_FEE5C()
{
  unint64_t result;

  result = qword_1F4FC0;
  if (!qword_1F4FC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InternalAffinitySource, &type metadata for InternalAffinitySource);
    atomic_store(result, (unint64_t *)&qword_1F4FC0);
  }
  return result;
}

unint64_t sub_FEEA0()
{
  unint64_t result;

  result = qword_1F4FC8;
  if (!qword_1F4FC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory, &type metadata for BookHistory);
    atomic_store(result, (unint64_t *)&qword_1F4FC8);
  }
  return result;
}

unint64_t sub_FEEE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F4FD0;
  if (!qword_1F4FD0)
  {
    v1 = sub_5F68(&qword_1F4F78);
    sub_FEF68();
    sub_FEFAC(&qword_1F4FE0, (void (*)(void))sub_FF014, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1F4FD0);
  }
  return result;
}

unint64_t sub_FEF68()
{
  unint64_t result;

  result = qword_1F4FD8;
  if (!qword_1F4FD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImplicitFeature, &type metadata for ImplicitFeature);
    atomic_store(result, (unint64_t *)&qword_1F4FD8);
  }
  return result;
}

uint64_t sub_FEFAC(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_5F68(&qword_1F4F98);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_FF014()
{
  unint64_t result;

  result = qword_1F4FE8;
  if (!qword_1F4FE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FeatureAffinityInfo, &type metadata for FeatureAffinityInfo);
    atomic_store(result, (unint64_t *)&qword_1F4FE8);
  }
  return result;
}

unint64_t sub_FF058()
{
  unint64_t result;

  result = qword_1F4FF0;
  if (!qword_1F4FF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PositiveAffinitySource, &type metadata for PositiveAffinitySource);
    atomic_store(result, (unint64_t *)&qword_1F4FF0);
  }
  return result;
}

unint64_t sub_FF09C()
{
  unint64_t result;

  result = qword_1F5050;
  if (!qword_1F5050)
  {
    result = swift_getWitnessTable(&unk_19953C, &type metadata for PositiveAffinitySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5050);
  }
  return result;
}

unint64_t sub_FF0E0()
{
  unint64_t result;

  result = qword_1F5058;
  if (!qword_1F5058)
  {
    result = swift_getWitnessTable(&unk_1994EC, &type metadata for PositiveAffinitySource.ViewedProductPageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5058);
  }
  return result;
}

unint64_t sub_FF124()
{
  unint64_t result;

  result = qword_1F5060;
  if (!qword_1F5060)
  {
    result = swift_getWitnessTable(&unk_19949C, &type metadata for PositiveAffinitySource.AddedToWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5060);
  }
  return result;
}

unint64_t sub_FF168()
{
  unint64_t result;

  result = qword_1F5068;
  if (!qword_1F5068)
  {
    result = swift_getWitnessTable(&unk_19944C, &type metadata for PositiveAffinitySource.SampledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5068);
  }
  return result;
}

unint64_t sub_FF1AC()
{
  unint64_t result;

  result = qword_1F5070;
  if (!qword_1F5070)
  {
    result = swift_getWitnessTable(&unk_1993FC, &type metadata for PositiveAffinitySource.DownloadedViaFamilySharingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5070);
  }
  return result;
}

unint64_t sub_FF1F0()
{
  unint64_t result;

  result = qword_1F5078;
  if (!qword_1F5078)
  {
    result = swift_getWitnessTable(&unk_1993AC, &type metadata for PositiveAffinitySource.PurchasedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5078);
  }
  return result;
}

unint64_t sub_FF234()
{
  unint64_t result;

  result = qword_1F5080;
  if (!qword_1F5080)
  {
    result = swift_getWitnessTable(&unk_19935C, &type metadata for PositiveAffinitySource.ReadSampleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5080);
  }
  return result;
}

unint64_t sub_FF278()
{
  unint64_t result;

  result = qword_1F5088;
  if (!qword_1F5088)
  {
    result = swift_getWitnessTable(&unk_19930C, &type metadata for PositiveAffinitySource.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5088);
  }
  return result;
}

unint64_t sub_FF2BC()
{
  unint64_t result;

  result = qword_1F5090;
  if (!qword_1F5090)
  {
    result = swift_getWitnessTable(&unk_1992BC, &type metadata for PositiveAffinitySource.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5090);
  }
  return result;
}

unint64_t sub_FF300()
{
  unint64_t result;

  result = qword_1F5098;
  if (!qword_1F5098)
  {
    result = swift_getWitnessTable(&unk_19926C, &type metadata for PositiveAffinitySource.ReviewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5098);
  }
  return result;
}

unint64_t sub_FF344()
{
  unint64_t result;

  result = qword_1F50A0;
  if (!qword_1F50A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PositiveAffinitySource.PositiveStarRating, &type metadata for PositiveAffinitySource.PositiveStarRating);
    atomic_store(result, (unint64_t *)&qword_1F50A0);
  }
  return result;
}

unint64_t sub_FF388()
{
  unint64_t result;

  result = qword_1F50A8;
  if (!qword_1F50A8)
  {
    result = swift_getWitnessTable(&unk_19921C, &type metadata for PositiveAffinitySource.IndicatedMoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F50A8);
  }
  return result;
}

unint64_t sub_FF3CC()
{
  unint64_t result;

  result = qword_1F5108;
  if (!qword_1F5108)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PositiveAffinitySource.PositiveStarRating, &type metadata for PositiveAffinitySource.PositiveStarRating);
    atomic_store(result, (unint64_t *)&qword_1F5108);
  }
  return result;
}

unint64_t sub_FF410()
{
  unint64_t result;

  result = qword_1F5138;
  if (!qword_1F5138)
  {
    result = swift_getWitnessTable(&unk_1991CC, &type metadata for InternalAffinitySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5138);
  }
  return result;
}

unint64_t sub_FF454()
{
  unint64_t result;

  result = qword_1F5140;
  if (!qword_1F5140)
  {
    result = swift_getWitnessTable(&unk_19917C, &type metadata for InternalAffinitySource.ImplicitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5140);
  }
  return result;
}

unint64_t sub_FF498()
{
  unint64_t result;

  result = qword_1F5148;
  if (!qword_1F5148)
  {
    result = swift_getWitnessTable(&unk_19912C, &type metadata for InternalAffinitySource.ReviewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5148);
  }
  return result;
}

unint64_t sub_FF4DC()
{
  unint64_t result;

  result = qword_1F5150;
  if (!qword_1F5150)
  {
    result = swift_getWitnessTable(&unk_1990DC, &type metadata for InternalAffinitySource.MoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5150);
  }
  return result;
}

unint64_t sub_FF520()
{
  unint64_t result;

  result = qword_1F5158;
  if (!qword_1F5158)
  {
    result = swift_getWitnessTable(&unk_19908C, &type metadata for InternalAffinitySource.LessLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5158);
  }
  return result;
}

unint64_t sub_FF564()
{
  unint64_t result;

  result = qword_1F5190;
  if (!qword_1F5190)
  {
    result = swift_getWitnessTable(&unk_19903C, &type metadata for ReviewInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5190);
  }
  return result;
}

unint64_t sub_FF5AC()
{
  unint64_t result;

  result = qword_1F51A0;
  if (!qword_1F51A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeedBook, &type metadata for SeedBook);
    atomic_store(result, (unint64_t *)&qword_1F51A0);
  }
  return result;
}

unint64_t sub_FF5F4()
{
  unint64_t result;

  result = qword_1F51A8;
  if (!qword_1F51A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PositiveAffinitySource.PositiveStarRating, &type metadata for PositiveAffinitySource.PositiveStarRating);
    atomic_store(result, (unint64_t *)&qword_1F51A8);
  }
  return result;
}

unint64_t sub_FF63C()
{
  unint64_t result;

  result = qword_1F51B0;
  if (!qword_1F51B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PositiveAffinitySource, &type metadata for PositiveAffinitySource);
    atomic_store(result, (unint64_t *)&qword_1F51B0);
  }
  return result;
}

unint64_t sub_FF684()
{
  unint64_t result;

  result = qword_1F51B8;
  if (!qword_1F51B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InternalAffinitySource, &type metadata for InternalAffinitySource);
    atomic_store(result, (unint64_t *)&qword_1F51B8);
  }
  return result;
}

unint64_t sub_FF6CC()
{
  unint64_t result;

  result = qword_1F51C0;
  if (!qword_1F51C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReviewInfo.StarRating, &type metadata for ReviewInfo.StarRating);
    atomic_store(result, (unint64_t *)&qword_1F51C0);
  }
  return result;
}

unint64_t sub_FF714()
{
  unint64_t result;

  result = qword_1F51C8;
  if (!qword_1F51C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReviewInfo, &type metadata for ReviewInfo);
    atomic_store(result, (unint64_t *)&qword_1F51C8);
  }
  return result;
}

unint64_t sub_FF75C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F51D0;
  if (!qword_1F51D0)
  {
    v1 = sub_5F68(&qword_1F51D8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F51D0);
  }
  return result;
}

unint64_t sub_FF7AC()
{
  unint64_t result;

  result = qword_1F51E0;
  if (!qword_1F51E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImplicitFeature, &type metadata for ImplicitFeature);
    atomic_store(result, (unint64_t *)&qword_1F51E0);
  }
  return result;
}

unint64_t sub_FF7F4()
{
  unint64_t result;

  result = qword_1F51E8;
  if (!qword_1F51E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImplicitFeature, &type metadata for ImplicitFeature);
    atomic_store(result, (unint64_t *)&qword_1F51E8);
  }
  return result;
}

uint64_t destroy for SeedBook(uint64_t *a1)
{
  unint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = a1[16];
  if (v2 >> 1 != 0xFFFFFFFF)
    sub_62E8(a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SeedBook(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v7 >> 1 == 0xFFFFFFFF)
  {
    v8 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v8;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    v9 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v9;
  }
  else
  {
    v10 = *(_QWORD *)(a2 + 80);
    v11 = *(_QWORD *)(a2 + 88);
    v12 = *(_QWORD *)(a2 + 96);
    v13 = *(_QWORD *)(a2 + 104);
    v14 = *(_QWORD *)(a2 + 112);
    v15 = *(_QWORD *)(a2 + 120);
    v16 = *(_QWORD *)(a2 + 136);
    v19 = *(_QWORD *)(a2 + 144);
    sub_61C4(v10, v11, v12, v13, v14, v15, v7);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(a1 + 88) = v11;
    *(_QWORD *)(a1 + 96) = v12;
    *(_QWORD *)(a1 + 104) = v13;
    *(_QWORD *)(a1 + 112) = v14;
    *(_QWORD *)(a1 + 120) = v15;
    *(_QWORD *)(a1 + 128) = v7;
    *(_QWORD *)(a1 + 136) = v16;
    *(_QWORD *)(a1 + 144) = v19;
  }
  memcpy((void *)(a1 + 152), (const void *)(a2 + 152), 0x179uLL);
  v17 = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 536) = v17;
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t assignWithCopy for SeedBook(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v8;
  v9 = (_OWORD *)(a1 + 80);
  v10 = (_OWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 128);
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
  if (*(_QWORD *)(a1 + 128) >> 1 == 0xFFFFFFFFLL)
  {
    if (v12 == 0x1FFFFFFFELL)
    {
      *v9 = *v10;
      v13 = *(_OWORD *)(a2 + 96);
      v14 = *(_OWORD *)(a2 + 112);
      v15 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v14;
      *(_OWORD *)(a1 + 128) = v15;
      *(_OWORD *)(a1 + 96) = v13;
    }
    else
    {
      v19 = *(_QWORD *)(a2 + 80);
      v20 = *(_QWORD *)(a2 + 88);
      v21 = *(_QWORD *)(a2 + 96);
      v22 = *(_QWORD *)(a2 + 104);
      v23 = *(_QWORD *)(a2 + 112);
      v24 = *(_QWORD *)(a2 + 120);
      v25 = *(_QWORD *)(a2 + 136);
      v42 = *(_QWORD *)(a2 + 144);
      sub_61C4(v19, v20, v21, v22, v23, v24, v11);
      *(_QWORD *)(a1 + 80) = v19;
      *(_QWORD *)(a1 + 88) = v20;
      *(_QWORD *)(a1 + 96) = v21;
      *(_QWORD *)(a1 + 104) = v22;
      *(_QWORD *)(a1 + 112) = v23;
      *(_QWORD *)(a1 + 120) = v24;
      *(_QWORD *)(a1 + 128) = v11;
      *(_QWORD *)(a1 + 136) = v25;
      *(_QWORD *)(a1 + 144) = v42;
    }
  }
  else if (v12 == 0x1FFFFFFFELL)
  {
    sub_FFC14(a1 + 80);
    *v9 = *v10;
    v17 = *(_OWORD *)(a2 + 112);
    v16 = *(_OWORD *)(a2 + 128);
    v18 = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 128) = v16;
    *(_OWORD *)(a1 + 96) = v18;
  }
  else
  {
    v26 = *(_QWORD *)(a2 + 80);
    v27 = *(_QWORD *)(a2 + 88);
    v28 = *(_QWORD *)(a2 + 96);
    v29 = *(_QWORD *)(a2 + 104);
    v30 = *(_QWORD *)(a2 + 112);
    v31 = *(_QWORD *)(a2 + 120);
    v32 = *(_QWORD *)(a2 + 136);
    v43 = *(_QWORD *)(a2 + 144);
    sub_61C4(v26, v27, v28, v29, v30, v31, v11);
    v33 = *(_QWORD *)(a1 + 80);
    v34 = *(_QWORD *)(a1 + 88);
    v35 = *(_QWORD *)(a1 + 96);
    v36 = *(_QWORD *)(a1 + 104);
    v37 = *(_QWORD *)(a1 + 112);
    v38 = *(_QWORD *)(a1 + 120);
    v39 = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 80) = v26;
    *(_QWORD *)(a1 + 88) = v27;
    *(_QWORD *)(a1 + 96) = v28;
    *(_QWORD *)(a1 + 104) = v29;
    *(_QWORD *)(a1 + 112) = v30;
    *(_QWORD *)(a1 + 120) = v31;
    *(_QWORD *)(a1 + 128) = v11;
    *(_QWORD *)(a1 + 136) = v32;
    *(_QWORD *)(a1 + 144) = v43;
    sub_62E8(v33, v34, v35, v36, v37, v38, v39);
  }
  memcpy((void *)(a1 + 152), (const void *)(a2 + 152), 0x179uLL);
  v40 = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 536) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  return a1;
}

uint64_t sub_FFC14(uint64_t a1)
{
  destroy for InternalAffinitySource(a1);
  return a1;
}

uint64_t assignWithTake for SeedBook(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a1 + 128);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    v5 = *(_QWORD *)(a2 + 128);
    if (v5 >> 1 != 0xFFFFFFFF)
    {
      v8 = *(_QWORD *)(a1 + 80);
      v9 = *(_QWORD *)(a1 + 88);
      v10 = *(_QWORD *)(a1 + 96);
      v11 = *(_QWORD *)(a1 + 104);
      v12 = *(_QWORD *)(a1 + 112);
      v13 = *(_QWORD *)(a1 + 120);
      v14 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v14;
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = v5;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      sub_62E8(v8, v9, v10, v11, v12, v13, v4);
      goto LABEL_6;
    }
    sub_FFC14(a1 + 80);
  }
  v6 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
LABEL_6:
  memcpy((void *)(a1 + 152), (const void *)(a2 + 152), 0x179uLL);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  return a1;
}

uint64_t getEnumTagSinglePayload for SeedBook(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 545))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SeedBook(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 536) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_BYTE *)(result + 544) = 0;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 545) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 545) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SeedBook()
{
  return &type metadata for SeedBook;
}

uint64_t getEnumTagSinglePayload for PositiveAffinitySource(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
  {
    v6 = *a1;
    if (v6 >= 3)
      v7 = v6 - 2;
    else
      v7 = 0;
    if (v7 >= 0xA)
      return v7 - 9;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 11;
    if (a2 + 11 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_FFEF8 + 4 * byte_197D99[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for PositiveAffinitySource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 11;
  if (a3 + 11 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF5)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_FFFA4 + 4 * byte_197DA3[v5]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_FFFD8 + 4 * byte_197D9E[v5]))();
}

uint64_t sub_FFFD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_FFFE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xFFFE8);
  return result;
}

uint64_t sub_FFFF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xFFFFCLL);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_100000(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100008(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource()
{
  return &type metadata for PositiveAffinitySource;
}

uint64_t storeEnumTagSinglePayload for PositiveAffinitySource.PositiveStarRating(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100070 + 4 * byte_197DAD[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000A4 + 4 * byte_197DA8[v4]))();
}

uint64_t sub_1000A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000B4);
  return result;
}

uint64_t sub_1000C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.PositiveStarRating()
{
  return &type metadata for PositiveAffinitySource.PositiveStarRating;
}

uint64_t destroy for InternalAffinitySource(uint64_t a1)
{
  return sub_62E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t *initializeWithCopy for InternalAffinitySource(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  sub_61C4(*a2, v4, v5, v6, v7, v8, v9);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  return a1;
}

uint64_t *assignWithCopy for InternalAffinitySource(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  sub_61C4(*a2, v4, v5, v6, v7, v8, v9);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  sub_62E8(v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t *assignWithTake for InternalAffinitySource(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v12;
  a1[8] = v3;
  sub_62E8(v4, v6, v5, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalAffinitySource(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for InternalAffinitySource(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 48) = 2 * -a2;
      return result;
    }
    *(_BYTE *)(a1 + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_100388(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) >> 62;
}

uint64_t sub_100394(uint64_t result)
{
  *(_QWORD *)(result + 48) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1003A4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(result + 48) & 1 | (a2 << 62);
  return result;
}

ValueMetadata *type metadata accessor for InternalAffinitySource()
{
  return &type metadata for InternalAffinitySource;
}

uint64_t getEnumTagSinglePayload for DatedAffinity(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DatedAffinity(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ReviewInfo()
{
  return &type metadata for ReviewInfo;
}

uint64_t storeEnumTagSinglePayload for ReviewInfo.StarRating(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10046C + 4 * byte_197DB7[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1004A0 + 4 * byte_197DB2[v4]))();
}

uint64_t sub_1004A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1004B0);
  return result;
}

uint64_t sub_1004BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1004C4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1004C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ReviewInfo.StarRating()
{
  return &type metadata for ReviewInfo.StarRating;
}

uint64_t storeEnumTagSinglePayload for ImplicitFeature(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100538 + 4 * byte_197DC1[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10056C + 4 * byte_197DBC[v4]))();
}

uint64_t sub_10056C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100574(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10057CLL);
  return result;
}

uint64_t sub_100588(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100590);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100594(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ImplicitFeature()
{
  return &type metadata for ImplicitFeature;
}

ValueMetadata *type metadata accessor for ReviewInfo.CodingKeys()
{
  return &type metadata for ReviewInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for InternalAffinitySource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100618 + 4 * byte_197DCB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10064C + 4 * byte_197DC6[v4]))();
}

uint64_t sub_10064C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100654(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10065CLL);
  return result;
}

uint64_t sub_100668(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100670);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100674(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10067C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalAffinitySource.CodingKeys()
{
  return &type metadata for InternalAffinitySource.CodingKeys;
}

ValueMetadata *type metadata accessor for InternalAffinitySource.LessLikeThisCodingKeys()
{
  return &type metadata for InternalAffinitySource.LessLikeThisCodingKeys;
}

ValueMetadata *type metadata accessor for InternalAffinitySource.MoreLikeThisCodingKeys()
{
  return &type metadata for InternalAffinitySource.MoreLikeThisCodingKeys;
}

ValueMetadata *type metadata accessor for InternalAffinitySource.ReviewCodingKeys()
{
  return &type metadata for InternalAffinitySource.ReviewCodingKeys;
}

uint64_t _s20BooksPersonalization10ReviewInfoV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100718 + 4 * byte_197DD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10074C + 4 * byte_197DD0[v4]))();
}

uint64_t sub_10074C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10075CLL);
  return result;
}

uint64_t sub_100768(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100770);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100774(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10077C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InternalAffinitySource.ImplicitCodingKeys()
{
  return &type metadata for InternalAffinitySource.ImplicitCodingKeys;
}

uint64_t storeEnumTagSinglePayload for PositiveAffinitySource.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1007E4 + 4 * byte_197DDF[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100818 + 4 * byte_197DDA[v4]))();
}

uint64_t sub_100818(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100828);
  return result;
}

uint64_t sub_100834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10083CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100840(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100848(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.CodingKeys()
{
  return &type metadata for PositiveAffinitySource.CodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.IndicatedMoreLikeThisCodingKeys()
{
  return &type metadata for PositiveAffinitySource.IndicatedMoreLikeThisCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.ReviewedCodingKeys()
{
  return &type metadata for PositiveAffinitySource.ReviewedCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.ReadCodingKeys()
{
  return &type metadata for PositiveAffinitySource.ReadCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.FinishedCodingKeys()
{
  return &type metadata for PositiveAffinitySource.FinishedCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.ReadSampleCodingKeys()
{
  return &type metadata for PositiveAffinitySource.ReadSampleCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.PurchasedCodingKeys()
{
  return &type metadata for PositiveAffinitySource.PurchasedCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.DownloadedViaFamilySharingCodingKeys()
{
  return &type metadata for PositiveAffinitySource.DownloadedViaFamilySharingCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.SampledCodingKeys()
{
  return &type metadata for PositiveAffinitySource.SampledCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.AddedToWantToReadCodingKeys()
{
  return &type metadata for PositiveAffinitySource.AddedToWantToReadCodingKeys;
}

ValueMetadata *type metadata accessor for PositiveAffinitySource.ViewedProductPageCodingKeys()
{
  return &type metadata for PositiveAffinitySource.ViewedProductPageCodingKeys;
}

uint64_t storeEnumTagSinglePayload for SeedBook.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100950 + 4 * byte_197DE9[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100984 + 4 * byte_197DE4[v4]))();
}

uint64_t sub_100984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10098C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100994);
  return result;
}

uint64_t sub_1009A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1009A8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1009AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1009B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeedBook.CodingKeys()
{
  return &type metadata for SeedBook.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Book.Content(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Book.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100A5C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ReviewInfo.Errors()
{
  return &type metadata for ReviewInfo.Errors;
}

unint64_t sub_100A7C()
{
  unint64_t result;

  result = qword_1F51F0;
  if (!qword_1F51F0)
  {
    result = swift_getWitnessTable(&unk_198784, &type metadata for SeedBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F51F0);
  }
  return result;
}

unint64_t sub_100AC4()
{
  unint64_t result;

  result = qword_1F51F8;
  if (!qword_1F51F8)
  {
    result = swift_getWitnessTable(&unk_198ABC, &type metadata for PositiveAffinitySource.ReviewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F51F8);
  }
  return result;
}

unint64_t sub_100B0C()
{
  unint64_t result;

  result = qword_1F5200;
  if (!qword_1F5200)
  {
    result = swift_getWitnessTable(&unk_198BC4, &type metadata for PositiveAffinitySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5200);
  }
  return result;
}

unint64_t sub_100B54()
{
  unint64_t result;

  result = qword_1F5208;
  if (!qword_1F5208)
  {
    result = swift_getWitnessTable(&unk_198C7C, &type metadata for InternalAffinitySource.ImplicitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5208);
  }
  return result;
}

unint64_t sub_100B9C()
{
  unint64_t result;

  result = qword_1F5210;
  if (!qword_1F5210)
  {
    result = swift_getWitnessTable(&unk_198D34, &type metadata for InternalAffinitySource.ReviewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5210);
  }
  return result;
}

unint64_t sub_100BE4()
{
  unint64_t result;

  result = qword_1F5218;
  if (!qword_1F5218)
  {
    result = swift_getWitnessTable(&unk_198DEC, &type metadata for InternalAffinitySource.MoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5218);
  }
  return result;
}

unint64_t sub_100C2C()
{
  unint64_t result;

  result = qword_1F5220;
  if (!qword_1F5220)
  {
    result = swift_getWitnessTable(&unk_198EA4, &type metadata for InternalAffinitySource.LessLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5220);
  }
  return result;
}

unint64_t sub_100C74()
{
  unint64_t result;

  result = qword_1F5228;
  if (!qword_1F5228)
  {
    result = swift_getWitnessTable(&unk_198F5C, &type metadata for InternalAffinitySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5228);
  }
  return result;
}

unint64_t sub_100CBC()
{
  unint64_t result;

  result = qword_1F5230;
  if (!qword_1F5230)
  {
    result = swift_getWitnessTable(&unk_199014, &type metadata for ReviewInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5230);
  }
  return result;
}

unint64_t sub_100D04()
{
  unint64_t result;

  result = qword_1F5238;
  if (!qword_1F5238)
  {
    result = swift_getWitnessTable(&unk_198F84, &type metadata for ReviewInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5238);
  }
  return result;
}

unint64_t sub_100D4C()
{
  unint64_t result;

  result = qword_1F5240;
  if (!qword_1F5240)
  {
    result = swift_getWitnessTable(&unk_198FAC, &type metadata for ReviewInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5240);
  }
  return result;
}

unint64_t sub_100D94()
{
  unint64_t result;

  result = qword_1F5248;
  if (!qword_1F5248)
  {
    result = swift_getWitnessTable(&unk_198E14, &type metadata for InternalAffinitySource.LessLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5248);
  }
  return result;
}

unint64_t sub_100DDC()
{
  unint64_t result;

  result = qword_1F5250;
  if (!qword_1F5250)
  {
    result = swift_getWitnessTable(&unk_198E3C, &type metadata for InternalAffinitySource.LessLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5250);
  }
  return result;
}

unint64_t sub_100E24()
{
  unint64_t result;

  result = qword_1F5258;
  if (!qword_1F5258)
  {
    result = swift_getWitnessTable(&unk_198D5C, &type metadata for InternalAffinitySource.MoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5258);
  }
  return result;
}

unint64_t sub_100E6C()
{
  unint64_t result;

  result = qword_1F5260;
  if (!qword_1F5260)
  {
    result = swift_getWitnessTable(&unk_198D84, &type metadata for InternalAffinitySource.MoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5260);
  }
  return result;
}

unint64_t sub_100EB4()
{
  unint64_t result;

  result = qword_1F5268;
  if (!qword_1F5268)
  {
    result = swift_getWitnessTable(&unk_198CA4, &type metadata for InternalAffinitySource.ReviewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5268);
  }
  return result;
}

unint64_t sub_100EFC()
{
  unint64_t result;

  result = qword_1F5270;
  if (!qword_1F5270)
  {
    result = swift_getWitnessTable(&unk_198CCC, &type metadata for InternalAffinitySource.ReviewCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5270);
  }
  return result;
}

unint64_t sub_100F44()
{
  unint64_t result;

  result = qword_1F5278;
  if (!qword_1F5278)
  {
    result = swift_getWitnessTable(&unk_198BEC, &type metadata for InternalAffinitySource.ImplicitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5278);
  }
  return result;
}

unint64_t sub_100F8C()
{
  unint64_t result;

  result = qword_1F5280;
  if (!qword_1F5280)
  {
    result = swift_getWitnessTable(&unk_198C14, &type metadata for InternalAffinitySource.ImplicitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5280);
  }
  return result;
}

unint64_t sub_100FD4()
{
  unint64_t result;

  result = qword_1F5288;
  if (!qword_1F5288)
  {
    result = swift_getWitnessTable(&unk_198ECC, &type metadata for InternalAffinitySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5288);
  }
  return result;
}

unint64_t sub_10101C()
{
  unint64_t result;

  result = qword_1F5290;
  if (!qword_1F5290)
  {
    result = swift_getWitnessTable(&unk_198EF4, &type metadata for InternalAffinitySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5290);
  }
  return result;
}

unint64_t sub_101064()
{
  unint64_t result;

  result = qword_1F5298;
  if (!qword_1F5298)
  {
    result = swift_getWitnessTable(&unk_198AE4, &type metadata for PositiveAffinitySource.IndicatedMoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5298);
  }
  return result;
}

unint64_t sub_1010AC()
{
  unint64_t result;

  result = qword_1F52A0;
  if (!qword_1F52A0)
  {
    result = swift_getWitnessTable(&unk_198B0C, &type metadata for PositiveAffinitySource.IndicatedMoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52A0);
  }
  return result;
}

unint64_t sub_1010F4()
{
  unint64_t result;

  result = qword_1F52A8;
  if (!qword_1F52A8)
  {
    result = swift_getWitnessTable(&unk_198A2C, &type metadata for PositiveAffinitySource.ReviewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52A8);
  }
  return result;
}

unint64_t sub_10113C()
{
  unint64_t result;

  result = qword_1F52B0;
  if (!qword_1F52B0)
  {
    result = swift_getWitnessTable(&unk_198A54, &type metadata for PositiveAffinitySource.ReviewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52B0);
  }
  return result;
}

unint64_t sub_101184()
{
  unint64_t result;

  result = qword_1F52B8;
  if (!qword_1F52B8)
  {
    result = swift_getWitnessTable(&unk_1989DC, &type metadata for PositiveAffinitySource.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52B8);
  }
  return result;
}

unint64_t sub_1011CC()
{
  unint64_t result;

  result = qword_1F52C0;
  if (!qword_1F52C0)
  {
    result = swift_getWitnessTable(&unk_198A04, &type metadata for PositiveAffinitySource.ReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52C0);
  }
  return result;
}

unint64_t sub_101214()
{
  unint64_t result;

  result = qword_1F52C8;
  if (!qword_1F52C8)
  {
    result = swift_getWitnessTable(&unk_19898C, &type metadata for PositiveAffinitySource.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52C8);
  }
  return result;
}

unint64_t sub_10125C()
{
  unint64_t result;

  result = qword_1F52D0;
  if (!qword_1F52D0)
  {
    result = swift_getWitnessTable(&unk_1989B4, &type metadata for PositiveAffinitySource.FinishedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52D0);
  }
  return result;
}

unint64_t sub_1012A4()
{
  unint64_t result;

  result = qword_1F52D8;
  if (!qword_1F52D8)
  {
    result = swift_getWitnessTable(&unk_19893C, &type metadata for PositiveAffinitySource.ReadSampleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52D8);
  }
  return result;
}

unint64_t sub_1012EC()
{
  unint64_t result;

  result = qword_1F52E0;
  if (!qword_1F52E0)
  {
    result = swift_getWitnessTable(&unk_198964, &type metadata for PositiveAffinitySource.ReadSampleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52E0);
  }
  return result;
}

unint64_t sub_101334()
{
  unint64_t result;

  result = qword_1F52E8;
  if (!qword_1F52E8)
  {
    result = swift_getWitnessTable(&unk_1988EC, &type metadata for PositiveAffinitySource.PurchasedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52E8);
  }
  return result;
}

unint64_t sub_10137C()
{
  unint64_t result;

  result = qword_1F52F0;
  if (!qword_1F52F0)
  {
    result = swift_getWitnessTable(&unk_198914, &type metadata for PositiveAffinitySource.PurchasedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52F0);
  }
  return result;
}

unint64_t sub_1013C4()
{
  unint64_t result;

  result = qword_1F52F8;
  if (!qword_1F52F8)
  {
    result = swift_getWitnessTable(&unk_19889C, &type metadata for PositiveAffinitySource.DownloadedViaFamilySharingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F52F8);
  }
  return result;
}

unint64_t sub_10140C()
{
  unint64_t result;

  result = qword_1F5300;
  if (!qword_1F5300)
  {
    result = swift_getWitnessTable(&unk_1988C4, &type metadata for PositiveAffinitySource.DownloadedViaFamilySharingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5300);
  }
  return result;
}

unint64_t sub_101454()
{
  unint64_t result;

  result = qword_1F5308;
  if (!qword_1F5308)
  {
    result = swift_getWitnessTable(&unk_19884C, &type metadata for PositiveAffinitySource.SampledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5308);
  }
  return result;
}

unint64_t sub_10149C()
{
  unint64_t result;

  result = qword_1F5310;
  if (!qword_1F5310)
  {
    result = swift_getWitnessTable(&unk_198874, &type metadata for PositiveAffinitySource.SampledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5310);
  }
  return result;
}

unint64_t sub_1014E4()
{
  unint64_t result;

  result = qword_1F5318;
  if (!qword_1F5318)
  {
    result = swift_getWitnessTable(&unk_1987FC, &type metadata for PositiveAffinitySource.AddedToWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5318);
  }
  return result;
}

unint64_t sub_10152C()
{
  unint64_t result;

  result = qword_1F5320;
  if (!qword_1F5320)
  {
    result = swift_getWitnessTable(&unk_198824, &type metadata for PositiveAffinitySource.AddedToWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5320);
  }
  return result;
}

unint64_t sub_101574()
{
  unint64_t result;

  result = qword_1F5328;
  if (!qword_1F5328)
  {
    result = swift_getWitnessTable(&unk_1987AC, &type metadata for PositiveAffinitySource.ViewedProductPageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5328);
  }
  return result;
}

unint64_t sub_1015BC()
{
  unint64_t result;

  result = qword_1F5330;
  if (!qword_1F5330)
  {
    result = swift_getWitnessTable(&unk_1987D4, &type metadata for PositiveAffinitySource.ViewedProductPageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5330);
  }
  return result;
}

unint64_t sub_101604()
{
  unint64_t result;

  result = qword_1F5338;
  if (!qword_1F5338)
  {
    result = swift_getWitnessTable(&unk_198B34, &type metadata for PositiveAffinitySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5338);
  }
  return result;
}

unint64_t sub_10164C()
{
  unint64_t result;

  result = qword_1F5340;
  if (!qword_1F5340)
  {
    result = swift_getWitnessTable(&unk_198B5C, &type metadata for PositiveAffinitySource.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5340);
  }
  return result;
}

unint64_t sub_101694()
{
  unint64_t result;

  result = qword_1F5348;
  if (!qword_1F5348)
  {
    result = swift_getWitnessTable(&unk_1986F4, &type metadata for SeedBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5348);
  }
  return result;
}

unint64_t sub_1016DC()
{
  unint64_t result;

  result = qword_1F5350;
  if (!qword_1F5350)
  {
    result = swift_getWitnessTable(&unk_19871C, &type metadata for SeedBook.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5350);
  }
  return result;
}

uint64_t sub_101720(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x444965726F7473 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444965726F7473, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461646174656DLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000016)
  {
    v8 = 0x80000000001A2360;
    if (a2 == 0x80000000001A2360)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000000001A2360, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x747369486B6F6F62 && a2 == 0xEB0000000079726FLL)
  {
    v9 = 0xEB0000000079726FLL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747369486B6F6F62, 0xEB0000000079726FLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x80000000001A2380)
  {
    v10 = 0x80000000001A2380;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000000001A2380, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000000001A23A0)
  {
    swift_bridgeObjectRelease(0x80000000001A23A0);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000000001A23A0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1019A0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0xD000000000000015)
  {
    v4 = 0x80000000001A23C0;
    if (a2 == 0x80000000001A23C0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000001A23C0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x6465776569766572 && a2 == 0xE800000000000000)
  {
    v6 = 0xE800000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465776569766572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 1684104562 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684104562, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x64656873696E6966 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656873696E6966, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x706D615364616572 && a2 == 0xEA0000000000656CLL)
  {
    v9 = 0xEA0000000000656CLL;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x706D615364616572, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0x6573616863727570 && a2 == 0xE900000000000064)
  {
    v10 = 0xE900000000000064;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6573616863727570, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000000001A23E0)
  {
    v11 = 0x80000000001A23E0;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000000001A23E0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0x64656C706D6173 && a2 == 0xE700000000000000)
  {
    v12 = 0xE700000000000000;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C706D6173, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_47;
  }
  if (a1 == 0xD000000000000011)
  {
    v13 = 0x80000000001A1BD0;
    if (a2 == 0x80000000001A1BD0)
      goto LABEL_52;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000001A1BD0, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
LABEL_52:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000000001A2400)
  {
    swift_bridgeObjectRelease(0x80000000001A2400);
    return 9;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000001A2400, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_101D94(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x656B694C7373656CLL && a2 == 0xEC00000073696854)
  {
    v5 = 0xEC00000073696854;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656B694C7373656CLL, 0xEC00000073696854, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656B694C65726F6DLL && a2 == 0xEC00000073696854)
  {
    v7 = 0xEC00000073696854;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656B694C65726F6DLL, 0xEC00000073696854, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x776569766572 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x776569766572, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746963696C706D69 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746963696C706D69, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_101F70(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    v5 = 0xE200000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease(0xE200000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(12639, 0xE200000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_102030(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726F6373, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000001A2420)
  {
    swift_bridgeObjectRelease(0x80000000001A2420);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001A2420, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_102114()
{
  unint64_t result;

  result = qword_1F5358;
  if (!qword_1F5358)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ImplicitFeature, &type metadata for ImplicitFeature);
    atomic_store(result, (unint64_t *)&qword_1F5358);
  }
  return result;
}

unint64_t sub_102158()
{
  unint64_t result;

  result = qword_1F5360;
  if (!qword_1F5360)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PositiveAffinitySource.PositiveStarRating, &type metadata for PositiveAffinitySource.PositiveStarRating);
    atomic_store(result, (unint64_t *)&qword_1F5360);
  }
  return result;
}

unint64_t sub_10219C()
{
  unint64_t result;

  result = qword_1F5368;
  if (!qword_1F5368)
  {
    result = swift_getWitnessTable(&unk_199684, &type metadata for InternalAffinitySource.Errors);
    atomic_store(result, (unint64_t *)&qword_1F5368);
  }
  return result;
}

uint64_t _s20BooksPersonalization22InternalAffinitySourceO22LessLikeThisCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_102220 + 4 * byte_197DEE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_102240 + 4 * byte_197DF3[v4]))();
}

_BYTE *sub_102220(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_102240(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_102248(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_102250(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_102258(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_102260(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InternalAffinitySource.Errors()
{
  return &type metadata for InternalAffinitySource.Errors;
}

unint64_t sub_102280()
{
  unint64_t result;

  result = qword_1F5370;
  if (!qword_1F5370)
  {
    result = swift_getWitnessTable(&unk_19965C, &type metadata for InternalAffinitySource.Errors);
    atomic_store(result, (unint64_t *)&qword_1F5370);
  }
  return result;
}

uint64_t sub_1022CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[2];

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()(v5);
  v8 = sub_49F4((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  v9 = Data.init(contentsOf:options:)(*v8 + OBJC_IVAR____TtC20BooksPersonalization32UserEncodingInputFeaturesService_cachePath, 0);
  v11 = v10;
  v12 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = JSONDecoder.init()();
  v14 = type metadata accessor for Features(0);
  v15 = sub_41754(&qword_1F5420, (uint64_t (*)(uint64_t))&type metadata accessor for Features, (uint64_t)&protocol conformance descriptor for Features);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v18, v14, v9, v11, v14, v15);
  swift_release(v13);
  sub_3E21C(v9, v11);
  v17 = v18[0];
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(a1, v7, v3);
  result = type metadata accessor for EventAggregationWork(0);
  *(_QWORD *)(a1 + *(int *)(result + 20)) = v17;
  return result;
}

uint64_t type metadata accessor for UserFeaturesWorkFactory()
{
  return objc_opt_self(_TtC20BooksPersonalization23UserFeaturesWorkFactory);
}

uint64_t sub_1024EC()
{
  return sub_41754(&qword_1F5418, type metadata accessor for EventAggregationWork, (uint64_t)&unk_19A59C);
}

uint64_t sub_102518@<X0>(uint64_t a1@<X8>)
{
  return sub_1022CC(a1);
}

uint64_t sub_102538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  v49 = sub_5EDC(&qword_1F44B8);
  v3 = __chkstk_darwin(v49);
  v48 = (_QWORD *)((char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v47 = (_QWORD *)((char *)v40 - v6);
  __chkstk_darwin(v5);
  v46 = (char *)v40 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (!v8)
    return (uint64_t)v9;
  v40[1] = v1;
  v52 = _swiftEmptyArrayStorage;
  sub_34534(0, v8, 0);
  result = sub_DF71C(a1);
  v12 = result;
  v13 = 0;
  v14 = a1 + 64;
  v41 = a1 + 80;
  v42 = v8;
  v44 = a1 + 64;
  v45 = a1;
  v43 = v11;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(a1 + 32))
  {
    v17 = (unint64_t)v12 >> 6;
    if ((*(_QWORD *)(v14 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v11)
      goto LABEL_26;
    v50 = v13;
    v18 = v49;
    v19 = v46;
    v20 = (uint64_t)&v46[*(int *)(v49 + 48)];
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 56);
    v23 = *(_QWORD *)(v21 + 8 * v12);
    v24 = type metadata accessor for AttributeAffinityResult(0);
    sub_412BC(v22 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v12, v20);
    *v19 = v23;
    v25 = (uint64_t)v47;
    *v47 = v23;
    sub_412BC(v20, v25 + *(int *)(v18 + 48));
    v26 = v48;
    sub_DF7D0(v25, (uint64_t)v48);
    sub_DF818((uint64_t)v19);
    v27 = *v26;
    v28 = (uint64_t *)((char *)v26 + *(int *)(v18 + 48));
    v29 = sub_5EDC(&qword_1F44C0);
    NonEmpty.elements.getter(&v51, v29);
    v30 = v51;
    v31 = *v28;
    sub_DF818((uint64_t)v26);
    v9 = v52;
    result = swift_isUniquelyReferenced_nonNull_native(v52);
    if ((result & 1) == 0)
    {
      result = sub_34534(0, v9[2] + 1, 1);
      v9 = v52;
    }
    v33 = v9[2];
    v32 = v9[3];
    if (v33 >= v32 >> 1)
    {
      result = sub_34534(v32 > 1, v33 + 1, 1);
      v9 = v52;
    }
    v9[2] = v33 + 1;
    v34 = &v9[3 * v33];
    v34[4] = v27;
    v34[5] = v30;
    v34[6] = v31;
    a1 = v45;
    v15 = 1 << *(_BYTE *)(v45 + 32);
    if (v12 >= v15)
      goto LABEL_27;
    v14 = v44;
    v35 = *(_QWORD *)(v44 + 8 * v17);
    if ((v35 & (1 << v12)) == 0)
      goto LABEL_28;
    LODWORD(v11) = v43;
    if (*(_DWORD *)(v45 + 36) != (_DWORD)v43)
      goto LABEL_29;
    v36 = v35 & (-2 << (v12 & 0x3F));
    if (v36)
    {
      v15 = __clz(__rbit64(v36)) | v12 & 0xFFFFFFFFFFFFFFC0;
      v16 = v42;
    }
    else
    {
      v37 = v17 + 1;
      v38 = (unint64_t)(v15 + 63) >> 6;
      v16 = v42;
      if (v17 + 1 < v38)
      {
        v39 = *(_QWORD *)(v44 + 8 * v37);
        if (v39)
        {
LABEL_22:
          v15 = __clz(__rbit64(v39)) + (v37 << 6);
        }
        else
        {
          while (v38 - 2 != v17)
          {
            v39 = *(_QWORD *)(v41 + 8 * v17++);
            if (v39)
            {
              v37 = v17 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v13 = v50 + 1;
    v12 = v15;
    if (v50 + 1 == v16)
      return (uint64_t)v9;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_102894(char *__src)
{
  uint64_t v1;
  _QWORD *v2;

  v2[139] = v1;
  memcpy(v2 + 2, __src, 0x1A8uLL);
  v2[140] = *((_QWORD *)__src + 53);
  memcpy(v2 + 56, __src + 432, 0x290uLL);
  return swift_task_switch(sub_1028F8, 0, 0);
}

uint64_t sub_1028F8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  int *v8;

  v1 = v0[140];
  v2 = (_QWORD *)v0[139];
  v3 = v2[10];
  v4 = v2[11];
  sub_49F4(v2 + 7, v3);
  v0[55] = v1;
  v5 = *(int **)(v4 + 8);
  v8 = (int *)((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v0[141] = v6;
  *v6 = v0;
  v6[1] = sub_102994;
  return ((uint64_t (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v8)(v0 + 2, v0[140], v3, v4);
}

uint64_t sub_102994(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1128);
  *(_QWORD *)(*v2 + 1136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_102AF4;
  }
  else
  {
    *(_QWORD *)(v4 + 1144) = a1;
    v6 = sub_102A08;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_102A08()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 1144);
  v2 = *(_QWORD **)(v0 + 1112);
  v3 = v2[5];
  v4 = v2[6];
  sub_49F4(v2 + 2, v3);
  v5 = sub_38614(v1);
  swift_bridgeObjectRelease();
  v6 = (*(uint64_t (**)(uint64_t (*)(uint64_t), _QWORD, _QWORD *, void *, void *, uint64_t, uint64_t))(v4 + 8))(sub_102B00, 0, v5, &type metadata for UInt64, &protocol witness table for UInt64, v3, v4);
  swift_release(v5);
  v7 = sub_DE428(v6);
  swift_bridgeObjectRelease();
  v8 = sub_102538(v7);
  swift_release(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_102AF4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_102B00(uint64_t result)
{
  if (*(_QWORD *)(result + 128) >> 1 != 0xFFFFFFFFLL)
    return swift_bridgeObjectRetain(*(_QWORD *)(result + 24));
  __break(1u);
  return result;
}

uint64_t type metadata accessor for SeedBookAuthorRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization35SeedBookAuthorRecommendationService);
}

uint64_t sub_102B3C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1F54DC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  v5[139] = v4;
  memcpy(v5 + 2, a1, 0x1A8uLL);
  v5[140] = a1[53];
  memcpy(v5 + 56, a1 + 54, 0x290uLL);
  return swift_task_switch(sub_1028F8, 0, 0);
}

_UNKNOWN **static MediaTypeMethod.allCases.getter()
{
  return &off_1D9A78;
}

uint64_t sub_102BD8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 1248) = v3;
  *(_QWORD *)(v4 + 1240) = a2;
  *(_QWORD *)(v4 + 1232) = a1;
  *(_BYTE *)(v4 + 1280) = *(_BYTE *)(a2 + 480);
  *(_BYTE *)(v4 + 1281) = *a3;
  return swift_task_switch(sub_102C08, 0, 0);
}

uint64_t sub_102C08()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int *v16;

  v1 = *(unsigned __int8 *)(v0 + 1281);
  if (v1 == 4)
    v1 = 0x1020100u >> (8 * *(_BYTE *)(v0 + 1280));
  *(_BYTE *)(v0 + 1282) = v1;
  v2 = *(_QWORD *)(v0 + 1248);
  swift_beginAccess(v2 + 16, v0 + 1184, 32, 0);
  v3 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v3 + 16) && (sub_39258(v1), (v5 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v3 + 56) + 40 * v4, v0 + 1104);
  }
  else
  {
    *(_QWORD *)(v0 + 1136) = 0;
    *(_OWORD *)(v0 + 1104) = 0u;
    *(_OWORD *)(v0 + 1120) = 0u;
  }
  swift_endAccess(v0 + 1184);
  if (*(_QWORD *)(v0 + 1128))
  {
    v6 = *(_BYTE *)(v0 + 1280);
    v7 = *(_QWORD *)(v0 + 1240);
    sub_26DB8((__int128 *)(v0 + 1104), v0 + 1144);
    v8 = *(_QWORD *)(v0 + 1168);
    v9 = *(_QWORD *)(v0 + 1176);
    sub_49F4((_QWORD *)(v0 + 1144), v8);
    memcpy((void *)(v0 + 16), (const void *)v7, 0x1E0uLL);
    *(_BYTE *)(v0 + 496) = v6;
    memcpy((void *)(v0 + 497), (const void *)(v7 + 481), 0x25FuLL);
    v10 = *(int **)(v9 + 8);
    v16 = (int *)((char *)v10 + *v10);
    v11 = (_QWORD *)swift_task_alloc(v10[1]);
    *(_QWORD *)(v0 + 1256) = v11;
    *v11 = v0;
    v11[1] = sub_102DC8;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v16)(*(_QWORD *)(v0 + 1232), v0 + 16, v8, v9);
  }
  else
  {
    sub_103970(v0 + 1104);
    v13 = sub_1039B0();
    v14 = swift_allocError(&type metadata for DelegatingMediaTypesRecommendationService.Errors, v13, 0, 0);
    *v15 = v1;
    swift_willThrow(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_102DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1256);
  *(_QWORD *)(v3 + 1264) = a1;
  *(_QWORD *)(v3 + 1272) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1031A0;
  else
    v5 = sub_102E38;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_102E38()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = swift_bridgeObjectRetain_n(*(_QWORD *)(v0 + 1264), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(unsigned __int8 *)(v0 + 1281);
    v5 = swift_slowAlloc(32, -1);
    v9 = swift_slowAlloc(96, -1);
    *(_DWORD *)v5 = 136315650;
    if (v4 == 4)
    {
      v7 = *(unsigned __int8 *)(v0 + 1282);
      *(_QWORD *)(v0 + 1208) = sub_9DA98(0x3E6C696E3CLL, 0xE500000000000000, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1208, v0 + 1216, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      __asm { BR              X9 }
    }
    __asm { BR              X10 }
  }
  v6 = *(_QWORD *)(v0 + 1264);

  swift_bridgeObjectRelease_n(v6, 2);
  sub_62F8((_QWORD *)(v0 + 1144));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 1264));
}

uint64_t sub_1031A0()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 1144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

BooksPersonalization::MediaTypeMethod_optional __swiftcall MediaTypeMethod.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::MediaTypeMethod_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA370, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

uint64_t MediaTypeMethod.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_103264 + 4 * byte_199788[*v0]))(0x6F4A656C676E6973, 0xEB00000000746E69);
}

uint64_t sub_103264()
{
  return 0x746E696F4A6C6C61;
}

uint64_t sub_10327C()
{
  return 0x6F6A7369446C6C61;
}

uint64_t sub_103290()
{
  return 0x7473657265746E69;
}

unint64_t sub_1032B8()
{
  unint64_t result;

  result = qword_1F54E0;
  if (!qword_1F54E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaTypeMethod, &type metadata for MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F54E0);
  }
  return result;
}

void sub_1032FC()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_103350()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E696F4A6C6C61, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_1033C8()
{
  __asm { BR              X10 }
}

uint64_t sub_10340C(uint64_t a1)
{
  String.hash(into:)(a1, 0x746E696F4A6C6C61, 0xE800000000000000);
  return swift_bridgeObjectRelease(0xE800000000000000);
}

void sub_103470(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_1034C0()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x746E696F4A6C6C61, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

BooksPersonalization::MediaTypeMethod_optional sub_103538(Swift::String *a1)
{
  return MediaTypeMethod.init(rawValue:)(*a1);
}

uint64_t sub_103544()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10357C + 4 * byte_199798[*v0]))();
}

void sub_10357C(_QWORD *a1@<X8>)
{
  *a1 = 0x746E696F4A6C6C61;
  a1[1] = 0xE800000000000000;
}

void sub_103598(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6F6A7369446C6C61;
  a1[1] = v1;
}

void sub_1035B0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "interestBased");
  *(_WORD *)(a1 + 14) = -4864;
}

unint64_t sub_1035DC()
{
  unint64_t result;

  result = qword_1F54E8;
  if (!qword_1F54E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaTypeMethod, &type metadata for MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F54E8);
  }
  return result;
}

unint64_t sub_103624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F54F0;
  if (!qword_1F54F0)
  {
    v1 = sub_5F68(&qword_1F54F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F54F0);
  }
  return result;
}

void sub_103670(_QWORD *a1@<X8>)
{
  *a1 = &off_1DA3F0;
}

uint64_t sub_103680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1039F4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1036DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1039F4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

ValueMetadata *type metadata accessor for MediaTypeMethod()
{
  return &type metadata for MediaTypeMethod;
}

uint64_t sub_10373C()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC20BooksPersonalization41DelegatingMediaTypesRecommendationService_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_103794()
{
  return type metadata accessor for DelegatingMediaTypesRecommendationService(0);
}

uint64_t type metadata accessor for DelegatingMediaTypesRecommendationService(uint64_t a1)
{
  uint64_t result;

  result = qword_1F5530;
  if (!qword_1F5530)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DelegatingMediaTypesRecommendationService);
  return result;
}

uint64_t sub_1037D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_103854(uint64_t a1, const void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  memcpy((void *)(v3 + 16), a2, 0x440uLL);
  *(_BYTE *)(v3 + 1120) = 4;
  v6 = swift_task_alloc(dword_1F55CC);
  *(_QWORD *)(v3 + 1104) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = sub_1038F0;
  *(_QWORD *)(v6 + 1248) = v5;
  *(_QWORD *)(v6 + 1240) = v3 + 16;
  *(_QWORD *)(v6 + 1232) = a1;
  *(_BYTE *)(v6 + 1280) = *(_BYTE *)(v3 + 496);
  *(_BYTE *)(v6 + 1281) = *(_BYTE *)(v3 + 1120);
  return swift_task_switch(sub_102C08, 0, 0);
}

uint64_t sub_1038F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 1104);
  v5 = *v2;
  *(_QWORD *)(v5 + 1112) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_103964, 0, 0);
  else
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_103964()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_103970(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F55D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1039B0()
{
  unint64_t result;

  result = qword_1F55D8;
  if (!qword_1F55D8)
  {
    result = swift_getWitnessTable(&unk_199984, &type metadata for DelegatingMediaTypesRecommendationService.Errors);
    atomic_store(result, (unint64_t *)&qword_1F55D8);
  }
  return result;
}

unint64_t sub_1039F4()
{
  unint64_t result;

  result = qword_1F55E0;
  if (!qword_1F55E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaTypeMethod, &type metadata for MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F55E0);
  }
  return result;
}

uint64_t _s20BooksPersonalization15MediaTypeMethodOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_103A84 + 4 * byte_1997A1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_103AB8 + 4 * byte_19979C[v4]))();
}

uint64_t sub_103AB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_103AC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x103AC8);
  return result;
}

uint64_t sub_103AD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x103ADCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_103AE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_103AE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DelegatingMediaTypesRecommendationService.Errors()
{
  return &type metadata for DelegatingMediaTypesRecommendationService.Errors;
}

uint64_t sub_103B04()
{
  uint64_t result;

  sub_6789C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD00000000000002ALL, 0x80000000001999E0);
  qword_2245C8 = result;
  return result;
}

uint64_t sub_103B68()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_2245D0);
  sub_5216C(v0, (uint64_t)qword_2245D0);
  if (qword_1F00F8 != -1)
    swift_once(&qword_1F00F8, sub_103B04);
  return Logger.init(_:)((id)qword_2245C8);
}

uint64_t sub_103BE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1F56B4);
  *(_QWORD *)(v2 + 40) = v4;
  *v4 = v2;
  v4[1] = sub_103C64;
  v4[283] = v1;
  v4[282] = a1;
  v4[281] = v2 + 32;
  v4[284] = *v1;
  return swift_task_switch(sub_1040CC, 0, 0);
}

uint64_t sub_103C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_104098;
  else
    v3 = sub_103CC8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_103CC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t result;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;

  if (*(_QWORD *)(v0 + 32))
    v1 = *(_QWORD **)(v0 + 32);
  else
    v1 = _swiftEmptyArrayStorage;
  v33 = v1[2];
  if (!v33)
  {
    v3 = _swiftEmptyDictionarySingleton;
LABEL_29:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
  }
  v30 = v0 + 16;
  v32 = v1 + 4;
  swift_bridgeObjectRetain(v1);
  v2 = 0;
  v3 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    v5 = &v32[6 * v2];
    v6 = *v5;
    if (*v5 < 0)
      return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    v36 = *(_OWORD *)v5;
    v35 = *((_BYTE *)v5 + 16);
    v7 = v5[3];
    v8 = v5[4];
    v9 = v5[5];
    v10 = *(_QWORD *)(v7 + 16);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain_n(v7, 2);
    v11 = Set.init(minimumCapacity:)(v10, &type metadata for String, &protocol witness table for String);
    v38 = v11;
    v12 = *(_QWORD *)(v7 + 16);
    v37 = v8;
    if (v12)
    {
      v13 = (uint64_t *)(v7 + 40);
      do
      {
        v15 = *(v13 - 1);
        v14 = *v13;
        swift_bridgeObjectRetain(*v13);
        sub_1625CC((uint64_t *)&v39, v15, v14);
        swift_bridgeObjectRelease();
        v13 += 2;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      v16 = v38;
      v8 = v37;
      if (v9)
      {
LABEL_13:
        *(_QWORD *)(v31 + 16) = v8;
        *(_QWORD *)(v31 + 24) = v9;
        swift_bridgeObjectRetain(v9);
        v37 = String.init<A>(_:)(v30, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
        v34 = v17;
        goto LABEL_16;
      }
    }
    else
    {
      v16 = v11;
      swift_bridgeObjectRelease();
      if (v9)
        goto LABEL_13;
    }
    v34 = 0;
LABEL_16:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    v39 = v3;
    v20 = sub_39228(v6);
    v21 = v3[2];
    v22 = (v19 & 1) == 0;
    result = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (v3[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v19 & 1) != 0)
          goto LABEL_6;
      }
      else
      {
        result = (uint64_t)sub_16C414();
        v3 = v39;
        if ((v24 & 1) != 0)
          goto LABEL_6;
      }
    }
    else
    {
      sub_15C5EC(result, isUniquelyReferenced_nonNull_native);
      v3 = v39;
      result = sub_39228(v6);
      if ((v24 & 1) != (v25 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v20 = result;
      if ((v24 & 1) != 0)
      {
LABEL_6:
        v4 = v3[7] + 48 * v20;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v4 = v6;
        *(_QWORD *)(v4 + 8) = *((_QWORD *)&v36 + 1);
        *(_BYTE *)(v4 + 16) = v35;
        *(_QWORD *)(v4 + 24) = v16;
        *(_QWORD *)(v4 + 32) = v37;
        *(_QWORD *)(v4 + 40) = v34;
        goto LABEL_7;
      }
    }
    v3[(v20 >> 6) + 8] |= 1 << v20;
    *(_QWORD *)(v3[6] + 8 * v20) = v6;
    v26 = v3[7] + 48 * v20;
    *(_OWORD *)v26 = v36;
    *(_BYTE *)(v26 + 16) = v35;
    *(_QWORD *)(v26 + 24) = v16;
    *(_QWORD *)(v26 + 32) = v37;
    *(_QWORD *)(v26 + 40) = v34;
    v27 = v3[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_33;
    v3[2] = v29;
LABEL_7:
    ++v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v2 == v33)
    {
      swift_bridgeObjectRelease();
      v0 = v31;
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_104098()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1040A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[283] = v2;
  v3[282] = a2;
  v3[281] = a1;
  v3[284] = *v2;
  return swift_task_switch(sub_1040CC, 0, 0);
}

uint64_t sub_1040CC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  int *v10;

  v1 = (_QWORD *)v0[283];
  v2 = v0[282];
  v3 = type metadata accessor for PersonalizationMetadataRequest(0);
  v4 = swift_bridgeObjectRetain(*(_QWORD *)(v2 + *(int *)(v3 + 20)));
  v0[285] = sub_37DCC(v4);
  swift_bridgeObjectRelease();
  v0[286] = v1[2];
  v0[287] = v1[3];
  v0[288] = v1[4];
  v0[289] = v1[5];
  sub_3DD40((uint64_t)(v1 + 9), (uint64_t)(v0 + 274));
  v5 = v1[17];
  v6 = v1[18];
  sub_49F4(v1 + 14, v5);
  v7 = *(int **)(v6 + 16);
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[290] = v8;
  *v8 = v0;
  v8[1] = sub_1041B8;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v10)(v0 + 2, v5, v6);
}

uint64_t sub_1041B8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2320);
  *(_QWORD *)(*v1 + 2328) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_release(*(_QWORD *)(v2 + 2280));
    v4 = sub_104414;
  }
  else
  {
    v4 = sub_104224;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_104224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 2312);
  v2 = *(_QWORD *)(v0 + 2304);
  v11 = *(_OWORD *)(v0 + 2288);
  v3 = *(_QWORD *)(v0 + 2280);
  v4 = *(_QWORD *)(v0 + 2272);
  memcpy((void *)(v0 + 1104), (const void *)(v0 + 16), 0x440uLL);
  v10 = *(_OWORD *)(v0 + 2256);
  sub_5B70(v0 + 1104);
  v5 = *(_QWORD *)(v0 + 1752);
  if (v5 <= 0)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v0 + 2232) = v5;
  v6 = swift_task_alloc(96);
  *(_QWORD *)(v0 + 2336) = v6;
  *(_QWORD *)(v6 + 16) = v3;
  *(_QWORD *)(v6 + 24) = v0 + 2232;
  *(_OWORD *)(v6 + 32) = v10;
  *(_OWORD *)(v6 + 48) = v11;
  *(_QWORD *)(v6 + 64) = v2;
  *(_QWORD *)(v6 + 72) = v1;
  *(_QWORD *)(v6 + 80) = v0 + 2192;
  *(_QWORD *)(v6 + 88) = v4;
  v7 = sub_5EDC(&qword_1F08A8);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 2344) = v8;
  *v8 = v0;
  v8[1] = sub_104350;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 2240, &type metadata for Transport.MetadataResponse, v7, 0, 0, &unk_1F56C0, v6, &type metadata for Transport.MetadataResponse);
}

uint64_t sub_104350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2344);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2336);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 2280);
  *(_QWORD *)(*(_QWORD *)v1 + 2352) = v0;
  swift_task_dealloc(v2);
  swift_release(v4);
  swift_task_dealloc(v3);
  if (v0)
    v5 = sub_104448;
  else
    v5 = sub_1043D4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1043D4()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 2248) = *(_QWORD *)(v0 + 2240);
  sub_62F8((_QWORD *)(v0 + 2192));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_104414()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2192));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_104448()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2192));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10447C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v8 + 224) = v16;
  *(_QWORD *)(v8 + 232) = v17;
  *(_OWORD *)(v8 + 208) = v15;
  *(_QWORD *)(v8 + 192) = a7;
  *(_QWORD *)(v8 + 200) = a8;
  *(_QWORD *)(v8 + 176) = a5;
  *(_QWORD *)(v8 + 184) = a6;
  *(_QWORD *)(v8 + 160) = a3;
  *(_QWORD *)(v8 + 168) = a4;
  *(_QWORD *)(v8 + 144) = a1;
  *(_QWORD *)(v8 + 152) = a2;
  v9 = *(_QWORD *)(type metadata accessor for PersonalizationMetadataRequest(0) - 8);
  *(_QWORD *)(v8 + 240) = v9;
  v10 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 248) = v10;
  *(_QWORD *)(v8 + 256) = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F15F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 264) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 272) = swift_task_alloc(v11);
  v12 = sub_5EDC(&qword_1F56C8);
  *(_QWORD *)(v8 + 280) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v8 + 288) = v13;
  *(_QWORD *)(v8 + 296) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_104558, 0, 0);
}

uint64_t sub_104558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;

  v1 = **(_QWORD **)(v0 + 168);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 160);
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRetain(v2);
    v4 = sub_105D88(0, v3, v1, v1, v2);
    swift_bridgeObjectRelease();
    v5 = v4[2];
    if (!v5)
      goto LABEL_15;
  }
  else
  {
    v6 = sub_5EDC(&qword_1F1158);
    v4 = (_QWORD *)swift_allocObject(v6, 64, 7);
    *((_OWORD *)v4 + 1) = xmmword_1875E0;
    v4[4] = _swiftEmptyArrayStorage;
    v4[5] = &_swiftEmptyArrayStorage[4];
    *((_OWORD *)v4 + 3) = xmmword_18CB70;
    v5 = 1;
  }
  v57 = (__int128 *)(v0 + 16);
  v44 = *(_QWORD *)(v0 + 240);
  v43 = *(_QWORD *)(v0 + 248) + 7;
  v58 = type metadata accessor for TaskPriority(0);
  v42 = *(_QWORD *)(v58 - 8);
  v41 = *(void (**)(void))(v42 + 56);
  v7 = v4 + 7;
  do
  {
    v45 = v5;
    v10 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 224);
    v53 = *(_QWORD *)(v0 + 232);
    v54 = *(_QWORD *)(v0 + 264);
    v52 = *(_QWORD *)(v0 + 216);
    v50 = *(_QWORD *)(v0 + 272);
    v51 = *(_QWORD *)(v0 + 208);
    v12 = *(_QWORD *)(v0 + 184);
    v48 = *(_QWORD *)(v0 + 192);
    v49 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 176);
    v46 = *v7;
    v47 = *(v7 - 1);
    v56 = v7;
    v59 = *(_OWORD *)(v7 - 3);
    v41();
    sub_106004(v13, v10);
    sub_3DD40(v11, (uint64_t)v57);
    v14 = *(unsigned __int8 *)(v44 + 80);
    v15 = (v14 + 32) & ~v14;
    v16 = (v43 + v15) & 0xFFFFFFFFFFFFFFF8;
    v17 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
    v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
    v19 = (v18 + 39) & 0xFFFFFFFFFFFFFFF8;
    v20 = (v19 + 47) & 0xFFFFFFFFFFFFFFF8;
    v21 = swift_allocObject(&unk_1E62C8, v20 + 8, v14 | 7);
    *(_QWORD *)(v21 + 16) = 0;
    v55 = (_QWORD *)(v21 + 16);
    *(_QWORD *)(v21 + 24) = 0;
    sub_106148(v10, v21 + v15);
    v22 = v21 + v16;
    *(_OWORD *)v22 = v59;
    *(_QWORD *)(v22 + 16) = v47;
    *(_QWORD *)(v22 + 24) = v46;
    *(_QWORD *)(v21 + v17) = v12;
    v23 = (uint64_t *)(v21 + v18);
    *v23 = v48;
    v23[1] = v49;
    v23[2] = v51;
    v23[3] = v52;
    sub_26DB8(v57, v21 + v19);
    *(_QWORD *)(v21 + v20) = v53;
    sub_6A950(v50, v54);
    LODWORD(v19) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v54, 1, v58);
    swift_unknownObjectRetain_n(v59, 2);
    swift_retain(v12);
    sub_3EAFC(v48, v49);
    v24 = sub_3EAFC(v51, v52);
    v25 = *(_QWORD *)(v0 + 264);
    if ((_DWORD)v19 == 1)
    {
      sub_6A910(*(_QWORD *)(v0 + 264));
      v26 = 0;
    }
    else
    {
      v27 = TaskPriority.rawValue.getter(v24);
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v58);
      v26 = v27;
    }
    v28 = *v55;
    if (*v55)
    {
      v29 = *(_QWORD *)(v21 + 24);
      ObjectType = swift_getObjectType(*v55);
      swift_unknownObjectRetain(v28);
      v31 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v29);
      v33 = v32;
      swift_unknownObjectRelease(v28);
    }
    else
    {
      v31 = 0;
      v33 = 0;
    }
    v34 = **(_QWORD **)(v0 + 152);
    v35 = v33 | v31;
    if (v33 | v31)
    {
      v35 = v0 + 56;
      *(_QWORD *)(v0 + 56) = 0;
      *(_QWORD *)(v0 + 64) = 0;
      *(_QWORD *)(v0 + 72) = v31;
      *(_QWORD *)(v0 + 80) = v33;
    }
    v8 = *(_QWORD *)(v0 + 272);
    *(_QWORD *)(v0 + 88) = 1;
    *(_QWORD *)(v0 + 96) = v35;
    *(_QWORD *)(v0 + 104) = v34;
    v9 = swift_task_create(v26 | 0x3100, v0 + 88, &type metadata for Transport.MetadataResponse, &unk_1F56D8, v21);
    swift_unknownObjectRelease(v59);
    swift_release(v9);
    sub_6A910(v8);
    v7 = v56 + 4;
    v5 = v45 - 1;
  }
  while (v45 != 1);
LABEL_15:
  v36 = *(uint64_t **)(v0 + 152);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 120) = _swiftEmptyArrayStorage;
  v37 = *v36;
  v38 = sub_5EDC(&qword_1F1348);
  ThrowingTaskGroup.makeAsyncIterator()(v37, &type metadata for Transport.MetadataResponse, v38, &protocol self-conformance witness table for Error);
  v39 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(_QWORD *)(v0 + 304) = v39;
  *v39 = v0;
  v39[1] = sub_1049B4;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 128, 0, 0, *(_QWORD *)(v0 + 280), v0 + 136);
}

uint64_t sub_1049B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 304));
  if (v0)
  {
    swift_bridgeObjectRelease();
    v2 = sub_104B90;
  }
  else
  {
    v2 = sub_104A24;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_104A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 128);
  if (v1 == 1)
  {
    v2 = *(_QWORD *)(v0 + 296);
    v3 = *(_QWORD *)(v0 + 272);
    v5 = *(_QWORD *)(v0 + 256);
    v4 = *(_QWORD *)(v0 + 264);
    v6 = *(_QWORD **)(v0 + 144);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(v2, *(_QWORD *)(v0 + 280));
    *v6 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (v1)
      v8 = *(_QWORD **)(v0 + 128);
    else
      v8 = _swiftEmptyArrayStorage;
    sub_110650((uint64_t)v8);
    v9 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
    *(_QWORD *)(v0 + 312) = v9;
    *v9 = v0;
    v9[1] = sub_104B28;
    return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0 + 128, 0, 0, *(_QWORD *)(v0 + 280), v0 + 136);
  }
}

uint64_t sub_104B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 312));
  if (v0)
  {
    swift_bridgeObjectRelease();
    v2 = sub_104B90;
  }
  else
  {
    v2 = sub_104A24;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_104B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 288) + 8))(v1, *(_QWORD *)(v0 + 280));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_104C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v8 + 864) = v16;
  *(_QWORD *)(v8 + 856) = v15;
  *(_OWORD *)(v8 + 840) = v14;
  *(_OWORD *)(v8 + 824) = v13;
  *(_QWORD *)(v8 + 816) = a8;
  *(_QWORD *)(v8 + 808) = a7;
  *(_QWORD *)(v8 + 800) = a6;
  *(_QWORD *)(v8 + 792) = a5;
  *(_QWORD *)(v8 + 784) = a4;
  *(_QWORD *)(v8 + 776) = a1;
  v9 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 872) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 880) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 888) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 896) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 904) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 912) = swift_task_alloc(v11);
  *(_QWORD *)(v8 + 920) = swift_task_alloc(v11);
  return swift_task_switch(sub_104CCC, 0, 0);
}

void sub_104CCC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _OWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85[18];

  v1 = *(_QWORD *)(v0 + 816);
  v2 = *(_QWORD *)(v0 + 792);
  if ((v1 & 1) != 0)
  {
    v4 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v5 = swift_unknownObjectRetain_n(v2, 3);
    v6 = (_QWORD *)swift_dynamicCastClass(v5, v4);
    if (!v6)
    {
      swift_unknownObjectRelease(v2);
      v1 = *(_QWORD *)(v0 + 816);
      v6 = _swiftEmptyArrayStorage;
    }
    v7 = *(_QWORD *)(v0 + 808);
    v8 = v6[2];
    swift_release(v6);
    v9 = (v1 >> 1) - v7;
    if (__OFSUB__(v1 >> 1, v7))
    {
      __break(1u);
    }
    else
    {
      v1 = *(_QWORD *)(v0 + 792);
      if (v8 == v9)
      {
        v3 = (char *)swift_dynamicCastClass(*(_QWORD *)(v0 + 792), v4);
        if (!v3)
        {
          swift_unknownObjectRelease(v1);
          v3 = (char *)_swiftEmptyArrayStorage;
        }
LABEL_10:
        swift_unknownObjectRelease(*(_QWORD *)(v0 + 792));
        sub_6F4B4((uint64_t)v3, v85);
        swift_release(v3);
        v10 = *(_QWORD *)(v0 + 920);
        v82 = v0 + 768;
        v84 = v85[0];
        *(_QWORD *)(v0 + 928) = v85[0];
        UUID.init()(v10);
        if (qword_1F0100 != -1)
          swift_once(&qword_1F0100, sub_103B68);
        v76 = (_QWORD *)(v0 + 648);
        v11 = *(_QWORD *)(v0 + 920);
        v12 = *(_QWORD *)(v0 + 912);
        v13 = *(_QWORD *)(v0 + 880);
        v14 = *(_QWORD *)(v0 + 872);
        v15 = type metadata accessor for Logger(0);
        *(_QWORD *)(v0 + 936) = sub_5216C(v15, (uint64_t)qword_2245D0);
        v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
        *(_QWORD *)(v0 + 944) = v16;
        v78 = v16;
        v17 = v16(v12, v11, v14);
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.default.getter();
        v20 = os_log_type_enabled(v18, v19);
        v21 = *(_QWORD *)(v0 + 912);
        v22 = *(_QWORD *)(v0 + 880);
        v23 = *(_QWORD *)(v0 + 872);
        if (v20)
        {
          v24 = (uint8_t *)swift_slowAlloc(12, -1);
          v80 = swift_slowAlloc(32, -1);
          v85[0] = v80;
          *(_DWORD *)v24 = 136446210;
          v25 = sub_1062E0();
          v26 = dispatch thunk of CustomStringConvertible.description.getter(v23, v25);
          *(_QWORD *)(v0 + 768) = sub_9DA98(v26, v27, v85);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, v0 + 776, v24 + 4, v24 + 12);
          swift_bridgeObjectRelease();
          v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
          v28(v21, v23);
          _os_log_impl(&dword_0, v18, v19, "initiating personalization metadata request for batch %{public}s", v24, 0xCu);
          swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v80, -1, -1);
          swift_slowDealloc(v24, -1, -1);
        }
        else
        {
          v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
          v28(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 872));
        }

        v72 = (_OWORD *)(v0 + 16);
        v29 = (_OWORD *)(v0 + 256);
        v77 = v28;
        *(_QWORD *)(v0 + 952) = v28;
        v30 = *(_QWORD *)(v0 + 824);
        v31 = UUID.uuidString.getter();
        v79 = v32;
        v81 = v31;
        *(_QWORD *)(v0 + 960) = v32;
        v33 = *(_QWORD *)(v30 + 48);
        if ((*(_BYTE *)(v30 + 64) & 1) != 0)
          __asm { BR              X11 }
        v34 = *(_QWORD *)(*(_QWORD *)(v0 + 824) + 56);
        swift_bridgeObjectRetain(v34);
        v35 = v33;
        v73 = *(_QWORD *)(v0 + 904);
        v74 = *(_QWORD *)(v0 + 872);
        v75 = *(_QWORD *)(v0 + 920);
        v36 = *(_QWORD *)(v0 + 856);
        v37 = *(_QWORD *)(v0 + 848);
        v38 = *(_QWORD *)(v0 + 840);
        v39 = *(_QWORD *)(v0 + 832);
        sub_3DD40(*(_QWORD *)(v0 + 864), (uint64_t)v76);
        *(_QWORD *)(v0 + 408) = v35;
        *(_QWORD *)(v0 + 416) = v34;
        *(_QWORD *)(v0 + 424) = v39;
        *(_QWORD *)(v0 + 432) = v38;
        *(_QWORD *)(v0 + 440) = v37;
        *(_QWORD *)(v0 + 448) = v36;
        sub_3DD40((uint64_t)v76, v0 + 456);
        v85[0] = v39;
        v85[1] = v38;
        v85[2] = v37;
        v85[3] = v36;
        sub_3EAFC(v39, v38);
        sub_3EAFC(v37, v36);
        sub_3EAFC(v39, v38);
        sub_3EAFC(v37, v36);
        ClientConverter.init(configuration:)(v85, (uint64_t *)(v0 + 496));
        sub_62F8(v76);
        v40 = *(_OWORD *)(v0 + 592);
        v41 = *(_OWORD *)(v0 + 608);
        *(_OWORD *)(v0 + 352) = v40;
        *(_OWORD *)(v0 + 368) = v41;
        *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 624);
        *(_QWORD *)(v0 + 400) = *(_QWORD *)(v0 + 640);
        v42 = *(_OWORD *)(v0 + 528);
        v43 = *(_OWORD *)(v0 + 544);
        *(_OWORD *)(v0 + 288) = v42;
        *(_OWORD *)(v0 + 304) = v43;
        v44 = *(_OWORD *)(v0 + 576);
        *(_OWORD *)(v0 + 320) = *(_OWORD *)(v0 + 560);
        *(_OWORD *)(v0 + 336) = v44;
        v45 = *(_OWORD *)(v0 + 512);
        *v29 = *(_OWORD *)(v0 + 496);
        *(_OWORD *)(v0 + 272) = v45;
        v46 = *(_OWORD *)(v0 + 432);
        v47 = *(_OWORD *)(v0 + 464);
        v48 = *(_OWORD *)(v0 + 480);
        *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 448);
        *(_OWORD *)(v0 + 224) = v47;
        *(_OWORD *)(v0 + 240) = v48;
        v49 = *(_OWORD *)(v0 + 368);
        v50 = *(_OWORD *)(v0 + 384);
        *(_OWORD *)(v0 + 112) = v40;
        *(_OWORD *)(v0 + 128) = v49;
        v51 = *(_OWORD *)(v0 + 400);
        v52 = *(_OWORD *)(v0 + 416);
        *(_OWORD *)(v0 + 144) = v50;
        *(_OWORD *)(v0 + 160) = v51;
        *(_OWORD *)(v0 + 176) = v52;
        *(_OWORD *)(v0 + 192) = v46;
        v53 = *(_OWORD *)(v0 + 304);
        v54 = *(_OWORD *)(v0 + 320);
        *(_OWORD *)(v0 + 48) = v42;
        *(_OWORD *)(v0 + 64) = v53;
        v55 = *(_OWORD *)(v0 + 336);
        *(_OWORD *)(v0 + 80) = v54;
        *(_OWORD *)(v0 + 96) = v55;
        v56 = *(_OWORD *)(v0 + 272);
        *v72 = *v29;
        *(_OWORD *)(v0 + 32) = v56;
        v57 = v78(v73, v75, v74);
        v58 = Logger.logObject.getter(v57);
        v59 = static os_log_type_t.debug.getter();
        v60 = os_log_type_enabled(v58, v59);
        v61 = *(_QWORD *)(v0 + 904);
        v62 = *(_QWORD *)(v0 + 872);
        if (v60)
        {
          v63 = (uint8_t *)swift_slowAlloc(12, -1);
          v64 = swift_slowAlloc(32, -1);
          v85[0] = v64;
          *(_DWORD *)v63 = 136446210;
          v65 = sub_1062E0();
          v66 = dispatch thunk of CustomStringConvertible.description.getter(v62, v65);
          *(_QWORD *)(v0 + 760) = sub_9DA98(v66, v67, v85);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v82, v63 + 4, v63 + 12);
          swift_bridgeObjectRelease();
          v77(v61, v62);
          _os_log_impl(&dword_0, v58, v59, "fetching personalization metadata for batch %{public}s", v63, 0xCu);
          swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v64, -1, -1);
          swift_slowDealloc(v63, -1, -1);
        }
        else
        {
          v77(*(_QWORD *)(v0 + 904), *(_QWORD *)(v0 + 872));
        }

        v68 = (_QWORD *)swift_task_alloc(48);
        *(_QWORD *)(v0 + 968) = v68;
        v68[2] = v72;
        v68[3] = v81;
        v68[4] = v79;
        v68[5] = v84;
        v69 = swift_task_alloc(32);
        *(_QWORD *)(v0 + 976) = v69;
        *(_QWORD *)(v69 + 16) = v72;
        v70 = swift_task_alloc(32);
        *(_QWORD *)(v0 + 984) = v70;
        *(_QWORD *)(v70 + 16) = v72;
        v83 = (char *)&dword_1F4308 + dword_1F4308;
        v71 = (_QWORD *)swift_task_alloc(unk_1F430C);
        *(_QWORD *)(v0 + 992) = v71;
        *v71 = v0;
        v71[1] = sub_105404;
        v85[16] = (uint64_t)sub_DB3B8;
        v85[17] = v70;
        __asm { BR              X8; sub_D9420 }
      }
    }
    swift_unknownObjectRelease(v1);
    v1 = *(_QWORD *)(v0 + 816);
    v2 = *(_QWORD *)(v0 + 792);
  }
  else
  {
    swift_unknownObjectRetain(*(_QWORD *)(v0 + 792));
  }
  v3 = sub_38EFC(v2, *(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 808), v1);
  goto LABEL_10;
}

uint64_t sub_105404()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 992);
  *(_QWORD *)(*(_QWORD *)v1 + 1000) = v0;
  swift_task_dealloc(v3);
  v4 = v2[123];
  v5 = v2[122];
  v6 = v2[121];
  if (v0)
  {
    swift_task_dealloc(v2[123]);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    v7 = sub_105930;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    v7 = sub_1054C8;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1054C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 712);
  v3 = *(_BYTE *)(v0 + 720);
  v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 944))(*(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 872));
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v39 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    v38 = *(_QWORD *)(v0 + 896);
    v7 = *(_QWORD *)(v0 + 872);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = v2;
    v9 = swift_slowAlloc(32, -1);
    v43 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = sub_1062E0();
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
    *(_QWORD *)(v0 + 752) = sub_9DA98(v11, v12, &v43);
    v1 = (_QWORD *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 760, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    v39(v38, v7);
    _os_log_impl(&dword_0, v5, v6, "fetched personalization metadata for batch %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    v13 = v9;
    v2 = v41;
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 952))(*(_QWORD *)(v0 + 896), *(_QWORD *)(v0 + 872));
  }

  v14 = *(_QWORD *)(v0 + 1000);
  v43 = v2;
  v44 = v3;
  sub_6F588();
  if (v14)
  {
    sub_D6874(v2, v3);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 944))(*(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 872));
    swift_errorRetain(v14);
    v15 = swift_errorRetain(v14);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    v20 = *(_QWORD *)(v0 + 920);
    v21 = *(_QWORD *)(v0 + 888);
    v22 = *(_QWORD *)(v0 + 872);
    if (v18)
    {
      v42 = *(_QWORD *)(v0 + 920);
      v23 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v43 = v40;
      *(_DWORD *)v23 = 136446466;
      v24 = sub_1062E0();
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v22, v24);
      *(_QWORD *)(v0 + 736) = sub_9DA98(v25, v26, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      v19(v21, v22);
      *(_WORD *)(v23 + 12) = 2080;
      swift_getErrorValue(v14, v0 + 728, v0 + 688);
      v27 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 704));
      *(_QWORD *)(v0 + 744) = sub_9DA98(v27, v28, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl(&dword_0, v16, v17, "error fetching personalization metadata for batch %{public}s %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      swift_errorRelease(v14);
      sub_1062AC(v1);
      v29 = v42;
    }
    else
    {

      swift_errorRelease(v14);
      swift_errorRelease(v14);
      v19(v21, v22);
      swift_errorRelease(v14);
      sub_1062AC(v1);
      v29 = v20;
    }
    v19(v29, v22);
    **(_QWORD **)(v0 + 776) = 0;
  }
  else
  {
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    v31 = *(_QWORD *)(v0 + 920);
    v32 = *(_QWORD *)(v0 + 872);
    sub_D6874(v2, v3);
    sub_1062AC(v1);
    v30(v31, v32);
  }
  v33 = *(_QWORD *)(v0 + 912);
  v34 = *(_QWORD *)(v0 + 904);
  v35 = *(_QWORD *)(v0 + 896);
  v36 = *(_QWORD *)(v0 + 888);
  swift_task_dealloc(*(_QWORD *)(v0 + 920));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_105930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 1000);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 944))(*(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 872));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v22 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    v24 = *(_QWORD *)(v0 + 920);
    v5 = *(_QWORD *)(v0 + 888);
    v6 = *(_QWORD *)(v0 + 872);
    v7 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(64, -1);
    v25 = v23;
    *(_DWORD *)v7 = 136446466;
    v8 = sub_1062E0();
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
    *(_QWORD *)(v0 + 736) = sub_9DA98(v9, v10, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    v22(v5, v6);
    *(_WORD *)(v7 + 12) = 2080;
    swift_getErrorValue(v1, v0 + 728, v0 + 688);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 704));
    *(_QWORD *)(v0 + 744) = sub_9DA98(v11, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v3, v4, "error fetching personalization metadata for batch %{public}s %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
    sub_1062AC((_QWORD *)(v0 + 16));
    v22(v24, v6);
  }
  else
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 952);
    v14 = *(_QWORD *)(v0 + 920);
    v15 = *(_QWORD *)(v0 + 888);
    v16 = *(_QWORD *)(v0 + 872);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    v13(v15, v16);
    swift_errorRelease(v1);
    sub_1062AC((_QWORD *)(v0 + 16));
    v13(v14, v16);
  }
  **(_QWORD **)(v0 + 776) = 0;
  v17 = *(_QWORD *)(v0 + 912);
  v18 = *(_QWORD *)(v0 + 904);
  v19 = *(_QWORD *)(v0 + 896);
  v20 = *(_QWORD *)(v0 + 888);
  swift_task_dealloc(*(_QWORD *)(v0 + 920));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_105C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  sub_3EB0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_3EB0C(v1, v2);
  sub_850E4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  sub_62F8((_QWORD *)(v0 + 72));
  sub_62F8((_QWORD *)(v0 + 112));
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t type metadata accessor for BooksBackendPersonalizationMetadataService()
{
  return objc_opt_self(_TtC20BooksPersonalization42BooksBackendPersonalizationMetadataService);
}

uint64_t sub_105C84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1F56AC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_70AB4;
  return sub_103BE8(a1);
}

uint64_t sub_105CD4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v9 = v2[6];
  v10 = v2[7];
  v11 = (_QWORD *)swift_task_alloc(dword_1F56BC);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_6AA68;
  return sub_10447C(a1, a2, v5, v6, v7, v8, v9, v10);
}

_QWORD *sub_105D88(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  _BOOL4 v10;
  BOOL v11;
  _QWORD *result;
  BOOL v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  BOOL v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  BOOL v26;
  int64_t v27;
  int64_t v28;

  v6 = a2;
  v7 = a1;
  v8 = 0;
  v9 = a1;
  while (1)
  {
    v10 = v9 <= a2;
    if (a3 > 0)
      v10 = v9 >= a2;
    if (v10)
      break;
    v11 = __OFADD__(v9, a3);
    v9 += a3;
    if (v11)
      v9 = (v9 >> 63) ^ 0x8000000000000000;
    v11 = __OFADD__(v8++, 1);
    if (v11)
    {
      __break(1u);
      break;
    }
  }
  result = (_QWORD *)sub_34550(0, v8, 0);
  v28 = v6;
  if (v8)
  {
    v27 = *(_QWORD *)(a5 + 16);
    while (1)
    {
      v14 = v7 <= v6;
      if (a3 > 0)
        v14 = v7 >= v6;
      if (v14)
        break;
      if (__OFADD__(v7, a3))
        v15 = ((v7 + a3) >> 63) ^ 0x8000000000000000;
      else
        v15 = v7 + a3;
      if (__OFADD__(v7, a4))
        goto LABEL_49;
      if (v27 >= v7 + a4)
        v16 = v7 + a4;
      else
        v16 = v27;
      if (v16 < v7)
        goto LABEL_50;
      if (v7 < 0)
        goto LABEL_51;
      v18 = _swiftEmptyArrayStorage[2];
      v17 = _swiftEmptyArrayStorage[3];
      result = (_QWORD *)swift_bridgeObjectRetain(a5);
      if (v18 >= v17 >> 1)
        result = (_QWORD *)sub_34550(v17 > 1, v18 + 1, 1);
      _swiftEmptyArrayStorage[2] = v18 + 1;
      v19 = &_swiftEmptyArrayStorage[4 * v18];
      v19[4] = a5;
      v19[5] = a5 + 32;
      v19[6] = v7;
      v19[7] = (2 * v16) | 1;
      v7 = v15;
      --v8;
      v6 = v28;
      if (!v8)
        goto LABEL_29;
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  else
  {
    v15 = v7;
LABEL_29:
    v20 = v15 <= v6;
    if (a3 > 0)
      v20 = v15 >= v6;
    if (v20)
      return _swiftEmptyArrayStorage;
    while (1)
    {
      v21 = __OFADD__(v15, a3) ? ((v15 + a3) >> 63) ^ 0x8000000000000000 : v15 + a3;
      if (__OFADD__(v15, a4))
        break;
      if (*(_QWORD *)(a5 + 16) >= v15 + a4)
        v22 = v15 + a4;
      else
        v22 = *(_QWORD *)(a5 + 16);
      if (v22 < v15)
        goto LABEL_53;
      if (v15 < 0)
        goto LABEL_54;
      v24 = _swiftEmptyArrayStorage[2];
      v23 = _swiftEmptyArrayStorage[3];
      result = (_QWORD *)swift_bridgeObjectRetain(a5);
      if (v24 >= v23 >> 1)
        result = (_QWORD *)sub_34550(v23 > 1, v24 + 1, 1);
      _swiftEmptyArrayStorage[2] = v24 + 1;
      v25 = &_swiftEmptyArrayStorage[4 * v24];
      v25[4] = a5;
      v25[5] = a5 + 32;
      v25[6] = v15;
      v25[7] = (2 * v22) | 1;
      v26 = v21 <= v28;
      if (a3 > 0)
        v26 = v21 >= v28;
      v15 = v21;
      if (v26)
        return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_106004(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PersonalizationMetadataRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_106048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;

  v1 = *(_QWORD *)(type metadata accessor for PersonalizationMetadataRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 39) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v0 + v3, v7);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v5));
  v8 = (_QWORD *)(v0 + v6);
  if (*(_QWORD *)(v0 + v6))
    swift_release(v8[1]);
  if (v8[2])
    swift_release(v8[3]);
  v9 = (v6 + 39) & 0xFFFFFFFFFFFFFFF8;
  v10 = ((v9 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  sub_62F8((_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, v10, v2 | 7);
}

uint64_t sub_106148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PersonalizationMetadataRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10618C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(type metadata accessor for PersonalizationMetadataRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v13 = *(_QWORD *)(v1 + 24);
  v14 = *(_QWORD *)(v1 + 16);
  v12 = v1 + v4;
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  v10 = (_QWORD *)swift_task_alloc(dword_1F56D4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_4814;
  return sub_104C04(a1, v14, v13, v12, v6, v7, v8, v9);
}

_QWORD *sub_1062AC(_QWORD *a1)
{
  _s6ClientVwxx(a1);
  return a1;
}

unint64_t sub_1062E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F1490;
  if (!qword_1F1490)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1F1490);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BooksBackendPersonalizationMetadataService.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10636C(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_10636C(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 2u)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t destroy for BooksBackendPersonalizationMetadataService.Errors(uint64_t a1)
{
  return sub_106390(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_106390(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 2u)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t assignWithCopy for BooksBackendPersonalizationMetadataService.Errors(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10636C(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_106390(v5, v6);
  return a1;
}

uint64_t assignWithTake for BooksBackendPersonalizationMetadataService.Errors(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_106390(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for BooksBackendPersonalizationMetadataService.Errors(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BooksBackendPersonalizationMetadataService.Errors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BooksBackendPersonalizationMetadataService.Errors()
{
  return &type metadata for BooksBackendPersonalizationMetadataService.Errors;
}

uint64_t Series.Rationale.targetBook.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v8 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v10 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v8;
  *(_QWORD *)(a1 + 72) = v9;
  sub_40554(v5, v10);
  swift_bridgeObjectRetain(v8);
  return swift_bridgeObjectRetain(v7);
}

uint64_t Series.Rationale.seedBooksByMethodology.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
}

double Series.Rationale.init(targetBook:seedBooksByMethodology:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double result;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  result = *(double *)(a1 + 72);
  *(_QWORD *)a3 = *(_QWORD *)a1;
  *(_BYTE *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = v4;
  *(_BYTE *)(a3 + 24) = v5;
  *(_QWORD *)(a3 + 32) = v6;
  *(_BYTE *)(a3 + 40) = v7;
  *(_QWORD *)(a3 + 48) = v8;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 56);
  *(double *)(a3 + 72) = result;
  *(_QWORD *)(a3 + 80) = a2;
  return result;
}

uint64_t sub_1065A0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0x6F42746567726174;
}

uint64_t sub_1065E4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_108714(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_106608(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_106828();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_106630(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_106828();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Series.Rationale.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v3 = sub_5EDC(&qword_1F56E0);
  v26 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *((_BYTE *)v1 + 8);
  v8 = v1[2];
  v24 = *((unsigned __int8 *)v1 + 24);
  v23 = v1[4];
  v22 = *((unsigned __int8 *)v1 + 40);
  v21 = *((_OWORD *)v1 + 3);
  v9 = v1[8];
  v10 = v1[9];
  v19 = v1[10];
  v20 = v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_106828();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Series.Rationale.CodingKeys, &type metadata for Series.Rationale.CodingKeys, v13, v11, v12);
  v28 = v6;
  v29 = v7;
  v30 = v8;
  v31 = v24;
  v32 = v23;
  v33 = v22;
  v34 = v21;
  v35 = v20;
  v36 = v10;
  v27 = 0;
  v14 = sub_10686C();
  v15 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v3, &type metadata for ScoredBook, v14);
  if (!v15)
  {
    v28 = v19;
    v27 = 1;
    v16 = sub_5EDC(&qword_1F56F8);
    v17 = sub_1068B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v3, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v5, v3);
}

unint64_t sub_106828()
{
  unint64_t result;

  result = qword_1F56E8;
  if (!qword_1F56E8)
  {
    result = swift_getWitnessTable(&unk_199D50, &type metadata for Series.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F56E8);
  }
  return result;
}

unint64_t sub_10686C()
{
  unint64_t result;

  result = qword_1F56F0;
  if (!qword_1F56F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScoredBook, &type metadata for ScoredBook);
    atomic_store(result, (unint64_t *)&qword_1F56F0);
  }
  return result;
}

unint64_t sub_1068B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F5700;
  if (!qword_1F5700)
  {
    v1 = sub_5F68(&qword_1F56F8);
    sub_106934();
    sub_8EAD4(&qword_1F2878, (void (*)(void))sub_7E00C, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1F5700);
  }
  return result;
}

unint64_t sub_106934()
{
  unint64_t result;

  result = qword_1F5708;
  if (!qword_1F5708)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Methodology, &type metadata for Methodology);
    atomic_store(result, (unint64_t *)&qword_1F5708);
  }
  return result;
}

uint64_t Series.Rationale.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = sub_5EDC(&qword_1F5710);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_106828();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Series.Rationale.CodingKeys, &type metadata for Series.Rationale.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v35 = 0;
  v12 = sub_106C78();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, &type metadata for ScoredBook, &v35, v5, &type metadata for ScoredBook, v12);
  v30 = v36;
  v29 = v37;
  v28 = v38;
  v27 = v39;
  v13 = v40;
  v31 = v41;
  v14 = v42;
  v26 = v43;
  v32 = v44;
  v15 = v45;
  v16 = sub_5EDC(&qword_1F56F8);
  v35 = 1;
  v33 = v13;
  v17 = v13;
  LOBYTE(v13) = v31;
  sub_40554(v17, v31);
  v18 = sub_106CBC();
  v34 = v14;
  v19 = v14;
  v20 = v32;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v36, v16, &v35, v5, v16, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v21 = v36;
  v22 = v33;
  sub_40554(v33, v13);
  v23 = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  sub_40568(v22, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v30;
  *(_BYTE *)(a2 + 8) = v29;
  *(_QWORD *)(a2 + 16) = v28;
  *(_BYTE *)(a2 + 24) = v27;
  *(_QWORD *)(a2 + 32) = v22;
  *(_BYTE *)(a2 + 40) = v13;
  v24 = v26;
  *(_QWORD *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v24;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v15;
  *(_QWORD *)(a2 + 80) = v21;
  sub_62F8(a1);
  sub_40568(v22, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_106C78()
{
  unint64_t result;

  result = qword_1F5718;
  if (!qword_1F5718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScoredBook, &type metadata for ScoredBook);
    atomic_store(result, (unint64_t *)&qword_1F5718);
  }
  return result;
}

unint64_t sub_106CBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F5720;
  if (!qword_1F5720)
  {
    v1 = sub_5F68(&qword_1F56F8);
    sub_106D40();
    sub_8EAD4(&qword_1F2890, (void (*)(void))sub_7E050, (uint64_t)&protocol conformance descriptor for <A> [A]);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1F5720);
  }
  return result;
}

unint64_t sub_106D40()
{
  unint64_t result;

  result = qword_1F5728;
  if (!qword_1F5728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Methodology, &type metadata for Methodology);
    atomic_store(result, (unint64_t *)&qword_1F5728);
  }
  return result;
}

uint64_t sub_106D84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Series.Rationale.init(from:)(a1, a2);
}

uint64_t sub_106D98(_QWORD *a1)
{
  return Series.Rationale.encode(to:)(a1);
}

uint64_t Series.rationale.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v9 = v1[9];
  v10 = v1[10];
  v11 = v1[11];
  v12 = v1[12];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v11;
  a1[10] = v12;
  return sub_106E00(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_106E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  if (a7)
  {
    sub_40554(a5, a6);
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a11);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t sub_106E54()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x707954616964656DLL;
  if (*v0 != 1)
    v1 = 0x6C616E6F69746172;
  if (*v0)
    return v1;
  else
    return 0x444965726F7473;
}

uint64_t sub_106EB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10880C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_106EDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_107128();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_106F04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_107128();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Series.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[12];
  int v37;
  char v38;

  v4 = sub_5EDC(&qword_1F5730);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v37 = *((unsigned __int8 *)v1 + 8);
  v9 = v1[2];
  v34 = v1[3];
  v35 = v9;
  v10 = v1[4];
  v32 = v1[5];
  v33 = v10;
  v11 = v1[6];
  v30 = v1[7];
  v31 = v11;
  v12 = v1[8];
  v28 = v1[9];
  v29 = v12;
  v13 = v1[10];
  v26 = v1[11];
  v27 = v13;
  v25 = v1[12];
  v14 = a1[3];
  v15 = a1[4];
  sub_49F4(a1, v14);
  v16 = sub_107128();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Series.CodingKeys, &type metadata for Series.CodingKeys, v16, v14, v15);
  LOBYTE(v36[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, v36, v4);
  if (!v2)
  {
    v18 = v32;
    v17 = v33;
    v20 = v34;
    v19 = v35;
    LOBYTE(v36[0]) = v37;
    v38 = 1;
    v21 = sub_7C1CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v36, &v38, v4, &type metadata for Book.MediaType, v21);
    v36[0] = v19;
    v36[1] = v20;
    v36[2] = v17;
    v36[3] = v18;
    v36[4] = v31;
    v36[5] = v30;
    v36[6] = v29;
    v36[7] = v28;
    v36[8] = v27;
    v36[9] = v26;
    v36[10] = v25;
    v38 = 2;
    v22 = sub_10716C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v36, &v38, v4, &type metadata for Series.Rationale, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_107128()
{
  unint64_t result;

  result = qword_1F5738;
  if (!qword_1F5738)
  {
    result = swift_getWitnessTable(&unk_199D00, &type metadata for Series.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5738);
  }
  return result;
}

unint64_t sub_10716C()
{
  unint64_t result;

  result = qword_1F5740;
  if (!qword_1F5740)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Series.Rationale, &type metadata for Series.Rationale);
    atomic_store(result, (unint64_t *)&qword_1F5740);
  }
  return result;
}

uint64_t Series.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[5];
  uint64_t v24;
  char v25;

  v5 = sub_5EDC(&qword_1F5748);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_107128();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Series.CodingKeys, &type metadata for Series.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    LOBYTE(v23[0]) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(v23, v5);
    v25 = 1;
    v13 = sub_7C254();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, &type metadata for Book.MediaType, &v25, v5, &type metadata for Book.MediaType, v13);
    v15 = v23[0];
    v25 = 2;
    v16 = sub_107374();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v23, &type metadata for Series.Rationale, &v25, v5, &type metadata for Series.Rationale, v16);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v17 = v24;
    v18 = v23[0];
    v19 = v23[1];
    v20 = v23[2];
    v21 = v23[3];
    v22 = v23[4];
    *(_QWORD *)a2 = v12;
    *(_BYTE *)(a2 + 8) = v15;
    *(_OWORD *)(a2 + 16) = v18;
    *(_OWORD *)(a2 + 32) = v19;
    *(_OWORD *)(a2 + 48) = v20;
    *(_OWORD *)(a2 + 64) = v21;
    *(_OWORD *)(a2 + 80) = v22;
    *(_QWORD *)(a2 + 96) = v17;
  }
  return sub_62F8(a1);
}

unint64_t sub_107374()
{
  unint64_t result;

  result = qword_1F5750;
  if (!qword_1F5750)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Series.Rationale, &type metadata for Series.Rationale);
    atomic_store(result, (unint64_t *)&qword_1F5750);
  }
  return result;
}

uint64_t sub_1073B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Series.init(from:)(a1, a2);
}

uint64_t sub_1073CC(_QWORD *a1)
{
  return Series.encode(to:)(a1);
}

uint64_t ScoredSeries.series.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_QWORD *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v12 = *(_QWORD *)(v1 + 88);
  v13 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v13;
  return sub_106E00(v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13);
}

double ScoredSeries.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 104);
}

uint64_t initializeWithCopy for Series(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v5 = (_QWORD *)(a2 + 48);
    v6 = *(unsigned __int8 *)(a2 + 56);
    if (v6 == 255)
    {
      *(_QWORD *)(a1 + 48) = *v5;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    }
    else
    {
      v9 = *v5;
      *(_QWORD *)(a1 + 48) = *v5;
      *(_BYTE *)(a1 + 56) = v6 & 1;
      swift_bridgeObjectRetain(v9);
    }
    v10 = *(_QWORD *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a1 + 72) = v10;
    v12 = *(_QWORD *)(a2 + 88);
    v13 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v12;
    *(_QWORD *)(a1 + 96) = v13;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
  }
  return a1;
}

uint64_t assignWithCopy for Series(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 + 16;
  v5 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v7 = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v7;
      v8 = (uint64_t *)(a1 + 48);
      v9 = (uint64_t *)(a2 + 48);
      v10 = *(unsigned __int8 *)(a2 + 56);
      if (*(unsigned __int8 *)(a1 + 56) == 255)
      {
        if (v10 == 255)
        {
          v20 = *v9;
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          *v8 = v20;
        }
        else
        {
          v30 = *v9;
          *(_QWORD *)(a1 + 48) = *v9;
          *(_BYTE *)(a1 + 56) = v10 & 1;
          swift_bridgeObjectRetain(v30);
        }
      }
      else if (v10 == 255)
      {
        sub_42750((_QWORD *)(a1 + 48));
        v11 = *(_BYTE *)(a2 + 56);
        *v8 = *v9;
        *(_BYTE *)(a1 + 56) = v11;
      }
      else
      {
        v25 = *v9;
        *(_QWORD *)(a1 + 48) = *v9;
        *(_BYTE *)(a1 + 56) = v10 & 1;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRelease();
      }
      v31 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v32 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v33 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_107794(a1 + 16);
      v16 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)v4 = *(_OWORD *)v5;
      *(_OWORD *)(v4 + 16) = v16;
      v18 = *(_OWORD *)(v5 + 48);
      v17 = *(_OWORD *)(v5 + 64);
      v19 = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(v4 + 80) = *(_QWORD *)(v5 + 80);
      *(_OWORD *)(v4 + 48) = v18;
      *(_OWORD *)(v4 + 64) = v17;
      *(_OWORD *)(v4 + 32) = v19;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v12;
    v13 = (uint64_t *)(a2 + 48);
    v14 = *(unsigned __int8 *)(a2 + 56);
    if (v14 == 255)
    {
      v15 = *v13;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v15;
    }
    else
    {
      v26 = *v13;
      *(_QWORD *)(a1 + 48) = *v13;
      *(_BYTE *)(a1 + 56) = v14 & 1;
      swift_bridgeObjectRetain(v26);
    }
    v27 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v27;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v28 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v28;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v29 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v29;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 32) = v21;
    v22 = *(_OWORD *)(a2 + 48);
    v23 = *(_OWORD *)(a2 + 64);
    v24 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 64) = v23;
    *(_OWORD *)(a1 + 80) = v24;
    *(_OWORD *)(a1 + 48) = v22;
  }
  return a1;
}

uint64_t sub_107794(uint64_t a1)
{
  destroy for Series.Rationale(a1);
  return a1;
}

__n128 initializeWithTake for Series(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for Series(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = a1 + 16;
  v4 = a2 + 16;
  if (*(_QWORD *)(a1 + 64))
  {
    v6 = *(_QWORD *)(a2 + 64);
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      v7 = (_QWORD *)(a1 + 48);
      v8 = (_QWORD *)(a2 + 48);
      if (*(unsigned __int8 *)(a1 + 56) != 255)
      {
        v9 = *(unsigned __int8 *)(a2 + 56);
        if (v9 != 255)
        {
          *(_QWORD *)(a1 + 48) = *v8;
          *(_BYTE *)(a1 + 56) = v9 & 1;
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        sub_42750((_QWORD *)(a1 + 48));
      }
      *v7 = *v8;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_10:
      *(_QWORD *)(a1 + 64) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_107794(a1 + 16);
  }
  v10 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(v3 + 48) = v10;
  *(_OWORD *)(v3 + 64) = *(_OWORD *)(v4 + 64);
  *(_QWORD *)(v3 + 80) = *(_QWORD *)(v4 + 80);
  v11 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)v3 = *(_OWORD *)v4;
  *(_OWORD *)(v3 + 16) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for Series(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Series(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Series()
{
  return &type metadata for Series;
}

uint64_t destroy for Series.Rationale(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) != 255)
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
}

uint64_t initializeWithCopy for Series.Rationale(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (_QWORD *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 == 255)
  {
    *(_QWORD *)(a1 + 32) = *v4;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    v6 = *v4;
    *(_QWORD *)(a1 + 32) = *v4;
    *(_BYTE *)(a1 + 40) = v5 & 1;
    swift_bridgeObjectRetain(v6);
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for Series.Rationale(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a1 + 32;
  v6 = (uint64_t *)(a2 + 32);
  v7 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v7 == 255)
    {
      v9 = *v6;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)v5 = v9;
    }
    else
    {
      v11 = *v6;
      *(_QWORD *)(a1 + 32) = *v6;
      *(_BYTE *)(a1 + 40) = v7 & 1;
      swift_bridgeObjectRetain(v11);
    }
  }
  else if (v7 == 255)
  {
    sub_42750((_QWORD *)(a1 + 32));
    v8 = *((_BYTE *)v6 + 8);
    *(_QWORD *)v5 = *v6;
    *(_BYTE *)(v5 + 8) = v8;
  }
  else
  {
    v10 = *v6;
    *(_QWORD *)(a1 + 32) = *v6;
    *(_BYTE *)(a1 + 40) = v7 & 1;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for Series.Rationale(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for Series.Rationale(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = a1 + 32;
  v5 = a2 + 32;
  if (*(unsigned __int8 *)(a1 + 40) != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 != 255)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v5;
      *(_BYTE *)(a1 + 40) = v6 & 1;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_42750((_QWORD *)(a1 + 32));
  }
  *(_QWORD *)v4 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Series.Rationale(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Series.Rationale(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Series.Rationale()
{
  return &type metadata for Series.Rationale;
}

uint64_t _s20BooksPersonalization6SeriesVwxx_0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 64);
  if (v1)
  {
    v2 = result;
    if (*(unsigned __int8 *)(result + 56) != 255)
      swift_bridgeObjectRelease(*(_QWORD *)(result + 48));
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 80));
    return swift_bridgeObjectRelease(*(_QWORD *)(v2 + 96));
  }
  return result;
}

uint64_t initializeWithCopy for ScoredSeries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 64);
  if (v4)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v5 = (_QWORD *)(a2 + 48);
    v6 = *(unsigned __int8 *)(a2 + 56);
    if (v6 == 255)
    {
      *(_QWORD *)(a1 + 48) = *v5;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    }
    else
    {
      v9 = *v5;
      *(_QWORD *)(a1 + 48) = *v5;
      *(_BYTE *)(a1 + 56) = v6 & 1;
      swift_bridgeObjectRetain(v9);
    }
    v10 = *(_QWORD *)(a2 + 72);
    v11 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 64) = v4;
    *(_QWORD *)(a1 + 72) = v10;
    v12 = *(_QWORD *)(a2 + 88);
    v13 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 80) = v11;
    *(_QWORD *)(a1 + 88) = v12;
    *(_QWORD *)(a1 + 96) = v13;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for ScoredSeries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 + 16;
  v5 = a2 + 16;
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(a1 + 64))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v7 = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 32) = v7;
      v8 = (uint64_t *)(a1 + 48);
      v9 = (uint64_t *)(a2 + 48);
      v10 = *(unsigned __int8 *)(a2 + 56);
      if (*(unsigned __int8 *)(a1 + 56) == 255)
      {
        if (v10 == 255)
        {
          v20 = *v9;
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          *v8 = v20;
        }
        else
        {
          v30 = *v9;
          *(_QWORD *)(a1 + 48) = *v9;
          *(_BYTE *)(a1 + 56) = v10 & 1;
          swift_bridgeObjectRetain(v30);
        }
      }
      else if (v10 == 255)
      {
        sub_42750((_QWORD *)(a1 + 48));
        v11 = *(_BYTE *)(a2 + 56);
        *v8 = *v9;
        *(_BYTE *)(a1 + 56) = v11;
      }
      else
      {
        v25 = *v9;
        *(_QWORD *)(a1 + 48) = *v9;
        *(_BYTE *)(a1 + 56) = v10 & 1;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRelease();
      }
      v31 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 64) = v31;
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      v32 = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 80) = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v33 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v33;
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_107794(a1 + 16);
      v16 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)v4 = *(_OWORD *)v5;
      *(_OWORD *)(v4 + 16) = v16;
      v18 = *(_OWORD *)(v5 + 48);
      v17 = *(_OWORD *)(v5 + 64);
      v19 = *(_OWORD *)(v5 + 32);
      *(_QWORD *)(v4 + 80) = *(_QWORD *)(v5 + 80);
      *(_OWORD *)(v4 + 48) = v18;
      *(_OWORD *)(v4 + 64) = v17;
      *(_OWORD *)(v4 + 32) = v19;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v12;
    v13 = (uint64_t *)(a2 + 48);
    v14 = *(unsigned __int8 *)(a2 + 56);
    if (v14 == 255)
    {
      v15 = *v13;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
      *(_QWORD *)(a1 + 48) = v15;
    }
    else
    {
      v26 = *v13;
      *(_QWORD *)(a1 + 48) = *v13;
      *(_BYTE *)(a1 + 56) = v14 & 1;
      swift_bridgeObjectRetain(v26);
    }
    v27 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v27;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    v28 = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 80) = v28;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v29 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v29;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
  }
  else
  {
    v21 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 32) = v21;
    v22 = *(_OWORD *)(a2 + 48);
    v23 = *(_OWORD *)(a2 + 64);
    v24 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 64) = v23;
    *(_OWORD *)(a1 + 80) = v24;
    *(_OWORD *)(a1 + 48) = v22;
  }
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

__n128 initializeWithTake for ScoredSeries(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for ScoredSeries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  __int128 v10;
  __int128 v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = a1 + 16;
  v5 = a2 + 16;
  if (*(_QWORD *)(a1 + 64))
  {
    v6 = *(_QWORD *)(a2 + 64);
    if (v6)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      v7 = (_QWORD *)(a1 + 48);
      v8 = (_QWORD *)(a2 + 48);
      if (*(unsigned __int8 *)(a1 + 56) != 255)
      {
        v9 = *(unsigned __int8 *)(a2 + 56);
        if (v9 != 255)
        {
          *(_QWORD *)(a1 + 48) = *v8;
          *(_BYTE *)(a1 + 56) = v9 & 1;
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        sub_42750((_QWORD *)(a1 + 48));
      }
      *v7 = *v8;
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_10:
      *(_QWORD *)(a1 + 64) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_107794(a1 + 16);
  }
  v10 = *(_OWORD *)(v5 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
  *(_OWORD *)(v4 + 48) = v10;
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(v5 + 80);
  v11 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = v11;
LABEL_11:
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScoredSeries(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScoredSeries(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)(result + 64) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScoredSeries()
{
  return &type metadata for ScoredSeries;
}

uint64_t storeEnumTagSinglePayload for Series.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_108418 + 4 * byte_199A95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10844C + 4 * byte_199A90[v4]))();
}

uint64_t sub_10844C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_108454(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10845CLL);
  return result;
}

uint64_t sub_108468(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x108470);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_108474(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10847C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Series.CodingKeys()
{
  return &type metadata for Series.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Series.Rationale.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1084E4 + 4 * byte_199A9F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_108518 + 4 * byte_199A9A[v4]))();
}

uint64_t sub_108518(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_108520(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x108528);
  return result;
}

uint64_t sub_108534(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10853CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_108540(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_108548(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Series.Rationale.CodingKeys()
{
  return &type metadata for Series.Rationale.CodingKeys;
}

unint64_t sub_108568()
{
  unint64_t result;

  result = qword_1F5758;
  if (!qword_1F5758)
  {
    result = swift_getWitnessTable(&unk_199C20, &type metadata for Series.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5758);
  }
  return result;
}

unint64_t sub_1085B0()
{
  unint64_t result;

  result = qword_1F5760;
  if (!qword_1F5760)
  {
    result = swift_getWitnessTable(&unk_199CD8, &type metadata for Series.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5760);
  }
  return result;
}

unint64_t sub_1085F8()
{
  unint64_t result;

  result = qword_1F5768;
  if (!qword_1F5768)
  {
    result = swift_getWitnessTable(&unk_199C48, &type metadata for Series.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5768);
  }
  return result;
}

unint64_t sub_108640()
{
  unint64_t result;

  result = qword_1F5770;
  if (!qword_1F5770)
  {
    result = swift_getWitnessTable(&unk_199C70, &type metadata for Series.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5770);
  }
  return result;
}

unint64_t sub_108688()
{
  unint64_t result;

  result = qword_1F5778;
  if (!qword_1F5778)
  {
    result = swift_getWitnessTable(&unk_199B90, &type metadata for Series.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5778);
  }
  return result;
}

unint64_t sub_1086D0()
{
  unint64_t result;

  result = qword_1F5780;
  if (!qword_1F5780)
  {
    result = swift_getWitnessTable(&unk_199BB8, &type metadata for Series.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5780);
  }
  return result;
}

uint64_t sub_108714(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6F42746567726174 && a2 == 0xEA00000000006B6FLL)
  {
    v5 = 0xEA00000000006B6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F42746567726174, 0xEA00000000006B6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000000001A2710)
  {
    swift_bridgeObjectRelease(0x80000000001A2710);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000000001A2710, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10880C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x444965726F7473 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444965726F7473, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x707954616964656DLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707954616964656DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6C616E6F69746172 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E6F69746172, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

BOOL static CollectionMembershipInfo.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void CollectionMembershipInfo.hash(into:)()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

uint64_t sub_1089C8()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E756F63;
  else
    return 0x7865646E69;
}

uint64_t sub_1089F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10C734(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_108A18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_108B88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_108A40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_108B88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionMembershipInfo.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;

  v4 = sub_5EDC(&qword_1F5790);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_108B88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionMembershipInfo.CodingKeys, &type metadata for CollectionMembershipInfo.CodingKeys, v11, v9, v10);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v16, v4);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v15, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_108B88()
{
  unint64_t result;

  result = qword_1F5798;
  if (!qword_1F5798)
  {
    result = swift_getWitnessTable(&unk_19A3AC, &type metadata for CollectionMembershipInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5798);
  }
  return result;
}

Swift::Int CollectionMembershipInfo.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4, 0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t CollectionMembershipInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_5EDC(&qword_1F57A0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_108B88();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionMembershipInfo.CodingKeys, &type metadata for CollectionMembershipInfo.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
  return sub_62F8(a1);
}

Swift::Int sub_108D6C(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt v3;
  _QWORD v5[9];

  v2 = *v1;
  v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_108DC0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return CollectionMembershipInfo.init(from:)(a1, a2);
}

uint64_t sub_108DD4(_QWORD *a1)
{
  return CollectionMembershipInfo.encode(to:)(a1);
}

uint64_t StoreBook.Origin.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = sub_5EDC(&qword_1F1310);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v20 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for StoreBook.Origin(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10A9E4(v2, (uint64_t)v16);
  if (swift_getEnumCaseMultiPayload(v16, v14) == 1)
  {
    sub_10AA28((uint64_t)v16, (uint64_t)v9);
    Hasher._combine(_:)(1uLL);
    sub_418BC((uint64_t)v9, (uint64_t)v7, &qword_1F1310);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v7, v10);
      Hasher._combine(_:)(1u);
      v19 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(a1, v10, v19);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    return sub_417D8((uint64_t)v9, &qword_1F1310);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    Hasher._combine(_:)(0);
    v17 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v10, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

Swift::Int StoreBook.Origin.hashValue.getter()
{
  return sub_10988C((void (*)(_QWORD *))StoreBook.Origin.hash(into:));
}

Swift::Int sub_10903C(uint64_t a1, uint64_t a2)
{
  return sub_1098D8(a1, a2, (void (*)(_QWORD *))StoreBook.Origin.hash(into:));
}

Swift::Int sub_10904C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_109928(a1, a2, a3, (void (*)(_QWORD *))StoreBook.Origin.hash(into:));
}

uint64_t StoreBook.origin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_418BC(v1, a1, &qword_1F3AC0);
}

uint64_t StoreBook.storeID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StoreBook(0) + 20));
}

uint64_t StoreBook.highWaterMarkReadingProgress.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for StoreBook(0) + 24));
}

__n128 StoreBook.finishedInfo.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 *v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = (__n128 *)(v1 + *(int *)(type metadata accessor for StoreBook(0) + 28));
  v4 = v3[1].n128_u8[0];
  result = *v3;
  *a1 = *v3;
  a1[1].n128_u8[0] = v4;
  return result;
}

double StoreBook.lastEngagedIntervalSinceReferenceDate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for StoreBook(0) + 32));
}

double StoreBook.finishedIntervalSinceReferenceDate.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for StoreBook(0) + 36));
}

__n128 StoreBook.wantToReadInfo.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 *v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = (__n128 *)(v1 + *(int *)(type metadata accessor for StoreBook(0) + 40));
  v4 = v3[1].n128_u8[0];
  result = *v3;
  *a1 = *v3;
  a1[1].n128_u8[0] = v4;
  return result;
}

__n128 StoreBook.samplesInfo.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 *v3;
  unsigned __int8 v4;
  __n128 result;

  v3 = (__n128 *)(v1 + *(int *)(type metadata accessor for StoreBook(0) + 44));
  v4 = v3[1].n128_u8[0];
  result = *v3;
  *a1 = *v3;
  a1[1].n128_u8[0] = v4;
  return result;
}

int *StoreBook.init(storeID:purchaseDate:highWaterMarkReadingProgress:finishedInfo:wantToReadInfo:lastEngagedIntervalSinceReferenceDate:finishedIntervalSinceReferenceDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int *result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v15 = *a5;
  v16 = a5[1];
  v17 = *((_BYTE *)a5 + 16);
  v18 = *a6;
  v19 = a6[1];
  v20 = *((_BYTE *)a6 + 16);
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a7, a2, v21);
  v22 = type metadata accessor for StoreBook.Origin(0);
  swift_storeEnumTagMultiPayload(a7, v22, 0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(a7, 0, 1, v22);
  result = (int *)type metadata accessor for StoreBook(0);
  *(_QWORD *)(a7 + result[5]) = a1;
  v24 = a7 + result[6];
  *(_QWORD *)v24 = a3;
  *(_BYTE *)(v24 + 8) = a4 & 1;
  v25 = a7 + result[7];
  *(_QWORD *)v25 = v15;
  *(_QWORD *)(v25 + 8) = v16;
  *(_BYTE *)(v25 + 16) = v17;
  v26 = a7 + result[10];
  *(_QWORD *)v26 = v18;
  *(_QWORD *)(v26 + 8) = v19;
  *(_BYTE *)(v26 + 16) = v20;
  v27 = a7 + result[11];
  *(_QWORD *)v27 = 0;
  *(_QWORD *)(v27 + 8) = 0;
  *(_BYTE *)(v27 + 16) = 1;
  *(double *)(a7 + result[8]) = a8;
  *(double *)(a7 + result[9]) = a9;
  return result;
}

int *StoreBook.init(storeID:creationDate:highWaterMarkReadingProgress:finishedInfo:wantToReadInfo:lastEngagedIntervalSinceReferenceDate:finishedIntervalSinceReferenceDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>)
{
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int *result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v14 = *a5;
  v15 = a5[1];
  v16 = *((_BYTE *)a5 + 16);
  v17 = *a6;
  v18 = a6[1];
  v19 = *((_BYTE *)a6 + 16);
  sub_10AA28(a2, a7);
  v20 = type metadata accessor for StoreBook.Origin(0);
  swift_storeEnumTagMultiPayload(a7, v20, 1);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a7, 0, 1, v20);
  result = (int *)type metadata accessor for StoreBook(0);
  *(_QWORD *)(a7 + result[5]) = a1;
  v22 = a7 + result[6];
  *(_QWORD *)v22 = a3;
  *(_BYTE *)(v22 + 8) = a4 & 1;
  v23 = a7 + result[7];
  *(_QWORD *)v23 = v14;
  *(_QWORD *)(v23 + 8) = v15;
  *(_BYTE *)(v23 + 16) = v16;
  v24 = a7 + result[10];
  *(_QWORD *)v24 = v17;
  *(_QWORD *)(v24 + 8) = v18;
  *(_BYTE *)(v24 + 16) = v19;
  v25 = a7 + result[11];
  *(_QWORD *)v25 = 0;
  *(_QWORD *)(v25 + 8) = 0;
  *(_BYTE *)(v25 + 16) = 1;
  *(double *)(a7 + result[8]) = a8;
  *(double *)(a7 + result[9]) = a9;
  return result;
}

int *StoreBook.init(storeID:finishedInfo:wantToReadInfo:samplesInfo:lastEngagedIntervalSinceReferenceDate:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v9 = *a2;
  v10 = a2[1];
  v11 = *((_BYTE *)a2 + 16);
  v12 = *a3;
  v13 = a3[1];
  v14 = *((_BYTE *)a3 + 16);
  v15 = *a4;
  v16 = a4[1];
  v23 = *((_BYTE *)a4 + 16);
  v17 = type metadata accessor for StoreBook.Origin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a5, 1, 1, v17);
  result = (int *)type metadata accessor for StoreBook(0);
  *(_QWORD *)(a5 + result[5]) = a1;
  v19 = a5 + result[6];
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = a5 + result[7];
  *(_QWORD *)v20 = v9;
  *(_QWORD *)(v20 + 8) = v10;
  *(_BYTE *)(v20 + 16) = v11;
  v21 = a5 + result[10];
  *(_QWORD *)v21 = v12;
  *(_QWORD *)(v21 + 8) = v13;
  *(_BYTE *)(v21 + 16) = v14;
  v22 = a5 + result[11];
  *(_QWORD *)v22 = v15;
  *(_QWORD *)(v22 + 8) = v16;
  *(_BYTE *)(v22 + 16) = v23;
  *(double *)(a5 + result[8]) = a6;
  *(_QWORD *)(a5 + result[9]) = 0xBFF0000000000000;
  return result;
}

int *StoreBook.init(storeID:finishedInfo:wantToReadInfo:samplesInfo:finishedIntervalSinceReferenceDate:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v9 = *a2;
  v10 = a2[1];
  v11 = *((_BYTE *)a2 + 16);
  v12 = *a3;
  v13 = a3[1];
  v14 = *((_BYTE *)a3 + 16);
  v15 = *a4;
  v16 = a4[1];
  v23 = *((_BYTE *)a4 + 16);
  v17 = type metadata accessor for StoreBook.Origin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a5, 1, 1, v17);
  result = (int *)type metadata accessor for StoreBook(0);
  *(_QWORD *)(a5 + result[5]) = a1;
  v19 = a5 + result[6];
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = a5 + result[7];
  *(_QWORD *)v20 = v9;
  *(_QWORD *)(v20 + 8) = v10;
  *(_BYTE *)(v20 + 16) = v11;
  v21 = a5 + result[10];
  *(_QWORD *)v21 = v12;
  *(_QWORD *)(v21 + 8) = v13;
  *(_BYTE *)(v21 + 16) = v14;
  v22 = a5 + result[11];
  *(_QWORD *)v22 = v15;
  *(_QWORD *)(v22 + 8) = v16;
  *(_BYTE *)(v22 + 16) = v23;
  *(_QWORD *)(a5 + result[8]) = 0xBFF0000000000000;
  *(double *)(a5 + result[9]) = a6;
  return result;
}

void StoreBook.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  uint64_t v15;
  Swift::UInt v16;
  Swift::UInt v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::UInt v22;
  uint64_t v23;
  Swift::UInt v24;
  Swift::UInt v25;
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for StoreBook.Origin(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F3AC0);
  __chkstk_darwin(v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_418BC(v2, (uint64_t)v10, &qword_1F3AC0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_10AA84((uint64_t)v10, (uint64_t)v7);
    Hasher._combine(_:)(1u);
    StoreBook.Origin.hash(into:)(a1);
    sub_10AAC8((uint64_t)v7);
  }
  v11 = (int *)type metadata accessor for StoreBook(0);
  Hasher._combine(_:)(*(_QWORD *)(v2 + v11[5]));
  v12 = v2 + v11[6];
  if (*(_BYTE *)(v12 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v13 = *(_QWORD *)v12;
    Hasher._combine(_:)(1u);
    if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v14 = v13;
    else
      v14 = 0;
    Hasher._combine(_:)(v14);
  }
  v15 = v2 + v11[7];
  if (*(_BYTE *)(v15 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v17 = *(_QWORD *)v15;
    v16 = *(_QWORD *)(v15 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    Hasher._combine(_:)(v16);
  }
  if ((*(_QWORD *)(v2 + v11[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v18 = *(_QWORD *)(v2 + v11[8]);
  else
    v18 = 0;
  Hasher._combine(_:)(v18);
  if ((*(_QWORD *)(v2 + v11[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v19 = *(_QWORD *)(v2 + v11[9]);
  else
    v19 = 0;
  Hasher._combine(_:)(v19);
  v20 = v2 + v11[10];
  if (*(_BYTE *)(v20 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v22);
    Hasher._combine(_:)(v21);
  }
  v23 = v2 + v11[11];
  if (*(_BYTE *)(v23 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v25 = *(_QWORD *)v23;
    v24 = *(_QWORD *)(v23 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v25);
    Hasher._combine(_:)(v24);
  }
}

Swift::Int StoreBook.hashValue.getter()
{
  return sub_10988C((void (*)(_QWORD *))StoreBook.hash(into:));
}

Swift::Int sub_10988C(void (*a1)(_QWORD *))
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  a1(v3);
  return Hasher._finalize()();
}

Swift::Int sub_1098CC(uint64_t a1, uint64_t a2)
{
  return sub_1098D8(a1, a2, (void (*)(_QWORD *))StoreBook.hash(into:));
}

Swift::Int sub_1098D8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  a3(v5);
  return Hasher._finalize()();
}

Swift::Int sub_10991C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_109928(a1, a2, a3, (void (*)(_QWORD *))StoreBook.hash(into:));
}

Swift::Int sub_109928(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  a4(v6);
  return Hasher._finalize()();
}

void static StoreBookCollectionOptions.sampled.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static StoreBookCollectionOptions.wantToRead.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void static StoreBookCollectionOptions.purchased.getter(_QWORD *a1@<X8>)
{
  *a1 = 4;
}

void static StoreBookCollectionOptions.downloadedViaFamilySharing.getter(_QWORD *a1@<X8>)
{
  *a1 = 8;
}

void static StoreBookCollectionOptions.finished.getter(_QWORD *a1@<X8>)
{
  *a1 = 16;
}

void sub_1099A0()
{
  qword_1F5788 = 12;
}

uint64_t static StoreBookCollectionOptions.owned.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_1F0108 != -1)
    result = swift_once(&qword_1F0108, sub_1099A0);
  *a1 = qword_1F5788;
  return result;
}

_QWORD *sub_109A14@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_109A28@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_109A3C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_109A50(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_109A80@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_109AAC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_109AD0(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_109AE4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_109AF8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_109B0C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_109B20(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_109B34(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_109B48(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_109B5C()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_109B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_109B84(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_QWORD *sub_109B98@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

BOOL sub_109BA8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t StoreBookForDeduplication.title.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t StoreBookForDeduplication.author.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
  return v1;
}

void __swiftcall StoreBookForDeduplication.init(storeID:title:author:)(BooksPersonalization::StoreBookForDeduplication *__return_ptr retstr, Swift::UInt64 storeID, Swift::String title, Swift::String author)
{
  retstr->storeID = storeID;
  retstr->title = title;
  retstr->author = author;
}

uint64_t StoreBookForDeduplication.hash(into:)(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  Hasher._combine(_:)(*v1);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  return swift_bridgeObjectRelease(v6);
}

Swift::Int StoreBookForDeduplication.hashValue.getter()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  _QWORD v7[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)(v7, 0);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

Swift::Int sub_109D44(uint64_t a1)
{
  Swift::UInt64 *v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  _QWORD v8[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t NextInSeriesProcessorMetadata.isOwned.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

void __swiftcall NextInSeriesProcessorMetadata.init(storeID:seriesID:seriesSortKey:isOwned:)(BooksPersonalization::NextInSeriesProcessorMetadata *__return_ptr retstr, Swift::UInt64 storeID, Swift::UInt64_optional seriesID, Swift::Int64_optional seriesSortKey, Swift::Bool isOwned)
{
  retstr->storeID = storeID;
  retstr->seriesID.value = seriesID.value;
  retstr->seriesID.is_nil = seriesID.is_nil;
  retstr->seriesSortKey.value = seriesSortKey.value;
  retstr->seriesSortKey.is_nil = seriesSortKey.is_nil;
  retstr->isOwned = isOwned;
}

void NextInSeriesProcessorMetadata.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt8 v5;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(unsigned __int8 *)(v0 + 32);
  v5 = *(_BYTE *)(v0 + 33);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if (v2 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (!v4)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v4)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v3);
LABEL_6:
  Hasher._combine(_:)(v5);
}

Swift::Int NextInSeriesProcessorMetadata.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  int v3;
  Swift::UInt64 v4;
  int v5;
  Swift::UInt8 v6;
  _QWORD v8[9];

  v2 = *(_QWORD *)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(unsigned __int8 *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v5 = *(unsigned __int8 *)(v0 + 32);
  v6 = *(_BYTE *)(v0 + 33);
  Hasher.init(_seed:)(v8, 0);
  Hasher._combine(_:)(v2);
  if (v3 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    if (!v5)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v5)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v4);
LABEL_6:
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

Swift::Int sub_109F74(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt64 v5;
  int v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)v1;
  v2 = *(_QWORD *)(v1 + 8);
  v4 = *(unsigned __int8 *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(unsigned __int8 *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 33);
  Hasher.init(_seed:)(v9, a1);
  Hasher._combine(_:)(v3);
  if (v4 != 1)
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    if (!v6)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    goto LABEL_6;
  }
  Hasher._combine(_:)(0);
  if (v6)
    goto LABEL_5;
LABEL_3:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5);
LABEL_6:
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t _s20BooksPersonalization25StoreBookForDeduplicationV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t result;

  if (*a1 != *a2)
    return 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  v12 = v4 == v8 && v5 == v9;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v8, v9, 0), result = 0, (v13 & 1) != 0))
  {
    if (v6 == v10 && v7 == v11)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v11, 0);
  }
  return result;
}

uint64_t _s20BooksPersonalization29NextInSeriesProcessorMetadataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v4;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 32))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
      v4 = *(_BYTE *)(a2 + 32);
    else
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  return *(unsigned __int8 *)(a1 + 33) ^ *(unsigned __int8 *)(a2 + 33) ^ 1u;
}

uint64_t _s20BooksPersonalization9StoreBookV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  int *v23;
  uint64_t v24;
  double *v25;
  char v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  char v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = type metadata accessor for StoreBook.Origin(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v43 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5EDC(&qword_1F5998);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5EDC(&qword_1F3AC0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v42 - v17;
  v44 = a1;
  sub_418BC(a1, (uint64_t)&v42 - v17, &qword_1F3AC0);
  v45 = a2;
  sub_418BC(a2, (uint64_t)v16, &qword_1F3AC0);
  v19 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_418BC((uint64_t)v18, (uint64_t)v9, &qword_1F3AC0);
  sub_418BC((uint64_t)v16, v19, &qword_1F3AC0);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v9, 1, v4) == 1)
  {
    sub_417D8((uint64_t)v16, &qword_1F3AC0);
    sub_417D8((uint64_t)v18, &qword_1F3AC0);
    if (v20(v19, 1, v4) == 1)
    {
      sub_417D8((uint64_t)v9, &qword_1F3AC0);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  sub_418BC((uint64_t)v9, (uint64_t)v13, &qword_1F3AC0);
  if (v20(v19, 1, v4) == 1)
  {
    sub_417D8((uint64_t)v16, &qword_1F3AC0);
    sub_417D8((uint64_t)v18, &qword_1F3AC0);
    sub_10AAC8((uint64_t)v13);
LABEL_6:
    sub_417D8((uint64_t)v9, &qword_1F5998);
    return 0;
  }
  v21 = v43;
  sub_10AA84(v19, v43);
  v22 = _s20BooksPersonalization9StoreBookV6OriginO2eeoiySbAE_AEtFZ_0((uint64_t)v13, v21);
  sub_10AAC8(v21);
  sub_417D8((uint64_t)v16, &qword_1F3AC0);
  sub_417D8((uint64_t)v18, &qword_1F3AC0);
  sub_10AAC8((uint64_t)v13);
  sub_417D8((uint64_t)v9, &qword_1F3AC0);
  if ((v22 & 1) == 0)
    return 0;
LABEL_8:
  v23 = (int *)type metadata accessor for StoreBook(0);
  if (*(_QWORD *)(v44 + v23[5]) != *(_QWORD *)(v45 + v23[5]))
    return 0;
  v24 = v23[6];
  v25 = (double *)(v44 + v24);
  v26 = *(_BYTE *)(v44 + v24 + 8);
  v27 = (double *)(v45 + v24);
  v28 = *(unsigned __int8 *)(v45 + v24 + 8);
  if ((v26 & 1) != 0)
  {
    if (!(_DWORD)v28)
      return v28;
  }
  else
  {
    if (*v25 != *v27)
      LOBYTE(v28) = 1;
    if ((v28 & 1) != 0)
      return 0;
  }
  v29 = v23[7];
  v30 = (_QWORD *)(v44 + v29);
  v31 = (_QWORD *)(v45 + v29);
  v32 = *(_BYTE *)(v45 + v29 + 16);
  if ((*(_BYTE *)(v44 + v29 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(v45 + v29 + 16))
      return 0;
  }
  else
  {
    v28 = 0;
    if ((v32 & 1) != 0 || *v30 != *v31 || v30[1] != v31[1])
      return v28;
  }
  if (*(double *)(v44 + v23[8]) != *(double *)(v45 + v23[8]) || *(double *)(v44 + v23[9]) != *(double *)(v45 + v23[9]))
    return 0;
  v33 = v23[10];
  v34 = (_QWORD *)(v44 + v33);
  v35 = (_QWORD *)(v45 + v33);
  v36 = *(_BYTE *)(v45 + v33 + 16);
  if ((*(_BYTE *)(v44 + v33 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(v45 + v33 + 16))
      return 0;
  }
  else
  {
    v28 = 0;
    if ((v36 & 1) != 0 || *v34 != *v35 || v34[1] != v35[1])
      return v28;
  }
  v37 = v23[11];
  v38 = (_QWORD *)(v44 + v37);
  v39 = *(_BYTE *)(v44 + v37 + 16);
  v40 = v45 + v37;
  if ((v39 & 1) != 0)
  {
    if ((*(_BYTE *)(v40 + 16) & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(v40 + 16) & 1) != 0 || *v38 != *(_QWORD *)v40 || v38[1] != *(_QWORD *)(v40 + 8))
  {
    return 0;
  }
  return 1;
}

uint64_t _s20BooksPersonalization9StoreBookV6OriginO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v46 = a1;
  v47 = a2;
  v43 = sub_5EDC(&qword_1F59A0);
  __chkstk_darwin(v43);
  v3 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5EDC(&qword_1F1310);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v42 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v44 = v10;
  v45 = v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  v17 = type metadata accessor for StoreBook.Origin(0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v42 - v21;
  v23 = sub_5EDC(&qword_1F59A8);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (uint64_t)&v26[*(int *)(v24 + 48)];
  sub_10A9E4(v46, (uint64_t)v26);
  sub_10A9E4(v47, v27);
  if (swift_getEnumCaseMultiPayload(v26, v17) == 1)
  {
    v28 = v43;
    sub_10A9E4((uint64_t)v26, (uint64_t)v20);
    if (swift_getEnumCaseMultiPayload(v27, v17) == 1)
    {
      v29 = (uint64_t)v9;
      sub_10AA28(v27, (uint64_t)v9);
      v30 = (uint64_t)&v3[*(int *)(v28 + 48)];
      sub_10AA28((uint64_t)v20, (uint64_t)v3);
      sub_418BC((uint64_t)v9, v30, &qword_1F1310);
      v32 = v44;
      v31 = v45;
      v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
      if (v33((uint64_t)v3, 1, v44) == 1)
      {
        sub_417D8(v29, &qword_1F1310);
        if (v33(v30, 1, v32) == 1)
        {
          sub_417D8((uint64_t)v3, &qword_1F1310);
LABEL_15:
          sub_10AAC8((uint64_t)v26);
          v36 = 1;
          return v36 & 1;
        }
      }
      else
      {
        sub_418BC((uint64_t)v3, (uint64_t)v7, &qword_1F1310);
        if (v33(v30, 1, v32) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v14, v30, v32);
          v38 = sub_41754(&qword_1F10E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v39 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v14, v32, v38);
          v40 = *(void (**)(char *, uint64_t))(v31 + 8);
          v40(v14, v32);
          sub_417D8(v29, &qword_1F1310);
          v40(v7, v32);
          sub_417D8((uint64_t)v3, &qword_1F1310);
          if ((v39 & 1) != 0)
            goto LABEL_15;
          goto LABEL_16;
        }
        sub_417D8(v29, &qword_1F1310);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
      }
      sub_417D8((uint64_t)v3, &qword_1F59A0);
LABEL_16:
      sub_10AAC8((uint64_t)v26);
      goto LABEL_17;
    }
    sub_417D8((uint64_t)v20, &qword_1F1310);
LABEL_9:
    sub_417D8((uint64_t)v26, &qword_1F59A8);
LABEL_17:
    v36 = 0;
    return v36 & 1;
  }
  sub_10A9E4((uint64_t)v26, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload(v27, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v44);
    goto LABEL_9;
  }
  v34 = v44;
  v35 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v16, v27, v44);
  v36 = static Date.== infix(_:_:)(v22, v16);
  v37 = *(void (**)(char *, uint64_t))(v35 + 8);
  v37(v16, v34);
  v37(v22, v34);
  sub_10AAC8((uint64_t)v26);
  return v36 & 1;
}

uint64_t type metadata accessor for StoreBook.Origin(uint64_t a1)
{
  return sub_A2060(a1, (uint64_t *)&unk_1F5910, (uint64_t)&nominal type descriptor for StoreBook.Origin);
}

uint64_t sub_10A9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StoreBook.Origin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10AA28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F1310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for StoreBook(uint64_t a1)
{
  return sub_A2060(a1, (uint64_t *)&unk_1F5848, (uint64_t)&nominal type descriptor for StoreBook);
}

uint64_t sub_10AA84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StoreBook.Origin(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10AAC8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StoreBook.Origin(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10AB08()
{
  unint64_t result;

  result = qword_1F57A8;
  if (!qword_1F57A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionMembershipInfo, &type metadata for CollectionMembershipInfo);
    atomic_store(result, (unint64_t *)&qword_1F57A8);
  }
  return result;
}

uint64_t sub_10AB4C()
{
  return sub_41754(&qword_1F57B0, type metadata accessor for StoreBook.Origin, (uint64_t)&protocol conformance descriptor for StoreBook.Origin);
}

uint64_t sub_10AB78()
{
  return sub_41754(&qword_1F57B8, type metadata accessor for StoreBook, (uint64_t)&protocol conformance descriptor for StoreBook);
}

unint64_t sub_10ABA8()
{
  unint64_t result;

  result = qword_1F57C0;
  if (!qword_1F57C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreBookCollectionOptions, &type metadata for StoreBookCollectionOptions);
    atomic_store(result, (unint64_t *)&qword_1F57C0);
  }
  return result;
}

unint64_t sub_10ABF0()
{
  unint64_t result;

  result = qword_1F57C8;
  if (!qword_1F57C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreBookCollectionOptions, &type metadata for StoreBookCollectionOptions);
    atomic_store(result, (unint64_t *)&qword_1F57C8);
  }
  return result;
}

unint64_t sub_10AC38()
{
  unint64_t result;

  result = qword_1F57D0;
  if (!qword_1F57D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreBookCollectionOptions, &type metadata for StoreBookCollectionOptions);
    atomic_store(result, (unint64_t *)&qword_1F57D0);
  }
  return result;
}

unint64_t sub_10AC80()
{
  unint64_t result;

  result = qword_1F57D8;
  if (!qword_1F57D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreBookCollectionOptions, &type metadata for StoreBookCollectionOptions);
    atomic_store(result, (unint64_t *)&qword_1F57D8);
  }
  return result;
}

unint64_t sub_10ACC8()
{
  unint64_t result;

  result = qword_1F57E0;
  if (!qword_1F57E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreBookForDeduplication, &type metadata for StoreBookForDeduplication);
    atomic_store(result, (unint64_t *)&qword_1F57E0);
  }
  return result;
}

unint64_t sub_10AD10()
{
  unint64_t result;

  result = qword_1F57E8;
  if (!qword_1F57E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NextInSeriesProcessorMetadata, &type metadata for NextInSeriesProcessorMetadata);
    atomic_store(result, (unint64_t *)&qword_1F57E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for CollectionMembershipInfo()
{
  return &type metadata for CollectionMembershipInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for StoreBook(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for StoreBook.Origin(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5EDC(&qword_1F3AC0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
      v12 = type metadata accessor for Date(0);
      v13 = *(_QWORD *)(v12 - 8);
      if (EnumCaseMultiPayload == 1)
      {
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = sub_5EDC(&qword_1F1310);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
          v15 = 1;
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
          v15 = 1;
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v13 + 16))(a1, a2, v12);
        v15 = 0;
      }
      swift_storeEnumTagMultiPayload(a1, v7, v15);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v16 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = a3[7];
    v20 = a3[8];
    v21 = (char *)a1 + v19;
    v22 = (char *)a2 + v19;
    *(_OWORD *)v21 = *(_OWORD *)v22;
    v21[16] = v22[16];
    *(uint64_t *)((char *)a1 + v20) = *(uint64_t *)((char *)a2 + v20);
    v23 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    *(_OWORD *)v24 = *(_OWORD *)v25;
    v24[16] = v25[16];
    v26 = a3[11];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
  }
  return a1;
}

uint64_t destroy for StoreBook(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;

  v2 = type metadata accessor for StoreBook.Origin(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
  if (!(_DWORD)result)
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v2);
    v5 = type metadata accessor for Date(0);
    v6 = *(_QWORD *)(v5 - 8);
    if (EnumCaseMultiPayload != 1)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  }
  return result;
}

char *initializeWithCopy for StoreBook(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v6 = type metadata accessor for StoreBook.Origin(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5EDC(&qword_1F3AC0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (EnumCaseMultiPayload == 1)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        v12 = sub_5EDC(&qword_1F1310);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        v13 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 16))(a1, a2, v10);
        v13 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(a1, a2, v10);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[7];
  v18 = a3[8];
  v19 = &a1[v17];
  v20 = &a2[v17];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v19[16] = v20[16];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v21 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_OWORD *)v22 = *(_OWORD *)v23;
  v22[16] = v23[16];
  v24 = a3[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v25[16] = v26[16];
  return a1;
}

char *assignWithCopy for StoreBook(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;

  v6 = type metadata accessor for StoreBook.Origin(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      v12 = type metadata accessor for Date(0);
      v13 = *(_QWORD *)(v12 - 8);
      if (EnumCaseMultiPayload == 1)
      {
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = sub_5EDC(&qword_1F1310);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
          v15 = 1;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v13 + 16))(a1, a2, v12);
          v15 = 1;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(a1, a2, v12);
        v15 = 0;
      }
      swift_storeEnumTagMultiPayload(a1, v6, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_16;
    }
LABEL_8:
    v16 = sub_5EDC(&qword_1F3AC0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
    sub_10AAC8((uint64_t)a1);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_10AAC8((uint64_t)a1);
    v17 = swift_getEnumCaseMultiPayload(a2, v6);
    v18 = type metadata accessor for Date(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (v17 == 1)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(a2, 1, v18))
      {
        v20 = sub_5EDC(&qword_1F1310);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(a1, a2, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(a1, a2, v18);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
LABEL_16:
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *(_QWORD *)v23;
  v22[8] = v23[8];
  *(_QWORD *)v22 = v24;
  v25 = a3[7];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = *(_OWORD *)v27;
  v26[16] = v27[16];
  *(_OWORD *)v26 = v28;
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v29 = a3[10];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *(_OWORD *)v31;
  v30[16] = v31[16];
  *(_OWORD *)v30 = v32;
  v33 = a3[11];
  v34 = &a1[v33];
  v35 = &a2[v33];
  v36 = *(_OWORD *)v35;
  v34[16] = v35[16];
  *(_OWORD *)v34 = v36;
  return a1;
}

char *initializeWithTake for StoreBook(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v6 = type metadata accessor for StoreBook.Origin(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5EDC(&qword_1F3AC0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (EnumCaseMultiPayload == 1)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        v12 = sub_5EDC(&qword_1F1310);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
        v13 = 1;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(a1, a2, v10);
        v13 = 1;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(a1, a2, v10);
      v13 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v6, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v14 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  v17 = a3[7];
  v18 = a3[8];
  v19 = &a1[v17];
  v20 = &a2[v17];
  *(_OWORD *)v19 = *(_OWORD *)v20;
  v19[16] = v20[16];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  v21 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_OWORD *)v22 = *(_OWORD *)v23;
  v22[16] = v23[16];
  v24 = a3[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  *(_OWORD *)v25 = *(_OWORD *)v26;
  v25[16] = v26[16];
  return a1;
}

char *assignWithTake for StoreBook(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  int EnumCaseMultiPayload;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;

  v6 = type metadata accessor for StoreBook.Origin(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
      v12 = type metadata accessor for Date(0);
      v13 = *(_QWORD *)(v12 - 8);
      if (EnumCaseMultiPayload == 1)
      {
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12))
        {
          v14 = sub_5EDC(&qword_1F1310);
          memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
          v15 = 1;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v13 + 32))(a1, a2, v12);
          v15 = 1;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v12);
        }
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(a1, a2, v12);
        v15 = 0;
      }
      swift_storeEnumTagMultiPayload(a1, v6, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_16;
    }
LABEL_8:
    v16 = sub_5EDC(&qword_1F3AC0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_16;
  }
  if (v10)
  {
    sub_10AAC8((uint64_t)a1);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_10AAC8((uint64_t)a1);
    v17 = swift_getEnumCaseMultiPayload(a2, v6);
    v18 = type metadata accessor for Date(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (v17 == 1)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(a2, 1, v18))
      {
        v20 = sub_5EDC(&qword_1F1310);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(a1, a2, v18);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(a1, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(a1, a2, v18);
      swift_storeEnumTagMultiPayload(a1, v6, 0);
    }
  }
LABEL_16:
  v21 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v22 = &a1[v21];
  v23 = &a2[v21];
  *(_QWORD *)v22 = *(_QWORD *)v23;
  v22[8] = v23[8];
  v24 = a3[7];
  v25 = a3[8];
  v26 = &a1[v24];
  v27 = &a2[v24];
  *(_OWORD *)v26 = *(_OWORD *)v27;
  v26[16] = v27[16];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  v28 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_OWORD *)v29 = *(_OWORD *)v30;
  v29[16] = v30[16];
  v31 = a3[11];
  v32 = &a1[v31];
  v33 = &a2[v31];
  *(_OWORD *)v32 = *(_OWORD *)v33;
  v32[16] = v33[16];
  return a1;
}

uint64_t getEnumTagSinglePayload for StoreBook(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10BA00);
}

uint64_t sub_10BA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F3AC0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for StoreBook(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10BA4C);
}

uint64_t sub_10BA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F3AC0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_10BA90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  sub_10C170(319, (unint64_t *)&unk_1F5858, type metadata accessor for StoreBook.Origin);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = "\t";
    v4[3] = &unk_19A240;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = &unk_19A240;
    v4[7] = &unk_19A240;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for StoreBook.Origin(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (EnumCaseMultiPayload == 1)
    {
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
      {
        v10 = sub_5EDC(&qword_1F1310);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
      }
      v12 = a1;
      v13 = a3;
      v14 = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 16))(a1, a2, v8);
      v12 = a1;
      v13 = a3;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for StoreBook.Origin(uint64_t a1)
{
  int EnumCaseMultiPayload;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  if (EnumCaseMultiPayload != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for StoreBook.Origin(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5EDC(&qword_1F1310);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      v10 = 1;
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      v10 = 1;
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v10);
  return a1;
}

void *assignWithCopy for StoreBook.Origin(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_10AAC8((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (EnumCaseMultiPayload == 1)
    {
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_5EDC(&qword_1F1310);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        v10 = 1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
        v10 = 1;
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v10);
  }
  return a1;
}

void *initializeWithTake for StoreBook.Origin(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (EnumCaseMultiPayload == 1)
  {
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5EDC(&qword_1F1310);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      v10 = 1;
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      v10 = 1;
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
    v10 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, a3, v10);
  return a1;
}

void *assignWithTake for StoreBook.Origin(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_10AAC8((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (EnumCaseMultiPayload == 1)
    {
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_5EDC(&qword_1F1310);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
        v10 = 1;
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
        v10 = 1;
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      }
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
      v10 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, a3, v10);
  }
  return a1;
}

void sub_10C0E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_10C170(319, (unint64_t *)&qword_1F5920, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 2, v6);
    }
  }
}

void sub_10C170(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

ValueMetadata *type metadata accessor for StoreBookCollectionOptions()
{
  return &type metadata for StoreBookCollectionOptions;
}

uint64_t destroy for StoreBookForDeduplication(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for StoreBookForDeduplication(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for StoreBookForDeduplication(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for StoreBookForDeduplication(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for StoreBookForDeduplication()
{
  return &type metadata for StoreBookForDeduplication;
}

__n128 initializeWithCopy for NextInSeriesProcessorMetadata(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for NextInSeriesProcessorMetadata(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 33);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NextInSeriesProcessorMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
      *(_BYTE *)(result + 33) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NextInSeriesProcessorMetadata()
{
  return &type metadata for NextInSeriesProcessorMetadata;
}

uint64_t dispatch thunk of StoreBooksServiceType.fetchStoreBooksForDeduplication()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *(int **)(a2 + 24);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_6F204;
  return v8(a1, a2);
}

uint64_t dispatch thunk of StoreBooksServiceType.fetchHiddenPurchaseIDs()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *(int **)(a2 + 32);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_6F204;
  return v8(a1, a2);
}

uint64_t dispatch thunk of StoreBooksServiceType.fetchNextInSeriesProcessorMetadata(storeIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 40);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_6F204;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of StoreBooksServiceType.fetchNextInSeriesProcessorMetadata(seriesIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 48);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_6F204;
  return v10(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for CollectionMembershipInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10C5DC + 4 * byte_199DA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10C610 + 4 * byte_199DA0[v4]))();
}

uint64_t sub_10C610(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10C618(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10C620);
  return result;
}

uint64_t sub_10C62C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10C634);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10C638(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10C640(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionMembershipInfo.CodingKeys()
{
  return &type metadata for CollectionMembershipInfo.CodingKeys;
}

unint64_t sub_10C660()
{
  unint64_t result;

  result = qword_1F5980;
  if (!qword_1F5980)
  {
    result = swift_getWitnessTable(&unk_19A384, &type metadata for CollectionMembershipInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5980);
  }
  return result;
}

unint64_t sub_10C6A8()
{
  unint64_t result;

  result = qword_1F5988;
  if (!qword_1F5988)
  {
    result = swift_getWitnessTable(&unk_19A2F4, &type metadata for CollectionMembershipInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5988);
  }
  return result;
}

unint64_t sub_10C6F0()
{
  unint64_t result;

  result = qword_1F5990;
  if (!qword_1F5990)
  {
    result = swift_getWitnessTable(&unk_19A31C, &type metadata for CollectionMembershipInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5990);
  }
  return result;
}

uint64_t sub_10C734(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7865646E69 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x746E756F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F63, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BooksPersonalization::Methodology_optional __swiftcall Methodology.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  Swift::Int v5;
  BooksPersonalization::Methodology_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA418, v3);
  result.value = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *v4 = v7;
  return result;
}

_UNKNOWN **static Methodology.allCases.getter()
{
  return &off_1DA468;
}

unint64_t sub_10C888()
{
  unint64_t result;

  result = qword_1F59B0;
  if (!qword_1F59B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Methodology, &type metadata for Methodology);
    atomic_store(result, (unint64_t *)&qword_1F59B0);
  }
  return result;
}

BooksPersonalization::Methodology_optional sub_10C8CC(Swift::String *a1)
{
  return Methodology.init(rawValue:)(*a1);
}

uint64_t sub_10C8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10CB54();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10C934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10CB54();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_10C984()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F59B8;
  if (!qword_1F59B8)
  {
    v1 = sub_5F68(&qword_1F59C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F59B8);
  }
  return result;
}

void sub_10C9D0(_QWORD *a1@<X8>)
{
  *a1 = &off_1DA490;
}

uint64_t sub_10C9E0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = sub_10CB54();
  return RawRepresentable<>.codingKey.getter(a1, a2, v4);
}

uint64_t sub_10CA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_10CB54();
  return RawRepresentable<>.init<A>(codingKey:)(a1, a4, a2, a5, v10, a3);
}

uint64_t storeEnumTagSinglePayload for Methodology(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10CAD4 + 4 * byte_19A405[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10CB08 + 4 * byte_19A400[v4]))();
}

uint64_t sub_10CB08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10CB10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10CB18);
  return result;
}

uint64_t sub_10CB24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10CB2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10CB30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10CB38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Methodology()
{
  return &type metadata for Methodology;
}

unint64_t sub_10CB54()
{
  unint64_t result;

  result = qword_1F59C8;
  if (!qword_1F59C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Methodology, &type metadata for Methodology);
    atomic_store(result, (unint64_t *)&qword_1F59C8);
  }
  return result;
}

uint64_t sub_10CB98()
{
  return sub_41754(&qword_1F59D0, type metadata accessor for EventAggregationWork, (uint64_t)&unk_19A5C4);
}

uint64_t type metadata accessor for EventAggregationWork(uint64_t a1)
{
  uint64_t result;

  result = qword_1F5A48;
  if (!qword_1F5A48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EventAggregationWork);
  return result;
}

uint64_t sub_10CC00()
{
  return sub_41754(&qword_1F59D8, type metadata accessor for EventAggregationWork, (uint64_t)&unk_19A66C);
}

unint64_t sub_10CC30()
{
  unint64_t result;

  result = qword_1F59E0;
  if (!qword_1F59E0)
  {
    result = swift_getWitnessTable(&unk_19A644, &type metadata for EventAggregationWork.Context);
    atomic_store(result, (unint64_t *)&qword_1F59E0);
  }
  return result;
}

uint64_t sub_10CC74(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  _BYTE v11[184];
  _BYTE v12[168];
  uint64_t v13;

  sub_7328C(a1 + 48, (uint64_t)v11);
  sub_7328C((uint64_t)v11, (uint64_t)v12);
  if (sub_732D4((uint64_t)v12) == 1)
  {
    v2 = 0;
  }
  else
  {
    v3 = v13;
    if (*(_QWORD *)(v13 + 16))
    {
      v4 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for EventAggregationWork(0) + 20));
      v5 = type metadata accessor for Request(0);
      swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
      swift_bridgeObjectRetain(v3);
      v6 = swift_retain(v4);
      return Request.init(features:outputs:)(v6, v3);
    }
    v2 = 1;
  }
  v8 = sub_10CDB8();
  v9 = swift_allocError(&type metadata for EventAggregationWork.Errors, v8, 0, 0);
  *v10 = v2;
  return swift_willThrow(v9);
}

unint64_t sub_10CD58()
{
  return 0xD000000000000011;
}

uint64_t sub_10CD74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10CC74(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10CD9C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain(a1);
}

unint64_t sub_10CDB8()
{
  unint64_t result;

  result = qword_1F59E8;
  if (!qword_1F59E8)
  {
    result = swift_getWitnessTable(&unk_19A75C, &type metadata for EventAggregationWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F59E8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EventAggregationWork.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10CE48 + 4 * byte_19A595[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10CE7C + 4 * byte_19A590[v4]))();
}

uint64_t sub_10CE7C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10CE84(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10CE8CLL);
  return result;
}

uint64_t sub_10CE98(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10CEA0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10CEA4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10CEAC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EventAggregationWork.Errors()
{
  return &type metadata for EventAggregationWork.Errors;
}

ValueMetadata *type metadata accessor for EventAggregationWork.Context()
{
  return &type metadata for EventAggregationWork.Context;
}

uint64_t *sub_10CED8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
  }
  swift_retain(v9);
  return a1;
}

uint64_t sub_10CF60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t sub_10CFA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  return a1;
}

uint64_t sub_10D004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_10D070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_10D0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10D0E0);
}

uint64_t sub_10D0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10D15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10D168);
}

uint64_t sub_10D168(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_10D1E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10D254(uint64_t a1)
{
  uint64_t result;

  result = sub_41754(&qword_1F59D0, type metadata accessor for EventAggregationWork, (uint64_t)&unk_19A5C4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10D294()
{
  unint64_t result;

  result = qword_1F5A80;
  if (!qword_1F5A80)
  {
    result = swift_getWitnessTable(&unk_19A734, &type metadata for EventAggregationWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F5A80);
  }
  return result;
}

uint64_t InternalGenreRecommendationResponse.configuration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;
  _BYTE v5[1088];

  v3 = (const void *)(v1 + 8);
  memcpy(v5, v3, sizeof(v5));
  memcpy(a1, v3, 0x440uLL);
  return sub_71068((uint64_t)v5);
}

uint64_t destroy for InternalGenreRecommendationResponse(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[53]);
  swift_bridgeObjectRelease(a1[58]);
  swift_bridgeObjectRelease(a1[59]);
  swift_bridgeObjectRelease(a1[60]);
  swift_bridgeObjectRelease(a1[65]);
  swift_bridgeObjectRelease(a1[69]);
  swift_bridgeObjectRelease(a1[70]);
  swift_bridgeObjectRelease(a1[72]);
  swift_bridgeObjectRelease(a1[73]);
  swift_bridgeObjectRelease(a1[76]);
  swift_bridgeObjectRelease(a1[78]);
  swift_bridgeObjectRelease(a1[84]);
  swift_bridgeObjectRelease(a1[86]);
  swift_bridgeObjectRelease(a1[87]);
  v2 = a1[110];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[111]);
  }
  v3 = a1[113];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[115]);
    swift_bridgeObjectRelease(a1[117]);
  }
  v4 = a1[121];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[123]);
  }
  swift_bridgeObjectRelease(a1[127]);
  result = a1[131];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[133]);
    return swift_bridgeObjectRelease(a1[135]);
  }
  return result;
}

uint64_t initializeWithCopy for InternalGenreRecommendationResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)((char *)a2 + 17);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
  *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
  *(_DWORD *)(a1 + 43) = *(_DWORD *)((char *)a2 + 43);
  *(_WORD *)(a1 + 47) = *(_WORD *)((char *)a2 + 47);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
  *(_WORD *)(a1 + 72) = *((_WORD *)a2 + 36);
  v57 = a2[11];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v57;
  v5 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v5;
  v6 = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  *(_OWORD *)(a1 + 144) = v6;
  v7 = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 176) = v7;
  v8 = *((_OWORD *)a2 + 13);
  *(_OWORD *)(a1 + 192) = *((_OWORD *)a2 + 12);
  *(_OWORD *)(a1 + 208) = v8;
  v9 = *((_OWORD *)a2 + 15);
  *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
  *(_OWORD *)(a1 + 240) = v9;
  v10 = *((_OWORD *)a2 + 17);
  *(_OWORD *)(a1 + 256) = *((_OWORD *)a2 + 16);
  *(_OWORD *)(a1 + 272) = v10;
  v11 = *((_OWORD *)a2 + 19);
  *(_OWORD *)(a1 + 288) = *((_OWORD *)a2 + 18);
  *(_OWORD *)(a1 + 304) = v11;
  v12 = *((_OWORD *)a2 + 21);
  *(_OWORD *)(a1 + 320) = *((_OWORD *)a2 + 20);
  *(_OWORD *)(a1 + 336) = v12;
  v13 = *((_OWORD *)a2 + 23);
  *(_OWORD *)(a1 + 352) = *((_OWORD *)a2 + 22);
  *(_OWORD *)(a1 + 368) = v13;
  v14 = *((_OWORD *)a2 + 25);
  *(_OWORD *)(a1 + 384) = *((_OWORD *)a2 + 24);
  *(_OWORD *)(a1 + 400) = v14;
  v15 = a2[53];
  *(_QWORD *)(a1 + 416) = a2[52];
  *(_QWORD *)(a1 + 424) = v15;
  *(_OWORD *)(a1 + 432) = *((_OWORD *)a2 + 27);
  *(_QWORD *)(a1 + 448) = a2[56];
  *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
  *(_BYTE *)(a1 + 457) = *((_BYTE *)a2 + 457);
  *(_BYTE *)(a1 + 458) = *((_BYTE *)a2 + 458);
  v16 = a2[58];
  v54 = a2[59];
  *(_QWORD *)(a1 + 464) = v16;
  *(_QWORD *)(a1 + 472) = v54;
  v55 = a2[60];
  v56 = v15;
  *(_QWORD *)(a1 + 480) = v55;
  *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
  *(_OWORD *)(a1 + 496) = *((_OWORD *)a2 + 31);
  *(_QWORD *)(a1 + 512) = a2[64];
  v51 = a2[65];
  *(_QWORD *)(a1 + 520) = v51;
  *(_OWORD *)(a1 + 528) = *((_OWORD *)a2 + 33);
  *(_QWORD *)(a1 + 544) = a2[68];
  v17 = a2[69];
  *(_QWORD *)(a1 + 552) = v17;
  v18 = a2[70];
  *(_QWORD *)(a1 + 560) = v18;
  *(_BYTE *)(a1 + 568) = *((_BYTE *)a2 + 568);
  v19 = a2[72];
  *(_QWORD *)(a1 + 576) = v19;
  v53 = a2[73];
  *(_QWORD *)(a1 + 584) = v53;
  *(_OWORD *)(a1 + 592) = *((_OWORD *)a2 + 37);
  v52 = a2[76];
  *(_QWORD *)(a1 + 608) = v52;
  *(_BYTE *)(a1 + 616) = *((_BYTE *)a2 + 616);
  *(_BYTE *)(a1 + 617) = *((_BYTE *)a2 + 617);
  v20 = a2[78];
  *(_QWORD *)(a1 + 624) = v20;
  *(_BYTE *)(a1 + 632) = *((_BYTE *)a2 + 632);
  *(_BYTE *)(a1 + 633) = *((_BYTE *)a2 + 633);
  v21 = *((_OWORD *)a2 + 40);
  *(_QWORD *)(a1 + 656) = a2[82];
  *(_OWORD *)(a1 + 640) = v21;
  *(_QWORD *)(a1 + 664) = a2[83];
  v22 = a2[84];
  *(_QWORD *)(a1 + 672) = v22;
  *(_QWORD *)(a1 + 680) = a2[85];
  v23 = a2[86];
  *(_QWORD *)(a1 + 688) = v23;
  v24 = a2[87];
  *(_QWORD *)(a1 + 696) = v24;
  *(_QWORD *)(a1 + 704) = a2[88];
  v50 = a2[110];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v55);
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  if (v50)
  {
    *(_QWORD *)(a1 + 712) = a2[89];
    v25 = *((_OWORD *)a2 + 52);
    *(_OWORD *)(a1 + 816) = *((_OWORD *)a2 + 51);
    *(_OWORD *)(a1 + 832) = v25;
    v26 = *((_OWORD *)a2 + 54);
    *(_OWORD *)(a1 + 848) = *((_OWORD *)a2 + 53);
    *(_OWORD *)(a1 + 864) = v26;
    v27 = *((_OWORD *)a2 + 48);
    *(_OWORD *)(a1 + 752) = *((_OWORD *)a2 + 47);
    *(_OWORD *)(a1 + 768) = v27;
    v28 = *((_OWORD *)a2 + 50);
    *(_OWORD *)(a1 + 784) = *((_OWORD *)a2 + 49);
    *(_OWORD *)(a1 + 800) = v28;
    v29 = *((_OWORD *)a2 + 46);
    *(_OWORD *)(a1 + 720) = *((_OWORD *)a2 + 45);
    *(_OWORD *)(a1 + 736) = v29;
    *(_QWORD *)(a1 + 880) = v50;
    v30 = a2[111];
    *(_QWORD *)(a1 + 888) = v30;
    swift_bridgeObjectRetain(v50);
    swift_bridgeObjectRetain(v30);
    v31 = a2[113];
    if (v31)
      goto LABEL_3;
LABEL_6:
    v41 = *((_OWORD *)a2 + 57);
    *(_OWORD *)(a1 + 896) = *((_OWORD *)a2 + 56);
    *(_OWORD *)(a1 + 912) = v41;
    *(_OWORD *)(a1 + 928) = *((_OWORD *)a2 + 58);
    v34 = a2[121];
    if (v34)
      goto LABEL_4;
    goto LABEL_7;
  }
  v36 = *(_OWORD *)(a2 + 107);
  *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 105);
  *(_OWORD *)(a1 + 856) = v36;
  *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 109);
  *(_QWORD *)(a1 + 888) = a2[111];
  v37 = *(_OWORD *)(a2 + 99);
  *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 97);
  *(_OWORD *)(a1 + 792) = v37;
  v38 = *(_OWORD *)(a2 + 103);
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 101);
  *(_OWORD *)(a1 + 824) = v38;
  v39 = *(_OWORD *)(a2 + 91);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 89);
  *(_OWORD *)(a1 + 728) = v39;
  v40 = *(_OWORD *)(a2 + 95);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 93);
  *(_OWORD *)(a1 + 760) = v40;
  v31 = a2[113];
  if (!v31)
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)(a1 + 896) = a2[112];
  *(_QWORD *)(a1 + 904) = v31;
  *(_QWORD *)(a1 + 912) = a2[114];
  v32 = a2[115];
  *(_QWORD *)(a1 + 920) = v32;
  *(_QWORD *)(a1 + 928) = a2[116];
  v33 = a2[117];
  *(_QWORD *)(a1 + 936) = v33;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v33);
  v34 = a2[121];
  if (v34)
  {
LABEL_4:
    *(_OWORD *)(a1 + 944) = *((_OWORD *)a2 + 59);
    *(_QWORD *)(a1 + 960) = a2[120];
    *(_QWORD *)(a1 + 968) = v34;
    *(_QWORD *)(a1 + 976) = a2[122];
    v35 = a2[123];
    *(_QWORD *)(a1 + 984) = v35;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    goto LABEL_8;
  }
LABEL_7:
  v42 = *((_OWORD *)a2 + 60);
  *(_OWORD *)(a1 + 944) = *((_OWORD *)a2 + 59);
  *(_OWORD *)(a1 + 960) = v42;
  *(_OWORD *)(a1 + 976) = *((_OWORD *)a2 + 61);
LABEL_8:
  *(_OWORD *)(a1 + 992) = *((_OWORD *)a2 + 62);
  *(_QWORD *)(a1 + 1008) = a2[126];
  v43 = a2[127];
  *(_QWORD *)(a1 + 1016) = v43;
  v44 = a2[131];
  swift_bridgeObjectRetain(v43);
  if (v44)
  {
    *(_OWORD *)(a1 + 1024) = *((_OWORD *)a2 + 64);
    *(_QWORD *)(a1 + 1040) = a2[130];
    *(_QWORD *)(a1 + 1048) = v44;
    *(_QWORD *)(a1 + 1056) = a2[132];
    v45 = a2[133];
    *(_QWORD *)(a1 + 1064) = v45;
    *(_QWORD *)(a1 + 1072) = a2[134];
    v46 = a2[135];
    *(_QWORD *)(a1 + 1080) = v46;
    *(_QWORD *)(a1 + 1088) = a2[136];
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
  }
  else
  {
    v47 = *((_OWORD *)a2 + 67);
    *(_OWORD *)(a1 + 1056) = *((_OWORD *)a2 + 66);
    *(_OWORD *)(a1 + 1072) = v47;
    *(_QWORD *)(a1 + 1088) = a2[136];
    v48 = *((_OWORD *)a2 + 65);
    *(_OWORD *)(a1 + 1024) = *((_OWORD *)a2 + 64);
    *(_OWORD *)(a1 + 1040) = v48;
  }
  return a1;
}

uint64_t assignWithCopy for InternalGenreRecommendationResponse(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD *v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD *v65;
  _OWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;

  v4 = a2 + 57;
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_BYTE *)(a1 + 33) = *((_BYTE *)a2 + 33);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  *(_BYTE *)(a1 + 42) = *((_BYTE *)a2 + 42);
  *(_BYTE *)(a1 + 43) = *((_BYTE *)a2 + 43);
  *(_BYTE *)(a1 + 44) = *((_BYTE *)a2 + 44);
  *(_BYTE *)(a1 + 45) = *((_BYTE *)a2 + 45);
  *(_BYTE *)(a1 + 46) = *((_BYTE *)a2 + 46);
  *(_BYTE *)(a1 + 47) = *((_BYTE *)a2 + 47);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_QWORD *)(a1 + 80) = a2[10];
  v6 = a2[11];
  *(_QWORD *)(a1 + 88) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = a2[13];
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_QWORD *)(a1 + 120) = a2[15];
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_QWORD *)(a1 + 136) = a2[17];
  *(_QWORD *)(a1 + 144) = a2[18];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_QWORD *)(a1 + 168) = a2[21];
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_QWORD *)(a1 + 200) = a2[25];
  *(_QWORD *)(a1 + 208) = a2[26];
  *(_QWORD *)(a1 + 216) = a2[27];
  *(_QWORD *)(a1 + 224) = a2[28];
  *(_QWORD *)(a1 + 232) = a2[29];
  *(_QWORD *)(a1 + 240) = a2[30];
  *(_QWORD *)(a1 + 248) = a2[31];
  *(_QWORD *)(a1 + 256) = a2[32];
  *(_QWORD *)(a1 + 264) = a2[33];
  *(_QWORD *)(a1 + 272) = a2[34];
  *(_QWORD *)(a1 + 280) = a2[35];
  *(_QWORD *)(a1 + 288) = a2[36];
  *(_QWORD *)(a1 + 296) = a2[37];
  *(_QWORD *)(a1 + 304) = a2[38];
  *(_QWORD *)(a1 + 312) = a2[39];
  *(_QWORD *)(a1 + 320) = a2[40];
  *(_QWORD *)(a1 + 328) = a2[41];
  *(_QWORD *)(a1 + 336) = a2[42];
  *(_QWORD *)(a1 + 344) = a2[43];
  *(_QWORD *)(a1 + 352) = a2[44];
  *(_QWORD *)(a1 + 360) = a2[45];
  *(_QWORD *)(a1 + 368) = a2[46];
  *(_QWORD *)(a1 + 376) = a2[47];
  *(_QWORD *)(a1 + 384) = a2[48];
  *(_QWORD *)(a1 + 392) = a2[49];
  *(_QWORD *)(a1 + 400) = a2[50];
  *(_QWORD *)(a1 + 408) = a2[51];
  *(_QWORD *)(a1 + 416) = a2[52];
  v7 = a2[53];
  *(_QWORD *)(a1 + 424) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 432) = a2[54];
  *(_QWORD *)(a1 + 440) = a2[55];
  *(_QWORD *)(a1 + 448) = a2[56];
  *(_BYTE *)(a1 + 456) = *((_BYTE *)a2 + 456);
  *(_BYTE *)(a1 + 457) = v4[1];
  *(_BYTE *)(a1 + 458) = v4[2];
  v8 = a2[58];
  *(_QWORD *)(a1 + 464) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  v9 = a2[59];
  *(_QWORD *)(a1 + 472) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = a2[60];
  *(_QWORD *)(a1 + 480) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 488) = *((_BYTE *)a2 + 488);
  *(_QWORD *)(a1 + 496) = a2[62];
  *(_QWORD *)(a1 + 504) = a2[63];
  *(_QWORD *)(a1 + 512) = a2[64];
  v11 = a2[65];
  *(_QWORD *)(a1 + 520) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 528) = a2[66];
  *(_QWORD *)(a1 + 536) = a2[67];
  *(_QWORD *)(a1 + 544) = a2[68];
  v12 = a2[69];
  *(_QWORD *)(a1 + 552) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  v13 = a2[70];
  *(_QWORD *)(a1 + 560) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 568) = v4[112];
  v14 = a2[72];
  *(_QWORD *)(a1 + 576) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  v15 = a2[73];
  *(_QWORD *)(a1 + 584) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 592) = a2[74];
  *(_QWORD *)(a1 + 600) = a2[75];
  v16 = a2[76];
  *(_QWORD *)(a1 + 608) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 616) = v4[160];
  *(_BYTE *)(a1 + 617) = v4[161];
  v17 = a2[78];
  *(_QWORD *)(a1 + 624) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = v4[176];
  *(_BYTE *)(a1 + 633) = v4[177];
  *(_BYTE *)(a1 + 640) = v4[184];
  *(_QWORD *)(a1 + 648) = a2[81];
  *(_QWORD *)(a1 + 656) = a2[82];
  *(_QWORD *)(a1 + 664) = a2[83];
  v18 = a2[84];
  *(_QWORD *)(a1 + 672) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 680) = a2[85];
  v19 = a2[86];
  *(_QWORD *)(a1 + 688) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  v20 = a2[87];
  *(_QWORD *)(a1 + 696) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 704) = a2[88];
  v21 = (_OWORD *)(a1 + 712);
  v22 = (__int128 *)(a2 + 89);
  v23 = a2[110];
  if (*(_QWORD *)(a1 + 880))
  {
    if (v23)
    {
      *(_QWORD *)(a1 + 712) = a2[89];
      *(_QWORD *)(a1 + 720) = a2[90];
      *(_QWORD *)(a1 + 728) = a2[91];
      *(_QWORD *)(a1 + 736) = a2[92];
      *(_QWORD *)(a1 + 744) = a2[93];
      *(_QWORD *)(a1 + 752) = a2[94];
      *(_QWORD *)(a1 + 760) = a2[95];
      *(_QWORD *)(a1 + 768) = a2[96];
      *(_QWORD *)(a1 + 776) = a2[97];
      *(_QWORD *)(a1 + 784) = a2[98];
      *(_QWORD *)(a1 + 792) = a2[99];
      *(_QWORD *)(a1 + 800) = a2[100];
      *(_QWORD *)(a1 + 808) = a2[101];
      *(_QWORD *)(a1 + 816) = a2[102];
      *(_QWORD *)(a1 + 824) = a2[103];
      *(_QWORD *)(a1 + 832) = a2[104];
      *(_QWORD *)(a1 + 840) = a2[105];
      *(_QWORD *)(a1 + 848) = a2[106];
      *(_QWORD *)(a1 + 856) = a2[107];
      *(_QWORD *)(a1 + 864) = a2[108];
      *(_QWORD *)(a1 + 872) = a2[109];
      v24 = a2[110];
      *(_QWORD *)(a1 + 880) = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease();
      v25 = a2[111];
      *(_QWORD *)(a1 + 888) = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_621C0(a1 + 712);
      v34 = *(_OWORD *)(a2 + 95);
      v36 = *v22;
      v35 = *(_OWORD *)(a2 + 91);
      *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 93);
      *(_OWORD *)(a1 + 760) = v34;
      *v21 = v36;
      *(_OWORD *)(a1 + 728) = v35;
      v37 = *(_OWORD *)(a2 + 103);
      v39 = *(_OWORD *)(a2 + 97);
      v38 = *(_OWORD *)(a2 + 99);
      *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 101);
      *(_OWORD *)(a1 + 824) = v37;
      *(_OWORD *)(a1 + 776) = v39;
      *(_OWORD *)(a1 + 792) = v38;
      v41 = *(_OWORD *)(a2 + 107);
      v40 = *(_OWORD *)(a2 + 109);
      v42 = *(_OWORD *)(a2 + 105);
      *(_QWORD *)(a1 + 888) = a2[111];
      *(_OWORD *)(a1 + 856) = v41;
      *(_OWORD *)(a1 + 872) = v40;
      *(_OWORD *)(a1 + 840) = v42;
    }
  }
  else if (v23)
  {
    *(_QWORD *)(a1 + 712) = a2[89];
    *(_QWORD *)(a1 + 720) = a2[90];
    *(_QWORD *)(a1 + 728) = a2[91];
    *(_OWORD *)(a1 + 736) = *((_OWORD *)a2 + 46);
    v26 = *((_OWORD *)a2 + 47);
    v27 = *((_OWORD *)a2 + 48);
    v28 = *((_OWORD *)a2 + 50);
    *(_OWORD *)(a1 + 784) = *((_OWORD *)a2 + 49);
    *(_OWORD *)(a1 + 800) = v28;
    *(_OWORD *)(a1 + 752) = v26;
    *(_OWORD *)(a1 + 768) = v27;
    v29 = *((_OWORD *)a2 + 51);
    v30 = *((_OWORD *)a2 + 52);
    v31 = *((_OWORD *)a2 + 54);
    *(_OWORD *)(a1 + 848) = *((_OWORD *)a2 + 53);
    *(_OWORD *)(a1 + 864) = v31;
    *(_OWORD *)(a1 + 816) = v29;
    *(_OWORD *)(a1 + 832) = v30;
    v32 = a2[110];
    *(_QWORD *)(a1 + 880) = v32;
    v33 = a2[111];
    *(_QWORD *)(a1 + 888) = v33;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
  }
  else
  {
    v43 = *v22;
    v44 = *(_OWORD *)(a2 + 91);
    v45 = *(_OWORD *)(a2 + 95);
    *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 93);
    *(_OWORD *)(a1 + 760) = v45;
    *v21 = v43;
    *(_OWORD *)(a1 + 728) = v44;
    v46 = *(_OWORD *)(a2 + 97);
    v47 = *(_OWORD *)(a2 + 99);
    v48 = *(_OWORD *)(a2 + 103);
    *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 101);
    *(_OWORD *)(a1 + 824) = v48;
    *(_OWORD *)(a1 + 776) = v46;
    *(_OWORD *)(a1 + 792) = v47;
    v49 = *(_OWORD *)(a2 + 105);
    v50 = *(_OWORD *)(a2 + 107);
    v51 = *(_OWORD *)(a2 + 109);
    *(_QWORD *)(a1 + 888) = a2[111];
    *(_OWORD *)(a1 + 856) = v50;
    *(_OWORD *)(a1 + 872) = v51;
    *(_OWORD *)(a1 + 840) = v49;
  }
  v52 = (_OWORD *)(a1 + 896);
  v53 = a2 + 112;
  v54 = a2[113];
  if (*(_QWORD *)(a1 + 904))
  {
    if (v54)
    {
      *(_QWORD *)(a1 + 896) = a2[112];
      v55 = a2[113];
      *(_QWORD *)(a1 + 904) = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 912) = a2[114];
      v56 = a2[115];
      *(_QWORD *)(a1 + 920) = v56;
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 928) = a2[116];
      v57 = a2[117];
      *(_QWORD *)(a1 + 936) = v57;
      swift_bridgeObjectRetain(v57);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_621F4((_QWORD *)(a1 + 896));
      v62 = *((_OWORD *)a2 + 57);
      v61 = *((_OWORD *)a2 + 58);
      *v52 = *v53;
      *(_OWORD *)(a1 + 912) = v62;
      *(_OWORD *)(a1 + 928) = v61;
    }
  }
  else if (v54)
  {
    *(_QWORD *)(a1 + 896) = a2[112];
    v58 = a2[113];
    *(_QWORD *)(a1 + 904) = v58;
    *(_QWORD *)(a1 + 912) = a2[114];
    v59 = a2[115];
    *(_QWORD *)(a1 + 920) = v59;
    *(_QWORD *)(a1 + 928) = a2[116];
    v60 = a2[117];
    *(_QWORD *)(a1 + 936) = v60;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v59);
    swift_bridgeObjectRetain(v60);
  }
  else
  {
    v63 = *v53;
    v64 = *((_OWORD *)a2 + 58);
    *(_OWORD *)(a1 + 912) = *((_OWORD *)a2 + 57);
    *(_OWORD *)(a1 + 928) = v64;
    *v52 = v63;
  }
  v65 = (_OWORD *)(a1 + 944);
  v66 = a2 + 118;
  v67 = a2[121];
  if (*(_QWORD *)(a1 + 968))
  {
    if (v67)
    {
      *(_QWORD *)(a1 + 944) = a2[118];
      *(_QWORD *)(a1 + 952) = a2[119];
      *(_QWORD *)(a1 + 960) = a2[120];
      v68 = a2[121];
      *(_QWORD *)(a1 + 968) = v68;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 976) = a2[122];
      v69 = a2[123];
      *(_QWORD *)(a1 + 984) = v69;
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_62228(a1 + 944);
      v73 = *((_OWORD *)a2 + 60);
      v72 = *((_OWORD *)a2 + 61);
      *v65 = *v66;
      *(_OWORD *)(a1 + 960) = v73;
      *(_OWORD *)(a1 + 976) = v72;
    }
  }
  else if (v67)
  {
    *(_QWORD *)(a1 + 944) = a2[118];
    *(_QWORD *)(a1 + 952) = a2[119];
    *(_QWORD *)(a1 + 960) = a2[120];
    v70 = a2[121];
    *(_QWORD *)(a1 + 968) = v70;
    *(_QWORD *)(a1 + 976) = a2[122];
    v71 = a2[123];
    *(_QWORD *)(a1 + 984) = v71;
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v71);
  }
  else
  {
    v74 = *v66;
    v75 = *((_OWORD *)a2 + 61);
    *(_OWORD *)(a1 + 960) = *((_OWORD *)a2 + 60);
    *(_OWORD *)(a1 + 976) = v75;
    *v65 = v74;
  }
  *(_QWORD *)(a1 + 992) = a2[124];
  *(_QWORD *)(a1 + 1000) = a2[125];
  *(_QWORD *)(a1 + 1008) = a2[126];
  v76 = a2[127];
  *(_QWORD *)(a1 + 1016) = v76;
  swift_bridgeObjectRetain(v76);
  swift_bridgeObjectRelease();
  v77 = (_OWORD *)(a1 + 1024);
  v78 = a2 + 128;
  v79 = a2[131];
  if (*(_QWORD *)(a1 + 1048))
  {
    if (v79)
    {
      *(_QWORD *)(a1 + 1024) = a2[128];
      *(_QWORD *)(a1 + 1032) = a2[129];
      *(_QWORD *)(a1 + 1040) = a2[130];
      v80 = a2[131];
      *(_QWORD *)(a1 + 1048) = v80;
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1056) = a2[132];
      v81 = a2[133];
      *(_QWORD *)(a1 + 1064) = v81;
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1072) = a2[134];
      v82 = a2[135];
      *(_QWORD *)(a1 + 1080) = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 1088) = a2[136];
    }
    else
    {
      sub_6225C((_QWORD *)(a1 + 1024));
      *v77 = *v78;
      v87 = *((_OWORD *)a2 + 66);
      v86 = *((_OWORD *)a2 + 67);
      v88 = *((_OWORD *)a2 + 65);
      *(_QWORD *)(a1 + 1088) = a2[136];
      *(_OWORD *)(a1 + 1056) = v87;
      *(_OWORD *)(a1 + 1072) = v86;
      *(_OWORD *)(a1 + 1040) = v88;
    }
  }
  else if (v79)
  {
    *(_QWORD *)(a1 + 1024) = a2[128];
    *(_QWORD *)(a1 + 1032) = a2[129];
    *(_QWORD *)(a1 + 1040) = a2[130];
    v83 = a2[131];
    *(_QWORD *)(a1 + 1048) = v83;
    *(_QWORD *)(a1 + 1056) = a2[132];
    v84 = a2[133];
    *(_QWORD *)(a1 + 1064) = v84;
    *(_QWORD *)(a1 + 1072) = a2[134];
    v85 = a2[135];
    *(_QWORD *)(a1 + 1080) = v85;
    *(_QWORD *)(a1 + 1088) = a2[136];
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v84);
    swift_bridgeObjectRetain(v85);
  }
  else
  {
    *v77 = *v78;
    v89 = *((_OWORD *)a2 + 65);
    v90 = *((_OWORD *)a2 + 66);
    v91 = *((_OWORD *)a2 + 67);
    *(_QWORD *)(a1 + 1088) = a2[136];
    *(_OWORD *)(a1 + 1056) = v90;
    *(_OWORD *)(a1 + 1072) = v91;
    *(_OWORD *)(a1 + 1040) = v89;
  }
  return a1;
}

void *initializeWithTake for InternalGenreRecommendationResponse(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x448uLL);
}

uint64_t assignWithTake for InternalGenreRecommendationResponse(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v4 = (_BYTE *)(a2 + 456);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  v8 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 224) = v8;
  v9 = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 256) = v9;
  v10 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v10;
  v11 = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 320) = v11;
  v12 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v12;
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)&v12 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v12;
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  v13 = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = v13;
  *(_BYTE *)(a1 + 456) = *(_BYTE *)(a2 + 456);
  *(_BYTE *)(a1 + 457) = v4[1];
  *(_BYTE *)(a1 + 458) = v4[2];
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 488) = *(_BYTE *)(a2 + 488);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a2 + 496);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 552);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 568) = v4[112];
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 616) = v4[160];
  *(_BYTE *)(a1 + 617) = v4[161];
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 632) = v4[176];
  *(_BYTE *)(a1 + 633) = v4[177];
  *(_BYTE *)(a1 + 640) = v4[184];
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 656);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  if (*(_QWORD *)(a1 + 880))
  {
    v14 = *(_QWORD *)(a2 + 880);
    if (v14)
    {
      *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
      v15 = *(_OWORD *)(a2 + 736);
      *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 720);
      *(_OWORD *)(a1 + 736) = v15;
      v16 = *(_OWORD *)(a2 + 768);
      *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
      *(_OWORD *)(a1 + 768) = v16;
      v17 = *(_OWORD *)(a2 + 800);
      *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
      *(_OWORD *)(a1 + 800) = v17;
      v18 = *(_OWORD *)(a2 + 832);
      *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 816);
      *(_OWORD *)(a1 + 832) = v18;
      v19 = *(_OWORD *)(a2 + 864);
      *(_OWORD *)(a1 + 848) = *(_OWORD *)(a2 + 848);
      *(_OWORD *)(a1 + 864) = v19;
      *(_QWORD *)(a1 + 880) = v14;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_621C0(a1 + 712);
  }
  v20 = *(_OWORD *)(a2 + 856);
  *(_OWORD *)(a1 + 840) = *(_OWORD *)(a2 + 840);
  *(_OWORD *)(a1 + 856) = v20;
  *(_OWORD *)(a1 + 872) = *(_OWORD *)(a2 + 872);
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
  v21 = *(_OWORD *)(a2 + 792);
  *(_OWORD *)(a1 + 776) = *(_OWORD *)(a2 + 776);
  *(_OWORD *)(a1 + 792) = v21;
  v22 = *(_OWORD *)(a2 + 824);
  *(_OWORD *)(a1 + 808) = *(_OWORD *)(a2 + 808);
  *(_OWORD *)(a1 + 824) = v22;
  v23 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v23;
  v24 = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 744) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 760) = v24;
LABEL_6:
  if (*(_QWORD *)(a1 + 904))
  {
    v25 = *(_QWORD *)(a2 + 904);
    if (v25)
    {
      *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
      *(_QWORD *)(a1 + 904) = v25;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 912) = *(_QWORD *)(a2 + 912);
      *(_QWORD *)(a1 + 920) = *(_QWORD *)(a2 + 920);
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 928);
      *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 936);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_621F4((_QWORD *)(a1 + 896));
  }
  v26 = *(_OWORD *)(a2 + 912);
  *(_OWORD *)(a1 + 896) = *(_OWORD *)(a2 + 896);
  *(_OWORD *)(a1 + 912) = v26;
  *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 928);
LABEL_11:
  if (*(_QWORD *)(a1 + 968))
  {
    v27 = *(_QWORD *)(a2 + 968);
    if (v27)
    {
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
      *(_QWORD *)(a1 + 960) = *(_QWORD *)(a2 + 960);
      *(_QWORD *)(a1 + 968) = v27;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 976) = *(_QWORD *)(a2 + 976);
      *(_QWORD *)(a1 + 984) = *(_QWORD *)(a2 + 984);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_62228(a1 + 944);
  }
  v28 = *(_OWORD *)(a2 + 960);
  *(_OWORD *)(a1 + 944) = *(_OWORD *)(a2 + 944);
  *(_OWORD *)(a1 + 960) = v28;
  *(_OWORD *)(a1 + 976) = *(_OWORD *)(a2 + 976);
LABEL_16:
  *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 992);
  *(_QWORD *)(a1 + 1008) = *(_QWORD *)(a2 + 1008);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1016);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 1048))
  {
LABEL_20:
    v30 = *(_OWORD *)(a2 + 1072);
    *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
    *(_OWORD *)(a1 + 1072) = v30;
    *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
    v31 = *(_OWORD *)(a2 + 1040);
    *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
    *(_OWORD *)(a1 + 1040) = v31;
    return a1;
  }
  v29 = *(_QWORD *)(a2 + 1048);
  if (!v29)
  {
    sub_6225C((_QWORD *)(a1 + 1024));
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 1024) = *(_OWORD *)(a2 + 1024);
  *(_QWORD *)(a1 + 1040) = *(_QWORD *)(a2 + 1040);
  *(_QWORD *)(a1 + 1048) = v29;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a1 + 1080) = *(_QWORD *)(a2 + 1080);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalGenreRecommendationResponse(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 1096))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InternalGenreRecommendationResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 1096) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 1096) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalGenreRecommendationResponse()
{
  return &type metadata for InternalGenreRecommendationResponse;
}

uint64_t dispatch thunk of InternalGenreRecommendationServiceType.fetchRecommendedGenres(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(int **)(a4 + 8);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_4814;
  return v12(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for BooksYouMightLikeOptions()
{
  return &type metadata for BooksYouMightLikeOptions;
}

uint64_t destroy for EventFeatures(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for EventFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for EventFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t assignWithTake for EventFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56));
  v8 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EventFeatures(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EventFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EventFeatures()
{
  return &type metadata for EventFeatures;
}

uint64_t sub_10EC18(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  char *v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  unint64_t v21;
  const void *v22;
  int64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  unint64_t v31;
  const void *v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  _QWORD v40[69];
  _BYTE __src[552];
  _BYTE v42[552];
  _BYTE v43[552];
  _BYTE v44[552];
  _QWORD __dst[69];
  _BYTE v46[552];
  _QWORD v47[3];
  _QWORD *v48;
  unint64_t v49;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)*v2;
  v6 = *(_QWORD *)(*v2 + 16);
  v7 = v6 + v4;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v8 = a1;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v10 = v5[3] >> 1, v10 < v7))
  {
    if (v6 <= v7)
      v11 = v6 + v4;
    else
      v11 = v6;
    v5 = sub_2FA78(isUniquelyReferenced_nonNull_native, v11, 1, v5);
    v10 = v5[3] >> 1;
  }
  v12 = v5[2];
  v13 = (_QWORD *)(v10 - v12);
  v14 = sub_3B930(v47, (char *)&v5[69 * v12 + 4], v10 - v12, v8);
  if ((uint64_t)v14 < v4)
    goto LABEL_16;
  if (v14)
  {
    v15 = v5[2];
    v16 = __OFADD__(v15, v14);
    v17 = (char *)v14 + v15;
    if (v16)
    {
      __break(1u);
      goto LABEL_21;
    }
    v5[2] = v17;
  }
  if (v14 == v13)
  {
LABEL_17:
    v3 = v5[2];
    v8 = v47[0];
    v38 = v47[1];
    v4 = v47[2];
    v13 = v48;
    if (v49)
    {
      v20 = (v49 - 1) & v49;
      v21 = __clz(__rbit64(v49)) | ((_QWORD)v48 << 6);
LABEL_19:
      v22 = (const void *)(*(_QWORD *)(v8 + 48) + 552 * v21);
      memcpy(__dst, v22, 0x221uLL);
      memmove(v46, v22, 0x221uLL);
      AuthorRecommendationSource.id.getter(v46);
      sub_6100(__dst);
      v7 = (int64_t)v13;
LABEL_42:
      sub_117F6C((uint64_t)v46, (uint64_t)v44);
      sub_117F6C((uint64_t)v44, (uint64_t)__dst);
      if (sub_117FB4((uint64_t)__dst) == 1)
      {
LABEL_43:
        v18 = v8;
        goto LABEL_14;
      }
      v39 = (unint64_t)(v4 + 64) >> 6;
      while (1)
      {
        v28 = v5[3];
        v29 = v28 >> 1;
        if ((uint64_t)(v28 >> 1) < v3 + 1)
        {
          v5 = sub_2FA78((_QWORD *)(v28 > 1), v3 + 1, 1, v5);
          v29 = v5[3] >> 1;
        }
        sub_117F6C((uint64_t)v46, (uint64_t)v42);
        sub_117F6C((uint64_t)v42, (uint64_t)v43);
        if (sub_117FB4((uint64_t)v43) != 1)
          break;
LABEL_45:
        v5[2] = v3;
        sub_117F6C((uint64_t)v46, (uint64_t)v44);
        sub_117F6C((uint64_t)v44, (uint64_t)__dst);
        if (sub_117FB4((uint64_t)__dst) == 1)
          goto LABEL_43;
      }
      while (1)
      {
        if (v3 >= v29)
          goto LABEL_45;
        sub_117F6C((uint64_t)v42, (uint64_t)__src);
        result = (uint64_t)memcpy(&v5[69 * v3 + 4], __src, 0x221uLL);
        if (!v20)
          break;
        v30 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        v31 = v30 | (v7 << 6);
LABEL_51:
        v32 = (const void *)(*(_QWORD *)(v8 + 48) + 552 * v31);
        memcpy(v40, v32, 0x221uLL);
        memmove(v46, v32, 0x221uLL);
        AuthorRecommendationSource.id.getter(v46);
        sub_6100(v40);
LABEL_52:
        ++v3;
        sub_117F6C((uint64_t)v46, (uint64_t)v42);
        sub_117F6C((uint64_t)v42, (uint64_t)v43);
        if (sub_117FB4((uint64_t)v43) == 1)
          goto LABEL_45;
      }
      v33 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
        return result;
      }
      if (v33 >= v39)
      {
        v35 = v7;
LABEL_60:
        sub_117FCC(v40);
        sub_117F6C((uint64_t)v40, (uint64_t)v46);
        v20 = 0;
        v7 = v35;
        goto LABEL_52;
      }
      v34 = *(_QWORD *)(v38 + 8 * v33);
      if (!v34)
      {
        v36 = v7 + 2;
        v35 = v7 + 1;
        if (v7 + 2 >= v39)
          goto LABEL_60;
        v34 = *(_QWORD *)(v38 + 8 * v36);
        if (!v34)
        {
          v35 = v7 + 2;
          if (v7 + 3 >= v39)
            goto LABEL_60;
          v34 = *(_QWORD *)(v38 + 8 * (v7 + 3));
          if (v34)
          {
            v33 = v7 + 3;
            goto LABEL_58;
          }
          v36 = v7 + 4;
          v35 = v7 + 3;
          if (v7 + 4 >= v39)
            goto LABEL_60;
          v34 = *(_QWORD *)(v38 + 8 * v36);
          if (!v34)
          {
            v33 = v7 + 5;
            v35 = v7 + 4;
            if (v7 + 5 >= v39)
              goto LABEL_60;
            v34 = *(_QWORD *)(v38 + 8 * v33);
            if (!v34)
            {
              v37 = v7 + 6;
              while (v39 != v37)
              {
                v34 = *(_QWORD *)(v38 + 8 * v37++);
                if (v34)
                {
                  v33 = v37 - 1;
                  goto LABEL_58;
                }
              }
              v35 = v39 - 1;
              goto LABEL_60;
            }
            goto LABEL_58;
          }
        }
        v33 = v36;
      }
LABEL_58:
      v20 = (v34 - 1) & v34;
      v31 = __clz(__rbit64(v34)) + (v33 << 6);
      v7 = v33;
      goto LABEL_51;
    }
LABEL_21:
    v23 = (int64_t)v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
    }
    else
    {
      v24 = (unint64_t)(v4 + 64) >> 6;
      v7 = (int64_t)v13;
      if (v23 >= v24)
        goto LABEL_41;
      v25 = *(_QWORD *)(v38 + 8 * v23);
      if (v25)
      {
LABEL_24:
        v20 = (v25 - 1) & v25;
        v21 = __clz(__rbit64(v25)) + (v23 << 6);
        v13 = (_QWORD *)v23;
        goto LABEL_19;
      }
      v26 = (int64_t)v13 + 2;
      v7 = (int64_t)v13 + 1;
      if ((uint64_t)v13 + 2 >= v24)
        goto LABEL_41;
      v1 = v4;
      v25 = *(_QWORD *)(v38 + 8 * v26);
      if (v25)
      {
LABEL_27:
        v23 = v26;
        goto LABEL_24;
      }
      v7 = (int64_t)v13 + 2;
      if ((uint64_t)v13 + 3 >= v24)
        goto LABEL_41;
      v25 = *(_QWORD *)(v38 + 8 * ((_QWORD)v13 + 3));
      if (v25)
      {
        v23 = (int64_t)v13 + 3;
        goto LABEL_24;
      }
      v26 = (int64_t)v13 + 4;
      v7 = (int64_t)v13 + 3;
      if ((uint64_t)v13 + 4 >= v24)
        goto LABEL_41;
      v25 = *(_QWORD *)(v38 + 8 * v26);
      if (v25)
        goto LABEL_27;
      v23 = (int64_t)v13 + 5;
      v7 = (int64_t)v13 + 4;
      if ((uint64_t)v13 + 5 >= v24)
      {
LABEL_41:
        sub_117FCC(__dst);
        sub_117F6C((uint64_t)__dst, (uint64_t)v46);
        v20 = 0;
        goto LABEL_42;
      }
      v25 = *(_QWORD *)(v38 + 8 * v23);
      if (v25)
        goto LABEL_24;
      v7 = v24 - 1;
      v27 = (char *)v13 + 6;
      while ((char *)v24 != v27)
      {
        v25 = *(_QWORD *)(v38 + 8 * (_QWORD)v27++);
        if (v25)
        {
          v23 = (int64_t)(v27 - 1);
          goto LABEL_24;
        }
      }
    }
    v4 = v1;
    goto LABEL_41;
  }
  v18 = v47[0];
LABEL_14:
  result = sub_5FEC(v18);
  *v2 = v5;
  return result;
}

uint64_t sub_10F158(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2FA6C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10F29C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2FCA8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10F3EC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2FEC0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[10 * v8 + 4];
  if (a1 + 32 < v9 + 80 * v2 && v9 < a1 + 32 + 80 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10F544(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_2FFE0(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = type metadata accessor for CollectionRecommendation(0);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v25 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v25, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10F6AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_30450(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[8 * v8 + 4];
  if (a1 + 32 < v9 + (v2 << 6) && v9 < a1 + 32 + (v2 << 6))
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10F7FC(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_30694(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[9 * v9 + 4];
  if (a1 + 32 < v10 + 72 * v8 && v10 < a1 + 32 + 72 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy(v10);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10F958(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2FA78(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[69 * v8 + 4];
  if (a1 + 32 < v9 + 552 * v2 && v9 < a1 + 32 + 552 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10FAB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_311EC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10FC08(uint64_t a1)
{
  return sub_10FC30(a1, (uint64_t (*)(void))sub_31310);
}

uint64_t sub_10FC1C(uint64_t a1)
{
  return sub_10FC30(a1, (uint64_t (*)(void))sub_3143C);
}

uint64_t sub_10FC30(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t result;
  char v15;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v2) && v5 + v3 <= *(_QWORD *)(v4 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v4 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v3)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v8 = *(_QWORD *)(v4 + 16);
  if ((*(_QWORD *)(v4 + 24) >> 1) - v8 < v3)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = v4 + 16 * v8 + 32;
  if (a1 + 32 < v9 + 16 * v3 && v9 < a1 + 32 + 16 * v3)
    goto LABEL_21;
  swift_arrayInitWithCopy(v9);
  if (!v3)
  {
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v2 = v4;
    return result;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = __OFADD__(v11, v3);
  v13 = v11 + v3;
  if (!v12)
  {
    *(_QWORD *)(v4 + 16) = v13;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v15 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10FD8C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_31450(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[4 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[4 * v2] && (unint64_t)v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 32 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10FED0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_31564(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_110020(uint64_t a1)
{
  _QWORD *v1;
  size_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  size_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  int64_t v15;
  uint64_t result;
  char v17;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_31670(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (char *)v3 + v9 + 32;
  if (a1 + 32 < (unint64_t)&v10[v8] && (unint64_t)v10 < a1 + 32 + v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v17 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v17, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_110168(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v6 = a1;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = sub_2FA6C(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = v3[3] >> 1;
  }
  v10 = v3[2];
  v11 = v8 - v10;
  result = (uint64_t)sub_3BB54(v42, &v3[v10 + 4], v8 - v10, v6);
  if (result < v2)
    goto LABEL_16;
  if (result)
  {
    v16 = v3[2];
    v17 = __OFADD__(v16, result);
    v18 = v16 + result;
    if (v17)
    {
      __break(1u);
      goto LABEL_48;
    }
    v3[2] = v18;
  }
  if (result != v11)
  {
    result = v42[0];
LABEL_14:
    result = sub_5FEC(result);
    *v1 = v3;
    return result;
  }
LABEL_17:
  v6 = v3[2];
  result = v42[0];
  v13 = v42[1];
  v14 = v43;
  v15 = v44;
  if (v45)
  {
    v19 = (v45 - 1) & v45;
    v20 = __clz(__rbit64(v45)) | (v44 << 6);
    v21 = (unint64_t)(v43 + 64) >> 6;
    goto LABEL_19;
  }
LABEL_48:
  v35 = v15 + 1;
  if (__OFADD__(v15, 1))
    goto LABEL_66;
  v21 = (unint64_t)(v14 + 64) >> 6;
  if (v35 >= v21)
    goto LABEL_14;
  v36 = *(_QWORD *)(v13 + 8 * v35);
  v37 = v15 + 1;
  if (!v36)
  {
    v37 = v15 + 2;
    if (v15 + 2 >= v21)
      goto LABEL_14;
    v36 = *(_QWORD *)(v13 + 8 * v37);
    if (!v36)
    {
      v37 = v15 + 3;
      if (v15 + 3 >= v21)
        goto LABEL_14;
      v36 = *(_QWORD *)(v13 + 8 * v37);
      if (!v36)
      {
        v37 = v15 + 4;
        if (v15 + 4 >= v21)
          goto LABEL_14;
        v36 = *(_QWORD *)(v13 + 8 * v37);
        if (!v36)
        {
          v37 = v15 + 5;
          if (v15 + 5 >= v21)
            goto LABEL_14;
          v36 = *(_QWORD *)(v13 + 8 * v37);
          if (!v36)
          {
            v38 = v15 + 6;
            do
            {
              if (v21 == v38)
                goto LABEL_14;
              v36 = *(_QWORD *)(v13 + 8 * v38++);
            }
            while (!v36);
            v37 = v38 - 1;
          }
        }
      }
    }
  }
  v19 = (v36 - 1) & v36;
  v20 = __clz(__rbit64(v36)) + (v37 << 6);
  v15 = v37;
LABEL_19:
  v22 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v20);
  while (1)
  {
    v23 = v3[3];
    v24 = v23 >> 1;
    if ((uint64_t)(v23 >> 1) < v6 + 1)
      break;
    if (v6 < v24)
      goto LABEL_26;
LABEL_20:
    v3[2] = v6;
  }
  v40 = v13;
  v41 = result;
  v39 = v14;
  v31 = v15;
  v32 = v3;
  v33 = v19;
  v34 = sub_2FA6C((_QWORD *)(v23 > 1), v6 + 1, 1, v32);
  v19 = v33;
  v15 = v31;
  v14 = v39;
  v13 = v40;
  v3 = v34;
  result = v41;
  v24 = v3[3] >> 1;
  if (v6 >= v24)
    goto LABEL_20;
  while (1)
  {
LABEL_26:
    v3[v6++ + 4] = v22;
    if (v19)
    {
      v25 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v26 = v25 | (v15 << 6);
      goto LABEL_25;
    }
    v27 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v27 >= v21)
      goto LABEL_45;
    v28 = *(_QWORD *)(v13 + 8 * v27);
    v29 = v15 + 1;
    if (!v28)
    {
      v29 = v15 + 2;
      if (v15 + 2 >= v21)
        goto LABEL_45;
      v28 = *(_QWORD *)(v13 + 8 * v29);
      if (!v28)
      {
        v29 = v15 + 3;
        if (v15 + 3 >= v21)
          goto LABEL_45;
        v28 = *(_QWORD *)(v13 + 8 * v29);
        if (!v28)
        {
          v29 = v15 + 4;
          if (v15 + 4 >= v21)
            goto LABEL_45;
          v28 = *(_QWORD *)(v13 + 8 * v29);
          if (!v28)
          {
            v29 = v15 + 5;
            if (v15 + 5 >= v21)
              goto LABEL_45;
            v28 = *(_QWORD *)(v13 + 8 * v29);
            if (!v28)
            {
              v30 = v15 + 6;
              while (v21 != v30)
              {
                v28 = *(_QWORD *)(v13 + 8 * v30++);
                if (v28)
                {
                  v29 = v30 - 1;
                  goto LABEL_42;
                }
              }
LABEL_45:
              v3[2] = v6;
              goto LABEL_14;
            }
          }
        }
      }
    }
LABEL_42:
    v19 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v29 << 6);
    v15 = v29;
LABEL_25:
    v22 = *(_QWORD *)(*(_QWORD *)(result + 48) + 8 * v26);
    if (v6 >= v24)
      goto LABEL_20;
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_1104F8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_2FFF4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[14 * v8 + 4];
  if (a1 + 32 < v9 + 112 * v2 && v9 < a1 + 32 + 112 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_110650(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_31874(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[6 * v8 + 4];
  if (a1 + 32 < v9 + 48 * v2 && v9 < a1 + 32 + 48 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1107A8(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;
  char v26;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_319B8(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  v11 = type metadata accessor for URLQueryItem(0);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy(v15);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v26, 1092, 0);
  __break(1u);
  return result;
}

uint64_t ClientConverter.init(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t (*v51)(uint64_t);
  uint64_t (*v52)@<X0>(uint64_t@<X8>);
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t result;
  uint64_t *v57;
  void (*v58)(char *, uint64_t);
  unsigned int v59;
  void (*v60)(char *, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t (*v83)@<X0>(uint64_t@<X8>);
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  _QWORD v86[2];

  v73 = a2;
  v78 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v76 = *(_QWORD *)(v78 - 8);
  __chkstk_darwin(v78);
  v77 = (void (**)(char *, uint64_t))((char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v72 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82);
  v75 = (void (**)(char *, uint64_t))((char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = type metadata accessor for JSONEncoder.OutputFormatting(0);
  v5 = *(_QWORD *)(v71 - 8);
  v6 = __chkstk_darwin(v71);
  v81 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v74 = (char *)&v58 - v8;
  v9 = *a1;
  v10 = a1[1];
  v11 = a1[2];
  v12 = a1[3];
  if (*a1)
  {
    sub_3EAFC(*a1, a1[1]);
    sub_3EAFC(v11, v12);
    sub_3EAFC(v9, v10);
    sub_3EAFC(v11, v12);
    sub_3EAFC(v9, v10);
    sub_3EAFC(v11, v12);
    v84 = v10;
    v85 = (uint64_t (*)(uint64_t))v9;
  }
  else
  {
    v13 = objc_allocWithZone((Class)NSISO8601DateFormatter);
    sub_3EAFC(0, v10);
    sub_3EAFC(v11, v12);
    sub_3EAFC(0, v10);
    sub_3EAFC(v11, v12);
    sub_3EAFC(0, v10);
    sub_3EAFC(v11, v12);
    v14 = objc_msgSend(v13, "init");
    v15 = swift_allocObject(&unk_1E6FB8, 24, 7);
    *(_QWORD *)(v15 + 16) = v14;
    v84 = v15;
    v85 = sub_3EB40;
  }
  sub_3EAFC(v9, v10);
  if (v11)
  {
    sub_3EAFC(v11, v12);
    sub_3EB0C(v9, v10);
    sub_3EB0C(v11, v12);
    v83 = (uint64_t (*)@<X0>(uint64_t@<X8>))v11;
    v16 = v12;
  }
  else
  {
    sub_3EB0C(v9, v10);
    sub_3EB0C(0, v12);
    v17 = objc_msgSend(objc_allocWithZone((Class)NSISO8601DateFormatter), "init");
    v16 = swift_allocObject(&unk_1E6FE0, 24, 7);
    *(_QWORD *)(v16 + 16) = v17;
    v83 = sub_3EB58;
  }
  v80 = type metadata accessor for JSONEncoder(0);
  v18 = sub_5EDC(&qword_1F5A98);
  v19 = *(_QWORD *)(v5 + 72);
  v20 = *(unsigned __int8 *)(v5 + 80);
  v68 = ((v20 + 32) & ~v20) + 2 * v19;
  v69 = v18;
  v65 = (v20 + 32) & ~v20;
  v64 = v19;
  v67 = v20 | 7;
  v21 = swift_allocObject(v18, v68, v20 | 7);
  v66 = xmmword_18FC00;
  *(_OWORD *)(v21 + 16) = xmmword_18FC00;
  v22 = v5;
  sub_3EAFC(v9, v10);
  sub_3EAFC(v11, v12);
  v23 = v84;
  swift_retain(v84);
  swift_retain(v16);
  sub_3EAFC(v9, v10);
  sub_3EAFC(v11, v12);
  v84 = v23;
  swift_retain(v23);
  swift_retain(v16);
  sub_3EAFC(v9, v10);
  sub_3EAFC(v11, v12);
  swift_retain(v23);
  v24 = v16;
  v79 = v16;
  v25 = swift_retain(v16);
  v26 = static JSONEncoder.OutputFormatting.sortedKeys.getter(v25);
  static JSONEncoder.OutputFormatting.prettyPrinted.getter(v26);
  v86[0] = v21;
  v27 = sub_41754(&qword_1F5AA0, (uint64_t (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting, (uint64_t)&protocol conformance descriptor for JSONEncoder.OutputFormatting);
  v62 = v27;
  v28 = sub_5EDC(&qword_1F5AA8);
  v61 = v28;
  v63 = sub_3EDBC(&qword_1F5AB0, &qword_1F5AA8, (uint64_t)&protocol conformance descriptor for [A]);
  v29 = v74;
  v30 = v28;
  v31 = v71;
  v32 = dispatch thunk of SetAlgebra.init<A>(_:)(v86, v30, v63, v71, v27);
  v33 = dispatch thunk of JSONEncoder.__allocating_init()(v32);
  v34 = v22;
  v60 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
  v35 = v81;
  v60(v81, v29, v31);
  swift_retain(v33);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v35);
  v36 = (_QWORD *)swift_allocObject(&unk_1E7008, 80, 7);
  v36[2] = v9;
  v36[3] = v10;
  v36[4] = v11;
  v36[5] = v12;
  v37 = v84;
  v36[6] = v85;
  v36[7] = v37;
  v36[8] = v83;
  v36[9] = v24;
  v38 = v75;
  *v75 = sub_3EC54;
  v38[1] = v36;
  v59 = enum case for JSONEncoder.DateEncodingStrategy.custom(_:);
  v72 = *(_QWORD *)(v72 + 104);
  ((void (*)(_QWORD *))v72)(v38);
  v70 = v33;
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v38);
  swift_release(v33);
  v58 = *(void (**)(char *, uint64_t))(v34 + 8);
  v58(v29, v31);
  sub_3EAFC(v9, v10);
  sub_3EAFC(v11, v12);
  sub_3EB0C(v11, v12);
  sub_3EB0C(v9, v10);
  v39 = swift_allocObject(v69, v68, v67);
  *(_OWORD *)(v39 + 16) = v66;
  v40 = static JSONEncoder.OutputFormatting.sortedKeys.getter(v39);
  static JSONEncoder.OutputFormatting.withoutEscapingSlashes.getter(v40);
  v86[0] = v39;
  v41 = dispatch thunk of SetAlgebra.init<A>(_:)(v86, v61, v63, v31, v62);
  v42 = dispatch thunk of JSONEncoder.__allocating_init()(v41);
  v43 = v81;
  v60(v81, v29, v31);
  swift_retain(v42);
  dispatch thunk of JSONEncoder.outputFormatting.setter(v43);
  v44 = (_QWORD *)swift_allocObject(&unk_1E7030, 80, 7);
  v44[2] = v9;
  v44[3] = v10;
  v44[4] = v11;
  v44[5] = v12;
  v45 = v84;
  v44[6] = v85;
  v44[7] = v45;
  v46 = v82;
  v47 = v79;
  v44[8] = v83;
  v44[9] = v47;
  *v38 = sub_118004;
  v38[1] = v44;
  ((void (*)(_QWORD *, _QWORD, uint64_t))v72)(v38, v59, v46);
  v80 = v42;
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v38);
  swift_release(v42);
  v58(v29, v31);
  type metadata accessor for JSONDecoder(0);
  sub_3EAFC(v9, v10);
  sub_3EAFC(v11, v12);
  sub_3EB0C(v11, v12);
  v48 = sub_3EB0C(v9, v10);
  v49 = dispatch thunk of JSONDecoder.__allocating_init()(v48);
  v50 = (_QWORD *)swift_allocObject(&unk_1E7058, 80, 7);
  v50[2] = v9;
  v50[3] = v10;
  v50[4] = v11;
  v50[5] = v12;
  v51 = v85;
  v50[6] = v85;
  v50[7] = v45;
  v52 = v83;
  v53 = v78;
  v54 = v79;
  v50[8] = v83;
  v50[9] = v54;
  v55 = v77;
  *v77 = sub_3EBEC;
  v55[1] = v50;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v76 + 104))(v55, enum case for JSONDecoder.DateDecodingStrategy.custom(_:), v53);
  swift_retain(v49);
  dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v55);
  result = swift_release(v49);
  v57 = v73;
  *v73 = v9;
  v57[1] = v10;
  v57[2] = v11;
  v57[3] = v12;
  v57[4] = v9;
  v57[5] = v10;
  v57[6] = v11;
  v57[7] = v12;
  v57[8] = v9;
  v57[9] = v10;
  v57[10] = v11;
  v57[11] = v12;
  v57[12] = (uint64_t)v51;
  v57[13] = v45;
  v57[14] = (uint64_t)v52;
  v57[15] = v54;
  v57[16] = v70;
  v57[17] = v49;
  v57[18] = v80;
  return result;
}

uint64_t sub_111078()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t static APIClientHelpers.makeServerComponents(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  v6 = sub_5EDC(&qword_1F4360);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  URLComponents.init(string:)(a1, a2);
  v9 = type metadata accessor for URLComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  sub_417D8((uint64_t)v8, &qword_1F4360);
  v11 = type metadata accessor for ClientErrorPayload(0);
  v12 = sub_41754((unint64_t *)&qword_1F4368, type metadata accessor for ClientErrorPayload, (uint64_t)&protocol conformance descriptor for ClientErrorPayload);
  swift_allocError(v11, v12, 0, 0);
  *v13 = a1;
  v13[1] = a2;
  swift_storeEnumTagMultiPayload(v13, v11, 0);
  v14 = swift_bridgeObjectRetain(a2);
  return swift_willThrow(v14);
}

uint64_t type metadata accessor for ClientErrorPayload(uint64_t a1)
{
  uint64_t result;

  result = qword_1F5BF0;
  if (!qword_1F5BF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClientErrorPayload);
  return result;
}

uint64_t static APIClientHelpers.createRequest(components:method:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t);
  int *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD v32[2];
  uint64_t v33;

  v33 = a2;
  v8 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v8);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)v32 - v17;
  URLComponents.url.getter(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_417D8((uint64_t)v10, &qword_1F2448);
    v19 = type metadata accessor for ClientErrorPayload(0);
    v20 = sub_41754((unint64_t *)&qword_1F4368, type metadata accessor for ClientErrorPayload, (uint64_t)&protocol conformance descriptor for ClientErrorPayload);
    swift_allocError(v19, v20, 0, 0);
    v22 = v21;
    v23 = type metadata accessor for URLComponents(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, a1, v23);
    v24 = swift_storeEnumTagMultiPayload(v22, v19, 1);
    return swift_willThrow(v24);
  }
  else
  {
    v32[1] = v4;
    v26 = a3;
    v27 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v27(v18, v10, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, v11);
    v28 = *(void (**)(char *, uint64_t))(v12 + 8);
    swift_bridgeObjectRetain(v26);
    v28(v18, v11);
    v29 = (int *)type metadata accessor for ClientCurrency.Request(0);
    v30 = v29[7];
    result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(a4, v15, v11);
    v31 = (_QWORD *)(a4 + v29[5]);
    *v31 = v33;
    v31[1] = v26;
    *(_QWORD *)(a4 + v29[6]) = _swiftEmptyArrayStorage;
    *(_OWORD *)(a4 + v30) = xmmword_195670;
  }
  return result;
}

uint64_t ClientConverter.addPrimitiveHeader<A>(name:value:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for ClientCurrency.Request(0);
  return CommonCurrency.Headers.addPrimitive<A>(name:value:)(a1, a2, a3, a5, a6);
}

uint64_t static APIClientHelpers.validateContentTypeIfPresent(_:in:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a3 + 8);
  swift_bridgeObjectRetain(v6);
  sub_3E938(a1, a2, &v6);
  return swift_bridgeObjectRelease();
}

uint64_t static APIClientHelpers.perform<A>(operation:for:makeRequest:makeCall:makeOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 120) = v12;
  *(_OWORD *)(v8 + 104) = v11;
  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 96) = a8;
  *(_QWORD *)(v8 + 72) = a5;
  *(_QWORD *)(v8 + 80) = a6;
  *(_QWORD *)(v8 + 56) = a3;
  *(_QWORD *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 48) = a1;
  v9 = type metadata accessor for ClientCurrency.Request(0);
  *(_QWORD *)(v8 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1115A0, 0, 0);
}

uint64_t sub_1115A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  char *v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 136) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 112);
  *(_QWORD *)(v2 + 32) = v1;
  v5 = (char *)&dword_1F5AC0 + dword_1F5AC0;
  v3 = (_QWORD *)swift_task_alloc(unk_1F5AC4);
  *(_QWORD *)(v0 + 144) = v3;
  *v3 = v0;
  v3[1] = sub_111634;
  return ((uint64_t (*)(_QWORD, uint64_t (*)@<X0>(uint64_t@<X0>, _QWORD *@<X8>), uint64_t, _QWORD, _QWORD))v5)(*(_QWORD *)(v0 + 128), sub_115A14, v2, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_111634()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_D96E0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 136));
    v4 = sub_1116A0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1116A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 160) = v3;
  v8 = *(_OWORD *)(v0 + 80);
  v4 = swift_task_alloc(48);
  v5 = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v3 + 16) = v8;
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v0 + 168) = v4;
  *(_OWORD *)(v4 + 16) = v5;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v1;
  *(_QWORD *)&v8 = (char *)&dword_1F5AD0 + dword_1F5AD0;
  v6 = (_QWORD *)swift_task_alloc(unk_1F5AD4);
  *(_QWORD *)(v0 + 176) = v6;
  *v6 = v0;
  v6[1] = sub_111774;
  return ((uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))v8)(v0 + 16, (int *)&unk_1F4310, v3, (uint64_t)sub_115A20, v4);
}

uint64_t sub_111774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_1119F4;
  else
    v5 = sub_1117F4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1117F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);

  v1 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 192) = v5;
  *(_QWORD *)(v0 + 200) = v7;
  *(_QWORD *)(v0 + 208) = v6;
  v8 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 216) = v8;
  v9 = *(_OWORD *)(v0 + 96);
  *(_QWORD *)(v8 + 16) = v2;
  *(_QWORD *)(v8 + 24) = v1;
  *(_OWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 48) = v4;
  *(_QWORD *)(v8 + 56) = v5;
  *(_QWORD *)(v8 + 64) = v7;
  *(_QWORD *)(v8 + 72) = v6;
  v10 = (_QWORD *)swift_task_alloc(80);
  *(_QWORD *)(v0 + 224) = v10;
  v10[2] = v2;
  v10[3] = v1;
  v10[4] = v3;
  v10[5] = v15;
  v10[6] = v4;
  v10[7] = v5;
  v10[8] = v7;
  v10[9] = v6;
  v11 = (_QWORD *)swift_task_alloc(dword_1F5AEC);
  *(_QWORD *)(v0 + 232) = v11;
  *v11 = v0;
  v11[1] = sub_11190C;
  v12 = *(_QWORD *)(v0 + 48);
  v11[7] = sub_115ABC;
  v11[8] = v10;
  v16 = (uint64_t (*)(uint64_t))((char *)&dword_1F5AE0 + dword_1F5AE0);
  v13 = (_QWORD *)swift_task_alloc(unk_1F5AE4);
  v11[9] = v13;
  *v13 = v11;
  v13[1] = sub_113D0C;
  return v16(v12);
}

uint64_t sub_11190C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_111A38;
  else
    v5 = sub_11198C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_11198C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease();
  sub_3E21C(v1, v2);
  sub_26AA0(v3, type metadata accessor for ClientCurrency.Request);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1119F4()
{
  uint64_t v0;

  sub_26AA0(*(_QWORD *)(v0 + 128), type metadata accessor for ClientCurrency.Request);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_111A38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease();
  sub_3E21C(v1, v2);
  sub_26AA0(v3, type metadata accessor for ClientCurrency.Request);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_111AA0@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *);
  uint64_t v28;

  v25 = a5;
  v26 = a2;
  v28 = a4;
  v27 = a1;
  v24 = a3;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v10);
  v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7)
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25, v12, v24);
    v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a6, v22, 1);
}

uint64_t ClientError.errorDescription.getter(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(a1, *(_QWORD *)(a2 + 16));
}

uint64_t GeneralClientError.operationId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_115AEC();
  swift_bridgeObjectRetain(v1);
  return v0;
}

uint64_t GeneralClientError.input.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a1 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a1 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, v4, AssociatedTypeWitness);
}

uint64_t GeneralClientError.input.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v4 = v2 + *(int *)(a2 + 36);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 40))(v4, a1, AssociatedTypeWitness);
}

uint64_t (*GeneralClientError.input.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t GeneralClientError.request.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_418BC(v2 + *(int *)(a1 + 40), a2, &qword_1F4318);
}

uint64_t GeneralClientError.request.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_115AF4(a1, v2 + *(int *)(a2 + 40));
}

uint64_t (*GeneralClientError.request.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t GeneralClientError.response.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(v2 + *(int *)(a1 + 44));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  *a2 = *v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return sub_115B3C(v4, v5, v6, v7);
}

__n128 GeneralClientError.response.setter(__n128 *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  v7 = *a1;
  v3 = a1[1].n128_u64[0];
  v4 = a1[1].n128_u64[1];
  v5 = v2 + *(int *)(a2 + 44);
  sub_DD34C(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24));
  result = v7;
  *(__n128 *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  return result;
}

uint64_t (*GeneralClientError.response.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t GeneralClientError.underlyingError.getter(uint64_t a1)
{
  uint64_t v1;

  v1 = sub_115B74(a1);
  swift_errorRetain(v1);
  return v1;
}

uint64_t GeneralClientError.underlyingError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2 + 48);
  result = swift_errorRelease(*(_QWORD *)(v2 + v4));
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*GeneralClientError.underlyingError.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t GeneralClientError.init(operationId:input:request:response:underlyingError:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>)
{
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t AssociatedTypeWitness;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33[2];
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;

  v32 = *a5;
  v31 = *((_QWORD *)a5 + 2);
  v30 = *((_QWORD *)a5 + 3);
  v15 = (int *)type metadata accessor for GeneralClientError(0, a7, a8, a4);
  v16 = (uint64_t)a9 + v15[10];
  v17 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = (char *)a9 + v15[11];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *a9 = a1;
  a9[1] = a2;
  v19 = (char *)a9 + v15[9];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a8);
  v21 = *(_QWORD *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v19, a3, AssociatedTypeWitness);
  sub_DD304(a4, v16);
  sub_DD34C(*(_QWORD *)v18, *((_QWORD *)v18 + 1), *((_QWORD *)v18 + 2), *((_QWORD *)v18 + 3));
  *(_OWORD *)v18 = v32;
  *((_QWORD *)v18 + 2) = v31;
  *((_QWORD *)v18 + 3) = v30;
  v35 = a6;
  swift_errorRetain(a6);
  v22 = sub_5EDC(&qword_1F1348);
  v23 = sub_5EDC(&qword_1F4330);
  if ((swift_dynamicCast(v33, &v35, v22, v23, 6) & 1) != 0)
  {
    sub_26DB8(v33, (uint64_t)v36);
    v24 = v21;
    v25 = v37;
    v26 = v38;
    sub_49F4(v36, v37);
    v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 48))(v25, v26);
    swift_errorRelease(a6);
    sub_417D8(a4, &qword_1F4318);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a3, AssociatedTypeWitness);
    *(_QWORD *)((char *)a9 + v15[12]) = v27;
    return sub_62F8(v36);
  }
  else
  {
    v34 = 0;
    memset(v33, 0, sizeof(v33));
    sub_417D8(a4, &qword_1F4318);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a3, AssociatedTypeWitness);
    result = sub_417D8((uint64_t)v33, &qword_1F4338);
    *(_QWORD *)((char *)a9 + v15[12]) = a6;
  }
  return result;
}

uint64_t GeneralClientError.description.getter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  char *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;

  v3 = 0x3E6C696E3CLL;
  v4 = sub_5EDC(&qword_1F4318);
  __chkstk_darwin(v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a1 + 24));
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)&v32 - v9;
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(90);
  v35 = v32;
  v36 = v33;
  v11._countAndFlagsBits = 0xD00000000000001CLL;
  v11._object = (void *)0x80000000001A2750;
  String.append(_:)(v11);
  v12 = *v1;
  v13 = (void *)v1[1];
  swift_bridgeObjectRetain(v13);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x3A7475706E69202CLL;
  v15._object = (void *)0xE900000000000020;
  String.append(_:)(v15);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, (char *)v1 + *(int *)(a1 + 36), AssociatedTypeWitness);
  v16._countAndFlagsBits = String.init<A>(describing:)(v10, AssociatedTypeWitness);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x736575716572202CLL;
  v17._object = (void *)0xEB00000000203A74;
  String.append(_:)(v17);
  sub_418BC((uint64_t)v1 + *(int *)(a1 + 40), (uint64_t)v6, &qword_1F4318);
  v18 = type metadata accessor for ClientCurrency.Request(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v6, 1, v18) == 1)
  {
    sub_417D8((uint64_t)v6, &qword_1F4318);
    v19 = (void *)0xE500000000000000;
    v20 = 0x3E6C696E3CLL;
  }
  else
  {
    v20 = ClientCurrency.Request.description.getter();
    v19 = v21;
    sub_26AA0((uint64_t)v6, type metadata accessor for ClientCurrency.Request);
  }
  v22._countAndFlagsBits = v20;
  v22._object = v19;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 0x6E6F70736572202CLL;
  v23._object = (void *)0xEC000000203A6573;
  String.append(_:)(v23);
  v24 = (char *)v1 + *(int *)(a1 + 44);
  v25 = *((_QWORD *)v24 + 1);
  if (v25)
  {
    v32 = *(_QWORD *)v24;
    v33 = v25;
    v34 = *((_OWORD *)v24 + 1);
    v3 = ClientCurrency.Response.description.getter();
    v27 = v26;
  }
  else
  {
    v27 = (void *)0xE500000000000000;
  }
  v28._countAndFlagsBits = v3;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._object = (void *)0x80000000001A2770;
  v29._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v29);
  v30._countAndFlagsBits = sub_112800(a1);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  return v35;
}

uint64_t ClientCurrency.Request.description.getter()
{
  uint64_t v0;
  unint64_t v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  int *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  _StringGuts.grow(_:)(51);
  v1 = 0xE500000000000000;
  v2._countAndFlagsBits = 0x203A4C5255;
  v2._object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = URL.absoluteString.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x646F6874656D202CLL;
  v4._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  v5 = (int *)type metadata accessor for ClientCurrency.Request(0);
  v6 = (uint64_t *)(v0 + v5[5]);
  v7 = *v6;
  v8 = (void *)v6[1];
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x726564616568202CLL;
  v10._object = (void *)0xEB00000000203A73;
  String.append(_:)(v10);
  v11 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + v5[6]));
  sub_272F4(v11);
  v12 = sub_5EDC(&qword_1F03E0);
  v13 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
  v14 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v12, v13);
  v16 = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x80000000001A2790;
  v18._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v18);
  v19 = (uint64_t *)(v0 + v5[7]);
  v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    v21 = 0x3E6C696E3CLL;
  }
  else
  {
    v21 = sub_114524(*v19, v20);
    v1 = v22;
  }
  v23 = v1;
  String.append(_:)(*(Swift::String *)&v21);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ClientCurrency.Response.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  void *v27;
  _QWORD v28[2];
  uint64_t v29;
  unint64_t v30;

  v1 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v1);
  v3 = (char *)v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  v5 = v0[1];
  v6 = v0[2];
  v7 = v0[3];
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v29 = 0x203A737574617473;
  v30 = 0xE800000000000000;
  v28[0] = v4;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x726564616568202CLL;
  v9._object = (void *)0xEB00000000203A73;
  String.append(_:)(v9);
  v10 = swift_bridgeObjectRetain(v5);
  v28[0] = sub_272F4(v10);
  v11 = sub_5EDC(&qword_1F03E0);
  v12 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
  v13 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v11, v12);
  v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x203A79646F62202CLL;
  v17._object = (void *)0xE800000000000000;
  String.append(_:)(v17);
  sub_3E1D8(v6, v7);
  sub_2CB30(256, v6, v7);
  v19 = v28[0];
  v18 = v28[1];
  static String.Encoding.utf8.getter(v20);
  v21 = String.init(data:encoding:)(v19, v18, v3);
  if (v22 || (static String.Encoding.ascii.getter(v21), v21 = String.init(data:encoding:)(v19, v18, v3), v22))
  {
    v23 = v21;
    v24 = v22;
  }
  else
  {
    sub_3E1D8(v19, v18);
    v23 = Data.description.getter(v19, v18);
    v24 = v27;
    sub_3E21C(v19, v18);
  }
  sub_3E21C(v19, v18);
  v25._countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t sub_112800(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v46;
  _OWORD *v47;
  char *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  Swift::String v59;
  uint64_t v60;
  Swift::String v61;
  uint64_t v62;
  void *v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  Swift::String v69;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  Swift::String v79;
  uint64_t v80;
  Swift::String v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t WitnessTable;
  Swift::String v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD v107[3];
  char v108[16];

  v92 = type metadata accessor for EncodingError.Context(0);
  v98 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v91 = (char *)&v90 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5EDC(&qword_1F5C30);
  __chkstk_darwin(v4);
  v99 = (char *)&v90 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EncodingError(0);
  v100 = *(_QWORD *)(v6 - 8);
  v101 = v6;
  v7 = __chkstk_darwin(v6);
  v97 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v96 = (char *)&v90 - v9;
  v10 = type metadata accessor for DecodingError.Context(0);
  v94 = *(_QWORD *)(v10 - 8);
  v95 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5EDC(&qword_1F5C38);
  __chkstk_darwin(v13);
  v15 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DecodingError(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (__int128 *)((char *)&v90 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v18);
  v22 = (char *)&v90 - v21;
  v93 = a1;
  v23 = *(int *)(a1 + 48);
  *(_QWORD *)&v102 = *(_QWORD *)(v1 + v23);
  swift_errorRetain(v102);
  v24 = sub_5EDC(&qword_1F1348);
  v25 = swift_dynamicCast(v15, &v102, v24, v16, 6);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (v25)
  {
    v27 = v12;
    v29 = v94;
    v28 = v95;
    v26(v15, 0, 1, v16);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
    (*(void (**)(__int128 *, char *, uint64_t))(v17 + 16))(v20, v22, v16);
    v30 = (*(uint64_t (**)(__int128 *, uint64_t))(v17 + 88))(v20, v16);
    v31 = v22;
    if (v30 == enum case for DecodingError.typeMismatch(_:))
    {
      (*(void (**)(__int128 *, uint64_t))(v17 + 96))(v20, v16);
      v32 = *(_QWORD *)v20;
      v33 = sub_5EDC(&qword_1F2C58);
      v34 = v29;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v27, (char *)v20 + *(int *)(v33 + 48), v28);
      *(_QWORD *)&v102 = 0;
      *((_QWORD *)&v102 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      strcpy((char *)&v102, "typeMismatch ");
      HIWORD(v102) = -4864;
      v35._countAndFlagsBits = _typeName(_:qualified:)(v32, 0);
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36 = 0x206E69202D20;
      v37 = 0xE600000000000000;
    }
    else
    {
      if (v30 != enum case for DecodingError.valueNotFound(_:))
      {
        v71 = v28;
        v72 = v27;
        if (v30 == enum case for DecodingError.keyNotFound(_:))
        {
          (*(void (**)(__int128 *, uint64_t))(v17 + 96))(v20, v16);
          v73 = (char *)v20 + *(int *)(sub_5EDC(&qword_1F5C40) + 48);
          sub_26DB8(v20, (uint64_t)&v102);
          v74 = v29;
          (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v72, v73, v71);
          v105 = 0;
          v106 = 0xE000000000000000;
          _StringGuts.grow(_:)(19);
          v75._countAndFlagsBits = 0x6F46746F4E79656BLL;
          v75._object = (void *)0xEC00000020646E75;
          String.append(_:)(v75);
          v77 = v103;
          v76 = v104;
          v78 = sub_49F4(&v102, v103);
          DefaultStringInterpolation.appendInterpolation<A>(_:)(v78, v77, *(_QWORD *)(v76 + 16));
          v79._countAndFlagsBits = 2108704;
          v79._object = (void *)0xE300000000000000;
          String.append(_:)(v79);
          v81._countAndFlagsBits = DecodingError.Context.debugDescription.getter(v80);
          String.append(_:)(v81);
          swift_bridgeObjectRelease();
          v82 = v71;
          v62 = v105;
          v63 = (void *)v106;
          (*(void (**)(char *, uint64_t))(v74 + 8))(v72, v82);
          sub_62F8(&v102);
        }
        else if (v30 == enum case for DecodingError.dataCorrupted(_:))
        {
          (*(void (**)(__int128 *, uint64_t))(v17 + 96))(v20, v16);
          v83 = v29;
          (*(void (**)(char *, __int128 *, uint64_t))(v29 + 32))(v27, v20, v71);
          *(_QWORD *)&v102 = 0;
          *((_QWORD *)&v102 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(18);
          v84 = swift_bridgeObjectRelease();
          *(_QWORD *)&v102 = 0xD000000000000010;
          *((_QWORD *)&v102 + 1) = 0x80000000001A28C0;
          v85._countAndFlagsBits = DecodingError.Context.debugDescription.getter(v84);
          String.append(_:)(v85);
          swift_bridgeObjectRelease();
          v86 = v71;
          v63 = (void *)*((_QWORD *)&v102 + 1);
          v62 = v102;
          (*(void (**)(char *, uint64_t))(v83 + 8))(v27, v86);
        }
        else
        {
          strcpy((char *)&v102, "unknown: ");
          WORD5(v102) = 0;
          HIDWORD(v102) = -385875968;
          v87 = v93;
          WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, v93);
          v89._countAndFlagsBits = Error.localizedDescription.getter(v87, WitnessTable);
          String.append(_:)(v89);
          swift_bridgeObjectRelease();
          v63 = (void *)*((_QWORD *)&v102 + 1);
          v62 = v102;
          (*(void (**)(__int128 *, uint64_t))(v17 + 8))(v20, v16);
        }
        goto LABEL_10;
      }
      (*(void (**)(__int128 *, uint64_t))(v17 + 96))(v20, v16);
      v57 = *(_QWORD *)v20;
      v58 = sub_5EDC(&qword_1F2C58);
      v34 = v29;
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v27, (char *)v20 + *(int *)(v58 + 48), v28);
      *(_QWORD *)&v102 = 0;
      *((_QWORD *)&v102 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(21);
      swift_bridgeObjectRelease();
      strcpy((char *)&v102, "valueNotFound ");
      HIBYTE(v102) = -18;
      v59._countAndFlagsBits = _typeName(_:qualified:)(v57, 0);
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v36 = 2108704;
      v37 = 0xE300000000000000;
    }
    String.append(_:)(*(Swift::String *)&v36);
    v61._countAndFlagsBits = DecodingError.Context.debugDescription.getter(v60);
    String.append(_:)(v61);
    swift_bridgeObjectRelease();
    v63 = (void *)*((_QWORD *)&v102 + 1);
    v62 = v102;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v27, v28);
LABEL_10:
    *(_QWORD *)&v102 = 0;
    *((_QWORD *)&v102 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v102 = 0xD000000000000014;
    *((_QWORD *)&v102 + 1) = 0x80000000001A28A0;
    v64._countAndFlagsBits = v62;
    v64._object = v63;
    String.append(_:)(v64);
    swift_bridgeObjectRelease();
    v65 = v102;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v31, v16);
    return v65;
  }
  v38 = v97;
  v39 = v98;
  v40 = v96;
  v26(v15, 1, 1, v16);
  sub_417D8((uint64_t)v15, &qword_1F5C38);
  *(_QWORD *)&v102 = *(_QWORD *)(v1 + v23);
  swift_errorRetain(v102);
  v41 = (uint64_t)v99;
  v42 = v101;
  v43 = swift_dynamicCast(v99, &v102, v24, v101, 6);
  v44 = v100;
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 56);
  if (v43)
  {
    v45(v41, 0, 1, v42);
    v46 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 32))(v40, v41, v42);
    v47 = v38;
    (*(void (**)(_OWORD *, char *, uint64_t))(v44 + 16))(v38, v40, v42);
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v44 + 88))(v38, v42) == enum case for EncodingError.invalidValue(_:))
    {
      (*(void (**)(_OWORD *, uint64_t))(v44 + 96))(v38, v42);
      v48 = (char *)v38 + *(int *)(sub_5EDC(&qword_1F0ED0) + 48);
      sub_41900(v47, &v102);
      v49 = v39;
      v50 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
      v51 = v91;
      v52 = v92;
      v50(v91, v48, v92);
      v105 = 0;
      v106 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      v53._countAndFlagsBits = 0x5664696C61766E69;
      v53._object = (void *)0xED00002065756C61;
      String.append(_:)(v53);
      _print_unlocked<A, B>(_:_:)(&v102, &v105, (char *)&type metadata for Any + 8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v54._countAndFlagsBits = 2108704;
      v54._object = (void *)0xE300000000000000;
      String.append(_:)(v54);
      _print_unlocked<A, B>(_:_:)(v51, &v105, v52, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v55 = v105;
      v56 = (void *)v106;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v52);
      sub_62F8(&v102);
    }
    else
    {
      strcpy((char *)&v102, "unknown: ");
      WORD5(v102) = 0;
      HIDWORD(v102) = -385875968;
      v66 = v93;
      v67 = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, v93);
      v68._countAndFlagsBits = Error.localizedDescription.getter(v66, v67);
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      v56 = (void *)*((_QWORD *)&v102 + 1);
      v55 = v102;
      (*(void (**)(_OWORD *, uint64_t))(v44 + 8))(v47, v42);
    }
    *(_QWORD *)&v102 = 0;
    *((_QWORD *)&v102 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v102 = 0xD000000000000014;
    *((_QWORD *)&v102 + 1) = 0x80000000001A2880;
    v69._countAndFlagsBits = v55;
    v69._object = v56;
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    v65 = v102;
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v42);
  }
  else
  {
    v45(v41, 1, 1, v42);
    sub_417D8(v41, &qword_1F5C30);
    swift_getErrorValue(*(_QWORD *)(v1 + v23), v108, v107);
    return Error.localizedDescription.getter(v107[1], v107[2]);
  }
  return v65;
}

uint64_t sub_1131AC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, a1);
  return ClientError.errorDescription.getter(a1, WitnessTable);
}

void ClientErrorPayload.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = v0;
  v2 = type metadata accessor for URLComponents(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for ClientErrorPayload(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_26A5C(v1, (uint64_t)v5, v6);
  v7 = (char *)sub_1132AC + 4 * byte_19A880[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_1132AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;

  v2 = *v0;
  v3 = (void *)v0[1];
  *(_QWORD *)(v1 - 64) = 0;
  *(_QWORD *)(v1 - 56) = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 64) = 0xD000000000000014;
  *(_QWORD *)(v1 - 56) = 0x80000000001A2860;
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return *(_QWORD *)(v1 - 64);
}

uint64_t sub_113530@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;

  v27 = a4;
  v28 = a1;
  v29 = a3;
  v30 = a7;
  v10 = sub_5EDC(&qword_1F4318);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v16 = (char *)&v25 - v15;
  v17 = *a2;
  v18 = a2[1];
  v19 = a2[2];
  v20 = a2[3];
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
  v25 = v22;
  v26 = v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v27, AssociatedTypeWitness);
  sub_418BC(v28, (uint64_t)v12, &qword_1F4318);
  *(_QWORD *)&v31 = v17;
  *((_QWORD *)&v31 + 1) = v18;
  v32 = v19;
  v33 = v20;
  sub_115B3C(v17, v18, v19, v20);
  v23 = v29;
  swift_errorRetain(v29);
  return GeneralClientError.init(operationId:input:request:response:underlyingError:)(v26, v25, (uint64_t)v16, (uint64_t)v12, &v31, v23, a5, a6, v30);
}

uint64_t sub_113698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v18[2];

  v10 = sub_5EDC(&qword_1F4318);
  __chkstk_darwin(v10);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v15 = type metadata accessor for GeneralClientError(0, a3, a4, v14);
  memset(v18, 0, sizeof(v18));
  a5[3] = v15;
  a5[4] = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, v15);
  v16 = sub_3DD84(a5);
  sub_113530((uint64_t)v12, (uint64_t *)v18, a1, a2, a3, a4, v16);
  return sub_417D8((uint64_t)v12, &qword_1F4318);
}

uint64_t sub_1137A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[10] = a4;
  v5[11] = a5;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  return swift_task_switch(sub_1137C8, 0, 0);
}

uint64_t sub_1137C8()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 80))();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_113900(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v5[7] = a4;
  v5[8] = a5;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc(a2[1]);
  v5[9] = v7;
  *v7 = v5;
  v7[1] = sub_113968;
  return v9(a1);
}

uint64_t sub_113968()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1139D4, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1139D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(_QWORD))(v0 + 56))(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = sub_49F4((_QWORD *)(v0 + 16), v1);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v5, v3, v1);
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  if (_getErrorEmbeddedNSError<A>(_:)(v5, v1, v6))
  {
    v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v5, v1);
  }
  else
  {
    swift_allocError(v1, v6, 0, 0);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8, v5, v1);
  }
  v9 = *(_QWORD *)(v0 + 80);
  swift_willThrow(v7);
  swift_errorRelease(v9);
  swift_task_dealloc(v5);
  sub_62F8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_113AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[14] = a8;
  v8[15] = v10;
  v8[12] = a6;
  v8[13] = a7;
  v8[10] = a4;
  v8[11] = a5;
  v8[8] = a2;
  v8[9] = a3;
  v8[7] = a1;
  return swift_task_switch(sub_113B1C, 0, 0);
}

uint64_t sub_113B1C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[2];
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(void (**)(_QWORD *))(v0 + 80);
  v6[0] = *(_QWORD *)(v0 + 96);
  v6[1] = v1;
  v7 = *(_OWORD *)(v0 + 112);
  v2(v6);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRelease();
  sub_3E21C(v3, v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static APIClientHelpers.wrappingErrors<A>(work:mapError:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);

  v5[7] = a4;
  v5[8] = a5;
  v9 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc(a2[1]);
  v5[9] = v7;
  *v7 = v5;
  v7[1] = sub_113D0C;
  return v9(a1);
}

uint64_t sub_113D0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 72);
  v3 = *v1;
  *(_QWORD *)(v3 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_118018, 0, 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_113D78(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  v7 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v4 + 16) = v7;
  *v7 = v4;
  v7[1] = sub_4814;
  return v9(a1, a4);
}

uint64_t sub_113DEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD v20[2];

  v12 = sub_5EDC(&qword_1F4318);
  __chkstk_darwin(v12);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_26A5C(a3, (uint64_t)v14, type metadata accessor for ClientCurrency.Request);
  v15 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  v17 = type metadata accessor for GeneralClientError(0, a4, a5, v16);
  memset(v20, 0, sizeof(v20));
  a6[3] = v17;
  a6[4] = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, v17);
  v18 = sub_3DD84(a6);
  sub_113530((uint64_t)v14, (uint64_t *)v20, a1, a2, a4, a5, v18);
  return sub_417D8((uint64_t)v14, &qword_1F4318);
}

uint64_t sub_113F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  return swift_task_switch(sub_113F3C, 0, 0);
}

uint64_t sub_113F3C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD *);
  _QWORD v4[2];
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(void (**)(_QWORD *))(v0 + 24);
  v4[0] = *(_QWORD *)(v0 + 40);
  v4[1] = v1;
  v5 = *(_OWORD *)(v0 + 56);
  v2(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_113FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];

  v27 = a2;
  v18 = sub_5EDC(&qword_1F4318);
  __chkstk_darwin(v18);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_26A5C(a3, (uint64_t)v20, type metadata accessor for ClientCurrency.Request);
  v21 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 0, 1, v21);
  v28[0] = a4;
  v28[1] = a5;
  v28[2] = a6;
  v28[3] = a7;
  v23 = type metadata accessor for GeneralClientError(0, a8, a10, v22);
  a9[3] = v23;
  a9[4] = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, v23);
  v24 = sub_3DD84(a9);
  swift_bridgeObjectRetain(a5);
  sub_3E1D8(a6, a7);
  sub_113530((uint64_t)v20, v28, a1, v27, a8, a10, v24);
  swift_bridgeObjectRelease();
  sub_3E21C(a6, a7);
  return sub_417D8((uint64_t)v20, &qword_1F4318);
}

uint64_t URLComponents.addQueryItem<A>(name:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v27 = a2;
  v9 = type metadata accessor for Optional(0, a4);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v26 - v12;
  v14 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v11);
  v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a3, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, a4) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v13, a4);
  v19 = URLComponents.queryItems.getter(v18);
  if (v19)
    v20 = (_QWORD *)v19;
  else
    v20 = _swiftEmptyArrayStorage;
  v21 = sub_5EDC(&qword_1F12C8);
  v22 = *(_QWORD *)(type metadata accessor for URLQueryItem(0) - 8);
  v23 = swift_allocObject(v21, ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72), *(unsigned __int8 *)(v22 + 80) | 7);
  *(_OWORD *)(v23 + 16) = xmmword_1875E0;
  v24 = dispatch thunk of CustomStringConvertible.description.getter(a4, a5);
  URLQueryItem.init(name:value:)(a1, v27, v24, v25);
  swift_bridgeObjectRelease();
  v28 = v20;
  sub_1107A8(v23);
  URLComponents.queryItems.setter(v28);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, a4);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  uint64_t v16;
  uint64_t i;
  Swift::Bool IsNativeType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v24 = a2;
  v25 = a5;
  v23 = a1;
  v7 = type metadata accessor for Optional(0, a4);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v21 - v10;
  v12 = *(_QWORD *)(a4 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  result = __chkstk_darwin(v9);
  v15 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v16 = swift_bridgeObjectRetain(a3);
    if (!Array.endIndex.getter(v16, a4))
      return swift_bridgeObjectRelease();
    v22 = v13;
    for (i = 0; ; ++i)
    {
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)(i, IsNativeType, a3, a4);
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v15, a3+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * i, a4);
        v19 = i + 1;
        if (__OFADD__(i, 1))
          goto LABEL_11;
      }
      else
      {
        result = _ArrayBuffer._getElementSlowPath(_:)(i, a3, a4);
        if (v22 != 8)
        {
          __break(1u);
          return result;
        }
        v20 = result;
        v26 = result;
        (*(void (**)(char *, uint64_t *, uint64_t))(v12 + 16))(v15, &v26, a4);
        swift_unknownObjectRelease(v20);
        v19 = i + 1;
        if (__OFADD__(i, 1))
        {
LABEL_11:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v11, v15, a4);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, a4);
      URLComponents.addQueryItem<A>(name:value:)(v23, v24, (uint64_t)v11, a4, v25);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      if (v19 == Array.endIndex.getter(a3, a4))
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_114524(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_3E1D8(a1, a2);
  sub_2CB30(256, a1, a2);
  v8 = v15[0];
  v7 = v15[1];
  static String.Encoding.utf8.getter(v9);
  v10 = String.init(data:encoding:)(v8, v7, v6);
  if (v11 || (static String.Encoding.ascii.getter(v10), v10 = String.init(data:encoding:)(v8, v7, v6), v12))
  {
    v13 = v10;
  }
  else
  {
    sub_3E1D8(v8, v7);
    v13 = Data.description.getter(v8, v7);
    sub_3E21C(v8, v7);
  }
  sub_3E21C(v8, v7);
  return v13;
}

uint64_t ClientConverter.common.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v7 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 88);
  v10 = *(_QWORD *)(v1 + 96);
  v11 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v13 = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 88) = v11;
  sub_3EAFC(v2, v3);
  sub_3EAFC(v4, v5);
  sub_3EAFC(v6, v7);
  sub_3EAFC(v8, v9);
  swift_retain(v13);
  return swift_retain(v11);
}

__n128 ClientConverter.common.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v16 = a1[1];
  v17 = *a1;
  v15 = a1[2];
  v13 = *((_QWORD *)a1 + 7);
  v14 = *((_QWORD *)a1 + 6);
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 80);
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = *(_QWORD *)(v1 + 120);
  sub_3EB0C(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
  sub_3EB0C(v3, v4);
  sub_3EB0C(v5, v6);
  sub_3EB0C(v7, v8);
  swift_release(v10);
  swift_release(v9);
  *(_OWORD *)(v1 + 32) = v17;
  *(_OWORD *)(v1 + 48) = v16;
  *(_OWORD *)(v1 + 64) = v15;
  *(_QWORD *)(v1 + 80) = v14;
  *(_QWORD *)(v1 + 88) = v13;
  result = (__n128)a1[4];
  v12 = a1[5];
  *(__n128 *)(v1 + 96) = result;
  *(_OWORD *)(v1 + 112) = v12;
  return result;
}

uint64_t ClientConverter.encoder.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 128));
}

uint64_t ClientConverter.encoder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v1 + 128));
  *(_QWORD *)(v1 + 128) = a1;
  return result;
}

uint64_t (*ClientConverter.encoder.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t ClientConverter.decoder.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 136));
}

uint64_t ClientConverter.decoder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v1 + 136));
  *(_QWORD *)(v1 + 136) = a1;
  return result;
}

uint64_t (*ClientConverter.decoder.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t ClientConverter.headerEncoder.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 144));
}

uint64_t ClientConverter.headerEncoder.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_release(*(_QWORD *)(v1 + 144));
  *(_QWORD *)(v1 + 144) = a1;
  return result;
}

uint64_t (*ClientConverter.headerEncoder.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t ClientConverter.addQueryItem<A>(name:value:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return URLComponents.addQueryItem<A>(name:value:)(a1, a2, a3, a5, a6);
}

{
  return URLComponents.addQueryItem<A>(name:value:)(a1, a2, a3, a5, a6);
}

uint64_t ClientConverter.addQueryItem(name:value:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v39 = a2;
  v40 = a4;
  v38 = a1;
  v6 = type metadata accessor for DateConfiguration.EncoderInput(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v4[9];
  v44 = v4[8];
  v45 = v16;
  v17 = v4[10];
  v18 = v4[11];
  v41 = (uint64_t (*)(char *))v4[12];
  v42 = v17;
  v43 = v4[13];
  v19 = v4[15];
  sub_418BC(a3, (uint64_t)v11, &qword_1F1310);
  v46 = v13;
  v47 = v12;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return sub_417D8((uint64_t)v11, &qword_1F1310);
  v22 = v46;
  v21 = v47;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v15, v11, v47);
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v8, v15, v21);
  sub_3EAFC(v44, v45);
  v23 = v42;
  v24 = v18;
  sub_3EAFC(v42, v18);
  v25 = v43;
  swift_retain(v43);
  swift_retain(v19);
  v26 = v48;
  v27 = v41(v8);
  if (v26)
  {
    sub_26AA0((uint64_t)v8, type metadata accessor for DateConfiguration.EncoderInput);
    sub_3EB0C(v44, v45);
    sub_3EB0C(v23, v24);
    swift_release(v19);
    swift_release(v25);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v15, v47);
  }
  else
  {
    v29 = v28;
    v48 = v27;
    sub_26AA0((uint64_t)v8, type metadata accessor for DateConfiguration.EncoderInput);
    sub_3EB0C(v44, v45);
    sub_3EB0C(v23, v24);
    swift_release(v19);
    swift_release(v25);
    v30 = swift_bridgeObjectRetain(v29);
    v31 = URLComponents.queryItems.getter(v30);
    v32 = v15;
    if (v31)
      v33 = (_QWORD *)v31;
    else
      v33 = _swiftEmptyArrayStorage;
    v34 = sub_5EDC(&qword_1F12C8);
    v35 = type metadata accessor for URLQueryItem(0);
    v36 = swift_allocObject(v34, ((*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v35 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v35 - 8) + 80) | 7);
    *(_OWORD *)(v36 + 16) = xmmword_1875E0;
    swift_bridgeObjectRetain(v29);
    URLQueryItem.init(name:value:)(v38, v39, v48, v29);
    swift_bridgeObjectRelease();
    v49 = v33;
    sub_1107A8(v36);
    URLComponents.queryItems.setter(v49);
    swift_bridgeObjectRelease_n(v29, 2);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v32, v47);
  }
}

uint64_t ClientConverter.getComplexHeaderRequired<A>(_:in:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v25 = a6;
  v11 = type metadata accessor for Optional(0, a4);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - v13;
  v15 = *(_QWORD *)(a3 + 8);
  v26[0] = *(_QWORD *)a3;
  v26[1] = v15;
  v27 = *(_OWORD *)(a3 + 16);
  v16 = v28;
  result = ClientConverter.getComplexHeaderOptional<A>(_:in:as:)(a1, a2, (uint64_t)v26, a4, a5, (uint64_t *)((char *)&v24 - v13));
  if (!v16)
  {
    v18 = v12;
    v19 = v25;
    v20 = *(_QWORD *)(a4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v14, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v11);
      v21 = sub_3E298();
      swift_allocError(&type metadata for CommonErrorPayload, v21, 0, 0);
      *(_QWORD *)v22 = a1;
      *(_QWORD *)(v22 + 8) = a2;
      *(_BYTE *)(v22 + 16) = 2;
      v23 = swift_bridgeObjectRetain(a2);
      return swift_willThrow(v23);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v19, v14, a4);
    }
  }
  return result;
}

uint64_t ClientConverter.getComplexHeaderOptional<A>(_:in:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  uint64_t v47;

  v47 = a2;
  v13 = type metadata accessor for String.Encoding(0);
  v14 = __chkstk_darwin(v13);
  v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a3 + 8);
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    v25 = 1;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a6, v25, 1, a4);
  }
  v39 = v17;
  v40 = v15;
  v41 = v14;
  v42 = a6;
  v43 = a4;
  v44 = v7;
  v37[1] = *(_QWORD *)(v6 + 136);
  v38 = a5;
  swift_bridgeObjectRetain_n(v18, 2);
  v20 = sub_3D7A0();
  v45 = v18;
  v21 = (uint64_t *)(v18 + 56);
  while (1)
  {
    v23 = *(v21 - 1);
    v22 = *v21;
    v24 = *(v21 - 2);
    v46[2] = *(v21 - 3);
    v46[3] = v24;
    v46[0] = a1;
    v46[1] = v47;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v22);
    if (!StringProtocol.caseInsensitiveCompare<A>(_:)(v46, &type metadata for String, &type metadata for String, v20, v20))break;
    v21 += 4;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v19)
    {
      swift_bridgeObjectRelease_n(v45, 2);
      v25 = 1;
      a4 = v43;
      a6 = v42;
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a6, v25, 1, a4);
    }
  }
  swift_bridgeObjectRelease_n(v45, 2);
  v27 = swift_bridgeObjectRelease();
  v28 = v39;
  static String.Encoding.utf8.getter(v27);
  v29 = String.data(using:allowLossyConversion:)(v28, 0, v23, v22);
  v31 = v30;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v41);
  if (v31 >> 60 == 15)
  {
    v32 = sub_3E298();
    swift_allocError(&type metadata for CommonErrorPayload, v32, 0, 0);
    v33 = v47;
    *(_QWORD *)v34 = a1;
    *(_QWORD *)(v34 + 8) = v33;
    *(_BYTE *)(v34 + 16) = 3;
    v35 = swift_bridgeObjectRetain(v33);
    return swift_willThrow(v35);
  }
  a6 = v42;
  a4 = v43;
  v36 = v44;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v42, v43, v29, v31, v43, v38);
  result = sub_DD668(v29, v31);
  if (!v36)
  {
    v25 = 0;
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(a6, v25, 1, a4);
  }
  return result;
}

uint64_t ClientConverter.getPrimitiveHeaderOptional<A>(_:in:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a3 + 8));
  CommonCurrency.Headers.getPrimitiveOptional<A>(_:as:)(a1, a2, a4, a5);
  return swift_bridgeObjectRelease();
}

uint64_t ClientConverter.getPrimitiveHeaderRequired<A>(_:in:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  __int128 v25;
  uint64_t v26;

  v23 = a5;
  v9 = type metadata accessor for Optional(0, a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v22 - v11;
  v13 = *(_QWORD *)(a3 + 8);
  v24[0] = *(_QWORD *)a3;
  v24[1] = v13;
  v25 = *(_OWORD *)(a3 + 16);
  v14 = v26;
  result = ClientConverter.getPrimitiveHeaderOptional<A>(_:in:as:)(a1, a2, (uint64_t)v24, a4, (uint64_t *)((char *)&v22 - v11));
  if (!v14)
  {
    v16 = v10;
    v17 = v23;
    v18 = *(_QWORD *)(a4 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, a4) == 1)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v9);
      v19 = sub_3E298();
      swift_allocError(&type metadata for CommonErrorPayload, v19, 0, 0);
      *(_QWORD *)v20 = a1;
      *(_QWORD *)(v20 + 8) = a2;
      *(_BYTE *)(v20 + 16) = 2;
      v21 = swift_bridgeObjectRetain(a2);
      return swift_willThrow(v21);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v18 + 32))(v17, v12, a4);
    }
  }
  return result;
}

uint64_t ClientConverter.getPrimitiveHeaderOptional(_:in:as:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void (*v18)(uint64_t *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v6 = a4;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v21 = v4[8];
    v22 = v4[10];
    v19 = v4[9];
    v20 = v4[11];
    v18 = (void (*)(uint64_t *))v4[14];
    v23 = v4[15];
    v24 = v4[13];
    swift_bridgeObjectRetain_n(v7, 2);
    v10 = sub_3D7A0();
    v25 = v7;
    v11 = (uint64_t *)(v7 + 56);
    while (1)
    {
      v13 = *(v11 - 1);
      v12 = *v11;
      v14 = *(v11 - 2);
      v28 = *(v11 - 3);
      v29 = v14;
      v27[0] = a1;
      v27[1] = v30;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v12);
      if (!StringProtocol.caseInsensitiveCompare<A>(_:)(v27, &type metadata for String, &type metadata for String, v10, v10))break;
      v11 += 4;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v8)
      {
        swift_bridgeObjectRelease_n(v25, 2);
        v6 = a4;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease();
    v28 = v13;
    v29 = v12;
    swift_bridgeObjectRetain(v12);
    sub_3EAFC(v21, v19);
    sub_3EAFC(v22, v20);
    swift_retain(v24);
    swift_retain(v23);
    v18(&v28);
    swift_bridgeObjectRelease();
    sub_3EB0C(v21, v19);
    sub_3EB0C(v22, v20);
    swift_bridgeObjectRelease();
    swift_release(v23);
    result = swift_release(v24);
    if (!v5)
    {
      v17 = type metadata accessor for Date(0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a4, 0, 1, v17);
    }
  }
  else
  {
LABEL_6:
    v15 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  }
  return result;
}

uint64_t ClientConverter.addComplexHeader<A>(name:value:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  char v15;
  _OWORD v16[9];
  uint64_t v17;

  v7 = *(_OWORD *)(v6 + 112);
  v16[6] = *(_OWORD *)(v6 + 96);
  v16[7] = v7;
  v16[8] = *(_OWORD *)(v6 + 128);
  v17 = *(_QWORD *)(v6 + 144);
  v8 = *(_OWORD *)(v6 + 48);
  v16[2] = *(_OWORD *)(v6 + 32);
  v16[3] = v8;
  v9 = *(_OWORD *)(v6 + 80);
  v16[4] = *(_OWORD *)(v6 + 64);
  v16[5] = v9;
  v10 = *(_OWORD *)(v6 + 16);
  v16[0] = *(_OWORD *)v6;
  v16[1] = v10;
  v13[2] = a5;
  v13[3] = a6;
  v13[4] = v16;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = a4;
  type metadata accessor for Optional(0, a5);
  v11 = sub_5EDC(&qword_1F1348);
  return sub_111AA0((void (*)(char *, char *))sub_115B8C, (uint64_t)v13, v11, (uint64_t)&type metadata for () + 8, (uint64_t)&v14, (uint64_t)&v15);
}

uint64_t sub_1154F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v43 = a5;
  v44 = a4;
  v14 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, a6, a7);
  v19 = v8;
  if (v8)
    goto LABEL_2;
  v20 = result;
  v21 = v18;
  v22 = a8;
  v42 = a3;
  v23 = v44;
  static String.Encoding.utf8.getter(result);
  v24 = String.init(data:encoding:)(v20, v21, v16);
  if (!v25)
  {
    v36 = sub_3E298();
    v19 = swift_allocError(&type metadata for CommonErrorPayload, v36, 0, 0);
    *(_QWORD *)v37 = v42;
    *(_QWORD *)(v37 + 8) = v23;
    *(_BYTE *)(v37 + 16) = 4;
    v38 = swift_bridgeObjectRetain(v23);
    swift_willThrow(v38);
    result = sub_3E21C(v20, v21);
    a8 = v22;
LABEL_2:
    *a8 = v19;
    return result;
  }
  v26 = v24;
  v27 = v25;
  v28 = *(int *)(type metadata accessor for ClientCurrency.Request(0) + 24);
  v29 = v43;
  v30 = *(_QWORD **)(v43 + v28);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v27);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
  *(_QWORD *)(v29 + v28) = v30;
  v41 = v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v30 = sub_2FB9C(0, v30[2] + 1, 1, v30);
    *(_QWORD *)(v29 + v28) = v30;
  }
  v33 = v30[2];
  v32 = v30[3];
  v34 = v42;
  if (v33 >= v32 >> 1)
  {
    v39 = sub_2FB9C((_QWORD *)(v32 > 1), v33 + 1, 1, v30);
    v34 = v42;
    v30 = v39;
    *(_QWORD *)(v43 + v28) = v39;
  }
  v30[2] = v33 + 1;
  v35 = &v30[4 * v33];
  v35[4] = v34;
  v35[5] = v23;
  v35[6] = v41;
  v35[7] = v27;
  swift_bridgeObjectRelease();
  return sub_3E21C(v20, v21);
}

uint64_t ClientConverter.addPrimitiveHeader(name:value:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(char *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v39 = a2;
  v40 = a4;
  v38 = a1;
  v6 = type metadata accessor for DateConfiguration.EncoderInput(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v4[9];
  v42 = v4[8];
  v43 = v16;
  v17 = v4[11];
  v44 = v4[10];
  v45 = v17;
  v18 = v4[13];
  v41 = (uint64_t (*)(char *))v4[12];
  v19 = v4[15];
  sub_418BC(a3, (uint64_t)v11, &qword_1F1310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return sub_417D8((uint64_t)v11, &qword_1F1310);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
  sub_3EAFC(v42, v43);
  sub_3EAFC(v44, v45);
  swift_retain(v18);
  v21 = v19;
  swift_retain(v19);
  v22 = v46;
  v23 = v41(v8);
  v25 = v15;
  if (v22)
  {
    sub_26AA0((uint64_t)v8, type metadata accessor for DateConfiguration.EncoderInput);
    sub_3EB0C(v42, v43);
    sub_3EB0C(v44, v45);
    swift_release(v21);
    swift_release(v18);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    v26 = v24;
    v41 = (uint64_t (*)(char *))v23;
    sub_26AA0((uint64_t)v8, type metadata accessor for DateConfiguration.EncoderInput);
    sub_3EB0C(v42, v43);
    sub_3EB0C(v44, v45);
    swift_release(v21);
    swift_release(v18);
    v27 = *(int *)(type metadata accessor for ClientCurrency.Request(0) + 24);
    v28 = v40;
    v29 = *(_QWORD **)(v40 + v27);
    v46 = v26;
    swift_bridgeObjectRetain_n(v26, 2);
    v30 = v39;
    swift_bridgeObjectRetain(v39);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
    v37 = v25;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v29 = sub_2FB9C(0, v29[2] + 1, 1, v29);
    v33 = v29[2];
    v32 = v29[3];
    if (v33 >= v32 >> 1)
      v29 = sub_2FB9C((_QWORD *)(v32 > 1), v33 + 1, 1, v29);
    v29[2] = v33 + 1;
    v34 = &v29[4 * v33];
    v34[4] = v38;
    v34[5] = v30;
    v35 = v46;
    v34[6] = v41;
    v34[7] = v35;
    swift_bridgeObjectRelease_n(v35, 2);
    *(_QWORD *)(v28 + v27) = v29;
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v37, v12);
  }
}

uint64_t sub_115A14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_113698(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t sub_115A20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_113DEC(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t sub_115A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;

  v9 = *(_OWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 64);
  v5 = *(_QWORD *)(v1 + 72);
  v6 = swift_task_alloc(dword_1F5ADC);
  v7 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_4814;
  *(_QWORD *)(v6 + 56) = v4;
  *(_QWORD *)(v6 + 64) = v5;
  *(_OWORD *)(v6 + 40) = v9;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(sub_113F3C, 0, 0);
}

uint64_t sub_115ABC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_113FA0(a1, *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 16), a2, *(_QWORD *)(v2 + 24));
}

uint64_t sub_115AEC()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_115AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F4318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_115B3C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return sub_3E1D8(a3, a4);
  }
  return result;
}

uint64_t sub_115B74(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 48));
}

uint64_t type metadata accessor for GeneralClientError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_117FD4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeneralClientError);
}

uint64_t sub_115B8C(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;

  return sub_1154F4(a1, v2[4], v2[5], v2[6], v2[7], v2[2], v2[3], a2);
}

uint64_t sub_115BB0(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, a2);
  result = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, a2);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_115BF4(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, a1);
}

uint64_t sub_115C04()
{
  return sub_41754((unint64_t *)&qword_1F4368, type metadata accessor for ClientErrorPayload, (uint64_t)&protocol conformance descriptor for ClientErrorPayload);
}

uint64_t dispatch thunk of ClientError.request.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ClientError.response.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ClientError.underlyingError.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_115C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

void sub_115C50(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = &unk_19AAF8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(319, *(_QWORD *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(AssociatedTypeWitness - 8) + 64;
    sub_117140(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_19AB10;
      v6[4] = &unk_19AB28;
      swift_initStructMetadata(a1, 0, 5, v6, a1 + 32);
    }
  }
}

uint64_t *sub_115D08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t *v53;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80);
  v13 = v12 & 0xF8 | 7;
  v14 = *(_QWORD *)(v11 + 64) + 7;
  v15 = (((((v14 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  v16 = v9 + v13;
  v17 = (v12 | v7) & 0x100000;
  if ((v13 | v7) != 7
    || v17 != 0
    || ((((v16 + ((v7 + 16) & ~(unint64_t)v7)) & ~v13) + v15 + 39) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v20 = *a2;
    *a1 = *a2;
    v21 = (uint64_t *)(v20 + (((v13 | v7) + 16) & ~(v13 | v7)));
    swift_retain(v20);
    return v21;
  }
  v52 = v10;
  v22 = a1;
  v23 = ~v13;
  v24 = *(unsigned int *)(v11 + 84);
  v25 = a2[1];
  *v22 = *a2;
  v22[1] = v25;
  v53 = v22;
  v26 = (char *)v22 + v8;
  v27 = (char *)a2 + v8;
  v28 = (unint64_t)(v26 + 16) & ~v8;
  v29 = (unint64_t)(v27 + 16) & ~v8;
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  swift_bridgeObjectRetain(v25);
  v30(v28, v29, AssociatedTypeWitness);
  v31 = (char *)((v28 + v16) & v23);
  v32 = (v29 + v16) & v23;
  if (v24 < 0x7FFFFFFF)
  {
    v33 = *(_QWORD *)((char *)&dword_8 + ((v14 + v32) & 0xFFFFFFFFFFFFF8));
    if (v33 >= 0xFFFFFFFF)
      LODWORD(v33) = -1;
    if ((_DWORD)v33 != -1)
      goto LABEL_12;
  }
  else if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))((v29 + v16) & v23, v24, v52))
  {
LABEL_12:
    memcpy(v31, (const void *)((v29 + v16) & v23), (((((v14 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    goto LABEL_19;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v31, (v29 + v16) & v23, v52);
  v34 = (_QWORD *)((unint64_t)&v31[v14] & 0xFFFFFFFFFFFFFFF8);
  v35 = (_QWORD *)((v14 + v32) & 0xFFFFFFFFFFFFFFF8);
  *v34 = *v35;
  v36 = v35[1];
  v34[1] = v36;
  v37 = (_QWORD *)(((unint64_t)v34 + 23) & 0xFFFFFFFFFFFFF8);
  v38 = (uint64_t *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFF8);
  v39 = *v38;
  *v37 = *v38;
  v40 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  v41 = (uint64_t *)(((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8);
  v42 = v41[1];
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v39);
  if ((v42 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)v40 = *(_OWORD *)v41;
  }
  else
  {
    v43 = *v41;
    sub_3E1D8(*v41, v42);
    *(_QWORD *)v40 = v43;
    *(_QWORD *)(v40 + 8) = v42;
  }
LABEL_19:
  v44 = &v31[v15];
  v45 = v15 + v32;
  if (*(_QWORD *)(v15 + v32 + 8) < 0xFFFFFFFFuLL)
  {
    v49 = *(_OWORD *)(v45 + 16);
    *(_OWORD *)v44 = *(_OWORD *)v45;
    *((_OWORD *)v44 + 1) = v49;
  }
  else
  {
    *(_QWORD *)v44 = *(_QWORD *)v45;
    v46 = *(_QWORD *)(v45 + 8);
    *((_QWORD *)v44 + 1) = v46;
    v47 = *(_QWORD *)(v45 + 16);
    v48 = *(_QWORD *)(v45 + 24);
    swift_bridgeObjectRetain(v46);
    sub_3E1D8(v47, v48);
    *((_QWORD *)v44 + 2) = v47;
    *((_QWORD *)v44 + 3) = v48;
  }
  v21 = v53;
  v50 = *(_QWORD *)((v45 + 39) & 0xFFFFFFFFFFFFF8);
  swift_errorRetain(v50);
  *(_QWORD *)((unint64_t)(v44 + 39) & 0xFFFFFFFFFFFFF8) = v50;
  return v21;
}

uint64_t sub_115FCC(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = (a1 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v6, AssociatedTypeWitness);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80) & 0xF8 | 7;
  v11 = (v6 + v7 + v10) & ~v10;
  v12 = *(_QWORD *)(v9 + 64) + 7;
  v13 = (((v12 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15;
  if (*(_DWORD *)(v9 + 84) >= 0x7FFFFFFFu)
  {
    v14 = v13 & 0xFFFFFFFFFFFFFFF8;
    if ((*(unsigned int (**)(unint64_t))(v9 + 48))(v11))
      goto LABEL_9;
    goto LABEL_7;
  }
  v15 = *(_QWORD *)((char *)&dword_8 + ((v12 + v11) & 0xFFFFFFFFFFFFF8));
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  v14 = v13 & 0xFFFFFFFFFFFFFFF8;
  if ((_DWORD)v15 == -1)
  {
LABEL_7:
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v11, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)((char *)&dword_8
                    + ((((((v12 + v11) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
    if ((v16 & 0x3000000000000000) == 0)
      sub_3E21C(*(_QWORD *)((((((v12 + v11) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v16);
  }
LABEL_9:
  v17 = v11 + v14;
  v18 = v11 + v14 + 16;
  if (*(_QWORD *)(v17 + 24) >= 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    sub_3E21C(*(_QWORD *)(v18 + 16), *(_QWORD *)(v18 + 24));
  }
  return swift_errorRelease(*(_QWORD *)((v18 + 39) & 0xFFFFFFFFFFFFF8));
}

_QWORD *sub_11614C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v39;

  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = ((unint64_t)a1 + v8 + 16) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 16) & ~v8;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  swift_bridgeObjectRetain(v5);
  v11(v9, v10, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v7 + 64);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v16 = v12 + v15;
  v17 = (char *)((v12 + v15 + v9) & ~v15);
  v18 = (char *)((v16 + v10) & ~v15);
  v19 = *(_QWORD *)(v14 + 64) + 7;
  v20 = ((((v19 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(v14 + 84) < 0x7FFFFFFFu)
  {
    v22 = *(_QWORD *)((char *)&dword_8 + ((unint64_t)&v18[v19] & 0xFFFFFFFFFFFFF8));
    if (v22 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    v21 = v20 + 16;
    if ((_DWORD)v22 != -1)
      goto LABEL_3;
LABEL_7:
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, v18, v13);
    v23 = (_QWORD *)((unint64_t)&v17[v19] & 0xFFFFFFFFFFFFFFF8);
    v24 = (_QWORD *)((unint64_t)&v18[v19] & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v24;
    v25 = v24[1];
    v23[1] = v25;
    v26 = (_QWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFF8);
    v27 = (uint64_t *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFF8);
    v28 = *v27;
    *v26 = *v27;
    v29 = ((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8;
    v30 = (uint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
    v31 = v30[1];
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
    if ((v31 & 0x3000000000000000) != 0)
    {
      *(_OWORD *)v29 = *(_OWORD *)v30;
    }
    else
    {
      v32 = *v30;
      sub_3E1D8(*v30, v31);
      *(_QWORD *)v29 = v32;
      *(_QWORD *)(v29 + 8) = v31;
    }
    goto LABEL_10;
  }
  v21 = v20 + 16;
  if (!(*(unsigned int (**)(char *))(v14 + 48))(v18))
    goto LABEL_7;
LABEL_3:
  memcpy(v17, v18, v21);
LABEL_10:
  v33 = &v17[v21];
  v34 = &v18[v21];
  if (*((_QWORD *)v34 + 1) < 0xFFFFFFFFuLL)
  {
    v38 = *((_OWORD *)v34 + 1);
    *(_OWORD *)v33 = *(_OWORD *)v34;
    *((_OWORD *)v33 + 1) = v38;
  }
  else
  {
    *(_QWORD *)v33 = *(_QWORD *)v34;
    v35 = *((_QWORD *)v34 + 1);
    *((_QWORD *)v33 + 1) = v35;
    v36 = *((_QWORD *)v34 + 2);
    v37 = *((_QWORD *)v34 + 3);
    swift_bridgeObjectRetain(v35);
    sub_3E1D8(v36, v37);
    *((_QWORD *)v33 + 2) = v36;
    *((_QWORD *)v33 + 3) = v37;
  }
  v39 = *(_QWORD *)((unint64_t)(v34 + 39) & 0xFFFFFFFFFFFFF8);
  swift_errorRetain(v39);
  *(_QWORD *)((unint64_t)(v33 + 39) & 0xFFFFFFFFFFFFF8) = v39;
  return a1;
}

_QWORD *sub_116394(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __int128 v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v17 = v12 + v16;
  v18 = (char *)((v12 + v16 + v10) & ~v16);
  v19 = (char *)((v17 + v11) & ~v16);
  v20 = *(_QWORD *)(v14 + 64) + 7;
  v21 = (((((v20 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 < 0x7FFFFFFF)
  {
    v34 = *(_QWORD *)((char *)&dword_8 + ((unint64_t)&v19[v20] & 0xFFFFFFFFFFFFF8));
    if (v34 >= 0xFFFFFFFF)
      LODWORD(v34) = -1;
    v24 = v34 + 1;
    if (*(_QWORD *)((char *)&dword_8 + ((unint64_t)&v18[v20] & 0xFFFFFFFFFFFFF8)) < 0xFFFFFFFFuLL)
    {
LABEL_3:
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v19, v13);
        v25 = (_QWORD *)((unint64_t)&v18[v20] & 0xFFFFFFFFFFFFFFF8);
        v26 = (_QWORD *)((unint64_t)&v19[v20] & 0xFFFFFFFFFFFFFFF8);
        *v25 = *v26;
        v27 = v26[1];
        v25[1] = v27;
        v28 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
        v29 = (uint64_t *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
        v30 = *v29;
        *v28 = *v29;
        v31 = (uint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
        v32 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
        v33 = *(_QWORD *)(v32 + 8);
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRetain(v30);
        if ((v33 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)v31 = *(_OWORD *)v32;
          goto LABEL_13;
        }
        v62 = *(_QWORD *)v32;
        goto LABEL_25;
      }
LABEL_12:
      memcpy(v18, v19, (((((v20 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
      goto LABEL_13;
    }
  }
  else
  {
    v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
    v23 = v22(v18, *(unsigned int *)(v14 + 84), v13);
    v24 = v22(v19, v15, v13);
    if (v23)
      goto LABEL_3;
  }
  v35 = (_QWORD *)((unint64_t)&v18[v20] & 0xFFFFFFFFFFFFFFF8);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36 = *(_QWORD *)((char *)&dword_8
                    + (((((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
    if ((v36 & 0x3000000000000000) == 0)
      sub_3E21C(*(_QWORD *)(((((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v36);
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v18, v19, v13);
  v53 = (_QWORD *)((unint64_t)&v19[v20] & 0xFFFFFFFFFFFFFFF8);
  *v35 = *v53;
  v54 = v53[1];
  v35[1] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease();
  v55 = (_QWORD *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF8);
  v56 = (uint64_t *)(((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFF8);
  v58 = *v56;
  v57 = (unint64_t)v56 + 15;
  *v55 = v58;
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRelease();
  v31 = (uint64_t *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
  v59 = (uint64_t *)(v57 & 0xFFFFFFFFFFFFFFF8);
  v60 = v31[1];
  v33 = *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 8);
  v61 = v33 & 0x3000000000000000;
  if ((v60 & 0x3000000000000000) != 0)
  {
    if (!v61)
    {
      v62 = *v59;
LABEL_25:
      sub_3E1D8(v62, v33);
      *v31 = v62;
      v31[1] = v33;
      goto LABEL_13;
    }
    goto LABEL_28;
  }
  if (v61)
  {
    sub_3E21C(*v31, v60);
LABEL_28:
    *(_OWORD *)v31 = *(_OWORD *)v59;
    goto LABEL_13;
  }
  v63 = *v59;
  sub_3E1D8(v63, *(_QWORD *)((v57 & 0xFFFFFFFFFFFFFFF8) + 8));
  v64 = *v31;
  v65 = v31[1];
  *v31 = v63;
  v31[1] = v33;
  sub_3E21C(v64, v65);
LABEL_13:
  v37 = &v18[v21];
  v38 = &v19[v21];
  v39 = *((_QWORD *)v38 + 1);
  if (*((_QWORD *)v37 + 1) < 0xFFFFFFFFuLL)
  {
    if (v39 >= 0xFFFFFFFF)
    {
      *(_QWORD *)v37 = *(_QWORD *)v38;
      v45 = *((_QWORD *)v38 + 1);
      *((_QWORD *)v37 + 1) = v45;
      v46 = *((_QWORD *)v38 + 2);
      v47 = *((_QWORD *)v38 + 3);
      swift_bridgeObjectRetain(v45);
      sub_3E1D8(v46, v47);
      *((_QWORD *)v37 + 2) = v46;
      *((_QWORD *)v37 + 3) = v47;
      goto LABEL_20;
    }
LABEL_19:
    v48 = *((_OWORD *)v38 + 1);
    *(_OWORD *)v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v48;
    goto LABEL_20;
  }
  if (v39 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    sub_3E21C(*((_QWORD *)v37 + 2), *((_QWORD *)v37 + 3));
    goto LABEL_19;
  }
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v40 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v37 + 1) = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  v41 = *((_QWORD *)v38 + 2);
  v42 = *((_QWORD *)v38 + 3);
  sub_3E1D8(v41, v42);
  v43 = *((_QWORD *)v37 + 2);
  v44 = *((_QWORD *)v37 + 3);
  *((_QWORD *)v37 + 2) = v41;
  *((_QWORD *)v37 + 3) = v42;
  sub_3E21C(v43, v44);
LABEL_20:
  v49 = (uint64_t *)((unint64_t)(v37 + 39) & 0xFFFFFFFFFFFFFFF8);
  v50 = *(_QWORD *)((unint64_t)(v38 + 39) & 0xFFFFFFFFFFFFF8);
  swift_errorRetain(v50);
  v51 = *v49;
  *v49 = v50;
  swift_errorRelease(v51);
  return a1;
}

_OWORD *sub_116794(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  _OWORD *v21;
  _OWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  __int128 v26;

  *a1 = *a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v6 + 64);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_DWORD *)(v12 + 80) & 0xF8 | 7;
  v14 = v10 + v13;
  v15 = (char *)((v10 + v13 + v8) & ~v13);
  v16 = (char *)((v14 + v9) & ~v13);
  v17 = *(_QWORD *)(v12 + 64) + 7;
  v18 = ((((v17 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(_DWORD *)(v12 + 84) < 0x7FFFFFFFu)
  {
    v20 = *(_QWORD *)((char *)&dword_8 + ((unint64_t)&v16[v17] & 0xFFFFFFFFFFFFF8));
    if (v20 >= 0xFFFFFFFF)
      LODWORD(v20) = -1;
    v19 = v18 + 16;
    if ((_DWORD)v20 != -1)
      goto LABEL_3;
LABEL_7:
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v16, v11);
    v21 = (_OWORD *)((unint64_t)&v15[v17] & 0xFFFFFFFFFFFFFFF8);
    v22 = (_OWORD *)((unint64_t)&v16[v17] & 0xFFFFFFFFFFFFFFF8);
    *v21 = *v22;
    v23 = (_QWORD *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFF8);
    v24 = (_QWORD *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFF8);
    *v23 = *v24;
    *(_OWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
    goto LABEL_8;
  }
  v19 = v18 + 16;
  if (!(*(unsigned int (**)(char *))(v12 + 48))(v16))
    goto LABEL_7;
LABEL_3:
  memcpy(v15, v16, v19);
LABEL_8:
  v25 = &v15[v19];
  v26 = *(_OWORD *)&v16[v19 + 16];
  *(_OWORD *)v25 = *(_OWORD *)&v16[v19];
  *((_OWORD *)v25 + 1) = v26;
  *(_QWORD *)((unint64_t)&v15[v19 + 39] & 0xFFFFFFFFFFFFF8) = *(_QWORD *)((unint64_t)&v16[v19 + 39] & 0xFFFFFFFFFFFFF8);
  return a1;
}

_QWORD *sub_116944(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  _OWORD *v25;
  _OWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
  v12 = *(_QWORD *)(v8 + 64);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int *)(v14 + 84);
  v16 = *(_DWORD *)(v14 + 80) & 0xF8 | 7;
  v17 = v12 + v16;
  v18 = (char *)((v12 + v16 + v10) & ~v16);
  v19 = (char *)((v17 + v11) & ~v16);
  v20 = *(_QWORD *)(v14 + 64) + 7;
  v21 = (((((v20 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 < 0x7FFFFFFF)
  {
    v29 = *(_QWORD *)((char *)&dword_8 + ((unint64_t)&v19[v20] & 0xFFFFFFFFFFFFF8));
    if (v29 >= 0xFFFFFFFF)
      LODWORD(v29) = -1;
    v24 = v29 + 1;
    if (*(_QWORD *)((char *)&dword_8 + ((unint64_t)&v18[v20] & 0xFFFFFFFFFFFFF8)) < 0xFFFFFFFFuLL)
    {
LABEL_3:
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v19, v13);
        v25 = (_OWORD *)((unint64_t)&v18[v20] & 0xFFFFFFFFFFFFFFF8);
        v26 = (_OWORD *)((unint64_t)&v19[v20] & 0xFFFFFFFFFFFFFFF8);
        *v25 = *v26;
        v27 = (_QWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFF8);
        v28 = (_QWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFF8);
        *v27 = *v28;
        *(_OWORD *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFF8);
        goto LABEL_12;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
    v23 = v22(v18, *(unsigned int *)(v14 + 84), v13);
    v24 = v22(v19, v15, v13);
    if (v23)
      goto LABEL_3;
  }
  v30 = (_QWORD *)((unint64_t)&v18[v20] & 0xFFFFFFFFFFFFFFF8);
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)((char *)&dword_8
                    + (((((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
    if ((v31 & 0x3000000000000000) == 0)
      sub_3E21C(*(_QWORD *)(((((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), v31);
LABEL_11:
    memcpy(v18, v19, (((((v20 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16);
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v18, v19, v13);
  v40 = (_QWORD *)((unint64_t)&v19[v20] & 0xFFFFFFFFFFFFFFF8);
  *v30 = *v40;
  v30[1] = v40[1];
  swift_bridgeObjectRelease();
  v41 = (_QWORD *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF8);
  v42 = (_QWORD *)(((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFF8);
  *v41 = *v42;
  swift_bridgeObjectRelease();
  v43 = (uint64_t *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  v44 = ((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  v45 = v43[1];
  if ((v45 & 0x3000000000000000) != 0)
    goto LABEL_21;
  v46 = *(_QWORD *)(v44 + 8);
  if ((v46 & 0x3000000000000000) != 0)
  {
    sub_3E21C(*v43, v45);
LABEL_21:
    *(_OWORD *)v43 = *(_OWORD *)v44;
    goto LABEL_12;
  }
  v47 = *v43;
  *v43 = *(_QWORD *)v44;
  v43[1] = v46;
  sub_3E21C(v47, v45);
LABEL_12:
  v32 = &v18[v21];
  v33 = &v19[v21];
  if (*((_QWORD *)v32 + 1) < 0xFFFFFFFFuLL)
  {
LABEL_16:
    v36 = *((_OWORD *)v33 + 1);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v36;
    goto LABEL_17;
  }
  if (*((_QWORD *)v33 + 1) < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    sub_3E21C(*((_QWORD *)v32 + 2), *((_QWORD *)v32 + 3));
    goto LABEL_16;
  }
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  swift_bridgeObjectRelease();
  v34 = *((_QWORD *)v32 + 2);
  v35 = *((_QWORD *)v32 + 3);
  *((_OWORD *)v32 + 1) = *((_OWORD *)v33 + 1);
  sub_3E21C(v34, v35);
LABEL_17:
  v37 = (uint64_t *)((unint64_t)(v32 + 39) & 0xFFFFFFFFFFFFFFF8);
  v38 = *v37;
  *v37 = *(_QWORD *)((unint64_t)(v33 + 39) & 0xFFFFFFFFFFFFF8);
  swift_errorRelease(v38);
  return a1;
}

uint64_t sub_116C74(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 24));
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = *(_DWORD *)(v8 + 84);
  v11 = v10 - 1;
  if (v7 <= v11)
    v12 = v11;
  else
    v12 = v7;
  if (v12 <= 0x7FFFFFFF)
    v13 = 0x7FFFFFFF;
  else
    v13 = v12;
  if (!a2)
    return 0;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = *(_QWORD *)(v6 + 64);
  v16 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  v17 = *(_QWORD *)(v8 + 64) + 7;
  if (v13 < a2)
  {
    if (((((((v15 + v16 + ((v14 + 16) & ~v14)) & ~v16)
           + (((((v17 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 55) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v18 = 2;
    else
      v18 = a2 - v13 + 1;
    if (v18 >= 0x10000)
      v19 = 4;
    else
      v19 = 2;
    if (v18 < 0x100)
      v19 = 1;
    if (v18 >= 2)
      v20 = v19;
    else
      v20 = 0;
    __asm { BR              X3 }
  }
  if ((v12 & 0x80000000) != 0)
  {
    v23 = (a1 + v14 + 16) & ~v14;
    if ((_DWORD)v7 == v13)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v23, v7, AssociatedTypeWitness);
    }
    else
    {
      v24 = (v23 + v15 + v16) & ~v16;
      if (v9 < 0x7FFFFFFF)
      {
        v26 = *(_QWORD *)((char *)&dword_8 + ((v17 + v24) & 0xFFFFFFFFFFFFF8));
        if (v26 >= 0xFFFFFFFF)
          LODWORD(v26) = -1;
        v25 = v26 + 1;
      }
      else
      {
        v25 = (*(uint64_t (**)(uint64_t))(v8 + 48))(v24);
      }
      if (v25 >= 2)
        return v25 - 1;
      else
        return 0;
    }
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 8);
    if (v22 >= 0xFFFFFFFF)
      LODWORD(v22) = -1;
    return (v22 + 1);
  }
}

void sub_116E9C(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;

  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 24)) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_DWORD **)(type metadata accessor for URL(0) - 8);
  if (v9[21] <= 0x7FFFFFFFu)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9[21];
  if (v8 <= v10 - 1)
    v11 = v10 - 1;
  else
    v11 = v8;
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(unsigned __int8 *)(v7 + 80);
  v14 = *(_QWORD *)(v7 + 64);
  v15 = v9[20] & 0xF8 | 7;
  if (v12 >= a3)
  {
    v18 = 0;
    if (a2 <= v12)
      goto LABEL_23;
  }
  else
  {
    if ((((((_DWORD)v14 + (_DWORD)v15 + (((_DWORD)v13 + 16) & ~(_DWORD)v13)) & ~(_DWORD)v15)
         + ((((((v9[16] + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 16
         + 39) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v16 = a3 - v12 + 1;
    else
      v16 = 2;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    if (a2 <= v12)
LABEL_23:
      __asm { BR              X5 }
  }
  if ((((((_DWORD)v14 + (_DWORD)v15 + (((_DWORD)v13 + 16) & ~(_DWORD)v13)) & ~(_DWORD)v15)
       + ((((((v9[16] + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
       + 16
       + 39) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v19 = ~v12 + a2;
    bzero(a1, ((((v14 + v15 + ((v13 + 16) & ~v13)) & ~v15)+ ((((((*((_QWORD *)v9 + 8) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 16+ 39) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v19;
  }
  __asm { BR              X10 }
}

void sub_117028()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x1170ACLL);
}

void sub_117030()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x117038);
  JUMPOUT(0x1170ACLL);
}

void sub_11704C()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x1170ACLL);
}

void sub_117054()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x1170ACLL);
}

void sub_11705C()
{
  int v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  *(_WORD *)(v2 + v3) = 0;
  if (v1)
  {
    if (v0 < 0)
      JUMPOUT(0x117068);
    if (v1 < 0)
      JUMPOUT(0x1170A4);
    *(_QWORD *)(v2 + 8) = (v1 - 1);
  }
  JUMPOUT(0x1170ACLL);
}

void sub_117140(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1F5B78)
  {
    v2 = type metadata accessor for ClientCurrency.Request(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1F5B78);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ClientErrorPayload(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1171E4 + 4 * byte_19A895[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t destroy for ClientErrorPayload(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 3:
    case 4:
    case 5:
      result = swift_bridgeObjectRelease(a1[1]);
      break;
    case 1:
      v4 = type metadata accessor for URLComponents(0);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2:
      result = swift_errorRelease(*a1);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for ClientErrorPayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_1173A4 + 4 * byte_19A8A1[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

_QWORD *sub_1173A4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v3 = v2[1];
  *v0 = *v2;
  v0[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t assignWithCopy for ClientErrorPayload(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_26AA0(result, type metadata accessor for ClientErrorPayload);
    v5 = (char *)&loc_1174D4 + 4 * byte_19A8A7[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

void *initializeWithTake for ClientErrorPayload(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for URLComponents(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ClientErrorPayload(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_26AA0((uint64_t)a1, type metadata accessor for ClientErrorPayload);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for URLComponents(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1176F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_19AAF8;
  result = type metadata accessor for URLComponents(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_19AB28;
    v4[3] = &unk_19AAF8;
    v4[4] = &unk_19AAF8;
    v4[5] = &unk_19AAF8;
    swift_initEnumMetadataMultiPayload(a1, 256, 6, v4);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for APIClientHelpers()
{
  return &type metadata for APIClientHelpers;
}

ValueMetadata *type metadata accessor for ClientConfiguration()
{
  return &type metadata for ClientConfiguration;
}

uint64_t destroy for ClientConverter(_QWORD *a1)
{
  if (*a1)
    swift_release(a1[1]);
  if (a1[2])
    swift_release(a1[3]);
  if (a1[4])
    swift_release(a1[5]);
  if (a1[6])
    swift_release(a1[7]);
  if (a1[8])
    swift_release(a1[9]);
  if (a1[10])
    swift_release(a1[11]);
  swift_release(a1[13]);
  swift_release(a1[15]);
  swift_release(a1[16]);
  swift_release(a1[17]);
  return swift_release(a1[18]);
}

uint64_t initializeWithCopy for ClientConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain(v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  v11 = *(_QWORD *)(a2 + 64);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    swift_retain(v12);
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  v13 = *(_QWORD *)(a2 + 80);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v14;
    swift_retain(v14);
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v15;
  v16 = *(_QWORD *)(a2 + 120);
  v17 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 128) = v17;
  v19 = *(_QWORD *)(a2 + 136);
  v18 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = v18;
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v19);
  swift_retain(v18);
  return a1;
}

_QWORD *assignWithCopy for ClientConverter(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = a1[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain(v5);
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v4)
  {
    v7 = a2[1];
    *a1 = v4;
    a1[1] = v7;
    swift_retain(v7);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (a1[2])
  {
    if (v8)
    {
      v9 = a2[3];
      v10 = a1[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_retain(v9);
      swift_release(v10);
      goto LABEL_15;
    }
    swift_release(a1[3]);
  }
  else if (v8)
  {
    v11 = a2[3];
    a1[2] = v8;
    a1[3] = v11;
    swift_retain(v11);
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v12 = a2[4];
  if (a1[4])
  {
    if (v12)
    {
      v13 = a2[5];
      v14 = a1[5];
      a1[4] = v12;
      a1[5] = v13;
      swift_retain(v13);
      swift_release(v14);
      goto LABEL_22;
    }
    swift_release(a1[5]);
  }
  else if (v12)
  {
    v15 = a2[5];
    a1[4] = v12;
    a1[5] = v15;
    swift_retain(v15);
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v16 = a2[6];
  if (a1[6])
  {
    if (v16)
    {
      v17 = a2[7];
      v18 = a1[7];
      a1[6] = v16;
      a1[7] = v17;
      swift_retain(v17);
      swift_release(v18);
      goto LABEL_29;
    }
    swift_release(a1[7]);
  }
  else if (v16)
  {
    v19 = a2[7];
    a1[6] = v16;
    a1[7] = v19;
    swift_retain(v19);
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_29:
  v20 = a2[8];
  if (a1[8])
  {
    if (v20)
    {
      v21 = a2[9];
      v22 = a1[9];
      a1[8] = v20;
      a1[9] = v21;
      swift_retain(v21);
      swift_release(v22);
      goto LABEL_36;
    }
    swift_release(a1[9]);
  }
  else if (v20)
  {
    v23 = a2[9];
    a1[8] = v20;
    a1[9] = v23;
    swift_retain(v23);
    goto LABEL_36;
  }
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
LABEL_36:
  v24 = a2[10];
  if (!a1[10])
  {
    if (v24)
    {
      v27 = a2[11];
      a1[10] = v24;
      a1[11] = v27;
      swift_retain(v27);
      goto LABEL_43;
    }
LABEL_42:
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    goto LABEL_43;
  }
  if (!v24)
  {
    swift_release(a1[11]);
    goto LABEL_42;
  }
  v25 = a2[11];
  v26 = a1[11];
  a1[10] = v24;
  a1[11] = v25;
  swift_retain(v25);
  swift_release(v26);
LABEL_43:
  v28 = a2[13];
  v29 = a1[13];
  a1[12] = a2[12];
  a1[13] = v28;
  swift_retain(v28);
  swift_release(v29);
  v30 = a2[15];
  v31 = a1[15];
  a1[14] = a2[14];
  a1[15] = v30;
  swift_retain(v30);
  swift_release(v31);
  v32 = a2[16];
  v33 = a1[16];
  a1[16] = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = a2[17];
  v35 = a1[17];
  a1[17] = v34;
  swift_retain(v34);
  swift_release(v35);
  v36 = a2[18];
  v37 = a1[18];
  a1[18] = v36;
  swift_retain(v36);
  swift_release(v37);
  return a1;
}

__n128 initializeWithTake for ClientConverter(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for ClientConverter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 8));
  }
  else if (v4)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v8)
    {
      v9 = a2[3];
      v10 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v9;
      swift_release(v10);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 24));
  }
  else if (v8)
  {
    v11 = a2[3];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v12 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v12)
    {
      v13 = a2[5];
      v14 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a1 + 40) = v13;
      swift_release(v14);
      goto LABEL_22;
    }
    swift_release(*(_QWORD *)(a1 + 40));
  }
  else if (v12)
  {
    v15 = a2[5];
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v15;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v16 = a2[6];
  if (*(_QWORD *)(a1 + 48))
  {
    if (v16)
    {
      v17 = a2[7];
      v18 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v16;
      *(_QWORD *)(a1 + 56) = v17;
      swift_release(v18);
      goto LABEL_29;
    }
    swift_release(*(_QWORD *)(a1 + 56));
  }
  else if (v16)
  {
    v19 = a2[7];
    *(_QWORD *)(a1 + 48) = v16;
    *(_QWORD *)(a1 + 56) = v19;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  v20 = a2[8];
  if (*(_QWORD *)(a1 + 64))
  {
    if (v20)
    {
      v21 = a2[9];
      v22 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 72) = v21;
      swift_release(v22);
      goto LABEL_36;
    }
    swift_release(*(_QWORD *)(a1 + 72));
  }
  else if (v20)
  {
    v23 = a2[9];
    *(_QWORD *)(a1 + 64) = v20;
    *(_QWORD *)(a1 + 72) = v23;
    goto LABEL_36;
  }
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
LABEL_36:
  v24 = a2[10];
  if (!*(_QWORD *)(a1 + 80))
  {
    if (v24)
    {
      v27 = a2[11];
      *(_QWORD *)(a1 + 80) = v24;
      *(_QWORD *)(a1 + 88) = v27;
      goto LABEL_43;
    }
LABEL_42:
    *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
    goto LABEL_43;
  }
  if (!v24)
  {
    swift_release(*(_QWORD *)(a1 + 88));
    goto LABEL_42;
  }
  v25 = a2[11];
  v26 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v24;
  *(_QWORD *)(a1 + 88) = v25;
  swift_release(v26);
LABEL_43:
  v28 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  swift_release(v28);
  v29 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  swift_release(v29);
  swift_release(*(_QWORD *)(a1 + 128));
  v30 = *(_QWORD *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
  swift_release(v30);
  v31 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = a2[18];
  swift_release(v31);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientConverter(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientConverter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 96) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientConverter()
{
  return &type metadata for ClientConverter;
}

uint64_t sub_117F6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F5C28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_117FB4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

void sub_117FCC(void *a1)
{
  bzero(a1, 0x221uLL);
}

uint64_t sub_117FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_118004(uint64_t a1, _QWORD *a2)
{
  return sub_3EC54(a1, a2);
}

uint64_t sub_11801C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = type metadata accessor for AttributeScorer();
  result = swift_allocObject(v2, 16, 7);
  a1[3] = v2;
  a1[4] = (uint64_t)&off_1E3F90;
  *a1 = result;
  return result;
}

uint64_t sub_118060@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for DelegatingGenreRecommendationService, (uint64_t)&off_1E3470, a2);
}

uint64_t sub_118074@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for DelegatingGenreRecommendationService, (uint64_t)&off_1E3480, a2);
}

uint64_t sub_118088@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for DefaultGenreCollectionRecommendationService, (uint64_t)&off_1E1848, a2);
}

_QWORD *sub_11809C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F2160);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v13, v4, v4, v2, v3);
  if (v14)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_49F4(a1, v6);
    v8 = sub_5EDC(&qword_1F5CF8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(&v11, v8, v8, v6, v7);
    if (v12)
    {
      v9 = type metadata accessor for DefaultGenreCollectionRecommendationService();
      v10 = swift_allocObject(v9, 96, 7);
      sub_26DB8(&v13, v10 + 16);
      sub_26DB8(&v11, v10 + 56);
      return (_QWORD *)v10;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_118178(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F4158);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v6 = result;
    v7 = a1[3];
    v8 = a1[4];
    sub_49F4(a1, v7);
    v9 = sub_5EDC(&qword_1F2160);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(&v12, v9, v9, v7, v8);
    if (v13)
    {
      v10 = type metadata accessor for DelegatingGenreRecommendationService();
      v11 = swift_allocObject(v10, 72, 7);
      *(_QWORD *)(v11 + 64) = _swiftEmptyDictionarySingleton;
      *(_QWORD *)(v11 + 16) = v6;
      sub_26DB8(&v12, v11 + 24);
      return (_QWORD *)v11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_11825C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  v6 = sub_5EDC(&qword_1F0E40);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v15, v6, v6, v4, v5);
  if (v16)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_49F4(a1, v8);
    v10 = sub_5EDC(&qword_1F0E48);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(&v13, v10, v10, v8, v9);
    if (v14)
    {
      v11 = type metadata accessor for SeedBookGenreRecommendationService();
      v12 = swift_allocObject(v11, 96, 7);
      sub_26DB8(&v15, v12 + 16);
      result = (_QWORD *)sub_26DB8(&v13, v12 + 56);
      a2[3] = v11;
      a2[4] = (uint64_t)&_sMp_1.Parent + 3;
      *a2 = v12;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_118354@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  v6 = sub_5EDC(&qword_1F5D10);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(&v14, v6, 0xD000000000000013, 0x800000000019EE20, v6, v4, v5);
  if (v15)
  {
    v8 = a1[3];
    v9 = a1[4];
    sub_49F4(a1, v8);
    result = dispatch thunk of ResolverType.resolve<A>(_:name:)(&v12, v6, 0x747369486B6F6F62, 0xEB0000000079726FLL, v6, v8, v9);
    if (v13)
    {
      v10 = type metadata accessor for CombinedGenreRecommendationService();
      v11 = swift_allocObject(v10, 96, 7);
      sub_26DB8(&v14, v11 + 16);
      result = (_QWORD *)sub_26DB8(&v12, v11 + 56);
      a2[3] = v10;
      a2[4] = (uint64_t)&_sMp_0.Parent + 3;
      *a2 = v11;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_11847C(uint64_t a1, _QWORD *a2)
{
  sub_5EDC(&qword_1F5D10);
  sub_49F4(a2, a2[3]);
  JUMPOUT(0x1185E0);
}

uint64_t type metadata accessor for GenreRecommendationServiceAssembly()
{
  return objc_opt_self(_TtC20BooksPersonalization34GenreRecommendationServiceAssembly);
}

uint64_t sub_1187A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  uint64_t v59;
  uint64_t v60;

  v0 = type metadata accessor for CallbackScope(0);
  v56 = *(_QWORD *)(v0 - 8);
  v57 = v0;
  __chkstk_darwin(v0);
  v55 = (char *)&v55 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Scope(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = ProxyContainer.public.getter(v4);
  v8 = sub_5EDC(&qword_1F0E40);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_11801C, 0, v8);
  swift_release(v7);
  v10 = enum case for Scope.singleton(_:);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11(v6, enum case for Scope.singleton(_:), v2);
  v12 = Definition.inScope(_:)(v6);
  swift_release(v12);
  swift_release(v9);
  v13 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v14 = v13(v6, v2);
  v15 = ProxyContainer.public.getter(v14);
  v16 = sub_5EDC(&qword_1F5CF8);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_118060, 0, v16);
  swift_release(v15);
  v11(v6, v10, v2);
  v18 = Definition.inScope(_:)(v6);
  swift_release(v18);
  swift_release(v17);
  v19 = v13(v6, v2);
  v20 = ProxyContainer.public.getter(v19);
  v21 = sub_5EDC(&qword_1F5D00);
  v22 = RegistrationContainer.register<A>(_:name:factory:)(v21, 0, 0, sub_118074, 0, v21);
  swift_release(v20);
  v11(v6, v10, v2);
  v23 = Definition.inScope(_:)(v6);
  swift_release(v23);
  swift_release(v22);
  v24 = v13(v6, v2);
  v25 = ProxyContainer.public.getter(v24);
  v26 = sub_5EDC(&qword_1F5D08);
  v27 = RegistrationContainer.register<A>(_:name:factory:)(v26, 0, 0, sub_118088, 0, v26);
  swift_release(v25);
  v11(v6, v10, v2);
  v28 = Definition.inScope(_:)(v6);
  swift_release(v28);
  swift_release(v27);
  v29 = v13(v6, v2);
  v30 = ProxyContainer.private.getter(v29);
  v31 = type metadata accessor for DefaultGenreCollectionRecommendationService();
  v32 = RegistrationContainer.register<A>(_:name:factory:)(v31, 0, 0, sub_11809C, 0, v31);
  swift_release(v30);
  v11(v6, v10, v2);
  v33 = Definition.inScope(_:)(v6);
  swift_release(v33);
  swift_release(v32);
  v34 = v13(v6, v2);
  v35 = ProxyContainer.private.getter(v34);
  v36 = type metadata accessor for DelegatingGenreRecommendationService();
  v37 = RegistrationContainer.register<A>(_:name:factory:)(v36, 0, 0, sub_118178, 0, v36);
  swift_release(v35);
  v11(v6, v10, v2);
  v38 = Definition.inScope(_:)(v6);
  swift_release(v38);
  swift_release(v37);
  v39 = v13(v6, v2);
  v40 = ProxyContainer.private.getter(v39);
  v41 = sub_5EDC(&qword_1F5D10);
  v42 = RegistrationContainer.register<A>(_:name:factory:)(v41, 0x747369486B6F6F62, 0xEB0000000079726FLL, sub_11825C, 0, v41);
  swift_release(v40);
  v11(v6, v10, v2);
  v43 = Definition.inScope(_:)(v6);
  swift_release(v43);
  swift_release(v42);
  v44 = v13(v6, v2);
  v45 = ProxyContainer.private.getter(v44);
  v46 = RegistrationContainer.register<A>(_:name:factory:)(v41, 0xD000000000000021, 0x800000000019EE40, sub_118354, 0, v41);
  swift_release(v45);
  v11(v6, v10, v2);
  v47 = Definition.inScope(_:)(v6);
  swift_release(v47);
  swift_release(v46);
  v48 = v13(v6, v2);
  ProxyContainer.callback.getter(v58, v48);
  v49 = v59;
  v50 = v60;
  sub_49F4(v58, v59);
  v52 = v55;
  v51 = v56;
  v53 = v57;
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, enum case for CallbackScope.any(_:), v57);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v36, v52, sub_11847C, 0, v36, v49, v50);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
  return sub_62F8(v58);
}

uint64_t CollectionType.supportedSources.getter()
{
  char *v0;

  return (uint64_t)*(&off_1E7340 + *v0);
}

BooksPersonalization::CollectionType_optional __swiftcall CollectionType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::CollectionType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA5D0, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 7;
  if (v5 < 7)
    v7 = v5;
  *v4 = v7;
  return result;
}

_UNKNOWN **static CollectionType.allCases.getter()
{
  return &off_1DA698;
}

uint64_t CollectionType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_118D4C + 4 * byte_19AC20[*v0]))(0x736B6F6F62, 0xE500000000000000);
}

unint64_t sub_118D4C()
{
  return 0xD000000000000017;
}

uint64_t sub_118DC0()
{
  return 0x6974736567677573;
}

BooksPersonalization::CollectionType_optional sub_118DE0(Swift::String *a1)
{
  return CollectionType.init(rawValue:)(*a1);
}

uint64_t sub_118DEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CollectionType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_118E10(_QWORD *a1@<X8>)
{
  *a1 = &off_1DA698;
}

void sub_118E20()
{
  char *v0;

  sub_152854(0, *v0);
}

void sub_118E2C(uint64_t a1)
{
  char *v1;

  sub_F8E44(a1, *v1);
}

void sub_118E34(uint64_t a1)
{
  char *v1;

  sub_152854(a1, *v1);
}

void sub_118E3C(char *a1)
{
  sub_7A050(*a1);
}

unint64_t sub_118E4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F5D18;
  if (!qword_1F5D18)
  {
    v1 = sub_5F68(&qword_1F5D20);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F5D18);
  }
  return result;
}

unint64_t sub_118E9C()
{
  unint64_t result;

  result = qword_1F5D28;
  if (!qword_1F5D28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionType, &type metadata for CollectionType);
    atomic_store(result, (unint64_t *)&qword_1F5D28);
  }
  return result;
}

unint64_t sub_118EE4()
{
  unint64_t result;

  result = qword_1F5D30;
  if (!qword_1F5D30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionType, &type metadata for CollectionType);
    atomic_store(result, (unint64_t *)&qword_1F5D30);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollectionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_118F74 + 4 * byte_19AC2C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_118FA8 + 4 * byte_19AC27[v4]))();
}

uint64_t sub_118FA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_118FB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x118FB8);
  return result;
}

uint64_t sub_118FC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x118FCCLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_118FD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_118FD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionType()
{
  return &type metadata for CollectionType;
}

uint64_t Array<A>.affinity.getter(uint64_t a1)
{
  uint64_t v1;
  double *v3;
  _QWORD *v4;
  double v5;
  double v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double v17;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    v4 = _swiftEmptyArrayStorage;
    v9 = _swiftEmptyArrayStorage[2];
    if (v9)
      goto LABEL_11;
LABEL_14:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v3 = (double *)(swift_bridgeObjectRetain(a1) + 80);
  v4 = _swiftEmptyArrayStorage;
  do
  {
    if ((*(_BYTE *)v3 & 1) == 0)
    {
      v5 = *(v3 - 2);
      v6 = exp2(-*(v3 - 1) / *(v3 - 3));
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_2FDB4(0, v4[2] + 1, 1, v4);
      v8 = v4[2];
      v7 = v4[3];
      if (v8 >= v7 >> 1)
        v4 = sub_2FDB4((_QWORD *)(v7 > 1), v8 + 1, 1, v4);
      v4[2] = v8 + 1;
      *(double *)&v4[v8 + 4] = v5 * v6;
    }
    v3 += 7;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease(a1);
  v9 = v4[2];
  if (!v9)
    goto LABEL_14;
LABEL_11:
  if (v9 == 1)
  {
    v10 = 0;
    v11 = 0.0;
  }
  else
  {
    v10 = v9 & 0x7FFFFFFFFFFFFFFELL;
    v13 = (double *)(v4 + 5);
    v11 = 0.0;
    v14 = v9 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v11 = v11 + *(v13 - 1) + *v13;
      v13 += 2;
      v14 -= 2;
    }
    while (v14);
    if (v9 == v10)
      goto LABEL_20;
  }
  v15 = v9 - v10;
  v16 = (double *)&v4[v10 + 4];
  do
  {
    v17 = *v16++;
    v11 = v11 + v17;
    --v15;
  }
  while (v15);
LABEL_20:
  swift_bridgeObjectRelease(v4);
  return *(_QWORD *)&v11;
}

uint64_t Array<A>.rawAffinity.getter(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
  {
    v3 = _swiftEmptyArrayStorage;
    v7 = _swiftEmptyArrayStorage[2];
    if (v7)
      goto LABEL_11;
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  v2 = (_BYTE *)(swift_bridgeObjectRetain(a1) + 80);
  v3 = _swiftEmptyArrayStorage;
  do
  {
    if ((*v2 & 1) == 0)
    {
      v4 = *((_QWORD *)v2 - 2);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
        v3 = sub_2FDB4(0, v3[2] + 1, 1, v3);
      v6 = v3[2];
      v5 = v3[3];
      if (v6 >= v5 >> 1)
        v3 = sub_2FDB4((_QWORD *)(v5 > 1), v6 + 1, 1, v3);
      v3[2] = v6 + 1;
      v3[v6 + 4] = v4;
    }
    v2 += 56;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  v7 = v3[2];
  if (!v7)
    goto LABEL_14;
LABEL_11:
  if (v7 == 1)
  {
    v8 = 0;
    v9 = 0.0;
  }
  else
  {
    v8 = v7 & 0x7FFFFFFFFFFFFFFELL;
    v11 = (double *)(v3 + 5);
    v9 = 0.0;
    v12 = v7 & 0x7FFFFFFFFFFFFFFELL;
    do
    {
      v9 = v9 + *(v11 - 1) + *v11;
      v11 += 2;
      v12 -= 2;
    }
    while (v12);
    if (v7 == v8)
      goto LABEL_20;
  }
  v13 = v7 - v8;
  v14 = (double *)&v3[v8 + 4];
  do
  {
    v15 = *v14++;
    v9 = v9 + v15;
    --v13;
  }
  while (v13);
LABEL_20:
  swift_bridgeObjectRelease();
  return *(_QWORD *)&v9;
}

double FeatureAffinityInfo.halfLife.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

__n128 FeatureAffinityInfo.datedRawAffinity.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = v1[3].n128_u8[0];
  result = v1[2];
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

void FeatureAffinityInfo.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  int v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = *((unsigned __int8 *)v2 + 48);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  swift_bridgeObjectRelease(v5);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v6;
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v12 = v7;
  else
    v12 = 0;
  Hasher._combine(_:)(v12);
  if (v10 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v9 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v13 = v9;
    else
      v13 = 0;
    Hasher._combine(_:)(v13);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v14 = v8;
    else
      v14 = 0;
    Hasher._combine(_:)(v14);
  }
}

uint64_t sub_1193C0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1193F4 + 4 * byte_19AD80[*v0]))(0xD000000000000010, 0x80000000001A2920);
}

uint64_t sub_1193F4()
{
  return 0x746867696577;
}

uint64_t sub_119408()
{
  return 0x6566694C666C6168;
}

uint64_t sub_119434@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_11A4E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_119458(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_119E58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_119480(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_119E58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FeatureAffinityInfo.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  char v28;
  int v29;
  char v30;

  v4 = sub_5EDC(&qword_1F5D38);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v11 = v1[2];
  v10 = v1[3];
  v12 = *((_QWORD *)v1 + 4);
  v25 = *((_QWORD *)v1 + 5);
  v26 = v12;
  v29 = *((unsigned __int8 *)v1 + 48);
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1;
  v17 = v16;
  sub_49F4(v15, v13);
  v18 = sub_119E58();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FeatureAffinityInfo.CodingKeys, &type metadata for FeatureAffinityInfo.CodingKeys, v18, v13, v14);
  LOBYTE(v27[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(*(_QWORD *)&v8, v9, v27, v17);
  if (!v2)
  {
    v19 = v29;
    v21 = v25;
    v20 = v26;
    LOBYTE(v27[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v17, v11);
    LOBYTE(v27[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v27, v17, v10);
    v27[0] = v20;
    v27[1] = v21;
    v28 = v19;
    v30 = 3;
    v22 = sub_119E9C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v30, v17, &type metadata for DatedAffinity, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v17);
}

Swift::Int FeatureAffinityInfo.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt64 v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  int v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  _QWORD v13[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v6 = v0[4];
  v5 = v0[5];
  v7 = *((unsigned __int8 *)v0 + 48);
  Hasher.init(_seed:)(v13, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v13, v1, v2);
  swift_bridgeObjectRelease(v2);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = v3;
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v4;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v10 = v6;
    else
      v10 = 0;
    Hasher._combine(_:)(v10);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v11 = v5;
    else
      v11 = 0;
    Hasher._combine(_:)(v11);
  }
  return Hasher._finalize()();
}

uint64_t FeatureAffinityInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  unint64_t v17;
  char v19;
  __int128 v20;
  __int128 v21;
  char v22;
  char v23;

  v5 = sub_5EDC(&qword_1F5D50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_119E58();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FeatureAffinityInfo.CodingKeys, &type metadata for FeatureAffinityInfo.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  LOBYTE(v21) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
  v14 = v13;
  LOBYTE(v21) = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
  LOBYTE(v21) = 2;
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
  v23 = 3;
  v17 = sub_119EE0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v21, &type metadata for DatedAffinity, &v23, v5, &type metadata for DatedAffinity, v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v22;
  v20 = v21;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
  *(double *)(a2 + 16) = v15;
  *(double *)(a2 + 24) = v16;
  *(_OWORD *)(a2 + 32) = v20;
  *(_BYTE *)(a2 + 48) = v19;
  sub_62F8(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_11993C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FeatureAffinityInfo.init(from:)(a1, a2);
}

uint64_t sub_119950(_QWORD *a1)
{
  return FeatureAffinityInfo.encode(to:)(a1);
}

Swift::Int sub_11996C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  int v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  _QWORD v14[9];

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = *((unsigned __int8 *)v1 + 48);
  Hasher.init(_seed:)(v14, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v14, v2, v3);
  swift_bridgeObjectRelease(v3);
  if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = v4;
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v5;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v11 = v7;
    else
      v11 = 0;
    Hasher._combine(_:)(v11);
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v6;
    else
      v12 = 0;
    Hasher._combine(_:)(v12);
  }
  return Hasher._finalize()();
}

uint64_t sub_119A44()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000019;
  else
    return 0x7974696E69666661;
}

uint64_t sub_119A84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_11A68C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_119AA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_119F24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_119AD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_119F24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DatedAffinity.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;

  v4 = sub_5EDC(&qword_1F5D60);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_119F24();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DatedAffinity.CodingKeys, &type metadata for DatedAffinity.CodingKeys, v12, v10, v11);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v16, v4, v9);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v15, v4, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DatedAffinity.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  uint64_t v15;
  char v16;
  char v17;

  v5 = sub_5EDC(&qword_1F5D70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_119F24();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DatedAffinity.CodingKeys, &type metadata for DatedAffinity.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v17 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v5);
    v16 = 1;
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v12;
    a2[1] = v13;
  }
  return sub_62F8(a1);
}

uint64_t sub_119D64@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return DatedAffinity.init(from:)(a1, a2);
}

uint64_t sub_119D78(_QWORD *a1)
{
  return DatedAffinity.encode(to:)(a1);
}

uint64_t _s20BooksPersonalization19FeatureAffinityInfoV2eeoiySbAC_ACtFZ_0(double *a1, uint64_t a2)
{
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  char v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  char v16;
  char v18;
  uint64_t result;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 1);
  v7 = a1[2];
  v6 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = *((_BYTE *)a1 + 48);
  v11 = *(_QWORD *)(a2 + 8);
  v13 = *(double *)(a2 + 16);
  v12 = *(double *)(a2 + 24);
  v14 = *(double *)(a2 + 32);
  v15 = *(double *)(a2 + 40);
  v16 = *(_BYTE *)(a2 + 48);
  if (*(_QWORD *)&v4 == *(_QWORD *)a2 && v5 == v11)
  {
    if (v7 != v13 || v6 != v12)
      return 0;
LABEL_14:
    if ((v10 & 1) != 0)
    {
      if ((v16 & 1) == 0)
        return 0;
    }
    else
    {
      if ((v16 & 1) != 0)
        return 0;
      if (v8 != v14 || v9 != v15)
        return 0;
    }
    return 1;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4, v5, *(_QWORD *)a2, v11, 0);
  result = 0;
  if ((v18 & 1) != 0 && v7 == v13 && v6 == v12)
    goto LABEL_14;
  return result;
}

unint64_t sub_119E58()
{
  unint64_t result;

  result = qword_1F5D40;
  if (!qword_1F5D40)
  {
    result = swift_getWitnessTable(&unk_19B160, &type metadata for FeatureAffinityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5D40);
  }
  return result;
}

unint64_t sub_119E9C()
{
  unint64_t result;

  result = qword_1F5D48;
  if (!qword_1F5D48)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DatedAffinity, &type metadata for DatedAffinity);
    atomic_store(result, (unint64_t *)&qword_1F5D48);
  }
  return result;
}

unint64_t sub_119EE0()
{
  unint64_t result;

  result = qword_1F5D58;
  if (!qword_1F5D58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DatedAffinity, &type metadata for DatedAffinity);
    atomic_store(result, (unint64_t *)&qword_1F5D58);
  }
  return result;
}

unint64_t sub_119F24()
{
  unint64_t result;

  result = qword_1F5D68;
  if (!qword_1F5D68)
  {
    result = swift_getWitnessTable(&unk_19B110, &type metadata for DatedAffinity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5D68);
  }
  return result;
}

unint64_t sub_119F6C()
{
  unint64_t result;

  result = qword_1F5D78;
  if (!qword_1F5D78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FeatureAffinityInfo, &type metadata for FeatureAffinityInfo);
    atomic_store(result, (unint64_t *)&qword_1F5D78);
  }
  return result;
}

unint64_t sub_119FB4()
{
  unint64_t result;

  result = qword_1F5D80;
  if (!qword_1F5D80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DatedAffinity, &type metadata for DatedAffinity);
    atomic_store(result, (unint64_t *)&qword_1F5D80);
  }
  return result;
}

uint64_t initializeWithCopy for FeatureAffinityInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for FeatureAffinityInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithTake for FeatureAffinityInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureAffinityInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureAffinityInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureAffinityInfo()
{
  return &type metadata for FeatureAffinityInfo;
}

ValueMetadata *type metadata accessor for DatedAffinity()
{
  return &type metadata for DatedAffinity;
}

uint64_t storeEnumTagSinglePayload for DatedAffinity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_11A1E8 + 4 * byte_19AD89[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_11A21C + 4 * byte_19AD84[v4]))();
}

uint64_t sub_11A21C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11A224(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x11A22CLL);
  return result;
}

uint64_t sub_11A238(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x11A240);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_11A244(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_11A24C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DatedAffinity.CodingKeys()
{
  return &type metadata for DatedAffinity.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for FeatureAffinityInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_11A2B4 + 4 * byte_19AD93[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_11A2E8 + 4 * byte_19AD8E[v4]))();
}

uint64_t sub_11A2E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_11A2F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x11A2F8);
  return result;
}

uint64_t sub_11A304(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x11A30CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_11A310(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_11A318(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureAffinityInfo.CodingKeys()
{
  return &type metadata for FeatureAffinityInfo.CodingKeys;
}

unint64_t sub_11A338()
{
  unint64_t result;

  result = qword_1F5D88;
  if (!qword_1F5D88)
  {
    result = swift_getWitnessTable(&unk_19B030, &type metadata for FeatureAffinityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5D88);
  }
  return result;
}

unint64_t sub_11A380()
{
  unint64_t result;

  result = qword_1F5D90;
  if (!qword_1F5D90)
  {
    result = swift_getWitnessTable(&unk_19B0E8, &type metadata for DatedAffinity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5D90);
  }
  return result;
}

unint64_t sub_11A3C8()
{
  unint64_t result;

  result = qword_1F5D98;
  if (!qword_1F5D98)
  {
    result = swift_getWitnessTable(&unk_19B058, &type metadata for DatedAffinity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5D98);
  }
  return result;
}

unint64_t sub_11A410()
{
  unint64_t result;

  result = qword_1F5DA0;
  if (!qword_1F5DA0)
  {
    result = swift_getWitnessTable(&unk_19B080, &type metadata for DatedAffinity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5DA0);
  }
  return result;
}

unint64_t sub_11A458()
{
  unint64_t result;

  result = qword_1F5DA8;
  if (!qword_1F5DA8)
  {
    result = swift_getWitnessTable(&unk_19AFA0, &type metadata for FeatureAffinityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5DA8);
  }
  return result;
}

unint64_t sub_11A4A0()
{
  unint64_t result;

  result = qword_1F5DB0;
  if (!qword_1F5DB0)
  {
    result = swift_getWitnessTable(&unk_19AFC8, &type metadata for FeatureAffinityInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F5DB0);
  }
  return result;
}

uint64_t sub_11A4E4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000000001A2920;
    if (a2 == 0x80000000001A2920)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001A2920, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746867696577 && a2 == 0xE600000000000000)
  {
    v6 = 0xE600000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746867696577, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6566694C666C6168 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6566694C666C6168, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000000001A2940)
  {
    swift_bridgeObjectRelease(0x80000000001A2940);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001A2940, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_11A68C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7974696E69666661 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974696E69666661, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x80000000001A2960)
  {
    swift_bridgeObjectRelease(0x80000000001A2960);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x80000000001A2960, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_11A778()
{
  __asm { BR              X9; loc_11A91C }
}

void BookHistory.isEmpty.getter()
{
  __asm { BR              X23; loc_11AB40 }
}

Swift::Bool __swiftcall BookHistory.hasValue(for:)(BooksPersonalization::BookHistory::Feature a1)
{
  return ((uint64_t (*)())((char *)sub_11AC0C + 4 * byte_19B1D4[*(unsigned __int8 *)a1]))();
}

uint64_t sub_11AC0C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16) ^ 1u;
}

BOOL sub_11AC18()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 80) != 255;
}

uint64_t sub_11ACA8@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(a1 + 56) ^ 1u;
}

uint64_t sub_11ACB4@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(a1 + 72) ^ 1u;
}

uint64_t sub_11ACC0@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(a1 + 88) ^ 1u;
}

uint64_t sub_11ACCC@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(a1 + 104) ^ 1u;
}

uint64_t sub_11ACD8@<X0>(uint64_t a1@<X8>)
{
  return *(unsigned __int8 *)(a1 + 120) ^ 1u;
}

uint64_t sub_11ACE4(uint64_t a1)
{
  __int128 *v1;
  char v2;
  char v3;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  __int128 *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  double v17;
  char v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  __int128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  double v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  double v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char v97;
  __int128 v98;
  __int128 v99;
  _BYTE v100[23];
  double v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _BYTE v106[7];
  double v107;
  char v108;
  _BYTE v109[7];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  _BYTE v116[23];
  uint64_t v117;
  char v118;
  _BYTE v119[23];
  uint64_t v120;
  char v121;

  v2 = *((_BYTE *)v1 + 152);
  if ((v2 & 1) == 0)
  {
LABEL_2:
    v3 = 1;
    return v3 & 1;
  }
  v5 = v1;
  v6 = *(_QWORD *)(a1 + 64);
  v79 = *(_QWORD *)(a1 + 72);
  v80 = *(_QWORD *)(a1 + 80);
  v78 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v61 = *(_QWORD *)(a1 + 104);
  v8 = *(double *)(a1 + 312);
  v9 = *((_QWORD *)v1 + 18);
  v10 = (__int128 *)((char *)v1 + 153);
  v11 = *((double *)v1 + 26);
  v12 = *((double *)v1 + 27);
  v13 = *((_QWORD *)v1 + 28);
  v14 = *((_QWORD *)v1 + 29);
  v15 = *((unsigned __int8 *)v1 + 240);
  v16 = (_DWORD *)((char *)v1 + 241);
  v17 = *((double *)v1 + 31);
  v18 = *((_BYTE *)v1 + 256);
  v19 = (_DWORD *)((char *)v1 + 257);
  v20 = *((_QWORD *)v1 + 33);
  v21 = *((_QWORD *)v1 + 34);
  v22 = *((_QWORD *)v1 + 35);
  v23 = *((_QWORD *)v1 + 36);
  v24 = (__int128 *)((char *)v1 + 297);
  v25 = *((_QWORD *)v5 + 42);
  v26 = *((_BYTE *)v5 + 344);
  v27 = *((_QWORD *)v5 + 46);
  v28 = *((_BYTE *)v5 + 376);
  v29 = *((unsigned __int8 *)v5 + 296);
  v30 = v5[7];
  v93 = v5[6];
  v94 = v30;
  v95 = v5[8];
  v31 = v5[3];
  v89 = v5[2];
  v90 = v31;
  v32 = v5[5];
  v91 = v5[4];
  v92 = v32;
  v33 = v5[1];
  v87 = *v5;
  v88 = v33;
  v75 = v11;
  v76 = v9;
  v96 = v9;
  v77 = v2;
  v97 = v2;
  v34 = v10[1];
  v98 = *v10;
  v99 = v34;
  *(_OWORD *)v100 = v10[2];
  v63 = v16;
  v64 = v10;
  *(_QWORD *)&v100[15] = *(_QWORD *)((char *)v10 + 47);
  v101 = v11;
  v73 = v13;
  v74 = v12;
  v102 = v12;
  v103 = v13;
  v72 = v14;
  v104 = v14;
  v71 = v15;
  v105 = v15;
  *(_DWORD *)v106 = *v16;
  *(_DWORD *)&v106[3] = *(_DWORD *)((char *)v16 + 3);
  v70 = v17;
  v107 = v17;
  v69 = v18;
  v108 = v18;
  *(_DWORD *)v109 = *v19;
  v62 = v19;
  *(_DWORD *)&v109[3] = *(_DWORD *)((char *)v19 + 3);
  v67 = v21;
  v68 = v20;
  v110 = v20;
  v111 = v21;
  v65 = v23;
  v66 = v22;
  v112 = v22;
  v113 = v23;
  v114 = v29;
  v35 = v24[1];
  v115 = *v24;
  *(_OWORD *)v116 = v35;
  *(_QWORD *)&v116[15] = *(_QWORD *)((char *)v24 + 31);
  v36 = v25;
  v117 = v25;
  v37 = v26;
  v118 = v26;
  *(_OWORD *)v119 = *(__int128 *)((char *)v5 + 345);
  *(_QWORD *)&v119[15] = *((_QWORD *)v5 + 45);
  v38 = v27;
  v120 = v27;
  v121 = v28;
  v39 = sub_C1614();
  v3 = 0;
  if ((v39 & 1) == 0 && v29 == 255)
  {
    if (v71 == 255)
      goto LABEL_12;
    v40 = v75;
    if ((v71 & 1) != 0)
    {
      v40 = v74;
      if (v8 * (double)v73 + v75 <= v74)
        v40 = v8 * (double)v73 + v75;
    }
    v3 = 0;
    if ((v69 & 1) == 0 && v40 >= v70)
    {
LABEL_12:
      v41 = v5[7];
      v93 = v5[6];
      v94 = v41;
      v95 = v5[8];
      v42 = v5[3];
      v89 = v5[2];
      v90 = v42;
      v43 = v5[5];
      v91 = v5[4];
      v92 = v43;
      v44 = v5[1];
      v87 = *v5;
      v88 = v44;
      v96 = v76;
      v97 = v77;
      v45 = v64[1];
      v98 = *v64;
      v99 = v45;
      *(_OWORD *)v100 = v64[2];
      *(_QWORD *)&v100[15] = *(_QWORD *)((char *)v64 + 47);
      v101 = v75;
      v102 = v74;
      v103 = v73;
      v104 = v72;
      v105 = v71;
      *(_DWORD *)v106 = *v63;
      *(_DWORD *)&v106[3] = *(_DWORD *)((char *)v63 + 3);
      v107 = v70;
      v108 = v69;
      *(_DWORD *)v109 = *v62;
      *(_DWORD *)&v109[3] = *(_DWORD *)((char *)v62 + 3);
      v110 = v68;
      v111 = v67;
      v112 = v66;
      v113 = v65;
      v114 = -1;
      v46 = v24[1];
      v115 = *v24;
      *(_OWORD *)v116 = v46;
      *(_QWORD *)&v116[15] = *(_QWORD *)((char *)v24 + 31);
      v117 = v36;
      v118 = v37;
      *(_OWORD *)v119 = *(__int128 *)((char *)v5 + 345);
      *(_QWORD *)&v119[15] = *((_QWORD *)v5 + 45);
      v120 = v38;
      v121 = v28;
      if ((v37 & 1) != 0)
        v47 = 0;
      else
        v47 = v36;
      v81 = v6;
      v82 = v79;
      v83 = v80;
      v84 = v78;
      v85 = v7;
      v86 = v61;
      sub_11D4DC(v47, v79, (uint64_t)&v81);
      if ((v48 & 1) != 0)
        goto LABEL_2;
      *(_DWORD *)v109 = *v62;
      *(_DWORD *)v106 = *v63;
      v49 = v64[1];
      v98 = *v64;
      v99 = v49;
      *(_OWORD *)v100 = v64[2];
      v50 = v24[1];
      v115 = *v24;
      *(_OWORD *)v116 = v50;
      *(_OWORD *)v119 = *(__int128 *)((char *)v5 + 345);
      v51 = v5[6];
      v52 = v5[7];
      v53 = v5[8];
      v54 = v5[2];
      v55 = v5[3];
      v57 = v5[4];
      v56 = v5[5];
      v59 = *v5;
      v58 = v5[1];
      v96 = v76;
      v97 = v77;
      *(_QWORD *)&v100[15] = *(_QWORD *)((char *)v64 + 47);
      v101 = v75;
      v102 = v74;
      v103 = v73;
      v104 = v72;
      v105 = v71;
      *(_DWORD *)&v106[3] = *(_DWORD *)((char *)v63 + 3);
      v107 = v70;
      v108 = v69;
      *(_DWORD *)&v109[3] = *(_DWORD *)((char *)v62 + 3);
      v110 = v68;
      v111 = v67;
      v112 = v66;
      v113 = v65;
      v114 = -1;
      *(_QWORD *)&v116[15] = *(_QWORD *)((char *)v24 + 31);
      v117 = v36;
      v118 = v37;
      *(_QWORD *)&v119[15] = *((_QWORD *)v5 + 45);
      v121 = v28;
      v82 = v79;
      v83 = v80;
      v84 = v78;
      v86 = v61;
      v93 = v51;
      v94 = v52;
      v95 = v53;
      v89 = v54;
      v90 = v55;
      v91 = v57;
      v92 = v56;
      v87 = v59;
      v88 = v58;
      v120 = v38;
      if ((v28 & 1) != 0)
        v60 = 0;
      else
        v60 = v38;
      v81 = v6;
      v85 = v7;
      sub_11D4DC(v60, v80, (uint64_t)&v81);
    }
  }
  return v3 & 1;
}

uint64_t BookHistory.affinity(with:)(__int128 *a1)
{
  uint64_t v2;
  unint64_t v3;

  BookHistory.internalAffinitySource(with:)(a1, (uint64_t)&v2);
  if (v3 >> 1 != 0xFFFFFFFF)
    __asm { BR              X10 }
  return 0;
}

uint64_t BookHistory.pruned(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  BOOL v11;
  double v12;
  BOOL v13;
  double v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  double v22;
  BOOL v23;
  BOOL v24;
  double v25;
  BOOL v26;
  BOOL v27;
  double v28;
  BOOL v29;
  BOOL v30;
  double v31;
  BOOL v32;
  BOOL v33;
  double v34;
  BOOL v35;
  BOOL v36;
  double v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  BOOL v44;
  double v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char v52;
  double v53;
  char v54;
  char v55;
  double v56;
  char v57;
  char v58;
  double v59;
  char v60;
  char v61;
  double v62;
  char v63;
  BOOL v64;
  double v65;
  char v66;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  char v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  char v99;
  double v100;
  double v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  double v107;
  double v108;
  double v109;
  double v110;
  char v111;
  double v112;
  double v113;
  double v114;
  char v115;
  double v116;
  char v117;
  double v118;
  char v119;
  double v120;
  char v121;
  double v122;
  double v123;
  double v124;
  uint64_t v125;
  _BYTE __dst[384];
  _BYTE v128[392];
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  __int128 v137;
  char v138;
  uint64_t v139[5];
  char v140;
  _QWORD __src[49];

  v4 = *(double *)(v2 + 8);
  v125 = *(_QWORD *)v2;
  v105 = *(_BYTE *)(v2 + 16);
  v5 = *(double *)(v2 + 24);
  v103 = *(_BYTE *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 48);
  v68 = *(_QWORD *)(v2 + 40);
  v8 = *(_QWORD *)(v2 + 56);
  v7 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v10 = *(_BYTE *)(v2 + 80);
  v80 = *(_QWORD *)(v2 + 96);
  v82 = *(_QWORD *)(v2 + 88);
  v79 = *(_BYTE *)(v2 + 104);
  v113 = *(double *)(v2 + 112);
  v94 = *(_BYTE *)(v2 + 120);
  v91 = *(_BYTE *)(v2 + 136);
  v107 = *(double *)(v2 + 144);
  v109 = *(double *)(v2 + 128);
  v98 = *(_BYTE *)(v2 + 152);
  v96 = *(_BYTE *)(v2 + 168);
  v86 = *(double *)(v2 + 176);
  v88 = *(double *)(v2 + 160);
  v93 = *(_BYTE *)(v2 + 184);
  v84 = *(double *)(v2 + 192);
  v90 = *(_BYTE *)(v2 + 200);
  v71 = *(_QWORD *)(v2 + 216);
  v72 = *(_QWORD *)(v2 + 208);
  v73 = *(_QWORD *)(v2 + 224);
  v70 = *(_QWORD *)(v2 + 232);
  v69 = *(_BYTE *)(v2 + 240);
  v100 = *(double *)(v2 + 248);
  v102 = *(_BYTE *)(v2 + 256);
  v77 = *(_QWORD *)(v2 + 272);
  v78 = *(_QWORD *)(v2 + 264);
  v75 = *(_QWORD *)(v2 + 288);
  v76 = *(_QWORD *)(v2 + 280);
  v74 = *(_BYTE *)(v2 + 296);
  v112 = *(double *)(v2 + 304);
  v116 = *(double *)(v2 + 320);
  v118 = *(double *)(v2 + 336);
  v120 = *(double *)(v2 + 352);
  v122 = *(double *)(v2 + 368);
  v111 = *(_BYTE *)(v2 + 312);
  v115 = *(_BYTE *)(v2 + 328);
  v117 = *(_BYTE *)(v2 + 344);
  v119 = *(_BYTE *)(v2 + 360);
  v121 = *(_BYTE *)(v2 + 376);
  v11 = sub_28468(0, a1);
  if (v11)
    v12 = v4;
  else
    v12 = 0.0;
  v124 = v12;
  v13 = sub_28468(2u, a1);
  if (v13)
    v14 = v5;
  else
    v14 = 0.0;
  v123 = v14;
  if (sub_28468(1u, a1))
  {
    v15 = v68;
  }
  else
  {
    v15 = 0;
    v6 = 0;
    v8 = 0;
    v7 = 0;
    v9 = 0;
    v10 = -1;
  }
  v16 = !v11;
  v17 = !v13;
  v139[0] = v15;
  v139[1] = v6;
  v139[2] = v8;
  v139[3] = v7;
  v139[4] = v9;
  v140 = v10;
  v18 = sub_28468(3u, a1);
  v20 = v80;
  v19 = v82;
  if (!v18)
  {
    v19 = 0;
    v20 = 0;
  }
  *(_QWORD *)&v137 = v19;
  *((_QWORD *)&v137 + 1) = v20;
  v138 = v79 & 1 | !v18;
  v21 = sub_28468(4u, a1);
  v22 = v113;
  if (!v21)
    v22 = 0.0;
  v114 = v22;
  v23 = !v21;
  v24 = sub_28468(5u, a1);
  v25 = v109;
  if (!v24)
    v25 = 0.0;
  v110 = v25;
  v26 = !v24;
  v27 = sub_28468(6u, a1);
  v28 = v107;
  if (!v27)
    v28 = 0.0;
  v108 = v28;
  v29 = !v27;
  v30 = sub_28468(7u, a1);
  v31 = v88;
  if (!v30)
    v31 = 0.0;
  v89 = v31;
  v32 = !v30;
  v33 = sub_28468(8u, a1);
  v34 = v86;
  if (!v33)
    v34 = 0.0;
  v87 = v34;
  v35 = !v33;
  v36 = sub_28468(9u, a1);
  v37 = v84;
  if (!v36)
    v37 = 0.0;
  v85 = v37;
  v38 = !v36;
  if (sub_28468(0xAu, a1))
  {
    v40 = v72;
    v39 = v73;
    v42 = v70;
    v41 = v71;
    v43 = v69;
  }
  else
  {
    v40 = 0;
    v41 = 0;
    v39 = 0;
    v42 = 0;
    v43 = -1;
  }
  v106 = v16 | v105;
  v104 = v17 | v103;
  v95 = v23 | v94;
  v92 = v26 | v91;
  *(_QWORD *)&v133 = v40;
  *((_QWORD *)&v133 + 1) = v41;
  v81 = v29 | v98;
  v83 = v32 | v96;
  v97 = v35 | v93;
  v99 = v38 | v90;
  v134 = v39;
  v135 = v42;
  v136 = v43;
  v44 = sub_28468(0xBu, a1);
  v45 = v100;
  if (!v44)
    v45 = 0.0;
  v101 = v45;
  v46 = !v44 | v102;
  if (sub_28468(0xCu, a1))
  {
    v48 = v77;
    v47 = v78;
    v50 = v75;
    v49 = v76;
    v51 = v74;
  }
  else
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v51 = -1;
  }
  *(_QWORD *)&v129 = v47;
  *((_QWORD *)&v129 + 1) = v48;
  v130 = v49;
  v131 = v50;
  v132 = v51;
  v52 = sub_28468(0xDu, a1);
  if ((v52 & 1) != 0)
    v53 = v112;
  else
    v53 = 0.0;
  v54 = v111 | ~v52;
  v55 = sub_28468(0xEu, a1);
  if ((v55 & 1) != 0)
    v56 = v116;
  else
    v56 = 0.0;
  v57 = v115 | ~v55;
  v58 = sub_28468(0xFu, a1);
  if ((v58 & 1) != 0)
    v59 = v118;
  else
    v59 = 0.0;
  v60 = v117 | ~v58;
  v61 = sub_28468(0x10u, a1);
  if ((v61 & 1) != 0)
    v62 = v120;
  else
    v62 = 0.0;
  v63 = v119 | ~v61;
  v64 = sub_28468(0x11u, a1);
  v65 = v122;
  if (!v64)
    v65 = 0.0;
  BookHistory.init(storeID:readFractionHighWaterMark:sampleReadFractionHighWaterMark:markedFinishedInfo:reviewInfo:secondsSinceMoreLikeThis:secondsSinceLessLikeThis:secondsSinceExplicitDecline:secondsSinceLastRead:secondsSincePurchased:secondsSinceFirstDownloadedViaFamilySharing:addedToWantToRead:secondsSinceRemovedFromWantToRead:sampled:secondsSinceProductPageViewed:secondsSinceFirstRecommended:daysRecommendedCount:consecutiveDaysNotRecommendedCount:daysRecommendationPassedOverCount:)(v125, v124, v106 & 1, v123, v104 & 1, v139, &v137, v114, (uint64_t)__src, v95 & 1, v110, v92 & 1, v108, v81 & 1, v89, v83 & 1, v87, v97 & 1, v85,
    v99 & 1,
    &v133,
    v101,
    v46 & 1,
    &v129,
    v53,
    v54 & 1,
    v56,
    v57 & 1,
    v59,
    v60 & 1,
    v62,
    v63 & 1,
    v65,
    v121 & 1 | !v64);
  BookHistory.isEmpty.getter();
  if ((v66 & 1) != 0)
  {
    sub_FEB5C((uint64_t)__dst);
  }
  else
  {
    memcpy(__dst, __src, 0x179uLL);
    AuthorRecommendationSource.id.getter(__dst);
  }
  sub_8E32C((uint64_t)__dst, (uint64_t)v128);
  return sub_8E32C((uint64_t)v128, a2);
}

void BookHistory.internalAffinitySource(with:)(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  double v16;
  __int128 v17;
  __int128 v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  int v27;
  double v28;
  char v29;
  int v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  double v35;
  uint64_t v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  char *v47;
  char v48;
  char v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  double v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  unsigned __int8 v67;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  _QWORD *v71;
  double v72;
  double v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  double v79;
  unint64_t v80;
  uint64_t v81;
  double v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char v100;
  char v101;
  char v102;
  double v103;
  int v104;
  uint64_t v105;
  double v106;
  double v107;
  uint64_t v108;
  uint64_t v109;
  double v110;
  char v111;
  char *v112;
  char v113;
  uint64_t v114;
  double v115;
  unsigned __int8 v116;
  double v117;
  _QWORD *v118;
  char v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  double v126;
  uint64_t v127;
  char v128;
  _BYTE v129[7];
  double v130;
  char v131;
  _BYTE v132[7];
  double v133;
  char v134;
  _BYTE v135[7];
  uint64_t v136;
  char v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[23];
  double v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  _BYTE v146[7];
  double v147;
  char v148;
  _BYTE v149[7];
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  __int128 v155;
  _BYTE v156[23];
  uint64_t v157;
  char v158;
  _BYTE v159[7];
  uint64_t v160;
  char v161;
  _BYTE v162[7];
  uint64_t v163;
  char v164;
  __int128 v165;
  _OWORD v166[7];
  uint64_t v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _DWORD v176[2];
  _DWORD v177[2];
  __int128 v178;
  _OWORD v179[2];
  _DWORD v180[2];
  _DWORD v181[2];
  __int128 v182;
  __int128 v183;
  _BYTE v184[23];
  _DWORD v185[2];
  _DWORD v186[2];
  _DWORD v187[2];
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;

  v4 = a1[1];
  v172 = *a1;
  v173 = v4;
  v5 = a1[3];
  v174 = a1[2];
  v175 = v5;
  v6 = *((_QWORD *)a1 + 8);
  v7 = *((_QWORD *)a1 + 9);
  v8 = *((_QWORD *)a1 + 10);
  v86 = *((_QWORD *)a1 + 11);
  v9 = *((double *)a1 + 12);
  v88 = *((_QWORD *)a1 + 13);
  v10 = *((_QWORD *)a1 + 14);
  v11 = *((_QWORD *)a1 + 15);
  v12 = *((_QWORD *)a1 + 16);
  v13 = *((_QWORD *)a1 + 17);
  v14 = a1[11];
  v171 = a1[12];
  v170 = v14;
  v15 = a1[9];
  v169 = a1[10];
  v168 = v15;
  v16 = *((double *)a1 + 26);
  v87 = *((_QWORD *)a1 + 27);
  v167 = *((_QWORD *)a1 + 38);
  v166[6] = a1[18];
  v17 = a1[16];
  v166[5] = a1[17];
  v166[4] = v17;
  v18 = a1[14];
  v166[3] = a1[15];
  v166[2] = v18;
  v19 = *((double *)a1 + 39);
  v20 = a1[20];
  v21 = a1[21];
  *(_OWORD *)((char *)v166 + 11) = *(__int128 *)((char *)a1 + 347);
  v166[0] = v21;
  v165 = v20;
  v22 = v2[1];
  v188 = *v2;
  v189 = v22;
  v23 = v2[2];
  v24 = v2[3];
  v25 = v2[4];
  v26 = *((double *)v2 + 11);
  v193 = *((_QWORD *)v2 + 10);
  v191 = v24;
  v192 = v25;
  v190 = v23;
  v109 = *((_QWORD *)v2 + 12);
  v110 = v26;
  v113 = *((_BYTE *)v2 + 104);
  v27 = *(_DWORD *)((char *)v2 + 105);
  *(_DWORD *)((char *)v187 + 3) = *((_DWORD *)v2 + 27);
  v187[0] = v27;
  v28 = *((double *)v2 + 14);
  v29 = *((_BYTE *)v2 + 120);
  v30 = *(_DWORD *)((char *)v2 + 121);
  *(_DWORD *)((char *)v186 + 3) = *((_DWORD *)v2 + 31);
  v186[0] = v30;
  v115 = *((double *)v2 + 16);
  v117 = v28;
  LOBYTE(v28) = *((_BYTE *)v2 + 136);
  v31 = *(_DWORD *)((char *)v2 + 137);
  *(_DWORD *)((char *)v185 + 3) = *((_DWORD *)v2 + 35);
  v185[0] = v31;
  v99 = *((_QWORD *)v2 + 18);
  v98 = *((_BYTE *)v2 + 152);
  v32 = *(__int128 *)((char *)v2 + 153);
  v33 = *(__int128 *)((char *)v2 + 169);
  v34 = *(__int128 *)((char *)v2 + 185);
  v35 = *((double *)v2 + 26);
  *(_QWORD *)&v184[15] = *((_QWORD *)v2 + 25);
  *(_OWORD *)v184 = v34;
  v183 = v33;
  v182 = v32;
  v106 = *((double *)v2 + 27);
  v107 = v35;
  v105 = *((_QWORD *)v2 + 28);
  v36 = *((_QWORD *)v2 + 29);
  v104 = *((unsigned __int8 *)v2 + 240);
  v37 = *(_DWORD *)((char *)v2 + 241);
  *(_DWORD *)((char *)v181 + 3) = *((_DWORD *)v2 + 61);
  v181[0] = v37;
  v103 = *((double *)v2 + 31);
  v102 = *((_BYTE *)v2 + 256);
  v38 = *(_DWORD *)((char *)v2 + 257);
  *(_DWORD *)((char *)v180 + 3) = *((_DWORD *)v2 + 65);
  v180[0] = v38;
  v96 = *((_QWORD *)v2 + 33);
  v97 = v36;
  v94 = *((_QWORD *)v2 + 35);
  v95 = *((_QWORD *)v2 + 34);
  v93 = *((_QWORD *)v2 + 36);
  v92 = *((unsigned __int8 *)v2 + 296);
  v39 = *(__int128 *)((char *)v2 + 297);
  v40 = *(__int128 *)((char *)v2 + 313);
  v114 = *((_QWORD *)v2 + 42);
  *(_QWORD *)((char *)v179 + 15) = *((_QWORD *)v2 + 41);
  v179[0] = v40;
  v178 = v39;
  *(_DWORD *)((char *)v177 + 3) = *((_DWORD *)v2 + 87);
  v177[0] = *(_DWORD *)((char *)v2 + 345);
  *(_DWORD *)((char *)v176 + 3) = *((_DWORD *)v2 + 91);
  v176[0] = *(_DWORD *)((char *)v2 + 361);
  v100 = LOBYTE(v28);
  v101 = *((_BYTE *)v2 + 344);
  v108 = *((_QWORD *)v2 + 44);
  v111 = *((_BYTE *)v2 + 360);
  if ((LOBYTE(v28) & 1) == 0)
  {
    if ((v29 & 1) != 0 || v115 < v117)
    {
      *(_OWORD *)a2 = xmmword_19B200;
      *(_QWORD *)(a2 + 16) = v12;
      *(_QWORD *)(a2 + 24) = v13;
      *(_QWORD *)(a2 + 32) = v12;
      *(double *)(a2 + 40) = v115;
      *(_QWORD *)(a2 + 48) = 0;
LABEL_7:
      *(_QWORD *)(a2 + 64) = 0;
      goto LABEL_8;
    }
LABEL_6:
    *(_OWORD *)a2 = xmmword_19B200;
    *(_QWORD *)(a2 + 16) = v10;
    *(_QWORD *)(a2 + 24) = v11;
    *(_QWORD *)(a2 + 32) = v10;
    *(double *)(a2 + 40) = v117;
    *(_QWORD *)(a2 + 48) = 0x4000000000000000;
    goto LABEL_7;
  }
  if ((v29 & 1) == 0)
    goto LABEL_6;
  if ((v113 & 1) == 0)
  {
    v41 = sub_5EDC(&qword_1F14C8);
    v42 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v42 + 16) = xmmword_1875E0;
    *(_QWORD *)(v42 + 56) = &type metadata for Double;
    *(_QWORD *)(v42 + 64) = &protocol witness table for Double;
    *(double *)(v42 + 32) = v110;
    *(_QWORD *)a2 = String.init(format:_:)(1714564645, 0xE400000000000000, v42);
    *(_QWORD *)(a2 + 8) = v43;
    *(double *)(a2 + 16) = v16;
    *(_QWORD *)(a2 + 24) = v87;
    *(double *)(a2 + 32) = v16 * v110;
    *(_QWORD *)(a2 + 40) = v109;
    *(_QWORD *)(a2 + 48) = 0x8000000000000000;
    *(double *)(a2 + 56) = v110;
    *(_QWORD *)(a2 + 64) = v109;
    return;
  }
  v44 = 8;
  v81 = a2;
  v46 = v106;
  v45 = v35;
  v82 = (double)v86;
  v91 = *((_QWORD *)v2 + 46);
  if (v19 * (double)v105 + v35 <= v106)
    v46 = v19 * (double)v105 + v35;
  if ((v104 & 1) != 0)
    v45 = v46;
  v83 = (v104 != 255) & (v102 | (v45 < v103));
  v90 = *((_BYTE *)v2 + 376);
  v118 = _swiftEmptyArrayStorage;
  v47 = &byte_1D6228;
  v84 = v8;
  v85 = v7;
  v89 = v29;
  do
  {
    v125 = v193;
    *(_DWORD *)&v129[3] = *(_DWORD *)((char *)v187 + 3);
    *(_DWORD *)v129 = v187[0];
    *(_DWORD *)&v132[3] = *(_DWORD *)((char *)v186 + 3);
    *(_DWORD *)v132 = v186[0];
    *(_DWORD *)&v135[3] = *(_DWORD *)((char *)v185 + 3);
    *(_DWORD *)v135 = v185[0];
    *(_QWORD *)&v140[15] = *(_QWORD *)&v184[15];
    *(_DWORD *)&v146[3] = *(_DWORD *)((char *)v181 + 3);
    *(_DWORD *)v146 = v181[0];
    *(_DWORD *)&v149[3] = *(_DWORD *)((char *)v180 + 3);
    *(_DWORD *)v149 = v180[0];
    *(_QWORD *)&v156[15] = *(_QWORD *)((char *)v179 + 15);
    *(_DWORD *)&v159[3] = *(_DWORD *)((char *)v177 + 3);
    *(_DWORD *)v159 = v177[0];
    *(_DWORD *)&v162[3] = *(_DWORD *)((char *)v176 + 3);
    *(_DWORD *)v162 = v176[0];
    v49 = *v47;
    v48 = *v47;
    v112 = v47 + 1;
    v122 = v190;
    v123 = v191;
    v124 = v192;
    v120 = v188;
    v121 = v189;
    v126 = v110;
    v127 = v109;
    v128 = v113;
    v130 = v117;
    v131 = v29;
    v133 = v115;
    v134 = v100;
    v136 = v99;
    v137 = v98;
    v139 = v183;
    *(_OWORD *)v140 = *(_OWORD *)v184;
    v138 = v182;
    v141 = v107;
    v142 = v106;
    v143 = v105;
    v144 = v97;
    v145 = v104;
    v147 = v103;
    v148 = v102;
    v150 = v96;
    v151 = v95;
    v152 = v94;
    v153 = v93;
    v154 = v92;
    v155 = v178;
    *(_OWORD *)v156 = v179[0];
    v157 = v114;
    v158 = v101;
    v160 = v108;
    v161 = v111;
    v163 = v91;
    v164 = v90;
    v119 = v49;
    BookHistory.affinityInfosExcludingDecline(for:with:)((uint64_t)&v119);
    v51 = v50;
    if ((v98 & 1) == 0)
      goto LABEL_17;
    v125 = v193;
    *(_DWORD *)&v129[3] = *(_DWORD *)((char *)v187 + 3);
    *(_DWORD *)v129 = v187[0];
    *(_DWORD *)v132 = v186[0];
    *(_DWORD *)&v132[3] = *(_DWORD *)((char *)v186 + 3);
    *(_DWORD *)v135 = v185[0];
    *(_DWORD *)&v135[3] = *(_DWORD *)((char *)v185 + 3);
    *(_QWORD *)&v140[15] = *(_QWORD *)&v184[15];
    *(_DWORD *)&v146[3] = *(_DWORD *)((char *)v181 + 3);
    *(_DWORD *)v146 = v181[0];
    *(_DWORD *)&v149[3] = *(_DWORD *)((char *)v180 + 3);
    *(_DWORD *)v149 = v180[0];
    *(_QWORD *)&v156[15] = *(_QWORD *)((char *)v179 + 15);
    *(_DWORD *)&v159[3] = *(_DWORD *)((char *)v177 + 3);
    *(_DWORD *)v159 = v177[0];
    *(_DWORD *)&v162[3] = *(_DWORD *)((char *)v176 + 3);
    *(_DWORD *)v162 = v176[0];
    v122 = v190;
    v123 = v191;
    v124 = v192;
    v120 = v188;
    v121 = v189;
    v126 = v110;
    v127 = v109;
    v128 = v113;
    v130 = v117;
    v131 = v89;
    v133 = v115;
    v134 = v100;
    v136 = v99;
    v137 = v98;
    v139 = v183;
    *(_OWORD *)v140 = *(_OWORD *)v184;
    v138 = v182;
    v141 = v107;
    v142 = v106;
    v143 = v105;
    v144 = v97;
    v145 = v104;
    v147 = v103;
    v148 = v102;
    v150 = v96;
    v151 = v95;
    v152 = v94;
    v153 = v93;
    v154 = v92;
    v155 = v178;
    *(_OWORD *)v156 = v179[0];
    v157 = v114;
    v158 = v101;
    v160 = v108;
    v161 = v111;
    v163 = v91;
    v164 = v90;
    if (sub_C1614() & 1 | (v92 != 255) | v83 & 1)
      goto LABEL_29;
    if (!(v101 & 1 | (v114 < 1)))
    {
      if (!v85)
      {
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
        return;
      }
      if (!(v114 % v85))
      {
        v59 = round(pow(v9, (double)(v114 / v85 - 1)) * v82);
        if ((~*(_QWORD *)&v59 & 0x7FF0000000000000) == 0)
          goto LABEL_80;
        if (v59 <= -9.22337204e18)
          goto LABEL_81;
        if (v59 >= 9.22337204e18)
          goto LABEL_82;
        v60 = (uint64_t)v59;
        if (v88 < (uint64_t)v59)
          v60 = v88;
        if ((v111 & 1) != 0)
        {
          if (v60 > 0)
            goto LABEL_17;
        }
        else if (v108 < v60)
        {
          goto LABEL_17;
        }
      }
    }
    if (!(v90 & 1 | (v91 < 1)))
    {
      if (!v84)
        goto LABEL_79;
      if (!(v91 % v84))
      {
        v61 = round(pow(v9, (double)(v91 / v84 - 1)) * v82);
        if ((~*(_QWORD *)&v61 & 0x7FF0000000000000) == 0)
          goto LABEL_83;
        if (v61 <= -9.22337204e18)
          goto LABEL_84;
        if (v61 >= 9.22337204e18)
          goto LABEL_85;
        v62 = (uint64_t)v61;
        if (v88 < (uint64_t)v61)
          v62 = v88;
        if ((v111 & 1) != 0)
        {
          if (v62 < 1)
            goto LABEL_29;
        }
        else if (v108 >= v62)
        {
          goto LABEL_29;
        }
LABEL_17:
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          v51 = sub_310C8(0, v51[2] + 1, 1, v51);
        v53 = v51[2];
        v52 = v51[3];
        if (v53 >= v52 >> 1)
          v51 = sub_310C8((_QWORD *)(v52 > 1), v53 + 1, 1, v51);
        v51[2] = v53 + 1;
        v54 = &v51[7 * v53];
        v54[4] = 1702195828;
        v54[5] = 0xE400000000000000;
        v54[6] = v6;
        v54[7] = 0x7FEFFFFFFFFFFFFFLL;
        v54[8] = v6;
        v54[9] = 0;
        *((_BYTE *)v54 + 80) = 0;
      }
    }
LABEL_29:
    if ((swift_isUniquelyReferenced_nonNull_native(v118) & 1) == 0)
      v118 = sub_30FBC(0, v118[2] + 1, 1, v118);
    v56 = v118[2];
    v55 = v118[3];
    v57 = v56 + 1;
    if (v56 >= v55 >> 1)
      v118 = sub_30FBC((_QWORD *)(v55 > 1), v56 + 1, 1, v118);
    v118[2] = v57;
    v58 = &v118[2 * v56];
    *((_BYTE *)v58 + 32) = v48;
    v58[5] = v51;
    --v44;
    v29 = v89;
    v47 = v112;
  }
  while (v44);
  swift_bridgeObjectRetain(v118);
  v63 = 0;
  v116 = 0;
  v64 = 0;
  v65 = -1.79769313e308;
  do
  {
    v66 = (uint64_t)&v118[2 * v63 + 4];
    v67 = *(_BYTE *)v66;
    v68 = *(_QWORD *)(v66 + 8);
    v69 = *(_QWORD *)(v68 + 16);
    if (v69)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v66 + 8));
      v70 = (double *)(v68 + 80);
      v71 = _swiftEmptyArrayStorage;
      do
      {
        if ((*(_BYTE *)v70 & 1) == 0)
        {
          v72 = *(v70 - 2);
          v73 = exp2(-*(v70 - 1) / *(v70 - 3));
          if ((swift_isUniquelyReferenced_nonNull_native(v71) & 1) == 0)
            v71 = sub_2FDB4(0, v71[2] + 1, 1, v71);
          v75 = v71[2];
          v74 = v71[3];
          if (v75 >= v74 >> 1)
            v71 = sub_2FDB4((_QWORD *)(v74 > 1), v75 + 1, 1, v71);
          v71[2] = v75 + 1;
          *(double *)&v71[v75 + 4] = v72 * v73;
        }
        v70 += 7;
        --v69;
      }
      while (v69);
      swift_bridgeObjectRelease();
      v76 = v71[2];
      if (!v76)
      {
LABEL_72:
        swift_bridgeObjectRelease();
        v78 = 0.0;
        if (v65 < 0.0)
          goto LABEL_55;
        goto LABEL_56;
      }
    }
    else
    {
      v71 = _swiftEmptyArrayStorage;
      v76 = _swiftEmptyArrayStorage[2];
      if (!v76)
        goto LABEL_72;
    }
    v77 = 0;
    v78 = 0.0;
    do
    {
      v79 = *(double *)&v71[v77++ + 4];
      v78 = v78 + v79;
    }
    while (v76 != v77);
    swift_bridgeObjectRelease();
    if (v65 < v78)
    {
LABEL_55:
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRelease();
      v116 = v67;
      v64 = v68;
      v65 = v78;
    }
LABEL_56:
    ++v63;
  }
  while (v63 != v57);
  swift_bridgeObjectRelease_n(v118, 2);
  a2 = v81;
  if (v64)
  {
    *(_QWORD *)v81 = v64;
    *(_QWORD *)(v81 + 8) = v116;
    *(_OWORD *)(v81 + 16) = 0u;
    *(_OWORD *)(v81 + 32) = 0u;
    v80 = 0xC000000000000000;
  }
  else
  {
    *(_OWORD *)(v81 + 16) = 0u;
    *(_OWORD *)(v81 + 32) = 0u;
    *(_OWORD *)v81 = 0u;
    v80 = 0x1FFFFFFFELL;
  }
  *(_QWORD *)(v81 + 64) = 0;
  *(_QWORD *)(v81 + 48) = v80;
LABEL_8:
  *(_QWORD *)(a2 + 56) = 0;
}

_QWORD *BookHistory.affinityInfos(for:with:)(char *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  _OWORD v61[4];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  _BYTE v82[27];
  char v83;

  v2 = a2[1];
  v37[0] = *a2;
  v37[1] = v2;
  v3 = a2[3];
  v5 = *a2;
  v4 = a2[1];
  v38 = a2[2];
  v39 = v3;
  *(_OWORD *)((char *)v60 + 11) = *(__int128 *)((char *)a2 + 347);
  v6 = a2[7];
  v7 = a2[8];
  v8 = a2[10];
  v48 = a2[9];
  v49 = v8;
  v9 = a2[8];
  v10 = a2[9];
  v11 = a2[7];
  v46 = v6;
  v47 = v9;
  v12 = a2[12];
  v13 = a2[14];
  v52 = a2[13];
  v53 = v13;
  v14 = a2[10];
  v15 = a2[12];
  v50 = a2[11];
  v51 = v15;
  v16 = a2[16];
  v17 = a2[18];
  v56 = a2[17];
  v57 = v17;
  v18 = a2[14];
  v19 = a2[16];
  v54 = a2[15];
  v55 = v19;
  v20 = a2[20];
  v60[0] = a2[21];
  v21 = a2[20];
  v22 = a2[18];
  v58 = a2[19];
  v59 = v21;
  v61[0] = v5;
  v61[1] = v4;
  v23 = a2[3];
  v61[2] = v38;
  v61[3] = v23;
  *(_OWORD *)&v82[11] = *(__int128 *)((char *)a2 + 347);
  v70 = v10;
  v71 = v14;
  v24 = *a1;
  v68 = v11;
  v69 = v7;
  v25 = *((_QWORD *)a2 + 8);
  v26 = *((_QWORD *)a2 + 9);
  v27 = *((_QWORD *)a2 + 10);
  v28 = *((_QWORD *)a2 + 11);
  v74 = v52;
  v75 = v18;
  v29 = *((_QWORD *)a2 + 12);
  v30 = *((_QWORD *)a2 + 13);
  v83 = v24;
  v62 = v25;
  v63 = v26;
  v64 = v27;
  v65 = v28;
  v66 = v29;
  v67 = v30;
  v72 = v50;
  v73 = v12;
  v31 = a2[21];
  v78 = v56;
  v79 = v22;
  v76 = v54;
  v77 = v16;
  v81 = v20;
  *(_OWORD *)v82 = v31;
  v80 = v58;
  v32 = (_QWORD *)BookHistory.affinityInfosExcludingDecline(for:with:)(&v83, v61);
  v40 = v25;
  v41 = v26;
  v42 = v27;
  v43 = v28;
  v44 = v29;
  v45 = v30;
  if ((sub_11ACE4((uint64_t)v37) & 1) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
      v32 = sub_310C8(0, v32[2] + 1, 1, v32);
    v34 = v32[2];
    v33 = v32[3];
    if (v34 >= v33 >> 1)
      v32 = sub_310C8((_QWORD *)(v33 > 1), v34 + 1, 1, v32);
    v32[2] = v34 + 1;
    v35 = &v32[7 * v34];
    v35[4] = 1702195828;
    v35[5] = 0xE400000000000000;
    v35[6] = v25;
    v35[7] = 0x7FEFFFFFFFFFFFFFLL;
    v35[8] = v25;
    v35[9] = 0;
    *((_BYTE *)v35 + 80) = 0;
  }
  return v32;
}

void BookHistory.affinityInfosExcludingDecline(for:with:)(uint64_t a1)
{
  __asm { BR              X7 }
}

_QWORD *sub_11CA84@<X0>(char a1@<W8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  double v4;
  char v5;
  char v6;
  double v7;
  double v8;
  char v9;
  int v10;
  double v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if ((v9 & 1) != 0)
  {
    if ((v12 & 1) != 0)
    {
      if (v10 != 255)
      {
        v18 = v15;
        v19 = v14;
        if ((v10 & 1) != 0)
        {
          v8 = v36;
          v35 = v16 * (double)v17;
          if (v35 + v11 <= v36)
            v8 = v35 + v11;
        }
        else
        {
          v8 = v11;
        }
        v23 = v13;
        if ((a1 & 1) != 0)
          v21 = v8;
        else
          v21 = v37;
        v22 = 1.0;
        goto LABEL_16;
      }
      return _swiftEmptyArrayStorage;
    }
    v20 = 0;
    v8 = v7;
    v18 = v38;
    v19 = v39;
  }
  else
  {
    v20 = 64;
    v19 = v40;
    v18 = v41;
  }
  if ((a1 & 1) != 0)
    v21 = v8;
  else
    v21 = v37;
  if (v10 == 255 || (v22 = 1.0, v6))
  {
    if ((v5 & 1) != 0 || (v22 = v4, v4 <= 0.0))
    {
      sub_11D5AC(1702195828, 0xE400000000000000, v18, v19, v18, *(uint64_t *)&v8, v20);
      return _swiftEmptyArrayStorage;
    }
  }
  v23 = v13;
LABEL_16:
  v24 = a3 * v22;
  v25 = a3 + a4;
  if (a2 > v22)
    v26 = v24;
  else
    v26 = v25;
  v27 = sub_5EDC(&qword_1F14C8);
  v28 = swift_allocObject(v27, 72, 7);
  *(_OWORD *)(v28 + 16) = xmmword_1875E0;
  *(_QWORD *)(v28 + 56) = &type metadata for Double;
  *(_QWORD *)(v28 + 64) = &protocol witness table for Double;
  *(double *)(v28 + 32) = v26;
  v29 = String.init(format:_:)(1714564645, 0xE400000000000000, v28);
  v31 = v30;
  v32 = sub_5EDC(&qword_1F12B0);
  v33 = swift_allocObject(v32, 144, 7);
  *(_OWORD *)(v33 + 16) = xmmword_18FC00;
  *(_QWORD *)(v33 + 32) = 1702195828;
  *(_QWORD *)(v33 + 40) = 0xE400000000000000;
  *(_QWORD *)(v33 + 48) = v18;
  *(_QWORD *)(v33 + 56) = v19;
  *(_QWORD *)(v33 + 64) = v18;
  *(double *)(v33 + 72) = v8;
  *(_BYTE *)(v33 + 80) = 0;
  *(_QWORD *)(v33 + 88) = v29;
  *(_QWORD *)(v33 + 96) = v31;
  *(_QWORD *)(v33 + 104) = 0x3FF0000000000000;
  *(_QWORD *)(v33 + 112) = v23;
  *(double *)(v33 + 120) = v26;
  *(double *)(v33 + 128) = v21;
  *(_BYTE *)(v33 + 136) = 0;
  return (_QWORD *)v33;
}

uint64_t BookHistory.rawAffinity(with:)(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;

  BookHistory.internalAffinitySource(with:)(a1, (uint64_t)&v2);
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
    __asm { BR              X10 }
  return 0;
}

void sub_11D4DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3;

  if (a1 >= 1)
  {
    if (a2)
    {
      if (a1 % a2)
        return;
      v3 = round(pow(*(long double *)(a3 + 32), (double)(a1 / a2 - 1)) * (double)*(uint64_t *)(a3 + 24));
      if ((~*(_QWORD *)&v3 & 0x7FF0000000000000) != 0)
      {
        if (v3 > -9.22337204e18)
        {
          if (v3 < 9.22337204e18)
            return;
LABEL_12:
          __break(1u);
          return;
        }
LABEL_11:
        __break(1u);
        goto LABEL_12;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_11;
  }
}

uint64_t sub_11D5AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 <= 0xFDu)
    return sub_11D5C0(a1, a2, a3, a4, a5, a6, a7);
  return a1;
}

uint64_t sub_11D5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t result;

  if (a7 <= 0xBFu)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_11D5D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_11D614(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_11D648(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_11D68C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_11D6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_11D714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_11D758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_11D764);
}

uint64_t sub_11D764(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_11D7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_11D7AC);
}

uint64_t sub_11D7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for GenreRecommendationWork(uint64_t a1)
{
  uint64_t result;

  result = qword_1F5E10;
  if (!qword_1F5E10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GenreRecommendationWork);
  return result;
}

uint64_t sub_11D828(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_11D890(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *result;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  sub_3457C(0, v6, 0);
  v7 = v6;
  v34 = v5;
  v36 = v4;
  v38 = a1;
  if (v6)
  {
    v8 = (uint64_t *)(a1 + 32);
    v9 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain(a1);
    result = (_QWORD *)swift_bridgeObjectRetain(a2);
    v11 = v7;
    v12 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v13 = *v8;
      v14 = *v9;
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
      {
        v32 = v12;
        v31 = *v8;
        result = (_QWORD *)sub_3457C(v15 > 1, v16 + 1, 1);
        v13 = v31;
        v12 = v32;
      }
      _swiftEmptyArrayStorage[2] = v16 + 1;
      v17 = &_swiftEmptyArrayStorage[4 * v16];
      v17[4] = v13;
      *((_BYTE *)v17 + 40) = v14 == 1;
      --v5;
      v17[6] = _swiftEmptyArrayStorage;
      v17[7] = 0;
      --v4;
      ++v9;
      ++v8;
      if (!--v11)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    result = (_QWORD *)swift_bridgeObjectRetain(a2);
    v12 = a2;
LABEL_13:
    if (v36 <= v34)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
    v18 = 0;
    if (v7 <= v34)
      v19 = v34;
    else
      v19 = v7;
    v20 = v19 - v7;
    v21 = v36 - v7;
    v22 = v34 - v7;
    v23 = 8 * v7 + 32;
    v24 = v38 + v23;
    v25 = v12 + v23;
    while (v21 != v18)
    {
      if (v22 == v18)
        goto LABEL_24;
      if (v20 == v18)
        goto LABEL_28;
      v26 = *(_QWORD *)(v24 + 8 * v18);
      v27 = *(_QWORD *)(v25 + 8 * v18);
      v29 = _swiftEmptyArrayStorage[2];
      v28 = _swiftEmptyArrayStorage[3];
      if (v29 >= v28 >> 1)
      {
        v33 = v12;
        v35 = v22;
        v37 = v20;
        result = (_QWORD *)sub_3457C(v28 > 1, v29 + 1, 1);
        v22 = v35;
        v20 = v37;
        v12 = v33;
      }
      _swiftEmptyArrayStorage[2] = v29 + 1;
      v30 = &_swiftEmptyArrayStorage[4 * v29];
      v30[4] = v26;
      *((_BYTE *)v30 + 40) = v27 == 1;
      v30[6] = _swiftEmptyArrayStorage;
      v30[7] = 0;
      if (v21 == ++v18)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_11DAF0(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  int64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *result;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;

  v33 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a2 + 16) >= v33)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  sub_34434(0, v4, 0);
  v5 = v4;
  v31 = a2;
  v32 = a1;
  if (v4)
  {
    v6 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    v7 = (_QWORD *)(a1 + 56);
    v8 = v5;
    while (1)
    {
      v9 = *(v7 - 3);
      v10 = *((_BYTE *)v7 - 16);
      v11 = *(v7 - 1);
      v12 = *v7;
      v13 = v6 + 1;
      v14 = *v6;
      v35 = v13;
      swift_bridgeObjectRetain(v11);
      result = (_QWORD *)swift_bridgeObjectRetain(v12);
      if (!v11)
        break;
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      v18 = v17 + 1;
      if (v17 >= v16 >> 1)
      {
        result = (_QWORD *)sub_34434(v16 > 1, v17 + 1, 1);
        v18 = v17 + 1;
      }
      _swiftEmptyArrayStorage[2] = v18;
      v19 = &_swiftEmptyArrayStorage[5 * v17];
      v19[4] = v9;
      v7 += 4;
      *((_BYTE *)v19 + 40) = v10;
      v19[6] = v11;
      v19[7] = v12;
      v19[8] = v14;
      --v8;
      v6 = v35;
      if (!v8)
        goto LABEL_12;
    }
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    result = (_QWORD *)swift_bridgeObjectRetain(a2);
LABEL_12:
    if (v33 <= v30)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
    v20 = v30 - v5;
    v21 = v33 - v5;
    v22 = (uint64_t *)(v31 + 8 * v5 + 32);
    v23 = v32 + 32 * v5 + 32;
    while (v21)
    {
      if (v20)
      {
        v36 = *(_QWORD *)v23;
        v34 = *(_BYTE *)(v23 + 8);
        v24 = *(_QWORD *)(v23 + 16);
        v25 = *(_QWORD *)(v23 + 24);
        v26 = *v22;
        v28 = _swiftEmptyArrayStorage[2];
        v27 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain(v24);
        result = (_QWORD *)swift_bridgeObjectRetain(v25);
        if (v28 >= v27 >> 1)
          result = (_QWORD *)sub_34434(v27 > 1, v28 + 1, 1);
        _swiftEmptyArrayStorage[2] = v28 + 1;
        v29 = &_swiftEmptyArrayStorage[5 * v28];
        v29[4] = v36;
        *((_BYTE *)v29 + 40) = v34;
        v29[6] = v24;
        v29[7] = v25;
        v29[8] = v26;
        --v20;
        ++v22;
        v23 += 32;
        if (--v21)
          continue;
      }
      goto LABEL_19;
    }
    __break(1u);
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_11DD40@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = a1[30];
  if (v2)
  {
    v29 = a1[29];
    v26 = a1[33];
    v27 = a1[34];
    v4 = a1[32];
    v28 = a1[31];
    v5 = qword_1F0138;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v2);
    if (v5 != -1)
      swift_once(&qword_1F0138, sub_12F94C);
    v6 = (void *)qword_1F6210;
    v7 = sub_5EDC(&qword_1F14C8);
    v8 = swift_allocObject(v7, 192, 7);
    *(_OWORD *)(v8 + 16) = xmmword_18CB60;
    v9 = type metadata accessor for UUID(0);
    v10 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v11 = v6;
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
    v14 = v13;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    v15 = sub_4AAD8();
    *(_QWORD *)(v8 + 32) = v12;
    *(_QWORD *)(v8 + 40) = v14;
    *(_QWORD *)(v8 + 96) = &type metadata for String;
    *(_QWORD *)(v8 + 104) = v15;
    *(_QWORD *)(v8 + 64) = v15;
    *(_QWORD *)(v8 + 72) = v29;
    *(_QWORD *)(v8 + 80) = v2;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v2);
    v16._countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    *(_QWORD *)(v8 + 136) = &type metadata for String;
    *(_QWORD *)(v8 + 144) = v15;
    *(_QWORD *)(v8 + 112) = v28;
    *(_QWORD *)(v8 + 120) = v4;
    *(_QWORD *)(v8 + 176) = &type metadata for String;
    *(_QWORD *)(v8 + 184) = v15;
    *(_QWORD *)(v8 + 152) = v26;
    *(_QWORD *)(v8 + 160) = v27;
    v17 = swift_bridgeObjectRetain(v27);
    v18 = static os_log_type_t.default.getter(v17);
    os_log(_:dso:log:type:_:)("Running on graph with request ID %{public}@ for output %{public}@ mediaType %{public}@ score %{public}@", 103, 2, &dword_0, v11, v18, v8);

    swift_bridgeObjectRelease();
    type metadata accessor for Features(0);
    v19 = static Features.empty.getter();
    v20 = sub_5EDC(&qword_1F1078);
    v21 = swift_allocObject(v20, 80, 7);
    *(_OWORD *)(v21 + 16) = xmmword_18CBA0;
    *(_QWORD *)(v21 + 32) = v29;
    *(_QWORD *)(v21 + 40) = v2;
    *(_QWORD *)(v21 + 48) = v28;
    *(_QWORD *)(v21 + 56) = v4;
    *(_QWORD *)(v21 + 64) = v26;
    *(_QWORD *)(v21 + 72) = v27;
    v22 = type metadata accessor for Request(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v2);
    result = Request.init(features:outputs:)(v19, v21);
    *a2 = result;
    a2[1] = v29;
    a2[2] = v2;
    a2[3] = v28;
    a2[4] = v4;
    a2[5] = v26;
    a2[6] = v27;
  }
  else
  {
    v24 = sub_11E3C8();
    v25 = swift_allocError(&type metadata for GenreRecommendationWork.Errors, v24, 0, 0);
    return swift_willThrow(v25);
  }
  return result;
}

_QWORD *sub_11DFD8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = sub_178EA8(a1[1], a1[2]);
  if (!v2)
  {
    if (qword_1F0138 != -1)
      swift_once(&qword_1F0138, sub_12F94C);
    v11 = (id)qword_1F6210;
    v12 = static os_log_type_t.debug.getter();
    v10 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Unable to extract genres from output", 36, 2, &dword_0, v11, v12, _swiftEmptyArrayStorage);
    goto LABEL_19;
  }
  v3 = v2;
  v4 = sub_178EA8(a1[3], a1[4]);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    if (qword_1F0138 != -1)
      swift_once(&qword_1F0138, sub_12F94C);
    v11 = (id)qword_1F6210;
    v13 = static os_log_type_t.debug.getter();
    v10 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Unable to extract genre media types from output", 47, 2, &dword_0, v11, v13, _swiftEmptyArrayStorage);
    goto LABEL_19;
  }
  v5 = v4;
  v6 = sub_178C18(a1[5], a1[6]);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1F0138 != -1)
      swift_once(&qword_1F0138, sub_12F94C);
    v11 = (id)qword_1F6210;
    v15 = static os_log_type_t.debug.getter();
    v10 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Unable to extract genre scores from output", 42, 2, &dword_0, v11, v15, _swiftEmptyArrayStorage);
    goto LABEL_19;
  }
  v7 = (uint64_t)v6;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8 != *(_QWORD *)(v3 + 16) || v6[2] != v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1F0138 != -1)
      swift_once(&qword_1F0138, sub_12F94C);
    v11 = (id)qword_1F6210;
    v14 = static os_log_type_t.debug.getter();
    v10 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Mismatch on genre count and scores", 34, 2, &dword_0, v11, v14, _swiftEmptyArrayStorage);
LABEL_19:

    return v10;
  }
  v9 = sub_11D890(v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = sub_11DAF0((uint64_t)v9, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_11E288()
{
  return 0xD000000000000014;
}

double sub_11E2A4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_11DD40(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

_QWORD *sub_11E2F0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_11DFD8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_11E318(uint64_t a1)
{
  uint64_t result;

  result = sub_41754((unint64_t *)&qword_1F3C28, type metadata accessor for GenreRecommendationWork, (uint64_t)&unk_19B28C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_11E354()
{
  return sub_41754(&qword_1F5E48, type metadata accessor for GenreRecommendationWork, (uint64_t)&unk_19B238);
}

unint64_t sub_11E384()
{
  unint64_t result;

  result = qword_1F5E50;
  if (!qword_1F5E50)
  {
    result = swift_getWitnessTable(&unk_19B30C, &type metadata for GenreRecommendationWork.Context);
    atomic_store(result, (unint64_t *)&qword_1F5E50);
  }
  return result;
}

unint64_t sub_11E3C8()
{
  unint64_t result;

  result = qword_1F5E58;
  if (!qword_1F5E58)
  {
    result = swift_getWitnessTable(&unk_19B3AC, &type metadata for GenreRecommendationWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F5E58);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GenreRecommendationWork.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_11E44C + 4 * byte_19B210[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_11E46C + 4 * byte_19B215[v4]))();
}

_BYTE *sub_11E44C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_11E46C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_11E474(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_11E47C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_11E484(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_11E48C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GenreRecommendationWork.Errors()
{
  return &type metadata for GenreRecommendationWork.Errors;
}

uint64_t destroy for GenreRecommendationWork.Context(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t *initializeWithCopy for GenreRecommendationWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v8 = a2[4];
  v7 = a2[5];
  a1[4] = v8;
  a1[5] = v7;
  v9 = a2[6];
  a1[6] = v9;
  swift_retain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t *assignWithCopy for GenreRecommendationWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t *assignWithTake for GenreRecommendationWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  v9 = a2[6];
  v10 = a1[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenreRecommendationWork.Context(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenreRecommendationWork.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenreRecommendationWork.Context()
{
  return &type metadata for GenreRecommendationWork.Context;
}

unint64_t sub_11E6F4()
{
  unint64_t result;

  result = qword_1F5E60;
  if (!qword_1F5E60)
  {
    result = swift_getWitnessTable(&unk_19B384, &type metadata for GenreRecommendationWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F5E60);
  }
  return result;
}

_QWORD *sub_11E738(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v38 = a2;
  v3 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  v4 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v40 = _swiftEmptyArrayStorage;
    v9 = sub_3436C(0, v7, 0);
    v37 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v10 = a1 + v37;
    v11 = *(_QWORD *)(v4 + 72);
    do
    {
      v12 = *(_QWORD *)(v10 + v3[5]);
      __chkstk_darwin(v9);
      v13 = v38;
      *(&v36 - 2) = v10;
      *(&v36 - 1) = v13;
      swift_bridgeObjectRetain(v12);
      v14 = sub_11F190((void (*)(_QWORD *__return_ptr, _QWORD))sub_12AA28, (uint64_t)(&v36 - 4), v12);
      swift_bridgeObjectRelease();
      v39 = v14;
      v15 = sub_5EDC(&qword_1F2870);
      v16 = sub_3EDBC(&qword_1F46D8, &qword_1F2870, (uint64_t)&protocol conformance descriptor for [A]);
      v17 = Sequence.unique<A>(by:)(sub_468D4, 0, v15, &type metadata for UInt64, v16, &protocol witness table for UInt64);
      swift_bridgeObjectRelease();
      v18 = sub_3D52C(v17);
      swift_bridgeObjectRelease();
      v19 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v6, v10, v19);
      v20 = (uint64_t *)(v10 + v3[6]);
      v22 = *v20;
      v21 = v20[1];
      v23 = (uint64_t *)(v10 + v3[7]);
      v24 = *(_BYTE *)(v10 + v3[8]);
      v25 = *(_BYTE *)(v10 + v3[9]);
      v26 = *(_QWORD *)(v10 + v3[10]);
      v27 = *v23;
      v28 = v23[1];
      LOBYTE(v23) = *(_BYTE *)(v10 + v3[11]);
      v29 = *(_QWORD *)(v10 + v3[13]);
      v30 = *(_QWORD *)(v10 + v3[14]);
      *(_QWORD *)&v6[v3[5]] = v18;
      v31 = &v6[v3[6]];
      *(_QWORD *)v31 = v22;
      *((_QWORD *)v31 + 1) = v21;
      v32 = &v6[v3[7]];
      *(_QWORD *)v32 = v27;
      *((_QWORD *)v32 + 1) = v28;
      v6[v3[8]] = v24;
      v6[v3[9]] = v25;
      *(_QWORD *)&v6[v3[10]] = v26;
      v6[v3[11]] = (char)v23;
      *(_QWORD *)&v6[v3[12]] = &_swiftEmptySetSingleton;
      *(_QWORD *)&v6[v3[13]] = v29;
      *(_QWORD *)&v6[v3[14]] = v30;
      v8 = v40;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v28);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_3436C(0, v8[2] + 1, 1);
        v8 = v40;
      }
      v34 = v8[2];
      v33 = v8[3];
      if (v34 >= v33 >> 1)
      {
        sub_3436C(v33 > 1, v34 + 1, 1);
        v8 = v40;
      }
      v10 += v11;
      v8[2] = v34 + 1;
      v9 = sub_70F74((uint64_t)v6, (uint64_t)v8 + v37 + v34 * v11);
      --v7;
    }
    while (v7);
  }
  return v8;
}

_QWORD *sub_11EA34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v5;
  _QWORD *result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    sub_34598(0, v5, 0);
    result = (_QWORD *)sub_DF71C(a1);
    v9 = (uint64_t)result;
    v10 = 0;
    v11 = a1 + 64;
    v25 = v5;
    v26 = a2;
    v27 = v8;
    v28 = a1 + 64;
    while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(a1 + 32))
    {
      v14 = (unint64_t)v9 >> 6;
      if ((*(_QWORD *)(v11 + 8 * ((unint64_t)v9 >> 6)) & (1 << v9)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(a1 + 36) != v8)
        goto LABEL_24;
      v30 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v9);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(a2);
      v16 = sub_11EC98(v15, a2);
      v29 = v3;
      result = (_QWORD *)swift_bridgeObjectRelease();
      v18 = _swiftEmptyArrayStorage[2];
      v17 = _swiftEmptyArrayStorage[3];
      if (v18 >= v17 >> 1)
        result = (_QWORD *)sub_34598(v17 > 1, v18 + 1, 1);
      _swiftEmptyArrayStorage[2] = v18 + 1;
      v19 = &_swiftEmptyArrayStorage[2 * v18];
      *((_BYTE *)v19 + 32) = v30;
      v19[5] = v16;
      v12 = 1 << *(_BYTE *)(a1 + 32);
      if (v9 >= v12)
        goto LABEL_25;
      v11 = a1 + 64;
      v20 = *(_QWORD *)(v28 + 8 * v14);
      if ((v20 & (1 << v9)) == 0)
        goto LABEL_26;
      v8 = v27;
      if (*(_DWORD *)(a1 + 36) != v27)
        goto LABEL_27;
      v21 = v20 & (-2 << (v9 & 0x3F));
      if (v21)
      {
        v12 = __clz(__rbit64(v21)) | v9 & 0xFFFFFFFFFFFFFFC0;
        v3 = v29;
        v13 = v25;
        a2 = v26;
      }
      else
      {
        v22 = v14 + 1;
        v23 = (unint64_t)(v12 + 63) >> 6;
        v3 = v29;
        v13 = v25;
        a2 = v26;
        if (v14 + 1 < v23)
        {
          v24 = *(_QWORD *)(v28 + 8 * v22);
          if (v24)
          {
LABEL_20:
            v12 = __clz(__rbit64(v24)) + (v22 << 6);
          }
          else
          {
            while (v23 - 2 != v14)
            {
              v24 = *(_QWORD *)(a1 + 80 + 8 * v14++);
              if (v24)
              {
                v22 = v14 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v10;
      v9 = v12;
      if (v10 == v13)
        goto LABEL_21;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_11EC98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = sub_129958(a1, a2);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_11ECE4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t (*v18)(uint64_t *);
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;

  v4 = a3;
  v18 = (uint64_t (*)(uint64_t *))result;
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
    v5 = 0;
    v6 = (_QWORD *)(a3 + 48);
    v7 = _swiftEmptyArrayStorage;
    while (v5 < *(_QWORD *)(v4 + 16))
    {
      v8 = *(v6 - 2);
      v9 = *((_DWORD *)v6 - 2);
      v10 = *((_BYTE *)v6 - 4);
      v11 = *v6;
      v19 = v8;
      v20 = v9;
      v21 = v10;
      v22 = v11;
      swift_bridgeObjectRetain(v11);
      v12 = v18(&v19);
      if (v3)
      {
        swift_release(v7);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)v7;
      }
      if ((v12 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v7);
        v23 = v7;
        if ((result & 1) == 0)
        {
          result = sub_344E0(0, v7[2] + 1, 1);
          v7 = v23;
        }
        v14 = v7[2];
        v13 = v7[3];
        v3 = 0;
        if (v14 >= v13 >> 1)
        {
          result = sub_344E0(v13 > 1, v14 + 1, 1);
          v3 = 0;
          v7 = v23;
        }
        v7[2] = v14 + 1;
        v15 = &v7[3 * v14];
        v15[4] = v8;
        *((_DWORD *)v15 + 10) = v9;
        *((_BYTE *)v15 + 44) = v10;
        v15[6] = v11;
        v4 = a3;
      }
      else
      {
        result = swift_bridgeObjectRelease();
        v3 = 0;
      }
      ++v5;
      v6 += 3;
      if (v17 == v5)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v7 = _swiftEmptyArrayStorage;
LABEL_14:
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_11EE94(void (*a1)(uint64_t *__return_ptr, _BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  int64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  const void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  int64_t v28;
  char v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[552];
  _QWORD __dst[70];

  v4 = v3;
  v27 = a3 + 56;
  v5 = 1 << *(_BYTE *)(a3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a3 + 56);
  v28 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v9 = 0;
  v10 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v7)
    {
      v11 = v10;
      v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v9 >= v28)
      goto LABEL_31;
    v15 = *(_QWORD *)(v27 + 8 * v9);
    if (!v15)
      break;
LABEL_18:
    v11 = v10;
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_19:
    v17 = (const void *)(*(_QWORD *)(a3 + 48) + 552 * v13);
    memcpy(__dst, v17, 0x221uLL);
    memcpy(v44, v17, 0x221uLL);
    sub_6100(__dst);
    a1(&v35, v44);
    if (v4)
    {
      sub_6228(__dst);
      v10 = v11;
      swift_bridgeObjectRelease();
LABEL_31:
      swift_release(a3);
      return (uint64_t)v10;
    }
    result = (uint64_t)sub_6228(__dst);
    v18 = v41;
    v10 = v11;
    if (v41)
    {
      v20 = v35;
      v19 = v36;
      v21 = v37;
      v31 = v38;
      v32 = v39;
      v33 = v40;
      v34 = v42;
      v22 = v43;
      result = swift_isUniquelyReferenced_nonNull_native(v11);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_2FEC0(0, v11[2] + 1, 1, v11);
        v10 = (_QWORD *)result;
      }
      v24 = v10[2];
      v23 = v10[3];
      v25 = v10;
      if (v24 >= v23 >> 1)
      {
        result = (uint64_t)sub_2FEC0((_QWORD *)(v23 > 1), v24 + 1, 1, v10);
        v25 = (_QWORD *)result;
      }
      v25[2] = v24 + 1;
      v10 = v25;
      v26 = &v25[10 * v24];
      v26[4] = v20;
      *((_BYTE *)v26 + 40) = v19 & 1;
      v26[6] = v21;
      *((_BYTE *)v26 + 56) = v31 & 1;
      v26[8] = v32;
      *((_BYTE *)v26 + 72) = v33;
      v26[10] = v18;
      *(_OWORD *)(v26 + 11) = v34;
      v26[13] = v22;
      v4 = 0;
    }
  }
  v16 = v9 + 1;
  if (v9 + 1 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v9 + 2;
  if (v9 + 2 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v9 + 3;
  if (v9 + 3 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v9 + 4;
  if (v9 + 4 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
  {
LABEL_17:
    v9 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v9 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v9 >= v28)
      goto LABEL_31;
    v15 = *(_QWORD *)(v27 + 8 * v9);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_11F190(void (*a1)(_QWORD *__return_ptr, _QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  const void *v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(_QWORD *__return_ptr, _QWORD);
  uint64_t v21;
  _BYTE __src[552];
  _BYTE v23[552];
  _BYTE v24[552];
  _QWORD v25[69];
  _BYTE v26[552];
  _QWORD __dst[70];
  int64_t v28;

  v21 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v28 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  v20 = a1;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v28)
      goto LABEL_31;
    v15 = *(_QWORD *)(v21 + 8 * v10);
    if (!v15)
      break;
LABEL_18:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_19:
    v17 = (const void *)(*(_QWORD *)(a3 + 48) + 552 * v13);
    memcpy(__dst, v17, 0x221uLL);
    memcpy(v26, v17, 0x221uLL);
    sub_6100(__dst);
    a1(v25, v26);
    if (v3)
    {
      sub_6228(__dst);
      swift_bridgeObjectRelease();
LABEL_31:
      swift_release(a3);
      return (uint64_t)v11;
    }
    sub_6228(__dst);
    sub_41300((uint64_t)v25, (uint64_t)v23, &qword_1F5C28);
    sub_41300((uint64_t)v23, (uint64_t)v24, &qword_1F5C28);
    result = sub_117FB4((uint64_t)v24);
    if ((_DWORD)result != 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = sub_2FA78(0, v11[2] + 1, 1, v11);
      v19 = v11[2];
      v18 = v11[3];
      if (v19 >= v18 >> 1)
        v11 = sub_2FA78((_QWORD *)(v18 > 1), v19 + 1, 1, v11);
      sub_41300((uint64_t)v23, (uint64_t)__src, &qword_1F5C28);
      v11[2] = v19 + 1;
      result = (uint64_t)memcpy(&v11[69 * v19 + 4], __src, 0x221uLL);
      a1 = v20;
    }
  }
  v16 = v10 + 1;
  if (v10 + 1 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v21 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v10 + 2;
  if (v10 + 2 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v21 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v10 + 3;
  if (v10 + 3 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v21 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v10 + 4;
  if (v10 + 4 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v21 + 8 * v16);
  if (v15)
  {
LABEL_17:
    v10 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v28)
      goto LABEL_31;
    v15 = *(_QWORD *)(v21 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_33:
  __break(1u);
  return result;
}

_QWORD *sub_11F45C(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  char *v4;
  int64_t i;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _BYTE __src[545];
  _QWORD __dst[70];
  _QWORD *v13;

  v2 = *(_QWORD *)(a1 + 16);
  v13 = _swiftEmptyArrayStorage;
  sub_344C4(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v4 = (char *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    for (i = v2 - 1; ; --i)
    {
      memcpy(__dst, v4, 0x221uLL);
      sub_6100(__dst);
      v13 = v3;
      v7 = v3[2];
      v6 = v3[3];
      if (v7 >= v6 >> 1)
      {
        sub_344C4(v6 > 1, v7 + 1, 1);
        v3 = v13;
      }
      v8 = __dst[0];
      memcpy(__src, __dst, sizeof(__src));
      v3[2] = v7 + 1;
      v9 = &v3[70 * v7];
      v9[4] = v8;
      memcpy(v9 + 5, __src, 0x221uLL);
      if (!i)
        break;
      v4 += 552;
    }
  }
  else
  {
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t ScoredBook.copyWith(seriesID:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = *(_BYTE *)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 32);
  v7 = *(_QWORD *)(v3 + 48);
  v6 = *(_QWORD *)(v3 + 56);
  v8 = *(_QWORD *)(v3 + 64);
  v9 = *(_QWORD *)(v3 + 72);
  *(_QWORD *)a3 = *(_QWORD *)v3;
  *(_BYTE *)(a3 + 8) = v4;
  *(_QWORD *)(a3 + 16) = a1;
  *(_BYTE *)(a3 + 24) = a2 & 1;
  *(_QWORD *)(a3 + 32) = v5;
  v10 = *(_BYTE *)(v3 + 40);
  *(_BYTE *)(a3 + 40) = v10;
  *(_QWORD *)(a3 + 48) = v7;
  *(_QWORD *)(a3 + 56) = v6;
  *(_QWORD *)(a3 + 64) = v8;
  *(_QWORD *)(a3 + 72) = v9;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v7);
  return sub_40554(v5, v10);
}

uint64_t sub_11F604(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD v40[2];
  uint64_t v41;
  char *v42;
  void (*v43)(unint64_t, char *, uint64_t);
  char *v44;
  _QWORD *v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v2 = sub_5EDC(&qword_1F5F90);
  __chkstk_darwin(v2);
  v4 = (char *)v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F5F78);
  v48 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v44 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v42 = (char *)v40 - v8;
  v9 = *(_QWORD *)(a1 + 64);
  v47 = a1 + 64;
  v45 = _swiftEmptyDictionarySingleton;
  v50 = _swiftEmptyDictionarySingleton;
  v10 = -1 << *(_BYTE *)(a1 + 32);
  if (-v10 < 64)
    v11 = ~(-1 << -(char)v10);
  else
    v11 = -1;
  v12 = v11 & v9;
  v40[1] = -1 << *(_BYTE *)(a1 + 32);
  v46 = (unint64_t)(63 - v10) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v14 = 0;
  v41 = v5;
  if (!v12)
    goto LABEL_8;
LABEL_5:
  v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  v16 = v15 | (v14 << 6);
  while (1)
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v16);
    v49 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v16);
    swift_bridgeObjectRetain_n(v49, 2);
    v18 = sub_5EDC(&qword_1F5F98);
    v19 = sub_3EDBC(&qword_1F5FA0, &qword_1F5F98, (uint64_t)&protocol conformance descriptor for [A]);
    NonEmpty.init(_:)(&v49, v18, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v4, 1, v5) == 1)
    {
      swift_bridgeObjectRelease();
      result = sub_417D8((uint64_t)v4, &qword_1F5F90);
      if (v12)
        goto LABEL_5;
    }
    else
    {
      v24 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      v25 = v42;
      v24(v42, v4, v5);
      v43 = (void (*)(unint64_t, char *, uint64_t))v24;
      v24(v44, v25, v5);
      v26 = v45;
      v27 = v45[2];
      if (v45[3] <= v27)
      {
        sub_15C8E0(v27 + 1, 1);
        v26 = v50;
      }
      v28 = v26;
      result = static Hasher._hash(seed:_:)(v26[5], v17);
      v29 = v28 + 8;
      v45 = v28;
      v30 = -1 << *((_BYTE *)v28 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      v5 = v41;
      if (((-1 << v31) & ~v28[(v31 >> 6) + 8]) == 0)
      {
        v34 = 0;
        v35 = (unint64_t)(63 - v30) >> 6;
        while (++v32 != v35 || (v34 & 1) == 0)
        {
          v36 = v32 == v35;
          if (v32 == v35)
            v32 = 0;
          v34 |= v36;
          v37 = v29[v32];
          if (v37 != -1)
          {
            v33 = __clz(__rbit64(~v37)) + (v32 << 6);
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
      v33 = __clz(__rbit64((-1 << v31) & ~v28[(v31 >> 6) + 8])) | v31 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
      *(_QWORD *)((char *)v29 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
      v38 = v44;
      v39 = v45;
      *(_QWORD *)(v45[6] + 8 * v33) = v17;
      v43(v39[7] + *(_QWORD *)(v48 + 72) * v33, v38, v5);
      ++v39[2];
      result = swift_bridgeObjectRelease();
      if (v12)
        goto LABEL_5;
    }
LABEL_8:
    v20 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v20 >= v46)
      goto LABEL_38;
    v21 = *(_QWORD *)(v47 + 8 * v20);
    v22 = v14 + 1;
    if (!v21)
    {
      v22 = v14 + 2;
      if (v14 + 2 >= v46)
        goto LABEL_38;
      v21 = *(_QWORD *)(v47 + 8 * v22);
      if (!v21)
      {
        v22 = v14 + 3;
        if (v14 + 3 >= v46)
          goto LABEL_38;
        v21 = *(_QWORD *)(v47 + 8 * v22);
        if (!v21)
        {
          v22 = v14 + 4;
          if (v14 + 4 >= v46)
            goto LABEL_38;
          v21 = *(_QWORD *)(v47 + 8 * v22);
          if (!v21)
            break;
        }
      }
    }
LABEL_23:
    v12 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v22 << 6);
    v14 = v22;
  }
  v23 = v14 + 5;
  if (v14 + 5 >= v46)
  {
LABEL_38:
    sub_5FEC(a1);
    return (uint64_t)v45;
  }
  v21 = *(_QWORD *)(v47 + 8 * v23);
  if (v21)
  {
    v22 = v14 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v46)
      goto LABEL_38;
    v21 = *(_QWORD *)(v47 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_11FA6C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  int v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 128);
  v11 = *(unsigned __int8 *)(v0 + 8);
  if ((v1 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
    __asm { BR              X10 }
  v12 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v2._countAndFlagsBits = 58;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  if (v11)
    v3 = 0x6F6F626F69647561;
  else
    v3 = 0x6B6F6F6265;
  if (v11)
    v4 = 0xE90000000000006BLL;
  else
    v4 = 0xE500000000000000;
  v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 58;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 7104878;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 58;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x3E6C696E3CLL;
  v9._object = (void *)0xE500000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_11FD90()
{
  uint64_t result;

  sub_6789C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD000000000000021, 0x80000000001A2B70);
  qword_2245E8 = result;
  return result;
}

uint64_t sub_11FDF4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_2245F0);
  sub_5216C(v0, (uint64_t)qword_2245F0);
  if (qword_1F0110 != -1)
    swift_once(&qword_1F0110, sub_11FD90);
  return Logger.init(_:)((id)qword_2245E8);
}

uint64_t sub_11FE74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[140] = v2;
  v3[139] = a2;
  v3[138] = a1;
  return swift_task_switch(sub_11FE94, 0, 0);
}

uint64_t sub_11FE94()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(const void **)(v0 + 1112);
  v2 = *(_QWORD *)(v0 + 1104);
  v3 = sub_5EDC(&qword_1F1128);
  v4 = type metadata accessor for SeedBasedRecommendationRequest(0);
  *(_QWORD *)(v0 + 1128) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  LODWORD(v5) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 1168) = v5;
  v5 = v5;
  v7 = (v5 + 32) & ~v5;
  v8 = swift_allocObject(v3, v7 + v6, v5 | 7);
  *(_QWORD *)(v0 + 1136) = v8;
  *(_OWORD *)(v8 + 16) = xmmword_1875E0;
  sub_70D7C(v2, v8 + v7);
  memcpy((void *)(v0 + 16), v1, 0x440uLL);
  v9 = (_QWORD *)swift_task_alloc(dword_1F5F3C);
  *(_QWORD *)(v0 + 1144) = v9;
  *v9 = v0;
  v9[1] = sub_11FF98;
  v9[142] = *(_QWORD *)(v0 + 1120);
  v9[141] = v8;
  memcpy(v9 + 2, (const void *)(v0 + 16), 0x440uLL);
  return swift_task_switch(sub_1201B4, 0, 0);
}

uint64_t sub_11FF98(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1144);
  *(_QWORD *)(v3 + 1152) = a1;
  *(_QWORD *)(v3 + 1160) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v5 = sub_12015C;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 1136);
    v7 = *(unsigned __int8 *)(v3 + 1168);
    v8 = *(_QWORD *)(v3 + 1128);
    v9 = v6 + ((v7 + 32) & ~v7);
    swift_setDeallocating(v6);
    swift_arrayDestroy(v9, 1, v8);
    swift_deallocClassInstance(v6, 32, 7);
    v5 = sub_120058;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_120058()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 1152) + 16) && (v1 = sub_39574(*(_QWORD *)(v0 + 1104)), (v2 & 1) != 0))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1152) + 56) + 8 * v1);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 1104);
    swift_bridgeObjectRelease();
    v6 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
    v7 = sub_D4778();
    swift_allocError(v6, v7, 0, 0);
    v9 = v8;
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v5, v10);
    v11 = swift_storeEnumTagMultiPayload(v9, v6, 7);
    swift_willThrow(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_12015C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_120168(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[142] = v2;
  v3[141] = a1;
  memcpy(v3 + 2, a2, 0x440uLL);
  return swift_task_switch(sub_1201B4, 0, 0);
}

uint64_t sub_1201B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD v10[14];

  v1 = v0[142];
  v2 = v0[141];
  v10[0] = _swiftEmptyDictionarySingleton;
  v3 = sub_11E738(v2, (uint64_t)v10);
  v0[143] = v3;
  v4 = v10[0];
  v0[144] = v10[0];
  v5 = sub_5EDC(&qword_1F1180);
  v6 = sub_5EDC(&qword_1F2338);
  v7 = (_QWORD *)swift_task_alloc(48);
  v0[145] = v7;
  v7[2] = v3;
  v7[3] = v4;
  v7[4] = v1;
  v7[5] = v0 + 2;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[146] = v8;
  *v8 = v0;
  v8[1] = sub_1202BC;
  v10[12] = v6;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 139, v5, v6, 0, 0, &unk_1F5F48, v7, v5);
}

uint64_t sub_1202BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1168);
  *(_QWORD *)(*v1 + 1176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_120450;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 1160));
    v4 = sub_120328;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_120328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 1176);
  v2 = *(_QWORD *)(v0 + 1152);
  v3 = *(_QWORD *)(v0 + 1112);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  v5 = sub_128A60(v3, (uint64_t (*)(char *, uint64_t, _QWORD))sub_1245A4, v4);
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    sub_5EDC(&qword_1F1D50);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v6);
  }
  else
  {
    v7 = _swiftEmptyDictionarySingleton;
  }
  v10 = v7;
  v8 = swift_bridgeObjectRetain(v5);
  sub_1245AC(v8, 1, &v10);
  if (v1)
    return swift_unexpectedError(v1, "Swift/Dictionary.swift", 22, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v10);
}

uint64_t sub_120450()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 1160);
  v2 = *(_QWORD *)(v0 + 1152);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1144));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_12049C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6[14] = a5;
  v6[15] = a6;
  v6[12] = a2;
  v6[13] = a3;
  v6[11] = a1;
  v7 = sub_5EDC(&qword_1F1180);
  v6[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[17] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[18] = swift_task_alloc(v9);
  v6[19] = swift_task_alloc(v9);
  v6[20] = swift_task_alloc(v9);
  v10 = sub_5EDC(&qword_1F2340);
  v6[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F2348);
  v6[22] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[23] = v12;
  v6[24] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(type metadata accessor for SeedBasedRecommendationRequest(0) - 8);
  v6[25] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v6[26] = v14;
  v6[27] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F15F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[28] = swift_task_alloc(v15);
  v6[29] = swift_task_alloc(v15);
  return swift_task_switch(sub_1205D0, 0, 0);
}

uint64_t sub_1205D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const void *v48;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 200);
    v4 = *(unsigned __int8 *)(v3 + 80);
    v5 = (v4 + 32) & ~v4;
    v6 = v1 + v5;
    v44 = *(_QWORD *)(v3 + 72);
    v45 = v5;
    v42 = (*(_QWORD *)(v0 + 208) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = v4 | 7;
    v41 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
    v7 = type metadata accessor for TaskPriority(0);
    v8 = *(_QWORD *)(v7 - 8);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    v40 = v7;
    swift_bridgeObjectRetain(v1);
    v9 = &qword_1F15F0;
    while (1)
    {
      v47 = v2;
      v13 = *(_QWORD *)(v0 + 224);
      v14 = *(_QWORD *)(v0 + 232);
      v15 = v9;
      v16 = v8;
      v17 = *(_QWORD *)(v0 + 216);
      v18 = *(_QWORD *)(v0 + 112);
      v48 = *(const void **)(v0 + 120);
      v39(v14, 1, 1, v40);
      v46 = v6;
      sub_70D7C(v6, v17);
      v19 = swift_allocObject(&unk_1E7998, v41 + 1088, v43);
      *(_QWORD *)(v19 + 16) = 0;
      v20 = (uint64_t *)(v19 + 16);
      *(_QWORD *)(v19 + 24) = 0;
      v21 = v17;
      v8 = v16;
      v9 = v15;
      sub_70F74(v21, v19 + v45);
      *(_QWORD *)(v19 + v42) = v18;
      memcpy((void *)(v19 + v41), v48, 0x440uLL);
      sub_418BC(v14, v13, v15);
      LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v13, 1, v40);
      swift_retain(v18);
      v22 = sub_71068((uint64_t)v48);
      v23 = *(_QWORD *)(v0 + 224);
      if ((_DWORD)v13 == 1)
      {
        sub_417D8(*(_QWORD *)(v0 + 224), v15);
        v24 = 0;
        v25 = *v20;
        if (!*v20)
          goto LABEL_8;
      }
      else
      {
        v31 = TaskPriority.rawValue.getter(v22);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v23, v40);
        v24 = v31;
        v25 = *v20;
        if (!*v20)
        {
LABEL_8:
          v28 = 0;
          v30 = 0;
          goto LABEL_9;
        }
      }
      v26 = *(_QWORD *)(v19 + 24);
      ObjectType = swift_getObjectType(v25);
      swift_unknownObjectRetain(v25);
      v28 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v26);
      v30 = v29;
      swift_unknownObjectRelease(v25);
LABEL_9:
      v32 = **(_QWORD **)(v0 + 96);
      v33 = v30 | v28;
      if (v30 | v28)
      {
        v33 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v28;
        *(_QWORD *)(v0 + 40) = v30;
      }
      v10 = *(_QWORD *)(v0 + 232);
      v11 = *(_QWORD *)(v0 + 128);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v33;
      *(_QWORD *)(v0 + 64) = v32;
      v12 = swift_task_create(v24 | 0x3100, v0 + 48, v11, &unk_1F5F60, v19);
      swift_release(v12);
      sub_417D8(v10, v9);
      v6 = v46 + v44;
      v2 = v47 - 1;
      if (v47 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v34 = *(_QWORD *)(v0 + 128);
  v35 = **(_QWORD **)(v0 + 96);
  v36 = sub_5EDC(&qword_1F1348);
  ThrowingTaskGroup.makeAsyncIterator()(v35, v34, v36, &protocol self-conformance witness table for Error);
  v37 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  *(_QWORD *)(v0 + 240) = v37;
  *v37 = v0;
  v37[1] = sub_1208F4;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 168), 0, 0, *(_QWORD *)(v0 + 176), v0 + 72);
}

uint64_t sub_1208F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 240));
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_70790;
  }
  else
  {
    *(_QWORD *)(v2 + 248) = _swiftEmptyDictionarySingleton;
    v3 = sub_12096C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_12096C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 136) + 48))(v1, 1, v2);
  v4 = *(_QWORD *)(v0 + 248);
  if (v3 == 1)
  {
    v6 = *(_QWORD *)(v0 + 224);
    v5 = *(_QWORD *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 216);
    v8 = *(_QWORD *)(v0 + 192);
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v42 = *(_QWORD *)(v0 + 144);
    v11 = *(_QWORD **)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(v8, *(_QWORD *)(v0 + 176));
    *v11 = v4;
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v1);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v14 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 160);
  v43 = *(_QWORD *)(v0 + 144);
  v15 = *(int *)(v2 + 48);
  v16 = *(_QWORD *)(v1 + v15);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v13, v1, v17);
  *(_QWORD *)(v13 + v15) = v16;
  v19 = *(int *)(v2 + 48);
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v20(v14, v13, v17);
  *(_QWORD *)(v14 + v19) = v16;
  v21 = *(int *)(v2 + 48);
  v20(v43, v13, v17);
  *(_QWORD *)(v43 + v21) = v16;
  swift_bridgeObjectRetain(v16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
  *(_QWORD *)(v0 + 80) = v4;
  v24 = sub_39574(v14);
  v25 = *(_QWORD *)(v4 + 16);
  v26 = (v23 & 1) == 0;
  result = v25 + v26;
  if (__OFADD__(v25, v26))
  {
    __break(1u);
  }
  else
  {
    v27 = v23;
    if (*(_QWORD *)(*(_QWORD *)(v0 + 248) + 24) >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_16BD08();
    }
    else
    {
      v28 = *(_QWORD *)(v0 + 152);
      sub_15BA48(result, isUniquelyReferenced_nonNull_native);
      v29 = sub_39574(v28);
      if ((v27 & 1) != (v30 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v17);
      v24 = v29;
    }
    v31 = *(_QWORD **)(v0 + 80);
    *(_QWORD *)(v0 + 256) = v31;
    if ((v27 & 1) != 0)
    {
      v32 = v31[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v32 + 8 * v24) = v16;
LABEL_14:
      v38 = *(_QWORD *)(v0 + 152);
      v37 = *(_QWORD *)(v0 + 160);
      v39 = *(_QWORD *)(v0 + 144);
      swift_bridgeObjectRelease();
      v40 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v40(v38, v17);
      sub_417D8(v37, &qword_1F1180);
      v40(v39, v17);
      v41 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(_QWORD *)(v0 + 264) = v41;
      *v41 = v0;
      v41[1] = sub_120C8C;
      return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 168), 0, 0, *(_QWORD *)(v0 + 176), v0 + 72);
    }
    v33 = *(_QWORD *)(v0 + 152);
    v31[(v24 >> 6) + 8] |= 1 << v24;
    result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v20)(v31[6] + *(_QWORD *)(v18 + 72) * v24, v33, v17);
    *(_QWORD *)(v31[7] + 8 * v24) = v16;
    v34 = v31[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (!v35)
    {
      v31[2] = v36;
      goto LABEL_14;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_120C8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 264));
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_70790;
  }
  else
  {
    *(_QWORD *)(v2 + 248) = *(_QWORD *)(v2 + 256);
    v3 = sub_12096C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_120CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[141] = a6;
  v6[140] = a5;
  v6[139] = a4;
  v6[138] = a1;
  return swift_task_switch(sub_120D20, 0, 0);
}

uint64_t sub_120D20()
{
  _QWORD *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = (const void *)v0[141];
  v2 = v0[139];
  v3 = v0[138];
  v4 = type metadata accessor for UUID(0);
  v0[142] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[143] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
  memcpy(v0 + 2, v1, 0x440uLL);
  v6 = (_QWORD *)swift_task_alloc(dword_1F5F6C);
  v0[144] = v6;
  *v6 = v0;
  v6[1] = sub_70910;
  return sub_120DCC(v0[139], v0 + 2);
}

uint64_t sub_120DCC(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[335] = v2;
  v3[334] = a1;
  v5 = type metadata accessor for Logger(0);
  v3[336] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[337] = v6;
  v3[338] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v3[339] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[340] = v8;
  v3[341] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v3 + 2, a2, 0x440uLL);
  return swift_task_switch(sub_120E78, 0, 0);
}

uint64_t sub_120E78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;

  v2 = v1[341];
  v3 = v1[340];
  v4 = v1[339];
  v5 = UUID.init()(a1);
  v1[342] = UUID.uuidString.getter(v5);
  v1[343] = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  memcpy(v1 + 138, v1 + 2, 0x440uLL);
  v7 = (uint64_t **)swift_task_alloc(dword_1F5F74);
  v1[344] = (uint64_t)v7;
  *v7 = v1;
  v7[1] = (uint64_t *)sub_120F2C;
  return sub_121730((uint64_t)(v1 + 320), v1[334], (uint64_t)(v1 + 138));
}

uint64_t sub_120F2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2752);
  *(_QWORD *)(*(_QWORD *)v1 + 2760) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_1216F0;
  }
  else
  {
    v3 = sub_120F98;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_120F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD **v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_t log;
  NSObject *loga;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71[6];
  uint64_t v72[2];

  v1 = *(_QWORD *)(v0 + 2560);
  v2 = *(_QWORD *)(v0 + 2568);
  v3 = *(_QWORD *)(v0 + 2576);
  v4 = *(_QWORD *)(v0 + 2584);
  v5 = *(_QWORD *)(v0 + 2592);
  v6 = *(_QWORD *)(v0 + 2600);
  v7 = sub_D49E0();
  v8 = sub_D4D30();
  v71[0] = v1;
  v71[1] = v2;
  v71[2] = v3;
  v71[3] = v4;
  v71[4] = v5;
  v71[5] = v6;
  v9 = sub_D47C0();
  log = v8;
  v69 = v7;
  if (!*(_QWORD *)(v1 + 16))
  {
    v12 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
    v13 = sub_D4778();
    swift_allocError(v12, v13, 0, 0);
    v15 = swift_storeEnumTagMultiPayload(v14, v12, 10);
    swift_willThrow(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v65 = (uint64_t)v9;
  v10 = *(_QWORD *)(v0 + 2760);
  v71[0] = *(_QWORD *)(v1 + 32);
  v11 = sub_D4298();
  if (v10)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = *(_QWORD *)(v0 + 2704);
    swift_task_dealloc(*(_QWORD *)(v0 + 2728));
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v18 = v11;
  v19 = *(_QWORD *)(v0 + 2672);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = type metadata accessor for SeedBasedRecommendationRequest(0);
  v21 = *(_BYTE *)(v19 + *(int *)(v20 + 32));
  v22 = *(_QWORD *)(v19 + *(int *)(v20 + 20));
  v23 = v0 + 104;
  memcpy((void *)(v0 + 2192), (const void *)(v0 + 104), 0x16BuLL);
  *(_QWORD *)(v0 + 2632) = _swiftEmptyDictionarySingleton;
  v24 = v18[2];
  if (v24)
  {
    v63 = v21;
    v25 = (_QWORD **)(v0 + 2632);
    sub_605D0(v0 + 104);
    swift_bridgeObjectRetain(v18);
    v26 = v18 + 6;
    do
    {
      v27 = *(v26 - 1);
      v28 = *v26;
      *(_QWORD *)(v0 + 2608) = *(v26 - 2);
      *(_QWORD *)(v0 + 2616) = v27;
      *(_QWORD *)(v0 + 2624) = v28;
      v29 = sub_5EDC(&qword_1F1090);
      v30 = swift_allocObject(v29, 40, 7);
      *(_OWORD *)(v30 + 16) = xmmword_1875E0;
      *(_QWORD *)(v30 + 32) = v28;
      v31 = sub_8A104(v30);
      swift_setDeallocating(v30);
      swift_deallocClassInstance(v30, 32, 7);
      v32 = swift_task_alloc(32);
      *(_QWORD *)(v32 + 16) = v25;
      *(_QWORD *)(v32 + 24) = v0 + 2608;
      swift_bridgeObjectRetain(v27);
      sub_4DDC(sub_12A8D4, v32, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_task_dealloc(v32);
      v26 += 3;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v33 = *v25;
    v34 = (uint64_t)v69;
    v23 = v0 + 104;
    v21 = v63;
  }
  else
  {
    sub_605D0(v0 + 104);
    v33 = _swiftEmptyDictionarySingleton;
    v34 = (uint64_t)v69;
  }
  v35 = sub_11F604((uint64_t)v33);
  swift_bridgeObjectRelease();
  v71[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  sub_605D0(v23);
  swift_bridgeObjectRetain(v35);
  sub_12A390(v22, v35, v0 + 2192, (uint64_t)v71, v21);
  sub_60AF8(v23);
  swift_bridgeObjectRelease_n(v35, 2);
  v36 = v71[0];
  v37 = swift_bridgeObjectRetain(v71[0]);
  v38 = sub_38430(v37);
  swift_bridgeObjectRelease_n(v36, 2);
  sub_60AF8(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v65);
  v39 = sub_128E38((uint64_t)v38, v65);
  swift_bridgeObjectRelease_n(v65, 2);
  swift_release(v38);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(log);
  v40 = v34;
  v41 = sub_128FD4((uint64_t)v39, v34, (uint64_t)log);
  swift_bridgeObjectRelease_n(log, 2);
  swift_bridgeObjectRelease_n(v40, 2);
  swift_bridgeObjectRelease();
  if (qword_1F0118 != -1)
    swift_once(&qword_1F0118, sub_11FDF4);
  v42 = *(_QWORD *)(v0 + 2744);
  v43 = *(_QWORD *)(v0 + 2704);
  v44 = *(_QWORD *)(v0 + 2696);
  v45 = *(_QWORD *)(v0 + 2688);
  v46 = sub_5216C(v45, (uint64_t)qword_2245F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v43, v46, v45);
  swift_bridgeObjectRetain_n(v41, 2);
  v47 = swift_bridgeObjectRetain(v42);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter(v48);
  v50 = os_log_type_enabled(v48, v49);
  v51 = *(_QWORD *)(v0 + 2744);
  if (v50)
  {
    loga = v48;
    v52 = *(_QWORD *)(v0 + 2736);
    v53 = swift_slowAlloc(22, -1);
    v70 = swift_slowAlloc(64, -1);
    v72[0] = v70;
    *(_DWORD *)v53 = 136446466;
    swift_bridgeObjectRetain(v51);
    *(_QWORD *)(v0 + 2656) = sub_9DA98(v52, v51, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2656, v0 + 2664, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease_n(v51, 3);
    *(_WORD *)(v53 + 12) = 2080;
    v71[0] = (uint64_t)v41;
    swift_bridgeObjectRetain(v41);
    sub_46AD0(v71, sub_D0AA4, sub_1268B4);
    v57 = *(_QWORD *)(v0 + 2704);
    v64 = *(_QWORD *)(v0 + 2696);
    v66 = *(_QWORD *)(v0 + 2688);
    v58 = v71[0];
    v59 = sub_A8974(v71[0]);
    v61 = v60;
    swift_release(v58);
    *(_QWORD *)(v0 + 2664) = sub_9DA98(v59, v61, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2664, v0 + 2672, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v41, 2);
    _os_log_impl(&dword_0, loga, v49, "for %{public}s, returning result %s", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy(v70, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v53, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v57, v66);
  }
  else
  {
    v54 = *(_QWORD *)(v0 + 2704);
    v55 = *(_QWORD *)(v0 + 2696);
    v56 = *(_QWORD *)(v0 + 2688);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 2744), 2);
    swift_bridgeObjectRelease_n(v41, 2);

    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
  }
  v62 = *(_QWORD *)(v0 + 2704);
  swift_task_dealloc(*(_QWORD *)(v0 + 2728));
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v41);
}

uint64_t sub_1216F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2704);
  swift_task_dealloc(*(_QWORD *)(v0 + 2728));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_121730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v4 + 2488) = v3;
  *(_QWORD *)(v4 + 2480) = a2;
  *(_QWORD *)(v4 + 2472) = a1;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 2496) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 2504) = v7;
  *(_QWORD *)(v4 + 2512) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SeedBasedRecommendationRequest(0);
  *(_QWORD *)(v4 + 2520) = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 2528) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 2536) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 2544) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 2552) = swift_task_alloc(v9);
  memcpy((void *)(v4 + 1792), (const void *)a3, 0x170uLL);
  *(_QWORD *)(v4 + 2560) = *(_QWORD *)(a3 + 368);
  *(_OWORD *)(v4 + 2352) = *(_OWORD *)(a3 + 376);
  *(_QWORD *)(v4 + 2568) = *(_QWORD *)(a3 + 392);
  memcpy((void *)(v4 + 1104), (const void *)(a3 + 400), 0x2B0uLL);
  return swift_task_switch(sub_121834, 0, 0);
}

uint64_t sub_121834()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Class isa;
  Class v41;
  _QWORD *v42;
  Class *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  os_log_t log;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96[2];

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 2480) + *(int *)(*(_QWORD *)(v0 + 2520) + 20));
  swift_bridgeObjectRetain_n(v1, 2);
  v2 = sub_38040(v1);
  swift_bridgeObjectRelease();
  v96[0] = (uint64_t)v2;
  sub_46AD0(v96, sub_D0A7C, sub_125538);
  swift_bridgeObjectRelease();
  v3 = v96[0];
  v4 = sub_5EDC(&qword_1F11C8);
  v5 = swift_allocObject(v4, 40, 7);
  v95 = 1;
  *(_OWORD *)(v5 + 16) = xmmword_1875E0;
  *(_QWORD *)(v5 + 32) = _swiftEmptyArrayStorage;
  v6 = sub_11F45C(v3);
  v7 = v6[2];
  if (v7)
  {
    sub_5EDC(&qword_1F3DD0);
    v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v7);
  }
  else
  {
    v8 = _swiftEmptyDictionarySingleton;
  }
  v96[0] = (uint64_t)v8;
  sub_CD490((uint64_t)v6, 1, v96);
  swift_bridgeObjectRelease();
  v9 = swift_release(v96[0]);
  v10 = *(_QWORD *)(v0 + 2520);
  v11 = *(_QWORD *)(v0 + 2480);
  v12 = *(int *)(v10 + 56);
  *(_DWORD *)(v0 + 2680) = v12;
  v13 = *(_QWORD *)(v11 + v12);
  v14 = *(int *)(v10 + 52);
  *(_DWORD *)(v0 + 2684) = v14;
  v15 = *(_QWORD *)(v11 + v14);
  if (!v15)
  {
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (v13 == 0x8000000000000000 && v15 == -1)
    goto LABEL_35;
  v16 = v13 / v15;
  if (*(_QWORD *)(v0 + 2560) >= v16)
    v17 = v16;
  else
    v17 = *(_QWORD *)(v0 + 2560);
  if (v17)
  {
    v18 = sub_12A114(0, *(_QWORD *)(v3 + 16), v17, v17, v3);
  }
  else
  {
    v19 = sub_5EDC(&qword_1F11D0);
    v18 = (_QWORD *)swift_allocObject(v19, 64, 7);
    *((_OWORD *)v18 + 1) = xmmword_1875E0;
    v18[4] = _swiftEmptyArrayStorage;
    v18[5] = &_swiftEmptyArrayStorage[4];
    *((_OWORD *)v18 + 3) = xmmword_18CB70;
  }
  *(_QWORD *)(v0 + 2576) = v18;
  swift_release(v3);
  v20 = v18[2];
  *(_QWORD *)(v0 + 2584) = v20;
  if (!v20 || (*(_QWORD *)(v0 + 2568) & 0x8000000000000000) != 0)
  {
    swift_bridgeObjectRelease();
    v45 = *(_QWORD *)(v0 + 2552);
    v46 = *(_QWORD *)(v0 + 2544);
    v47 = *(_QWORD *)(v0 + 2536);
    v48 = *(_QWORD *)(v0 + 2528);
    v49 = *(_QWORD *)(v0 + 2512);
    v50 = *(_QWORD *)(v0 + 2472);
    *(_QWORD *)v50 = v5;
    *(_OWORD *)(v50 + 8) = 0u;
    *(_OWORD *)(v50 + 24) = 0u;
    *(_QWORD *)(v50 + 40) = 0;
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v82 = 0;
  v21 = *(int **)(v0 + 2520);
  v22 = *(_QWORD *)(v0 + 2504);
  v23 = *(_QWORD *)(v0 + 2480);
  v24 = v21[6];
  *(_DWORD *)(v0 + 2688) = v24;
  v94 = (uint64_t *)(v23 + v24);
  v25 = v21[7];
  *(_DWORD *)(v0 + 2692) = v25;
  v92 = v22;
  log = (os_log_t)(v23 + v25);
  v90 = v21[8];
  *(_DWORD *)(v0 + 2696) = v90;
  v88 = v21[9];
  *(_DWORD *)(v0 + 2700) = v88;
  v87 = v21[10];
  *(_DWORD *)(v0 + 2704) = v87;
  v86 = v21[11];
  *(_DWORD *)(v0 + 2708) = v86;
  *(_OWORD *)(v0 + 2608) = 0u;
  *(_OWORD *)(v0 + 2624) = 0u;
  *(_QWORD *)(v0 + 2640) = 0;
  *(_QWORD *)(v0 + 2600) = v5;
  *(_QWORD *)(v0 + 2592) = 1;
  v84 = *(int *)(v0 + 2680);
  v85 = *(int *)(v0 + 2684);
  v26 = *(_QWORD *)(v0 + 2552);
  v27 = *(_QWORD *)(v0 + 2512);
  v83 = *(_QWORD *)(v0 + 2496);
  v28 = v18[6];
  v3 = v18[7];
  v5 = v18[4];
  v29 = v18[5];
  *(_QWORD *)(v0 + 2648) = v5;
  v30 = swift_unknownObjectRetain(v5);
  UUID.init()(v30);
  v81 = v29;
  v95 = v28;
  v31 = sub_3DA00(v29, v28, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v26, v27, v83);
  v32 = *(_BYTE *)(v23 + v90);
  v33 = *(_BYTE *)(v23 + v88);
  v34 = *(_QWORD *)(v23 + v87);
  v35 = *(_BYTE *)(v23 + v86);
  v37 = *v94;
  v36 = v94[1];
  v38 = *(_QWORD *)(v23 + v85);
  v39 = *(_QWORD *)(v23 + v84);
  isa = log->isa;
  v41 = log[1].isa;
  *(_QWORD *)(v26 + v21[5]) = v31;
  v42 = (_QWORD *)(v26 + v21[6]);
  *v42 = v37;
  v42[1] = v36;
  v43 = (Class *)(v26 + v21[7]);
  *v43 = isa;
  v43[1] = v41;
  *(_BYTE *)(v26 + v21[8]) = v32;
  *(_BYTE *)(v26 + v21[9]) = v33;
  *(_QWORD *)(v26 + v21[10]) = v34;
  *(_BYTE *)(v26 + v21[11]) = v35;
  *(_QWORD *)(v26 + v21[12]) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v26 + v21[13]) = v38;
  *(_QWORD *)(v26 + v21[14]) = v39;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v41);
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v27, v83);
  if ((v3 & 1) == 0)
  {
    swift_unknownObjectRetain(v5);
LABEL_17:
    v44 = sub_37EB4(v5, v81, v95, v3);
    goto LABEL_25;
  }
  v52 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v53 = swift_unknownObjectRetain_n(v5, 3);
  v54 = (_QWORD *)swift_dynamicCastClass(v53, v52);
  if (!v54)
  {
    swift_unknownObjectRelease(v5);
    v54 = _swiftEmptyArrayStorage;
  }
  v55 = v54[2];
  v9 = swift_release(v54);
  if (__OFSUB__(v3 >> 1, v28))
    goto LABEL_36;
  v9 = v5;
  if (v55 != (v3 >> 1) - v28)
  {
LABEL_37:
    swift_unknownObjectRelease(v9);
    goto LABEL_17;
  }
  v44 = (_QWORD *)swift_dynamicCastClass(v5, v52);
  if (!v44)
  {
    swift_unknownObjectRelease(v5);
    v44 = _swiftEmptyArrayStorage;
  }
LABEL_25:
  swift_unknownObjectRelease(v5);
  *(_QWORD *)(v0 + 2392) = v44;
  sub_46AD0((uint64_t *)(v0 + 2392), sub_D0A7C, sub_124DAC);
  v56 = *(_QWORD *)(v0 + 2392);
  if (v82)
    return swift_release(v56);
  if (qword_1F0118 != -1)
    swift_once(&qword_1F0118, sub_11FDF4);
  v57 = *(_QWORD *)(v0 + 2552);
  v58 = *(_QWORD *)(v0 + 2544);
  v59 = *(_QWORD *)(v0 + 2536);
  v60 = *(_QWORD *)(v0 + 2480);
  v61 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 2656) = sub_5216C(v61, (uint64_t)qword_2245F0);
  sub_70D7C(v57, v58);
  sub_70D7C(v60, v59);
  swift_unknownObjectRetain_n(v5, 2);
  v62 = swift_retain(v56);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter(v63);
  v65 = os_log_type_enabled(v63, v64);
  v66 = *(_QWORD *)(v0 + 2544);
  if (!v65)
  {
    v76 = *(_QWORD *)(v0 + 2536);
    swift_unknownObjectRelease(v5);
    sub_26AA0(v66, type metadata accessor for SeedBasedRecommendationRequest);
    swift_unknownObjectRelease(v5);
    sub_26AA0(v76, type metadata accessor for SeedBasedRecommendationRequest);
    swift_release_n(v56, 2);

    goto LABEL_33;
  }
  v67 = swift_slowAlloc(42, -1);
  v91 = swift_slowAlloc(96, -1);
  *(_QWORD *)(v0 + 2432) = v91;
  *(_DWORD *)v67 = 136446978;
  v68 = UUID.uuidString.getter(v91);
  v89 = (uint64_t *)(v0 + 2432);
  *(_QWORD *)(v0 + 2440) = sub_9DA98(v68, v69, (uint64_t *)(v0 + 2432));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2440, v0 + 2448, v67 + 4, v67 + 12);
  swift_bridgeObjectRelease();
  sub_26AA0(v66, type metadata accessor for SeedBasedRecommendationRequest);
  *(_WORD *)(v67 + 12) = 2048;
  result = swift_unknownObjectRelease(v5);
  if (!__OFSUB__(v3 >> 1, v95))
  {
    v70 = *(_QWORD *)(v0 + 2536);
    *(_QWORD *)(v0 + 2448) = (v3 >> 1) - v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2448, v0 + 2456, v67 + 14, v67 + 22);
    v71 = swift_unknownObjectRelease(v5);
    *(_WORD *)(v67 + 22) = 2082;
    v72 = UUID.uuidString.getter(v71);
    *(_QWORD *)(v0 + 2456) = sub_9DA98(v72, v73, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2456, v0 + 2464, v67 + 24, v67 + 32);
    swift_bridgeObjectRelease();
    sub_26AA0(v70, type metadata accessor for SeedBasedRecommendationRequest);
    *(_WORD *)(v67 + 32) = 2080;
    v74 = sub_123208(v56);
    *(_QWORD *)(v0 + 2464) = sub_9DA98(v74, v75, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2464, v0 + 2472, v67 + 34, v67 + 42);
    swift_bridgeObjectRelease();
    swift_release_n(v56, 2);
    _os_log_impl(&dword_0, v63, v64, "issuing subrequest %{public}s with %ld seed books for request %{public}s seedBooks=%s", (uint8_t *)v67, 0x2Au);
    swift_arrayDestroy(v91, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v91, -1, -1);
    swift_slowDealloc(v67, -1, -1);

LABEL_33:
    v77 = *(_QWORD *)(v0 + 2568);
    v78 = *(_QWORD *)(v0 + 2560);
    memcpy((void *)(v0 + 16), (const void *)(v0 + 1792), 0x170uLL);
    *(_QWORD *)(v0 + 384) = v78;
    *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 2352);
    *(_QWORD *)(v0 + 408) = v77;
    memcpy((void *)(v0 + 416), (const void *)(v0 + 1104), 0x2B0uLL);
    v79 = (_QWORD *)swift_task_alloc(dword_1F5FAC);
    *(_QWORD *)(v0 + 2664) = v79;
    *v79 = v0;
    v79[1] = sub_12210C;
    v80 = *(_QWORD *)(v0 + 2552);
    v79[108] = *(_QWORD *)(v0 + 2488);
    v79[107] = v80;
    v79[106] = v0 + 2256;
    v79[109] = *(_QWORD *)(v0 + 480);
    return swift_task_switch(sub_1233B4, 0, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_12210C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2664);
  *(_QWORD *)(*(_QWORD *)v1 + 2672) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = sub_122E38;
  }
  else
  {
    v3 = sub_1221D8;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1221D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t result;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  os_log_type_t type;
  os_log_type_t typea[8];
  os_log_type_t typeb[8];
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  os_log_type_t v128;
  os_log_t log;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134[2];

  v1 = *(_QWORD *)(v0 + 2672);
  v2 = *(_QWORD *)(v0 + 2256);
  v3 = *(_QWORD *)(v0 + 2264);
  v4 = *(_QWORD *)(v0 + 2272);
  v5 = *(_QWORD *)(v0 + 2280);
  v6 = *(_QWORD *)(v0 + 2288);
  v7 = *(_QWORD *)(v0 + 2296);
  v8 = swift_bridgeObjectRetain(v2);
  v9 = sub_1294C0(v8, (uint64_t)sub_123E84, 0);
  swift_bridgeObjectRelease_n(v2, 2);
  if (!v9[2])
  {
    v12 = *(_QWORD *)(v0 + 2648);
    v13 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
    v14 = sub_D4778();
    swift_allocError(v13, v14, 0, 0);
    v16 = swift_storeEnumTagMultiPayload(v15, v13, 10);
    swift_willThrow(v16);
    swift_unknownObjectRelease(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  *(_QWORD *)(v0 + 2376) = v9[4];
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v10 = sub_D4298();
  if (v1)
  {
    v11 = *(_QWORD *)(v0 + 2648);
    swift_bridgeObjectRelease_n(v9, 2);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease_n(v6, 2);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_unknownObjectRelease(v11);
LABEL_5:
    sub_26AA0(*(_QWORD *)(v0 + 2552), type metadata accessor for SeedBasedRecommendationRequest);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = *(_QWORD *)(v0 + 2544);
    v18 = *(_QWORD *)(v0 + 2536);
    v19 = *(_QWORD *)(v0 + 2528);
    v20 = *(_QWORD *)(v0 + 2512);
    swift_task_dealloc(*(_QWORD *)(v0 + 2552));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v23 = v10;
  v24 = v3;
  v25 = v4;
  v26 = v5;
  swift_bridgeObjectRelease();
  v132 = v24;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 2384) = v23;
  swift_bridgeObjectRetain(v23);
  sub_46AD0((uint64_t *)(v0 + 2384), sub_D0B08, sub_127110);
  v120 = v25;
  v130 = v7;
  v123 = v6;
  v27 = *(_QWORD *)(v0 + 2552);
  v28 = *(_QWORD *)(v0 + 2528);
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(v0 + 2384);
  sub_70D7C(v27, v28);
  v30 = swift_retain(v29);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter(v31);
  v33 = os_log_type_enabled(v31, v32);
  v34 = *(_QWORD *)(v0 + 2528);
  if (v33)
  {
    type = v32;
    v35 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v134[0] = v36;
    *(_DWORD *)v35 = 136446466;
    v37 = ((uint64_t (*)(void))UUID.uuidString.getter)();
    *(_QWORD *)(v0 + 2416) = sub_9DA98(v37, v38, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2416, v0 + 2424, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease();
    sub_26AA0(v34, type metadata accessor for SeedBasedRecommendationRequest);
    *(_WORD *)(v35 + 12) = 2080;
    v39 = sub_123E9C(v29);
    *(_QWORD *)(v0 + 2424) = sub_9DA98(v39, v40, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2424, v0 + 2432, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v29, 2);
    _os_log_impl(&dword_0, v31, type, "subrequest %{public}s filteredResponse=%s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    sub_26AA0(*(_QWORD *)(v0 + 2528), type metadata accessor for SeedBasedRecommendationRequest);
    swift_release_n(v29, 2);
  }

  v111 = *(_QWORD *)(v0 + 2648);
  v112 = *(_QWORD *)(v0 + 2632);
  v41 = *(_QWORD *)(v0 + 2624);
  v42 = *(_QWORD *)(v0 + 2616);
  v43 = *(_QWORD *)(v0 + 2608);
  v115 = *(_QWORD *)(v0 + 2584);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 2592);
  v113 = *(_QWORD *)(v0 + 2640);
  v114 = *(_QWORD *)(v0 + 2552);
  *(_QWORD *)(v0 + 2304) = *(_QWORD *)(v0 + 2600);
  *(_QWORD *)(v0 + 2312) = v43;
  *(_QWORD *)(v0 + 2320) = v42;
  *(_QWORD *)(v0 + 2328) = v41;
  *(_QWORD *)(v0 + 2336) = v112;
  *(_QWORD *)(v0 + 2344) = v113;
  *(_QWORD *)(v0 + 2160) = v9;
  *(_QWORD *)(v0 + 2168) = v132;
  *(_QWORD *)(v0 + 2176) = v120;
  *(_QWORD *)(v0 + 2184) = v26;
  *(_QWORD *)(v0 + 2192) = v123;
  *(_QWORD *)(v0 + 2200) = v130;
  sub_D5080((_QWORD *)(v0 + 2304), (uint64_t *)(v0 + 2160), (uint64_t *)(v0 + 2208));
  swift_unknownObjectRelease(v111);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_26AA0(v114, type metadata accessor for SeedBasedRecommendationRequest);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = *(uint64_t **)(v0 + 2208);
  v45 = *(uint64_t **)(v0 + 2216);
  v46 = *(uint64_t **)(v0 + 2224);
  v47 = *(uint64_t **)(v0 + 2232);
  v48 = *(_QWORD *)(v0 + 2240);
  v49 = *(_QWORD *)(v0 + 2248);
  if (*(_QWORD *)typea == v115)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    v52 = *(_QWORD *)(v0 + 2552);
    v53 = *(_QWORD *)(v0 + 2544);
    v54 = *(_QWORD *)(v0 + 2536);
    v55 = *(_QWORD *)(v0 + 2528);
    v133 = *(_QWORD *)(v0 + 2512);
    v56 = *(uint64_t ***)(v0 + 2472);
    *v56 = v44;
    v56[1] = v45;
    v56[2] = v46;
    v56[3] = v47;
    v56[4] = (uint64_t *)v48;
    v56[5] = (uint64_t *)v49;
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v133);
    v21 = *(uint64_t (**)(void))(v0 + 8);
    return v21();
  }
  v50 = *(_QWORD *)(v0 + 2592);
  v51 = *(_QWORD *)(v0 + 2576);
  if (v50 >= *(_QWORD *)(v51 + 16))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v50 == *(_QWORD *)(v0 + 2568) + 1)
    goto LABEL_13;
  *(_QWORD *)(v0 + 2640) = v49;
  *(_QWORD *)(v0 + 2632) = v48;
  v57 = (_QWORD *)(v51 + 32 * v50);
  *(_QWORD *)(v0 + 2624) = v47;
  *(_QWORD *)(v0 + 2616) = v46;
  *(_QWORD *)(v0 + 2608) = v45;
  *(_QWORD *)(v0 + 2600) = v44;
  *(_QWORD *)(v0 + 2592) = v50 + 1;
  log = (os_log_t)*(int *)(v0 + 2704);
  v131 = *(int *)(v0 + 2708);
  v127 = *(int *)(v0 + 2700);
  v122 = *(int *)(v0 + 2696);
  v125 = *(int *)(v0 + 2684);
  v124 = *(int *)(v0 + 2680);
  v58 = *(_QWORD *)(v0 + 2552);
  v59 = *(int **)(v0 + 2520);
  v60 = *(_QWORD *)(v0 + 2512);
  v61 = *(_QWORD *)(v0 + 2504);
  v62 = *(_QWORD *)(v0 + 2480);
  *(_QWORD *)typeb = *(_QWORD *)(v0 + 2496);
  v121 = (uint64_t *)(v62 + *(int *)(v0 + 2692));
  v63 = (uint64_t *)(v62 + *(int *)(v0 + 2688));
  v64 = v57[6];
  v49 = v57[7];
  v65 = v57[4];
  v66 = v57[5];
  *(_QWORD *)(v0 + 2648) = v65;
  v116 = v65;
  v67 = swift_unknownObjectRetain(v65);
  UUID.init()(v67);
  v114 = v66;
  v132 = v64;
  v68 = sub_3DA00(v66, v64, v49);
  (*(void (**)(uint64_t, uint64_t, os_log_type_t *))(v61 + 16))(v58, v60, *(os_log_type_t **)typeb);
  v69 = *(_BYTE *)(v62 + v122);
  v70 = *(_BYTE *)(v62 + v127);
  v71 = *(uint64_t *)((char *)&log->isa + v62);
  v72 = *(_BYTE *)(v62 + v131);
  v74 = *v63;
  v73 = v63[1];
  v75 = *(_QWORD *)(v62 + v125);
  v76 = *(_QWORD *)(v62 + v124);
  v77 = *v121;
  v78 = v121[1];
  *(_QWORD *)(v58 + v59[5]) = v68;
  v79 = (_QWORD *)(v58 + v59[6]);
  *v79 = v74;
  v79[1] = v73;
  v80 = (_QWORD *)(v58 + v59[7]);
  *v80 = v77;
  v80[1] = v78;
  *(_BYTE *)(v58 + v59[8]) = v69;
  *(_BYTE *)(v58 + v59[9]) = v70;
  *(_QWORD *)(v58 + v59[10]) = v71;
  *(_BYTE *)(v58 + v59[11]) = v72;
  *(_QWORD *)(v58 + v59[12]) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v58 + v59[13]) = v75;
  *(_QWORD *)(v58 + v59[14]) = v76;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRetain(v78);
  (*(void (**)(uint64_t, os_log_type_t *))(v61 + 8))(v60, *(os_log_type_t **)typeb);
  if ((v49 & 1) == 0)
  {
    v48 = v116;
    swift_unknownObjectRetain(v116);
    v44 = (uint64_t *)(v0 + 2432);
LABEL_16:
    v81 = sub_37EB4(v48, v114, v132, v49);
    goto LABEL_23;
  }
  v82 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v48 = v116;
  v83 = swift_unknownObjectRetain_n(v116, 3);
  v84 = (_QWORD *)swift_dynamicCastClass(v83, v82);
  v44 = (uint64_t *)(v0 + 2432);
  if (!v84)
  {
    swift_unknownObjectRelease(v116);
    v84 = _swiftEmptyArrayStorage;
  }
  v85 = v84[2];
  v51 = swift_release(v84);
  if (__OFSUB__(v49 >> 1, v132))
    goto LABEL_31;
  v51 = v116;
  if (v85 != (v49 >> 1) - v132)
  {
LABEL_32:
    swift_unknownObjectRelease(v51);
    goto LABEL_16;
  }
  v81 = (_QWORD *)swift_dynamicCastClass(v116, v82);
  if (!v81)
  {
    swift_unknownObjectRelease(v116);
    v81 = _swiftEmptyArrayStorage;
  }
LABEL_23:
  swift_unknownObjectRelease(v48);
  *(_QWORD *)(v0 + 2392) = v81;
  sub_46AD0((uint64_t *)(v0 + 2392), sub_D0A7C, sub_124DAC);
  v86 = *(_QWORD *)(v0 + 2392);
  if (qword_1F0118 != -1)
    swift_once(&qword_1F0118, sub_11FDF4);
  v87 = *(_QWORD *)(v0 + 2552);
  v88 = *(_QWORD *)(v0 + 2544);
  v89 = *(_QWORD *)(v0 + 2536);
  v90 = *(_QWORD *)(v0 + 2480);
  v91 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 2656) = sub_5216C(v91, (uint64_t)qword_2245F0);
  sub_70D7C(v87, v88);
  sub_70D7C(v90, v89);
  swift_unknownObjectRetain_n(v48, 2);
  v92 = swift_retain(v86);
  v93 = Logger.logObject.getter(v92);
  v94 = static os_log_type_t.default.getter(v93);
  v95 = os_log_type_enabled(v93, v94);
  v96 = *(_QWORD *)(v0 + 2544);
  if (!v95)
  {
    v106 = *(_QWORD *)(v0 + 2536);
    swift_unknownObjectRelease(v48);
    sub_26AA0(v96, type metadata accessor for SeedBasedRecommendationRequest);
    swift_unknownObjectRelease(v48);
    sub_26AA0(v106, type metadata accessor for SeedBasedRecommendationRequest);
    swift_release_n(v86, 2);

    goto LABEL_29;
  }
  v128 = v94;
  v97 = swift_slowAlloc(42, -1);
  v126 = swift_slowAlloc(96, -1);
  *v44 = v126;
  *(_DWORD *)v97 = 136446978;
  v98 = ((uint64_t (*)(void))UUID.uuidString.getter)();
  *(_QWORD *)(v0 + 2440) = sub_9DA98(v98, v99, v44);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2440, v0 + 2448, v97 + 4, v97 + 12);
  swift_bridgeObjectRelease();
  sub_26AA0(v96, type metadata accessor for SeedBasedRecommendationRequest);
  *(_WORD *)(v97 + 12) = 2048;
  result = swift_unknownObjectRelease(v48);
  if (!__OFSUB__(v49 >> 1, v132))
  {
    v100 = *(_QWORD *)(v0 + 2536);
    *(_QWORD *)(v0 + 2448) = (v49 >> 1) - v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2448, v0 + 2456, v97 + 14, v97 + 22);
    v101 = swift_unknownObjectRelease(v48);
    *(_WORD *)(v97 + 22) = 2082;
    v102 = UUID.uuidString.getter(v101);
    *(_QWORD *)(v0 + 2456) = sub_9DA98(v102, v103, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2456, v0 + 2464, v97 + 24, v97 + 32);
    swift_bridgeObjectRelease();
    sub_26AA0(v100, type metadata accessor for SeedBasedRecommendationRequest);
    *(_WORD *)(v97 + 32) = 2080;
    v104 = sub_123208(v86);
    *(_QWORD *)(v0 + 2464) = sub_9DA98(v104, v105, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2464, v0 + 2472, v97 + 34, v97 + 42);
    swift_bridgeObjectRelease();
    swift_release_n(v86, 2);
    _os_log_impl(&dword_0, v93, v128, "issuing subrequest %{public}s with %ld seed books for request %{public}s seedBooks=%s", (uint8_t *)v97, 0x2Au);
    swift_arrayDestroy(v126, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1, -1);
    swift_slowDealloc(v97, -1, -1);

LABEL_29:
    v107 = *(_QWORD *)(v0 + 2568);
    v108 = *(_QWORD *)(v0 + 2560);
    memcpy((void *)(v0 + 16), (const void *)(v0 + 1792), 0x170uLL);
    *(_QWORD *)(v0 + 384) = v108;
    *(_OWORD *)(v0 + 392) = *(_OWORD *)(v0 + 2352);
    *(_QWORD *)(v0 + 408) = v107;
    memcpy((void *)(v0 + 416), (const void *)(v0 + 1104), 0x2B0uLL);
    v109 = (_QWORD *)swift_task_alloc(dword_1F5FAC);
    *(_QWORD *)(v0 + 2664) = v109;
    *v109 = v0;
    v109[1] = sub_12210C;
    v110 = *(_QWORD *)(v0 + 2552);
    v109[108] = *(_QWORD *)(v0 + 2488);
    v109[107] = v110;
    v109[106] = v0 + 2256;
    v109[109] = *(_QWORD *)(v0 + 480);
    return swift_task_switch(sub_1233B4, 0, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_122E38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 2552);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 2648));
  sub_26AA0(v1, type metadata accessor for SeedBasedRecommendationRequest);
  v2 = *(_QWORD *)(v0 + 2544);
  v3 = *(_QWORD *)(v0 + 2536);
  v4 = *(_QWORD *)(v0 + 2528);
  v5 = *(_QWORD *)(v0 + 2512);
  swift_task_dealloc(*(_QWORD *)(v0 + 2552));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_122EC8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 128);
  if (v2 >> 1 != 0xFFFFFFFF)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1231E4);
}

uint64_t sub_123208(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  _QWORD v19[69];
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;

  v21 = 0x202020200A5BLL;
  v22 = 0xE600000000000000;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v20 = _swiftEmptyArrayStorage;
    sub_340F4(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (char *)(a1 + 32);
    do
    {
      memcpy(v19, v4, 0x221uLL);
      v5 = sub_11FA6C();
      v7 = v6;
      v20 = v2;
      v9 = v2[2];
      v8 = v2[3];
      if (v9 >= v8 >> 1)
      {
        sub_340F4(v8 > 1, v9 + 1, 1);
        v2 = v20;
      }
      v2[2] = v9 + 1;
      v10 = &v2[2 * v9];
      v10[4] = v5;
      v10[5] = v7;
      v4 += 552;
      --v1;
    }
    while (v1);
  }
  v19[0] = v2;
  v11 = sub_5EDC(&qword_1F03E0);
  v12 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
  v13 = BidirectionalCollection<>.joined(separator:)(0x202020200A2CLL, 0xE600000000000000, v11, v12);
  v15 = v14;
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 93;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v21;
}

uint64_t sub_12338C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;

  v4[108] = v3;
  v4[107] = a2;
  v4[106] = a1;
  v4[109] = *(_QWORD *)(a3 + 464);
  return swift_task_switch(sub_1233B4, 0, 0);
}

void sub_1233B4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = *(_QWORD *)(v0 + 856);
  v3 = UUID.uuidString.getter();
  v5 = v4;
  *(_QWORD *)(v0 + 880) = v3;
  *(_QWORD *)(v0 + 888) = v4;
  v6 = (int *)type metadata accessor for SeedBasedRecommendationRequest(0);
  v7 = *(_QWORD *)(v2 + v6[5]);
  v8 = swift_task_alloc(32);
  *(_QWORD *)(v8 + 16) = v2;
  swift_bridgeObjectRetain(v7);
  v9 = sub_11EE94((void (*)(uint64_t *__return_ptr, _BYTE *))sub_12A9B8, v8, v7);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v8);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v2 + v6[13]);
  if ((unsigned __int128)(v10 * (__int128)v11) >> 64 == (v10 * v11) >> 63)
  {
    v33 = v3;
    v34 = v5;
    v12 = *(_QWORD *)(v0 + 856);
    if (*(_QWORD *)(v12 + v6[14]) >= v10 * v11)
      v13 = v10 * v11;
    else
      v13 = *(_QWORD *)(v12 + v6[14]);
    sub_D3D90(v9, (uint64_t)&v35);
    v32 = v35;
    *(_BYTE *)(v0 + 777) = v35;
    v8 = v36;
    *(_QWORD *)(v0 + 896) = v36;
    v14 = sub_5EDC(&qword_1F5FB0);
    v3 = swift_allocObject(v14, 88, 7);
    *(_QWORD *)(v0 + 904) = v3;
    *(_OWORD *)(v3 + 16) = xmmword_1875E0;
    if ((*(_BYTE *)(v12 + v6[9]) & 1) != 0)
    {
      v15 = &_swiftEmptySetSingleton;
    }
    else
    {
      v16 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 872));
      v15 = (void *)sub_3CD28(v16);
      swift_bridgeObjectRelease();
    }
    sub_D3EA0((uint64_t)v15, v13, v3 + 32);
    v31 = v0 + 840;
    v17 = *(_QWORD *)(v0 + 856);
    swift_bridgeObjectRelease();
    v18 = (uint64_t *)(v17 + v6[7]);
    v19 = *v18;
    *(_QWORD *)(v0 + 912) = *v18;
    v20 = v18[1];
    *(_QWORD *)(v0 + 920) = v20;
    v29 = v20;
    v30 = v19;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease();
    v1 = v5;
    if (qword_1F0118 == -1)
    {
LABEL_9:
      v21 = type metadata accessor for Logger(0);
      *(_QWORD *)(v0 + 928) = sub_5216C(v21, (uint64_t)qword_2245F0);
      v22 = swift_bridgeObjectRetain_n(v1, 2);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v35 = v26;
        *(_DWORD *)v25 = 136446210;
        swift_bridgeObjectRetain(v34);
        v27 = v33;
        *(_QWORD *)(v0 + 840) = sub_9DA98(v33, v34, &v35);
        v1 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v31, v0 + 848, v25 + 4, v25 + 12);
        swift_bridgeObjectRelease_n(v34, 3);
        _os_log_impl(&dword_0, v23, v24, "initiating request for %{public}s", v25, 0xCu);
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);

      }
      else
      {
        swift_bridgeObjectRelease_n(v1, 2);

        v27 = v33;
      }
      v28 = *(_QWORD *)(v0 + 864);
      *(_QWORD *)(v0 + 648) = v27;
      *(_QWORD *)(v0 + 656) = v1;
      *(_OWORD *)(v0 + 664) = 0u;
      *(_QWORD *)(v0 + 680) = v30;
      *(_QWORD *)(v0 + 688) = v29;
      *(_QWORD *)(v0 + 696) = v32;
      *(_QWORD *)(v0 + 704) = v8;
      *(_QWORD *)(v0 + 712) = v3;
      *(_QWORD *)(v0 + 720) = 0;
      __asm { BR              X12 }
    }
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1F0118, sub_11FDF4);
  goto LABEL_9;
}

uint64_t sub_123AE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 960);
  *(_QWORD *)(*v1 + 968) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 952);
  v5 = *(_QWORD *)(v2 + 944);
  v6 = *(_QWORD *)(v2 + 936);
  if (v0)
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 952));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    v7 = sub_123BE0;
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 920);
    v9 = *(_QWORD *)(v2 + 912);
    v10 = *(_QWORD *)(v2 + 904);
    v11 = *(_QWORD *)(v2 + 896);
    v12 = *(unsigned __int8 *)(v2 + 777);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_D5570(v9, v8, v12, v11, v10, 0);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    v7 = sub_123C7C;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_123BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 920);
  v2 = *(_QWORD *)(v0 + 912);
  v3 = *(_QWORD *)(v0 + 904);
  v4 = *(_QWORD *)(v0 + 896);
  v5 = *(unsigned __int8 *)(v0 + 777);
  swift_bridgeObjectRelease();
  sub_1062AC((_QWORD *)(v0 + 256));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_D5570(v2, v1, v5, v4, v3, 0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_123C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  unint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[6];
  unsigned __int8 v21;

  v1 = *(_QWORD *)(v0 + 728);
  v2 = *(_QWORD *)(v0 + 736);
  v3 = *(_QWORD *)(v0 + 744);
  v19 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 760);
  v5 = *(_QWORD *)(v0 + 768);
  v6 = *(_BYTE *)(v0 + 776);
  v7 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 888));
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(_QWORD *)(v0 + 888);
    v16 = *(_QWORD *)(v0 + 880);
    v17 = v2;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = v1;
    v12 = swift_slowAlloc(32, -1);
    v20[0] = v12;
    *(_DWORD *)v11 = 136446210;
    swift_bridgeObjectRetain(v10);
    *(_QWORD *)(v0 + 824) = sub_9DA98(v16, v10, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 824, v0 + 832, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(v10, 3);
    _os_log_impl(&dword_0, v8, v9, "fetched recommendations for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    v13 = v12;
    v1 = v18;
    swift_slowDealloc(v13, -1, -1);
    v14 = v11;
    v2 = v17;
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 888), 2);
  }

  v20[0] = v1;
  v20[1] = v2;
  v20[2] = v3;
  v20[3] = v19;
  v20[4] = v4;
  v20[5] = v5;
  v21 = v6;
  sub_D4100();
  sub_D5C5C(v1, v2, v3, v19, v4, v5, v6);
  sub_1062AC((_QWORD *)(v0 + 256));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_123E84(uint64_t a1)
{
  return (*(float *)(a1 + 8) > 0.0) & ~*(unsigned __int8 *)(a1 + 12);
}

uint64_t sub_123E9C(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_340F4(0, v1, 0);
    v3 = a1 + 48;
    do
    {
      v4 = *(_QWORD *)(v3 - 8);
      swift_bridgeObjectRetain(v4);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v30 = v5;
      v6._countAndFlagsBits = 58;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 58;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      if (*(_QWORD *)(v4 + 16) && (v9 = sub_398C4(0, 0), (v10 & 1) != 0))
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v9);
        v12 = sub_5EDC(&qword_1F14C8);
        v13 = swift_allocObject(v12, 72, 7);
        *(_OWORD *)(v13 + 16) = xmmword_1875E0;
        *(_QWORD *)(v13 + 56) = &type metadata for Double;
        *(_QWORD *)(v13 + 64) = &protocol witness table for Double;
        *(_QWORD *)(v13 + 32) = v11;
        v14 = String.init(format:_:)(1714630181, 0xE400000000000000, v13);
        v16 = v15;
      }
      else
      {
        v16 = 0xE300000000000000;
        v14 = 7104878;
      }
      v17 = v16;
      String.append(_:)(*(Swift::String *)&v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = _swiftEmptyArrayStorage[2];
      v18 = _swiftEmptyArrayStorage[3];
      if (v19 >= v18 >> 1)
        sub_340F4(v18 > 1, v19 + 1, 1);
      v3 += 24;
      _swiftEmptyArrayStorage[2] = v19 + 1;
      v20 = &_swiftEmptyArrayStorage[2 * v19];
      v20[4] = v29;
      v20[5] = v30;
      --v1;
    }
    while (v1);
  }
  v21 = sub_5EDC(&qword_1F03E0);
  v22 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
  v23 = BidirectionalCollection<>.joined(separator:)(0x202020200A2CLL, 0xE600000000000000, v21, v22);
  v25 = v24;
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = v23;
  v26._object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 93;
  v27._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  return 0x202020200A5BLL;
}

uint64_t sub_124140()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  sub_3EB0C(v0[2], v0[3]);
  sub_3EB0C(v1, v2);
  sub_62F8(v0 + 7);
  sub_62F8(v0 + 12);
  swift_release(v0[17]);
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for BooksBackendSeedBasedRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization42BooksBackendSeedBasedRecommendationService);
}

uint64_t sub_1241BC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1F5FBC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_A3008;
  v7[140] = v6;
  v7[139] = a2;
  v7[138] = a1;
  return swift_task_switch(sub_11FE94, 0, 0);
}

uint64_t sub_124234(uint64_t a1, const void *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1F5F3C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_70AB4;
  v7[142] = v6;
  v7[141] = a1;
  memcpy(v7 + 2, a2, 0x440uLL);
  return swift_task_switch(sub_1201B4, 0, 0);
}

_QWORD *sub_1242B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  swift_bridgeObjectRetain(a4);
  v9 = sub_1295D4(a3, a4);
  swift_bridgeObjectRelease();
  return v9;
}

void sub_124338()
{
  __asm { BR              X10 }
}

uint64_t sub_124388()
{
  return 0x656B694C65726F6DLL;
}

uint64_t sub_124524(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_1F5F44);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_6AA68;
  return sub_12049C(a1, a2, v6, v7, v9, v8);
}

_QWORD *sub_1245A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1242B4(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1245AC(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, _QWORD *);
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  char v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  void (*v64)(unint64_t, char *, _QWORD *);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;

  v7 = (_QWORD *)type metadata accessor for UUID(0);
  v8 = *(v7 - 1);
  __chkstk_darwin(v7);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F1180);
  v12 = __chkstk_darwin(v11);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (!v16)
    return swift_bridgeObjectRelease();
  LODWORD(v60) = a2;
  v57 = v3;
  v17 = *(int *)(v12 + 48);
  v56 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v18 = a1 + v56;
  v62 = *(_QWORD *)(v13 + 72);
  v59 = a1;
  swift_bridgeObjectRetain(a1);
  sub_418BC(v18, (uint64_t)v15, &qword_1F1180);
  v58 = v8;
  v19 = *(void (**)(unint64_t, char *, _QWORD *))(v8 + 32);
  v63 = v7;
  v64 = v19;
  v19((unint64_t)v10, v15, v7);
  v61 = v17;
  v20 = *(_QWORD *)&v15[v17];
  v21 = (_QWORD *)*a3;
  v23 = sub_39574((uint64_t)v10);
  v24 = v21[2];
  v25 = (v22 & 1) == 0;
  v26 = v24 + v25;
  if (__OFADD__(v24, v25))
    goto LABEL_24;
  v27 = v22;
  if (v21[3] >= v26)
  {
    if ((v60 & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_16BD08();
      if ((v27 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v7 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v23 >> 6) + 64) |= 1 << v23;
    v34 = v7[6];
    v60 = *(_QWORD *)(v58 + 72);
    v35 = v63;
    v64(v34 + v60 * v23, v10, v63);
    *(_QWORD *)(v7[7] + 8 * v23) = v20;
    v36 = v7[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
    v7[2] = v38;
    v7 = (_QWORD *)(v16 - 1);
    if (v16 == 1)
      return swift_bridgeObjectRelease_n(v59, 2);
    v39 = v59 + v62 + v56;
    while (1)
    {
      sub_418BC(v39, (uint64_t)v15, &qword_1F1180);
      v64((unint64_t)v10, v15, v35);
      v40 = *(_QWORD *)&v15[v61];
      v41 = (_QWORD *)*a3;
      v43 = sub_39574((uint64_t)v10);
      v44 = v41[2];
      v45 = (v42 & 1) == 0;
      v46 = v44 + v45;
      if (__OFADD__(v44, v45))
        break;
      v47 = v42;
      if (v41[3] < v46)
      {
        sub_15BA48(v46, 1);
        v48 = sub_39574((uint64_t)v10);
        if ((v47 & 1) != (v49 & 1))
          goto LABEL_26;
        v43 = v48;
      }
      if ((v47 & 1) != 0)
        goto LABEL_10;
      v50 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v43 >> 6) + 64) |= 1 << v43;
      v35 = v63;
      v64(v50[6] + v60 * v43, v10, v63);
      *(_QWORD *)(v50[7] + 8 * v43) = v40;
      v51 = v50[2];
      v37 = __OFADD__(v51, 1);
      v52 = v51 + 1;
      if (v37)
        goto LABEL_25;
      v50[2] = v52;
      v39 += v62;
      v7 = (_QWORD *)((char *)v7 - 1);
      if (!v7)
        return swift_bridgeObjectRelease_n(v59, 2);
    }
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  sub_15BA48(v26, v60 & 1);
  v28 = sub_39574((uint64_t)v10);
  if ((v27 & 1) == (v29 & 1))
  {
    v23 = v28;
    if ((v27 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v31 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v31);
    v67 = v31;
    swift_errorRetain(v31);
    v32 = sub_5EDC(&qword_1F1348);
    v33 = swift_dynamicCast(v32, &v67, v32, &type metadata for _MergeError, 0);
    v7 = v63;
    if ((v33 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, _QWORD *))(v58 + 8))(v10, v7);
      swift_bridgeObjectRelease();
      return swift_errorRelease(v67);
    }
    goto LABEL_27;
  }
LABEL_26:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v63);
  __break(1u);
LABEL_27:
  v65 = 0;
  v66 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v53._object = (void *)0x800000000019FEB0;
  v53._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v53);
  _print_unlocked<A, B>(_:_:)(v10, &v65, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v54._countAndFlagsBits = 39;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v65, v66, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

uint64_t sub_124A48(uint64_t a1, char a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  _BOOL8 v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char v41;

  LOBYTE(v4) = a2;
  v6 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (!v6)
    return swift_bridgeObjectRelease_n(a1, 2);
  v7 = *(_BYTE *)(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  swift_bridgeObjectRetain(v8);
  if (!v8)
    return swift_bridgeObjectRelease_n(a1, 2);
  v41 = v7;
  v9 = (_QWORD *)*a3;
  v10 = sub_393D0(v7);
  v12 = v9[2];
  v13 = (v11 & 1) == 0;
  v14 = __OFADD__(v12, v13);
  v15 = v12 + v13;
  if (v14)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = v11;
  if (v9[3] < v15)
  {
    sub_160224(v15, v4 & 1);
    v10 = sub_393D0(v7);
    if ((v16 & 1) == (v17 & 1))
      goto LABEL_8;
LABEL_6:
    v10 = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Methodology);
    __break(1u);
  }
  if ((v4 & 1) != 0)
  {
LABEL_8:
    if ((v16 & 1) != 0)
      goto LABEL_9;
    goto LABEL_12;
  }
  v21 = v10;
  sub_16E140();
  v10 = v21;
  if ((v16 & 1) != 0)
  {
LABEL_9:
    v18 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v18);
    v40 = v18;
    swift_errorRetain(v18);
    v19 = sub_5EDC(&qword_1F1348);
    if ((swift_dynamicCast(v19, &v40, v19, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v40);
    }
    goto LABEL_28;
  }
LABEL_12:
  v22 = (_QWORD *)*a3;
  *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
  *(_BYTE *)(v22[6] + v10) = v7;
  *(_QWORD *)(v22[7] + 8 * v10) = v8;
  v23 = v22[2];
  v14 = __OFADD__(v23, 1);
  v24 = v23 + 1;
  if (v14)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    v38 = 0;
    v39 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v36._object = (void *)0x800000000019FEB0;
    v36._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v36);
    _print_unlocked<A, B>(_:_:)(&v41, &v38, &type metadata for Methodology, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v37._countAndFlagsBits = 39;
    v37._object = (void *)0xE100000000000000;
    String.append(_:)(v37);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v38, v39, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
    __break(1u);
    return result;
  }
  v22[2] = v24;
  if (v6 != 1)
  {
    v4 = (_QWORD *)(a1 + 56);
    v25 = 1;
    while (v25 < *(_QWORD *)(a1 + 16))
    {
      v7 = *((_BYTE *)v4 - 8);
      v8 = *v4;
      swift_bridgeObjectRetain(*v4);
      if (!v8)
        return swift_bridgeObjectRelease_n(a1, 2);
      v41 = v7;
      v26 = (_QWORD *)*a3;
      v27 = sub_393D0(v7);
      v29 = v26[2];
      v30 = (v28 & 1) == 0;
      v14 = __OFADD__(v29, v30);
      v31 = v29 + v30;
      if (v14)
        goto LABEL_25;
      v16 = v28;
      if (v26[3] < v31)
      {
        sub_160224(v31, 1);
        v27 = sub_393D0(v7);
        if ((v16 & 1) != (v32 & 1))
          goto LABEL_6;
      }
      if ((v16 & 1) != 0)
        goto LABEL_9;
      v33 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      *(_BYTE *)(v33[6] + v27) = v7;
      *(_QWORD *)(v33[7] + 8 * v27) = v8;
      v34 = v33[2];
      v14 = __OFADD__(v34, 1);
      v35 = v34 + 1;
      if (v14)
        goto LABEL_26;
      ++v25;
      v33[2] = v35;
      v4 += 2;
      if (v6 == v25)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
    goto LABEL_27;
  }
  return swift_bridgeObjectRelease_n(a1, 2);
}

uint64_t sub_124DAC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  Swift::Int v16;
  _QWORD *v17;
  Swift::Int v18;
  Swift::Int v19;
  _QWORD *v20;
  Swift::Int v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  Swift::Int v76;
  Swift::Int v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  char *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  Swift::Int v100;
  uint64_t v101;
  char *v102;
  _BYTE __dst[545];
  uint64_t v104;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  v100 = v3;
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_146;
    if ((unint64_t)v3 >= 2)
    {
      v79 = (_QWORD *)*a1;
      v80 = -1;
      v81 = 1;
      v82 = v79;
      do
      {
        v83 = v80;
        v84 = v82;
        do
        {
          if (v84[69] >= *v84)
            break;
          if (!v79)
            goto LABEL_150;
          memcpy(__dst, v84 + 69, sizeof(__dst));
          memcpy(v84 + 69, v84, 0x228uLL);
          result = (uint64_t)memcpy(v84, __dst, 0x221uLL);
          v84 -= 69;
        }
        while (!__CFADD__(v83++, 1));
        ++v81;
        v82 += 69;
        --v80;
      }
      while (v81 != v100);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_155;
  v99 = result;
  v104 = v1;
  v96 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v102 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_112:
      v86 = v11;
      v98 = v8;
      if (v12 >= 2)
      {
        v87 = *v96;
        do
        {
          v88 = v12 - 2;
          if (v12 < 2)
            goto LABEL_141;
          if (!v87)
            goto LABEL_154;
          v89 = v86;
          v90 = *(_QWORD *)&v86[16 * v88 + 32];
          v91 = *(_QWORD *)&v86[16 * v12 + 24];
          v92 = v104;
          sub_1278C8((char *)(v87 + 552 * v90), (char *)(v87 + 552 * *(_QWORD *)&v86[16 * v12 + 16]), v87 + 552 * v91, v102);
          v104 = v92;
          if (v92)
            break;
          if (v91 < v90)
            goto LABEL_142;
          if ((swift_isUniquelyReferenced_nonNull_native(v89) & 1) == 0)
            v89 = sub_4ECA8((uint64_t)v89);
          if (v88 >= *((_QWORD *)v89 + 2))
            goto LABEL_143;
          v93 = &v89[16 * v88 + 32];
          *(_QWORD *)v93 = v90;
          *((_QWORD *)v93 + 1) = v91;
          v94 = *((_QWORD *)v89 + 2);
          if (v12 > v94)
            goto LABEL_144;
          memmove(&v89[16 * v12 + 16], &v89[16 * v12 + 32], 16 * (v94 - v12));
          v86 = v89;
          *((_QWORD *)v89 + 2) = v94 - 1;
          v12 = v94 - 1;
        }
        while (v94 > 2);
      }
LABEL_102:
      swift_bridgeObjectRelease();
      v98[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v98 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for SeedBook);
    *(_QWORD *)(v7 + 16) = v6;
    v98 = (_QWORD *)v7;
    v102 = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v97 = *a1 + 552;
  v95 = *a1 - 552;
  v11 = (char *)_swiftEmptyArrayStorage;
  v101 = v10;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
    {
      v16 = v13;
      goto LABEL_25;
    }
    v14 = *(_QWORD *)(v10 + 552 * v9);
    v15 = *(_QWORD *)(v10 + 552 * v13);
    v9 = v13 + 2;
    if (v13 + 2 >= v3)
    {
      v16 = v13;
      if (v14 >= v15)
        goto LABEL_25;
LABEL_91:
      if (v9 < v16)
        goto LABEL_147;
      if (v16 < v9)
      {
        v75 = (char *)(v95 + 552 * v9);
        v76 = v9;
        v77 = v16;
        v78 = (char *)(v10 + 552 * v16);
        while (1)
        {
          if (v77 != --v76)
          {
            if (!v10)
              goto LABEL_153;
            memcpy(__dst, v78, sizeof(__dst));
            memmove(v78, v75, 0x228uLL);
            memcpy(v75, __dst, 0x221uLL);
          }
          ++v77;
          v75 -= 552;
          v78 += 552;
          if (v77 >= v76)
            goto LABEL_25;
        }
      }
      goto LABEL_25;
    }
    v16 = v13;
    v17 = (_QWORD *)(v97 + 552 * v13);
    while (v14 < v15 != v17[69] >= *v17)
    {
      v17 += 69;
      if (v3 == ++v9)
      {
        v9 = v3;
        break;
      }
    }
    if (v14 < v15)
      goto LABEL_91;
LABEL_25:
    if (v9 >= v3)
      goto LABEL_41;
    if (__OFSUB__(v9, v16))
      goto LABEL_145;
    if (v9 - v16 >= v99)
    {
LABEL_41:
      v19 = v16;
      goto LABEL_42;
    }
    if (__OFADD__(v16, v99))
      goto LABEL_148;
    v18 = v16 + v99 >= v3 ? v3 : v16 + v99;
    if (v18 < v16)
      break;
    v19 = v16;
    if (v9 != v18)
    {
      v20 = (_QWORD *)(v10 + 552 * v9);
      do
      {
        v21 = v19;
        v22 = v20;
        do
        {
          if (*v22 >= *(v22 - 69))
            break;
          if (!v10)
            goto LABEL_151;
          memcpy(__dst, v22, sizeof(__dst));
          memcpy(v22, v22 - 69, 0x228uLL);
          memcpy(v22 - 69, __dst, 0x221uLL);
          ++v21;
          v22 -= 69;
        }
        while (v9 != v21);
        ++v9;
        v20 += 69;
      }
      while (v9 != v18);
      v9 = v18;
      if (v18 < v19)
        goto LABEL_140;
      goto LABEL_43;
    }
LABEL_42:
    if (v9 < v19)
      goto LABEL_140;
LABEL_43:
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_4E4E4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v24 = *((_QWORD *)v11 + 2);
    v23 = *((_QWORD *)v11 + 3);
    v12 = v24 + 1;
    if (v24 >= v23 >> 1)
      v11 = sub_4E4E4((char *)(v23 > 1), v24 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v25 = v11 + 32;
    v26 = &v11[16 * v24 + 32];
    *(_QWORD *)v26 = v19;
    *((_QWORD *)v26 + 1) = v9;
    if (v24)
    {
      v10 = v101;
      while (1)
      {
        v27 = v12 - 1;
        if (v12 >= 4)
        {
          v32 = &v25[16 * v12];
          v33 = *((_QWORD *)v32 - 8);
          v34 = *((_QWORD *)v32 - 7);
          v38 = __OFSUB__(v34, v33);
          v35 = v34 - v33;
          if (v38)
            goto LABEL_129;
          v37 = *((_QWORD *)v32 - 6);
          v36 = *((_QWORD *)v32 - 5);
          v38 = __OFSUB__(v36, v37);
          v30 = v36 - v37;
          v31 = v38;
          if (v38)
            goto LABEL_130;
          v39 = v12 - 2;
          v40 = &v25[16 * v12 - 32];
          v42 = *(_QWORD *)v40;
          v41 = *((_QWORD *)v40 + 1);
          v38 = __OFSUB__(v41, v42);
          v43 = v41 - v42;
          if (v38)
            goto LABEL_132;
          v38 = __OFADD__(v30, v43);
          v44 = v30 + v43;
          if (v38)
            goto LABEL_135;
          if (v44 >= v35)
          {
            v62 = &v25[16 * v27];
            v64 = *(_QWORD *)v62;
            v63 = *((_QWORD *)v62 + 1);
            v38 = __OFSUB__(v63, v64);
            v65 = v63 - v64;
            if (v38)
              goto LABEL_139;
            v55 = v30 < v65;
            goto LABEL_80;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v56 = *((_QWORD *)v11 + 4);
            v57 = *((_QWORD *)v11 + 5);
            v38 = __OFSUB__(v57, v56);
            v49 = v57 - v56;
            v50 = v38;
            goto LABEL_74;
          }
          v29 = *((_QWORD *)v11 + 4);
          v28 = *((_QWORD *)v11 + 5);
          v38 = __OFSUB__(v28, v29);
          v30 = v28 - v29;
          v31 = v38;
        }
        if ((v31 & 1) != 0)
          goto LABEL_131;
        v39 = v12 - 2;
        v45 = &v25[16 * v12 - 32];
        v47 = *(_QWORD *)v45;
        v46 = *((_QWORD *)v45 + 1);
        v48 = __OFSUB__(v46, v47);
        v49 = v46 - v47;
        v50 = v48;
        if (v48)
          goto LABEL_134;
        v51 = &v25[16 * v27];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v38 = __OFSUB__(v52, v53);
        v54 = v52 - v53;
        if (v38)
          goto LABEL_137;
        if (__OFADD__(v49, v54))
          goto LABEL_138;
        if (v49 + v54 >= v30)
        {
          v55 = v30 < v54;
LABEL_80:
          if (v55)
            v27 = v39;
          goto LABEL_82;
        }
LABEL_74:
        if ((v50 & 1) != 0)
          goto LABEL_133;
        v58 = &v25[16 * v27];
        v60 = *(_QWORD *)v58;
        v59 = *((_QWORD *)v58 + 1);
        v38 = __OFSUB__(v59, v60);
        v61 = v59 - v60;
        if (v38)
          goto LABEL_136;
        if (v61 < v49)
          goto LABEL_15;
LABEL_82:
        v66 = v27 - 1;
        if (v27 - 1 >= v12)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (!v10)
          goto LABEL_152;
        v67 = v11;
        v68 = v10;
        v69 = &v25[16 * v66];
        v70 = *(_QWORD *)v69;
        v71 = &v25[16 * v27];
        v72 = *((_QWORD *)v71 + 1);
        v73 = v104;
        sub_1278C8((char *)(v68 + 552 * *(_QWORD *)v69), (char *)(v68 + 552 * *(_QWORD *)v71), v68 + 552 * v72, v102);
        v104 = v73;
        if (v73)
          goto LABEL_102;
        if (v72 < v70)
          goto LABEL_126;
        if (v27 > *((_QWORD *)v67 + 2))
          goto LABEL_127;
        *(_QWORD *)v69 = v70;
        *(_QWORD *)&v25[16 * v66 + 8] = v72;
        v74 = *((_QWORD *)v67 + 2);
        if (v27 >= v74)
          goto LABEL_128;
        v11 = v67;
        v12 = v74 - 1;
        memmove(&v25[16 * v27], v71 + 16, 16 * (v74 - 1 - v27));
        *((_QWORD *)v67 + 2) = v74 - 1;
        v55 = v74 > 2;
        v10 = v101;
        if (!v55)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v101;
LABEL_15:
    v3 = v100;
    if (v9 >= v100)
    {
      v8 = v98;
      goto LABEL_112;
    }
  }
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_125538(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  Swift::Int v12;
  Swift::Int v13;
  int v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  _QWORD *v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  _QWORD *v61;
  double v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  double v70;
  double v71;
  char *v72;
  Swift::Int v73;
  Swift::Int v74;
  char *v75;
  Swift::Int v76;
  Swift::Int v77;
  Swift::Int v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *v91;
  _QWORD *v92;
  double v93;
  double v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  double v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  double *v126;
  _QWORD *v127;
  double v128;
  double v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double *v136;
  double v137;
  double v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  Swift::Int v142;
  char *v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  char v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  unint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t *v201;
  _QWORD *v202;
  Swift::Int v203;
  char *v204;
  Swift::Int v205;
  Swift::Int v206;
  Swift::Int v207;
  char *v208;
  Swift::Int v209;
  Swift::Int v210;
  Swift::Int v211;
  Swift::Int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  void *v216;
  char *v217;
  void *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  Swift::Int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  _QWORD v245[69];
  uint64_t __src[69];
  _QWORD __dst[69];
  uint64_t v248[70];

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_210;
    if (v3)
      return sub_486E4(0, v3, 1, a1);
    return result;
  }
  v203 = result;
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_222;
  v207 = v3;
  v201 = a1;
  if (v3 < 2)
  {
    v208 = (char *)&_swiftEmptyArrayStorage[4];
    v202 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      v141 = _swiftEmptyArrayStorage[2];
      v10 = (char *)_swiftEmptyArrayStorage;
LABEL_175:
      if (v141 >= 2)
      {
        v192 = *v201;
        do
        {
          v193 = v141 - 2;
          if (v141 < 2)
            goto LABEL_204;
          if (!v192)
            goto LABEL_221;
          v194 = v10;
          v195 = *(_QWORD *)&v10[16 * v193 + 32];
          v196 = *(_QWORD *)&v10[16 * v141 + 24];
          sub_127B78((char *)(v192 + 552 * v195), (char *)(v192 + 552 * *(_QWORD *)&v10[16 * v141 + 16]), v192 + 552 * v196, v208);
          if (v1)
            break;
          if (v196 < v195)
            goto LABEL_206;
          if ((swift_isUniquelyReferenced_nonNull_native(v194) & 1) == 0)
            v194 = sub_4ECA8((uint64_t)v194);
          if (v193 >= *((_QWORD *)v194 + 2))
            goto LABEL_207;
          v197 = &v194[16 * v193 + 32];
          *(_QWORD *)v197 = v195;
          *((_QWORD *)v197 + 1) = v196;
          v198 = *((_QWORD *)v194 + 2);
          if (v141 > v198)
            goto LABEL_208;
          memmove(&v194[16 * v141 + 16], &v194[16 * v141 + 32], 16 * (v198 - v141));
          v10 = v194;
          *((_QWORD *)v194 + 2) = v198 - 1;
          v141 = v198 - 1;
        }
        while (v198 > 2);
      }
LABEL_186:
      swift_bridgeObjectRelease();
      v202[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for SeedBook);
    *(_QWORD *)(v7 + 16) = v6;
    v202 = (_QWORD *)v7;
    v208 = (char *)(v7 + 32);
  }
  v8 = 0;
  v9 = *a1;
  v205 = v3 - 1;
  v200 = *a1 - 552;
  v10 = (char *)_swiftEmptyArrayStorage;
  v11 = v3;
  v213 = *a1;
  while (1)
  {
    v204 = v10;
    v12 = v8 + 1;
    v212 = v8;
    if (v8 + 1 >= v11)
    {
      v15 = v8 + 1;
      goto LABEL_69;
    }
    v13 = v8;
    memcpy(__dst, (const void *)(v9 + 552 * v12), 0x221uLL);
    memcpy(__src, (const void *)(v9 + 552 * v12), 0x221uLL);
    memcpy(v248, (const void *)(v9 + 552 * v13), 0x221uLL);
    memcpy(v245, (const void *)(v9 + 552 * v13), 0x221uLL);
    sub_6100(__dst);
    sub_6100(v248);
    sub_122EC8((uint64_t)__src, (uint64_t)v245);
    v214 = v14;
    if (v1)
    {
      sub_6228(v248);
      sub_6228(__dst);
      goto LABEL_186;
    }
    sub_6228(v248);
    sub_6228(__dst);
    v15 = v13 + 2;
    v11 = v207;
    if (v13 + 2 < v207)
      break;
LABEL_59:
    if ((v214 & 1) != 0)
      goto LABEL_60;
LABEL_69:
    if (v15 < v11)
    {
      if (__OFSUB__(v15, v212))
        goto LABEL_209;
      if (v15 - v212 < v203)
      {
        v77 = v212 + v203;
        if (__OFADD__(v212, v203))
          goto LABEL_211;
        if (v77 >= v11)
          v77 = v11;
        if (v77 < v212)
        {
LABEL_212:
          __break(1u);
          goto LABEL_213;
        }
        v206 = v77;
        if (v15 != v77)
        {
LABEL_79:
          v210 = v15;
          v78 = v15;
          while (1)
          {
            v79 = (char *)(v9 + 552 * v78);
            memcpy(__dst, v79, 0x221uLL);
            memcpy(v248, v79 - 552, 0x221uLL);
            v80 = v248[16];
            if ((unint64_t)v248[16] >> 1 == 0xFFFFFFFF)
              goto LABEL_214;
            v81 = v248[10];
            v82 = v248[12];
            v83 = v248[13];
            v84 = v248[14];
            v85 = v248[15];
            v243 = v248[18];
            v226 = v248[14];
            v228 = v248[13];
            v222 = v78;
            v224 = v248[15];
            v217 = v79 - 552;
            v219 = v79;
            if ((unint64_t)v248[16] >> 62 == 3)
            {
              v86 = *(_QWORD *)(v248[10] + 16);
              if (!v86)
              {
                v97 = v248[10];
                v104 = v248[11];
                v99 = v248[12];
                v105 = v248[15];
                sub_61A8(v248[10], v248[11], v248[12], v248[13], v248[14], v248[15], v248[16]);
                v106 = v105;
                v98 = v104;
                sub_61A8(v97, v104, v99, v228, v84, v106, v80);
                sub_6100(__dst);
                sub_6100(v248);
                v92 = _swiftEmptyArrayStorage;
                v100 = _swiftEmptyArrayStorage[2];
                if (!v100)
                  goto LABEL_98;
                goto LABEL_94;
              }
              v87 = v248[10];
              v88 = v248[12];
              v89 = v248[11];
            }
            else
            {
              v89 = v248[11];
              v90 = sub_5EDC(&qword_1F12B0);
              v85 = v224;
              v84 = v226;
              v83 = v228;
              v87 = swift_allocObject(v90, 88, 7);
              *(_OWORD *)(v87 + 16) = xmmword_1875E0;
              *(_QWORD *)(v87 + 32) = v81;
              *(_QWORD *)(v87 + 40) = v89;
              *(_QWORD *)(v87 + 48) = v82;
              *(_QWORD *)(v87 + 56) = v228;
              *(_QWORD *)(v87 + 64) = v226;
              *(_QWORD *)(v87 + 72) = v224;
              v88 = v82;
              v86 = 1;
              *(_BYTE *)(v87 + 80) = v80 & 1;
            }
            sub_61A8(v81, v89, v88, v83, v84, v85, v80);
            v240 = v81;
            v234 = v88;
            sub_61A8(v81, v89, v88, v83, v84, v85, v80);
            sub_6100(__dst);
            sub_6100(v248);
            swift_bridgeObjectRetain(v87);
            v91 = (double *)(v87 + 80);
            v92 = _swiftEmptyArrayStorage;
            do
            {
              if ((*(_BYTE *)v91 & 1) == 0)
              {
                v93 = *(v91 - 2);
                v94 = exp2(-*(v91 - 1) / *(v91 - 3));
                if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
                  v92 = sub_2FDB4(0, v92[2] + 1, 1, v92);
                v96 = v92[2];
                v95 = v92[3];
                if (v96 >= v95 >> 1)
                  v92 = sub_2FDB4((_QWORD *)(v95 > 1), v96 + 1, 1, v92);
                v92[2] = v96 + 1;
                *(double *)&v92[v96 + 4] = v93 * v94;
              }
              v91 += 7;
              --v86;
            }
            while (v86);
            swift_bridgeObjectRelease();
            v98 = v89;
            v97 = v240;
            v99 = v234;
            v100 = v92[2];
            if (!v100)
            {
LABEL_98:
              swift_bridgeObjectRelease();
              v102 = 0.0;
              goto LABEL_99;
            }
LABEL_94:
            v101 = (double *)(v92 + 4);
            v102 = 0.0;
            do
            {
              v103 = *v101++;
              v102 = v102 + v103;
              --v100;
            }
            while (v100);
            swift_bridgeObjectRelease();
LABEL_99:
            swift_bridgeObjectRelease();
            v107 = __dst[10];
            v108 = __dst[11];
            v231 = __dst[12];
            v235 = __dst[13];
            v109 = __dst[15];
            v110 = __dst[16];
            v238 = __dst[18];
            v241 = __dst[14];
            v199 = v243;
            sub_62CC(v97, v98, v99, v228, v226, v224, v80);
            if (v110 >> 1 == 0xFFFFFFFF)
              goto LABEL_215;
            v221 = v108;
            if (v110 >> 62 == 3)
            {
              v111 = *(_QWORD *)(v107 + 16);
              if (!v111)
              {
                v133 = v235;
                v132 = v231;
                v134 = v241;
                sub_61A8(v107, v108, v231, v235, v241, v109, v110);
                sub_61A8(v107, v108, v231, v235, v241, v109, v110);
                v127 = _swiftEmptyArrayStorage;
                v135 = _swiftEmptyArrayStorage[2];
                if (v135)
                  goto LABEL_113;
                goto LABEL_117;
              }
              v112 = v107;
              v114 = v231;
              v113 = v235;
              v115 = v108;
              v116 = v107;
              v117 = v110;
              v118 = v109;
              v119 = v241;
            }
            else
            {
              v120 = sub_5EDC(&qword_1F12B0);
              v112 = swift_allocObject(v120, 88, 7);
              *(_OWORD *)(v112 + 16) = xmmword_1875E0;
              *(_QWORD *)(v112 + 32) = v107;
              *(_QWORD *)(v112 + 40) = v108;
              v114 = v231;
              v113 = v235;
              *(_QWORD *)(v112 + 48) = v231;
              *(_QWORD *)(v112 + 56) = v235;
              v115 = v108;
              v116 = v107;
              v117 = v110;
              v118 = v109;
              v119 = v241;
              *(_QWORD *)(v112 + 64) = v241;
              *(_QWORD *)(v112 + 72) = v109;
              v111 = 1;
              *(_BYTE *)(v112 + 80) = v110 & 1;
            }
            v121 = v116;
            v122 = v115;
            v123 = v119;
            v215 = v118;
            v124 = v117;
            sub_61A8(v116, v115, v114, v113, v123, v118, v117);
            v125 = v122;
            v109 = v215;
            v229 = v124;
            sub_61A8(v121, v125, v114, v113, v241, v215, v124);
            swift_bridgeObjectRetain(v112);
            v126 = (double *)(v112 + 80);
            v127 = _swiftEmptyArrayStorage;
            do
            {
              if ((*(_BYTE *)v126 & 1) == 0)
              {
                v128 = *(v126 - 2);
                v129 = exp2(-*(v126 - 1) / *(v126 - 3));
                if ((swift_isUniquelyReferenced_nonNull_native(v127) & 1) == 0)
                  v127 = sub_2FDB4(0, v127[2] + 1, 1, v127);
                v131 = v127[2];
                v130 = v127[3];
                if (v131 >= v130 >> 1)
                  v127 = sub_2FDB4((_QWORD *)(v130 > 1), v131 + 1, 1, v127);
                v127[2] = v131 + 1;
                *(double *)&v127[v131 + 4] = v128 * v129;
              }
              v126 += 7;
              --v111;
            }
            while (v111);
            swift_bridgeObjectRelease();
            v107 = v121;
            v132 = v231;
            v133 = v235;
            v134 = v241;
            v110 = v229;
            v135 = v127[2];
            if (v135)
            {
LABEL_113:
              v136 = (double *)(v127 + 4);
              v137 = 0.0;
              do
              {
                v138 = *v136++;
                v137 = v137 + v138;
                --v135;
              }
              while (v135);
              swift_bridgeObjectRelease();
              goto LABEL_118;
            }
LABEL_117:
            swift_bridgeObjectRelease();
            v137 = 0.0;
LABEL_118:
            swift_bridgeObjectRelease();
            v199 = v238;
            sub_62CC(v107, v221, v132, v133, v134, v109, v110);
            sub_6228(v248);
            sub_6228(__dst);
            v9 = v213;
            if (v102 >= v137)
              goto LABEL_78;
            if (!v213)
              goto LABEL_216;
            v78 = v222 - 1;
            memcpy(__src, v219, 0x221uLL);
            memcpy(v219, v217, 0x228uLL);
            memcpy(v217, __src, 0x221uLL);
            if (v222 - 1 == v212)
            {
LABEL_78:
              v15 = v210 + 1;
              if (v210 + 1 == v206)
              {
                v15 = v206;
                break;
              }
              goto LABEL_79;
            }
          }
        }
      }
    }
    if (v15 < v212)
      goto LABEL_205;
    v211 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native(v204) & 1) != 0)
      v10 = v204;
    else
      v10 = sub_4E4E4(0, *((_QWORD *)v204 + 2) + 1, 1, v204);
    v140 = *((_QWORD *)v10 + 2);
    v139 = *((_QWORD *)v10 + 3);
    v141 = v140 + 1;
    v142 = v212;
    if (v140 >= v139 >> 1)
    {
      v191 = sub_4E4E4((char *)(v139 > 1), v140 + 1, 1, v10);
      v142 = v212;
      v10 = v191;
    }
    *((_QWORD *)v10 + 2) = v141;
    v143 = v10 + 32;
    v144 = &v10[16 * v140 + 32];
    *(_QWORD *)v144 = v142;
    *((_QWORD *)v144 + 1) = v211;
    if (v140)
    {
      while (1)
      {
        v145 = v141 - 1;
        if (v141 >= 4)
        {
          v150 = &v143[16 * v141];
          v151 = *((_QWORD *)v150 - 8);
          v152 = *((_QWORD *)v150 - 7);
          v156 = __OFSUB__(v152, v151);
          v153 = v152 - v151;
          if (v156)
            goto LABEL_193;
          v155 = *((_QWORD *)v150 - 6);
          v154 = *((_QWORD *)v150 - 5);
          v156 = __OFSUB__(v154, v155);
          v148 = v154 - v155;
          v149 = v156;
          if (v156)
            goto LABEL_194;
          v157 = v141 - 2;
          v158 = &v143[16 * v141 - 32];
          v160 = *(_QWORD *)v158;
          v159 = *((_QWORD *)v158 + 1);
          v156 = __OFSUB__(v159, v160);
          v161 = v159 - v160;
          if (v156)
            goto LABEL_196;
          v156 = __OFADD__(v148, v161);
          v162 = v148 + v161;
          if (v156)
            goto LABEL_199;
          if (v162 >= v153)
          {
            v180 = &v143[16 * v145];
            v182 = *(_QWORD *)v180;
            v181 = *((_QWORD *)v180 + 1);
            v156 = __OFSUB__(v181, v182);
            v183 = v181 - v182;
            if (v156)
              goto LABEL_203;
            v173 = v148 < v183;
            goto LABEL_160;
          }
        }
        else
        {
          if (v141 != 3)
          {
            v174 = *((_QWORD *)v10 + 4);
            v175 = *((_QWORD *)v10 + 5);
            v156 = __OFSUB__(v175, v174);
            v167 = v175 - v174;
            v168 = v156;
            goto LABEL_154;
          }
          v147 = *((_QWORD *)v10 + 4);
          v146 = *((_QWORD *)v10 + 5);
          v156 = __OFSUB__(v146, v147);
          v148 = v146 - v147;
          v149 = v156;
        }
        if ((v149 & 1) != 0)
          goto LABEL_195;
        v157 = v141 - 2;
        v163 = &v143[16 * v141 - 32];
        v165 = *(_QWORD *)v163;
        v164 = *((_QWORD *)v163 + 1);
        v166 = __OFSUB__(v164, v165);
        v167 = v164 - v165;
        v168 = v166;
        if (v166)
          goto LABEL_198;
        v169 = &v143[16 * v145];
        v171 = *(_QWORD *)v169;
        v170 = *((_QWORD *)v169 + 1);
        v156 = __OFSUB__(v170, v171);
        v172 = v170 - v171;
        if (v156)
          goto LABEL_201;
        if (__OFADD__(v167, v172))
          goto LABEL_202;
        if (v167 + v172 >= v148)
        {
          v173 = v148 < v172;
LABEL_160:
          if (v173)
            v145 = v157;
          goto LABEL_162;
        }
LABEL_154:
        if ((v168 & 1) != 0)
          goto LABEL_197;
        v176 = &v143[16 * v145];
        v178 = *(_QWORD *)v176;
        v177 = *((_QWORD *)v176 + 1);
        v156 = __OFSUB__(v177, v178);
        v179 = v177 - v178;
        if (v156)
          goto LABEL_200;
        if (v179 < v167)
          goto LABEL_171;
LABEL_162:
        v184 = v145 - 1;
        if (v145 - 1 >= v141)
        {
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
          goto LABEL_212;
        }
        if (!v9)
          goto LABEL_217;
        v185 = v10;
        v186 = &v143[16 * v184];
        v187 = *(_QWORD *)v186;
        v188 = &v143[16 * v145];
        v189 = *((_QWORD *)v188 + 1);
        sub_127B78((char *)(v9 + 552 * *(_QWORD *)v186), (char *)(v9 + 552 * *(_QWORD *)v188), v9 + 552 * v189, v208);
        if (v1)
          goto LABEL_186;
        if (v189 < v187)
          goto LABEL_190;
        if (v145 > *((_QWORD *)v185 + 2))
          goto LABEL_191;
        *(_QWORD *)v186 = v187;
        *(_QWORD *)&v143[16 * v184 + 8] = v189;
        v190 = *((_QWORD *)v185 + 2);
        if (v145 >= v190)
          goto LABEL_192;
        v141 = v190 - 1;
        memmove(&v143[16 * v145], v188 + 16, 16 * (v190 - 1 - v145));
        v10 = v185;
        *((_QWORD *)v185 + 2) = v190 - 1;
        if (v190 <= 2)
          goto LABEL_171;
      }
    }
    v141 = 1;
LABEL_171:
    v11 = v207;
    v8 = v211;
    if (v211 >= v207)
      goto LABEL_175;
  }
  while (1)
  {
    v209 = v15;
    memcpy(v245, (const void *)(v9 + 552 * v15), 0x221uLL);
    memcpy(__src, (const void *)(v9 + 552 * v12), 0x221uLL);
    v16 = __src[16];
    if ((unint64_t)__src[16] >> 1 == 0xFFFFFFFF)
      goto LABEL_218;
    v17 = __src[10];
    v18 = __src[11];
    v19 = __src[12];
    v20 = __src[13];
    v21 = __src[14];
    v22 = __src[15];
    v242 = __src[15];
    v23 = __src[18];
    v225 = __src[12];
    v227 = __src[14];
    v223 = __src[11];
    if ((unint64_t)__src[16] >> 62 == 3)
    {
      v24 = *(_QWORD *)(__src[10] + 16);
      if (!v24)
      {
        v39 = __src[12];
        v34 = __src[13];
        v40 = __src[15];
        sub_61A8(__src[10], __src[11], __src[12], __src[13], __src[14], __src[15], __src[16]);
        sub_61A8(v17, v18, v39, v34, v21, v40, v16);
        sub_6100(v245);
        sub_6100(__src);
        v29 = _swiftEmptyArrayStorage;
        v35 = _swiftEmptyArrayStorage[2];
        if (!v35)
          goto LABEL_34;
        goto LABEL_30;
      }
      v25 = __src[10];
    }
    else
    {
      v26 = sub_5EDC(&qword_1F12B0);
      v27 = swift_allocObject(v26, 88, 7);
      v22 = v242;
      v21 = v227;
      v25 = v27;
      *(_OWORD *)(v27 + 16) = xmmword_1875E0;
      *(_QWORD *)(v27 + 32) = v17;
      *(_QWORD *)(v27 + 40) = v18;
      *(_QWORD *)(v27 + 48) = v19;
      *(_QWORD *)(v27 + 56) = v20;
      *(_QWORD *)(v27 + 64) = v227;
      *(_QWORD *)(v27 + 72) = v242;
      v24 = 1;
      *(_BYTE *)(v27 + 80) = v16 & 1;
    }
    sub_61A8(v17, v18, v19, v20, v21, v22, v16);
    v232 = v23;
    v236 = v20;
    sub_61A8(v17, v18, v19, v20, v21, v242, v16);
    sub_6100(v245);
    sub_6100(__src);
    swift_bridgeObjectRetain(v25);
    v28 = (double *)(v25 + 80);
    v29 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v28 & 1) == 0)
      {
        v30 = *(v28 - 2);
        v31 = exp2(-*(v28 - 1) / *(v28 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
          v29 = sub_2FDB4(0, v29[2] + 1, 1, v29);
        v33 = v29[2];
        v32 = v29[3];
        if (v33 >= v32 >> 1)
          v29 = sub_2FDB4((_QWORD *)(v32 > 1), v33 + 1, 1, v29);
        v29[2] = v33 + 1;
        *(double *)&v29[v33 + 4] = v30 * v31;
      }
      v28 += 7;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v34 = v236;
    v23 = v232;
    v35 = v29[2];
    if (!v35)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      v37 = 0.0;
      goto LABEL_35;
    }
LABEL_30:
    v36 = (double *)(v29 + 4);
    v37 = 0.0;
    do
    {
      v38 = *v36++;
      v37 = v37 + v38;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
LABEL_35:
    swift_bridgeObjectRelease();
    v42 = v245[10];
    v41 = v245[11];
    v233 = v245[12];
    v237 = v245[13];
    v43 = v245[15];
    v230 = v245[14];
    v44 = v245[16];
    v239 = v245[18];
    v199 = v23;
    sub_62CC(v17, v223, v225, v34, v227, v242, v16);
    if (v44 >> 1 == 0xFFFFFFFF)
      goto LABEL_219;
    v220 = v41;
    if (v44 >> 62 == 3)
    {
      v45 = v41;
      v46 = *(_QWORD *)(v42 + 16);
      v47 = v233;
      if (!v46)
      {
        v66 = v237;
        v67 = v230;
        sub_61A8(v42, v45, v233, v237, v230, v43, v44);
        sub_61A8(v42, v45, v233, v237, v230, v43, v44);
        v61 = _swiftEmptyArrayStorage;
        v68 = _swiftEmptyArrayStorage[2];
        if (!v68)
          goto LABEL_53;
        goto LABEL_49;
      }
      v48 = v42;
      v49 = v237;
      v50 = v43;
      v51 = v42;
      v52 = v44;
      v53 = v230;
      v54 = v233;
    }
    else
    {
      v55 = sub_5EDC(&qword_1F12B0);
      v48 = swift_allocObject(v55, 88, 7);
      *(_OWORD *)(v48 + 16) = xmmword_1875E0;
      *(_QWORD *)(v48 + 32) = v42;
      *(_QWORD *)(v48 + 40) = v41;
      v54 = v233;
      v49 = v237;
      *(_QWORD *)(v48 + 48) = v233;
      *(_QWORD *)(v48 + 56) = v237;
      v50 = v43;
      v51 = v42;
      v52 = v44;
      v53 = v230;
      *(_QWORD *)(v48 + 64) = v230;
      *(_QWORD *)(v48 + 72) = v43;
      v46 = 1;
      *(_BYTE *)(v48 + 80) = v44 & 1;
      v45 = v41;
    }
    v56 = v51;
    v57 = v49;
    v216 = (void *)v52;
    v218 = (void *)v50;
    sub_61A8(v51, v45, v54, v49, v53, v50, v52);
    v244 = v56;
    v58 = v56;
    v59 = v57;
    v44 = (unint64_t)v216;
    v43 = (uint64_t)v218;
    sub_61A8(v58, v45, v54, v59, v53, (uint64_t)v218, (unint64_t)v216);
    swift_bridgeObjectRetain(v48);
    v60 = (double *)(v48 + 80);
    v61 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v60 & 1) == 0)
      {
        v62 = *(v60 - 2);
        v63 = exp2(-*(v60 - 1) / *(v60 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
          v61 = sub_2FDB4(0, v61[2] + 1, 1, v61);
        v65 = v61[2];
        v64 = v61[3];
        if (v65 >= v64 >> 1)
          v61 = sub_2FDB4((_QWORD *)(v64 > 1), v65 + 1, 1, v61);
        v61[2] = v65 + 1;
        *(double *)&v61[v65 + 4] = v62 * v63;
      }
      v60 += 7;
      --v46;
    }
    while (v46);
    swift_bridgeObjectRelease();
    v47 = v233;
    v66 = v237;
    v67 = v230;
    v42 = v244;
    v68 = v61[2];
    if (!v68)
    {
LABEL_53:
      swift_bridgeObjectRelease();
      v70 = 0.0;
      goto LABEL_54;
    }
LABEL_49:
    v69 = (double *)(v61 + 4);
    v70 = 0.0;
    do
    {
      v71 = *v69++;
      v70 = v70 + v71;
      --v68;
    }
    while (v68);
    swift_bridgeObjectRelease();
LABEL_54:
    swift_bridgeObjectRelease();
    v199 = v239;
    sub_62CC(v42, v220, v47, v66, v67, v43, v44);
    sub_6228(__src);
    sub_6228(v245);
    if (((v214 ^ (v37 >= v70)) & 1) == 0)
    {
      v11 = v207;
      v9 = v213;
      v15 = v209;
      goto LABEL_59;
    }
    v11 = v207;
    v9 = v213;
    if (v209 == v205)
      break;
    v12 = v209;
    v15 = v209 + 1;
  }
  v15 = v207;
  if ((v214 & 1) == 0)
    goto LABEL_69;
LABEL_60:
  if (v15 >= v212)
  {
    if (v212 < v15)
    {
      v72 = (char *)(v200 + 552 * v15);
      v73 = v15;
      v74 = v212;
      v75 = (char *)(v9 + 552 * v212);
      while (1)
      {
        if (v74 != --v73)
        {
          if (!v9)
            goto LABEL_220;
          v76 = v15;
          memcpy(__src, v75, 0x221uLL);
          memmove(v75, v72, 0x228uLL);
          memcpy(v72, __src, 0x221uLL);
          v11 = v207;
          v15 = v76;
        }
        ++v74;
        v72 -= 552;
        v75 += 552;
        if (v74 >= v73)
          goto LABEL_69;
      }
    }
    goto LABEL_69;
  }
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  LOBYTE(v199) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, v199, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1268B4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  Swift::Int v27;
  char *v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  Swift::Int v80;
  _OWORD *v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t i;
  unint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  unint64_t v121;
  Swift::Int v122;
  _QWORD *v123;
  _QWORD *v124;
  Swift::Int v125;
  Swift::Int v126;
  __int128 v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  char *v135;
  char *v136;
  uint64_t v137;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v95 = 0;
      v96 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v98 = *(_QWORD *)(v96 + 112 * i);
        v99 = v95;
        do
        {
          v100 = (_OWORD *)(v96 + v99);
          if (v98 >= *(_QWORD *)(v96 + v99))
            break;
          if (!v96)
            goto LABEL_142;
          v101 = v96 + v99;
          v102 = *(_BYTE *)(v96 + v99 + 120);
          v103 = *(_QWORD *)(v96 + v99 + 128);
          result = *(unsigned __int8 *)(v96 + v99 + 136);
          v104 = *(_QWORD *)(v96 + v99 + 144);
          v105 = *(_BYTE *)(v96 + v99 + 152);
          v106 = *(_QWORD *)(v96 + v99 + 160);
          v107 = *(_QWORD *)(v96 + v99 + 184);
          v108 = *(_OWORD *)(v96 + v99 + 192);
          v109 = *(_OWORD *)(v96 + v99 + 208);
          v110 = *(_OWORD *)(v96 + v99 + 168);
          v111 = v100[5];
          *(_OWORD *)(v96 + v99 + 176) = v100[4];
          *(_OWORD *)(v96 + v99 + 192) = v111;
          *(_OWORD *)(v96 + v99 + 208) = v100[6];
          v112 = v100[1];
          *(_OWORD *)(v96 + v99 + 112) = *v100;
          *(_OWORD *)(v96 + v99 + 128) = v112;
          v113 = v100[3];
          *(_OWORD *)(v96 + v99 + 144) = v100[2];
          *(_OWORD *)(v96 + v99 + 160) = v113;
          *(_QWORD *)v101 = v98;
          *(_BYTE *)(v101 + 8) = v102;
          *(_QWORD *)(v101 + 16) = v103;
          *(_BYTE *)(v101 + 24) = result;
          *(_QWORD *)(v101 + 32) = v104;
          *(_BYTE *)(v101 + 40) = v105;
          *(_QWORD *)(v101 + 48) = v106;
          *(_OWORD *)(v101 + 56) = v110;
          *(_QWORD *)(v101 + 72) = v107;
          v99 -= 112;
          *(_OWORD *)(v101 + 80) = v108;
          *(_OWORD *)(v101 + 96) = v109;
        }
        while (v99 != -112);
        v95 += 112;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_147;
  v125 = result;
  v137 = v1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v135 = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v114 = (char *)_swiftEmptyArrayStorage;
LABEL_104:
      v124 = v8;
      if (v11 >= 2)
      {
        v115 = *v2;
        do
        {
          v116 = v11 - 2;
          if (v11 < 2)
            goto LABEL_133;
          if (!v115)
            goto LABEL_146;
          v117 = v114;
          v118 = *(_QWORD *)&v114[16 * v116 + 32];
          v119 = *(_QWORD *)&v114[16 * v11 + 24];
          sub_12849C((char *)(v115 + 112 * v118), (char *)(v115 + 112 * *(_QWORD *)&v114[16 * v11 + 16]), v115 + 112 * v119, v135);
          if (v137)
            break;
          if (v119 < v118)
            goto LABEL_134;
          if ((swift_isUniquelyReferenced_nonNull_native(v117) & 1) == 0)
            v117 = sub_4ECA8((uint64_t)v117);
          if (v116 >= *((_QWORD *)v117 + 2))
            goto LABEL_135;
          v120 = &v117[16 * v116 + 32];
          *(_QWORD *)v120 = v118;
          *((_QWORD *)v120 + 1) = v119;
          v121 = *((_QWORD *)v117 + 2);
          if (v11 > v121)
            goto LABEL_136;
          memmove(&v117[16 * v11 + 16], &v117[16 * v11 + 32], 16 * (v121 - v11));
          v114 = v117;
          *((_QWORD *)v117 + 2) = v121 - 1;
          v11 = v121 - 1;
        }
        while (v121 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      v124[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v124 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for ClusterableBook);
    *(_QWORD *)(v7 + 16) = v6;
    v124 = (_QWORD *)v7;
    v135 = (char *)(v7 + 32);
  }
  v9 = 0;
  v123 = v2;
  v10 = *v2;
  v136 = (char *)_swiftEmptyArrayStorage;
  v126 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(_QWORD *)(v10 + 112 * v9);
      v14 = *(_QWORD *)(v10 + 112 * v12);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (unint64_t *)(v10 + 224 + 112 * v12);
        v16 = v13;
        while (1)
        {
          v18 = *v15;
          v15 += 14;
          v17 = v18;
          if (v13 < v14 == v18 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v13 < v14)
      {
        if (v9 < v12)
          goto LABEL_139;
        if (v12 < v9)
        {
          v19 = 112 * v9;
          v20 = v9;
          v21 = v12;
          v122 = v12;
          v22 = 112 * v12;
          do
          {
            if (v21 != --v20)
            {
              if (!v10)
                goto LABEL_145;
              v23 = *(_QWORD *)(v10 + v22);
              v24 = v10 + v19;
              v25 = *(_BYTE *)(v10 + v22 + 8);
              v132 = *(_QWORD *)(v10 + v22 + 16);
              v131 = *(_BYTE *)(v10 + v22 + 24);
              v130 = *(_QWORD *)(v10 + v22 + 32);
              v129 = *(_BYTE *)(v10 + v22 + 40);
              v128 = *(_QWORD *)(v10 + v22 + 48);
              v26 = *(_QWORD *)(v10 + v22 + 72);
              v134 = *(_OWORD *)(v10 + v22 + 80);
              v133 = *(_OWORD *)(v10 + v22 + 96);
              v127 = *(_OWORD *)(v10 + v22 + 56);
              memmove((void *)(v10 + v22), (const void *)(v10 + v19 - 112), 0x70uLL);
              *(_QWORD *)(v24 - 112) = v23;
              *(_BYTE *)(v24 - 104) = v25;
              *(_QWORD *)(v24 - 96) = v132;
              *(_BYTE *)(v24 - 88) = v131;
              *(_QWORD *)(v24 - 80) = v130;
              *(_BYTE *)(v24 - 72) = v129;
              *(_QWORD *)(v24 - 64) = v128;
              *(_OWORD *)(v24 - 56) = v127;
              *(_QWORD *)(v24 - 40) = v26;
              *(_OWORD *)(v24 - 32) = v134;
              *(_OWORD *)(v24 - 16) = v133;
            }
            ++v21;
            v19 -= 112;
            v22 += 112;
          }
          while (v21 < v20);
          v3 = v126;
          v12 = v122;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_137;
    if (v9 - v12 >= v125)
      goto LABEL_39;
    v27 = v12 + v125;
    if (__OFADD__(v12, v125))
      goto LABEL_140;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v12)
      break;
    if (v9 != v27)
    {
      v78 = v10 + 96 + 112 * v9;
      v28 = v136;
      do
      {
        v79 = *(_QWORD *)(v10 + 112 * v9);
        v80 = v12;
        v81 = (_OWORD *)v78;
        do
        {
          if (v79 >= *((_QWORD *)v81 - 26))
            break;
          if (!v10)
            goto LABEL_143;
          v82 = *((_BYTE *)v81 - 88);
          v83 = *((_QWORD *)v81 - 10);
          v84 = *((_BYTE *)v81 - 72);
          v85 = *((_QWORD *)v81 - 8);
          v86 = *((_BYTE *)v81 - 56);
          v87 = *((_QWORD *)v81 - 6);
          v88 = *((_QWORD *)v81 - 3);
          v89 = *(v81 - 1);
          v90 = *v81;
          v91 = *(_OWORD *)((char *)v81 - 40);
          v92 = *(v81 - 8);
          *(v81 - 2) = *(v81 - 9);
          *(v81 - 1) = v92;
          *v81 = *(v81 - 7);
          v93 = *(v81 - 12);
          *(v81 - 6) = *(v81 - 13);
          *(v81 - 5) = v93;
          v94 = *(v81 - 10);
          *(v81 - 4) = *(v81 - 11);
          *(v81 - 3) = v94;
          *(v81 - 7) = v90;
          v81 -= 7;
          *((_QWORD *)v81 - 12) = v79;
          *((_BYTE *)v81 - 88) = v82;
          *((_QWORD *)v81 - 10) = v83;
          *((_BYTE *)v81 - 72) = v84;
          *((_QWORD *)v81 - 8) = v85;
          *((_BYTE *)v81 - 56) = v86;
          *((_QWORD *)v81 - 6) = v87;
          *(_OWORD *)((char *)v81 - 40) = v91;
          *((_QWORD *)v81 - 3) = v88;
          ++v80;
          *(v81 - 1) = v89;
        }
        while (v9 != v80);
        ++v9;
        v78 += 112;
      }
      while (v9 != v27);
      v9 = v27;
      if (v27 < v12)
        goto LABEL_132;
      goto LABEL_40;
    }
LABEL_39:
    v28 = v136;
    if (v9 < v12)
      goto LABEL_132;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
      v28 = sub_4E4E4(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
    v30 = *((_QWORD *)v28 + 2);
    v29 = *((_QWORD *)v28 + 3);
    v11 = v30 + 1;
    if (v30 >= v29 >> 1)
      v28 = sub_4E4E4((char *)(v29 > 1), v30 + 1, 1, v28);
    *((_QWORD *)v28 + 2) = v11;
    v31 = v28 + 32;
    v32 = &v28[16 * v30 + 32];
    *(_QWORD *)v32 = v12;
    *((_QWORD *)v32 + 1) = v9;
    v136 = v28;
    if (v30)
    {
      while (1)
      {
        v33 = v11 - 1;
        if (v11 >= 4)
        {
          v38 = &v31[16 * v11];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_121;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_122;
          v45 = v11 - 2;
          v46 = &v31[16 * v11 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_124;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_127;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_131;
            v61 = v36 < v71;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v62 = *((_QWORD *)v28 + 4);
            v63 = *((_QWORD *)v28 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_70;
          }
          v35 = *((_QWORD *)v28 + 4);
          v34 = *((_QWORD *)v28 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_123;
        v45 = v11 - 2;
        v51 = &v31[16 * v11 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_126;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_129;
        if (__OFADD__(v55, v60))
          goto LABEL_130;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_76:
          if (v61)
            v33 = v45;
          goto LABEL_78;
        }
LABEL_70:
        if ((v56 & 1) != 0)
          goto LABEL_125;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_128;
        if (v67 < v55)
          goto LABEL_15;
LABEL_78:
        v72 = v33 - 1;
        if (v33 - 1 >= v11)
        {
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
          goto LABEL_141;
        }
        if (!v10)
          goto LABEL_144;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = &v31[16 * v33];
        v76 = *((_QWORD *)v75 + 1);
        sub_12849C((char *)(v10 + 112 * *(_QWORD *)v73), (char *)(v10 + 112 * *(_QWORD *)v75), v10 + 112 * v76, v135);
        if (v137)
          goto LABEL_95;
        if (v76 < v74)
          goto LABEL_118;
        if (v33 > *((_QWORD *)v136 + 2))
          goto LABEL_119;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v31[16 * v72 + 8] = v76;
        v77 = *((_QWORD *)v136 + 2);
        if (v33 >= v77)
          goto LABEL_120;
        v28 = v136;
        v11 = v77 - 1;
        memmove(&v31[16 * v33], v75 + 16, 16 * (v77 - 1 - v33));
        *((_QWORD *)v136 + 2) = v77 - 1;
        if (v77 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v126;
    if (v9 >= v126)
    {
      v8 = v124;
      v114 = v136;
      v2 = v123;
      goto LABEL_104;
    }
  }
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_127110(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _BOOL4 v20;
  Swift::Int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t *v35;
  unint64_t v36;
  Swift::Int v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  unint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _QWORD *v103;
  Swift::Int v104;
  Swift::Int v105;
  uint64_t v106;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_151;
    if (v3)
      return sub_127834(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_159;
  v6 = result;
  v101 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_117:
      v93 = v12;
      v103 = v9;
      if (v13 >= 2)
      {
        v94 = *v101;
        do
        {
          v95 = v13 - 2;
          if (v13 < 2)
            goto LABEL_146;
          if (!v94)
            goto LABEL_158;
          v96 = v93;
          v97 = *(_QWORD *)&v93[16 * v95 + 32];
          v98 = *(_QWORD *)&v93[16 * v13 + 24];
          sub_128754((char *)(v94 + 24 * v97), (char *)(v94 + 24 * *(_QWORD *)&v93[16 * v13 + 16]), v94 + 24 * v98, __dst);
          if (v1)
            break;
          if (v98 < v97)
            goto LABEL_147;
          if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
            v96 = sub_4ECA8((uint64_t)v96);
          if (v95 >= *((_QWORD *)v96 + 2))
            goto LABEL_148;
          v99 = &v96[16 * v95 + 32];
          *(_QWORD *)v99 = v97;
          *((_QWORD *)v99 + 1) = v98;
          v100 = *((_QWORD *)v96 + 2);
          if (v13 > v100)
            goto LABEL_149;
          memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v100 - v13));
          v93 = v96;
          *((_QWORD *)v96 + 2) = v100 - 1;
          v13 = v100 - 1;
        }
        while (v100 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v103[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v103 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &_s15RecommendedBookVN);
    *(_QWORD *)(v8 + 16) = v7;
    v103 = (_QWORD *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v102 = *a1 + 16;
  v12 = (char *)_swiftEmptyArrayStorage;
  v104 = v6;
  v105 = v3;
  v106 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 >= v3)
      goto LABEL_47;
    v15 = (unint64_t *)(v11 + 24 * v10);
    v16 = *v15;
    v17 = v15[2];
    v18 = (unint64_t *)(v11 + 24 * v14);
    v19 = v18[2];
    if (v17 >= v19)
    {
      if (v17 == v19)
      {
        v20 = v16 < *v18;
        v10 = v14 + 2;
        if (v14 + 2 >= v3)
        {
LABEL_38:
          if (!v20)
            goto LABEL_47;
LABEL_39:
          if (v10 < v14)
            goto LABEL_152;
          goto LABEL_40;
        }
      }
      else
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v3)
          goto LABEL_47;
        v20 = 0;
      }
LABEL_25:
      if (v3 <= v10 + 1)
        v21 = v10 + 1;
      else
        v21 = v3;
      v22 = (unint64_t *)(v102 + 24 * v10);
      do
      {
        v23 = v17;
        v24 = *(v22 - 2);
        v17 = *v22;
        if (*v22 < v23)
        {
          if (!v20)
            goto LABEL_47;
        }
        else if (*v22 == v23)
        {
          if (((v20 ^ (v24 >= v16)) & 1) == 0)
            goto LABEL_38;
        }
        else if (v20)
        {
          goto LABEL_39;
        }
        v22 += 3;
        ++v10;
        v16 = v24;
      }
      while (v10 < v3);
      v10 = v21;
      goto LABEL_38;
    }
    v10 = v14 + 2;
    if (v14 + 2 < v3)
    {
      v20 = 1;
      goto LABEL_25;
    }
LABEL_40:
    if (v14 < v10)
    {
      v25 = 24 * v10;
      v26 = 24 * v14;
      v27 = v10;
      v28 = v14;
      do
      {
        if (v28 != --v27)
        {
          if (!v11)
            goto LABEL_157;
          v29 = v11 + v26;
          v30 = v11 + v25;
          v31 = *(_OWORD *)(v11 + v26);
          v32 = *(_QWORD *)(v11 + v26 + 16);
          v33 = *(_QWORD *)(v11 + v25 - 8);
          *(_OWORD *)v29 = *(_OWORD *)(v11 + v25 - 24);
          *(_QWORD *)(v29 + 16) = v33;
          *(_OWORD *)(v30 - 24) = v31;
          *(_QWORD *)(v30 - 8) = v32;
        }
        ++v28;
        v25 -= 24;
        v26 += 24;
      }
      while (v28 < v27);
    }
LABEL_47:
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_150;
      if (v10 - v14 < v6)
        break;
    }
LABEL_67:
    if (v10 < v14)
      goto LABEL_145;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_4E4E4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v44 = *((_QWORD *)v12 + 2);
    v43 = *((_QWORD *)v12 + 3);
    v13 = v44 + 1;
    v11 = v106;
    if (v44 >= v43 >> 1)
    {
      v92 = sub_4E4E4((char *)(v43 > 1), v44 + 1, 1, v12);
      v11 = v106;
      v12 = v92;
    }
    *((_QWORD *)v12 + 2) = v13;
    v45 = v12 + 32;
    v46 = &v12[16 * v44 + 32];
    *(_QWORD *)v46 = v14;
    *((_QWORD *)v46 + 1) = v10;
    if (v44)
    {
      while (1)
      {
        v47 = v13 - 1;
        if (v13 >= 4)
        {
          v52 = &v45[16 * v13];
          v53 = *((_QWORD *)v52 - 8);
          v54 = *((_QWORD *)v52 - 7);
          v58 = __OFSUB__(v54, v53);
          v55 = v54 - v53;
          if (v58)
            goto LABEL_134;
          v57 = *((_QWORD *)v52 - 6);
          v56 = *((_QWORD *)v52 - 5);
          v58 = __OFSUB__(v56, v57);
          v50 = v56 - v57;
          v51 = v58;
          if (v58)
            goto LABEL_135;
          v59 = v13 - 2;
          v60 = &v45[16 * v13 - 32];
          v62 = *(_QWORD *)v60;
          v61 = *((_QWORD *)v60 + 1);
          v58 = __OFSUB__(v61, v62);
          v63 = v61 - v62;
          if (v58)
            goto LABEL_137;
          v58 = __OFADD__(v50, v63);
          v64 = v50 + v63;
          if (v58)
            goto LABEL_140;
          if (v64 >= v55)
          {
            v82 = &v45[16 * v47];
            v84 = *(_QWORD *)v82;
            v83 = *((_QWORD *)v82 + 1);
            v58 = __OFSUB__(v83, v84);
            v85 = v83 - v84;
            if (v58)
              goto LABEL_144;
            v75 = v50 < v85;
            goto LABEL_104;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v76 = *((_QWORD *)v12 + 4);
            v77 = *((_QWORD *)v12 + 5);
            v58 = __OFSUB__(v77, v76);
            v69 = v77 - v76;
            v70 = v58;
            goto LABEL_98;
          }
          v49 = *((_QWORD *)v12 + 4);
          v48 = *((_QWORD *)v12 + 5);
          v58 = __OFSUB__(v48, v49);
          v50 = v48 - v49;
          v51 = v58;
        }
        if ((v51 & 1) != 0)
          goto LABEL_136;
        v59 = v13 - 2;
        v65 = &v45[16 * v13 - 32];
        v67 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        v68 = __OFSUB__(v66, v67);
        v69 = v66 - v67;
        v70 = v68;
        if (v68)
          goto LABEL_139;
        v71 = &v45[16 * v47];
        v73 = *(_QWORD *)v71;
        v72 = *((_QWORD *)v71 + 1);
        v58 = __OFSUB__(v72, v73);
        v74 = v72 - v73;
        if (v58)
          goto LABEL_142;
        if (__OFADD__(v69, v74))
          goto LABEL_143;
        if (v69 + v74 >= v50)
        {
          v75 = v50 < v74;
LABEL_104:
          if (v75)
            v47 = v59;
          goto LABEL_106;
        }
LABEL_98:
        if ((v70 & 1) != 0)
          goto LABEL_138;
        v78 = &v45[16 * v47];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v58 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v58)
          goto LABEL_141;
        if (v81 < v69)
          goto LABEL_15;
LABEL_106:
        v86 = v47 - 1;
        if (v47 - 1 >= v13)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v11)
          goto LABEL_156;
        v87 = &v45[16 * v86];
        v88 = *(_QWORD *)v87;
        v89 = &v45[16 * v47];
        v90 = *((_QWORD *)v89 + 1);
        sub_128754((char *)(v11 + 24 * *(_QWORD *)v87), (char *)(v11 + 24 * *(_QWORD *)v89), v11 + 24 * v90, __dst);
        if (v1)
          goto LABEL_114;
        if (v90 < v88)
          goto LABEL_131;
        if (v47 > *((_QWORD *)v12 + 2))
          goto LABEL_132;
        *(_QWORD *)v87 = v88;
        *(_QWORD *)&v45[16 * v86 + 8] = v90;
        v91 = *((_QWORD *)v12 + 2);
        if (v47 >= v91)
          goto LABEL_133;
        v13 = v91 - 1;
        memmove(&v45[16 * v47], v89 + 16, 16 * (v91 - 1 - v47));
        *((_QWORD *)v12 + 2) = v91 - 1;
        v11 = v106;
        if (v91 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v104;
    v3 = v105;
    if (v10 >= v105)
    {
      v9 = v103;
      goto LABEL_117;
    }
  }
  v34 = v14 + v6;
  if (__OFADD__(v14, v6))
    goto LABEL_153;
  if (v34 >= v3)
    v34 = v3;
  if (v34 >= v14)
  {
    if (v10 != v34)
    {
      v35 = (uint64_t *)(v11 + 24 * v10);
      do
      {
        v36 = *(_QWORD *)(v11 + 24 * v10 + 16);
        v37 = v14;
        v38 = v35;
        do
        {
          v39 = *(v38 - 1);
          if (v36 >= v39 && (v36 != v39 || *v38 >= (unint64_t)*(v38 - 3)))
            break;
          if (!v11)
            goto LABEL_155;
          v41 = *v38;
          v42 = v38[1];
          *(_OWORD *)v38 = *(_OWORD *)(v38 - 3);
          v38[2] = *(v38 - 1);
          *(v38 - 2) = v42;
          *(v38 - 1) = v36;
          *(v38 - 3) = v41;
          v38 -= 3;
          ++v37;
        }
        while (v10 != v37);
        ++v10;
        v35 += 3;
      }
      while (v10 != v34);
      v10 = v34;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_127834(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  if (a3 != a2)
  {
    v4 = *a4;
    v5 = *a4 + 24 * a3;
LABEL_5:
    v6 = *(_QWORD *)(v4 + 24 * a3 + 16);
    v7 = result;
    v8 = (uint64_t *)v5;
    while (1)
    {
      v9 = *(v8 - 1);
      if (v6 >= v9 && (v6 != v9 || *v8 >= (unint64_t)*(v8 - 3)))
      {
LABEL_4:
        ++a3;
        v5 += 24;
        if (a3 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v4)
        break;
      v11 = *v8;
      v12 = v8[1];
      *(_OWORD *)v8 = *(_OWORD *)(v8 - 3);
      v8[2] = *(v8 - 1);
      *(v8 - 2) = v12;
      *(v8 - 1) = v6;
      *(v8 - 3) = v11;
      v8 -= 3;
      if (a3 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1278C8(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t result;
  char v21;
  char *v22;
  char *v23;
  char *v24;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 552;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 552;
  v24 = __dst;
  v23 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -551)
    {
      v15 = 552 * v11;
      if (a4 != __src || &__src[v15] <= a4)
        memmove(a4, __src, 552 * v11);
      v16 = &v4[v15];
      v22 = &v4[v15];
      v24 = v6;
      if (v7 < v6 && v10 >= 552)
      {
        v17 = (char *)(a3 - 552);
        while (1)
        {
          v18 = v17 + 552;
          v19 = v6 - 552;
          if (*((_QWORD *)v16 - 69) >= *((_QWORD *)v6 - 69))
          {
            v22 = v16 - 552;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              memmove(v17, v16 - 552, 0x228uLL);
            v19 = v6;
            v16 -= 552;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              memmove(v17, v6 - 552, 0x228uLL);
            v24 = v6 - 552;
            if (v19 <= v7)
              goto LABEL_38;
          }
          v17 -= 552;
          v6 = v19;
          if (v16 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -551)
  {
    v12 = 552 * v9;
    if (a4 != __dst || &__dst[v12] <= a4)
      memmove(a4, __dst, v12);
    v13 = &v4[v12];
    v22 = v13;
    if ((unint64_t)v6 < a3 && v8 >= 552)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            memmove(v7, v4, 0x228uLL);
          v4 += 552;
          v23 = v4;
          v14 = v6;
        }
        else
        {
          v14 = v6 + 552;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
            memmove(v7, v6, 0x228uLL);
        }
        v7 += 552;
        if (v4 >= v13)
          break;
        v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      v24 = v7;
    }
LABEL_38:
    sub_4E798((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  v21 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v21, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_127B78(char *__src, char *a2, unint64_t a3, char *__dst)
{
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char v14;
  _QWORD __dsta[69];
  _QWORD v17[69];
  char *v18;
  const void *v19;
  char *v20;

  v7 = a2 - __src;
  v8 = (a2 - __src) / 552;
  v9 = a3 - (_QWORD)a2;
  v10 = (uint64_t)(a3 - (_QWORD)a2) / 552;
  v20 = __src;
  v19 = __dst;
  if (v8 < v10)
  {
    if (v7 >= -551)
    {
      v11 = 552 * v8;
      if (__dst != __src || &__src[v11] <= __dst)
        memmove(__dst, __src, v11);
      v18 = &__dst[v11];
      if ((unint64_t)a2 < a3 && v7 >= 552)
      {
        memcpy(__dsta, a2, 0x221uLL);
        memcpy(v17, __dst, 0x221uLL);
        if (v17[16] >> 1 != 0xFFFFFFFFLL)
          __asm { BR              X9 }
        __break(1u);
        JUMPOUT(0x128408);
      }
      goto LABEL_18;
    }
LABEL_21:
    v14 = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v14, 1046, 0);
    __break(1u);
    JUMPOUT(0x12845CLL);
  }
  if (v9 < -551)
    goto LABEL_21;
  v12 = 552 * v10;
  if (__dst != a2 || &a2[v12] <= __dst)
    memmove(__dst, a2, 552 * v10);
  v18 = &__dst[v12];
  v20 = a2;
  if (__src < a2 && v9 >= 552)
  {
    memcpy(__dsta, &__dst[v12 - 552], 0x221uLL);
    memcpy(v17, a2 - 552, 0x221uLL);
    if (v17[16] >> 1 != 0xFFFFFFFFLL)
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x128410);
  }
LABEL_18:
  sub_4E798((void **)&v20, &v19, &v18);
  return 1;
}

uint64_t sub_12849C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t result;
  char *v20;
  char *v21;
  char *v22;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 112;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 112;
  v22 = __dst;
  v21 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -111)
    {
      if (a4 != __src || &__src[112 * v11] <= a4)
        memmove(a4, __src, 112 * v11);
      v14 = &v4[112 * v11];
      v20 = v14;
      v22 = v6;
      if (v7 < v6 && v10 >= 112)
      {
        v15 = (char *)(a3 - 112);
        v16 = v6;
        while (1)
        {
          v17 = v15 + 112;
          v18 = *((_QWORD *)v16 - 14);
          v16 -= 112;
          if (*((_QWORD *)v14 - 14) >= v18)
          {
            v20 = v14 - 112;
            if (v17 < v14 || v15 >= v14 || v17 != v14)
              memmove(v15, v14 - 112, 0x70uLL);
            v16 = v6;
            v14 -= 112;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v17 != v6 || v15 >= v6)
              memmove(v15, v16, 0x70uLL);
            v22 = v16;
            if (v16 <= v7)
              goto LABEL_38;
          }
          v15 -= 112;
          v6 = v16;
          if (v14 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -111)
  {
    if (a4 != __dst || &__dst[112 * v9] <= a4)
      memmove(a4, __dst, 112 * v9);
    v12 = &v4[112 * v9];
    v20 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 112)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            memmove(v7, v4, 0x70uLL);
          v4 += 112;
          v21 = v4;
          v13 = v6;
        }
        else
        {
          v13 = v6 + 112;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
            memmove(v7, v6, 0x70uLL);
        }
        v7 += 112;
        if (v4 >= v12)
          break;
        v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      v22 = v7;
    }
LABEL_38:
    sub_4E90C((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_128754(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  __int128 v16;
  char *v17;
  __int128 v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v31 = __src;
  v30 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v19 = &v4[24 * v11];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v20 = a3 - 24;
        while (1)
        {
          v21 = (char *)(v20 + 24);
          v22 = *((_QWORD *)v19 - 1);
          v23 = v6 - 24;
          v24 = *((_QWORD *)v6 - 1);
          if (v22 >= v24 && (v22 == v24 ? (v25 = *((_QWORD *)v19 - 3) >= *(_QWORD *)v23) : (v25 = 1), v25))
          {
            v29 = v19 - 24;
            if (v21 < v19 || v20 >= (unint64_t)v19 || v21 != v19)
            {
              v26 = *(_OWORD *)(v19 - 24);
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v19 - 1);
              *(_OWORD *)v20 = v26;
            }
            v23 = v6;
            v19 -= 24;
            if (v6 <= v7)
              goto LABEL_49;
          }
          else
          {
            if (v21 != v6 || v20 >= (unint64_t)v6)
            {
              v27 = *(_OWORD *)v23;
              *(_QWORD *)(v20 + 16) = *((_QWORD *)v6 - 1);
              *(_OWORD *)v20 = v27;
            }
            v31 = v6 - 24;
            if (v23 <= v7)
              goto LABEL_49;
          }
          v20 -= 24;
          v6 = v23;
          if (v19 <= v4)
            goto LABEL_49;
        }
      }
      goto LABEL_49;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v29 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        v13 = *((_QWORD *)v6 + 2);
        v14 = *((_QWORD *)v4 + 2);
        if (v13 >= v14 && (v13 == v14 ? (v15 = *(_QWORD *)v6 >= *(_QWORD *)v4) : (v15 = 1), v15))
        {
          if (v7 != v4 || v7 >= v4 + 24)
          {
            v16 = *(_OWORD *)v4;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
            *(_OWORD *)v7 = v16;
          }
          v30 = v4 + 24;
          v17 = v6;
          v4 += 24;
        }
        else
        {
          v17 = v6 + 24;
          if (v7 < v6 || v7 >= v17 || v7 != v6)
          {
            v18 = *(_OWORD *)v6;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v7 = v18;
          }
        }
        v7 += 24;
        if (v4 >= v12)
          break;
        v6 = v17;
      }
      while ((unint64_t)v17 < a3);
      v31 = v7;
    }
LABEL_49:
    sub_4EBEC((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_128A3C(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  return sub_4CEAC(*a1, a2, *a3, a3[1], a3[2]);
}

uint64_t sub_128A60(uint64_t a1, uint64_t (*a2)(char *, uint64_t, _QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, _QWORD);
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v59 = a2;
  v60 = a3;
  v58 = sub_5EDC(&qword_1F5F50);
  v5 = __chkstk_darwin(v58);
  v57 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v56 = (char *)&v46 - v8;
  __chkstk_darwin(v7);
  v55 = (char *)&v46 - v9;
  v10 = sub_5EDC(&qword_1F1180);
  v53 = *(_QWORD *)(v10 - 8);
  v54 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = _swiftEmptyArrayStorage;
  if (!v13)
    return (uint64_t)v14;
  v46 = v3;
  v62 = _swiftEmptyArrayStorage;
  sub_34398(0, v13, 0);
  result = sub_DF71C(a1);
  v17 = result;
  v18 = 0;
  v19 = a1 + 64;
  v47 = a1 + 80;
  v48 = v13;
  v51 = v12;
  v52 = a1;
  v49 = v16;
  v50 = a1 + 64;
  while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << *(_BYTE *)(a1 + 32))
  {
    v22 = (unint64_t)v17 >> 6;
    if ((*(_QWORD *)(v19 + 8 * ((unint64_t)v17 >> 6)) & (1 << v17)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v16)
      goto LABEL_26;
    v61 = v18;
    v23 = v58;
    v24 = *(int *)(v58 + 48);
    v25 = *(_QWORD *)(a1 + 48);
    v26 = type metadata accessor for UUID(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = v25 + *(_QWORD *)(v27 + 72) * v17;
    v29 = a1;
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
    v31 = (uint64_t)v55;
    v30(v55, v28, v26);
    v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v17);
    *(_QWORD *)(v31 + v24) = v32;
    v33 = v56;
    v30(v56, v31, v26);
    *(_QWORD *)&v33[*(int *)(v23 + 48)] = v32;
    v34 = (uint64_t)v33;
    v35 = v57;
    sub_41300(v34, v57, &qword_1F5F50);
    swift_bridgeObjectRetain_n(v32, 2);
    sub_417D8(v31, &qword_1F5F50);
    v36 = *(int *)(v23 + 48);
    v37 = (uint64_t)v51;
    v38 = *(int *)(v54 + 48);
    *(_QWORD *)(v37 + v38) = v59(v51, v35, *(_QWORD *)(v35 + v36));
    sub_417D8(v35, &qword_1F5F50);
    v14 = v62;
    if ((swift_isUniquelyReferenced_nonNull_native(v62) & 1) == 0)
    {
      sub_34398(0, v14[2] + 1, 1);
      v14 = v62;
    }
    v40 = v14[2];
    v39 = v14[3];
    a1 = v52;
    if (v40 >= v39 >> 1)
    {
      sub_34398(v39 > 1, v40 + 1, 1);
      v14 = v62;
    }
    v14[2] = v40 + 1;
    result = sub_41300(v37, (uint64_t)v14+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v40, &qword_1F1180);
    v20 = 1 << *(_BYTE *)(a1 + 32);
    if (v17 >= v20)
      goto LABEL_27;
    v19 = v50;
    v41 = *(_QWORD *)(v50 + 8 * v22);
    if ((v41 & (1 << v17)) == 0)
      goto LABEL_28;
    LODWORD(v16) = v49;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v49)
      goto LABEL_29;
    v42 = v41 & (-2 << (v17 & 0x3F));
    if (v42)
    {
      v20 = __clz(__rbit64(v42)) | v17 & 0xFFFFFFFFFFFFFFC0;
      v21 = v48;
    }
    else
    {
      v43 = v22 + 1;
      v44 = (unint64_t)(v20 + 63) >> 6;
      v21 = v48;
      if (v22 + 1 < v44)
      {
        v45 = *(_QWORD *)(v50 + 8 * v43);
        if (v45)
        {
LABEL_22:
          v20 = __clz(__rbit64(v45)) + (v43 << 6);
        }
        else
        {
          while (v44 - 2 != v22)
          {
            v45 = *(_QWORD *)(v47 + 8 * v22++);
            if (v45)
            {
              v43 = v22 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v18 = v61 + 1;
    v17 = v20;
    if (v61 + 1 == v21)
      return (uint64_t)v14;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

_QWORD *sub_128E38(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    sub_342E4(0, v3, 0);
    v5 = a2;
    result = _swiftEmptyArrayStorage;
    v6 = (_QWORD *)(a1 + 104);
    do
    {
      v7 = result;
      v22 = *((_BYTE *)v6 - 64);
      v8 = *(v6 - 5);
      v9 = *((_BYTE *)v6 - 32);
      v10 = *(v6 - 3);
      v11 = *(v6 - 1);
      v12 = *v6;
      v23 = *(v6 - 9);
      v24 = *(v6 - 2);
      if (*(_QWORD *)(v5 + 16) && (v13 = sub_39228(*(v6 - 9)), (v14 & 1) != 0))
      {
        v21 = 0;
        v20 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v13);
      }
      else
      {
        v20 = 0;
        v21 = 1;
      }
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v10);
      sub_40554(v8, v9);
      result = v7;
      v15 = v9;
      v17 = v7[2];
      v16 = v7[3];
      if (v17 >= v16 >> 1)
      {
        sub_342E4(v16 > 1, v17 + 1, 1);
        v5 = a2;
        result = v7;
      }
      result[2] = v17 + 1;
      v18 = &result[10 * v17];
      v18[4] = v23;
      *((_BYTE *)v18 + 40) = v22;
      v18[6] = v20;
      *((_BYTE *)v18 + 56) = v21;
      v18[8] = v8;
      *((_BYTE *)v18 + 72) = v15;
      v18[10] = v10;
      v18[11] = v24;
      v18[12] = v11;
      v18[13] = v12;
      v6 += 10;
      --v3;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_128FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  _QWORD *v4;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v68 = _swiftEmptyArrayStorage;
    sub_3432C(0, v3, 0);
    v8 = 0;
    result = _swiftEmptyArrayStorage;
    v51 = a1 + 32;
    v52 = v3;
    v53 = a2;
    v54 = a3;
    while (1)
    {
      v61 = result;
      v10 = v51 + 80 * v8;
      v11 = *(_QWORD *)v10;
      v58 = *(_BYTE *)(v10 + 8);
      v57 = *(_QWORD *)(v10 + 16);
      v56 = *(_BYTE *)(v10 + 24);
      v12 = *(_QWORD *)(v10 + 32);
      v65 = *(_BYTE *)(v10 + 40);
      v64 = *(_QWORD *)(v10 + 48);
      v55 = *(_QWORD *)(v10 + 56);
      v63 = *(_QWORD *)(v10 + 64);
      v13 = *(_QWORD *)(v10 + 72);
      if (*(_QWORD *)(a2 + 16))
      {
        v14 = sub_39228(v11);
        v15 = _swiftEmptyArrayStorage;
        if ((v16 & 1) != 0)
        {
          v15 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v14);
          swift_bridgeObjectRetain(v15);
        }
      }
      else
      {
        v15 = _swiftEmptyArrayStorage;
      }
      v59 = v11;
      if (*(_QWORD *)(a3 + 16))
      {
        v17 = sub_39228(v11);
        if ((v18 & 1) != 0)
        {
          v4 = *(_QWORD **)(*(_QWORD *)(a3 + 56) + 8 * v17);
          swift_bridgeObjectRetain(v4);
        }
      }
      v62 = v4;
      v60 = v8;
      v19 = v15[2];
      sub_40554(v12, v65);
      swift_bridgeObjectRetain(v63);
      swift_bridgeObjectRetain(v64);
      sub_40554(v12, v65);
      swift_bridgeObjectRetain(v64);
      swift_bridgeObjectRetain(v63);
      v20 = Set.init(minimumCapacity:)(v19, &type metadata for UInt64, &protocol witness table for UInt64);
      v21 = v20;
      if (v19)
      {
        v22 = 0;
        v23 = v20 + 56;
        while (1)
        {
          v24 = v15[v22++ + 4];
          v25 = static Hasher._hash(seed:_:)(*(_QWORD *)(v21 + 40), v24);
          v26 = -1 << *(_BYTE *)(v21 + 32);
          v27 = v25 & ~v26;
          if (((*(_QWORD *)(v23 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
            goto LABEL_19;
          v28 = *(_QWORD *)(v21 + 48);
          if (*(_QWORD *)(v28 + 8 * v27) == v24)
          {
LABEL_12:
            if (v22 == v19)
              break;
          }
          else
          {
            v29 = ~v26;
            while (1)
            {
              v27 = (v27 + 1) & v29;
              if (((*(_QWORD *)(v23 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
                break;
              if (*(_QWORD *)(v28 + 8 * v27) == v24)
                goto LABEL_12;
            }
LABEL_19:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
            v67 = v21;
            sub_1668AC(v24, v27, isUniquelyReferenced_nonNull_native);
            v21 = v67;
            swift_bridgeObjectRelease();
            if (v22 == v19)
              break;
            v23 = v21 + 56;
          }
        }
      }
      swift_bridgeObjectRelease();
      v31 = v62[2];
      v32 = Set.init(minimumCapacity:)(v31, &type metadata for UInt64, &protocol witness table for UInt64);
      v33 = v32;
      if (v31)
        break;
LABEL_32:
      swift_bridgeObjectRelease();
      v43 = 1;
      v44 = sub_719DC();
      v67 = Set.init(minimumCapacity:)(1, &type metadata for Methodology, v44);
      v45 = &byte_1D7790;
      do
      {
        v46 = *v45++;
        sub_162F78(&v66, v46);
        --v43;
      }
      while (v43);
      sub_40568(v12, v65);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v47 = v67;
      result = v61;
      v68 = v61;
      v49 = v61[2];
      v48 = v61[3];
      if (v49 >= v48 >> 1)
      {
        sub_3432C(v48 > 1, v49 + 1, 1);
        result = v68;
      }
      result[2] = v49 + 1;
      v50 = &result[14 * v49];
      v50[4] = v59;
      v8 = v60 + 1;
      *((_BYTE *)v50 + 40) = v58;
      v50[6] = v57;
      *((_BYTE *)v50 + 56) = v56;
      v50[8] = v12;
      *((_BYTE *)v50 + 72) = v65;
      v50[10] = v64;
      v50[11] = v55;
      v50[12] = v63;
      v50[13] = v13;
      v50[14] = v21;
      v50[15] = v33;
      v50[16] = v47;
      v50[17] = &_swiftEmptySetSingleton;
      a2 = v53;
      a3 = v54;
      v4 = _swiftEmptyArrayStorage;
      if (v60 + 1 == v52)
        return result;
    }
    v34 = 0;
    v35 = v32 + 56;
    while (1)
    {
      v36 = v62[v34++ + 4];
      v37 = static Hasher._hash(seed:_:)(*(_QWORD *)(v33 + 40), v36);
      v38 = -1 << *(_BYTE *)(v33 + 32);
      v39 = v37 & ~v38;
      if (((*(_QWORD *)(v35 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
        goto LABEL_30;
      v40 = *(_QWORD *)(v33 + 48);
      if (*(_QWORD *)(v40 + 8 * v39) == v36)
      {
LABEL_23:
        if (v34 == v31)
          goto LABEL_32;
      }
      else
      {
        v41 = ~v38;
        while (1)
        {
          v39 = (v39 + 1) & v41;
          if (((*(_QWORD *)(v35 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
            break;
          if (*(_QWORD *)(v40 + 8 * v39) == v36)
            goto LABEL_23;
        }
LABEL_30:
        v42 = swift_isUniquelyReferenced_nonNull_native(v33);
        v67 = v33;
        sub_1668AC(v36, v39, v42);
        v33 = v67;
        swift_bridgeObjectRelease();
        if (v34 == v31)
          goto LABEL_32;
        v35 = v33 + 56;
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1294C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_344FC(0, v3, 0);
    v7 = (uint64_t *)(a1 + 32);
    do
    {
      v9 = *v7++;
      v8 = v9;
      if (v9)
      {
        swift_bridgeObjectRetain_n(v8, 2);
        v10 = sub_11ECE4(a2, a3, v8);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v10 = 0;
      }
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_344FC(v11 > 1, v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      _swiftEmptyArrayStorage[v12 + 4] = v10;
      --v3;
    }
    while (v3);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_1295D4(uint64_t a1, uint64_t a2)
{
  int64_t v3;
  _QWORD *result;
  __int128 *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  __int128 v30;
  __int128 v31;
  _QWORD *v32;
  _QWORD *v33;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    v33 = _swiftEmptyArrayStorage;
    sub_3432C(0, v3, 0);
    result = _swiftEmptyArrayStorage;
    v5 = (__int128 *)(a1 + 128);
    do
    {
      v28 = result;
      v29 = v3;
      v27 = *((_QWORD *)v5 - 12);
      v26 = *((_BYTE *)v5 - 88);
      v25 = *((_QWORD *)v5 - 10);
      v24 = *((_BYTE *)v5 - 72);
      v6 = *((_QWORD *)v5 - 8);
      v7 = *((_BYTE *)v5 - 56);
      v8 = *((_QWORD *)v5 - 6);
      v23 = *((_QWORD *)v5 - 5);
      v9 = *((_QWORD *)v5 - 4);
      v10 = *((_QWORD *)v5 - 3);
      v30 = *v5;
      v31 = *(v5 - 1);
      v11 = *((_QWORD *)v5 - 1);
      v12 = *((_QWORD *)v5 + 1);
      if (v9)
      {
        sub_40554(v6, v7);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v12);
        sub_40554(v6, v7);
        swift_bridgeObjectRetain_n(v8, 2);
        swift_bridgeObjectRetain_n(v9, 2);
        swift_bridgeObjectRetain(a2);
        v13 = sub_11EA34(v9, a2);
        v14 = v13[2];
        if (v14)
        {
          sub_5EDC(&qword_1F14B8);
          v15 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v14);
        }
        else
        {
          v15 = _swiftEmptyDictionarySingleton;
        }
        v32 = v15;
        v16 = swift_bridgeObjectRetain(v13);
        sub_124A48(v16, 1, &v32);
        if (v21)
        {
          result = (_QWORD *)swift_unexpectedError(v21, "Swift/Dictionary.swift", 22, 1);
          __break(1u);
          return result;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22 = v32;
      }
      else
      {
        sub_40554(v6, v7);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(v12);
        sub_40554(v6, v7);
        swift_bridgeObjectRetain_n(v8, 2);
        v22 = 0;
      }
      sub_40554(v6, v7);
      sub_40568(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v12);
      sub_40568(v6, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = v28;
      v33 = v28;
      v18 = v28[2];
      v17 = v28[3];
      if (v18 >= v17 >> 1)
      {
        sub_3432C(v17 > 1, v18 + 1, 1);
        result = v33;
      }
      result[2] = v18 + 1;
      v19 = &result[14 * v18];
      v19[4] = v27;
      *((_BYTE *)v19 + 40) = v26;
      v19[6] = v25;
      *((_BYTE *)v19 + 56) = v24;
      v19[8] = v6;
      *((_BYTE *)v19 + 72) = v7;
      v19[10] = v8;
      v19[11] = v23;
      v19[12] = v22;
      v19[13] = v10;
      v5 += 7;
      *((_OWORD *)v19 + 7) = v31;
      *((_OWORD *)v19 + 8) = v30;
      v3 = v29 - 1;
    }
    while (v29 != 1);
  }
  return result;
}

_QWORD *sub_129958(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  _QWORD *v3;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t i;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _QWORD __src[69];
  _BYTE v59[384];
  uint64_t __dst[69];
  _QWORD *v61;
  uint64_t v62;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v61 = _swiftEmptyArrayStorage;
    sub_34110(0, v2, 0);
    v6 = (char *)(a1 + 32);
    v3 = _swiftEmptyArrayStorage;
    v43 = v2 - 1;
    for (i = a2; ; a2 = i)
    {
      memcpy(__dst, v6, 0x221uLL);
      v7 = __dst[0];
      v39 = v6;
      if (*(_QWORD *)(a2 + 16))
      {
        v8 = sub_39228(__dst[0]);
        if ((v9 & 1) != 0)
          break;
      }
      v22 = __dst[68];
      v41 = __dst[11];
      v42 = __dst[10];
      v54 = __dst[12];
      v55 = __dst[67];
      v50 = __dst[14];
      v51 = __dst[13];
      v23 = __dst[15];
      v48 = __dst[17];
      v49 = __dst[16];
      v47 = __dst[18];
      v46 = __dst[1];
      v62 = __dst[2];
      v56 = __dst[3];
      v44 = __dst[4];
      v45 = __dst[5];
      v40 = __dst[6];
      v24 = __dst[7];
      v53 = __dst[8];
      v52 = __dst[9];
      sub_6100(__dst);
LABEL_24:
      sub_41300((uint64_t)&__dst[19], (uint64_t)v59, &qword_1F2D68);
      v61 = v3;
      v26 = v3[2];
      v25 = v3[3];
      if (v26 >= v25 >> 1)
      {
        sub_34110(v25 > 1, v26 + 1, 1);
        v3 = v61;
      }
      __src[0] = v7;
      LOBYTE(__src[1]) = v46;
      __src[2] = v62;
      __src[3] = v56;
      __src[4] = v44;
      LOBYTE(__src[5]) = v45;
      __src[6] = v40;
      LOBYTE(__src[7]) = v24;
      __src[8] = v53;
      LOBYTE(__src[9]) = v52;
      __src[10] = v42;
      __src[11] = v41;
      __src[12] = v54;
      __src[13] = v51;
      __src[14] = v50;
      __src[15] = v23;
      __src[16] = v49;
      __src[17] = v48;
      __src[18] = v47;
      sub_41300((uint64_t)v59, (uint64_t)&__src[19], &qword_1F2D68);
      __src[67] = v55;
      LOBYTE(__src[68]) = v22;
      v3[2] = v26 + 1;
      memcpy(&v3[69 * v26 + 4], __src, 0x221uLL);
      if (!v43)
        return v3;
      v6 = v39 + 552;
      --v43;
    }
    v10 = *(_QWORD *)(a2 + 56) + 16 * v8;
    v35 = *(_QWORD *)v10;
    v11 = *(unsigned __int8 *)(v10 + 8);
    v62 = __dst[2];
    v56 = __dst[3];
    v44 = __dst[4];
    v45 = __dst[5];
    v46 = __dst[1];
    v12 = __dst[6];
    v13 = __dst[7];
    v53 = __dst[8];
    v52 = __dst[9];
    if (v11)
      v14 = 0x6F6F626F69647561;
    else
      v14 = 0x6B6F6F6265;
    if (v11)
      v15 = 0xE90000000000006BLL;
    else
      v15 = 0xE500000000000000;
    if (LOBYTE(__dst[1]))
      v16 = 0x6F6F626F69647561;
    else
      v16 = 0x6B6F6F6265;
    if (LOBYTE(__dst[1]))
      v17 = 0xE90000000000006BLL;
    else
      v17 = 0xE500000000000000;
    v18 = v14 == v16 && v15 == v17;
    v36 = v3;
    if (v18)
    {
      sub_6100(__dst);
      swift_bridgeObjectRelease_n(v15, 2);
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0);
      sub_6100(__dst);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        v45 = 0;
        v20 = v56;
        v21 = v62;
        v46 = v11;
        v44 = v7;
        v40 = v53;
        v34 = v52;
        v53 = v12;
        v52 = v13;
        goto LABEL_30;
      }
    }
    v20 = v62;
    v21 = v56;
    v40 = v12;
    v34 = v13;
LABEL_30:
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    v27 = __dst[10];
    v28 = __dst[11];
    v29 = __dst[13];
    v30 = __dst[14];
    v37 = __dst[15];
    v31 = __dst[16];
    v54 = __dst[12];
    v55 = __dst[67];
    v41 = __dst[11];
    v42 = __dst[10];
    v50 = __dst[14];
    v51 = __dst[13];
    v48 = __dst[17];
    v49 = __dst[16];
    v47 = __dst[18];
    if ((unint64_t)__dst[16] >> 1 == 0xFFFFFFFF)
    {
      swift_bridgeObjectRetain(__dst[67]);
      sub_6228(__dst);
      v22 = 12;
      v7 = v35;
      v3 = v36;
      v24 = v34;
      v23 = v37;
    }
    else
    {
      __src[0] = __dst[10];
      __src[1] = __dst[11];
      __src[2] = __dst[12];
      __src[3] = __dst[13];
      __src[4] = __dst[14];
      __src[5] = __dst[15];
      __src[6] = __dst[16];
      __src[7] = __dst[17];
      __src[8] = __dst[18];
      sub_61A8(__dst[10], __dst[11], __dst[12], __dst[13], __dst[14], __dst[15], __dst[16]);
      sub_61A8(v27, v28, v54, v29, v30, v37, v31);
      swift_bridgeObjectRetain(v55);
      sub_F93F4();
      if (v33)
      {
        swift_errorRelease(v33);
        v23 = v37;
        sub_62CC(v27, v28, v54, v51, v50, v37, v49);
        sub_6228(__dst);
        v33 = 0;
        v22 = 12;
      }
      else
      {
        v33 = 0;
        v23 = v37;
        sub_62CC(v27, v28, v54, v51, v50, v37, v49);
        sub_6228(__dst);
        v22 = v57;
      }
      v7 = v35;
      v3 = v36;
      v24 = v34;
    }
    goto LABEL_24;
  }
  return v3;
}

uint64_t sub_129EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(type metadata accessor for SeedBasedRecommendationRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v4));
  v7 = (_QWORD *)(v0 + v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v0 + v5 + 872))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v7[112])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v7[120])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (v7[130])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject(v0, v5 + 1088, v2 | 7);
}

uint64_t sub_12A064(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for SeedBasedRecommendationRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + v6);
  v9 = v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)swift_task_alloc(dword_1F5F5C);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_4814;
  v10[141] = v9;
  v10[140] = v8;
  v10[139] = v7;
  v10[138] = a1;
  return swift_task_switch(sub_120D20, 0, 0);
}

_QWORD *sub_12A114(int64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  _BOOL4 v10;
  BOOL v11;
  _QWORD *result;
  BOOL v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  BOOL v20;
  int64_t v21;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  BOOL v26;
  int64_t v27;
  int64_t v28;

  v6 = a2;
  v7 = a1;
  v8 = 0;
  v9 = a1;
  while (1)
  {
    v10 = v9 <= a2;
    if (a3 > 0)
      v10 = v9 >= a2;
    if (v10)
      break;
    v11 = __OFADD__(v9, a3);
    v9 += a3;
    if (v11)
      v9 = (v9 >> 63) ^ 0x8000000000000000;
    v11 = __OFADD__(v8++, 1);
    if (v11)
    {
      __break(1u);
      break;
    }
  }
  result = (_QWORD *)sub_34238(0, v8, 0);
  v28 = v6;
  if (v8)
  {
    v27 = *(_QWORD *)(a5 + 16);
    while (1)
    {
      v14 = v7 <= v6;
      if (a3 > 0)
        v14 = v7 >= v6;
      if (v14)
        break;
      if (__OFADD__(v7, a3))
        v15 = ((v7 + a3) >> 63) ^ 0x8000000000000000;
      else
        v15 = v7 + a3;
      if (__OFADD__(v7, a4))
        goto LABEL_49;
      if (v27 >= v7 + a4)
        v16 = v7 + a4;
      else
        v16 = v27;
      if (v16 < v7)
        goto LABEL_50;
      if (v7 < 0)
        goto LABEL_51;
      v18 = _swiftEmptyArrayStorage[2];
      v17 = _swiftEmptyArrayStorage[3];
      result = (_QWORD *)swift_unknownObjectRetain(a5);
      if (v18 >= v17 >> 1)
        result = (_QWORD *)sub_34238(v17 > 1, v18 + 1, 1);
      _swiftEmptyArrayStorage[2] = v18 + 1;
      v19 = &_swiftEmptyArrayStorage[4 * v18];
      v19[4] = a5;
      v19[5] = a5 + 32;
      v19[6] = v7;
      v19[7] = (2 * v16) | 1;
      v7 = v15;
      --v8;
      v6 = v28;
      if (!v8)
        goto LABEL_29;
    }
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
  }
  else
  {
    v15 = v7;
LABEL_29:
    v20 = v15 <= v6;
    if (a3 > 0)
      v20 = v15 >= v6;
    if (v20)
      return _swiftEmptyArrayStorage;
    while (1)
    {
      v21 = __OFADD__(v15, a3) ? ((v15 + a3) >> 63) ^ 0x8000000000000000 : v15 + a3;
      if (__OFADD__(v15, a4))
        break;
      if (*(_QWORD *)(a5 + 16) >= v15 + a4)
        v22 = v15 + a4;
      else
        v22 = *(_QWORD *)(a5 + 16);
      if (v22 < v15)
        goto LABEL_53;
      if (v15 < 0)
        goto LABEL_54;
      v24 = _swiftEmptyArrayStorage[2];
      v23 = _swiftEmptyArrayStorage[3];
      result = (_QWORD *)swift_unknownObjectRetain(a5);
      if (v24 >= v23 >> 1)
        result = (_QWORD *)sub_34238(v23 > 1, v24 + 1, 1);
      _swiftEmptyArrayStorage[2] = v24 + 1;
      v25 = &_swiftEmptyArrayStorage[4 * v24];
      v25[4] = a5;
      v25[5] = a5 + 32;
      v25[6] = v15;
      v25[7] = (2 * v22) | 1;
      v26 = v21 <= v28;
      if (a3 > 0)
        v26 = v21 >= v28;
      v15 = v21;
      if (v26)
        return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t sub_12A390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  int64_t v29;
  _QWORD v31[4];
  __int128 v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44[69];
  _BYTE v45[72];
  _QWORD v46[9];
  _BYTE v47[72];
  _QWORD v48[14];

  v40 = a4;
  v48[13] = a3;
  v39 = a5 & 1;
  v43 = sub_5EDC(&qword_1F5F78);
  v41 = *(_QWORD *)(v43 - 8);
  v7 = __chkstk_darwin(v43);
  v31[1] = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v38 = (char *)v31 - v10;
  __chkstk_darwin(v9);
  v42 = (char *)v31 - v11;
  v12 = a1 + 56;
  v13 = 1 << *(_BYTE *)(a1 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(a1 + 56);
  v16 = (unint64_t)(v13 + 63) >> 6;
  v37 = &v44[10];
  swift_bridgeObjectRetain(a1);
  v17 = 0;
  v32 = xmmword_1875E0;
  v33 = a1;
  v34 = v16;
  v35 = a1 + 56;
  v36 = a2;
  while (1)
  {
    if (v15)
    {
      v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v19 = v18 | (v17 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v17++, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v16)
      return swift_release(a1);
    v21 = *(_QWORD *)(v12 + 8 * v17);
    if (!v21)
      break;
LABEL_17:
    v15 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_18:
    memcpy(v44, (const void *)(*(_QWORD *)(a1 + 48) + 552 * v19), 0x221uLL);
    if (*(_QWORD *)(a2 + 16))
    {
      v23 = sub_39228(v44[0]);
      if ((v24 & 1) != 0)
      {
        v25 = v41;
        v26 = *(_QWORD *)(a2 + 56) + *(_QWORD *)(v41 + 72) * v23;
        v27 = v38;
        v28 = v43;
        (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v38, v26, v43);
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v42, v27, v28);
        sub_41300((uint64_t)v37, (uint64_t)v45, &qword_1F5F80);
        sub_41300((uint64_t)v45, (uint64_t)v46, &qword_1F5F80);
        if (v46[6] >> 1 != 0xFFFFFFFFLL)
        {
          sub_12A934((uint64_t)v46, (uint64_t)v47);
          sub_12A934((uint64_t)v47, (uint64_t)v48);
          __asm { BR              X9 }
        }
        sub_6100(v44);
        v12 = v35;
        a2 = v36;
        v16 = v34;
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
        sub_6228(v44);
      }
    }
  }
  v22 = v17 + 1;
  if (v17 + 1 >= v16)
    return swift_release(a1);
  v21 = *(_QWORD *)(v12 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 2;
  if (v17 + 2 >= v16)
    return swift_release(a1);
  v21 = *(_QWORD *)(v12 + 8 * v22);
  if (v21)
    goto LABEL_16;
  v22 = v17 + 3;
  if (v17 + 3 >= v16)
    return swift_release(a1);
  v21 = *(_QWORD *)(v12 + 8 * v22);
  if (v21)
  {
LABEL_16:
    v17 = v22;
    goto LABEL_17;
  }
  v29 = v17 + 4;
  if (v17 + 4 < v16)
  {
    v21 = *(_QWORD *)(v12 + 8 * v29);
    v17 += 4;
    if (!v21)
    {
      while (1)
      {
        v17 = v29 + 1;
        if (__OFADD__(v29, 1))
          break;
        if (v17 >= v16)
          return swift_release(a1);
        v21 = *(_QWORD *)(v12 + 8 * v17);
        ++v29;
        if (v21)
          goto LABEL_17;
      }
LABEL_30:
      __break(1u);
      JUMPOUT(0x12A8C4);
    }
    goto LABEL_17;
  }
  return swift_release(a1);
}

uint64_t sub_12A8D4(uint64_t *a1)
{
  uint64_t v1;

  return sub_4CEAC(*a1, *(_QWORD **)(v1 + 16), **(_QWORD **)(v1 + 24), *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8), *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16));
}

uint64_t type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(uint64_t a1)
{
  uint64_t result;

  result = qword_1F6030;
  if (!qword_1F6030)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BooksBackendSeedBasedRecommendationService.Errors);
  return result;
}

uint64_t sub_12A934(uint64_t a1, uint64_t a2)
{
  initializeWithTake for InternalAffinitySource(a2, a1);
  return a2;
}

_QWORD *sub_12A970(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  return a1;
}

double sub_12A9B8@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *a1;
  v6 = *(unsigned __int8 *)(v4 + *(int *)(type metadata accessor for SeedBasedRecommendationRequest(0) + 32));
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v6;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = xmmword_18CB70;
  *(_OWORD *)(a2 + 32) = xmmword_19B3F0;
  *(_QWORD *)(a2 + 48) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0x3FF0000000000000;
  return result;
}

uint64_t sub_12AA28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_17260C(a1, *(_QWORD *)(v2 + 16), *(_QWORD **)(v2 + 24), a2);
}

uint64_t *sub_12AA40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v12 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 7u:
        v13 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_12AB70(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      result = swift_bridgeObjectRelease(*a1);
      break;
    case 7:
      v4 = type metadata accessor for UUID(0);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_12ABE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 1u:
      v10 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_7;
    case 2u:
      v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_7;
    case 7u:
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v7 = a1;
      v8 = a3;
      v9 = 7;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_12ACE4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_26AA0((uint64_t)a1, type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_8;
      case 1u:
        v10 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_8;
      case 2u:
        v11 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v11);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_8;
      case 7u:
        v12 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v7 = a1;
        v8 = a3;
        v9 = 7;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_12ADF8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 7)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 7);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_12AE84(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_26AA0((uint64_t)a1, type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 7)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 7);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_12AF28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 8, v4);
    return 0;
  }
  return result;
}

uint64_t sub_12AFB4(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

_QWORD *Array<A>.positionScored()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (!v1)
    return v2;
  v3 = a1;
  v34[1] = v34;
  v42 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  sub_342E4(0, 0, 0);
  v4 = (uint64_t)v42;
  swift_bridgeObjectRetain(v3);
  v5 = 0;
  v6 = v1 - 1;
  v36 = v3;
  do
  {
    v41 = *(_QWORD *)(v3 + v5 + 32);
    v40 = *(unsigned __int8 *)(v3 + v5 + 40);
    v39 = *(_QWORD *)(v3 + v5 + 48);
    v38 = *(unsigned __int8 *)(v3 + v5 + 56);
    v7 = *(_QWORD *)(v3 + v5 + 64);
    v8 = *(_BYTE *)(v3 + v5 + 72);
    v9 = *(_QWORD *)(v3 + v5 + 80);
    v37 = *(_QWORD *)(v3 + v5 + 88);
    v10 = *(_QWORD *)(v3 + v5 + 96);
    sub_40554(v7, v8);
    v42 = (_QWORD *)v4;
    v12 = *(_QWORD *)(v4 + 16);
    v11 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    if (v12 >= v11 >> 1)
    {
      sub_342E4(v11 > 1, v12 + 1, 1);
      v4 = (uint64_t)v42;
    }
    *(_QWORD *)(v4 + 16) = v12 + 1;
    v13 = v4 + 80 * v12;
    *(_QWORD *)(v13 + 32) = v41;
    *(_BYTE *)(v13 + 40) = v40;
    *(_QWORD *)(v13 + 48) = v39;
    *(_BYTE *)(v13 + 56) = v38;
    *(_QWORD *)(v13 + 64) = v7;
    *(_BYTE *)(v13 + 72) = v8;
    v3 = v36;
    v14 = v37;
    *(_QWORD *)(v13 + 80) = v9;
    *(_QWORD *)(v13 + 88) = v14;
    *(_QWORD *)(v13 + 96) = v10;
    *(double *)(v13 + 104) = (double)v6;
    v5 += 72;
    --v6;
  }
  while (v6 != -1);
  swift_bridgeObjectRelease_n(v3, 2);
  v15 = (double *)sub_27798((void (*)(uint64_t *__return_ptr, uint64_t *))sub_12B32C, 0, v4);
  v16 = *((_QWORD *)v15 + 2);
  if (!v16)
  {
    swift_bridgeObjectRelease();
LABEL_15:
    swift_release(v4);
    return _swiftEmptyArrayStorage;
  }
  v17 = v15[4];
  v18 = v16 - 1;
  if (v18)
  {
    v19 = v15 + 5;
    do
    {
      v20 = *v19++;
      v21 = v20;
      if (v17 < v20)
        v17 = v21;
      --v18;
    }
    while (v18);
  }
  swift_bridgeObjectRelease();
  if (v17 == 0.0)
    goto LABEL_15;
  v23 = *(_QWORD *)(v4 + 16);
  if (!v23)
    goto LABEL_15;
  v42 = _swiftEmptyArrayStorage;
  sub_342E4(0, v23, 0);
  v24 = 0;
  v2 = v42;
  v35 = v4;
  do
  {
    v41 = *(_QWORD *)(v4 + v24 + 32);
    v40 = *(unsigned __int8 *)(v4 + v24 + 40);
    v39 = *(_QWORD *)(v4 + v24 + 48);
    v38 = *(unsigned __int8 *)(v4 + v24 + 56);
    v25 = *(_QWORD *)(v4 + v24 + 64);
    v26 = *(_BYTE *)(v4 + v24 + 72);
    v27 = *(_QWORD *)(v4 + v24 + 80);
    v37 = *(_QWORD *)(v4 + v24 + 88);
    v28 = *(_QWORD *)(v4 + v24 + 96);
    v29 = *(double *)(v4 + v24 + 104);
    sub_40554(v25, v26);
    v42 = v2;
    v30 = v2[2];
    v31 = v2[3];
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    if (v30 >= v31 >> 1)
    {
      sub_342E4(v31 > 1, v30 + 1, 1);
      v2 = v42;
    }
    v2[2] = v30 + 1;
    v32 = &v2[10 * v30];
    v32[4] = v41;
    *((_BYTE *)v32 + 40) = v40;
    v32[6] = v39;
    *((_BYTE *)v32 + 56) = v38;
    v32[8] = v25;
    *((_BYTE *)v32 + 72) = v26;
    v33 = v37;
    v32[10] = v27;
    v32[11] = v33;
    v32[12] = v28;
    *((double *)v32 + 13) = v29 / v17;
    v24 += 80;
    --v23;
    v4 = v35;
  }
  while (v23);
  swift_release(v35);
  return v2;
}

double sub_12B32C@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  result = fabs(*(double *)(a1 + 72));
  *a2 = result;
  return result;
}

_QWORD *sub_12B33C(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_340F4(0, v1, 0);
    v3 = (_QWORD *)(a1 + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v7 = _swiftEmptyArrayStorage[2];
      v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v7 >= v6 >> 1)
        sub_340F4(v6 > 1, v7 + 1, 1);
      v3 += 5;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_12B410(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  int *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_341E4(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (int *)(a1 + 48);
    do
    {
      v6 = *v4;
      v4 += 10;
      v5 = v6;
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_341E4(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      *((_DWORD *)result + v8 + 8) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

unint64_t sub_12B4CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  Swift::String v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  Swift::String v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  char *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v75 = a1;
  v5 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Int32List(0);
  v70 = *(_QWORD *)(v5 - 8);
  v71 = v5;
  v6 = __chkstk_darwin(v5);
  v69 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v67 - v8;
  v10 = sub_5EDC(&qword_1F14D8);
  v11 = sub_5EDC(&qword_1F14E0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(char **)(v12 + 72);
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 32) & ~v14;
  v73 = v13;
  v16 = swift_allocObject(v10, v15 + 4 * (_QWORD)v13, v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_18CB60;
  v72 = v16;
  v17 = (char *)(v16 + v15);
  v18 = v16 + v15 + *(int *)(v11 + 48);
  v76 = a2;
  v77 = a3;
  swift_bridgeObjectRetain(a3);
  v19._countAndFlagsBits = 0x44496D6164612ELL;
  v19._object = (void *)0xE700000000000000;
  String.append(_:)(v19);
  v20 = v77;
  *(_QWORD *)v17 = v76;
  *((_QWORD *)v17 + 1) = v20;
  v21 = v75;
  v22 = sub_12B33C(v75);
  static Com_Apple_News_Algorithms_Proto_Model_Feature.fromStrings(_:)((uint64_t)v22, v18);
  swift_bridgeObjectRelease(v22);
  v23 = &v13[(_QWORD)v17];
  v74 = v11;
  v76 = a2;
  v77 = a3;
  swift_bridgeObjectRetain(a3);
  v24._countAndFlagsBits = 0x6F6964754173692ELL;
  v24._object = (void *)0xEC0000006B6F6F42;
  String.append(_:)(v24);
  v25 = v77;
  *(_QWORD *)v23 = v76;
  *((_QWORD *)v23 + 1) = v25;
  v26 = sub_12B410(v21);
  Com_Apple_News_Algorithms_Proto_Model_Int32List.init()();
  v27 = swift_bridgeObjectRetain(v26);
  v28 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v27);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v28);
  v29 = v69;
  v30 = v70;
  v31 = v71;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v69, v9, v71);
  Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v29);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v31);
  swift_bridgeObjectRelease(v26);
  v69 = v17;
  v70 = a2;
  v32 = &v17[2 * (_QWORD)v73];
  v76 = a2;
  v77 = a3;
  v71 = a3;
  swift_bridgeObjectRetain(a3);
  v33._countAndFlagsBits = 0x444965726E65672ELL;
  v33._object = (void *)0xE900000000000073;
  String.append(_:)(v33);
  v34 = v77;
  *(_QWORD *)v32 = v76;
  *((_QWORD *)v32 + 1) = v34;
  v35 = *(_QWORD *)(v21 + 16);
  if (v35)
  {
    v67 = v32;
    swift_bridgeObjectRetain(v21);
    v36 = (uint64_t *)(v21 + 64);
    v37 = _swiftEmptyArrayStorage;
    v68 = v35;
    do
    {
      v38 = *(v36 - 3);
      v39 = *v36;
      v76 = *(v36 - 1);
      v40 = v76;
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v39);
      v41 = sub_5EDC(&qword_1F03E0);
      v42 = sub_67850();
      v43 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v41, v42);
      v45 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
        v37 = sub_2FCA8(0, v37[2] + 1, 1, v37);
      v47 = v37[2];
      v46 = v37[3];
      if (v47 >= v46 >> 1)
        v37 = sub_2FCA8((_QWORD *)(v46 > 1), v47 + 1, 1, v37);
      v37[2] = v47 + 1;
      v48 = &v37[2 * v47];
      v48[4] = v43;
      v48[5] = v45;
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease(v38);
      v36 += 5;
      --v35;
    }
    while (v35);
    v21 = v75;
    swift_bridgeObjectRelease(v75);
    v32 = v67;
    v35 = v68;
  }
  else
  {
    v37 = _swiftEmptyArrayStorage;
  }
  static Com_Apple_News_Algorithms_Proto_Model_Feature.fromStrings(_:)((uint64_t)v37, (uint64_t)&v32[*(int *)(v74 + 48)]);
  swift_bridgeObjectRelease(v37);
  v49 = &v69[3 * (_QWORD)v73];
  v76 = v70;
  v77 = v71;
  swift_bridgeObjectRetain(v71);
  v50._countAndFlagsBits = 0x49726F687475612ELL;
  v50._object = (void *)0xEA00000000007344;
  String.append(_:)(v50);
  v51 = v77;
  *(_QWORD *)v49 = v76;
  *((_QWORD *)v49 + 1) = v51;
  if (v35)
  {
    v73 = v49;
    swift_bridgeObjectRetain(v21);
    v52 = (uint64_t *)(v21 + 64);
    v53 = _swiftEmptyArrayStorage;
    do
    {
      v54 = *(v52 - 3);
      v56 = *(v52 - 1);
      v76 = *v52;
      v55 = v76;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v55);
      v57 = sub_5EDC(&qword_1F03E0);
      v58 = sub_67850();
      v59 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v57, v58);
      v61 = v60;
      v62 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
        v53 = sub_2FCA8(0, v53[2] + 1, 1, v53);
      v64 = v53[2];
      v63 = v53[3];
      if (v64 >= v63 >> 1)
        v53 = sub_2FCA8((_QWORD *)(v63 > 1), v64 + 1, 1, v53);
      v53[2] = v64 + 1;
      v65 = &v53[2 * v64];
      v65[4] = v59;
      v65[5] = v61;
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v56);
      swift_bridgeObjectRelease(v54);
      v52 += 5;
      v35 = v62 - 1;
    }
    while (v62 != 1);
    swift_bridgeObjectRelease(v75);
    v49 = v73;
  }
  else
  {
    v53 = _swiftEmptyArrayStorage;
  }
  static Com_Apple_News_Algorithms_Proto_Model_Feature.fromStrings(_:)((uint64_t)v53, (uint64_t)&v49[*(int *)(v74 + 48)]);
  swift_bridgeObjectRelease(v53);
  return sub_52F64(v72);
}

uint64_t type metadata accessor for SignerMiddleware()
{
  return objc_opt_self(_TtC20BooksPersonalization16SignerMiddleware);
}

uint64_t sub_12BA18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1F6110 + dword_1F6110);
  v9 = (_QWORD *)swift_task_alloc(unk_1F6114);
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = sub_80450;
  return v11(a1, a4, a5);
}

uint64_t sub_12BA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[9] = a3;
  v4[10] = v3;
  v4[7] = a1;
  v4[8] = a2;
  v5 = type metadata accessor for URLRequest(0);
  v4[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[12] = v6;
  v4[13] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_12BAFC, 0, 0);
}

uint64_t sub_12BAFC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  int *v12;
  Swift::String v13;
  Swift::String_optional v14;
  _QWORD *v15;
  uint64_t (*v17)(uint64_t);

  v1 = URLRequest.httpBody.getter();
  v0[14] = v1;
  v0[15] = v2;
  if (v2 >> 60 == 15)
  {
    v3 = (int *)v0[8];
    v17 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
    v4 = (_QWORD *)swift_task_alloc(v3[1]);
    v0[18] = v4;
    *v4 = v0;
    v4[1] = sub_12BD48;
    v5 = v0[7];
  }
  else
  {
    v6 = v1;
    v7 = v2;
    sub_49F4((_QWORD *)(v0[10] + 16), *(_QWORD *)(v0[10] + 40));
    sub_66E68(v6, v7);
    v9 = v8;
    v11 = v10;
    v12 = (int *)v0[8];
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[12] + 16))(v0[13], v0[7], v0[11]);
    v13._object = (void *)0x80000000001A2BE0;
    v14.value._countAndFlagsBits = v9;
    v14.value._object = v11;
    v13._countAndFlagsBits = 0xD000000000000017;
    URLRequest.setValue(_:forHTTPHeaderField:)(v14, v13);
    swift_bridgeObjectRelease();
    v17 = (uint64_t (*)(uint64_t))((char *)v12 + *v12);
    v15 = (_QWORD *)swift_task_alloc(v12[1]);
    v0[16] = v15;
    *v15 = v0;
    v15[1] = sub_12BC68;
    v5 = v0[13];
  }
  return v17(v5);
}

uint64_t sub_12BC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = (_QWORD *)*v4;
  v5[2] = v4;
  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v5[6] = v3;
  v6 = v5[16];
  v5[17] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_12BDC0;
  else
    v7 = sub_12BCD8;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_12BCD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  sub_DD668(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v5, v4, v6);
}

uint64_t sub_12BD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *(_QWORD *)(*v4 + 144);
  v9 = *v4;
  swift_task_dealloc(v8);
  v10 = swift_task_dealloc(*(_QWORD *)(v9 + 104));
  if (!v3)
  {
    v10 = a1;
    v11 = a2;
    v12 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v10, v11, v12);
}

uint64_t sub_12BDC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 96);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  sub_DD668(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Sequence<>.grouped<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[10];

  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  v8[5] = a6;
  v8[6] = a7;
  v8[7] = a1;
  v8[8] = a2;
  return Sequence<>.grouped<A>(by:)((uint64_t)sub_12C8E4, (uint64_t)v8, a3, a4, a5, a6, a7);
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[8];
  _BYTE v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5);
  v15 = type metadata accessor for Set(0, AssociatedTypeWitness, a7);
  v31 = Dictionary.init()(a4, v15, a6);
  v24 = a3;
  v25 = a4;
  v26 = a5;
  v27 = a6;
  v28 = a7;
  v29 = a1;
  v30 = a2;
  v16 = type metadata accessor for Dictionary(0, a4, v15, a6);
  Sequence.reduce<A>(into:_:)(&v32, &v31, sub_12D154, v23, a3, v16, a5);
  v17 = v32;
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v22[5] = a6;
  v22[6] = a7;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v15);
  v19 = type metadata accessor for NonEmpty(0, v15, WitnessTable);
  v20 = Dictionary.compactMapValues<A>(_:)(sub_12D184, v22, v17, a4, v15, v19, a6);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t Sequence.grouped<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[8];

  v7[2] = a3;
  v7[3] = a4;
  v7[4] = a5;
  v7[5] = a6;
  v7[6] = a1;
  v7[7] = a2;
  return Sequence.grouped<A>(by:)((uint64_t)sub_12CA48, (uint64_t)v7, a3, a4, a5, a6);
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[6];
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  swift_getAssociatedTypeWitness(255, a5);
  v12 = type metadata accessor for Array(0);
  v27 = Dictionary.init()(a4, v12, a6);
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a1;
  v26 = a2;
  v13 = type metadata accessor for Dictionary(0, a4, v12, a6);
  Sequence.reduce<A>(into:_:)(&v28, &v27, sub_12D0F8, v20, a3, v13, a5);
  v14 = v28;
  v19[2] = a3;
  v19[3] = a4;
  v19[4] = a5;
  v19[5] = a6;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v12);
  v16 = type metadata accessor for NonEmpty(0, v12, WitnessTable);
  v17 = Dictionary.compactMapValues<A>(_:)(sub_12D138, v19, v14, a4, v12, v16, a6);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t Sequence.mappedUniquely<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t v16;

  v15 = Set.init()(a4, a6);
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  v12 = type metadata accessor for Set(0, a4, a6);
  Sequence.reduce<A>(into:_:)(&v16, &v15, sub_12CA58, v14, a3, v12, a5);
  return v16;
}

uint64_t Sequence<>.uniqued()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t v11;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2);
  v10 = Set.init()(AssociatedTypeWitness, a3);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v7 = type metadata accessor for Set(0, AssociatedTypeWitness, a3);
  Sequence.reduce<A>(into:_:)(&v11, &v10, sub_12D050, v9, a1, v7, a2);
  return v11;
}

uint64_t Sequence.hashedUniquely<A>(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  _QWORD v16[6];
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v18 = a3;
  v19 = a4;
  v20 = a5;
  v21 = a6;
  v22 = a1;
  v23 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a4, AssociatedTypeWitness, 0, 0);
  v24 = sub_68458((void (*)(char *, char *))sub_12D06C, (uint64_t)v17, a3, TupleTypeMetadata2, (uint64_t)&type metadata for Never, a5, (uint64_t)&protocol witness table for Never, v12);
  v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a6;
  v13 = type metadata accessor for Array(0);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  return Dictionary.init<A>(_:uniquingKeysWith:)(&v24, sub_12D090, v16, a4, AssociatedTypeWitness, v13, a6, WitnessTable);
}

void *sub_12C228(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v11 = sub_E2D0C(a5, a5);
  v12 = swift_allocObject(v11, ((*(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80) + (unint64_t)*(unsigned int *)(v11 + 48)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80) | (unint64_t)*(unsigned __int16 *)(v11 + 52));
  v13 = static Array._adoptStorage(_:count:)(v12, 1);
  a2(a1);
  v14 = sub_682F8(v13);
  if (Array._getCount()())
    v15 = (void *)sub_E3020(v14, a5, a7);
  else
    v15 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_12C2F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t WitnessTable;
  _QWORD v17[10];

  v17[9] = a3(a2);
  v17[2] = a5;
  v17[3] = a6;
  v17[4] = a7;
  v17[5] = a8;
  v17[6] = a1;
  v17[7] = a2;
  v14 = type metadata accessor for Set(0, a6, a8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v14);
  Sequence.forEach(_:)(sub_12D388, v17, v14, WitnessTable);
  return swift_bridgeObjectRelease();
}

uint64_t sub_12C3BC(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(char *, char *, uint64_t);
  _QWORD *v24;
  _QWORD *v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  _BOOL8 v31;
  Swift::Int v32;
  char v33;
  uint64_t v34;
  Swift::Bool v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t result;
  uint64_t v45;
  void (*v46)(char *, unint64_t, uint64_t);
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;

  v52 = a1;
  v53 = (char *)a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6);
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v14 = __chkstk_darwin(AssociatedTypeWitness);
  v16 = (char *)&v45 - v15;
  v17 = __chkstk_darwin(v14);
  v47 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v20 = (char *)&v45 - v19;
  v51 = v21;
  v46 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
  v46((char *)&v45 - v19, v52, a5);
  v22 = (_QWORD *)swift_allocObject(&unk_1E7A60, 48, 7);
  v22[2] = a4;
  v22[3] = a5;
  v22[4] = a6;
  v22[5] = a7;
  v23 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v49 = AssociatedTypeWitness;
  v50 = v16;
  v24 = v22;
  v23(v16, v53, AssociatedTypeWitness);
  v25 = (_QWORD *)swift_allocObject(&unk_1E7A88, 64, 7);
  v25[2] = a4;
  v25[3] = a5;
  v25[4] = a6;
  v25[5] = a7;
  v25[6] = sub_12D3B8;
  v25[7] = v24;
  v48 = v24;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  v54 = *a2;
  v27 = v54;
  *a2 = 0x8000000000000000;
  v53 = v20;
  v28 = sub_12D340((uint64_t)v20, a5, a7);
  v30 = *(_QWORD *)(v27 + 16);
  v31 = (v29 & 1) == 0;
  v32 = v30 + v31;
  if (__OFADD__(v30, v31))
  {
    __break(1u);
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
    __break(1u);
    return result;
  }
  v33 = v29;
  v52 = v28;
  v34 = type metadata accessor for Array(255);
  v49 = a7;
  type metadata accessor for _NativeDictionary(0, a5, v34, a7);
  v35 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32);
  v36 = v54;
  if (v35)
  {
    v52 = sub_12D340((uint64_t)v53, a5, v49);
    if ((v33 & 1) != (v37 & 1))
      goto LABEL_9;
  }
  *a2 = v36;
  swift_bridgeObjectRelease();
  v38 = *a2;
  v39 = *a2;
  if ((v33 & 1) != 0)
  {
    swift_bridgeObjectRetain(v39);
    v40 = v51;
    v41 = (uint64_t)v53;
  }
  else
  {
    v42 = swift_bridgeObjectRetain(v39);
    v54 = ((uint64_t (*)(uint64_t))v25[6])(v42);
    v43 = v47;
    v41 = (uint64_t)v53;
    v46(v47, (unint64_t)v53, a5);
    _NativeDictionary._insert(at:key:value:)(v52, v43, &v54, v38, a5, v34, v49);
    v40 = v51;
  }
  swift_bridgeObjectRelease();
  Array.append(_:)(v50, v34);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, a5);
  swift_release(v25);
  return swift_release(v48);
}

uint64_t sub_12C6B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v7;

  v7 = *a1;
  swift_getAssociatedTypeWitness(255, a4);
  v4 = type metadata accessor for Array(0);
  swift_bridgeObjectRetain(v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
  return NonEmpty.init(_:)(&v7, v4, WitnessTable);
}

uint64_t sub_12C754@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  v10 = a5 + *(int *)(swift_getTupleTypeMetadata2(0, a3, AssociatedTypeWitness, 0, 0) + 48);
  a2(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(v10, a1, AssociatedTypeWitness);
}

uint64_t sub_12C810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v20;

  v10 = *(_QWORD *)(a6 - 8);
  v11 = __chkstk_darwin(a1);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  v17(v16);
  v18 = type metadata accessor for Set(0, a6, a8);
  Set.insert(_:)(v15, v13, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, a6);
}

void *sub_12C8E4(uint64_t a1)
{
  uint64_t v1;

  return sub_12C228(a1, *(void (**)(uint64_t))(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

void *sub_12CA48(uint64_t a1)
{
  uint64_t v1;

  return sub_12C228(a1, *(void (**)(uint64_t))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_12CA58(uint64_t a1, uint64_t a2)
{
  return sub_12D114(a1, a2, sub_12C810);
}

uint64_t sub_12CA74(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t WitnessTable;
  _QWORD v18[12];

  v18[11] = a3(a2);
  v18[2] = a5;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = a9;
  v18[7] = a1;
  v18[8] = a2;
  v15 = type metadata accessor for Set(0, a6, a8);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v15);
  Sequence.forEach(_:)(sub_12D1A4, v18, v15, WitnessTable);
  return swift_bridgeObjectRelease();
}

uint64_t sub_12CB48(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  Swift::Int v40;
  char v41;
  uint64_t v42;
  Swift::Bool v43;
  uint64_t v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t result;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v65 = a8;
  v66 = a6;
  v70 = a3;
  v68 = a2;
  v11 = *(_QWORD *)(a5 - 8);
  v12 = __chkstk_darwin(a1);
  v59 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v58 - v14;
  v69 = (uint64_t)&v58 - v14;
  v17 = v16;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v18);
  v20 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v21 = __chkstk_darwin(AssociatedTypeWitness);
  v23 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v61 = (char *)&v58 - v24;
  v64 = v11;
  v58 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v58(v15, a1, a5);
  v25 = (_QWORD *)swift_allocObject(&unk_1E7A10, 56, 7);
  v25[2] = v17;
  v25[3] = a5;
  v26 = v17;
  v27 = v65;
  v28 = v66;
  v25[4] = v66;
  v25[5] = a7;
  v25[6] = v27;
  v62 = v23;
  v63 = v20;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v30 = v23;
  v31 = a5;
  v67 = AssociatedTypeWitness;
  v29(v30, v70, AssociatedTypeWitness);
  v32 = (_QWORD *)swift_allocObject(&unk_1E7A38, 72, 7);
  v32[2] = v26;
  v32[3] = a5;
  v32[4] = v28;
  v32[5] = a7;
  v32[6] = v27;
  v32[7] = sub_12D1D8;
  v32[8] = v25;
  v33 = v68;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v68);
  v71 = *v33;
  v35 = v71;
  *v33 = 0x8000000000000000;
  v70 = v31;
  v36 = sub_12D340(v69, v31, a7);
  v38 = *(_QWORD *)(v35 + 16);
  v39 = (v37 & 1) == 0;
  v40 = v38 + v39;
  if (__OFADD__(v38, v39))
  {
    __break(1u);
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v70);
    __break(1u);
    return result;
  }
  v41 = v37;
  v66 = v36;
  v42 = type metadata accessor for Set(255, v67, v27);
  v65 = a7;
  type metadata accessor for _NativeDictionary(0, v70, v42, a7);
  v43 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v40);
  v44 = v71;
  if (v43)
  {
    v66 = sub_12D340(v69, v70, v65);
    if ((v41 & 1) != (v45 & 1))
      goto LABEL_9;
  }
  v60 = v42;
  v46 = v68;
  *v68 = v44;
  swift_bridgeObjectRelease();
  v47 = *v46;
  if ((v41 & 1) != 0)
  {
    swift_bridgeObjectRetain(v47);
    v48 = v64;
    v49 = v69;
    v50 = v67;
    v51 = v60;
  }
  else
  {
    v52 = swift_bridgeObjectRetain(v47);
    v71 = ((uint64_t (*)(uint64_t))v32[7])(v52);
    v53 = v59;
    v49 = v69;
    v54 = v70;
    v58(v59, v69, v70);
    v55 = v54;
    v51 = v60;
    _NativeDictionary._insert(at:key:value:)(v66, v53, &v71, v47, v55, v60, v65);
    v48 = v64;
    v50 = v67;
  }
  swift_bridgeObjectRelease();
  v56 = v61;
  Set.insert(_:)(v61, v62, v51);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v56, v50);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v70);
  swift_release(v32);
  return swift_release(v25);
}

uint64_t sub_12CEB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v11;

  v11 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4);
  v8 = type metadata accessor for Set(0, AssociatedTypeWitness, a6);
  swift_bridgeObjectRetain(v11);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for Set<A>, v8);
  return NonEmpty.init(_:)(&v11, v8, WitnessTable);
}

uint64_t sub_12CF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v16 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, AssociatedTypeWitness);
  v14 = type metadata accessor for Set(0, AssociatedTypeWitness, a5);
  Set.insert(_:)(v13, v11, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, AssociatedTypeWitness);
}

uint64_t sub_12D050(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_12CF54(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_12D06C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_12C754(a1, *(void (**)(uint64_t))(v2 + 48), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_12D090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v2 + 32));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a2, a1, AssociatedTypeWitness);
}

uint64_t sub_12D0F8(uint64_t a1, uint64_t a2)
{
  return sub_12D114(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_12C2F8);
}

uint64_t sub_12D114(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_12D138(uint64_t *a1)
{
  uint64_t *v1;

  return sub_12C6B8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_12D154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_12CA74(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_12D184(uint64_t *a1)
{
  uint64_t *v1;

  return sub_12CEB0(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_12D1A4(uint64_t a1)
{
  uint64_t v1;

  return sub_12CB48(a1, *(uint64_t **)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_12D1C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_12D1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t AssociatedTypeWitness;

  v1 = *(_QWORD *)(v0 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v0 + 32));
  return Set.init()(AssociatedTypeWitness, v1);
}

uint64_t sub_12D218()
{
  uint64_t v0;

  return swift_deallocObject(v0, 72, 7);
}

unint64_t sub_12D228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  char v16;
  uint64_t v18;
  uint64_t v19;

  v5 = v4;
  v18 = a1;
  v19 = a4;
  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = -1 << *(_BYTE *)(v5 + 32);
  v12 = v11 & ~v10;
  if (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v10;
    v14 = *(_QWORD *)(v7 + 72);
    v15 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v15(v9, *(_QWORD *)(v5 + 48) + v14 * v12, a3);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v18, a3, *(_QWORD *)(v19 + 8));
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
      if ((v16 & 1) != 0)
        break;
      v12 = (v12 + 1) & v13;
    }
    while (((*(_QWORD *)(v5 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  }
  return v12;
}

unint64_t sub_12D340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;

  v4 = v3;
  v8 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v4 + 40), a2, a3);
  return sub_12D228(a1, v8, a2, a3);
}

uint64_t sub_12D388(unint64_t a1)
{
  uint64_t v1;

  return sub_12C3BC(a1, *(uint64_t **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_12D3A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_12D3B8()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v0 + 32));
  return static Array._allocateUninitialized(_:)(0, AssociatedTypeWitness);
}

uint64_t sub_12D3F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

void *TabiConfiguration.init(version:packageBaseURLString:packageAssetIDs:mlComputeUnits:eventAggregationConfiguration:genreRecommendationConfiguration:bookSuggestionsConfiguration:bookScoringConfiguration:seedBookRecommendationConfiguration:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, __int128 *a10, __int128 *a11, __int128 *a12, __int128 *a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD __src[54];
  _BYTE v45[192];

  sub_7328C(a8, (uint64_t)v45);
  v32 = a10[1];
  v33 = *a10;
  v18 = *((_QWORD *)a10 + 5);
  v31 = *((_QWORD *)a10 + 4);
  v35 = a11[1];
  v36 = *a11;
  v19 = *((_QWORD *)a11 + 5);
  v34 = *((_QWORD *)a11 + 4);
  v20 = *((_QWORD *)a12 + 3);
  v37 = *((_QWORD *)a12 + 2);
  v40 = *a13;
  v38 = *a12;
  v39 = a13[1];
  v21 = 0x4649434550534E55;
  v29 = a13[2];
  v30 = a13[3];
  if (a2)
    v21 = a1;
  v22 = 0xEB00000000444549;
  v23 = *((_QWORD *)a13 + 8);
  if (a2)
    v22 = a2;
  v24 = 0xD000000000000023;
  if (a4)
    v24 = a3;
  v25 = 0x80000000001A0300;
  v26 = _swiftEmptyArrayStorage;
  if (a4)
    v25 = a4;
  if (a5)
    v26 = a5;
  v27 = a6;
  if ((a7 & 1) != 0)
    v27 = 0;
  __src[0] = v21;
  __src[1] = v22;
  __src[2] = v24;
  __src[3] = v25;
  __src[4] = v26;
  __src[5] = v27;
  sub_7328C((uint64_t)v45, (uint64_t)&__src[6]);
  *(_OWORD *)&__src[29] = v33;
  *(_OWORD *)&__src[31] = v32;
  __src[33] = v31;
  __src[34] = v18;
  *(_OWORD *)&__src[35] = v36;
  *(_OWORD *)&__src[37] = v35;
  __src[39] = v34;
  __src[40] = v19;
  *(_OWORD *)&__src[41] = v38;
  __src[43] = v37;
  __src[44] = v20;
  *(_OWORD *)&__src[45] = v40;
  *(_OWORD *)&__src[47] = v39;
  *(_OWORD *)&__src[49] = v29;
  *(_OWORD *)&__src[51] = v30;
  __src[53] = v23;
  return memcpy(a9, __src, 0x1B0uLL);
}

uint64_t TabiConfiguration.mlComputeUnits.getter()
{
  uint64_t v0;

  if ((unint64_t)(*(_QWORD *)(v0 + 40) - 1) >= 3)
    return 0;
  else
    return *(_QWORD *)(v0 + 40);
}

uint64_t TabiConfiguration.init(with:)()
{
  unint64_t v0;
  uint64_t v1;
  _BYTE *v2;

  swift_bridgeObjectRelease();
  v0 = sub_12D62C();
  v1 = swift_allocError(&type metadata for TabiConfiguration.Errors, v0, 0, 0);
  *v2 = 1;
  return swift_willThrow(v1);
}

unint64_t sub_12D62C()
{
  unint64_t result;

  result = qword_1F6118;
  if (!qword_1F6118)
  {
    result = swift_getWitnessTable(&unk_19B7FC, &type metadata for TabiConfiguration.Errors);
    atomic_store(result, (unint64_t *)&qword_1F6118);
  }
  return result;
}

uint64_t sub_12D670(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_12D6A4 + 4 * byte_19B540[a1]))(0x6E6F6973726576, 0xE700000000000000);
}

unint64_t sub_12D6A4()
{
  return 0xD000000000000014;
}

uint64_t sub_12D6C0()
{
  return 0x416567616B636170;
}

uint64_t sub_12D6E4()
{
  return 0x7475706D6F436C6DLL;
}

unint64_t sub_12D708()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_12D78C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_12D7C0 + 4 * byte_19B549[a1]))(0x6E6F6973726576, 0xE700000000000000);
}

unint64_t sub_12D7C0()
{
  return 0xD000000000000014;
}

uint64_t sub_12D7DC()
{
  return 0x416567616B636170;
}

uint64_t sub_12D800()
{
  return 0x7475706D6F436C6DLL;
}

unint64_t sub_12D824()
{
  return 0xD00000000000001DLL;
}

void sub_12D8A8(char *a1)
{
  sub_79C84(*a1);
}

Swift::Int sub_12D8B4()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  sub_F8B58((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_12D8F8(uint64_t a1)
{
  char *v1;

  sub_F8B58(a1, *v1);
}

Swift::Int sub_12D900(uint64_t a1)
{
  char *v1;
  char v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_F8B58((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_12D940@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_12F898(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_12D96C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_12D670(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_12D994()
{
  unsigned __int8 *v0;

  return sub_12D78C(*v0);
}

unint64_t sub_12D99C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_12F898(a1);
  *a2 = result;
  return result;
}

void sub_12D9C0(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_12D9CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_12DED4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_12D9F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_12DED4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TabiConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[192];
  char v87;

  v3 = sub_5EDC(&qword_1F6120);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v74 = v1[2];
  v75 = v7;
  v9 = v1[3];
  v71 = v1[4];
  v72 = v1[5];
  v73 = v9;
  sub_7328C((uint64_t)(v1 + 6), (uint64_t)v86);
  v10 = v1[29];
  v69 = v1[30];
  v70 = v10;
  v11 = v1[31];
  v12 = v1[32];
  v67 = v1[33];
  v68 = v12;
  v13 = v1[34];
  v65 = v11;
  v66 = v13;
  v14 = v1[36];
  v59 = v1[35];
  v60 = v14;
  v15 = v1[37];
  v16 = v1[38];
  v63 = v1[39];
  v64 = v16;
  v17 = v1[40];
  v61 = v15;
  v62 = v17;
  v18 = v1[42];
  v55 = v1[41];
  v56 = v18;
  v19 = v1[44];
  v57 = v1[43];
  v58 = v19;
  v20 = v1[46];
  v46 = v1[45];
  v47 = v20;
  v21 = v1[47];
  v22 = v1[48];
  v53 = v1[49];
  v54 = v22;
  v23 = v1[50];
  v51 = v1[51];
  v52 = v23;
  v50 = v1[52];
  v24 = v1[53];
  v48 = v21;
  v49 = v24;
  v25 = a1[3];
  v26 = a1[4];
  sub_49F4(a1, v25);
  v27 = sub_12DED4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TabiConfiguration.CodingKeys, &type metadata for TabiConfiguration.CodingKeys, v27, v25, v26);
  LOBYTE(v77) = 0;
  v28 = v76;
  KeyedEncodingContainer.encode(_:forKey:)(v75, v8, &v77, v3);
  if (!v28)
  {
    v29 = v71;
    v30 = v72;
    v31 = v69;
    v32 = v70;
    LOBYTE(v77) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v74, v73, &v77, v3);
    v77 = v29;
    v87 = 2;
    v33 = sub_5EDC(&qword_1F03E0);
    v34 = sub_F4AF0(&qword_1F03E8, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v77, &v87, v3, v33, v34);
    LOBYTE(v77) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v30, &v77, v3);
    sub_7328C((uint64_t)v86, (uint64_t)&v77);
    v87 = 4;
    v35 = sub_5EDC(&qword_1F19F8);
    v36 = sub_12E028(&qword_1F6130, &qword_1F19F8, (void (*)(void))sub_12DF18);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v77, &v87, v3, v35, v36);
    v77 = v32;
    v78 = v31;
    v79 = v65;
    v80 = v68;
    v81 = v67;
    v82 = v66;
    v87 = 5;
    v37 = sub_5EDC(&qword_1F6140);
    v38 = sub_12E028(&qword_1F6148, &qword_1F6140, (void (*)(void))sub_12DF5C);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v77, &v87, v3, v37, v38);
    v77 = v59;
    v78 = v60;
    v79 = v61;
    v80 = v64;
    v81 = v63;
    v82 = v62;
    v87 = 6;
    v39 = sub_5EDC(&qword_1F6158);
    v40 = sub_12E028(&qword_1F6160, &qword_1F6158, (void (*)(void))sub_12DFA0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v77, &v87, v3, v39, v40);
    v77 = v55;
    v78 = v56;
    v79 = v57;
    v80 = v58;
    v87 = 7;
    v41 = sub_5EDC(&qword_1F6170);
    v42 = sub_12E028(&qword_1F6178, &qword_1F6170, (void (*)(void))sub_12DFE4);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v77, &v87, v3, v41, v42);
    v77 = v46;
    v78 = v47;
    v79 = v48;
    v80 = v54;
    v81 = v53;
    v82 = v52;
    v83 = v51;
    v84 = v50;
    v85 = v49;
    v87 = 8;
    v43 = sub_5EDC(&qword_1F6188);
    v44 = sub_12E028(&qword_1F6190, &qword_1F6188, (void (*)(void))sub_12E08C);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v77, &v87, v3, v43, v44);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_12DED4()
{
  unint64_t result;

  result = qword_1F6128;
  if (!qword_1F6128)
  {
    result = swift_getWitnessTable(&unk_19B7AC, &type metadata for TabiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F6128);
  }
  return result;
}

unint64_t sub_12DF18()
{
  unint64_t result;

  result = qword_1F6138;
  if (!qword_1F6138)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.EventAggregationConfiguration, &type metadata for TabiConfiguration.EventAggregationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F6138);
  }
  return result;
}

unint64_t sub_12DF5C()
{
  unint64_t result;

  result = qword_1F6150;
  if (!qword_1F6150)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.GenreRecommendationConfiguration, &type metadata for TabiConfiguration.GenreRecommendationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F6150);
  }
  return result;
}

unint64_t sub_12DFA0()
{
  unint64_t result;

  result = qword_1F6168;
  if (!qword_1F6168)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.BookSuggestionsConfiguration, &type metadata for TabiConfiguration.BookSuggestionsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F6168);
  }
  return result;
}

unint64_t sub_12DFE4()
{
  unint64_t result;

  result = qword_1F6180;
  if (!qword_1F6180)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.BookScoringConfiguration, &type metadata for TabiConfiguration.BookScoringConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F6180);
  }
  return result;
}

uint64_t sub_12E028(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_12E08C()
{
  unint64_t result;

  result = qword_1F6198;
  if (!qword_1F6198)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.SeedBookRecommendationConfiguration, &type metadata for TabiConfiguration.SeedBookRecommendationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F6198);
  }
  return result;
}

uint64_t TabiConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[54];
  _OWORD v66[4];
  uint64_t v67;
  _QWORD v68[4];
  _QWORD v69[6];
  _QWORD v70[6];
  _BYTE v71[191];
  char v72;
  _QWORD v73[24];
  _QWORD *v74;

  v63 = a2;
  v64 = sub_5EDC(&qword_1F61A0);
  v4 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1;
  sub_49F4(a1, v7);
  v10 = sub_12DED4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TabiConfiguration.CodingKeys, &type metadata for TabiConfiguration.CodingKeys, v10, v7, v8);
  if (v2)
  {
    v11 = a1;
  }
  else
  {
    v12 = v4;
    LOBYTE(v65[0]) = 0;
    v13 = v64;
    v14 = v6;
    v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v64);
    v17 = v16;
    LOBYTE(v65[0]) = 1;
    v11 = v9;
    v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v13);
    v62 = v15;
    v19 = v18;
    v20 = sub_5EDC(&qword_1F03E0);
    LOBYTE(v65[0]) = 2;
    v21 = sub_F4AF0(&qword_1F0410, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v74, v20, v65, v13, v20, v21);
    v22 = v74;
    LOBYTE(v65[0]) = 3;
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v65, v13);
    v59 = v24;
    v60 = v23;
    v72 = 4;
    v25 = sub_12E6CC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v73, &type metadata for TabiConfiguration.EventAggregationConfiguration, &v72, v13, &type metadata for TabiConfiguration.EventAggregationConfiguration, v25);
    sub_7328C((uint64_t)v73, (uint64_t)v71);
    LOBYTE(v65[0]) = 5;
    v27 = sub_12E710();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v70, &type metadata for TabiConfiguration.GenreRecommendationConfiguration, v65, v13, &type metadata for TabiConfiguration.GenreRecommendationConfiguration, v27);
    v53 = v70[0];
    v54 = v70[1];
    v55 = v70[2];
    v56 = v70[3];
    v57 = v70[4];
    v58 = v70[5];
    LOBYTE(v65[0]) = 6;
    v28 = sub_12E7BC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v69, &type metadata for TabiConfiguration.BookSuggestionsConfiguration, v65, v13, &type metadata for TabiConfiguration.BookSuggestionsConfiguration, v28);
    v47 = v69[0];
    v48 = v69[1];
    v49 = v69[2];
    v50 = v69[3];
    v51 = v69[4];
    v52 = v69[5];
    LOBYTE(v65[0]) = 7;
    v29 = sub_12E800();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v68, &type metadata for TabiConfiguration.BookScoringConfiguration, v65, v13, &type metadata for TabiConfiguration.BookScoringConfiguration, v29);
    v44 = v68[1];
    v45 = v68[0];
    v43 = v68[2];
    v46 = v68[3];
    LOBYTE(v65[0]) = 8;
    v30 = sub_12E844();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v66, &type metadata for TabiConfiguration.SeedBookRecommendationConfiguration, v65, v13, &type metadata for TabiConfiguration.SeedBookRecommendationConfiguration, v30);
    v41 = v66[1];
    v42 = v66[0];
    v39 = v66[3];
    v40 = v66[2];
    v31 = v22;
    v32 = v67;
    v33 = 0x4649434550534E55;
    if (v17)
      v33 = v62;
    v34 = 0xEB00000000444549;
    if (v17)
      v34 = v17;
    v35 = 0xD000000000000023;
    if (v19)
      v35 = v61;
    v36 = 0x80000000001A0300;
    v37 = _swiftEmptyArrayStorage;
    if (v19)
      v36 = v19;
    if (v31)
      v37 = v31;
    v65[0] = v33;
    v65[1] = v34;
    v38 = v60;
    if ((v59 & 1) != 0)
      v38 = 0;
    v65[2] = v35;
    v65[3] = v36;
    v65[4] = v37;
    v65[5] = v38;
    sub_7328C((uint64_t)v71, (uint64_t)&v65[6]);
    v65[29] = v53;
    v65[30] = v54;
    v65[31] = v55;
    v65[32] = v56;
    v65[33] = v57;
    v65[34] = v58;
    v65[35] = v47;
    v65[36] = v48;
    v65[37] = v49;
    v65[38] = v50;
    v65[39] = v51;
    v65[40] = v52;
    v65[41] = v45;
    v65[42] = v44;
    v65[43] = v43;
    v65[44] = v46;
    *(_OWORD *)&v65[45] = v42;
    *(_OWORD *)&v65[47] = v41;
    *(_OWORD *)&v65[49] = v40;
    *(_OWORD *)&v65[51] = v39;
    v65[53] = v32;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v13);
    memcpy(v63, v65, 0x1B0uLL);
  }
  return sub_62F8(v11);
}

unint64_t sub_12E6CC()
{
  unint64_t result;

  result = qword_1F61A8;
  if (!qword_1F61A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.EventAggregationConfiguration, &type metadata for TabiConfiguration.EventAggregationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F61A8);
  }
  return result;
}

unint64_t sub_12E710()
{
  unint64_t result;

  result = qword_1F61B0;
  if (!qword_1F61B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.GenreRecommendationConfiguration, &type metadata for TabiConfiguration.GenreRecommendationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F61B0);
  }
  return result;
}

uint64_t *sub_12E754(uint64_t *a1)
{
  sub_5DFC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22]);
  return a1;
}

unint64_t sub_12E7BC()
{
  unint64_t result;

  result = qword_1F61B8;
  if (!qword_1F61B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.BookSuggestionsConfiguration, &type metadata for TabiConfiguration.BookSuggestionsConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F61B8);
  }
  return result;
}

unint64_t sub_12E800()
{
  unint64_t result;

  result = qword_1F61C0;
  if (!qword_1F61C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.BookScoringConfiguration, &type metadata for TabiConfiguration.BookScoringConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F61C0);
  }
  return result;
}

unint64_t sub_12E844()
{
  unint64_t result;

  result = qword_1F61C8;
  if (!qword_1F61C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiConfiguration.SeedBookRecommendationConfiguration, &type metadata for TabiConfiguration.SeedBookRecommendationConfiguration);
    atomic_store(result, (unint64_t *)&qword_1F61C8);
  }
  return result;
}

unint64_t sub_12E894()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F61D0;
  if (!qword_1F61D0)
  {
    v1 = type metadata accessor for TabiPackage(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TabiPackage, v1);
    atomic_store(result, (unint64_t *)&qword_1F61D0);
  }
  return result;
}

uint64_t sub_12E8E8@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  return TabiConfiguration.init(from:)(a1, a2);
}

uint64_t sub_12E8FC(_QWORD *a1)
{
  return TabiConfiguration.encode(to:)(a1);
}

uint64_t destroy for TabiConfiguration(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  v2 = a1[27];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[28]);
  }
  v3 = a1[30];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[32]);
    swift_bridgeObjectRelease(a1[34]);
  }
  v4 = a1[38];
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(a1[40]);
  }
  swift_bridgeObjectRelease(a1[44]);
  result = a1[48];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[50]);
    return swift_bridgeObjectRelease(a1[52]);
  }
  return result;
}

uint64_t initializeWithCopy for TabiConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  v8 = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  if (v8)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    v9 = *(_QWORD *)(a2 + 224);
    *(_QWORD *)(a1 + 216) = v8;
    *(_QWORD *)(a1 + 224) = v9;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v10 = *(_QWORD *)(a2 + 240);
    if (v10)
      goto LABEL_3;
LABEL_6:
    v21 = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 248) = v21;
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    v13 = *(_QWORD *)(a2 + 304);
    if (v13)
      goto LABEL_4;
    goto LABEL_7;
  }
  v16 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v16;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v17 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v17;
  v18 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v18;
  v19 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v19;
  v20 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v20;
  v10 = *(_QWORD *)(a2 + 240);
  if (!v10)
    goto LABEL_6;
LABEL_3:
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v10;
  v11 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v11;
  v12 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = v12;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  v13 = *(_QWORD *)(a2 + 304);
  if (v13)
  {
LABEL_4:
    *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    v14 = *(_QWORD *)(a2 + 312);
    v15 = *(_QWORD *)(a2 + 320);
    *(_QWORD *)(a1 + 304) = v13;
    *(_QWORD *)(a1 + 312) = v14;
    *(_QWORD *)(a1 + 320) = v15;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    goto LABEL_8;
  }
LABEL_7:
  v22 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v22;
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
LABEL_8:
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  v23 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 352) = v23;
  v24 = *(_QWORD *)(a2 + 384);
  swift_bridgeObjectRetain(v23);
  if (v24)
  {
    *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
    v25 = *(_QWORD *)(a2 + 392);
    v26 = *(_QWORD *)(a2 + 400);
    *(_QWORD *)(a1 + 384) = v24;
    *(_QWORD *)(a1 + 392) = v25;
    v27 = *(_QWORD *)(a2 + 408);
    v28 = *(_QWORD *)(a2 + 416);
    *(_QWORD *)(a1 + 400) = v26;
    *(_QWORD *)(a1 + 408) = v27;
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
    v29 = *(_QWORD *)(a2 + 424);
    *(_QWORD *)(a1 + 416) = v28;
    *(_QWORD *)(a1 + 424) = v29;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
  }
  else
  {
    v30 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v30;
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    v31 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v31;
  }
  return a1;
}

_QWORD *assignWithCopy for TabiConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  _OWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _OWORD *v63;
  _OWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v5 = a2[3];
  a1[3] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease();
  v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  v7 = a1 + 6;
  v8 = (__int128 *)(a2 + 6);
  v9 = a2[27];
  if (a1[27])
  {
    if (v9)
    {
      a1[6] = a2[6];
      a1[7] = a2[7];
      a1[8] = a2[8];
      a1[9] = a2[9];
      a1[10] = a2[10];
      a1[11] = a2[11];
      a1[12] = a2[12];
      a1[13] = a2[13];
      a1[14] = a2[14];
      a1[15] = a2[15];
      a1[16] = a2[16];
      a1[17] = a2[17];
      a1[18] = a2[18];
      a1[19] = a2[19];
      a1[20] = a2[20];
      a1[21] = a2[21];
      a1[22] = a2[22];
      a1[23] = a2[23];
      a1[24] = a2[24];
      a1[25] = a2[25];
      a1[26] = a2[26];
      v10 = a2[27];
      a1[27] = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease();
      v11 = a2[28];
      a1[28] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_621C0((uint64_t)(a1 + 6));
      v20 = *((_OWORD *)a2 + 6);
      v22 = *v8;
      v21 = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 6) = v20;
      *v7 = v22;
      *((_OWORD *)a1 + 4) = v21;
      v23 = *((_OWORD *)a2 + 10);
      v25 = *((_OWORD *)a2 + 7);
      v24 = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 10) = v23;
      *((_OWORD *)a1 + 7) = v25;
      *((_OWORD *)a1 + 8) = v24;
      v27 = *((_OWORD *)a2 + 12);
      v26 = *((_OWORD *)a2 + 13);
      v28 = *((_OWORD *)a2 + 11);
      a1[28] = a2[28];
      *((_OWORD *)a1 + 12) = v27;
      *((_OWORD *)a1 + 13) = v26;
      *((_OWORD *)a1 + 11) = v28;
    }
  }
  else if (v9)
  {
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
    v12 = *(_OWORD *)(a2 + 11);
    v13 = *(_OWORD *)(a2 + 13);
    v14 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 15) = v14;
    *(_OWORD *)(a1 + 13) = v13;
    *(_OWORD *)(a1 + 11) = v12;
    v15 = *(_OWORD *)(a2 + 19);
    v16 = *(_OWORD *)(a2 + 21);
    v17 = *(_OWORD *)(a2 + 23);
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(a1 + 23) = v17;
    *(_OWORD *)(a1 + 21) = v16;
    *(_OWORD *)(a1 + 19) = v15;
    v18 = a2[27];
    a1[27] = v18;
    v19 = a2[28];
    a1[28] = v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  else
  {
    v29 = *v8;
    v30 = *((_OWORD *)a2 + 4);
    v31 = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 6) = v31;
    *v7 = v29;
    *((_OWORD *)a1 + 4) = v30;
    v32 = *((_OWORD *)a2 + 7);
    v33 = *((_OWORD *)a2 + 8);
    v34 = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 10) = v34;
    *((_OWORD *)a1 + 7) = v32;
    *((_OWORD *)a1 + 8) = v33;
    v35 = *((_OWORD *)a2 + 11);
    v36 = *((_OWORD *)a2 + 12);
    v37 = *((_OWORD *)a2 + 13);
    a1[28] = a2[28];
    *((_OWORD *)a1 + 12) = v36;
    *((_OWORD *)a1 + 13) = v37;
    *((_OWORD *)a1 + 11) = v35;
  }
  v38 = a1 + 29;
  v39 = a2 + 29;
  v40 = a2[30];
  if (a1[30])
  {
    if (v40)
    {
      a1[29] = a2[29];
      v41 = a2[30];
      a1[30] = v41;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRelease();
      a1[31] = a2[31];
      v42 = a2[32];
      a1[32] = v42;
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRelease();
      a1[33] = a2[33];
      v43 = a2[34];
      a1[34] = v43;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_621F4(a1 + 29);
      v48 = *(_OWORD *)(a2 + 31);
      v47 = *(_OWORD *)(a2 + 33);
      *v38 = *v39;
      *(_OWORD *)(a1 + 31) = v48;
      *(_OWORD *)(a1 + 33) = v47;
    }
  }
  else if (v40)
  {
    a1[29] = a2[29];
    v44 = a2[30];
    a1[30] = v44;
    a1[31] = a2[31];
    v45 = a2[32];
    a1[32] = v45;
    a1[33] = a2[33];
    v46 = a2[34];
    a1[34] = v46;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v46);
  }
  else
  {
    v49 = *v39;
    v50 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 31) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 33) = v50;
    *v38 = v49;
  }
  v51 = a1 + 35;
  v52 = a2 + 35;
  v53 = a2[38];
  if (a1[38])
  {
    if (v53)
    {
      a1[35] = a2[35];
      a1[36] = a2[36];
      a1[37] = a2[37];
      v54 = a2[38];
      a1[38] = v54;
      swift_bridgeObjectRetain(v54);
      swift_bridgeObjectRelease();
      a1[39] = a2[39];
      v55 = a2[40];
      a1[40] = v55;
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_62228((uint64_t)(a1 + 35));
      v59 = *(_OWORD *)(a2 + 37);
      v58 = *(_OWORD *)(a2 + 39);
      *v51 = *v52;
      *(_OWORD *)(a1 + 37) = v59;
      *(_OWORD *)(a1 + 39) = v58;
    }
  }
  else if (v53)
  {
    a1[35] = a2[35];
    a1[36] = a2[36];
    a1[37] = a2[37];
    v56 = a2[38];
    a1[38] = v56;
    a1[39] = a2[39];
    v57 = a2[40];
    a1[40] = v57;
    swift_bridgeObjectRetain(v56);
    swift_bridgeObjectRetain(v57);
  }
  else
  {
    v60 = *v52;
    v61 = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 37) = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 39) = v61;
    *v51 = v60;
  }
  a1[41] = a2[41];
  a1[42] = a2[42];
  a1[43] = a2[43];
  v62 = a2[44];
  a1[44] = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease();
  v63 = a1 + 45;
  v64 = a2 + 45;
  v65 = a2[48];
  if (a1[48])
  {
    if (v65)
    {
      a1[45] = a2[45];
      a1[46] = a2[46];
      a1[47] = a2[47];
      v66 = a2[48];
      a1[48] = v66;
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRelease();
      a1[49] = a2[49];
      v67 = a2[50];
      a1[50] = v67;
      swift_bridgeObjectRetain(v67);
      swift_bridgeObjectRelease();
      a1[51] = a2[51];
      v68 = a2[52];
      a1[52] = v68;
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRelease();
      a1[53] = a2[53];
    }
    else
    {
      sub_6225C(a1 + 45);
      *v63 = *v64;
      v73 = *(_OWORD *)(a2 + 49);
      v72 = *(_OWORD *)(a2 + 51);
      v74 = *(_OWORD *)(a2 + 47);
      a1[53] = a2[53];
      *(_OWORD *)(a1 + 49) = v73;
      *(_OWORD *)(a1 + 51) = v72;
      *(_OWORD *)(a1 + 47) = v74;
    }
  }
  else if (v65)
  {
    a1[45] = a2[45];
    a1[46] = a2[46];
    a1[47] = a2[47];
    v69 = a2[48];
    a1[48] = v69;
    a1[49] = a2[49];
    v70 = a2[50];
    a1[50] = v70;
    a1[51] = a2[51];
    v71 = a2[52];
    a1[52] = v71;
    a1[53] = a2[53];
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v71);
  }
  else
  {
    *v63 = *v64;
    v75 = *(_OWORD *)(a2 + 47);
    v76 = *(_OWORD *)(a2 + 49);
    v77 = *(_OWORD *)(a2 + 51);
    a1[53] = a2[53];
    *(_OWORD *)(a1 + 49) = v76;
    *(_OWORD *)(a1 + 51) = v77;
    *(_OWORD *)(a1 + 47) = v75;
  }
  return a1;
}

void *initializeWithTake for TabiConfiguration(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1B0uLL);
}

uint64_t assignWithTake for TabiConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 216))
  {
    v6 = *(_QWORD *)(a2 + 216);
    if (v6)
    {
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(_QWORD *)(a1 + 216) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_621C0(a1 + 48);
  }
  v7 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  v10 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v10;
  v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
LABEL_6:
  if (*(_QWORD *)(a1 + 240))
  {
    v12 = *(_QWORD *)(a2 + 240);
    if (v12)
    {
      *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
      *(_QWORD *)(a1 + 240) = v12;
      swift_bridgeObjectRelease();
      v13 = *(_QWORD *)(a2 + 256);
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      *(_QWORD *)(a1 + 256) = v13;
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(a2 + 272);
      *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
      *(_QWORD *)(a1 + 272) = v14;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_621F4((_QWORD *)(a1 + 232));
  }
  v15 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = v15;
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
LABEL_11:
  if (*(_QWORD *)(a1 + 304))
  {
    v16 = *(_QWORD *)(a2 + 304);
    if (v16)
    {
      *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
      *(_QWORD *)(a1 + 304) = v16;
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a2 + 320);
      *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
      *(_QWORD *)(a1 + 320) = v17;
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_62228(a1 + 280);
  }
  v18 = *(_OWORD *)(a2 + 296);
  *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = v18;
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
LABEL_16:
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRelease();
  if (!*(_QWORD *)(a1 + 384))
  {
LABEL_20:
    v22 = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    *(_OWORD *)(a1 + 408) = v22;
    *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
    v23 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v23;
    return a1;
  }
  v19 = *(_QWORD *)(a2 + 384);
  if (!v19)
  {
    sub_6225C((_QWORD *)(a1 + 360));
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 384) = v19;
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = v20;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = v21;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabiConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 432))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabiConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 424) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 432) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 432) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabiConfiguration()
{
  return &type metadata for TabiConfiguration;
}

uint64_t getEnumTagSinglePayload for TabiConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TabiConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_12F62C + 4 * byte_19B557[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_12F660 + 4 * byte_19B552[v4]))();
}

uint64_t sub_12F660(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12F668(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x12F670);
  return result;
}

uint64_t sub_12F67C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x12F684);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_12F688(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_12F690(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabiConfiguration.CodingKeys()
{
  return &type metadata for TabiConfiguration.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TabiConfiguration.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_12F6F8 + 4 * byte_19B561[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_12F72C + 4 * byte_19B55C[v4]))();
}

uint64_t sub_12F72C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12F734(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x12F73CLL);
  return result;
}

uint64_t sub_12F748(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x12F750);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_12F754(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_12F75C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TabiConfiguration.Errors()
{
  return &type metadata for TabiConfiguration.Errors;
}

unint64_t sub_12F77C()
{
  unint64_t result;

  result = qword_1F61D8;
  if (!qword_1F61D8)
  {
    result = swift_getWitnessTable(&unk_19B694, &type metadata for TabiConfiguration.Errors);
    atomic_store(result, (unint64_t *)&qword_1F61D8);
  }
  return result;
}

unint64_t sub_12F7C4()
{
  unint64_t result;

  result = qword_1F61E0;
  if (!qword_1F61E0)
  {
    result = swift_getWitnessTable(&unk_19B784, &type metadata for TabiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F61E0);
  }
  return result;
}

unint64_t sub_12F80C()
{
  unint64_t result;

  result = qword_1F61E8;
  if (!qword_1F61E8)
  {
    result = swift_getWitnessTable(&unk_19B6BC, &type metadata for TabiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F61E8);
  }
  return result;
}

unint64_t sub_12F854()
{
  unint64_t result;

  result = qword_1F61F0;
  if (!qword_1F61F0)
  {
    result = swift_getWitnessTable(&unk_19B6E4, &type metadata for TabiConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F61F0);
  }
  return result;
}

unint64_t sub_12F898(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA6C0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t sub_12F8E0(uint64_t a1)
{
  return sub_12F9B8(a1, 0xD000000000000010, 0x80000000001A2C90, &qword_1F61F8);
}

uint64_t sub_12F904(uint64_t a1)
{
  return sub_12F9B8(a1, 0xD000000000000016, 0x80000000001A2C00, &qword_1F6200);
}

uint64_t sub_12F928(uint64_t a1)
{
  return sub_12F9B8(a1, 0xD000000000000021, 0x80000000001A2C60, &qword_1F6208);
}

uint64_t sub_12F94C(uint64_t a1)
{
  return sub_12F9B8(a1, 0xD00000000000001ELL, 0x80000000001A2C20, &qword_1F6210);
}

uint64_t sub_12F970(uint64_t a1)
{
  return sub_12F9B8(a1, 0xD000000000000016, 0x80000000001A2C40, &qword_1F6218);
}

uint64_t sub_12F994(uint64_t a1)
{
  return sub_12F9B8(a1, 0xD000000000000024, 0x80000000001A2CB0, &qword_1F6220);
}

uint64_t sub_12F9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;

  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v8 = objc_msgSend(v7, "bundleIdentifier");

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

  }
  else
  {
    v11 = 0x80000000001A0280;
    v9 = 0xD000000000000010;
  }
  sub_6789C();
  result = OS_os_log.init(subsystem:category:)(v9, v11, a2, a3);
  *a4 = result;
  return result;
}

BooksPersonalization::CollectionSource_optional __swiftcall CollectionSource.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::CollectionSource_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA7B8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

_UNKNOWN **static CollectionSource.allCases.getter()
{
  return &off_1DA850;
}

uint64_t CollectionSource.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_12FB20 + 4 * byte_19B840[*v0]))(0xD000000000000013, 0x800000000019EE20);
}

uint64_t sub_12FB20()
{
  return 0x495041616964656DLL;
}

uint64_t sub_12FB38()
{
  return 0x747369486B6F6F62;
}

uint64_t sub_12FB58(uint64_t a1)
{
  return a1 + 15;
}

uint64_t sub_12FB70()
{
  return 1768055156;
}

void sub_12FB80(char *a1)
{
  sub_79EC0(*a1);
}

unint64_t sub_12FB90()
{
  unint64_t result;

  result = qword_1F6228;
  if (!qword_1F6228)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionSource, &type metadata for CollectionSource);
    atomic_store(result, (unint64_t *)&qword_1F6228);
  }
  return result;
}

void sub_12FBD4()
{
  char *v0;

  sub_52D5C(*v0);
}

void sub_12FBDC(uint64_t a1)
{
  char *v1;

  sub_F8C94(a1, *v1);
}

void sub_12FBE4(uint64_t a1)
{
  char *v1;

  sub_152650(a1, *v1);
}

BooksPersonalization::CollectionSource_optional sub_12FBEC(Swift::String *a1)
{
  return CollectionSource.init(rawValue:)(*a1);
}

uint64_t sub_12FBF8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CollectionSource.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unint64_t sub_12FC20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F6230;
  if (!qword_1F6230)
  {
    v1 = sub_5F68(&qword_1F6238);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F6230);
  }
  return result;
}

void sub_12FC6C(_QWORD *a1@<X8>)
{
  *a1 = &off_1DA878;
}

unint64_t sub_12FC80()
{
  unint64_t result;

  result = qword_1F6240;
  if (!qword_1F6240)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionSource, &type metadata for CollectionSource);
    atomic_store(result, (unint64_t *)&qword_1F6240);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CollectionSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_12FD10 + 4 * byte_19B84A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_12FD44 + 4 * byte_19B845[v4]))();
}

uint64_t sub_12FD44(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_12FD4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x12FD54);
  return result;
}

uint64_t sub_12FD60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x12FD68);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_12FD6C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_12FD74(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CollectionSource()
{
  return &type metadata for CollectionSource;
}

uint64_t sub_12FD90(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 2656) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 2672) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 2688) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 2648) = v4;
  *(_QWORD *)(v5 + 2640) = a3;
  *(_QWORD *)(v5 + 2632) = a1;
  *(_OWORD *)(v5 + 2704) = v7;
  *(_QWORD *)(v5 + 2720) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v5 + 2921) = *(_QWORD *)(a3 + 32);
  *(_BYTE *)(v5 + 2929) = *(_BYTE *)(a3 + 40);
  *(_BYTE *)(v5 + 2930) = *(_BYTE *)(a3 + 48);
  *(_BYTE *)(v5 + 2931) = *(_BYTE *)(a3 + 49);
  *(_QWORD *)(v5 + 2728) = *(_QWORD *)(a3 + 56);
  *(_WORD *)(v5 + 2932) = *(_WORD *)(a3 + 64);
  v8 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(v5 + 2736) = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(v5 + 2744) = v8;
  *(_BYTE *)(v5 + 2934) = *a4;
  return swift_task_switch(sub_12FE18, 0, 0);
}

uint64_t sub_12FE18()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))((char *)&dword_1F3EA8 + dword_1F3EA8);
  v1 = (_QWORD *)swift_task_alloc(unk_1F3EAC);
  *(_QWORD *)(v0 + 2752) = v1;
  *v1 = v0;
  v1[1] = sub_12FE88;
  return v3(v0 + 2920);
}

uint64_t sub_12FE88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2752);
  *(_QWORD *)(*(_QWORD *)v1 + 2760) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_130E90;
  else
    v3 = sub_12FEEC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_12FEEC()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v1 = *(unsigned __int8 *)(v0 + 2920);
  if (v1 == 4)
    __asm { BR              X10 }
  v2 = sub_131528();
  v3 = swift_allocError(&type metadata for BookRecommendationServiceError, v2, 0, 0);
  *v4 = v1;
  swift_willThrow(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_130A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2768);
  *(_QWORD *)(*v2 + 2776) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_130E9C;
  }
  else
  {
    *(_QWORD *)(v4 + 2784) = a1;
    v6 = sub_130AB4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_130AB4()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 2632) = *(_BYTE *)(v0 + 2935);
  sub_62F8((_QWORD *)(v0 + 2344));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2784));
}

uint64_t sub_130AF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2792);
  *(_QWORD *)(*v2 + 2800) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_130ED0;
  }
  else
  {
    *(_QWORD *)(v4 + 2808) = a1;
    v6 = sub_130B6C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_130B6C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 2632) = *(_BYTE *)(v0 + 2936);
  sub_62F8((_QWORD *)(v0 + 2464));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2808));
}

uint64_t sub_130BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2816);
  *(_QWORD *)(*v2 + 2824) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_130F04;
  }
  else
  {
    *(_QWORD *)(v4 + 2832) = a1;
    v6 = sub_130C24;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_130C24()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 2632) = *(_BYTE *)(v0 + 2937);
  sub_62F8((_QWORD *)(v0 + 2384));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2832));
}

uint64_t sub_130C68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2840);
  *(_QWORD *)(*v2 + 2848) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_130F38;
  }
  else
  {
    *(_QWORD *)(v4 + 2856) = a1;
    v6 = sub_130CDC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_130CDC()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 2632) = *(_BYTE *)(v0 + 2938);
  sub_62F8((_QWORD *)(v0 + 2424));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2856));
}

uint64_t sub_130D20(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2864);
  *(_QWORD *)(*v2 + 2872) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_130F6C;
  }
  else
  {
    *(_QWORD *)(v4 + 2880) = a1;
    v6 = sub_130D94;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_130D94()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 2632) = *(_BYTE *)(v0 + 2939);
  sub_62F8((_QWORD *)(v0 + 2304));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2880));
}

uint64_t sub_130DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2888);
  *(_QWORD *)(*v2 + 2896) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_130FA0;
  }
  else
  {
    *(_QWORD *)(v4 + 2904) = a1;
    v6 = sub_130E4C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_130E4C()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 2632) = *(_BYTE *)(v0 + 2940);
  sub_62F8((_QWORD *)(v0 + 2264));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2904));
}

uint64_t sub_130E90()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_130E9C()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_130ED0()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2464));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_130F04()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2384));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_130F38()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2424));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_130F6C()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2304));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_130FA0()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_130FD4@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13[2];
  _BYTE v14[24];

  v5 = *a1;
  swift_beginAccess(a2 + 24, v14, 32, 0);
  v6 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(v6 + 16) && (sub_39A50(v5), (v8 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)v13);
    sub_26DB8(v13, a3);
    return swift_endAccess(v14);
  }
  else
  {
    swift_endAccess(v14);
    v10 = sub_1315EC();
    v11 = swift_allocError(&type metadata for DelegatingCollectionService.Errors, v10, 0, 0);
    *v12 = v5;
    return swift_willThrow(v11);
  }
}

uint64_t sub_13109C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13[2];
  _BYTE v14[24];

  v5 = *a1;
  swift_beginAccess(a2 + 32, v14, 32, 0);
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(v6 + 16) && (sub_39A50(v5), (v8 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)v13);
    sub_26DB8(v13, a3);
    return swift_endAccess(v14);
  }
  else
  {
    swift_endAccess(v14);
    v10 = sub_1315EC();
    v11 = swift_allocError(&type metadata for DelegatingCollectionService.Errors, v10, 0, 0);
    *v12 = v5 | 0x20;
    return swift_willThrow(v11);
  }
}

uint64_t sub_131168@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13[2];
  _BYTE v14[24];

  v5 = *a1;
  swift_beginAccess(a2 + 40, v14, 32, 0);
  v6 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(v6 + 16) && (sub_39A50(v5), (v8 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)v13);
    sub_26DB8(v13, a3);
    return swift_endAccess(v14);
  }
  else
  {
    swift_endAccess(v14);
    v10 = sub_1315EC();
    v11 = swift_allocError(&type metadata for DelegatingCollectionService.Errors, v10, 0, 0);
    *v12 = v5 | 0x40;
    return swift_willThrow(v11);
  }
}

uint64_t sub_131234@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13[2];
  _BYTE v14[24];

  v5 = *a1;
  swift_beginAccess(a2 + 48, v14, 32, 0);
  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v6 + 16) && (sub_39A50(v5), (v8 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)v13);
    sub_26DB8(v13, a3);
    return swift_endAccess(v14);
  }
  else
  {
    swift_endAccess(v14);
    v10 = sub_1315EC();
    v11 = swift_allocError(&type metadata for DelegatingCollectionService.Errors, v10, 0, 0);
    *v12 = v5 | 0x60;
    return swift_willThrow(v11);
  }
}

uint64_t sub_131300@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13[2];
  _BYTE v14[24];

  v5 = *a1;
  swift_beginAccess(a2 + 56, v14, 32, 0);
  v6 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(v6 + 16) && (sub_39A50(v5), (v8 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)v13);
    sub_26DB8(v13, a3);
    return swift_endAccess(v14);
  }
  else
  {
    swift_endAccess(v14);
    v10 = sub_1315EC();
    v11 = swift_allocError(&type metadata for DelegatingCollectionService.Errors, v10, 0, 0);
    *v12 = v5 | 0x80;
    return swift_willThrow(v11);
  }
}

uint64_t sub_1313CC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13[2];
  _BYTE v14[24];

  v5 = *a1;
  swift_beginAccess(a2 + 64, v14, 32, 0);
  v6 = *(_QWORD *)(a2 + 64);
  if (*(_QWORD *)(v6 + 16) && (sub_39A50(v5), (v8 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v6 + 56) + 40 * v7, (uint64_t)v13);
    sub_26DB8(v13, a3);
    return swift_endAccess(v14);
  }
  else
  {
    swift_endAccess(v14);
    v10 = sub_1315EC();
    v11 = swift_allocError(&type metadata for DelegatingCollectionService.Errors, v10, 0, 0);
    *v12 = v5 | 0xA0;
    return swift_willThrow(v11);
  }
}

_QWORD *sub_13149C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  return v0;
}

uint64_t sub_1314E8()
{
  uint64_t v0;

  sub_13149C();
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for DelegatingCollectionService()
{
  return objc_opt_self(_TtC20BooksPersonalization27DelegatingCollectionService);
}

unint64_t sub_131528()
{
  unint64_t result;

  result = qword_1F6320;
  if (!qword_1F6320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookRecommendationServiceError, &type metadata for BookRecommendationServiceError);
    atomic_store(result, (unint64_t *)&qword_1F6320);
  }
  return result;
}

uint64_t sub_13156C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  switch(a7 >> 61)
  {
    case 0uLL:
    case 4uLL:
      goto LABEL_5;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      result = swift_bridgeObjectRetain(a2);
      break;
    case 5uLL:
      swift_bridgeObjectRetain(a2);
      result = swift_bridgeObjectRetain(a3);
      break;
    case 6uLL:
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a4);
      result = a8;
LABEL_5:
      result = swift_bridgeObjectRetain(result);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1315EC()
{
  unint64_t result;

  result = qword_1F6328;
  if (!qword_1F6328)
  {
    result = swift_getWitnessTable(&unk_19BA54, &type metadata for DelegatingCollectionService.Errors);
    atomic_store(result, (unint64_t *)&qword_1F6328);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DelegatingCollectionService.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x1B)
    goto LABEL_17;
  if (a2 + 229 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 229) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 229;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 229;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 229;
  }
LABEL_17:
  v6 = (*a1 & 0x18 | (*a1 >> 5)) ^ 0x1F;
  if (v6 >= 0x1A)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for DelegatingCollectionService.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 229 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 229) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x1B)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x1A)
    return ((uint64_t (*)(void))((char *)&loc_131718 + 4 * byte_19B871[v4]))();
  *a1 = a2 - 27;
  return ((uint64_t (*)(void))((char *)sub_13174C + 4 * byte_19B86C[v4]))();
}

uint64_t sub_13174C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_131754(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x13175CLL);
  return result;
}

uint64_t sub_131774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x13177CLL);
  *(_BYTE *)result = 8 * (((-a2 >> 3) & 3) - 4 * a2);
  return result;
}

uint64_t sub_131780(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_131788(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_131794(unsigned __int8 *a1)
{
  return *a1 >> 5;
}

_BYTE *sub_1317A0(_BYTE *result)
{
  *result &= 0x1Fu;
  return result;
}

_BYTE *sub_1317B0(_BYTE *result, char a2)
{
  *result = *result & 7 | (32 * a2);
  return result;
}

ValueMetadata *type metadata accessor for DelegatingCollectionService.Errors()
{
  return &type metadata for DelegatingCollectionService.Errors;
}

uint64_t sub_1317D4(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 2312) = *(_OWORD *)a1;
  *(_QWORD *)(v3 + 2304) = v2;
  *(_OWORD *)(v3 + 2328) = v4;
  *(_BYTE *)(v3 + 2416) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(v3 + 2417) = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(v3 + 2344) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 2418) = *(_BYTE *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v3 + 2352) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v3 + 2360) = v5;
  memcpy((void *)(v3 + 16), a2, 0x440uLL);
  return swift_task_switch(sub_13185C, 0, 0);
}

uint64_t sub_13185C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  __int128 v15;
  uint64_t v16;
  char v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 2304) + 16);
  *(_QWORD *)(v0 + 2368) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 2376) = v2;
  if (!v2)
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  v17 = *(_BYTE *)(v0 + 2418);
  v3 = *(_BYTE *)(v0 + 2417);
  v4 = *(_BYTE *)(v0 + 2416);
  *(_QWORD *)(v0 + 2384) = 0;
  v16 = *(_QWORD *)(v0 + 2360);
  v5 = *(_QWORD *)(v0 + 2352);
  v6 = *(_QWORD *)(v0 + 2344);
  v7 = *(_QWORD *)(v0 + 2336);
  v15 = *(_OWORD *)(v0 + 2312);
  v8 = v1 + 32;
  v9 = *(_QWORD *)(v0 + 2328);
  swift_bridgeObjectRetain(v1);
  sub_3DD40(v8, v0 + 2264);
  v10 = *(_QWORD *)(v0 + 2288);
  v11 = *(_QWORD *)(v0 + 2296);
  sub_49F4((_QWORD *)(v0 + 2264), v10);
  *(_OWORD *)(v0 + 2192) = v15;
  *(_QWORD *)(v0 + 2208) = v9;
  *(_QWORD *)(v0 + 2216) = v7;
  *(_BYTE *)(v0 + 2224) = v4;
  *(_BYTE *)(v0 + 2225) = v3;
  *(_QWORD *)(v0 + 2232) = v6;
  *(_BYTE *)(v0 + 2240) = v17;
  *(_QWORD *)(v0 + 2248) = v5;
  *(_QWORD *)(v0 + 2256) = v16;
  memcpy((void *)(v0 + 1104), (const void *)(v0 + 16), 0x440uLL);
  v12 = *(int **)(v11 + 8);
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc(v12[1]);
  *(_QWORD *)(v0 + 2392) = v13;
  *v13 = v0;
  v13[1] = sub_1319E8;
  return v18(v0 + 2192, v0 + 1104, v10, v11);
}

uint64_t sub_1319E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 2392);
  *(_QWORD *)(v3 + 2400) = a1;
  *(_QWORD *)(v3 + 2408) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v5 = sub_131C2C;
  }
  else
  {
    v5 = sub_131A60;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_131A60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*__src)(uint64_t, uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(*(_QWORD *)(v0 + 2400) + 16))
  {
    swift_bridgeObjectRelease();
    sub_62F8((_QWORD *)(v0 + 2264));
    v1 = *(_QWORD **)(v0 + 2400);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v1);
  }
  v2 = *(_QWORD *)(v0 + 2384);
  v3 = *(_QWORD *)(v0 + 2376);
  swift_bridgeObjectRelease();
  sub_62F8((_QWORD *)(v0 + 2264));
  if (v2 + 1 == v3)
  {
    swift_bridgeObjectRelease();
    v1 = _swiftEmptyArrayStorage;
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v1);
  }
  v5 = *(_QWORD *)(v0 + 2384) + 1;
  *(_QWORD *)(v0 + 2384) = v5;
  v18 = *(_QWORD *)(v0 + 2360);
  v17 = *(_QWORD *)(v0 + 2352);
  v6 = *(_BYTE *)(v0 + 2418);
  v7 = *(_QWORD *)(v0 + 2344);
  v8 = *(_BYTE *)(v0 + 2417);
  v9 = *(_BYTE *)(v0 + 2416);
  v10 = *(_QWORD *)(v0 + 2336);
  v11 = *(_QWORD *)(v0 + 2328);
  v16 = *(_OWORD *)(v0 + 2312);
  sub_3DD40(*(_QWORD *)(v0 + 2368) + 40 * v5 + 32, v0 + 2264);
  v12 = *(_QWORD *)(v0 + 2288);
  v13 = *(_QWORD *)(v0 + 2296);
  sub_49F4((_QWORD *)(v0 + 2264), v12);
  *(_OWORD *)(v0 + 2192) = v16;
  *(_QWORD *)(v0 + 2208) = v11;
  *(_QWORD *)(v0 + 2216) = v10;
  *(_BYTE *)(v0 + 2224) = v9;
  *(_BYTE *)(v0 + 2225) = v8;
  *(_QWORD *)(v0 + 2232) = v7;
  *(_BYTE *)(v0 + 2240) = v6;
  *(_QWORD *)(v0 + 2248) = v17;
  *(_QWORD *)(v0 + 2256) = v18;
  memcpy((void *)(v0 + 1104), (const void *)(v0 + 16), 0x440uLL);
  v14 = *(int **)(v13 + 8);
  __src = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v14 + *v14);
  v15 = (_QWORD *)swift_task_alloc(v14[1]);
  *(_QWORD *)(v0 + 2392) = v15;
  *v15 = v0;
  v15[1] = sub_1319E8;
  return __src(v0 + 2192, v0 + 1104, v12, v13);
}

uint64_t sub_131C2C()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 2264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for FallingBackSuggestionsService()
{
  return objc_opt_self(_TtC20BooksPersonalization29FallingBackSuggestionsService);
}

uint64_t sub_131C80(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1F63DC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  return sub_1317D4(a1, a2);
}

uint64_t sub_131CE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  uint64_t (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[432];
  uint64_t v54;
  _OWORD v55[27];

  v2 = sub_5EDC(&qword_1F64A0);
  v46 = *(_QWORD *)(v2 - 8);
  v47 = v2;
  __chkstk_darwin(v2);
  v48 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5EDC(&qword_1F2448);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v43 - v8;
  v10 = type metadata accessor for URL(0);
  v50 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v49 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - v13;
  v15 = a1[3];
  v16 = a1[4];
  sub_49F4(a1, v15);
  v17 = type metadata accessor for TabiConfigurationManager();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v17, v15, v16);
  v45 = result;
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v19 = a1[3];
  v20 = a1[4];
  sub_49F4(a1, v19);
  v21 = type metadata accessor for TabiPackageService();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v21, v19, v20);
  v44 = result;
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  sub_14670C((uint64_t)v9);
  v22 = v50;
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  result = v23(v9, 1, v10);
  if ((_DWORD)result == 1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  URL.appendingPathComponent(_:)(0x7365725F69626174);
  v24 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  v25 = v24(v9, v10);
  v50 = URL.path.getter(v25);
  v43 = v26;
  v24(v14, v10);
  sub_14670C((uint64_t)v7);
  result = v23(v7, 1, v10);
  if ((_DWORD)result == 1)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v27 = v49;
  URL.appendingPathComponent(_:)(0x646F6D5F69626174);
  v28 = v24(v7, v10);
  v29 = URL.path.getter(v28);
  v31 = v30;
  v24(v27, v10);
  v32 = a1[3];
  v33 = a1[4];
  sub_49F4(a1, v32);
  v34 = type metadata accessor for UserFeaturesWorkFactory();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v34, v34, v32, v33);
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v35 = result;
  v36 = a1[3];
  v37 = a1[4];
  sub_49F4(a1, v36);
  v38 = sub_5EDC(&qword_1F6490);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v38, v38, v36, v37);
  if (result)
  {
    v39 = result;
    v40 = sub_133694(v55);
    v41 = v48;
    (*(void (**)(char *, _QWORD, uint64_t, double))(v46 + 104))(v48, enum case for WorkService.PerformanceOptimizationPolicy.memory<A, B, C>(_:), v47, v40);
    v54 = v45;
    sub_1336D4((uint64_t)v55, (uint64_t)v53);
    v51 = v35;
    v52 = v44;
    v42 = sub_5EDC(&qword_1F6478);
    swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    return WorkService.init(configurationManager:analyticsEnabled:configuration:packageService:requestProcessor:setup:tabiResourcesContentDirectory:tabiModelsContentDirectory:tabiUserFeaturesFactory:workEventProcessorRegistry:performanceOptimizationPolicy:)(&v54, 1, v53, &v52, 0, 0, 0, 0, v50, v43, v29, v31, &v51, v39, v41);
  }
LABEL_13:
  __break(1u);
  return result;
}

_QWORD *sub_1320B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  _QWORD v19[3];
  uint64_t v20;

  v1 = a1[3];
  v2 = a1[4];
  sub_49F4(a1, v1);
  v3 = sub_5EDC(&qword_1F6480);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v3, v3, v1, v2);
  if (v20)
  {
    v5 = sub_3DD18((uint64_t)v19, v20);
    __chkstk_darwin(v5);
    v7 = (_QWORD *)((char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v8 + 16))(v7);
    v9 = *v7;
    v10 = type metadata accessor for UserEncodingInputFeaturesService(0);
    v18[3] = v10;
    v18[4] = &off_1E0070;
    v18[0] = v9;
    v11 = type metadata accessor for UserFeaturesWorkFactory();
    v12 = (_QWORD *)swift_allocObject(v11, 56, 7);
    v13 = sub_3DD18((uint64_t)v18, v10);
    __chkstk_darwin(v13);
    v15 = (_QWORD *)((char *)v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v16 + 16))(v15);
    v17 = *v15;
    v12[5] = v10;
    v12[6] = &off_1E0070;
    v12[2] = v17;
    sub_62F8(v18);
    sub_62F8(v19);
    return v12;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_132220@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  objc_class *v8;
  id v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t v13;
  id v14;
  objc_super v15;

  v3 = a1[3];
  v4 = a1[4];
  sub_49F4(a1, v3);
  v5 = sub_5EDC(&qword_1F6478);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    v7 = result;
    v8 = (objc_class *)type metadata accessor for TabiGenreRecommendationService();
    v9 = objc_allocWithZone(v8);
    v10 = qword_1F0138;
    v11 = (char *)v9;
    if (v10 != -1)
      swift_once(&qword_1F0138, sub_12F94C);
    v12 = (id)qword_1F6210;
    v13 = static os_log_type_t.debug.getter();
    os_log(_:dso:log:type:_:)("Initializing TabiGenreRecommendationService", 43, 2, &dword_0, v12, v13, _swiftEmptyArrayStorage);

    *(_QWORD *)&v11[OBJC_IVAR____TtC20BooksPersonalization30TabiGenreRecommendationService_workService] = v7;
    swift_retain(v7);

    v15.receiver = v11;
    v15.super_class = v8;
    v14 = objc_msgSendSuper2(&v15, "init");
    result = swift_release(v7);
    a2[3] = v8;
    a2[4] = &protocol witness table for TabiGenreRecommendationService;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_132358@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_class *v12;
  id v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  id v18;
  objc_super v19;
  _QWORD v20[5];

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  v6 = sub_5EDC(&qword_1F6478);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = result;
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_5EDC(&qword_1F1F30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v20, v11, v11, v9, v10);
  if (!v20[3])
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v12 = (objc_class *)type metadata accessor for TabiSuggestionsService();
  v13 = objc_allocWithZone(v12);
  v14 = qword_1F0128;
  v15 = (char *)v13;
  if (v14 != -1)
    swift_once(&qword_1F0128, sub_12F904);
  v16 = (id)qword_1F6200;
  v17 = static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:type:_:)("Initializing TabiSuggestionsService", 35, 2, &dword_0, v16, v17, _swiftEmptyArrayStorage);

  *(_QWORD *)&v15[OBJC_IVAR____TtC20BooksPersonalization22TabiSuggestionsService_workService] = v8;
  sub_3DD40((uint64_t)v20, (uint64_t)&v15[OBJC_IVAR____TtC20BooksPersonalization22TabiSuggestionsService_bookMetadataService]);
  swift_retain(v8);

  v19.receiver = v15;
  v19.super_class = v12;
  v18 = objc_msgSendSuper2(&v19, "init");
  swift_release(v8);
  result = (_QWORD *)sub_62F8(v20);
  a2[3] = v12;
  a2[4] = &protocol witness table for TabiSuggestionsService;
  *a2 = v18;
  return result;
}

_QWORD *sub_1324F0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  v6 = sub_5EDC(&qword_1F6478);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = result;
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_5EDC(&qword_1F1F30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v21, v11, v11, v9, v10);
  if (!v22)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = sub_5EDC(&qword_1F25D0);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(&v19, v14, 12662, 0xE200000000000000, v14, v12, v13);
  if (!v20)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  v15 = type metadata accessor for TabiSeedBookRecommendationService();
  v16 = swift_allocObject(v15, 104, 7);
  if (qword_1F0130 != -1)
    swift_once(&qword_1F0130, sub_12F928);
  v17 = (id)qword_1F6208;
  v18 = static os_log_type_t.default.getter(v17);
  os_log(_:dso:log:type:_:)("Initializing TabiSeedBookRecommendationService", 46, 2, &dword_0, v17, v18, _swiftEmptyArrayStorage);

  *(_QWORD *)(v16 + 16) = v8;
  sub_26DB8(&v21, v16 + 24);
  result = (_QWORD *)sub_26DB8(&v19, v16 + 64);
  a2[3] = v15;
  a2[4] = (uint64_t)&off_1E0028;
  *a2 = v16;
  return result;
}

_QWORD *sub_13269C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F6478);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = result;
  v7 = a1[3];
  v8 = a1[4];
  sub_49F4(a1, v7);
  v9 = sub_5EDC(&qword_1F1F30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v14, v9, v9, v7, v8);
  if (!v15)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v10 = type metadata accessor for TabiBookScorer();
  v11 = swift_allocObject(v10, 64, 7);
  if (qword_1F0128 != -1)
    swift_once(&qword_1F0128, sub_12F904);
  v12 = (id)qword_1F6200;
  v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)("Initializing TabiBookScorer", 27, 2, &dword_0, v12, v13, _swiftEmptyArrayStorage);

  *(_QWORD *)(v11 + 16) = v6;
  sub_26DB8(&v14, v11 + 24);
  return (_QWORD *)v11;
}

uint64_t sub_1327E0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = a1[3];
  v4 = a1[4];
  sub_49F4(a1, v3);
  v5 = type metadata accessor for TabiBookScorer();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v5, v5, v3, v4);
  if (result)
  {
    a2[3] = v5;
    a2[4] = (uint64_t)&protocol witness table for TabiBookScorer;
    *a2 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_132850(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[3];
  v2 = a1[4];
  sub_49F4(a1, v1);
  v3 = sub_5EDC(&qword_1F2160);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v7, v3, v3, v1, v2);
  if (v8)
  {
    v5 = type metadata accessor for TabiConfigurationManager();
    v6 = swift_allocObject(v5, 56, 7);
    sub_26DB8(&v7, v6 + 16);
    return (_QWORD *)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1328DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_49F4(a1, v1);
  v3 = type metadata accessor for TabiConfigurationManager();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for TabiPackageService();
    result = swift_allocObject(v6, 24, 7);
    *(_QWORD *)(result + 16) = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_132948@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  v6 = sub_5EDC(&qword_1F2628);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v6, v6, v4, v5);
  if (!v21[3])
  {
    __break(1u);
    goto LABEL_7;
  }
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_5EDC(&qword_1F25B8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v20, v10, v10, v8, v9);
  if (!v20[3])
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_5EDC(&qword_1F1F30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v19, v13, v13, v11, v12);
  if (!v19[3])
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = a1[3];
  v15 = a1[4];
  sub_49F4(a1, v14);
  v16 = sub_5EDC(&qword_1F2160);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v18, v16, v16, v14, v15);
  if (v18[3])
  {
    v17 = type metadata accessor for UserEncodingInputFeaturesService(0);
    swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    result = (_QWORD *)sub_71A20(v21, v20, v19, v18);
    a2[3] = v17;
    a2[4] = &off_1E0070;
    *a2 = result;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_132ABC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;

  v4 = a1[3];
  v5 = a1[4];
  sub_49F4(a1, v4);
  v6 = sub_5EDC(&qword_1F6478);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v6, v6, v4, v5);
  if (result)
  {
    v8 = result;
    v9 = a1[3];
    v10 = a1[4];
    sub_49F4(a1, v9);
    v11 = sub_5EDC(&qword_1F6480);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v26, v11, v11, v9, v10);
    if (v27)
    {
      v12 = sub_3DD18((uint64_t)v26, v27);
      __chkstk_darwin(v12);
      v14 = (_QWORD *)((char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v15 + 16))(v14);
      v16 = *v14;
      v17 = type metadata accessor for UserEncodingInputFeaturesService(0);
      v25[3] = v17;
      v25[4] = &off_1E0070;
      v25[0] = v16;
      v18 = type metadata accessor for UserEncodingService();
      v19 = (_QWORD *)swift_allocObject(v18, 64, 7);
      v20 = sub_3DD18((uint64_t)v25, v17);
      __chkstk_darwin(v20);
      v22 = (_QWORD *)((char *)v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v23 + 16))(v22);
      v24 = *v22;
      v19[6] = v17;
      v19[7] = &off_1E0070;
      v19[2] = v8;
      v19[3] = v24;
      sub_62F8(v25);
      result = (_QWORD *)sub_62F8(v26);
      a2[3] = v18;
      a2[4] = &protocol witness table for UserEncodingService;
      *a2 = v19;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_132C8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  _QWORD v24[3];
  uint64_t v25;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F6478);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v6 = result;
    v7 = a1[3];
    v8 = a1[4];
    sub_49F4(a1, v7);
    v9 = sub_5EDC(&qword_1F6480);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v24, v9, v9, v7, v8);
    if (v25)
    {
      v10 = sub_3DD18((uint64_t)v24, v25);
      __chkstk_darwin(v10);
      v12 = (_QWORD *)((char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v13 + 16))(v12);
      v14 = *v12;
      v15 = type metadata accessor for UserEncodingInputFeaturesService(0);
      v23[3] = v15;
      v23[4] = &off_1E0070;
      v23[0] = v14;
      v16 = type metadata accessor for BooksTabiWorkServiceStartupTask();
      v17 = (_QWORD *)swift_allocObject(v16, 64, 7);
      v18 = sub_3DD18((uint64_t)v23, v15);
      __chkstk_darwin(v18);
      v20 = (_QWORD *)((char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v21 + 16))(v20);
      v22 = *v20;
      v17[6] = v15;
      v17[7] = &off_1E0070;
      v17[2] = v6;
      v17[3] = v22;
      sub_62F8(v23);
      sub_62F8(v24);
      return v17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_132E40(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  _QWORD v7[5];

  v2 = a2[3];
  v3 = a2[4];
  sub_49F4(a2, v2);
  v4 = type metadata accessor for BooksTabiWorkServiceStartupTask();
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v6 = result;
    v7[3] = v4;
    v7[4] = sub_13364C();
    v7[0] = v6;
    StartupTaskManager.onStartup(run:)(v7);
    return sub_62F8(v7);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_132ED4()
{
  uint64_t v0;

  v0 = sub_5EDC(&qword_1F6490);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return WorkEventProcessorRegistry.init()();
}

uint64_t type metadata accessor for TabiAssembly()
{
  return objc_opt_self(_TtC20BooksPersonalization12TabiAssembly);
}

uint64_t sub_132F30()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  void (*v83)(char *, uint64_t, uint64_t);
  uint64_t (*v84)(char *, uint64_t);
  unsigned int v85;
  uint64_t v86;
  _QWORD v87[3];
  uint64_t v88;
  uint64_t v89;

  v0 = type metadata accessor for CallbackScope(0);
  v86 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v2 = (char *)&v82 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Scope(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = ProxyContainer.public.getter(v5);
  v9 = sub_5EDC(&qword_1F6478);
  v10 = RegistrationContainer.register<A>(_:name:factory:)(v9, 0, 0, sub_131CE0, 0, v9);
  swift_release(v8);
  v11 = enum case for Scope.singleton(_:);
  v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v12(v7, enum case for Scope.singleton(_:), v3);
  v13 = v12;
  v14 = Definition.inScope(_:)(v7);
  swift_release(v14);
  swift_release(v10);
  v15 = *(uint64_t (**)(char *, uint64_t))(v4 + 8);
  v16 = v15(v7, v3);
  v17 = v15;
  v18 = ProxyContainer.public.getter(v16);
  v19 = type metadata accessor for UserFeaturesWorkFactory();
  v20 = RegistrationContainer.register<A>(_:name:factory:)(v19, 0, 0, sub_1320B4, 0, v19);
  swift_release(v18);
  v13(v7, v11, v3);
  v21 = Definition.inScope(_:)(v7);
  swift_release(v21);
  swift_release(v20);
  v22 = v17(v7, v3);
  v23 = ProxyContainer.public.getter(v22);
  v24 = sub_5EDC(&qword_1F5D10);
  v25 = RegistrationContainer.register<A>(_:name:factory:)(v24, 1768055156, 0xE400000000000000, sub_132220, 0, v24);
  swift_release(v23);
  v13(v7, v11, v3);
  v26 = Definition.inScope(_:)(v7);
  swift_release(v26);
  swift_release(v25);
  v27 = v17(v7, v3);
  v28 = ProxyContainer.public.getter(v27);
  v29 = sub_5EDC(&qword_1F10A0);
  v30 = RegistrationContainer.register<A>(_:name:factory:)(v29, 1768055156, 0xE400000000000000, sub_132358, 0, v29);
  swift_release(v28);
  v13(v7, v11, v3);
  v31 = Definition.inScope(_:)(v7);
  swift_release(v31);
  swift_release(v30);
  v32 = v17(v7, v3);
  v33 = ProxyContainer.public.getter(v32);
  v34 = sub_5EDC(&qword_1F25D0);
  v35 = RegistrationContainer.register<A>(_:name:factory:)(v34, 1768055156, 0xE400000000000000, sub_1324F0, 0, v34);
  swift_release(v33);
  v13(v7, v11, v3);
  v36 = Definition.inScope(_:)(v7);
  swift_release(v36);
  swift_release(v35);
  v37 = v17(v7, v3);
  v38 = ProxyContainer.public.getter(v37);
  v39 = type metadata accessor for TabiBookScorer();
  v40 = RegistrationContainer.register<A>(_:name:factory:)(v39, 0, 0, sub_13269C, 0, v39);
  swift_release(v38);
  v13(v7, v11, v3);
  v41 = Definition.inScope(_:)(v7);
  swift_release(v41);
  swift_release(v40);
  v42 = v17(v7, v3);
  v43 = ProxyContainer.public.getter(v42);
  v44 = sub_5EDC(&qword_1F25E8);
  v45 = RegistrationContainer.register<A>(_:name:factory:)(v44, 1768055156, 0xE400000000000000, sub_1327E0, 0, v44);
  swift_release(v43);
  v13(v7, v11, v3);
  v46 = Definition.inScope(_:)(v7);
  swift_release(v46);
  swift_release(v45);
  v47 = v17(v7, v3);
  v48 = ProxyContainer.private.getter(v47);
  v49 = type metadata accessor for TabiConfigurationManager();
  v50 = RegistrationContainer.register<A>(_:name:factory:)(v49, 0, 0, sub_132850, 0, v49);
  swift_release(v48);
  v13(v7, v11, v3);
  v51 = Definition.inScope(_:)(v7);
  swift_release(v51);
  swift_release(v50);
  v52 = v17(v7, v3);
  v53 = ProxyContainer.private.getter(v52);
  v54 = type metadata accessor for TabiPackageService();
  v55 = RegistrationContainer.register<A>(_:name:factory:)(v54, 0, 0, sub_1328DC, 0, v54);
  swift_release(v53);
  v13(v7, v11, v3);
  v56 = Definition.inScope(_:)(v7);
  swift_release(v56);
  swift_release(v55);
  v57 = v17(v7, v3);
  v58 = ProxyContainer.private.getter(v57);
  v59 = sub_5EDC(&qword_1F6480);
  v60 = RegistrationContainer.register<A>(_:name:factory:)(v59, 0, 0, sub_132948, 0, v59);
  swift_release(v58);
  v85 = v11;
  v13(v7, v11, v3);
  v83 = v13;
  v61 = Definition.inScope(_:)(v7);
  swift_release(v61);
  swift_release(v60);
  v62 = v17(v7, v3);
  v84 = v17;
  v63 = ProxyContainer.public.getter(v62);
  v64 = sub_5EDC(&qword_1F6488);
  v65 = RegistrationContainer.register<A>(_:name:factory:)(v64, 0, 0, sub_132ABC, 0, v64);
  swift_release(v63);
  v13(v7, v11, v3);
  v66 = Definition.inScope(_:)(v7);
  swift_release(v66);
  swift_release(v65);
  v67 = v17(v7, v3);
  v68 = ProxyContainer.private.getter(v67);
  v69 = type metadata accessor for BooksTabiWorkServiceStartupTask();
  v70 = RegistrationContainer.register<A>(_:name:factory:)(v69, 0, 0, sub_132C8C, 0, v69);
  swift_release(v70);
  v71 = swift_release(v68);
  ProxyContainer.callback.getter(v87, v71);
  v72 = v88;
  v73 = v89;
  sub_49F4(v87, v88);
  v74 = type metadata accessor for StartupTaskManager(0);
  v75 = v86;
  (*(void (**)(char *, _QWORD, uint64_t))(v86 + 104))(v2, enum case for CallbackScope.any(_:), v0);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v74, v2, sub_132E40, 0, v74, v72, v73);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v2, v0);
  v76 = sub_62F8(v87);
  v77 = ProxyContainer.private.getter(v76);
  v78 = sub_5EDC(&qword_1F6490);
  v79 = RegistrationContainer.register<A>(_:name:factory:)(v78, 0, 0, sub_132ED4, 0, v78);
  swift_release(v77);
  v83(v7, v85, v3);
  v80 = Definition.inScope(_:)(v7);
  swift_release(v80);
  swift_release(v79);
  return v84(v7, v3);
}

unint64_t sub_13364C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F6498;
  if (!qword_1F6498)
  {
    v1 = type metadata accessor for BooksTabiWorkServiceStartupTask();
    result = swift_getWitnessTable(&unk_19C560, v1);
    atomic_store(result, (unint64_t *)&qword_1F6498);
  }
  return result;
}

double sub_133694(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[25] = 0u;
  a1[26] = 0u;
  a1[23] = 0u;
  a1[24] = 0u;
  a1[21] = 0u;
  a1[22] = 0u;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_1336D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F19F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ClientCurrency.Response.init(statusCode:headers:body:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;

  v5 = *a2;
  *a5 = result;
  a5[1] = v5;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t ClientCurrency.Request.init(url:method:headers:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;

  v13 = *a4;
  v14 = (int *)type metadata accessor for ClientCurrency.Request(0);
  v15 = (_QWORD *)(a7 + v14[7]);
  v16 = type metadata accessor for URL(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(a7, a1, v16);
  v18 = (_QWORD *)(a7 + v14[5]);
  *v18 = a2;
  v18[1] = a3;
  *(_QWORD *)(a7 + v14[6]) = v13;
  *v15 = a5;
  v15[1] = a6;
  return result;
}

uint64_t type metadata accessor for ClientCurrency.Request(uint64_t a1)
{
  uint64_t result;

  result = qword_1F6520;
  if (!qword_1F6520)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ClientCurrency.Request);
  return result;
}

uint64_t ClientCurrency.Request.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t ClientCurrency.Request.url.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t ClientCurrency.Request.method.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for ClientCurrency.Request(0) + 20));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t ClientCurrency.Request.method.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for ClientCurrency.Request(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*ClientCurrency.Request.method.modify())(_QWORD)
{
  type metadata accessor for ClientCurrency.Request(0);
  return AuthorRecommendationSource.id.getter;
}

uint64_t ClientCurrency.Request.headers.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ClientCurrency.Request(0) + 24));
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t ClientCurrency.Request.headers.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *(int *)(type metadata accessor for ClientCurrency.Request(0) + 24);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + v3) = v2;
  return result;
}

uint64_t (*ClientCurrency.Request.headers.modify())(_QWORD)
{
  type metadata accessor for ClientCurrency.Request(0);
  return AuthorRecommendationSource.id.getter;
}

uint64_t ClientCurrency.Request.body.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for ClientCurrency.Request(0) + 28);
  v2 = *(_QWORD *)v1;
  sub_1339F4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t sub_1339F4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_3E1D8(result, a2);
  return result;
}

uint64_t ClientCurrency.Request.body.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for ClientCurrency.Request(0) + 28);
  result = sub_DD668(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*ClientCurrency.Request.body.modify())(_QWORD)
{
  type metadata accessor for ClientCurrency.Request(0);
  return AuthorRecommendationSource.id.getter;
}

void ClientCurrency.Request.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = sub_41754(&qword_1F64A8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  v6 = (int *)type metadata accessor for ClientCurrency.Request(0);
  v7 = (uint64_t *)(v1 + v6[5]);
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(a1, v8, v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v2 + v6[6]);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain(v10);
    v12 = (uint64_t *)(v10 + 56);
    do
    {
      v13 = *(v12 - 3);
      v14 = *(v12 - 2);
      v15 = *(v12 - 1);
      v16 = *v12;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v16);
      String.hash(into:)(a1, v13, v14);
      String.hash(into:)(a1, v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 += 4;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  v17 = (uint64_t *)(v2 + v6[7]);
  v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = *v17;
    Hasher._combine(_:)(1u);
    sub_3E1D8(v19, v18);
    Data.hash(into:)(a1, v19, v18);
    sub_DD668(v19, v18);
  }
}

Swift::Int ClientCurrency.Request.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[9];

  v1 = v0;
  Hasher.init(_seed:)(v19, 0);
  v2 = type metadata accessor for URL(0);
  v3 = sub_41754(&qword_1F64A8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v19, v2, v3);
  v4 = (int *)type metadata accessor for ClientCurrency.Request(0);
  v5 = (uint64_t *)(v0 + v4[5]);
  v6 = *v5;
  v7 = v5[1];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v19, v6, v7);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v1 + v4[6]);
  Hasher._combine(_:)(*(_QWORD *)(v8 + 16));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    swift_bridgeObjectRetain(v8);
    v10 = (uint64_t *)(v8 + 56);
    do
    {
      v11 = *(v10 - 3);
      v12 = *(v10 - 2);
      v13 = *(v10 - 1);
      v14 = *v10;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v14);
      String.hash(into:)(v19, v11, v12);
      String.hash(into:)(v19, v13, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 += 4;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
  }
  v15 = (uint64_t *)(v1 + v4[7]);
  v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v17 = *v15;
    Hasher._combine(_:)(1u);
    sub_3E1D8(v17, v16);
    Data.hash(into:)(v19, v17, v16);
    sub_DD668(v17, v16);
  }
  return Hasher._finalize()();
}

Swift::Int sub_133DD4(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v21[9];

  v4 = v2;
  Hasher.init(_seed:)(v21, a1);
  v5 = type metadata accessor for URL(0);
  v6 = sub_41754(&qword_1F64A8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v21, v5, v6);
  v7 = (uint64_t *)(v2 + a2[5]);
  v8 = *v7;
  v9 = v7[1];
  swift_bridgeObjectRetain(v9);
  String.hash(into:)(v21, v8, v9);
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v4 + a2[6]);
  Hasher._combine(_:)(*(_QWORD *)(v10 + 16));
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain(v10);
    v12 = (uint64_t *)(v10 + 56);
    do
    {
      v13 = *(v12 - 3);
      v14 = *(v12 - 2);
      v15 = *(v12 - 1);
      v16 = *v12;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v16);
      String.hash(into:)(v21, v13, v14);
      String.hash(into:)(v21, v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 += 4;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  v17 = (uint64_t *)(v4 + a2[7]);
  v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = *v17;
    Hasher._combine(_:)(1u);
    sub_3E1D8(v19, v18);
    Data.hash(into:)(v21, v19, v18);
    sub_DD668(v19, v18);
  }
  return Hasher._finalize()();
}

uint64_t ClientCurrency.Response.headers.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = v2;
  return result;
}

uint64_t ClientCurrency.Response.body.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_3E1D8(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t ClientCurrency.Response.body.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_3E21C(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

void static ClientCurrency.Response.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*a1 == *a2)
  {
    v3 = a1[2];
    v2 = a1[3];
    if ((sub_C1AC(a1[1], a2[1]) & 1) != 0)
      sub_134760(v3, v2);
  }
}

uint64_t ClientCurrency.Response.hash(into:)(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(*(_QWORD *)(v3 + 16));
  v6 = *(_QWORD *)(v3 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(v3);
    v7 = (uint64_t *)(v3 + 56);
    do
    {
      v8 = *(v7 - 3);
      v9 = *(v7 - 2);
      v10 = *(v7 - 1);
      v11 = *v7;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
      String.hash(into:)(a1, v8, v9);
      String.hash(into:)(a1, v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 += 4;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  sub_3E1D8(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  return sub_3E21C(v4, v5);
}

Swift::Int ClientCurrency.Response.hashValue.getter()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  Swift::UInt v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[9];

  v2 = *v0;
  v1 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)(v12, 0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(*(_QWORD *)(v1 + 16));
  v5 = *(_QWORD *)(v1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(v1);
    v6 = (uint64_t *)(v1 + 56);
    do
    {
      v7 = *(v6 - 3);
      v8 = *(v6 - 2);
      v9 = *(v6 - 1);
      v10 = *v6;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
      String.hash(into:)(v12, v7, v8);
      String.hash(into:)(v12, v9, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 += 4;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  sub_3E1D8(v3, v4);
  Data.hash(into:)(v12, v3, v4);
  sub_3E21C(v3, v4);
  return Hasher._finalize()();
}

Swift::Int sub_134268(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[9];

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  Hasher.init(_seed:)(v13, a1);
  Hasher._combine(_:)(v3);
  v6 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    swift_bridgeObjectRetain(v2);
    v7 = (uint64_t *)(v2 + 56);
    do
    {
      v8 = *(v7 - 3);
      v9 = *(v7 - 2);
      v10 = *(v7 - 1);
      v11 = *v7;
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v11);
      String.hash(into:)(v13, v8, v9);
      String.hash(into:)(v13, v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 += 4;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  sub_3E1D8(v4, v5);
  Data.hash(into:)(v13, v4, v5);
  sub_3E21C(v4, v5);
  return Hasher._finalize()();
}

void sub_134370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1343D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1345B4);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1345D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_134370((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_1346AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_134370(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_134760(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1347AC()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1347E0 + *((int *)qword_1349B8 + (v0 >> 62))))();
}

uint64_t sub_1347F0@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL _s20BooksPersonalization14ClientCurrencyO7RequestV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;

  if ((static URL.== infix(_:_:)() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for ClientCurrency.Request(0);
  v5 = v4[5];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (v10 || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0), result = 0, (v11 & 1) != 0))
  {
    if ((sub_C1AC(*(_QWORD *)(a1 + v4[6]), *(_QWORD *)(a2 + v4[6])) & 1) != 0)
    {
      v13 = v4[7];
      v14 = a1 + v13;
      v15 = *(_QWORD *)(a1 + v13);
      v16 = *(_QWORD *)(v14 + 8);
      v17 = (uint64_t *)(a2 + v13);
      v18 = *v17;
      v19 = v17[1];
      if (v16 >> 60 == 15)
      {
        if (v19 >> 60 == 15)
          return 1;
      }
      else if (v19 >> 60 != 15)
      {
        sub_1339F4(v15, *(_QWORD *)(v14 + 8));
        sub_1339F4(v18, v19);
        sub_134760(v15, v16);
        v21 = v20;
        sub_DD668(v18, v19);
        sub_DD668(v15, v16);
        return (v21 & 1) != 0;
      }
      sub_1339F4(v15, *(_QWORD *)(v14 + 8));
      sub_1339F4(v18, v19);
      sub_DD668(v15, v16);
      sub_DD668(v18, v19);
    }
    return 0;
  }
  return result;
}

uint64_t sub_134B2C()
{
  return sub_41754(&qword_1F64B0, type metadata accessor for ClientCurrency.Request, (uint64_t)&protocol conformance descriptor for ClientCurrency.Request);
}

unint64_t sub_134B5C()
{
  unint64_t result;

  result = qword_1F64B8;
  if (!qword_1F64B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClientCurrency.Response, &type metadata for ClientCurrency.Response);
    atomic_store(result, (unint64_t *)&qword_1F64B8);
  }
  return result;
}

uint64_t dispatch thunk of ClientTransport.makeCall(with:operationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int *v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = *(int **)(a6 + 8);
  v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v13 + *v13);
  v14 = (_QWORD *)swift_task_alloc(v13[1]);
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = sub_4814;
  return v16(a1, a2, a3, a4, a5, a6);
}

ValueMetadata *type metadata accessor for ClientCurrency()
{
  return &type metadata for ClientCurrency;
}

uint64_t *initializeBufferWithCopyOfBuffer for ClientCurrency.Request(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _OWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v13;
    v14 = a3[7];
    v15 = (char *)a1 + v14;
    v16 = (_OWORD *)((char *)a2 + v14);
    v17 = *(uint64_t *)((char *)a2 + v14 + 8);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *v16;
    }
    else
    {
      v19 = *(_QWORD *)v16;
      sub_3E1D8(v19, v17);
      *(_QWORD *)v15 = v19;
      *((_QWORD *)v15 + 1) = v17;
    }
  }
  return a1;
}

uint64_t destroy for ClientCurrency.Request(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  v7 = v6[1];
  if (v7 >> 60 != 15)
    return sub_3E21C(*v6, v7);
  return result;
}

uint64_t initializeWithCopy for ClientCurrency.Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = *(_QWORD *)(v15 + 8);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)v14 = *(_OWORD *)v15;
  }
  else
  {
    v17 = *(_QWORD *)v15;
    sub_3E1D8(v17, v16);
    *(_QWORD *)v14 = v17;
    *(_QWORD *)(v14 + 8) = v16;
  }
  return a1;
}

uint64_t assignWithCopy for ClientCurrency.Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = a3[6];
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  v13 = a3[7];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *(_QWORD *)(a2 + v13 + 8);
  if (*(_QWORD *)(a1 + v13 + 8) >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      v18 = *v15;
      sub_3E1D8(v18, v16);
      v19 = *v14;
      v20 = v14[1];
      *v14 = v18;
      v14[1] = v16;
      sub_3E21C(v19, v20);
      return a1;
    }
    sub_134F8C((uint64_t)v14);
    goto LABEL_6;
  }
  if (v16 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v14 = *(_OWORD *)v15;
    return a1;
  }
  v17 = *v15;
  sub_3E1D8(v17, v16);
  *v14 = v17;
  v14[1] = v16;
  return a1;
}

uint64_t sub_134F8C(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t initializeWithTake for ClientCurrency.Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for ClientCurrency.Request(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  v12 = a3[7];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *(_QWORD *)(a1 + v12 + 8);
  if (v15 >> 60 != 15)
  {
    v16 = v14[1];
    if (v16 >> 60 != 15)
    {
      v17 = *v13;
      *v13 = *v14;
      v13[1] = v16;
      sub_3E21C(v17, v15);
      return a1;
    }
    sub_134F8C((uint64_t)v13);
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientCurrency.Request(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_13510C);
}

uint64_t sub_13510C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientCurrency.Request(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_135198);
}

uint64_t sub_135198(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_135214(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_19BC50;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_19BC68;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for ClientCurrency.Response(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return sub_3E21C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for ClientCurrency.Response(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  v5 = a2[3];
  swift_bridgeObjectRetain(v3);
  sub_3E1D8(v4, v5);
  a1[2] = v4;
  a1[3] = v5;
  return a1;
}

_QWORD *assignWithCopy for ClientCurrency.Response(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *a1 = *a2;
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  v6 = a2[2];
  v5 = a2[3];
  sub_3E1D8(v6, v5);
  v7 = a1[2];
  v8 = a1[3];
  a1[2] = v6;
  a1[3] = v5;
  sub_3E21C(v7, v8);
  return a1;
}

_QWORD *assignWithTake for ClientCurrency.Response(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a1[2];
  v6 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_3E21C(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ClientCurrency.Response()
{
  return &type metadata for ClientCurrency.Response;
}

_QWORD *sub_1353C8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)a1 + v8) = v10;
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = a3[7];
    v15 = a3[8];
    v16 = (_QWORD *)((char *)a1 + v14);
    v17 = (_QWORD *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
    v19 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *(_QWORD *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
    v20 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    v21 = *(_QWORD *)((char *)a2 + v20);
    *(_QWORD *)((char *)a1 + v20) = v21;
    v22 = a3[14];
    *(_QWORD *)((char *)a1 + a3[13]) = *(_QWORD *)((char *)a2 + a3[13]);
    *(_QWORD *)((char *)a1 + v22) = *(_QWORD *)((char *)a2 + v22);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

uint64_t sub_1354DC(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12]));
}

uint64_t sub_13554C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = a3[7];
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v18 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  v19 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v20 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  v21 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t sub_135634(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  v20 = a3[12];
  v21 = *(_QWORD *)(a2 + v20);
  v22 = *(_QWORD *)(a1 + v20);
  *(_QWORD *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_13575C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_135810(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (uint64_t *)(a2 + v9);
  v13 = *v11;
  v12 = v11[1];
  v14 = v10[1];
  *v10 = v13;
  v10[1] = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  v22 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v22) = *(_BYTE *)(a2 + v22);
  v23 = a3[12];
  v24 = *(_QWORD *)(a1 + v23);
  *(_QWORD *)(a1 + v23) = *(_QWORD *)(a2 + v23);
  swift_bridgeObjectRelease(v24);
  v25 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  return a1;
}

uint64_t sub_1358FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_135908);
}

uint64_t sub_135908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_135984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_135990);
}

uint64_t sub_135990(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for SeedBasedRecommendationRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1F65B8;
  if (!qword_1F65B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeedBasedRecommendationRequest);
  return result;
}

uint64_t sub_135A44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = &unk_19BCE0;
    v4[3] = &unk_19BCF8;
    v4[4] = &unk_19BD10;
    v4[5] = &unk_19BD10;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_19BD10;
    v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

char *sub_135AF0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0A7C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_135D2C(v5);
  *a1 = v2;
  return result;
}

uint64_t Dictionary<>.primarySeed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE v4[552];
  char v5;
  _BYTE v6[552];
  _BYTE v7[552];
  _BYTE v8[552];
  _BYTE __src[552];

  v5 = 0;
  sub_135C34(&v5, a1, v7);
  sub_41300((uint64_t)v7, (uint64_t)v8, &qword_1F5C28);
  sub_41300((uint64_t)v8, (uint64_t)__src, &qword_1F5C28);
  if (sub_117FB4((uint64_t)__src) == 1)
  {
    sub_CD7D8(&v5);
  }
  else
  {
    memcpy(&v4[7], __src, 0x221uLL);
    v5 = 0;
    memcpy(v6, v4, sizeof(v6));
    AuthorRecommendationSource.id.getter(&v5);
  }
  return sub_41300((uint64_t)&v5, a2, &qword_1F6618);
}

uint64_t sub_135C34@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  uint64_t __dst[69];

  if (*(_QWORD *)(a2 + 16))
  {
    v5 = sub_393D0(*a1);
    if ((v6 & 1) != 0)
    {
      __dst[0] = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v5);
      swift_bridgeObjectRetain_n(__dst[0], 2);
      sub_135AF0(__dst);
      swift_bridgeObjectRelease();
      v7 = __dst[0];
      v8 = *(_QWORD *)(__dst[0] + 16);
      if (v8)
      {
        v9 = (const void *)(__dst[0] + 552 * v8 - 520);
        memcpy(__dst, v9, 0x221uLL);
        memmove(a3, v9, 0x221uLL);
        AuthorRecommendationSource.id.getter(a3);
        sub_6100(__dst);
        return swift_release(v7);
      }
      swift_release(__dst[0]);
    }
  }
  sub_117FCC(__dst);
  return sub_41300((uint64_t)__dst, (uint64_t)a3, &qword_1F5C28);
}

char *sub_135D2C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  unint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  unint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  _QWORD *v28;
  double v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  double *v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  _QWORD *v52;
  double v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  uint64_t v58;
  double *v59;
  double v60;
  uint64_t v61;
  char *v62;
  Swift::Int v63;
  char *v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  _QWORD *v79;
  double v80;
  double v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double *v86;
  double v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  _QWORD *v101;
  double v102;
  double v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  double v109;
  double v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  BOOL v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  BOOL v139;
  uint64_t v140;
  char v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  unint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unint64_t v171;
  int v172;
  uint64_t *v173;
  _QWORD *v174;
  char *v175;
  char *v176;
  Swift::Int v177;
  char *v178;
  Swift::Int v179;
  char *v180;
  Swift::Int v181;
  Swift::Int v182;
  Swift::Int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  Swift::Int v201;
  Swift::Int v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  int v212;
  char *v213;
  uint64_t v214[69];
  uint64_t __src[69];
  uint64_t __dst[69];
  uint64_t v217[70];
  unint64_t v218;

  v2 = a1;
  v3 = a1[1];
  result = (char *)_minimumMergeRunLength(_:)(v3);
  if ((uint64_t)result < v3)
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 >= -1)
    {
      v175 = result;
      v179 = v3;
      if (v3 < 2)
      {
        v180 = (char *)&_swiftEmptyArrayStorage[4];
        v174 = _swiftEmptyArrayStorage;
        if (v3 != 1)
        {
          v12 = _swiftEmptyArrayStorage[2];
          v10 = (char *)_swiftEmptyArrayStorage;
          if (v12 < 2)
          {
LABEL_191:
            swift_bridgeObjectRelease();
            v174[2] = 0;
            return (char *)swift_bridgeObjectRelease();
          }
LABEL_178:
          v165 = *v2;
          while (1)
          {
            v166 = v12 - 2;
            if (v12 < 2)
              goto LABEL_209;
            if (!v165)
              goto LABEL_219;
            v167 = v10;
            v168 = *(_QWORD *)&v10[16 * v166 + 32];
            v169 = *(_QWORD *)&v10[16 * v12 + 24];
            sub_137A08((char *)(v165 + 552 * v168), (char *)(v165 + 552 * *(_QWORD *)&v10[16 * v12 + 16]), (char *)(v165 + 552 * v169), v180);
            if (v1)
              goto LABEL_191;
            if (v169 < v168)
              goto LABEL_210;
            if ((swift_isUniquelyReferenced_nonNull_native(v167) & 1) == 0)
              v167 = sub_4ECA8((uint64_t)v167);
            if (v166 >= *((_QWORD *)v167 + 2))
              goto LABEL_211;
            v170 = &v167[16 * v166 + 32];
            *(_QWORD *)v170 = v168;
            *((_QWORD *)v170 + 1) = v169;
            v171 = *((_QWORD *)v167 + 2);
            if (v12 > v171)
              goto LABEL_212;
            memmove(&v167[16 * v12 + 16], &v167[16 * v12 + 32], 16 * (v171 - v12));
            v10 = v167;
            *((_QWORD *)v167 + 2) = v171 - 1;
            v12 = v171 - 1;
            if (v171 <= 2)
              goto LABEL_191;
          }
        }
      }
      else
      {
        v6 = v5 >> 1;
        v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for SeedBook);
        *(_QWORD *)(v7 + 16) = v6;
        v174 = (_QWORD *)v7;
        v180 = (char *)(v7 + 32);
      }
      v8 = 0;
      v9 = *v2;
      v177 = v3 - 1;
      v173 = v2;
      v10 = (char *)_swiftEmptyArrayStorage;
      v11 = v3;
      v194 = *v2;
      while (1)
      {
        v176 = v10;
        v13 = v8 + 1;
        v193 = v8;
        if (v8 + 1 < v11)
        {
          v14 = v8;
          memcpy(__dst, (const void *)(v9 + 552 * v13), 0x221uLL);
          memcpy(v217, (const void *)(v9 + 552 * v14), 0x221uLL);
          if ((unint64_t)__dst[16] >> 1 != 0xFFFFFFFF)
          {
            v218 = __dst[17];
            __asm { BR              X9 }
          }
          sub_6100(__dst);
          sub_6100(v217);
          if ((unint64_t)v217[16] >> 1 != 0xFFFFFFFF)
          {
            v218 = v217[15];
            __asm { BR              X9 }
          }
          sub_6228(v217);
          sub_6228(__dst);
          v15 = v193 + 2;
          v11 = v179;
          if (v193 + 2 >= v179)
            goto LABEL_71;
          while (1)
          {
            v181 = v15;
            memcpy(v214, (const void *)(v9 + 552 * v15), 0x221uLL);
            memcpy(__src, (const void *)(v9 + 552 * v13), 0x221uLL);
            v16 = v214[16];
            if ((unint64_t)v214[16] >> 1 == 0xFFFFFFFF)
            {
              sub_6100(v214);
              sub_6100(__src);
              v17 = 0.0;
              goto LABEL_45;
            }
            v19 = v214[10];
            v18 = v214[11];
            v21 = v214[12];
            v20 = v214[13];
            v22 = v214[14];
            v23 = v214[15];
            v218 = v214[17];
            v211 = v214[18];
            v203 = v214[14];
            if ((unint64_t)v214[16] >> 62 == 3)
            {
              v24 = *(_QWORD *)(v214[10] + 16);
              if (!v24)
              {
                v39 = v214[14];
                v35 = v214[18];
                v34 = v214[15];
                sub_61A8(v214[10], v214[11], v214[12], v214[13], v214[14], v214[15], v214[16]);
                sub_6100(v214);
                sub_6100(__src);
                v33 = v18;
                sub_61A8(v19, v18, v21, v20, v39, v34, v16);
                v28 = _swiftEmptyArrayStorage;
                v36 = _swiftEmptyArrayStorage[2];
                if (v36)
                  goto LABEL_39;
                goto LABEL_43;
              }
              v25 = v214[10];
            }
            else
            {
              v26 = sub_5EDC(&qword_1F12B0);
              v25 = swift_allocObject(v26, 88, 7);
              *(_OWORD *)(v25 + 16) = xmmword_1875E0;
              *(_QWORD *)(v25 + 32) = v19;
              *(_QWORD *)(v25 + 40) = v18;
              *(_QWORD *)(v25 + 48) = v21;
              *(_QWORD *)(v25 + 56) = v20;
              *(_QWORD *)(v25 + 64) = v22;
              *(_QWORD *)(v25 + 72) = v23;
              v24 = 1;
              *(_BYTE *)(v25 + 80) = v16 & 1;
            }
            v207 = v16;
            sub_61A8(v19, v18, v21, v20, v22, v23, v16);
            sub_6100(v214);
            sub_6100(__src);
            v199 = v18;
            v195 = v23;
            sub_61A8(v19, v18, v21, v20, v22, v23, v16);
            swift_bridgeObjectRetain(v25);
            v27 = (double *)(v25 + 80);
            v28 = _swiftEmptyArrayStorage;
            do
            {
              if ((*(_BYTE *)v27 & 1) == 0)
              {
                v29 = *(v27 - 2);
                v30 = exp2(-*(v27 - 1) / *(v27 - 3));
                if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
                  v28 = sub_2FDB4(0, v28[2] + 1, 1, v28);
                v32 = v28[2];
                v31 = v28[3];
                if (v32 >= v31 >> 1)
                  v28 = sub_2FDB4((_QWORD *)(v31 > 1), v32 + 1, 1, v28);
                v28[2] = v32 + 1;
                *(double *)&v28[v32 + 4] = v29 * v30;
              }
              v27 += 7;
              --v24;
            }
            while (v24);
            swift_bridgeObjectRelease();
            v33 = v199;
            v34 = v195;
            v16 = v207;
            v35 = v211;
            v36 = v28[2];
            if (v36)
            {
LABEL_39:
              v37 = (double *)(v28 + 4);
              v17 = 0.0;
              do
              {
                v38 = *v37++;
                v17 = v17 + v38;
                --v36;
              }
              while (v36);
              swift_bridgeObjectRelease();
              goto LABEL_44;
            }
LABEL_43:
            swift_bridgeObjectRelease();
            v17 = 0.0;
LABEL_44:
            swift_bridgeObjectRelease();
            v172 = v35;
            sub_62CC(v19, v33, v21, v20, v203, v34, v16);
            v9 = v194;
LABEL_45:
            v40 = __src[16];
            v41 = 0.0;
            if ((unint64_t)__src[16] >> 1 == 0xFFFFFFFF)
              goto LABEL_65;
            v42 = __src[10];
            v43 = __src[11];
            v44 = __src[12];
            v45 = __src[13];
            v46 = __src[14];
            v47 = __src[15];
            v218 = __src[17];
            v212 = __src[18];
            v200 = __src[14];
            v204 = __src[13];
            if ((unint64_t)__src[16] >> 62 == 3)
            {
              v48 = *(_QWORD *)(__src[10] + 16);
              if (!v48)
              {
                v61 = __src[13];
                v57 = __src[18];
                sub_61A8(__src[10], __src[11], __src[12], __src[13], __src[14], __src[15], __src[16]);
                sub_61A8(v42, v43, v44, v61, v46, v47, v40);
                v52 = _swiftEmptyArrayStorage;
                v58 = _swiftEmptyArrayStorage[2];
                if (v58)
                  goto LABEL_59;
                goto LABEL_63;
              }
              v49 = __src[10];
            }
            else
            {
              v50 = sub_5EDC(&qword_1F12B0);
              v49 = swift_allocObject(v50, 88, 7);
              *(_OWORD *)(v49 + 16) = xmmword_1875E0;
              *(_QWORD *)(v49 + 32) = v42;
              *(_QWORD *)(v49 + 40) = v43;
              *(_QWORD *)(v49 + 48) = v44;
              *(_QWORD *)(v49 + 56) = v45;
              *(_QWORD *)(v49 + 64) = v46;
              *(_QWORD *)(v49 + 72) = v47;
              v48 = 1;
              *(_BYTE *)(v49 + 80) = v40 & 1;
            }
            v208 = v40;
            sub_61A8(v42, v43, v44, v45, v46, v47, v40);
            v198 = v43;
            sub_61A8(v42, v43, v44, v45, v46, v47, v40);
            swift_bridgeObjectRetain(v49);
            v51 = (double *)(v49 + 80);
            v52 = _swiftEmptyArrayStorage;
            do
            {
              if ((*(_BYTE *)v51 & 1) == 0)
              {
                v53 = *(v51 - 2);
                v54 = exp2(-*(v51 - 1) / *(v51 - 3));
                if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
                  v52 = sub_2FDB4(0, v52[2] + 1, 1, v52);
                v56 = v52[2];
                v55 = v52[3];
                if (v56 >= v55 >> 1)
                  v52 = sub_2FDB4((_QWORD *)(v55 > 1), v56 + 1, 1, v52);
                v52[2] = v56 + 1;
                *(double *)&v52[v56 + 4] = v53 * v54;
              }
              v51 += 7;
              --v48;
            }
            while (v48);
            swift_bridgeObjectRelease();
            v43 = v198;
            v40 = v208;
            v57 = v212;
            v58 = v52[2];
            if (v58)
            {
LABEL_59:
              v59 = (double *)(v52 + 4);
              v41 = 0.0;
              do
              {
                v60 = *v59++;
                v41 = v41 + v60;
                --v58;
              }
              while (v58);
              swift_bridgeObjectRelease();
              goto LABEL_64;
            }
LABEL_63:
            swift_bridgeObjectRelease();
            v41 = 0.0;
LABEL_64:
            swift_bridgeObjectRelease();
            v172 = v57;
            sub_62CC(v42, v43, v44, v204, v200, v47, v40);
            v9 = v194;
LABEL_65:
            sub_6228(__src);
            sub_6228(v214);
            if (v17 < v41)
            {
              v11 = v179;
              v15 = v181;
              goto LABEL_71;
            }
            v11 = v179;
            if (v181 == v177)
            {
              v15 = v179;
              goto LABEL_71;
            }
            v13 = v181;
            v15 = v181 + 1;
          }
        }
        v15 = v8 + 1;
LABEL_71:
        if (v15 >= v11)
          goto LABEL_129;
        if (__OFSUB__(v15, v193))
          goto LABEL_213;
        if (v15 - v193 >= (uint64_t)v175)
          goto LABEL_129;
        v62 = &v175[v193];
        if (__OFADD__(v193, v175))
          goto LABEL_215;
        if ((uint64_t)v62 >= v11)
          v62 = (char *)v11;
        if ((uint64_t)v62 < v193)
          break;
        v178 = v62;
        if ((char *)v15 != v62)
        {
          while (1)
          {
            v182 = v15;
            v63 = v15;
            do
            {
              v64 = (char *)(v9 + 552 * v63);
              memcpy(__dst, v64, 0x221uLL);
              v213 = v64 - 552;
              memcpy(v217, v64 - 552, 0x221uLL);
              v65 = __dst[16];
              if ((unint64_t)__dst[16] >> 1 == 0xFFFFFFFF)
              {
                sub_6100(__dst);
                sub_6100(v217);
                v66 = 0.0;
                goto LABEL_103;
              }
              v67 = __dst[10];
              v68 = __dst[11];
              v69 = __dst[12];
              v70 = __dst[13];
              v71 = __dst[14];
              v72 = __dst[15];
              v218 = __dst[15];
              v209 = __dst[10];
              v196 = __dst[11];
              v189 = __dst[13];
              v191 = __dst[12];
              v187 = __dst[18];
              if ((unint64_t)__dst[16] >> 62 == 3)
              {
                v73 = *(_QWORD *)(__dst[10] + 16);
                if (!v73)
                {
                  v88 = __dst[11];
                  v84 = __dst[14];
                  sub_61A8(__dst[10], __dst[11], __dst[12], __dst[13], __dst[14], __dst[15], __dst[16]);
                  sub_6100(__dst);
                  sub_6100(v217);
                  sub_61A8(v209, v88, v69, v70, v84, v218, v65);
                  v79 = _swiftEmptyArrayStorage;
                  v85 = _swiftEmptyArrayStorage[2];
                  if (v85)
                    goto LABEL_97;
                  goto LABEL_101;
                }
                v201 = v63;
                v205 = (char *)(v9 + 552 * v63);
                v74 = __dst[10];
                v75 = __dst[14];
              }
              else
              {
                v201 = v63;
                v205 = (char *)(v9 + 552 * v63);
                v76 = sub_5EDC(&qword_1F12B0);
                v77 = swift_allocObject(v76, 88, 7);
                v67 = v209;
                v72 = v218;
                v74 = v77;
                *(_OWORD *)(v77 + 16) = xmmword_1875E0;
                *(_QWORD *)(v77 + 32) = v209;
                *(_QWORD *)(v77 + 40) = v68;
                *(_QWORD *)(v77 + 48) = v69;
                *(_QWORD *)(v77 + 56) = v70;
                *(_QWORD *)(v77 + 64) = v71;
                *(_QWORD *)(v77 + 72) = v72;
                v75 = v71;
                v73 = 1;
                *(_BYTE *)(v77 + 80) = v65 & 1;
              }
              sub_61A8(v67, v68, v69, v70, v75, v72, v65);
              sub_6100(__dst);
              sub_6100(v217);
              v185 = v75;
              sub_61A8(v209, v68, v69, v70, v75, v218, v65);
              swift_bridgeObjectRetain(v74);
              v78 = (double *)(v74 + 80);
              v79 = _swiftEmptyArrayStorage;
              do
              {
                if ((*(_BYTE *)v78 & 1) == 0)
                {
                  v80 = *(v78 - 2);
                  v81 = exp2(-*(v78 - 1) / *(v78 - 3));
                  if ((swift_isUniquelyReferenced_nonNull_native(v79) & 1) == 0)
                    v79 = sub_2FDB4(0, v79[2] + 1, 1, v79);
                  v83 = v79[2];
                  v82 = v79[3];
                  if (v83 >= v82 >> 1)
                    v79 = sub_2FDB4((_QWORD *)(v82 > 1), v83 + 1, 1, v79);
                  v79[2] = v83 + 1;
                  *(double *)&v79[v83 + 4] = v80 * v81;
                }
                v78 += 7;
                --v73;
              }
              while (v73);
              swift_bridgeObjectRelease();
              v63 = v201;
              v64 = v205;
              v84 = v185;
              v85 = v79[2];
              if (v85)
              {
LABEL_97:
                v86 = (double *)(v79 + 4);
                v66 = 0.0;
                do
                {
                  v87 = *v86++;
                  v66 = v66 + v87;
                  --v85;
                }
                while (v85);
                swift_bridgeObjectRelease();
                goto LABEL_102;
              }
LABEL_101:
              swift_bridgeObjectRelease();
              v66 = 0.0;
LABEL_102:
              swift_bridgeObjectRelease();
              v172 = v187;
              sub_62CC(v209, v196, v191, v189, v84, v218, v65);
              v9 = v194;
LABEL_103:
              v218 = v217[16];
              if ((unint64_t)v217[16] >> 1 == 0xFFFFFFFF)
              {
                sub_6228(v217);
                sub_6228(__dst);
                if (v66 >= 0.0)
                  break;
                goto LABEL_125;
              }
              v89 = v217[10];
              v90 = v217[11];
              v91 = v217[12];
              v92 = v217[13];
              v93 = v217[14];
              v94 = v217[15];
              v197 = v217[15];
              v210 = v217[10];
              v190 = v217[12];
              v192 = v217[11];
              v186 = v217[18];
              v188 = v217[13];
              if (v218 >> 62 == 3)
              {
                v95 = *(_QWORD *)(v217[10] + 16);
                if (!v95)
                {
                  v111 = v217[11];
                  v106 = v217[14];
                  v112 = v218;
                  sub_61A8(v217[10], v217[11], v217[12], v217[13], v217[14], v217[15], v218);
                  sub_61A8(v210, v111, v91, v92, v106, v197, v112);
                  v101 = _swiftEmptyArrayStorage;
                  v107 = _swiftEmptyArrayStorage[2];
                  if (!v107)
                    goto LABEL_123;
                  goto LABEL_119;
                }
                v202 = v63;
                v206 = v64;
                v96 = v217[10];
                v97 = v217[14];
              }
              else
              {
                v202 = v63;
                v206 = v64;
                v98 = sub_5EDC(&qword_1F12B0);
                v99 = swift_allocObject(v98, 88, 7);
                v89 = v210;
                v94 = v197;
                v96 = v99;
                *(_OWORD *)(v99 + 16) = xmmword_1875E0;
                *(_QWORD *)(v99 + 32) = v210;
                *(_QWORD *)(v99 + 40) = v90;
                *(_QWORD *)(v99 + 48) = v91;
                *(_QWORD *)(v99 + 56) = v92;
                *(_QWORD *)(v99 + 64) = v93;
                *(_QWORD *)(v99 + 72) = v197;
                v97 = v93;
                v95 = 1;
                *(_BYTE *)(v99 + 80) = v218 & 1;
              }
              sub_61A8(v89, v90, v91, v92, v97, v94, v218);
              v184 = v97;
              sub_61A8(v210, v90, v91, v92, v97, v94, v218);
              swift_bridgeObjectRetain(v96);
              v100 = (double *)(v96 + 80);
              v101 = _swiftEmptyArrayStorage;
              do
              {
                if ((*(_BYTE *)v100 & 1) == 0)
                {
                  v102 = *(v100 - 2);
                  v103 = exp2(-*(v100 - 1) / *(v100 - 3));
                  if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
                    v101 = sub_2FDB4(0, v101[2] + 1, 1, v101);
                  v105 = v101[2];
                  v104 = v101[3];
                  if (v105 >= v104 >> 1)
                    v101 = sub_2FDB4((_QWORD *)(v104 > 1), v105 + 1, 1, v101);
                  v101[2] = v105 + 1;
                  *(double *)&v101[v105 + 4] = v102 * v103;
                }
                v100 += 7;
                --v95;
              }
              while (v95);
              swift_bridgeObjectRelease();
              v63 = v202;
              v64 = v206;
              v106 = v184;
              v107 = v101[2];
              if (!v107)
              {
LABEL_123:
                swift_bridgeObjectRelease();
                v109 = 0.0;
                goto LABEL_124;
              }
LABEL_119:
              v108 = (double *)(v101 + 4);
              v109 = 0.0;
              do
              {
                v110 = *v108++;
                v109 = v109 + v110;
                --v107;
              }
              while (v107);
              swift_bridgeObjectRelease();
LABEL_124:
              swift_bridgeObjectRelease();
              v172 = v186;
              sub_62CC(v210, v192, v190, v188, v106, v197, v218);
              sub_6228(v217);
              sub_6228(__dst);
              v9 = v194;
              if (v66 >= v109)
                break;
LABEL_125:
              if (!v9)
                goto LABEL_217;
              --v63;
              memcpy(__src, v64, 0x221uLL);
              memcpy(v64, v213, 0x228uLL);
              memcpy(v213, __src, 0x221uLL);
            }
            while (v63 != v193);
            v15 = v182 + 1;
            if ((char *)(v182 + 1) == v178)
            {
              v15 = (Swift::Int)v178;
              break;
            }
          }
        }
LABEL_129:
        if (v15 < v193)
          goto LABEL_208;
        v183 = v15;
        if ((swift_isUniquelyReferenced_nonNull_native(v176) & 1) != 0)
          v10 = v176;
        else
          v10 = sub_4E4E4(0, *((_QWORD *)v176 + 2) + 1, 1, v176);
        v114 = *((_QWORD *)v10 + 2);
        v113 = *((_QWORD *)v10 + 3);
        v12 = v114 + 1;
        v115 = v193;
        if (v114 >= v113 >> 1)
        {
          v164 = sub_4E4E4((char *)(v113 > 1), v114 + 1, 1, v10);
          v115 = v193;
          v10 = v164;
        }
        *((_QWORD *)v10 + 2) = v12;
        v116 = v10 + 32;
        v117 = &v10[16 * v114 + 32];
        *(_QWORD *)v117 = v115;
        *((_QWORD *)v117 + 1) = v183;
        if (v114)
        {
          while (1)
          {
            v118 = v12 - 1;
            if (v12 >= 4)
            {
              v123 = &v116[16 * v12];
              v124 = *((_QWORD *)v123 - 8);
              v125 = *((_QWORD *)v123 - 7);
              v129 = __OFSUB__(v125, v124);
              v126 = v125 - v124;
              if (v129)
                goto LABEL_197;
              v128 = *((_QWORD *)v123 - 6);
              v127 = *((_QWORD *)v123 - 5);
              v129 = __OFSUB__(v127, v128);
              v121 = v127 - v128;
              v122 = v129;
              if (v129)
                goto LABEL_198;
              v130 = v12 - 2;
              v131 = &v116[16 * v12 - 32];
              v133 = *(_QWORD *)v131;
              v132 = *((_QWORD *)v131 + 1);
              v129 = __OFSUB__(v132, v133);
              v134 = v132 - v133;
              if (v129)
                goto LABEL_200;
              v129 = __OFADD__(v121, v134);
              v135 = v121 + v134;
              if (v129)
                goto LABEL_203;
              if (v135 >= v126)
              {
                v153 = &v116[16 * v118];
                v155 = *(_QWORD *)v153;
                v154 = *((_QWORD *)v153 + 1);
                v129 = __OFSUB__(v154, v155);
                v156 = v154 - v155;
                if (v129)
                  goto LABEL_207;
                v146 = v121 < v156;
                goto LABEL_166;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v147 = *((_QWORD *)v10 + 4);
                v148 = *((_QWORD *)v10 + 5);
                v129 = __OFSUB__(v148, v147);
                v140 = v148 - v147;
                v141 = v129;
                goto LABEL_160;
              }
              v120 = *((_QWORD *)v10 + 4);
              v119 = *((_QWORD *)v10 + 5);
              v129 = __OFSUB__(v119, v120);
              v121 = v119 - v120;
              v122 = v129;
            }
            if ((v122 & 1) != 0)
              goto LABEL_199;
            v130 = v12 - 2;
            v136 = &v116[16 * v12 - 32];
            v138 = *(_QWORD *)v136;
            v137 = *((_QWORD *)v136 + 1);
            v139 = __OFSUB__(v137, v138);
            v140 = v137 - v138;
            v141 = v139;
            if (v139)
              goto LABEL_202;
            v142 = &v116[16 * v118];
            v144 = *(_QWORD *)v142;
            v143 = *((_QWORD *)v142 + 1);
            v129 = __OFSUB__(v143, v144);
            v145 = v143 - v144;
            if (v129)
              goto LABEL_205;
            if (__OFADD__(v140, v145))
              goto LABEL_206;
            if (v140 + v145 >= v121)
            {
              v146 = v121 < v145;
LABEL_166:
              if (v146)
                v118 = v130;
              goto LABEL_168;
            }
LABEL_160:
            if ((v141 & 1) != 0)
              goto LABEL_201;
            v149 = &v116[16 * v118];
            v151 = *(_QWORD *)v149;
            v150 = *((_QWORD *)v149 + 1);
            v129 = __OFSUB__(v150, v151);
            v152 = v150 - v151;
            if (v129)
              goto LABEL_204;
            if (v152 < v140)
              goto LABEL_14;
LABEL_168:
            v157 = v118 - 1;
            if (v118 - 1 >= v12)
            {
              __break(1u);
LABEL_194:
              __break(1u);
LABEL_195:
              __break(1u);
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
LABEL_201:
              __break(1u);
LABEL_202:
              __break(1u);
LABEL_203:
              __break(1u);
LABEL_204:
              __break(1u);
LABEL_205:
              __break(1u);
LABEL_206:
              __break(1u);
LABEL_207:
              __break(1u);
LABEL_208:
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
              __break(1u);
LABEL_215:
              __break(1u);
              goto LABEL_216;
            }
            if (!v9)
              goto LABEL_218;
            v158 = v10;
            v159 = &v116[16 * v157];
            v160 = *(_QWORD *)v159;
            v161 = &v116[16 * v118];
            v162 = *((_QWORD *)v161 + 1);
            sub_137A08((char *)(v9 + 552 * *(_QWORD *)v159), (char *)(v9 + 552 * *(_QWORD *)v161), (char *)(v9 + 552 * v162), v180);
            if (v1)
              goto LABEL_191;
            if (v162 < v160)
              goto LABEL_194;
            if (v118 > *((_QWORD *)v158 + 2))
              goto LABEL_195;
            *(_QWORD *)v159 = v160;
            *(_QWORD *)&v116[16 * v157 + 8] = v162;
            v163 = *((_QWORD *)v158 + 2);
            if (v118 >= v163)
              goto LABEL_196;
            v12 = v163 - 1;
            memmove(&v116[16 * v118], v161 + 16, 16 * (v163 - 1 - v118));
            v10 = v158;
            *((_QWORD *)v158 + 2) = v163 - 1;
            if (v163 <= 2)
              goto LABEL_14;
          }
        }
        v12 = 1;
LABEL_14:
        v11 = v179;
        v8 = v183;
        if (v183 >= v179)
        {
          v2 = v173;
          if (v12 < 2)
            goto LABEL_191;
          goto LABEL_178;
        }
      }
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
      __break(1u);
LABEL_219:
      __break(1u);
    }
    LOBYTE(v172) = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, v172, 936, 0);
    __break(1u);
    JUMPOUT(0x137308);
  }
  if (v3 < 0)
    goto LABEL_214;
  if (v3)
    return (char *)sub_137328(0, (char *)v3, (_BYTE *)&dword_0 + 1, v2);
  return result;
}

void *sub_137328(void *result, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  void *v5;
  unint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  _QWORD *v20;
  double v21;
  double v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  _QWORD *v48;
  double v49;
  double v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  double v56;
  double v57;
  uint64_t v58;
  unint64_t v59;
  char *v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *__src;
  char *v77;
  void *v78;
  _BYTE v79[545];
  uint64_t __dst[69];
  uint64_t v81[70];

  v63 = result;
  if (a3 != a2)
  {
    v4 = *a4;
    v62 = *a4;
LABEL_5:
    v61 = a3;
    v5 = a3;
    while (1)
    {
      memcpy(__dst, (const void *)(v4 + 552 * (_QWORD)v5), 0x221uLL);
      __src = (char *)(v4 + 552 * (_QWORD)v5);
      memcpy(v81, __src - 552, 0x221uLL);
      v6 = __dst[16];
      v77 = __src - 552;
      v78 = v5;
      if ((unint64_t)__dst[16] >> 1 == 0xFFFFFFFF)
      {
        sub_6100(__dst);
        sub_6100(v81);
        v7 = 0.0;
        goto LABEL_27;
      }
      v8 = __dst[10];
      v9 = __dst[11];
      v10 = __dst[12];
      v11 = __dst[13];
      v12 = __dst[14];
      v13 = __dst[15];
      v67 = __dst[14];
      v69 = __dst[13];
      v72 = __dst[10];
      v74 = __dst[15];
      if ((unint64_t)__dst[16] >> 62 == 3)
      {
        v14 = *(_QWORD *)(__dst[10] + 16);
        if (!v14)
        {
          v25 = __dst[12];
          v29 = __dst[13];
          v30 = __dst[14];
          v31 = __dst[15];
          v32 = __dst[10];
          sub_61A8(__dst[10], __dst[11], __dst[12], __dst[13], __dst[14], __dst[15], __dst[16]);
          sub_6100(__dst);
          sub_6100(v81);
          sub_61A8(v32, v9, v25, v29, v30, v31, v6);
          v20 = _swiftEmptyArrayStorage;
          v26 = _swiftEmptyArrayStorage[2];
          if (v26)
            goto LABEL_21;
          goto LABEL_25;
        }
        v15 = __dst[10];
        v16 = __dst[12];
      }
      else
      {
        v17 = sub_5EDC(&qword_1F12B0);
        v18 = swift_allocObject(v17, 88, 7);
        v8 = v72;
        v13 = v74;
        v12 = v67;
        v11 = v69;
        v15 = v18;
        *(_OWORD *)(v18 + 16) = xmmword_1875E0;
        *(_QWORD *)(v18 + 32) = v72;
        *(_QWORD *)(v18 + 40) = v9;
        *(_QWORD *)(v18 + 48) = v10;
        *(_QWORD *)(v18 + 56) = v69;
        *(_QWORD *)(v18 + 64) = v67;
        *(_QWORD *)(v18 + 72) = v74;
        v16 = v10;
        v14 = 1;
        *(_BYTE *)(v18 + 80) = v6 & 1;
      }
      sub_61A8(v8, v9, v16, v11, v12, v13, v6);
      sub_6100(__dst);
      sub_6100(v81);
      v64 = v16;
      v65 = v9;
      sub_61A8(v72, v9, v16, v11, v12, v74, v6);
      swift_bridgeObjectRetain(v15);
      v19 = (double *)(v15 + 80);
      v20 = _swiftEmptyArrayStorage;
      do
      {
        if ((*(_BYTE *)v19 & 1) == 0)
        {
          v21 = *(v19 - 2);
          v22 = exp2(-*(v19 - 1) / *(v19 - 3));
          if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
            v20 = sub_2FDB4(0, v20[2] + 1, 1, v20);
          v24 = v20[2];
          v23 = v20[3];
          if (v24 >= v23 >> 1)
            v20 = sub_2FDB4((_QWORD *)(v23 > 1), v24 + 1, 1, v20);
          v20[2] = v24 + 1;
          *(double *)&v20[v24 + 4] = v21 * v22;
        }
        v19 += 7;
        --v14;
      }
      while (v14);
      swift_bridgeObjectRelease();
      v25 = v64;
      v9 = v65;
      v26 = v20[2];
      if (v26)
      {
LABEL_21:
        v27 = (double *)(v20 + 4);
        v7 = 0.0;
        do
        {
          v28 = *v27++;
          v7 = v7 + v28;
          --v26;
        }
        while (v26);
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
LABEL_25:
      swift_bridgeObjectRelease();
      v7 = 0.0;
LABEL_26:
      swift_bridgeObjectRelease();
      sub_62CC(v72, v9, v25, v69, v67, v74, v6);
      v4 = v62;
LABEL_27:
      v33 = v81[16];
      if ((unint64_t)v81[16] >> 1 == 0xFFFFFFFF)
      {
        sub_6228(v81);
        result = sub_6228(__dst);
        if (v7 >= 0.0)
          goto LABEL_4;
        goto LABEL_49;
      }
      v34 = v81[10];
      v35 = v81[11];
      v36 = v81[12];
      v37 = v81[13];
      v38 = v81[14];
      v39 = v81[15];
      v73 = v81[16];
      v75 = v81[13];
      v70 = v81[14];
      v71 = v81[15];
      v66 = v81[10];
      v68 = v81[11];
      if ((unint64_t)v81[16] >> 62 == 3)
      {
        v40 = *(_QWORD *)(v81[10] + 16);
        if (!v40)
        {
          v58 = v81[11];
          v53 = v81[12];
          v59 = v81[16];
          sub_61A8(v81[10], v81[11], v81[12], v81[13], v81[14], v81[15], v81[16]);
          sub_61A8(v34, v58, v53, v75, v38, v71, v59);
          v48 = _swiftEmptyArrayStorage;
          v5 = v78;
          v54 = _swiftEmptyArrayStorage[2];
          if (!v54)
            goto LABEL_47;
          goto LABEL_43;
        }
        v41 = v81[10];
        v42 = v81[12];
      }
      else
      {
        v43 = v81[11];
        v44 = sub_5EDC(&qword_1F12B0);
        v45 = swift_allocObject(v44, 88, 7);
        v35 = v43;
        v39 = v71;
        v33 = v73;
        v38 = v70;
        v37 = v75;
        v41 = v45;
        *(_OWORD *)(v45 + 16) = xmmword_1875E0;
        *(_QWORD *)(v45 + 32) = v34;
        *(_QWORD *)(v45 + 40) = v35;
        *(_QWORD *)(v45 + 48) = v36;
        *(_QWORD *)(v45 + 56) = v75;
        *(_QWORD *)(v45 + 64) = v70;
        *(_QWORD *)(v45 + 72) = v71;
        v42 = v36;
        v40 = 1;
        *(_BYTE *)(v45 + 80) = v73 & 1;
      }
      v46 = v35;
      sub_61A8(v34, v35, v42, v37, v38, v39, v33);
      sub_61A8(v34, v46, v42, v75, v38, v39, v73);
      swift_bridgeObjectRetain(v41);
      v47 = (double *)(v41 + 80);
      v48 = _swiftEmptyArrayStorage;
      v5 = v78;
      do
      {
        if ((*(_BYTE *)v47 & 1) == 0)
        {
          v49 = *(v47 - 2);
          v50 = exp2(-*(v47 - 1) / *(v47 - 3));
          if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
            v48 = sub_2FDB4(0, v48[2] + 1, 1, v48);
          v52 = v48[2];
          v51 = v48[3];
          if (v52 >= v51 >> 1)
            v48 = sub_2FDB4((_QWORD *)(v51 > 1), v52 + 1, 1, v48);
          v48[2] = v52 + 1;
          *(double *)&v48[v52 + 4] = v49 * v50;
        }
        v47 += 7;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease();
      v53 = v42;
      v4 = v62;
      v54 = v48[2];
      if (!v54)
      {
LABEL_47:
        swift_bridgeObjectRelease();
        v56 = 0.0;
        goto LABEL_48;
      }
LABEL_43:
      v55 = (double *)(v48 + 4);
      v56 = 0.0;
      do
      {
        v57 = *v55++;
        v56 = v56 + v57;
        --v54;
      }
      while (v54);
      swift_bridgeObjectRelease();
LABEL_48:
      swift_bridgeObjectRelease();
      sub_62CC(v66, v68, v53, v75, v70, v71, v73);
      sub_6228(v81);
      result = sub_6228(__dst);
      if (v7 >= v56)
        goto LABEL_4;
LABEL_49:
      if (!v4)
      {
        __break(1u);
        return result;
      }
      v5 = (char *)v5 - 1;
      memcpy(v79, __src, sizeof(v79));
      memcpy(__src, v77, 0x228uLL);
      result = memcpy(v77, v79, 0x221uLL);
      if (v5 == v63)
      {
LABEL_4:
        a3 = v61 + 1;
        if (v61 + 1 == a2)
          return result;
        goto LABEL_5;
      }
    }
  }
  return result;
}

uint64_t sub_137A08(char *__src, char *a2, char *a3, char *__dst)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  _QWORD *v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  _QWORD *v48;
  double v49;
  double v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  double *v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double *v77;
  _QWORD *v78;
  double v79;
  double v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double *v85;
  double v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *v100;
  _QWORD *v101;
  double v102;
  double v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  double *v108;
  double v109;
  double v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t result;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *__srca;
  void *__srcb;
  char *__srcc;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char *v146;
  uint64_t __dsta[69];
  uint64_t v148[69];
  char *v149;
  const void *v150;
  char *v151;

  v4 = __dst;
  v5 = a3;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 552;
  v10 = a3 - a2;
  v11 = (a3 - a2) / 552;
  v150 = __dst;
  v151 = __src;
  if (v9 >= v11)
  {
    if (v10 < -551)
      goto LABEL_127;
    v60 = 552 * v11;
    if (__dst != a2 || &a2[v60] <= __dst)
      memmove(__dst, a2, 552 * v11);
    v61 = &v4[v60];
    v149 = v61;
    v151 = v6;
    if (v7 >= v6 || v10 < 552)
    {
LABEL_126:
      sub_4E798((void **)&v151, &v150, &v149);
      return 1;
    }
    v140 = v4;
    v142 = v7;
    while (1)
    {
      v138 = (unint64_t)v61;
      __srcc = v61 - 552;
      memcpy(__dsta, v61 - 552, 0x221uLL);
      v62 = v6 - 552;
      memcpy(v148, v6 - 552, 0x221uLL);
      v63 = __dsta[16];
      v144 = v5;
      v146 = v6;
      v137 = v6 - 552;
      if ((unint64_t)__dsta[16] >> 1 == 0xFFFFFFFF)
      {
        sub_6100(__dsta);
        sub_6100(v148);
        v64 = 0.0;
        goto LABEL_93;
      }
      v65 = __dsta[10];
      v66 = __dsta[11];
      v68 = __dsta[12];
      v67 = __dsta[13];
      v70 = __dsta[14];
      v69 = __dsta[15];
      v133 = __dsta[12];
      v123 = __dsta[13];
      v120 = __dsta[15];
      if ((unint64_t)__dsta[16] >> 62 != 3)
        break;
      v71 = *(_QWORD *)(__dsta[10] + 16);
      if (v71)
      {
        v72 = __dsta[10];
        goto LABEL_78;
      }
      v111 = __dsta[11];
      v112 = __dsta[13];
      v113 = __dsta[15];
      sub_61A8(__dsta[10], __dsta[11], __dsta[12], __dsta[13], __dsta[14], __dsta[15], __dsta[16]);
      sub_6100(__dsta);
      sub_6100(v148);
      v83 = v111;
      sub_61A8(v65, v111, v68, v112, v70, v113, v63);
      v78 = _swiftEmptyArrayStorage;
LABEL_87:
      v84 = v78[2];
      v62 = v137;
      if (v84)
      {
        v85 = (double *)(v78 + 4);
        v64 = 0.0;
        do
        {
          v86 = *v85++;
          v64 = v64 + v86;
          --v84;
        }
        while (v84);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v64 = 0.0;
      }
      swift_bridgeObjectRelease();
      sub_62CC(v65, v83, v133, v123, v70, v120, v63);
      v4 = v140;
      v5 = v144;
      v6 = v146;
LABEL_93:
      v87 = v5 - 552;
      v88 = v148[16];
      if ((unint64_t)v148[16] >> 1 == 0xFFFFFFFF)
      {
        sub_6228(v148);
        sub_6228(__dsta);
        if (v64 >= 0.0)
          goto LABEL_95;
        goto LABEL_120;
      }
      v119 = v5 - 552;
      v89 = v148[10];
      v90 = v148[11];
      v91 = v148[12];
      v92 = v148[13];
      v93 = v148[14];
      v94 = v148[15];
      v136 = v148[15];
      v124 = v148[14];
      v127 = v148[13];
      v121 = v148[11];
      if ((unint64_t)v148[16] >> 62 == 3)
      {
        v95 = *(_QWORD *)(v148[10] + 16);
        if (!v95)
        {
          v114 = v148[13];
          v115 = v148[15];
          sub_61A8(v148[10], v148[11], v148[12], v148[13], v148[14], v148[15], v148[16]);
          v106 = v121;
          sub_61A8(v89, v121, v91, v114, v93, v115, v88);
          v101 = _swiftEmptyArrayStorage;
          goto LABEL_114;
        }
        v96 = v148[10];
      }
      else
      {
        v97 = sub_5EDC(&qword_1F12B0);
        v98 = swift_allocObject(v97, 88, 7);
        v94 = v136;
        v93 = v124;
        v92 = v127;
        v96 = v98;
        *(_OWORD *)(v98 + 16) = xmmword_1875E0;
        *(_QWORD *)(v98 + 32) = v89;
        *(_QWORD *)(v98 + 40) = v90;
        *(_QWORD *)(v98 + 48) = v91;
        *(_QWORD *)(v98 + 56) = v127;
        *(_QWORD *)(v98 + 64) = v124;
        *(_QWORD *)(v98 + 72) = v136;
        v95 = 1;
        *(_BYTE *)(v98 + 80) = v88 & 1;
      }
      v99 = v92;
      sub_61A8(v89, v90, v91, v92, v93, v94, v88);
      v117 = v91;
      sub_61A8(v89, v90, v91, v99, v93, v136, v88);
      swift_bridgeObjectRetain(v96);
      v100 = (double *)(v96 + 80);
      v101 = _swiftEmptyArrayStorage;
      do
      {
        if ((*(_BYTE *)v100 & 1) == 0)
        {
          v102 = *(v100 - 2);
          v103 = exp2(-*(v100 - 1) / *(v100 - 3));
          if ((swift_isUniquelyReferenced_nonNull_native(v101) & 1) == 0)
            v101 = sub_2FDB4(0, v101[2] + 1, 1, v101);
          v105 = v101[2];
          v104 = v101[3];
          if (v105 >= v104 >> 1)
            v101 = sub_2FDB4((_QWORD *)(v104 > 1), v105 + 1, 1, v101);
          v101[2] = v105 + 1;
          *(double *)&v101[v105 + 4] = v102 * v103;
        }
        v100 += 7;
        --v95;
      }
      while (v95);
      swift_bridgeObjectRelease();
      v106 = v121;
      v91 = v117;
LABEL_114:
      v107 = v101[2];
      v4 = v140;
      if (v107)
      {
        v108 = (double *)(v101 + 4);
        v109 = 0.0;
        do
        {
          v110 = *v108++;
          v109 = v109 + v110;
          --v107;
        }
        while (v107);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v109 = 0.0;
      }
      swift_bridgeObjectRelease();
      sub_62CC(v89, v106, v91, v127, v124, v136, v88);
      sub_6228(v148);
      sub_6228(__dsta);
      v5 = v144;
      v6 = v146;
      v62 = v137;
      v87 = v119;
      if (v64 >= v109)
      {
LABEL_95:
        v61 = __srcc;
        v149 = __srcc;
        if ((unint64_t)v5 < v138 || (unint64_t)v87 >= v138 || v5 != (char *)v138)
          memmove(v87, __srcc, 0x228uLL);
        v62 = v6;
        if (__srcc <= v4)
          goto LABEL_126;
        goto LABEL_71;
      }
LABEL_120:
      if (v5 != v6 || v87 >= v6)
        memmove(v87, v62, 0x228uLL);
      v151 = v62;
      v61 = (char *)v138;
      if (v138 <= (unint64_t)v4)
        goto LABEL_126;
LABEL_71:
      v6 = v62;
      v5 = v87;
      if (v62 <= v142)
        goto LABEL_126;
    }
    v73 = sub_5EDC(&qword_1F12B0);
    v74 = swift_allocObject(v73, 88, 7);
    v69 = v120;
    v67 = v123;
    v68 = v133;
    v72 = v74;
    *(_OWORD *)(v74 + 16) = xmmword_1875E0;
    *(_QWORD *)(v74 + 32) = v65;
    *(_QWORD *)(v74 + 40) = v66;
    *(_QWORD *)(v74 + 48) = v133;
    *(_QWORD *)(v74 + 56) = v123;
    *(_QWORD *)(v74 + 64) = v70;
    *(_QWORD *)(v74 + 72) = v120;
    v71 = 1;
    *(_BYTE *)(v74 + 80) = v63 & 1;
LABEL_78:
    v75 = v67;
    v76 = v69;
    sub_61A8(v65, v66, v68, v67, v70, v69, v63);
    sub_6100(__dsta);
    sub_6100(v148);
    v118 = v66;
    sub_61A8(v65, v66, v133, v75, v70, v76, v63);
    swift_bridgeObjectRetain(v72);
    v77 = (double *)(v72 + 80);
    v78 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v77 & 1) == 0)
      {
        v79 = *(v77 - 2);
        v80 = exp2(-*(v77 - 1) / *(v77 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
          v78 = sub_2FDB4(0, v78[2] + 1, 1, v78);
        v82 = v78[2];
        v81 = v78[3];
        if (v82 >= v81 >> 1)
          v78 = sub_2FDB4((_QWORD *)(v81 > 1), v82 + 1, 1, v78);
        v78[2] = v82 + 1;
        *(double *)&v78[v82 + 4] = v79 * v80;
      }
      v77 += 7;
      --v71;
    }
    while (v71);
    swift_bridgeObjectRelease();
    v83 = v118;
    goto LABEL_87;
  }
  if (v8 >= -551)
  {
    v12 = 552 * v9;
    if (__dst != __src || &__src[v12] <= __dst)
      memmove(__dst, __src, v12);
    v122 = &v4[v12];
    v149 = &v4[v12];
    if (v6 < v5 && v8 >= 552)
    {
      v143 = v5;
      while (1)
      {
        memcpy(__dsta, v6, 0x221uLL);
        memcpy(v148, v4, 0x221uLL);
        v13 = __dsta[16];
        v139 = v4;
        v141 = v7;
        v145 = v6;
        if ((unint64_t)__dsta[16] >> 1 == 0xFFFFFFFF)
        {
          sub_6100(__dsta);
          sub_6100(v148);
          v14 = 0.0;
          goto LABEL_30;
        }
        v16 = __dsta[10];
        v15 = __dsta[11];
        v17 = __dsta[12];
        v18 = __dsta[13];
        v19 = __dsta[14];
        v20 = __dsta[15];
        __srca = (void *)__dsta[13];
        v131 = __dsta[11];
        v125 = __dsta[14];
        if ((unint64_t)__dsta[16] >> 62 != 3)
          break;
        v21 = *(_QWORD *)(__dsta[10] + 16);
        if (v21)
        {
          v22 = __dsta[10];
          goto LABEL_15;
        }
        v57 = __dsta[13];
        sub_61A8(__dsta[10], __dsta[11], __dsta[12], __dsta[13], __dsta[14], __dsta[15], __dsta[16]);
        sub_6100(__dsta);
        sub_6100(v148);
        sub_61A8(v16, v15, v17, v57, v19, v20, v13);
        v25 = _swiftEmptyArrayStorage;
LABEL_24:
        v30 = v25[2];
        if (v30)
        {
          v31 = (double *)(v25 + 4);
          v14 = 0.0;
          do
          {
            v32 = *v31++;
            v14 = v14 + v32;
            --v30;
          }
          while (v30);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          v14 = 0.0;
        }
        swift_bridgeObjectRelease();
        sub_62CC(v16, v131, v17, (uint64_t)__srca, v125, v20, v13);
        v4 = v139;
        v7 = v141;
        v5 = v143;
        v6 = v145;
LABEL_30:
        v33 = v148[16];
        if ((unint64_t)v148[16] >> 1 == 0xFFFFFFFF)
        {
          sub_6228(v148);
          sub_6228(__dsta);
          if (v14 >= 0.0)
            goto LABEL_32;
          goto LABEL_55;
        }
        v35 = v148[10];
        v36 = v148[11];
        v37 = v148[12];
        v38 = v148[13];
        v39 = v148[14];
        v40 = v148[15];
        v135 = v148[11];
        __srcb = (void *)v148[13];
        v132 = v148[12];
        v126 = v148[14];
        if ((unint64_t)v148[16] >> 62 == 3)
        {
          v41 = *(_QWORD *)(v148[10] + 16);
          if (!v41)
          {
            v58 = v148[12];
            v59 = v148[14];
            sub_61A8(v148[10], v148[11], v148[12], v148[13], v148[14], v148[15], v148[16]);
            sub_61A8(v35, v36, v58, v38, v59, v40, v33);
            v48 = _swiftEmptyArrayStorage;
            v53 = _swiftEmptyArrayStorage[2];
            if (!v53)
              goto LABEL_53;
            goto LABEL_48;
          }
          v42 = v148[10];
        }
        else
        {
          v43 = sub_5EDC(&qword_1F12B0);
          v44 = swift_allocObject(v43, 88, 7);
          v39 = v126;
          v38 = (uint64_t)__srcb;
          v37 = v132;
          v36 = v135;
          v42 = v44;
          *(_OWORD *)(v44 + 16) = xmmword_1875E0;
          *(_QWORD *)(v44 + 32) = v35;
          *(_QWORD *)(v44 + 40) = v135;
          *(_QWORD *)(v44 + 48) = v132;
          *(_QWORD *)(v44 + 56) = __srcb;
          *(_QWORD *)(v44 + 64) = v126;
          *(_QWORD *)(v44 + 72) = v40;
          v41 = 1;
          *(_BYTE *)(v44 + 80) = v33 & 1;
        }
        v45 = v37;
        v46 = v39;
        sub_61A8(v35, v36, v37, v38, v39, v40, v33);
        sub_61A8(v35, v36, v45, v38, v46, v40, v33);
        swift_bridgeObjectRetain(v42);
        v47 = (double *)(v42 + 80);
        v48 = _swiftEmptyArrayStorage;
        do
        {
          if ((*(_BYTE *)v47 & 1) == 0)
          {
            v49 = *(v47 - 2);
            v50 = exp2(-*(v47 - 1) / *(v47 - 3));
            if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
              v48 = sub_2FDB4(0, v48[2] + 1, 1, v48);
            v52 = v48[2];
            v51 = v48[3];
            if (v52 >= v51 >> 1)
              v48 = sub_2FDB4((_QWORD *)(v51 > 1), v52 + 1, 1, v48);
            v48[2] = v52 + 1;
            *(double *)&v48[v52 + 4] = v49 * v50;
          }
          v47 += 7;
          --v41;
        }
        while (v41);
        swift_bridgeObjectRelease();
        v4 = v139;
        v53 = v48[2];
        if (!v53)
        {
LABEL_53:
          swift_bridgeObjectRelease();
          v55 = 0.0;
          goto LABEL_54;
        }
LABEL_48:
        v54 = (double *)(v48 + 4);
        v55 = 0.0;
        do
        {
          v56 = *v54++;
          v55 = v55 + v56;
          --v53;
        }
        while (v53);
        swift_bridgeObjectRelease();
LABEL_54:
        swift_bridgeObjectRelease();
        sub_62CC(v35, v135, v132, (uint64_t)__srcb, v126, v40, v33);
        sub_6228(v148);
        sub_6228(__dsta);
        v7 = v141;
        v5 = v143;
        v6 = v145;
        if (v14 >= v55)
        {
LABEL_32:
          if (v7 != v4)
            memmove(v7, v4, 0x228uLL);
          v4 += 552;
          v150 = v4;
          v34 = v6;
          goto LABEL_59;
        }
LABEL_55:
        v34 = v6 + 552;
        if (v7 < v6 || v7 >= v34 || v7 != v6)
          memmove(v7, v6, 0x228uLL);
LABEL_59:
        v7 += 552;
        if (v4 >= v122 || v34 >= v5)
        {
          v151 = v7;
          goto LABEL_126;
        }
        v6 = v34;
      }
      v23 = sub_5EDC(&qword_1F12B0);
      v22 = swift_allocObject(v23, 88, 7);
      *(_OWORD *)(v22 + 16) = xmmword_1875E0;
      *(_QWORD *)(v22 + 32) = v16;
      *(_QWORD *)(v22 + 40) = v15;
      *(_QWORD *)(v22 + 48) = v17;
      *(_QWORD *)(v22 + 56) = v18;
      *(_QWORD *)(v22 + 64) = v19;
      *(_QWORD *)(v22 + 72) = v20;
      v21 = 1;
      *(_BYTE *)(v22 + 80) = v13 & 1;
LABEL_15:
      v134 = v13;
      sub_61A8(v16, v15, v17, v18, v19, v20, v13);
      sub_6100(__dsta);
      sub_6100(v148);
      sub_61A8(v16, v15, v17, v18, v19, v20, v13);
      swift_bridgeObjectRetain(v22);
      v24 = (double *)(v22 + 80);
      v25 = _swiftEmptyArrayStorage;
      do
      {
        if ((*(_BYTE *)v24 & 1) == 0)
        {
          v26 = *(v24 - 2);
          v27 = exp2(-*(v24 - 1) / *(v24 - 3));
          if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) == 0)
            v25 = sub_2FDB4(0, v25[2] + 1, 1, v25);
          v29 = v25[2];
          v28 = v25[3];
          if (v29 >= v28 >> 1)
            v25 = sub_2FDB4((_QWORD *)(v28 > 1), v29 + 1, 1, v25);
          v25[2] = v29 + 1;
          *(double *)&v25[v29 + 4] = v26 * v27;
        }
        v24 += 7;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease();
      v13 = v134;
      goto LABEL_24;
    }
    goto LABEL_126;
  }
LABEL_127:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_138888(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64x2_t *v10;
  __int8 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  sub_343E0(0, v2, 0);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    v3 = (_QWORD *)(a1 + 72);
    do
    {
      v4 = *(v3 - 5);
      v13 = *(v3 - 4);
      v12 = *((_BYTE *)v3 - 24);
      v5 = *(v3 - 2);
      v6 = *(v3 - 1);
      v7 = *v3;
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v7);
      if (v9 >= v8 >> 1)
        sub_343E0(v8 > 1, v9 + 1, 1);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      v10 = (int64x2_t *)&_swiftEmptyArrayStorage[7 * v9];
      v10[2] = vdupq_n_s64(v4);
      v10[3].i64[0] = v13;
      v10[3].i8[8] = v12;
      v10[4].i64[0] = v5;
      v10[4].i64[1] = v6;
      v10[5].i64[0] = v7;
      v3 += 6;
      --v2;
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

Swift::Int sub_1389BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0A7C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_13D648(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_138A24()
{
  uint64_t result;

  sub_6789C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD000000000000026, 0x80000000001A2FC0);
  qword_224608 = result;
  return result;
}

uint64_t sub_138A88()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_224610);
  sub_5216C(v0, (uint64_t)qword_224610);
  if (qword_1F0150 != -1)
    swift_once(&qword_1F0150, sub_138A24);
  return Logger.init(_:)((id)qword_224608);
}

uint64_t sub_138B08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[140] = v2;
  v3[139] = a2;
  v3[138] = a1;
  return swift_task_switch(sub_138B28, 0, 0);
}

uint64_t sub_138B28()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(const void **)(v0 + 1112);
  v2 = *(_QWORD *)(v0 + 1104);
  v3 = sub_5EDC(&qword_1F1128);
  v4 = type metadata accessor for SeedBasedRecommendationRequest(0);
  *(_QWORD *)(v0 + 1128) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  LODWORD(v5) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 1168) = v5;
  v5 = v5;
  v7 = (v5 + 32) & ~v5;
  v8 = swift_allocObject(v3, v7 + v6, v5 | 7);
  *(_QWORD *)(v0 + 1136) = v8;
  *(_OWORD *)(v8 + 16) = xmmword_1875E0;
  sub_70D7C(v2, v8 + v7);
  memcpy((void *)(v0 + 16), v1, 0x440uLL);
  v9 = (_QWORD *)swift_task_alloc(dword_1F66F4);
  *(_QWORD *)(v0 + 1144) = v9;
  *v9 = v0;
  v9[1] = sub_138C0C;
  return sub_138DE8(v8, (const void *)(v0 + 16));
}

uint64_t sub_138C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1144);
  *(_QWORD *)(v3 + 1152) = a1;
  *(_QWORD *)(v3 + 1160) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v5 = sub_12015C;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 1136);
    v7 = *(unsigned __int8 *)(v3 + 1168);
    v8 = *(_QWORD *)(v3 + 1128);
    v9 = v6 + ((v7 + 32) & ~v7);
    swift_setDeallocating(v6);
    swift_arrayDestroy(v9, *(_QWORD *)(v6 + 16), v8);
    swift_deallocClassInstance(v6, 32, 7);
    v5 = sub_138CCC;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_138CCC()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 1152) + 16) && (v1 = sub_39574(*(_QWORD *)(v0 + 1104)), (v2 & 1) != 0))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 1152) + 56) + 8 * v1);
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 1104);
    swift_bridgeObjectRelease();
    v6 = type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2.Errors(0);
    v7 = sub_41754(&qword_1F6728, type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2.Errors, (uint64_t)&unk_19BDC8);
    swift_allocError(v6, v7, 0, 0);
    v9 = v8;
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v9, v5, v10);
    v11 = swift_storeEnumTagMultiPayload(v9, v6, 7);
    swift_willThrow(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_138DE8(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3[443] = v2;
  v3[442] = a1;
  v5 = type metadata accessor for SeedBasedRecommendationRequest(0);
  v3[444] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[445] = v6;
  v3[446] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v3[447] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[448] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[449] = swift_task_alloc(v9);
  v3[450] = swift_task_alloc(v9);
  v3[451] = swift_task_alloc(v9);
  v3[452] = swift_task_alloc(v9);
  v3[453] = swift_task_alloc(v9);
  memcpy(v3 + 2, a2, 0x440uLL);
  return swift_task_switch(sub_138EC8, 0, 0);
}

uint64_t sub_138EC8()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  _QWORD *v10;

  v1 = v0[442];
  sub_13A3BC(v1, v0[453]);
  v2 = _swiftEmptyDictionarySingleton;
  v10 = _swiftEmptyDictionarySingleton;
  v3 = *(_QWORD *)(v1 + 16);
  v0[454] = v3;
  if (v3)
  {
    v4 = v0[445];
    v5 = v0[442];
    v6 = v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v7 = *(_QWORD *)(v4 + 72);
    swift_bridgeObjectRetain(v5);
    do
    {
      sub_13C430(&v10, v6);
      v6 += v7;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v2 = v10;
  }
  v0[455] = (uint64_t)v2;
  memcpy(v0 + 138, v0 + 2, 0x440uLL);
  v8 = (uint64_t **)swift_task_alloc(dword_1F66FC);
  v0[456] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = (uint64_t *)sub_138FEC;
  return sub_13A7CC((uint64_t)(v0 + 416), v0[442], (uint64_t)(v0 + 138));
}

uint64_t sub_138FEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 3648);
  *(_QWORD *)(*(_QWORD *)v1 + 3656) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_13A214;
  }
  else
  {
    v3 = sub_139058;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_139058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t (*v86)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _OWORD *v87;
  uint64_t v88[4];

  v1 = *(_QWORD *)(v0 + 3328);
  *(_QWORD *)(v0 + 3664) = v1;
  v2 = *(_QWORD *)(v0 + 3336);
  *(_QWORD *)(v0 + 3672) = v2;
  v3 = *(_QWORD *)(v0 + 3344);
  *(_QWORD *)(v0 + 3680) = v3;
  v4 = *(_QWORD *)(v0 + 3352);
  *(_QWORD *)(v0 + 3688) = v4;
  v5 = *(_QWORD *)(v0 + 3360);
  *(_QWORD *)(v0 + 3696) = v5;
  v6 = *(_QWORD *)(v0 + 3368);
  *(_QWORD *)(v0 + 3704) = v6;
  v7 = *(_QWORD *)(v0 + 3376);
  *(_QWORD *)(v0 + 3712) = v7;
  v8 = *(_QWORD *)(v0 + 3384);
  *(_QWORD *)(v0 + 3720) = v8;
  if (v2 == 1)
  {
    swift_bridgeObjectRelease();
    if (qword_1F0158 != -1)
      swift_once(&qword_1F0158, sub_138A88);
    v9 = *(_QWORD *)(v0 + 3624);
    v10 = *(_QWORD *)(v0 + 3592);
    v11 = *(_QWORD *)(v0 + 3584);
    v12 = *(_QWORD *)(v0 + 3576);
    v13 = type metadata accessor for Logger(0);
    sub_5216C(v13, (uint64_t)qword_224610);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    v17 = os_log_type_enabled(v15, v16);
    v18 = *(_QWORD *)(v0 + 3592);
    v19 = *(_QWORD *)(v0 + 3584);
    v20 = *(_QWORD *)(v0 + 3576);
    if (v17)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v88[0] = v22;
      *(_DWORD *)v21 = 136315138;
      v23 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
      *(_QWORD *)(v0 + 3496) = sub_9DA98(v24, v25, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3496, v0 + 3504, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v26(v18, v20);
      _os_log_impl(&dword_0, v15, v16, "Unable to construct server recommendation request for %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      v26 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v26(*(_QWORD *)(v0 + 3592), *(_QWORD *)(v0 + 3576));
    }

    v30 = *(_QWORD *)(v0 + 3624);
    v31 = *(_QWORD *)(v0 + 3576);
    v32 = sub_53334((uint64_t)_swiftEmptyArrayStorage);
    v26(v30, v31);
    v33 = *(_QWORD *)(v0 + 3616);
    v34 = *(_QWORD *)(v0 + 3608);
    v35 = *(_QWORD *)(v0 + 3600);
    v36 = *(_QWORD *)(v0 + 3592);
    v37 = *(_QWORD *)(v0 + 3568);
    swift_task_dealloc(*(_QWORD *)(v0 + 3624));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v32);
  }
  else
  {
    v27 = (_OWORD *)(v0 + 2560);
    v28 = *(_QWORD *)(v0 + 3544);
    *(_QWORD *)(v0 + 3264) = v1;
    *(_QWORD *)(v0 + 3272) = v2;
    *(_QWORD *)(v0 + 3280) = v3;
    *(_QWORD *)(v0 + 3288) = v4;
    *(_QWORD *)(v0 + 3296) = v5;
    *(_QWORD *)(v0 + 3304) = v6;
    *(_QWORD *)(v0 + 3312) = v7;
    *(_QWORD *)(v0 + 3320) = v8;
    v29 = *(_QWORD *)(v28 + 48);
    v85 = (_OWORD *)(v0 + 2800);
    if ((*(_BYTE *)(v28 + 64) & 1) != 0)
      __asm { BR              X11 }
    v39 = *(_QWORD *)(v28 + 56);
    swift_bridgeObjectRetain(v39);
    v87 = (_OWORD *)(v0 + 3264);
    v40 = *(_QWORD *)(v28 + 16);
    v41 = *(_QWORD *)(v28 + 24);
    v42 = v28 + 72;
    v43 = *(_QWORD *)(v28 + 32);
    v44 = *(_QWORD *)(v28 + 40);
    sub_3DD40(v42, v0 + 3456);
    *(_QWORD *)(v0 + 2712) = v29;
    *(_QWORD *)(v0 + 2720) = v39;
    *(_QWORD *)(v0 + 2728) = v40;
    *(_QWORD *)(v0 + 2736) = v41;
    *(_QWORD *)(v0 + 2744) = v43;
    *(_QWORD *)(v0 + 2752) = v44;
    sub_3DD40(v0 + 3456, v0 + 2760);
    v88[0] = v40;
    v88[1] = v41;
    v88[2] = v43;
    v88[3] = v44;
    sub_3EAFC(v40, v41);
    sub_3EAFC(v43, v44);
    sub_3EAFC(v40, v41);
    sub_3EAFC(v43, v44);
    ClientConverter.init(configuration:)(v88, (uint64_t *)(v0 + 3040));
    sub_62F8((_QWORD *)(v0 + 3456));
    v45 = *(_OWORD *)(v0 + 3136);
    v46 = *(_OWORD *)(v0 + 3152);
    *(_OWORD *)(v0 + 2656) = v45;
    *(_OWORD *)(v0 + 2672) = v46;
    *(_OWORD *)(v0 + 2688) = *(_OWORD *)(v0 + 3168);
    *(_QWORD *)(v0 + 2704) = *(_QWORD *)(v0 + 3184);
    v47 = *(_OWORD *)(v0 + 3072);
    v48 = *(_OWORD *)(v0 + 3088);
    *(_OWORD *)(v0 + 2592) = v47;
    *(_OWORD *)(v0 + 2608) = v48;
    v49 = *(_OWORD *)(v0 + 3120);
    *(_OWORD *)(v0 + 2624) = *(_OWORD *)(v0 + 3104);
    *(_OWORD *)(v0 + 2640) = v49;
    v50 = *(_OWORD *)(v0 + 3056);
    *v27 = *(_OWORD *)(v0 + 3040);
    *(_OWORD *)(v0 + 2576) = v50;
    v51 = *(_OWORD *)(v0 + 2736);
    v52 = *(_OWORD *)(v0 + 2768);
    v53 = *(_OWORD *)(v0 + 2784);
    *(_OWORD *)(v0 + 2992) = *(_OWORD *)(v0 + 2752);
    *(_OWORD *)(v0 + 3008) = v52;
    *(_OWORD *)(v0 + 3024) = v53;
    v54 = *(_OWORD *)(v0 + 2672);
    v55 = *(_OWORD *)(v0 + 2688);
    *(_OWORD *)(v0 + 2896) = v45;
    *(_OWORD *)(v0 + 2912) = v54;
    v56 = *(_OWORD *)(v0 + 2704);
    v57 = *(_OWORD *)(v0 + 2720);
    *(_OWORD *)(v0 + 2928) = v55;
    *(_OWORD *)(v0 + 2944) = v56;
    *(_OWORD *)(v0 + 2960) = v57;
    *(_OWORD *)(v0 + 2976) = v51;
    v58 = *(_OWORD *)(v0 + 2608);
    v59 = *(_OWORD *)(v0 + 2624);
    *(_OWORD *)(v0 + 2832) = v47;
    *(_OWORD *)(v0 + 2848) = v58;
    v60 = *(_OWORD *)(v0 + 2640);
    *(_OWORD *)(v0 + 2864) = v59;
    *(_OWORD *)(v0 + 2880) = v60;
    v61 = *(_OWORD *)(v0 + 2576);
    *v85 = *v27;
    *(_OWORD *)(v0 + 2816) = v61;
    if (qword_1F0158 != -1)
      swift_once(&qword_1F0158, sub_138A88);
    v62 = *(_QWORD *)(v0 + 3624);
    v63 = *(_QWORD *)(v0 + 3616);
    v64 = *(_QWORD *)(v0 + 3584);
    v65 = *(_QWORD *)(v0 + 3576);
    v66 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 3728) = sub_5216C(v66, (uint64_t)qword_224610);
    v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
    *(_QWORD *)(v0 + 3736) = v67;
    v68 = v67(v63, v62, v65);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.default.getter(v69);
    v71 = os_log_type_enabled(v69, v70);
    v72 = *(_QWORD *)(v0 + 3616);
    v73 = *(_QWORD *)(v0 + 3584);
    v74 = *(_QWORD *)(v0 + 3576);
    if (v71)
    {
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = swift_slowAlloc(32, -1);
      v88[0] = v84;
      *(_DWORD *)v75 = 136446210;
      v76 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v77 = dispatch thunk of CustomStringConvertible.description.getter(v74, v76);
      *(_QWORD *)(v0 + 3528) = sub_9DA98(v77, v78, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3528, v0 + 3536, v75 + 4, v75 + 12);
      swift_bridgeObjectRelease();
      v79 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v79(v72, v74);
      _os_log_impl(&dword_0, v69, v70, "fetching recommendations for %{public}s", v75, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v75, -1, -1);
    }
    else
    {
      v79 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      v79(*(_QWORD *)(v0 + 3616), *(_QWORD *)(v0 + 3576));
    }

    *(_QWORD *)(v0 + 3744) = v79;
    v80 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 3752) = v80;
    *(_QWORD *)(v80 + 16) = v85;
    *(_QWORD *)(v80 + 24) = v87;
    v81 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 3760) = v81;
    *(_QWORD *)(v81 + 16) = v85;
    v82 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 3768) = v82;
    *(_QWORD *)(v82 + 16) = v85;
    v86 = (uint64_t (*)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1F42E8 + dword_1F42E8);
    v83 = (_QWORD *)swift_task_alloc(unk_1F42EC);
    *(_QWORD *)(v0 + 3776) = v83;
    *v83 = v0;
    v83[1] = sub_139764;
    return v86(v0 + 3192, v87, (uint64_t)sub_DA21C, v80, (uint64_t)&unk_1F42E0, v81, (uint64_t)sub_DA73C, v82);
  }
}

uint64_t sub_139764()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = (*v1)[472];
  (*v1)[473] = v0;
  swift_task_dealloc(v3);
  v4 = v2[471];
  v5 = v2[470];
  v6 = v2[469];
  if (v0)
  {
    swift_task_dealloc(v2[471]);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    v7 = sub_139CD4;
  }
  else
  {
    sub_13D5E0(v2[458], v2[459], v2[460], v2[461], v2[462], v2[463], v2[464], v2[465]);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    v7 = sub_139838;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_139838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[8];
  unsigned __int8 v59;

  v1 = *(_QWORD *)(v0 + 3192);
  v2 = *(_QWORD *)(v0 + 3200);
  v3 = *(_QWORD *)(v0 + 3208);
  v4 = *(_QWORD *)(v0 + 3216);
  v5 = *(_QWORD *)(v0 + 3232);
  v47 = *(_QWORD *)(v0 + 3224);
  v48 = *(_QWORD *)(v0 + 3240);
  v49 = *(_QWORD *)(v0 + 3248);
  v6 = *(_BYTE *)(v0 + 3256);
  v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 3736))(*(_QWORD *)(v0 + 3608), *(_QWORD *)(v0 + 3624), *(_QWORD *)(v0 + 3576));
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 3744);
    v10 = *(_QWORD *)(v0 + 3608);
    v41 = *(_QWORD *)(v0 + 3576);
    v45 = v5;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v58[0] = v42;
    *(_DWORD *)v11 = 136446210;
    v12 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v41, v12);
    *(_QWORD *)(v0 + 3520) = sub_9DA98(v13, v14, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3520, v0 + 3528, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    v43(v10, v41);
    _os_log_impl(&dword_0, v8, v9, "fetched recommendations for %{public}s", v11, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v15 = v11;
    v5 = v45;
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 3744))(*(_QWORD *)(v0 + 3608), *(_QWORD *)(v0 + 3576));
  }

  v16 = *(_QWORD *)(v0 + 3784);
  v58[0] = v1;
  v58[1] = v2;
  v58[2] = v3;
  v58[3] = v4;
  v58[4] = v47;
  v58[5] = v5;
  v58[6] = v48;
  v58[7] = v49;
  v59 = v6;
  sub_14D1A4();
  if (v16)
  {
    v44 = *(_QWORD *)(v0 + 3624);
    v46 = *(void (**)(uint64_t, uint64_t))(v0 + 3744);
    v17 = *(_QWORD *)(v0 + 3576);
    swift_bridgeObjectRelease();
    sub_D63DC(v1, v2, v3, v4, v47, v5, v48, v49, v6);
    sub_1062AC((_QWORD *)(v0 + 2800));
    v46(v44, v17);
    v18 = *(_QWORD *)(v0 + 3616);
    v19 = *(_QWORD *)(v0 + 3608);
    v20 = *(_QWORD *)(v0 + 3600);
    v21 = *(_QWORD *)(v0 + 3592);
    v22 = *(_QWORD *)(v0 + 3568);
    swift_task_dealloc(*(_QWORD *)(v0 + 3624));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 3632);
    sub_D63DC(v1, v2, v3, v4, v47, v5, v48, v49, v6);
    v25 = v50;
    v26 = v51;
    *(_QWORD *)(v0 + 3792) = v50;
    *(_QWORD *)(v0 + 3800) = v51;
    v27 = v52;
    v28 = v53;
    *(_QWORD *)(v0 + 3808) = v52;
    *(_QWORD *)(v0 + 3816) = v53;
    *(_QWORD *)(v0 + 3824) = v54;
    *(_QWORD *)(v0 + 3832) = v55;
    *(_QWORD *)(v0 + 3840) = v56;
    *(_QWORD *)(v0 + 3848) = v57;
    v29 = _swiftEmptyArrayStorage;
    v58[0] = (uint64_t)_swiftEmptyArrayStorage;
    if (v24)
    {
      v30 = *(_QWORD *)(v0 + 3560);
      v31 = *(_QWORD *)(v0 + 3552);
      v32 = *(_QWORD *)(v0 + 3536);
      v33 = v32 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      v34 = *(_QWORD *)(v30 + 72);
      swift_bridgeObjectRetain(v32);
      v35 = 0;
      do
      {
        v36 = *(_QWORD *)(v0 + 3632);
        v37 = *(_QWORD *)(v0 + 3568);
        ++v35;
        sub_70D7C(v33, v37);
        v38 = *(_QWORD *)(v37 + *(int *)(v31 + 20));
        swift_bridgeObjectRetain(v38);
        sub_26AA0(v37, type metadata accessor for SeedBasedRecommendationRequest);
        sub_10EC18(v38);
        v33 += v34;
      }
      while (v35 != v36);
      swift_bridgeObjectRelease();
      v29 = (_QWORD *)v58[0];
      v26 = v51;
      v25 = v50;
      v28 = v53;
      v27 = v52;
    }
    v39 = sub_3D52C((uint64_t)v29);
    *(_QWORD *)(v0 + 3856) = v39;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 3392) = v25;
    *(_QWORD *)(v0 + 3400) = v26;
    *(_QWORD *)(v0 + 3408) = v27;
    *(_QWORD *)(v0 + 3416) = v28;
    *(_QWORD *)(v0 + 3424) = v54;
    *(_QWORD *)(v0 + 3432) = v55;
    *(_QWORD *)(v0 + 3440) = v56;
    *(_QWORD *)(v0 + 3448) = v57;
    memcpy((void *)(v0 + 2192), (const void *)(v0 + 104), 0x16BuLL);
    sub_605D0(v0 + 104);
    v40 = (_QWORD *)swift_task_alloc(dword_1F6704);
    *(_QWORD *)(v0 + 3864) = v40;
    *v40 = v0;
    v40[1] = sub_139DD8;
    return sub_13B2BC(v0 + 3392, v39, *(_QWORD *)(v0 + 3640), (void *)(v0 + 2192));
  }
}

uint64_t sub_139CD4()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 3744);
  v16 = *(_QWORD *)(v0 + 3712);
  v17 = *(_QWORD *)(v0 + 3720);
  v15 = *(_QWORD *)(v0 + 3704);
  v2 = *(_QWORD *)(v0 + 3696);
  v3 = *(_QWORD *)(v0 + 3688);
  v4 = *(_QWORD *)(v0 + 3680);
  v5 = *(_QWORD *)(v0 + 3672);
  v6 = *(_QWORD *)(v0 + 3664);
  v7 = *(_QWORD *)(v0 + 3624);
  v8 = *(_QWORD *)(v0 + 3576);
  swift_bridgeObjectRelease();
  sub_1062AC((_QWORD *)(v0 + 2800));
  v1(v7, v8);
  sub_13D5E0(v6, v5, v4, v3, v2, v15, v16, v17);
  v9 = *(_QWORD *)(v0 + 3616);
  v10 = *(_QWORD *)(v0 + 3608);
  v11 = *(_QWORD *)(v0 + 3600);
  v12 = *(_QWORD *)(v0 + 3592);
  v13 = *(_QWORD *)(v0 + 3568);
  swift_task_dealloc(*(_QWORD *)(v0 + 3624));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_139DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 3864);
  *(_QWORD *)(v3 + 3872) = a1;
  *(_QWORD *)(v3 + 3880) = v1;
  swift_task_dealloc(v4);
  sub_60AF8(v3 + 104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v1)
  {
    v5 = sub_13A2A8;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_139F0C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_139F0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t type;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 3872);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 3736))(*(_QWORD *)(v0 + 3600), *(_QWORD *)(v0 + 3624), *(_QWORD *)(v0 + 3576));
  v2 = swift_bridgeObjectRetain_n(v1, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 3872);
    v6 = *(void (**)(uint64_t, uint64_t))(v0 + 3744);
    v35 = *(_QWORD *)(v0 + 3624);
    type = v4;
    v7 = *(_QWORD *)(v0 + 3600);
    v8 = *(_QWORD *)(v0 + 3576);
    v9 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v36 = v34;
    *(_DWORD *)v9 = 136446466;
    v10 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v8, v10);
    *(_QWORD *)(v0 + 3504) = sub_9DA98(v11, v12, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3504, v0 + 3512, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    v6(v7, v8);
    v13 = v6;
    *(_WORD *)(v9 + 12) = 2080;
    swift_bridgeObjectRetain(v5);
    v14 = sub_5EDC(&qword_1F1638);
    v15 = sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = v8;
    v17 = Dictionary.description.getter(v5, v8, v14, v15);
    v19 = v18;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 3512) = sub_9DA98(v17, v19, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3512, v0 + 3520, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v5, 2);
    _os_log_impl(&dword_0, v3, type, "for %{public}s, returning result %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    sub_1062AC((_QWORD *)(v0 + 2800));
    v20 = v35;
    v21 = v16;
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 3872);
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 3744);
    v23 = *(_QWORD *)(v0 + 3624);
    v24 = *(_QWORD *)(v0 + 3600);
    v25 = *(_QWORD *)(v0 + 3576);

    swift_bridgeObjectRelease_n(v22, 2);
    v13(v24, v25);
    sub_1062AC((_QWORD *)(v0 + 2800));
    v20 = v23;
    v21 = v25;
  }
  v13(v20, v21);
  v26 = *(_QWORD *)(v0 + 3872);
  v27 = *(_QWORD *)(v0 + 3616);
  v28 = *(_QWORD *)(v0 + 3608);
  v29 = *(_QWORD *)(v0 + 3600);
  v30 = *(_QWORD *)(v0 + 3592);
  v31 = *(_QWORD *)(v0 + 3568);
  swift_task_dealloc(*(_QWORD *)(v0 + 3624));
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v26);
}

uint64_t sub_13A214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 3584) + 8))(*(_QWORD *)(v0 + 3624), *(_QWORD *)(v0 + 3576));
  v1 = *(_QWORD *)(v0 + 3616);
  v2 = *(_QWORD *)(v0 + 3608);
  v3 = *(_QWORD *)(v0 + 3600);
  v4 = *(_QWORD *)(v0 + 3592);
  v5 = *(_QWORD *)(v0 + 3568);
  swift_task_dealloc(*(_QWORD *)(v0 + 3624));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_13A2A8()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 3744);
  v2 = *(_QWORD *)(v0 + 3624);
  v3 = *(_QWORD *)(v0 + 3576);
  sub_1062AC((_QWORD *)(v0 + 2800));
  v1(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(v0 + 3616);
  v5 = *(_QWORD *)(v0 + 3608);
  v6 = *(_QWORD *)(v0 + 3600);
  v7 = *(_QWORD *)(v0 + 3592);
  v8 = *(_QWORD *)(v0 + 3568);
  swift_task_dealloc(*(_QWORD *)(v0 + 3624));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_13A3BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  int v43;
  os_log_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v4 = type metadata accessor for SeedBasedRecommendationRequest(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == 1)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16))(a2, a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v8);
  }
  else
  {
    UUID.init()(v10);
    if (qword_1F0158 != -1)
      swift_once(&qword_1F0158, sub_138A88);
    v14 = type metadata accessor for Logger(0);
    sub_5216C(v14, (uint64_t)qword_224610);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
    swift_bridgeObjectRetain_n(a1, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      v43 = v17;
      v44 = v16;
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v42 = v19;
      v47 = v19;
      *(_DWORD *)v18 = 136315394;
      v20 = UUID.uuidString.getter(v19);
      v46 = (_QWORD *)sub_9DA98(v20, v21, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v41 = (uint8_t *)v18;
      *(_WORD *)(v18 + 12) = 2080;
      v22 = _swiftEmptyArrayStorage;
      v45 = a1;
      if (v13)
      {
        v46 = _swiftEmptyArrayStorage;
        sub_340F4(0, v13, 0);
        v23 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        v24 = *(_QWORD *)(v5 + 72);
        v22 = v46;
        do
        {
          v25 = sub_70D7C(v23, (uint64_t)v7);
          v26 = UUID.uuidString.getter(v25);
          v28 = v27;
          sub_26AA0((uint64_t)v7, type metadata accessor for SeedBasedRecommendationRequest);
          if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
          {
            sub_340F4(0, v22[2] + 1, 1);
            v22 = v46;
          }
          v30 = v22[2];
          v29 = v22[3];
          if (v30 >= v29 >> 1)
          {
            sub_340F4(v29 > 1, v30 + 1, 1);
            v22 = v46;
          }
          v22[2] = v30 + 1;
          v31 = &v22[2 * v30];
          v31[4] = v26;
          v31[5] = v28;
          v23 += v24;
          --v13;
        }
        while (v13);
      }
      v32 = v41;
      v46 = v22;
      v33 = sub_5EDC(&qword_1F03E0);
      v34 = sub_67850();
      v35 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v33, v34);
      v37 = v36;
      swift_bridgeObjectRelease();
      v46 = (_QWORD *)sub_9DA98(v35, v37, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease_n(v45, 2);
      swift_bridgeObjectRelease();
      v38 = v44;
      _os_log_impl(&dword_0, v44, (os_log_type_t)v43, "Creating overall UUID %s for subrequests %s", v32, 0x16u);
      v39 = v42;
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);

      swift_bridgeObjectRelease_n(a1, 2);
    }
  }
}

uint64_t sub_13A7CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = v3;
  *(_QWORD *)(v4 + 16) = a1;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 40) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 48) = v7;
  *(_QWORD *)(v4 + 56) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SeedBasedRecommendationRequest(0);
  *(_QWORD *)(v4 + 64) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 72) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 80) = swift_task_alloc(v10);
  *(_QWORD *)(v4 + 88) = swift_task_alloc(v10);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a3 + 368);
  v11 = *(_QWORD *)(a3 + 464);
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(a3 + 416);
  *(_QWORD *)(v4 + 120) = v11;
  return swift_task_switch(sub_13A880, 0, 0);
}

uint64_t sub_13A880()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  BOOL v29;
  char *v30;
  char *v31;
  BOOL v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  int64_t v55;
  char v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  unint64_t v67;
  char *v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _OWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(void);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  _QWORD *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char v120[17];

  v3 = v0[3];
  v103 = *(_QWORD *)(v3 + 16);
  if (!v103)
  {
    v79 = (_OWORD *)v0[2];
    *v79 = xmmword_18CB70;
    v79[1] = 0u;
    v79[2] = 0u;
    v79[3] = 0u;
    goto LABEL_109;
  }
  v4 = v0[15];
  v6 = (int *)v0[8];
  v5 = v0[9];
  v105 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  sub_70D7C(v105, v0[11]);
  v104 = *(_QWORD *)(v5 + 72);
  v101 = (uint64_t *)(v4 + 32);
  v102 = v4;
  swift_bridgeObjectRetain(v3);
  v7 = 0;
  v106 = _swiftEmptyArrayStorage;
  v109 = v6;
  v110 = v0;
  do
  {
    v8 = v0[10];
    v108 = v7;
    sub_70D7C(v105 + v7 * v104, v8);
    v9 = swift_bridgeObjectRetain(*(_QWORD *)(v8 + v6[5]));
    v10 = sub_499C8(v9);
    v11 = v10[2];
    if (v11)
    {
      v12 = sub_5EDC(&qword_1F1100);
      v13 = (char *)swift_allocObject(v12, 552 * v11 + 32, 7);
      v14 = j__malloc_size(v13);
      *((_QWORD *)v13 + 2) = v11;
      *((_QWORD *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 552);
      v15 = sub_3B930(&v117, v13 + 32, v11, (uint64_t)v10);
      v2 = (uint64_t)v117;
      v1 = v119;
      v16 = swift_retain(v10);
      swift_bridgeObjectRetain(v16);
      result = sub_5FEC(v2);
      if (v15 != (_QWORD *)v11)
        goto LABEL_126;
      swift_release(v10);
      v6 = v109;
      v0 = v110;
    }
    else
    {
      v13 = (char *)_swiftEmptyArrayStorage;
    }
    v117 = v13;
    sub_1389BC((uint64_t *)&v117);
    v18 = v0[10];
    result = swift_release(v10);
    v19 = *(_QWORD *)(v18 + v6[13]);
    if (!v19)
      goto LABEL_125;
    v20 = *(_QWORD *)(v18 + v6[14]);
    if (v20 == 0x8000000000000000 && v19 == -1)
      goto LABEL_127;
    v22 = v117;
    v23 = v20 / v19;
    if (v0[12] >= v23)
      v24 = v23;
    else
      v24 = v0[12];
    v107 = v19;
    if (v24)
    {
      v25 = 0;
      v26 = 0;
      v27 = *((_QWORD *)v117 + 2);
      while (1)
      {
        v28 = v27 >= v26;
        if (v24 > 0)
          v28 = v26 >= v27;
        if (v28)
          break;
        v29 = __OFADD__(v26, v24);
        v26 += v24;
        if (v29)
          v26 = (v26 >> 63) ^ 0x8000000000000000;
        v29 = __OFADD__(v25++, 1);
        if (v29)
        {
          __break(1u);
          goto LABEL_114;
        }
      }
      v117 = (char *)_swiftEmptyArrayStorage;
      result = sub_34238(0, v25, 0);
      v30 = v117;
      v113 = v24;
      if (v25)
      {
        v2 = 0;
        v31 = v22;
        v111 = v22 + 32;
        while (1)
        {
          v32 = v27 >= v2;
          if (v24 > 0)
            v32 = v2 >= v27;
          if (v32)
            break;
          if (__OFADD__(v2, v24))
            v33 = ((v2 + v24) >> 63) ^ 0x8000000000000000;
          else
            v33 = v2 + v24;
          if (__OFADD__(v2, v24))
            goto LABEL_116;
          if (v27 >= v2 + v24)
            v34 = v2 + v24;
          else
            v34 = v27;
          if (v34 < v2)
            goto LABEL_117;
          if (v2 < 0)
            goto LABEL_118;
          v35 = *((_QWORD *)v31 + 2);
          if (v35 < v2 || (uint64_t)v35 < v34)
            goto LABEL_119;
          v117 = v30;
          v1 = *((_QWORD *)v30 + 2);
          v36 = *((_QWORD *)v30 + 3);
          result = swift_retain(v31);
          if (v1 >= v36 >> 1)
          {
            result = sub_34238(v36 > 1, v1 + 1, 1);
            v30 = v117;
          }
          *((_QWORD *)v30 + 2) = v1 + 1;
          v37 = &v30[32 * v1];
          v24 = v113;
          *((_QWORD *)v37 + 4) = v31;
          *((_QWORD *)v37 + 5) = v111;
          *((_QWORD *)v37 + 6) = v2;
          *((_QWORD *)v37 + 7) = (2 * v34) | 1;
          v2 = v33;
          if (!--v25)
            goto LABEL_51;
        }
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
LABEL_118:
        __break(1u);
LABEL_119:
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
        return result;
      }
      v33 = 0;
      v31 = v22;
LABEL_51:
      v39 = v27 >= v33;
      if (v24 > 0)
        v39 = v33 >= v27;
      if (!v39)
      {
        do
        {
          v1 = __OFADD__(v33, v24) ? ((v33 + v24) >> 63) ^ 0x8000000000000000 : v33 + v24;
          if (__OFADD__(v33, v24))
            goto LABEL_120;
          if (v27 >= v33 + v24)
            v64 = v33 + v24;
          else
            v64 = v27;
          if (v64 < v33)
            goto LABEL_121;
          if (v33 < 0)
            goto LABEL_122;
          v65 = *((_QWORD *)v31 + 2);
          if (v65 < v33 || (uint64_t)v65 < v64)
            goto LABEL_123;
          v117 = v30;
          v2 = *((_QWORD *)v30 + 2);
          v67 = *((_QWORD *)v30 + 3);
          result = swift_retain(v31);
          if (v2 >= v67 >> 1)
          {
            result = sub_34238(v67 > 1, v2 + 1, 1);
            v30 = v117;
          }
          *((_QWORD *)v30 + 2) = v2 + 1;
          v68 = &v30[32 * v2];
          *((_QWORD *)v68 + 4) = v31;
          *((_QWORD *)v68 + 5) = v31 + 32;
          *((_QWORD *)v68 + 6) = v33;
          *((_QWORD *)v68 + 7) = (2 * v64) | 1;
          v69 = v27 >= v1;
          v24 = v113;
          if (v113 > 0)
            v69 = v1 >= v27;
          v33 = v1;
        }
        while (!v69);
      }
      swift_release(v31);
      v6 = v109;
      v0 = v110;
      if (!*((_QWORD *)v30 + 2))
      {
LABEL_3:
        swift_bridgeObjectRelease();
LABEL_4:
        sub_26AA0(v0[10], type metadata accessor for SeedBasedRecommendationRequest);
        goto LABEL_5;
      }
    }
    else
    {
      v38 = sub_5EDC(&qword_1F11D0);
      v30 = (char *)swift_allocObject(v38, 64, 7);
      *((_OWORD *)v30 + 1) = xmmword_1875E0;
      *((_QWORD *)v30 + 4) = _swiftEmptyArrayStorage;
      *((_QWORD *)v30 + 5) = &_swiftEmptyArrayStorage[4];
      *((_OWORD *)v30 + 3) = xmmword_18CB70;
      swift_release(v22);
      if (!*((_QWORD *)v30 + 2))
        goto LABEL_3;
    }
    v2 = *((_QWORD *)v30 + 4);
    v40 = *((_QWORD *)v30 + 5);
    v41 = *((_QWORD *)v30 + 6);
    v42 = *((_QWORD *)v30 + 7);
    swift_unknownObjectRetain(v2);
    swift_bridgeObjectRelease();
    v43 = v42 >> 1;
    v112 = v42 >> 1;
    v114 = v41;
    if ((v42 & 1) == 0)
    {
      swift_unknownObjectRetain(v2);
LABEL_57:
      v44 = sub_37EB4(v2, v40, v41, v42);
      goto LABEL_64;
    }
    v45 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v46 = swift_unknownObjectRetain_n(v2, 3);
    v47 = (_QWORD *)swift_dynamicCastClass(v46, v45);
    if (!v47)
    {
      swift_unknownObjectRelease(v2);
      v47 = _swiftEmptyArrayStorage;
    }
    v48 = v47[2];
    result = swift_release(v47);
    if (__OFSUB__(v43, v41))
      goto LABEL_132;
    if (v48 != v43 - v41)
    {
      swift_unknownObjectRelease(v2);
      goto LABEL_57;
    }
    v44 = (_QWORD *)swift_dynamicCastClass(v2, v45);
    if (!v44)
    {
      swift_unknownObjectRelease(v2);
      v44 = _swiftEmptyArrayStorage;
    }
LABEL_64:
    v49 = v0[13];
    v50 = v0[10];
    swift_unknownObjectRelease(v2);
    v51 = *(_BYTE *)(v50 + v6[11]);
    v52 = *(unsigned __int8 *)(v50 + v6[8]);
    v120[0] = *(_BYTE *)(v50 + v6[8]);
    sub_13C1D4((uint64_t)v44, v51, v120, v49, 0, &v117);
    swift_release(v44);
    v53 = v118;
    v1 = v0[10];
    if (v118)
    {
      v54 = (char)v117;
      if ((*(_BYTE *)(v1 + v6[9]) & 1) == 0)
      {
        v55 = *(_QWORD *)(v102 + 16);
        if (v55)
        {
          v56 = (char)v117;
          v57 = v110[15];
          v117 = (char *)_swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v57);
          result = sub_34348(0, v55, 0);
          v58 = v117;
          v59 = v101;
          while (1)
          {
            v61 = *v59++;
            v60 = v61;
            if (v61 < 0)
              goto LABEL_124;
            v117 = v58;
            v63 = *((_QWORD *)v58 + 2);
            v62 = *((_QWORD *)v58 + 3);
            if (v63 >= v62 >> 1)
            {
              result = sub_34348(v62 > 1, v63 + 1, 1);
              v58 = v117;
            }
            *((_QWORD *)v58 + 2) = v63 + 1;
            *(_QWORD *)&v58[8 * v63 + 32] = v60;
            if (!--v55)
            {
              swift_bridgeObjectRelease();
              v1 = v110[10];
              v54 = v56;
              goto LABEL_94;
            }
          }
        }
      }
      v58 = (char *)_swiftEmptyArrayStorage;
LABEL_94:
      v70 = sub_5EDC(&qword_1F6718);
      v71 = swift_allocObject(v70, 48, 7);
      *(_OWORD *)(v71 + 16) = xmmword_1875E0;
      *(_QWORD *)(v71 + 32) = 0;
      *(_QWORD *)(v71 + 40) = v52;
      v72 = *(_QWORD *)(v1 + v109[10]) & 2;
      if ((*(_QWORD *)(v1 + v109[10]) & 1) == 0)
      {
        if (!v72)
        {
LABEL_114:
          v96 = v110[11];
          v116 = v110[7];
          v97 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
          v98 = sub_41754((unint64_t *)&qword_1F4180, type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors, (uint64_t)&unk_19B4A4);
          swift_allocError(v97, v98, 0, 0);
          v100 = swift_storeEnumTagMultiPayload(v99, v97, 8);
          swift_willThrow(v100);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease(v2);
          sub_26AA0(v1, type metadata accessor for SeedBasedRecommendationRequest);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_26AA0(v96, type metadata accessor for SeedBasedRecommendationRequest);
          swift_task_dealloc(v96);
          swift_task_dealloc(v1);
          swift_task_dealloc(v116);
          v82 = (uint64_t (*)(void))v110[1];
          return v82();
        }
        v72 = 1;
      }
      result = (uint64_t)sub_14D3BC(v110[14]);
      v73 = v112 - v114;
      if (__OFSUB__(v112, v114))
        goto LABEL_128;
      v74 = v107 * v73;
      if ((unsigned __int128)(v107 * (__int128)v73) >> 64 != (v107 * v73) >> 63)
        goto LABEL_129;
      if (v74 < (uint64_t)0xFFFFFFFF80000000)
        goto LABEL_130;
      if (v74 > 0x7FFFFFFF)
        goto LABEL_131;
      v1 = result;
      if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) != 0)
        v75 = v106;
      else
        v75 = sub_30334(0, v106[2] + 1, 1, v106);
      v77 = v75[2];
      v76 = v75[3];
      if (v77 >= v76 >> 1)
        v75 = sub_30334((_QWORD *)(v76 > 1), v77 + 1, 1, v75);
      v75[2] = v77 + 1;
      v106 = v75;
      v78 = &v75[10 * v77];
      *((_BYTE *)v78 + 32) = v54 & 1;
      v78[5] = v53;
      v78[6] = v71;
      v78[7] = v58;
      v78[8] = 0;
      v78[9] = v72;
      v78[10] = 0;
      *((_BYTE *)v78 + 88) = 0;
      v78[12] = v1;
      *((_DWORD *)v78 + 26) = v74;
      swift_unknownObjectRelease(v2);
      v6 = v109;
      v0 = v110;
      goto LABEL_4;
    }
    sub_26AA0(v1, type metadata accessor for SeedBasedRecommendationRequest);
    swift_unknownObjectRelease(v2);
    v0 = v110;
LABEL_5:
    v7 = v108 + 1;
  }
  while (v108 + 1 != v103);
  swift_bridgeObjectRelease();
  v83 = v0[11];
  if (v106[2])
  {
    v84 = v0[7];
    v85 = v110[6];
    v86 = v110[5];
    v87 = (uint64_t *)v110[2];
    v88 = (uint64_t *)(v83 + *(int *)(v0[8] + 28));
    v89 = v88[1];
    v115 = *v88;
    v90 = swift_bridgeObjectRetain(v89);
    v91 = UUID.init()(v90);
    v92 = UUID.uuidString.getter(v91);
    v94 = v93;
    v0 = v110;
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v84, v86);
    sub_26AA0(v83, type metadata accessor for SeedBasedRecommendationRequest);
    *v87 = v92;
    v87[1] = v94;
    v87[2] = 0;
    v87[3] = 0;
    v87[4] = v115;
    v87[5] = v89;
    v87[6] = (uint64_t)v106;
    v87[7] = 0;
  }
  else
  {
    v95 = (_OWORD *)v0[2];
    swift_bridgeObjectRelease();
    sub_26AA0(v83, type metadata accessor for SeedBasedRecommendationRequest);
    *v95 = xmmword_18CB70;
    v95[1] = 0u;
    v95[2] = 0u;
    v95[3] = 0u;
  }
LABEL_109:
  v80 = v0[10];
  v81 = v0[7];
  swift_task_dealloc(v0[11]);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  v82 = (uint64_t (*)(void))v0[1];
  return v82();
}

uint64_t sub_13B2BC(uint64_t a1, uint64_t a2, uint64_t a3, void *__src)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(v5 + 504) = a3;
  *(_QWORD *)(v5 + 512) = v4;
  *(_QWORD *)(v5 + 496) = a2;
  *(_QWORD *)(v5 + 520) = *(_QWORD *)a1;
  v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v5 + 528) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v5 + 544) = v6;
  *(_OWORD *)(v5 + 560) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v5 + 576) = *(_QWORD *)(a1 + 56);
  memcpy((void *)(v5 + 16), __src, 0x16BuLL);
  return swift_task_switch(sub_13B330, 0, 0);
}

uint64_t sub_13B330()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t result;
  char v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  _QWORD *v34;
  __int128 v35;
  __int128 v36;

  *(_QWORD *)(v0 + 584) = sub_D4D30();
  *(_QWORD *)(v0 + 592) = sub_14D510();
  *(_QWORD *)(v0 + 600) = sub_14D860();
  v34 = sub_14DA80();
  *(_QWORD *)(v0 + 608) = sub_14DD24();
  *(_QWORD *)(v0 + 616) = sub_14E50C();
  v1 = sub_14E7C8();
  v2 = v1[2];
  if (!v2)
  {
LABEL_29:
    *(_QWORD *)(v0 + 624) = _swiftEmptyDictionarySingleton;
    v30 = *(_QWORD *)(v0 + 576);
    v31 = *(_QWORD *)(v0 + 568);
    v35 = *(_OWORD *)(v0 + 536);
    v36 = *(_OWORD *)(v0 + 552);
    v33 = *(_OWORD *)(v0 + 520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_OWORD *)(v0 + 384) = v33;
    *(_OWORD *)(v0 + 400) = v35;
    *(_OWORD *)(v0 + 416) = v36;
    *(_QWORD *)(v0 + 432) = v31;
    *(_QWORD *)(v0 + 440) = v30;
    v32 = (_QWORD *)swift_task_alloc(dword_1F670C);
    *(_QWORD *)(v0 + 632) = v32;
    *v32 = v0;
    v32[1] = sub_13B7B0;
    return sub_13C7F4((uint64_t *)(v0 + 384));
  }
  v3 = (uint64_t *)(swift_bridgeObjectRetain(v1) + 48);
  v4 = v34;
  while (1)
  {
    if (!v4[2])
      goto LABEL_5;
    v7 = *(v3 - 2);
    v6 = (_QWORD *)*(v3 - 1);
    v8 = *v3;
    v9 = sub_39228(v7);
    if ((v10 & 1) == 0)
      goto LABEL_5;
    v11 = *(_BYTE *)(v4[7] + v9);
    v12 = v6;
    if (_swiftEmptyDictionarySingleton[2])
    {
      swift_bridgeObjectRetain(v6);
      v13 = sub_3933C(v11);
      v14 = _swiftEmptyArrayStorage;
      if ((v15 & 1) == 0)
        goto LABEL_13;
      v12 = *(_QWORD **)(_swiftEmptyDictionarySingleton[7] + 8 * v13);
      v14 = v12;
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain(v12);
LABEL_13:
    swift_bridgeObjectRetain(v6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_3055C(0, v14[2] + 1, 1, v14);
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
      v14 = sub_3055C((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
    v14[2] = v17 + 1;
    v18 = &v14[3 * v17];
    v18[4] = v7;
    v18[5] = v6;
    v18[6] = v8;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v21 = sub_3933C(v11);
    v22 = _swiftEmptyDictionarySingleton[2];
    v23 = (v20 & 1) == 0;
    result = v22 + v23;
    if (__OFADD__(v22, v23))
      break;
    v25 = v20;
    if (_swiftEmptyDictionarySingleton[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v20 & 1) == 0)
          goto LABEL_24;
      }
      else
      {
        result = (uint64_t)sub_16E368();
        if ((v25 & 1) == 0)
          goto LABEL_24;
      }
    }
    else
    {
      sub_160C68(result, isUniquelyReferenced_nonNull_native);
      result = sub_3933C(v11);
      if ((v25 & 1) != (v26 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Book.MediaType);
      v21 = result;
      if ((v25 & 1) == 0)
      {
LABEL_24:
        _swiftEmptyDictionarySingleton[(v21 >> 6) + 8] |= 1 << v21;
        *(_BYTE *)(_swiftEmptyDictionarySingleton[6] + v21) = v11;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v21) = v14;
        v27 = _swiftEmptyDictionarySingleton[2];
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
          goto LABEL_32;
        _swiftEmptyDictionarySingleton[2] = v29;
        goto LABEL_4;
      }
    }
    v5 = _swiftEmptyDictionarySingleton[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 8 * v21) = v14;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v34;
LABEL_5:
    v3 += 3;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_29;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_13B7B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = sub_13BE88;
  }
  else
  {
    v3 = sub_13B868;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_13B868()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  char v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD **v67;
  _QWORD *v68;
  _QWORD *v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v1 = 0;
  v2 = v0 + 448;
  v3 = (_QWORD *)(v0 + 472);
  v57 = v0 + 16;
  v4 = *(_QWORD *)(v0 + 624);
  v5 = *(_QWORD *)(v4 + 64);
  v53 = v4 + 64;
  v56 = v4;
  v6 = -1;
  v7 = -1 << *(_BYTE *)(v56 + 32);
  if (-v7 < 64)
    v6 = ~(-1 << -(char)v7);
  v8 = v6 & v5;
  v55 = (unint64_t)(63 - v7) >> 6;
  v9 = *(_QWORD *)(v0 + 640);
  v10 = _swiftEmptyDictionarySingleton;
  v54 = v0 + 448;
  v67 = (_QWORD **)(v0 + 472);
  v64 = _swiftEmptyDictionarySingleton;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v58 = (v8 - 1) & v8;
  for (i = __clz(__rbit64(v8)) | (v1 << 6); ; i = __clz(__rbit64(v13)) + (v1 << 6))
  {
    v59 = v1;
    v61 = *(_BYTE *)(*(_QWORD *)(v56 + 48) + i);
    v15 = *(_QWORD *)(*(_QWORD *)(v56 + 56) + 8 * i);
    *v3 = _swiftEmptyDictionarySingleton;
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      swift_bridgeObjectRetain_n(v15, 2);
      v17 = (uint64_t *)(v15 + 48);
      do
      {
        v18 = *(v17 - 2);
        v19 = *(v17 - 1);
        v20 = *v17;
        v17 += 3;
        *(_QWORD *)(v0 + 448) = v18;
        *(_QWORD *)(v0 + 456) = v19;
        *(_QWORD *)(v0 + 464) = v20;
        v21 = sub_5EDC(&qword_1F1090);
        v22 = swift_allocObject(v21, 40, 7);
        *(_OWORD *)(v22 + 16) = xmmword_1875E0;
        *(_QWORD *)(v22 + 32) = v20;
        v23 = sub_8A104(v22);
        swift_setDeallocating(v22);
        swift_deallocClassInstance(v22, 32, 7);
        v24 = swift_task_alloc(32);
        *(_QWORD *)(v24 + 16) = v67;
        *(_QWORD *)(v24 + 24) = v2;
        swift_bridgeObjectRetain(v19);
        sub_4DDC(sub_13F984, v24, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_task_dealloc(v24);
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      v25 = *v67;
    }
    else
    {
      swift_bridgeObjectRetain(v15);
      v25 = _swiftEmptyDictionarySingleton;
    }
    v26 = *(_QWORD *)(v0 + 616);
    v27 = *(_QWORD *)(v0 + 608);
    v28 = *(_QWORD *)(v0 + 600);
    v29 = *(_QWORD *)(v0 + 592);
    v60 = *(_QWORD *)(v0 + 584);
    v30 = *(_QWORD *)(v0 + 496);
    v31 = sub_11F604((uint64_t)v25);
    swift_bridgeObjectRelease();
    v69 = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain(v31);
    sub_605D0(v57);
    sub_12A390(v30, v31, v57, (uint64_t)&v69, v61);
    sub_60AF8(v57);
    swift_bridgeObjectRelease_n(v31, 2);
    v32 = v69;
    v33 = swift_bridgeObjectRetain(v69);
    v34 = sub_38430(v33);
    swift_bridgeObjectRelease_n(v32, 2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v28);
    v35 = sub_128E38((uint64_t)v34, v28);
    swift_bridgeObjectRelease();
    swift_release(v34);
    swift_bridgeObjectRetain(v60);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v26);
    v36 = sub_13F2E8((uint64_t)v35, v60, v29, v27, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v10 = v64;
    v68 = v64;
    v37 = v36[2];
    if (v37)
      break;
    swift_bridgeObjectRelease();
LABEL_30:
    v0 = v63;
    v2 = v54;
    v3 = v67;
    v8 = v58;
    v1 = v59;
    v64 = v10;
    if (v58)
      goto LABEL_4;
LABEL_5:
    v12 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v12 >= v55)
      goto LABEL_33;
    v13 = *(_QWORD *)(v53 + 8 * v12);
    ++v1;
    if (!v13)
    {
      v1 = v12 + 1;
      if (v12 + 1 >= v55)
        goto LABEL_33;
      v13 = *(_QWORD *)(v53 + 8 * v1);
      if (!v13)
      {
        v1 = v12 + 2;
        if (v12 + 2 >= v55)
          goto LABEL_33;
        v13 = *(_QWORD *)(v53 + 8 * v1);
        if (!v13)
        {
          v14 = v12 + 3;
          if (v14 >= v55)
          {
LABEL_33:
            swift_release(*(_QWORD *)(v0 + 624));
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            (*(void (**)(_QWORD *))(v0 + 8))(v10);
            return;
          }
          v13 = *(_QWORD *)(v53 + 8 * v14);
          if (!v13)
          {
            while (1)
            {
              v1 = v14 + 1;
              if (__OFADD__(v14, 1))
                goto LABEL_35;
              if (v1 >= v55)
                goto LABEL_33;
              v13 = *(_QWORD *)(v53 + 8 * v1);
              ++v14;
              if (v13)
                goto LABEL_18;
            }
          }
          v1 = v14;
        }
      }
    }
LABEL_18:
    v58 = (v13 - 1) & v13;
  }
  swift_bridgeObjectRetain(v36);
  v38 = 0;
  v62 = v36;
  while (1)
  {
    v65 = v37;
    v66 = *(_QWORD *)(v63 + 504);
    v39 = &v36[v38];
    v40 = v36[v38 + 8];
    v41 = v36[v38 + 9];
    v43 = v36[v38 + 14];
    v42 = v36[v38 + 15];
    v45 = v36[v38 + 16];
    v44 = v39[17];
    v46 = v39[13];
    v47 = v39[11];
    v48 = v39[12];
    v49 = v39[10];
    v50 = *((_BYTE *)v39 + 56);
    v51 = v39[6];
    v52 = *((_BYTE *)v39 + 40);
    v69 = (_QWORD *)v39[4];
    v70 = v52;
    v71 = v51;
    v72 = v50;
    v73 = v40;
    v74 = v41;
    v75 = v49;
    v76 = v47;
    v77 = v48;
    v78 = v46;
    v79 = v43;
    v80 = v42;
    v81 = v45;
    v82 = v44;
    sub_40554(v40, v41);
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v49);
    sub_13CD28(&v68, (uint64_t *)&v69, v66);
    if (v9)
      break;
    sub_40568(v40, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v38 += 14;
    v37 = v65 - 1;
    v36 = v62;
    if (v65 == 1)
    {
      swift_bridgeObjectRelease_n(v62, 2);
      v9 = 0;
      v10 = v68;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease();
  sub_40568(v40, v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_13BE88()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_13BE94(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 128);
  if (v2 >> 1 != 0xFFFFFFFF)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x13C1B0);
}

uint64_t sub_13C1D4@<X0>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  char v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  double *v21;
  _QWORD *v22;
  char v23;
  float *v24;
  float v25;
  double v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v6 = a5;
  v7 = a6;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v11 = *a3;
    swift_bridgeObjectRetain(a1);
    v12 = 32;
    v13 = _swiftEmptyArrayStorage;
    do
    {
      v14 = v9;
      v15 = *(_QWORD *)(a1 + v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = sub_2FEC0(0, v13[2] + 1, 1, v13);
      v17 = v13[2];
      v16 = v13[3];
      if (v17 >= v16 >> 1)
        v13 = sub_2FEC0((_QWORD *)(v16 > 1), v17 + 1, 1, v13);
      v13[2] = v17 + 1;
      v18 = &v13[10 * v17];
      v18[4] = v15;
      *((_BYTE *)v18 + 40) = v11;
      v18[6] = 0;
      *((_BYTE *)v18 + 56) = 1;
      v18[8] = 0;
      *((_BYTE *)v18 + 72) = -1;
      v9 = v14;
      v18[10] = v14;
      v18[11] = 0;
      v18[12] = 0;
      v18[13] = 0x3FF0000000000000;
      v12 += 552;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    v7 = a6;
    v6 = a5;
    v19 = v13[2];
    if (v19)
      goto LABEL_9;
  }
  else
  {
    v13 = _swiftEmptyArrayStorage;
    v19 = _swiftEmptyArrayStorage[2];
    if (v19)
    {
LABEL_9:
      result = swift_bridgeObjectRetain(v13);
      v21 = (double *)(v13 + 13);
      v22 = _swiftEmptyArrayStorage;
      v23 = v6 & 1;
      while (1)
      {
        v26 = *v21;
        if (*v21 >= 0.0 && v26 <= 1.0)
        {
          v28 = *((_QWORD *)v21 - 9);
          if (v28 < 0)
          {
            __break(1u);
            return result;
          }
          result = swift_isUniquelyReferenced_nonNull_native(v22);
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_30328(0, v22[2] + 1, 1, v22);
            v22 = (_QWORD *)result;
          }
          v30 = v22[2];
          v29 = v22[3];
          if (v30 >= v29 >> 1)
          {
            result = (uint64_t)sub_30328((_QWORD *)(v29 > 1), v30 + 1, 1, v22);
            v22 = (_QWORD *)result;
          }
          v22[2] = v30 + 1;
          v24 = (float *)&v22[4 * v30];
          *((_QWORD *)v24 + 4) = v28;
          v25 = v26;
          v24[10] = v25;
          *((_QWORD *)v24 + 6) = a4;
          *((_BYTE *)v24 + 56) = v23;
        }
        v21 += 10;
        if (!--v19)
        {
          swift_bridgeObjectRelease();
          goto LABEL_24;
        }
      }
    }
  }
  v22 = _swiftEmptyArrayStorage;
LABEL_24:
  result = swift_bridgeObjectRelease();
  if (v22[2])
  {
    v31 = a2 & 1;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v31 = 0;
    v22 = 0;
  }
  *v7 = v31;
  v7[1] = v22;
  return result;
}

uint64_t sub_13C430(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;

  v4 = type metadata accessor for UUID(0);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  v5 = __chkstk_darwin(v4);
  v55 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v54 = (uint64_t)&v51 - v7;
  v8 = *(int *)(type metadata accessor for SeedBasedRecommendationRequest(0) + 20);
  v58 = a2;
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (!v10)
  {
LABEL_11:
    v53 = v11[2];
    if (!v53)
      return swift_bridgeObjectRelease();
    v23 = 0;
    while (1)
    {
      v25 = v11;
      v26 = v11[v23 + 4];
      v27 = *a1;
      if (*(_QWORD *)(*a1 + 16) && (v28 = sub_39228(v26), (v29 & 1) != 0))
      {
        v60 = *(_QWORD **)(*(_QWORD *)(v27 + 56) + 8 * v28);
        swift_bridgeObjectRetain(v60);
      }
      else
      {
        v60 = &_swiftEmptySetSingleton;
      }
      v31 = v55;
      v30 = v56;
      v32 = v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v58, v57);
      v33 = v54;
      sub_163BBC(v54, v31);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v33, v32);
      v34 = v60;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
      v59 = (_QWORD *)*a1;
      v36 = v59;
      *a1 = 0x8000000000000000;
      v38 = sub_39228(v26);
      v39 = v36[2];
      v40 = (v37 & 1) == 0;
      v41 = v39 + v40;
      if (__OFADD__(v39, v40))
        goto LABEL_34;
      v42 = v37;
      if (v36[3] >= v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v45 = v59;
          if ((v37 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          sub_16E1C4();
          v45 = v59;
          if ((v42 & 1) != 0)
            goto LABEL_13;
        }
      }
      else
      {
        sub_1609AC(v41, isUniquelyReferenced_nonNull_native);
        v43 = sub_39228(v26);
        if ((v42 & 1) != (v44 & 1))
          goto LABEL_36;
        v38 = v43;
        v45 = v59;
        if ((v42 & 1) != 0)
        {
LABEL_13:
          v24 = v45[7];
          swift_bridgeObjectRelease();
          *(_QWORD *)(v24 + 8 * v38) = v34;
          goto LABEL_14;
        }
      }
      v45[(v38 >> 6) + 8] |= 1 << v38;
      v46 = 8 * v38;
      *(_QWORD *)(v45[6] + v46) = v26;
      *(_QWORD *)(v45[7] + v46) = v34;
      v47 = v45[2];
      v48 = __OFADD__(v47, 1);
      v49 = v47 + 1;
      if (v48)
        goto LABEL_35;
      v45[2] = v49;
LABEL_14:
      ++v23;
      *a1 = v45;
      swift_bridgeObjectRelease();
      v11 = v25;
      if (v53 == v23)
        return swift_bridgeObjectRelease();
    }
  }
  v60 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v9);
  sub_340AC(0, v10, 0);
  v11 = v60;
  v12 = sub_EDD8C(v9);
  v14 = v13;
  v16 = v15 & 1;
  v52 = a1;
  v53 = v9 + 56;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(v9 + 32))
  {
    if (((*(_QWORD *)(v53 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      goto LABEL_32;
    if (*(_DWORD *)(v9 + 36) != (_DWORD)v14)
      goto LABEL_33;
    v17 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 552 * v12);
    v60 = v11;
    v19 = v11[2];
    v18 = v11[3];
    if (v19 >= v18 >> 1)
    {
      sub_340AC(v18 > 1, v19 + 1, 1);
      v11 = v60;
    }
    v11[2] = v19 + 1;
    v11[v19 + 4] = v17;
    v20 = sub_EDE30(v12, v14, v16 & 1, v9);
    v12 = v20;
    v14 = v21;
    v16 = v22 & 1;
    --v10;
    a1 = v52;
    if (!v10)
    {
      sub_41814(v20, v21, v22 & 1);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_13C7F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  *(_QWORD *)(v2 + 24) = v1;
  *(_QWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 1);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 3);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 5);
  *(_QWORD *)(v2 + 88) = a1[7];
  return swift_task_switch(sub_13C830, 0, 0);
}

uint64_t sub_13C830()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  _QWORD v26[9];

  v2 = v0[10];
  v1 = v0[11];
  v4 = v0[8];
  v3 = v0[9];
  v5 = v0[6];
  v6 = v0[7];
  v8 = v0[4];
  v7 = v0[5];
  v24 = sub_14EDB0();
  v23 = sub_14E50C();
  v26[0] = v8;
  v26[1] = v7;
  v26[2] = v5;
  v26[3] = v6;
  v26[4] = v4;
  v26[5] = v3;
  v26[6] = v2;
  v26[7] = v1;
  v9 = sub_14EFF0();
  v10 = swift_task_alloc(32);
  *(_QWORD *)(v10 + 16) = v23;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = sub_13F510((uint64_t)v24, (_QWORD *(*)(__int128 *__return_ptr, _QWORD, double))sub_13F99C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v10);
  v12 = sub_138888(v11);
  v13 = v12[2];
  if (v13)
  {
    sub_5EDC(&qword_1F1DB8);
    v14 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v13);
  }
  else
  {
    v14 = _swiftEmptyDictionarySingleton;
  }
  v26[0] = v14;
  sub_13F758((uint64_t)v12, 1, v26);
  v15 = (_QWORD *)v0[3];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = v26[0];
  v0[12] = v26[0];
  v17 = v15 + 15;
  v18 = v15[18];
  v19 = v15[19];
  sub_49F4(v17, v18);
  v20 = *(int **)(v19 + 8);
  v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v20 + *v20);
  v21 = (_QWORD *)swift_task_alloc(v20[1]);
  v0[13] = v21;
  *v21 = v0;
  v21[1] = sub_13CA24;
  return v25(v16, v18, v19);
}

uint64_t sub_13CA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_13CABC;
  else
    v3 = sub_13CA88;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_13CA88()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_13CABC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_13CAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v10 = *(_QWORD *)a1;
  v35 = *(_BYTE *)(a1 + 8);
  v34 = *(_QWORD *)(a1 + 16);
  v33 = *(_BYTE *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 64);
  v31 = *(_QWORD *)(a1 + 56);
  v32 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 72);
  v36 = *(_QWORD *)a1;
  if (!*(_QWORD *)(a2 + 16))
  {
    v18 = _swiftEmptyArrayStorage;
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_10;
LABEL_5:
    v19 = _swiftEmptyArrayStorage;
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_14;
    goto LABEL_6;
  }
  v16 = sub_39228(v10);
  if ((v17 & 1) != 0)
  {
    v18 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v16);
    swift_bridgeObjectRetain(v18);
  }
  else
  {
    v18 = _swiftEmptyArrayStorage;
  }
  v10 = v36;
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_5;
LABEL_10:
  v20 = sub_39228(v10);
  if ((v21 & 1) != 0)
  {
    v19 = *(_QWORD **)(*(_QWORD *)(a3 + 56) + 8 * v20);
    swift_bridgeObjectRetain(v19);
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
  }
  v10 = v36;
  if (*(_QWORD *)(a4 + 16))
  {
LABEL_14:
    v22 = sub_39228(v10);
    if ((v23 & 1) != 0)
    {
      v30 = *(void **)(*(_QWORD *)(a4 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v30);
    }
    else
    {
      v30 = &_swiftEmptySetSingleton;
    }
    v10 = v36;
    if (!*(_QWORD *)(a5 + 16))
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_6:
  v30 = &_swiftEmptySetSingleton;
  if (!*(_QWORD *)(a5 + 16))
    goto LABEL_20;
LABEL_18:
  v24 = sub_39228(v10);
  if ((v25 & 1) == 0)
  {
LABEL_20:
    v26 = &_swiftEmptySetSingleton;
    goto LABEL_21;
  }
  v26 = *(void **)(*(_QWORD *)(a5 + 56) + 8 * v24);
  swift_bridgeObjectRetain(v26);
LABEL_21:
  sub_40554(v11, v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v32);
  v27 = sub_3CD28((uint64_t)v18);
  swift_bridgeObjectRelease();
  v28 = sub_3CD28((uint64_t)v19);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a6 = v36;
  *(_BYTE *)(a6 + 8) = v35;
  *(_QWORD *)(a6 + 16) = v34;
  *(_BYTE *)(a6 + 24) = v33;
  *(_QWORD *)(a6 + 32) = v11;
  *(_BYTE *)(a6 + 40) = v12;
  *(_QWORD *)(a6 + 48) = v32;
  *(_QWORD *)(a6 + 56) = v31;
  *(_QWORD *)(a6 + 64) = v13;
  *(_QWORD *)(a6 + 72) = v14;
  *(_QWORD *)(a6 + 80) = v27;
  *(_QWORD *)(a6 + 88) = v28;
  *(_QWORD *)(a6 + 96) = v30;
  *(_QWORD *)(a6 + 104) = v26;
  return result;
}

unint64_t sub_13CD28(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char v46;
  char v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  unint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  char v67;
  unint64_t v68;
  char v69;
  _QWORD *v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  _QWORD *v97;
  uint64_t v98;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v96 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v74 - v11;
  v13 = sub_5EDC(&qword_1F6710);
  result = __chkstk_darwin(v13);
  v95 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a2[8];
  if (!v16)
    return result;
  v89 = *a2;
  v88 = *((unsigned __int8 *)a2 + 8);
  v87 = a2[2];
  v86 = *((unsigned __int8 *)a2 + 24);
  v85 = a2[4];
  v84 = *((unsigned __int8 *)a2 + 40);
  v17 = a2[6];
  v83 = a2[7];
  v18 = a2[9];
  v93 = a2[10];
  v94 = v17;
  v19 = a2[11];
  v91 = a2[12];
  v92 = v19;
  v90 = a2[13];
  result = sub_5FF4(v16);
  if ((v21 & 1) != 0)
    goto LABEL_57;
  if (*(_DWORD *)(v16 + 36) != v20)
  {
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
    __break(1u);
    return result;
  }
  if (result != 1 << *(_BYTE *)(v16 + 32))
  {
    result = (unint64_t)sub_5B14(&v98);
    if (*(_QWORD *)(v16 + 16))
    {
      v82 = v12;
      result = sub_393D0(v98);
      if ((v22 & 1) != 0)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * result);
        if (*(_QWORD *)(v23 + 16))
        {
          if (*(_QWORD *)(a3 + 16))
          {
            result = sub_39228(*(_QWORD *)(v23 + 32));
            v24 = (uint64_t)v82;
            if ((v25 & 1) != 0)
            {
              v26 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * result);
              v27 = *(_QWORD *)(v26 + 56);
              v74 = v26 + 56;
              v28 = 1 << *(_BYTE *)(v26 + 32);
              v29 = -1;
              if (v28 < 64)
                v29 = ~(-1 << v28);
              v30 = v29 & v27;
              v75 = (unint64_t)(v28 + 63) >> 6;
              v78 = v26;
              swift_bridgeObjectRetain(v26);
              v31 = 0;
              v76 = v3;
              v77 = v8;
              v32 = v95;
              while (1)
              {
                if (v30)
                {
                  v81 = (v30 - 1) & v30;
                  v35 = __clz(__rbit64(v30)) | (v31 << 6);
                }
                else
                {
                  v36 = v31 + 1;
                  if (__OFADD__(v31, 1))
                    goto LABEL_55;
                  if (v36 >= v75)
                  {
LABEL_49:
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v32, 1, 1, v7);
                    return swift_release(v78);
                  }
                  v37 = *(_QWORD *)(v74 + 8 * v36);
                  ++v31;
                  if (!v37)
                  {
                    v31 = v36 + 1;
                    if (v36 + 1 >= v75)
                      goto LABEL_49;
                    v37 = *(_QWORD *)(v74 + 8 * v31);
                    if (!v37)
                    {
                      v31 = v36 + 2;
                      if (v36 + 2 >= v75)
                        goto LABEL_49;
                      v37 = *(_QWORD *)(v74 + 8 * v31);
                      if (!v37)
                      {
                        v38 = v36 + 3;
                        if (v38 >= v75)
                          goto LABEL_49;
                        v37 = *(_QWORD *)(v74 + 8 * v38);
                        if (!v37)
                        {
                          while (1)
                          {
                            v31 = v38 + 1;
                            if (__OFADD__(v38, 1))
                              goto LABEL_56;
                            if (v31 >= v75)
                              goto LABEL_49;
                            v37 = *(_QWORD *)(v74 + 8 * v31);
                            ++v38;
                            if (v37)
                              goto LABEL_30;
                          }
                        }
                        v31 = v38;
                      }
                    }
                  }
LABEL_30:
                  v81 = (v37 - 1) & v37;
                  v35 = __clz(__rbit64(v37)) + (v31 << 6);
                }
                v39 = *(_QWORD *)(v78 + 48);
                v79 = *(_QWORD *)(v8 + 72);
                v40 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
                v40(v32, v39 + v79 * v35, v7);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v32, 0, 1, v7);
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v32, 1, v7) == 1)
                  return swift_release(v78);
                (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v24, v32, v7);
                v41 = v24;
                v42 = *a1;
                if (*(_QWORD *)(*a1 + 16))
                {
                  v43 = sub_39574(v41);
                  v44 = _swiftEmptyArrayStorage;
                  v45 = v85;
                  v46 = v84;
                  if ((v47 & 1) != 0)
                  {
                    v44 = *(_QWORD **)(*(_QWORD *)(v42 + 56) + 8 * v43);
                    swift_bridgeObjectRetain(v44);
                  }
                }
                else
                {
                  v44 = _swiftEmptyArrayStorage;
                  v45 = v85;
                  v46 = v84;
                }
                sub_40554(v45, v46);
                swift_bridgeObjectRetain(v94);
                swift_bridgeObjectRetain(v16);
                swift_bridgeObjectRetain(v93);
                swift_bridgeObjectRetain(v92);
                swift_bridgeObjectRetain(v91);
                swift_bridgeObjectRetain(v90);
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v44);
                v80 = v31;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                  v44 = sub_2FFF4(0, v44[2] + 1, 1, v44);
                v50 = v44[2];
                v49 = v44[3];
                if (v50 >= v49 >> 1)
                  v44 = sub_2FFF4((_QWORD *)(v49 > 1), v50 + 1, 1, v44);
                v44[2] = v50 + 1;
                v51 = &v44[14 * v50];
                v51[4] = v89;
                *((_BYTE *)v51 + 40) = v88;
                v51[6] = v87;
                *((_BYTE *)v51 + 56) = v86;
                v51[8] = v45;
                *((_BYTE *)v51 + 72) = v46;
                v52 = v82;
                v53 = v83;
                v51[10] = v94;
                v51[11] = v53;
                v51[12] = v16;
                v51[13] = v18;
                v54 = v92;
                v51[14] = v93;
                v51[15] = v54;
                v55 = v90;
                v51[16] = v91;
                v51[17] = v55;
                v56 = (uint64_t)v96;
                v40(v96, (unint64_t)v52, v7);
                v57 = swift_isUniquelyReferenced_nonNull_native(*a1);
                v58 = a1;
                v59 = v57;
                v97 = (_QWORD *)*v58;
                v60 = v97;
                v61 = v58;
                *v58 = 0x8000000000000000;
                v63 = sub_39574(v56);
                v64 = v60[2];
                v65 = (v62 & 1) == 0;
                v66 = v64 + v65;
                if (__OFADD__(v64, v65))
                  goto LABEL_53;
                v67 = v62;
                if (v60[3] >= v66)
                {
                  if ((v59 & 1) == 0)
                    sub_16BD08();
                }
                else
                {
                  sub_15BA48(v66, v59);
                  v68 = sub_39574((uint64_t)v96);
                  if ((v67 & 1) != (v69 & 1))
                    goto LABEL_58;
                  v63 = v68;
                }
                a1 = v61;
                v70 = v97;
                v8 = v77;
                if ((v67 & 1) != 0)
                {
                  v33 = v97[7];
                  swift_bridgeObjectRelease();
                  *(_QWORD *)(v33 + 8 * v63) = v44;
                }
                else
                {
                  v97[(v63 >> 6) + 8] |= 1 << v63;
                  v40((char *)(v70[6] + v63 * v79), (unint64_t)v96, v7);
                  *(_QWORD *)(v70[7] + 8 * v63) = v44;
                  v71 = v70[2];
                  v72 = __OFADD__(v71, 1);
                  v73 = v71 + 1;
                  if (v72)
                    goto LABEL_54;
                  v70[2] = v73;
                }
                v32 = v95;
                v30 = v81;
                *a1 = v70;
                swift_bridgeObjectRelease();
                v34 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
                v34((uint64_t)v96, v7);
                v24 = (uint64_t)v82;
                v34((uint64_t)v82, v7);
                v31 = v80;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

double sub_13D3C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  if (*(_QWORD *)(a2 + 16)
    && (v10 = sub_39228(a1), (v11 & 1) != 0)
    && *(_QWORD *)(a3 + 16)
    && (v12 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v10), v13 = sub_39228(a1), (v14 & 1) != 0))
  {
    v15 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v13);
    v16 = *v15;
    v17 = v15[1];
    *(_QWORD *)a4 = a1;
    *(double *)(a4 + 8) = a5;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = v12;
    *(_QWORD *)(a4 + 32) = v16;
    *(_QWORD *)(a4 + 40) = v17;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)a4 = 0u;
  }
  return result;
}

uint64_t sub_13D480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  sub_3EB0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_3EB0C(v1, v2);
  sub_850E4(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  sub_62F8((_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 112));
  sub_62F8((_QWORD *)(v0 + 120));
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2()
{
  return objc_opt_self(_TtC20BooksPersonalization44BooksBackEndSeedBasedRecommendationServiceV2);
}

uint64_t sub_13D508(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1F6724);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_A3008;
  v7[140] = v6;
  v7[139] = a2;
  v7[138] = a1;
  return swift_task_switch(sub_138B28, 0, 0);
}

uint64_t sub_13D580(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1F66F4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  return sub_138DE8(a1, a2);
}

uint64_t sub_13D5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_D5698(a5, a6, a7, a8);
  }
  return result;
}

Swift::Int sub_13D648(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  Swift::Int v12;
  Swift::Int v13;
  int v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  _QWORD *v29;
  double v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double *v60;
  _QWORD *v61;
  double v62;
  double v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  double v70;
  double v71;
  char *v72;
  Swift::Int v73;
  Swift::Int v74;
  char *v75;
  Swift::Int v76;
  Swift::Int v77;
  Swift::Int v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double *v91;
  _QWORD *v92;
  double v93;
  double v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double *v101;
  double v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  double *v126;
  _QWORD *v127;
  double v128;
  double v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  double *v136;
  double v137;
  double v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  Swift::Int v142;
  char *v143;
  char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  BOOL v156;
  unint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  BOOL v166;
  uint64_t v167;
  char v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  char *v191;
  uint64_t v192;
  unint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  unint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t *v201;
  _QWORD *v202;
  Swift::Int v203;
  char *v204;
  Swift::Int v205;
  Swift::Int v206;
  Swift::Int v207;
  char *v208;
  Swift::Int v209;
  Swift::Int v210;
  Swift::Int v211;
  Swift::Int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  void *v216;
  char *v217;
  void *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  Swift::Int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint64_t v244;
  _QWORD v245[69];
  uint64_t __src[69];
  _QWORD __dst[69];
  uint64_t v248[70];

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_210;
    if (v3)
      return sub_486E4(0, v3, 1, a1);
    return result;
  }
  v203 = result;
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_222;
  v207 = v3;
  v201 = a1;
  if (v3 < 2)
  {
    v208 = (char *)&_swiftEmptyArrayStorage[4];
    v202 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      v141 = _swiftEmptyArrayStorage[2];
      v10 = (char *)_swiftEmptyArrayStorage;
LABEL_175:
      if (v141 >= 2)
      {
        v192 = *v201;
        do
        {
          v193 = v141 - 2;
          if (v141 < 2)
            goto LABEL_204;
          if (!v192)
            goto LABEL_221;
          v194 = v10;
          v195 = *(_QWORD *)&v10[16 * v193 + 32];
          v196 = *(_QWORD *)&v10[16 * v141 + 24];
          sub_13E9C4((char *)(v192 + 552 * v195), (char *)(v192 + 552 * *(_QWORD *)&v10[16 * v141 + 16]), v192 + 552 * v196, v208);
          if (v1)
            break;
          if (v196 < v195)
            goto LABEL_206;
          if ((swift_isUniquelyReferenced_nonNull_native(v194) & 1) == 0)
            v194 = sub_4ECA8((uint64_t)v194);
          if (v193 >= *((_QWORD *)v194 + 2))
            goto LABEL_207;
          v197 = &v194[16 * v193 + 32];
          *(_QWORD *)v197 = v195;
          *((_QWORD *)v197 + 1) = v196;
          v198 = *((_QWORD *)v194 + 2);
          if (v141 > v198)
            goto LABEL_208;
          memmove(&v194[16 * v141 + 16], &v194[16 * v141 + 32], 16 * (v198 - v141));
          v10 = v194;
          *((_QWORD *)v194 + 2) = v198 - 1;
          v141 = v198 - 1;
        }
        while (v198 > 2);
      }
LABEL_186:
      swift_bridgeObjectRelease();
      v202[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for SeedBook);
    *(_QWORD *)(v7 + 16) = v6;
    v202 = (_QWORD *)v7;
    v208 = (char *)(v7 + 32);
  }
  v8 = 0;
  v9 = *a1;
  v205 = v3 - 1;
  v200 = *a1 - 552;
  v10 = (char *)_swiftEmptyArrayStorage;
  v11 = v3;
  v213 = *a1;
  while (1)
  {
    v204 = v10;
    v12 = v8 + 1;
    v212 = v8;
    if (v8 + 1 >= v11)
    {
      v15 = v8 + 1;
      goto LABEL_69;
    }
    v13 = v8;
    memcpy(__dst, (const void *)(v9 + 552 * v12), 0x221uLL);
    memcpy(__src, (const void *)(v9 + 552 * v12), 0x221uLL);
    memcpy(v248, (const void *)(v9 + 552 * v13), 0x221uLL);
    memcpy(v245, (const void *)(v9 + 552 * v13), 0x221uLL);
    sub_6100(__dst);
    sub_6100(v248);
    sub_13BE94((uint64_t)__src, (uint64_t)v245);
    v214 = v14;
    if (v1)
    {
      sub_6228(v248);
      sub_6228(__dst);
      goto LABEL_186;
    }
    sub_6228(v248);
    sub_6228(__dst);
    v15 = v13 + 2;
    v11 = v207;
    if (v13 + 2 < v207)
      break;
LABEL_59:
    if ((v214 & 1) != 0)
      goto LABEL_60;
LABEL_69:
    if (v15 < v11)
    {
      if (__OFSUB__(v15, v212))
        goto LABEL_209;
      if (v15 - v212 < v203)
      {
        v77 = v212 + v203;
        if (__OFADD__(v212, v203))
          goto LABEL_211;
        if (v77 >= v11)
          v77 = v11;
        if (v77 < v212)
        {
LABEL_212:
          __break(1u);
          goto LABEL_213;
        }
        v206 = v77;
        if (v15 != v77)
        {
LABEL_79:
          v210 = v15;
          v78 = v15;
          while (1)
          {
            v79 = (char *)(v9 + 552 * v78);
            memcpy(__dst, v79, 0x221uLL);
            memcpy(v248, v79 - 552, 0x221uLL);
            v80 = v248[16];
            if ((unint64_t)v248[16] >> 1 == 0xFFFFFFFF)
              goto LABEL_214;
            v81 = v248[10];
            v82 = v248[12];
            v83 = v248[13];
            v84 = v248[14];
            v85 = v248[15];
            v243 = v248[18];
            v226 = v248[14];
            v228 = v248[13];
            v222 = v78;
            v224 = v248[15];
            v217 = v79 - 552;
            v219 = v79;
            if ((unint64_t)v248[16] >> 62 == 3)
            {
              v86 = *(_QWORD *)(v248[10] + 16);
              if (!v86)
              {
                v97 = v248[10];
                v104 = v248[11];
                v99 = v248[12];
                v105 = v248[15];
                sub_61A8(v248[10], v248[11], v248[12], v248[13], v248[14], v248[15], v248[16]);
                v106 = v105;
                v98 = v104;
                sub_61A8(v97, v104, v99, v228, v84, v106, v80);
                sub_6100(__dst);
                sub_6100(v248);
                v92 = _swiftEmptyArrayStorage;
                v100 = _swiftEmptyArrayStorage[2];
                if (!v100)
                  goto LABEL_98;
                goto LABEL_94;
              }
              v87 = v248[10];
              v88 = v248[12];
              v89 = v248[11];
            }
            else
            {
              v89 = v248[11];
              v90 = sub_5EDC(&qword_1F12B0);
              v85 = v224;
              v84 = v226;
              v83 = v228;
              v87 = swift_allocObject(v90, 88, 7);
              *(_OWORD *)(v87 + 16) = xmmword_1875E0;
              *(_QWORD *)(v87 + 32) = v81;
              *(_QWORD *)(v87 + 40) = v89;
              *(_QWORD *)(v87 + 48) = v82;
              *(_QWORD *)(v87 + 56) = v228;
              *(_QWORD *)(v87 + 64) = v226;
              *(_QWORD *)(v87 + 72) = v224;
              v88 = v82;
              v86 = 1;
              *(_BYTE *)(v87 + 80) = v80 & 1;
            }
            sub_61A8(v81, v89, v88, v83, v84, v85, v80);
            v240 = v81;
            v234 = v88;
            sub_61A8(v81, v89, v88, v83, v84, v85, v80);
            sub_6100(__dst);
            sub_6100(v248);
            swift_bridgeObjectRetain(v87);
            v91 = (double *)(v87 + 80);
            v92 = _swiftEmptyArrayStorage;
            do
            {
              if ((*(_BYTE *)v91 & 1) == 0)
              {
                v93 = *(v91 - 2);
                v94 = exp2(-*(v91 - 1) / *(v91 - 3));
                if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0)
                  v92 = sub_2FDB4(0, v92[2] + 1, 1, v92);
                v96 = v92[2];
                v95 = v92[3];
                if (v96 >= v95 >> 1)
                  v92 = sub_2FDB4((_QWORD *)(v95 > 1), v96 + 1, 1, v92);
                v92[2] = v96 + 1;
                *(double *)&v92[v96 + 4] = v93 * v94;
              }
              v91 += 7;
              --v86;
            }
            while (v86);
            swift_bridgeObjectRelease();
            v98 = v89;
            v97 = v240;
            v99 = v234;
            v100 = v92[2];
            if (!v100)
            {
LABEL_98:
              swift_bridgeObjectRelease();
              v102 = 0.0;
              goto LABEL_99;
            }
LABEL_94:
            v101 = (double *)(v92 + 4);
            v102 = 0.0;
            do
            {
              v103 = *v101++;
              v102 = v102 + v103;
              --v100;
            }
            while (v100);
            swift_bridgeObjectRelease();
LABEL_99:
            swift_bridgeObjectRelease();
            v107 = __dst[10];
            v108 = __dst[11];
            v231 = __dst[12];
            v235 = __dst[13];
            v109 = __dst[15];
            v110 = __dst[16];
            v238 = __dst[18];
            v241 = __dst[14];
            v199 = v243;
            sub_62CC(v97, v98, v99, v228, v226, v224, v80);
            if (v110 >> 1 == 0xFFFFFFFF)
              goto LABEL_215;
            v221 = v108;
            if (v110 >> 62 == 3)
            {
              v111 = *(_QWORD *)(v107 + 16);
              if (!v111)
              {
                v133 = v235;
                v132 = v231;
                v134 = v241;
                sub_61A8(v107, v108, v231, v235, v241, v109, v110);
                sub_61A8(v107, v108, v231, v235, v241, v109, v110);
                v127 = _swiftEmptyArrayStorage;
                v135 = _swiftEmptyArrayStorage[2];
                if (v135)
                  goto LABEL_113;
                goto LABEL_117;
              }
              v112 = v107;
              v114 = v231;
              v113 = v235;
              v115 = v108;
              v116 = v107;
              v117 = v110;
              v118 = v109;
              v119 = v241;
            }
            else
            {
              v120 = sub_5EDC(&qword_1F12B0);
              v112 = swift_allocObject(v120, 88, 7);
              *(_OWORD *)(v112 + 16) = xmmword_1875E0;
              *(_QWORD *)(v112 + 32) = v107;
              *(_QWORD *)(v112 + 40) = v108;
              v114 = v231;
              v113 = v235;
              *(_QWORD *)(v112 + 48) = v231;
              *(_QWORD *)(v112 + 56) = v235;
              v115 = v108;
              v116 = v107;
              v117 = v110;
              v118 = v109;
              v119 = v241;
              *(_QWORD *)(v112 + 64) = v241;
              *(_QWORD *)(v112 + 72) = v109;
              v111 = 1;
              *(_BYTE *)(v112 + 80) = v110 & 1;
            }
            v121 = v116;
            v122 = v115;
            v123 = v119;
            v215 = v118;
            v124 = v117;
            sub_61A8(v116, v115, v114, v113, v123, v118, v117);
            v125 = v122;
            v109 = v215;
            v229 = v124;
            sub_61A8(v121, v125, v114, v113, v241, v215, v124);
            swift_bridgeObjectRetain(v112);
            v126 = (double *)(v112 + 80);
            v127 = _swiftEmptyArrayStorage;
            do
            {
              if ((*(_BYTE *)v126 & 1) == 0)
              {
                v128 = *(v126 - 2);
                v129 = exp2(-*(v126 - 1) / *(v126 - 3));
                if ((swift_isUniquelyReferenced_nonNull_native(v127) & 1) == 0)
                  v127 = sub_2FDB4(0, v127[2] + 1, 1, v127);
                v131 = v127[2];
                v130 = v127[3];
                if (v131 >= v130 >> 1)
                  v127 = sub_2FDB4((_QWORD *)(v130 > 1), v131 + 1, 1, v127);
                v127[2] = v131 + 1;
                *(double *)&v127[v131 + 4] = v128 * v129;
              }
              v126 += 7;
              --v111;
            }
            while (v111);
            swift_bridgeObjectRelease();
            v107 = v121;
            v132 = v231;
            v133 = v235;
            v134 = v241;
            v110 = v229;
            v135 = v127[2];
            if (v135)
            {
LABEL_113:
              v136 = (double *)(v127 + 4);
              v137 = 0.0;
              do
              {
                v138 = *v136++;
                v137 = v137 + v138;
                --v135;
              }
              while (v135);
              swift_bridgeObjectRelease();
              goto LABEL_118;
            }
LABEL_117:
            swift_bridgeObjectRelease();
            v137 = 0.0;
LABEL_118:
            swift_bridgeObjectRelease();
            v199 = v238;
            sub_62CC(v107, v221, v132, v133, v134, v109, v110);
            sub_6228(v248);
            sub_6228(__dst);
            v9 = v213;
            if (v102 >= v137)
              goto LABEL_78;
            if (!v213)
              goto LABEL_216;
            v78 = v222 - 1;
            memcpy(__src, v219, 0x221uLL);
            memcpy(v219, v217, 0x228uLL);
            memcpy(v217, __src, 0x221uLL);
            if (v222 - 1 == v212)
            {
LABEL_78:
              v15 = v210 + 1;
              if (v210 + 1 == v206)
              {
                v15 = v206;
                break;
              }
              goto LABEL_79;
            }
          }
        }
      }
    }
    if (v15 < v212)
      goto LABEL_205;
    v211 = v15;
    if ((swift_isUniquelyReferenced_nonNull_native(v204) & 1) != 0)
      v10 = v204;
    else
      v10 = sub_4E4E4(0, *((_QWORD *)v204 + 2) + 1, 1, v204);
    v140 = *((_QWORD *)v10 + 2);
    v139 = *((_QWORD *)v10 + 3);
    v141 = v140 + 1;
    v142 = v212;
    if (v140 >= v139 >> 1)
    {
      v191 = sub_4E4E4((char *)(v139 > 1), v140 + 1, 1, v10);
      v142 = v212;
      v10 = v191;
    }
    *((_QWORD *)v10 + 2) = v141;
    v143 = v10 + 32;
    v144 = &v10[16 * v140 + 32];
    *(_QWORD *)v144 = v142;
    *((_QWORD *)v144 + 1) = v211;
    if (v140)
    {
      while (1)
      {
        v145 = v141 - 1;
        if (v141 >= 4)
        {
          v150 = &v143[16 * v141];
          v151 = *((_QWORD *)v150 - 8);
          v152 = *((_QWORD *)v150 - 7);
          v156 = __OFSUB__(v152, v151);
          v153 = v152 - v151;
          if (v156)
            goto LABEL_193;
          v155 = *((_QWORD *)v150 - 6);
          v154 = *((_QWORD *)v150 - 5);
          v156 = __OFSUB__(v154, v155);
          v148 = v154 - v155;
          v149 = v156;
          if (v156)
            goto LABEL_194;
          v157 = v141 - 2;
          v158 = &v143[16 * v141 - 32];
          v160 = *(_QWORD *)v158;
          v159 = *((_QWORD *)v158 + 1);
          v156 = __OFSUB__(v159, v160);
          v161 = v159 - v160;
          if (v156)
            goto LABEL_196;
          v156 = __OFADD__(v148, v161);
          v162 = v148 + v161;
          if (v156)
            goto LABEL_199;
          if (v162 >= v153)
          {
            v180 = &v143[16 * v145];
            v182 = *(_QWORD *)v180;
            v181 = *((_QWORD *)v180 + 1);
            v156 = __OFSUB__(v181, v182);
            v183 = v181 - v182;
            if (v156)
              goto LABEL_203;
            v173 = v148 < v183;
            goto LABEL_160;
          }
        }
        else
        {
          if (v141 != 3)
          {
            v174 = *((_QWORD *)v10 + 4);
            v175 = *((_QWORD *)v10 + 5);
            v156 = __OFSUB__(v175, v174);
            v167 = v175 - v174;
            v168 = v156;
            goto LABEL_154;
          }
          v147 = *((_QWORD *)v10 + 4);
          v146 = *((_QWORD *)v10 + 5);
          v156 = __OFSUB__(v146, v147);
          v148 = v146 - v147;
          v149 = v156;
        }
        if ((v149 & 1) != 0)
          goto LABEL_195;
        v157 = v141 - 2;
        v163 = &v143[16 * v141 - 32];
        v165 = *(_QWORD *)v163;
        v164 = *((_QWORD *)v163 + 1);
        v166 = __OFSUB__(v164, v165);
        v167 = v164 - v165;
        v168 = v166;
        if (v166)
          goto LABEL_198;
        v169 = &v143[16 * v145];
        v171 = *(_QWORD *)v169;
        v170 = *((_QWORD *)v169 + 1);
        v156 = __OFSUB__(v170, v171);
        v172 = v170 - v171;
        if (v156)
          goto LABEL_201;
        if (__OFADD__(v167, v172))
          goto LABEL_202;
        if (v167 + v172 >= v148)
        {
          v173 = v148 < v172;
LABEL_160:
          if (v173)
            v145 = v157;
          goto LABEL_162;
        }
LABEL_154:
        if ((v168 & 1) != 0)
          goto LABEL_197;
        v176 = &v143[16 * v145];
        v178 = *(_QWORD *)v176;
        v177 = *((_QWORD *)v176 + 1);
        v156 = __OFSUB__(v177, v178);
        v179 = v177 - v178;
        if (v156)
          goto LABEL_200;
        if (v179 < v167)
          goto LABEL_171;
LABEL_162:
        v184 = v145 - 1;
        if (v145 - 1 >= v141)
        {
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
LABEL_200:
          __break(1u);
LABEL_201:
          __break(1u);
LABEL_202:
          __break(1u);
LABEL_203:
          __break(1u);
LABEL_204:
          __break(1u);
LABEL_205:
          __break(1u);
LABEL_206:
          __break(1u);
LABEL_207:
          __break(1u);
LABEL_208:
          __break(1u);
LABEL_209:
          __break(1u);
LABEL_210:
          __break(1u);
LABEL_211:
          __break(1u);
          goto LABEL_212;
        }
        if (!v9)
          goto LABEL_217;
        v185 = v10;
        v186 = &v143[16 * v184];
        v187 = *(_QWORD *)v186;
        v188 = &v143[16 * v145];
        v189 = *((_QWORD *)v188 + 1);
        sub_13E9C4((char *)(v9 + 552 * *(_QWORD *)v186), (char *)(v9 + 552 * *(_QWORD *)v188), v9 + 552 * v189, v208);
        if (v1)
          goto LABEL_186;
        if (v189 < v187)
          goto LABEL_190;
        if (v145 > *((_QWORD *)v185 + 2))
          goto LABEL_191;
        *(_QWORD *)v186 = v187;
        *(_QWORD *)&v143[16 * v184 + 8] = v189;
        v190 = *((_QWORD *)v185 + 2);
        if (v145 >= v190)
          goto LABEL_192;
        v141 = v190 - 1;
        memmove(&v143[16 * v145], v188 + 16, 16 * (v190 - 1 - v145));
        v10 = v185;
        *((_QWORD *)v185 + 2) = v190 - 1;
        if (v190 <= 2)
          goto LABEL_171;
      }
    }
    v141 = 1;
LABEL_171:
    v11 = v207;
    v8 = v211;
    if (v211 >= v207)
      goto LABEL_175;
  }
  while (1)
  {
    v209 = v15;
    memcpy(v245, (const void *)(v9 + 552 * v15), 0x221uLL);
    memcpy(__src, (const void *)(v9 + 552 * v12), 0x221uLL);
    v16 = __src[16];
    if ((unint64_t)__src[16] >> 1 == 0xFFFFFFFF)
      goto LABEL_218;
    v17 = __src[10];
    v18 = __src[11];
    v19 = __src[12];
    v20 = __src[13];
    v21 = __src[14];
    v22 = __src[15];
    v242 = __src[15];
    v23 = __src[18];
    v225 = __src[12];
    v227 = __src[14];
    v223 = __src[11];
    if ((unint64_t)__src[16] >> 62 == 3)
    {
      v24 = *(_QWORD *)(__src[10] + 16);
      if (!v24)
      {
        v39 = __src[12];
        v34 = __src[13];
        v40 = __src[15];
        sub_61A8(__src[10], __src[11], __src[12], __src[13], __src[14], __src[15], __src[16]);
        sub_61A8(v17, v18, v39, v34, v21, v40, v16);
        sub_6100(v245);
        sub_6100(__src);
        v29 = _swiftEmptyArrayStorage;
        v35 = _swiftEmptyArrayStorage[2];
        if (!v35)
          goto LABEL_34;
        goto LABEL_30;
      }
      v25 = __src[10];
    }
    else
    {
      v26 = sub_5EDC(&qword_1F12B0);
      v27 = swift_allocObject(v26, 88, 7);
      v22 = v242;
      v21 = v227;
      v25 = v27;
      *(_OWORD *)(v27 + 16) = xmmword_1875E0;
      *(_QWORD *)(v27 + 32) = v17;
      *(_QWORD *)(v27 + 40) = v18;
      *(_QWORD *)(v27 + 48) = v19;
      *(_QWORD *)(v27 + 56) = v20;
      *(_QWORD *)(v27 + 64) = v227;
      *(_QWORD *)(v27 + 72) = v242;
      v24 = 1;
      *(_BYTE *)(v27 + 80) = v16 & 1;
    }
    sub_61A8(v17, v18, v19, v20, v21, v22, v16);
    v232 = v23;
    v236 = v20;
    sub_61A8(v17, v18, v19, v20, v21, v242, v16);
    sub_6100(v245);
    sub_6100(__src);
    swift_bridgeObjectRetain(v25);
    v28 = (double *)(v25 + 80);
    v29 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v28 & 1) == 0)
      {
        v30 = *(v28 - 2);
        v31 = exp2(-*(v28 - 1) / *(v28 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
          v29 = sub_2FDB4(0, v29[2] + 1, 1, v29);
        v33 = v29[2];
        v32 = v29[3];
        if (v33 >= v32 >> 1)
          v29 = sub_2FDB4((_QWORD *)(v32 > 1), v33 + 1, 1, v29);
        v29[2] = v33 + 1;
        *(double *)&v29[v33 + 4] = v30 * v31;
      }
      v28 += 7;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease();
    v34 = v236;
    v23 = v232;
    v35 = v29[2];
    if (!v35)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      v37 = 0.0;
      goto LABEL_35;
    }
LABEL_30:
    v36 = (double *)(v29 + 4);
    v37 = 0.0;
    do
    {
      v38 = *v36++;
      v37 = v37 + v38;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
LABEL_35:
    swift_bridgeObjectRelease();
    v42 = v245[10];
    v41 = v245[11];
    v233 = v245[12];
    v237 = v245[13];
    v43 = v245[15];
    v230 = v245[14];
    v44 = v245[16];
    v239 = v245[18];
    v199 = v23;
    sub_62CC(v17, v223, v225, v34, v227, v242, v16);
    if (v44 >> 1 == 0xFFFFFFFF)
      goto LABEL_219;
    v220 = v41;
    if (v44 >> 62 == 3)
    {
      v45 = v41;
      v46 = *(_QWORD *)(v42 + 16);
      v47 = v233;
      if (!v46)
      {
        v66 = v237;
        v67 = v230;
        sub_61A8(v42, v45, v233, v237, v230, v43, v44);
        sub_61A8(v42, v45, v233, v237, v230, v43, v44);
        v61 = _swiftEmptyArrayStorage;
        v68 = _swiftEmptyArrayStorage[2];
        if (!v68)
          goto LABEL_53;
        goto LABEL_49;
      }
      v48 = v42;
      v49 = v237;
      v50 = v43;
      v51 = v42;
      v52 = v44;
      v53 = v230;
      v54 = v233;
    }
    else
    {
      v55 = sub_5EDC(&qword_1F12B0);
      v48 = swift_allocObject(v55, 88, 7);
      *(_OWORD *)(v48 + 16) = xmmword_1875E0;
      *(_QWORD *)(v48 + 32) = v42;
      *(_QWORD *)(v48 + 40) = v41;
      v54 = v233;
      v49 = v237;
      *(_QWORD *)(v48 + 48) = v233;
      *(_QWORD *)(v48 + 56) = v237;
      v50 = v43;
      v51 = v42;
      v52 = v44;
      v53 = v230;
      *(_QWORD *)(v48 + 64) = v230;
      *(_QWORD *)(v48 + 72) = v43;
      v46 = 1;
      *(_BYTE *)(v48 + 80) = v44 & 1;
      v45 = v41;
    }
    v56 = v51;
    v57 = v49;
    v216 = (void *)v52;
    v218 = (void *)v50;
    sub_61A8(v51, v45, v54, v49, v53, v50, v52);
    v244 = v56;
    v58 = v56;
    v59 = v57;
    v44 = (unint64_t)v216;
    v43 = (uint64_t)v218;
    sub_61A8(v58, v45, v54, v59, v53, (uint64_t)v218, (unint64_t)v216);
    swift_bridgeObjectRetain(v48);
    v60 = (double *)(v48 + 80);
    v61 = _swiftEmptyArrayStorage;
    do
    {
      if ((*(_BYTE *)v60 & 1) == 0)
      {
        v62 = *(v60 - 2);
        v63 = exp2(-*(v60 - 1) / *(v60 - 3));
        if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
          v61 = sub_2FDB4(0, v61[2] + 1, 1, v61);
        v65 = v61[2];
        v64 = v61[3];
        if (v65 >= v64 >> 1)
          v61 = sub_2FDB4((_QWORD *)(v64 > 1), v65 + 1, 1, v61);
        v61[2] = v65 + 1;
        *(double *)&v61[v65 + 4] = v62 * v63;
      }
      v60 += 7;
      --v46;
    }
    while (v46);
    swift_bridgeObjectRelease();
    v47 = v233;
    v66 = v237;
    v67 = v230;
    v42 = v244;
    v68 = v61[2];
    if (!v68)
    {
LABEL_53:
      swift_bridgeObjectRelease();
      v70 = 0.0;
      goto LABEL_54;
    }
LABEL_49:
    v69 = (double *)(v61 + 4);
    v70 = 0.0;
    do
    {
      v71 = *v69++;
      v70 = v70 + v71;
      --v68;
    }
    while (v68);
    swift_bridgeObjectRelease();
LABEL_54:
    swift_bridgeObjectRelease();
    v199 = v239;
    sub_62CC(v42, v220, v47, v66, v67, v43, v44);
    sub_6228(__src);
    sub_6228(v245);
    if (((v214 ^ (v37 >= v70)) & 1) == 0)
    {
      v11 = v207;
      v9 = v213;
      v15 = v209;
      goto LABEL_59;
    }
    v11 = v207;
    v9 = v213;
    if (v209 == v205)
      break;
    v12 = v209;
    v15 = v209 + 1;
  }
  v15 = v207;
  if ((v214 & 1) == 0)
    goto LABEL_69;
LABEL_60:
  if (v15 >= v212)
  {
    if (v212 < v15)
    {
      v72 = (char *)(v200 + 552 * v15);
      v73 = v15;
      v74 = v212;
      v75 = (char *)(v9 + 552 * v212);
      while (1)
      {
        if (v74 != --v73)
        {
          if (!v9)
            goto LABEL_220;
          v76 = v15;
          memcpy(__src, v75, 0x221uLL);
          memmove(v75, v72, 0x228uLL);
          memcpy(v72, __src, 0x221uLL);
          v11 = v207;
          v15 = v76;
        }
        ++v74;
        v72 -= 552;
        v75 += 552;
        if (v74 >= v73)
          goto LABEL_69;
      }
    }
    goto LABEL_69;
  }
LABEL_213:
  __break(1u);
LABEL_214:
  __break(1u);
LABEL_215:
  __break(1u);
LABEL_216:
  __break(1u);
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  LOBYTE(v199) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, v199, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_13E9C4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  char v14;
  _QWORD __dsta[69];
  _QWORD v17[69];
  char *v18;
  const void *v19;
  char *v20;

  v7 = a2 - __src;
  v8 = (a2 - __src) / 552;
  v9 = a3 - (_QWORD)a2;
  v10 = (uint64_t)(a3 - (_QWORD)a2) / 552;
  v20 = __src;
  v19 = __dst;
  if (v8 < v10)
  {
    if (v7 >= -551)
    {
      v11 = 552 * v8;
      if (__dst != __src || &__src[v11] <= __dst)
        memmove(__dst, __src, v11);
      v18 = &__dst[v11];
      if ((unint64_t)a2 < a3 && v7 >= 552)
      {
        memcpy(__dsta, a2, 0x221uLL);
        memcpy(v17, __dst, 0x221uLL);
        if (v17[16] >> 1 != 0xFFFFFFFFLL)
          __asm { BR              X9 }
        __break(1u);
        JUMPOUT(0x13F254);
      }
      goto LABEL_18;
    }
LABEL_21:
    v14 = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v14, 1046, 0);
    __break(1u);
    JUMPOUT(0x13F2A8);
  }
  if (v9 < -551)
    goto LABEL_21;
  v12 = 552 * v10;
  if (__dst != a2 || &a2[v12] <= __dst)
    memmove(__dst, a2, 552 * v10);
  v18 = &__dst[v12];
  v20 = a2;
  if (__src < a2 && v9 >= 552)
  {
    memcpy(__dsta, &__dst[v12 - 552], 0x221uLL);
    memcpy(v17, a2 - 552, 0x221uLL);
    if (v17[16] >> 1 != 0xFFFFFFFFLL)
      __asm { BR              X9 }
    __break(1u);
    JUMPOUT(0x13F25CLL);
  }
LABEL_18:
  sub_4E798((void **)&v20, &v19, &v18);
  return 1;
}

_QWORD *sub_13F2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _QWORD *v66;

  v6 = v5;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v66 = _swiftEmptyArrayStorage;
    sub_3432C(0, v7, 0);
    v8 = _swiftEmptyArrayStorage;
    v10 = (_QWORD *)(a1 + 104);
    while (1)
    {
      v11 = *((_BYTE *)v10 - 64);
      v12 = *(v10 - 7);
      v13 = *((_BYTE *)v10 - 48);
      v14 = *(v10 - 5);
      v15 = *((_BYTE *)v10 - 32);
      v17 = *(v10 - 3);
      v16 = *(v10 - 2);
      v18 = *(v10 - 1);
      v19 = *v10;
      v45 = *(v10 - 9);
      v46 = v11;
      v47 = v12;
      v48 = v13;
      v49 = v14;
      v50 = v15;
      v51 = v17;
      v52 = v16;
      v53 = v18;
      v54 = v19;
      sub_40554(v14, v15);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v17);
      sub_13CAF0((uint64_t)&v45, a2, a3, a4, a5, (uint64_t)&v55);
      if (v6)
        break;
      sub_40568(v14, v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v20 = v55;
      v21 = v56;
      v22 = v57;
      v23 = v58;
      v24 = v59;
      v25 = v60;
      v26 = v61;
      v27 = v62;
      v28 = v63;
      v30 = v8[2];
      v29 = v8[3];
      v32 = v64;
      v31 = v65;
      v66 = v8;
      if (v30 >= v29 >> 1)
      {
        v40 = v62;
        v39 = v59;
        v38 = v60;
        v37 = v61;
        v35 = v64;
        v36 = v65;
        sub_3432C(v29 > 1, v30 + 1, 1);
        v32 = v35;
        v31 = v36;
        v26 = v37;
        v25 = v38;
        v24 = v39;
        v27 = v40;
        v8 = v66;
      }
      v8[2] = v30 + 1;
      v33 = &v8[14 * v30];
      v33[4] = v20;
      *((_BYTE *)v33 + 40) = v21;
      v33[6] = v22;
      *((_BYTE *)v33 + 56) = v23;
      v33[8] = v24;
      *((_BYTE *)v33 + 72) = v25;
      v33[10] = v26;
      *(_OWORD *)(v33 + 11) = v27;
      v33[13] = v28;
      *((_OWORD *)v33 + 7) = v32;
      *((_OWORD *)v33 + 8) = v31;
      v10 += 10;
      --v7;
      v6 = 0;
      if (!v7)
        return v8;
    }
    sub_40568(v14, v15);
    swift_release(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_13F510(uint64_t a1, _QWORD *(*a2)(__int128 *__return_ptr, _QWORD, double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  if (!v7)
    goto LABEL_7;
LABEL_4:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v12 | (v10 << 6); ; i = __clz(__rbit64(v16)) + (v10 << 6))
  {
    result = (uint64_t)a2(&v26, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i), *(double *)(*(_QWORD *)(a1 + 56) + 8 * i));
    v14 = v28;
    if (v28)
    {
      v24 = v26;
      v30 = v27;
      v25 = v29;
      result = swift_isUniquelyReferenced_nonNull_native(v11);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_30680(0, v11[2] + 1, 1, v11);
        v11 = (_QWORD *)result;
      }
      v18 = v11;
      v19 = v11[2];
      v20 = v18;
      v21 = v18[3];
      v22 = v19 + 1;
      if (v19 >= v21 >> 1)
      {
        result = (uint64_t)sub_30680((_QWORD *)(v21 > 1), v19 + 1, 1, v20);
        v22 = v19 + 1;
        v20 = (_QWORD *)result;
      }
      v20[2] = v22;
      v23 = &v20[6 * v19];
      v11 = v20;
      *((_OWORD *)v23 + 2) = v24;
      *((_BYTE *)v23 + 48) = v30 & 1;
      v23[7] = v14;
      *((_OWORD *)v23 + 4) = v25;
      if (v7)
        goto LABEL_4;
    }
    else if (v7)
    {
      goto LABEL_4;
    }
LABEL_7:
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v15 >= v8)
      goto LABEL_29;
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        goto LABEL_29;
      v16 = *(_QWORD *)(v4 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          goto LABEL_29;
        v16 = *(_QWORD *)(v4 + 8 * v10);
        if (!v16)
        {
          v10 = v15 + 3;
          if (v15 + 3 >= v8)
            goto LABEL_29;
          v16 = *(_QWORD *)(v4 + 8 * v10);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v16 - 1) & v16;
  }
  v17 = v15 + 4;
  if (v17 >= v8)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v11;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v8)
      goto LABEL_29;
    v16 = *(_QWORD *)(v4 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_13F758(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 80);
    do
    {
      v14 = *(v5 - 6);
      v13 = *(v5 - 5);
      v15 = *(v5 - 4);
      v16 = *((_BYTE *)v5 - 24);
      v17 = *(v5 - 2);
      v18 = *(v5 - 1);
      v19 = *v5;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      if (!v17)
        break;
      v36 = v18;
      v38 = v16;
      v40 = v13;
      v41 = v4;
      v20 = (_QWORD *)*a3;
      v22 = sub_39228(v14);
      v23 = v20[2];
      v24 = (v21 & 1) == 0;
      v25 = v23 + v24;
      if (__OFADD__(v23, v24))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        __break(1u);
        return result;
      }
      v26 = v21;
      if (v20[3] >= v25)
      {
        if ((a2 & 1) == 0)
          sub_16C414();
      }
      else
      {
        sub_15C5EC(v25, a2 & 1);
        v27 = sub_39228(v14);
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_18;
        v22 = v27;
      }
      v29 = (_QWORD *)*a3;
      if ((v26 & 1) != 0)
      {
        v6 = 48 * v22;
        v7 = v29[7] + 48 * v22;
        v8 = *(_QWORD *)v7;
        v9 = *(_QWORD *)(v7 + 8);
        v39 = *(_BYTE *)(v7 + 16);
        v10 = *(_QWORD *)(v7 + 24);
        v37 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(v7 + 40);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v29[7] + v6;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v12 = v8;
        *(_QWORD *)(v12 + 8) = v9;
        *(_BYTE *)(v12 + 16) = v39;
        *(_QWORD *)(v12 + 24) = v10;
        *(_QWORD *)(v12 + 32) = v37;
        *(_QWORD *)(v12 + 40) = v11;
      }
      else
      {
        v29[(v22 >> 6) + 8] |= 1 << v22;
        *(_QWORD *)(v29[6] + 8 * v22) = v14;
        v30 = v29[7] + 48 * v22;
        *(_QWORD *)v30 = v40;
        *(_QWORD *)(v30 + 8) = v15;
        *(_BYTE *)(v30 + 16) = v38;
        *(_QWORD *)(v30 + 24) = v17;
        *(_QWORD *)(v30 + 32) = v36;
        *(_QWORD *)(v30 + 40) = v19;
        v31 = v29[2];
        v32 = __OFADD__(v31, 1);
        v33 = v31 + 1;
        if (v32)
          goto LABEL_17;
        v29[2] = v33;
      }
      v5 += 7;
      a2 = 1;
      --v4;
    }
    while (v41 != 1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_13F984(uint64_t *a1)
{
  uint64_t v1;

  return sub_128A3C(a1, *(_QWORD **)(v1 + 16), *(uint64_t **)(v1 + 24));
}

double sub_13F99C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;

  return sub_13D3C0(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), a2, a3);
}

uint64_t type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2.Errors(uint64_t a1)
{
  uint64_t result;

  result = qword_1F67A0;
  if (!qword_1F67A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BooksBackEndSeedBasedRecommendationServiceV2.Errors);
  return result;
}

uint64_t *sub_13F9E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v11 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v12 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 7u:
        v13 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_13FB10(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
    case 1:
    case 2:
      result = swift_bridgeObjectRelease(*a1);
      break;
    case 7:
      v4 = type metadata accessor for UUID(0);
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_13FB88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_7;
    case 1u:
      v10 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 1;
      goto LABEL_7;
    case 2u:
      v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_7;
    case 7u:
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v7 = a1;
      v8 = a3;
      v9 = 7;
LABEL_7:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_13FC84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_26AA0((uint64_t)a1, type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2.Errors);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_8;
      case 1u:
        v10 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v10);
        v7 = a1;
        v8 = a3;
        v9 = 1;
        goto LABEL_8;
      case 2u:
        v11 = *a2;
        *a1 = *a2;
        swift_bridgeObjectRetain(v11);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_8;
      case 7u:
        v12 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
        v7 = a1;
        v8 = a3;
        v9 = 7;
LABEL_8:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *sub_13FD98(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    sub_26AA0((uint64_t)a1, type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2.Errors);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 7)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 7);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_13FE3C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  _QWORD v15[4];

  sub_26DB8(a1, a7);
  v15[0] = a3;
  v15[1] = a4;
  v15[2] = a5;
  v15[3] = a6;
  v13 = type metadata accessor for AccessManager.RequirementEntry(0, (uint64_t)v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a7 + *(int *)(v13 + 52), a2, a4);
}

uint64_t AccessManager.register(requirement:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v9 + 88);
  *(_QWORD *)&v17 = v5;
  *((_QWORD *)&v17 + 1) = v5;
  v18 = v10;
  v19 = v10;
  v11 = type metadata accessor for AccessManager.RequirementEntry(0, (uint64_t)&v17);
  __chkstk_darwin(v11);
  v13 = (char *)&v16 - v12;
  sub_3DD40(a1, (uint64_t)&v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2, v5);
  sub_13FE3C(&v17, (uint64_t)v8, v5, v5, v10, v10, (uint64_t)v13);
  swift_beginAccess(v2 + 16, &v17, 33, 0);
  v14 = type metadata accessor for Array(0);
  Array.append(_:)(v13, v14);
  return swift_endAccess(&v17);
}

uint64_t type metadata accessor for AccessManager.RequirementEntry(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AccessManager.RequirementEntry);
}

uint64_t AggregateFlattener.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t dispatch thunk of UserEncodingServiceType.userEncodings()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v5 = *(int **)(a2 + 8);
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_429A0;
  return v8(a1, a2);
}

uint64_t sub_140088(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

uint64_t type metadata accessor for AccessManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_117FD4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessManager);
}

uint64_t method lookup function for AccessManager(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AccessManager);
}

uint64_t sub_1400E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_1400EC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 0, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t *sub_140144(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain(v11);
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 24)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_14021C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_140278(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_140310(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_1403F0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_140488(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_140568(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1406A8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = &dword_0 + 1;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = &dword_4;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_140850()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_140858()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_14087C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 48))(a1, 1);
}

uint64_t sub_140890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 56))(a1, a2, 1);
}

uint64_t type metadata accessor for AccessManager.Result(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_117FD4(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AccessManager.Result);
}

uint64_t sub_1408B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "(";
  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 48);
    return 0;
  }
  return result;
}

_QWORD *sub_140928(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  __int128 v11;

  v4 = (_QWORD *)a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 40) & (unint64_t)~v7) + *(_QWORD *)(v6 + 64) > 0x18)
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain(v10);
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v11;
    (**(void (***)(uint64_t, uint64_t *))(v11 - 8))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + v7 + 40) & ~v7, ((unint64_t)a2 + v7 + 40) & ~v7, v5);
  }
  return v4;
}

uint64_t sub_1409FC(_QWORD *a1, uint64_t a2)
{
  sub_62F8(a1);
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))(((unint64_t)a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_140A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(unsigned __int8 *)(v7 + 80) + 40 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 40 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_QWORD *sub_140AAC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;

  sub_3F20C(a1, a2);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_140B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))((*(unsigned __int8 *)(v5 + 80) + 40 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 40 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t sub_140B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;

  sub_62F8((_QWORD *)a1);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(unsigned __int8 *)(v7 + 80) + 40 + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(unsigned __int8 *)(v7 + 80) + 40 + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_140BCC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 40) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v7 + 40) & ~v7);
      v15 = *(_QWORD *)(a1 + 24);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_140CA0 + 4 * byte_19BE1E[(v9 - 1)]))();
}

void sub_140D10(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = &dword_4;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = &dword_0 + 1;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t sub_140F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_6A910(a1);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      v11 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v16 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (v10)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1E8318, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v9, v18, (char *)&type metadata for () + 8, &unk_1F6A40, v17);
}

uint64_t sub_141058()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_1F6960);
  sub_5216C(v0, (uint64_t)qword_1F6960);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD00000000000001CLL, 0x800000000019BF10);
}

uint64_t static Logger.historyServiceStress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1F0160 != -1)
    swift_once(&qword_1F0160, sub_141058);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_5216C(v2, (uint64_t)qword_1F6960);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

Swift::Void __swiftcall BookHistoryServiceStressTest.fetchBookHistoryForStressTesting()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v22[4];

  v1 = v0;
  v2 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v2);
  v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(_QWORD *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_1E82B8, 40, 7);
  v7[2] = 0;
  v8 = v7 + 2;
  v7[3] = 0;
  v7[4] = v1;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  v10 = swift_retain(v1);
  if (v9 == 1)
  {
    sub_6A910((uint64_t)v4);
    v11 = 0;
    v12 = 0;
    v13 = 7168;
  }
  else
  {
    v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    v13 = v14 | 0x1C00;
    v15 = *v8;
    if (*v8)
    {
      v16 = v7[3];
      ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      v12 = v18;
      swift_unknownObjectRelease(v15);
    }
    else
    {
      v11 = 0;
      v12 = 0;
    }
  }
  v19 = swift_allocObject(&unk_1E82E0, 32, 7);
  *(_QWORD *)(v19 + 16) = &unk_1F6980;
  *(_QWORD *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v11;
    v22[3] = v12;
  }
  else
  {
    v20 = 0;
  }
  v21 = swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_1F6990, v19);
  swift_release(v21);
}

uint64_t sub_141310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[416] = a4;
  v5 = type metadata accessor for Date(0);
  v4[417] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[418] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[419] = swift_task_alloc(v7);
  v4[420] = swift_task_alloc(v7);
  v4[421] = swift_task_alloc(v7);
  return swift_task_switch(sub_14138C, 0, 0);
}

uint64_t sub_14138C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  int *v13;

  if (qword_1F0160 != -1)
    swift_once(&qword_1F0160, sub_141058);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_5216C(v1, (uint64_t)qword_1F6960);
  v0[422] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_0, v3, v4, "Beginning to fetch book histories", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = (_QWORD *)v0[416];

  v7 = v6 + 7;
  v8 = v6[10];
  v9 = v6[11];
  sub_49F4(v7, v8);
  v10 = *(int **)(v9 + 16);
  v13 = (int *)((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  v0[423] = v11;
  *v11 = v0;
  v11[1] = sub_1414C8;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v13)(v0 + 2, v8, v9);
}

uint64_t sub_1414C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 3384);
  *(_QWORD *)(*(_QWORD *)v1 + 3392) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_141834;
  else
    v3 = sub_14152C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_14152C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  int *v10;

  v1 = (_QWORD *)v0[416];
  v2 = memcpy(v0 + 274, v0 + 2, 0x440uLL);
  Date.init()(v2);
  v3 = v1 + 2;
  v4 = v1[5];
  v5 = v1[6];
  sub_49F4(v3, v4);
  v6 = sub_3CBAC((uint64_t)&off_1D5F10);
  v0[425] = v6;
  memcpy(v0 + 138, v0 + 274, 0x440uLL);
  v7 = *(int **)(v5 + 8);
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[426] = v8;
  *v8 = v0;
  v8[1] = sub_14160C;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))v10)(v6, 0x7FFFFFFFFFFFFFFFLL, v0 + 138, v4, v5);
}

uint64_t sub_14160C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3408);
  *(_QWORD *)(*v1 + 3416) = v0;
  swift_task_dealloc(v3);
  swift_bridgeObjectRelease();
  if (v0)
  {
    v4 = sub_141A04;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_5B70(v2 + 2192);
    v4 = sub_141698;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_141698()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  double v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 3344) + 16))(*(_QWORD *)(v0 + 3360), *(_QWORD *)(v0 + 3368), *(_QWORD *)(v0 + 3336));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 3360);
    v5 = *(_QWORD *)(v0 + 3352);
    v6 = *(_QWORD *)(v0 + 3344);
    v7 = *(_QWORD *)(v0 + 3336);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    Date.init()();
    v9 = Date.timeIntervalSince(_:)(v4);
    v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v10(v5, v7);
    *(double *)(v0 + 3320) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3320, v0 + 3328, v8 + 4, v8 + 12);
    v10(v4, v7);
    _os_log_impl(&dword_0, v2, v3, "Finished fetching book histories.  Total time=%f", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    v11 = *(_QWORD *)(v0 + 3360);
    v12 = *(_QWORD *)(v0 + 3344);
    v13 = *(_QWORD *)(v0 + 3336);

    v10 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v10(v11, v13);
  }
  v10(*(_QWORD *)(v0 + 3368), *(_QWORD *)(v0 + 3336));
  v14 = *(_QWORD *)(v0 + 3360);
  v15 = *(_QWORD *)(v0 + 3352);
  swift_task_dealloc(*(_QWORD *)(v0 + 3368));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_141834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 3392);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 3312, v0 + 3280);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 3288), *(_QWORD *)(v0 + 3296));
    *(_QWORD *)(v0 + 3304) = sub_9DA98(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3304, v0 + 3312, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v3, v4, "Error fetching book history: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 3360);
  v10 = *(_QWORD *)(v0 + 3352);
  swift_task_dealloc(*(_QWORD *)(v0 + 3368));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_141A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 3344) + 8))(*(_QWORD *)(v0 + 3368), *(_QWORD *)(v0 + 3336));
  sub_5B70(v0 + 2192);
  v1 = *(_QWORD *)(v0 + 3416);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 3312, v0 + 3280);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 3288), *(_QWORD *)(v0 + 3296));
    *(_QWORD *)(v0 + 3304) = sub_9DA98(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3304, v0 + 3312, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl(&dword_0, v3, v4, "Error fetching book history: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v9 = *(_QWORD *)(v0 + 3360);
  v10 = *(_QWORD *)(v0 + 3352);
  swift_task_dealloc(*(_QWORD *)(v0 + 3368));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_141BF4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_141C20(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1F697C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_4814;
  return sub_141310(a1, v4, v5, v6);
}

uint64_t BookHistoryServiceStressTest.deinit()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  sub_62F8((_QWORD *)(v0 + 56));
  return v0;
}

void sub_141CB0()
{
  BookHistoryServiceStressTest.fetchBookHistoryForStressTesting()();
}

uint64_t sub_141CD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1F698C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_6AA68;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1F6988 + dword_1F6988))(a1, v4);
}

uint64_t type metadata accessor for BookHistoryServiceStressTest()
{
  return objc_opt_self(_TtC20BooksPersonalization28BookHistoryServiceStressTest);
}

uint64_t method lookup function for BookHistoryServiceStressTest(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookHistoryServiceStressTest);
}

uint64_t sub_141D6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_141D90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1F698C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_4814;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1F6988 + dword_1F6988))(a1, v4);
}

uint64_t FrameworkAssembly.assemblies.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___BPAssembly_assemblies));
}

id FrameworkAssembly.init()()
{
  char *v0;
  objc_class *ObjectType;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  objc_super v22;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = OBJC_IVAR___BPAssembly_assemblies;
  v3 = sub_5EDC(&qword_1F6A50);
  v4 = swift_allocObject(v3, 352, 7);
  *(_OWORD *)(v4 + 16) = xmmword_19BF60;
  v5 = type metadata accessor for Assembly();
  v6 = swift_allocObject(v5, 16, 7);
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 64) = sub_41754(&qword_1F6A58, (uint64_t (*)(uint64_t))type metadata accessor for Assembly, (uint64_t)&unk_195500);
  *(_QWORD *)(v4 + 32) = v6;
  v7 = type metadata accessor for AuthorRecommendationServiceAssembly();
  v8 = swift_allocObject(v7, 16, 7);
  *(_QWORD *)(v4 + 96) = v7;
  *(_QWORD *)(v4 + 104) = sub_41754(&qword_1F6A60, (uint64_t (*)(uint64_t))type metadata accessor for AuthorRecommendationServiceAssembly, (uint64_t)&unk_18BEA4);
  *(_QWORD *)(v4 + 72) = v8;
  v9 = type metadata accessor for CollectionServiceAssembly();
  v10 = swift_allocObject(v9, 16, 7);
  *(_QWORD *)(v4 + 136) = v9;
  *(_QWORD *)(v4 + 144) = sub_41754(&qword_1F6A68, (uint64_t (*)(uint64_t))type metadata accessor for CollectionServiceAssembly, (uint64_t)&unk_19CE0C);
  *(_QWORD *)(v4 + 112) = v10;
  v11 = type metadata accessor for GenreRecommendationServiceAssembly();
  v12 = swift_allocObject(v11, 16, 7);
  *(_QWORD *)(v4 + 176) = v11;
  *(_QWORD *)(v4 + 184) = sub_41754(&qword_1F6A70, (uint64_t (*)(uint64_t))type metadata accessor for GenreRecommendationServiceAssembly, (uint64_t)&unk_19ABF4);
  *(_QWORD *)(v4 + 152) = v12;
  v13 = type metadata accessor for MediaTypeRecommendationServiceAssembly();
  v14 = swift_allocObject(v13, 16, 7);
  *(_QWORD *)(v4 + 216) = v13;
  *(_QWORD *)(v4 + 224) = sub_41754(&qword_1F6A78, (uint64_t (*)(uint64_t))type metadata accessor for MediaTypeRecommendationServiceAssembly, (uint64_t)&unk_190038);
  *(_QWORD *)(v4 + 192) = v14;
  v15 = type metadata accessor for MediaTypesRecommendationServiceAssembly();
  v16 = swift_allocObject(v15, 16, 7);
  *(_QWORD *)(v4 + 256) = v15;
  *(_QWORD *)(v4 + 264) = sub_41754(&qword_1F6A80, (uint64_t (*)(uint64_t))type metadata accessor for MediaTypesRecommendationServiceAssembly, (uint64_t)&unk_18FC38);
  *(_QWORD *)(v4 + 232) = v16;
  v17 = type metadata accessor for ScorerAssembly();
  v18 = swift_allocObject(v17, 16, 7);
  *(_QWORD *)(v4 + 296) = v17;
  *(_QWORD *)(v4 + 304) = sub_41754(&qword_1F6A88, (uint64_t (*)(uint64_t))type metadata accessor for ScorerAssembly, (uint64_t)&unk_1902F4);
  *(_QWORD *)(v4 + 272) = v18;
  v19 = type metadata accessor for TabiAssembly();
  v20 = swift_allocObject(v19, 16, 7);
  *(_QWORD *)(v4 + 336) = v19;
  *(_QWORD *)(v4 + 344) = sub_41754(&qword_1F6A90, (uint64_t (*)(uint64_t))type metadata accessor for TabiAssembly, (uint64_t)&unk_19BAF4);
  *(_QWORD *)(v4 + 312) = v20;
  *(_QWORD *)&v0[v2] = v4;
  v22.receiver = v0;
  v22.super_class = ObjectType;
  return objc_msgSendSuper2(&v22, "init");
}

uint64_t sub_142110()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(*v0 + OBJC_IVAR___BPAssembly_assemblies));
}

uint64_t type metadata accessor for FrameworkAssembly()
{
  return objc_opt_self(BPAssembly);
}

BooksPersonalization::SeedBasedRecommendationSource_optional __swiftcall SeedBasedRecommendationSource.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::SeedBasedRecommendationSource_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DA8C8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

_UNKNOWN **static SeedBasedRecommendationSource.allCases.getter()
{
  return &off_1DA930;
}

unint64_t sub_1421AC()
{
  unint64_t result;

  result = qword_1F6AC0;
  if (!qword_1F6AC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeedBasedRecommendationSource, &type metadata for SeedBasedRecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F6AC0);
  }
  return result;
}

BooksPersonalization::SeedBasedRecommendationSource_optional sub_1421F0(Swift::String *a1)
{
  return SeedBasedRecommendationSource.init(rawValue:)(*a1);
}

unint64_t sub_142200()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F6AC8;
  if (!qword_1F6AC8)
  {
    v1 = sub_5F68(&qword_1F6AD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F6AC8);
  }
  return result;
}

void sub_14224C(_QWORD *a1@<X8>)
{
  *a1 = &off_1DA958;
}

unint64_t sub_142260()
{
  unint64_t result;

  result = qword_1F6AD8;
  if (!qword_1F6AD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeedBasedRecommendationSource, &type metadata for SeedBasedRecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F6AD8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SeedBasedRecommendationSource()
{
  return &type metadata for SeedBasedRecommendationSource;
}

uint64_t sub_1422B8@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  __int128 v12[2];
  _BYTE v13[24];

  v4 = *a1;
  swift_beginAccess(v2 + 16, v13, 32, 0);
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_3998C(v4), (v7 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v5 + 56) + 40 * v6, (uint64_t)v12);
    sub_26DB8(v12, a2);
    return swift_endAccess(v13);
  }
  else
  {
    swift_endAccess(v13);
    v9 = sub_14239C();
    v10 = swift_allocError(&type metadata for SeedBasedRecommendationServiceResolver.Errors, v9, 0, 0);
    *v11 = v4;
    return swift_willThrow(v10);
  }
}

uint64_t type metadata accessor for SeedBasedRecommendationServiceResolver()
{
  return objc_opt_self(_TtC20BooksPersonalization38SeedBasedRecommendationServiceResolver);
}

unint64_t sub_14239C()
{
  unint64_t result;

  result = qword_1F6B80;
  if (!qword_1F6B80)
  {
    result = swift_getWitnessTable(&unk_19C1A0, &type metadata for SeedBasedRecommendationServiceResolver.Errors);
    atomic_store(result, (unint64_t *)&qword_1F6B80);
  }
  return result;
}

uint64_t _s20BooksPersonalization29SeedBasedRecommendationSourceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_14242C + 4 * byte_19BFD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_142460 + 4 * byte_19BFD0[v4]))();
}

uint64_t sub_142460(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_142468(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x142470);
  return result;
}

uint64_t sub_14247C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x142484);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_142488(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_142490(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeedBasedRecommendationServiceResolver.Errors()
{
  return &type metadata for SeedBasedRecommendationServiceResolver.Errors;
}

Swift::Int sub_1424AC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(sub_5EDC(&qword_1F1218) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_D0A54(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1428F4(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_142530(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[8] = a1;
  v2[9] = v1;
  v3 = sub_5EDC(&qword_1F6C38);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_14258C, 0, 0);
}

uint64_t sub_14258C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(Swift::Int (*)(uint64_t), _QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v30;

  v1 = *(_QWORD **)(v0 + 72);
  v2 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  v3 = sub_DF89C(v2);
  swift_bridgeObjectRelease();
  v4 = v1 + 2;
  v5 = v1[5];
  v6 = v1[6];
  sub_49F4(v4, v5);
  v7 = *(uint64_t (**)(Swift::Int (*)(uint64_t), _QWORD, _QWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  v8 = sub_41278();
  v9 = v7(sub_1427DC, 0, v3, &type metadata for Book.MediaType, v8, v5, v6);
  v10 = swift_bridgeObjectRetain(v9);
  v11 = sub_37C94(v10);
  swift_bridgeObjectRelease();
  v30 = v11;
  sub_1424AC(&v30);
  swift_bridgeObjectRelease();
  v12 = v30;
  v13 = v30[2];
  v14 = *(_QWORD *)(v0 + 80);
  if (v13)
  {
    v15 = v13 - 1;
    v16 = sub_5EDC(&qword_1F1218);
    v17 = *(_QWORD *)(v16 - 8);
    sub_1428AC((uint64_t)v12+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v15, v14);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  else
  {
    v18 = sub_5EDC(&qword_1F1218);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v14, 1, 1, v18);
  }
  v19 = *(_QWORD *)(v0 + 80);
  swift_release(v12);
  v20 = sub_5EDC(&qword_1F1218);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20);
  v22 = *(char **)(v0 + 80);
  if (v21 == 1)
  {
    swift_bridgeObjectRelease();
    sub_417D8((uint64_t)v22, &qword_1F6C38);
    v23 = _swiftEmptyArrayStorage;
  }
  else
  {
    v24 = *v22;
    sub_CD454((uint64_t)&v22[*(int *)(v20 + 48)]);
    v25 = sub_5EDC(&qword_1F6C40);
    inited = swift_initStackObject(v25, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1875E0;
    *(_BYTE *)(inited + 32) = v24;
    v27 = sub_3D52C((uint64_t)v3);
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 40) = v27;
    v23 = (_QWORD *)inited;
  }
  v28 = sub_52E44((uint64_t)v23);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v28);
}

Swift::Int sub_1427DC(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t inited;
  Swift::Int v4;
  _BYTE v6[40];

  v1 = *(_BYTE *)(a1 + 8);
  v2 = sub_5EDC(&qword_1F02B8);
  inited = swift_initStackObject(v2, v6);
  *(_OWORD *)(inited + 16) = xmmword_1875E0;
  *(_BYTE *)(inited + 32) = v1;
  v4 = sub_89600(inited);
  swift_setDeallocating(inited);
  return v4;
}

uint64_t type metadata accessor for SingleJointMediaTypeRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization41SingleJointMediaTypeRecommendationService);
}

uint64_t sub_14285C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1F6C34);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_70AB4;
  return sub_142530(a1);
}

uint64_t sub_1428AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F1218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

Swift::Int sub_1428F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  Swift::Int v21;
  char *v22;
  unint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t *v26;
  uint64_t v27;
  Swift::Int v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  double v34;
  uint64_t v35;
  double *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  double *v45;
  double v46;
  uint64_t v47;
  double *v48;
  double v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  Swift::Int v53;
  Swift::Int v54;
  uint64_t v55;
  Swift::Int v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  double *v64;
  double v65;
  uint64_t v66;
  double *v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  Swift::Int v73;
  uint64_t v74;
  Swift::Int v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  char v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  Swift::Int v124;
  unint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  char *v140;
  _QWORD *v141;
  Swift::Int v142;
  Swift::Int v143;
  uint64_t v144;
  Swift::Int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  Swift::Int v150;
  Swift::Int v151;
  Swift::Int v152;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;

  v158 = sub_5EDC(&qword_1F1218);
  v147 = *(_QWORD *)(v158 - 8);
  v3 = __chkstk_darwin(v158);
  v144 = (uint64_t)&v140 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v159 = (uint64_t)&v140 - v6;
  v7 = __chkstk_darwin(v5);
  v156 = (char *)&v140 - v8;
  v9 = __chkstk_darwin(v7);
  v155 = (char *)&v140 - v10;
  v11 = __chkstk_darwin(v9);
  v154 = (char *)&v140 - v12;
  __chkstk_darwin(v11);
  v153 = (char *)&v140 - v13;
  v14 = a1[1];
  result = _minimumMergeRunLength(_:)(v14);
  if (result >= v14)
  {
    if (v14 < 0)
      goto LABEL_141;
    if (v14)
      return sub_1433F0(0, v14, 1, a1);
    return result;
  }
  if (v14 >= 0)
    v16 = v14;
  else
    v16 = v14 + 1;
  if (v14 < -1)
    goto LABEL_149;
  v157 = a1;
  v142 = result;
  v148 = v1;
  if (v14 < 2)
  {
    v20 = _swiftEmptyArrayStorage;
    v146 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80));
    if (v14 != 1)
    {
      v23 = _swiftEmptyArrayStorage[2];
      v22 = (char *)_swiftEmptyArrayStorage;
LABEL_106:
      v141 = v20;
      if (v23 >= 2)
      {
        v133 = *v157;
        do
        {
          v134 = v23 - 2;
          if (v23 < 2)
            goto LABEL_136;
          if (!v133)
            goto LABEL_148;
          v135 = *(_QWORD *)&v22[16 * v134 + 32];
          v136 = *(_QWORD *)&v22[16 * v23 + 24];
          v137 = v148;
          sub_1436A8(v133 + *(_QWORD *)(v147 + 72) * v135, v133 + *(_QWORD *)(v147 + 72) * *(_QWORD *)&v22[16 * v23 + 16], v133 + *(_QWORD *)(v147 + 72) * v136, v146);
          v148 = v137;
          if (v137)
            break;
          if (v136 < v135)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
            v22 = sub_4ECA8((uint64_t)v22);
          if (v134 >= *((_QWORD *)v22 + 2))
            goto LABEL_138;
          v138 = &v22[16 * v134 + 32];
          *(_QWORD *)v138 = v135;
          *((_QWORD *)v138 + 1) = v136;
          v139 = *((_QWORD *)v22 + 2);
          if (v23 > v139)
            goto LABEL_139;
          memmove(&v22[16 * v23 + 16], &v22[16 * v23 + 32], 16 * (v139 - v23));
          *((_QWORD *)v22 + 2) = v139 - 1;
          v23 = v139 - 1;
        }
        while (v139 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      v141[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v141 = _swiftEmptyArrayStorage;
  }
  else
  {
    v17 = v16 >> 1;
    v18 = static Array._allocateBufferUninitialized(minimumCapacity:)(v16 >> 1, v158);
    *(_QWORD *)(v18 + 16) = v17;
    v19 = *(unsigned __int8 *)(v147 + 80);
    v141 = (_QWORD *)v18;
    v146 = v18 + ((v19 + 32) & ~v19);
  }
  v21 = 0;
  v22 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v24 = v21;
    v25 = v21 + 1;
    if (v21 + 1 >= v14)
    {
      ++v21;
      v26 = v157;
      goto LABEL_25;
    }
    v26 = v157;
    v27 = *v157;
    v149 = v27;
    v28 = *(_QWORD *)(v147 + 72);
    v29 = v153;
    sub_1428AC(v27 + v28 * v25, (uint64_t)v153);
    v145 = v21;
    v30 = v154;
    sub_1428AC(v27 + v28 * v21, (uint64_t)v154);
    v31 = v158;
    v32 = *(int *)(v158 + 48);
    v33 = (double *)&v155[v32];
    *v155 = *v29;
    sub_412BC((uint64_t)&v29[v32], (uint64_t)v33);
    v34 = *v33;
    sub_CD454((uint64_t)v33);
    v35 = *(int *)(v31 + 48);
    v36 = (double *)&v156[v35];
    *v156 = *v30;
    sub_412BC((uint64_t)&v30[v35], (uint64_t)v36);
    v37 = *v36;
    sub_CD454((uint64_t)v36);
    v38 = (uint64_t)v30;
    v24 = v145;
    sub_417D8(v38, &qword_1F1218);
    sub_417D8((uint64_t)v29, &qword_1F1218);
    v21 = v24 + 2;
    v152 = v28;
    if (v24 + 2 >= v14)
    {
LABEL_22:
      if (v34 >= v37)
        goto LABEL_25;
LABEL_43:
      if (v21 < v24)
        goto LABEL_142;
      if (v24 < v21)
      {
        v151 = v14;
        v140 = v22;
        v72 = 0;
        v73 = v24;
        v74 = v28 * (v21 - 1);
        v75 = v21 * v28;
        v76 = v73;
        v77 = v73 * v28;
        do
        {
          if (v76 != v21 + v72 - 1)
          {
            v78 = v149;
            if (!v149)
              goto LABEL_147;
            v79 = v149 + v77;
            v80 = v149 + v74;
            sub_143C0C(v149 + v77, v144);
            if (v77 < v74 || v79 >= v78 + v75)
            {
              swift_arrayInitWithTakeFrontToBack(v78 + v77, v78 + v74, 1, v158);
              v28 = v152;
            }
            else
            {
              v28 = v152;
              if (v77 != v74)
                swift_arrayInitWithTakeBackToFront(v79);
            }
            sub_143C0C(v144, v80);
            v26 = v157;
          }
          ++v76;
          --v72;
          v74 -= v28;
          v75 -= v28;
          v77 += v28;
        }
        while (v76 < v21 + v72);
        v22 = v140;
        v14 = v151;
        v24 = v145;
      }
      goto LABEL_25;
    }
    v39 = v149;
    v150 = v28 * v21;
    v151 = v28 * v25;
    while (1)
    {
      v40 = v14;
      v41 = v153;
      sub_1428AC(v39 + v150, (uint64_t)v153);
      v42 = v154;
      sub_1428AC(v39 + v151, (uint64_t)v154);
      v43 = v158;
      v44 = *(int *)(v158 + 48);
      v45 = (double *)&v155[v44];
      *v155 = *v41;
      sub_412BC((uint64_t)&v41[v44], (uint64_t)v45);
      v46 = *v45;
      sub_CD454((uint64_t)v45);
      v47 = *(int *)(v43 + 48);
      v48 = (double *)&v156[v47];
      *v156 = *v42;
      sub_412BC((uint64_t)&v42[v47], (uint64_t)v48);
      v49 = *v48;
      sub_CD454((uint64_t)v48);
      sub_417D8((uint64_t)v42, &qword_1F1218);
      sub_417D8((uint64_t)v41, &qword_1F1218);
      if (v34 < v37 == v46 >= v49)
        break;
      ++v21;
      v28 = v152;
      v39 += v152;
      v14 = v40;
      if (v40 == v21)
      {
        v21 = v40;
        v26 = v157;
        v24 = v145;
        goto LABEL_22;
      }
    }
    v26 = v157;
    v14 = v40;
    v24 = v145;
    v28 = v152;
    if (v34 < v37)
      goto LABEL_43;
LABEL_25:
    if (v21 < v14)
    {
      if (__OFSUB__(v21, v24))
        goto LABEL_140;
      if (v21 - v24 < v142)
        break;
    }
LABEL_57:
    if (v21 < v24)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
      v22 = sub_4E4E4(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
    v82 = *((_QWORD *)v22 + 2);
    v81 = *((_QWORD *)v22 + 3);
    v23 = v82 + 1;
    if (v82 >= v81 >> 1)
      v22 = sub_4E4E4((char *)(v81 > 1), v82 + 1, 1, v22);
    *((_QWORD *)v22 + 2) = v23;
    v83 = v22 + 32;
    v84 = &v22[16 * v82 + 32];
    *(_QWORD *)v84 = v24;
    *((_QWORD *)v84 + 1) = v21;
    if (v82)
    {
      while (1)
      {
        v85 = v23 - 1;
        if (v23 >= 4)
        {
          v90 = &v83[16 * v23];
          v91 = *((_QWORD *)v90 - 8);
          v92 = *((_QWORD *)v90 - 7);
          v96 = __OFSUB__(v92, v91);
          v93 = v92 - v91;
          if (v96)
            goto LABEL_124;
          v95 = *((_QWORD *)v90 - 6);
          v94 = *((_QWORD *)v90 - 5);
          v96 = __OFSUB__(v94, v95);
          v88 = v94 - v95;
          v89 = v96;
          if (v96)
            goto LABEL_125;
          v97 = v23 - 2;
          v98 = &v83[16 * v23 - 32];
          v100 = *(_QWORD *)v98;
          v99 = *((_QWORD *)v98 + 1);
          v96 = __OFSUB__(v99, v100);
          v101 = v99 - v100;
          if (v96)
            goto LABEL_127;
          v96 = __OFADD__(v88, v101);
          v102 = v88 + v101;
          if (v96)
            goto LABEL_130;
          if (v102 >= v93)
          {
            v120 = &v83[16 * v85];
            v122 = *(_QWORD *)v120;
            v121 = *((_QWORD *)v120 + 1);
            v96 = __OFSUB__(v121, v122);
            v123 = v121 - v122;
            if (v96)
              goto LABEL_134;
            v113 = v88 < v123;
            goto LABEL_94;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v114 = *((_QWORD *)v22 + 4);
            v115 = *((_QWORD *)v22 + 5);
            v96 = __OFSUB__(v115, v114);
            v107 = v115 - v114;
            v108 = v96;
            goto LABEL_88;
          }
          v87 = *((_QWORD *)v22 + 4);
          v86 = *((_QWORD *)v22 + 5);
          v96 = __OFSUB__(v86, v87);
          v88 = v86 - v87;
          v89 = v96;
        }
        if ((v89 & 1) != 0)
          goto LABEL_126;
        v97 = v23 - 2;
        v103 = &v83[16 * v23 - 32];
        v105 = *(_QWORD *)v103;
        v104 = *((_QWORD *)v103 + 1);
        v106 = __OFSUB__(v104, v105);
        v107 = v104 - v105;
        v108 = v106;
        if (v106)
          goto LABEL_129;
        v109 = &v83[16 * v85];
        v111 = *(_QWORD *)v109;
        v110 = *((_QWORD *)v109 + 1);
        v96 = __OFSUB__(v110, v111);
        v112 = v110 - v111;
        if (v96)
          goto LABEL_132;
        if (__OFADD__(v107, v112))
          goto LABEL_133;
        if (v107 + v112 >= v88)
        {
          v113 = v88 < v112;
LABEL_94:
          if (v113)
            v85 = v97;
          goto LABEL_96;
        }
LABEL_88:
        if ((v108 & 1) != 0)
          goto LABEL_128;
        v116 = &v83[16 * v85];
        v118 = *(_QWORD *)v116;
        v117 = *((_QWORD *)v116 + 1);
        v96 = __OFSUB__(v117, v118);
        v119 = v117 - v118;
        if (v96)
          goto LABEL_131;
        if (v119 < v107)
          goto LABEL_15;
LABEL_96:
        v124 = v21;
        v125 = v85 - 1;
        if (v85 - 1 >= v23)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v157)
          goto LABEL_146;
        v126 = v22;
        v127 = &v83[16 * v125];
        v128 = *(_QWORD *)v127;
        v129 = &v83[16 * v85];
        v130 = *((_QWORD *)v129 + 1);
        v131 = v148;
        sub_1436A8(*v157 + *(_QWORD *)(v147 + 72) * *(_QWORD *)v127, *v157 + *(_QWORD *)(v147 + 72) * *(_QWORD *)v129, *v157 + *(_QWORD *)(v147 + 72) * v130, v146);
        v148 = v131;
        if (v131)
          goto LABEL_117;
        if (v130 < v128)
          goto LABEL_121;
        if (v85 > *((_QWORD *)v126 + 2))
          goto LABEL_122;
        *(_QWORD *)v127 = v128;
        *(_QWORD *)&v83[16 * v125 + 8] = v130;
        v132 = *((_QWORD *)v126 + 2);
        if (v85 >= v132)
          goto LABEL_123;
        v22 = v126;
        v23 = v132 - 1;
        memmove(&v83[16 * v85], v129 + 16, 16 * (v132 - 1 - v85));
        *((_QWORD *)v126 + 2) = v132 - 1;
        v113 = v132 > 2;
        v21 = v124;
        if (!v113)
          goto LABEL_15;
      }
    }
    v23 = 1;
LABEL_15:
    v14 = v157[1];
    if (v21 >= v14)
    {
      v20 = v141;
      goto LABEL_106;
    }
  }
  if (__OFADD__(v24, v142))
    goto LABEL_143;
  if (v24 + v142 >= v14)
    v50 = v14;
  else
    v50 = v24 + v142;
  if (v50 >= v24)
  {
    if (v21 != v50)
    {
      v140 = v22;
      v51 = *(_QWORD *)(v147 + 72);
      v52 = v51 * (v21 - 1);
      v149 = v51;
      v53 = v21 * v51;
      v145 = v24;
      v143 = v50;
      do
      {
        v55 = 0;
        v56 = v24;
        v151 = v52;
        v152 = v21;
        v150 = v53;
        while (1)
        {
          v57 = *v26;
          v58 = v53 + v55 + *v26;
          v59 = v153;
          sub_1428AC(v58, (uint64_t)v153);
          v60 = v52 + v55 + v57;
          v61 = v154;
          sub_1428AC(v60, (uint64_t)v154);
          v62 = v158;
          v63 = *(int *)(v158 + 48);
          v64 = (double *)&v155[v63];
          *v155 = *v59;
          sub_412BC((uint64_t)&v59[v63], (uint64_t)v64);
          v65 = *v64;
          sub_CD454((uint64_t)v64);
          v66 = *(int *)(v62 + 48);
          v67 = (double *)&v156[v66];
          *v156 = *v61;
          sub_412BC((uint64_t)&v61[v66], (uint64_t)v67);
          v68 = *v67;
          sub_CD454((uint64_t)v67);
          sub_417D8((uint64_t)v61, &qword_1F1218);
          sub_417D8((uint64_t)v59, &qword_1F1218);
          if (v65 >= v68)
            break;
          v69 = *v26;
          if (!*v26)
            goto LABEL_145;
          v53 = v150;
          v52 = v151;
          v70 = v69 + v150 + v55;
          v71 = v69 + v151 + v55;
          sub_143C0C(v70, v159);
          swift_arrayInitWithTakeFrontToBack(v70, v71, 1, v158);
          sub_143C0C(v159, v71);
          v55 -= v149;
          ++v56;
          v54 = v152;
          v26 = v157;
          if (v152 == v56)
            goto LABEL_36;
        }
        v52 = v151;
        v54 = v152;
        v53 = v150;
LABEL_36:
        v21 = v54 + 1;
        v52 += v149;
        v53 += v149;
        v24 = v145;
      }
      while (v21 != v143);
      v21 = v143;
      v22 = v140;
    }
    goto LABEL_57;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1433F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  uint64_t v28;
  double *v29;
  double v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v37 = a1;
  v42 = sub_5EDC(&qword_1F1218);
  v7 = __chkstk_darwin(v42);
  v43 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v39 = (char *)&v35 - v10;
  v11 = __chkstk_darwin(v9);
  v38 = (char *)&v35 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v35 - v14;
  result = __chkstk_darwin(v13);
  v19 = (char *)&v35 - v18;
  v41 = a3;
  v36 = a2;
  if (a3 != a2)
  {
    v20 = *(_QWORD *)(v17 + 72);
    v45 = v20 * (v41 - 1);
    v40 = v20;
    v44 = v20 * v41;
LABEL_5:
    v21 = 0;
    v22 = v37;
    while (1)
    {
      v23 = *a4;
      sub_1428AC(v44 + v21 + *a4, (uint64_t)v19);
      sub_1428AC(v45 + v21 + v23, (uint64_t)v15);
      v24 = v42;
      v25 = *(int *)(v42 + 48);
      v26 = (double *)&v38[v25];
      *v38 = *v19;
      sub_412BC((uint64_t)&v19[v25], (uint64_t)v26);
      v27 = *v26;
      sub_CD454((uint64_t)v26);
      v28 = *(int *)(v24 + 48);
      v29 = (double *)&v39[v28];
      *v39 = *v15;
      sub_412BC((uint64_t)&v15[v28], (uint64_t)v29);
      v30 = *v29;
      sub_CD454((uint64_t)v29);
      sub_417D8((uint64_t)v15, &qword_1F1218);
      result = sub_417D8((uint64_t)v19, &qword_1F1218);
      if (v27 >= v30)
      {
LABEL_4:
        v45 += v40;
        v44 += v40;
        if (++v41 == v36)
          return result;
        goto LABEL_5;
      }
      v31 = *a4;
      if (!*a4)
        break;
      v32 = a4;
      v33 = v31 + v44 + v21;
      v34 = v31 + v45 + v21;
      sub_143C0C(v33, v43);
      swift_arrayInitWithTakeFrontToBack(v33, v34, 1, v42);
      result = sub_143C0C(v43, v34);
      v21 -= v40;
      ++v22;
      a4 = v32;
      if (v41 == v22)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1436A8(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  uint64_t v33;
  double *v34;
  double v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  double *v48;
  double v49;
  uint64_t v50;
  double *v51;
  double v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t result;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;

  v61 = sub_5EDC(&qword_1F1218);
  v8 = __chkstk_darwin(v61);
  v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v60 = (char *)&v56 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v56 - v16;
  v19 = *(_QWORD *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v20 = a1;
  if (a2 - a1 == 0x8000000000000000 && v19 == -1)
    goto LABEL_61;
  v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1)
    goto LABEL_62;
  v22 = (uint64_t)(a2 - a1) / v19;
  v64 = a1;
  v63 = a4;
  v23 = v21 / v19;
  if (v22 >= v21 / v19)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      v58 = a1;
      v25 = v23 * v19;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v23, v61);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }
      v57 = a4;
      v39 = a4 + v25;
      v62 = a4 + v25;
      v64 = a2;
      if (v25 >= 1 && v58 < a2)
      {
        v41 = -v19;
        do
        {
          v59 = a3 + v41;
          sub_1428AC(v39 + v41, (uint64_t)v17);
          v42 = a2 + v41;
          sub_1428AC(a2 + v41, (uint64_t)v15);
          v43 = a3;
          v44 = v15;
          v45 = v10;
          v46 = v61;
          v47 = *(int *)(v61 + 48);
          v48 = (double *)&v60[v47];
          *v60 = *v17;
          sub_412BC((uint64_t)&v17[v47], (uint64_t)v48);
          v49 = *v48;
          sub_CD454((uint64_t)v48);
          v50 = *(int *)(v46 + 48);
          v10 = v45;
          v15 = v44;
          v51 = (double *)&v10[v50];
          *v10 = *v44;
          sub_412BC((uint64_t)&v44[v50], (uint64_t)&v10[v50]);
          v52 = *v51;
          sub_CD454((uint64_t)v51);
          sub_417D8((uint64_t)v44, &qword_1F1218);
          sub_417D8((uint64_t)v17, &qword_1F1218);
          if (v49 >= v52)
          {
            v53 = v62;
            v54 = v62 + v41;
            v62 += v41;
            a3 = v59;
            if (v43 < v53 || v59 >= v53)
            {
              swift_arrayInitWithTakeFrontToBack(v59, v54, 1, v61);
            }
            else if (v43 != v53)
            {
              swift_arrayInitWithTakeBackToFront(v59);
            }
            v42 = a2;
          }
          else
          {
            a3 = v59;
            if (v43 < a2 || v59 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v59, a2 + v41, 1, v61);
            }
            else if (v43 != a2)
            {
              swift_arrayInitWithTakeBackToFront(v59);
            }
            v64 += v41;
          }
          v39 = v62;
          if (v62 <= v57)
            break;
          a2 = v42;
        }
        while (v42 > v58);
      }
      goto LABEL_59;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    v24 = v22 * v19;
    if (a4 < v20 || v20 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, v20, v22, v61);
    }
    else if (a4 != v20)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }
    v26 = a4;
    v27 = a4 + v24;
    v62 = v27;
    if (v24 >= 1 && a2 < a3)
    {
      do
      {
        sub_1428AC(a2, (uint64_t)v17);
        sub_1428AC(v26, (uint64_t)v15);
        v29 = v61;
        v30 = *(int *)(v61 + 48);
        v31 = (double *)&v60[v30];
        *v60 = *v17;
        sub_412BC((uint64_t)&v17[v30], (uint64_t)v31);
        v32 = *v31;
        sub_CD454((uint64_t)v31);
        v33 = *(int *)(v29 + 48);
        v34 = (double *)&v10[v33];
        *v10 = *v15;
        sub_412BC((uint64_t)&v15[v33], (uint64_t)&v10[v33]);
        v35 = *v34;
        sub_CD454((uint64_t)v34);
        sub_417D8((uint64_t)v15, &qword_1F1218);
        sub_417D8((uint64_t)v17, &qword_1F1218);
        v36 = v64;
        if (v32 >= v35)
        {
          v38 = v63 + v19;
          if (v64 < v63 || v64 >= v38)
          {
            swift_arrayInitWithTakeFrontToBack(v64, v63, 1, v61);
          }
          else if (v64 != v63)
          {
            swift_arrayInitWithTakeBackToFront(v64);
          }
          v63 = v38;
          v37 = a2;
        }
        else
        {
          v37 = a2 + v19;
          if (v64 < a2 || v64 >= v37)
          {
            swift_arrayInitWithTakeFrontToBack(v64, a2, 1, v61);
          }
          else if (v64 == a2)
          {
            v36 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v64);
          }
        }
        v64 = v36 + v19;
        if (v63 >= v27)
          break;
        v26 = v63;
        a2 = v37;
      }
      while (v37 < a3);
    }
LABEL_59:
    sub_4E688(&v64, &v63, (uint64_t *)&v62);
    return 1;
  }
LABEL_63:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_143C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F1218);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for BooksBySuggestedAuthorsOptions()
{
  return &type metadata for BooksBySuggestedAuthorsOptions;
}

uint64_t StoreBookRating.timestamp.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for StoreBookRating(0) + 24);
  return sub_143CD0(v3, a1);
}

uint64_t type metadata accessor for StoreBookRating(uint64_t a1)
{
  uint64_t result;

  result = qword_1F6CB0;
  if (!qword_1F6CB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StoreBookRating);
  return result;
}

uint64_t sub_143CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F1310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t StoreBookRating.init(storeID:rating:timestamp:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;

  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_BYTE *)(a5 + 16) = a3 & 1;
  v6 = a5 + *(int *)(type metadata accessor for StoreBookRating(0) + 24);
  return sub_10AA28(a4, v6);
}

void StoreBookRating.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*(_QWORD *)v2);
  if (*(_BYTE *)(v2 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *(_QWORD *)(v2 + 8);
    Hasher._combine(_:)(1u);
    if ((v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v12 = v11;
    else
      v12 = 0;
    Hasher._combine(_:)(v12);
  }
  v13 = type metadata accessor for StoreBookRating(0);
  sub_143CD0(v2 + *(int *)(v13 + 24), (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v14 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

Swift::Int StoreBookRating.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[9];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v14[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v5);
  v7 = (char *)&v14[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v14, 0);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if (*(_BYTE *)(v0 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v8 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v9 = v8;
    else
      v9 = 0;
    Hasher._combine(_:)(v9);
  }
  v10 = type metadata accessor for StoreBookRating(0);
  sub_143CD0(v0 + *(int *)(v10 + 24), (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
    Hasher._combine(_:)(1u);
    v11 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v14, v1, v11);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return Hasher._finalize()();
}

void sub_144078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*(_QWORD *)v4);
  if (*(_BYTE *)(v4 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v13 = *(_QWORD *)(v4 + 8);
    Hasher._combine(_:)(1u);
    if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v14 = v13;
    else
      v14 = 0;
    Hasher._combine(_:)(v14);
  }
  sub_143CD0(v4 + *(int *)(a2 + 24), (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    Hasher._combine(_:)(1u);
    v15 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v6, v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

Swift::Int sub_1441F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  uint64_t v15;
  _QWORD v18[9];

  v4 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v10);
  v12 = (char *)&v18[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v18, a1);
  Hasher._combine(_:)(*(_QWORD *)v4);
  if (*(_BYTE *)(v4 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v13 = *(_QWORD *)(v4 + 8);
    Hasher._combine(_:)(1u);
    if ((v13 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v14 = v13;
    else
      v14 = 0;
    Hasher._combine(_:)(v14);
  }
  sub_143CD0(v4 + *(int *)(a2 + 24), (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    Hasher._combine(_:)(1u);
    v15 = sub_41754(&qword_1F10D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v18, v6, v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return Hasher._finalize()();
}

BOOL _s20BooksPersonalization15StoreBookRatingV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  char *v24;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  char *v30;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F59A0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F1310);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v29 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v29 - v18;
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v20 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v20 = 1;
    if ((v20 & 1) != 0)
      return 0;
  }
  v30 = v7;
  v21 = type metadata accessor for StoreBookRating(0);
  sub_143CD0(a1 + *(int *)(v21 + 24), (uint64_t)v19);
  sub_143CD0(a2 + *(int *)(v21 + 24), (uint64_t)v17);
  v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_143CD0((uint64_t)v19, (uint64_t)v10);
  sub_143CD0((uint64_t)v17, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v10, 1, v4) == 1)
  {
    sub_417D8((uint64_t)v17, &qword_1F1310);
    sub_417D8((uint64_t)v19, &qword_1F1310);
    if (v23(v22, 1, v4) == 1)
    {
      sub_417D8((uint64_t)v10, &qword_1F1310);
      return 1;
    }
    goto LABEL_13;
  }
  sub_143CD0((uint64_t)v10, (uint64_t)v14);
  if (v23(v22, 1, v4) == 1)
  {
    sub_417D8((uint64_t)v17, &qword_1F1310);
    sub_417D8((uint64_t)v19, &qword_1F1310);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_13:
    sub_417D8((uint64_t)v10, &qword_1F59A0);
    return 0;
  }
  v24 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v30, v22, v4);
  v25 = sub_41754(&qword_1F10E0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v24, v4, v25);
  v27 = *(void (**)(char *, uint64_t))(v5 + 8);
  v27(v24, v4);
  sub_417D8((uint64_t)v17, &qword_1F1310);
  sub_417D8((uint64_t)v19, &qword_1F1310);
  v27(v14, v4);
  sub_417D8((uint64_t)v10, &qword_1F1310);
  return (v26 & 1) != 0;
}

uint64_t sub_1446B4()
{
  return sub_41754(&qword_1F6C50, type metadata accessor for StoreBookRating, (uint64_t)&protocol conformance descriptor for StoreBookRating);
}

_QWORD *initializeBufferWithCopyOfBuffer for StoreBookRating(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = *(int *)(a3 + 24);
    v7 = (void *)(a1 + v6);
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    {
      v11 = sub_5EDC(&qword_1F1310);
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v3;
}

uint64_t destroy for StoreBookRating(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  return result;
}

uint64_t initializeWithCopy for StoreBookRating(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_5EDC(&qword_1F1310);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithCopy for StoreBookRating(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (void *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v6, v7, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = sub_5EDC(&qword_1F1310);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v6, v7, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  return a1;
}

uint64_t initializeWithTake for StoreBookRating(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (const void *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_5EDC(&qword_1F1310);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for StoreBookRating(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(int *)(a3 + 24);
  v6 = (void *)(a1 + v5);
  v7 = (void *)(a2 + v5);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(v6, 1, v8);
  v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = sub_5EDC(&qword_1F1310);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for StoreBookRating(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_144BF8);
}

uint64_t sub_144BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_5EDC(&qword_1F1310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for StoreBookRating(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_144C48);
}

uint64_t sub_144C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_5EDC(&qword_1F1310);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void sub_144C90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[1] = "\t";
  sub_144D10(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_144D10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1F5920)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1F5920);
  }
}

_QWORD *sub_144D64(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v23 = *(_QWORD *)(a1 + 16);
  sub_340AC(0, v1, 0);
  result = (_QWORD *)sub_DF720(a1);
  v5 = (uint64_t)result;
  v6 = v23;
  v7 = 0;
  v8 = a1 + 64;
  v9 = a1 + 88;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    v11 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v4)
      goto LABEL_26;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 384 * v5);
    v14 = _swiftEmptyArrayStorage[2];
    v13 = _swiftEmptyArrayStorage[3];
    if (v14 >= v13 >> 1)
    {
      v21 = v8;
      v22 = v4;
      v20 = v9;
      result = (_QWORD *)sub_340AC(v13 > 1, v14 + 1, 1);
      v9 = v20;
      v8 = v21;
      v4 = v22;
      v6 = v23;
    }
    _swiftEmptyArrayStorage[2] = v14 + 1;
    _swiftEmptyArrayStorage[v14 + 4] = v12;
    v10 = 1 << *(_BYTE *)(a1 + 32);
    if (v5 >= v10)
      goto LABEL_27;
    v15 = *(_QWORD *)(v8 + 8 * v11);
    if ((v15 & (1 << v5)) == 0)
      goto LABEL_28;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v4)
      goto LABEL_29;
    v16 = v15 & (-2 << (v5 & 0x3F));
    if (v16)
    {
      v10 = __clz(__rbit64(v16)) | v5 & 0xFFFFFFFFFFFFFFC0;
    }
    else
    {
      v17 = v11 + 1;
      v18 = (unint64_t)(v10 + 63) >> 6;
      if (v11 + 1 < v18)
      {
        v19 = *(_QWORD *)(v8 + 8 * v17);
        if (!v19)
        {
          v17 = v11 + 2;
          if (v11 + 2 >= v18)
            goto LABEL_4;
          v19 = *(_QWORD *)(v8 + 8 * v17);
          if (!v19)
          {
            while (v18 - 3 != v11)
            {
              v19 = *(_QWORD *)(v9 + 8 * v11++);
              if (v19)
              {
                v17 = v11 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        v10 = __clz(__rbit64(v19)) + (v17 << 6);
      }
    }
LABEL_4:
    ++v7;
    v5 = v10;
    if (v7 == v6)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_144F7C(void *__src, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[323] = v2;
  v3[322] = a2;
  v3[321] = __src;
  memcpy(v3 + 2, __src, 0x440uLL);
  return swift_task_switch(sub_144FD0, 0, 0);
}

uint64_t sub_144FD0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  int *v8;

  v1 = *(_QWORD **)(v0 + 2584);
  memcpy((void *)(v0 + 2192), (const void *)(v0 + 104), 0x16BuLL);
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  if (qword_1F0188 != -1)
    swift_once(&qword_1F0188, sub_172424);
  v4 = qword_1F77F8;
  memcpy((void *)(v0 + 1104), *(const void **)(v0 + 2568), 0x440uLL);
  v5 = *(int **)(v3 + 8);
  v8 = (int *)((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v0 + 2592) = v6;
  *v6 = v0;
  v6[1] = sub_1450B4;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))v8)(v4, *(_QWORD *)(v0 + 2576), v0 + 1104, v2, v3);
}

uint64_t sub_1450B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 2592);
  *(_QWORD *)(v3 + 2600) = a1;
  *(_QWORD *)(v3 + 2608) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_145314;
  else
    v5 = sub_145124;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_145124()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int *v7;
  _QWORD *v8;
  int *v10;

  v1 = v0[325];
  v2 = (_QWORD *)v0[323];
  v3 = v2[10];
  v4 = v2[11];
  sub_49F4(v2 + 7, v3);
  v5 = swift_bridgeObjectRetain(v1);
  v6 = sub_144D64(v5);
  v0[327] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int **)(v4 + 16);
  v10 = (int *)((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[328] = v8;
  *v8 = v0;
  v8[1] = sub_1451E4;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v10)(v6, v3, v4);
}

uint64_t sub_1451E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 2624);
  v5 = *v2;
  *(_QWORD *)(v5 + 2632) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
  else
  {
    *(_QWORD *)(v5 + 2640) = a1;
    return swift_task_switch(sub_145280, 0, 0);
  }
}

uint64_t sub_145280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 2640);
  v2 = *(_QWORD *)(v0 + 2600);
  swift_bridgeObjectRetain(v1);
  sub_605D0(v0 + 104);
  v3 = sub_1457CC(v2, v1, (const void *)(v0 + 2192));
  sub_60AF8(v0 + 104);
  swift_bridgeObjectRelease_n(v1, 2);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v3);
}

uint64_t sub_145314()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BookHistory.seedBook(using:metadata:configuration:)@<X0>(void *__src@<X2>, uint64_t a2@<X0>, unsigned __int8 *a3@<X1>, uint64_t a4@<X8>)
{
  const void *v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  _QWORD v32[4];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  const void *v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[545];
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  _BYTE v65[384];
  _QWORD v66[6];
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[552];
  _QWORD v71[48];
  _BYTE v72[368];
  _BYTE v73[384];
  _BYTE v74[392];

  v51 = *a3;
  v7 = *((_QWORD *)a3 + 1);
  v52 = *((_QWORD *)a3 + 2);
  v53 = v7;
  v50 = *((_QWORD *)a3 + 3);
  v8 = a3[32];
  v9 = *((_QWORD *)a3 + 5);
  v10 = a3[48];
  v11 = *((_QWORD *)a3 + 7);
  v12 = a3[64];
  memcpy(v72, __src, 0x16BuLL);
  memcpy(v71, v4, 0x179uLL);
  memcpy(v70, v4, 0x179uLL);
  BookHistory.pruned(to:)(a2, (uint64_t)v54);
  sub_41300((uint64_t)v54, (uint64_t)v73, &qword_1F2D68);
  sub_41300((uint64_t)v73, (uint64_t)v74, &qword_1F2D68);
  if (sub_8E6A0((uint64_t)v74) == 1)
    goto LABEL_3;
  v42 = v4;
  v43 = v12;
  v44 = v11;
  v45 = v10;
  v46 = v9;
  v47 = v8;
  memcpy(v70, v74, 0x179uLL);
  memcpy(v54, v72, 0x16BuLL);
  BookHistory.internalAffinitySource(with:)((__int128 *)v54, (uint64_t)v66);
  v14 = v67;
  if (v67 >> 1 == 0xFFFFFFFF)
  {
LABEL_3:
    sub_117FCC(v70);
    v15 = a4;
  }
  else
  {
    v37 = a4;
    v41 = &v33;
    v16 = v66[0];
    v17 = v66[1];
    v18 = (const void *)v66[2];
    v19 = v66[3];
    v20 = v66[4];
    v21 = v66[5];
    v48 = v69;
    v49 = v68;
    __chkstk_darwin(v13);
    v32[2] = v71;
    v32[3] = v72;
    v22 = sub_5EDC(&qword_1F4F98);
    v23 = sub_FF7AC();
    v24 = Array.mapToDictionary<A>(_:)(sub_145798, v32, &off_1D6208, &type metadata for ImplicitFeature, v22, v23);
    v34 = 0;
    v35 = v71[0];
    v36 = v24;
    memcpy(v65, v42, 0x179uLL);
    AuthorRecommendationSource.id.getter(v65);
    v55 = v16;
    v56 = v17;
    v57 = v18;
    v58 = v19;
    v59 = v20;
    v60 = v21;
    v61 = v14;
    v62 = v49;
    v63 = v48;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v52);
    v40 = v16;
    v41 = (uint64_t *)v17;
    v25 = v16;
    v26 = v14;
    v42 = v18;
    v38 = v21;
    v39 = v19;
    sub_61A8(v25, v17, (uint64_t)v18, v19, v20, v21, v14);
    v27 = v34;
    sub_F93F4();
    if (v27)
    {
      swift_errorRelease(v27);
      v29 = v38;
      v28 = v39;
      sub_62CC(v40, (uint64_t)v41, (uint64_t)v42, v39, v20, v38, v26);
      v30 = 12;
    }
    else
    {
      v29 = v38;
      v28 = v39;
      sub_62CC(v40, (uint64_t)v41, (uint64_t)v42, v39, v20, v38, v26);
      v30 = v64;
    }
    *(_QWORD *)v54 = v35;
    v54[8] = v51;
    *(_QWORD *)&v54[16] = v53;
    *(_QWORD *)&v54[24] = v52;
    *(_QWORD *)&v54[32] = v50;
    v54[40] = v47;
    *(_QWORD *)&v54[48] = v46;
    v54[56] = v45;
    *(_QWORD *)&v54[64] = v44;
    v54[72] = v43;
    *(_QWORD *)&v54[80] = v40;
    *(_QWORD *)&v54[88] = v41;
    *(_QWORD *)&v54[96] = v42;
    *(_QWORD *)&v54[104] = v28;
    *(_QWORD *)&v54[112] = v20;
    *(_QWORD *)&v54[120] = v29;
    *(_QWORD *)&v54[128] = v26;
    *(_QWORD *)&v54[136] = v49;
    *(_QWORD *)&v54[144] = v48;
    sub_41300((uint64_t)v65, (uint64_t)&v54[152], &qword_1F2D68);
    *(_QWORD *)&v54[536] = v36;
    v54[544] = v30;
    memcpy(v70, v54, 0x221uLL);
    AuthorRecommendationSource.id.getter(v70);
    v15 = v37;
  }
  return sub_41300((uint64_t)v70, v15, &qword_1F5C28);
}

uint64_t sub_145714(const void *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1F6DB4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_70AB4;
  v7[323] = v6;
  v7[322] = a2;
  v7[321] = a1;
  memcpy(v7 + 2, a1, 0x440uLL);
  return swift_task_switch(sub_144FD0, 0, 0);
}

_QWORD *sub_145798@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1460C4(a1, a2);
}

uint64_t type metadata accessor for BookHistorySeedBookService()
{
  return objc_opt_self(_TtC20BooksPersonalization26BookHistorySeedBookService);
}

_QWORD *sub_1457CC(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD v56[4];
  uint64_t v57;
  _QWORD *v58;
  __int128 v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[68];
  char v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 v102;
  _QWORD v103[6];
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107[24];
  _BYTE v108[384];
  _BYTE v109[384];
  _BYTE v110[377];
  uint64_t v111[51];

  v3 = a2;
  v4 = a1;
  v58 = _swiftEmptyDictionarySingleton;
  v111[50] = (uint64_t)_swiftEmptyDictionarySingleton;
  v5 = a1 + 64;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v57 = -1 << *(_BYTE *)(a1 + 32);
  v9 = (unint64_t)(63 - v6) >> 6;
  v61 = &v91[19];
  v10 = 0;
  v59 = xmmword_1875E0;
  v60 = a1 + 64;
  v67 = a3;
  v76 = a2;
  v77 = swift_bridgeObjectRetain(a1);
  v75 = v9;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v10 << 6);
LABEL_21:
    v16 = *(_QWORD *)(v4 + 56);
    v89 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12);
    v17 = (const void *)(v16 + 384 * v12);
    memcpy(v111, v17, 0x179uLL);
    memcpy(v110, v17, sizeof(v110));
    if (*(_QWORD *)(v3 + 16))
    {
      v90 = v10;
      v18 = v111[0];
      v19 = sub_39228(v111[0]);
      if ((v20 & 1) != 0)
      {
        v21 = (unsigned __int8 *)(*(_QWORD *)(v3 + 56) + 72 * v19);
        v22 = *v21;
        v23 = *((_QWORD *)v21 + 1);
        v24 = *((_QWORD *)v21 + 2);
        v87 = *((_QWORD *)v21 + 3);
        v86 = v21[32];
        v85 = *((_QWORD *)v21 + 5);
        v84 = v21[48];
        v83 = *((_QWORD *)v21 + 7);
        v82 = v21[64];
        v25 = qword_1F0188;
        swift_bridgeObjectRetain(v23);
        swift_bridgeObjectRetain(v24);
        if (v25 != -1)
          swift_once(&qword_1F0188, sub_172424);
        memcpy(v107, v111, 0x179uLL);
        BookHistory.pruned(to:)(qword_1F77F8, (uint64_t)v91);
        sub_41300((uint64_t)v91, (uint64_t)v108, &qword_1F2D68);
        sub_41300((uint64_t)v108, (uint64_t)v109, &qword_1F2D68);
        if (sub_8E6A0((uint64_t)v109) != 1)
        {
          v72 = v22;
          memcpy(v91, v109, 0x179uLL);
          v26 = v67;
          memcpy(v107, v67, 0x16BuLL);
          BookHistory.internalAffinitySource(with:)(v107, (uint64_t)v103);
          if (v104 >> 1 != 0xFFFFFFFF)
          {
            v63 = v18;
            v70 = v23;
            v71 = &v57;
            v69 = v24;
            v28 = v103[0];
            v29 = v103[1];
            v30 = (_QWORD *)v103[2];
            v88 = v103[3];
            v78 = v103[4];
            v79 = v104;
            v73 = v103[5];
            v81 = v105;
            v31 = v106;
            __chkstk_darwin(v27);
            v56[2] = v111;
            v56[3] = v26;
            v32 = sub_5EDC(&qword_1F4F98);
            v33 = sub_FF7AC();
            v34 = v68;
            v66 = Array.mapToDictionary<A>(_:)(sub_145798, v56, &off_1D6208, &type metadata for ImplicitFeature, v32, v33);
            v68 = v34;
            memcpy(v107, v110, 0x179uLL);
            AuthorRecommendationSource.id.getter(v107);
            v93 = v28;
            v94 = v29;
            v95 = v30;
            v35 = v88;
            v96 = v88;
            v36 = v78;
            v97 = v78;
            v37 = v73;
            v98 = v73;
            v99 = v79;
            v100 = v81;
            v101 = v31;
            swift_bridgeObjectRetain(v70);
            swift_bridgeObjectRetain(v69);
            v80 = v31;
            v74 = v28;
            v64 = v29;
            v38 = v30;
            v39 = v79;
            v71 = v38;
            sub_61A8(v28, v29, (uint64_t)v38, v35, v36, v37, v79);
            v40 = v68;
            sub_F93F4();
            if (v40)
            {
              swift_errorRelease(v40);
              v41 = v74;
              v42 = v64;
              sub_62CC(v74, v64, (uint64_t)v71, v88, v78, v73, v39);
              v43 = v69;
              swift_bridgeObjectRelease();
              v44 = v70;
              swift_bridgeObjectRelease();
              v62 = 12;
              v45 = v42;
              v46 = v87;
              v47 = v86;
              v48 = v85;
              v49 = v84;
              v50 = v83;
              v51 = v82;
              v52 = v44;
            }
            else
            {
              v41 = v74;
              v53 = v64;
              sub_62CC(v74, v64, (uint64_t)v71, v88, v78, v73, v39);
              v43 = v69;
              swift_bridgeObjectRelease();
              v52 = v70;
              swift_bridgeObjectRelease();
              v62 = v102;
              v45 = v53;
              v46 = v87;
              v47 = v86;
              v48 = v85;
              v49 = v84;
              v50 = v83;
              v51 = v82;
            }
            v91[0] = v63;
            LOBYTE(v91[1]) = v72;
            v91[2] = v52;
            v91[3] = v43;
            v91[4] = v46;
            LOBYTE(v91[5]) = v47;
            v91[6] = v48;
            LOBYTE(v91[7]) = v49;
            v91[8] = v50;
            LOBYTE(v91[9]) = v51;
            v91[10] = v41;
            v91[11] = v45;
            v91[12] = v71;
            v91[13] = v88;
            v91[14] = v78;
            v91[15] = v73;
            v91[16] = v39;
            v91[17] = v81;
            v91[18] = v80;
            sub_41300((uint64_t)v107, (uint64_t)v61, &qword_1F2D68);
            v91[67] = v66;
            v92 = v62;
            v54 = (char *)&loc_145DB0 + dword_1460B4[v39 >> 62];
            v68 = 0;
            v65 = v8;
            __asm { BR              X9 }
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v3 = v76;
        v4 = v77;
        v9 = v75;
        v10 = v90;
      }
      else
      {
        v10 = v90;
      }
    }
  }
  v13 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v13 >= v9)
    goto LABEL_36;
  v14 = *(_QWORD *)(v5 + 8 * v13);
  if (v14)
  {
LABEL_20:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v13 << 6);
    v10 = v13;
    goto LABEL_21;
  }
  v15 = v10 + 2;
  if (v10 + 2 >= v9)
    goto LABEL_36;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_19;
  v15 = v10 + 3;
  if (v10 + 3 >= v9)
    goto LABEL_36;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_19;
  v15 = v10 + 4;
  if (v10 + 4 >= v9)
    goto LABEL_36;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_19:
    v13 = v15;
    goto LABEL_20;
  }
  v15 = v10 + 5;
  if (v10 + 5 < v9)
  {
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v13 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        if (v13 >= v9)
          goto LABEL_36;
        v14 = *(_QWORD *)(v5 + 8 * v13);
        ++v15;
        if (v14)
          goto LABEL_20;
      }
LABEL_38:
      __break(1u);
      JUMPOUT(0x1460B0);
    }
    goto LABEL_19;
  }
LABEL_36:
  sub_5FEC(v4);
  return v58;
}

_QWORD *sub_1460C4@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  const void *v4;
  const void *v5;
  char v6;
  _QWORD *result;
  __int128 v8[23];
  _BYTE __dst[377];
  char v10;

  v4 = *(const void **)(v2 + 16);
  v5 = *(const void **)(v2 + 24);
  v6 = *a1;
  memcpy(__dst, v4, sizeof(__dst));
  v10 = v6;
  memcpy(v8, v5, 0x16BuLL);
  result = BookHistory.affinityInfos(for:with:)(&v10, v8);
  *a2 = result;
  return result;
}

uint64_t sub_14613C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  int v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t *v41;
  char *v42;
  uint64_t (*v43)(char *, char *, uint64_t);
  char *v44;
  char *v45;

  v41 = a2;
  v3 = sub_5EDC(&qword_1F6DC0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v40 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v11);
  v44 = (char *)&v34 - v14;
  v45 = (char *)_swiftEmptyArrayStorage;
  v39 = *(_QWORD *)(a1 + 16);
  if (v39)
  {
    v15 = 0;
    v36 = a1;
    v42 = v5;
    v38 = v8;
    while (1)
    {
      if (v15 >= *(_QWORD *)(a1 + 16))
      {
        __break(1u);
        return result;
      }
      v16 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v17 = *(_QWORD *)(v10 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v8, a1 + v16 + v17 * v15, v9);
      v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
      v37(v8, 0, 1, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
        goto LABEL_21;
      v43 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 32);
      v18 = v43(v44, v8, v9);
      v19 = URL.lastPathComponent.getter(v18);
      v21 = *v41;
      if (!*(_QWORD *)(*v41 + 16))
        break;
      v22 = sub_39064(v19, v20);
      if ((v23 & 1) == 0)
      {
        v25 = type metadata accessor for TabiPackage(0);
        v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
        v5 = v42;
        goto LABEL_12;
      }
      v24 = v22;
      v35 = *(_QWORD *)(v21 + 56);
      v25 = type metadata accessor for TabiPackage(0);
      v26 = *(_QWORD *)(v25 - 8);
      v27 = v35 + *(_QWORD *)(v26 + 72) * v24;
      v5 = v42;
      sub_149D14(v27, (uint64_t)v42);
      v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56);
      a1 = v36;
      v28(v5, 0, 1, v25);
LABEL_13:
      swift_bridgeObjectRelease();
      type metadata accessor for TabiPackage(0);
      v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v5, 1, v25);
      sub_417D8((uint64_t)v5, &qword_1F6DC0);
      if (v30 == 1)
      {
        v43(v40, v44, v9);
        v31 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
        {
          sub_345B4(0, *((_QWORD *)v31 + 2) + 1, 1);
          v31 = v45;
        }
        v8 = v38;
        v33 = *((_QWORD *)v31 + 2);
        v32 = *((_QWORD *)v31 + 3);
        if (v33 >= v32 >> 1)
        {
          sub_345B4(v32 > 1, v33 + 1, 1);
          v8 = v38;
          v31 = v45;
        }
        *((_QWORD *)v31 + 2) = v33 + 1;
        result = v43(&v31[v16 + v33 * v17], v40, v9);
        v45 = v31;
        a1 = v36;
        v5 = v42;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v44, v9);
        v8 = v38;
      }
      if (v39 == ++v15)
      {
        v37(v8, 1, 1, v9);
        goto LABEL_21;
      }
    }
    v25 = type metadata accessor for TabiPackage(0);
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
LABEL_12:
    v29(v5, 1, 1, v25);
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
LABEL_21:
  swift_bridgeObjectRelease();
  sub_417D8((uint64_t)v8, &qword_1F2448);
  return (uint64_t)v45;
}

uint64_t static TabiPackageService.resourcesContentDirectory.getter()
{
  return sub_146550(0x7365725F69626174);
}

uint64_t static TabiPackageService.modelsContentDirectory.getter()
{
  return sub_146550(0x646F6D5F69626174);
}

uint64_t sub_146550(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_14670C((uint64_t)v4);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    URL.appendingPathComponent(_:)(a1);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

uint64_t TabiPackage.fileURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_418BC(v1, a1, &qword_1F2448);
}

uint64_t TabiPackage.fileURL.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_146844(a1, v1);
}

uint64_t TabiPackage.id.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for TabiPackage(0) + 20));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t TabiPackage.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TabiPackage(0) + 20));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TabiPackage.id.modify())(_QWORD)
{
  type metadata accessor for TabiPackage(0);
  return AuthorRecommendationSource.id.getter;
}

uint64_t sub_1466F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(v2 + *(int *)(a1 + 20));
  v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_14670C@<X0>(uint64_t a1@<X8>)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  v2 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v12 = 0;
  v3 = objc_msgSend(v2, "URLForDirectory:inDomain:appropriateForURL:create:error:", 9, 1, 0, 1, &v12);

  v4 = v12;
  if (v3)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v5 = v4;

    v6 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, 0, 1, v6);
  }
  else
  {
    v8 = v12;
    v9 = _convertNSErrorToError(_:)(v4);

    swift_willThrow(v10);
    swift_errorRelease(v9);
    v11 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

uint64_t sub_146844(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F2448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TabiPackage(uint64_t a1)
{
  uint64_t result;

  result = qword_1F6E48;
  if (!qword_1F6E48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TabiPackage);
  return result;
}

uint64_t TabiPackageService.fetchTabiPackages(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_1468E0, 0, 0);
}

uint64_t sub_1468E0()
{
  uint64_t v0;
  uint64_t v1;
  int8x16_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = sub_5EDC(&qword_1F6DC0);
  v2 = (int8x16_t *)swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v2;
  v2[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v3 = sub_5EDC(&qword_1F6DD8);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_14699C;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v1, v3, 0, 0, &unk_1F6DD0, v2, v1);
}

uint64_t sub_14699C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_146A08;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_69250;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_146A08()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_146A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4[155] = a4;
  v4[154] = a3;
  v4[153] = a2;
  v4[152] = a1;
  v5 = sub_5EDC(&qword_1F6DC0);
  v4[156] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[157] = v6;
  v4[158] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TabiPackage(0);
  v4[159] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[160] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[161] = swift_task_alloc(v9);
  v4[162] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F15F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[163] = swift_task_alloc(v10);
  v4[164] = swift_task_alloc(v10);
  v11 = sub_5EDC(&qword_1F7098);
  v4[165] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5EDC(&qword_1F70A0);
  v4[166] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[167] = v13;
  v4[168] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F2448) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[169] = swift_task_alloc(v14);
  v4[170] = swift_task_alloc(v14);
  v15 = type metadata accessor for URL(0);
  v4[171] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[172] = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v4[173] = v17;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[174] = swift_task_alloc(v18);
  v4[175] = swift_task_alloc(v18);
  v4[176] = swift_task_alloc(v18);
  v4[177] = swift_task_alloc(v18);
  v4[178] = swift_task_alloc(v18);
  v4[179] = swift_task_alloc(v18);
  return swift_task_switch(sub_146C34, 0, 0);
}

uint64_t sub_146C34()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  NSString v8;
  unsigned __int8 v9;
  NSURL *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64_t v47;
  unint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ObjectType;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64_t v121;
  uint64_t v122;
  _QWORD __src[138];

  *(_QWORD *)(v0 + 1176) = _swiftEmptyDictionarySingleton;
  v1 = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  *(_QWORD *)(v0 + 1440) = v1;
  v2 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  *(_QWORD *)(v0 + 1448) = v2;
  *(_QWORD *)(v0 + 1168) = 0;
  v3 = objc_msgSend(v2, "URLForDirectory:inDomain:appropriateForURL:create:error:", 13, 1, 0, 1, v0 + 1168);
  v4 = *(void **)(v0 + 1168);
  v109 = v0;
  if (v3)
  {
    v5 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v4;

    v7 = URL.appendingPathComponent(_:)(0x6361705F69626174);
    URL.path.getter(v7);
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v9 = objc_msgSend(v2, "fileExistsAtPath:", v8);

    if ((v9 & 1) == 0)
    {
      URL._bridgeToObjectiveC()(v10);
      v12 = v11;
      *(_QWORD *)(v0 + 1160) = 0;
      v13 = objc_msgSend(v2, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v11, 1, 0, v0 + 1160);

      v14 = *(void **)(v0 + 1160);
      if (!v13)
      {
        v25 = *(_QWORD *)(v0 + 1432);
        v89 = *(_QWORD *)(v0 + 1424);
        v90 = *(_QWORD *)(v0 + 1376);
        v28 = *(_QWORD *)(v0 + 1368);
        v91 = v14;
        _convertNSErrorToError(_:)(v14);

        swift_willThrow(v92);
        v30 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
        v30(v89, v28);
        goto LABEL_37;
      }
      v15 = v14;
    }
    v108 = v1;
    v16 = *(_QWORD *)(v0 + 1376);
    v17 = *(_QWORD *)(v0 + 1368);
    v18 = *(_QWORD *)(v0 + 1360);
    v19 = *(_QWORD **)(*(_QWORD *)(v0 + 1232) + 16);
    v20 = v19[5];
    v21 = v19[6];
    sub_49F4(v19 + 2, v20);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 8))(__src, v20, v21);
    memcpy((void *)(v0 + 16), __src, 0x440uLL);
    sub_606DC(v0 + 672);
    sub_5B70(v0 + 16);
    v22 = *(_QWORD *)(v0 + 688);
    v23 = *(_QWORD *)(v0 + 696);
    swift_bridgeObjectRetain(v23);
    sub_149818(v0 + 672);
    URL.init(string:)(v22, v23);
    swift_bridgeObjectRelease();
    v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    *(_QWORD *)(v0 + 1456) = v24;
    if (v24(v18, 1, v17) == 1)
    {
      v25 = *(_QWORD *)(v0 + 1432);
      v26 = *(_QWORD *)(v0 + 1424);
      v27 = *(_QWORD *)(v0 + 1376);
      v28 = *(_QWORD *)(v0 + 1368);
      sub_417D8(*(_QWORD *)(v0 + 1360), &qword_1F2448);
      v29 = sub_149AA8();
      v111 = swift_allocError(&type metadata for TabiPackageService.Errors, v29, 0, 0);
      swift_willThrow(v111);

      v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v30(v26, v28);
LABEL_37:
      v30(v25, v28);
      goto LABEL_38;
    }
    v33 = *(_QWORD *)(v0 + 1416);
    v34 = *(_QWORD *)(v0 + 1384);
    v35 = *(_QWORD *)(v0 + 1368);
    v36 = *(_QWORD *)(v0 + 1360);
    v37 = *(_QWORD *)(v0 + 1240);
    v107 = *(_QWORD *)(v0 + 1376);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32);
    *(_QWORD *)(v0 + 1464) = v38;
    v105 = v38;
    v38(v33, v36, v35);
    v102 = v37 + 56;
    v39 = -1;
    v40 = -1 << *(_BYTE *)(v37 + 32);
    if (-v40 < 64)
      v39 = ~(-1 << -(char)v40);
    v41 = v39 & *(_QWORD *)(v37 + 56);
    v103 = (unint64_t)(63 - v40) >> 6;
    v104 = v34 + 7;
    v106 = v37;
    swift_bridgeObjectRetain(v37);
    v42 = 0;
    while (1)
    {
      if (v41)
      {
        v119 = (v41 - 1) & v41;
        v121 = v42;
        v46 = __clz(__rbit64(v41)) | (v42 << 6);
      }
      else
      {
        v47 = v42 + 1;
        if (__OFADD__(v42, 1))
        {
          __break(1u);
          goto LABEL_40;
        }
        if (v47 >= v103)
          goto LABEL_35;
        v48 = *(_QWORD *)(v102 + 8 * v47);
        v49 = v42 + 1;
        if (!v48)
        {
          v49 = v42 + 2;
          if (v42 + 2 >= v103)
            goto LABEL_35;
          v48 = *(_QWORD *)(v102 + 8 * v49);
          if (!v48)
          {
            v49 = v42 + 3;
            if (v42 + 3 >= v103)
              goto LABEL_35;
            v48 = *(_QWORD *)(v102 + 8 * v49);
            if (!v48)
            {
              v50 = v42 + 4;
              if (v42 + 4 >= v103)
              {
LABEL_35:
                v83 = *(_QWORD *)(v0 + 1248);
                v84 = *(uint64_t **)(v0 + 1224);
                swift_release(*(_QWORD *)(v0 + 1240));
                v85 = *v84;
                v86 = sub_5EDC(&qword_1F1348);
                ThrowingTaskGroup.makeAsyncIterator()(v85, v83, v86, &protocol self-conformance witness table for Error);
                *(_QWORD *)(v0 + 1472) = *(_QWORD *)(v0 + 1176);
                v87 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
                *(_QWORD *)(v0 + 1480) = v87;
                *v87 = v0;
                v87[1] = sub_14752C;
                return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 1320), 0, 0, *(_QWORD *)(v0 + 1328), v0 + 1184);
              }
              v48 = *(_QWORD *)(v102 + 8 * v50);
              if (!v48)
              {
                while (1)
                {
                  v49 = v50 + 1;
                  if (__OFADD__(v50, 1))
                    break;
                  if (v49 >= v103)
                    goto LABEL_35;
                  v48 = *(_QWORD *)(v102 + 8 * v49);
                  ++v50;
                  if (v48)
                    goto LABEL_27;
                }
LABEL_40:
                __break(1u);
              }
              v49 = v42 + 4;
            }
          }
        }
LABEL_27:
        v119 = (v48 - 1) & v48;
        v121 = v49;
        v46 = __clz(__rbit64(v48)) + (v49 << 6);
      }
      v51 = *(_QWORD *)(v0 + 1424);
      v52 = *(_QWORD *)(v0 + 1416);
      v53 = *(_QWORD *)(v0 + 1408);
      v54 = *(_QWORD *)(v0 + 1400);
      v55 = *(_QWORD *)(v0 + 1368);
      v56 = *(_QWORD *)(v0 + 1312);
      v110 = v54;
      v112 = v56;
      v57 = (uint64_t *)(*(_QWORD *)(v106 + 48) + 16 * v46);
      v115 = *v57;
      v117 = *(_QWORD *)(v0 + 1304);
      v113 = v57[1];
      v58 = type metadata accessor for TaskPriority(0);
      v59 = *(_QWORD *)(v58 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v56, 1, 1, v58);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16);
      v60(v53, v51, v55);
      v60(v54, v52, v55);
      v61 = *(unsigned __int8 *)(v107 + 80);
      v62 = (v61 + 32) & ~v61;
      v63 = (v62 + v104) & 0xFFFFFFFFFFFFFFF8;
      v64 = (v61 + v63 + 16) & ~v61;
      v65 = (v64 + v104) & 0xFFFFFFFFFFFFFFF8;
      v66 = swift_allocObject(&unk_1E86A8, v65 + 8, v61 | 7);
      *(_QWORD *)(v66 + 16) = 0;
      v67 = (uint64_t *)(v66 + 16);
      *(_QWORD *)(v66 + 24) = 0;
      v105(v66 + v62, v53, v55);
      v68 = (_QWORD *)(v66 + v63);
      *v68 = v115;
      v68[1] = v113;
      v69 = v55;
      v70 = v58;
      v105(v66 + v64, v110, v69);
      v0 = v109;
      *(_QWORD *)(v66 + v65) = v108;
      sub_418BC(v112, v117, &qword_1F15F0);
      LODWORD(v58) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v117, 1, v58);
      swift_bridgeObjectRetain(v113);
      v71 = v108;
      v72 = *(_QWORD *)(v109 + 1304);
      if ((_DWORD)v58 == 1)
      {
        sub_417D8(*(_QWORD *)(v109 + 1304), &qword_1F15F0);
        v73 = 0;
        v74 = *v67;
        if (*v67)
          goto LABEL_30;
      }
      else
      {
        v80 = TaskPriority.rawValue.getter(v71);
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v72, v70);
        v73 = v80;
        v74 = *v67;
        if (*v67)
        {
LABEL_30:
          v75 = *(_QWORD *)(v66 + 24);
          ObjectType = swift_getObjectType(v74);
          swift_unknownObjectRetain(v74);
          v77 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v75);
          v79 = v78;
          swift_unknownObjectRelease(v74);
          goto LABEL_33;
        }
      }
      v77 = 0;
      v79 = 0;
LABEL_33:
      v41 = v119;
      v81 = **(_QWORD **)(v109 + 1224);
      v82 = v79 | v77;
      if (v79 | v77)
      {
        v82 = v109 + 1104;
        *(_QWORD *)(v109 + 1104) = 0;
        *(_QWORD *)(v109 + 1112) = 0;
        *(_QWORD *)(v109 + 1120) = v77;
        *(_QWORD *)(v109 + 1128) = v79;
      }
      v42 = v121;
      v43 = *(_QWORD *)(v109 + 1312);
      v44 = *(_QWORD *)(v109 + 1248);
      *(_QWORD *)(v109 + 1136) = 1;
      *(_QWORD *)(v109 + 1144) = v82;
      *(_QWORD *)(v109 + 1152) = v81;
      v45 = swift_task_create(v73 | 0x3100, v109 + 1136, v44, &unk_1F70B8, v66);
      swift_release(v45);
      sub_417D8(v43, &qword_1F15F0);
    }
  }
  v31 = v4;
  _convertNSErrorToError(_:)(v4);

  swift_willThrow(v32);
LABEL_38:
  swift_bridgeObjectRelease();
  v93 = *(_QWORD *)(v0 + 1424);
  v94 = *(_QWORD *)(v0 + 1416);
  v95 = *(_QWORD *)(v0 + 1408);
  v96 = *(_QWORD *)(v0 + 1400);
  v97 = *(_QWORD *)(v0 + 1392);
  v98 = *(_QWORD *)(v0 + 1360);
  v99 = *(_QWORD *)(v0 + 1352);
  v100 = *(_QWORD *)(v0 + 1344);
  v101 = *(_QWORD *)(v0 + 1320);
  v114 = *(_QWORD *)(v0 + 1312);
  v116 = *(_QWORD *)(v0 + 1304);
  v118 = *(_QWORD *)(v0 + 1296);
  v120 = *(_QWORD *)(v0 + 1288);
  v122 = *(_QWORD *)(v0 + 1264);
  swift_task_dealloc(*(_QWORD *)(v0 + 1432));
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v122);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14752C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 1480));
  if (v0)
  {
    v3 = sub_147EA8;
  }
  else
  {
    v2[187] = v2[184];
    v2[186] = 0;
    v3 = sub_1475E4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1475E4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSURL *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  NSString *v8;
  Class isa;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, unint64_t, uint64_t);
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v24;
  NSURL *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  void (*v74)(uint64_t, uint64_t);
  uint64_t (*v75)(void);
  void *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v1 = *(_QWORD *)(v0 + 1320);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1256) + 48))(v1, 1, *(_QWORD *)(v0 + 1248)) != 1)
  {
    v32 = *(_QWORD *)(v0 + 1280);
    v33 = *(_QWORD *)(v0 + 1272);
    v34 = *(_QWORD *)(v0 + 1264);
    sub_149C88(v1, v34);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
    {
      sub_417D8(*(_QWORD *)(v0 + 1264), &qword_1F6DC0);
      v35 = *(_QWORD **)(v0 + 1496);
LABEL_30:
      *(_QWORD *)(v0 + 1504) = v35;
      v100 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      *(_QWORD *)(v0 + 1512) = v100;
      *v100 = v0;
      v100[1] = sub_147DF0;
      return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(*(_QWORD *)(v0 + 1320), 0, 0, *(_QWORD *)(v0 + 1328), v0 + 1184);
    }
    v36 = *(_QWORD *)(v0 + 1496);
    v37 = *(_QWORD *)(v0 + 1296);
    v38 = *(_QWORD *)(v0 + 1288);
    v39 = *(_QWORD *)(v0 + 1272);
    sub_149CD0(*(_QWORD *)(v0 + 1264), v37);
    v40 = (uint64_t *)(v37 + *(int *)(v39 + 20));
    v42 = *v40;
    v41 = v40[1];
    sub_149D14(v37, v38);
    swift_bridgeObjectRetain(v41);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
    *(_QWORD *)(v0 + 1208) = v36;
    *(_QWORD *)(v0 + 1176) = 0x8000000000000000;
    v45 = sub_39064(v42, v41);
    v46 = *(_QWORD *)(v36 + 16);
    v47 = (v44 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47))
    {
      __break(1u);
    }
    else
    {
      v49 = v44;
      if (*(_QWORD *)(*(_QWORD *)(v0 + 1496) + 24) >= v48)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_16E520();
      }
      else
      {
        sub_1612D0(v48, isUniquelyReferenced_nonNull_native);
        v50 = sub_39064(v42, v41);
        if ((v49 & 1) != (v51 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        v45 = v50;
      }
      v35 = *(_QWORD **)(v0 + 1208);
      v93 = *(_QWORD *)(v0 + 1288);
      v94 = *(_QWORD *)(v0 + 1280);
      if ((v49 & 1) != 0)
      {
        sub_149D94(v93, v35[7] + *(_QWORD *)(v94 + 72) * v45);
LABEL_29:
        v99 = *(_QWORD *)(v0 + 1296);
        *(_QWORD *)(v0 + 1176) = v35;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_149D58(v99);
        goto LABEL_30;
      }
      v35[(v45 >> 6) + 8] |= 1 << v45;
      v95 = (uint64_t *)(v35[6] + 16 * v45);
      *v95 = v42;
      v95[1] = v41;
      sub_149CD0(v93, v35[7] + *(_QWORD *)(v94 + 72) * v45);
      v96 = v35[2];
      v97 = __OFADD__(v96, 1);
      v98 = v96 + 1;
      if (!v97)
      {
        v35[2] = v98;
        swift_bridgeObjectRetain(v41);
        goto LABEL_29;
      }
    }
    __break(1u);
  }
  v2 = *(void **)(v0 + 1448);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1336) + 8))(*(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1328));
  URL._bridgeToObjectiveC()(v3);
  v5 = v4;
  v6 = sub_5EDC(&qword_1F70C0);
  v7 = swift_allocObject(v6, 40, 7);
  *(_OWORD *)(v7 + 16) = xmmword_1875E0;
  *(_QWORD *)(v7 + 32) = NSURLIsDirectoryKey;
  type metadata accessor for URLResourceKey(0);
  v8 = NSURLIsDirectoryKey;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 1192) = 0;
  v10 = objc_msgSend(v2, "contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:", v5, isa, 0, v0 + 1192);

  v11 = *(void **)(v0 + 1192);
  if (v10)
  {
    v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, *(_QWORD *)(v0 + 1368));
    v13 = v11;

    v14 = sub_14613C(v12, (uint64_t *)(v0 + 1176));
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *(_QWORD *)(v0 + 1376);
    if (v15)
    {
      v17 = v14 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      v18 = *(_QWORD *)(v16 + 72);
      v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16);
      while (1)
      {
        v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1456);
        v21 = *(_QWORD *)(v0 + 1368);
        v22 = *(_QWORD *)(v0 + 1352);
        v19(v22, v17, v21);
        v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
        v23(v22, 0, 1, v21);
        if (v20(v22, 1, v21) == 1)
          break;
        v24 = *(void **)(v0 + 1448);
        (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1464))(*(_QWORD *)(v0 + 1392), *(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1368));
        URL._bridgeToObjectiveC()(v25);
        v27 = v26;
        *(_QWORD *)(v0 + 1200) = 0;
        LODWORD(v24) = objc_msgSend(v24, "removeItemAtURL:error:", v26, v0 + 1200);

        v28 = *(void **)(v0 + 1200);
        if (!(_DWORD)v24)
        {
          v76 = *(void **)(v0 + 1448);
          v77 = *(void **)(v0 + 1440);
          v116 = *(_QWORD *)(v0 + 1432);
          v78 = *(_QWORD *)(v0 + 1424);
          v79 = *(_QWORD *)(v0 + 1416);
          v80 = *(_QWORD *)(v0 + 1392);
          v81 = *(_QWORD *)(v0 + 1368);
          v82 = v28;
          _convertNSErrorToError(_:)(v28);

          swift_willThrow(v83);
          v62 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
          v62(v80, v81);

          swift_bridgeObjectRelease();
          v62(v79, v81);
          v62(v78, v81);
          v63 = v116;
          v64 = v81;
          goto LABEL_22;
        }
        v29 = *(_QWORD *)(v0 + 1392);
        v30 = *(_QWORD *)(v0 + 1368);
        v31 = v28;
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v29, v30);
        v17 += v18;
        if (!--v15)
          goto LABEL_19;
      }
    }
    else
    {
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
LABEL_19:
      v23(*(_QWORD *)(v0 + 1352), 1, 1, *(_QWORD *)(v0 + 1368));
    }
    v65 = *(void **)(v0 + 1448);
    v66 = *(void **)(v0 + 1440);
    v67 = *(_QWORD *)(v0 + 1432);
    v68 = *(_QWORD *)(v0 + 1424);
    v69 = *(_QWORD *)(v0 + 1416);
    v70 = *(_QWORD *)(v0 + 1408);
    v101 = *(_QWORD *)(v0 + 1400);
    v102 = *(_QWORD *)(v0 + 1392);
    v71 = *(_QWORD *)(v0 + 1376);
    v72 = *(_QWORD *)(v0 + 1368);
    v103 = *(_QWORD *)(v0 + 1360);
    v104 = *(_QWORD *)(v0 + 1352);
    v105 = *(_QWORD *)(v0 + 1344);
    v106 = *(_QWORD *)(v0 + 1320);
    v107 = *(_QWORD *)(v0 + 1312);
    v108 = *(_QWORD *)(v0 + 1304);
    v110 = *(_QWORD *)(v0 + 1296);
    v112 = *(_QWORD *)(v0 + 1288);
    v115 = *(_QWORD *)(v0 + 1264);
    v73 = *(_QWORD **)(v0 + 1216);
    swift_bridgeObjectRelease();

    v74 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
    v74(v69, v72);
    v74(v68, v72);
    v74(v67, v72);
    *v73 = *(_QWORD *)(v0 + 1176);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v115);
    v75 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v53 = *(void **)(v0 + 1448);
    v54 = *(void **)(v0 + 1440);
    v55 = *(_QWORD *)(v0 + 1432);
    v56 = *(_QWORD *)(v0 + 1424);
    v57 = *(_QWORD *)(v0 + 1416);
    v58 = *(_QWORD *)(v0 + 1376);
    v59 = *(_QWORD *)(v0 + 1368);
    v60 = v11;
    _convertNSErrorToError(_:)(v11);

    swift_willThrow(v61);
    v62 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
    v62(v57, v59);
    v62(v56, v59);
    v63 = v55;
    v64 = v59;
LABEL_22:
    v62(v63, v64);
    swift_bridgeObjectRelease();
    v84 = *(_QWORD *)(v0 + 1424);
    v85 = *(_QWORD *)(v0 + 1416);
    v86 = *(_QWORD *)(v0 + 1408);
    v87 = *(_QWORD *)(v0 + 1400);
    v88 = *(_QWORD *)(v0 + 1392);
    v89 = *(_QWORD *)(v0 + 1360);
    v90 = *(_QWORD *)(v0 + 1352);
    v91 = *(_QWORD *)(v0 + 1344);
    v92 = *(_QWORD *)(v0 + 1320);
    v109 = *(_QWORD *)(v0 + 1312);
    v111 = *(_QWORD *)(v0 + 1304);
    v113 = *(_QWORD *)(v0 + 1296);
    v114 = *(_QWORD *)(v0 + 1288);
    v117 = *(_QWORD *)(v0 + 1264);
    swift_task_dealloc(*(_QWORD *)(v0 + 1432));
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v117);
    v75 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v75();
}

uint64_t sub_147DF0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v3)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 1512));
  if (v0)
  {
    v3 = sub_147EA8;
  }
  else
  {
    v2[187] = v2[188];
    v2[186] = 0;
    v3 = sub_1475E4;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_147EA8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 1440);
  v2 = *(_QWORD *)(v0 + 1432);
  v3 = *(_QWORD *)(v0 + 1424);
  v4 = *(_QWORD *)(v0 + 1416);
  v5 = *(_QWORD *)(v0 + 1376);
  v6 = *(_QWORD *)(v0 + 1368);
  v7 = *(_QWORD *)(v0 + 1344);
  v8 = *(_QWORD *)(v0 + 1336);
  v9 = *(_QWORD *)(v0 + 1328);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(v4, v6);
  v10(v3, v6);
  v10(v2, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1176));
  v11 = *(_QWORD *)(v0 + 1424);
  v12 = *(_QWORD *)(v0 + 1416);
  v13 = *(_QWORD *)(v0 + 1408);
  v14 = *(_QWORD *)(v0 + 1400);
  v15 = *(_QWORD *)(v0 + 1392);
  v16 = *(_QWORD *)(v0 + 1360);
  v17 = *(_QWORD *)(v0 + 1352);
  v18 = *(_QWORD *)(v0 + 1344);
  v19 = *(_QWORD *)(v0 + 1320);
  v21 = *(_QWORD *)(v0 + 1312);
  v22 = *(_QWORD *)(v0 + 1304);
  v23 = *(_QWORD *)(v0 + 1296);
  v24 = *(_QWORD *)(v0 + 1288);
  v25 = *(_QWORD *)(v0 + 1264);
  swift_task_dealloc(*(_QWORD *)(v0 + 1432));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_148054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1F6DCC);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_6AA68;
  return sub_146A3C(a1, a2, v7, v6);
}

uint64_t sub_1480C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  v8[3] = a1;
  v8[4] = a4;
  v9 = type metadata accessor for URLRequest(0);
  v8[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[10] = v10;
  v8[11] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v8[12] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[13] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[14] = swift_task_alloc(v13);
  v8[15] = swift_task_alloc(v13);
  v8[16] = swift_task_alloc(v13);
  v8[17] = swift_task_alloc(v13);
  return swift_task_switch(sub_1481A4, 0, 0);
}

uint64_t sub_1481A4()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSString v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  URL.appendingPathComponent(_:)(*(_QWORD *)(v0 + 40));
  v1 = (void *)objc_opt_self(NSFileManager);
  *(_QWORD *)(v0 + 144) = v1;
  v2 = objc_msgSend(v1, "defaultManager");
  URL.path.getter(v2);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, "fileExistsAtPath:", v3);

  if (v4)
  {
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 104);
    v8 = *(_QWORD *)(v0 + 40);
    v7 = *(_QWORD *)(v0 + 48);
    v9 = *(_QWORD *)(v0 + 24);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 32))(v9, *(_QWORD *)(v0 + 136), v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v5);
    v10 = type metadata accessor for TabiPackage(0);
    v11 = (_QWORD *)(v9 + *(int *)(v10 + 20));
    *v11 = v8;
    v11[1] = v7;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
    v12 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 128);
    v20 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 96);
    URL.appendingPathComponent(_:)(*(_QWORD *)(v0 + 40));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v18, v21);
    URLRequest.init(url:cachePolicy:timeoutInterval:)(v19, 0, 60.0);
    v22 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.download(for:delegate:)[1]);
    *(_QWORD *)(v0 + 152) = v22;
    *v22 = v0;
    v22[1] = sub_1483E8;
    return NSURLSession.download(for:delegate:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 88), 0);
  }
}

uint64_t sub_1483E8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 152);
  *(_QWORD *)(*(_QWORD *)v2 + 160) = v1;
  swift_task_dealloc(v5);
  v7 = v4[10];
  v6 = v4[11];
  v8 = v4[9];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = sub_14872C;
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v9 = sub_1484D0;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_1484D0()
{
  uint64_t v0;
  id v1;
  NSURL *v2;
  void *v3;
  void *v4;
  NSURL *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  v1 = objc_msgSend(*(id *)(v0 + 144), "defaultManager");
  URL._bridgeToObjectiveC()(v2);
  v4 = v3;
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  *(_QWORD *)(v0 + 16) = 0;
  v8 = objc_msgSend(v1, "moveItemAtURL:toURL:error:", v4, v6, v0 + 16);

  v9 = *(void **)(v0 + 16);
  v10 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 104);
  if (v8)
  {
    v15 = *(_QWORD *)(v0 + 40);
    v33 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v0 + 24);
    v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v18 = v9;
    v17(v12, v13);
    v17(v11, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v16, v10, v13);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v16, 0, 1, v13);
    v19 = type metadata accessor for TabiPackage(0);
    v20 = (_QWORD *)(v16 + *(int *)(v19 + 20));
    *v20 = v15;
    v20[1] = v33;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v16, 0, 1, v19);
    v21 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 136);
    v24 = *(_QWORD *)(v0 + 112);
    v23 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
    swift_task_dealloc(v22);
    swift_task_dealloc(v21);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
  }
  else
  {
    v26 = v9;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow(v27);
    v28 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v28(v12, v13);
    v28(v11, v13);
    v28(v10, v13);
    v29 = *(_QWORD *)(v0 + 128);
    v31 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
  }
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14872C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 8);
  v3(*(_QWORD *)(v0 + 128), v2);
  v3(v1, v2);
  v4 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TabiPackageService.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t TabiPackageService.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_148824()
{
  return sub_148890((unint64_t *)&unk_1F6DE0, (uint64_t)&protocol conformance descriptor for TabiPackage);
}

void *sub_148848()
{
  return &protocol witness table for String;
}

void *sub_148854()
{
  return &protocol witness table for String;
}

void *sub_148860()
{
  return &protocol witness table for String;
}

uint64_t sub_14886C()
{
  return sub_148890((unint64_t *)&qword_1F61D0, (uint64_t)&protocol conformance descriptor for TabiPackage);
}

uint64_t sub_148890(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for TabiPackage(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1488D0()
{
  return PackageServiceType.fetchBundledTabiPackages()();
}

uint64_t sub_1488E4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch(sub_148900, 0, 0);
}

uint64_t sub_148900()
{
  uint64_t v0;
  uint64_t v1;
  int8x16_t *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = sub_5EDC(&qword_1F6DC0);
  v2 = (int8x16_t *)swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v2;
  v2[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  v3 = sub_5EDC(&qword_1F6DD8);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 48) = v4;
  *v4 = v0;
  v4[1] = sub_14699C;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v1, v3, 0, 0, &unk_1F7090, v2, v1);
}

uint64_t *initializeBufferWithCopyOfBuffer for TabiPackage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_5EDC(&qword_1F2448);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t destroy for TabiPackage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

char *initializeWithCopy for TabiPackage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5EDC(&qword_1F2448);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

char *assignWithCopy for TabiPackage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_5EDC(&qword_1F2448);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for TabiPackage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_5EDC(&qword_1F2448);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for TabiPackage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_5EDC(&qword_1F2448);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TabiPackage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_148EEC);
}

uint64_t sub_148EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_5EDC(&qword_1F2448);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TabiPackage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_148F7C);
}

uint64_t sub_148F7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_5EDC(&qword_1F2448);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

void sub_148FFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_14906C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = &unk_19C4C0;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_14906C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1F6E58)
  {
    v2 = type metadata accessor for URL(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1F6E58);
  }
}

uint64_t type metadata accessor for TabiPackageService()
{
  return objc_opt_self(_TtC20BooksPersonalization18TabiPackageService);
}

uint64_t method lookup function for TabiPackageService(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TabiPackageService);
}

uint64_t type metadata accessor for TabiConfigurationManager()
{
  return objc_opt_self(_TtC20BooksPersonalization24TabiConfigurationManager);
}

void *sub_14910C@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[82];
  _BYTE v7[432];

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  sub_49F4((_QWORD *)(*(_QWORD *)v1 + 16), v3);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v6, v3, v4);
  sub_606DC((uint64_t)v7);
  sub_5B70((uint64_t)v6);
  return memcpy(a1, v7, 0x1B0uLL);
}

uint64_t sub_1491A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 2192) = a1;
  *(_QWORD *)(v2 + 2200) = *v1;
  return swift_task_switch(sub_1491C8, 0, 0);
}

uint64_t sub_1491C8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 2200);
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 2208) = v5;
  *v5 = v0;
  v5[1] = sub_149258;
  return v7(v0 + 16, v2, v3);
}

uint64_t sub_149258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2208);
  *(_QWORD *)(*(_QWORD *)v1 + 2216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_CE470;
  else
    v3 = sub_1492BC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1492BC()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 2192);
  memcpy((void *)(v0 + 1104), (const void *)(v0 + 16), 0x440uLL);
  sub_606DC(v0 + 1760);
  sub_5B70(v0 + 1104);
  memcpy(v1, (const void *)(v0 + 1760), 0x1B0uLL);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_14932C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);

  v5 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 48);
  sub_49F4((_QWORD *)(*(_QWORD *)v2 + 16), v5);
  v7 = swift_allocObject(&unk_1E8630, 32, 7);
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  v8 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v6 + 24);
  swift_retain(a2);
  v8(sub_1497B0, v7, v5, v6);
  return swift_release(v7);
}

uint64_t sub_1493B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;

  v10 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject(&unk_1E8658, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = a2;
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 1, 1, v14);
  v15 = (_QWORD *)swift_allocObject(&unk_1E8680, 72, 7);
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = a5;
  v15[5] = sub_1499E4;
  v15[6] = v13;
  v15[7] = a3;
  v15[8] = a4;
  swift_retain(a2);
  swift_retain(a5);
  swift_retain(a4);
  v16 = sub_140F14((uint64_t)v12, (uint64_t)&unk_1F7088, (uint64_t)v15);
  return swift_release(v16);
}

uint64_t sub_1494D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  return swift_task_switch(sub_1494F8, 0, 0);
}

uint64_t sub_1494F8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to WorkService.startup()[1]);
  *(_QWORD *)(v0 + 56) = v1;
  *v1 = v0;
  v1[1] = sub_149548;
  return WorkService.startup()();
}

uint64_t sub_149548()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  return swift_task_switch(sub_14959C, 0, 0);
}

uint64_t sub_14959C()
{
  uint64_t v0;
  _QWORD *v1;

  sub_49F4((_QWORD *)(*(_QWORD *)(v0 + 16) + 24), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 48));
  v1 = (_QWORD *)swift_task_alloc(dword_1F2454);
  *(_QWORD *)(v0 + 64) = v1;
  *v1 = v0;
  v1[1] = sub_1495F8;
  return sub_71CF4(1);
}

uint64_t sub_1495F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 64);
  *(_QWORD *)(*(_QWORD *)v2 + 72) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_149698;
  }
  else
  {
    swift_release(a1);
    v5 = sub_149668;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_149668()
{
  uint64_t v0;

  (*(void (**)(void))(v0 + 24))();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_149698()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  (*(void (**)(uint64_t))(v0 + 40))(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for BooksTabiWorkServiceStartupTask()
{
  return objc_opt_self(_TtC20BooksPersonalization31BooksTabiWorkServiceStartupTask);
}

uint64_t sub_1496FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for StartupTaskExecutionPhase.afterLaunching(_:);
  v3 = type metadata accessor for StartupTaskExecutionPhase(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_149740()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = sub_5EDC(&qword_1F7078);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  return Promise.init(resolver:)(sub_1499DC, v1);
}

uint64_t sub_14978C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1497B0(uint64_t a1)
{
  uint64_t v1;
  void (*v2)(_BYTE *);
  const void *v3;
  _BYTE v5[432];
  _BYTE __dst[432];

  v2 = *(void (**)(_BYTE *))(v1 + 16);
  v3 = (const void *)(a1 + 656);
  memcpy(__dst, (const void *)(a1 + 656), sizeof(__dst));
  memcpy(v5, v3, sizeof(v5));
  sub_606DC((uint64_t)__dst);
  v2(v5);
  return sub_149818((uint64_t)__dst);
}

uint64_t sub_149818(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v29 = *(_QWORD *)(a1 + 56);
  v30 = *(_QWORD *)(a1 + 48);
  v27 = *(_QWORD *)(a1 + 72);
  v28 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 88);
  v26 = *(_QWORD *)(a1 + 80);
  v23 = *(_QWORD *)(a1 + 104);
  v24 = *(_QWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 128);
  v16 = *(_OWORD *)(a1 + 112);
  v13 = *(_OWORD *)(a1 + 160);
  v14 = *(_OWORD *)(a1 + 144);
  v11 = *(_OWORD *)(a1 + 192);
  v12 = *(_OWORD *)(a1 + 176);
  v10 = *(_OWORD *)(a1 + 208);
  v3 = *(_QWORD *)(a1 + 224);
  v2 = *(_QWORD *)(a1 + 232);
  v4 = *(_QWORD *)(a1 + 240);
  v5 = *(_QWORD *)(a1 + 248);
  v6 = *(_QWORD *)(a1 + 256);
  v7 = *(_QWORD *)(a1 + 264);
  v8 = *(_QWORD *)(a1 + 272);
  v21 = *(_QWORD *)(a1 + 288);
  v22 = *(_QWORD *)(a1 + 280);
  v19 = *(_QWORD *)(a1 + 304);
  v20 = *(_QWORD *)(a1 + 296);
  v17 = *(_QWORD *)(a1 + 320);
  v18 = *(_QWORD *)(a1 + 312);
  v37 = *(_QWORD *)(a1 + 368);
  v38 = *(_QWORD *)(a1 + 360);
  v35 = *(_QWORD *)(a1 + 384);
  v36 = *(_QWORD *)(a1 + 376);
  v33 = *(_QWORD *)(a1 + 400);
  v34 = *(_QWORD *)(a1 + 392);
  v32 = *(_QWORD *)(a1 + 408);
  v31 = *(_QWORD *)(a1 + 416);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_5DFC(v30, v29, v28, v27, v26, v25, v24, v23, v16, *((uint64_t *)&v16 + 1), v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v3);
  sub_5E34(v2, v4, v5, v6, v7, v8);
  sub_5E70(v22, v21, v20, v19, v18, v17);
  swift_bridgeObjectRelease();
  sub_5EA0(v38, v37, v36, v35, v34, v33, v32, v31);
  return a1;
}

uint64_t sub_1499DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1493B8(a1, a2, a3, a4, v4);
}

uint64_t sub_1499E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_149A04()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_149A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 64);
  v3 = swift_task_alloc(dword_1F7084);
  v4 = *(_OWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_4814;
  *(_QWORD *)(v3 + 48) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v5;
  return swift_task_switch(sub_1494F8, 0, 0);
}

unint64_t sub_149AA8()
{
  unint64_t result;

  result = qword_1F70A8;
  if (!qword_1F70A8)
  {
    result = swift_getWitnessTable(&unk_19C660, &type metadata for TabiPackageService.Errors);
    atomic_store(result, &qword_1F70A8);
  }
  return result;
}

uint64_t sub_149AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = *(_QWORD *)(v2 + 64) + 7;
  v7 = (v6 + v4) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v3 + v7 + 16) & ~v3;
  v9 = (v6 + v8) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  v10(v0 + v8, v1);

  return swift_deallocObject(v0, v9 + 8, v5);
}

uint64_t sub_149BB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = *(_QWORD *)(v4 + 64) + 7;
  v8 = (v6 + v7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v5 + v8 + 16) & ~v5;
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = v1 + v6;
  v13 = *(_QWORD *)(v1 + v8);
  v14 = *(_QWORD *)(v1 + v8 + 8);
  v15 = v1 + v9;
  v16 = *(_QWORD *)(v1 + ((v9 + v7) & 0xFFFFFFFFFFFFF8));
  v17 = (_QWORD *)swift_task_alloc(dword_1F70B4);
  *(_QWORD *)(v2 + 16) = v17;
  *v17 = v2;
  v17[1] = sub_4814;
  return sub_1480C0(a1, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_149C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F6DC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_149CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabiPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_149D14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabiPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_149D58(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TabiPackage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_149D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TabiPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for TabiPackageService.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_149E18 + 4 * byte_19C3C0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_149E38 + 4 * byte_19C3C5[v4]))();
}

_BYTE *sub_149E18(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_149E38(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_149E40(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_149E48(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_149E50(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_149E58(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TabiPackageService.Errors()
{
  return &type metadata for TabiPackageService.Errors;
}

unint64_t sub_149E78()
{
  unint64_t result;

  result = qword_1F70C8;
  if (!qword_1F70C8)
  {
    result = swift_getWitnessTable(&unk_19C638, &type metadata for TabiPackageService.Errors);
    atomic_store(result, (unint64_t *)&qword_1F70C8);
  }
  return result;
}

void MediaTypeRecommendationServiceError.description.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t sub_149F40()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v3;

  v1._countAndFlagsBits = v0 + 11;
  v1._object = (void *)0x80000000001A0B60;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0x80000000001A0B60);
  return v3;
}

uint64_t storeEnumTagSinglePayload for MediaTypeRecommendationServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_149FFC + 4 * byte_19C6A9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_14A030 + 4 * byte_19C6A4[v4]))();
}

uint64_t sub_14A030(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14A038(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14A040);
  return result;
}

uint64_t sub_14A04C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14A054);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_14A058(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14A060(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaTypeRecommendationServiceError()
{
  return &type metadata for MediaTypeRecommendationServiceError;
}

uint64_t dispatch thunk of MediaTypeRecommendationServiceType.fetchRecommendedMediaType()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_6AA68;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of MediaTypeRecommendationServiceType.fetchRecommendedMediaType(from:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int *v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = *(int **)(a5 + 16);
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  v12 = (_QWORD *)swift_task_alloc(v11[1]);
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = sub_4814;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of MediaTypeRecommendationSubserviceType.fetchRecommendedMediaType(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v9 = *(int **)(a4 + 8);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v4 + 16) = v10;
  *v10 = v4;
  v10[1] = sub_6AA68;
  return v12(a1, a2, a3, a4);
}

uint64_t *initializeBufferWithCopyOfBuffer for MangaYouMightLikeOptions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for MangaYouMightLikeOptions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  return a1;
}

uint64_t *assignWithTake for MangaYouMightLikeOptions(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for MangaYouMightLikeOptions()
{
  return &type metadata for MangaYouMightLikeOptions;
}

BooksPersonalization::StoreBookTaste_optional __swiftcall StoreBookTaste.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (BooksPersonalization::StoreBookTaste_optional)rawValue;
}

BooksPersonalization::StoreBookTaste_optional sub_14A2F0(Swift::Int *a1)
{
  return StoreBookTaste.init(rawValue:)(*a1);
}

void sub_14A2F8(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

BooksPersonalization::StoreBookTasteInfo __swiftcall StoreBookTasteInfo.init(taste:explicitlyDeclined:)(BooksPersonalization::StoreBookTaste taste, Swift::Bool explicitlyDeclined)
{
  _BYTE *v2;
  BooksPersonalization::StoreBookTasteInfo result;

  *v2 = *(_BYTE *)taste;
  v2[1] = explicitlyDeclined;
  result.taste = taste;
  return result;
}

unint64_t sub_14A318()
{
  unint64_t result;

  result = qword_1F70F0;
  if (!qword_1F70F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreBookTaste, &type metadata for StoreBookTaste);
    atomic_store(result, (unint64_t *)&qword_1F70F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for StoreBookTaste(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_14A3A8 + 4 * byte_19C805[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_14A3DC + 4 * asc_19C800[v4]))();
}

uint64_t sub_14A3DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14A3E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14A3ECLL);
  return result;
}

uint64_t sub_14A3F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14A400);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_14A404(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14A40C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StoreBookTaste()
{
  return &type metadata for StoreBookTaste;
}

uint64_t getEnumTagSinglePayload for StoreBookTasteInfo(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StoreBookTasteInfo(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_14A518 + 4 * byte_19C80F[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_14A54C + 4 * byte_19C80A[v4]))();
}

uint64_t sub_14A54C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_14A554(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x14A55CLL);
  return result;
}

uint64_t sub_14A568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x14A570);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_14A574(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_14A57C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StoreBookTasteInfo()
{
  return &type metadata for StoreBookTasteInfo;
}

uint64_t sub_14A598(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_14A5D4 + 4 * asc_19C920[a1]))(0x65726E654778616DLL, 0xEB00000000734449);
}

uint64_t sub_14A5D4()
{
  return 0x6F6874754178616DLL;
}

unint64_t sub_14A5F4()
{
  return 0xD000000000000023;
}

uint64_t sub_14A664()
{
  unsigned __int8 *v0;

  return sub_14A598(*v0);
}

uint64_t sub_14A66C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_14B048(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_14A690(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14A8D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_14A6B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_14A8D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TabiConfiguration.SeedBookRecommendationConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v4 = sub_5EDC(&qword_1F7100);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v26 = v1[2];
  v27 = v8;
  v10 = v1[3];
  v24 = v1[4];
  v25 = v10;
  v11 = v1[5];
  v12 = v1[6];
  v22 = v1[7];
  v23 = v11;
  v20 = v1[8];
  v21 = v12;
  v13 = a1[3];
  v14 = a1[4];
  sub_49F4(a1, v13);
  v15 = sub_14A8D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s35SeedBookRecommendationConfigurationV10CodingKeysON, &_s35SeedBookRecommendationConfigurationV10CodingKeysON, v15, v13, v14);
  v33 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, &v33, v4);
  if (!v2)
  {
    v17 = v25;
    v16 = v26;
    v18 = v24;
    v32 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v32, v4);
    v31 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v31, v4);
    v30 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v23, &v30, v4);
    v29 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v22, &v29, v4);
    v28 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v28, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_14A8D8()
{
  unint64_t result;

  result = qword_1F7108;
  if (!qword_1F7108)
  {
    result = swift_getWitnessTable(&unk_19CA68, &_s35SeedBookRecommendationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F7108);
  }
  return result;
}

uint64_t TabiConfiguration.SeedBookRecommendationConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v5 = sub_5EDC(&qword_1F7110);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_14A8D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s35SeedBookRecommendationConfigurationV10CodingKeysON, &_s35SeedBookRecommendationConfigurationV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v35 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  v34 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
  v33 = 2;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  v16 = v15;
  v28 = v14;
  v32 = 3;
  swift_bridgeObjectRetain(v15);
  v29 = v16;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v31 = 4;
  v27 = v17;
  swift_bridgeObjectRetain(v17);
  v26 = 0;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  v30 = 5;
  v26 = v18;
  swift_bridgeObjectRetain(v18);
  v19 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v12;
  a2[1] = v13;
  v20 = v29;
  a2[2] = v28;
  a2[3] = v20;
  v21 = v26;
  v22 = v27;
  a2[4] = v25;
  a2[5] = v22;
  a2[6] = v24;
  a2[7] = v21;
  a2[8] = v19;
  sub_62F8(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_14AC38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TabiConfiguration.SeedBookRecommendationConfiguration.init(from:)(a1, a2);
}

uint64_t sub_14AC4C(_QWORD *a1)
{
  return TabiConfiguration.SeedBookRecommendationConfiguration.encode(to:)(a1);
}

uint64_t _s35SeedBookRecommendationConfigurationVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t _s35SeedBookRecommendationConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *_s35SeedBookRecommendationConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[6] = a2[6];
  v8 = a2[7];
  v9 = a1[7];
  a1[7] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[8] = a2[8];
  return a1;
}

uint64_t _s35SeedBookRecommendationConfigurationVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t _s35SeedBookRecommendationConfigurationVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s35SeedBookRecommendationConfigurationVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabiConfiguration.SeedBookRecommendationConfiguration()
{
  return &type metadata for TabiConfiguration.SeedBookRecommendationConfiguration;
}

uint64_t _s35SeedBookRecommendationConfigurationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_14AEF0 + 4 * byte_19C92B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_14AF24 + 4 * byte_19C926[v4]))();
}

uint64_t sub_14AF24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_14AF2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x14AF34);
  return result;
}

uint64_t sub_14AF40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x14AF48);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_14AF4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_14AF54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s35SeedBookRecommendationConfigurationV10CodingKeysOMa()
{
  return &_s35SeedBookRecommendationConfigurationV10CodingKeysON;
}

unint64_t sub_14AF74()
{
  unint64_t result;

  result = qword_1F7118;
  if (!qword_1F7118)
  {
    result = swift_getWitnessTable(&unk_19CA40, &_s35SeedBookRecommendationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F7118);
  }
  return result;
}

unint64_t sub_14AFBC()
{
  unint64_t result;

  result = qword_1F7120;
  if (!qword_1F7120)
  {
    result = swift_getWitnessTable(&unk_19C9B0, &_s35SeedBookRecommendationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F7120);
  }
  return result;
}

unint64_t sub_14B004()
{
  unint64_t result;

  result = qword_1F7128;
  if (!qword_1F7128)
  {
    result = swift_getWitnessTable(&unk_19C9D8, &_s35SeedBookRecommendationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F7128);
  }
  return result;
}

uint64_t sub_14B048(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x65726E654778616DLL && a2 == 0xEB00000000734449)
  {
    v5 = 0xEB00000000734449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726E654778616DLL, 0xEB00000000734449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F6874754178616DLL && a2 == 0xEC00000073444972)
  {
    v7 = 0xEC00000073444972;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6874754178616DLL, 0xEC00000073444972, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x80000000001A3200)
  {
    v8 = 0x80000000001A3200;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x80000000001A3200, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    v9 = 0x80000000001A1E20;
    if (a2 == 0x80000000001A1E20)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000000001A1E20, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x80000000001A3230)
  {
    v10 = 0x80000000001A3230;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x80000000001A3230, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000000001A3250)
  {
    swift_bridgeObjectRelease(0x80000000001A3250);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000000001A3250, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_14B2D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(char *, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = type metadata accessor for CharacterSet(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5235C(v2, qword_1F7130);
  sub_5216C(v0, (uint64_t)qword_1F7130);
  v5 = CharacterSet.init()();
  static CharacterSet.controlCharacters.getter(v5);
  CharacterSet.formUnion(_:)(v4);
  v6 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  v7 = v6(v4, v0);
  static CharacterSet.whitespacesAndNewlines.getter(v7);
  CharacterSet.formUnion(_:)(v4);
  v8 = v6(v4, v0);
  static CharacterSet.punctuationCharacters.getter(v8);
  CharacterSet.formUnion(_:)(v4);
  return v6(v4, v0);
}

uint64_t StringOperationFlattener.deinit()
{
  uint64_t v0;

  return v0;
}

Swift::String __swiftcall AggregateFlattener.flatten(string:)(Swift::String string)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  Swift::String result;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  object = string._object;
  countAndFlagsBits = string._countAndFlagsBits;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain_n(*(_QWORD *)(v1 + 16), 2);
    swift_bridgeObjectRetain(object);
    do
    {
      v7 = object;
      sub_3DD40(v6, (uint64_t)v14);
      v8 = v15;
      v9 = v16;
      sub_49F4(v14, v15);
      countAndFlagsBits = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v9 + 8))(countAndFlagsBits, v7, v8, v9);
      object = v10;
      sub_62F8(v14);
      swift_bridgeObjectRelease();
      v6 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n(v4, 2);
  }
  else
  {
    swift_bridgeObjectRetain(string._object);
  }
  v11 = countAndFlagsBits;
  v12 = object;
  result._object = v12;
  result._countAndFlagsBits = v11;
  return result;
}

uint64_t sub_14B4A0(uint64_t a1, uint64_t a2)
{
  return AggregateFlattener.flatten(string:)(*(Swift::String *)&a1)._countAndFlagsBits;
}

uint64_t _s20BooksPersonalization24StringOperationFlattenerC7flatten6stringS2S_tF_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  Class isa;
  NSString v11;
  id v12;
  uint64_t countAndFlagsBits;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1;
  v16 = a2;
  if (qword_1F0168 != -1)
    swift_once(&qword_1F0168, sub_14B2D4);
  v8 = sub_5216C(v4, (uint64_t)qword_1F7130);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = sub_3D7A0();
  StringProtocol.components(separatedBy:)(v7, &type metadata for String, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11 = String._bridgeToObjectiveC()();
  v12 = -[objc_class componentsJoinedByString:](isa, "componentsJoinedByString:", v11, v15, v16);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t dispatch thunk of StringFlatteningServiceType.flatten(string:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for StringOperationFlattener()
{
  return objc_opt_self(_TtC20BooksPersonalization24StringOperationFlattener);
}

uint64_t method lookup function for StringOperationFlattener(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for StringOperationFlattener);
}

uint64_t type metadata accessor for AggregateFlattener()
{
  return objc_opt_self(_TtC20BooksPersonalization18AggregateFlattener);
}

uint64_t method lookup function for AggregateFlattener(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for AggregateFlattener);
}

uint64_t *sub_14B69C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    *(_QWORD *)v9 = *(_QWORD *)v10;
    *((_QWORD *)v9 + 1) = v11;
    v12 = *((_QWORD *)v10 + 3);
    *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
    *((_QWORD *)v9 + 3) = v12;
    v9[32] = v10[32];
    v9[33] = v10[33];
    *((_QWORD *)v9 + 5) = *((_QWORD *)v10 + 5);
    v9[48] = v10[48];
    v14 = *((_QWORD *)v10 + 7);
    v13 = *((_QWORD *)v10 + 8);
    *((_QWORD *)v9 + 7) = v14;
    *((_QWORD *)v9 + 8) = v13;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_14B770(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 20));
  swift_bridgeObjectRelease(v5[1]);
  swift_bridgeObjectRelease(v5[3]);
  return swift_bridgeObjectRelease(v5[7]);
}

uint64_t sub_14B7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v10;
  v11 = *(_QWORD *)(v9 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = v11;
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v8 + 33) = *(_BYTE *)(v9 + 33);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v13 = *(_QWORD *)(v9 + 56);
  v12 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v8 + 56) = v13;
  *(_QWORD *)(v8 + 64) = v12;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t sub_14B870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 24) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v8 + 33) = *(_BYTE *)(v9 + 33);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v14 = *(_QWORD *)(v9 + 56);
  v15 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v8 + 56) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  return a1;
}

uint64_t sub_14B94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + 48) = v10;
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  v11 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v11;
  return a1;
}

uint64_t sub_14B9C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(v9 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = *(_QWORD *)(v8 + 24);
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 24) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(v8 + 32) = *(_BYTE *)(v9 + 32);
  *(_BYTE *)(v8 + 33) = *(_BYTE *)(v9 + 33);
  *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
  *(_BYTE *)(v8 + 48) = *(_BYTE *)(v9 + 48);
  v14 = *(_QWORD *)(v8 + 56);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(v9 + 56);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
  return a1;
}

uint64_t sub_14BA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_14BA80);
}

uint64_t sub_14BA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 24);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_14BB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_14BB0C);
}

uint64_t sub_14BB0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 24) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BookSuggestionsWork(uint64_t a1)
{
  uint64_t result;

  result = qword_1F72D8;
  if (!qword_1F72D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookSuggestionsWork);
  return result;
}

uint64_t sub_14BBC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "H";
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_14BC34(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >= v4)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = *(_QWORD *)(a2 + 16);
  sub_340D0(0, v6, 0);
  v7 = v6;
  v30 = v5;
  v31 = v4;
  v33 = a1;
  if (v6)
  {
    v8 = (uint64_t *)(a1 + 32);
    v9 = (uint64_t *)(a2 + 32);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    v10 = a2;
    while (v4)
    {
      if (!v5)
        goto LABEL_26;
      v11 = *v8;
      v12 = *v9;
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
      {
        v28 = v10;
        sub_340D0(v13 > 1, v14 + 1, 1);
        v10 = v28;
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      --v5;
      v15[4] = v11;
      v15[5] = v12;
      --v4;
      ++v9;
      ++v8;
      if (!--v6)
        goto LABEL_13;
    }
    __break(1u);
LABEL_26:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    v10 = a2;
LABEL_13:
    if (v31 <= v30)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v16 = 0;
    if (v7 <= v30)
      v17 = v30;
    else
      v17 = v7;
    v18 = v17 - v7;
    v19 = v31 - v7;
    v20 = 8 * v7 + 32;
    v21 = v33 + v20;
    v22 = v10 + v20;
    while (v19 != v16)
    {
      if (v30 - v7 == v16)
        goto LABEL_24;
      if (v18 == v16)
        goto LABEL_28;
      v23 = *(_QWORD *)(v21 + 8 * v16);
      v24 = *(_QWORD *)(v22 + 8 * v16);
      v26 = _swiftEmptyArrayStorage[2];
      v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1)
      {
        v29 = v10;
        v32 = v18;
        sub_340D0(v25 > 1, v26 + 1, 1);
        v18 = v32;
        v10 = v29;
      }
      _swiftEmptyArrayStorage[2] = v26 + 1;
      v27 = &_swiftEmptyArrayStorage[2 * v26];
      v27[4] = v23;
      v27[5] = v24;
      if (v19 == ++v16)
        goto LABEL_24;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t sub_14BE5C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;

  v3 = a1[38];
  if (v3)
  {
    v5 = a1[40];
    v34 = a1[39];
    v35 = a1[37];
    v6 = qword_1F0128;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v3);
    if (v6 != -1)
      swift_once(&qword_1F0128, sub_12F904);
    v7 = (id)qword_1F6200;
    v33 = static os_log_type_t.debug.getter();
    v8 = sub_5EDC(&qword_1F14C8);
    v9 = swift_allocObject(v8, 152, 7);
    *(_OWORD *)(v9 + 16) = xmmword_18CBA0;
    v10 = type metadata accessor for UUID(0);
    v11 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    v14 = v13;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    v15 = sub_4AAD8();
    *(_QWORD *)(v9 + 32) = v12;
    *(_QWORD *)(v9 + 40) = v14;
    *(_QWORD *)(v9 + 96) = &type metadata for String;
    *(_QWORD *)(v9 + 104) = v15;
    *(_QWORD *)(v9 + 64) = v15;
    *(_QWORD *)(v9 + 72) = v35;
    *(_QWORD *)(v9 + 80) = v3;
    *(_QWORD *)(v9 + 136) = &type metadata for String;
    *(_QWORD *)(v9 + 144) = v15;
    *(_QWORD *)(v9 + 112) = v34;
    *(_QWORD *)(v9 + 120) = v5;
    swift_bridgeObjectRetain(v5);
    *(_QWORD *)&v16 = swift_bridgeObjectRetain(v3).n128_u64[0];
    os_log(_:dso:log:type:_:)("Running on graph with request ID %{public}@ for output %{public}@ score %{public}@", 82, 2, &dword_0, v7, v33, v9, v16);

    swift_bridgeObjectRelease();
    v17 = (__int128 *)(v2 + *(int *)(type metadata accessor for BookSuggestionsWork(0) + 20));
    v18 = *((_QWORD *)v17 + 2);
    v19 = *((_QWORD *)v17 + 3);
    v20 = *((_BYTE *)v17 + 32);
    v21 = *((_BYTE *)v17 + 33);
    v22 = *((_QWORD *)v17 + 5);
    v23 = *((_BYTE *)v17 + 48);
    v24 = *((_QWORD *)v17 + 7);
    v25 = *((_QWORD *)v17 + 8);
    v36 = *v17;
    v37 = v18;
    v38 = v19;
    v39 = v20;
    v40 = v21;
    v41 = v22;
    v42 = v23;
    v43 = v24;
    v44 = v25;
    v26 = sub_14C224((uint64_t)&v36);
    v27 = sub_5EDC(&qword_1F1078);
    v28 = swift_allocObject(v27, 64, 7);
    *(_OWORD *)(v28 + 16) = xmmword_18FC00;
    *(_QWORD *)(v28 + 32) = v35;
    *(_QWORD *)(v28 + 40) = v3;
    *(_QWORD *)(v28 + 48) = v34;
    *(_QWORD *)(v28 + 56) = v5;
    v29 = type metadata accessor for Request(0);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v3);
    result = Request.init(features:outputs:)(v26, v28);
    *a2 = result;
    a2[1] = v35;
    a2[2] = v3;
    a2[3] = v34;
    a2[4] = v5;
  }
  else
  {
    v31 = sub_14CB20();
    v32 = swift_allocError(&type metadata for BookSuggestionsWork.Errors, v31, 0, 0);
    return swift_willThrow(v32);
  }
  return result;
}

unint64_t sub_14C0DC()
{
  return 0xD000000000000010;
}

double sub_14C0F8@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_14BE5C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

_QWORD *sub_14C13C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_14C938(a1[1], a1[2], a1[3], a1[4]);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_14C174(uint64_t a1)
{
  uint64_t result;

  result = sub_41754((unint64_t *)&qword_1F2B58, type metadata accessor for BookSuggestionsWork, (uint64_t)&unk_19CC34);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_14C1B0()
{
  return sub_41754(&qword_1F7310, type metadata accessor for BookSuggestionsWork, (uint64_t)&unk_19CBE0);
}

unint64_t sub_14C1E0()
{
  unint64_t result;

  result = qword_1F7318;
  if (!qword_1F7318)
  {
    result = swift_getWitnessTable(&unk_19CCB4, &type metadata for BookSuggestionsWork.Context);
    atomic_store(result, (unint64_t *)&qword_1F7318);
  }
  return result;
}

uint64_t sub_14C224(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t);
  void (*v88)(char *, char *, uint64_t);
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;

  v91 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Int32List(0);
  v93 = *(_QWORD *)(v91 - 8);
  v2 = __chkstk_darwin(v91);
  v4 = (char *)&v80 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v80 - v5;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(unsigned __int8 *)(a1 + 32);
  LODWORD(v90) = *(unsigned __int8 *)(a1 + 33);
  v95 = *(_QWORD *)(a1 + 40);
  LODWORD(v84) = *(unsigned __int8 *)(a1 + 48);
  v85 = *(_QWORD *)(a1 + 56);
  v83 = *(_QWORD *)(a1 + 64);
  v10 = sub_5EDC(&qword_1F14D8);
  v11 = sub_5EDC(&qword_1F14E0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = v11;
  v14 = *(_QWORD *)(v12 + 72);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v10, v16 - v14 + 8 * v14, v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_18CB90;
  v82 = v17;
  v18 = (_QWORD *)(v17 + v16);
  v19 = v17 + v16 + *(int *)(v13 + 48);
  *v18 = 0xD000000000000019;
  v18[1] = 0x80000000001A3350;
  sub_D19C8(v7, v8, v19);
  v20 = (_QWORD *)((char *)v18 + v14);
  *v20 = 0xD000000000000019;
  v20[1] = 0x80000000001A3370;
  if (v9)
    v21 = 0x6F6F626F69647561;
  else
    v21 = 0x6B6F6F6265;
  if (v9)
    v22 = 0xE90000000000006BLL;
  else
    v22 = 0xE500000000000000;
  v23 = *(int *)(v13 + 48);
  v92 = v13;
  sub_D19C8(v21, v22, (uint64_t)v20 + v23);
  swift_bridgeObjectRelease();
  v89 = 2 * v14;
  v24 = (_QWORD *)((char *)v18 + 2 * v14);
  *v24 = 0xD000000000000020;
  v24[1] = 0x80000000001A3390;
  v25 = sub_5EDC(&qword_1F1080);
  v26 = swift_allocObject(v25, 36, 7);
  v94 = xmmword_1875E0;
  *(_OWORD *)(v26 + 16) = xmmword_1875E0;
  *(_DWORD *)(v26 + 32) = (_DWORD)v90;
  v27 = v4;
  v28 = v6;
  Com_Apple_News_Algorithms_Proto_Model_Int32List.init()(v26);
  swift_bridgeObjectRetain(v26);
  v30 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v29);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v30);
  v31 = v93;
  v32 = v91;
  v88 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  v88(v27, v28, v91);
  v86 = v27;
  Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v27);
  v33 = *(void (**)(char *, uint64_t))(v31 + 8);
  v34 = v28;
  v87 = v33;
  v33(v28, v32);
  swift_bridgeObjectRelease();
  v93 = v14;
  v35 = v89 + v14;
  v89 = v25;
  v90 = v18;
  v36 = (_QWORD *)((char *)v18 + v35);
  *v36 = 0xD00000000000001CLL;
  v36[1] = 0x80000000001A33C0;
  result = swift_allocObject(v25, 36, 7);
  v38 = v95;
  *(_OWORD *)(result + 16) = v94;
  if (v38 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v38 > 0x7FFFFFFF)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v39 = result;
  *(_DWORD *)(result + 32) = v38;
  Com_Apple_News_Algorithms_Proto_Model_Int32List.init()(result);
  swift_bridgeObjectRetain(v39);
  v41 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v40);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v41);
  v42 = v86;
  v43 = v32;
  v44 = v88;
  v88(v86, v34, v32);
  Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v42);
  v45 = v87;
  v87(v34, v32);
  swift_bridgeObjectRelease();
  v95 = 4 * v93;
  v46 = v89;
  v47 = v90;
  v48 = (_QWORD *)((char *)v90 + 4 * v93);
  *v48 = 0xD00000000000001FLL;
  v48[1] = 0x80000000001A33E0;
  v49 = swift_allocObject(v46, 36, 7);
  *(_OWORD *)(v49 + 16) = v94;
  v50 = v92;
  *(_DWORD *)(v49 + 32) = (_DWORD)v84;
  Com_Apple_News_Algorithms_Proto_Model_Int32List.init()(v49);
  swift_bridgeObjectRetain(v49);
  v52 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v51);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v52);
  v44(v42, v34, v43);
  Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v42);
  v45(v34, v43);
  swift_bridgeObjectRelease();
  v53 = (_QWORD *)((char *)v47 + v95 + v93);
  *v53 = 0xD000000000000020;
  v53[1] = 0x80000000001A3400;
  v54 = v85;
  v55 = *(_QWORD *)(v85 + 16);
  v56 = _swiftEmptyArrayStorage;
  if (v55)
  {
    v81 = v53;
    v84 = v34;
    v97 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v85);
    sub_340F4(0, v55, 0);
    v56 = v97;
    result = sub_EDD8C(v54);
    v57 = result;
    v59 = v58;
    v61 = v60 & 1;
    v95 = v54 + 56;
    while ((v57 & 0x8000000000000000) == 0 && v57 < 1 << *(_BYTE *)(v54 + 32))
    {
      if (((*(_QWORD *)(v95 + (((unint64_t)v57 >> 3) & 0xFFFFFFFFFFFFF8)) >> v57) & 1) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(v54 + 36) != (_DWORD)v59)
        goto LABEL_24;
      v96 = *(_QWORD *)(*(_QWORD *)(v54 + 48) + 8 * v57);
      v62 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v64 = v63;
      v97 = v56;
      v66 = v56[2];
      v65 = v56[3];
      if (v66 >= v65 >> 1)
      {
        sub_340F4(v65 > 1, v66 + 1, 1);
        v56 = v97;
      }
      v56[2] = v66 + 1;
      v67 = &v56[2 * v66];
      v67[4] = v62;
      v67[5] = v64;
      result = sub_EDE30(v57, v59, v61 & 1, v54);
      v57 = result;
      v59 = v68;
      v61 = v69 & 1;
      if (!--v55)
      {
        sub_41814(result, v68, v69 & 1);
        swift_bridgeObjectRelease();
        v42 = v86;
        v34 = v84;
        v50 = v92;
        v53 = v81;
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_19:
  static Com_Apple_News_Algorithms_Proto_Model_Feature.fromStrings(_:)((uint64_t)v56, (uint64_t)v53 + *(int *)(v50 + 48));
  swift_bridgeObjectRelease();
  v70 = v89;
  v71 = (_QWORD *)((char *)v90 + 6 * v93);
  *v71 = 0xD000000000000026;
  v71[1] = 0x80000000001A3430;
  result = swift_allocObject(v70, 36, 7);
  *(_OWORD *)(result + 16) = v94;
  v72 = v91;
  if (v83 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v83 <= 0x7FFFFFFF)
  {
    v73 = result;
    *(_DWORD *)(result + 32) = v83;
    Com_Apple_News_Algorithms_Proto_Model_Int32List.init()(result);
    swift_bridgeObjectRetain(v73);
    v75 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v74);
    Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v75);
    v88(v42, v34, v72);
    Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v42);
    v87(v34, v72);
    swift_bridgeObjectRelease();
    v76 = sub_52F64(v82);
    v77 = sub_1791D4(v76);
    v78 = type metadata accessor for Features(0);
    swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
    v79 = Features.init(featureMap:)(v77);
    swift_bridgeObjectRelease();
    return v79;
  }
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_14C938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_178EA8(a1, a2);
  if (!v6)
  {
    if (qword_1F0128 != -1)
      swift_once(&qword_1F0128, sub_12F904);
    v11 = (id)qword_1F6200;
    v12 = static os_log_type_t.error.getter();
    v10 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Unable to extract books from output", 35, 2, &dword_0, v11, v12, _swiftEmptyArrayStorage);
    goto LABEL_14;
  }
  v7 = v6;
  v8 = sub_178C18(a3, a4);
  if (!v8)
  {
    swift_bridgeObjectRelease();
    if (qword_1F0128 != -1)
      swift_once(&qword_1F0128, sub_12F904);
    v11 = (id)qword_1F6200;
    v13 = static os_log_type_t.error.getter();
    v10 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Unable to extract book scores from output", 41, 2, &dword_0, v11, v13, _swiftEmptyArrayStorage);
    goto LABEL_14;
  }
  if (v8[2] != *(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1F0128 != -1)
      swift_once(&qword_1F0128, sub_12F904);
    v11 = (id)qword_1F6200;
    v14 = static os_log_type_t.error.getter();
    v10 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:type:_:)("Mismatch on book count and scores", 33, 2, &dword_0, v11, v14, _swiftEmptyArrayStorage);
LABEL_14:

    return v10;
  }
  sub_14BC34(v7, (uint64_t)v8);
  v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t sub_14CB20()
{
  unint64_t result;

  result = qword_1F7320;
  if (!qword_1F7320)
  {
    result = swift_getWitnessTable(&unk_19CD54, &type metadata for BookSuggestionsWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F7320);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BookSuggestionsWork.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_14CBA4 + 4 * byte_19CBA0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_14CBC4 + 4 * byte_19CBA5[v4]))();
}

_BYTE *sub_14CBA4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_14CBC4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_14CBCC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_14CBD4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_14CBDC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_14CBE4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BookSuggestionsWork.Errors()
{
  return &type metadata for BookSuggestionsWork.Errors;
}

uint64_t destroy for BookSuggestionsWork.Context(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *initializeWithCopy for BookSuggestionsWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v7 = a2[4];
  a1[4] = v7;
  swift_retain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for BookSuggestionsWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *assignWithTake for BookSuggestionsWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookSuggestionsWork.Context(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BookSuggestionsWork.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookSuggestionsWork.Context()
{
  return &type metadata for BookSuggestionsWork.Context;
}

unint64_t sub_14CE00()
{
  unint64_t result;

  result = qword_1F7328;
  if (!qword_1F7328)
  {
    result = swift_getWitnessTable(&unk_19CD2C, &type metadata for BookSuggestionsWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F7328);
  }
  return result;
}

Swift::Int sub_14CE44(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  Swift::Int result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  float v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[9];
  _QWORD *v38;

  v2 = _swiftEmptyDictionarySingleton;
  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  v38 = _swiftEmptyDictionarySingleton;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & v3;
  v8 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_23;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    if (v13 >= v8)
      goto LABEL_49;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    v15 = v10 + 1;
    if (!v14)
    {
      v15 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_49;
      v14 = *(_QWORD *)(v4 + 8 * v15);
      if (!v14)
      {
        v15 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_49;
        v14 = *(_QWORD *)(v4 + 8 * v15);
        if (!v14)
        {
          v15 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_49;
          v14 = *(_QWORD *)(v4 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v10 = v15;
LABEL_23:
    v17 = *(_QWORD *)(a1 + 56) + 8 * v12;
    if ((*(_BYTE *)(v17 + 4) & 1) == 0)
    {
      v18 = *(float *)v17;
      if (*(float *)v17 != 0.0)
      {
        v19 = *(_OWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12);
        v20 = v2[2];
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v12 + 8);
        v36 = v19;
        if (v2[3] <= v20)
        {
          v22 = v20 + 1;
          sub_1F6D4(v19, *((unint64_t *)&v19 + 1));
          sub_161650(v22, 1);
          v2 = v38;
        }
        else
        {
          sub_1F6D4(v19, *((unint64_t *)&v19 + 1));
        }
        Hasher.init(_seed:)(v37, v2[5]);
        v23 = v36;
        if (v21 == 1)
          v23 = 0xD000000000000012;
        v24 = 0x800000000019FA50;
        if (v21 != 1)
          v24 = v21;
        if (v21)
          v25 = v23;
        else
          v25 = 0x4148435255504F43;
        if (v21)
          v26 = v24;
        else
          v26 = 0xEA00000000004553;
        sub_1F6D4(v36, v21);
        String.hash(into:)(v37, v25, v26);
        swift_bridgeObjectRelease();
        result = Hasher._finalize()();
        v27 = v2 + 8;
        v28 = -1 << *((_BYTE *)v2 + 32);
        v29 = result & ~v28;
        v30 = v29 >> 6;
        if (((-1 << v29) & ~v2[(v29 >> 6) + 8]) == 0)
        {
          v32 = 0;
          v33 = (unint64_t)(63 - v28) >> 6;
          while (++v30 != v33 || (v32 & 1) == 0)
          {
            v34 = v30 == v33;
            if (v30 == v33)
              v30 = 0;
            v32 |= v34;
            v35 = v27[v30];
            if (v35 != -1)
            {
              v31 = __clz(__rbit64(~v35)) + (v30 << 6);
              goto LABEL_48;
            }
          }
          goto LABEL_51;
        }
        v31 = __clz(__rbit64((-1 << v29) & ~v2[(v29 >> 6) + 8])) | v29 & 0x7FFFFFFFFFFFFFC0;
LABEL_48:
        *(_QWORD *)((char *)v27 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
        *(_OWORD *)(v2[6] + 16 * v31) = v36;
        *(double *)(v2[7] + 8 * v31) = v18;
        ++v2[2];
      }
    }
  }
  v16 = v10 + 5;
  if (v10 + 5 >= v8)
  {
LABEL_49:
    sub_5FEC(a1);
    return (Swift::Int)v2;
  }
  v14 = *(_QWORD *)(v4 + 8 * v16);
  if (v14)
  {
    v15 = v10 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v8)
      goto LABEL_49;
    v14 = *(_QWORD *)(v4 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_22;
  }
LABEL_52:
  __break(1u);
  return result;
}

void sub_14D1A4()
{
  __asm { BR              X11 }
}

uint64_t sub_14D1DC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2[6];
  v3 = v2[7];
  v6 = v2[4];
  v5 = v2[5];
  v8 = v2[2];
  v7 = v2[3];
  v9 = v2[1];
  *a1 = v1;
  a1[1] = v9;
  a1[2] = v8;
  a1[3] = v7;
  a1[4] = v6;
  a1[5] = v5;
  a1[6] = v4;
  a1[7] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v4);
}

_QWORD *sub_14D3BC(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_343C4(0, v1, 0);
  result = (_QWORD *)sub_EDD8C(a1);
  v4 = (uint64_t)result;
  v6 = v5;
  v8 = v7 & 1;
  while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
      goto LABEL_13;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v6)
      goto LABEL_14;
    v9 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v4);
    v11 = _swiftEmptyArrayStorage[2];
    v10 = _swiftEmptyArrayStorage[3];
    if (v11 >= v10 >> 1)
      sub_343C4(v10 > 1, v11 + 1, 1);
    _swiftEmptyArrayStorage[2] = v11 + 1;
    v12 = &_swiftEmptyArrayStorage[2 * v11];
    v12[4] = 0;
    v12[5] = v9;
    result = (_QWORD *)sub_EDE30(v4, v6, v8 & 1, a1);
    v4 = (uint64_t)result;
    v6 = v13;
    v8 = v14 & 1;
    if (!--v1)
    {
      sub_41814((uint64_t)result, v13, v14 & 1);
      return _swiftEmptyArrayStorage;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

_QWORD *sub_14D510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 56);
  if (!v1)
    return (_QWORD *)sub_5FF34(_swiftEmptyArrayStorage);
  v31 = *(_QWORD *)(v1 + 16);
  if (!v31)
    return _swiftEmptyDictionarySingleton;
  v30 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v2 = 0;
  while (1)
  {
    v4 = (uint64_t *)(v30 + 16 * v2);
    v5 = *v4;
    if (*v4 < 0)
      break;
    v6 = v4[1];
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain_n(v6, 2);
      sub_340AC(0, v7, 0);
      v32 = v6;
      v8 = *(_QWORD *)(v6 + 32);
      if (v8 < 0)
        break;
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_340AC(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v8;
      v11 = v7 - 1;
      if (v7 != 1)
      {
        v25 = v10 + 5;
        v26 = (uint64_t *)(v32 + 40);
        while (v11)
        {
          v27 = *v26;
          if (*v26 < 0)
            goto LABEL_38;
          v28 = _swiftEmptyArrayStorage[3];
          if (v25 - 4 >= v28 >> 1)
            sub_340AC(v28 > 1, v25 - 3, 1);
          _swiftEmptyArrayStorage[2] = v25 - 3;
          _swiftEmptyArrayStorage[v25++] = v27;
          ++v26;
          if (!--v11)
            goto LABEL_12;
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        break;
      }
LABEL_12:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain(v4[1]);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v14 = sub_39228(v5);
    v15 = _swiftEmptyDictionarySingleton[2];
    v16 = (v13 & 1) == 0;
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      goto LABEL_36;
    v18 = v13;
    if (_swiftEmptyDictionarySingleton[3] >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v13 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_16B8D4();
        if ((v18 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_15AC54(v17, isUniquelyReferenced_nonNull_native);
      v19 = sub_39228(v5);
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_39;
      v14 = v19;
      if ((v18 & 1) != 0)
      {
LABEL_4:
        v3 = _swiftEmptyDictionarySingleton[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v3 + 8 * v14) = _swiftEmptyArrayStorage;
        goto LABEL_5;
      }
    }
    _swiftEmptyDictionarySingleton[(v14 >> 6) + 8] |= 1 << v14;
    v21 = 8 * v14;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v21) = v5;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v21) = _swiftEmptyArrayStorage;
    v22 = _swiftEmptyDictionarySingleton[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_37;
    _swiftEmptyDictionarySingleton[2] = v24;
LABEL_5:
    ++v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v2 == v31)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
LABEL_38:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_39:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_14D860()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *result;

  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
    return (_QWORD *)sub_5FF40((uint64_t)_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  for (i = (_BYTE *)(v1 + 56); ; i += 32)
  {
    if ((*(i - 16) & 1) != 0 || (*i & 1) != 0)
      goto LABEL_6;
    v4 = *((_QWORD *)i - 3);
    if (v4 < 0)
      goto LABEL_27;
    v5 = *((_QWORD *)i - 1);
    if (v5 < 0)
      goto LABEL_27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v8 = sub_39228(v4);
    v9 = _swiftEmptyDictionarySingleton[2];
    v10 = (v7 & 1) == 0;
    v11 = v9 + v10;
    if (__OFADD__(v9, v10))
      break;
    v12 = v7;
    if (_swiftEmptyDictionarySingleton[3] >= v11)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v7 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        sub_16B724();
        if ((v12 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      sub_15A924(v11, isUniquelyReferenced_nonNull_native);
      v13 = sub_39228(v4);
      if ((v12 & 1) != (v14 & 1))
        goto LABEL_28;
      v8 = v13;
      if ((v12 & 1) == 0)
      {
LABEL_18:
        _swiftEmptyDictionarySingleton[(v8 >> 6) + 8] |= 1 << v8;
        v15 = 8 * v8;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v15) = v4;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v15) = v5;
        v16 = _swiftEmptyDictionarySingleton[2];
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
          goto LABEL_26;
        _swiftEmptyDictionarySingleton[2] = v18;
        goto LABEL_5;
      }
    }
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v8) = v5;
LABEL_5:
    swift_bridgeObjectRelease();
LABEL_6:
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_28:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_14DA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *i;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *result;

  v1 = *(_QWORD *)(v0 + 32);
  if (!v1)
    return (_QWORD *)sub_5FE60((uint64_t)_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return _swiftEmptyDictionarySingleton;
  for (i = (unint64_t *)(swift_bridgeObjectRetain(v1) + 56); ; i += 4)
  {
    if ((*(_BYTE *)(i - 2) & 1) != 0)
      goto LABEL_6;
    v4 = *i;
    if (*i == 2)
      goto LABEL_6;
    v5 = *(i - 3);
    if (v5 < 0)
      goto LABEL_34;
    v6 = *(i - 1);
    if (v4)
    {
      if (v4 != 1)
      {
        v17 = sub_39228(*(i - 3));
        if ((v18 & 1) == 0)
          goto LABEL_6;
        v19 = v17;
        sub_1E9F8(v6, v4);
        if (!swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton))
          sub_16BF38();
        sub_16F2A0(v19, (uint64_t)_swiftEmptyDictionarySingleton);
        goto LABEL_5;
      }
      v7 = 1;
    }
    else
    {
      v7 = 0;
    }
    sub_1E9F8(*(i - 1), *i);
    sub_1E9F8(v6, v4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v10 = sub_39228(v5);
    v11 = _swiftEmptyDictionarySingleton[2];
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      break;
    v14 = v9;
    if (_swiftEmptyDictionarySingleton[3] >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v9 & 1) == 0)
          goto LABEL_25;
      }
      else
      {
        sub_16BF38();
        if ((v14 & 1) == 0)
          goto LABEL_25;
      }
    }
    else
    {
      sub_15BDDC(v13, isUniquelyReferenced_nonNull_native);
      v15 = sub_39228(v5);
      if ((v14 & 1) != (v16 & 1))
        goto LABEL_35;
      v10 = v15;
      if ((v14 & 1) == 0)
      {
LABEL_25:
        _swiftEmptyDictionarySingleton[(v10 >> 6) + 8] |= 1 << v10;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v10) = v5;
        *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v10) = v7;
        v20 = _swiftEmptyDictionarySingleton[2];
        v21 = __OFADD__(v20, 1);
        v22 = v20 + 1;
        if (v21)
          goto LABEL_33;
        _swiftEmptyDictionarySingleton[2] = v22;
        goto LABEL_5;
      }
    }
    *(_BYTE *)(_swiftEmptyDictionarySingleton[7] + v10) = v7;
LABEL_5:
    swift_bridgeObjectRelease();
    sub_26BA4(v6, v4);
LABEL_6:
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_35:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_14DD24()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  float v11;
  char v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t j;
  char v17;
  char v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  unint64_t v25;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t result;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD v62[10];

  v1 = *v0;
  v2 = _swiftEmptyArrayStorage;
  v62[0] = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v1);
    for (i = 0; i != v3; ++i)
    {
      v5 = *(_QWORD *)(v1 + 8 * i + 32);
      if (v5)
      {
        v6 = swift_bridgeObjectRetain(v5);
        sub_10F6AC(v6);
      }
    }
    swift_bridgeObjectRelease();
    v2 = (_QWORD *)v62[0];
  }
  v7 = v2[2];
  if (!v7)
  {
    v56 = _swiftEmptyDictionarySingleton;
LABEL_75:
    swift_bridgeObjectRelease();
    return (uint64_t)v56;
  }
  v59 = v2 + 4;
  swift_bridgeObjectRetain(v2);
  v8 = 0;
  v9 = _swiftEmptyDictionarySingleton;
  v58 = v7;
  while (1)
  {
    v10 = &v59[8 * v8];
    v60 = v10[2];
    v61 = v9;
    v11 = *((float *)v10 + 11);
    v12 = *((_BYTE *)v10 + 48);
    v13 = v10[7];
    if ((v10[5] & 1) != 0 || *((float *)v10 + 9) <= 0.0)
    {
      swift_bridgeObjectRetain(v10[7]);
      goto LABEL_18;
    }
    Hasher.init(_seed:)(v62, *((_QWORD *)&_swiftEmptySetSingleton + 5));
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(v62, 0x6168637275706F63, 0xEA00000000006573);
    v14 = Hasher._finalize()();
    v15 = ~(-1 << *((_BYTE *)&_swiftEmptySetSingleton + 32));
    for (j = v14 & v15;
          ((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((j >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> j) & 1) != 0;
          j = (j + 1) & v15)
    {
      if ((*(_BYTE *)(*((_QWORD *)&_swiftEmptySetSingleton + 6) + j) & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_63:
        v9 = v61;
        goto LABEL_18;
      }
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000019F150, 0x6168637275706F63, 0xEA00000000006573, 0);
      swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
        goto LABEL_63;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
    v27 = *((_QWORD *)&_swiftEmptySetSingleton + 2);
    if (*((_QWORD *)&_swiftEmptySetSingleton + 3) > v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_168550();
      goto LABEL_71;
    }
    v29 = v27 + 1;
    if (isUniquelyReferenced_nonNull_native)
      sub_1650D0(v29);
    else
      sub_169C9C(v29);
    Hasher.init(_seed:)(v62, *((_QWORD *)&_swiftEmptySetSingleton + 5));
    String.hash(into:)(v62, 0x6168637275706F63, 0xEA00000000006573);
    v50 = Hasher._finalize()();
    v51 = -1 << *((_BYTE *)&_swiftEmptySetSingleton + 32);
    j = v50 & ~v51;
    if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((j >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> j) & 1) != 0)
      break;
LABEL_70:
    v7 = v58;
LABEL_71:
    *(_QWORD *)((char *)&_swiftEmptySetSingleton + ((j >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << j;
    *(_BYTE *)(*((_QWORD *)&_swiftEmptySetSingleton + 6) + j) = 0;
    v54 = *((_QWORD *)&_swiftEmptySetSingleton + 2);
    v35 = __OFADD__(v54, 1);
    v55 = v54 + 1;
    v9 = v61;
    if (v35)
      goto LABEL_79;
    *((_QWORD *)&_swiftEmptySetSingleton + 2) = v55;
    swift_bridgeObjectRelease();
LABEL_18:
    if (v11 <= 0.0)
      v18 = 1;
    else
      v18 = v12;
    if ((v18 & 1) != 0)
      goto LABEL_38;
    Hasher.init(_seed:)(v62, *((_QWORD *)&_swiftEmptySetSingleton + 5));
    swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
    String.hash(into:)(v62, 0xD000000000000011, 0x800000000019F150);
    v19 = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)&_swiftEmptySetSingleton + 32);
    v21 = v19 & ~v20;
    if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v21 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v21) & 1) != 0)
    {
      v22 = ~v20;
      while (*(_BYTE *)(*((_QWORD *)&_swiftEmptySetSingleton + 6) + v21) != 1)
      {
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6168637275706F63, 0xEA00000000006573, 0xD000000000000011, 0x800000000019F150, 0);
        swift_bridgeObjectRelease();
        if ((v23 & 1) != 0)
          goto LABEL_37;
        v21 = (v21 + 1) & v22;
        if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v21 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v21) & 1) == 0)
          goto LABEL_27;
      }
      swift_bridgeObjectRelease();
LABEL_37:
      swift_bridgeObjectRelease();
      v9 = v61;
LABEL_38:
      if (!*((_QWORD *)&_swiftEmptySetSingleton + 2))
        goto LABEL_9;
LABEL_51:
      if (v60 < 0)
        goto LABEL_82;
      v37 = swift_isUniquelyReferenced_nonNull_native(v61);
      v62[0] = v61;
      v39 = sub_39228(v60);
      v40 = v61[2];
      v41 = (v38 & 1) == 0;
      v42 = v40 + v41;
      if (__OFADD__(v40, v41))
      {
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
        goto LABEL_80;
      }
      v43 = v38;
      if (v61[3] >= v42)
      {
        if ((v37 & 1) == 0)
          sub_16C0C4();
      }
      else
      {
        sub_15C078(v42, v37);
        v44 = sub_39228(v60);
        if ((v43 & 1) != (v45 & 1))
          goto LABEL_83;
        v39 = v44;
      }
      v9 = (_QWORD *)v62[0];
      if ((v43 & 1) != 0)
      {
        v46 = (_QWORD *)v62[0];
        v47 = *(_QWORD *)(v62[0] + 56);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v47 + 8 * v39) = &_swiftEmptySetSingleton;
        v9 = v46;
      }
      else
      {
        *(_QWORD *)(v62[0] + 8 * (v39 >> 6) + 64) |= 1 << v39;
        *(_QWORD *)(v9[6] + 8 * v39) = v60;
        *(_QWORD *)(v9[7] + 8 * v39) = &_swiftEmptySetSingleton;
        v48 = v9[2];
        v35 = __OFADD__(v48, 1);
        v49 = v48 + 1;
        if (v35)
          goto LABEL_77;
        v9[2] = v49;
      }
      goto LABEL_9;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    v24 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
    v25 = *((_QWORD *)&_swiftEmptySetSingleton + 2);
    if (*((_QWORD *)&_swiftEmptySetSingleton + 3) <= v25)
    {
      v28 = v25 + 1;
      if (v24)
        sub_1650D0(v28);
      else
        sub_169C9C(v28);
      Hasher.init(_seed:)(v62, *((_QWORD *)&_swiftEmptySetSingleton + 5));
      String.hash(into:)(v62, 0xD000000000000011, 0x800000000019F150);
      v30 = Hasher._finalize()();
      v31 = -1 << *((_BYTE *)&_swiftEmptySetSingleton + 32);
      v21 = v30 & ~v31;
      if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v21 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v21) & 1) != 0)
      {
        v32 = ~v31;
        while (*(_BYTE *)(*((_QWORD *)&_swiftEmptySetSingleton + 6) + v21) != 1)
        {
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6168637275706F63, 0xEA00000000006573, 0xD000000000000011, 0x800000000019F150, 0);
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
            goto LABEL_81;
          v21 = (v21 + 1) & v32;
          if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v21 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v21) & 1) == 0)
            goto LABEL_48;
        }
        goto LABEL_80;
      }
LABEL_48:
      v9 = v61;
    }
    else
    {
      v9 = v61;
      if ((v24 & 1) == 0)
      {
        sub_168550();
        v9 = v61;
      }
    }
    *(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) |= 1 << v21;
    *(_BYTE *)(*((_QWORD *)&_swiftEmptySetSingleton + 6) + v21) = 1;
    v34 = *((_QWORD *)&_swiftEmptySetSingleton + 2);
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_78;
    *((_QWORD *)&_swiftEmptySetSingleton + 2) = v36;
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&_swiftEmptySetSingleton + 2))
      goto LABEL_51;
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (++v8 == v7)
    {
      v56 = v9;
      swift_bridgeObjectRelease();
      goto LABEL_75;
    }
  }
  v52 = ~v51;
  while ((*(_BYTE *)(*((_QWORD *)&_swiftEmptySetSingleton + 6) + j) & 1) != 0)
  {
    v53 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000000019F150, 0x6168637275706F63, 0xEA00000000006573, 0);
    swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
      goto LABEL_81;
    j = (j + 1) & v52;
    if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((j >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> j) & 1) == 0)
      goto LABEL_70;
  }
LABEL_80:
  swift_bridgeObjectRelease();
LABEL_81:
  ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Methodology);
  __break(1u);
LABEL_82:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_83:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_14E50C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 8);
  if (!v1)
    return (_QWORD *)sub_656FC(_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return _swiftEmptyDictionarySingleton;
  v3 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v4 = 0;
  v5 = _swiftEmptyDictionarySingleton;
  v30 = v2;
  while (1)
  {
    v7 = v3 + 24 * v4;
    if ((*(_BYTE *)(v7 + 8) & 1) != 0)
      goto LABEL_6;
    v8 = *(_QWORD *)(v7 + 16);
    if (!v8)
      goto LABEL_6;
    v9 = *(_QWORD *)v7;
    if ((*(_QWORD *)v7 & 0x8000000000000000) != 0)
      goto LABEL_30;
    v10 = *(_QWORD *)(v8 + 16);
    swift_bridgeObjectRetain_n(*(_QWORD *)(v7 + 16), 2);
    v11 = Set.init(minimumCapacity:)(v10, &type metadata for String, &protocol witness table for String);
    v32 = v11;
    v12 = *(_QWORD *)(v8 + 16);
    if (v12)
    {
      v13 = (uint64_t *)(v8 + 40);
      do
      {
        v14 = *(v13 - 1);
        v15 = *v13;
        swift_bridgeObjectRetain(*v13);
        sub_1625CC((uint64_t *)&v31, v14, v15);
        swift_bridgeObjectRelease();
        v13 += 2;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      v16 = v32;
    }
    else
    {
      v16 = v11;
      swift_bridgeObjectRelease();
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v31 = v5;
    v19 = sub_39228(v9);
    v20 = v5[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (v5[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_16C0D0();
    }
    else
    {
      sub_15C084(v22, isUniquelyReferenced_nonNull_native);
      v24 = sub_39228(v9);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_31;
      v19 = v24;
    }
    v5 = v31;
    if ((v23 & 1) != 0)
    {
      v6 = v31[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v6 + 8 * v19) = v16;
    }
    else
    {
      v31[(v19 >> 6) + 8] |= 1 << v19;
      *(_QWORD *)(v5[6] + 8 * v19) = v9;
      *(_QWORD *)(v5[7] + 8 * v19) = v16;
      v26 = v5[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_29;
      v5[2] = v28;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = v30;
LABEL_6:
    if (++v4 == v2)
    {
      swift_bridgeObjectRelease();
      return v5;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_31:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_14E7C8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  int v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  unint64_t v31;
  Swift::Int v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64_t v38;
  int64_t v39;
  uint64_t isUniquelyReferenced_nonNull_native;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *result;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char v60[88];
  _QWORD *v61;

  v2 = v1;
  v3 = *v0;
  v56 = *(_QWORD *)(*v0 + 16);
  if (v56)
  {
    v54 = *v0;
    v55 = v3 + 32;
    swift_bridgeObjectRetain_n(v3, 2);
    v4 = 0;
    v5 = _swiftEmptyArrayStorage;
    while (1)
    {
      v6 = *(_QWORD *)(v55 + 8 * v4);
      if (!v6)
      {
        v48 = type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2.Errors(0);
        v49 = sub_41754(&qword_1F6728, type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2.Errors, (uint64_t)&unk_19BDC8);
        swift_allocError(v48, v49, 0, 0);
        v51 = swift_storeEnumTagMultiPayload(v50, v48, 9);
        swift_willThrow(v51);
        swift_bridgeObjectRelease_n(v54, 2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n(0, 2);
        return v5;
      }
      v57 = v4;
      v58 = v5;
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
        break;
      swift_bridgeObjectRetain(v6);
      v61 = _swiftEmptyArrayStorage;
LABEL_25:
      v37 = v61[2];
      v5 = v58;
      v38 = v58[2];
      v39 = v38 + v37;
      if (__OFADD__(v38, v37))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v58);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v39 > v58[3] >> 1)
      {
        if (v38 <= v39)
          v41 = v38 + v37;
        else
          v41 = v38;
        v5 = sub_3055C((_QWORD *)isUniquelyReferenced_nonNull_native, v41, 1, v58);
      }
      if (v61[2])
      {
        v42 = v5[2];
        if ((v5[3] >> 1) - v42 < v37)
          goto LABEL_48;
        v43 = &v5[3 * v42 + 4];
        if (v61 + 4 < &v43[3 * v37] && v43 < &v61[3 * v37 + 4])
          goto LABEL_51;
        swift_arrayInitWithCopy(v43);
        if (v37)
        {
          v45 = v5[2];
          v46 = __OFADD__(v45, v37);
          v47 = v45 + v37;
          if (v46)
            goto LABEL_49;
          v5[2] = v47;
        }
      }
      else if (v37)
      {
        goto LABEL_47;
      }
      v4 = v57 + 1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v57 + 1 == v56)
      {
        swift_bridgeObjectRelease_n(v54, 2);
        return v5;
      }
    }
    v8 = swift_bridgeObjectRetain(v6) + 88;
    v61 = _swiftEmptyArrayStorage;
    while (1)
    {
      v9 = *(_QWORD *)(v8 - 40);
      if (v9 < 0)
        break;
      v10 = *(_QWORD *)v8;
      if (*(_QWORD *)(*(_QWORD *)v8 + 16) && *(_BYTE *)(v10 + 40) != 1)
      {
        v24 = *(_DWORD *)(v8 - 20);
        v25 = *(_BYTE *)(v8 - 16);
        v59 = v2;
        v26 = *(_DWORD *)(v8 - 12);
        v27 = *(_BYTE *)(v8 - 8);
        v28 = *(_QWORD *)(v10 + 32);
        v29 = sub_5EDC(&qword_1F7330);
        inited = swift_initStackObject(v29, v60);
        *(_OWORD *)(inited + 16) = xmmword_18FC00;
        *(_QWORD *)(inited + 32) = 0;
        *(_QWORD *)(inited + 40) = 0;
        *(_DWORD *)(inited + 48) = v24;
        *(_BYTE *)(inited + 52) = v25;
        *(_OWORD *)(inited + 56) = xmmword_18CB70;
        *(_DWORD *)(inited + 72) = v26;
        *(_BYTE *)(inited + 76) = v27;
        v31 = sub_53858(inited);
        v32 = sub_14CE44(v31);
        v2 = v59;
        swift_bridgeObjectRelease();
        if (v28 < 0)
          break;
        if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
          v61 = sub_3055C(0, v61[2] + 1, 1, v61);
        v34 = v61[2];
        v33 = v61[3];
        if (v34 >= v33 >> 1)
          v61 = sub_3055C((_QWORD *)(v33 > 1), v34 + 1, 1, v61);
        v35 = v61;
        v61[2] = v34 + 1;
        v36 = &v35[3 * v34];
        v36[4] = v9;
        v36[5] = v32;
        v36[6] = v28;
      }
      else
      {
        v11 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
        v12 = sub_41754((unint64_t *)&qword_1F4180, type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors, (uint64_t)&unk_19B4A4);
        v13 = swift_allocError(v11, v12, 0, 0);
        *v14 = v9;
        v15 = swift_storeEnumTagMultiPayload(v14, v11, 6);
        swift_willThrow(v15);
        if (qword_1F0180 != -1)
          swift_once(&qword_1F0180, sub_17184C);
        v16 = type metadata accessor for Logger(0);
        sub_5216C(v16, (uint64_t)qword_224630);
        swift_errorRetain(v13);
        swift_errorRetain(v13);
        v17 = swift_bridgeObjectRetain(v10);
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v18, v19))
        {
          v20 = swift_slowAlloc(22, -1);
          v21 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v20 = 134218242;
          *(_QWORD *)(v20 + 4) = v9;
          swift_bridgeObjectRelease();
          *(_WORD *)(v20 + 12) = 2112;
          swift_errorRetain(v13);
          v22 = _swift_stdlib_bridgeErrorToNSError(v13);
          *(_QWORD *)(v20 + 14) = v22;
          *v21 = v22;
          swift_errorRelease(v13);
          swift_errorRelease(v13);
          _os_log_impl(&dword_0, v18, v19, "failed to create recommended book for %lld with error %@", (uint8_t *)v20, 0x16u);
          v23 = sub_5EDC(&qword_1F3158);
          swift_arrayDestroy(v21, 1, v23);
          swift_slowDealloc(v21, -1, -1);
          swift_slowDealloc(v20, -1, -1);

          swift_errorRelease(v13);
        }
        else
        {
          swift_errorRelease(v13);
          swift_bridgeObjectRelease();
          swift_errorRelease(v13);
          swift_errorRelease(v13);

        }
        v2 = 0;
      }
      v8 += 64;
      if (!--v7)
        goto LABEL_25;
    }
LABEL_50:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
LABEL_51:
    LOBYTE(v53) = 2;
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v53, 1092, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_14EDB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *result;

  v1 = *(_QWORD *)(v0 + 48);
  if (!v1)
    return (_QWORD *)sub_65708((uint64_t)_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
  for (i = (_QWORD *)(v1 + 48); ; i += 3)
  {
    if ((*(_BYTE *)(i - 1) & 1) != 0)
      goto LABEL_6;
    v4 = *i;
    if (!*i || !*(_QWORD *)(v4 + 16))
      goto LABEL_6;
    v5 = *(i - 2);
    if (v5 < 0)
      goto LABEL_27;
    v6 = *(_QWORD *)(v4 + 32);
    swift_bridgeObjectRetain(*i);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v9 = sub_39228(v5);
    v10 = _swiftEmptyDictionarySingleton[2];
    v11 = (v8 & 1) == 0;
    v12 = v10 + v11;
    if (__OFADD__(v10, v11))
      break;
    v13 = v8;
    if (_swiftEmptyDictionarySingleton[3] >= v12)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v8 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        sub_16C0DC();
        if ((v13 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      sub_15C090(v12, isUniquelyReferenced_nonNull_native);
      v14 = sub_39228(v5);
      if ((v13 & 1) != (v15 & 1))
        goto LABEL_28;
      v9 = v14;
      if ((v13 & 1) == 0)
      {
LABEL_18:
        _swiftEmptyDictionarySingleton[(v9 >> 6) + 8] |= 1 << v9;
        v16 = 8 * v9;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v16) = v5;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v16) = v6;
        v17 = _swiftEmptyDictionarySingleton[2];
        v18 = __OFADD__(v17, 1);
        v19 = v17 + 1;
        if (v18)
          goto LABEL_26;
        _swiftEmptyDictionarySingleton[2] = v19;
        goto LABEL_5;
      }
    }
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v9) = v6;
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_28:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_14EFF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *result;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return (_QWORD *)sub_657E0(_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  for (i = (_QWORD *)(v1 + 56); ; i += 4)
  {
    if ((*(_BYTE *)(i - 2) & 1) != 0)
      goto LABEL_6;
    v5 = *i;
    if (!*i)
      goto LABEL_6;
    v6 = *(i - 3);
    if (v6 < 0)
      goto LABEL_26;
    v7 = *(i - 1);
    swift_bridgeObjectRetain_n(*i, 2);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v10 = sub_39228(v6);
    v11 = _swiftEmptyDictionarySingleton[2];
    v12 = (v9 & 1) == 0;
    v13 = v11 + v12;
    if (__OFADD__(v11, v12))
      break;
    v14 = v9;
    if (_swiftEmptyDictionarySingleton[3] >= v13)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v9 & 1) == 0)
          goto LABEL_17;
      }
      else
      {
        sub_16C268();
        if ((v14 & 1) == 0)
          goto LABEL_17;
      }
    }
    else
    {
      sub_15C338(v13, isUniquelyReferenced_nonNull_native);
      v15 = sub_39228(v6);
      if ((v14 & 1) != (v16 & 1))
        goto LABEL_27;
      v10 = v15;
      if ((v14 & 1) == 0)
      {
LABEL_17:
        _swiftEmptyDictionarySingleton[(v10 >> 6) + 8] |= 1 << v10;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v10) = v6;
        v17 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v10);
        *v17 = v7;
        v17[1] = v5;
        v18 = _swiftEmptyDictionarySingleton[2];
        v19 = __OFADD__(v18, 1);
        v20 = v18 + 1;
        if (v19)
          goto LABEL_25;
        _swiftEmptyDictionarySingleton[2] = v20;
        goto LABEL_5;
      }
    }
    v4 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v10);
    swift_bridgeObjectRelease();
    *v4 = v7;
    v4[1] = v5;
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_27:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for IdentityBookScorer()
{
  return objc_opt_self(_TtC20BooksPersonalization18IdentityBookScorer);
}

uint64_t sub_14F24C(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
  swift_bridgeObjectRetain(a1);
  return sub_14F28C(v3, v1, a1);
}

uint64_t sub_14F28C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t sub_14F2A0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for DelegatingCollectionService, (uint64_t)&off_1E7E40, a2);
}

uint64_t sub_14F2B4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for SeedBasedRecommendationServiceResolver, (uint64_t)&off_1E83D8, a2);
}

uint64_t sub_14F2C8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, type metadata accessor for CollectionRecommendationService, (uint64_t)&off_1E4278, a2);
}

uint64_t sub_14F2DC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for DefaultBookClusteringService, (uint64_t)&off_1EA270, a2);
}

_QWORD *sub_14F2F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[5];
  _QWORD v24[3];
  uint64_t v25;
  __int128 v26;
  uint64_t v27;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F0E40);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v26, v4, v4, v2, v3);
  if (v27)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_49F4(a1, v6);
    v8 = sub_5EDC(&qword_1F25C8);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v24, v8, v8, v6, v7);
    if (v25)
    {
      v9 = sub_3DD18((uint64_t)v24, v25);
      __chkstk_darwin(v9);
      v11 = (_QWORD *)((char *)&v23[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v12 + 16))(v11);
      v13 = *v11;
      v14 = type metadata accessor for BooksBackendDiversifier();
      v23[3] = v14;
      v23[4] = &off_1E0180;
      v23[0] = v13;
      v15 = type metadata accessor for DefaultBookClusteringService();
      v16 = (_QWORD *)swift_allocObject(v15, 96, 7);
      v17 = sub_3DD18((uint64_t)v23, v14);
      __chkstk_darwin(v17);
      v19 = (_QWORD *)((char *)&v23[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(uint64_t *))(v20 + 16))(v19);
      v21 = *v19;
      v16[10] = v14;
      v16[11] = &off_1E0180;
      v16[7] = v21;
      sub_26DB8(&v26, (uint64_t)(v16 + 2));
      sub_62F8(v23);
      sub_62F8(v24);
      return v16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_14F4AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[3];
  v2 = a1[4];
  sub_49F4(a1, v1);
  v3 = sub_5EDC(&qword_1F1F30);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v7, v3, v3, v1, v2);
  if (v8)
  {
    v5 = type metadata accessor for AllCollectionTypesFillingClusteringService();
    v6 = swift_allocObject(v5, 56, 7);
    sub_26DB8(&v7, v6 + 16);
    return (_QWORD *)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_14F538()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for SeedBasedRecommendationServiceResolver();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = _swiftEmptyDictionarySingleton;
  return result;
}

_QWORD *sub_14F568(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;

  v1 = a1[3];
  v2 = a1[4];
  sub_49F4(a1, v1);
  v3 = sub_5EDC(&qword_1F4158);
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v3, v3, v1, v2);
  if (result)
  {
    v5 = result;
    v6 = type metadata accessor for DelegatingCollectionService();
    result = (_QWORD *)swift_allocObject(v6, 72, 7);
    result[4] = _swiftEmptyDictionarySingleton;
    result[5] = _swiftEmptyDictionarySingleton;
    result[6] = _swiftEmptyDictionarySingleton;
    result[7] = _swiftEmptyDictionarySingleton;
    result[8] = _swiftEmptyDictionarySingleton;
    result[2] = v5;
    result[3] = _swiftEmptyDictionarySingleton;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_14F5EC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for SeedBasedMoreFromYourAuthorsService, (uint64_t)&off_1E3458, a2);
}

_QWORD *sub_14F600(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F0E40);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v18, v4, v4, v2, v3);
  if (!v19)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_49F4(a1, v6);
  v8 = sub_5EDC(&qword_1F74C0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v16, v8, v8, v6, v7);
  if (!v17)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_5EDC(&qword_1F0E48);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v14, v11, v11, v9, v10);
  if (v15)
  {
    v12 = type metadata accessor for SeedBasedMoreFromYourAuthorsService();
    v13 = swift_allocObject(v12, 136, 7);
    sub_26DB8(&v18, v13 + 16);
    sub_26DB8(&v16, v13 + 56);
    sub_26DB8(&v14, v13 + 96);
    return (_QWORD *)v13;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_14F728@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for SeedBasedSuggestionsService, (uint64_t)&off_1E9038, a2);
}

uint64_t *sub_14F73C(_QWORD *a1)
{
  id v2;
  NSString v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD v45[3];
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  _QWORD v61[5];

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "BOOLForKey:", v3);

  v5 = a1[3];
  v6 = a1[4];
  sub_49F4(a1, v5);
  if (v4)
  {
    v7 = type metadata accessor for AllCollectionTypesFillingClusteringService();
    result = (uint64_t *)dispatch thunk of ResolverType.resolve<A>(_:)(v7, v7, v5, v6);
    if (!result)
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    v61[3] = v7;
    v61[4] = &off_1DE0D0;
    v61[0] = result;
LABEL_6:
    sub_3DD40((uint64_t)v61, (uint64_t)&v59);
    v10 = a1[3];
    v11 = a1[4];
    sub_49F4(a1, v10);
    v12 = sub_5EDC(&qword_1F2160);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(&v57, v12, v12, v10, v11);
    if (v58)
    {
      v13 = a1[3];
      v14 = a1[4];
      sub_49F4(a1, v13);
      v15 = type metadata accessor for DelegatingMediaTypesRecommendationService(0);
      result = (uint64_t *)dispatch thunk of ResolverType.resolve<A>(_:)(v15, v15, v13, v14);
      if (result)
      {
        v16 = (uint64_t)result;
        v17 = a1[3];
        v18 = a1[4];
        sub_49F4(a1, v17);
        v19 = sub_5EDC(&qword_1F2158);
        result = dispatch thunk of ResolverType.resolve<A>(_:)(&v55, v19, v19, v17, v18);
        if (v56)
        {
          v20 = a1[3];
          v21 = a1[4];
          sub_49F4(a1, v20);
          v22 = sub_5EDC(&qword_1F1F30);
          result = dispatch thunk of ResolverType.resolve<A>(_:)(&v53, v22, v22, v20, v21);
          if (v54)
          {
            v23 = a1[3];
            v24 = a1[4];
            sub_49F4(a1, v23);
            v25 = sub_5EDC(&qword_1F74B0);
            result = dispatch thunk of ResolverType.resolve<A>(_:)(&v51, v25, v25, v23, v24);
            if (v52)
            {
              v26 = a1[3];
              v27 = a1[4];
              sub_49F4(a1, v26);
              v28 = sub_5EDC(&qword_1F2648);
              result = dispatch thunk of ResolverType.resolve<A>(_:)(v49, v28, v28, v26, v27);
              if (v50)
              {
                v29 = a1[3];
                v30 = a1[4];
                sub_49F4(a1, v29);
                v31 = sub_5EDC(&qword_1F0E48);
                result = dispatch thunk of ResolverType.resolve<A>(_:)(&v47, v31, v31, v29, v30);
                if (v48)
                {
                  v32 = a1[3];
                  v33 = a1[4];
                  sub_49F4(a1, v32);
                  v34 = sub_5EDC(&qword_1F4178);
                  result = dispatch thunk of ResolverType.resolve<A>(_:)(v45, v34, v34, v32, v33);
                  if (v46)
                  {
                    v35 = sub_3DD18((uint64_t)v49, v50);
                    __chkstk_darwin(v35);
                    v37 = (_QWORD *)((char *)&v45[-1] - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
                    (*(void (**)(uint64_t *))(v38 + 16))(v37);
                    v39 = sub_3DD18((uint64_t)v45, v46);
                    __chkstk_darwin(v39);
                    v41 = (uint64_t **)((char *)&v45[-1] - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
                    (*(void (**)(uint64_t **))(v42 + 16))(v41);
                    v43 = sub_15104C(&v59, &v57, v16, &v55, &v53, &v51, *v37, &v47, *v41);
                    sub_62F8(v45);
                    sub_62F8(v49);
                    sub_62F8(v61);
                    return v43;
                  }
                  goto LABEL_22;
                }
LABEL_21:
                __break(1u);
LABEL_22:
                __break(1u);
                goto LABEL_23;
              }
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_17;
  }
  v9 = sub_5EDC(&qword_1F7480);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v59, v9, v9, v5, v6);
  if (v60)
  {
    sub_26DB8(&v59, (uint64_t)v61);
    goto LABEL_6;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_14FB6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[4];

  v6[2] = a1;
  v3 = sub_27AF0((void (*)(__int128 *__return_ptr, char *))sub_1519A8, (uint64_t)v6, (uint64_t)&off_1DA980);
  v4 = type metadata accessor for FallingBackSuggestionsService();
  result = swift_allocObject(v4, 24, 7);
  *(_QWORD *)(result + 16) = v3;
  a2[3] = v4;
  a2[4] = (uint64_t)&off_1E7FA8;
  *a2 = result;
  return result;
}

void sub_14FBEC(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  sub_49F4(a2, a2[3]);
  __asm { BR              X9 }
}

uint64_t sub_14FC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;

  v3 = sub_5EDC(&qword_1F10A0);
  dispatch thunk of ResolverType.resolve<A>(_:name:)(&v5, v3, 0x495041616964656DLL, 0xE800000000000000, v3, v1, v2);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    __break(1u);
    JUMPOUT(0x14FD20);
  }
  return sub_26DB8(&v5, v0);
}

uint64_t sub_14FD34(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  _BYTE v31[24];
  __int128 v32;
  uint64_t v33;
  _QWORD v34[5];

  v4 = sub_5EDC(&qword_1F25D0);
  v5 = 0;
  v6 = (_QWORD *)(a1 + 16);
  while (v5 < 3)
  {
    v9 = *((unsigned __int8 *)&off_1DA9A8 + v5++ + 32);
    v10 = a2[3];
    v11 = a2[4];
    sub_49F4(a2, v10);
    v12 = 12918;
    if (v9 != 1)
      v12 = 1768055156;
    v13 = 0xE400000000000000;
    if (v9 == 1)
      v13 = 0xE200000000000000;
    if (v9)
      v14 = v12;
    else
      v14 = 12662;
    if (v9)
      v15 = v13;
    else
      v15 = 0xE200000000000000;
    dispatch thunk of ResolverType.resolve<A>(_:name:)(&v32, v4, v14, v15, v4, v10, v11);
    swift_bridgeObjectRelease();
    if (!v33)
      goto LABEL_31;
    sub_26DB8(&v32, (uint64_t)v34);
    swift_beginAccess(v6, v31, 33, 0);
    sub_3DD40((uint64_t)v34, (uint64_t)&v32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    v17 = *v6;
    v30 = (_QWORD *)*v6;
    *v6 = 0x8000000000000000;
    v19 = sub_3998C(v9);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_29;
    v23 = v18;
    if (*(_QWORD *)(v17 + 24) >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v26 = v30;
        if ((v18 & 1) != 0)
          goto LABEL_2;
      }
      else
      {
        sub_16E50C();
        v26 = v30;
        if ((v23 & 1) != 0)
          goto LABEL_2;
      }
    }
    else
    {
      sub_160F9C(v22, isUniquelyReferenced_nonNull_native);
      v24 = sub_3998C(v9);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_32;
      v19 = v24;
      v26 = v30;
      if ((v23 & 1) != 0)
      {
LABEL_2:
        v7 = (_QWORD *)(v26[7] + 40 * v19);
        sub_62F8(v7);
        sub_26DB8(&v32, (uint64_t)v7);
        goto LABEL_3;
      }
    }
    v26[(v19 >> 6) + 8] |= 1 << v19;
    *(_BYTE *)(v26[6] + v19) = v9;
    sub_26DB8(&v32, v26[7] + 40 * v19);
    v27 = v26[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (v28)
      goto LABEL_30;
    v26[2] = v29;
LABEL_3:
    *v6 = v26;
    swift_bridgeObjectRelease();
    swift_endAccess(v31);
    result = sub_62F8(v34);
    if (v5 == 3)
      return result;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SeedBasedRecommendationSource);
  __break(1u);
  return result;
}

void sub_14FFAC(uint64_t a1, _QWORD *a2)
{
  sub_5EDC(&qword_1F7490);
  sub_49F4(a2, a2[3]);
  JUMPOUT(0x15004CLL);
}

uint64_t sub_150298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  va_list va;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  va_list va1;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v33 = va_arg(va1, _QWORD);
  v35 = va_arg(va1, _QWORD);
  v36 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v37 = va_arg(va2, __int128);
  v39 = va_arg(va2, _QWORD);
  v40 = va_arg(va2, _QWORD);
  v41 = va_arg(va2, _QWORD);
  dispatch thunk of ResolverType.resolve<A>(_:name:)((__int128 *)va1, v6, 0x495041616964656DLL, 0xE800000000000000, v6, v9, v10);
  swift_bridgeObjectRelease();
  if (!v40)
  {
    __break(1u);
    JUMPOUT(0x150E4CLL);
  }
  sub_26DB8((__int128 *)va1, (uint64_t)va2);
  swift_beginAccess(v8, (uint64_t *)va, 33, 0);
  sub_3DD40((uint64_t)va2, (uint64_t)va1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v13 = *v8;
  v32 = (_QWORD *)*v8;
  *v8 = 0x8000000000000000;
  sub_39A50(v7);
  v16 = v15;
  v17 = *(_QWORD *)(v13 + 16);
  v18 = (v14 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    JUMPOUT(0x15040CLL);
  }
  v20 = v14;
  if (*(_QWORD *)(v13 + 24) < v19)
  {
    sub_160578(v19, isUniquelyReferenced_nonNull_native);
    sub_39A50(v7);
    if ((v20 & 1) != (v22 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionSource);
      __break(1u);
      JUMPOUT(0x150E64);
    }
    v16 = v21;
    v23 = v32;
    if ((v20 & 1) == 0)
      goto LABEL_12;
LABEL_9:
    v24 = (_QWORD *)(v23[7] + 40 * v16);
    sub_62F8(v24);
    sub_26DB8((__int128 *)va1, (uint64_t)v24);
    goto LABEL_14;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v23 = v32;
    if ((v14 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    sub_16E160();
    v23 = v32;
    if ((v20 & 1) != 0)
      goto LABEL_9;
  }
LABEL_12:
  v23[(v16 >> 6) + 8] |= 1 << v16;
  *(_BYTE *)(v23[6] + v16) = v7;
  sub_26DB8((__int128 *)va1, v23[7] + 40 * v16);
  v25 = v23[2];
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
  {
    __break(1u);
    JUMPOUT(0x150660);
  }
  v23[2] = v27;
LABEL_14:
  *(_QWORD *)(v11 + 32) = v23;
  swift_bridgeObjectRelease();
  swift_endAccess((uint64_t *)va);
  sub_62F8((uint64_t *)va2);
  sub_5EDC(&qword_1F74A0);
  v28 = sub_49F4(v5, v5[3]);
  return sub_1504E8(v28, 0xD000000000000013, v29, v30, v28);
}

uint64_t sub_1504E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  va_list va;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  va_list va1;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v33 = va_arg(va1, _QWORD);
  v35 = va_arg(va1, _QWORD);
  v36 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v37 = va_arg(va2, __int128);
  v39 = va_arg(va2, _QWORD);
  v40 = va_arg(va2, _QWORD);
  v41 = va_arg(va2, _QWORD);
  dispatch thunk of ResolverType.resolve<A>(_:name:)((__int128 *)va1, v6, 0x495041616964656DLL, 0xE800000000000000, v6, v9, v10);
  swift_bridgeObjectRelease();
  if (!v40)
  {
    __break(1u);
    JUMPOUT(0x150E50);
  }
  sub_26DB8((__int128 *)va1, (uint64_t)va2);
  swift_beginAccess(v8, (uint64_t *)va, 33, 0);
  sub_3DD40((uint64_t)va2, (uint64_t)va1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v13 = *v8;
  v32 = (_QWORD *)*v8;
  *v8 = 0x8000000000000000;
  sub_39A50(v7);
  v16 = v15;
  v17 = *(_QWORD *)(v13 + 16);
  v18 = (v14 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    JUMPOUT(0x15065CLL);
  }
  v20 = v14;
  if (*(_QWORD *)(v13 + 24) < v19)
  {
    sub_16095C(v19, isUniquelyReferenced_nonNull_native);
    sub_39A50(v7);
    if ((v20 & 1) != (v22 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionSource);
      __break(1u);
      JUMPOUT(0x150E64);
    }
    v16 = v21;
    v23 = v32;
    if ((v20 & 1) == 0)
      goto LABEL_12;
LABEL_9:
    v24 = (_QWORD *)(v23[7] + 40 * v16);
    sub_62F8(v24);
    sub_26DB8((__int128 *)va1, (uint64_t)v24);
    goto LABEL_14;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v23 = v32;
    if ((v14 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    sub_16E174();
    v23 = v32;
    if ((v20 & 1) != 0)
      goto LABEL_9;
  }
LABEL_12:
  v23[(v16 >> 6) + 8] |= 1 << v16;
  *(_BYTE *)(v23[6] + v16) = v7;
  sub_26DB8((__int128 *)va1, v23[7] + 40 * v16);
  v25 = v23[2];
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
  {
    __break(1u);
    JUMPOUT(0x1508B0);
  }
  v23[2] = v27;
LABEL_14:
  *(_QWORD *)(v11 + 40) = v23;
  swift_bridgeObjectRelease();
  swift_endAccess((uint64_t *)va);
  sub_62F8((uint64_t *)va2);
  sub_5EDC(&qword_1F74A8);
  v28 = sub_49F4(v5, v5[3]);
  return sub_150738(v28, 0xD000000000000013, v29, v30, v28);
}

uint64_t sub_150738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v30;
  uint64_t v31;
  va_list va;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  va_list va1;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v31 = va_arg(va1, _QWORD);
  v33 = va_arg(va1, _QWORD);
  v34 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v35 = va_arg(va2, __int128);
  v37 = va_arg(va2, _QWORD);
  v38 = va_arg(va2, _QWORD);
  v39 = va_arg(va2, _QWORD);
  dispatch thunk of ResolverType.resolve<A>(_:name:)((__int128 *)va1, v6, 0x495041616964656DLL, 0xE800000000000000, v6, v9, v10);
  swift_bridgeObjectRelease();
  if (!v38)
  {
    __break(1u);
    goto LABEL_17;
  }
  sub_26DB8((__int128 *)va1, (uint64_t)va2);
  swift_beginAccess(v8, (uint64_t *)va, 33, 0);
  sub_3DD40((uint64_t)va2, (uint64_t)va1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v13 = *v8;
  v30 = (_QWORD *)*v8;
  *v8 = 0x8000000000000000;
  sub_39A50(v7);
  v16 = v15;
  v17 = *(_QWORD *)(v13 + 16);
  v18 = (v14 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    JUMPOUT(0x1508ACLL);
  }
  v20 = v14;
  if (*(_QWORD *)(v13 + 24) < v19)
  {
    sub_160970(v19, isUniquelyReferenced_nonNull_native);
    sub_39A50(v7);
    if ((v20 & 1) == (v22 & 1))
    {
      v16 = v21;
      v23 = v30;
      if ((v20 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v24 = (_QWORD *)(v23[7] + 40 * v16);
      sub_62F8(v24);
      sub_26DB8((__int128 *)va1, (uint64_t)v24);
      goto LABEL_14;
    }
LABEL_17:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionSource);
    __break(1u);
    JUMPOUT(0x150E64);
  }
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    v23 = v30;
    if ((v14 & 1) != 0)
      goto LABEL_9;
  }
  else
  {
    sub_16E188();
    v23 = v30;
    if ((v20 & 1) != 0)
      goto LABEL_9;
  }
LABEL_12:
  v23[(v16 >> 6) + 8] |= 1 << v16;
  *(_BYTE *)(v23[6] + v16) = v7;
  sub_26DB8((__int128 *)va1, v23[7] + 40 * v16);
  v25 = v23[2];
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
  {
    __break(1u);
    JUMPOUT(0x150E3CLL);
  }
  v23[2] = v27;
LABEL_14:
  *(_QWORD *)(v11 + 48) = v23;
  swift_bridgeObjectRelease();
  swift_endAccess((uint64_t *)va);
  sub_62F8((uint64_t *)va2);
  sub_5EDC(&qword_1F7488);
  v28 = sub_49F4(v5, v5[3]);
  return ((uint64_t (*)(_QWORD *, unint64_t))sub_1509F4)(v28, 0xD000000000000013);
}

uint64_t sub_150954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  va_list va1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, __int128);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v10 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 40 * v7);
  sub_62F8(v10);
  sub_26DB8((__int128 *)va1, (uint64_t)v10);
  *v6 = v8;
  swift_bridgeObjectRelease();
  swift_endAccess((uint64_t *)va);
  sub_62F8((uint64_t *)va2);
  if ((v9 & 1) == 0)
    JUMPOUT(0x15099CLL);
  sub_5EDC(&qword_1F10A0);
  v11 = sub_49F4(v5, v5[3]);
  return ((uint64_t (*)(_QWORD *, unint64_t))loc_150C84)(v11, 0xD000000000000013);
}

uint64_t sub_1509F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  void *v20;
  char v21;
  _QWORD *v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  va_list va;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  va_list va1;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v28 = va_arg(va1, _QWORD);
  v30 = va_arg(va1, _QWORD);
  v31 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v32 = va_arg(va2, __int128);
  v34 = va_arg(va2, _QWORD);
  v35 = va_arg(va2, _QWORD);
  v36 = va_arg(va2, _QWORD);
  dispatch thunk of ResolverType.resolve<A>(_:name:)((__int128 *)va1, v5, 0x495041616964656DLL, 0xE800000000000000, v5, v8, v9);
  swift_bridgeObjectRelease();
  if (!v35)
  {
    __break(1u);
    JUMPOUT(0x150E40);
  }
  sub_26DB8((__int128 *)va1, (uint64_t)va2);
  swift_beginAccess(v6, (uint64_t *)va, 33, 0);
  sub_3DD40((uint64_t)va2, (uint64_t)va1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v27 = (_QWORD *)*v6;
  v11 = *v6;
  *v6 = 0x8000000000000000;
  sub_39A50(v7);
  v17 = v16;
  v18 = *(_QWORD *)(v11 + 16);
  v19 = (v12 & 1) == 0;
  v20 = (void *)(v18 + v19);
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    JUMPOUT(0x150E28);
  }
  v21 = v12;
  if (*(_QWORD *)(v11 + 24) >= (uint64_t)v20)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v22 = v27;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      v20 = sub_16E19C();
      v22 = v27;
      if ((v21 & 1) == 0)
        goto LABEL_9;
    }
  }
  else
  {
    sub_160984((uint64_t)v20, isUniquelyReferenced_nonNull_native);
    sub_39A50(v7);
    if ((v21 & 1) != (v12 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionSource);
      __break(1u);
      JUMPOUT(0x150E64);
    }
    v17 = (unint64_t)v20;
    v22 = v27;
    if ((v21 & 1) == 0)
    {
LABEL_9:
      v22[(v17 >> 6) + 8] |= 1 << v17;
      *(_BYTE *)(v22[6] + v17) = v7;
      sub_26DB8((__int128 *)va1, v22[7] + 40 * v17);
      v24 = v22[2];
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (!v25)
      {
        v22[2] = v26;
        JUMPOUT(0x150974);
      }
      __break(1u);
      JUMPOUT(0x150E34);
    }
  }
  return sub_150954((uint64_t)v20, v12, v13, v14, v15);
}

uint64_t sub_150BC0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v4 = (_QWORD *)(*(_QWORD *)(v2 + 56) + 40 * v1);
  sub_62F8(v4);
  sub_26DB8(&v7, (uint64_t)v4);
  *v0 = v2;
  swift_bridgeObjectRelease();
  swift_endAccess(&v6);
  result = sub_62F8(&v8);
  if (v3 != 4)
    JUMPOUT(0x150C04);
  return result;
}

uint64_t sub_150C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  va_list va;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  va_list va1;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v27 = va_arg(va1, _QWORD);
  v29 = va_arg(va1, _QWORD);
  v30 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v31 = va_arg(va2, __int128);
  v33 = va_arg(va2, _QWORD);
  v34 = va_arg(va2, _QWORD);
  v35 = va_arg(va2, _QWORD);
  dispatch thunk of ResolverType.resolve<A>(_:name:)((__int128 *)va1, v6, 0x495041616964656DLL, 0xE800000000000000, v6, v8, v9);
  swift_bridgeObjectRelease();
  if (!v34)
  {
    __break(1u);
    JUMPOUT(0x150E44);
  }
  sub_26DB8((__int128 *)va1, (uint64_t)va2);
  swift_beginAccess(v5, (uint64_t *)va, 33, 0);
  sub_3DD40((uint64_t)va2, (uint64_t)va1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v26 = (_QWORD *)*v5;
  v11 = *v5;
  *v5 = 0x8000000000000000;
  sub_39A50(v7);
  v14 = v13;
  v15 = *(_QWORD *)(v11 + 16);
  v16 = (v12 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    JUMPOUT(0x150E30);
  }
  v18 = v12;
  if (*(_QWORD *)(v11 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v21 = v26;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
    else
    {
      sub_16E1B0();
      v21 = v26;
      if ((v18 & 1) == 0)
        goto LABEL_9;
    }
  }
  else
  {
    sub_160998(v17, isUniquelyReferenced_nonNull_native);
    sub_39A50(v7);
    if ((v18 & 1) != (v20 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionSource);
      __break(1u);
      JUMPOUT(0x150E64);
    }
    v14 = v19;
    v21 = v26;
    if ((v18 & 1) == 0)
    {
LABEL_9:
      v21[(v14 >> 6) + 8] |= 1 << v14;
      *(_BYTE *)(v21[6] + v14) = v7;
      sub_26DB8((__int128 *)va1, v21[7] + 40 * v14);
      v23 = v21[2];
      v24 = __OFADD__(v23, 1);
      v25 = v23 + 1;
      if (!v24)
      {
        v21[2] = v25;
        JUMPOUT(0x150BE0);
      }
      __break(1u);
      JUMPOUT(0x150E38);
    }
  }
  return sub_150BC0();
}

uint64_t type metadata accessor for CollectionServiceAssembly()
{
  return objc_opt_self(_TtC20BooksPersonalization25CollectionServiceAssembly);
}

uint64_t *sub_150F00(__int128 *a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6, uint64_t a7, __int128 *a8, uint64_t a9, uint64_t *a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _UNKNOWN **v26;
  __int128 v27;
  uint64_t v28;
  char **v29;

  v17 = *a10;
  v28 = type metadata accessor for SeedBasedRecommendationServiceResolver();
  v29 = &off_1E83D8;
  *(_QWORD *)&v27 = a7;
  v25 = type metadata accessor for DelegatingCollectionService();
  v26 = &off_1E7E40;
  v23 = v17;
  *(_QWORD *)&v24 = a9;
  v18 = sub_5EDC(&qword_1F74B8);
  v19 = String.init<A>(describing:)(&v23, v18);
  Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, v19, v20);
  sub_26DB8(a1, (uint64_t)(a10 + 7));
  sub_26DB8(a2, (uint64_t)(a10 + 2));
  a10[12] = a3;
  sub_26DB8(a4, (uint64_t)(a10 + 13));
  sub_26DB8(a5, (uint64_t)(a10 + 18));
  sub_26DB8(a6, (uint64_t)(a10 + 23));
  sub_26DB8(&v27, (uint64_t)(a10 + 28));
  sub_26DB8(a8, (uint64_t)(a10 + 33));
  sub_26DB8(&v24, (uint64_t)(a10 + 38));
  return a10;
}

uint64_t *sub_15104C(__int128 *a1, __int128 *a2, uint64_t a3, __int128 *a4, __int128 *a5, __int128 *a6, uint64_t a7, __int128 *a8, uint64_t *a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v29;
  __int128 *v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[3];
  uint64_t v35;
  char **v36;

  v30 = a8;
  v16 = *a9;
  v35 = type metadata accessor for SeedBasedRecommendationServiceResolver();
  v36 = &off_1E83D8;
  v34[0] = a7;
  v32 = v16;
  v33 = &off_1E7E40;
  v31[0] = a9;
  v17 = type metadata accessor for CollectionRecommendationService(0);
  v18 = (uint64_t *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = sub_3DD18((uint64_t)v34, v35);
  __chkstk_darwin(v19);
  v21 = (uint64_t *)((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_3DD18((uint64_t)v31, v32);
  __chkstk_darwin(v23);
  v25 = (uint64_t *)((char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v26 + 16))(v25);
  v27 = sub_150F00(a1, a2, a3, a4, a5, a6, *v21, v30, *v25, v18);
  sub_62F8(v31);
  sub_62F8(v34);
  return v27;
}

uint64_t sub_1511DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  void (*v77)(char *, uint64_t, uint64_t);
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD v90[3];
  uint64_t v91;
  uint64_t v92;

  v0 = type metadata accessor for CallbackScope(0);
  v88 = *(_QWORD *)(v0 - 8);
  v89 = v0;
  __chkstk_darwin(v0);
  v87 = (char *)&v85 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Scope(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = ProxyContainer.public.getter(v4);
  v8 = sub_5EDC(&qword_1F4178);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_14F2A0, 0, v8);
  swift_release(v7);
  v10 = enum case for Scope.singleton(_:);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11(v6, enum case for Scope.singleton(_:), v2);
  v12 = Definition.inScope(_:)(v6);
  swift_release(v12);
  swift_release(v9);
  v13 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v14 = v13(v6, v2);
  v15 = ProxyContainer.public.getter(v14);
  v16 = sub_5EDC(&qword_1F2648);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_14F2B4, 0, v16);
  swift_release(v15);
  v11(v6, v10, v2);
  v18 = Definition.inScope(_:)(v6);
  swift_release(v18);
  swift_release(v17);
  v19 = v13(v6, v2);
  v20 = ProxyContainer.public.getter(v19);
  v21 = sub_5EDC(&qword_1F7478);
  v22 = RegistrationContainer.register<A>(_:name:factory:)(v21, 0, 0, sub_14F2C8, 0, v21);
  swift_release(v20);
  v11(v6, v10, v2);
  v23 = Definition.inScope(_:)(v6);
  swift_release(v23);
  swift_release(v22);
  v24 = v13(v6, v2);
  v25 = ProxyContainer.private.getter(v24);
  v26 = sub_5EDC(&qword_1F7480);
  v27 = RegistrationContainer.register<A>(_:name:factory:)(v26, 0, 0, sub_14F2DC, 0, v26);
  swift_release(v25);
  v11(v6, v10, v2);
  v28 = Definition.inScope(_:)(v6);
  swift_release(v28);
  swift_release(v27);
  v29 = v13(v6, v2);
  v30 = ProxyContainer.private.getter(v29);
  v31 = type metadata accessor for DefaultBookClusteringService();
  v32 = RegistrationContainer.register<A>(_:name:factory:)(v31, 0, 0, sub_14F2F0, 0, v31);
  swift_release(v30);
  v11(v6, v10, v2);
  v33 = Definition.inScope(_:)(v6);
  swift_release(v33);
  swift_release(v32);
  v34 = v13(v6, v2);
  v35 = ProxyContainer.private.getter(v34);
  v36 = type metadata accessor for AllCollectionTypesFillingClusteringService();
  v37 = RegistrationContainer.register<A>(_:name:factory:)(v36, 0, 0, sub_14F4AC, 0, v36);
  swift_release(v35);
  v11(v6, v10, v2);
  v38 = Definition.inScope(_:)(v6);
  swift_release(v38);
  swift_release(v37);
  v39 = v13(v6, v2);
  v40 = ProxyContainer.private.getter(v39);
  v86 = type metadata accessor for SeedBasedRecommendationServiceResolver();
  v41 = RegistrationContainer.register<A>(_:name:factory:)(v86, 0, 0, sub_14F538, 0, v86);
  swift_release(v40);
  v11(v6, v10, v2);
  v42 = Definition.inScope(_:)(v6);
  swift_release(v42);
  swift_release(v41);
  v43 = v13(v6, v2);
  v44 = ProxyContainer.private.getter(v43);
  v85 = type metadata accessor for DelegatingCollectionService();
  v45 = RegistrationContainer.register<A>(_:name:factory:)(v85, 0, 0, sub_14F568, 0, v85);
  swift_release(v44);
  v11(v6, v10, v2);
  v46 = Definition.inScope(_:)(v6);
  swift_release(v46);
  swift_release(v45);
  v47 = v13(v6, v2);
  v48 = ProxyContainer.private.getter(v47);
  v49 = sub_5EDC(&qword_1F7488);
  v50 = RegistrationContainer.register<A>(_:name:factory:)(v49, 0x747369486B6F6F62, 0xEB0000000079726FLL, sub_14F5EC, 0, v49);
  swift_release(v48);
  v11(v6, v10, v2);
  v51 = Definition.inScope(_:)(v6);
  swift_release(v51);
  swift_release(v50);
  v52 = v13(v6, v2);
  v53 = ProxyContainer.private.getter(v52);
  v54 = type metadata accessor for SeedBasedMoreFromYourAuthorsService();
  v55 = RegistrationContainer.register<A>(_:name:factory:)(v54, 0, 0, sub_14F600, 0, v54);
  swift_release(v53);
  v11(v6, v10, v2);
  v56 = Definition.inScope(_:)(v6);
  swift_release(v56);
  swift_release(v55);
  v57 = v13(v6, v2);
  v58 = ProxyContainer.private.getter(v57);
  v59 = sub_5EDC(&qword_1F10A0);
  v60 = RegistrationContainer.register<A>(_:name:factory:)(v59, 0x747369486B6F6F62, 0xEB0000000079726FLL, sub_14F728, 0, v59);
  swift_release(v58);
  v11(v6, v10, v2);
  v61 = Definition.inScope(_:)(v6);
  swift_release(v61);
  swift_release(v60);
  v62 = v13(v6, v2);
  v63 = ProxyContainer.private.getter(v62);
  v64 = type metadata accessor for CollectionRecommendationService(0);
  v65 = RegistrationContainer.register<A>(_:name:factory:)(v64, 0, 0, sub_14F73C, 0, v64);
  swift_release(v63);
  v11(v6, v10, v2);
  v66 = Definition.inScope(_:)(v6);
  swift_release(v66);
  swift_release(v65);
  v67 = v13(v6, v2);
  v68 = ProxyContainer.private.getter(v67);
  v69 = RegistrationContainer.register<A>(_:name:factory:)(v59, 0xD000000000000022, 0x800000000019EF40, sub_14FB6C, 0, v59);
  swift_release(v68);
  v11(v6, v10, v2);
  v70 = Definition.inScope(_:)(v6);
  swift_release(v70);
  swift_release(v69);
  v71 = v13(v6, v2);
  ProxyContainer.callback.getter(v90, v71);
  v72 = v91;
  v73 = v92;
  sub_49F4(v90, v91);
  v74 = enum case for CallbackScope.any(_:);
  v76 = v87;
  v75 = v88;
  v77 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 104);
  v78 = v89;
  v77(v87, enum case for CallbackScope.any(_:), v89);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v86, v76, sub_14FD34, 0, v86, v72, v73);
  v79 = *(void (**)(char *, uint64_t))(v75 + 8);
  v80 = v78;
  v79(v76, v78);
  v81 = sub_62F8(v90);
  ProxyContainer.callback.getter(v90, v81);
  v82 = v91;
  v83 = v92;
  sub_49F4(v90, v91);
  v77(v76, v74, v80);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v85, v76, sub_14FFAC, 0, v85, v82, v83);
  v79(v76, v80);
  return sub_62F8(v90);
}

void sub_1519A8(unsigned __int8 *a1)
{
  uint64_t v1;

  sub_14FBEC(a1, *(_QWORD **)(v1 + 16));
}

uint64_t type metadata accessor for ExperimentIDsMiddleware()
{
  return objc_opt_self(_TtC20BooksPersonalization23ExperimentIDsMiddleware);
}

uint64_t sub_1519E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1F7570 + dword_1F7570);
  v9 = (_QWORD *)swift_task_alloc(unk_1F7574);
  *(_QWORD *)(v5 + 16) = v9;
  *v9 = v5;
  v9[1] = sub_80450;
  return v11(a1, a4, a5);
}

uint64_t sub_151A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for URLRequest(0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_151AC8, 0, 0);
}

uint64_t sub_151AC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 40);
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 72) = v5;
  *v5 = v0;
  v5[1] = sub_151B44;
  return v7(v2, v3);
}

uint64_t sub_151B44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 72);
  v4[10] = a1;
  v4[11] = a2;
  v4[12] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_151C64;
  else
    v6 = sub_151BB4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_151BB4()
{
  Swift::String_optional *v0;
  void *object;
  Swift::String v2;
  int *v3;
  Swift::String_optional **v4;
  uint64_t (*v6)(uint64_t);

  object = v0[5].value._object;
  (*((void (**)(uint64_t, uint64_t, uint64_t))v0[3].value._object + 2))(v0[4].value._countAndFlagsBits, v0[1].value._countAndFlagsBits, v0[3].value._countAndFlagsBits);
  if (object)
  {
    v2._object = (void *)0x80000000001A1FD0;
    v2._countAndFlagsBits = 0xD00000000000001BLL;
    URLRequest.setValue(_:forHTTPHeaderField:)(v0[5], v2);
    swift_bridgeObjectRelease();
  }
  v3 = (int *)v0[1].value._object;
  v6 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  v4 = (Swift::String_optional **)swift_task_alloc(v3[1]);
  v0[6].value._object = v4;
  *v4 = v0;
  v4[1] = (Swift::String_optional *)sub_151CF8;
  return v6(v0[4].value._countAndFlagsBits);
}

uint64_t sub_151C64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(_QWORD);

  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v4 = v0[2];
  swift_errorRelease(v0[12]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v5 = (int *)v0[3];
  v8 = (uint64_t (*)(_QWORD))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v0[13] = v6;
  *v6 = v0;
  v6[1] = sub_151CF8;
  return v8(v0[8]);
}

uint64_t sub_151CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t (*v10)();

  v8 = *(_QWORD **)v4;
  v9 = *(_QWORD *)(*(_QWORD *)v4 + 104);
  *(_QWORD *)(*(_QWORD *)v4 + 112) = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    v10 = sub_151DD0;
  }
  else
  {
    v8[15] = a3;
    v8[16] = a2;
    v8[17] = a1;
    v10 = sub_151D80;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_151D80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 120));
}

uint64_t sub_151DD0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v1, *(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_151E18(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_151E6C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x716552736B6F6F62, 0xEC00000074736575);
  swift_bridgeObjectRelease(0xEC00000074736575);
  return Hasher._finalize()();
}

void sub_151EF4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_151F44()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000014, 0x800000000019EB00);
  swift_bridgeObjectRelease(0x800000000019EB00);
  return Hasher._finalize()();
}

void sub_151FE4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_15203C()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 2, 0x800000000019ED80);
  swift_bridgeObjectRelease(0x800000000019ED80);
  return Hasher._finalize()();
}

void sub_15211C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_152174()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 7, 0x800000000019EBE0);
  swift_bridgeObjectRelease(0x800000000019EBE0);
  return Hasher._finalize()();
}

void sub_152234(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_152288()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x666F725072657375, 0xEB00000000656C69);
  swift_bridgeObjectRelease(0xEB00000000656C69);
  return Hasher._finalize()();
}

void sub_15230C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_152354()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000010, 0x800000000019EDF0);
  swift_bridgeObjectRelease(0x800000000019EDF0);
  return Hasher._finalize()();
}

void sub_1523D8(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_152424()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x64496B6F6F62, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

Swift::Int sub_1524C8(uint64_t a1, char a2)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v3 = 0xD000000000000013;
  Hasher.init(_seed:)(v6, a1);
  if (a2)
  {
    if (a2 == 1)
      v3 = 0x796E65446B6F6F62;
    else
      v3 = 0xD000000000000018;
    if (a2 == 1)
      v4 = 0xEC0000007473696CLL;
    else
      v4 = 0x800000000019ED30;
  }
  else
  {
    v4 = 0x800000000019ED00;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_152574(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1525C8()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return Hasher._finalize()();
}

void sub_152650(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1526A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x495041616964656DLL, 0xE800000000000000);
  swift_bridgeObjectRelease(0xE800000000000000);
  return Hasher._finalize()();
}

void sub_152734(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_15278C()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 11, 0x800000000019F7F0);
  swift_bridgeObjectRelease(0x800000000019F7F0);
  return Hasher._finalize()();
}

void sub_152854(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_15289C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000017, 0x800000000019EF80);
  swift_bridgeObjectRelease(0x800000000019EF80);
  return Hasher._finalize()();
}

void sub_152958(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_1529AC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return Hasher._finalize()();
}

void sub_152A34(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_152A88()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 5, 0x800000000019EED0);
  swift_bridgeObjectRelease(0x800000000019EED0);
  return Hasher._finalize()();
}

void sub_152B08(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_152B5C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x747369486B6F6F62, 0xEB0000000079726FLL);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return Hasher._finalize()();
}

void sub_152BEC(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_152C34()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000017, 0x800000000019EF80);
  swift_bridgeObjectRelease(0x800000000019EF80);
  return Hasher._finalize()();
}

_QWORD *sub_152D08(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_340AC(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 13;
      v5 = v6;
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_340AC(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      result[v8 + 4] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_152DC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v11 = 0;
  v12 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v11 >= v10)
      goto LABEL_30;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    if (!v16)
      break;
LABEL_18:
    v9 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_19:
    v18 = *a2;
    if (*(_QWORD *)(*a2 + 16))
    {
      v19 = sub_39228(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v14));
      if ((v20 & 1) != 0)
      {
        v21 = (uint64_t *)(*(_QWORD *)(v18 + 56) + 16 * v19);
        v22 = v21[1];
        v27 = *v21;
        swift_bridgeObjectRetain(v22);
        v28 = v3;
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
          v12 = sub_2FCA8(0, v12[2] + 1, 1, v12);
        v24 = v12[2];
        v23 = v12[3];
        v25 = v12;
        if (v24 >= v23 >> 1)
          v25 = sub_2FCA8((_QWORD *)(v23 > 1), v24 + 1, 1, v12);
        v25[2] = v24 + 1;
        v12 = v25;
        v26 = &v25[2 * v24];
        v26[4] = v27;
        v26[5] = v22;
        v3 = v28;
      }
    }
  }
  v17 = v11 + 1;
  if (v11 + 1 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v11 + 2;
  if (v11 + 2 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v11 + 3;
  if (v11 + 3 >= v10)
    goto LABEL_30;
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v11 + 4;
  if (v11 + 4 >= v10)
  {
LABEL_30:
    swift_release(a1);
    return;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_17:
    v11 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v10)
      goto LABEL_30;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_152FD4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  v2 = result;
  v3 = 0;
  v18 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1625CC(v17, v12, v13);
    result = swift_bridgeObjectRelease(v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_153150(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_1628D4(&v14, *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1532A8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_163544(&v14, *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_153400(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v2 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  if (!v5)
    goto LABEL_8;
LABEL_5:
  v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v9 = v8 | (v7 << 6);
  while (1)
  {
    v10 = *(_QWORD *)(a1 + 56);
    v11 = v10 + 48 * v9;
    v12 = *(_QWORD *)(v11 + 40);
    if (v12)
    {
      v17 = *(_QWORD *)(v10 + 48 * v9 + 24);
      v18 = _swiftEmptyDictionarySingleton[2];
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v9);
      v36 = *(_QWORD *)(v11 + 32);
      if (_swiftEmptyDictionarySingleton[3] <= v18)
      {
        v22 = v18 + 1;
        v23 = v17;
        swift_bridgeObjectRetain_n(v12, 2);
        swift_bridgeObjectRetain(v23);
        v24 = v22;
        v21 = v37;
        sub_15C338(v24, 1);
      }
      else
      {
        v19 = v17;
        swift_bridgeObjectRetain_n(v12, 2);
        v20 = v19;
        v21 = v37;
        swift_bridgeObjectRetain(v20);
      }
      v25 = static Hasher._hash(seed:_:)(_swiftEmptyDictionarySingleton[5], v21);
      v26 = &_swiftEmptyDictionarySingleton[8];
      v27 = -1 << LOBYTE(_swiftEmptyDictionarySingleton[4]);
      v28 = v25 & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~_swiftEmptyDictionarySingleton[(v28 >> 6) + 8]) == 0)
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v27) >> 6;
        while (++v29 != v32 || (v31 & 1) == 0)
        {
          v33 = v29 == v32;
          if (v29 == v32)
            v29 = 0;
          v31 |= v33;
          v34 = v26[v29];
          if (v34 != -1)
          {
            v30 = __clz(__rbit64(~v34)) + (v29 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      v30 = __clz(__rbit64((-1 << v28) & ~_swiftEmptyDictionarySingleton[(v28 >> 6) + 8])) | v28 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
      *(_QWORD *)((char *)v26 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
      *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v30) = v21;
      v35 = (_QWORD *)(_swiftEmptyDictionarySingleton[7] + 16 * v30);
      *v35 = v36;
      v35[1] = v12;
      ++_swiftEmptyDictionarySingleton[2];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_5;
    }
    else if (v5)
    {
      goto LABEL_5;
    }
LABEL_8:
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v13 >= v6)
      goto LABEL_39;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    v15 = v7 + 1;
    if (!v14)
    {
      v15 = v7 + 2;
      if (v7 + 2 >= v6)
        goto LABEL_39;
      v14 = *(_QWORD *)(v2 + 8 * v15);
      if (!v14)
      {
        v15 = v7 + 3;
        if (v7 + 3 >= v6)
          goto LABEL_39;
        v14 = *(_QWORD *)(v2 + 8 * v15);
        if (!v14)
        {
          v15 = v7 + 4;
          if (v7 + 4 >= v6)
            goto LABEL_39;
          v14 = *(_QWORD *)(v2 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_23:
    v5 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v15 << 6);
    v7 = v15;
  }
  v16 = v7 + 5;
  if (v7 + 5 >= v6)
  {
LABEL_39:
    sub_5FEC(a1);
    return;
  }
  v14 = *(_QWORD *)(v2 + 8 * v16);
  if (v14)
  {
    v15 = v7 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v6)
      goto LABEL_39;
    v14 = *(_QWORD *)(v2 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_23;
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_153714()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_1F7578);
  sub_5216C(v0, (uint64_t)qword_1F7578);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD000000000000044, 0x80000000001A3680);
}

uint64_t PostHydrationFilteringCandidateMetadata.artworkURL.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t PostHydrationFilteringCandidateMetadata.seriesSequenceNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 72);
}

__n128 PostHydrationFilteringCandidateMetadata.init(title:author:locale:isPreorder:artworkURL:seriesSequenceNumber:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unsigned __int8 a7@<W6>, unint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10, unint64_t a11, unsigned __int32 a12, char a13)
{
  __n128 result;

  result = a10;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u8[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4] = a10;
  a9[5].n128_u64[0] = a11;
  a9[5].n128_u32[2] = a12;
  a9[5].n128_u8[12] = a13 & 1;
  return result;
}

uint64_t PostHydrationFilteringCandidateMetadata.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  char v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;

  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(void **)(v0 + 40);
  v7 = *(unsigned __int8 *)(v0 + 48);
  v22 = *(_QWORD *)(v0 + 80);
  v23 = *(_QWORD *)(v0 + 72);
  v8 = *(unsigned int *)(v0 + 88);
  v9 = *(_BYTE *)(v0 + 92);
  v25 = 34;
  v26 = 0xE100000000000000;
  swift_bridgeObjectRetain(v2);
  v10._countAndFlagsBits = v1;
  v10._object = v2;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v2);
  v11._countAndFlagsBits = 0x2079622022;
  v11._object = (void *)0xE500000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRetain(v4);
  v12._countAndFlagsBits = v3;
  v12._object = v4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v4);
  v13._countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  if (v6)
  {
    strcpy((char *)&v24, " locale=");
    BYTE1(v24._object) = 0;
    WORD1(v24._object) = 0;
    HIDWORD(v24._object) = -402653184;
    v14._countAndFlagsBits = v5;
    v14._object = v6;
    String.append(_:)(v14);
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v24._object);
  }
  strcpy((char *)&v24, " isPreorder=");
  BYTE5(v24._object) = 0;
  HIWORD(v24._object) = -5120;
  if (v7)
    v15 = 1702195828;
  else
    v15 = 0x65736C6166;
  if (v7)
    v16 = 0xE400000000000000;
  else
    v16 = 0xE500000000000000;
  v17 = v16;
  String.append(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease(v16);
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v24._object);
  if ((v9 & 1) == 0)
  {
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v18._countAndFlagsBits = NSDecimal.description.getter(v23, v22, v8);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    v20._countAndFlagsBits = 0xD000000000000016;
    v20._object = (void *)0x80000000001A3580;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(0x80000000001A3580);
  }
  return v25;
}

_QWORD *sub_153A24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 224);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 224);
  }
  else
  {
    v2 = sub_153A7C();
    *(_QWORD *)(v0 + 224) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

_QWORD *sub_153A7C()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v0 = type metadata accessor for Locale.Language(0);
  v34 = *(_QWORD *)(v0 - 8);
  v35 = v0;
  __chkstk_darwin(v0);
  v2 = (char *)&v30 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_5EDC(&qword_1F75A8);
  __chkstk_darwin(v3);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static Locale.preferredLanguages.getter(v7);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    swift_bridgeObjectRetain(v10);
    v30 = v12;
    v13 = (_QWORD *)(v12 + 40);
    v14 = _swiftEmptyArrayStorage;
    do
    {
      v15 = *(v13 - 1);
      v16 = *v13;
      v17 = swift_bridgeObjectRetain_n(*v13, 2);
      v18 = Locale.init(identifier:)(v15, v16, v17);
      v19 = Locale.language.getter(v18);
      Locale.Language.languageCode.getter(v19);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v2, v35);
      v20 = type metadata accessor for Locale.LanguageCode(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v5, 1, v20);
      if ((_DWORD)v22 == 1)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
        sub_417D8((uint64_t)v5, &qword_1F75A8);
        swift_bridgeObjectRelease();
      }
      else
      {
        v23 = Locale.LanguageCode.identifier.getter(v22);
        v31 = v24;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v33);
        (*(void (**)(char *, uint64_t))(v21 + 8))(v5, v20);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = sub_2FCA8(0, v14[2] + 1, 1, v14);
        v26 = v14[2];
        v25 = v14[3];
        if (v26 >= v25 >> 1)
          v14 = sub_2FCA8((_QWORD *)(v25 > 1), v26 + 1, 1, v14);
        v14[2] = v26 + 1;
        v27 = &v14[2 * v26];
        v28 = v31;
        v27[4] = v23;
        v27[5] = v28;
      }
      v13 += 2;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease_n(v30, 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  return v14;
}

_QWORD *BookRecommendationPostHydrationFilteringService.deinit()
{
  _QWORD *v0;

  sub_62F8(v0 + 2);
  sub_62F8(v0 + 7);
  sub_62F8(v0 + 12);
  sub_62F8(v0 + 17);
  sub_62F8(v0 + 22);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t BookRecommendationPostHydrationFilteringService.__deallocating_deinit()
{
  _QWORD *v0;

  sub_62F8(v0 + 2);
  sub_62F8(v0 + 7);
  sub_62F8(v0 + 12);
  sub_62F8(v0 + 17);
  sub_62F8(v0 + 22);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance(v0, 232, 7);
}

uint64_t BookRecommendationPostHydrationFilteringService.storeIDsOfDuplicateAssets(fromCandidates:collectionType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4[294] = v3;
  v4[293] = a3;
  v4[292] = a2;
  v4[291] = a1;
  v5 = type metadata accessor for Logger(0);
  v4[295] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[296] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[297] = swift_task_alloc(v7);
  v4[298] = swift_task_alloc(v7);
  v4[299] = swift_task_alloc(v7);
  v4[300] = swift_task_alloc(v7);
  v4[301] = swift_task_alloc(v7);
  v4[302] = swift_task_alloc(v7);
  v4[303] = swift_task_alloc(v7);
  v4[304] = swift_task_alloc(v7);
  v8 = sub_5EDC(&qword_1F7598);
  v4[305] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5EDC(&qword_1F75A0);
  v4[306] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[307] = v10;
  v4[308] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale.Language(0);
  v4[309] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[310] = v12;
  v4[311] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  v4[312] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[313] = v14;
  v4[314] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5EDC(&qword_1F75A8);
  v4[315] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v4[316] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[317] = v17;
  v4[318] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PersonalizationMetadataRequest(0);
  v4[319] = v18;
  v4[320] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F75B0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[321] = swift_task_alloc(v19);
  v4[322] = swift_task_alloc(v19);
  v4[323] = swift_task_alloc(v19);
  return swift_task_switch(sub_153F9C, 0, 0);
}

uint64_t sub_153F9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 2352);
  v2 = v1[10];
  v3 = v1[11];
  sub_49F4(v1 + 7, v2);
  v4 = *(int **)(v3 + 24);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 2592) = v5;
  *v5 = v0;
  v5[1] = sub_154018;
  return v7(v2, v3);
}

uint64_t sub_154018(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(*v2 + 2592);
  v4 = *v2;
  *(_QWORD *)(v4 + 2600) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1541A4, 0, 0);
  v5 = *(_QWORD *)(v4 + 2576);
  v6 = *(_QWORD *)(v4 + 2568);
  v7 = *(_QWORD *)(v4 + 2560);
  v8 = *(_QWORD *)(v4 + 2544);
  v9 = *(_QWORD *)(v4 + 2520);
  v10 = *(_QWORD *)(v4 + 2512);
  v11 = *(_QWORD *)(v4 + 2488);
  v14 = *(_QWORD *)(v4 + 2464);
  v15 = *(_QWORD *)(v4 + 2440);
  v16 = *(_QWORD *)(v4 + 2432);
  v17 = *(_QWORD *)(v4 + 2424);
  v18 = *(_QWORD *)(v4 + 2416);
  v19 = *(_QWORD *)(v4 + 2408);
  v20 = *(_QWORD *)(v4 + 2400);
  v21 = *(_QWORD *)(v4 + 2392);
  v22 = *(_QWORD *)(v4 + 2384);
  v12 = *(_QWORD *)(v4 + 2376);
  swift_task_dealloc(*(_QWORD *)(v4 + 2584));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

void sub_1541A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void (*v38)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;

  v1 = v0[325];
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
LABEL_26:
    v0[326] = _swiftEmptyDictionarySingleton;
    v35 = v0[323];
    v36 = v0[306];
    v37 = (_QWORD *)v0[294];
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[307] + 56);
    v0[327] = v38;
    v38(v35, 1, 1, v36);
    v39 = v37 + 2;
    v40 = v37[5];
    v41 = v37[6];
    sub_49F4(v39, v40);
    v42 = *(int **)(v41 + 16);
    v50 = (int *)((char *)v42 + *v42);
    v43 = (_QWORD *)swift_task_alloc(v42[1]);
    v0[328] = v43;
    *v43 = v0;
    v43[1] = sub_154550;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v50)(v0 + 2, v40, v41);
    return;
  }
  v45 = (_QWORD *)v0[294];
  swift_bridgeObjectRetain(v1);
  v4 = (uint64_t *)(v3 + 64);
  while (1)
  {
    v6 = *(v4 - 3);
    v48 = *(v4 - 4);
    v7 = *(v4 - 2);
    v46 = v2;
    v47 = *(v4 - 1);
    v8 = *v4;
    v10 = v45[15];
    v9 = v45[16];
    sub_49F4(v45 + 12, v10);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v9 + 8);
    swift_bridgeObjectRetain(v7);
    v49 = v8;
    v12 = swift_bridgeObjectRetain(v8);
    v14 = v11(v6, v7, v10, v9, v12);
    v15 = v13;
    if (_swiftEmptyDictionarySingleton[2])
    {
      swift_bridgeObjectRetain(v13);
      v16 = sub_39064(v14, v15);
      v17 = _swiftEmptyArrayStorage;
      if ((v18 & 1) != 0)
      {
        v17 = *(_QWORD **)(_swiftEmptyDictionarySingleton[7] + 8 * v16);
        swift_bridgeObjectRetain(v17);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v17 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v49);
    if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
      v17 = sub_319CC(0, v17[2] + 1, 1, v17);
    v20 = v17[2];
    v19 = v17[3];
    if (v20 >= v19 >> 1)
      v17 = sub_319CC((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
    v17[2] = v20 + 1;
    v21 = &v17[5 * v20];
    v21[4] = v48;
    v21[5] = v6;
    v21[6] = v7;
    v21[7] = v47;
    v21[8] = v49;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v24 = sub_39064(v14, v15);
    v25 = _swiftEmptyDictionarySingleton[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      break;
    v28 = v23;
    if (_swiftEmptyDictionarySingleton[3] >= v27)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v23 & 1) != 0)
          goto LABEL_3;
      }
      else
      {
        sub_16E764();
        if ((v28 & 1) != 0)
          goto LABEL_3;
      }
    }
    else
    {
      sub_1619D4(v27, isUniquelyReferenced_nonNull_native);
      v29 = sub_39064(v14, v15);
      if ((v28 & 1) != (v30 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        return;
      }
      v24 = v29;
      if ((v28 & 1) != 0)
      {
LABEL_3:
        v5 = _swiftEmptyDictionarySingleton[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v5 + 8 * v24) = v17;
        goto LABEL_4;
      }
    }
    _swiftEmptyDictionarySingleton[(v24 >> 6) + 8] |= 1 << v24;
    v31 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v24);
    *v31 = v14;
    v31[1] = v15;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v24) = v17;
    v32 = _swiftEmptyDictionarySingleton[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
      goto LABEL_29;
    _swiftEmptyDictionarySingleton[2] = v34;
    swift_bridgeObjectRetain(v15);
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 += 5;
    v2 = v46 - 1;
    if (v46 == 1)
    {
      v0 = v44;
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t sub_154550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2624);
  *(_QWORD *)(*(_QWORD *)v1 + 2632) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = sub_159760;
  }
  else
  {
    v3 = sub_1545C8;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1545C8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *countAndFlagsBits;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v90;
  uint64_t v91;
  Swift::String v92;
  Swift::String v93;
  Swift::String v94;
  unint64_t object;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  void *v105;
  Swift::String v106;
  uint64_t v107;
  unint64_t v108;
  Swift::String v109;
  Swift::String v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  char v133;
  char isUniquelyReferenced_nonNull_native;
  void *v135;
  char v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  void *v141;
  BOOL v142;
  _QWORD *v143;
  Swift::String v144;
  Swift::String v145;
  Swift::String v146;
  Swift::String v147;
  Swift::String v148;
  uint64_t v149;
  void *v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void *v156;
  BOOL v157;
  int v158;
  Swift::String v159;
  Swift::String v160;
  Swift::String v161;
  Swift::String v162;
  Swift::String v163;
  uint64_t v164;
  uint64_t v165;
  Swift::String v166;
  Swift::String v167;
  Swift::String v168;
  uint64_t v169;
  uint64_t v170;
  __n128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  NSObject *v176;
  os_log_type_t v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  char v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t (*v202)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  unint64_t v217;
  uint64_t v218;
  _BOOL8 v219;
  uint64_t v220;
  char v221;
  unint64_t v222;
  char v223;
  uint64_t *v224;
  uint64_t v225;
  BOOL v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char v231;
  uint64_t *v232;
  uint64_t v233;
  uint64_t v234;
  char v235;
  Swift::String v236;
  Swift::String v237;
  Swift::String v238;
  uint64_t v239;
  void *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void *v249;
  void *v250;
  Swift::String v251;
  Swift::String v252;
  Swift::String v253;
  Swift::String v254;
  Swift::String v255;
  Swift::String v256;
  Swift::String v257;
  Swift::String v258;
  Swift::String v259;
  Swift::String v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  void *v271;
  Swift::String v272;
  uint64_t v273;
  unint64_t v274;
  Swift::String v275;
  Swift::String v276;
  _QWORD *v277;
  unint64_t v278;
  _QWORD *v279;
  unint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  _QWORD *v283;
  char v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  NSObject *v290;
  os_log_type_t v291;
  _BOOL4 v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint8_t *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t *v310;
  uint64_t *v311;
  uint64_t *v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  _QWORD *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  int v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  NSDecimal *v336;
  unsigned int v337;
  int v338;
  _QWORD *v339;
  _QWORD *v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int *v374;
  uint64_t v375;
  Swift::String v376[2];

  v1 = v0;
  v2 = (uint64_t)(v0 + 138);
  memcpy(v0 + 138, v0 + 2, 0x440uLL);
  v3 = v0[147];
  v4 = v0[148];
  v5 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0)
    v5 = v3 & 0xFFFFFFFFFFFFLL;
  v6 = v1[329];
  if (v5)
  {
    v7 = swift_bridgeObjectRetain(v4);
    Regex<A>.init(_:)(v3, v4, v7);
    if (v6)
    {
      sub_417D8(v1[323], &qword_1F75B0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_5B70(v2);
      v8 = v1[323];
      v9 = v1[322];
      v10 = v1[321];
      v11 = v1[320];
      v12 = v1;
      v13 = v1[318];
      v14 = v12[315];
      v15 = v12[314];
      v16 = v12[311];
      v17 = v12[308];
      v347 = v12[305];
      v350 = v12[304];
      v352 = v12[303];
      v355 = v12[302];
      v358 = v12[301];
      v361 = v12[300];
      v365 = v12[299];
      v368 = v12[298];
      v372 = v12[297];
      swift_task_dealloc(v8);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v347);
      swift_task_dealloc(v350);
      swift_task_dealloc(v352);
      swift_task_dealloc(v355);
      swift_task_dealloc(v358);
      swift_task_dealloc(v361);
      swift_task_dealloc(v365);
      swift_task_dealloc(v368);
      swift_task_dealloc(v372);
      return ((uint64_t (*)(void))v12[1])();
    }
    v19 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[327];
    v20 = v1[323];
    v21 = v1[322];
    v22 = v1[306];
    sub_417D8(v20, &qword_1F75B0);
    v19(v21, 0, 1, v22);
    sub_41300(v21, v20, &qword_1F75B0);
    v6 = 0;
  }
  sub_5B70(v2);
  v323 = v6;
  if (*((_BYTE *)v1 + 1736) == 1)
  {
    v1[274] = _swiftEmptyDictionarySingleton;
LABEL_11:
    v24 = v1[325];
    v25 = *(_QWORD *)(v24 + 16);
    if (v25)
    {
      v376[0]._countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
      sub_340AC(0, v25, 0);
      countAndFlagsBits = _swiftEmptyArrayStorage;
      v27 = (uint64_t *)(v24 + 32);
      v28 = _swiftEmptyArrayStorage[2];
      do
      {
        v30 = *v27;
        v27 += 5;
        v29 = v30;
        v376[0]._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        v31 = countAndFlagsBits[3];
        if (v28 >= v31 >> 1)
        {
          sub_340AC(v31 > 1, v28 + 1, 1);
          countAndFlagsBits = (_QWORD *)v376[0]._countAndFlagsBits;
        }
        countAndFlagsBits[2] = v28 + 1;
        countAndFlagsBits[v28++ + 4] = v29;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      countAndFlagsBits = _swiftEmptyArrayStorage;
    }
    v32 = v1[320];
    v373 = v1[319];
    v33 = v1[318];
    v34 = v1[317];
    v35 = v1[316];
    v36 = (_QWORD *)v1[294];
    v37 = v1[291];
    v38 = sub_3CD28((uint64_t)countAndFlagsBits);
    v1[330] = v38;
    v39 = swift_bridgeObjectRelease();
    UUID.init()(v39);
    v40 = sub_152D08(v37);
    v41 = sub_3CD28((uint64_t)v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v38);
    v43 = sub_153150(v42, v41);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v32, v33, v35);
    *(_QWORD *)(v32 + *(int *)(v373 + 20)) = v43;
    v44 = v36[25];
    v45 = v36[26];
    sub_49F4(v36 + 22, v44);
    v46 = *(int **)(v45 + 8);
    v374 = (int *)((char *)v46 + *v46);
    v47 = (_QWORD *)swift_task_alloc(v46[1]);
    v1[331] = v47;
    *v47 = v1;
    v47[1] = sub_156E1C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v374)(v1[320], v44, v45);
  }
  v23 = *(unsigned __int8 *)(v1[294] + 216);
  v1[274] = _swiftEmptyDictionarySingleton;
  if (v23 == 1)
    goto LABEL_11;
  v311 = v1 + 282;
  swift_bridgeObjectRelease();
  v48 = v1[291];
  v49 = 0xE000000000000000;
  v319 = v1;
  v328 = *(_QWORD *)(v48 + 16);
  if (!v328)
  {
    swift_bridgeObjectRetain(v48);
LABEL_166:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_170;
  }
  v320 = v1 + 274;
  v309 = v1 + 285;
  v310 = v1 + 283;
  v314 = v1 + 287;
  v315 = v1 + 284;
  v312 = v1 + 286;
  v313 = v1 + 288;
  v333 = v1[326];
  v317 = v1[310];
  v318 = v1[313];
  v50 = v1[307];
  v316 = v1[296];
  v51 = (_QWORD *)v1[294];
  v52 = v1[293];
  v53 = v1[292];
  v327 = v51 + 12;
  v366 = v51;
  v356 = v51 + 17;
  v326 = v48 + 32;
  if (!v52)
    v53 = 0;
  v324 = v1[293];
  if (v52)
    v49 = v1[293];
  v321 = v49;
  v322 = v53;
  v54 = v53 == 0x736569726573 && v49 == 0xE600000000000000;
  v55 = v54;
  v325 = v55;
  swift_bridgeObjectRetain(v48);
  v56 = 0;
  v57 = _swiftEmptyDictionarySingleton;
  v58 = &qword_1F75B0;
  v329 = _swiftEmptyDictionarySingleton;
  v330 = v50;
  while (1)
  {
    v344 = v56;
    v59 = v326 + 104 * v56;
    v60 = *(_QWORD *)(v59 + 8);
    v359 = *(_QWORD *)v59;
    v61 = *(_QWORD *)(v59 + 16);
    v369 = *(_QWORD *)(v59 + 24);
    v62 = *(_QWORD *)(v59 + 32);
    v342 = *(_QWORD *)(v59 + 40);
    v63 = *(_QWORD *)(v59 + 48);
    v338 = *(unsigned __int8 *)(v59 + 56);
    v332 = *(_QWORD *)(v59 + 64);
    v335 = *(_QWORD *)(v59 + 88);
    v336 = *(NSDecimal **)(v59 + 80);
    v334 = *(_DWORD *)(v59 + 96);
    v337 = *(unsigned __int8 *)(v59 + 100);
    v348 = *(_QWORD *)(v59 + 72);
    swift_bridgeObjectRetain(v348);
    swift_bridgeObjectRetain(v61);
    v375 = v62;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRetain(v63);
    v64 = v366[15];
    v65 = v366[16];
    sub_49F4(v327, v64);
    v331 = v60;
    v345 = v61;
    v66 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v65 + 8))(v60, v61, v64, v65);
    v68 = v67;
    v353 = v67;
    v341 = v66;
    if (*(_QWORD *)(v333 + 16))
    {
      v69 = v66;
      swift_bridgeObjectRetain(v67);
      v70 = sub_39064(v69, v68);
      if ((v71 & 1) != 0
        && (v72 = *(_QWORD *)(*(_QWORD *)(v333 + 56) + 8 * v70),
            swift_bridgeObjectRetain(v72),
            swift_bridgeObjectRelease(),
            (v73 = *(_QWORD *)(v72 + 16)) != 0))
      {
        v339 = v57;
        v74 = (uint64_t *)(v72 + 64);
        while (1)
        {
          v362 = v73;
          v75 = *(v74 - 1);
          v76 = *v74;
          v77 = *(v74 - 2);
          v78 = v366[20];
          v79 = v366[21];
          sub_49F4(v356, v78);
          v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v79 + 8);
          swift_bridgeObjectRetain(v77);
          v81 = swift_bridgeObjectRetain(v76);
          v82 = v80(v75, v76, v78, v79, v81);
          v84 = v83;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v85 = v366[20];
          v86 = v366[21];
          sub_49F4(v356, v85);
          v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v86 + 8))(v369, v375, v85, v86);
          if (v82 == v87 && v84 == v88)
            break;
          v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v82, v84, v87, v88, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v90 & 1) != 0)
            goto LABEL_51;
          v74 += 5;
          v73 = v362 - 1;
          if (v362 == 1)
          {
            swift_bridgeObjectRelease();
            v1 = v319;
            v57 = v339;
            v50 = v330;
            v58 = &qword_1F75B0;
            v91 = v348;
            v68 = v353;
            if (v63)
              goto LABEL_55;
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRelease_n(v84, 2);
LABEL_51:
        swift_bridgeObjectRelease();
        v92._countAndFlagsBits = 0;
        v92._object = (void *)0xE000000000000000;
        String.append(_:)(v92);
        swift_bridgeObjectRelease();
        *v313 = v359;
        v93._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v93);
        swift_bridgeObjectRelease();
        v94._countAndFlagsBits = 8744;
        v94._object = (void *)0xE200000000000000;
        String.append(_:)(v94);
        object = v345;
        v58 = &qword_1F75B0;
        v91 = v348;
        if (String.count.getter(v331, v345) < 21)
        {
          swift_bridgeObjectRetain(v345);
          v107 = v331;
        }
        else
        {
          swift_bridgeObjectRetain(v345);
          v96 = sub_3E000(20, v331, v345);
          v98 = v97;
          v100 = v99;
          v102 = v101;
          swift_bridgeObjectRelease();
          v103 = static String._fromSubstring(_:)(v96, v98, v100, v102);
          v105 = v104;
          swift_bridgeObjectRelease();
          v376[0]._countAndFlagsBits = v103;
          v376[0]._object = v105;
          v106._countAndFlagsBits = 10911970;
          v106._object = (void *)0xA300000000000000;
          String.append(_:)(v106);
          v107 = v376[0]._countAndFlagsBits;
          object = (unint64_t)v376[0]._object;
        }
        v1 = v319;
        v57 = v339;
        v50 = v330;
        v108 = object;
        String.append(_:)(*(Swift::String *)&v107);
        swift_bridgeObjectRelease();
        v109._countAndFlagsBits = 10530;
        v109._object = (void *)0xE200000000000000;
        String.append(_:)(v109);
        v110._countAndFlagsBits = 0;
        v110._object = (void *)0xE000000000000000;
        String.append(_:)(v110);
        swift_bridgeObjectRelease();
        sub_1628D4(&v376[0]._countAndFlagsBits, v359);
        v68 = v353;
        if (!v63)
          goto LABEL_44;
      }
      else
      {
        swift_bridgeObjectRelease();
        v91 = v348;
        if (!v63)
        {
LABEL_44:
          if (v325)
            goto LABEL_45;
          goto LABEL_96;
        }
      }
    }
    else
    {
      v91 = v348;
      if (!v63)
        goto LABEL_44;
    }
LABEL_55:
    v111 = (uint64_t)v329;
    v112 = v329[2];
    swift_bridgeObjectRetain(v63);
    if (v112)
    {
      swift_bridgeObjectRetain(v63);
      v113 = sub_39064(v342, v63);
      if ((v114 & 1) != 0)
      {
        v115 = (uint64_t *)(v329[7] + 16 * v113);
        v116 = *v115;
        v117 = (void *)v115[1];
        swift_bridgeObjectRetain(v117);
        swift_bridgeObjectRelease_n(v63, 2);
        goto LABEL_66;
      }
      swift_bridgeObjectRelease();
    }
    v118 = v1[315];
    v119 = v1[314];
    v120 = v1[312];
    v121 = v1[311];
    v122 = v1[309];
    v123 = swift_bridgeObjectRetain(v63);
    v124 = Locale.init(identifier:)(v342, v63, v123);
    Locale.language.getter(v124);
    v125 = (*(uint64_t (**)(uint64_t, uint64_t))(v318 + 8))(v119, v120);
    Locale.Language.languageCode.getter(v125);
    (*(void (**)(uint64_t, uint64_t))(v317 + 8))(v121, v122);
    v126 = type metadata accessor for Locale.LanguageCode(0);
    v127 = v63;
    v128 = *(_QWORD *)(v126 - 8);
    v129 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v118, 1, v126);
    v130 = v1[315];
    if ((_DWORD)v129 != 1)
      break;
    sub_417D8(v1[315], &qword_1F75A8);
    swift_bridgeObjectRetain(v329);
    v131 = sub_39064(v342, v127);
    v133 = v132;
    swift_bridgeObjectRelease();
    if ((v133 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v329);
      v376[0]._countAndFlagsBits = (uint64_t)v329;
      v50 = v330;
      v68 = v353;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_16E918();
        v111 = v376[0]._countAndFlagsBits;
      }
      swift_bridgeObjectRelease();
      v329 = (_QWORD *)v111;
      sub_16FBC0(v131, v111);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v91 = v348;
      if (v325)
      {
LABEL_45:
        swift_bridgeObjectRetain(v324);
        swift_bridgeObjectRelease();
        goto LABEL_99;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v50 = v330;
      v91 = v348;
      v68 = v353;
      if (v325)
        goto LABEL_45;
    }
LABEL_96:
    v158 = _stringCompareWithSmolCheck(_:_:expecting:)(v322, v321, 0x736569726573, 0xE600000000000000, 0);
    swift_bridgeObjectRetain(v324);
    swift_bridgeObjectRelease();
    if (((v158 | v337) & 1) == 0)
    {
      NSDecimal.init(integerLiteral:)((NSDecimal *)(v158 | v337), 1);
      if (NSDecimal.isLess(than:)(v336))
      {
        v376[0]._countAndFlagsBits = 0;
        v376[0]._object = (void *)0xE000000000000000;
        v159._countAndFlagsBits = 0;
        v159._object = (void *)0xE000000000000000;
        String.append(_:)(v159);
        swift_bridgeObjectRelease();
        *v312 = v359;
        v160._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v160);
        swift_bridgeObjectRelease();
        v161._countAndFlagsBits = 40;
        v161._object = (void *)0xE100000000000000;
        String.append(_:)(v161);
        v162._countAndFlagsBits = NSDecimal.description.getter(v336, v335, v334);
        String.append(_:)(v162);
        swift_bridgeObjectRelease();
        v163._countAndFlagsBits = 41;
        v163._object = (void *)0xE100000000000000;
        String.append(_:)(v163);
        String.append(_:)(v376[0]);
        swift_bridgeObjectRelease();
        sub_1628D4(&v376[0]._countAndFlagsBits, v359);
      }
    }
LABEL_99:
    v164 = v1[321];
    v165 = v1[306];
    sub_418BC(v1[323], v164, v58);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v164, 1, v165) == 1)
    {
      sub_417D8(v1[321], v58);
      if (v338)
      {
        v376[0]._countAndFlagsBits = 0;
        v376[0]._object = (void *)0xE000000000000000;
        v166._countAndFlagsBits = 0;
        v166._object = (void *)0xE000000000000000;
        String.append(_:)(v166);
        swift_bridgeObjectRelease();
        *v315 = v359;
        v167._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v167);
        swift_bridgeObjectRelease();
        v168._countAndFlagsBits = 0x6564726F65727028;
        v168._object = (void *)0xEA00000000002972;
        String.append(_:)(v168);
        String.append(_:)(v376[0]);
        swift_bridgeObjectRelease();
        sub_1628D4(&v376[0]._countAndFlagsBits, v359);
        v169 = v359;
        goto LABEL_115;
      }
      goto LABEL_114;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v50 + 32))(v1[308], v1[321], v1[306]);
    v170 = v1[306];
    if (!v91)
    {
      (*(void (**)(_QWORD, _QWORD))(v50 + 8))(v1[308], v1[306]);
      goto LABEL_114;
    }
    v171 = swift_bridgeObjectRetain(v91);
    Regex.wholeMatch(in:)(v332, v91, v170, v171);
    if (v323)
    {
      swift_bridgeObjectRelease();
      if (qword_1F0170 != -1)
        swift_once(&qword_1F0170, sub_153714);
      v172 = v1[297];
      v173 = v1[295];
      v174 = sub_5216C(v173, (uint64_t)qword_1F7578);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v316 + 16))(v172, v174, v173);
      swift_errorRetain(v323);
      v175 = swift_errorRetain(v323);
      v176 = Logger.logObject.getter(v175);
      v177 = static os_log_type_t.default.getter(v176);
      if (os_log_type_enabled(v176, v177))
      {
        v178 = swift_slowAlloc(12, -1);
        v179 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v178 = 138412290;
        swift_errorRetain(v323);
        v180 = _swift_stdlib_bridgeErrorToNSError(v323);
        *(_QWORD *)(v178 + 4) = v180;
        *v179 = v180;
        swift_errorRelease(v323);
        swift_errorRelease(v323);
        _os_log_impl(&dword_0, v176, v177, "Error matching artwork URL against regex: %@", (uint8_t *)v178, 0xCu);
        v181 = sub_5EDC(&qword_1F3158);
        swift_arrayDestroy(v179, 1, v181);
        swift_slowDealloc(v179, -1, -1);
        swift_slowDealloc(v178, -1, -1);

      }
      else
      {

        swift_errorRelease(v323);
        swift_errorRelease(v323);
      }
      v188 = v1[308];
      v189 = v1[306];
      v190 = v1[297];
      v191 = v1[295];
      swift_errorRelease(v323);
      (*(void (**)(uint64_t, uint64_t))(v316 + 8))(v190, v191);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v188, v189);
      v323 = 0;
LABEL_113:
      v68 = v353;
LABEL_114:
      v169 = v359;
      goto LABEL_115;
    }
    v182 = v1[305];
    swift_bridgeObjectRelease();
    v183 = sub_5EDC(&qword_1F75B8);
    v184 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 48))(v182, 1, v183);
    v185 = v1[308];
    v186 = v1[306];
    v187 = v1[305];
    if (v184 == 1)
    {
      (*(void (**)(_QWORD, _QWORD))(v50 + 8))(v1[308], v1[306]);
      sub_417D8(v187, &qword_1F7598);
      v323 = 0;
      v58 = &qword_1F75B0;
      goto LABEL_113;
    }
    v376[0]._countAndFlagsBits = 0;
    v376[0]._object = (void *)0xE000000000000000;
    v252._countAndFlagsBits = 0;
    v252._object = (void *)0xE000000000000000;
    String.append(_:)(v252);
    swift_bridgeObjectRelease();
    *v309 = v359;
    v253._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v253);
    swift_bridgeObjectRelease();
    v254._countAndFlagsBits = 0x29786567657228;
    v254._object = (void *)0xE700000000000000;
    String.append(_:)(v254);
    String.append(_:)(v376[0]);
    swift_bridgeObjectRelease();
    sub_1628D4(&v376[0]._countAndFlagsBits, v359);
    v169 = v359;
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v185, v186);
    sub_417D8(v187, &qword_1F7598);
    v323 = 0;
    v58 = &qword_1F75B0;
    v68 = v353;
LABEL_115:
    if (sub_28554(v169, (uint64_t)&_swiftEmptySetSingleton))
      goto LABEL_116;
    if (v57[2])
    {
      swift_bridgeObjectRetain(v68);
      v192 = sub_39064(v341, v68);
      if ((v193 & 1) != 0)
      {
        v194 = *(_QWORD **)(v57[7] + 8 * v192);
        swift_bridgeObjectRetain(v194);
        swift_bridgeObjectRelease();
        v195 = v194[2];
        if (v195)
        {
          v340 = v57;
          swift_bridgeObjectRetain(v194);
          v343 = v194;
          v196 = v194 + 8;
          while (1)
          {
            v363 = v195;
            v198 = *(v196 - 1);
            v197 = *v196;
            v199 = *(v196 - 2);
            v200 = v366[20];
            v201 = v366[21];
            sub_49F4(v356, v200);
            v202 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v201 + 8);
            swift_bridgeObjectRetain(v199);
            v203 = swift_bridgeObjectRetain(v197);
            v204 = v202(v198, v197, v200, v201, v203);
            v206 = v205;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v207 = v366[20];
            v208 = v366[21];
            sub_49F4(v356, v207);
            v209 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v208 + 8))(v369, v375, v207, v208);
            if (v204 == v209 && v206 == v210)
              break;
            v212 = _stringCompareWithSmolCheck(_:_:expecting:)(v204, v206, v209, v210, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v212 & 1) != 0)
              goto LABEL_151;
            v196 += 5;
            v195 = v363 - 1;
            if (v363 == 1)
            {
              v194 = v343;
              swift_bridgeObjectRelease();
              v1 = v319;
              v57 = v340;
              v50 = v330;
              v58 = &qword_1F75B0;
              v213 = v359;
              v68 = v353;
              goto LABEL_155;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_151:
          swift_bridgeObjectRelease();
          v258._countAndFlagsBits = 0;
          v258._object = (void *)0xE000000000000000;
          String.append(_:)(v258);
          swift_bridgeObjectRelease();
          *v310 = v359;
          v259._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          String.append(_:)(v259);
          swift_bridgeObjectRelease();
          v260._countAndFlagsBits = 8744;
          v260._object = (void *)0xE200000000000000;
          String.append(_:)(v260);
          v261 = v345;
          v1 = v319;
          v57 = v340;
          if (String.count.getter(v331, v345) < 21)
          {
            swift_bridgeObjectRetain(v345);
            v273 = v331;
          }
          else
          {
            swift_bridgeObjectRetain(v345);
            v262 = sub_3E000(20, v331, v345);
            v264 = v263;
            v266 = v265;
            v268 = v267;
            swift_bridgeObjectRelease();
            v269 = static String._fromSubstring(_:)(v262, v264, v266, v268);
            v271 = v270;
            swift_bridgeObjectRelease();
            v376[0]._countAndFlagsBits = v269;
            v376[0]._object = v271;
            v272._countAndFlagsBits = 10911970;
            v272._object = (void *)0xA300000000000000;
            String.append(_:)(v272);
            v273 = v376[0]._countAndFlagsBits;
            v261 = (unint64_t)v376[0]._object;
          }
          v50 = v330;
          v58 = &qword_1F75B0;
          v274 = v261;
          String.append(_:)(*(Swift::String *)&v273);
          swift_bridgeObjectRelease();
          v275._countAndFlagsBits = 10530;
          v275._object = (void *)0xE200000000000000;
          String.append(_:)(v275);
          v276._countAndFlagsBits = 0;
          v276._object = (void *)0xE000000000000000;
          String.append(_:)(v276);
          swift_bridgeObjectRelease();
          v213 = v359;
          sub_1628D4(&v376[0]._countAndFlagsBits, v359);
          v68 = v353;
          v194 = v343;
        }
        else
        {
          v213 = v359;
        }
LABEL_155:
        if (!sub_28554(v213, (uint64_t)&_swiftEmptySetSingleton))
        {
          swift_bridgeObjectRetain(v68);
          swift_bridgeObjectRetain(v375);
          if ((swift_isUniquelyReferenced_nonNull_native(v194) & 1) == 0)
            v194 = sub_319CC(0, v194[2] + 1, 1, v194);
          v277 = v194;
          v278 = v194[2];
          v279 = v277;
          v280 = v277[3];
          v281 = v58;
          if (v278 >= v280 >> 1)
            v279 = sub_319CC((_QWORD *)(v280 > 1), v278 + 1, 1, v279);
          v282 = (uint64_t)v279;
          v279[2] = v278 + 1;
          v283 = &v279[5 * v278];
          v283[4] = v359;
          v283[5] = v341;
          v283[6] = v68;
          v283[7] = v369;
          v283[8] = v375;
          v284 = swift_isUniquelyReferenced_nonNull_native(v57);
          v376[0]._countAndFlagsBits = (uint64_t)v57;
          sub_170740(v282, v341, v68, v284);
          v169 = v359;
          v57 = (_QWORD *)v376[0]._countAndFlagsBits;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v58 = v281;
          v50 = v330;
          goto LABEL_139;
        }
        v169 = v213;
        swift_bridgeObjectRelease();
LABEL_116:
        swift_bridgeObjectRelease();
        goto LABEL_139;
      }
      swift_bridgeObjectRelease();
      v169 = v359;
    }
    v214 = sub_5EDC(&qword_1F12A0);
    v152 = swift_allocObject(v214, 72, 7);
    *(_OWORD *)(v152 + 16) = xmmword_1875E0;
    v139 = v341;
    *(_QWORD *)(v152 + 32) = v169;
    *(_QWORD *)(v152 + 40) = v341;
    *(_QWORD *)(v152 + 48) = v68;
    *(_QWORD *)(v152 + 56) = v369;
    *(_QWORD *)(v152 + 64) = v375;
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v375);
    v215 = swift_isUniquelyReferenced_nonNull_native(v57);
    v376[0]._countAndFlagsBits = (uint64_t)v57;
    v217 = sub_39064(v341, v68);
    v218 = v57[2];
    v219 = (v216 & 1) == 0;
    v220 = v218 + v219;
    if (__OFADD__(v218, v219))
    {
      __break(1u);
LABEL_173:
      __break(1u);
      goto LABEL_174;
    }
    v221 = v216;
    if (v57[3] >= v220)
    {
      if ((v215 & 1) != 0)
      {
        v50 = v330;
        if ((v216 & 1) == 0)
          goto LABEL_133;
      }
      else
      {
        sub_16E764();
        v57 = (_QWORD *)v376[0]._countAndFlagsBits;
        v50 = v330;
        if ((v221 & 1) == 0)
          goto LABEL_133;
      }
    }
    else
    {
      sub_1619D4(v220, v215);
      v57 = (_QWORD *)v376[0]._countAndFlagsBits;
      v222 = sub_39064(v341, v353);
      if ((v221 & 1) != (v223 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v217 = v222;
      v50 = v330;
      if ((v221 & 1) == 0)
      {
LABEL_133:
        v57[(v217 >> 6) + 8] |= 1 << v217;
        v224 = (uint64_t *)(v57[6] + 16 * v217);
        *v224 = v341;
        v224[1] = v353;
        *(_QWORD *)(v57[7] + 8 * v217) = v152;
        v225 = v57[2];
        v226 = __OFADD__(v225, 1);
        v227 = v225 + 1;
        if (v226)
          goto LABEL_173;
        v57[2] = v227;
        swift_bridgeObjectRetain(v353);
        goto LABEL_138;
      }
    }
    v228 = v57[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v228 + 8 * v217) = v152;
LABEL_138:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = &qword_1F75B0;
    v169 = v359;
LABEL_139:
    if (!sub_28554(v169, (uint64_t)&_swiftEmptySetSingleton)
      && (v229 = *v320, *(_QWORD *)(*v320 + 16))
      && (v230 = sub_39228(v359), (v231 & 1) != 0))
    {
      v232 = (uint64_t *)(*(_QWORD *)(v229 + 56) + 16 * v230);
      v234 = *v232;
      v233 = v232[1];
      swift_bridgeObjectRetain(v233);
      swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
      v235 = sub_2861C(v234, v233, (uint64_t)&_swiftEmptySetSingleton);
      swift_bridgeObjectRelease();
      if ((v235 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        sub_1628D4(&v376[0]._countAndFlagsBits, v359);
        v236._countAndFlagsBits = 0;
        v236._object = (void *)0xE000000000000000;
        String.append(_:)(v236);
        swift_bridgeObjectRelease();
        *v311 = v359;
        v237._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v237);
        swift_bridgeObjectRelease();
        v238._countAndFlagsBits = 8744;
        v238._object = (void *)0xE200000000000000;
        String.append(_:)(v238);
        v239 = v331;
        v240 = (void *)v345;
        if (String.count.getter(v331, v345) < 21)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain(v345);
          v241 = sub_3E000(20, v331, v345);
          v243 = v242;
          v245 = v244;
          v247 = v246;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v345, 2);
          swift_bridgeObjectRelease();
          v248 = static String._fromSubstring(_:)(v241, v243, v245, v247);
          v250 = v249;
          swift_bridgeObjectRelease();
          v376[0]._countAndFlagsBits = v248;
          v376[0]._object = v250;
          v251._countAndFlagsBits = 10911970;
          v251._object = (void *)0xA300000000000000;
          String.append(_:)(v251);
          v239 = v376[0]._countAndFlagsBits;
          v240 = v376[0]._object;
        }
        v255._countAndFlagsBits = v239;
        v255._object = v240;
        String.append(_:)(v255);
        swift_bridgeObjectRelease();
        v256._countAndFlagsBits = 10530;
        v256._object = (void *)0xE200000000000000;
        String.append(_:)(v256);
        v257._countAndFlagsBits = 0;
        v257._object = (void *)0xE000000000000000;
        String.append(_:)(v257);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1625CC(&v376[0]._countAndFlagsBits, v234, v233);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v56 = v344 + 1;
    if (v344 + 1 == v328)
      goto LABEL_166;
  }
  v116 = Locale.LanguageCode.identifier.getter(v129);
  v117 = v135;
  (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v130, v126);
  swift_bridgeObjectRetain(v117);
  v136 = swift_isUniquelyReferenced_nonNull_native(v329);
  v376[0]._countAndFlagsBits = (uint64_t)v329;
  sub_17089C(v116, (uint64_t)v117, v342, v127, v136);
  v329 = (_QWORD *)v376[0]._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v50 = v330;
  v91 = v348;
LABEL_66:
  v137 = sub_153A24();
  v138 = v137;
  v139 = v137[2];
  if (!v139)
    goto LABEL_73;
  v140 = v137[4];
  v141 = (void *)v138[5];
  v142 = v140 == v116 && v141 == v117;
  if (v142 || (_stringCompareWithSmolCheck(_:_:expecting:)(v140, v141, v116, v117, 0) & 1) != 0)
    goto LABEL_94;
  if (v139 == 1)
  {
LABEL_73:
    v143 = v57;
LABEL_74:
    swift_bridgeObjectRelease();
    v376[0]._countAndFlagsBits = 0;
    v376[0]._object = (void *)0xE000000000000000;
    v144._countAndFlagsBits = 0;
    v144._object = (void *)0xE000000000000000;
    String.append(_:)(v144);
    swift_bridgeObjectRelease();
    *v314 = v359;
    v145._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v145);
    swift_bridgeObjectRelease();
    v146._countAndFlagsBits = 40;
    v146._object = (void *)0xE100000000000000;
    String.append(_:)(v146);
    v147._countAndFlagsBits = v116;
    v147._object = v117;
    String.append(_:)(v147);
    swift_bridgeObjectRelease();
    v148._countAndFlagsBits = 41;
    v148._object = (void *)0xE100000000000000;
    String.append(_:)(v148);
    String.append(_:)(v376[0]);
    swift_bridgeObjectRelease();
    sub_1628D4(&v376[0]._countAndFlagsBits, v359);
    v57 = v143;
    v58 = &qword_1F75B0;
    goto LABEL_95;
  }
  v149 = v138[6];
  v150 = (void *)v138[7];
  v151 = v149 == v116 && v150 == v117;
  if (v151 || (_stringCompareWithSmolCheck(_:_:expecting:)(v149, v150, v116, v117, 0) & 1) != 0)
  {
LABEL_94:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v58 = &qword_1F75B0;
LABEL_95:
    v68 = v353;
    if (v325)
      goto LABEL_45;
    goto LABEL_96;
  }
  v143 = v57;
  if (v139 == 2)
    goto LABEL_74;
  v152 = (uint64_t)(v138 + 9);
  v153 = 2;
  while (1)
  {
    v154 = v153 + 1;
    if (__OFADD__(v153, 1))
      break;
    v155 = *(_QWORD *)(v152 - 8);
    v156 = *(void **)v152;
    v157 = v155 == v116 && v156 == v117;
    if (v157 || (_stringCompareWithSmolCheck(_:_:expecting:)(v155, v156, v116, v117, 0) & 1) != 0)
    {
      v57 = v143;
      v50 = v330;
      goto LABEL_94;
    }
    ++v153;
    v152 += 16;
    v54 = v154 == v139;
    v50 = v330;
    if (v54)
      goto LABEL_74;
  }
LABEL_174:
  __break(1u);
  swift_once(&qword_1F0170, sub_153714);
  v285 = v1[304];
  v286 = v1[296];
  v287 = v1[295];
  v288 = sub_5216C(v287, (uint64_t)qword_1F7578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v286 + 16))(v285, v288, v287);
  swift_bridgeObjectRetain(v139);
  v290 = Logger.logObject.getter(v289);
  v291 = static os_log_type_t.default.getter(v290);
  v292 = os_log_type_enabled(v290, v291);
  v293 = v1[304];
  v294 = v1[296];
  v295 = v1[295];
  if (v292)
  {
    v370 = v1[304];
    v296 = (uint8_t *)swift_slowAlloc(12, -1);
    v297 = swift_slowAlloc(32, -1);
    v376[0]._countAndFlagsBits = v297;
    *(_DWORD *)v296 = 136315138;
    swift_bridgeObjectRetain(v139);
    v319[281] = sub_9DA98(v152, v139, &v376[0]._countAndFlagsBits);
    v1 = v319;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v319 + 281, v311, v296 + 4, v296 + 12);
    swift_bridgeObjectRelease_n(v139, 3);
    _os_log_impl(&dword_0, v290, v291, "Similar titles in library: %s", v296, 0xCu);
    swift_arrayDestroy(v297, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v297, -1, -1);
    swift_slowDealloc(v296, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v370, v295);
  }
  else
  {
    swift_bridgeObjectRelease_n(v139, 2);

    (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v293, v295);
  }
LABEL_170:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v298 = v1[323];
  swift_bridgeObjectRelease();
  sub_417D8(v298, &qword_1F75B0);
  v299 = v1[323];
  v300 = v1[322];
  v301 = v1[321];
  v302 = v1[320];
  v303 = v1[318];
  v304 = v1[315];
  v305 = v1;
  v306 = v1[314];
  v307 = v305[311];
  v308 = v305[308];
  v346 = v305[305];
  v349 = v305[304];
  v351 = v305[303];
  v354 = v305[302];
  v357 = v305[301];
  v360 = v305[300];
  v364 = v305[299];
  v367 = v305[298];
  v371 = v305[297];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v299);
  swift_task_dealloc(v300);
  swift_task_dealloc(v301);
  swift_task_dealloc(v302);
  swift_task_dealloc(v303);
  swift_task_dealloc(v304);
  swift_task_dealloc(v306);
  swift_task_dealloc(v307);
  swift_task_dealloc(v308);
  swift_task_dealloc(v346);
  swift_task_dealloc(v349);
  swift_task_dealloc(v351);
  swift_task_dealloc(v354);
  swift_task_dealloc(v357);
  swift_task_dealloc(v360);
  swift_task_dealloc(v364);
  swift_task_dealloc(v367);
  swift_task_dealloc(v371);
  return ((uint64_t (*)(void *))v305[1])(&_swiftEmptySetSingleton);
}

uint64_t sub_156E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2648);
  *(_QWORD *)(*v2 + 2656) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6 = sub_1598A8;
  }
  else
  {
    *(_QWORD *)(v4 + 2664) = a1;
    v6 = sub_156EA4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_156EA4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  uint64_t countAndFlagsBits;
  unint64_t object;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v103;
  char v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  int v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;
  Swift::String v125;
  Swift::String v126;
  uint64_t v127;
  uint64_t v128;
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  Swift::String v151;
  Swift::String v152;
  Swift::String v153;
  Swift::String v154;
  Swift::String v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  void *v166;
  Swift::String v167;
  uint64_t v168;
  unint64_t v169;
  Swift::String v170;
  Swift::String v171;
  Swift::String v172;
  Swift::String v173;
  Swift::String v174;
  uint64_t v175;
  unint64_t v176;
  char v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t (*v186)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char v201;
  uint64_t v202;
  _BOOL8 v203;
  uint64_t v204;
  char v205;
  unint64_t v206;
  char v207;
  uint64_t *v208;
  uint64_t v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  Swift::String v213;
  Swift::String v214;
  Swift::String v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  void *v226;
  Swift::String v227;
  uint64_t v228;
  unint64_t v229;
  Swift::String v230;
  Swift::String v231;
  _QWORD *v232;
  unint64_t v233;
  _QWORD *v234;
  unint64_t v235;
  _QWORD *v236;
  char v237;
  uint64_t v238;
  unint64_t v239;
  char v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  char v244;
  Swift::String v245;
  Swift::String v246;
  Swift::String v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  void *v257;
  void *v258;
  Swift::String v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  Swift::String v263;
  Swift::String v264;
  uint64_t v265;
  uint64_t v266;
  BOOL v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  BOOL v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  NSObject *v278;
  os_log_type_t v279;
  _BOOL4 v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint8_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v298;
  uint64_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  uint64_t *v302;
  uint64_t *v303;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t v314;
  _BOOL4 v315;
  uint64_t v316;
  _QWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  NSDecimal *v323;
  uint64_t v324;
  unsigned int v325;
  int v326;
  uint64_t *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  _QWORD *v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _QWORD *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t *v356;
  Swift::String v357[2];

  v1 = v0;
  v2 = v0 + 274;
  v300 = v1 + 282;
  v3 = v1[332];
  v4 = v1[330];
  v5 = v1[320];
  sub_153400(v1[333]);
  v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1[274] = v7;
  sub_152DC4(v4, v2);
  v9 = v8;
  swift_bridgeObjectRelease();
  v306 = sub_3CBC8(v9);
  swift_bridgeObjectRelease();
  sub_170F4C(v5);
  v10 = v1[291];
  v11 = 0xE000000000000000;
  v312 = v1;
  v318 = *(_QWORD *)(v10 + 16);
  if (!v318)
  {
    swift_bridgeObjectRetain(v10);
LABEL_157:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_161;
  }
  v298 = v1 + 285;
  v299 = v1 + 283;
  v304 = v1 + 287;
  v305 = v1 + 284;
  v301 = v1 + 286;
  v302 = v1 + 288;
  v303 = v1 + 289;
  v320 = v1[326];
  v308 = v1[310];
  v309 = v1[313];
  v12 = v1[307];
  v307 = v1[296];
  v13 = (_QWORD *)v1[294];
  v14 = v1[293];
  v15 = v1[292];
  v350 = v13;
  v341 = v13 + 17;
  v316 = v10 + 32;
  v317 = v13 + 12;
  if (!v14)
    v15 = 0;
  v314 = v1[293];
  if (v14)
    v11 = v1[293];
  v310 = v11;
  v311 = v15;
  v17 = v15 == 0x736569726573 && v11 == 0xE600000000000000;
  v315 = v17;
  swift_bridgeObjectRetain(v10);
  v18 = 0;
  v19 = _swiftEmptyDictionarySingleton;
  v333 = _swiftEmptyDictionarySingleton;
  v313 = v3;
  v327 = v2;
  v324 = v12;
  v20 = v2;
  while (1)
  {
    v330 = v18;
    v21 = v316 + 104 * v18;
    v335 = *(_QWORD *)(v21 + 8);
    v22 = *(_QWORD *)(v21 + 16);
    v353 = *(_QWORD *)(v21 + 24);
    v23 = *(uint64_t **)(v21 + 32);
    v328 = *(_QWORD *)(v21 + 40);
    v24 = *(_QWORD *)(v21 + 48);
    v326 = *(unsigned __int8 *)(v21 + 56);
    v25 = *(_QWORD *)(v21 + 72);
    v319 = *(_QWORD *)(v21 + 64);
    v322 = *(_QWORD *)(v21 + 88);
    v323 = *(NSDecimal **)(v21 + 80);
    v321 = *(_DWORD *)(v21 + 96);
    v325 = *(unsigned __int8 *)(v21 + 100);
    v26 = *v20;
    v343 = v25;
    v339 = v24;
    v334 = v22;
    v356 = v23;
    v345 = *(_QWORD *)v21;
    if (*(_QWORD *)(*v20 + 16) && (v27 = sub_39228(*(_QWORD *)v21), (v28 & 1) != 0))
    {
      v29 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v27);
      v30 = *v29;
      v31 = v29[1];
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v356);
      swift_bridgeObjectRetain(v24);
      LOBYTE(v30) = sub_2861C(v30, v31, v306);
      swift_bridgeObjectRelease();
      if ((v30 & 1) != 0)
      {
        v32._countAndFlagsBits = 0;
        v32._object = (void *)0xE000000000000000;
        String.append(_:)(v32);
        swift_bridgeObjectRelease();
        *v303 = v345;
        v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v33);
        swift_bridgeObjectRelease();
        v34._countAndFlagsBits = 8744;
        v34._object = (void *)0xE200000000000000;
        String.append(_:)(v34);
        if (String.count.getter(v335, v22) < 21)
        {
          swift_bridgeObjectRetain(v22);
          countAndFlagsBits = v335;
          object = v22;
        }
        else
        {
          swift_bridgeObjectRetain(v22);
          v35 = sub_3E000(20, v335, v22);
          v37 = v36;
          v39 = v38;
          v41 = v40;
          swift_bridgeObjectRelease();
          v42 = v39;
          v22 = v334;
          v43 = static String._fromSubstring(_:)(v35, v37, v42, v41);
          v45 = v44;
          swift_bridgeObjectRelease();
          v357[0]._countAndFlagsBits = v43;
          v357[0]._object = v45;
          v46._countAndFlagsBits = 10911970;
          v46._object = (void *)0xA300000000000000;
          String.append(_:)(v46);
          countAndFlagsBits = v357[0]._countAndFlagsBits;
          object = (unint64_t)v357[0]._object;
        }
        v150 = object;
        String.append(_:)(*(Swift::String *)&countAndFlagsBits);
        swift_bridgeObjectRelease();
        v151._countAndFlagsBits = 10530;
        v151._object = (void *)0xE200000000000000;
        String.append(_:)(v151);
        v152._countAndFlagsBits = 0;
        v152._object = (void *)0xE000000000000000;
        String.append(_:)(v152);
        swift_bridgeObjectRelease();
        sub_1628D4(&v357[0]._countAndFlagsBits, v345);
      }
    }
    else
    {
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v24);
    }
    v49 = v22;
    v50 = v350[15];
    v51 = v350[16];
    sub_49F4(v317, v50);
    v52 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v51 + 8))(v335, v49, v50, v51);
    v54 = v53;
    v337 = v53;
    v331 = v19;
    v332 = v52;
    if (!*(_QWORD *)(v320 + 16))
      goto LABEL_32;
    v55 = v52;
    swift_bridgeObjectRetain(v53);
    v56 = sub_39064(v55, v54);
    if ((v57 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
    v58 = *(_QWORD *)(*(_QWORD *)(v320 + 56) + 8 * v56);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease();
    v59 = *(_QWORD *)(v58 + 16);
    if (!v59)
    {
      swift_bridgeObjectRelease();
      v1 = v312;
LABEL_32:
      v77 = v343;
      v78 = v339;
      if (!v339)
        goto LABEL_54;
      goto LABEL_33;
    }
    v60 = (uint64_t *)(v58 + 64);
    while (1)
    {
      v347 = v59;
      v62 = *(v60 - 1);
      v61 = *v60;
      v63 = *(v60 - 2);
      v64 = v350[20];
      v65 = v350[21];
      sub_49F4(v341, v64);
      v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v65 + 8);
      swift_bridgeObjectRetain(v63);
      v67 = swift_bridgeObjectRetain(v61);
      v68 = v66(v62, v61, v64, v65, v67);
      v70 = v69;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71 = v350[20];
      v72 = v350[21];
      sub_49F4(v341, v71);
      v73 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v72 + 8))(v353, v356, v71, v72);
      if (v68 == v73 && v70 == v74)
        break;
      v76 = _stringCompareWithSmolCheck(_:_:expecting:)(v68, v70, v73, v74, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v76 & 1) != 0)
        goto LABEL_80;
      v60 += 5;
      v59 = v347 - 1;
      if (v347 == 1)
      {
        swift_bridgeObjectRelease();
        v1 = v312;
        v12 = v324;
        v77 = v343;
        goto LABEL_84;
      }
    }
    swift_bridgeObjectRelease_n(v70, 2);
LABEL_80:
    swift_bridgeObjectRelease();
    v153._countAndFlagsBits = 0;
    v153._object = (void *)0xE000000000000000;
    String.append(_:)(v153);
    swift_bridgeObjectRelease();
    *v302 = v345;
    v154._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v154);
    swift_bridgeObjectRelease();
    v155._countAndFlagsBits = 8744;
    v155._object = (void *)0xE200000000000000;
    String.append(_:)(v155);
    v156 = v334;
    v12 = v324;
    v77 = v343;
    if (String.count.getter(v335, v334) < 21)
    {
      swift_bridgeObjectRetain(v334);
      v168 = v335;
    }
    else
    {
      swift_bridgeObjectRetain(v334);
      v157 = sub_3E000(20, v335, v334);
      v159 = v158;
      v161 = v160;
      v163 = v162;
      swift_bridgeObjectRelease();
      v164 = static String._fromSubstring(_:)(v157, v159, v161, v163);
      v166 = v165;
      swift_bridgeObjectRelease();
      v357[0]._countAndFlagsBits = v164;
      v357[0]._object = v166;
      v167._countAndFlagsBits = 10911970;
      v167._object = (void *)0xA300000000000000;
      String.append(_:)(v167);
      v168 = v357[0]._countAndFlagsBits;
      v156 = (unint64_t)v357[0]._object;
    }
    v1 = v312;
    v169 = v156;
    String.append(_:)(*(Swift::String *)&v168);
    swift_bridgeObjectRelease();
    v170._countAndFlagsBits = 10530;
    v170._object = (void *)0xE200000000000000;
    String.append(_:)(v170);
    v171._countAndFlagsBits = 0;
    v171._object = (void *)0xE000000000000000;
    String.append(_:)(v171);
    swift_bridgeObjectRelease();
    sub_1628D4(&v357[0]._countAndFlagsBits, v345);
LABEL_84:
    v54 = v337;
    v78 = v339;
    if (!v339)
      goto LABEL_54;
LABEL_33:
    v79 = v333[2];
    swift_bridgeObjectRetain(v78);
    v81 = v80;
    if (v79)
    {
      swift_bridgeObjectRetain(v80);
      v82 = sub_39064(v328, v81);
      if ((v83 & 1) != 0)
      {
        v84 = (uint64_t *)(v333[7] + 16 * v82);
        v86 = *v84;
        v85 = v84[1];
        swift_bridgeObjectRetain(v85);
        swift_bridgeObjectRelease_n(v81, 2);
        goto LABEL_43;
      }
      swift_bridgeObjectRelease();
    }
    v87 = v1[315];
    v88 = v1[314];
    v89 = v1[312];
    v90 = v1[311];
    v91 = v1[309];
    v92 = swift_bridgeObjectRetain(v81);
    v93 = Locale.init(identifier:)(v328, v81, v92);
    Locale.language.getter(v93);
    v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v309 + 8))(v88, v89);
    Locale.Language.languageCode.getter(v94);
    (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v90, v91);
    v95 = type metadata accessor for Locale.LanguageCode(0);
    v96 = *(_QWORD *)(v95 - 8);
    v97 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v87, 1, v95);
    v98 = v1[315];
    if ((_DWORD)v97 != 1)
      break;
    sub_417D8(v1[315], &qword_1F75A8);
    swift_bridgeObjectRetain(v333);
    v99 = sub_39064(v328, v81);
    v101 = v100;
    swift_bridgeObjectRelease();
    if ((v101 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v333);
      v357[0]._countAndFlagsBits = (uint64_t)v333;
      v77 = v343;
      v54 = v337;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_16E918();
        v333 = (_QWORD *)v357[0]._countAndFlagsBits;
      }
      swift_bridgeObjectRelease();
      sub_16FBC0(v99, (uint64_t)v333);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v77 = v343;
      v54 = v337;
    }
    v12 = v324;
    if (v315)
    {
LABEL_55:
      swift_bridgeObjectRetain(v314);
      swift_bridgeObjectRelease();
      goto LABEL_61;
    }
LABEL_58:
    v116 = _stringCompareWithSmolCheck(_:_:expecting:)(v311, v310, 0x736569726573, 0xE600000000000000, 0);
    swift_bridgeObjectRetain(v314);
    swift_bridgeObjectRelease();
    if (((v116 | v325) & 1) == 0)
    {
      NSDecimal.init(integerLiteral:)((NSDecimal *)(v116 | v325), 1);
      if (NSDecimal.isLess(than:)(v323))
      {
        v357[0]._countAndFlagsBits = 0;
        v357[0]._object = (void *)0xE000000000000000;
        v117._countAndFlagsBits = 0;
        v117._object = (void *)0xE000000000000000;
        String.append(_:)(v117);
        swift_bridgeObjectRelease();
        *v301 = v345;
        v118._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v118);
        swift_bridgeObjectRelease();
        v119._countAndFlagsBits = 40;
        v119._object = (void *)0xE100000000000000;
        String.append(_:)(v119);
        v120._countAndFlagsBits = NSDecimal.description.getter(v323, v322, v321);
        String.append(_:)(v120);
        swift_bridgeObjectRelease();
        v121._countAndFlagsBits = 41;
        v121._object = (void *)0xE100000000000000;
        String.append(_:)(v121);
        String.append(_:)(v357[0]);
        swift_bridgeObjectRelease();
        v54 = v337;
        sub_1628D4(&v357[0]._countAndFlagsBits, v345);
      }
    }
LABEL_61:
    v122 = v1[321];
    v123 = v1[306];
    sub_418BC(v1[323], v122, &qword_1F75B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v122, 1, v123) == 1)
    {
      sub_417D8(v1[321], &qword_1F75B0);
      if (v326)
      {
        v357[0]._countAndFlagsBits = 0;
        v357[0]._object = (void *)0xE000000000000000;
        v124._countAndFlagsBits = 0;
        v124._object = (void *)0xE000000000000000;
        String.append(_:)(v124);
        swift_bridgeObjectRelease();
        *v305 = v345;
        v125._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v125);
        swift_bridgeObjectRelease();
        v126._countAndFlagsBits = 0x6564726F65727028;
        v126._object = (void *)0xEA00000000002972;
        String.append(_:)(v126);
        String.append(_:)(v357[0]);
        swift_bridgeObjectRelease();
        sub_1628D4(&v357[0]._countAndFlagsBits, v345);
        v127 = v345;
        v54 = v337;
      }
      else
      {
        v127 = v345;
      }
      goto LABEL_87;
    }
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v12 + 32))(v1[308], v1[321], v1[306]);
    v128 = v1[306];
    if (!v77)
    {
      (*(void (**)(_QWORD, _QWORD))(v12 + 8))(v1[308], v1[306]);
      goto LABEL_74;
    }
    v129 = swift_bridgeObjectRetain(v77);
    Regex.wholeMatch(in:)(v319, v77, v128, v129);
    if (!v313)
    {
      v140 = v1[305];
      swift_bridgeObjectRelease();
      v141 = sub_5EDC(&qword_1F75B8);
      v142 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 - 8) + 48))(v140, 1, v141);
      v143 = v1[308];
      v144 = v1[306];
      v145 = v1[305];
      if (v142 != 1)
      {
        v357[0]._countAndFlagsBits = 0;
        v357[0]._object = (void *)0xE000000000000000;
        v172._countAndFlagsBits = 0;
        v172._object = (void *)0xE000000000000000;
        String.append(_:)(v172);
        swift_bridgeObjectRelease();
        *v298 = v345;
        v173._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v173);
        swift_bridgeObjectRelease();
        v174._countAndFlagsBits = 0x29786567657228;
        v174._object = (void *)0xE700000000000000;
        String.append(_:)(v174);
        String.append(_:)(v357[0]);
        swift_bridgeObjectRelease();
        sub_1628D4(&v357[0]._countAndFlagsBits, v345);
        v127 = v345;
        v54 = v337;
        v175 = v144;
        v12 = v324;
        (*(void (**)(uint64_t, uint64_t))(v324 + 8))(v143, v175);
        sub_417D8(v145, &qword_1F7598);
        v313 = 0;
        goto LABEL_87;
      }
      v12 = v324;
      (*(void (**)(_QWORD, _QWORD))(v324 + 8))(v1[308], v1[306]);
      sub_417D8(v145, &qword_1F7598);
      v313 = 0;
LABEL_74:
      v127 = v345;
      goto LABEL_87;
    }
    swift_bridgeObjectRelease();
    if (qword_1F0170 != -1)
      swift_once(&qword_1F0170, sub_153714);
    v130 = v1[297];
    v131 = v1[295];
    v132 = sub_5216C(v131, (uint64_t)qword_1F7578);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v307 + 16))(v130, v132, v131);
    swift_errorRetain(v313);
    v133 = swift_errorRetain(v313);
    v134 = Logger.logObject.getter(v133);
    v135 = static os_log_type_t.default.getter(v134);
    if (os_log_type_enabled(v134, v135))
    {
      v136 = swift_slowAlloc(12, -1);
      v137 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v136 = 138412290;
      swift_errorRetain(v313);
      v138 = _swift_stdlib_bridgeErrorToNSError(v313);
      *(_QWORD *)(v136 + 4) = v138;
      *v137 = v138;
      swift_errorRelease(v313);
      swift_errorRelease(v313);
      _os_log_impl(&dword_0, v134, v135, "Error matching artwork URL against regex: %@", (uint8_t *)v136, 0xCu);
      v139 = sub_5EDC(&qword_1F3158);
      swift_arrayDestroy(v137, 1, v139);
      swift_slowDealloc(v137, -1, -1);
      swift_slowDealloc(v136, -1, -1);

    }
    else
    {

      swift_errorRelease(v313);
      swift_errorRelease(v313);
    }
    v146 = v1[308];
    v147 = v1[306];
    v148 = v1[297];
    v149 = v1[295];
    swift_errorRelease(v313);
    (*(void (**)(uint64_t, uint64_t))(v307 + 8))(v148, v149);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v146, v147);
    v313 = 0;
    v127 = v345;
LABEL_87:
    if (sub_28554(v127, (uint64_t)&_swiftEmptySetSingleton))
      goto LABEL_124;
    if (v19[2])
    {
      swift_bridgeObjectRetain(v54);
      v176 = sub_39064(v332, v54);
      if ((v177 & 1) != 0)
      {
        v178 = *(_QWORD **)(v19[7] + 8 * v176);
        swift_bridgeObjectRetain(v178);
        swift_bridgeObjectRelease();
        v179 = v178[2];
        if (v179)
        {
          swift_bridgeObjectRetain(v178);
          v329 = v178;
          v180 = v178 + 8;
          while (1)
          {
            v348 = v179;
            v182 = *(v180 - 1);
            v181 = *v180;
            v183 = *(v180 - 2);
            v184 = v350[20];
            v185 = v350[21];
            sub_49F4(v341, v184);
            v186 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v185 + 8);
            swift_bridgeObjectRetain(v183);
            v187 = swift_bridgeObjectRetain(v181);
            v188 = v186(v182, v181, v184, v185, v187);
            v190 = v189;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v191 = v350[20];
            v192 = v350[21];
            sub_49F4(v341, v191);
            v193 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v192 + 8))(v353, v356, v191, v192);
            if (v188 == v193 && v190 == v194)
              break;
            v196 = _stringCompareWithSmolCheck(_:_:expecting:)(v188, v190, v193, v194, 0);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v196 & 1) != 0)
              goto LABEL_112;
            v180 += 5;
            --v179;
            if (v348 == 1)
            {
              v178 = v329;
              swift_bridgeObjectRelease();
              v1 = v312;
              v19 = v331;
              v12 = v324;
              v197 = v345;
              goto LABEL_116;
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_112:
          swift_bridgeObjectRelease();
          v213._countAndFlagsBits = 0;
          v213._object = (void *)0xE000000000000000;
          String.append(_:)(v213);
          swift_bridgeObjectRelease();
          *v299 = v345;
          v214._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          String.append(_:)(v214);
          swift_bridgeObjectRelease();
          v215._countAndFlagsBits = 8744;
          v215._object = (void *)0xE200000000000000;
          String.append(_:)(v215);
          v216 = v334;
          v1 = v312;
          v19 = v331;
          if (String.count.getter(v335, v334) < 21)
          {
            swift_bridgeObjectRetain(v334);
            v228 = v335;
          }
          else
          {
            swift_bridgeObjectRetain(v334);
            v217 = sub_3E000(20, v335, v334);
            v219 = v218;
            v221 = v220;
            v223 = v222;
            swift_bridgeObjectRelease();
            v224 = static String._fromSubstring(_:)(v217, v219, v221, v223);
            v226 = v225;
            swift_bridgeObjectRelease();
            v357[0]._countAndFlagsBits = v224;
            v357[0]._object = v226;
            v227._countAndFlagsBits = 10911970;
            v227._object = (void *)0xA300000000000000;
            String.append(_:)(v227);
            v228 = v357[0]._countAndFlagsBits;
            v216 = (unint64_t)v357[0]._object;
          }
          v12 = v324;
          v229 = v216;
          String.append(_:)(*(Swift::String *)&v228);
          swift_bridgeObjectRelease();
          v230._countAndFlagsBits = 10530;
          v230._object = (void *)0xE200000000000000;
          String.append(_:)(v230);
          v231._countAndFlagsBits = 0;
          v231._object = (void *)0xE000000000000000;
          String.append(_:)(v231);
          swift_bridgeObjectRelease();
          v197 = v345;
          sub_1628D4(&v357[0]._countAndFlagsBits, v345);
          v178 = v329;
        }
        else
        {
          v197 = v345;
        }
LABEL_116:
        if (sub_28554(v197, (uint64_t)&_swiftEmptySetSingleton))
        {
          v127 = v197;
        }
        else
        {
          swift_bridgeObjectRetain(v337);
          swift_bridgeObjectRetain(v356);
          if ((swift_isUniquelyReferenced_nonNull_native(v178) & 1) == 0)
            v178 = sub_319CC(0, v178[2] + 1, 1, v178);
          v232 = v178;
          v233 = v178[2];
          v234 = v232;
          v235 = v232[3];
          if (v233 >= v235 >> 1)
            v234 = sub_319CC((_QWORD *)(v235 > 1), v233 + 1, 1, v234);
          v234[2] = v233 + 1;
          v236 = &v234[5 * v233];
          v236[4] = v345;
          v236[5] = v332;
          v236[6] = v337;
          v236[7] = v353;
          v236[8] = v356;
          v237 = swift_isUniquelyReferenced_nonNull_native(v19);
          v357[0]._countAndFlagsBits = (uint64_t)v19;
          sub_170740((uint64_t)v234, v332, v337, v237);
          v127 = v345;
          v19 = (_QWORD *)v357[0]._countAndFlagsBits;
        }
        swift_bridgeObjectRelease();
LABEL_124:
        swift_bridgeObjectRelease();
        goto LABEL_125;
      }
      swift_bridgeObjectRelease();
      v127 = v345;
    }
    v198 = sub_5EDC(&qword_1F12A0);
    v199 = swift_allocObject(v198, 72, 7);
    *(_OWORD *)(v199 + 16) = xmmword_1875E0;
    *(_QWORD *)(v199 + 32) = v127;
    *(_QWORD *)(v199 + 40) = v332;
    *(_QWORD *)(v199 + 48) = v54;
    *(_QWORD *)(v199 + 56) = v353;
    *(_QWORD *)(v199 + 64) = v356;
    swift_bridgeObjectRetain(v54);
    swift_bridgeObjectRetain(v356);
    v200 = swift_isUniquelyReferenced_nonNull_native(v19);
    v357[0]._countAndFlagsBits = (uint64_t)v19;
    v85 = sub_39064(v332, v54);
    v202 = v19[2];
    v203 = (v201 & 1) == 0;
    v204 = v202 + v203;
    if (__OFADD__(v202, v203))
    {
      __break(1u);
LABEL_164:
      __break(1u);
      goto LABEL_165;
    }
    v205 = v201;
    if (v19[3] >= v204)
    {
      if ((v200 & 1) != 0)
      {
        if ((v201 & 1) == 0)
          goto LABEL_104;
      }
      else
      {
        sub_16E764();
        v19 = (_QWORD *)v357[0]._countAndFlagsBits;
        if ((v205 & 1) == 0)
          goto LABEL_104;
      }
    }
    else
    {
      sub_1619D4(v204, v200);
      v19 = (_QWORD *)v357[0]._countAndFlagsBits;
      v206 = sub_39064(v332, v54);
      if ((v205 & 1) != (v207 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      v85 = v206;
      if ((v205 & 1) == 0)
      {
LABEL_104:
        v19[(v85 >> 6) + 8] |= 1 << v85;
        v208 = (uint64_t *)(v19[6] + 16 * v85);
        *v208 = v332;
        v208[1] = v54;
        *(_QWORD *)(v19[7] + 8 * v85) = v199;
        v209 = v19[2];
        v210 = __OFADD__(v209, 1);
        v211 = v209 + 1;
        if (v210)
          goto LABEL_164;
        v19[2] = v211;
        swift_bridgeObjectRetain(v54);
        goto LABEL_109;
      }
    }
    v212 = v19[7];
    swift_bridgeObjectRelease();
    *(_QWORD *)(v212 + 8 * v85) = v199;
LABEL_109:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v324;
    v127 = v345;
LABEL_125:
    if (!sub_28554(v127, (uint64_t)&_swiftEmptySetSingleton)
      && (v238 = *v327, *(_QWORD *)(*v327 + 16))
      && (v239 = sub_39228(v345), (v240 & 1) != 0))
    {
      v241 = (uint64_t *)(*(_QWORD *)(v238 + 56) + 16 * v239);
      v243 = *v241;
      v242 = v241[1];
      swift_bridgeObjectRetain(v242);
      swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
      v244 = sub_2861C(v243, v242, (uint64_t)&_swiftEmptySetSingleton);
      swift_bridgeObjectRelease();
      if ((v244 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1625CC(&v357[0]._countAndFlagsBits, v243, v242);
        swift_bridgeObjectRelease();
        v261 = v330;
        goto LABEL_133;
      }
      swift_bridgeObjectRelease();
      sub_1628D4(&v357[0]._countAndFlagsBits, v345);
      v245._countAndFlagsBits = 0;
      v245._object = (void *)0xE000000000000000;
      String.append(_:)(v245);
      swift_bridgeObjectRelease();
      *v300 = v345;
      v246._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v246);
      swift_bridgeObjectRelease();
      v247._countAndFlagsBits = 8744;
      v247._object = (void *)0xE200000000000000;
      String.append(_:)(v247);
      v248 = v334;
      if (String.count.getter(v335, v334) < 21)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v260 = v335;
      }
      else
      {
        swift_bridgeObjectRetain(v334);
        v249 = sub_3E000(20, v335, v334);
        v251 = v250;
        v253 = v252;
        v255 = v254;
        swift_bridgeObjectRelease_n(v334, 2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v256 = static String._fromSubstring(_:)(v249, v251, v253, v255);
        v258 = v257;
        swift_bridgeObjectRelease();
        v357[0]._countAndFlagsBits = v256;
        v357[0]._object = v258;
        v259._countAndFlagsBits = 10911970;
        v259._object = (void *)0xA300000000000000;
        String.append(_:)(v259);
        v260 = v357[0]._countAndFlagsBits;
        v248 = (unint64_t)v357[0]._object;
      }
      v262 = v248;
      String.append(_:)(*(Swift::String *)&v260);
      swift_bridgeObjectRelease();
      v263._countAndFlagsBits = 10530;
      v263._object = (void *)0xE200000000000000;
      String.append(_:)(v263);
      v264._countAndFlagsBits = 0;
      v264._object = (void *)0xE000000000000000;
      String.append(_:)(v264);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v261 = v330;
LABEL_133:
    v20 = v327;
    v18 = v261 + 1;
    if (v18 == v318)
      goto LABEL_157;
  }
  v86 = Locale.LanguageCode.identifier.getter(v97);
  v85 = v103;
  (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v98, v95);
  swift_bridgeObjectRetain(v85);
  v104 = swift_isUniquelyReferenced_nonNull_native(v333);
  v357[0]._countAndFlagsBits = (uint64_t)v333;
  sub_17089C(v86, v85, v328, v81, v104);
  v333 = (_QWORD *)v357[0]._countAndFlagsBits;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_43:
  v105 = sub_153A24();
  v106 = v105;
  v107 = v105[2];
  v54 = v337;
  if (!v107)
    goto LABEL_50;
  v108 = v105[4];
  v109 = v106[5];
  if (v108 == v86 && v109 == v85)
  {
    v77 = v343;
LABEL_52:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v324;
    goto LABEL_53;
  }
  v77 = v343;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v108, v109, v86, v85, 0) & 1) != 0)
    goto LABEL_52;
  if (v107 == 1)
    goto LABEL_50;
  v265 = v106[6];
  v266 = v106[7];
  v267 = v265 == v86 && v266 == v85;
  if (v267 || (_stringCompareWithSmolCheck(_:_:expecting:)(v265, v266, v86, v85, 0) & 1) != 0)
    goto LABEL_52;
  if (v107 == 2)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    v357[0]._countAndFlagsBits = 0;
    v357[0]._object = (void *)0xE000000000000000;
    v111._countAndFlagsBits = 0;
    v111._object = (void *)0xE000000000000000;
    String.append(_:)(v111);
    swift_bridgeObjectRelease();
    *v304 = v345;
    v112._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v112);
    swift_bridgeObjectRelease();
    v113._countAndFlagsBits = 40;
    v113._object = (void *)0xE100000000000000;
    String.append(_:)(v113);
    v114._countAndFlagsBits = v86;
    v114._object = (void *)v85;
    String.append(_:)(v114);
    swift_bridgeObjectRelease();
    v115._countAndFlagsBits = 41;
    v115._object = (void *)0xE100000000000000;
    String.append(_:)(v115);
    String.append(_:)(v357[0]);
    swift_bridgeObjectRelease();
    sub_1628D4(&v357[0]._countAndFlagsBits, v345);
    v12 = v324;
    v77 = v343;
    v54 = v337;
LABEL_53:
    v19 = v331;
LABEL_54:
    if (v315)
      goto LABEL_55;
    goto LABEL_58;
  }
  v199 = (unint64_t)(v106 + 9);
  v268 = 2;
  while (1)
  {
    v269 = v268 + 1;
    if (__OFADD__(v268, 1))
      break;
    v270 = *(_QWORD *)(v199 - 8);
    v271 = *(_QWORD *)v199;
    v272 = v270 == v86 && v271 == v85;
    if (v272 || (_stringCompareWithSmolCheck(_:_:expecting:)(v270, v271, v86, v85, 0) & 1) != 0)
    {
      v77 = v343;
      v54 = v337;
      goto LABEL_52;
    }
    ++v268;
    v199 += 16;
    if (v269 == v107)
      goto LABEL_50;
  }
LABEL_165:
  __break(1u);
  swift_once(&qword_1F0170, sub_153714);
  v273 = v1[304];
  v274 = v1[296];
  v275 = v1[295];
  v276 = sub_5216C(v275, (uint64_t)qword_1F7578);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v274 + 16))(v273, v276, v275);
  swift_bridgeObjectRetain(v199);
  v278 = Logger.logObject.getter(v277);
  v279 = static os_log_type_t.default.getter(v278);
  v280 = os_log_type_enabled(v278, v279);
  v281 = v1[304];
  v282 = v1[296];
  v283 = v1[295];
  if (v280)
  {
    v354 = v1[295];
    v351 = v1[304];
    v284 = (uint8_t *)swift_slowAlloc(12, -1);
    v285 = swift_slowAlloc(32, -1);
    v357[0]._countAndFlagsBits = v285;
    *(_DWORD *)v284 = 136315138;
    swift_bridgeObjectRetain(v199);
    *v356 = sub_9DA98(v85, v199, &v357[0]._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v356, v300, v284 + 4, v284 + 12);
    swift_bridgeObjectRelease_n(v199, 3);
    _os_log_impl(&dword_0, v278, v279, "Similar titles in library: %s", v284, 0xCu);
    swift_arrayDestroy(v285, 1, (char *)&type metadata for Any + 8);
    v1 = v312;
    swift_slowDealloc(v285, -1, -1);
    swift_slowDealloc(v284, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v282 + 8))(v351, v354);
  }
  else
  {
    swift_bridgeObjectRelease_n(v199, 2);

    (*(void (**)(uint64_t, uint64_t))(v282 + 8))(v281, v283);
  }
LABEL_161:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v286 = v1[323];
  swift_bridgeObjectRelease();
  sub_417D8(v286, &qword_1F75B0);
  v287 = v1[323];
  v288 = v1[322];
  v289 = v1[321];
  v290 = v1[320];
  v291 = v1[318];
  v292 = v1[315];
  v293 = v1[314];
  v294 = v1;
  v295 = v1[311];
  v296 = v1[308];
  v336 = v294[305];
  v338 = v294[304];
  v340 = v294[303];
  v342 = v294[302];
  v344 = v294[301];
  v346 = v294[300];
  v349 = v294[299];
  v352 = v294[298];
  v355 = v294[297];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v287);
  swift_task_dealloc(v288);
  swift_task_dealloc(v289);
  swift_task_dealloc(v290);
  swift_task_dealloc(v291);
  swift_task_dealloc(v292);
  swift_task_dealloc(v293);
  swift_task_dealloc(v295);
  swift_task_dealloc(v296);
  swift_task_dealloc(v336);
  swift_task_dealloc(v338);
  swift_task_dealloc(v340);
  swift_task_dealloc(v342);
  swift_task_dealloc(v344);
  swift_task_dealloc(v346);
  swift_task_dealloc(v349);
  swift_task_dealloc(v352);
  swift_task_dealloc(v355);
  return ((uint64_t (*)(void *))v294[1])(&_swiftEmptySetSingleton);
}

uint64_t sub_159760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_417D8(*(_QWORD *)(v0 + 2584), &qword_1F75B0);
  v1 = *(_QWORD *)(v0 + 2576);
  v2 = *(_QWORD *)(v0 + 2568);
  v3 = *(_QWORD *)(v0 + 2560);
  v4 = *(_QWORD *)(v0 + 2544);
  v5 = *(_QWORD *)(v0 + 2520);
  v6 = *(_QWORD *)(v0 + 2512);
  v7 = *(_QWORD *)(v0 + 2488);
  v8 = *(_QWORD *)(v0 + 2464);
  v9 = *(_QWORD *)(v0 + 2440);
  v11 = *(_QWORD *)(v0 + 2432);
  v12 = *(_QWORD *)(v0 + 2424);
  v13 = *(_QWORD *)(v0 + 2416);
  v14 = *(_QWORD *)(v0 + 2408);
  v15 = *(_QWORD *)(v0 + 2400);
  v16 = *(_QWORD *)(v0 + 2392);
  v17 = *(_QWORD *)(v0 + 2384);
  v18 = *(_QWORD *)(v0 + 2376);
  swift_task_dealloc(*(_QWORD *)(v0 + 2584));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1598A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 2584);
  sub_170F4C(*(_QWORD *)(v0 + 2560));
  sub_417D8(v1, &qword_1F75B0);
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + 2576);
  v3 = *(_QWORD *)(v0 + 2568);
  v4 = *(_QWORD *)(v0 + 2560);
  v5 = *(_QWORD *)(v0 + 2544);
  v6 = *(_QWORD *)(v0 + 2520);
  v7 = *(_QWORD *)(v0 + 2512);
  v8 = *(_QWORD *)(v0 + 2488);
  v9 = *(_QWORD *)(v0 + 2464);
  v10 = *(_QWORD *)(v0 + 2440);
  v12 = *(_QWORD *)(v0 + 2432);
  v13 = *(_QWORD *)(v0 + 2424);
  v14 = *(_QWORD *)(v0 + 2416);
  v15 = *(_QWORD *)(v0 + 2408);
  v16 = *(_QWORD *)(v0 + 2400);
  v17 = *(_QWORD *)(v0 + 2392);
  v18 = *(_QWORD *)(v0 + 2384);
  v19 = *(_QWORD *)(v0 + 2376);
  swift_task_dealloc(*(_QWORD *)(v0 + 2584));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_159A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1F7594);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_70AB4;
  return BookRecommendationPostHydrationFilteringService.storeIDsOfDuplicateAssets(fromCandidates:collectionType:)(a1, a2, a3);
}

uint64_t sub_159A6C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[4];
  int v48;
  uint64_t *v49;
  int64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;

  v3 = v2;
  v6 = type metadata accessor for Calendar(0);
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  __chkstk_darwin(v6);
  v55 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for TimeZone(0);
  v54 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = &v47[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v12 = a1;
  else
    v12 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(&qword_1F77C8);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v11, v12, a2);
  v14 = v13;
  if (!*(_QWORD *)(v11 + 16))
  {
    v44 = v11;
LABEL_45:
    result = swift_release(v44);
    *v3 = v14;
    return result;
  }
  v15 = 1 << *(_BYTE *)(v11 + 32);
  v16 = *(_QWORD *)(v11 + 64);
  v51 = (_QWORD *)(v11 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v49 = v3;
  v50 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  v53 = v11;
  result = swift_retain(v11);
  v21 = 0;
  v48 = a2;
  v22 = 16;
  if ((a2 & 1) != 0)
    v22 = 32;
  v52 = v22;
  v23 = v22;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v21 << 6);
      goto LABEL_27;
    }
    v27 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v27 >= v50)
    {
      v45 = v53;
      swift_release(v53);
      v3 = v49;
      v28 = v51;
      if ((v48 & 1) != 0)
      {
LABEL_40:
        v46 = 1 << *(_BYTE *)(v45 + 32);
        if (v46 >= 64)
          bzero(v28, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
        else
          *v28 = -1 << v46;
        *(_QWORD *)(v45 + 16) = 0;
      }
LABEL_44:
      v44 = v45;
      goto LABEL_45;
    }
    v28 = v51;
    v29 = v51[v27];
    ++v21;
    if (!v29)
    {
      v21 = v27 + 1;
      if (v27 + 1 >= v50)
        goto LABEL_37;
      v29 = v51[v21];
      if (!v29)
        break;
    }
LABEL_26:
    v18 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v21 << 6);
LABEL_27:
    v31 = v53;
    v32 = *(_QWORD *)(v54 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v54 + v23))(v10, *(_QWORD *)(v53 + 48) + v32 * v26, v8);
    v33 = *(_QWORD *)(v31 + 56);
    v34 = *(_QWORD *)(v56 + 72);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v56 + v23))(v55, v33 + v34 * v26, v57);
    v35 = *(_QWORD *)(v14 + 40);
    v36 = sub_41754(&qword_1F12D0, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v8, v36);
    v37 = -1 << *(_BYTE *)(v14 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v19 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v19 + 8 * v39);
      }
      while (v43 == -1);
      v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v19 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    (*(void (**)(unint64_t, _BYTE *, uint64_t))(v54 + 32))(*(_QWORD *)(v14 + 48) + v32 * v24, v10, v8);
    result = (*(uint64_t (**)(unint64_t, _BYTE *, uint64_t))(v56 + 32))(*(_QWORD *)(v14 + 56) + v34 * v24, v55, v57);
    ++*(_QWORD *)(v14 + 16);
  }
  v30 = v27 + 2;
  if (v30 >= v50)
  {
LABEL_37:
    v45 = v53;
    swift_release(v53);
    v3 = v49;
    if ((v48 & 1) != 0)
      goto LABEL_40;
    goto LABEL_44;
  }
  v29 = v51[v30];
  if (v29)
  {
    v21 = v30;
    goto LABEL_26;
  }
  while (1)
  {
    v21 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v21 >= v50)
      goto LABEL_37;
    v29 = v51[v21];
    ++v30;
    if (v29)
      goto LABEL_26;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t sub_159E64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  _BYTE __src[377];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F44D8);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v31 = 1 << *(_BYTE *)(v5 + 32);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v32 & 1) != 0)
              {
                if (v31 >= 64)
                  bzero((void *)(v5 + 64), 8 * v14);
                else
                  *v10 = v30;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_42;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      memcpy(__src, (const void *)(*(_QWORD *)(v5 + 56) + 384 * v18), sizeof(__src));
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v15 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v15 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v15 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      result = (uint64_t)memcpy((void *)(*(_QWORD *)(v8 + 56) + 384 * v16), __src, 0x179uLL);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_15A11C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;

  v3 = v2;
  v6 = type metadata accessor for StoreBook(0);
  v39 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(&qword_1F7710);
  v40 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = result;
  if (*(_QWORD *)(v9 + 16))
  {
    v36 = v3;
    v12 = 0;
    v13 = *(_QWORD *)(v9 + 64);
    v38 = (_QWORD *)(v9 + 64);
    v14 = 1 << *(_BYTE *)(v9 + 32);
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v16 = v15 & v13;
    v37 = (unint64_t)(v14 + 63) >> 6;
    v17 = result + 64;
    while (1)
    {
      if (v16)
      {
        v19 = __clz(__rbit64(v16));
        v16 &= v16 - 1;
        v20 = v19 | (v12 << 6);
      }
      else
      {
        v21 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = (uint64_t)v38;
        if (v21 >= v37)
          goto LABEL_36;
        v22 = v38[v21];
        ++v12;
        if (!v22)
        {
          v12 = v21 + 1;
          if (v21 + 1 >= v37)
            goto LABEL_36;
          v22 = v38[v12];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_36:
              if ((v40 & 1) == 0)
              {
                result = swift_release(v9);
                v3 = v36;
                goto LABEL_43;
              }
              v34 = 1 << *(_BYTE *)(v9 + 32);
              if (v34 >= 64)
                bzero(v38, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v34;
              v3 = v36;
              *(_QWORD *)(v9 + 16) = 0;
              break;
            }
            v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                v12 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v12 >= v37)
                  goto LABEL_36;
                v22 = v38[v12];
                ++v23;
                if (v22)
                  goto LABEL_23;
              }
            }
            v12 = v23;
          }
        }
LABEL_23:
        v16 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }
      v24 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v20);
      v25 = *(_QWORD *)(v39 + 72);
      v26 = *(_QWORD *)(v9 + 56) + v25 * v20;
      if ((v40 & 1) != 0)
        sub_A2618(v26, (uint64_t)v8, type metadata accessor for StoreBook);
      else
        sub_26A5C(v26, (uint64_t)v8, type metadata accessor for StoreBook);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v11 + 40), v24);
      v27 = -1 << *(_BYTE *)(v11 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v17 + 8 * v29);
        }
        while (v33 == -1);
        v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v18) = v24;
      result = sub_A2618((uint64_t)v8, *(_QWORD *)(v11 + 56) + v25 * v18, type metadata accessor for StoreBook);
      ++*(_QWORD *)(v11 + 16);
    }
  }
  result = swift_release(v9);
LABEL_43:
  *v3 = v11;
  return result;
}

uint64_t sub_15A44C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  _BYTE __src[545];
  _BYTE v61[392];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F3DD0);
  v43 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v41 = (uint64_t *)(v5 + 64);
    v42 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v37 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v38 = 1 << *(_BYTE *)(v5 + 32);
    v39 = v3;
    v40 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v15 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v16 = v15 | (v9 << 6);
      }
      else
      {
        v17 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        result = (uint64_t)v41;
        if (v17 >= v40)
          goto LABEL_37;
        v18 = v41[v17];
        ++v9;
        if (!v18)
        {
          v9 = v17 + 1;
          if (v17 + 1 >= v40)
            goto LABEL_37;
          v18 = v41[v9];
          if (!v18)
          {
            v19 = v17 + 2;
            if (v19 >= v40)
            {
LABEL_37:
              if ((v43 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v39;
                goto LABEL_44;
              }
              if (v38 >= 64)
                bzero(v41, 8 * v40);
              else
                *v41 = v37;
              v3 = v39;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v18 = v41[v19];
            if (!v18)
            {
              while (1)
              {
                v9 = v19 + 1;
                if (__OFADD__(v19, 1))
                  goto LABEL_46;
                if (v9 >= v40)
                  goto LABEL_37;
                v18 = v41[v9];
                ++v19;
                if (v18)
                  goto LABEL_24;
              }
            }
            v9 = v19;
          }
        }
LABEL_24:
        v12 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v9 << 6);
      }
      v20 = 552 * v16;
      v21 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16);
      if ((v43 & 1) != 0)
      {
        v22 = *(_QWORD *)(v5 + 56) + v20;
        v51 = *(_QWORD *)v22;
        v46 = *(_BYTE *)(v22 + 8);
        v59 = *(_OWORD *)(v22 + 16);
        v58 = *(_QWORD *)(v22 + 32);
        v56 = *(_BYTE *)(v22 + 40);
        v53 = *(_BYTE *)(v22 + 56);
        v48 = *(_BYTE *)(v22 + 72);
        v23 = v9;
        v25 = *(_QWORD *)(v22 + 80);
        v24 = *(_QWORD *)(v22 + 88);
        v26 = *(_QWORD *)(v22 + 96);
        v47 = *(_QWORD *)(v22 + 104);
        v44 = *(_QWORD *)(v22 + 120);
        v45 = *(_QWORD *)(v22 + 112);
        v57 = *(_QWORD *)(v22 + 128);
        v54 = *(_QWORD *)(v22 + 48);
        v55 = *(_QWORD *)(v22 + 136);
        v49 = *(_QWORD *)(v22 + 64);
        v50 = *(_QWORD *)(v22 + 144);
        sub_41300(v22 + 152, (uint64_t)__src, &qword_1F2D68);
        v52 = *(_QWORD *)(v22 + 536);
        v27 = __src;
        v28 = v25;
        v9 = v23;
        v29 = *(_BYTE *)(v22 + 544);
      }
      else
      {
        memcpy(__src, (const void *)(*(_QWORD *)(v5 + 56) + v20), sizeof(__src));
        v29 = __src[544];
        v28 = *(_QWORD *)&__src[80];
        v24 = *(_QWORD *)&__src[88];
        v26 = *(_QWORD *)&__src[96];
        v47 = *(_QWORD *)&__src[104];
        v44 = *(_QWORD *)&__src[120];
        v45 = *(_QWORD *)&__src[112];
        v50 = *(_QWORD *)&__src[144];
        v46 = __src[8];
        v59 = *(_OWORD *)&__src[16];
        v57 = *(_QWORD *)&__src[128];
        v58 = *(_QWORD *)&__src[32];
        v56 = __src[40];
        v54 = *(_QWORD *)&__src[48];
        v55 = *(_QWORD *)&__src[136];
        v53 = __src[56];
        v49 = *(_QWORD *)&__src[64];
        v48 = __src[72];
        v51 = *(_QWORD *)__src;
        v52 = *(_QWORD *)&__src[536];
        sub_6100(__src);
        v27 = &__src[152];
      }
      sub_41300((uint64_t)v27, (uint64_t)v61, &qword_1F2D68);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v21);
      v30 = -1 << *(_BYTE *)(v8 + 32);
      v31 = result & ~v30;
      v32 = v31 >> 6;
      if (((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v31) & ~*(_QWORD *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v35 = v32 == v34;
          if (v32 == v34)
            v32 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)(v13 + 8 * v32);
        }
        while (v36 == -1);
        v14 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(_QWORD *)__src = v51;
      __src[8] = v46;
      *(_OWORD *)&__src[16] = v59;
      *(_QWORD *)&__src[32] = v58;
      __src[40] = v56;
      *(_QWORD *)&__src[48] = v54;
      __src[56] = v53;
      *(_QWORD *)&__src[64] = v49;
      __src[72] = v48;
      *(_QWORD *)&__src[80] = v28;
      *(_QWORD *)&__src[88] = v24;
      *(_QWORD *)&__src[96] = v26;
      *(_QWORD *)&__src[104] = v47;
      *(_QWORD *)&__src[112] = v45;
      *(_QWORD *)&__src[120] = v44;
      *(_QWORD *)&__src[128] = v57;
      *(_QWORD *)&__src[136] = v55;
      *(_QWORD *)&__src[144] = v50;
      sub_41300((uint64_t)v61, (uint64_t)&__src[152], &qword_1F2D68);
      *(_QWORD *)&__src[536] = v52;
      __src[544] = v29;
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v21;
      result = (uint64_t)memcpy((void *)(*(_QWORD *)(v8 + 56) + 552 * v14), __src, 0x221uLL);
      ++*(_QWORD *)(v8 + 16);
      v5 = v42;
    }
  }
  result = swift_release(v5);
LABEL_44:
  *v3 = v8;
  return result;
}

Swift::Int sub_15A918(uint64_t a1, uint64_t a2)
{
  return sub_160C74(a1, a2, &qword_1F0298);
}

uint64_t sub_15A924(uint64_t a1, uint64_t a2)
{
  return sub_15EBDC(a1, a2, &qword_1F1DE0);
}

Swift::Int sub_15A930(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F1D18);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_47;
  v35 = a2;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return result;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v15;
    if (!v21)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_40;
      v21 = *(_QWORD *)(v37 + 8 * v15);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_40:
          swift_release(v5);
          v3 = v36;
          if ((v35 & 1) == 0)
            goto LABEL_47;
          goto LABEL_43;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v15 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_49;
            if (v15 >= v12)
              goto LABEL_40;
            v21 = *(_QWORD *)(v37 + 8 * v15);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v15 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    if (v23)
      v25 = 0x6F6F626F69647561;
    else
      v25 = 0x6B6F6F6265;
    if (v23)
      v26 = 0xE90000000000006BLL;
    else
      v26 = 0xE500000000000000;
    String.hash(into:)(v38, v25, v26);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_48;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v13 + 8 * v29);
      }
      while (v33 == -1);
      v16 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v23;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v16) = v24;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v20 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_47;
LABEL_43:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_47:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_15AC48(uint64_t a1, uint64_t a2)
{
  return sub_160C74(a1, a2, &qword_1F1D20);
}

uint64_t sub_15AC54(uint64_t a1, uint64_t a2)
{
  return sub_1609B8(a1, a2, &qword_1F1D28);
}

Swift::Int sub_15AC60(uint64_t a1, uint64_t a2)
{
  return sub_15AFB0(a1, a2, &qword_1F0290, &qword_1F76F0);
}

Swift::Int sub_15AC74(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  char v37;
  _QWORD v38[9];
  _BYTE v39[40];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F0F18);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    result = swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v19 >= v35)
          goto LABEL_37;
        v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v35)
            goto LABEL_37;
          v20 = v36[v14];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((v37 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                v14 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_44;
                if (v14 >= v35)
                  goto LABEL_37;
                v20 = v36[v14];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v14 = v21;
          }
        }
LABEL_24:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v18);
      v24 = *v22;
      v23 = v22[1];
      v25 = *(_QWORD *)(v5 + 56) + 40 * v18;
      if ((v37 & 1) != 0)
      {
        sub_41300(v25, (uint64_t)v39, &qword_1F0E70);
      }
      else
      {
        sub_418BC(v25, (uint64_t)v39, &qword_1F0E70);
        swift_bridgeObjectRetain(v23);
      }
      Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v38, v24, v23);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v15);
      *v16 = v24;
      v16[1] = v23;
      result = sub_41300((uint64_t)v39, *(_QWORD *)(v8 + 56) + 40 * v15, &qword_1F0E70);
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_15AF9C(uint64_t a1, uint64_t a2)
{
  return sub_15AFB0(a1, a2, &qword_1F1610, &qword_1F76F8);
}

Swift::Int sub_15AFB0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  Swift::Int result;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[9];

  v6 = v4;
  v51 = sub_5EDC(a3);
  v9 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v6;
  if (*(_QWORD *)(*v6 + 24) > a1)
    a1 = *(_QWORD *)(*v6 + 24);
  sub_5EDC(a4);
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_48;
  v47 = v6;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v49 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v48 = (unint64_t)(v15 + 63) >> 6;
  v19 = a2;
  v20 = v13 + 64;
  result = swift_retain(v12);
  v22 = 0;
  v46 = v19;
  v23 = 16;
  if ((v19 & 1) != 0)
    v23 = 32;
  v50 = v23;
  while (1)
  {
    if (v18)
    {
      v25 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v26 = v25 | (v22 << 6);
      goto LABEL_26;
    }
    v27 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      return result;
    }
    if (v27 >= v48)
      break;
    v28 = v49;
    v29 = v49[v27];
    ++v22;
    if (!v29)
    {
      v22 = v27 + 1;
      if (v27 + 1 >= v48)
        goto LABEL_41;
      v29 = v49[v22];
      if (!v29)
      {
        v30 = v27 + 2;
        if (v30 >= v48)
        {
LABEL_41:
          swift_release(v12);
          v6 = v47;
          if ((v46 & 1) == 0)
            goto LABEL_48;
          goto LABEL_44;
        }
        v29 = v49[v30];
        if (!v29)
        {
          while (1)
          {
            v22 = v30 + 1;
            if (__OFADD__(v30, 1))
              goto LABEL_50;
            if (v22 >= v48)
              goto LABEL_41;
            v29 = v49[v22];
            ++v30;
            if (v29)
              goto LABEL_25;
          }
        }
        v22 = v30;
      }
    }
LABEL_25:
    v18 = (v29 - 1) & v29;
    v26 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_26:
    v31 = *(_QWORD *)(v12 + 56);
    v32 = v12;
    v33 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 48) + v26);
    v34 = *(_QWORD *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + v50))(v11, v31 + v34 * v26, v51);
    Hasher.init(_seed:)(v52, *(_QWORD *)(v14 + 40));
    if (v33)
      v35 = 0x6F6F626F69647561;
    else
      v35 = 0x6B6F6F6265;
    if (v33)
      v36 = 0xE90000000000006BLL;
    else
      v36 = 0xE500000000000000;
    String.hash(into:)(v52, v35, v36);
    swift_bridgeObjectRelease(v36);
    result = Hasher._finalize()();
    v37 = -1 << *(_BYTE *)(v14 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v20 + 8 * (v38 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v20 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_49;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v20 + 8 * v39);
      }
      while (v43 == -1);
      v24 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v20 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    *(_BYTE *)(*(_QWORD *)(v14 + 48) + v24) = v33;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 56) + v34 * v24, v11, v51);
    ++*(_QWORD *)(v14 + 16);
    v12 = v32;
  }
  swift_release(v12);
  v6 = v47;
  v28 = v49;
  if ((v46 & 1) == 0)
    goto LABEL_48;
LABEL_44:
  v44 = 1 << *(_BYTE *)(v12 + 32);
  if (v44 >= 64)
    bzero(v28, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v28 = -1 << v44;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_48:
  result = swift_release(v12);
  *v6 = v14;
  return result;
}

Swift::Int sub_15B35C(uint64_t a1, uint64_t a2)
{
  return sub_160C74(a1, a2, &qword_1F1618);
}

uint64_t sub_15B368(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7700);
  v42 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v9 = 0;
    v40 = (uint64_t *)(v5 + 64);
    v41 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v36 = -1 << v10;
    v37 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = (uint64_t)v40;
        if (v21 >= v39)
          goto LABEL_36;
        v22 = v40[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v39)
            goto LABEL_36;
          v22 = v40[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_36:
              if ((v42 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v38;
                goto LABEL_43;
              }
              if (v37 >= 64)
                bzero(v40, 8 * v39);
              else
                *v40 = v36;
              v3 = v38;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v39)
                  goto LABEL_36;
                v22 = v40[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 80 * v20;
      v30 = *(_QWORD *)v29;
      v46 = *(_BYTE *)(v29 + 8);
      v45 = *(_QWORD *)(v29 + 16);
      v44 = *(_BYTE *)(v29 + 24);
      v31 = *(_QWORD *)(v29 + 32);
      v32 = *(_BYTE *)(v29 + 40);
      v33 = *(_QWORD *)(v29 + 48);
      v43 = *(_QWORD *)(v29 + 56);
      v34 = *(_QWORD *)(v29 + 64);
      v35 = *(_QWORD *)(v29 + 72);
      if ((v42 & 1) == 0)
      {
        sub_40554(v31, v32);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v33);
      }
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 80 * v17;
      *(_QWORD *)v18 = v30;
      *(_BYTE *)(v18 + 8) = v46;
      *(_QWORD *)(v18 + 16) = v45;
      *(_BYTE *)(v18 + 24) = v44;
      *(_QWORD *)(v18 + 32) = v31;
      *(_BYTE *)(v18 + 40) = v32;
      *(_QWORD *)(v18 + 48) = v33;
      *(_QWORD *)(v18 + 56) = v43;
      *(_QWORD *)(v18 + 64) = v34;
      *(_QWORD *)(v18 + 72) = v35;
      ++*(_QWORD *)(v8 + 16);
      v5 = v41;
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_15B6B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  uint64_t v21[9];
  _BYTE v22[40];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F76E0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_32;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v20 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v20 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_32;
    goto LABEL_28;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v20 <= 2)
    goto LABEL_25;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    v17 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v11);
    if ((a2 & 1) != 0)
      sub_26DB8(v17, (uint64_t)v22);
    else
      sub_3DD40((uint64_t)v17, (uint64_t)v22);
    Hasher.init(_seed:)(v21, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v20 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x15BA38);
      }
      if (v14 >= v20)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_25:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_32;
LABEL_28:
  v18 = 1 << *(_BYTE *)(v5 + 32);
  if (v18 >= 64)
    bzero(v12, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v18;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_32:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

uint64_t sub_15BA48(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t i;
  int v45;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F1D50);
  v45 = a2;
  v11 = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_43;
  v13 = 1 << *(_BYTE *)(v10 + 32);
  v14 = *(_QWORD *)(v10 + 64);
  v43 = (_QWORD *)(v10 + 64);
  if (v13 < 64)
    v15 = ~(-1 << v13);
  else
    v15 = -1;
  v16 = v15 & v14;
  v41 = v2;
  v42 = (unint64_t)(v13 + 63) >> 6;
  v17 = v11 + 64;
  result = swift_retain(v10);
  v19 = 0;
  for (i = v10; ; v10 = i)
  {
    if (v16)
    {
      v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v22 = v21 | (v19 << 6);
      goto LABEL_24;
    }
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v42)
      break;
    v24 = v43;
    v25 = v43[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v42)
        goto LABEL_36;
      v25 = v43[v19];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_36:
          swift_release(v10);
          v3 = v41;
          if ((v45 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            v19 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v19 >= v42)
              goto LABEL_36;
            v25 = v43[v19];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v19 = v26;
      }
    }
LABEL_23:
    v16 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_24:
    v27 = *(_QWORD *)(v7 + 72);
    v28 = *(_QWORD *)(v10 + 48) + v27 * v22;
    if ((v45 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, v28, v6);
      v29 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22);
      swift_bridgeObjectRetain(v29);
    }
    v30 = *(_QWORD *)(v12 + 40);
    v31 = sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v6, v31);
    v32 = -1 << *(_BYTE *)(v12 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v17 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v17 + 8 * v34);
      }
      while (v38 == -1);
      v20 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v17 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 48) + v27 * v20, v9, v6);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v20) = v29;
    ++*(_QWORD *)(v12 + 16);
  }
  swift_release(v10);
  v3 = v41;
  v24 = v43;
  if ((v45 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v10 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v10 + 16) = 0;
LABEL_43:
  result = swift_release(v10);
  *v3 = v12;
  return result;
}

uint64_t sub_15BDDC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F1D30);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v11;
    v32 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_41;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v18);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_15C078(uint64_t a1, uint64_t a2)
{
  return sub_1609B8(a1, a2, &qword_1F7778);
}

uint64_t sub_15C084(uint64_t a1, uint64_t a2)
{
  return sub_1609B8(a1, a2, &qword_1F1D48);
}

uint64_t sub_15C090(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F1D08);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v35;
                goto LABEL_41;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v24);
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_15C338(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F1D38);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v35 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero(v35, 8 * v34);
                else
                  *v35 = v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_44;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      v30 = *v29;
      v31 = v29[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v29[1]);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_15C5EC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t *v38;
  char v39;
  __int128 v40;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F1DB8);
  v39 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v38 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = 1 << *(_BYTE *)(v5 + 32);
    v36 = v3;
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v37)
          goto LABEL_36;
        v22 = v38[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v37)
            goto LABEL_36;
          v22 = v38[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_36:
              if ((v39 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v36;
                goto LABEL_43;
              }
              if (v35 >= 64)
                bzero(v38, 8 * v37);
              else
                *v38 = v34;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v37)
                  goto LABEL_36;
                v22 = v38[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 48 * v20;
      v40 = *(_OWORD *)v29;
      v30 = *(_BYTE *)(v29 + 16);
      v32 = *(_QWORD *)(v29 + 24);
      v31 = *(_QWORD *)(v29 + 32);
      v33 = *(_QWORD *)(v29 + 40);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v32);
      }
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 48 * v17;
      *(_OWORD *)v18 = v40;
      *(_BYTE *)(v18 + 16) = v30;
      *(_QWORD *)(v18 + 24) = v32;
      *(_QWORD *)(v18 + 32) = v31;
      *(_QWORD *)(v18 + 40) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_15C8E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int v38;
  int64_t v39;
  _QWORD *v40;
  uint64_t v41;

  v3 = v2;
  v6 = sub_5EDC(&qword_1F5F78);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(&qword_1F7758);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  v12 = result;
  if (*(_QWORD *)(v10 + 16))
  {
    v37 = v3;
    v13 = 0;
    v14 = *(_QWORD *)(v10 + 64);
    v40 = (_QWORD *)(v10 + 64);
    v15 = 1 << *(_BYTE *)(v10 + 32);
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v17 = v16 & v14;
    v39 = (unint64_t)(v15 + 63) >> 6;
    v18 = result + 64;
    v38 = a2;
    v19 = 16;
    if ((a2 & 1) != 0)
      v19 = 32;
    v41 = v19;
    while (1)
    {
      if (v17)
      {
        v21 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = (uint64_t)v40;
        if (v23 >= v39)
          goto LABEL_35;
        v24 = v40[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v39)
            goto LABEL_35;
          v24 = v40[v13];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v39)
            {
LABEL_35:
              if ((v38 & 1) == 0)
              {
                result = swift_release(v10);
                v3 = v37;
                goto LABEL_42;
              }
              v35 = 1 << *(_BYTE *)(v10 + 32);
              if (v35 >= 64)
                bzero(v40, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v40 = -1 << v35;
              v3 = v37;
              *(_QWORD *)(v10 + 16) = 0;
              break;
            }
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v13 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_44;
                if (v13 >= v39)
                  goto LABEL_35;
                v24 = v40[v13];
                ++v25;
                if (v24)
                  goto LABEL_25;
              }
            }
            v13 = v25;
          }
        }
LABEL_25:
        v17 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v26 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v22);
      v27 = *(_QWORD *)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + v41))(v9, *(_QWORD *)(v10 + 56) + v27 * v22, v6);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v12 + 40), v26);
      v28 = -1 << *(_BYTE *)(v12 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v18 + 8 * (v29 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v18 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v18 + 8 * v30);
        }
        while (v34 == -1);
        v20 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v18 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v12 + 48) + 8 * v20) = v26;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v12 + 56) + v27 * v20, v9, v6);
      ++*(_QWORD *)(v12 + 16);
    }
  }
  result = swift_release(v10);
LABEL_42:
  *v3 = v12;
  return result;
}

uint64_t sub_15CC14(uint64_t a1, uint64_t a2)
{
  return sub_1609B8(a1, a2, &qword_1F7760);
}

Swift::Int sub_15CC20(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  __int128 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  __int128 v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F76E8);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_54;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
      return result;
    }
    if (v18 >= v36)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v37 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v36)
        goto LABEL_47;
      v20 = *(_QWORD *)(v37 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_47:
          swift_release(v5);
          if ((v38 & 1) == 0)
            goto LABEL_54;
          goto LABEL_50;
        }
        v20 = *(_QWORD *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_56;
            if (v14 >= v36)
              goto LABEL_47;
            v20 = *(_QWORD *)(v37 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
    v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((v38 & 1) != 0)
      sub_26DB8(v23, (uint64_t)v40);
    else
      sub_3DD40((uint64_t)v23, (uint64_t)v40);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    v24 = 0x797469746E656469;
    if (v22 != 1)
      v24 = 1768055156;
    v25 = 0xE800000000000000;
    if (v22 != 1)
      v25 = 0xE400000000000000;
    if (v22)
      v26 = v24;
    else
      v26 = 0xD000000000000013;
    if (v22)
      v27 = v25;
    else
      v27 = 0x800000000019EE20;
    String.hash(into:)(v39, v26, v27);
    swift_bridgeObjectRelease(v27);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_55;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v22;
    result = sub_26DB8(v40, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v19 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_54;
LABEL_50:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v19, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_54:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_15CF88(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F77B8);
  v41 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = v3;
    v9 = 0;
    v39 = (uint64_t *)(v5 + 64);
    v40 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v35 = -1 << v10;
    v36 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v21 >= v38)
          goto LABEL_36;
        v22 = v39[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v38)
            goto LABEL_36;
          v22 = v39[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_36:
              if ((v41 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v37;
                goto LABEL_43;
              }
              if (v36 >= 64)
                bzero(v39, 8 * v38);
              else
                *v39 = v35;
              v3 = v37;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v38)
                  goto LABEL_36;
                v22 = v39[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 72 * v20;
      v30 = *(_QWORD *)v29;
      v45 = *(_BYTE *)(v29 + 8);
      v44 = *(_QWORD *)(v29 + 16);
      v43 = *(_BYTE *)(v29 + 24);
      v31 = *(_QWORD *)(v29 + 32);
      v32 = *(_BYTE *)(v29 + 40);
      v33 = *(_QWORD *)(v29 + 48);
      v42 = *(_QWORD *)(v29 + 56);
      v34 = *(_QWORD *)(v29 + 64);
      if ((v41 & 1) == 0)
      {
        sub_40554(v31, v32);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v33);
      }
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 72 * v17;
      *(_QWORD *)v18 = v30;
      *(_BYTE *)(v18 + 8) = v45;
      *(_QWORD *)(v18 + 16) = v44;
      *(_BYTE *)(v18 + 24) = v43;
      *(_QWORD *)(v18 + 32) = v31;
      *(_BYTE *)(v18 + 40) = v32;
      *(_QWORD *)(v18 + 48) = v33;
      *(_QWORD *)(v18 + 56) = v42;
      *(_QWORD *)(v18 + 64) = v34;
      ++*(_QWORD *)(v8 + 16);
      v5 = v40;
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_15D2C4(uint64_t a1, uint64_t a2)
{
  return sub_1609B8(a1, a2, &qword_1F77C0);
}

uint64_t sub_15D2D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F44E8);
  v41 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v39 = (uint64_t *)(v5 + 64);
    v40 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v35 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v36 = 1 << *(_BYTE *)(v5 + 32);
    v37 = v3;
    v38 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = (uint64_t)v39;
        if (v21 >= v38)
          goto LABEL_36;
        v22 = v39[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v38)
            goto LABEL_36;
          v22 = v39[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_36:
              if ((v41 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v37;
                goto LABEL_43;
              }
              if (v36 >= 64)
                bzero(v39, 8 * v38);
              else
                *v39 = v35;
              v3 = v37;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v38)
                  goto LABEL_36;
                v22 = v39[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 72 * v20;
      v30 = *(_BYTE *)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v32 = *(_QWORD *)(v29 + 16);
      v33 = *(_QWORD *)(v29 + 24);
      v34 = *(_BYTE *)(v29 + 32);
      v45 = *(_QWORD *)(v29 + 40);
      v44 = *(_BYTE *)(v29 + 48);
      v43 = *(_QWORD *)(v29 + 56);
      v42 = *(_BYTE *)(v29 + 64);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain(v31);
        swift_bridgeObjectRetain(v32);
      }
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 72 * v17;
      *(_BYTE *)v18 = v30;
      *(_QWORD *)(v18 + 8) = v31;
      *(_QWORD *)(v18 + 16) = v32;
      *(_QWORD *)(v18 + 24) = v33;
      *(_BYTE *)(v18 + 32) = v34;
      *(_QWORD *)(v18 + 40) = v45;
      *(_BYTE *)(v18 + 48) = v44;
      *(_QWORD *)(v18 + 56) = v43;
      *(_BYTE *)(v18 + 64) = v42;
      ++*(_QWORD *)(v8 + 16);
      v5 = v40;
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_15D600(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t *v35;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F44E0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v35 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v32 = -1 << v10;
    v33 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v34 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v34)
          goto LABEL_36;
        v22 = v35[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v34)
            goto LABEL_36;
          v22 = v35[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v34)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v33 >= 64)
                  bzero(v35, 8 * v34);
                else
                  *v35 = v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v22 = v35[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_44;
                if (v9 >= v34)
                  goto LABEL_36;
                v22 = v35[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v20);
      v30 = *v29;
      v31 = v29[1];
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(v29[1]);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v17);
      *v18 = v30;
      v18[1] = v31;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_15D8B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  _QWORD *v43;
  int v44;
  __int128 v45;

  v5 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v5;
  if (*(_QWORD *)(*v5 + 24) > a1)
    a1 = *(_QWORD *)(*v5 + 24);
  sub_5EDC(a3);
  v44 = a2;
  v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_43;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 64);
  v43 = (_QWORD *)(v12 + 64);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v41 = v5;
  v42 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 64;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v25 >= v42)
      break;
    v26 = v43;
    v27 = v43[v25];
    ++v21;
    if (!v27)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v42)
        goto LABEL_36;
      v27 = v43[v21];
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v42)
        {
LABEL_36:
          swift_release(v12);
          v5 = v41;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = v43[v28];
        if (!v27)
        {
          while (1)
          {
            v21 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v21 >= v42)
              goto LABEL_36;
            v27 = v43[v21];
            ++v28;
            if (v27)
              goto LABEL_23;
          }
        }
        v21 = v28;
      }
    }
LABEL_23:
    v18 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v21 << 6);
LABEL_24:
    v29 = *(_QWORD *)(v9 + 72);
    v30 = *(_QWORD *)(v12 + 48) + v29 * v24;
    if ((v44 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v11, v30, v8);
      v45 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v24);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v11, v30, v8);
      v45 = *(_OWORD *)(*(_QWORD *)(v12 + 56) + 16 * v24);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(*((_QWORD *)&v45 + 1));
    }
    v31 = *(_QWORD *)(v14 + 40);
    v32 = sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v8, v32);
    v33 = -1 << *(_BYTE *)(v14 + 32);
    v34 = result & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v19 + 8 * (v34 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v19 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v36 = 0;
      v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v38 = v35 == v37;
        if (v35 == v37)
          v35 = 0;
        v36 |= v38;
        v39 = *(_QWORD *)(v19 + 8 * v35);
      }
      while (v39 == -1);
      v22 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v9 + 32))(*(_QWORD *)(v14 + 48) + v29 * v22, v11, v8);
    *(_OWORD *)(*(_QWORD *)(v14 + 56) + 16 * v22) = v45;
    ++*(_QWORD *)(v14 + 16);
  }
  swift_release(v12);
  v5 = v41;
  v26 = v43;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v40 = 1 << *(_BYTE *)(v12 + 32);
  if (v40 >= 64)
    bzero(v26, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v40;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_43:
  result = swift_release(v12);
  *v5 = v14;
  return result;
}

uint64_t sub_15DC5C(uint64_t a1, uint64_t a2)
{
  return sub_15DC74(a1, a2, &qword_1F77D8);
}

uint64_t sub_15DC68(uint64_t a1, uint64_t a2)
{
  return sub_15DC74(a1, a2, &qword_1F77E0);
}

uint64_t sub_15DC74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v34 = -1 << v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v35 = 1 << *(_BYTE *)(v6 + 32);
    v36 = v4;
    v37 = (unint64_t)(v12 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v14)
      {
        v21 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v22 = v21 | (v10 << 6);
      }
      else
      {
        v23 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v23 >= v37)
          goto LABEL_36;
        v24 = v11[v23];
        ++v10;
        if (!v24)
        {
          v10 = v23 + 1;
          if (v23 + 1 >= v37)
            goto LABEL_36;
          v24 = v11[v10];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v37)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v6);
                v4 = v36;
                goto LABEL_43;
              }
              if (v35 >= 64)
                bzero((void *)(v6 + 64), 8 * v37);
              else
                *v11 = v34;
              v4 = v36;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v24 = v11[v25];
            if (!v24)
            {
              while (1)
              {
                v10 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_45;
                if (v10 >= v37)
                  goto LABEL_36;
                v24 = v11[v10];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v10 = v25;
          }
        }
LABEL_33:
        v14 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v10 << 6);
      }
      v30 = 8 * v22;
      v31 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v30);
      v32 = *(void **)(*(_QWORD *)(v6 + 56) + v30);
      if ((a2 & 1) == 0)
        v33 = v32;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v31);
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v20) = v31;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v32;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
LABEL_43:
  *v4 = v9;
  return result;
}

uint64_t sub_15DF20(uint64_t a1, uint64_t a2)
{
  return sub_1609B8(a1, a2, &qword_1F1D78);
}

Swift::Int sub_15DF2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  unint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F1D58);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_46;
  v35 = a2;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_25;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      return result;
    }
    if (v19 >= v12)
      break;
    v20 = (_QWORD *)(v5 + 64);
    v21 = *(_QWORD *)(v37 + 8 * v19);
    ++v15;
    if (!v21)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_39;
      v21 = *(_QWORD *)(v37 + 8 * v15);
      if (!v21)
      {
        v22 = v19 + 2;
        if (v22 >= v12)
        {
LABEL_39:
          swift_release(v5);
          v3 = v36;
          if ((v35 & 1) == 0)
            goto LABEL_46;
          goto LABEL_42;
        }
        v21 = *(_QWORD *)(v37 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            v15 = v22 + 1;
            if (__OFADD__(v22, 1))
              goto LABEL_48;
            if (v15 >= v12)
              goto LABEL_39;
            v21 = *(_QWORD *)(v37 + 8 * v15);
            ++v22;
            if (v21)
              goto LABEL_24;
          }
        }
        v15 = v22;
      }
    }
LABEL_24:
    v11 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_25:
    v23 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v18);
    v24 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v18);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    if (v23)
    {
      if (v23 == 1)
      {
        v25 = 0xE90000000000006BLL;
        v26 = 0x6F6F626F69647561;
      }
      else
      {
        v25 = 0xE500000000000000;
        v26 = 0x646578696DLL;
      }
    }
    else
    {
      v25 = 0xE500000000000000;
      v26 = 0x6B6F6F6265;
    }
    String.hash(into:)(v38, v26, v25);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v8 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v13 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_47;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v13 + 8 * v29);
      }
      while (v33 == -1);
      v16 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v16) = v23;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v16) = v24;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v20 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_46;
LABEL_42:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v20, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v20 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_46:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_15E25C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  int64_t v19;
  uint64_t v20[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F1D60);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_31;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((a2 & 1) == 0)
      goto LABEL_31;
    goto LABEL_27;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v19 <= 2)
    goto LABEL_24;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    if ((a2 & 1) == 0)
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v11));
    Hasher.init(_seed:)(v20, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v19 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x15E688);
      }
      if (v14 >= v19)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_24:
  swift_release(v5);
  if ((a2 & 1) == 0)
    goto LABEL_31;
LABEL_27:
  v17 = 1 << *(_BYTE *)(v5 + 32);
  if (v17 >= 64)
    bzero(v12, ((unint64_t)(v17 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v17;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_31:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

void *sub_15E6B0(uint64_t a1, uint64_t a2)
{
  return sub_15E6C8(a1, a2, &qword_1F1D68);
}

void *sub_15E6BC(uint64_t a1, uint64_t a2)
{
  return sub_15E6C8(a1, a2, &qword_1F1D70);
}

void *sub_15E6C8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *result;
  int64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  Swift::Int v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  _QWORD *v55;
  int64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int64_t v89;
  _QWORD v90[9];
  _BYTE v91[545];
  _BYTE __dst[545];
  _BYTE v93[392];

  v5 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(a3);
  v73 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v74 = v5;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v55 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v56 = (unint64_t)(v8 + 63) >> 6;
    v72 = v7 + 64;
    result = (void *)swift_retain(v5);
    v12 = 0;
    v71 = v7;
    while (1)
    {
      if (v10)
      {
        v42 = __clz(__rbit64(v10));
        v43 = (v10 - 1) & v10;
        v44 = v42 | (v12 << 6);
      }
      else
      {
        v45 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_35:
          __break(1u);
          return result;
        }
        if (v45 >= v56)
          goto LABEL_27;
        v46 = v55[v45];
        ++v12;
        if (!v46)
        {
          v12 = v45 + 1;
          if (v45 + 1 >= v56)
            goto LABEL_27;
          v46 = v55[v12];
          if (!v46)
          {
            v47 = v45 + 2;
            if (v47 >= v56)
            {
LABEL_27:
              swift_release(v74);
              if ((v73 & 1) == 0)
                break;
              v52 = 1 << *(_BYTE *)(v74 + 32);
              if (v52 >= 64)
                bzero(v55, ((unint64_t)(v52 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v55 = -1 << v52;
              v53 = v74;
              *(_QWORD *)(v74 + 16) = 0;
              goto LABEL_33;
            }
            v46 = v55[v47];
            if (!v46)
            {
              while (1)
              {
                v12 = v47 + 1;
                if (__OFADD__(v47, 1))
                  goto LABEL_35;
                if (v12 >= v56)
                  goto LABEL_27;
                v46 = v55[v12];
                ++v47;
                if (v46)
                  goto LABEL_24;
              }
            }
            v12 = v47;
          }
        }
LABEL_24:
        v43 = (v46 - 1) & v46;
        v44 = __clz(__rbit64(v46)) + (v12 << 6);
      }
      v48 = 552 * v44;
      v88 = v43;
      v89 = v12;
      if ((v73 & 1) != 0)
      {
        v49 = *(_QWORD *)(v74 + 48) + v48;
        v70 = *(_QWORD *)v49;
        v68 = *(_BYTE *)(v49 + 8);
        v82 = *(_OWORD *)(v49 + 16);
        v66 = *(_QWORD *)(v49 + 32);
        v64 = *(_BYTE *)(v49 + 40);
        v62 = *(_QWORD *)(v49 + 48);
        v60 = *(_BYTE *)(v49 + 56);
        v58 = *(_QWORD *)(v49 + 64);
        v57 = *(_BYTE *)(v49 + 72);
        v84 = *(_QWORD *)(v49 + 88);
        v86 = *(_QWORD *)(v49 + 80);
        v78 = *(_QWORD *)(v49 + 104);
        v80 = *(_QWORD *)(v49 + 96);
        v31 = *(_QWORD *)(v49 + 120);
        v76 = *(_QWORD *)(v49 + 112);
        v50 = *(_QWORD *)(v49 + 128);
        v28 = *(_QWORD *)(v49 + 136);
        v51 = *(_QWORD *)(v49 + 144);
        sub_41300(v49 + 152, (uint64_t)__dst, &qword_1F2D68);
        v24 = *(_QWORD *)(v49 + 536);
        v38 = *(_BYTE *)(v49 + 544);
        v87 = *(_QWORD *)(*(_QWORD *)(v74 + 56) + 8 * v44);
        sub_41300((uint64_t)__dst, (uint64_t)v93, &qword_1F2D68);
        v20 = v57;
        v22 = v58;
        v23 = v51;
        v18 = v60;
        v26 = v62;
        v29 = v64;
        v27 = v50;
        v30 = v66;
        v32 = v82;
        v34 = v76;
        v33 = v78;
        v14 = v68;
        v35 = v80;
        v37 = v84;
        v36 = v86;
        v25 = v70;
        v7 = v71;
      }
      else
      {
        memcpy(__dst, (const void *)(*(_QWORD *)(v74 + 48) + v48), sizeof(__dst));
        v13 = *(_QWORD *)(*(_QWORD *)(v74 + 56) + 8 * v44);
        v69 = __dst[544];
        v83 = *(_QWORD *)&__dst[88];
        v85 = *(_QWORD *)&__dst[80];
        v77 = *(_QWORD *)&__dst[104];
        v79 = *(_QWORD *)&__dst[96];
        v75 = *(_QWORD *)&__dst[112];
        v65 = *(_QWORD *)&__dst[128];
        v67 = *(_QWORD *)&__dst[120];
        v61 = *(_QWORD *)&__dst[536];
        v63 = *(_QWORD *)&__dst[136];
        v59 = *(_QWORD *)&__dst[144];
        v14 = __dst[8];
        v81 = *(_OWORD *)&__dst[16];
        v15 = *(_QWORD *)&__dst[32];
        v16 = __dst[40];
        v17 = *(_QWORD *)&__dst[48];
        v18 = __dst[56];
        v19 = *(_QWORD *)&__dst[64];
        v20 = __dst[72];
        v21 = *(_QWORD *)__dst;
        sub_6100(__dst);
        v87 = v13;
        swift_bridgeObjectRetain(v13);
        sub_41300((uint64_t)&__dst[152], (uint64_t)v93, &qword_1F2D68);
        v22 = v19;
        v23 = v59;
        v24 = v61;
        v25 = v21;
        v26 = v17;
        v28 = v63;
        v27 = v65;
        v29 = v16;
        v30 = v15;
        v31 = v67;
        v32 = v81;
        v34 = v75;
        v33 = v77;
        v35 = v79;
        v37 = v83;
        v36 = v85;
        v7 = v71;
        v38 = v69;
      }
      *(_QWORD *)__dst = v25;
      __dst[8] = v14;
      *(_OWORD *)&__dst[16] = v32;
      *(_QWORD *)&__dst[32] = v30;
      __dst[40] = v29;
      *(_QWORD *)&__dst[48] = v26;
      __dst[56] = v18;
      *(_QWORD *)&__dst[64] = v22;
      __dst[72] = v20;
      *(_QWORD *)&__dst[80] = v36;
      *(_QWORD *)&__dst[88] = v37;
      *(_QWORD *)&__dst[96] = v35;
      *(_QWORD *)&__dst[104] = v33;
      *(_QWORD *)&__dst[112] = v34;
      *(_QWORD *)&__dst[120] = v31;
      *(_QWORD *)&__dst[128] = v27;
      *(_QWORD *)&__dst[136] = v28;
      *(_QWORD *)&__dst[144] = v23;
      sub_41300((uint64_t)v93, (uint64_t)&__dst[152], &qword_1F2D68);
      *(_QWORD *)&__dst[536] = v24;
      __dst[544] = v38;
      v39 = *(_QWORD *)(v7 + 40);
      memcpy(v91, __dst, sizeof(v91));
      Hasher.init(_seed:)(v90, v39);
      SeedBook.hash(into:)((uint64_t)v90);
      v40 = Hasher._finalize()();
      v41 = _HashTable.nextHole(atOrAfter:)(v40 & ~(-1 << *(_BYTE *)(v7 + 32)), v72, ~(-1 << *(_BYTE *)(v7 + 32)));
      *(_QWORD *)(v72 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
      result = memcpy((void *)(*(_QWORD *)(v7 + 48) + 552 * v41), __dst, 0x221uLL);
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v41) = v87;
      ++*(_QWORD *)(v7 + 16);
      v10 = v88;
      v12 = v89;
    }
  }
  v53 = v74;
LABEL_33:
  result = (void *)swift_release(v53);
  *v54 = v7;
  return result;
}

uint64_t sub_15EBD0(uint64_t a1, uint64_t a2)
{
  return sub_15EBDC(a1, a2, &qword_1F7720);
}

uint64_t sub_15EBDC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v37 = a2;
    v36 = v4;
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v34 = -1 << v12;
    v35 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v15 = (unint64_t)(v12 + 63) >> 6;
    v16 = result + 64;
    while (1)
    {
      if (v14)
      {
        v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v20 = v19 | (v10 << 6);
      }
      else
      {
        v21 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v21 >= v15)
          goto LABEL_34;
        v22 = v11[v21];
        ++v10;
        if (!v22)
        {
          v10 = v21 + 1;
          if (v21 + 1 >= v15)
            goto LABEL_34;
          v22 = v11[v10];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v15)
            {
LABEL_34:
              if ((v37 & 1) == 0)
              {
                result = swift_release(v6);
                v4 = v36;
                goto LABEL_41;
              }
              if (v35 >= 64)
                bzero((void *)(v6 + 64), 8 * v15);
              else
                *v11 = v34;
              v4 = v36;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v22 = v11[v23];
            if (!v22)
            {
              while (1)
              {
                v10 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_43;
                if (v10 >= v15)
                  goto LABEL_34;
                v22 = v11[v10];
                ++v23;
                if (v22)
                  goto LABEL_24;
              }
            }
            v10 = v23;
          }
        }
LABEL_24:
        v14 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v10 << 6);
      }
      v24 = 8 * v20;
      v25 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v24);
      v26 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + v24);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v25);
      v27 = -1 << *(_BYTE *)(v9 + 32);
      v28 = result & ~v27;
      v29 = v28 >> 6;
      if (((-1 << v28) & ~*(_QWORD *)(v16 + 8 * (v28 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v16 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v30 = 0;
        v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v32 = v29 == v31;
          if (v29 == v31)
            v29 = 0;
          v30 |= v32;
          v33 = *(_QWORD *)(v16 + 8 * v29);
        }
        while (v33 == -1);
        v17 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(_QWORD *)(v16 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = 8 * v17;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v18) = v25;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v18) = v26;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
LABEL_41:
  *v4 = v9;
  return result;
}

uint64_t sub_15EE7C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char v33;
  __int128 v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7728);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v33 = a2;
    v32 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v30 = -1 << v11;
    v31 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v33 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v32;
                goto LABEL_41;
              }
              if (v31 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v30;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v34 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v18);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v15 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v15 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v15 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v16) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_15F11C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  char v21;
  uint64_t v22[9];
  _BYTE v23[48];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F76D8);
  v21 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_32;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v20 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v20 <= 1)
  {
    swift_release(v5);
    v12 = (_QWORD *)(v5 + 64);
    if ((v21 & 1) == 0)
      goto LABEL_32;
    goto LABEL_28;
  }
  v12 = (_QWORD *)(v5 + 64);
  v13 = *(_QWORD *)(v5 + 72);
  v14 = 1;
  if (v13)
    goto LABEL_20;
  v14 = 2;
  if (v20 <= 2)
    goto LABEL_25;
  v13 = *(_QWORD *)(v5 + 80);
  if (v13)
  {
LABEL_20:
    v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_21:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
    v17 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v11);
    if ((v21 & 1) != 0)
      sub_26DB8(v17, (uint64_t)v23);
    else
      sub_3DD40((uint64_t)v17, (uint64_t)v23);
    Hasher.init(_seed:)(v22, *(_QWORD *)(v7 + 40));
    __asm { BR              X8 }
  }
  v15 = 3;
  if (v20 > 3)
  {
    v13 = *(_QWORD *)(v5 + 88);
    if (v13)
    {
      v14 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v14 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
        JUMPOUT(0x15F4E0);
      }
      if (v14 >= v20)
        break;
      v13 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v15;
      if (v13)
        goto LABEL_20;
    }
  }
LABEL_25:
  swift_release(v5);
  if ((v21 & 1) == 0)
    goto LABEL_32;
LABEL_28:
  v18 = 1 << *(_BYTE *)(v5 + 32);
  if (v18 >= 64)
    bzero(v12, ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v12 = -1 << v18;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_32:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

uint64_t sub_15F4F4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t *v39;
  char v40;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7730);
  v40 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v39 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v35 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v36 = 1 << *(_BYTE *)(v5 + 32);
    v37 = v3;
    v38 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v38)
          goto LABEL_36;
        v22 = v39[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v38)
            goto LABEL_36;
          v22 = v39[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_36:
              if ((v40 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v37;
                goto LABEL_43;
              }
              if (v36 >= 64)
                bzero(v39, 8 * v38);
              else
                *v39 = v35;
              v3 = v37;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v38)
                  goto LABEL_36;
                v22 = v39[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 40 * v20;
      v30 = *(_QWORD *)v29;
      v31 = *(_BYTE *)(v29 + 8);
      v32 = *(_QWORD *)(v29 + 16);
      v33 = *(_QWORD *)(v29 + 24);
      v34 = *(_QWORD *)(v29 + 32);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v32);
      }
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 40 * v17;
      *(_QWORD *)v18 = v30;
      *(_BYTE *)(v18 + 8) = v31;
      *(_QWORD *)(v18 + 16) = v32;
      *(_QWORD *)(v18 + 24) = v33;
      *(_QWORD *)(v18 + 32) = v34;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_15F7E8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7738);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = a2;
    v33 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v31 = -1 << v11;
    v32 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v14)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v14)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v14)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v33;
                goto LABEL_41;
              }
              if (v32 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v31;
              v3 = v33;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v23 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v18);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v22);
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v15 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v26);
        }
        while (v30 == -1);
        v16 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v16) = v22;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v16) = v23;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

uint64_t sub_15FA84(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7790);
  v42 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v38 = v3;
    v9 = 0;
    v40 = (uint64_t *)(v5 + 64);
    v41 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v36 = -1 << v10;
    v37 = v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v39 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = (uint64_t)v40;
        if (v21 >= v39)
          goto LABEL_36;
        v22 = v40[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v39)
            goto LABEL_36;
          v22 = v40[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_36:
              if ((v42 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v38;
                goto LABEL_43;
              }
              if (v37 >= 64)
                bzero(v40, 8 * v39);
              else
                *v40 = v36;
              v3 = v38;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v39)
                  goto LABEL_36;
                v22 = v40[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 112 * v20;
      v30 = *(_QWORD *)v29;
      v46 = *(_BYTE *)(v29 + 8);
      v45 = *(_QWORD *)(v29 + 16);
      v44 = *(_BYTE *)(v29 + 24);
      v31 = *(_QWORD *)(v29 + 32);
      v32 = *(_BYTE *)(v29 + 40);
      v33 = *(_QWORD *)(v29 + 48);
      v43 = *(_QWORD *)(v29 + 56);
      v34 = *(_QWORD *)(v29 + 64);
      v35 = *(_QWORD *)(v29 + 72);
      v47 = *(_OWORD *)(v29 + 96);
      v48 = *(_OWORD *)(v29 + 80);
      if ((v42 & 1) == 0)
      {
        sub_40554(v31, v32);
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v48);
        swift_bridgeObjectRetain(*((_QWORD *)&v48 + 1));
        swift_bridgeObjectRetain(v47);
        swift_bridgeObjectRetain(*((_QWORD *)&v47 + 1));
        swift_bridgeObjectRetain(v33);
      }
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 112 * v17;
      *(_QWORD *)v18 = v30;
      *(_BYTE *)(v18 + 8) = v46;
      *(_QWORD *)(v18 + 16) = v45;
      *(_BYTE *)(v18 + 24) = v44;
      *(_QWORD *)(v18 + 32) = v31;
      *(_BYTE *)(v18 + 40) = v32;
      *(_QWORD *)(v18 + 48) = v33;
      *(_QWORD *)(v18 + 56) = v43;
      *(_QWORD *)(v18 + 64) = v34;
      *(_QWORD *)(v18 + 72) = v35;
      *(_OWORD *)(v18 + 80) = v48;
      *(_OWORD *)(v18 + 96) = v47;
      ++*(_QWORD *)(v8 + 16);
      v5 = v41;
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

uint64_t sub_15FE18(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  int64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7748);
  v21 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_29;
  v18 = v3;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v20 = (_QWORD *)(v5 + 64);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v19 = (unint64_t)(v8 + 63) >> 6;
  swift_retain(v5);
  if (v10)
  {
    v11 = __clz(__rbit64(v10));
    goto LABEL_21;
  }
  if (v19 > 1)
  {
    v12 = *(_QWORD *)(v5 + 72);
    v13 = 1;
    if (v12)
      goto LABEL_20;
    v13 = 2;
    if (v19 > 2)
    {
      v12 = *(_QWORD *)(v5 + 80);
      if (!v12)
      {
        v14 = 3;
        if (v19 > 3)
        {
          v12 = *(_QWORD *)(v5 + 88);
          if (v12)
          {
            v13 = 3;
            goto LABEL_20;
          }
          while (1)
          {
            v13 = v14 + 1;
            if (__OFADD__(v14, 1))
            {
              __break(1u);
              JUMPOUT(0x160208);
            }
            if (v13 >= v19)
              break;
            v12 = v20[v13];
            ++v14;
            if (v12)
              goto LABEL_20;
          }
        }
        goto LABEL_24;
      }
LABEL_20:
      v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_21:
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v11);
      if ((v21 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 56) + 24 * v11 + 16));
      Hasher.init(_seed:)(v22, *(_QWORD *)(v7 + 40));
      __asm { BR              X8 }
    }
  }
LABEL_24:
  swift_release(v5);
  v3 = v18;
  if ((v21 & 1) != 0)
  {
    v16 = 1 << *(_BYTE *)(v5 + 32);
    if (v16 >= 64)
      bzero(v20, ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    else
      *v20 = -1 << v16;
    *(_QWORD *)(v5 + 16) = 0;
  }
LABEL_29:
  result = swift_release(v5);
  *v3 = v7;
  return result;
}

Swift::Int sub_160224(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F14B8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_49;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v34 = v3;
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_40;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    if (v23 >= v35)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v36 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v35)
        goto LABEL_42;
      v25 = *(_QWORD *)(v36 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v35)
        {
LABEL_42:
          swift_release(v5);
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_49;
          goto LABEL_45;
        }
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_51;
            if (v14 >= v35)
              goto LABEL_42;
            v25 = *(_QWORD *)(v36 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_39;
          }
        }
        v14 = v26;
      }
    }
LABEL_39:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_40:
    v31 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v22);
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v22);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain(v32);
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    if (v31)
      v15 = 0xD000000000000011;
    else
      v15 = 0x6168637275706F63;
    if (v31)
      v16 = 0x800000000019F150;
    else
      v16 = 0xEA00000000006573;
    String.hash(into:)(v38, v15, v16);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v8 + 32);
    v18 = result & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
        v29 = v19 == v28;
        if (v19 == v28)
          v19 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v19);
      }
      while (v30 == -1);
      v20 = __clz(__rbit64(~v30)) + (v19 << 6);
    }
    *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v20) = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v20) = v32;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v34;
  v24 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_49;
LABEL_45:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v24, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_49:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_160564(uint64_t a1, uint64_t a2)
{
  return sub_16058C(a1, a2, &qword_1F76A0, (void (*)(uint64_t, _BYTE *))sub_26DB8);
}

uint64_t sub_160578(uint64_t a1, uint64_t a2)
{
  return sub_16058C(a1, a2, &qword_1F76A8, (void (*)(uint64_t, _BYTE *))sub_26DB8);
}

uint64_t sub_16058C(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *))
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t *v23;
  int64_t v24;
  char v25;
  uint64_t v26[9];
  _BYTE v27[48];

  v6 = v4;
  v8 = *v4;
  if (*(_QWORD *)(*v4 + 24) <= a1)
    v9 = a1;
  else
    v9 = *(_QWORD *)(*v4 + 24);
  sub_5EDC(a3);
  v25 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v8, v9, a2);
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_32;
  v23 = v6;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v8 + 64);
  v24 = (unint64_t)(v11 + 63) >> 6;
  swift_retain(v8);
  if (v13)
  {
    v14 = __clz(__rbit64(v13));
    goto LABEL_21;
  }
  if (v24 <= 1)
  {
    swift_release(v8);
    v15 = (_QWORD *)(v8 + 64);
    if ((v25 & 1) == 0)
      goto LABEL_32;
    goto LABEL_28;
  }
  v15 = (_QWORD *)(v8 + 64);
  v16 = *(_QWORD *)(v8 + 72);
  v17 = 1;
  if (v16)
    goto LABEL_20;
  v17 = 2;
  if (v24 <= 2)
    goto LABEL_25;
  v16 = *(_QWORD *)(v8 + 80);
  if (v16)
  {
LABEL_20:
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_21:
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 48) + v14);
    v20 = *(_QWORD *)(v8 + 56) + 40 * v14;
    if ((v25 & 1) != 0)
      a4(v20, v27);
    else
      sub_3DD40(v20, (uint64_t)v27);
    Hasher.init(_seed:)(v26, *(_QWORD *)(v10 + 40));
    __asm { BR              X8 }
  }
  v18 = 3;
  if (v24 > 3)
  {
    v16 = *(_QWORD *)(v8 + 88);
    if (v16)
    {
      v17 = 3;
      goto LABEL_20;
    }
    while (1)
    {
      v17 = v18 + 1;
      if (__OFADD__(v18, 1))
      {
        __break(1u);
        JUMPOUT(0x160948);
      }
      if (v17 >= v24)
        break;
      v16 = *(_QWORD *)(v8 + 64 + 8 * v17);
      ++v18;
      if (v16)
        goto LABEL_20;
    }
  }
LABEL_25:
  swift_release(v8);
  v6 = v23;
  if ((v25 & 1) == 0)
    goto LABEL_32;
LABEL_28:
  v21 = 1 << *(_BYTE *)(v8 + 32);
  if (v21 >= 64)
    bzero(v15, ((unint64_t)(v21 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v15 = -1 << v21;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_32:
  result = swift_release(v8);
  *v6 = v10;
  return result;
}

uint64_t sub_16095C(uint64_t a1, uint64_t a2)
{
  return sub_16058C(a1, a2, &qword_1F76B0, (void (*)(uint64_t, _BYTE *))sub_26DB8);
}

uint64_t sub_160970(uint64_t a1, uint64_t a2)
{
  return sub_16058C(a1, a2, &qword_1F76B8, (void (*)(uint64_t, _BYTE *))sub_26DB8);
}

uint64_t sub_160984(uint64_t a1, uint64_t a2)
{
  return sub_16058C(a1, a2, &qword_1F76C0, (void (*)(uint64_t, _BYTE *))sub_26DB8);
}

uint64_t sub_160998(uint64_t a1, uint64_t a2)
{
  return sub_16058C(a1, a2, &qword_1F76C8, (void (*)(uint64_t, _BYTE *))sub_26DB8);
}

uint64_t sub_1609AC(uint64_t a1, uint64_t a2)
{
  return sub_1609B8(a1, a2, &qword_1F7780);
}

uint64_t sub_1609B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(a3);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = result;
  if (*(_QWORD *)(v6 + 16))
  {
    v10 = 0;
    v11 = (uint64_t *)(v6 + 64);
    v12 = 1 << *(_BYTE *)(v6 + 32);
    v34 = -1 << v12;
    v35 = v12;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v14 = v13 & *(_QWORD *)(v6 + 64);
    v36 = (unint64_t)(v12 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v14)
      {
        v21 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        v22 = v21 | (v10 << 6);
      }
      else
      {
        v23 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v23 >= v36)
          goto LABEL_36;
        v24 = v11[v23];
        ++v10;
        if (!v24)
        {
          v10 = v23 + 1;
          if (v23 + 1 >= v36)
            goto LABEL_36;
          v24 = v11[v10];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v36)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v35 >= 64)
                  bzero((void *)(v6 + 64), 8 * v36);
                else
                  *v11 = v34;
                *(_QWORD *)(v6 + 16) = 0;
              }
              break;
            }
            v24 = v11[v25];
            if (!v24)
            {
              while (1)
              {
                v10 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_44;
                if (v10 >= v36)
                  goto LABEL_36;
                v24 = v11[v10];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v10 = v25;
          }
        }
LABEL_33:
        v14 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v10 << 6);
      }
      v30 = 8 * v22;
      v31 = *(_QWORD *)(v6 + 56);
      v32 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v30);
      v33 = *(_QWORD *)(v31 + v30);
      if ((a2 & 1) == 0)
        swift_bridgeObjectRetain(*(_QWORD *)(v31 + v30));
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v32);
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v28 = v18 == v27;
          if (v18 == v27)
            v18 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v15 + 8 * v18);
        }
        while (v29 == -1);
        v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }
      *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 8 * v19;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + v20) = v32;
      *(_QWORD *)(*(_QWORD *)(v9 + 56) + v20) = v33;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v6);
  *v4 = v9;
  return result;
}

Swift::Int sub_160C68(uint64_t a1, uint64_t a2)
{
  return sub_160C74(a1, a2, &qword_1F7770);
}

Swift::Int sub_160C74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(a3);
  v8 = a2;
  v9 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v10 = v9;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_49;
  v11 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v11 + 63) >> 6;
  v14 = v9 + 64;
  result = swift_retain(v6);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v23 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v24 = v23 | (v16 << 6);
      goto LABEL_40;
    }
    v25 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    if (v25 >= v38)
      break;
    v26 = (_QWORD *)(v6 + 64);
    v27 = *(_QWORD *)(v39 + 8 * v25);
    ++v16;
    if (!v27)
    {
      v16 = v25 + 1;
      if (v25 + 1 >= v38)
        goto LABEL_42;
      v27 = *(_QWORD *)(v39 + 8 * v16);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v38)
        {
LABEL_42:
          swift_release(v6);
          v4 = v37;
          if ((v8 & 1) == 0)
            goto LABEL_49;
          goto LABEL_45;
        }
        v27 = *(_QWORD *)(v39 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v16 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_51;
            if (v16 >= v38)
              goto LABEL_42;
            v27 = *(_QWORD *)(v39 + 8 * v16);
            ++v28;
            if (v27)
              goto LABEL_39;
          }
        }
        v16 = v28;
      }
    }
LABEL_39:
    v13 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v16 << 6);
LABEL_40:
    v33 = *(_QWORD *)(v6 + 56);
    v34 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 48) + v24);
    v35 = *(_QWORD *)(v33 + 8 * v24);
    if ((v8 & 1) == 0)
      swift_bridgeObjectRetain(*(_QWORD *)(v33 + 8 * v24));
    Hasher.init(_seed:)(v40, *(_QWORD *)(v10 + 40));
    if (v34)
      v17 = 0x6F6F626F69647561;
    else
      v17 = 0x6B6F6F6265;
    if (v34)
      v18 = 0xE90000000000006BLL;
    else
      v18 = 0xE500000000000000;
    String.hash(into:)(v40, v17, v18);
    swift_bridgeObjectRelease(v18);
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v10 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v14 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v14 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
        v31 = v21 == v30;
        if (v21 == v30)
          v21 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v21);
      }
      while (v32 == -1);
      v22 = __clz(__rbit64(~v32)) + (v21 << 6);
    }
    *(_QWORD *)(v14 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_BYTE *)(*(_QWORD *)(v10 + 48) + v22) = v34;
    *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v22) = v35;
    ++*(_QWORD *)(v10 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v26 = (_QWORD *)(v6 + 64);
  if ((v8 & 1) == 0)
    goto LABEL_49;
LABEL_45:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v26, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_49:
  result = swift_release(v6);
  *v4 = v10;
  return result;
}

Swift::Int sub_160F9C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  __int128 *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  _QWORD v36[9];
  __int128 v37[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F76D0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_49;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_25;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      return result;
    }
    if (v18 >= v34)
      break;
    v19 = (_QWORD *)(v5 + 64);
    v20 = *(_QWORD *)(v35 + 8 * v18);
    ++v14;
    if (!v20)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v34)
        goto LABEL_42;
      v20 = *(_QWORD *)(v35 + 8 * v14);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v34)
        {
LABEL_42:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_49;
          goto LABEL_45;
        }
        v20 = *(_QWORD *)(v35 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v14 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_51;
            if (v14 >= v34)
              goto LABEL_42;
            v20 = *(_QWORD *)(v35 + 8 * v14);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v14 = v21;
      }
    }
LABEL_24:
    v11 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
    v22 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
    v23 = (__int128 *)(*(_QWORD *)(v5 + 56) + 40 * v17);
    if ((a2 & 1) != 0)
      sub_26DB8(v23, (uint64_t)v37);
    else
      sub_3DD40((uint64_t)v23, (uint64_t)v37);
    Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
    if (v22)
    {
      if (v22 == 1)
      {
        v24 = 0xE200000000000000;
        v25 = 12918;
      }
      else
      {
        v24 = 0xE400000000000000;
        v25 = 1768055156;
      }
    }
    else
    {
      v24 = 0xE200000000000000;
      v25 = 12662;
    }
    String.hash(into:)(v36, v25, v24);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v8 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_50;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v12 + 8 * v28);
      }
      while (v32 == -1);
      v15 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v22;
    result = sub_26DB8(v37, *(_QWORD *)(v8 + 56) + 40 * v15);
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v19 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_49;
LABEL_45:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_49:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1612D0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Swift::Int result;
  int64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  _QWORD v45[9];

  v3 = v2;
  v6 = type metadata accessor for TabiPackage(0);
  v43 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_5EDC(&qword_1F77B0);
  v44 = a2;
  v10 = static _DictionaryStorage.resize(original:capacity:move:)(v9, a1, a2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
    goto LABEL_43;
  v12 = 1 << *(_BYTE *)(v9 + 32);
  v13 = *(_QWORD *)(v9 + 64);
  v42 = (_QWORD *)(v9 + 64);
  if (v12 < 64)
    v14 = ~(-1 << v12);
  else
    v14 = -1;
  v15 = v14 & v13;
  v40 = v3;
  v41 = (unint64_t)(v12 + 63) >> 6;
  v16 = v10 + 64;
  result = swift_retain(v9);
  v18 = 0;
  while (1)
  {
    if (v15)
    {
      v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v22 = v21 | (v18 << 6);
      goto LABEL_24;
    }
    v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = v42;
    v25 = v42[v23];
    ++v18;
    if (!v25)
    {
      v18 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_36;
      v25 = v42[v18];
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_36:
          swift_release(v9);
          v3 = v40;
          if ((v44 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v42[v26];
        if (!v25)
        {
          while (1)
          {
            v18 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v18 >= v41)
              goto LABEL_36;
            v25 = v42[v18];
            ++v26;
            if (v25)
              goto LABEL_23;
          }
        }
        v18 = v26;
      }
    }
LABEL_23:
    v15 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_24:
    v27 = (uint64_t *)(*(_QWORD *)(v9 + 48) + 16 * v22);
    v29 = *v27;
    v28 = v27[1];
    v30 = *(_QWORD *)(v43 + 72);
    v31 = *(_QWORD *)(v9 + 56) + v30 * v22;
    if ((v44 & 1) != 0)
    {
      sub_A2618(v31, (uint64_t)v8, type metadata accessor for TabiPackage);
    }
    else
    {
      sub_26A5C(v31, (uint64_t)v8, type metadata accessor for TabiPackage);
      swift_bridgeObjectRetain(v28);
    }
    Hasher.init(_seed:)(v45, *(_QWORD *)(v11 + 40));
    String.hash(into:)(v45, v29, v28);
    result = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v11 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v16 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v16 + 8 * v34);
      }
      while (v38 == -1);
      v19 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v11 + 48) + 16 * v19);
    *v20 = v29;
    v20[1] = v28;
    result = sub_A2618((uint64_t)v8, *(_QWORD *)(v11 + 56) + v30 * v19, type metadata accessor for TabiPackage);
    ++*(_QWORD *)(v11 + 16);
  }
  swift_release(v9);
  v3 = v40;
  v24 = v42;
  if ((v44 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v9 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v9 + 16) = 0;
LABEL_43:
  result = swift_release(v9);
  *v3 = v11;
  return result;
}

Swift::Int sub_161650(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  _QWORD *v27;
  unint64_t v28;
  int64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  _QWORD v42[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F4190);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_52;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = v3;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v24 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v25 = v24 | (v14 << 6);
      goto LABEL_43;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
      return result;
    }
    if (v26 >= v38)
      break;
    v27 = (_QWORD *)(v5 + 64);
    v28 = *(_QWORD *)(v39 + 8 * v26);
    ++v14;
    if (!v28)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v38)
        goto LABEL_45;
      v28 = *(_QWORD *)(v39 + 8 * v14);
      if (!v28)
      {
        v29 = v26 + 2;
        if (v29 >= v38)
        {
LABEL_45:
          swift_release(v5);
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_52;
          goto LABEL_48;
        }
        v28 = *(_QWORD *)(v39 + 8 * v29);
        if (!v28)
        {
          while (1)
          {
            v14 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_54;
            if (v14 >= v38)
              goto LABEL_45;
            v28 = *(_QWORD *)(v39 + 8 * v14);
            ++v29;
            if (v28)
              goto LABEL_42;
          }
        }
        v14 = v29;
      }
    }
LABEL_42:
    v11 = (v28 - 1) & v28;
    v25 = __clz(__rbit64(v28)) + (v14 << 6);
LABEL_43:
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v25);
    v41 = *(_OWORD *)(*(_QWORD *)(v5 + 48) + 16 * v25);
    v35 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 16 * v25 + 8);
    if ((v40 & 1) == 0)
      sub_1F6D4(v41, v35);
    Hasher.init(_seed:)(v42, *(_QWORD *)(v8 + 40));
    v15 = v41;
    if (v35 == 1)
    {
      v15 = 0xD000000000000012;
      v16 = 0x800000000019FA50;
    }
    else
    {
      v16 = v35;
    }
    if (v35)
      v17 = v15;
    else
      v17 = 0x4148435255504F43;
    if (v35)
      v18 = v16;
    else
      v18 = 0xEA00000000004553;
    sub_1F6D4(v41, v35);
    String.hash(into:)(v42, v17, v18);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v8 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      v23 = v41;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v19) >> 6;
      v23 = v41;
      do
      {
        if (++v21 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_53;
        }
        v32 = v21 == v31;
        if (v21 == v31)
          v21 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v33 == -1);
      v22 = __clz(__rbit64(~v33)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_OWORD *)(*(_QWORD *)(v8 + 48) + 16 * v22) = v23;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v22) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v27 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_52;
LABEL_48:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v27, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v27 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_52:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_1619D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F77A8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

Swift::Int sub_161CE8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F77A0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v14 << 6);
      goto LABEL_34;
    }
    v24 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v24 >= v41)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v42 + 8 * v24);
    ++v14;
    if (!v26)
    {
      v14 = v24 + 1;
      if (v24 + 1 >= v41)
        goto LABEL_36;
      v26 = *(_QWORD *)(v42 + 8 * v14);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v42 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v14 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v14 >= v41)
              goto LABEL_36;
            v26 = *(_QWORD *)(v42 + 8 * v14);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v14 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    v32 = 16 * v23;
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v32);
    v35 = *v33;
    v34 = v33[1];
    v36 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v32);
    v37 = *v36;
    v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v35, v34);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = 16 * v18;
    v20 = (_QWORD *)(*(_QWORD *)(v8 + 48) + v19);
    *v20 = v35;
    v20[1] = v34;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + v19);
    *v21 = v37;
    v21[1] = v38;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v25 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_16200C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  int64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7768);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v11 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        v17 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v18 = v17 | (v9 << 6);
      }
      else
      {
        v19 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v19 >= v37)
          goto LABEL_34;
        v20 = v10[v19];
        ++v9;
        if (!v20)
        {
          v9 = v19 + 1;
          if (v19 + 1 >= v37)
            goto LABEL_34;
          v20 = v10[v9];
          if (!v20)
          {
            v21 = v19 + 2;
            if (v21 >= v37)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v35;
                goto LABEL_41;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v37);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v20 = v10[v21];
            if (!v20)
            {
              while (1)
              {
                v9 = v21 + 1;
                if (__OFADD__(v21, 1))
                  goto LABEL_43;
                if (v9 >= v37)
                  goto LABEL_34;
                v20 = v10[v9];
                ++v21;
                if (v20)
                  goto LABEL_24;
              }
            }
            v9 = v21;
          }
        }
LABEL_24:
        v13 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      v22 = *(_QWORD *)(v5 + 56) + 16 * v18;
      v23 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v18);
      v24 = *(_BYTE *)(v22 + 8);
      v25 = *(_QWORD *)v22;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v23);
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v14 + 8 * v28);
        }
        while (v32 == -1);
        v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v15) = v23;
      v16 = *(_QWORD *)(v8 + 56) + 16 * v15;
      *(_QWORD *)v16 = v25;
      *(_BYTE *)(v16 + 8) = v24;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

Swift::Int sub_1622C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7798);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  result = swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v14 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v14 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    result = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

uint64_t sub_1625CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_1665A8(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_162778(_BYTE *a1, uint64_t a2)
{
  return sub_1627A0(a1, a2, &qword_1F2D38, (uint64_t)&type metadata for BookHistory.Feature);
}

uint64_t sub_16278C(_BYTE *a1, uint64_t a2)
{
  return sub_1627A0(a1, a2, &qword_1F7718, (uint64_t)&type metadata for EventType);
}

uint64_t sub_1627A0(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD v18[9];

  v9 = *v4;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v4 + 40));
  Hasher._combine(_:)(a2);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18[0] = *v4;
    *v4 = 0x8000000000000000;
    sub_166754(a2, v12, isUniquelyReferenced_nonNull_native, a3, a4);
    v17 = *v4;
    *v4 = v18[0];
    swift_bridgeObjectRelease(v17);
    result = 1;
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(v9 + 48);
  if (*(unsigned __int8 *)(v13 + v12) != a2)
  {
    v14 = ~v11;
    do
    {
      v12 = (v12 + 1) & v14;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v13 + v12) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v4 + 48) + v12);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1628D4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_1668AC(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1629CC(void *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  _QWORD v17[9];
  uint64_t __dst[69];
  uint64_t __src[69];

  v3 = v2;
  memcpy(__dst, a2, 0x221uLL);
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  memcpy(__src, a2, 0x221uLL);
  Hasher.init(_seed:)(v17, v7);
  swift_bridgeObjectRetain(v6);
  SeedBook.hash(into:)((uint64_t)v17);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = 552 * v10;
    memcpy(__src, (const void *)(*(_QWORD *)(v6 + 48) + 552 * v10), 0x221uLL);
    if (_s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0(__src, __dst))
    {
LABEL_6:
      swift_bridgeObjectRelease(v6);
      sub_6228(a2);
      v13 = (const void *)(*(_QWORD *)(*v3 + 48) + v11);
      memcpy(__src, v13, 0x221uLL);
      memcpy(a1, v13, 0x221uLL);
      sub_6100(__src);
      return 0;
    }
    v12 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v12;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v11 = 552 * v10;
      memcpy(__src, (const void *)(*(_QWORD *)(v6 + 48) + 552 * v10), 0x221uLL);
      if (_s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0(__src, __dst))
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  memcpy(__src, __dst, 0x221uLL);
  v17[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_6100(__src);
  sub_1669CC(__src, v10, isUniquelyReferenced_nonNull_native);
  v16 = *v3;
  *v3 = v17[0];
  swift_bridgeObjectRelease(v16);
  memcpy(a1, __src, 0x221uLL);
  return 1;
}

uint64_t sub_162BC4(_BYTE *a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  char v16;
  uint64_t result;
  unsigned int v18;
  _QWORD *v19;
  _QWORD v21[9];

  v4 = *v2;
  Hasher.init(_seed:)(v21, *(_QWORD *)(*v2 + 40));
  v18 = a2 & 1;
  if ((a2 & 1) != 0)
    v5 = 0x6F6F626F69647561;
  else
    v5 = 0x6B6F6F6265;
  if ((a2 & 1) != 0)
    v6 = 0xE90000000000006BLL;
  else
    v6 = 0xE500000000000000;
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v21, v5, v6);
  swift_bridgeObjectRelease();
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v4 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      v11 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v9) ? 0x6F6F626F69647561 : 0x6B6F6F6265;
      v12 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v9) ? 0xE90000000000006BLL : 0xE500000000000000;
      if (v11 == v5 && v12 == v6)
        break;
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v5, v6, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        goto LABEL_23;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v4 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_21;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_23:
    swift_bridgeObjectRelease();
    result = 0;
    v16 = *(_BYTE *)(*(_QWORD *)(*v19 + 48) + v9);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
    v21[0] = *v19;
    *v19 = 0x8000000000000000;
    v16 = v18;
    sub_166C7C(v18, v9, isUniquelyReferenced_nonNull_native);
    *v19 = v21[0];
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = v16;
  return result;
}

uint64_t sub_162DB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_166E88(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_162F64(_BYTE *a1, char a2)
{
  return sub_162F8C(a1, a2, &qword_1F77F0, (uint64_t)&type metadata for Configuration.ScorersConfiguration.BookHistoryScorerConfiguration.RecommendationMethodology);
}

uint64_t sub_162F78(_BYTE *a1, char a2)
{
  return sub_162F8C(a1, a2, &qword_1F7750, (uint64_t)&type metadata for Methodology);
}

uint64_t sub_162F8C(_BYTE *a1, char a2, uint64_t *a3, uint64_t a4)
{
  unint64_t *v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v16;
  char isUniquelyReferenced_nonNull_native;
  char v18;
  uint64_t v19;
  uint64_t result;
  unsigned int v23;
  _QWORD *v24;
  _QWORD v26[9];

  v6 = *v4;
  Hasher.init(_seed:)(v26, *(_QWORD *)(*v4 + 40));
  v23 = a2 & 1;
  if ((a2 & 1) != 0)
    v7 = 0xD000000000000011;
  else
    v7 = 0x6168637275706F63;
  if ((a2 & 1) != 0)
    v8 = 0x800000000019F150;
  else
    v8 = 0xEA00000000006573;
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v26, v7, v8);
  swift_bridgeObjectRelease(v8);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v6 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v12 = ~v10;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v6 + 48) + v11))
        v13 = 0xD000000000000011;
      else
        v13 = 0x6168637275706F63;
      if (*(_BYTE *)(*(_QWORD *)(v6 + 48) + v11))
        v14 = 0x800000000019F150;
      else
        v14 = 0xEA00000000006573;
      if (v13 == v7 && v14 == v8)
      {
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v8);
        goto LABEL_24;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v7, v8, 0);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(v8);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
      if (((*(_QWORD *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_21;
    }
    v8 = v6;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    result = 0;
    v18 = *(_BYTE *)(*(_QWORD *)(*v24 + 48) + v11);
  }
  else
  {
LABEL_21:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
    v26[0] = *v24;
    *v24 = 0x8000000000000000;
    v18 = v23;
    sub_167020(v23, v11, isUniquelyReferenced_nonNull_native, a3, a4);
    v19 = *v24;
    *v24 = v26[0];
    swift_bridgeObjectRelease(v19);
    result = 1;
  }
  *a1 = v18;
  return result;
}

uint64_t sub_163198(_BYTE *a1, char a2)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  uint64_t result;
  _QWORD v18[9];

  v3 = v2;
  v5 = *v3;
  Hasher.init(_seed:)(v18, *(_QWORD *)(*v3 + 40));
  v6 = a2 & 1;
  if ((a2 & 1) != 0)
    v7 = 1684627824;
  else
    v7 = 1701147238;
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v18, v7, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v5 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      v12 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v10) ? 1684627824 : 1701147238;
      if (v12 == v7)
        break;
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, 0xE400000000000000, v7, 0xE400000000000000, 0);
      swift_bridgeObjectRelease_n(0xE400000000000000, 2);
      if ((v13 & 1) != 0)
        goto LABEL_14;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_12;
    }
    swift_bridgeObjectRelease(v5);
    v5 = 0xE400000000000000;
    swift_bridgeObjectRelease(0xE400000000000000);
LABEL_14:
    swift_bridgeObjectRelease(v5);
    result = 0;
    LOBYTE(v6) = *(_BYTE *)(*(_QWORD *)(*v3 + 48) + v10);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease(v5);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v18[0] = *v3;
    *v3 = 0x8000000000000000;
    sub_167238(v6, v10, isUniquelyReferenced_nonNull_native);
    v15 = *v3;
    *v3 = v18[0];
    swift_bridgeObjectRelease(v15);
    result = 1;
  }
  *a1 = v6;
  return result;
}

uint64_t sub_16333C(void *a1, void *__src)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD v18[69];
  _BYTE __dst[552];
  _BYTE __srca[552];

  v3 = v2;
  sub_892D0(__src, __dst);
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  sub_892D0(__src, __srca);
  Hasher.init(_seed:)(v18, v7);
  swift_bridgeObjectRetain(v6);
  ScorableAttribute.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = 552 * v10;
    sub_892D0((void *)(*(_QWORD *)(v6 + 48) + 552 * v10), __srca);
    sub_892D0(__srca, v18);
    _s20BooksPersonalization17ScorableAttributeO2eeoiySbAC_ACtFZ_0(v18, __dst);
    if ((v12 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease(v6);
      sub_8E15C(__src, sub_8C620);
      sub_892D0((void *)(*(_QWORD *)(*v3 + 48) + v11), v18);
      sub_892D0(v18, a1);
      sub_8E15C(v18, sub_8C478);
      return 0;
    }
    v13 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v13;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v11 = 552 * v10;
      sub_892D0((void *)(*(_QWORD *)(v6 + 48) + 552 * v10), __srca);
      sub_892D0(__srca, v18);
      _s20BooksPersonalization17ScorableAttributeO2eeoiySbAC_ACtFZ_0(v18, __dst);
      if ((v14 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease(v6);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_892D0(__dst, __srca);
  v18[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_8E15C(__srca, sub_8C478);
  sub_1673F8(__srca, v10, isUniquelyReferenced_nonNull_native);
  v17 = *v3;
  *v3 = v18[0];
  swift_bridgeObjectRelease(v17);
  sub_892D0(__srca, a1);
  return 1;
}

uint64_t sub_163544(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v20;
  _QWORD v21[9];

  v5 = 0x6B6F6F6265;
  v6 = *v2;
  Hasher.init(_seed:)(v21, *(_QWORD *)(*v2 + 40));
  v20 = v2;
  if ((_BYTE)a2)
  {
    if (a2 == 1)
      v5 = 0x6F6F626F69647561;
    else
      v5 = 0x646578696DLL;
    if (a2 == 1)
      v7 = 0xE90000000000006BLL;
    else
      v7 = 0xE500000000000000;
  }
  else
  {
    v7 = 0xE500000000000000;
  }
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v21, v5, v7);
  swift_bridgeObjectRelease();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_29:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v20);
    v21[0] = *v20;
    *v20 = 0x8000000000000000;
    sub_1675BC(a2, v10, isUniquelyReferenced_nonNull_native);
    *v20 = v21[0];
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_32;
  }
  v11 = ~v9;
  while (!*(_BYTE *)(*(_QWORD *)(v6 + 48) + v10))
  {
    v13 = 0xE500000000000000;
    v12 = 0x6B6F6F6265;
    v14 = a2;
    if (!(_BYTE)a2)
      goto LABEL_25;
LABEL_16:
    if (v14 == 1)
      v15 = 0x6F6F626F69647561;
    else
      v15 = 0x646578696DLL;
    if (v14 == 1)
      v16 = 0xE90000000000006BLL;
    else
      v16 = 0xE500000000000000;
    if (v12 == v15)
      goto LABEL_26;
LABEL_27:
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v15, v16, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
      goto LABEL_31;
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_29;
  }
  if (*(_BYTE *)(*(_QWORD *)(v6 + 48) + v10) == 1)
  {
    v12 = 0x6F6F626F69647561;
    v13 = 0xE90000000000006BLL;
    v14 = a2;
    if (!(_BYTE)a2)
      goto LABEL_25;
    goto LABEL_16;
  }
  v13 = 0xE500000000000000;
  v12 = 0x646578696DLL;
  v14 = a2;
  if ((_BYTE)a2)
    goto LABEL_16;
LABEL_25:
  v16 = 0xE500000000000000;
  v15 = 0x6B6F6F6265;
  if (v12 != 0x6B6F6F6265)
    goto LABEL_27;
LABEL_26:
  if (v13 != v16)
    goto LABEL_27;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_31:
  swift_bridgeObjectRelease();
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v20 + 48) + v10);
LABEL_32:
  *a1 = a2;
  return result;
}

uint64_t sub_1637DC(_BYTE *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v8;
  _QWORD v10[9];

  v4 = *v2;
  Hasher.init(_seed:)(v10, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v4);
  sub_F8978((uint64_t)v10, a2);
  v5 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v10[0] = *v8;
  *v8 = 0x8000000000000000;
  sub_16785C(a2, v5, isUniquelyReferenced_nonNull_native);
  *v8 = v10[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_163BBC(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_41754(&qword_1F1168, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v34 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v30 = v3;
    v31 = a1;
    v32 = ~v15;
    v33 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_41754(&qword_1F1170, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v32;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v30;
        a1 = v31;
        v26 = v33;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v25(v34, v6);
    v22(v31, *(_QWORD *)(*v30 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v34;
    v20(v9, v34, v6);
    v35 = *v3;
    *v3 = 0x8000000000000000;
    sub_167C7C((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

Swift::Int sub_163E18(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD v35[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D78);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_40;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v33 = v2;
  v34 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v9)
    {
      v16 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_25;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v18 >= v10)
      break;
    v19 = (_QWORD *)(v3 + 56);
    v20 = *(_QWORD *)(v34 + 8 * v18);
    ++v13;
    if (!v20)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v10)
        goto LABEL_34;
      v20 = *(_QWORD *)(v34 + 8 * v13);
      if (!v20)
      {
        v21 = v18 + 2;
        if (v21 >= v10)
        {
LABEL_34:
          swift_release(v3);
          v2 = v33;
          goto LABEL_36;
        }
        v20 = *(_QWORD *)(v34 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            v13 = v21 + 1;
            if (__OFADD__(v21, 1))
              goto LABEL_42;
            if (v13 >= v10)
              goto LABEL_34;
            v20 = *(_QWORD *)(v34 + 8 * v13);
            ++v21;
            if (v20)
              goto LABEL_24;
          }
        }
        v13 = v21;
      }
    }
LABEL_24:
    v9 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_25:
    v22 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v23 = *v22;
    v24 = v22[1];
    Hasher.init(_seed:)(v35, *(_QWORD *)(v6 + 40));
    String.hash(into:)(v35, v23, v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v6 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v23;
    v15[1] = v24;
    ++*(_QWORD *)(v6 + 16);
  }
  swift_release(v3);
  v2 = v33;
  v19 = (_QWORD *)(v3 + 56);
LABEL_36:
  v32 = 1 << *(_BYTE *)(v3 + 32);
  if (v32 > 63)
    bzero(v19, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v19 = -1 << v32;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_40:
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1640DC(uint64_t a1, uint64_t *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int *v30;
  uint64_t v31[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(a2);
  result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v4 + 56);
    v10 = 1 << *(_BYTE *)(v4 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v4 + 56);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_36;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_36;
          v19 = v9[v8];
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_36;
            v19 = v9[v8];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v29;
                v3 = v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v8 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v8 >= v13)
                    goto LABEL_36;
                  v19 = v9[v8];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v8 = v20;
            }
          }
        }
LABEL_26:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v17);
      Hasher.init(_seed:)(v31, *(_QWORD *)(v7 + 40));
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

uint64_t sub_164380(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D30);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_164600(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  __int128 v52;
  _BYTE __dst[377];
  _BYTE v54[384];
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[9];
  _OWORD __src[35];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F3AE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v39 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v37 = v2;
    v38 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain(v3);
    v12 = 0;
    v40 = v6;
    v41 = v3;
    while (1)
    {
      if (v9)
      {
        v50 = v12;
        v51 = (v9 - 1) & v9;
        v14 = __clz(__rbit64(v9)) | (v12 << 6);
      }
      else
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return result;
        }
        if (v15 >= v38)
          goto LABEL_45;
        v16 = v39[v15];
        v17 = v12 + 1;
        if (!v16)
        {
          v17 = v12 + 2;
          if (v12 + 2 >= v38)
            goto LABEL_45;
          v16 = v39[v17];
          if (!v16)
          {
            v17 = v12 + 3;
            if (v12 + 3 >= v38)
              goto LABEL_45;
            v16 = v39[v17];
            if (!v16)
            {
              v18 = v12 + 4;
              if (v12 + 4 >= v38)
              {
LABEL_45:
                swift_release(v3);
                v2 = v37;
                v36 = 1 << *(_BYTE *)(v3 + 32);
                if (v36 > 63)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v16 = v39[v18];
              if (!v16)
              {
                while (1)
                {
                  v17 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_51;
                  if (v17 >= v38)
                    goto LABEL_45;
                  v16 = v39[v17];
                  ++v18;
                  if (v16)
                    goto LABEL_26;
                }
              }
              v17 = v12 + 4;
            }
          }
        }
LABEL_26:
        v50 = v17;
        v51 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      memcpy(__src, (const void *)(*(_QWORD *)(v3 + 48) + 552 * v14), 0x221uLL);
      Hasher.init(_seed:)(v63, *(_QWORD *)(v6 + 40));
      v19 = BYTE8(__src[0]);
      v20 = *(_QWORD *)&__src[2];
      v21 = BYTE8(__src[2]);
      v22 = *(_QWORD *)&__src[3];
      v23 = BYTE8(__src[3]);
      v24 = *(_QWORD *)&__src[4];
      v25 = BYTE8(__src[4]);
      v48 = *((_QWORD *)&__src[5] + 1);
      v49 = *(_QWORD *)&__src[5];
      v46 = *((_QWORD *)&__src[6] + 1);
      v47 = *(_QWORD *)&__src[6];
      v44 = *((_QWORD *)&__src[7] + 1);
      v45 = *(_QWORD *)&__src[7];
      v26 = *(_QWORD *)&__src[8];
      v42 = *(_QWORD *)&__src[9];
      v43 = *((_QWORD *)&__src[8] + 1);
      v52 = __src[1];
      Hasher._combine(_:)(*(Swift::UInt64 *)&__src[0]);
      LOBYTE(v55) = v19;
      v56 = v52;
      v57 = v20;
      LOBYTE(v58) = v21;
      v59 = v22;
      LOBYTE(v60) = v23;
      v61 = v24;
      LOBYTE(v62) = v25;
      Book.Metadata.hash(into:)((uint64_t)v63);
      if (v26 >> 1 == 0xFFFFFFFF)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v55 = v49;
        *(_QWORD *)&v56 = v48;
        *((_QWORD *)&v56 + 1) = v47;
        v57 = v46;
        v58 = v45;
        v59 = v44;
        v60 = v26;
        v61 = v43;
        v62 = v42;
        Hasher._combine(_:)(1u);
        InternalAffinitySource.hash(into:)();
      }
      v6 = v40;
      v9 = v51;
      sub_41300((uint64_t)&__src[9] + 8, (uint64_t)&v55, &qword_1F2D68);
      if (sub_8E6A0((uint64_t)&v55) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        sub_41300((uint64_t)&__src[9] + 8, (uint64_t)v54, &qword_1F2D68);
        memcpy(__dst, v54, sizeof(__dst));
        Hasher._combine(_:)(1u);
        BookHistory.hash(into:)();
      }
      v27 = *((_QWORD *)&__src[33] + 1);
      v28 = LOBYTE(__src[34]);
      swift_bridgeObjectRetain(*((_QWORD *)&__src[33] + 1));
      sub_FDDF0((uint64_t)v63, v27);
      swift_bridgeObjectRelease(v27);
      if (v28 == 12)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v54[0] = v28;
        Hasher._combine(_:)(1u);
        PositiveAffinitySource.hash(into:)((uint64_t)v63);
      }
      v3 = v41;
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v40 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_50;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v10 + 8 * v31);
        }
        while (v35 == -1);
        v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      result = (uint64_t)memcpy((void *)(*(_QWORD *)(v40 + 48) + 552 * v13), __src, 0x221uLL);
      ++*(_QWORD *)(v40 + 16);
      v12 = v50;
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_164B00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D40);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v32 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_42;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_42;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_42;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_42:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_48;
                  if (v14 >= v11)
                    goto LABEL_42;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v17);
      Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
      if (v21)
        v22 = 0x6F6F626F69647561;
      else
        v22 = 0x6B6F6F6265;
      if (v21)
        v23 = 0xE90000000000006BLL;
      else
        v23 = 0xE500000000000000;
      String.hash(into:)(v33, v22, v23);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_164DF4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F3AF0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

Swift::Int sub_1650D0(uint64_t a1)
{
  return sub_1650DC(a1, &qword_1F7750);
}

Swift::Int sub_1650DC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v32 = v3;
    v33 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v11 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain(v4);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_42;
        v19 = v33[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_42;
          v19 = v33[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_42;
            v19 = v33[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_42:
                swift_release(v4);
                v3 = v32;
                v31 = 1 << *(_BYTE *)(v4 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_48;
                  if (v14 >= v11)
                    goto LABEL_42;
                  v19 = v33[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v17);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v7 + 40));
      if (v21)
        v22 = 0xD000000000000011;
      else
        v22 = 0x6168637275706F63;
      if (v21)
        v23 = 0x800000000019F150;
      else
        v23 = 0xEA00000000006573;
      String.hash(into:)(v34, v22, v23);
      swift_bridgeObjectRelease(v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v7 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_47;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

Swift::Int sub_1653EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F7708);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_39;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_39;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_39;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_39:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_45;
                  if (v14 >= v11)
                    goto LABEL_39;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v17);
      Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
      if (v21)
        v22 = 1684627824;
      else
        v22 = 1701147238;
      String.hash(into:)(v32, v22, 0xE400000000000000);
      swift_bridgeObjectRelease(0xE400000000000000);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1656C4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  uint64_t v18[9];
  _BYTE __src[552];
  _BYTE v20[560];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D70);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v17 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v9)
  {
    v10 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v17 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v17 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v17 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v17 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x165AF8);
              }
              if (v12 >= v17)
                break;
              v11 = v7[v12];
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        sub_892D0((void *)(*(_QWORD *)(v3 + 48) + 552 * v10), __src);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v5 + 40));
        sub_892D0(__src, v20);
        v14 = (char *)&loc_1658C0 + *((int *)qword_165AF8 + sub_892E4((uint64_t)v20));
        __asm { BR              X9 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v15 = 1 << *(_BYTE *)(v3 + 32);
  if (v15 > 63)
    bzero((void *)(v3 + 56), ((unint64_t)(v15 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v15;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

Swift::Int sub_165B10(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D28);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v32 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_41;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_41;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_41;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_41:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_47;
                  if (v14 >= v11)
                    goto LABEL_41;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v17);
      Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
      if (v21)
      {
        if (v21 == 1)
        {
          v22 = 0xE90000000000006BLL;
          v23 = 0x6F6F626F69647561;
        }
        else
        {
          v22 = 0xE500000000000000;
          v23 = 0x646578696DLL;
        }
      }
      else
      {
        v22 = 0xE500000000000000;
        v23 = 0x6B6F6F6265;
      }
      String.hash(into:)(v33, v23, v22);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_46;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_165E1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F7740);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v18 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x166214);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v19, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v2 = v18;
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

uint64_t sub_16623C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7788);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v2;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v7 + 48);
    v25 = *(_QWORD *)(v40 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    v27 = *(_QWORD *)(v9 + 40);
    v28 = sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(_QWORD *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(_QWORD *)(v9 + 16);
    v7 = v23;
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

uint64_t sub_1665A8(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_163E18(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_167E80();
      goto LABEL_22;
    }
    sub_168AE4(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_166740(uint64_t a1, unint64_t a2, char a3)
{
  return sub_166754(a1, a2, a3, &qword_1F7718, (uint64_t)&type metadata for EventType);
}

uint64_t sub_166754(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  Swift::UInt v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v8 = result;
  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1640DC(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_16855C(a4);
      goto LABEL_14;
    }
    sub_168D90(v11, a4);
  }
  v12 = *v5;
  Hasher.init(_seed:)(v20, *(_QWORD *)(*v5 + 40));
  Hasher._combine(_:)(v8);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a2 = result & ~v13;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = *(_QWORD *)(v12 + 48);
    if (*(unsigned __int8 *)(v14 + a2) == (_DWORD)v8)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }
    else
    {
      v15 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v14 + a2) == (_DWORD)v8)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v16 + 48) + a2) = v8;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
  return result;
}

uint64_t sub_1668AC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_164380(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_168030();
      goto LABEL_14;
    }
    sub_169004(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

void *sub_1669CC(_QWORD *__src, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *result;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  uint64_t *v34;
  _QWORD v35[18];
  _BYTE __srca[545];
  uint64_t __dst[70];

  v4 = v3;
  memcpy(__dst, __src, 0x221uLL);
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  v34 = v4;
  if (v9 > v8 && (a3 & 1) != 0)
    goto LABEL_14;
  v10 = v8 + 1;
  if ((a3 & 1) != 0)
  {
    sub_164600(v10);
  }
  else
  {
    if (v9 > v8)
    {
      sub_1681C4();
      goto LABEL_14;
    }
    sub_169264(v10);
  }
  v11 = *v4;
  v12 = *(_QWORD *)(*v4 + 40);
  memcpy(__srca, __src, sizeof(__srca));
  Hasher.init(_seed:)(v35, v12);
  SeedBook.hash(into:)((uint64_t)v35);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    memcpy(__srca, (const void *)(*(_QWORD *)(v11 + 48) + 552 * a2), sizeof(__srca));
    if (_s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0((uint64_t *)__srca, __dst))
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SeedBook);
      __break(1u);
    }
    else
    {
      v15 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        memcpy(__srca, (const void *)(*(_QWORD *)(v11 + 48) + 552 * a2), sizeof(__srca));
        if (_s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0((uint64_t *)__srca, __dst))
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *((_BYTE *)__src + 72);
  v17 = __src[8];
  v18 = *((_BYTE *)__src + 56);
  v19 = __src[6];
  v20 = *((_BYTE *)__src + 40);
  v21 = __src[4];
  v22 = __src[1] & 1;
  v33 = *((_BYTE *)__src + 544);
  v23 = __src[67];
  v32 = *((_OWORD *)__src + 1);
  sub_41300((uint64_t)(__src + 19), (uint64_t)v35, &qword_1F2D68);
  v24 = __src[18];
  *(_QWORD *)__srca = *__src;
  __srca[8] = v22;
  *(_OWORD *)&__srca[16] = v32;
  *(_QWORD *)&__srca[32] = v21;
  __srca[40] = v20 & 1;
  *(_QWORD *)&__srca[48] = v19;
  __srca[56] = v18 & 1;
  *(_QWORD *)&__srca[64] = v17;
  __srca[72] = v16 & 1;
  v25 = *((_OWORD *)__src + 6);
  *(_OWORD *)&__srca[80] = *((_OWORD *)__src + 5);
  *(_OWORD *)&__srca[96] = v25;
  v26 = *((_OWORD *)__src + 8);
  *(_OWORD *)&__srca[112] = *((_OWORD *)__src + 7);
  *(_OWORD *)&__srca[128] = v26;
  *(_QWORD *)&__srca[144] = v24;
  sub_41300((uint64_t)v35, (uint64_t)&__srca[152], &qword_1F2D68);
  *(_QWORD *)&__srca[536] = v23;
  __srca[544] = v33;
  v27 = *v34;
  *(_QWORD *)(*v34 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = memcpy((void *)(*(_QWORD *)(v27 + 48) + 552 * a2), __srca, 0x221uLL);
  v29 = *(_QWORD *)(v27 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
    __break(1u);
  else
    *(_QWORD *)(v27 + 16) = v31;
  return result;
}

uint64_t sub_166C7C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  char v23;
  _QWORD v24[9];

  v6 = result & 1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  v23 = result & 1;
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_25;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_164B00(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_16855C(&qword_1F2D40);
      goto LABEL_25;
    }
    sub_169730(v9);
  }
  v10 = 0x6B6F6F6265;
  v11 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  if (v6)
  {
    v10 = 0x6F6F626F69647561;
    v4 = 0xE90000000000006BLL;
  }
  else
  {
    v4 = 0xE500000000000000;
  }
  String.hash(into:)(v24, v10, v4);
  swift_bridgeObjectRelease();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a2 = result & ~v12;
  if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = *(_BYTE *)(*(_QWORD *)(v11 + 48) + a2) ? 0x6F6F626F69647561 : 0x6B6F6F6265;
      v15 = *(_BYTE *)(*(_QWORD *)(v11 + 48) + a2) ? 0xE90000000000006BLL : 0xE500000000000000;
      if (v14 == v10 && v15 == v4)
        goto LABEL_28;
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v10, v4, 0);
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v17 & 1) != 0)
        goto LABEL_29;
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_25:
  v18 = *v22;
  *(_QWORD *)(*v22 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v18 + 48) + a2) = v23;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (!v20)
  {
    *(_QWORD *)(v18 + 16) = v21;
    return result;
  }
  __break(1u);
LABEL_28:
  swift_bridgeObjectRelease_n(v4, 2);
LABEL_29:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Book.MediaType);
  __break(1u);
  return result;
}

uint64_t sub_166E88(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_164DF4(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_1683A0();
      goto LABEL_22;
    }
    sub_1699F0(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for APICommonHelpers.StringKey);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

uint64_t sub_167020(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  unint64_t v6;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  _QWORD v28[9];

  v9 = result & 1;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  v27 = result & 1;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_28;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1650DC(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      result = (uint64_t)sub_16855C(a4);
      goto LABEL_28;
    }
    sub_169CA8(v12, a4);
  }
  v13 = *v5;
  Hasher.init(_seed:)(v28, *(_QWORD *)(*v5 + 40));
  if (v9)
    v14 = 0xD000000000000011;
  else
    v14 = 0x6168637275706F63;
  if (v9)
    v6 = 0x800000000019F150;
  else
    v6 = 0xEA00000000006573;
  String.hash(into:)(v28, v14, v6);
  swift_bridgeObjectRelease(v6);
  result = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = result & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v25 = a5;
    v16 = ~v15;
    do
    {
      v17 = *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) ? 0xD000000000000011 : 0x6168637275706F63;
      v18 = *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) ? 0x800000000019F150 : 0xEA00000000006573;
      if (v17 == v14 && v18 == v6)
        goto LABEL_31;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v14, v6, 0);
      swift_bridgeObjectRelease(v18);
      result = swift_bridgeObjectRelease(v6);
      if ((v20 & 1) != 0)
        goto LABEL_32;
      a2 = (a2 + 1) & v16;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_28:
  v21 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v21 + 48) + a2) = v27;
  v22 = *(_QWORD *)(v21 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v21 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_31:
  swift_bridgeObjectRelease_n(v6, 2);
LABEL_32:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v25);
  __break(1u);
  return result;
}

uint64_t sub_167238(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v4 = v3;
  v6 = result & 1;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_19;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1653EC(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_16855C(&qword_1F7708);
      goto LABEL_19;
    }
    sub_169F80(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v20, *(_QWORD *)(*v3 + 40));
  if (v6)
    v11 = 1684627824;
  else
    v11 = 1701147238;
  String.hash(into:)(v20, v11, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) ? 1684627824 : 1701147238;
      if (v14 == v11)
        goto LABEL_22;
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, 0xE400000000000000, v11, 0xE400000000000000, 0);
      result = swift_bridgeObjectRelease_n(0xE400000000000000, 2);
      if ((v15 & 1) != 0)
        goto LABEL_23;
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_19:
  v16 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v16 + 48) + a2) = v6;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v16 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_22:
  swift_bridgeObjectRelease_n(0xE400000000000000, 2);
LABEL_23:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Book.SaleType);
  __break(1u);
  return result;
}

void *sub_1673F8(void *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *result;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _QWORD v23[69];
  _BYTE __src[552];
  _BYTE __dst[552];

  v4 = v3;
  sub_892D0(a1, __dst);
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
    goto LABEL_14;
  v10 = v8 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1656C4(v10);
  }
  else
  {
    if (v9 > v8)
    {
      sub_1686E4();
      goto LABEL_14;
    }
    sub_16A224(v10);
  }
  v11 = *v4;
  v12 = *(_QWORD *)(*v4 + 40);
  sub_892D0(a1, __src);
  Hasher.init(_seed:)(v23, v12);
  ScorableAttribute.hash(into:)();
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v11 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_892D0((void *)(*(_QWORD *)(v11 + 48) + 552 * a2), __src);
    sub_892D0(__src, v23);
    _s20BooksPersonalization17ScorableAttributeO2eeoiySbAC_ACtFZ_0(v23, __dst);
    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ScorableAttribute);
      __break(1u);
    }
    else
    {
      v16 = ~v14;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(_QWORD *)(v11 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        sub_892D0((void *)(*(_QWORD *)(v11 + 48) + 552 * a2), __src);
        sub_892D0(__src, v23);
        _s20BooksPersonalization17ScorableAttributeO2eeoiySbAC_ACtFZ_0(v23, __dst);
        if ((v17 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v18 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_892D0(a1, (void *)(*(_QWORD *)(v18 + 48) + 552 * a2));
  v20 = *(_QWORD *)(v18 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v22;
  return result;
}

uint64_t sub_1675BC(uint64_t result, unint64_t a2, char a3)
{
  _QWORD *v3;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD v24[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_165B10(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (uint64_t)sub_16855C(&qword_1F2D28);
        goto LABEL_36;
      }
      sub_16A660(v8);
    }
    v9 = 0x6B6F6F6265;
    v10 = *v3;
    Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
    if (v5)
    {
      if (v5 == 1)
        v9 = 0x6F6F626F69647561;
      else
        v9 = 0x646578696DLL;
      if (v5 == 1)
        v11 = 0xE90000000000006BLL;
      else
        v11 = 0xE500000000000000;
    }
    else
    {
      v11 = 0xE500000000000000;
    }
    String.hash(into:)(v24, v9, v11);
    swift_bridgeObjectRelease();
    v3 = v24;
    result = Hasher._finalize()();
    v12 = -1 << *(_BYTE *)(v10 + 32);
    a2 = result & ~v12;
    if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v13 = ~v12;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)(v10 + 48) + a2))
        {
          if (*(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) == 1)
          {
            v14 = 0x6F6F626F69647561;
            v3 = (_QWORD *)0xE90000000000006BLL;
            v15 = v5;
            if (!v5)
              goto LABEL_32;
          }
          else
          {
            v3 = (_QWORD *)0xE500000000000000;
            v14 = 0x646578696DLL;
            v15 = v5;
            if (!v5)
            {
LABEL_32:
              v17 = 0xE500000000000000;
              v16 = 0x6B6F6F6265;
              if (v14 == 0x6B6F6F6265)
                goto LABEL_33;
              goto LABEL_34;
            }
          }
        }
        else
        {
          v3 = (_QWORD *)0xE500000000000000;
          v14 = 0x6B6F6F6265;
          v15 = v5;
          if (!v5)
            goto LABEL_32;
        }
        if (v15 == 1)
          v16 = 0x6F6F626F69647561;
        else
          v16 = 0x646578696DLL;
        if (v15 == 1)
          v17 = 0xE90000000000006BLL;
        else
          v17 = 0xE500000000000000;
        if (v14 == v16)
        {
LABEL_33:
          if (v3 == (_QWORD *)v17)
            goto LABEL_39;
        }
LABEL_34:
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v3, v16, v17, 0);
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_40;
        a2 = (a2 + 1) & v13;
      }
      while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_36:
  v19 = *v23;
  *(_QWORD *)(*v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v19 + 48) + a2) = v5;
  v20 = *(_QWORD *)(v19 + 16);
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
LABEL_39:
    swift_bridgeObjectRelease_n(v3, 2);
LABEL_40:
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ClusteringOptions.MediaType);
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v19 + 16) = v22;
  }
  return result;
}

Swift::Int sub_16785C(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  _QWORD v16[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_165E1C(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (Swift::Int)sub_16855C(&qword_1F7740);
        goto LABEL_10;
      }
      sub_16A938(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v16, *(_QWORD *)(*v3 + 40));
    sub_F8978((uint64_t)v16, v5);
    result = Hasher._finalize()();
    a2 = result & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v10 = *v14;
  *(_QWORD *)(*v14 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) = v15;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x167C10);
  }
  *(_QWORD *)(v10 + 16) = v13;
  return result;
}

uint64_t sub_167C7C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_16623C(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1688C0();
      goto LABEL_12;
    }
    sub_16AD24(v12);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_41754(&qword_1F1170, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void *sub_167E80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_5EDC(&qword_1F2D78);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_168030()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_5EDC(&qword_1F2D30);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1681C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  const void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  _QWORD v21[70];

  v1 = v0;
  sub_5EDC(&qword_1F3AE0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 552 * v15;
    v17 = (const void *)(*(_QWORD *)(v2 + 48) + 552 * v15);
    memcpy(v21, v17, 0x221uLL);
    memmove((void *)(*(_QWORD *)(v4 + 48) + v16), v17, 0x221uLL);
    result = sub_6100(v21);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1683A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_5EDC(&qword_1F3AF0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_168550()
{
  return sub_16855C(&qword_1F7750);
}

void *sub_16855C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_5EDC(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1686E4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _BYTE v20[560];

  v1 = v0;
  sub_5EDC(&qword_1F2D70);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_28;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v13)
          goto LABEL_28;
        v18 = *(_QWORD *)(v6 + 8 * v9);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = 552 * v15;
    sub_892D0((void *)(*(_QWORD *)(v2 + 48) + 552 * v15), v20);
    sub_892D0(v20, (void *)(*(_QWORD *)(v4 + 48) + v16));
    result = (void *)sub_8E15C(v20, sub_8C478);
  }
  v19 = v17 + 3;
  if (v19 >= v13)
    goto LABEL_28;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_1688C0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EDC(&qword_1F7788);
  v6 = *v0;
  v7 = static _SetStorage.copy(original:)(*v0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = (void *)swift_release(v6);
LABEL_30:
    *v1 = v8;
    return result;
  }
  v25 = v1;
  result = (void *)(v7 + 56);
  v10 = v6 + 56;
  v11 = (unint64_t)((1 << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11)
    result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  v13 = 0;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v6 + 16);
  v14 = 1 << *(_BYTE *)(v6 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v6 + 56);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v21 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_28;
      v22 = *(_QWORD *)(v10 + 8 * v13);
      if (!v22)
      {
        v13 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_28;
        v22 = *(_QWORD *)(v10 + 8 * v13);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v16 = (v22 - 1) & v22;
    v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v20, v2);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v20, v5, v2);
  }
  v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    result = (void *)swift_release(v6);
    v1 = v25;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v10 + 8 * v23);
  if (v22)
  {
    v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v13 >= v17)
      goto LABEL_28;
    v22 = *(_QWORD *)(v10 + 8 * v13);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::Int sub_168AE4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D78);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_168D90(uint64_t a1, uint64_t *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v7;
  int64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(a2);
  result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v29 = v3;
  v8 = 0;
  v9 = v4 + 56;
  v10 = 1 << *(_BYTE *)(v4 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v4 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_36;
      v19 = *(_QWORD *)(v9 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_36;
        v19 = *(_QWORD *)(v9 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v17);
    Hasher.init(_seed:)(v30, *(_QWORD *)(v7 + 40));
    Hasher._combine(_:)(v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v14 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    result = swift_release(v4);
    v3 = v29;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_169004(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D30);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_169264(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  __int128 v51;
  _BYTE __dst[377];
  _BYTE v53[384];
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[9];
  _OWORD __src[35];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F3AE0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_47:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v36 = v2;
  v37 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v38 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain(v3);
  v12 = 0;
  v39 = v3;
  v40 = v6;
  while (1)
  {
    if (v9)
    {
      v49 = v12;
      v50 = (v9 - 1) & v9;
      v14 = __clz(__rbit64(v9)) | (v12 << 6);
      goto LABEL_27;
    }
    v15 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (v15 >= v38)
      goto LABEL_45;
    v16 = *(_QWORD *)(v37 + 8 * v15);
    v17 = v12 + 1;
    if (!v16)
    {
      v17 = v12 + 2;
      if (v12 + 2 >= v38)
        goto LABEL_45;
      v16 = *(_QWORD *)(v37 + 8 * v17);
      if (!v16)
      {
        v17 = v12 + 3;
        if (v12 + 3 >= v38)
          goto LABEL_45;
        v16 = *(_QWORD *)(v37 + 8 * v17);
        if (!v16)
          break;
      }
    }
LABEL_26:
    v49 = v17;
    v50 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v17 << 6);
LABEL_27:
    memcpy(__src, (const void *)(*(_QWORD *)(v3 + 48) + 552 * v14), 0x221uLL);
    Hasher.init(_seed:)(v62, *(_QWORD *)(v6 + 40));
    v19 = BYTE8(__src[0]);
    v20 = *(_QWORD *)&__src[2];
    v21 = BYTE8(__src[2]);
    v22 = *(_QWORD *)&__src[3];
    v23 = BYTE8(__src[3]);
    v24 = *(_QWORD *)&__src[4];
    v25 = BYTE8(__src[4]);
    v47 = *((_QWORD *)&__src[5] + 1);
    v48 = *(_QWORD *)&__src[5];
    v45 = *((_QWORD *)&__src[6] + 1);
    v46 = *(_QWORD *)&__src[6];
    v43 = *((_QWORD *)&__src[7] + 1);
    v44 = *(_QWORD *)&__src[7];
    v26 = *(_QWORD *)&__src[8];
    v41 = *(_QWORD *)&__src[9];
    v42 = *((_QWORD *)&__src[8] + 1);
    v51 = __src[1];
    Hasher._combine(_:)(*(Swift::UInt64 *)&__src[0]);
    LOBYTE(v54) = v19;
    v55 = v51;
    v56 = v20;
    LOBYTE(v57) = v21;
    v58 = v22;
    LOBYTE(v59) = v23;
    v60 = v24;
    LOBYTE(v61) = v25;
    sub_6100(__src);
    Book.Metadata.hash(into:)((uint64_t)v62);
    if (v26 >> 1 == 0xFFFFFFFF)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v54 = v48;
      *(_QWORD *)&v55 = v47;
      *((_QWORD *)&v55 + 1) = v46;
      v56 = v45;
      v57 = v44;
      v58 = v43;
      v59 = v26;
      v60 = v42;
      v61 = v41;
      Hasher._combine(_:)(1u);
      InternalAffinitySource.hash(into:)();
    }
    v3 = v39;
    v9 = v50;
    sub_41300((uint64_t)&__src[9] + 8, (uint64_t)&v54, &qword_1F2D68);
    if (sub_8E6A0((uint64_t)&v54) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      sub_41300((uint64_t)&__src[9] + 8, (uint64_t)v53, &qword_1F2D68);
      memcpy(__dst, v53, sizeof(__dst));
      Hasher._combine(_:)(1u);
      BookHistory.hash(into:)();
    }
    v27 = *((_QWORD *)&__src[33] + 1);
    v28 = LOBYTE(__src[34]);
    swift_bridgeObjectRetain(*((_QWORD *)&__src[33] + 1));
    sub_FDDF0((uint64_t)v62, v27);
    swift_bridgeObjectRelease(v27);
    if (v28 == 12)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v53[0] = v28;
      Hasher._combine(_:)(1u);
      PositiveAffinitySource.hash(into:)((uint64_t)v62);
    }
    v6 = v40;
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v40 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_48;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v10 + 8 * v31);
      }
      while (v35 == -1);
      v13 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v40 + 48) + 552 * v13), __src, 0x221uLL);
    ++*(_QWORD *)(v40 + 16);
    v12 = v49;
  }
  v18 = v12 + 4;
  if (v12 + 4 >= v38)
  {
LABEL_45:
    result = swift_release_n(v3, 2);
    v2 = v36;
    goto LABEL_47;
  }
  v16 = *(_QWORD *)(v37 + 8 * v18);
  if (v16)
  {
    v17 = v12 + 4;
    goto LABEL_26;
  }
  while (1)
  {
    v17 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v17 >= v38)
      goto LABEL_45;
    v16 = *(_QWORD *)(v37 + 8 * v17);
    ++v18;
    if (v16)
      goto LABEL_26;
  }
LABEL_49:
  __break(1u);
  return result;
}

Swift::Int sub_169730(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D40);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_44:
    *v2 = v6;
    return result;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v18 >= v11)
      goto LABEL_42;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_42;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_42;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v17);
    Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
    if (v21)
      v22 = 0x6F6F626F69647561;
    else
      v22 = 0x6B6F6F6265;
    if (v21)
      v23 = 0xE90000000000006BLL;
    else
      v23 = 0xE500000000000000;
    String.hash(into:)(v32, v22, v23);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_42:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_44;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_42;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_1699F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F3AF0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_169C9C(uint64_t a1)
{
  return sub_169CA8(a1, &qword_1F7750);
}

Swift::Int sub_169CA8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_44:
    *v3 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v31 = v3;
  v32 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 56;
  result = swift_retain(v4);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v18 >= v32)
      goto LABEL_42;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_42;
      v19 = *(_QWORD *)(v9 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_42;
        v19 = *(_QWORD *)(v9 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v11 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v17);
    Hasher.init(_seed:)(v33, *(_QWORD *)(v7 + 40));
    if (v21)
      v22 = 0xD000000000000011;
    else
      v22 = 0x6168637275706F63;
    if (v21)
      v23 = 0x800000000019F150;
    else
      v23 = 0xEA00000000006573;
    String.hash(into:)(v33, v22, v23);
    swift_bridgeObjectRelease(v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_42:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_44;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v32)
      goto LABEL_42;
    v19 = *(_QWORD *)(v9 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_46:
  __break(1u);
  return result;
}

Swift::Int sub_169F80(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F7708);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_41:
    *v2 = v6;
    return result;
  }
  v30 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v18 >= v11)
      goto LABEL_39;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_39;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_39;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v17);
    Hasher.init(_seed:)(v31, *(_QWORD *)(v6 + 40));
    if (v21)
      v22 = 1684627824;
    else
      v22 = 1701147238;
    String.hash(into:)(v31, v22, 0xE400000000000000);
    swift_bridgeObjectRelease(0xE400000000000000);
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v29 == -1);
      v15 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_39:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_41;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_39;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_16A224(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16[9];
  _BYTE __src[552];
  _BYTE v18[560];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D70);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v15 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v9 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v15 > 1)
  {
    v10 = *(_QWORD *)(v3 + 64);
    v11 = 1;
    if (v10)
      goto LABEL_22;
    v11 = 2;
    if (v15 > 2)
    {
      v10 = *(_QWORD *)(v3 + 72);
      if (v10)
        goto LABEL_22;
      v11 = 3;
      if (v15 > 3)
      {
        v10 = *(_QWORD *)(v3 + 80);
        if (!v10)
        {
          v12 = 4;
          if (v15 > 4)
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (v10)
            {
              v11 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
              {
                __break(1u);
                JUMPOUT(0x16A648);
              }
              if (v11 >= v15)
                break;
              v10 = *(_QWORD *)(v3 + 56 + 8 * v11);
              ++v12;
              if (v10)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v9 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
        sub_892D0((void *)(*(_QWORD *)(v3 + 48) + 552 * v9), __src);
        Hasher.init(_seed:)(v16, *(_QWORD *)(v5 + 40));
        sub_892D0(__src, v18);
        v13 = (char *)&loc_16A42C + *((int *)qword_16A648 + sub_892E4((uint64_t)v18));
        __asm { BR              X9 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
LABEL_26:
  *v2 = v5;
  return result;
}

Swift::Int sub_16A660(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F2D28);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_43:
    *v2 = v6;
    return result;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v18 >= v11)
      goto LABEL_41;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_41;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_41;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v17);
    Hasher.init(_seed:)(v32, *(_QWORD *)(v6 + 40));
    if (v21)
    {
      if (v21 == 1)
      {
        v22 = 0xE90000000000006BLL;
        v23 = 0x6F6F626F69647561;
      }
      else
      {
        v22 = 0xE500000000000000;
        v23 = 0x646578696DLL;
      }
    }
    else
    {
      v22 = 0xE500000000000000;
      v23 = 0x6B6F6F6265;
    }
    String.hash(into:)(v32, v23, v22);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v15) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_41:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_43;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_41;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_16A938(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_5EDC(&qword_1F7740);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v16 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x16ACFCLL);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v17, *(_QWORD *)(v5 + 40));
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
  v2 = v16;
LABEL_26:
  *v2 = v5;
  return result;
}

uint64_t sub_16AD24(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_5EDC(&qword_1F7788);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_37:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v35 = v2;
  v36 = v8 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  result = swift_retain(v8);
  v17 = 0;
  while (1)
  {
    if (v14)
    {
      v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }
    v21 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      v17 = v21 + 1;
      if (v21 + 1 >= v37)
        goto LABEL_35;
      v22 = *(_QWORD *)(v36 + 8 * v17);
      if (!v22)
      {
        v17 = v21 + 2;
        if (v21 + 2 >= v37)
          goto LABEL_35;
        v22 = *(_QWORD *)(v36 + 8 * v17);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v24 * v20, v4);
    v25 = *(_QWORD *)(v10 + 40);
    v26 = sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v15 + 8 * v29);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))(*(_QWORD *)(v10 + 48) + v18 * v24, v7, v4);
    ++*(_QWORD *)(v10 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    result = swift_release_n(v8, 2);
    v2 = v35;
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v36 + 8 * v23);
  if (v22)
  {
    v17 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v17 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v17 >= v37)
      goto LABEL_35;
    v22 = *(_QWORD *)(v36 + 8 * v17);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

char *sub_16B04C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *result;
  char *v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;

  v41 = type metadata accessor for Calendar(0);
  v37 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for TimeZone(0);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v38 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EDC(&qword_1F77C8);
  v33 = v0;
  v3 = *v0;
  v4 = static _DictionaryStorage.copy(original:)(*v0);
  v5 = *(_QWORD *)(v3 + 16);
  v43 = v4;
  if (!v5)
  {
    result = (char *)swift_release(v3);
    v32 = v43;
    v31 = v33;
LABEL_25:
    *v31 = v32;
    return result;
  }
  v6 = v4;
  result = (char *)(v4 + 64);
  v8 = (char *)(v3 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v6 + 32)) + 63) >> 6;
  v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    result = (char *)memmove(result, v8, 8 * v9);
    v6 = v43;
  }
  v10 = 0;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v42 = v3;
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v35 = (unint64_t)(v11 + 63) >> 6;
  v14 = v36;
  v15 = v37;
  v17 = v38;
  v16 = v39;
  v18 = v41;
  v19 = v43;
  while (1)
  {
    if (v13)
    {
      v20 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v44 = v10;
      v21 = v20 | (v10 << 6);
      v22 = v42;
      goto LABEL_9;
    }
    v27 = v10 + 1;
    v22 = v42;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v27);
    v29 = v10 + 1;
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v35)
        goto LABEL_23;
      v28 = *(_QWORD *)(v34 + 8 * v29);
      if (!v28)
        break;
    }
LABEL_22:
    v13 = (v28 - 1) & v28;
    v44 = v29;
    v21 = __clz(__rbit64(v28)) + (v29 << 6);
LABEL_9:
    v23 = *(_QWORD *)(v14 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v17, *(_QWORD *)(v22 + 48) + v23, v16);
    v24 = *(_QWORD *)(v15 + 72) * v21;
    v25 = *(_QWORD *)(v22 + 56) + v24;
    v26 = v40;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v40, v25, v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(*(_QWORD *)(v19 + 48) + v23, v17, v16);
    result = (char *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v15 + 32))(*(_QWORD *)(v19 + 56) + v24, v26, v18);
    v10 = v44;
  }
  v30 = v27 + 2;
  if (v30 >= v35)
  {
LABEL_23:
    result = (char *)swift_release(v42);
    v31 = v33;
    v32 = v43;
    goto LABEL_25;
  }
  v28 = *(_QWORD *)(v34 + 8 * v30);
  if (v28)
  {
    v29 = v30;
    goto LABEL_22;
  }
  while (1)
  {
    v29 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v29 >= v35)
      goto LABEL_23;
    v28 = *(_QWORD *)(v34 + 8 * v29);
    ++v30;
    if (v28)
      goto LABEL_22;
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_16B32C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _BYTE __dst[377];

  v1 = v0;
  sub_5EDC(&qword_1F44D8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 384 * v15;
    memcpy(__dst, (const void *)(*(_QWORD *)(v2 + 56) + 384 * v15), sizeof(__dst));
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = memcpy((void *)(*(_QWORD *)(v4 + 56) + v18), __dst, 0x179uLL);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16B4F8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for StoreBook(0);
  v27 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EDC(&qword_1F7710);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v25 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v26 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v21);
    ++v11;
    if (!v22)
    {
      v11 = v21 + 1;
      if (v21 + 1 >= v15)
        goto LABEL_26;
      v22 = *(_QWORD *)(v26 + 8 * v11);
      if (!v22)
        break;
    }
LABEL_25:
    v14 = (v22 - 1) & v22;
    v17 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_12:
    v18 = 8 * v17;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    v20 = *(_QWORD *)(v27 + 72) * v17;
    sub_26A5C(*(_QWORD *)(v5 + 56) + v20, (uint64_t)v4, type metadata accessor for StoreBook);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    result = (void *)sub_A2618((uint64_t)v4, *(_QWORD *)(v7 + 56) + v20, type metadata accessor for StoreBook);
  }
  v23 = v21 + 2;
  if (v23 >= v15)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v25;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v26 + 8 * v23);
  if (v22)
  {
    v11 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v11 >= v15)
      goto LABEL_26;
    v22 = *(_QWORD *)(v26 + 8 * v11);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_16B724()
{
  return sub_16D4CC(&qword_1F1DE0);
}

void *sub_16B730()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_5EDC(&qword_1F1D18);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16B8BC()
{
  return sub_16E374(&qword_1F1D20);
}

void *sub_16B8C8()
{
  return sub_16E374(&qword_1F0298);
}

void *sub_16B8D4()
{
  return sub_16E1D0(&qword_1F1D28);
}

void *sub_16B8E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _BYTE v26[40];

  v1 = v0;
  sub_5EDC(&qword_1F0F18);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v24 = v1;
  result = (void *)(v3 + 64);
  v6 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  v25 = v2 + 64;
  v8 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v9 = 1 << *(_BYTE *)(v2 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v2 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v21 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v12)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v8;
    if (!v22)
    {
      v8 = v21 + 1;
      if (v21 + 1 >= v12)
        goto LABEL_26;
      v22 = *(_QWORD *)(v25 + 8 * v8);
      if (!v22)
        break;
    }
LABEL_25:
    v11 = (v22 - 1) & v22;
    v14 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v14);
    v17 = *v16;
    v18 = v16[1];
    v19 = 40 * v14;
    sub_418BC(*(_QWORD *)(v2 + 56) + 40 * v14, (uint64_t)v26, &qword_1F0E70);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v15);
    *v20 = v17;
    v20[1] = v18;
    sub_41300((uint64_t)v26, *(_QWORD *)(v4 + 56) + v19, &qword_1F0E70);
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v23 = v21 + 2;
  if (v23 >= v12)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v8 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v22 = *(_QWORD *)(v25 + 8 * v8);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_16BAE0()
{
  return sub_16E374(&qword_1F1618);
}

void *sub_16BAEC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;

  v1 = v0;
  sub_5EDC(&qword_1F7700);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      v9 = v31 + 1;
      if (v31 + 1 >= v13)
        goto LABEL_26;
      v32 = *(_QWORD *)(v6 + 8 * v9);
      if (!v32)
        break;
    }
LABEL_25:
    v12 = (v32 - 1) & v32;
    v15 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 80 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_BYTE *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v26 = *(_QWORD *)(v19 + 48);
    v25 = *(_QWORD *)(v19 + 56);
    v27 = *(_QWORD *)(v19 + 64);
    v28 = *(_QWORD *)(v19 + 72);
    v29 = *(_BYTE *)(v19 + 40);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v30 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v30 = v20;
    *(_BYTE *)(v30 + 8) = v21;
    *(_QWORD *)(v30 + 16) = v22;
    *(_BYTE *)(v30 + 24) = v23;
    *(_QWORD *)(v30 + 32) = v24;
    *(_BYTE *)(v30 + 40) = v29;
    *(_QWORD *)(v30 + 48) = v26;
    *(_QWORD *)(v30 + 56) = v25;
    *(_QWORD *)(v30 + 64) = v27;
    *(_QWORD *)(v30 + 72) = v28;
    sub_40554(v24, v29);
    swift_bridgeObjectRetain(v27);
    result = (void *)swift_bridgeObjectRetain(v26);
  }
  v33 = v31 + 2;
  if (v33 >= v13)
    goto LABEL_26;
  v32 = *(_QWORD *)(v6 + 8 * v33);
  if (v32)
  {
    v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v9);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16BCF4()
{
  return sub_16C604(&qword_1F76E0, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16BD08()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EDC(&qword_1F1D50);
  v24 = v0;
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v5);
    *v24 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v25 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v26 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      v11 = v20 + 1;
      if (v20 + 1 >= v26)
        goto LABEL_26;
      v21 = *(_QWORD *)(v25 + 8 * v11);
      if (!v21)
        break;
    }
LABEL_25:
    v14 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    v17 = *(_QWORD *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(_QWORD *)(v5 + 48) + v17, v1);
    v18 = 8 * v16;
    v19 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(_QWORD *)(v7 + 48) + v17, v4, v1);
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18) = v19;
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v22 = v20 + 2;
  if (v22 >= v26)
    goto LABEL_26;
  v21 = *(_QWORD *)(v25 + 8 * v22);
  if (v21)
  {
    v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v21 = *(_QWORD *)(v25 + 8 * v11);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16BF38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_5EDC(&qword_1F1D30);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16C0C4()
{
  return sub_16E1D0(&qword_1F7778);
}

void *sub_16C0D0()
{
  return sub_16E1D0(&qword_1F1D48);
}

void *sub_16C0DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_5EDC(&qword_1F1D08);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16C268()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_5EDC(&qword_1F1D38);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16C414()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_5EDC(&qword_1F1DB8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 48 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    v21 = *(_QWORD *)(v19 + 32);
    v23 = *(_QWORD *)(v19 + 40);
    v24 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v25 = v24;
    *(_BYTE *)(v25 + 16) = v20;
    *(_QWORD *)(v25 + 24) = v22;
    *(_QWORD *)(v25 + 32) = v21;
    *(_QWORD *)(v25 + 40) = v23;
    swift_bridgeObjectRetain(v23);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16C5E4()
{
  return sub_16E1D0(&qword_1F7760);
}

void *sub_16C5F0()
{
  return sub_16C604(&qword_1F76E8, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16C604(uint64_t *a1, uint64_t (*a2)(_BYTE *, unint64_t))
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _BYTE v23[40];

  v4 = v2;
  sub_5EDC(a1);
  v5 = *v2;
  v6 = static _DictionaryStorage.copy(original:)(*v2);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v4 = v7;
    return result;
  }
  result = (void *)(v6 + 64);
  v9 = v5 + 64;
  v10 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10)
    result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  v12 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v13 = 1 << *(_BYTE *)(v5 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v5 + 64);
  v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v16)
      goto LABEL_26;
    v21 = *(_QWORD *)(v9 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v16)
        goto LABEL_26;
      v21 = *(_QWORD *)(v9 + 8 * v12);
      if (!v21)
        break;
    }
LABEL_25:
    v15 = (v21 - 1) & v21;
    v18 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    v19 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v18);
    sub_3DD40(*(_QWORD *)(v5 + 56) + 40 * v18, (uint64_t)v23);
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v18) = v19;
    result = (void *)a2(v23, *(_QWORD *)(v7 + 56) + 40 * v18);
  }
  v22 = v20 + 2;
  if (v22 >= v16)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v9 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v16)
      goto LABEL_26;
    v21 = *(_QWORD *)(v9 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_16C7D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  v1 = v0;
  sub_5EDC(&qword_1F44E8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      v9 = v29 + 1;
      if (v29 + 1 >= v13)
        goto LABEL_26;
      v30 = *(_QWORD *)(v6 + 8 * v9);
      if (!v30)
        break;
    }
LABEL_25:
    v12 = (v30 - 1) & v30;
    v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 72 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    v24 = *(_BYTE *)(v19 + 32);
    v25 = *(_QWORD *)(v19 + 40);
    v26 = *(_BYTE *)(v19 + 48);
    v27 = *(_QWORD *)(v19 + 56);
    LOBYTE(v19) = *(_BYTE *)(v19 + 64);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v28 = *(_QWORD *)(v4 + 56) + v18;
    *(_BYTE *)v28 = v20;
    *(_QWORD *)(v28 + 8) = v21;
    *(_QWORD *)(v28 + 16) = v22;
    *(_QWORD *)(v28 + 24) = v23;
    *(_BYTE *)(v28 + 32) = v24;
    *(_QWORD *)(v28 + 40) = v25;
    *(_BYTE *)(v28 + 48) = v26;
    *(_QWORD *)(v28 + 56) = v27;
    *(_BYTE *)(v28 + 64) = v19;
    swift_bridgeObjectRetain(v21);
    result = (void *)swift_bridgeObjectRetain(v22);
  }
  v31 = v29 + 2;
  if (v31 >= v13)
    goto LABEL_26;
  v30 = *(_QWORD *)(v6 + 8 * v31);
  if (v30)
  {
    v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v30 = *(_QWORD *)(v6 + 8 * v9);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16C9C4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_5EDC(&qword_1F44E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v21 = *v19;
    v20 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v21;
    v22[1] = v20;
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16CB70()
{
  return sub_16CB88(&qword_1F77E8);
}

void *sub_16CB7C()
{
  return sub_16CB88(&qword_1F77D0);
}

void *sub_16CB88(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void (*v24)(unint64_t, char *, uint64_t);
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  uint64_t v30;
  __int128 v31;

  v3 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EDC(a1);
  v8 = *v1;
  v9 = static _DictionaryStorage.copy(original:)(*v1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
  {
    result = (void *)swift_release(v8);
LABEL_28:
    *v3 = v10;
    return result;
  }
  v29 = v3;
  result = (void *)(v9 + 64);
  v12 = (unint64_t)((1 << *(_BYTE *)(v10 + 32)) + 63) >> 6;
  if (v10 != v8 || (unint64_t)result >= v8 + 64 + 8 * v12)
    result = memmove(result, (const void *)(v8 + 64), 8 * v12);
  v30 = v8 + 64;
  v14 = 0;
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
  v15 = 1 << *(_BYTE *)(v8 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v8 + 64);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    v26 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v18)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v26);
    ++v14;
    if (!v27)
    {
      v14 = v26 + 1;
      if (v26 + 1 >= v18)
        goto LABEL_26;
      v27 = *(_QWORD *)(v30 + 8 * v14);
      if (!v27)
        break;
    }
LABEL_25:
    v17 = (v27 - 1) & v27;
    v20 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_12:
    v21 = *(_QWORD *)(v5 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(_QWORD *)(v8 + 48) + v21, v4);
    v22 = 16 * v20;
    v23 = *(_QWORD *)(v10 + 48) + v21;
    v24 = *(void (**)(unint64_t, char *, uint64_t))(v5 + 32);
    v31 = *(_OWORD *)(*(_QWORD *)(v8 + 56) + v22);
    v24(v23, v7, v4);
    v25 = v31;
    *(_OWORD *)(*(_QWORD *)(v10 + 56) + v22) = v31;
    swift_bridgeObjectRetain(v25);
    result = (void *)swift_bridgeObjectRetain(*((_QWORD *)&v31 + 1));
  }
  v28 = v26 + 2;
  if (v28 >= v18)
  {
LABEL_26:
    result = (void *)swift_release(v8);
    v3 = v29;
    goto LABEL_28;
  }
  v27 = *(_QWORD *)(v30 + 8 * v28);
  if (v27)
  {
    v14 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v14 >= v18)
      goto LABEL_26;
    v27 = *(_QWORD *)(v30 + 8 * v14);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_16CDD0()
{
  return sub_16CDE8(&qword_1F77D8);
}

id sub_16CDDC()
{
  return sub_16CDE8(&qword_1F77E0);
}

id sub_16CDE8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_5EDC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16CF80()
{
  return sub_16E1D0(&qword_1F1D78);
}

void *sub_16CF8C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_5EDC(&qword_1F1D58);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_16D118()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_5EDC(&qword_1F1D60);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    swift_bridgeObjectRetain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_16D2B8()
{
  sub_16D2D0(&qword_1F1D68);
}

void sub_16D2C4()
{
  sub_16D2D0(&qword_1F1D70);
}

void sub_16D2D0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  _QWORD __dst[70];

  v2 = v1;
  sub_5EDC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
    swift_release(v3);
LABEL_28:
    *v2 = v5;
    return;
  }
  v24 = v2;
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 552 * v16;
    v18 = (const void *)(*(_QWORD *)(v3 + 48) + 552 * v16);
    memcpy(__dst, v18, 0x221uLL);
    v19 = 8 * v16;
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    memmove((void *)(*(_QWORD *)(v5 + 48) + v17), v18, 0x221uLL);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v19) = v20;
    sub_6100(__dst);
    swift_bridgeObjectRetain(v20);
  }
  v23 = v21 + 2;
  if (v23 >= v14)
  {
LABEL_26:
    swift_release(v3);
    v2 = v24;
    goto LABEL_28;
  }
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

void *sub_16D4C0()
{
  return sub_16D4CC(&qword_1F7720);
}

void *sub_16D4CC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;

  v2 = v1;
  sub_5EDC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v22 = __clz(__rbit64(v20));
    v13 = (v20 - 1) & v20;
    v16 = v22 + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16D650()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  v1 = v0;
  sub_5EDC(&qword_1F7728);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v23 = __clz(__rbit64(v21));
    v12 = (v21 - 1) & v21;
    v15 = v23 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16D7E0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  _QWORD __dst[70];

  v1 = v0;
  sub_5EDC(&qword_1F3DD0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v22 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 552 * v15;
    memcpy(__dst, (const void *)(*(_QWORD *)(v2 + 56) + 552 * v15), 0x221uLL);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    memcpy((void *)(*(_QWORD *)(v4 + 56) + v18), __dst, 0x221uLL);
    result = sub_6100(__dst);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v22;
    goto LABEL_28;
  }
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_16D9C8()
{
  return sub_16C604(&qword_1F76D8, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16D9DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_5EDC(&qword_1F7730);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v23 = *(_QWORD *)(v19 + 16);
    v22 = *(_QWORD *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v25 = v20;
    *(_BYTE *)(v25 + 8) = v21;
    *(_QWORD *)(v25 + 16) = v23;
    *(_QWORD *)(v25 + 24) = v22;
    *(_QWORD *)(v25 + 32) = v24;
    swift_bridgeObjectRetain(v22);
    result = (void *)swift_bridgeObjectRetain(v23);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16DBAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_5EDC(&qword_1F7738);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_16DD38()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  __int128 v34;
  __int128 v35;

  v1 = v0;
  sub_5EDC(&qword_1F7790);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      v9 = v31 + 1;
      if (v31 + 1 >= v13)
        goto LABEL_26;
      v32 = *(_QWORD *)(v6 + 8 * v9);
      if (!v32)
        break;
    }
LABEL_25:
    v12 = (v32 - 1) & v32;
    v15 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 112 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    v21 = *(_BYTE *)(v19 + 8);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = *(_BYTE *)(v19 + 24);
    v24 = *(_QWORD *)(v19 + 32);
    v26 = *(_QWORD *)(v19 + 48);
    v25 = *(_QWORD *)(v19 + 56);
    v27 = *(_QWORD *)(v19 + 64);
    v28 = *(_QWORD *)(v19 + 72);
    v34 = *(_OWORD *)(v19 + 80);
    v35 = *(_OWORD *)(v19 + 96);
    v29 = *(_BYTE *)(v19 + 40);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v30 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v30 = v20;
    *(_BYTE *)(v30 + 8) = v21;
    *(_QWORD *)(v30 + 16) = v22;
    *(_BYTE *)(v30 + 24) = v23;
    *(_QWORD *)(v30 + 32) = v24;
    *(_BYTE *)(v30 + 40) = v29;
    *(_QWORD *)(v30 + 48) = v26;
    *(_QWORD *)(v30 + 56) = v25;
    *(_QWORD *)(v30 + 64) = v27;
    *(_QWORD *)(v30 + 72) = v28;
    *(_OWORD *)(v30 + 80) = v34;
    *(_OWORD *)(v30 + 96) = v35;
    sub_40554(v24, v29);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(*((_QWORD *)&v34 + 1));
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(*((_QWORD *)&v35 + 1));
    swift_bridgeObjectRetain(v26);
  }
  v33 = v31 + 2;
  if (v33 >= v13)
    goto LABEL_26;
  v32 = *(_QWORD *)(v6 + 8 * v33);
  if (v32)
  {
    v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v33 + 1;
    if (__OFADD__(v33, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v32 = *(_QWORD *)(v6 + 8 * v9);
    ++v33;
    if (v32)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_16DF84()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_5EDC(&qword_1F7748);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 24 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_BYTE *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v20 = *(_QWORD *)(v4 + 56) + 24 * v15;
    *(_QWORD *)v20 = v17;
    *(_BYTE *)(v20 + 8) = v18;
    *(_QWORD *)(v20 + 16) = v19;
    result = (void *)swift_bridgeObjectRetain(v19);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16E140()
{
  return sub_16E374(&qword_1F14B8);
}

void *sub_16E14C()
{
  return sub_16C604(&qword_1F76A0, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16E160()
{
  return sub_16C604(&qword_1F76A8, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16E174()
{
  return sub_16C604(&qword_1F76B0, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16E188()
{
  return sub_16C604(&qword_1F76B8, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16E19C()
{
  return sub_16C604(&qword_1F76C0, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16E1B0()
{
  return sub_16C604(&qword_1F76C8, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16E1C4()
{
  return sub_16E1D0(&qword_1F7780);
}

void *sub_16E1D0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_5EDC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_26;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
        break;
    }
LABEL_25:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v21 = v19 + 2;
  if (v21 >= v14)
    goto LABEL_26;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16E368()
{
  return sub_16E374(&qword_1F7770);
}

void *sub_16E374(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v2 = v1;
  sub_5EDC(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v18);
    ++v10;
    if (!v19)
    {
      v10 = v18 + 1;
      if (v18 + 1 >= v14)
        goto LABEL_26;
      v19 = *(_QWORD *)(v7 + 8 * v10);
      if (!v19)
        break;
    }
LABEL_25:
    v13 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_12:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v16);
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v16) = v17;
    result = (void *)swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 2;
  if (v20 >= v14)
    goto LABEL_26;
  v19 = *(_QWORD *)(v7 + 8 * v20);
  if (v19)
  {
    v10 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v19 = *(_QWORD *)(v7 + 8 * v10);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_16E50C()
{
  return sub_16C604(&qword_1F76D0, (uint64_t (*)(_BYTE *, unint64_t))sub_26DB8);
}

void *sub_16E520()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for TabiPackage(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EDC(&qword_1F77B0);
  v5 = *v0;
  v6 = static _DictionaryStorage.copy(original:)(*v0);
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
  {
    result = (void *)swift_release(v5);
LABEL_28:
    *v1 = v7;
    return result;
  }
  v26 = v1;
  result = (void *)(v6 + 64);
  v9 = (unint64_t)((1 << *(_BYTE *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9)
    result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  v27 = v5 + 64;
  v11 = 0;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v5 + 16);
  v12 = 1 << *(_BYTE *)(v5 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v5 + 64);
  v28 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    v23 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v23);
    ++v11;
    if (!v24)
    {
      v11 = v23 + 1;
      if (v23 + 1 >= v28)
        goto LABEL_26;
      v24 = *(_QWORD *)(v27 + 8 * v11);
      if (!v24)
        break;
    }
LABEL_25:
    v14 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v11 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v16);
    v19 = *v18;
    v20 = v18[1];
    v21 = *(_QWORD *)(v29 + 72) * v16;
    sub_26A5C(*(_QWORD *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for TabiPackage);
    v22 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
    *v22 = v19;
    v22[1] = v20;
    sub_A2618((uint64_t)v4, *(_QWORD *)(v7 + 56) + v21, type metadata accessor for TabiPackage);
    result = (void *)swift_bridgeObjectRetain(v20);
  }
  v25 = v23 + 2;
  if (v25 >= v28)
  {
LABEL_26:
    result = (void *)swift_release(v5);
    v1 = v26;
    goto LABEL_28;
  }
  v24 = *(_QWORD *)(v27 + 8 * v25);
  if (v24)
  {
    v11 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v11 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v11 >= v28)
      goto LABEL_26;
    v24 = *(_QWORD *)(v27 + 8 * v11);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_16E764()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_5EDC(&qword_1F77A8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_16E918()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_5EDC(&qword_1F77A0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_16EAD0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  v1 = v0;
  sub_5EDC(&qword_1F7768);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v25 = __clz(__rbit64(v23));
    v12 = (v23 - 1) & v23;
    v15 = v25 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)v19;
    LOBYTE(v19) = *(_BYTE *)(v19 + 8);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v21 = *(_QWORD *)(v4 + 56) + v18;
    *(_QWORD *)v21 = v20;
    *(_BYTE *)(v21 + 8) = v19;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_16EC70()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_5EDC(&qword_1F7798);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_16EE20(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for TimeZone(0);
  v44 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v43 = (result + 1) & v11;
      v12 = *(_QWORD *)(v44 + 72);
      v42 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v42(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_41754(&qword_1F12D0, (uint64_t (*)(uint64_t))&type metadata accessor for TimeZone, (uint64_t)&protocol conformance descriptor for TimeZone);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v43)
        {
          if (v21 >= v43 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            v25 = v24 + v15 * a1;
            v26 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || v25 >= v26 + v15)
            {
              swift_arrayInitWithTakeFrontToBack(v25, v26, 1, v4);
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront(v25);
            }
            v27 = *(_QWORD *)(a2 + 56);
            v28 = type metadata accessor for Calendar(0);
            v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72);
            v30 = v29 * a1;
            result = v27 + v29 * a1;
            v31 = v29 * v10;
            v32 = v27 + v29 * v10;
            v33 = v32 + v29;
            if (v30 < v31 || result >= v33)
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v32, 1, v28);
              a1 = v10;
              v13 = v17;
            }
            else
            {
              a1 = v10;
              v13 = v17;
              if (v30 != v31)
              {
                result = swift_arrayInitWithTakeBackToFront(result);
                v13 = v17;
                a1 = v10;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v43 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
LABEL_5:
        v10 = (v10 + 1) & v13;
        v12 = v15;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v36 = *v35;
    v37 = (-1 << a1) - 1;
  }
  else
  {
    v35 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v37 = *v35;
    v36 = (-1 << a1) - 1;
  }
  *v35 = v37 & v36;
  v38 = *(_QWORD *)(a2 + 16);
  v39 = __OFSUB__(v38, 1);
  v40 = v38 - 1;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v40;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_16F0F4(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            result = v15 + 384 * v3;
            v16 = (const void *)(v15 + 384 * v6);
            if (384 * v3 < (uint64_t)(384 * v6)
              || result >= (unint64_t)v16 + 384
              || (v17 = v3 == v6, v3 = v6, !v17))
            {
              result = (unint64_t)memmove((void *)result, v16, 0x180uLL);
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_16F2A0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_BYTE *)(v15 + v3);
            v17 = (_BYTE *)(v15 + v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_16F434(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            result = v15 + 72 * v3;
            v16 = (const void *)(v15 + 72 * v6);
            if (72 * v3 < (uint64_t)(72 * v6) || result >= (unint64_t)v16 + 72 || (v17 = v3 == v6, v3 = v6, !v17))
            {
              result = (unint64_t)memmove((void *)result, v16, 0x48uLL);
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_16F5E0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = *(_QWORD *)(a2 + 48);
        v10 = (_QWORD *)(v9 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v10);
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            v14 = (_QWORD *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1)
              *v14 = *v10;
            v15 = *(_QWORD *)(a2 + 56);
            v16 = (_OWORD *)(v15 + 16 * v3);
            v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v16 >= v17 + 1))
            {
              *v16 = *v17;
              v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_16F778(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v37 = (result + 1) & v11;
      v12 = *(_QWORD *)(v38 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v36(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_41754(&qword_1F1168, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v37)
        {
          if (v21 >= v37 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25, 1, v4);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = (_OWORD *)(v26 + 16 * a1);
            v28 = (_OWORD *)(v26 + 16 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= v28 + 1))
            {
              *v27 = *v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v37 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v29;
    v31 = (-1 << a1) - 1;
  }
  else
  {
    v29 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v31 = *v29;
    v30 = (-1 << a1) - 1;
  }
  *v29 = v31 & v30;
  v32 = *(_QWORD *)(a2 + 16);
  v33 = __OFSUB__(v32, 1);
  v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_16FA18(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v6);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), *v12);
        v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            v16 = (_QWORD *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1)
              *v16 = *v12;
            v17 = *(_QWORD *)(a2 + 56);
            v18 = (__int128 *)(v17 + 48 * v3);
            v19 = (__int128 *)(v17 + 48 * v6);
            if (v3 != v6 || (v3 = v6, v18 >= v19 + 3))
            {
              v9 = *v19;
              v10 = v19[2];
              v18[1] = v19[1];
              v18[2] = v10;
              *v18 = v9;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_16FBC0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_OWORD *)(v17 + 16 * v3);
          v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_16FD94(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for TimeZone(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_390F8(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for Calendar(0);
        return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 40))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, a1, v22);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_16B04C();
      goto LABEL_7;
    }
    sub_159A6C(v17, a3 & 1);
    v24 = sub_390F8(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_170C88(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void *sub_16FF1C(const void *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  void *result;
  unint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_39228(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_16B32C();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return memcpy((void *)(v16[7] + 384 * v10), a1, 0x179uLL);
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_QWORD *)(v16[6] + 8 * v10) = a2;
    result = memcpy((void *)(v16[7] + 384 * v10), a1, 0x179uLL);
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_159E64(v13, a3 & 1);
  v18 = sub_39228(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    v10 = v18;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return memcpy((void *)(v16[7] + 384 * v10), a1, 0x179uLL);
    goto LABEL_11;
  }
LABEL_15:
  result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_170074(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v4 = v3;
  v8 = *v3;
  v10 = sub_39228(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_16E1D0(&qword_1F1D28);
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    v19 = 8 * v10;
    *(_QWORD *)(v16[6] + v19) = a2;
    *(_QWORD *)(v16[7] + v19) = a1;
    v20 = v16[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v16[2] = v22;
      return result;
    }
    goto LABEL_14;
  }
  sub_1609B8(result, a3 & 1, &qword_1F1D28);
  result = sub_39228(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_1701BC(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v7 = a2 & 1;
  v8 = *v3;
  v10 = sub_3933C(a2 & 1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_16E374(&qword_1F1D20);
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = v7;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_160C74(result, a3 & 1, &qword_1F1D20);
  result = sub_3933C(v7);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Book.MediaType);
  __break(1u);
  return result;
}

uint64_t sub_170300(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v4 = v3;
  v8 = *v3;
  v10 = sub_39228(a2);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_16BAEC();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_171280((uint64_t)a1, v16[7] + 80 * v10);
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_QWORD *)(v16[6] + 8 * v10) = a2;
    v18 = (_OWORD *)(v16[7] + 80 * v10);
    *v18 = *a1;
    v19 = a1[1];
    v20 = a1[2];
    v21 = a1[4];
    v18[3] = a1[3];
    v18[4] = v21;
    v18[1] = v19;
    v18[2] = v20;
    v22 = v16[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v16[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_15B368(result, a3 & 1);
  result = sub_39228(a2);
  if ((v14 & 1) == (v17 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      return sub_171280((uint64_t)a1, v16[7] + 80 * v10);
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_170460(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_170478(a1, a2, a3, a4, &qword_1F77E8);
}

uint64_t sub_17046C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_170478(a1, a2, a3, a4, &qword_1F77D0);
}

uint64_t sub_170478(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD **v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v7 = (_QWORD **)v5;
  v29 = a1;
  v30 = a2;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v5;
  v16 = sub_39574(a3);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_14;
  }
  v20 = v15;
  v21 = v14[3];
  if (v21 >= v19 && (a4 & 1) != 0)
  {
LABEL_7:
    v22 = *v7;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = (uint64_t *)(v22[7] + 16 * v16);
      v24 = *v23;
      swift_bridgeObjectRelease(v23[1]);
      result = swift_bridgeObjectRelease(v24);
      v26 = v30;
      *v23 = v29;
      v23[1] = v26;
      return result;
    }
    goto LABEL_11;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    sub_16CB88(a5);
    goto LABEL_7;
  }
  sub_15D8B4(v19, a4 & 1, a5);
  v27 = sub_39574(a3);
  if ((v20 & 1) != (v28 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v16 = v27;
  v22 = *v7;
  if ((v20 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  return sub_170DD8(v16, (uint64_t)v13, v29, v30, v22);
}

uint64_t sub_1705F4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  char v24;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  v14 = sub_39A20(a4);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      v20 = *v6;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7] + 24 * v14;
        result = swift_bridgeObjectRelease();
        *(_QWORD *)v21 = a1;
        *(_BYTE *)(v21 + 8) = a2 & 1;
        *(_QWORD *)(v21 + 16) = a3;
        return result;
      }
      return sub_170EF4(v14, a4, a1, a2 & 1, a3, v20);
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      sub_16DF84();
      goto LABEL_7;
    }
    sub_15FE18(v17, a5 & 1);
    v23 = sub_39A20(a4);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v6;
      if ((v18 & 1) != 0)
        goto LABEL_8;
      return sub_170EF4(v14, a4, a1, a2 & 1, a3, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionType);
  __break(1u);
  return result;
}

void sub_170740(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_39064(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_16E764();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1619D4(v15, a4 & 1);
  v20 = sub_39064(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_17089C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;

  v6 = v5;
  v12 = *v5;
  v14 = sub_39064(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_16E918();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a3;
    v24[1] = a4;
    v25 = (_QWORD *)(v20[7] + 16 * v14);
    *v25 = a1;
    v25[1] = a2;
    v26 = v20[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v20[2] = v28;
      swift_bridgeObjectRetain(a4);
      return;
    }
    goto LABEL_14;
  }
  sub_161CE8(v17, a5 & 1);
  v22 = sub_39064(a3, a4);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

uint64_t sub_170A10(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_39228(a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_9:
    v19 = a2 & 1;
    v20 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
      v21 = v20[7] + 16 * v12;
      *(_QWORD *)v21 = a1;
      *(_BYTE *)(v21 + 8) = v19;
      return result;
    }
    v20[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v20[6] + 8 * v12) = a3;
    v22 = v20[7] + 16 * v12;
    *(_QWORD *)v22 = a1;
    *(_BYTE *)(v22 + 8) = v19;
    v23 = v20[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v20[2] = v25;
      return result;
    }
    goto LABEL_14;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)sub_16EAD0();
    goto LABEL_9;
  }
  sub_16200C(result, a4 & 1);
  result = sub_39228(a3);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = result;
    goto LABEL_9;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_170B4C(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v7 = a2 & 1;
  v8 = *v3;
  v10 = sub_393D0(a2 & 1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)sub_16E374(&qword_1F14B8);
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = v7;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  sub_160224(result, a3 & 1);
  result = sub_393D0(v7);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Methodology);
  __break(1u);
  return result;
}

uint64_t sub_170C88(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for TimeZone(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for Calendar(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a3, v11);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

unint64_t sub_170D48(unint64_t result, char a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a4[6] + result) = a2 & 1;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

unint64_t sub_170D90(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  a4[(result >> 6) + 8] |= 1 << result;
  v4 = 8 * result;
  *(_QWORD *)(a4[6] + v4) = a2;
  *(_QWORD *)(a4[7] + v4) = a3;
  v5 = a4[2];
  v6 = __OFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
    __break(1u);
  else
    a4[2] = v7;
  return result;
}

uint64_t sub_170DD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

void *sub_170E7C(unint64_t a1, const void *a2, uint64_t a3, _QWORD *a4)
{
  void *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  result = memcpy((void *)(a4[6] + 552 * a1), a2, 0x221uLL);
  *(_QWORD *)(a4[7] + 8 * a1) = a3;
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

unint64_t sub_170EF4(unint64_t result, char a2, uint64_t a3, char a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  a6[(result >> 6) + 8] |= 1 << result;
  *(_BYTE *)(a6[6] + result) = a2;
  v6 = a6[7] + 24 * result;
  *(_QWORD *)v6 = a3;
  *(_BYTE *)(v6 + 8) = a4 & 1;
  *(_QWORD *)(v6 + 16) = a5;
  v7 = a6[2];
  v8 = __OFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
    __break(1u);
  else
    a6[2] = v9;
  return result;
}

uint64_t sub_170F4C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PersonalizationMetadataRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for PostHydrationFilteringCandidateMetadata(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for PostHydrationFilteringCandidateMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)(a2 + 85);
  *(_OWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for PostHydrationFilteringCandidateMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)(a2 + 85);
  *(_OWORD *)(a1 + 72) = v12;
  return a1;
}

__n128 initializeWithTake for PostHydrationFilteringCandidateMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 77) = *(_OWORD *)(a2 + 77);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for PostHydrationFilteringCandidateMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)(a2 + 85);
  return a1;
}

uint64_t getEnumTagSinglePayload for PostHydrationFilteringCandidateMetadata(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 93))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PostHydrationFilteringCandidateMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 92) = 0;
    *(_DWORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 93) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 93) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PostHydrationFilteringCandidateMetadata()
{
  return &type metadata for PostHydrationFilteringCandidateMetadata;
}

uint64_t type metadata accessor for BookRecommendationPostHydrationFilteringService()
{
  return objc_opt_self(_TtC20BooksPersonalization47BookRecommendationPostHydrationFilteringService);
}

uint64_t method lookup function for BookRecommendationPostHydrationFilteringService(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BookRecommendationPostHydrationFilteringService);
}

uint64_t sub_171280(uint64_t a1, uint64_t a2)
{
  assignWithTake for ScoredBook(a2, a1);
  return a2;
}

_QWORD *sub_1712BC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  const void *v2;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  char v11;
  char v12;
  unsigned __int8 v14;
  _BYTE v15[545];
  _BYTE v16[552];
  uint64_t __dst[69];

  v4 = *a1;
  memcpy(__dst, v2, 0x221uLL);
  if (LOBYTE(__dst[1]))
    v5 = 0x6F6F626F69647561;
  else
    v5 = 0x6B6F6F6265;
  if (LOBYTE(__dst[1]))
    v6 = 0xE90000000000006BLL;
  else
    v6 = 0xE500000000000000;
  if (v4)
    v7 = 0x6F6F626F69647561;
  else
    v7 = 0x6B6F6F6265;
  if (v4)
    v8 = 0xE90000000000006BLL;
  else
    v8 = 0xE500000000000000;
  if (v5 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
    goto LABEL_21;
  }
  v10 = __dst[4];
  v11 = __dst[5];
  v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
LABEL_21:
    memcpy(v16, v2, 0x221uLL);
    AuthorRecommendationSource.id.getter(v16);
    sub_41300((uint64_t)v16, a2, &qword_1F5C28);
    return sub_6100(__dst);
  }
  if ((v11 & 1) != 0)
  {
    sub_117FCC(v16);
  }
  else
  {
    memcpy(v15, v2, sizeof(v15));
    v14 = v4;
    sub_171438(v10, &v14, __dst[0], 0, v16);
    AuthorRecommendationSource.id.getter(v16);
  }
  return (_QWORD *)sub_41300((uint64_t)v16, a2, &qword_1F5C28);
}

void *sub_171438@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v47;
  _QWORD __src[69];
  _BYTE v49[392];

  v6 = *a2;
  v7 = *(unsigned __int8 *)(v5 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v29 = *(_QWORD *)(v5 + 32);
  v31 = *(_BYTE *)(v5 + 56);
  v41 = *(_BYTE *)(v5 + 40);
  v42 = *(_BYTE *)(v5 + 72);
  v36 = *(_QWORD *)(v5 + 88);
  v37 = *(_QWORD *)(v5 + 80);
  v10 = *(_QWORD *)(v5 + 104);
  v34 = *(_QWORD *)(v5 + 112);
  v35 = *(_QWORD *)(v5 + 96);
  v32 = *(_QWORD *)(v5 + 48);
  v33 = *(_QWORD *)(v5 + 120);
  v11 = *(_QWORD *)(v5 + 136);
  v43 = *(_QWORD *)(v5 + 64);
  v44 = *(_QWORD *)(v5 + 128);
  v12 = *(_QWORD *)(v5 + 144);
  sub_41300(v5 + 152, (uint64_t)v49, &qword_1F2D68);
  v13 = *(_QWORD *)(v5 + 536);
  if (v6)
    v14 = 0x6F6F626F69647561;
  else
    v14 = 0x6B6F6F6265;
  if (v6)
    v15 = 0xE90000000000006BLL;
  else
    v15 = 0xE500000000000000;
  v40 = v7;
  if (v7)
    v16 = 0x6F6F626F69647561;
  else
    v16 = 0x6B6F6F6265;
  if (v7)
    v17 = 0xE90000000000006BLL;
  else
    v17 = 0xE500000000000000;
  v45 = v13;
  if (v14 == v16 && v15 == v17)
  {
    swift_bridgeObjectRelease_n(v15, 2);
LABEL_17:
    v19 = v8;
    v20 = v9;
    a3 = v29;
    v30 = v32;
    v28 = v31;
    goto LABEL_19;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
    goto LABEL_17;
  v40 = v6;
  v41 = a4 & 1;
  v19 = v9;
  v20 = v8;
  v30 = v43;
  v28 = v42;
  v43 = v32;
  v42 = v31;
LABEL_19:
  v21 = v11;
  v22 = v44;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  if (v44 >> 1 == 0xFFFFFFFF)
  {
    v23 = v45;
    swift_bridgeObjectRetain(v45);
    v24 = v12;
    v25 = 12;
  }
  else
  {
    __src[0] = v37;
    __src[1] = v36;
    __src[2] = v35;
    __src[3] = v10;
    __src[4] = v34;
    __src[5] = v33;
    __src[6] = v44;
    __src[7] = v21;
    __src[8] = v12;
    sub_61A8(v37, v36, v35, v10, v34, v33, v44);
    sub_61A8(v37, v36, v35, v10, v34, v33, v44);
    swift_bridgeObjectRetain(v45);
    sub_F93F4();
    sub_62CC(v37, v36, v35, v10, v34, v33, v44);
    v24 = v12;
    v25 = v47;
    v22 = v44;
    v23 = v45;
  }
  __src[0] = a1;
  LOBYTE(__src[1]) = v40;
  __src[2] = v8;
  __src[3] = v9;
  __src[4] = a3;
  LOBYTE(__src[5]) = v41;
  __src[6] = v30;
  LOBYTE(__src[7]) = v28;
  __src[8] = v43;
  LOBYTE(__src[9]) = v42;
  __src[10] = v37;
  __src[11] = v36;
  __src[12] = v35;
  __src[13] = v10;
  __src[14] = v34;
  __src[15] = v33;
  __src[16] = v22;
  __src[17] = v21;
  __src[18] = v24;
  sub_41300((uint64_t)v49, (uint64_t)&__src[19], &qword_1F2D68);
  __src[67] = v23;
  LOBYTE(__src[68]) = v25;
  return memcpy(a5, __src, 0x221uLL);
}

uint64_t sub_1717E4()
{
  uint64_t result;

  sub_6789C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD00000000000001BLL, 0x80000000001A3720);
  qword_224628 = result;
  return result;
}

uint64_t sub_17184C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_224630);
  sub_5216C(v0, (uint64_t)qword_224630);
  if (qword_1F0178 != -1)
    swift_once(&qword_1F0178, sub_1717E4);
  return Logger.init(_:)((id)qword_224628);
}

uint64_t sub_1718CC(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;

  *(_QWORD *)(v3 + 3336) = v2;
  v6 = type metadata accessor for SeedBasedRecommendationRequest(0);
  *(_QWORD *)(v3 + 3344) = v6;
  *(_QWORD *)(v3 + 3352) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 3360) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 3368) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 3376) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 3384) = swift_task_alloc(v9);
  v10 = swift_task_alloc(v9);
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v3 + 3400) = *(_OWORD *)a1;
  *(_QWORD *)(v3 + 3392) = v10;
  *(_OWORD *)(v3 + 3416) = v11;
  *(_BYTE *)(v3 + 3512) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(v3 + 3513) = *(_BYTE *)(a1 + 33);
  *(_QWORD *)(v3 + 3432) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v3 + 3514) = *(_BYTE *)(a1 + 48);
  memcpy((void *)(v3 + 16), a2, 0x440uLL);
  return swift_task_switch(sub_1719CC, 0, 0);
}

uint64_t sub_1719CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  uint64_t v26;
  int *v27;
  uint64_t v28;

  UUID.init()(a1);
  if (qword_1F0180 != -1)
    swift_once(&qword_1F0180, sub_17184C);
  v2 = v1[424];
  v3 = v1[423];
  v4 = v1[421];
  v5 = v1[420];
  v6 = type metadata accessor for Logger(0);
  v1[430] = sub_5216C(v6, (uint64_t)qword_224630);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[431] = v7;
  v8 = v7(v3, v2, v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v1[423];
  v13 = v1[421];
  if (v11)
  {
    v26 = v1[420];
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v28 = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = UUID.uuidString.getter(v15);
    v1[416] = sub_9DA98(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 416, v1 + 417, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v18(v12, v26);
    _os_log_impl(&dword_0, v9, v10, "fetching seed books for %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v18(v1[423], v1[420]);
  }

  v1[432] = v18;
  v19 = (_QWORD *)v1[417];
  v20 = v1[55];
  v21 = v19[15];
  v22 = v19[16];
  sub_49F4(v19 + 12, v21);
  memcpy(v1 + 138, v1 + 2, 0x440uLL);
  v23 = *(int **)(v22 + 8);
  v27 = (int *)((char *)v23 + *v23);
  v24 = (_QWORD *)swift_task_alloc(v23[1]);
  v1[433] = v24;
  *v24 = v1;
  v24[1] = sub_171C24;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v27)(v1 + 138, v20, v21, v22);
}

uint64_t sub_171C24(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 3464);
  *(_QWORD *)(v3 + 3472) = a1;
  *(_QWORD *)(v3 + 3480) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1722D4;
  else
    v5 = sub_171C94;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_171C94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  int *v28;
  uint64_t v29;
  _QWORD *v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43[2];

  v1 = (_QWORD *)(v0 + 3280);
  v2 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 3448))(*(_QWORD *)(v0 + 3376), *(_QWORD *)(v0 + 3392), *(_QWORD *)(v0 + 3360));
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 3376);
    v39 = *(_QWORD *)(v0 + 3360);
    v41 = *(void (**)(uint64_t, uint64_t))(v0 + 3456);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v43[0] = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = UUID.uuidString.getter(v7);
    *(_QWORD *)(v0 + 3320) = sub_9DA98(v8, v9, v43);
    v1 = (_QWORD *)(v0 + 3280);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3320, v0 + 3328, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    v41(v5, v39);
    _os_log_impl(&dword_0, v3, v4, "fetched seed books for %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 3456))(*(_QWORD *)(v0 + 3376), *(_QWORD *)(v0 + 3360));
  }

  v10 = *(_QWORD *)(v0 + 3480);
  v11 = *(_BYTE *)(v0 + 41);
  sub_49F4((_QWORD *)(*(_QWORD *)(v0 + 3336) + 56), *(_QWORD *)(*(_QWORD *)(v0 + 3336) + 80));
  LOBYTE(v43[0]) = v11;
  sub_1422B8((unsigned __int8 *)v43, (uint64_t)v1);
  if (v10)
  {
    (*(void (**)(_QWORD, _QWORD))(v0 + 3456))(*(_QWORD *)(v0 + 3392), *(_QWORD *)(v0 + 3360));
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v0 + 3384);
    v13 = *(_QWORD *)(v0 + 3376);
    v14 = *(_QWORD *)(v0 + 3352);
    swift_task_dealloc(*(_QWORD *)(v0 + 3392));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 3472);
    v37 = *(_BYTE *)(v0 + 3514);
    v36 = *(_QWORD *)(v0 + 3432);
    v34 = *(_BYTE *)(v0 + 3512);
    v35 = *(_BYTE *)(v0 + 3513);
    v33 = *(_QWORD *)(v0 + 3424);
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 3448);
    v32 = *(_QWORD *)(v0 + 3416);
    v17 = *(_QWORD *)(v0 + 3408);
    v18 = *(_QWORD *)(v0 + 3400);
    v19 = *(_QWORD *)(v0 + 3392);
    v20 = *(_QWORD *)(v0 + 3360);
    v21 = *(_QWORD *)(v0 + 3352);
    v22 = *(int **)(v0 + 3344);
    v42 = *(_QWORD *)(v0 + 3304);
    v38 = *(_QWORD *)(v0 + 3312);
    sub_49F4(v1, v42);
    v23 = sub_2807C(v16);
    v24 = *(_QWORD *)(v0 + 392);
    v25 = *(_QWORD *)(v0 + 400);
    v31(v21, v19, v20);
    *(_QWORD *)(v21 + v22[5]) = v23;
    v26 = (_QWORD *)(v21 + v22[6]);
    *v26 = v18;
    v26[1] = v17;
    v27 = (_QWORD *)(v21 + v22[7]);
    *v27 = v32;
    v27[1] = v33;
    *(_BYTE *)(v21 + v22[8]) = v34;
    *(_BYTE *)(v21 + v22[9]) = v35;
    *(_QWORD *)(v21 + v22[10]) = v36;
    *(_BYTE *)(v21 + v22[11]) = v37;
    *(_QWORD *)(v21 + v22[12]) = &_swiftEmptySetSingleton;
    *(_QWORD *)(v21 + v22[13]) = v24;
    *(_QWORD *)(v21 + v22[14]) = v25;
    memcpy((void *)(v0 + 2192), (const void *)(v0 + 16), 0x440uLL);
    v28 = *(int **)(v38 + 8);
    v29 = v28[1];
    v40 = (int *)((char *)v28 + *v28);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v33);
    v30 = (_QWORD *)swift_task_alloc(v29);
    *(_QWORD *)(v0 + 3488) = v30;
    *v30 = v0;
    v30[1] = sub_17203C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v40)(*(_QWORD *)(v0 + 3352), v0 + 2192, v42, v38);
  }
}

uint64_t sub_17203C(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = (*v2)[436];
  v3[437] = a1;
  v3[438] = v1;
  swift_task_dealloc(v4);
  sub_1724A8(v3[419]);
  if (v1)
    v5 = sub_172344;
  else
    v5 = sub_1720BC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1720BC()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD __dst[47];

  v1 = *(_QWORD *)(v0 + 3496);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    __dst[0] = _swiftEmptyArrayStorage;
    sub_342E4(0, v2, 0);
    v3 = _swiftEmptyArrayStorage;
    v4 = (_QWORD *)(v1 + 104);
    do
    {
      v26 = *(v4 - 9);
      v25 = *((_BYTE *)v4 - 64);
      v24 = *(v4 - 7);
      v23 = *((_BYTE *)v4 - 48);
      v5 = *(v4 - 5);
      v6 = *((_BYTE *)v4 - 32);
      v7 = *(v4 - 3);
      v22 = *(v4 - 2);
      v8 = *(v4 - 1);
      v9 = *v4;
      sub_40554(v5, v6);
      __dst[0] = v3;
      v10 = v3[2];
      v11 = v3[3];
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      if (v10 >= v11 >> 1)
      {
        sub_342E4(v11 > 1, v10 + 1, 1);
        v3 = (_QWORD *)__dst[0];
      }
      v3[2] = v10 + 1;
      v12 = &v3[10 * v10];
      v12[4] = v26;
      *((_BYTE *)v12 + 40) = v25;
      v12[6] = v24;
      *((_BYTE *)v12 + 56) = v23;
      v12[8] = v5;
      *((_BYTE *)v12 + 72) = v6;
      v12[10] = v7;
      v12[11] = v22;
      v12[12] = v8;
      v12[13] = v9;
      v4 += 14;
      --v2;
    }
    while (v2);
    v0 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = _swiftEmptyArrayStorage;
  }
  v13 = *(_QWORD *)(v0 + 3392);
  v14 = *(_QWORD *)(v0 + 3384);
  v15 = *(_QWORD *)(v0 + 3376);
  v16 = *(_QWORD *)(v0 + 3368);
  v17 = *(_QWORD *)(v0 + 3360);
  v18 = *(_QWORD *)(v0 + 3352);
  sub_62F8((_QWORD *)(v0 + 3280));
  memcpy(__dst, (const void *)(v0 + 104), 0x16BuLL);
  sub_605D0(v0 + 104);
  v19 = sub_73BB0(v3, __dst);
  swift_bridgeObjectRelease();
  sub_60AF8(v0 + 104);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v13, v17);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
}

uint64_t sub_1722D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(v0 + 3456))(*(_QWORD *)(v0 + 3392), *(_QWORD *)(v0 + 3360));
  v1 = *(_QWORD *)(v0 + 3384);
  v2 = *(_QWORD *)(v0 + 3376);
  v3 = *(_QWORD *)(v0 + 3352);
  swift_task_dealloc(*(_QWORD *)(v0 + 3392));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_172344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 3368) + 8))(*(_QWORD *)(v0 + 3392), *(_QWORD *)(v0 + 3360));
  sub_62F8((_QWORD *)(v0 + 3280));
  v1 = *(_QWORD *)(v0 + 3384);
  v2 = *(_QWORD *)(v0 + 3376);
  v3 = *(_QWORD *)(v0 + 3352);
  swift_task_dealloc(*(_QWORD *)(v0 + 3392));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1723C4(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1F78BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  return sub_1718CC(a1, a2);
}

uint64_t sub_172424()
{
  uint64_t result;

  result = sub_3CBAC((uint64_t)&off_1D5F10);
  qword_1F77F8 = result;
  return result;
}

double static Set<>.local.getter()
{
  double result;

  if (qword_1F0188 != -1)
    swift_once(&qword_1F0188, sub_172424);
  *(_QWORD *)&result = swift_bridgeObjectRetain(qword_1F77F8).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for SeedBasedSuggestionsService()
{
  return objc_opt_self(_TtC20BooksPersonalization27SeedBasedSuggestionsService);
}

uint64_t sub_1724A8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SeedBasedRecommendationRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_BYTE *MoreFromYourAuthorsOptions.init(mediaType:seedBooks:excludedStoreIDs:hydratedBooksFetchLimit:)@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_BYTE *)a5 = *result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = a4;
  return result;
}

uint64_t MoreFromYourAuthorsOptions.hydratedBooksFetchLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t initializeWithCopy for MoreFromYourAuthorsOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for MoreFromYourAuthorsOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for MoreFromYourAuthorsOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for MoreFromYourAuthorsOptions()
{
  return &type metadata for MoreFromYourAuthorsOptions;
}

uint64_t sub_17260C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  _QWORD v25[69];
  uint64_t v26;
  char v27;
  _BYTE v28[7];
  __int128 v29;
  uint64_t v30;
  char v31;
  _BYTE v32[7];
  uint64_t v33;
  char v34;
  _BYTE v35[7];
  uint64_t v36;
  char v37;
  _BYTE v38[472];
  uint64_t v39;
  char v40;

  v7 = *(_QWORD *)a1;
  v8 = *(_BYTE *)(a1 + 8);
  *(_DWORD *)v28 = *(_DWORD *)(a1 + 9);
  *(_DWORD *)&v28[3] = *(_DWORD *)(a1 + 12);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_BYTE *)(a1 + 40);
  *(_DWORD *)v32 = *(_DWORD *)(a1 + 41);
  *(_DWORD *)&v32[3] = *(_DWORD *)(a1 + 44);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_BYTE *)(a1 + 56);
  *(_DWORD *)&v35[3] = *(_DWORD *)(a1 + 60);
  *(_DWORD *)v35 = *(_DWORD *)(a1 + 57);
  v13 = *(_QWORD *)(a1 + 64);
  v14 = *(_BYTE *)(a1 + 72);
  v26 = v7;
  v27 = v8;
  v29 = *(_OWORD *)(a1 + 16);
  v30 = v9;
  v31 = v10;
  v33 = v11;
  v34 = v12;
  v36 = v13;
  v37 = v14;
  memcpy(v38, (const void *)(a1 + 73), sizeof(v38));
  LOBYTE(v25[0]) = *(_BYTE *)(a2 + *(int *)(type metadata accessor for SeedBasedRecommendationRequest(0) + 32));
  sub_1712BC((unsigned __int8 *)v25, (uint64_t)&v39);
  sub_117F6C((uint64_t)&v39, (uint64_t)&v26);
  sub_117F6C((uint64_t)&v26, (uint64_t)&v39);
  if (sub_117FB4((uint64_t)&v39) != 1)
  {
    v15 = v8 & 1;
    if (v40)
      v16 = 0x6F6F626F69647561;
    else
      v16 = 0x6B6F6F6265;
    if (v40)
      v17 = 0xE90000000000006BLL;
    else
      v17 = 0xE500000000000000;
    if (v15)
      v18 = 0x6F6F626F69647561;
    else
      v18 = 0x6B6F6F6265;
    if (v15)
      v19 = 0xE90000000000006BLL;
    else
      v19 = 0xE500000000000000;
    if (v16 == v18 && v17 == v19)
    {
      sub_117F6C((uint64_t)&v26, (uint64_t)v25);
      sub_6100(v25);
      swift_bridgeObjectRelease_n(v17, 2);
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0);
      sub_117F6C((uint64_t)&v26, (uint64_t)v25);
      sub_6100(v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
        v21 = v39;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
        v24 = *a3;
        *a3 = 0x8000000000000000;
        sub_170A10(v7, v15, v21, isUniquelyReferenced_nonNull_native);
        *a3 = v24;
        swift_bridgeObjectRelease();
      }
    }
    sub_172868((uint64_t)&v26);
  }
  return sub_117F6C((uint64_t)&v26, a4);
}

uint64_t type metadata accessor for SeedBasedRecommendationRequestMapper()
{
  return objc_opt_self(_TtC20BooksPersonalization36SeedBasedRecommendationRequestMapper);
}

uint64_t sub_172868(uint64_t a1)
{
  sub_17294C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  return a1;
}

uint64_t sub_17294C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_62CC(a11, a12, a13, a14, a15, a16, a17);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void SuggestionsOptions.mediaType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

uint64_t SuggestionsOptions.maxRecommendationCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

__n128 SuggestionsOptions.init(userInfo:storeInfo:mediaType:allGenresAllowed:allowedSales:explicitAllowed:excludedStoreIDs:maxRecommendationCount:)@<Q0>(__n128 *a1@<X0>, unint64_t *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned __int8 a4@<W3>, unint64_t *a5@<X4>, unsigned __int8 a6@<W5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>)
{
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  __n128 result;

  v9 = *a2;
  v10 = a2[1];
  v11 = *a3;
  v12 = *a5;
  result = *a1;
  *a9 = *a1;
  a9[1].n128_u64[0] = v9;
  a9[1].n128_u64[1] = v10;
  a9[2].n128_u8[0] = v11;
  a9[2].n128_u8[1] = a4;
  a9[2].n128_u64[1] = v12;
  a9[3].n128_u8[0] = a6;
  a9[3].n128_u64[1] = a7;
  a9[4].n128_u64[0] = a8;
  return result;
}

uint64_t destroy for SuggestionsOptions(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for SuggestionsOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for SuggestionsOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for SuggestionsOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for SuggestionsOptions()
{
  return &type metadata for SuggestionsOptions;
}

void sub_172C10(uint64_t *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, char a5, double a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  char v14;
  double v15;
  uint64_t v16;
  double v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char v37;
  double v38;
  uint64_t v39;
  _QWORD *v40;
  double v41;
  unint64_t v42;
  unint64_t v43;
  char isUniquelyReferenced_nonNull_native;
  char v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  _QWORD *v65;
  double v66;
  unint64_t v67;
  double v68;

  v6 = a1[1];
  if (*(_QWORD *)(v6 + 16))
  {
    v12 = *a1;
    v13 = sub_398C4(0, 0);
    if ((v14 & 1) != 0)
    {
      v15 = (*(double *)(*(_QWORD *)(v6 + 56) + 8 * v13) + *(double *)(a2 + 352)) / (*(double *)(a2 + 352) + 1.0);
      if (v15 <= 0.0)
      {
        if (qword_1F0180 != -1)
          swift_once(&qword_1F0180, sub_17184C);
        v46 = type metadata accessor for Logger(0);
        v47 = sub_5216C(v46, (uint64_t)qword_224630);
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v48, v49))
        {
          v50 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v50 = 134217984;
          *(_QWORD *)&v60 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8, v50 + 4, v50 + 12);
          _os_log_impl(&dword_0, v48, v49, "received negative conditional score for %llu. ignoring", v50, 0xCu);
          swift_slowDealloc(v50, -1, -1);
        }

      }
      else
      {
        v16 = *a3;
        v17 = 0.0;
        if (*(_QWORD *)(*a3 + 16))
        {
          v18 = sub_39228(v12);
          if ((v19 & 1) != 0)
          {
            v20 = *(_QWORD *)(v16 + 56) + 80 * v18;
            v54 = *(unsigned __int8 *)(v20 + 8);
            v56 = *(_QWORD *)v20;
            v21 = *(_QWORD *)(v20 + 16);
            v22 = *(_QWORD *)(v20 + 32);
            v23 = *(_BYTE *)(v20 + 40);
            v24 = *(_QWORD *)(v20 + 48);
            v25 = *(_QWORD *)(v20 + 64);
            v26 = *(double *)(v20 + 72);
            LOBYTE(v60) = *(_BYTE *)(v20 + 24);
            v51 = v22;
            v52 = v21;
            sub_40554(v22, v23);
            swift_bridgeObjectRetain(v24);
            swift_bridgeObjectRetain(v25);
            if (v24)
            {
              v17 = v26;
              sub_173094(v56, v54, v52, v60, v51, v23, v24);
            }
          }
        }
        v27 = *a3;
        if (!*(_QWORD *)(*a3 + 16))
          goto LABEL_12;
        v28 = sub_39228(v12);
        if ((v29 & 1) == 0)
          goto LABEL_12;
        v30 = *(_QWORD *)(v27 + 56) + 80 * v28;
        v55 = *(unsigned __int8 *)(v30 + 8);
        v57 = *(_QWORD *)v30;
        v31 = *(_QWORD *)(v30 + 32);
        v32 = *(_BYTE *)(v30 + 40);
        v33 = *(_QWORD *)(v30 + 48);
        v53 = *(_QWORD *)(v30 + 16);
        v34 = *(_QWORD *)(v30 + 64);
        LOBYTE(v60) = *(_BYTE *)(v30 + 24);
        sub_40554(v31, v32);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v34);
        if (!v33
          || (swift_bridgeObjectRetain(v34), sub_173094(v57, v55, v53, v60, v31, v32, v33), !v34))
        {
LABEL_12:
          v34 = sub_53104((uint64_t)_swiftEmptyArrayStorage);
          swift_bridgeObjectRelease();
        }
        v35 = _swiftEmptyArrayStorage;
        if (*(_QWORD *)(v34 + 16))
        {
          swift_bridgeObjectRetain(v34);
          v36 = sub_393D0(0);
          if ((v37 & 1) != 0)
          {
            v35 = *(_QWORD **)(*(_QWORD *)(v34 + 56) + 8 * v36);
            swift_bridgeObjectRetain(v35);
          }
          swift_bridgeObjectRelease();
        }
        v58 = a5 & 1;
        v38 = v15 * a6;
        sub_6100(a4);
        v39 = swift_bridgeObjectRetain(v35);
        v40 = v35;
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
          v40 = sub_2FA78(0, v35[2] + 1, 1, v35);
        v41 = v38 + v17;
        v43 = v40[2];
        v42 = v40[3];
        if (v43 >= v42 >> 1)
          v40 = sub_2FA78((_QWORD *)(v42 > 1), v43 + 1, 1, v40);
        v40[2] = v43 + 1;
        memcpy(&v40[69 * v43 + 4], a4, 0x221uLL);
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
        sub_170B4C((uint64_t)v40, 0, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v60 = v12;
        BYTE8(v60) = v58;
        v61 = 0;
        v62 = 1;
        v63 = 0;
        v64 = -1;
        v65 = _swiftEmptyArrayStorage;
        v66 = v15;
        v67 = v34;
        v68 = v41;
        v45 = swift_isUniquelyReferenced_nonNull_native(*a3);
        v59 = *a3;
        *a3 = 0x8000000000000000;
        sub_170300(&v60, v12, v45);
        *a3 = v59;
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t type metadata accessor for BooksBackendPostScorer()
{
  return objc_opt_self(_TtC20BooksPersonalization22BooksBackendPostScorer);
}

uint64_t sub_173094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t result;

  if (a7)
  {
    sub_40568(a5, a6);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t BooksPersonalizationMetadataCache.__allocating_init(fetchService:subfolder:configurationService:)(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 152, 7);
  BooksPersonalizationMetadataCache.init(fetchService:subfolder:configurationService:)(a1, a2, a3, a4);
  return v9;
}

uint64_t sub_173138(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_173164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_177BE8(a1, (uint64_t)sub_177E2C, 0, isUniquelyReferenced_nonNull_native, &v8);
  v6 = v8;
  swift_bridgeObjectRelease();
  if (v2)
    swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1731E0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_224648);
  sub_5216C(v0, (uint64_t)qword_224648);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD000000000000021, 0x800000000019D190);
}

_QWORD *BooksPersonalizationMetadataCache.init(fetchService:subfolder:configurationService:)(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  void **v25;
  void **v26;
  uint64_t ObjCClassFromMetadata;
  id v28;
  NSString v29;
  NSString v30;
  id v31;
  id v32;
  id v33;
  NSURL *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  id v41;
  id v42;
  _QWORD *v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t inited;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  void *v63;
  void (*v64)(_BYTE *, uint64_t);
  uint64_t v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  _BYTE v72[40];
  uint64_t v73;
  void **v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _BYTE *v86;
  _BYTE *v87;
  _QWORD *v88;
  char v89[4];

  v5 = v4;
  v83 = a3;
  v79 = a2;
  v8 = *v4;
  v82 = type metadata accessor for NSPersistentStore.StoreType(0);
  v9 = *(_QWORD *)(v82 - 8);
  v10 = __chkstk_darwin(v82);
  v77 = &v72[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v80 = &v72[-v12];
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v78 = &v72[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = __chkstk_darwin(v15);
  v76 = &v72[-v18];
  v19 = __chkstk_darwin(v17);
  v86 = &v72[-v20];
  v21 = __chkstk_darwin(v19);
  v87 = &v72[-v22];
  __chkstk_darwin(v21);
  v24 = &v72[-v23];
  v88 = v5;
  v5[10] = 0;
  v25 = (void **)(v5 + 10);
  *(v25 - 8) = &dword_18 + 1;
  *(v25 - 7) = 0;
  v26 = v25 - 7;
  *(v25 - 6) = 0;
  v25[1] = 0;
  v25[2] = 0;
  v25[3] = (void *)0x4122750000000000;
  v85 = a1;
  sub_3DD40((uint64_t)a1, (uint64_t)(v25 + 4));
  v84 = a4;
  sub_3DD40((uint64_t)a4, (uint64_t)(v25 - 5));
  v81 = v8;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  v28 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v29 = String._bridgeToObjectiveC()();
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v28, "pathForResource:ofType:", v29, v30);

  if (v31)
  {
    v32 = objc_msgSend((id)objc_opt_self(NSURL), "fileURLWithPath:isDirectory:", v31, 1);

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v33 = objc_allocWithZone((Class)NSManagedObjectModel);
    URL._bridgeToObjectiveC()(v34);
    v36 = v35;
    v37 = objc_msgSend(v33, "initWithContentsOfURL:", v35);

    (*(void (**)(_BYTE *, uint64_t))(v14 + 8))(v24, v13);
    v38 = *v26;
    *v26 = v37;

  }
  v39 = *v26;
  if (!v39)
  {
    swift_bridgeObjectRelease(v83);
    v61 = v88;
    v62 = (void *)v88[4];
    if (!v62)
      goto LABEL_9;
    goto LABEL_8;
  }
  v73 = v13;
  v74 = v25;
  v75 = v9;
  v40 = objc_allocWithZone((Class)NSPersistentStoreCoordinator);
  v41 = v39;
  v42 = objc_msgSend(v40, "initWithManagedObjectModel:", v41);
  v43 = v88;
  v44 = (void *)v88[4];
  v88[4] = v42;
  v45 = v42;

  v46 = v43[12];
  v47 = v83;
  v43[11] = v79;
  v43[12] = v47;
  swift_bridgeObjectRelease(v46);
  v48 = v43[11];
  v49 = v43[12];
  swift_bridgeObjectRetain(v49);
  v50 = v87;
  static BooksPersonalizationMetadataCache.persistentStoreDirectory(subfolder:)(v48, v49, (uint64_t)v87);
  swift_bridgeObjectRelease(v49);
  v51 = v43[11];
  v52 = v43[12];
  swift_bridgeObjectRetain(v52);
  static BooksPersonalizationMetadataCache.recreatePersistentStoreDirectory(subfolder:)(v51, v52);
  swift_bridgeObjectRelease(v52);
  v53 = v86;
  URL.appendingPathComponent(_:)(0xD000000000000010);
  v54 = sub_5EDC(&qword_1F2EB8);
  inited = swift_initStackObject(v54, v89);
  *(_OWORD *)(inited + 16) = xmmword_18FC00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSInferMappingModelAutomaticallyOption);
  *(_QWORD *)(inited + 40) = v56;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMigratePersistentStoresAutomaticallyOption);
  *(_QWORD *)(inited + 64) = v57;
  *(_BYTE *)(inited + 72) = 1;
  v58 = sub_534C8(inited);
  v59 = v80;
  static NSPersistentStore.StoreType.sqlite.getter(v58);
  v60 = sub_91FCC(v58);
  v63 = (void *)NSPersistentStoreCoordinator.addPersistentStore(type:configuration:at:options:)(v59, 0, 0, v53, v60);
  (*(void (**)(_BYTE *, uint64_t))(v75 + 8))(v59, v82);

  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v60);
  v64 = *(void (**)(_BYTE *, uint64_t))(v14 + 8);
  v65 = v73;
  v64(v53, v73);
  v64(v50, v65);

  v61 = v88;
  v25 = v74;
  v62 = (void *)v88[4];
  if (v62)
  {
LABEL_8:
    v66 = objc_allocWithZone((Class)NSManagedObjectContext);
    v67 = v62;
    v68 = objc_msgSend(v66, "initWithConcurrencyType:", 1);
    objc_msgSend(v68, "setUndoManager:", 0);
    v69 = *v25;
    *v25 = v68;
    v70 = v68;

    objc_msgSend(v70, "setPersistentStoreCoordinator:", v67);
  }
LABEL_9:
  sub_62F8(v84);
  sub_62F8(v85);
  return v61;
}

uint64_t static BooksPersonalizationMetadataCache.persistentStoreDirectory(subfolder:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v14 = 1;
  v15 = objc_msgSend(v13, "URLsForDirectory:inDomains:", 13, 1);

  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v6);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, v16+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * (v17 - 1), v6);
    v14 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, v14, 1, v6);
  swift_bridgeObjectRelease(v16);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v19 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v19(a3, v12, v6);
    v27 = v3;
    v20 = sub_5EDC(&qword_1F7A08);
    v21 = String.init<A>(describing:)(&v27, v20);
    v23 = v22;
    URL.appendingPathComponent(_:)(v21);
    swift_bridgeObjectRelease(v23);
    v24 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v24(a3, v6);
    v19(a3, v9, v6);
    result = v26;
    if (a2)
    {
      v25 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0)
        v25 = v26 & 0xFFFFFFFFFFFFLL;
      if (v25)
      {
        URL.appendingPathComponent(_:)(v26);
        v24(a3, v6);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(a3, v9, v6);
      }
    }
  }
  return result;
}

unint64_t static BooksPersonalizationMetadataCache.persistentStoreFileName()()
{
  return 0xD000000000000010;
}

uint64_t static BooksPersonalizationMetadataCache.recreatePersistentStoreDirectory(subfolder:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t (*v13)(char *, uint64_t);
  id v14;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static BooksPersonalizationMetadataCache.persistentStoreDirectory(subfolder:)(a1, a2, (uint64_t)v7);
  v8 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v20 = 0;
  LODWORD(a1) = objc_msgSend(v8, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v10, 1, 0, &v20);

  v12 = v20;
  if ((_DWORD)a1)
  {
    v13 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    v14 = v20;
    return v13(v7, v4);
  }
  else
  {
    v16 = v20;
    v17 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v18);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_errorRelease(v17);
  }
}

uint64_t BooksPersonalizationMetadataCache.fetchPersonalizationMetadata(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = v1;
  return swift_task_switch(sub_174374, 0, 0);
}

uint64_t sub_174374()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  int *v13;

  v1 = v0[14];
  v2 = *(void **)(v1 + 80);
  v0[15] = v2;
  if (v2)
  {
    v3 = dword_1F7A1C;
    v4 = v2;
    v5 = (_QWORD *)swift_task_alloc(v3);
    v0[16] = v5;
    *v5 = v0;
    v5[1] = sub_174480;
    v7 = v0[13];
    v6 = (_QWORD *)v0[14];
    v5[282] = v6;
    v5[281] = v4;
    v5[280] = v7;
    v5[283] = *v6;
    return swift_task_switch(sub_174658, 0, 0);
  }
  else
  {
    sub_3DD40(v1 + 112, (uint64_t)(v0 + 2));
    v9 = v0[5];
    v10 = v0[6];
    sub_49F4(v0 + 2, v9);
    v11 = *(int **)(v10 + 8);
    v13 = (int *)((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc(v11[1]);
    v0[18] = v12;
    *v12 = v0;
    v12[1] = sub_174524;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v13)(v0[13], v9, v10);
  }
}

uint64_t sub_174480(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = (_QWORD *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = v1;
  v4 = v3[16];
  v3[17] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1745FC;
  else
    v5 = sub_1744EC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1744EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 64));
}

uint64_t sub_174524(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = (_QWORD *)*v2;
  v3[10] = v2;
  v3[11] = a1;
  v3[12] = v1;
  v4 = v3[18];
  v3[19] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1745C8;
  else
    v5 = sub_174590;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_174590()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 88));
}

uint64_t sub_1745C8()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1745FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_174630(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[282] = v2;
  v3[281] = a2;
  v3[280] = a1;
  v3[283] = *v2;
  return swift_task_switch(sub_174658, 0, 0);
}

uint64_t sub_174658()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int *v6;

  sub_3DD40(v0[282] + 40, (uint64_t)(v0 + 274));
  v1 = v0[277];
  v2 = v0[278];
  sub_49F4(v0 + 274, v1);
  v3 = *(int **)(v2 + 16);
  v6 = (int *)((char *)v3 + *v3);
  v4 = (_QWORD *)swift_task_alloc(v3[1]);
  v0[284] = v4;
  *v4 = v0;
  v4[1] = sub_1746FC;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v6)(v0 + 2, v1, v2);
}

uint64_t sub_1746FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 2272));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_174864;
  }
  else
  {
    v2 = sub_174768;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_174768()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int8x16_t *v4;
  int8x16_t **v5;
  uint64_t v6;

  memcpy(&v0[69], &v0[1], 0x440uLL);
  sub_62F8((int8x16_t *)v0[137].i64);
  sub_5B70((uint64_t)v0[69].i64);
  v1 = v0[109].i64[0];
  v2 = v0[141].i64[1];
  v3 = v0[141].i64[0];
  v4 = (int8x16_t *)swift_task_alloc(64);
  v0[142].i64[1] = (uint64_t)v4;
  v4[1] = vextq_s8(v0[140], v0[140], 8uLL);
  v4[2].i64[0] = v3;
  v4[2].i64[1] = v1;
  v4[3].i64[0] = v2;
  v5 = (int8x16_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[143].i64[0] = (uint64_t)v5;
  v6 = sub_5EDC(&qword_1F7B28);
  *v5 = v0;
  v5[1] = (int8x16_t *)sub_174944;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(&v0[139].u64[1], 0, 0, 0xD00000000000001ELL, 0x80000000001A38A0, sub_178780, v4, v6);
}

uint64_t sub_174864()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t **v6;
  uint64_t v7;

  v1 = v0[141].i64[0];
  sub_62F8((int8x16_t *)v0[137].i64);
  v2 = *(_QWORD *)(v1 + 104);
  v3 = v0[141].i64[1];
  v4 = v0[141].i64[0];
  v5 = (int8x16_t *)swift_task_alloc(64);
  v0[142].i64[1] = (uint64_t)v5;
  v5[1] = vextq_s8(v0[140], v0[140], 8uLL);
  v5[2].i64[0] = v4;
  v5[2].i64[1] = v2;
  v5[3].i64[0] = v3;
  v6 = (int8x16_t **)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[143].i64[0] = (uint64_t)v6;
  v7 = sub_5EDC(&qword_1F7B28);
  *v6 = v0;
  v6[1] = (int8x16_t *)sub_174944;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(&v0[139].u64[1], 0, 0, 0xD00000000000001ELL, 0x80000000001A38A0, sub_178780, v5, v7);
}

uint64_t sub_174944()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2288);
  *(_QWORD *)(*v1 + 2296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1749C0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 2280));
    v4 = sub_1749B0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1749B0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2232));
}

uint64_t sub_1749C0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 2280));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BooksPersonalizationMetadataCache.cacheEntryCount()()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_174A14, 0, 0);
}

uint64_t sub_174A14()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_92B64;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000011, 0x80000000001A0FF0, sub_177980, v1, &type metadata for UInt);
}

void sub_174AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v6 = sub_5EDC(&qword_1F31C0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a2 + 80);
  if (v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    v11 = *(unsigned __int8 *)(v7 + 80);
    v12 = (v11 + 24) & ~v11;
    v13 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = swift_allocObject(&unk_1E9208, v13 + 8, v11 | 7);
    *(_QWORD *)(v14 + 16) = v10;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v14 + v12, v9, v6);
    *(_QWORD *)(v14 + v13) = a3;
    aBlock[4] = sub_178738;
    v19 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_173138;
    aBlock[3] = &unk_1E9220;
    v15 = _Block_copy(aBlock);
    v16 = v19;
    v17 = v10;
    swift_release(v16);
    objc_msgSend(v17, "performBlock:", v15);
    _Block_release(v15);

  }
  else
  {
    aBlock[0] = 0;
    CheckedContinuation.resume(returning:)(aBlock, v6);
  }
}

void sub_174C30()
{
  uint64_t v0;
  objc_class *ObjCClassFromMetadata;
  NSString *v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v0 = type metadata accessor for CachedPersonalizationBookMetadata();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v0);
  v2 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  v3 = objc_allocWithZone((Class)NSFetchRequest);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, "initWithEntityName:", v4);

  v6 = NSManagedObjectContext.count<A>(for:)(v5, v0);
  if (v6 < 0)
  {
    v8 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v8, 3451, 0);
    __break(1u);
  }
  else
  {
    v9 = v6;
    v7 = sub_5EDC(&qword_1F31C0);
    CheckedContinuation.resume(returning:)(&v9, v7);

  }
}

void sub_174E3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v33 = a2;
  v34 = a5;
  v32 = a4;
  v9 = sub_5EDC(&qword_1F7B30);
  v10 = *(_QWORD *)(v9 - 8);
  v31 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PersonalizationMetadataRequest(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_106004(a3, (uint64_t)v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(unsigned __int8 *)(v10 + 80);
  v23 = (v22 + v21 + 8) & ~v22;
  v24 = (v11 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_1E9258, v24 + 8, v17 | v22 | 7);
  sub_106148((uint64_t)v16, v25 + v18);
  v27 = v32;
  v26 = v33;
  *(_QWORD *)(v25 + v19) = v32;
  *(double *)(v25 + v20) = a6;
  *(_QWORD *)(v25 + v21) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v25 + v23, v12, v31);
  *(_QWORD *)(v25 + v24) = v34;
  aBlock[4] = sub_1788A0;
  v36 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_173138;
  aBlock[3] = &unk_1E9270;
  v28 = _Block_copy(aBlock);
  v29 = v36;
  swift_retain(v27);
  v30 = v26;
  swift_release(v29);
  objc_msgSend(v30, "performBlock:", v28);
  _Block_release(v28);
}

uint64_t sub_175040(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *ObjCClassFromMetadata;
  NSString *v17;
  id v18;
  NSString v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  Class isa;
  id v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char **v33;
  char **p_name;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t result;
  uint64_t v67;
  _QWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char **v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v78 = a4;
  v81 = a2;
  v83 = sub_5EDC(&qword_1F7B30);
  v74 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83);
  v73 = v8;
  v80 = (char *)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PersonalizationMetadataRequest(0);
  v69 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v70 = v10;
  v72 = (uint64_t)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v11);
  v79 = (uint64_t)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(int *)(v9 + 20);
  v71 = a1;
  v14 = *(_QWORD *)(a1 + v13);
  v85 = v14;
  v15 = type metadata accessor for CachedPersonalizationMetadataBook();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v15);
  swift_bridgeObjectRetain_n(v14, 2);
  v17 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v18 = objc_allocWithZone((Class)NSFetchRequest);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v20 = objc_msgSend(v18, "initWithEntityName:", v19);

  v21 = sub_5EDC(&qword_1F3118);
  v22 = swift_allocObject(v21, 96, 7);
  *(_OWORD *)(v22 + 16) = xmmword_18FC00;
  *(_QWORD *)(v22 + 56) = &type metadata for String;
  *(_QWORD *)(v22 + 32) = 0x44497465737361;
  *(_QWORD *)(v22 + 40) = 0xE700000000000000;
  *(_QWORD *)(v22 + 88) = sub_5EDC(&qword_1F2700);
  *(_QWORD *)(v22 + 64) = v14;
  v23 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v25 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v23, isa);

  v26 = sub_5EDC(&qword_1F3200);
  v27 = swift_allocObject(v26, 48, 7);
  *(_OWORD *)(v27 + 16) = xmmword_19D1A0;
  *(_QWORD *)(v27 + 32) = v25;
  v76 = v25;
  *(_QWORD *)(v27 + 40) = sub_178210(a5);
  v84 = v27;
  specialized Array._endMutation()();
  sub_178948();
  v28 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v29 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v28);

  objc_msgSend(v20, "setPredicate:", v29);
  v77 = v20;
  v30 = v15;
  v75 = a3;
  v31 = 0;
  v32 = NSManagedObjectContext.fetch<A>(_:)(v20, v30);
  swift_bridgeObjectRetain(v32);
  p_name = v33;
  if ((unint64_t)v32 >> 62)
  {
LABEL_25:
    if (v32 < 0)
      v67 = v32;
    else
      v67 = v32 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v32);
    v35 = _CocoaArrayWrapper.endIndex.getter(v67);
  }
  else
  {
    v35 = *(_QWORD *)((char *)&dword_10 + (v32 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v32);
  }
  v82 = p_name;
  v68[1] = v31;
  if (v35)
  {
    v36 = _swiftEmptyArrayStorage;
    v37 = 4;
    p_name = &BooksBackendPostScorer.name;
    while (1)
    {
      if ((v32 & 0xC000000000000001) != 0)
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37 - 4, v32);
      else
        v38 = *(id *)(v32 + 8 * v37);
      v39 = v38;
      v40 = v37 - 3;
      if (__OFADD__(v37 - 4, 1))
      {
        __break(1u);
        goto LABEL_25;
      }
      v41 = (unint64_t)objc_msgSend(v38, "assetID");
      if ((v41 & 0x8000000000000000) != 0)
        break;
      v42 = v41;

      if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
        v36 = sub_2FA6C(0, v36[2] + 1, 1, v36);
      v31 = v36[2];
      v43 = v36[3];
      if (v31 >= v43 >> 1)
        v36 = sub_2FA6C((_QWORD *)(v43 > 1), v31 + 1, 1, v36);
      v36[2] = v31 + 1;
      v36[v31 + 4] = v42;
      ++v37;
      if (v40 == v35)
        goto LABEL_17;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v36 = _swiftEmptyArrayStorage;
LABEL_17:
    swift_bridgeObjectRelease_n(v32, 2);
    v44 = sub_3CD28((uint64_t)v36);
    swift_bridgeObjectRelease();
    v45 = (unint64_t)v82;
    if (v82)
    {
      v46 = v81;
      swift_retain(v81);
      swift_bridgeObjectRetain(v45);
      v47 = sub_177E78(_swiftEmptyDictionarySingleton, v45);
      swift_bridgeObjectRelease();
      swift_release(v46);
    }
    else
    {
      v47 = sub_659F0((uint64_t)_swiftEmptyArrayStorage);
    }
    sub_C4168(v44);
    swift_bridgeObjectRelease();
    v48 = v85;
    if (*(_QWORD *)(v85 + 16))
    {
      v49 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v79, 1, 1, v49);
      v50 = v72;
      sub_106004(v71, v72);
      v71 = v47;
      v51 = v74;
      (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v80, v78, v83);
      v52 = *(unsigned __int8 *)(v69 + 80);
      v53 = (v52 + 32) & ~v52;
      v54 = (v70 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
      v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF8;
      v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
      v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
      v58 = *(unsigned __int8 *)(v51 + 80);
      v59 = (v58 + v57 + 8) & ~v58;
      v60 = swift_allocObject(&unk_1E92A8, v59 + v73, v52 | v58 | 7);
      *(_QWORD *)(v60 + 16) = 0;
      *(_QWORD *)(v60 + 24) = 0;
      sub_106148(v50, v60 + v53);
      *(_QWORD *)(v60 + v54) = v48;
      v61 = v80;
      v62 = v81;
      *(_QWORD *)(v60 + v55) = v81;
      v63 = v75;
      *(_QWORD *)(v60 + v56) = v75;
      *(_QWORD *)(v60 + v57) = v71;
      (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v60 + v59, v61, v83);
      swift_retain(v62);
      v64 = v63;
      v65 = sub_140F14(v79, (uint64_t)&unk_1F7B48, v60);

      swift_release(v65);
    }
    else
    {
      swift_bridgeObjectRelease();
      v84 = v47;
      CheckedContinuation.resume(returning:)(&v84, v83);

    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1758F8(void *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unint64_t v37;
  unint64_t *v38;
  id v39;
  _BYTE v40[32];
  _OWORD v41[2];
  __int128 v42;
  uint64_t v43;

  v4 = type metadata accessor for NSFastEnumerationIterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (unint64_t)objc_msgSend(a1, "assetID");
  if ((v8 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v9 = v8;
    v10 = objc_msgSend(a1, "ulyssesEmbedding");
    v11 = v10;
    if (v10)
    {
      objc_msgSend(v10, "doubleValue");
      v13 = v12;

    }
    else
    {
      v13 = 0;
    }
    v14 = objc_msgSend(a1, "bisac");
    if (v14)
    {
      v34 = v5;
      v35 = v11;
      v36 = a1;
      v37 = v9;
      v38 = a2;
      v15 = v14;
      NSSet.makeIterator()();
      v33 = v15;

      v16 = sub_41754(&qword_1F3100, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
      dispatch thunk of IteratorProtocol.next()(v4, v16);
      if (v43)
      {
        v17 = _swiftEmptyArrayStorage;
        do
        {
          sub_41900(&v42, v41);
          sub_41910((uint64_t)v41, (uint64_t)v40);
          v18 = type metadata accessor for CachedPersonalizationMetadataBISAC();
          if (swift_dynamicCast(&v39, v40, (char *)&type metadata for Any + 8, v18, 6)
            && (v19 = v39, v20 = objc_msgSend(v39, "code"), v19, v20))
          {
            v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
            v23 = v22;

            sub_62F8(v41);
            if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
              v17 = sub_2FCA8(0, v17[2] + 1, 1, v17);
            v25 = v17[2];
            v24 = v17[3];
            if (v25 >= v24 >> 1)
              v17 = sub_2FCA8((_QWORD *)(v24 > 1), v25 + 1, 1, v17);
            v17[2] = v25 + 1;
            v26 = &v17[2 * v25];
            v26[4] = v21;
            v26[5] = v23;
          }
          else
          {
            sub_62F8(v41);
          }
          dispatch thunk of IteratorProtocol.next()(v4, v16);
        }
        while (v43);
      }
      else
      {
        v17 = _swiftEmptyArrayStorage;
      }
      (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v4);

      v9 = v37;
      a2 = v38;
      v11 = v35;
      a1 = v36;
    }
    else
    {
      v17 = _swiftEmptyArrayStorage;
    }
    v27 = sub_3CBC8((uint64_t)v17);
    swift_bridgeObjectRelease();
    v28 = objc_msgSend(a1, "deduplicationID");
    if (v28)
    {
      v29 = v28;
      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v32 = v31;

    }
    else
    {
      v30 = 0;
      v32 = 0;
    }
    *a2 = v9;
    a2[1] = v13;
    a2[2] = v11 == 0;
    a2[3] = v27;
    a2[4] = v30;
    a2[5] = v32;
  }
}

uint64_t sub_175C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v8[8] = a8;
  v8[9] = v11;
  v8[6] = a6;
  v8[7] = a7;
  v8[4] = a4;
  v8[5] = a5;
  v9 = type metadata accessor for PersonalizationMetadataRequest(0);
  v8[10] = v9;
  v8[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_175CD4, 0, 0);
}

uint64_t sub_175CD4()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  uint64_t v8;

  v2 = v0[5].i64[0];
  v1 = v0[5].i64[1];
  v4 = v0[2].i64[0];
  v3 = v0[2].i64[1];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(v1, v4, v5);
  *(_QWORD *)(v1 + *(int *)(v2 + 20)) = v3;
  v6 = dword_1F7B54;
  swift_bridgeObjectRetain(v3);
  v7 = (int8x16_t *)swift_task_alloc(v6);
  v0[6].i64[0] = (uint64_t)v7;
  v7->i64[0] = (uint64_t)v0;
  v7->i64[1] = (uint64_t)sub_175D84;
  v8 = v0[5].i64[1];
  v7[4] = vextq_s8(v0[3], v0[3], 8uLL);
  v7[3].i64[1] = v8;
  return swift_task_switch(sub_175F04, 0, 0);
}

uint64_t sub_175D84(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 96);
  *(_QWORD *)(*v2 + 104) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_175E80;
  }
  else
  {
    *(_QWORD *)(v4 + 112) = a1;
    v6 = sub_175DF8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_175DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain(v3);
  *(_QWORD *)(v0 + 24) = sub_173164(v1, v3);
  v4 = sub_5EDC(&qword_1F7B30);
  CheckedContinuation.resume(returning:)(v0 + 24, v4);
  sub_170F4C(v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_175E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  sub_170F4C(*(_QWORD *)(v0 + 88));
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_5EDC(&qword_1F7B30);
  CheckedContinuation.resume(throwing:)(v0 + 16, v2);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_175EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  return swift_task_switch(sub_175F04, 0, 0);
}

uint64_t sub_175F04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  int *v9;

  v1 = v0[7];
  if (*(_QWORD *)(*(_QWORD *)(v1 + *(int *)(type metadata accessor for PersonalizationMetadataRequest(0) + 20)) + 16))
  {
    sub_3DD40(v0[9] + 112, (uint64_t)(v0 + 2));
    v2 = v0[5];
    v3 = v0[6];
    sub_49F4(v0 + 2, v2);
    v4 = *(int **)(v3 + 8);
    v9 = (int *)((char *)v4 + *v4);
    v5 = (_QWORD *)swift_task_alloc(v4[1]);
    v0[10] = v5;
    *v5 = v0;
    v5[1] = sub_176008;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v9)(v0[7], v2, v3);
  }
  else
  {
    v0[13] = _swiftEmptyDictionarySingleton;
    v7 = dword_1F7A34;
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    v8 = (_QWORD *)swift_task_alloc(v7);
    v0[14] = v8;
    *v8 = v0;
    v8[1] = sub_176150;
    return sub_176428((uint64_t)_swiftEmptyDictionarySingleton, v0[8]);
  }
}

uint64_t sub_176008(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 80);
  *(_QWORD *)(*v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v6 = sub_1761C8;
  }
  else
  {
    *(_QWORD *)(v4 + 96) = a1;
    v6 = sub_176088;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_176088()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = v0[11];
  v1 = v0[12];
  sub_62F8(v0 + 2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v8 = _swiftEmptyDictionarySingleton;
  sub_177BE8(v1, (uint64_t)sub_177E2C, 0, isUniquelyReferenced_nonNull_native, &v8);
  if (v2)
    return swift_bridgeObjectRelease();
  v5 = (uint64_t)v8;
  swift_bridgeObjectRelease();
  v0[13] = v5;
  v6 = dword_1F7A34;
  swift_bridgeObjectRetain(v5);
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[14] = v7;
  *v7 = v0;
  v7[1] = sub_176150;
  return sub_176428(v5, v0[8]);
}

uint64_t sub_176150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_1761FC;
  }
  else
  {
    v3 = sub_9431C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1761C8()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1761FC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t BooksPersonalizationMetadataCache.contribute(cachableMetadata:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_176220, 0, 0);
}

uint64_t sub_176220()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v1 = *(void **)(*(_QWORD *)(v0 + 24) + 80);
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    v2 = dword_1F7A34;
    v3 = v1;
    v4 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 40) = v4;
    *v4 = v0;
    v4[1] = sub_17635C;
    return sub_176428(*(_QWORD *)(v0 + 16), (uint64_t)v3);
  }
  else
  {
    if (qword_1F0190 != -1)
      swift_once(&qword_1F0190, sub_1731E0);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_5216C(v6, (uint64_t)qword_224648);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_0, v8, v9, "No MOC for caching personalization metadata", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_17635C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1763F4;
  else
    v3 = sub_1763C0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1763C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1763F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_176428(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[282] = v2;
  v3[281] = a2;
  v3[280] = a1;
  v3[283] = *v2;
  v4 = type metadata accessor for Date(0);
  v3[284] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[285] = v5;
  v3[286] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_176498, 0, 0);
}

uint64_t sub_176498(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  int *v8;

  v2 = v1[282];
  Date.init()(a1);
  sub_3DD40(v2 + 40, (uint64_t)(v1 + 274));
  v3 = v1[277];
  v4 = v1[278];
  sub_49F4(v1 + 274, v3);
  v5 = *(int **)(v4 + 16);
  v8 = (int *)((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v1[287] = v6;
  *v6 = v1;
  v6[1] = sub_176544;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v8)(v1 + 2, v3, v4);
}

uint64_t sub_176544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 2296));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_1766A8;
  }
  else
  {
    v2 = sub_1765B0;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1765B0()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t **v6;

  memcpy(&v0[69], &v0[1], 0x440uLL);
  sub_62F8((int8x16_t *)v0[137].i64);
  sub_5B70((uint64_t)v0[69].i64);
  v1 = v0[109].i64[0];
  v2 = v0[143].i64[0];
  v3 = v0[141].i64[1];
  v4 = v0[141].i64[0];
  v5 = (int8x16_t *)swift_task_alloc(64);
  v0[144].i64[0] = (uint64_t)v5;
  v5[1] = vextq_s8(v0[140], v0[140], 8uLL);
  v5[2].i64[0] = v2;
  v5[2].i64[1] = v4;
  v5[3].i64[0] = v1;
  v5[3].i64[1] = v3;
  v6 = (int8x16_t **)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[144].i64[1] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (int8x16_t *)sub_176784;
  return withCheckedContinuation<A>(isolation:function:_:)(&v0[139].u64[1], 0, 0, 0xD000000000000019, 0x80000000001A3860, sub_177A34, v5, &type metadata for Int);
}

uint64_t sub_1766A8()
{
  int8x16_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t **v7;

  v1 = v0[141].i64[0];
  sub_62F8((int8x16_t *)v0[137].i64);
  v2 = *(_QWORD *)(v1 + 104);
  v3 = v0[143].i64[0];
  v4 = v0[141].i64[1];
  v5 = v0[141].i64[0];
  v6 = (int8x16_t *)swift_task_alloc(64);
  v0[144].i64[0] = (uint64_t)v6;
  v6[1] = vextq_s8(v0[140], v0[140], 8uLL);
  v6[2].i64[0] = v3;
  v6[2].i64[1] = v5;
  v6[3].i64[0] = v2;
  v6[3].i64[1] = v4;
  v7 = (int8x16_t **)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[144].i64[1] = (uint64_t)v7;
  *v7 = v0;
  v7[1] = (int8x16_t *)sub_176784;
  return withCheckedContinuation<A>(isolation:function:_:)(&v0[139].u64[1], 0, 0, 0xD000000000000019, 0x80000000001A3860, sub_177A34, v6, &type metadata for Int);
}

uint64_t sub_176784()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2304);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2312));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1767E4, 0, 0);
}

uint64_t sub_1767E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2288);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 2280) + 8))(v1, *(_QWORD *)(v0 + 2272));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_176830(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v33 = a5;
  v34 = a6;
  v35 = a2;
  v36 = a3;
  v10 = sub_5EDC(&qword_1F3150);
  v11 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v32 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a4, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = *(unsigned __int8 *)(v11 + 80);
  v22 = (v21 + v20 + 8) & ~v21;
  v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1E91B8, v23 + 8, v17 | v21 | 7);
  v25 = v36;
  *(_QWORD *)(v24 + 16) = v35;
  *(_QWORD *)(v24 + 24) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v24 + v18, v16, v13);
  v26 = v32;
  v27 = v33;
  *(_QWORD *)(v24 + v19) = v33;
  *(double *)(v24 + v20) = a7;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v24 + v22, v26, v31);
  *(_QWORD *)(v24 + v23) = v34;
  aBlock[4] = sub_177B38;
  v38 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_173138;
  aBlock[3] = &unk_1E91D0;
  v28 = _Block_copy(aBlock);
  v29 = v38;
  v30 = v35;
  swift_bridgeObjectRetain(v36);
  swift_retain(v27);
  swift_release(v29);
  objc_msgSend(v30, "performBlock:", v28);
  _Block_release(v28);
}

void sub_176A54(void *a1, uint64_t isUniquelyReferenced_nonNull_native, double a3)
{
  uint64_t v6;
  NSString *v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t i;
  int64_t v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  objc_class *ObjCClassFromMetadata;
  NSString *v52;
  void *v53;
  id v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  void *v61;
  NSString v62;
  id v63;
  Class isa;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  id v80;
  id v81;
  _QWORD *v82;
  NSString *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  NSString v87;
  id v88;
  _QWORD *v89;
  uint64_t v90;
  char v91;
  unint64_t v92;
  uint64_t v93;
  _BOOL8 v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  char v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  uint8_t *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;
  id v125;
  objc_class *aClass;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  int64_t v130;
  id v131;
  char v132;
  id v133;
  id v134;
  uint64_t v135;
  int64_t v136;
  os_log_t oslog;
  os_log_t oslogc;
  os_log_t osloga;
  NSObject *oslogb;
  _QWORD *v141;
  uint64_t v142;

  v6 = type metadata accessor for CachedPersonalizationMetadataBISAC();
  aClass = (objc_class *)swift_getObjCClassFromMetadata(v6);
  v7 = NSStringFromClass(aClass);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);

  v8 = objc_allocWithZone((Class)NSFetchRequest);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, "initWithEntityName:", v9);

  v122 = v10;
  v127 = v6;
  v134 = a1;
  v11 = NSManagedObjectContext.fetch<A>(_:)(v10, v6);
  if (!v11)
    v11 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v11 >> 62)
    goto LABEL_27;
  v12 = *(_QWORD *)((char *)&dword_10 + (v11 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v11);
  while (v12)
  {
    oslog = (os_log_t)(v11 & 0xC000000000000001);
    v13 = _swiftEmptyDictionarySingleton;
    v14 = 4;
    v135 = v11;
    v131 = (id)v12;
    while (1)
    {
      v6 = v14 - 4;
      v15 = oslog
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14 - 4, v11)
          : *(id *)(v11 + 8 * v14);
      v16 = v15;
      v17 = v14 - 3;
      if (__OFADD__(v6, 1))
        break;
      v18 = objc_msgSend(v15, "code");
      if (v18)
      {
        v19 = v18;
        v20 = v13;
        v21 = isUniquelyReferenced_nonNull_native;
        v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v6 = v22;

        v23 = v16;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
        v141 = v20;
        v25 = sub_39064(v11, v6);
        v26 = v20[2];
        v27 = (v24 & 1) == 0;
        v28 = v26 + v27;
        if (__OFADD__(v26, v27))
          goto LABEL_25;
        v29 = v24;
        if (v20[3] >= v28)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_16EC70();
        }
        else
        {
          sub_1622C0(v28, isUniquelyReferenced_nonNull_native);
          v30 = sub_39064(v11, v6);
          if ((v29 & 1) != (v31 & 1))
          {
LABEL_131:
            KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return;
          }
          v25 = v30;
        }
        isUniquelyReferenced_nonNull_native = v21;
        v13 = v141;
        if ((v29 & 1) != 0)
        {
          v32 = v141[7];

          *(_QWORD *)(v32 + 8 * v25) = v23;
        }
        else
        {
          v141[(v25 >> 6) + 8] |= 1 << v25;
          v33 = (uint64_t *)(v13[6] + 16 * v25);
          *v33 = v11;
          v33[1] = v6;
          *(_QWORD *)(v13[7] + 8 * v25) = v23;
          v34 = v13[2];
          v35 = __OFADD__(v34, 1);
          v36 = v34 + 1;
          if (v35)
            goto LABEL_26;
          v13[2] = v36;
          swift_bridgeObjectRetain(v6);
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 = v135;
        v12 = (uint64_t)v131;
      }
      else
      {

      }
      ++v14;
      if (v17 == v12)
        goto LABEL_32;
    }
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    if (v11 < 0)
      v37 = v11;
    else
      v37 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v11, 2);
    v12 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease();
  }
  v13 = _swiftEmptyDictionarySingleton;
LABEL_32:
  swift_bridgeObjectRelease_n(v11, 2);
  v129 = isUniquelyReferenced_nonNull_native + 64;
  v38 = 1 << *(_BYTE *)(isUniquelyReferenced_nonNull_native + 32);
  if (v38 < 64)
    v39 = ~(-1 << v38);
  else
    v39 = -1;
  oslogc = (os_log_t)(v39 & *(_QWORD *)(isUniquelyReferenced_nonNull_native + 64));
  v130 = (unint64_t)(v38 + 63) >> 6;
  swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
  v40 = 0;
  v41 = (unint64_t)oslogc;
  if (!oslogc)
    goto LABEL_37;
LABEL_36:
  v136 = v40;
  osloga = (os_log_t)((v41 - 1) & v41);
  for (i = __clz(__rbit64(v41)) | (v40 << 6); ; i = __clz(__rbit64(v44)) + (v43 << 6))
  {
    v46 = *(_QWORD *)(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 48) + 8 * i);
    v47 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 56) + 48 * i;
    v48 = *(double *)(v47 + 8);
    v132 = *(_BYTE *)(v47 + 16);
    v49 = *(_QWORD *)(v47 + 24);
    v6 = *(_QWORD *)(v47 + 40);
    v50 = type metadata accessor for CachedPersonalizationMetadataBook();
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v50);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v49);
    v52 = NSStringFromClass(ObjCClassFromMetadata);
    if (!v52)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v52 = (NSString *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    v53 = (void *)objc_opt_self(NSEntityDescription);
    v54 = objc_msgSend(v53, "insertNewObjectForEntityForName:inManagedObjectContext:", v52, v134);

    v55 = (void *)swift_dynamicCastClass(v54, v50);
    if (v55)
    {
      v125 = v53;
      if (v46 < 0)
        goto LABEL_129;
      v61 = v55;
      objc_msgSend(v55, "setAssetID:", v46);
      if (v6)
      {
        swift_bridgeObjectRetain(v6);
        v62 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
      }
      else
      {
        v62 = 0;
      }
      objc_msgSend(v61, "setDeduplicationID:", v62);

      v121 = isUniquelyReferenced_nonNull_native;
      if ((v132 & 1) != 0)
        v63 = 0;
      else
        v63 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v48);
      objc_msgSend(v61, "setUlyssesEmbedding:", v63);

      isa = Date._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v61, "setDownloadTimestamp:", isa);

      v65 = *(_QWORD *)(v49 + 56);
      v123 = v49 + 56;
      v66 = 1 << *(_BYTE *)(v49 + 32);
      swift_bridgeObjectRelease();
      v67 = 0;
      if (v66 < 64)
        v68 = ~(-1 << v66);
      else
        v68 = -1;
      v69 = v68 & v65;
      v128 = (unint64_t)(v66 + 63) >> 6;
      v133 = v61;
      v124 = v54;
      while (1)
      {
        if (v69)
        {
          v71 = __clz(__rbit64(v69));
          v69 &= v69 - 1;
          v72 = v71 | (v67 << 6);
        }
        else
        {
          v35 = __OFADD__(v67++, 1);
          if (v35)
            goto LABEL_125;
          if (v67 >= v128)
          {
LABEL_109:

            swift_release(v49);
            isUniquelyReferenced_nonNull_native = v121;
            goto LABEL_56;
          }
          v73 = *(_QWORD *)(v123 + 8 * v67);
          if (!v73)
          {
            v74 = v67 + 1;
            if (v67 + 1 >= v128)
              goto LABEL_109;
            v73 = *(_QWORD *)(v123 + 8 * v74);
            if (!v73)
            {
              v74 = v67 + 2;
              if (v67 + 2 >= v128)
                goto LABEL_109;
              v73 = *(_QWORD *)(v123 + 8 * v74);
              if (!v73)
              {
                v74 = v67 + 3;
                if (v67 + 3 >= v128)
                  goto LABEL_109;
                v73 = *(_QWORD *)(v123 + 8 * v74);
                if (!v73)
                {
                  while (1)
                  {
                    v67 = v74 + 1;
                    if (__OFADD__(v74, 1))
                      goto LABEL_128;
                    if (v67 >= v128)
                      goto LABEL_109;
                    v73 = *(_QWORD *)(v123 + 8 * v67);
                    ++v74;
                    if (v73)
                      goto LABEL_88;
                  }
                }
              }
            }
            v67 = v74;
          }
LABEL_88:
          v69 = (v73 - 1) & v73;
          v72 = __clz(__rbit64(v73)) + (v67 << 6);
        }
        v75 = (uint64_t *)(*(_QWORD *)(v49 + 48) + 16 * v72);
        v6 = *v75;
        v76 = v75[1];
        v77 = v13[2];
        swift_bridgeObjectRetain(v76);
        if (v77)
        {
          swift_bridgeObjectRetain(v76);
          v78 = sub_39064(v6, v76);
          if ((v79 & 1) != 0)
          {
            v80 = *(id *)(v13[7] + 8 * v78);
            swift_bridgeObjectRelease_n(v76, 2);
            v81 = v80;
            goto LABEL_75;
          }
          swift_bridgeObjectRelease();
        }
        v82 = v13;
        v83 = NSStringFromClass(aClass);
        if (!v83)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(0);
          v83 = (NSString *)String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
        }
        v84 = objc_msgSend(v125, "insertNewObjectForEntityForName:inManagedObjectContext:", v83, v134);

        v85 = swift_dynamicCastClass(v84, v127);
        if (!v85)
        {
          v6 = v49;
          swift_bridgeObjectRelease();

          if (qword_1F0190 != -1)
            goto LABEL_130;
          goto LABEL_114;
        }
        v81 = (id)v85;
        v86 = v49;
        v87 = String._bridgeToObjectiveC()();
        objc_msgSend(v81, "setCode:", v87);

        v88 = v84;
        v89 = v82;
        v90 = swift_isUniquelyReferenced_nonNull_native(v82);
        v141 = v82;
        v92 = sub_39064(v6, v76);
        v93 = v89[2];
        v94 = (v91 & 1) == 0;
        v95 = v93 + v94;
        if (__OFADD__(v93, v94))
        {
          __break(1u);
          goto LABEL_124;
        }
        v96 = v91;
        if (v89[3] >= v95)
        {
          if ((v90 & 1) == 0)
            sub_16EC70();
        }
        else
        {
          sub_1622C0(v95, v90);
          v97 = sub_39064(v6, v76);
          if ((v96 & 1) != (v98 & 1))
            goto LABEL_131;
          v92 = v97;
        }
        v49 = v86;
        v13 = v141;
        if ((v96 & 1) != 0)
        {
          v70 = v141[7];

          *(_QWORD *)(v70 + 8 * v92) = v81;
        }
        else
        {
          v141[(v92 >> 6) + 8] |= 1 << v92;
          v99 = (uint64_t *)(v13[6] + 16 * v92);
          *v99 = v6;
          v99[1] = v76;
          *(_QWORD *)(v13[7] + 8 * v92) = v81;
          v100 = v13[2];
          v35 = __OFADD__(v100, 1);
          v101 = v100 + 1;
          if (v35)
            goto LABEL_126;
          v13[2] = v101;
          swift_bridgeObjectRetain(v76);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v54 = v124;
LABEL_75:
        objc_msgSend(v133, "addBisacObject:", v81);

      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (qword_1F0190 != -1)
      swift_once(&qword_1F0190, sub_1731E0);
    v56 = type metadata accessor for Logger(0);
    v57 = sub_5216C(v56, (uint64_t)qword_224648);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl(&dword_0, v58, v59, "Failed to create metadata", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

LABEL_56:
    v40 = v136;
    v41 = (unint64_t)osloga;
    if (osloga)
      goto LABEL_36;
LABEL_37:
    v35 = __OFADD__(v40, 1);
    v43 = v40 + 1;
    if (v35)
    {
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
      goto LABEL_127;
    }
    if (v43 >= v130)
      goto LABEL_110;
    v44 = *(_QWORD *)(v129 + 8 * v43);
    if (!v44)
      break;
LABEL_47:
    v136 = v43;
    osloga = (os_log_t)((v44 - 1) & v44);
  }
  v45 = v43 + 1;
  if (v43 + 1 >= v130)
    goto LABEL_110;
  v44 = *(_QWORD *)(v129 + 8 * v45);
  if (v44)
    goto LABEL_46;
  v45 = v43 + 2;
  if (v43 + 2 >= v130)
    goto LABEL_110;
  v44 = *(_QWORD *)(v129 + 8 * v45);
  if (v44)
    goto LABEL_46;
  v45 = v43 + 3;
  if (v43 + 3 >= v130)
  {
LABEL_110:
    swift_release(isUniquelyReferenced_nonNull_native);
    sub_178328(v134, a3);
    if ((objc_msgSend(v134, "hasChanges") & 1) != 0)
    {
      v141 = 0;
      v102 = objc_msgSend(v134, "save:", &v141);
      v103 = v141;
      if (v102)
      {
        v104 = v141;
      }
      else
      {
        v109 = v141;
        v110 = _convertNSErrorToError(_:)(v103);

        swift_willThrow(v111);
        if (qword_1F0190 != -1)
          swift_once(&qword_1F0190, sub_1731E0);
        v112 = type metadata accessor for Logger(0);
        sub_5216C(v112, (uint64_t)qword_224648);
        swift_errorRetain(v110);
        v113 = swift_errorRetain(v110);
        v114 = Logger.logObject.getter(v113);
        v115 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v114, v115))
        {
          v116 = (uint8_t *)swift_slowAlloc(12, -1);
          v117 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v116 = 138412290;
          swift_errorRetain(v110);
          v118 = (_QWORD *)_swift_stdlib_bridgeErrorToNSError(v110);
          v141 = v118;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v116 + 4, v116 + 12);
          *v117 = v118;
          swift_errorRelease(v110);
          swift_errorRelease(v110);
          _os_log_impl(&dword_0, v114, v115, "Failed to save cache insertions %@", v116, 0xCu);
          v119 = sub_5EDC(&qword_1F3158);
          swift_arrayDestroy(v117, 1, v119);
          swift_slowDealloc(v117, -1, -1);
          swift_slowDealloc(v116, -1, -1);

          swift_errorRelease(v110);
        }
        else
        {
          swift_errorRelease(v110);
          swift_errorRelease(v110);
          swift_errorRelease(v110);

        }
      }
    }
    v141 = 0;
    v120 = sub_5EDC(&qword_1F3150);
    CheckedContinuation.resume(returning:)(&v141, v120);

    swift_bridgeObjectRelease();
    return;
  }
  v44 = *(_QWORD *)(v129 + 8 * v45);
  if (v44)
  {
LABEL_46:
    v43 = v45;
    goto LABEL_47;
  }
  while (1)
  {
    v43 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v43 >= v130)
      goto LABEL_110;
    v44 = *(_QWORD *)(v129 + 8 * v43);
    ++v45;
    if (v44)
      goto LABEL_47;
  }
LABEL_127:
  __break(1u);
LABEL_128:
  __break(1u);
LABEL_129:
  __break(1u);
LABEL_130:
  swift_once(&qword_1F0190, sub_1731E0);
LABEL_114:
  v105 = type metadata accessor for Logger(0);
  v106 = sub_5216C(v105, (uint64_t)qword_224648);
  oslogb = Logger.logObject.getter(v106);
  v107 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslogb, v107))
  {
    v108 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v108 = 0;
    _os_log_impl(&dword_0, oslogb, v107, "Failed to insert BISAC code object into database", v108, 2u);
    swift_slowDealloc(v108, -1, -1);
  }

  swift_bridgeObjectRelease();
  swift_release(v121);
  swift_release(v6);

}

uint64_t BooksPersonalizationMetadataCache.deinit()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_62F8((_QWORD *)(v0 + 112));
  return v0;
}

uint64_t BooksPersonalizationMetadataCache.__deallocating_deinit()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();
  sub_62F8((_QWORD *)(v0 + 112));
  return swift_deallocClassInstance(v0, 152, 7);
}

uint64_t sub_1778B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1F7A14);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  v5[13] = a1;
  v5[14] = v4;
  return swift_task_switch(sub_174374, 0, 0);
}

uint64_t sub_17791C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1F7A2C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_4814;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_176220, 0, 0);
}

void sub_177980(uint64_t a1)
{
  uint64_t v1;

  sub_174AB4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t dispatch thunk of PersonalizationMetadataCaching.contribute(cachableMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_4814;
  return v10(a1, a2, a3);
}

uint64_t type metadata accessor for BooksPersonalizationMetadataCache()
{
  return objc_opt_self(_TtC20BooksPersonalization33BooksPersonalizationMetadataCache);
}

uint64_t method lookup function for BooksPersonalizationMetadataCache(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for BooksPersonalizationMetadataCache);
}

uint64_t dispatch thunk of BooksPersonalizationMetadataCache.__allocating_init(fetchService:subfolder:configurationService:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void sub_177A34(uint64_t a1)
{
  uint64_t v1;

  sub_176830(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 56), *(double *)(v1 + 48));
}

uint64_t sub_177A48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = sub_5EDC(&qword_1F3150);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5));
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

void sub_177B38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = type metadata accessor for Date(0);
  v2 = (((*(_QWORD *)(*(_QWORD *)(v1 - 8) + 64)
        + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80))
        + 7) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_5EDC(&qword_1F3150);
  sub_176A54(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(double *)(v0 + v2));
}

uint64_t sub_177BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_177BE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_177BE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[3];
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;

  v47 = a5;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v40 = a1;
  v41 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v42 = v8;
  v43 = 0;
  v44 = v11 & v9;
  v45 = a2;
  v46 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_4F2A8((uint64_t)v35);
  v12 = v37;
  if (v37)
  {
    while (1)
    {
      v16 = v35[0];
      v15 = v35[1];
      v17 = v35[2];
      v18 = v36;
      v33 = v38;
      v34 = v39;
      v19 = (_QWORD *)*v47;
      v21 = sub_39228(v35[0]);
      v22 = v19[2];
      v23 = (v20 & 1) == 0;
      v24 = v22 + v23;
      if (__OFADD__(v22, v23))
        break;
      v25 = v20;
      if (v19[3] >= v24)
      {
        if ((a4 & 1) == 0)
          sub_16C414();
      }
      else
      {
        sub_15C5EC(v24, a4 & 1);
        v26 = sub_39228(v16);
        if ((v25 & 1) != (v27 & 1))
          goto LABEL_19;
        v21 = v26;
      }
      v28 = (_QWORD *)*v47;
      if ((v25 & 1) != 0)
      {
        v14 = v28[7] + 48 * v21;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v14 = v15;
        *(_QWORD *)(v14 + 8) = v17;
        *(_BYTE *)(v14 + 16) = v18;
        *(_QWORD *)(v14 + 24) = v12;
        *(_QWORD *)(v14 + 32) = v33;
        *(_QWORD *)(v14 + 40) = v34;
      }
      else
      {
        v28[(v21 >> 6) + 8] |= 1 << v21;
        *(_QWORD *)(v28[6] + 8 * v21) = v16;
        v29 = v28[7] + 48 * v21;
        *(_QWORD *)v29 = v15;
        *(_QWORD *)(v29 + 8) = v17;
        *(_BYTE *)(v29 + 16) = v18;
        *(_QWORD *)(v29 + 24) = v12;
        *(_QWORD *)(v29 + 32) = v33;
        *(_QWORD *)(v29 + 40) = v34;
        v30 = v28[2];
        v31 = __OFADD__(v30, 1);
        v32 = v30 + 1;
        if (v31)
          goto LABEL_18;
        v28[2] = v32;
      }
      sub_4F2A8((uint64_t)v35);
      v12 = v37;
      a4 = 1;
      if (!v37)
        goto LABEL_5;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release(a3);
    swift_bridgeObjectRelease();
    sub_5FEC(v40);
    return swift_release(a3);
  }
  return result;
}

uint64_t sub_177E2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a2 + 24) = v2;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v3;
  *(_QWORD *)(a2 + 48) = v5;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_177E78(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v2 = a2;
  if (a2 >> 62)
  {
LABEL_32:
    if (v2 < 0)
      v30 = v2;
    else
      v30 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v30);
    if (v4)
      goto LABEL_3;
LABEL_36:
    swift_bridgeObjectRelease();
    return (uint64_t)a1;
  }
  v4 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a2);
  if (!v4)
    goto LABEL_36;
LABEL_3:
  v33 = v2;
  v34 = v2 & 0xC000000000000001;
  v5 = 4;
  v32 = v4;
  while (1)
  {
    if (v34)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v2);
    else
      v8 = *(id *)(v2 + 8 * v5);
    v9 = v8;
    v7 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    v10 = (uint64_t)objc_msgSend(v8, "assetID");
    if (v10 < 0)
      break;
    v11 = v10;
    sub_1758F8(v9, v40);
    if (!v42)
    {
      v22 = sub_39228(v11);
      if ((v23 & 1) != 0)
      {
        v24 = v22;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
        v45 = a1;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_16C414();
          a1 = v45;
        }
        sub_16FA18(v24, (uint64_t)a1);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {

      }
      goto LABEL_6;
    }
    v39 = v42;
    v12 = v9;
    v2 = v40[0];
    v35 = v40[1];
    v36 = v41;
    v37 = v43;
    v38 = v44;
    v13 = swift_isUniquelyReferenced_nonNull_native(a1);
    v45 = a1;
    v15 = sub_39228(v11);
    v16 = a1[2];
    v17 = (v14 & 1) == 0;
    v18 = v16 + v17;
    if (__OFADD__(v16, v17))
      goto LABEL_30;
    v19 = v14;
    if (a1[3] >= v18)
    {
      if ((v13 & 1) != 0)
      {
        a1 = v45;
        if ((v14 & 1) == 0)
          goto LABEL_24;
      }
      else
      {
        sub_16C414();
        a1 = v45;
        if ((v19 & 1) == 0)
          goto LABEL_24;
      }
    }
    else
    {
      sub_15C5EC(v18, v13);
      v20 = sub_39228(v11);
      if ((v19 & 1) != (v21 & 1))
        goto LABEL_38;
      v15 = v20;
      a1 = v45;
      if ((v19 & 1) == 0)
      {
LABEL_24:
        a1[(v15 >> 6) + 8] |= 1 << v15;
        *(_QWORD *)(a1[6] + 8 * v15) = v11;
        v26 = a1[7] + 48 * v15;
        *(_QWORD *)v26 = v2;
        *(_QWORD *)(v26 + 8) = v35;
        *(_BYTE *)(v26 + 16) = v36 & 1;
        *(_QWORD *)(v26 + 24) = v39;
        *(_QWORD *)(v26 + 32) = v37;
        *(_QWORD *)(v26 + 40) = v38;
        v27 = a1[2];
        v28 = __OFADD__(v27, 1);
        v29 = v27 + 1;
        if (v28)
          goto LABEL_31;
        a1[2] = v29;
        goto LABEL_5;
      }
    }
    v6 = a1[7] + 48 * v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)v6 = v2;
    *(_QWORD *)(v6 + 8) = v35;
    *(_BYTE *)(v6 + 16) = v36 & 1;
    *(_QWORD *)(v6 + 24) = v39;
    *(_QWORD *)(v6 + 32) = v37;
    *(_QWORD *)(v6 + 40) = v38;
LABEL_5:

    swift_bridgeObjectRelease();
    v4 = v32;
    v2 = v33;
    v7 = v5 - 3;
LABEL_6:
    ++v5;
    if (v7 == v4)
      goto LABEL_36;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_38:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

id sub_178210(double a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  NSString v5;
  Class isa;
  id v7;

  v2 = sub_5EDC(&qword_1F3118);
  v3 = swift_allocObject(v2, 96, 7);
  *(_OWORD *)(v3 + 16) = xmmword_18FC00;
  *(_QWORD *)(v3 + 56) = &type metadata for String;
  *(_QWORD *)(v3 + 32) = 0xD000000000000011;
  *(_QWORD *)(v3 + 40) = 0x80000000001A3880;
  *(_QWORD *)(v3 + 88) = type metadata accessor for Date(0);
  v4 = sub_3DD84((_QWORD *)(v3 + 64));
  Date.init(timeIntervalSinceNow:)(v4, -a1);
  v5 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v5, isa);

  return v7;
}

void sub_178328(void *a1, double a2)
{
  uint64_t v4;
  objc_class *ObjCClassFromMetadata;
  NSString *v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  id v16;
  void *v17;
  uint64_t v18;

  v4 = type metadata accessor for CachedPersonalizationMetadataBook();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v4);
  v6 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

  v7 = objc_allocWithZone((Class)NSFetchRequest);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, "initWithEntityName:", v8);

  v10 = sub_178210(a2);
  v11 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "notPredicateWithSubpredicate:", v10);

  objc_msgSend(v9, "setPredicate:", v11);
  v12 = NSManagedObjectContext.fetch<A>(_:)(v9, v4);
  v13 = v12;
  if (!((unint64_t)v12 >> 62))
  {
    v14 = *(_QWORD *)((char *)&dword_10 + (v12 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v12);
    if (v14)
      goto LABEL_3;
LABEL_13:

    swift_bridgeObjectRelease_n(v13, 2);
    return;
  }
  if (v12 < 0)
    v18 = v12;
  else
    v18 = v12 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v12);
  v14 = _CocoaArrayWrapper.endIndex.getter(v18);
  if (!v14)
    goto LABEL_13;
LABEL_3:
  if (v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0)
        v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v13);
      else
        v16 = *(id *)(v13 + 8 * i + 32);
      v17 = v16;
      objc_msgSend(a1, "deleteObject:", v16);

    }
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_1786B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_5EDC(&qword_1F31C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_178738()
{
  sub_5EDC(&qword_1F31C0);
  sub_174C30();
}

void sub_178780(uint64_t a1)
{
  uint64_t v1;

  sub_174E3C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48), *(double *)(v1 + 40));
}

uint64_t sub_178794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(type metadata accessor for PersonalizationMetadataRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = (((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = sub_5EDC(&qword_1F7B30);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + v5 + 8) & ~v8;
  v10 = v2 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v0 + v3, v12);
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v4));

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1788A0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for PersonalizationMetadataRequest(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F7B30) - 8) + 80);
  return sub_175040(v0 + v2, *(_QWORD *)(v0 + v3), *(void **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v0 + ((v4 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4), *(double *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

unint64_t sub_178948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F7B38;
  if (!qword_1F7B38)
  {
    v1 = objc_opt_self(NSPredicate);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_1F7B38);
  }
  return result;
}

uint64_t sub_178984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(type metadata accessor for PersonalizationMetadataRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = (((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  v6 = sub_5EDC(&qword_1F7B30);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8;
  v13 = v9 + *(_QWORD *)(v7 + 64);
  v14 = v6;
  v10 = v2 | v8 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v0 + v3, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v4));

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v9, v14);
  return swift_deallocObject(v0, v13, v10);
}

uint64_t sub_178AAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = *(_QWORD *)(type metadata accessor for PersonalizationMetadataRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_5EDC(&qword_1F7B30);
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = *(_QWORD *)(v1 + v6);
  v13 = *(_QWORD *)(v1 + v7);
  v14 = *(_QWORD *)(v1 + v8);
  v15 = *(_QWORD *)(v1 + v9);
  v16 = (_QWORD *)swift_task_alloc(dword_1F7B44);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_4814;
  return sub_175C6C(a1, v10, v11, v1 + v5, v12, v13, v14, v15);
}

uint64_t static Features.fromProtoFeatureMap(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = sub_1791D4(a1);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return Features.init(featureMap:)(v2);
}

_QWORD *sub_178C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  float v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;

  v4 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_FloatList(0);
  v29 = *(_QWORD *)(v4 - 8);
  v30 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Feature(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F14A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Feature(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Features.subscript.getter(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_49988((uint64_t)v13);
    return 0;
  }
  else
  {
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    v20 = Feature.protoFeature.getter(v19);
    Com_Apple_News_Algorithms_Proto_Model_Feature.floatList.getter(v20);
    v21 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v22 = Com_Apple_News_Algorithms_Proto_Model_FloatList.values.getter(v21);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v30);
    v23 = *(_QWORD *)(v22 + 16);
    if (v23)
    {
      v31 = _swiftEmptyArrayStorage;
      sub_34264(0, v23, 0);
      v24 = 0;
      v18 = v31;
      v25 = v31[2];
      do
      {
        v26 = *(float *)(v22 + 4 * v24 + 32);
        v31 = v18;
        v27 = v18[3];
        if (v25 >= v27 >> 1)
        {
          sub_34264(v27 > 1, v25 + 1, 1);
          v18 = v31;
        }
        ++v24;
        v18[2] = v25 + 1;
        *(double *)&v18[v25++ + 4] = v26;
      }
      while (v23 != v24);
      swift_bridgeObjectRelease(v22);
    }
    else
    {
      swift_bridgeObjectRelease(v22);
      v18 = _swiftEmptyArrayStorage;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return v18;
}

uint64_t sub_178EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v36 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Int64List(0);
  v4 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Feature(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F14A0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Feature(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1;
  v19 = v18;
  v20 = a2;
  v22 = v21;
  Features.subscript.getter(v17, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v13, 1, v22) == 1)
  {
    sub_49988((uint64_t)v13);
    return 0;
  }
  v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v16, v13, v22);
  v25 = Feature.protoFeature.getter(v24);
  Com_Apple_News_Algorithms_Proto_Model_Feature.int64List.getter(v25);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v27 = Com_Apple_News_Algorithms_Proto_Model_Int64List.values.getter(v26);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v36);
  v28 = *(_QWORD *)(v27 + 16);
  v29 = v16;
  if (!v28)
  {
    swift_bridgeObjectRelease();
    v23 = _swiftEmptyArrayStorage;
LABEL_9:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v22);
    return (uint64_t)v23;
  }
  v37 = _swiftEmptyArrayStorage;
  sub_340AC(0, v28, 0);
  v30 = *(_QWORD *)(v27 + 32);
  if ((v30 & 0x8000000000000000) == 0)
  {
    v23 = v37;
    v32 = v37[2];
    v31 = v37[3];
    v33 = (uint64_t *)(v32 + 1);
    if (v32 >= v31 >> 1)
      goto LABEL_19;
    while (1)
    {
      v23[2] = v33;
      v31 = (unint64_t)&v23[v32];
      *(_QWORD *)(v31 + 32) = v30;
      v30 = v28 - 1;
      if (v28 == 1)
        break;
      v32 += 5;
      v33 = (uint64_t *)(v27 + 40);
      while (v30)
      {
        v35 = *v33;
        if (*v33 < 0)
          goto LABEL_20;
        v37 = v23;
        v31 = v23[3];
        v28 = v32 - 3;
        if (v32 - 4 >= v31 >> 1)
        {
          sub_340AC(v31 > 1, v32 - 3, 1);
          v23 = v37;
        }
        v23[2] = v28;
        v23[v32++] = v35;
        ++v33;
        if (!--v30)
          goto LABEL_7;
      }
      __break(1u);
LABEL_19:
      sub_340AC(v31 > 1, (int64_t)v33, 1);
      v23 = v37;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
LABEL_20:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_1791D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t i;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;

  v2 = type metadata accessor for Feature(0);
  v44 = *(_QWORD *)(v2 - 8);
  v45 = v2;
  __chkstk_darwin(v2);
  v43 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Feature(0);
  v41 = *(_QWORD *)(v4 - 8);
  v42 = v4;
  __chkstk_darwin(v4);
  v40 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_5EDC(&qword_1F7B58);
  result = static _DictionaryStorage.copy(original:)(a1);
  v7 = result;
  v8 = 0;
  v46 = a1;
  v11 = *(_QWORD *)(a1 + 64);
  v10 = a1 + 64;
  v9 = v11;
  v12 = 1 << *(_BYTE *)(v10 - 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v9;
  v35 = v10;
  v36 = (unint64_t)(v12 + 63) >> 6;
  v38 = enum case for Feature.proto(_:);
  v37 = result + 64;
  v39 = result;
  v16 = v40;
  v15 = v41;
  v17 = v43;
  v18 = v44;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v47 = (v14 - 1) & v14;
  v48 = v8;
  for (i = __clz(__rbit64(v14)) | (v8 << 6); ; i = __clz(__rbit64(v21)) + (v22 << 6))
  {
    v24 = *(_QWORD *)(v46 + 56);
    v25 = (uint64_t *)(*(_QWORD *)(v46 + 48) + 16 * i);
    v26 = v25[1];
    v49 = *v25;
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    v28 = v42;
    v27(v16, v24 + *(_QWORD *)(v15 + 72) * i, v42);
    v27(v17, (unint64_t)v16, v28);
    v29 = v45;
    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v17, v38, v45);
    swift_bridgeObjectRetain(v26);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v16, v28);
    *(_QWORD *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v7 = v39;
    v30 = (_QWORD *)(*(_QWORD *)(v39 + 48) + 16 * i);
    *v30 = v49;
    v30[1] = v26;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v18 + 32))(*(_QWORD *)(v7 + 56) + *(_QWORD *)(v18 + 72) * i, v17, v29);
    v31 = *(_QWORD *)(v7 + 16);
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    *(_QWORD *)(v7 + 16) = v33;
    v14 = v47;
    v8 = v48;
    if (v47)
      goto LABEL_4;
LABEL_5:
    v20 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_24;
    if (v20 >= v36)
      return v7;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    v22 = v8 + 1;
    if (!v21)
    {
      v22 = v8 + 2;
      if (v8 + 2 >= v36)
        return v7;
      v21 = *(_QWORD *)(v35 + 8 * v22);
      if (!v21)
      {
        v22 = v8 + 3;
        if (v8 + 3 >= v36)
          return v7;
        v21 = *(_QWORD *)(v35 + 8 * v22);
        if (!v21)
          break;
      }
    }
LABEL_18:
    v47 = (v21 - 1) & v21;
    v48 = v22;
  }
  v23 = v8 + 4;
  if (v8 + 4 >= v36)
    return v7;
  v21 = *(_QWORD *)(v35 + 8 * v23);
  if (v21)
  {
    v22 = v8 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v22 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v22 >= v36)
      return v7;
    v21 = *(_QWORD *)(v35 + 8 * v22);
    ++v23;
    if (v21)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t Date.beginningOfDay(timeZone:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, _QWORD, uint64_t);
  void *v61;
  char *v62;
  void (*v63)(char *, char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v3 = v2;
  v107 = a2;
  v5 = type metadata accessor for Date(0);
  v111 = *(_QWORD *)(v5 - 8);
  v112 = v5;
  __chkstk_darwin(v5);
  v109 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5EDC(&qword_1F7B80);
  __chkstk_darwin(v7);
  v97 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for DateComponents(0);
  v98 = *(_QWORD *)(v95 - 8);
  v9 = __chkstk_darwin(v95);
  v93 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v96 = (char *)&v92 - v11;
  v12 = type metadata accessor for Calendar(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v104 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5EDC(&qword_1F1310);
  v16 = __chkstk_darwin(v15);
  v105 = (uint64_t)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v94 = (char *)&v92 - v19;
  __chkstk_darwin(v18);
  v108 = (char *)&v92 - v20;
  v21 = type metadata accessor for TimeZone(0);
  v99 = *(_QWORD *)(v21 - 8);
  v100 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5EDC(&qword_1F7B88);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v92 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25);
  v103 = (char *)&v92 - v29;
  v30 = __chkstk_darwin(v28);
  v32 = (char *)&v92 - v31;
  __chkstk_darwin(v30);
  v110 = (uint64_t)&v92 - v33;
  if (qword_1F01A0 != -1)
    swift_once(&qword_1F01A0, sub_179D78);
  v34 = off_1F7B78;
  v35 = *(_QWORD *)((char *)&dword_10 + (_QWORD)off_1F7B78);
  v106 = v3;
  v101 = a1;
  if (v35 && (v36 = sub_390F8(a1), (v37 & 1) != 0))
  {
    v38 = *(_QWORD *)&stru_20.segname[(_QWORD)v34 + 16];
    v39 = v13;
    v40 = v110;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16))(v110, v38 + *(_QWORD *)(v13 + 72) * v36, v12);
    v41 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56);
    v42 = v40;
    v43 = 0;
  }
  else
  {
    v39 = v13;
    v41 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56);
    v40 = v110;
    v42 = v110;
    v43 = 1;
  }
  v102 = v41;
  v41(v42, v43, 1, v12);
  sub_17A300(v40, (uint64_t)v32);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v39 + 48);
  v45 = v44(v32, 1, v12);
  sub_417D8((uint64_t)v32, &qword_1F7B88);
  if (v45 == 1)
  {
    if (qword_1F0198 != -1)
      swift_once(&qword_1F0198, sub_179CB0);
    v46 = sub_5216C(v12, (uint64_t)qword_1F7B60);
    v47 = (uint64_t)v103;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v103, v46, v12);
    v102(v47, 0, 1, v12);
    v40 = v110;
    sub_17A348(v47, v110);
    if (!v44((char *)v40, 1, v12))
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v23, v101, v100);
      Calendar.timeZone.setter(v23);
    }
  }
  v48 = (uint64_t)v108;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v111 + 56))(v108, 1, 1, v112);
  sub_17A300(v40, (uint64_t)v27);
  if (v44(v27, 1, v12) == 1)
  {
    sub_417D8((uint64_t)v27, &qword_1F7B88);
    v49 = v106;
  }
  else
  {
    v50 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v92 = v13;
    v51 = v104;
    v50(v104, v27, v12);
    v52 = sub_5EDC(&qword_1F7B90);
    v53 = type metadata accessor for Calendar.Component(0);
    v54 = *(_QWORD *)(v53 - 8);
    v55 = *(_QWORD *)(v54 + 72);
    v56 = *(unsigned __int8 *)(v54 + 80);
    v57 = (v56 + 32) & ~v56;
    v58 = swift_allocObject(v52, v57 + 3 * v55, v56 | 7);
    *(_OWORD *)(v58 + 16) = xmmword_18CBA0;
    v59 = v58 + v57;
    v60 = *(void (**)(uint64_t, _QWORD, uint64_t))(v54 + 104);
    v60(v59, enum case for Calendar.Component.year(_:), v53);
    v60(v59 + v55, enum case for Calendar.Component.month(_:), v53);
    v60(v59 + 2 * v55, enum case for Calendar.Component.day(_:), v53);
    v61 = sub_893A8(v58);
    swift_setDeallocating(v58);
    swift_arrayDestroy(v59, 3, v53);
    swift_deallocClassInstance(v58, 32, 7);
    v62 = v96;
    v49 = v106;
    Calendar.dateComponents(_:from:)(v61, v106);
    swift_bridgeObjectRelease(v61);
    v63 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v64 = v103;
    v63(v103, v51, v12);
    v102((uint64_t)v64, 0, 1, v12);
    v66 = v99;
    v65 = v100;
    v67 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v97, v101, v100);
    v68 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v67, 0, 1, v65);
    v69 = DateComponents.year.getter(v68);
    v71 = v70 & 1;
    v72 = DateComponents.month.getter();
    v74 = v73 & 1;
    v75 = DateComponents.day.getter();
    v77 = v93;
    v78 = v72;
    v48 = (uint64_t)v108;
    v79 = DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(v64, v67, 0, 1, v69, v71, v78, v74, v75, v76 & 1, 0, 0, 0, 0, 0, 0, 0, 1, 0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
    v80 = (uint64_t)v94;
    DateComponents.date.getter(v79);
    v81 = *(void (**)(char *, uint64_t))(v98 + 8);
    v82 = v77;
    v83 = v95;
    v81(v82, v95);
    v81(v62, v83);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v104, v12);
    sub_417D8(v48, &qword_1F1310);
    sub_10AA28(v80, v48);
  }
  v84 = v105;
  sub_10AA28(v48, v105);
  v86 = v111;
  v85 = v112;
  (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v109, v49, v112);
  v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85);
  v88 = v110;
  if (v87 == 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v111 + 32))(v107, v109, v112);
    sub_417D8(v84, &qword_1F1310);
  }
  else
  {
    v90 = v111;
    v89 = v112;
    (*(void (**)(char *, uint64_t))(v111 + 8))(v109, v112);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 32))(v107, v84, v89);
  }
  return sub_417D8(v88, &qword_1F7B88);
}

uint64_t sub_179CB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  v0 = type metadata accessor for Calendar.Identifier(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Calendar(0);
  sub_5235C(v4, qword_1F7B60);
  sub_5216C(v4, (uint64_t)qword_1F7B60);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for Calendar.Identifier.gregorian(_:), v0);
  Calendar.init(identifier:)(v3);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

int *sub_179D78()
{
  int *result;

  result = (int *)sub_179D94();
  off_1F7B78 = result;
  return result;
}

uint64_t sub_179D94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t result;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  unsigned int (*v60)(char *, uint64_t, uint64_t);
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;

  v0 = sub_5EDC(&qword_1F7B80);
  v1 = __chkstk_darwin(v0);
  v66 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v68 = (char *)&v58 - v3;
  v4 = sub_5EDC(&qword_1F7B88);
  v5 = __chkstk_darwin(v4);
  v62 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v67 = (uint64_t)&v58 - v8;
  __chkstk_darwin(v7);
  v10 = (char *)&v58 - v9;
  v11 = type metadata accessor for TimeZone(0);
  v12 = *(_QWORD **)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v63 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v64 = (char *)&v58 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v58 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v58 - v20;
  v22 = type metadata accessor for Calendar(0);
  v23 = *(_QWORD **)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v69 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v65 = (char *)&v58 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)&v58 - v28;
  v71 = _swiftEmptyDictionarySingleton;
  if (qword_1F0198 != -1)
    swift_once(&qword_1F0198, sub_179CB0);
  v30 = sub_5216C(v22, (uint64_t)qword_1F7B60);
  v31 = (uint64_t (*)(char *, uint64_t, uint64_t))v23[2];
  v32 = v31(v29, v30, v22);
  static TimeZone.current.getter(v32);
  v33 = Calendar.timeZone.setter(v21);
  static TimeZone.current.getter(v33);
  v31(v10, (uint64_t)v29, v22);
  v61 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v23[7];
  v61(v10, 0, 1, v22);
  v60 = (unsigned int (*)(char *, uint64_t, uint64_t))v23[6];
  if (v60(v10, 1, v22) == 1)
  {
    sub_417D8((uint64_t)v10, &qword_1F7B88);
    v34 = v67;
    sub_17A390((uint64_t)v19, v67);
    v59 = (void (*)(char *, uint64_t))v12[1];
    v59(v19, v11);
    sub_417D8(v34, &qword_1F7B88);
  }
  else
  {
    v35 = (void (*)(char *, char *, uint64_t))v23[4];
    v58 = v11;
    v36 = v30;
    v37 = v23;
    v38 = v12;
    v39 = v29;
    v40 = v65;
    v35(v65, v10, v22);
    v41 = v71;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v71);
    v70 = v41;
    v43 = (uint64_t)v40;
    v29 = v39;
    v12 = v38;
    v23 = v37;
    v30 = v36;
    v11 = v58;
    sub_16FD94(v43, (uint64_t)v19, isUniquelyReferenced_nonNull_native);
    v71 = v70;
    swift_bridgeObjectRelease(0x8000000000000000);
    v59 = (void (*)(char *, uint64_t))v12[1];
    v59(v19, v11);
  }
  v44 = v69;
  v31(v69, v30, v22);
  v45 = v68;
  TimeZone.init(secondsFromGMT:)(0);
  v46 = (uint64_t (*)(char *, uint64_t, uint64_t))v12[6];
  result = v46(v45, 1, v11);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_13;
  }
  v48 = (void (*)(char *, char *, uint64_t))v12[4];
  v49 = v64;
  v48(v64, v45, v11);
  Calendar.timeZone.setter(v49);
  v50 = v66;
  TimeZone.init(secondsFromGMT:)(0);
  result = v46(v50, 1, v11);
  if ((_DWORD)result == 1)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v51 = (uint64_t)v63;
  v48(v63, v50, v11);
  v52 = (uint64_t)v62;
  v31(v62, (uint64_t)v44, v22);
  v61((char *)v52, 0, 1, v22);
  if (v60((char *)v52, 1, v22) == 1)
  {
    sub_417D8(v52, &qword_1F7B88);
    v53 = v67;
    sub_17A390(v51, v67);
    v59((char *)v51, v11);
    sub_417D8(v53, &qword_1F7B88);
  }
  else
  {
    v54 = (uint64_t)v65;
    ((void (*)(char *, uint64_t, uint64_t))v23[4])(v65, v52, v22);
    v55 = v71;
    v56 = swift_isUniquelyReferenced_nonNull_native(v71);
    v70 = v55;
    sub_16FD94(v54, v51, v56);
    v71 = v70;
    swift_bridgeObjectRelease(0x8000000000000000);
    v59((char *)v51, v11);
  }
  v57 = (void (*)(char *, uint64_t))v23[1];
  v57(v44, v22);
  v57(v29, v22);
  return (uint64_t)v71;
}

uint64_t sub_17A300(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F7B88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_17A348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F7B88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_17A390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_390F8(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v19 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_16B04C();
      v10 = v19;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for TimeZone(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for Calendar(0);
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v15 + 32))(a2, v13 + *(_QWORD *)(v15 + 72) * v7, v14);
    sub_16EE20(v7, v10);
    v16 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a2, 0, 1, v14);
  }
  else
  {
    v18 = type metadata accessor for Calendar(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a2, 1, 1, v18);
  }
}

uint64_t sub_17A4CC(uint64_t a1)
{
  return sub_17A4F4(a1, (void (*)(unint64_t, uint64_t))sub_16F774, (void (*)(void))sub_16CB70);
}

uint64_t sub_17A4E0(uint64_t a1)
{
  return sub_17A4F4(a1, (void (*)(unint64_t, uint64_t))sub_16F774, (void (*)(void))sub_16CB7C);
}

uint64_t sub_17A4F4(uint64_t a1, void (*a2)(unint64_t, uint64_t), void (*a3)(void))
{
  _QWORD *v3;
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v6 = v3;
  v8 = *v6;
  swift_bridgeObjectRetain(*v6);
  v9 = sub_39574(a1);
  LOBYTE(a1) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v12 = *v6;
  v18 = *v6;
  *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a3();
    v12 = v18;
  }
  v13 = *(_QWORD *)(v12 + 48);
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13 + *(_QWORD *)(*(_QWORD *)(v14 - 8) + 72) * v9, v14);
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v9);
  a2(v9, v12);
  v16 = *v6;
  *v6 = v12;
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_17A5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_17A5F4);
}

uint64_t sub_17A5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_17A670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_17A67C);
}

uint64_t sub_17A67C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for UserEncodingWork(uint64_t a1)
{
  uint64_t result;

  result = qword_1F7BF0;
  if (!qword_1F7BF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UserEncodingWork);
  return result;
}

uint64_t sub_17A730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  _BYTE v14[184];
  _BYTE v15[168];
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 8);
  sub_7328C(a1 + 48, (uint64_t)v14);
  sub_7328C((uint64_t)v14, (uint64_t)v15);
  if (sub_732D4((uint64_t)v15) == 1)
  {
    v3 = 0;
LABEL_6:
    v10 = sub_17AD68();
    v11 = swift_allocError(&type metadata for UserEncodingWork.Errors, v10, 0, 0);
    *v12 = v3;
    v8 = v11;
    swift_willThrow(v11);
    return v8;
  }
  v4 = v16;
  if (!*(_QWORD *)(v16 + 16))
  {
    v3 = 1;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for UserEncodingWork(0) + 20));
  v6 = type metadata accessor for Request(0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  swift_bridgeObjectRetain(v4);
  v7 = swift_retain(v5);
  v8 = Request.init(features:outputs:)(v7, v4);
  v9 = v17;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v9);
  return v8;
}

uint64_t sub_17A844()
{
  return 0x636E652072657375;
}

uint64_t sub_17A868@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_17A730(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_17A894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 24);
  swift_retain(a2);
  swift_bridgeObjectRetain(v5);
  v7 = sub_17A9B0(v6, a2);
  swift_bridgeObjectRelease();
  result = swift_release(a2);
  *a3 = v7;
  return result;
}

uint64_t sub_17A900(uint64_t a1)
{
  uint64_t result;

  result = sub_41754((unint64_t *)&qword_1F7C28, type metadata accessor for UserEncodingWork, (uint64_t)&unk_19D2E8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_17A93C()
{
  return sub_41754(&qword_1F7C30, type metadata accessor for UserEncodingWork, (uint64_t)&unk_19D294);
}

unint64_t sub_17A96C()
{
  unint64_t result;

  result = qword_1F7C38;
  if (!qword_1F7C38)
  {
    result = swift_getWitnessTable(&unk_19D368, &type metadata for UserEncodingWork.Context);
    atomic_store(result, (unint64_t *)&qword_1F7C38);
  }
  return result;
}

_QWORD *sub_17A9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD v36[2];
  __int128 v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a2;
  v4 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_FloatList(0);
  v44 = *(_QWORD *)(v4 - 8);
  v45 = v4;
  __chkstk_darwin(v4);
  v43 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Feature(0);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  __chkstk_darwin(v6);
  v40 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F14A0);
  __chkstk_darwin(v8);
  v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Feature(0);
  v11 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v39 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v36[1] = v2;
  swift_bridgeObjectRetain(a1);
  v14 = _swiftEmptyArrayStorage;
  v36[0] = a1;
  v15 = (_QWORD *)(a1 + 40);
  v37 = xmmword_1875E0;
  v38 = v10;
  do
  {
    v21 = *(v15 - 1);
    v22 = *v15;
    swift_bridgeObjectRetain(*v15);
    v50 = v21;
    Features.subscript.getter(v21, v22);
    v23 = v48;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v48) == 1)
    {
      sub_49988((uint64_t)v10);
      if (qword_1F0120 != -1)
        swift_once(&qword_1F0120, sub_12F8E0);
      v16 = (id)qword_1F61F8;
      v17 = static os_log_type_t.error.getter(v16);
      v18 = sub_5EDC(&qword_1F14C8);
      v19 = swift_allocObject(v18, 72, 7);
      *(_OWORD *)(v19 + 16) = v37;
      *(_QWORD *)(v19 + 56) = &type metadata for String;
      *(_QWORD *)(v19 + 64) = sub_4AAD8();
      *(_QWORD *)(v19 + 32) = v50;
      *(_QWORD *)(v19 + 40) = v22;
      *(_QWORD *)&v20 = swift_bridgeObjectRetain(v22).n128_u64[0];
      os_log(_:dso:log:type:_:)("Unable to extract user feature %{public}@ from output", 53, 2, &dword_0, v16, v17, v19, v20, v36[0]);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    else
    {
      v24 = *(uint64_t (**)(char *, char *, uint64_t))(v11 + 32);
      v47 = v14;
      v25 = v39;
      v26 = v24(v39, v10, v23);
      v27 = v40;
      v28 = Feature.protoFeature.getter(v26);
      v29 = v43;
      Com_Apple_News_Algorithms_Proto_Model_Feature.floatList.getter(v28);
      v30 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v27, v42);
      v46 = Com_Apple_News_Algorithms_Proto_Model_FloatList.values.getter(v30);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v45);
      v31 = v25;
      v14 = v47;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v31, v23);
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        v14 = sub_31AEC(0, v14[2] + 1, 1, v14);
      v33 = v14[2];
      v32 = v14[3];
      v10 = v38;
      if (v33 >= v32 >> 1)
        v14 = sub_31AEC((_QWORD *)(v32 > 1), v33 + 1, 1, v14);
      v14[2] = v33 + 1;
      v34 = &v14[3 * v33];
      v34[4] = v50;
      v34[5] = v22;
      v34[6] = v46;
    }
    v15 += 2;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v14;
}

unint64_t sub_17AD68()
{
  unint64_t result;

  result = qword_1F7C40;
  if (!qword_1F7C40)
  {
    result = swift_getWitnessTable(&unk_19D408, &type metadata for UserEncodingWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F7C40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UserEncodingWork.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_17ADF8 + 4 * byte_19D275[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_17AE2C + 4 * byte_19D270[v4]))();
}

uint64_t sub_17AE2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17AE34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17AE3CLL);
  return result;
}

uint64_t sub_17AE48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17AE50);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_17AE54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17AE5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserEncodingWork.Errors()
{
  return &type metadata for UserEncodingWork.Errors;
}

ValueMetadata *type metadata accessor for UserEncodingWork.Context()
{
  return &type metadata for UserEncodingWork.Context;
}

unint64_t sub_17AE8C()
{
  unint64_t result;

  result = qword_1F7C48;
  if (!qword_1F7C48)
  {
    result = swift_getWitnessTable(&unk_19D3E0, &type metadata for UserEncodingWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F7C48);
  }
  return result;
}

uint64_t RawRepresentable<>.containerName.getter()
{
  uint64_t v1;

  dispatch thunk of RawRepresentable.rawValue.getter(&v1);
  return v1;
}

_QWORD *sub_17AEF4(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v2 = a2;
  if ((a1 & 1) != 0)
  {
    swift_bridgeObjectRetain(a2);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if (v3)
    {
      swift_bridgeObjectRetain(a2);
      v4 = 0;
      v16 = v2;
      do
      {
        v8 = v2 + v4;
        v9 = *(double *)(v2 + v4 + 104);
        if (v9 >= 0.0)
        {
          v10 = *(_QWORD *)(v8 + 32);
          v20 = *(_BYTE *)(v8 + 40);
          v19 = *(_QWORD *)(v8 + 48);
          v18 = *(_BYTE *)(v8 + 56);
          v11 = *(_QWORD *)(v8 + 64);
          v12 = *(_BYTE *)(v8 + 72);
          v13 = *(_QWORD *)(v8 + 80);
          v17 = *(_QWORD *)(v8 + 88);
          v14 = *(_QWORD *)(v8 + 96);
          sub_40554(v11, v12);
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRetain(v13);
          if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
            sub_342E4(0, _swiftEmptyArrayStorage[2] + 1, 1);
          v6 = _swiftEmptyArrayStorage[2];
          v5 = _swiftEmptyArrayStorage[3];
          if (v6 >= v5 >> 1)
            sub_342E4(v5 > 1, v6 + 1, 1);
          _swiftEmptyArrayStorage[2] = v6 + 1;
          v7 = &_swiftEmptyArrayStorage[10 * v6];
          v7[4] = v10;
          *((_BYTE *)v7 + 40) = v20;
          v7[6] = v19;
          *((_BYTE *)v7 + 56) = v18;
          v7[8] = v11;
          *((_BYTE *)v7 + 72) = v12;
          v2 = v16;
          v7[10] = v13;
          v7[11] = v17;
          v7[12] = v14;
          *((double *)v7 + 13) = v9;
        }
        v4 += 80;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v2;
}

uint64_t Book.MediaType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F6F626F69647561;
  else
    return 0x6B6F6F6265;
}

BooksPersonalization::Book::Rationale __swiftcall Book.Rationale.init(conditionalScore:seedBooksByMethodology:)(Swift::Double conditionalScore, Swift::OpaquePointer seedBooksByMethodology)
{
  uint64_t v2;
  BooksPersonalization::Book::Rationale result;

  *(Swift::Double *)v2 = conditionalScore;
  *(Swift::OpaquePointer *)(v2 + 8) = seedBooksByMethodology;
  result.conditionalScore = conditionalScore;
  result.seedBooksByMethodology = seedBooksByMethodology;
  return result;
}

__n128 Book.init(storeID:mediaType:seriesID:sources:rationale:content:)@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, __n128 *a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  char v8;
  uint64_t v9;
  char v10;
  __n128 result;

  v8 = *a2;
  v9 = *a7;
  v10 = *((_BYTE *)a7 + 8);
  *(_QWORD *)a8 = a1;
  *(_BYTE *)(a8 + 8) = v8;
  *(_QWORD *)(a8 + 16) = a3;
  *(_BYTE *)(a8 + 24) = a4 & 1;
  *(_QWORD *)(a8 + 32) = v9;
  *(_BYTE *)(a8 + 40) = v10;
  *(_QWORD *)(a8 + 48) = a5;
  result = *a6;
  *(__n128 *)(a8 + 56) = *a6;
  return result;
}

Swift::Int sub_17B118(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0A90(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_47EC4(v5);
  *a1 = v2;
  return result;
}

_UNKNOWN **static Book.MediaType.allCases.getter()
{
  return &off_1D9E48;
}

uint64_t sub_17B190@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

unint64_t sub_17B1E4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000016;
  else
    return 0xD000000000000010;
}

uint64_t sub_17B224@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_17FA8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17B248(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17B3E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17B270(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17B3E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Book.Rationale.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;

  v4 = sub_5EDC(&qword_1F7C50);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_17B3E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Book.Rationale.CodingKeys, &type metadata for Book.Rationale.CodingKeys, v12, v10, v11);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v19, v4, v8);
  if (!v2)
  {
    v18 = v9;
    v17 = 1;
    v13 = sub_5EDC(&qword_1F56F8);
    v14 = sub_1068B0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v18, &v17, v4, v13, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_17B3E0()
{
  unint64_t result;

  result = qword_1F7C58;
  if (!qword_1F7C58)
  {
    result = swift_getWitnessTable(&unk_19E38C, &type metadata for Book.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7C58);
  }
  return result;
}

uint64_t Book.Rationale.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;

  v5 = sub_5EDC(&qword_1F7C60);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_17B3E0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Book.Rationale.CodingKeys, &type metadata for Book.Rationale.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v20 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
    v13 = sub_5EDC(&qword_1F56F8);
    v18 = 1;
    v14 = sub_106CBC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v13, &v18, v5, v13, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v19;
    *a2 = v12;
    *((_QWORD *)a2 + 1) = v15;
  }
  return sub_62F8(a1);
}

uint64_t sub_17B5A0@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return Book.Rationale.init(from:)(a1, a2);
}

uint64_t sub_17B5B4(_QWORD *a1)
{
  return Book.Rationale.encode(to:)(a1);
}

BooksPersonalization::Book::MediaType_optional __swiftcall Book.MediaType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1DAAC0;
  return (BooksPersonalization::Book::MediaType_optional)sub_12620(rawValue, v2, v1);
}

uint64_t sub_17B5D4(char *a1, char *a2)
{
  return sub_79260(*a1, *a2);
}

BooksPersonalization::Book::MediaType_optional sub_17B5E0(Swift::String *a1)
{
  return Book.MediaType.init(rawValue:)(*a1);
}

void sub_17B5EC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6B6F6F6265;
  if (*v1)
    v2 = 0x6F6F626F69647561;
  v3 = 0xE500000000000000;
  if (*v1)
    v3 = 0xE90000000000006BLL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_17B62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17FF8C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_17B688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17FF8C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_17B6D4(_QWORD *a1@<X8>)
{
  *a1 = &off_1DAB10;
}

Swift::Int sub_17B6E4()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x6F6F626F69647561;
  else
    v2 = 0x6B6F6F6265;
  if (v1)
    v3 = 0xE90000000000006BLL;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_17B764(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6F6F626F69647561;
  else
    v2 = 0x6B6F6F6265;
  if (*v1)
    v3 = 0xE90000000000006BLL;
  else
    v3 = 0xE500000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_17B7C0(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x6F6F626F69647561;
  else
    v3 = 0x6B6F6F6265;
  if (v2)
    v4 = 0xE90000000000006BLL;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

BooksPersonalization::Book::SaleType_optional __swiftcall Book.SaleType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1DAB38;
  return (BooksPersonalization::Book::SaleType_optional)sub_12620(rawValue, v2, v1);
}

uint64_t Book.SaleType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 1684627824;
  else
    return 1701147238;
}

BooksPersonalization::Book::SaleType_optional sub_17B86C(Swift::String *a1)
{
  return Book.SaleType.init(rawValue:)(*a1);
}

void sub_17B878(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 1701147238;
  if (*v1)
    v2 = 1684627824;
  *a1 = v2;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_17B8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17FF48();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_17B8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17FF48();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_17B948()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4, 0);
  if (v1)
    v2 = 1684627824;
  else
    v2 = 1701147238;
  String.hash(into:)(v4, v2, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_17B9AC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 1684627824;
  else
    v2 = 1701147238;
  String.hash(into:)(a1, v2, 0xE400000000000000);
  return swift_bridgeObjectRelease(0xE400000000000000);
}

Swift::Int sub_17B9E4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  _QWORD v5[9];

  v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2)
    v3 = 1684627824;
  else
    v3 = 1701147238;
  String.hash(into:)(v5, v3, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_17BA44(char *a1, char *a2)
{
  return sub_79304(*a1, *a2);
}

uint64_t sub_17BA50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17BE10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17BA78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17BE10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_17BAA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_17FB74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17BAC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17BDCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17BAEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17BDCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_17BB14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17BED0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17BB3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17BED0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Book.Content.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v3 = sub_5EDC(&qword_1F7C68);
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5EDC(&qword_1F7C70);
  v28 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5EDC(&qword_1F7C78);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *v1;
  v12 = *((_BYTE *)v1 + 8);
  v13 = a1[3];
  v14 = a1[4];
  sub_49F4(a1, v13);
  v15 = sub_17BDCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Book.Content.CodingKeys, &type metadata for Book.Content.CodingKeys, v15, v13, v14);
  if ((v12 & 1) != 0)
  {
    LOBYTE(v34) = 1;
    v16 = sub_17BE10();
    v17 = v33;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Book.Content.AudiobookCodingKeys, &v34, v33, &type metadata for Book.Content.AudiobookCodingKeys, v16);
    v34 = v31;
    v18 = sub_5EDC(&qword_1F7C90);
    v19 = sub_17BE54();
    v20 = v30;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, v21, v30, v18, v19);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v20);
  }
  else
  {
    LOBYTE(v34) = 0;
    v22 = sub_17BED0();
    v17 = v33;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Book.Content.EbookCodingKeys, &v34, v33, &type metadata for Book.Content.EbookCodingKeys, v22);
    v34 = v31;
    v23 = sub_5EDC(&qword_1F7C90);
    v24 = sub_17BE54();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, v25, v6, v23, v24);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v11, v17);
}

unint64_t sub_17BDCC()
{
  unint64_t result;

  result = qword_1F7C80;
  if (!qword_1F7C80)
  {
    result = swift_getWitnessTable(&unk_19E33C, &type metadata for Book.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7C80);
  }
  return result;
}

unint64_t sub_17BE10()
{
  unint64_t result;

  result = qword_1F7C88;
  if (!qword_1F7C88)
  {
    result = swift_getWitnessTable(&unk_19E2EC, &type metadata for Book.Content.AudiobookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7C88);
  }
  return result;
}

unint64_t sub_17BE54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F7C98;
  if (!qword_1F7C98)
  {
    v1 = sub_5F68(&qword_1F7C90);
    sub_17C374(&qword_1F7CA0, (uint64_t)&protocol conformance descriptor for JSON);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1F7C98);
  }
  return result;
}

unint64_t sub_17BED0()
{
  unint64_t result;

  result = qword_1F7CA8;
  if (!qword_1F7CA8)
  {
    result = swift_getWitnessTable(&unk_19E29C, &type metadata for Book.Content.EbookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7CA8);
  }
  return result;
}

uint64_t Book.Content.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;

  v38 = a2;
  v41 = sub_5EDC(&qword_1F7CB0);
  v39 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v40 = &v35[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_5EDC(&qword_1F7CB8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v35[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_5EDC(&qword_1F7CC0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v35[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a1[3];
  v13 = a1[4];
  v42 = a1;
  sub_49F4(a1, v12);
  v14 = sub_17BDCC();
  v15 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Book.Content.CodingKeys, &type metadata for Book.Content.CodingKeys, v14, v12, v13);
  if (!v15)
  {
    v37 = v5;
    v16 = v40;
    v17 = v41;
    v43 = v9;
    v18 = KeyedDecodingContainer.allKeys.getter(v8);
    if (*(_QWORD *)(v18 + 16) == 1)
    {
      v36 = *(unsigned __int8 *)(v18 + 32);
      if ((v36 & 1) != 0)
      {
        LOBYTE(v44) = 1;
        v19 = sub_17BE10();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Book.Content.AudiobookCodingKeys, &v44, v8, &type metadata for Book.Content.AudiobookCodingKeys, v19);
        v20 = sub_5EDC(&qword_1F7C90);
        v21 = sub_17C2F8();
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v20, v22, v17, v20, v21);
        (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v16, v17);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v11, v8);
      }
      else
      {
        LOBYTE(v44) = 0;
        v29 = sub_17BED0();
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for Book.Content.EbookCodingKeys, &v44, v8, &type metadata for Book.Content.EbookCodingKeys, v29);
        v30 = sub_5EDC(&qword_1F7C90);
        v31 = sub_17C2F8();
        KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v30, v32, v4, v30, v31);
        v33 = v43;
        (*(void (**)(_BYTE *, uint64_t))(v37 + 8))(v7, v4);
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v11, v8);
      }
      v34 = v38;
      *v38 = v44;
      *((_BYTE *)v34 + 8) = v36;
    }
    else
    {
      v23 = type metadata accessor for DecodingError(0);
      swift_allocError(v23, &protocol witness table for DecodingError, 0, 0);
      v25 = v24;
      sub_5EDC(&qword_1F2C58);
      *v25 = &type metadata for Book.Content;
      v26 = KeyedDecodingContainer.codingPath.getter(v8);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000000001A0EA0, 0);
      v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, enum case for DecodingError.typeMismatch(_:), v23);
      swift_willThrow(v27);
      swift_bridgeObjectRelease();
      (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v11, v8);
    }
  }
  return sub_62F8(v42);
}

unint64_t sub_17C2F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F7CC8;
  if (!qword_1F7CC8)
  {
    v1 = sub_5F68(&qword_1F7C90);
    sub_17C374(&qword_1F7CD0, (uint64_t)&protocol conformance descriptor for JSON);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1F7CC8);
  }
  return result;
}

uint64_t sub_17C374(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for JSON(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_17C3B4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Book.Content.init(from:)(a1, a2);
}

uint64_t sub_17C3C8(_QWORD *a1)
{
  return Book.Content.encode(to:)(a1);
}

uint64_t Book.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = v2;
  v3 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 8) = v3;
  return sub_40554(v2, v3);
}

uint64_t Book.rationale.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 64);
  *a1 = *(_QWORD *)(v1 + 56);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_17C3FC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_17C42C + 4 * byte_19D450[*v0]))(0x444965726F7473, 0xE700000000000000);
}

uint64_t sub_17C42C()
{
  return 0x707954616964656DLL;
}

uint64_t sub_17C49C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_17FC68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_17C4C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17C7AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17C4E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17C7AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Book.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  char v34;

  v4 = sub_5EDC(&qword_1F7CD8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v33 = *((unsigned __int8 *)v1 + 8);
  v30 = v1[2];
  v29 = *((unsigned __int8 *)v1 + 24);
  v28 = v1[4];
  v27 = *((unsigned __int8 *)v1 + 40);
  v9 = v1[6];
  v24 = v1[7];
  v25 = v1[8];
  v26 = v9;
  v11 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v11);
  v12 = sub_17C7AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Book.CodingKeys, &type metadata for Book.CodingKeys, v12, v11, v10);
  LOBYTE(v31) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v31, v4);
  if (!v2)
  {
    v13 = v29;
    v14 = v30;
    v15 = v27;
    v16 = v28;
    LOBYTE(v31) = v33;
    v34 = 1;
    v17 = sub_7C1CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v34, v4, &type metadata for Book.MediaType, v17);
    LOBYTE(v31) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v13, &v31, v4);
    v31 = v16;
    LOBYTE(v32) = v15;
    v34 = 3;
    v18 = sub_17C7F0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v34, v4, &type metadata for Book.Content, v18);
    v31 = v26;
    v34 = 4;
    v19 = sub_5EDC(&qword_1F28B0);
    v20 = sub_201AC(&qword_1F28B8, &qword_1F28B0, (void (*)(void))sub_7E0D8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v34, v4, v19, v20);
    v31 = v24;
    v32 = v25;
    v34 = 5;
    v21 = sub_17C834();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v34, v4, &type metadata for Book.Rationale, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_17C7AC()
{
  unint64_t result;

  result = qword_1F7CE0;
  if (!qword_1F7CE0)
  {
    result = swift_getWitnessTable(&unk_19E24C, &type metadata for Book.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7CE0);
  }
  return result;
}

unint64_t sub_17C7F0()
{
  unint64_t result;

  result = qword_1F7CE8;
  if (!qword_1F7CE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Content, &type metadata for Book.Content);
    atomic_store(result, (unint64_t *)&qword_1F7CE8);
  }
  return result;
}

unint64_t sub_17C834()
{
  unint64_t result;

  result = qword_1F7CF0;
  if (!qword_1F7CF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Rationale, &type metadata for Book.Rationale);
    atomic_store(result, (unint64_t *)&qword_1F7CF0);
  }
  return result;
}

uint64_t Book.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v5 = sub_5EDC(&qword_1F7CF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_17C7AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Book.CodingKeys, &type metadata for Book.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  LOBYTE(v33) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  v36 = 1;
  v13 = sub_7C254();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, &type metadata for Book.MediaType, &v36, v5, &type metadata for Book.MediaType, v13);
  v14 = v33;
  LOBYTE(v33) = 2;
  v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
  v31 = v16;
  v32 = v15;
  v35 = v14;
  v36 = 3;
  v17 = sub_17CC00();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v33, &type metadata for Book.Content, &v36, v5, &type metadata for Book.Content, v17);
  v18 = v33;
  v19 = v34;
  v28 = sub_5EDC(&qword_1F28B0);
  v29 = v18;
  v36 = 4;
  v30 = v19;
  sub_40554(v18, v19);
  v20 = sub_201AC(&qword_1F28D8, &qword_1F28B0, (void (*)(void))sub_7E160, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, v28, &v36, v5, v28, v20);
  v21 = v33;
  v36 = 5;
  v22 = sub_17CC44();
  swift_bridgeObjectRetain(v21);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v33, &type metadata for Book.Rationale, &v36, v5, &type metadata for Book.Rationale, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v24 = v33;
  v23 = v34;
  v25 = v29;
  v26 = v30;
  sub_40554(v29, v30);
  swift_bridgeObjectRetain(v23);
  sub_40568(v25, v26);
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v35;
  *(_QWORD *)(a2 + 16) = v32;
  *(_BYTE *)(a2 + 24) = v31 & 1;
  *(_QWORD *)(a2 + 32) = v25;
  *(_BYTE *)(a2 + 40) = v26;
  *(_QWORD *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v24;
  *(_QWORD *)(a2 + 64) = v23;
  sub_62F8(a1);
  sub_40568(v25, v26);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_17CC00()
{
  unint64_t result;

  result = qword_1F7D00;
  if (!qword_1F7D00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Content, &type metadata for Book.Content);
    atomic_store(result, (unint64_t *)&qword_1F7D00);
  }
  return result;
}

unint64_t sub_17CC44()
{
  unint64_t result;

  result = qword_1F7D08;
  if (!qword_1F7D08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Rationale, &type metadata for Book.Rationale);
    atomic_store(result, (unint64_t *)&qword_1F7D08);
  }
  return result;
}

uint64_t sub_17CC88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Book.init(from:)(a1, a2);
}

uint64_t sub_17CC9C(_QWORD *a1)
{
  return Book.encode(to:)(a1);
}

uint64_t sub_17CCB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17D7C4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_17CD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_17D7C4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_17CD58@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_17B190(a1, a2);
}

uint64_t sub_17CD6C()
{
  return 0x6E656D7461657274;
}

uint64_t sub_17CD8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6E656D7461657274 && a2 == 0xEB00000000444974)
  {
    result = swift_bridgeObjectRelease(0xEB00000000444974);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E656D7461657274, 0xEB00000000444974, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_17CE38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17CEBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17CE60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17CEBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t UserInfo.encode(to:)(_QWORD *a1)
{
  return sub_17D1B4(a1, &qword_1F7D10, (uint64_t (*)(void))sub_17CEBC, (uint64_t)&type metadata for UserInfo.CodingKeys, (void (*)(uint64_t, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

unint64_t sub_17CEBC()
{
  unint64_t result;

  result = qword_1F7D18;
  if (!qword_1F7D18)
  {
    result = swift_getWitnessTable(&unk_19E1FC, &type metadata for UserInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7D18);
  }
  return result;
}

uint64_t UserInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F7D20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_17CEBC();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for UserInfo.CodingKeys, &type metadata for UserInfo.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_62F8(a1);
}

uint64_t sub_17D01C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return UserInfo.init(from:)(a1, a2);
}

uint64_t sub_17D030(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_17D458(a1, a2, a3, &qword_1F7D10, (uint64_t (*)(void))sub_17CEBC, (uint64_t)&type metadata for UserInfo.CodingKeys, (void (*)(uint64_t, uint64_t))&KeyedEncodingContainer.encodeIfPresent(_:forKey:));
}

uint64_t sub_17D064()
{
  return 0x437972746E756F63;
}

uint64_t sub_17D084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x437972746E756F63 && a2 == 0xEB0000000065646FLL)
  {
    result = swift_bridgeObjectRelease(0xEB0000000065646FLL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x437972746E756F63, 0xEB0000000065646FLL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_17D130(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17D2B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_17D158(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_17D2B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t StoreInfo.encode(to:)(_QWORD *a1)
{
  return sub_17D1B4(a1, &qword_1F7D28, (uint64_t (*)(void))sub_17D2B0, (uint64_t)&type metadata for StoreInfo.CodingKeys, (void (*)(uint64_t, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_17D1B4(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  void (*v20)(uint64_t, uint64_t);

  v20 = a5;
  v19 = a3;
  v8 = sub_5EDC(a2);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = v5[1];
  v18 = *v5;
  v14 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v14);
  v15 = v19();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v15, v14, v13);
  v20(v18, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_17D2B0()
{
  unint64_t result;

  result = qword_1F7D30;
  if (!qword_1F7D30)
  {
    result = swift_getWitnessTable(&unk_19E1AC, &type metadata for StoreInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7D30);
  }
  return result;
}

uint64_t StoreInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F7D38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_17D2B0();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for StoreInfo.CodingKeys, &type metadata for StoreInfo.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v13;
    a2[1] = v15;
  }
  return sub_62F8(a1);
}

uint64_t sub_17D410@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return StoreInfo.init(from:)(a1, a2);
}

uint64_t sub_17D424(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_17D458(a1, a2, a3, &qword_1F7D28, (uint64_t (*)(void))sub_17D2B0, (uint64_t)&type metadata for StoreInfo.CodingKeys, (void (*)(uint64_t, uint64_t))&KeyedEncodingContainer.encode(_:forKey:));
}

uint64_t sub_17D458(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6, void (*a7)(uint64_t, uint64_t))
{
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  void (*v22)(uint64_t, uint64_t);

  v22 = a7;
  v21 = a5;
  v10 = sub_5EDC(a4);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v7[1];
  v20 = *v7;
  v16 = a1[3];
  v15 = a1[4];
  sub_49F4(a1, v16);
  v17 = v21();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v17, v16, v15);
  v22(v20, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

void BookRecommendationServiceError.description.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t sub_17D5D4()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v3;

  v1._countAndFlagsBits = v0 + 11;
  v1._object = (void *)0x80000000001A0B60;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0x80000000001A0B60);
  return v3;
}

uint64_t BookRecommendationRequest.collection.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  return sub_13156C(v2, v3, v4, v5, v6, v7, v8, v9);
}

void BookRecommendationRequest.overrideSource.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 72);
}

void BookRecommendationRequest.overrideScorer.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 73);
}

uint64_t BookRecommendationRequest.allowNegativeScores.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 74);
}

__n128 BookRecommendationRequest.init(collection:allowNegativeScores:overrideSource:overrideScorer:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  char v6;
  char v7;
  __int128 v8;
  __n128 result;
  __int128 v10;

  v5 = *(_QWORD *)(a1 + 64);
  v6 = *a3;
  v7 = *a4;
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v8;
  result = *(__n128 *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a5 + 32) = result;
  *(_OWORD *)(a5 + 48) = v10;
  *(_QWORD *)(a5 + 64) = v5;
  *(_BYTE *)(a5 + 72) = v6;
  *(_BYTE *)(a5 + 73) = v7;
  *(_BYTE *)(a5 + 74) = a2;
  return result;
}

unint64_t sub_17D6E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F7D40;
  if (!qword_1F7D40)
  {
    v1 = sub_5F68(&qword_1F7D48);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F7D40);
  }
  return result;
}

unint64_t sub_17D734()
{
  unint64_t result;

  result = qword_1F7D50;
  if (!qword_1F7D50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.MediaType, &type metadata for Book.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F7D50);
  }
  return result;
}

unint64_t sub_17D77C()
{
  unint64_t result;

  result = qword_1F7D58;
  if (!qword_1F7D58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.SaleType, &type metadata for Book.SaleType);
    atomic_store(result, (unint64_t *)&qword_1F7D58);
  }
  return result;
}

unint64_t sub_17D7C4()
{
  unint64_t result;

  result = qword_1F7D60;
  if (!qword_1F7D60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SaleOptions, &type metadata for SaleOptions);
    atomic_store(result, (unint64_t *)&qword_1F7D60);
  }
  return result;
}

unint64_t sub_17D80C()
{
  unint64_t result;

  result = qword_1F7D68;
  if (!qword_1F7D68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SaleOptions, &type metadata for SaleOptions);
    atomic_store(result, (unint64_t *)&qword_1F7D68);
  }
  return result;
}

unint64_t sub_17D854()
{
  unint64_t result;

  result = qword_1F7D70;
  if (!qword_1F7D70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SaleOptions, &type metadata for SaleOptions);
    atomic_store(result, (unint64_t *)&qword_1F7D70);
  }
  return result;
}

unint64_t sub_17D89C()
{
  unint64_t result;

  result = qword_1F7D78;
  if (!qword_1F7D78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SaleOptions, &type metadata for SaleOptions);
    atomic_store(result, (unint64_t *)&qword_1F7D78);
  }
  return result;
}

uint64_t initializeWithCopy for Book(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (_QWORD *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 == 255)
  {
    *(_QWORD *)(a1 + 32) = *v4;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    v6 = *v4;
    *(_QWORD *)(a1 + 32) = *v4;
    *(_BYTE *)(a1 + 40) = v5 & 1;
    swift_bridgeObjectRetain(v6);
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for Book(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a1 + 32;
  v6 = (uint64_t *)(a2 + 32);
  v7 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v7 == 255)
    {
      v9 = *v6;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)v5 = v9;
    }
    else
    {
      v11 = *v6;
      *(_QWORD *)(a1 + 32) = *v6;
      *(_BYTE *)(a1 + 40) = v7 & 1;
      swift_bridgeObjectRetain(v11);
    }
  }
  else if (v7 == 255)
  {
    sub_42750((_QWORD *)(a1 + 32));
    v8 = *((_BYTE *)v6 + 8);
    *(_QWORD *)v5 = *v6;
    *(_BYTE *)(v5 + 8) = v8;
  }
  else
  {
    v10 = *v6;
    *(_QWORD *)(a1 + 32) = *v6;
    *(_BYTE *)(a1 + 40) = v7 & 1;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Book(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = a1 + 32;
  v5 = a2 + 32;
  if (*(unsigned __int8 *)(a1 + 40) != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 != 255)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v5;
      *(_BYTE *)(a1 + 40) = v6 & 1;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_42750((_QWORD *)(a1 + 32));
  }
  *(_QWORD *)v4 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Book(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Book(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Book()
{
  return &type metadata for Book;
}

_QWORD *assignWithCopy for Book.Rationale(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for Book.Rationale(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  *a1 = *a2;
  v3 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for Book.Rationale()
{
  return &type metadata for Book.Rationale;
}

ValueMetadata *type metadata accessor for Book.MediaType()
{
  return &type metadata for Book.MediaType;
}

ValueMetadata *type metadata accessor for Book.SaleType()
{
  return &type metadata for Book.SaleType;
}

uint64_t initializeBufferWithCopyOfBuffer for Book.Content(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for Book.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t *assignWithTake for Book.Content(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for Book.Content()
{
  return &type metadata for Book.Content;
}

ValueMetadata *type metadata accessor for SaleOptions()
{
  return &type metadata for SaleOptions;
}

ValueMetadata *type metadata accessor for UserInfo()
{
  return &type metadata for UserInfo;
}

ValueMetadata *type metadata accessor for StoreInfo()
{
  return &type metadata for StoreInfo;
}

uint64_t *initializeWithCopy for Collection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  sub_13156C(*a2, v4, v5, v6, v7, v8, v9, v10);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  return a1;
}

uint64_t *assignWithCopy for Collection(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  sub_13156C(*a2, v4, v5, v6, v7, v8, v9, v10);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  sub_F28F4(v12, v13, v14, v15, v16, v17, v18, v19);
  return a1;
}

uint64_t *assignWithTake for Collection(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v3 = *(_QWORD *)(a2 + 64);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v12;
  v13 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = v13;
  a1[8] = v3;
  sub_F28F4(v4, v6, v5, v7, v8, v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for Collection(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 32) >> 2) & 0xFFFFFF80 | (*(_QWORD *)(a1 + 32) >> 1);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Collection(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = (4 * -a2) & 0x3FFFFFE00 | (2 * (-a2 & 0x7FLL));
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_17E008(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) >> 61;
}

uint64_t sub_17E014(uint64_t result)
{
  *(_QWORD *)(result + 48) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_17E024(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 48) & 1 | (a2 << 61);
  *(_QWORD *)(result + 32) &= 0x101uLL;
  *(_QWORD *)(result + 48) = v2;
  return result;
}

ValueMetadata *type metadata accessor for Collection()
{
  return &type metadata for Collection;
}

uint64_t storeEnumTagSinglePayload for BookRecommendationServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_17E0A4 + 4 * byte_19D46D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_17E0D8 + 4 * byte_19D468[v4]))();
}

uint64_t sub_17E0D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17E0E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17E0E8);
  return result;
}

uint64_t sub_17E0F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17E0FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_17E100(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17E108(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BookRecommendationServiceError()
{
  return &type metadata for BookRecommendationServiceError;
}

uint64_t _s20BooksPersonalization10CollectionOwxx_0(uint64_t a1)
{
  return sub_F28F4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for BookRecommendationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  sub_13156C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v13;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  return a1;
}

uint64_t assignWithCopy for BookRecommendationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  sub_13156C(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v21;
  sub_F28F4(v12, v13, v14, v15, v16, v17, v18, v19);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  return a1;
}

__n128 initializeWithTake for BookRecommendationRequest(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 59) = *(_OWORD *)(a2 + 59);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for BookRecommendationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = v4;
  sub_F28F4(v5, v6, v7, v8, v9, v10, v11, v12);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookRecommendationRequest(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 75))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 32) >> 2) & 0xFFFFFF80 | (*(_QWORD *)(a1 + 32) >> 1);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for BookRecommendationRequest(uint64_t a1, int a2, int a3)
{
  double result;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 74) = 0;
    *(_WORD *)(a1 + 72) = 0;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 75) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_QWORD *)(a1 + 32) = (4 * -a2) & 0x3FFFFFE00 | (2 * (-a2 & 0x7FLL));
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 75) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookRecommendationRequest()
{
  return &type metadata for BookRecommendationRequest;
}

uint64_t sub_17E44C()
{
  _QWORD *v0;

  sub_62F8(v0 + 2);
  sub_62F8(v0 + 7);
  sub_62F8(v0 + 12);
  sub_62F8(v0 + 17);
  return swift_deallocClassInstance(v0, 176, 7);
}

uint64_t type metadata accessor for BookRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization25BookRecommendationService);
}

ValueMetadata *type metadata accessor for StoreInfo.CodingKeys()
{
  return &type metadata for StoreInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for UserInfo.CodingKeys()
{
  return &type metadata for UserInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Book.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_17E518 + 4 * byte_19D477[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_17E54C + 4 * byte_19D472[v4]))();
}

uint64_t sub_17E54C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17E554(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17E55CLL);
  return result;
}

uint64_t sub_17E568(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17E570);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_17E574(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17E57C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Book.CodingKeys()
{
  return &type metadata for Book.CodingKeys;
}

ValueMetadata *type metadata accessor for Book.Content.CodingKeys()
{
  return &type metadata for Book.Content.CodingKeys;
}

ValueMetadata *type metadata accessor for Book.Content.EbookCodingKeys()
{
  return &type metadata for Book.Content.EbookCodingKeys;
}

uint64_t _s20BooksPersonalization9StoreInfoV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_17E5F8 + 4 * byte_19D47C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_17E618 + 4 * byte_19D481[v4]))();
}

_BYTE *sub_17E5F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_17E618(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_17E620(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_17E628(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_17E630(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_17E638(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Book.Content.AudiobookCodingKeys()
{
  return &type metadata for Book.Content.AudiobookCodingKeys;
}

uint64_t _s20BooksPersonalization4BookV9MediaTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_17E6A0 + 4 * byte_19D48B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_17E6D4 + 4 * byte_19D486[v4]))();
}

uint64_t sub_17E6D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_17E6DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x17E6E4);
  return result;
}

uint64_t sub_17E6F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x17E6F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_17E6FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_17E704(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Book.Rationale.CodingKeys()
{
  return &type metadata for Book.Rationale.CodingKeys;
}

unint64_t sub_17E724()
{
  unint64_t result;

  result = qword_1F7E40;
  if (!qword_1F7E40)
  {
    result = swift_getWitnessTable(&unk_19DD14, &type metadata for Book.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E40);
  }
  return result;
}

unint64_t sub_17E76C()
{
  unint64_t result;

  result = qword_1F7E48;
  if (!qword_1F7E48)
  {
    result = swift_getWitnessTable(&unk_19DDCC, &type metadata for Book.Content.AudiobookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E48);
  }
  return result;
}

unint64_t sub_17E7B4()
{
  unint64_t result;

  result = qword_1F7E50;
  if (!qword_1F7E50)
  {
    result = swift_getWitnessTable(&unk_19DE84, &type metadata for Book.Content.EbookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E50);
  }
  return result;
}

unint64_t sub_17E7FC()
{
  unint64_t result;

  result = qword_1F7E58;
  if (!qword_1F7E58)
  {
    result = swift_getWitnessTable(&unk_19DF3C, &type metadata for Book.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E58);
  }
  return result;
}

unint64_t sub_17E844()
{
  unint64_t result;

  result = qword_1F7E60;
  if (!qword_1F7E60)
  {
    result = swift_getWitnessTable(&unk_19DFF4, &type metadata for Book.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E60);
  }
  return result;
}

unint64_t sub_17E88C()
{
  unint64_t result;

  result = qword_1F7E68;
  if (!qword_1F7E68)
  {
    result = swift_getWitnessTable(&unk_19E0AC, &type metadata for UserInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E68);
  }
  return result;
}

unint64_t sub_17E8D4()
{
  unint64_t result;

  result = qword_1F7E70;
  if (!qword_1F7E70)
  {
    result = swift_getWitnessTable(&unk_19E164, &type metadata for StoreInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E70);
  }
  return result;
}

uint64_t sub_17E918(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  v4 = *a2;
  *(_OWORD *)(v3 + 4384) = a2[1];
  v5 = a2[3];
  *(_OWORD *)(v3 + 4400) = a2[2];
  *(_OWORD *)(v3 + 4416) = v5;
  *(_QWORD *)(v3 + 4744) = v2;
  *(_QWORD *)(v3 + 4736) = a1;
  *(_OWORD *)(v3 + 4368) = v4;
  *(_OWORD *)(v3 + 4427) = *(__int128 *)((char *)a2 + 59);
  return swift_task_switch(sub_17E95C, 0, 0);
}

uint64_t sub_17E95C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 4744);
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 4752) = v5;
  *v5 = v0;
  v5[1] = sub_17E9EC;
  return v7(v0 + 3280, v2, v3);
}

uint64_t sub_17E9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 4752);
  *(_QWORD *)(*(_QWORD *)v1 + 4760) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_17F168;
  else
    v3 = sub_17EA50;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_17EA50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 4744);
  memcpy((void *)(v0 + 16), (const void *)(v0 + 3280), 0x440uLL);
  sub_49F4((_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 80));
  sub_F2958(v0 + 4368, v0 + 4520);
  sub_F2958(v0 + 4520, v0 + 4664);
  memcpy((void *)(v0 + 2192), (const void *)(v0 + 16), 0x440uLL);
  sub_17FF00(v0 + 4440, v0 + 4443);
  sub_17FF00(v0 + 4443, v0 + 4444);
  sub_12A970((_QWORD *)(v0 + 4368), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_13156C);
  v2 = (_QWORD *)swift_task_alloc(dword_1F631C);
  *(_QWORD *)(v0 + 4768) = v2;
  *v2 = v0;
  v2[1] = sub_17EB80;
  return sub_12FD90(v0 + 4445, v0 + 4664, v0 + 2192, (_BYTE *)(v0 + 4444));
}

uint64_t sub_17EB80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = (_QWORD *)(*v2 + 4368);
  v5 = *(_QWORD *)(*v2 + 4768);
  *(_QWORD *)(v3 + 4776) = a1;
  *(_QWORD *)(v3 + 4784) = v1;
  swift_task_dealloc(v5);
  sub_12A970(v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_F28F4);
  if (v1)
    v6 = sub_17ED08;
  else
    v6 = sub_17EC0C;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_17EC0C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[593];
  v2 = v1[20];
  v3 = v1[21];
  sub_49F4(v1 + 17, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[599] = v5;
  *v5 = v0;
  v5[1] = sub_17EC90;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[597], v2, v3);
}

uint64_t sub_17EC90(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 4792);
  *(_QWORD *)(v3 + 4800) = a1;
  *(_QWORD *)(v3 + 4808) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_17F174;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = sub_17ED3C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_17ED08()
{
  uint64_t v0;

  sub_5B70(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17ED3C()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;

  v1 = *(unsigned __int8 *)(v0 + 4441);
  if (v1 == 3)
  {
    sub_F2958(v0 + 4520, v0 + 4592);
    __asm { BR              X11 }
  }
  sub_49F4((_QWORD *)(*(_QWORD *)(v0 + 4744) + 96), *(_QWORD *)(*(_QWORD *)(v0 + 4744) + 120));
  memcpy((void *)(v0 + 1104), (const void *)(v0 + 16), 0x440uLL);
  *(_BYTE *)(v0 + 4446) = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_1F284C);
  *(_QWORD *)(v0 + 4816) = v2;
  *v2 = v0;
  v2[1] = sub_17EE74;
  return sub_7D0B8(*(_QWORD *)(v0 + 4800), v0 + 1104, (_BYTE *)(v0 + 4446));
}

uint64_t sub_17EE74(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 4816);
  *(_QWORD *)(*v2 + 4824) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  if (v1)
  {
    v6 = sub_17F134;
  }
  else
  {
    *(_QWORD *)(v4 + 4832) = a1;
    v6 = sub_17EEF8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_17EEF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 4832);
  v2 = *(_QWORD *)(v0 + 4824);
  sub_12A970((_QWORD *)(v0 + 4368), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_13156C);
  v3 = sub_17F784(v1, v0 + 4368);
  sub_12A970((_QWORD *)(v0 + 4368), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_F28F4);
  swift_bridgeObjectRelease();
  v4 = sub_17AEF4(*(_BYTE *)(v0 + 4442), (uint64_t)v3);
  swift_bridgeObjectRelease();
  v6 = v4;
  swift_bridgeObjectRetain(v4);
  sub_17B118((uint64_t *)&v6);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    sub_F2958(v0 + 4520, v0 + 4448);
    __asm { BR              X11 }
  }
  return swift_release(v6);
}

uint64_t sub_17EFFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  *(_QWORD *)(v2 + 4496) = a1 & 0x1FFFFFFFFFFFFFFFLL;
  v3 = sub_2CCAC(0x7FFFFFFFFFFFFFFFLL, v1);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  if ((v8 & 1) == 0)
    goto LABEL_2;
  v11 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v12 = swift_unknownObjectRetain_n(v3, 2);
  v13 = (_QWORD *)swift_dynamicCastClass(v12, v11);
  if (!v13)
  {
    swift_unknownObjectRelease(v3);
    v13 = _swiftEmptyArrayStorage;
  }
  v14 = v13[2];
  v15 = swift_release(v13);
  if (__OFSUB__(v9 >> 1, v7))
  {
    __break(1u);
    goto LABEL_11;
  }
  v15 = v3;
  if (v14 != (v9 >> 1) - v7)
  {
LABEL_11:
    swift_unknownObjectRelease(v15);
LABEL_2:
    v10 = sub_382A8(v3, v5, v7, v9);
    goto LABEL_9;
  }
  v10 = (_QWORD *)swift_dynamicCastClass(v3, v11);
  if (!v10)
  {
    swift_unknownObjectRelease(v3);
    v10 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  v16 = *(_QWORD **)(v2 + 4736);
  swift_unknownObjectRelease(v3);
  *v16 = v10;
  memcpy(v16 + 1, (const void *)(v2 + 16), 0x440uLL);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_17F134()
{
  uint64_t v0;

  sub_5B70(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17F168()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17F174()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_5B70(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_17F1B4(uint64_t a1, _OWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v6 = *v2;
  v7 = swift_task_alloc(dword_1F7EFC);
  *(_QWORD *)(v3 + 16) = v7;
  v8 = a2[1];
  *(_OWORD *)(v7 + 4368) = *a2;
  v9 = a2[2];
  *(_OWORD *)(v7 + 4416) = a2[3];
  *(_OWORD *)(v7 + 4400) = v9;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_4814;
  *(_QWORD *)(v7 + 4744) = v6;
  *(_QWORD *)(v7 + 4736) = a1;
  *(_OWORD *)(v7 + 4384) = v8;
  *(_OWORD *)(v7 + 4427) = *(_OWORD *)((char *)a2 + 59);
  return swift_task_switch(sub_17E95C, 0, 0);
}

uint64_t sub_17F250(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 2208) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 2224) = v3;
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v2 + 2240) = *(_OWORD *)(a1 + 32);
  v5 = *v1;
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_WORD *)(a1 + 72);
  v8 = *(_BYTE *)(a1 + 74);
  *(_OWORD *)(v2 + 2256) = v4;
  *(_QWORD *)(v2 + 2272) = v6;
  *(_WORD *)(v2 + 2280) = v7;
  *(_BYTE *)(v2 + 2282) = v8;
  v9 = swift_task_alloc(dword_1F7EFC);
  *(_QWORD *)(v2 + 2288) = v9;
  *(_QWORD *)v9 = v2;
  *(_QWORD *)(v9 + 8) = sub_17F324;
  *(_QWORD *)(v9 + 4744) = v5;
  *(_QWORD *)(v9 + 4736) = v2 + 16;
  v10 = *(_OWORD *)(v2 + 2224);
  v11 = *(_OWORD *)(v2 + 2240);
  v12 = *(_OWORD *)(v2 + 2256);
  *(_OWORD *)(v9 + 4427) = *(_OWORD *)(v2 + 2267);
  *(_OWORD *)(v9 + 4416) = v12;
  *(_OWORD *)(v9 + 4400) = v11;
  *(_OWORD *)(v9 + 4384) = v10;
  *(_OWORD *)(v9 + 4368) = *(_OWORD *)(v2 + 2208);
  return swift_task_switch(sub_17E95C, 0, 0);
}

uint64_t sub_17F324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2288);
  *(_QWORD *)(*(_QWORD *)v1 + 2296) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_17F388;
  else
    v3 = sub_CE418;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_17F388()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_17F398()
{
  unint64_t result;

  result = qword_1F7E88;
  if (!qword_1F7E88)
  {
    result = swift_getWitnessTable(&unk_19E0D4, &type metadata for StoreInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E88);
  }
  return result;
}

unint64_t sub_17F3E0()
{
  unint64_t result;

  result = qword_1F7E90;
  if (!qword_1F7E90)
  {
    result = swift_getWitnessTable(&unk_19E0FC, &type metadata for StoreInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E90);
  }
  return result;
}

unint64_t sub_17F428()
{
  unint64_t result;

  result = qword_1F7E98;
  if (!qword_1F7E98)
  {
    result = swift_getWitnessTable(&unk_19E01C, &type metadata for UserInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7E98);
  }
  return result;
}

unint64_t sub_17F470()
{
  unint64_t result;

  result = qword_1F7EA0;
  if (!qword_1F7EA0)
  {
    result = swift_getWitnessTable(&unk_19E044, &type metadata for UserInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7EA0);
  }
  return result;
}

unint64_t sub_17F4B8()
{
  unint64_t result;

  result = qword_1F7EA8;
  if (!qword_1F7EA8)
  {
    result = swift_getWitnessTable(&unk_19DF64, &type metadata for Book.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7EA8);
  }
  return result;
}

unint64_t sub_17F500()
{
  unint64_t result;

  result = qword_1F7EB0;
  if (!qword_1F7EB0)
  {
    result = swift_getWitnessTable(&unk_19DF8C, &type metadata for Book.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7EB0);
  }
  return result;
}

unint64_t sub_17F548()
{
  unint64_t result;

  result = qword_1F7EB8;
  if (!qword_1F7EB8)
  {
    result = swift_getWitnessTable(&unk_19DDF4, &type metadata for Book.Content.EbookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7EB8);
  }
  return result;
}

unint64_t sub_17F590()
{
  unint64_t result;

  result = qword_1F7EC0;
  if (!qword_1F7EC0)
  {
    result = swift_getWitnessTable(&unk_19DE1C, &type metadata for Book.Content.EbookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7EC0);
  }
  return result;
}

unint64_t sub_17F5D8()
{
  unint64_t result;

  result = qword_1F7EC8;
  if (!qword_1F7EC8)
  {
    result = swift_getWitnessTable(&unk_19DD3C, &type metadata for Book.Content.AudiobookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7EC8);
  }
  return result;
}

unint64_t sub_17F620()
{
  unint64_t result;

  result = qword_1F7ED0;
  if (!qword_1F7ED0)
  {
    result = swift_getWitnessTable(&unk_19DD64, &type metadata for Book.Content.AudiobookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7ED0);
  }
  return result;
}

unint64_t sub_17F668()
{
  unint64_t result;

  result = qword_1F7ED8;
  if (!qword_1F7ED8)
  {
    result = swift_getWitnessTable(&unk_19DEAC, &type metadata for Book.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7ED8);
  }
  return result;
}

unint64_t sub_17F6B0()
{
  unint64_t result;

  result = qword_1F7EE0;
  if (!qword_1F7EE0)
  {
    result = swift_getWitnessTable(&unk_19DED4, &type metadata for Book.Content.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7EE0);
  }
  return result;
}

unint64_t sub_17F6F8()
{
  unint64_t result;

  result = qword_1F7EE8;
  if (!qword_1F7EE8)
  {
    result = swift_getWitnessTable(&unk_19DC84, &type metadata for Book.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F7EE8);
  }
  return result;
}

unint64_t sub_17F740()
{
  unint64_t result;

  result = qword_1F7EF0;
  if (!qword_1F7EF0)
  {
    result = swift_getWitnessTable(&unk_19DCAC, &type metadata for Book.Rationale.CodingKeys);
    atomic_store(result, &qword_1F7EF0);
  }
  return result;
}

_QWORD *sub_17F784(uint64_t a1, uint64_t a2)
{
  _BYTE v3[72];
  _QWORD v4[7];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_F2958(a2, (uint64_t)v3);
    sub_F2958((uint64_t)v3, (uint64_t)v4);
    __asm { BR              X10 }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_17FA8C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000000001A3970;
    if (a2 == 0x80000000001A3970)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000000001A3970, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x80000000001A2710)
  {
    swift_bridgeObjectRelease(0x80000000001A2710);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x80000000001A2710, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_17FB74(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6B6F6F6265 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F6F626F69647561 && a2 == 0xE90000000000006BLL)
  {
    swift_bridgeObjectRelease(0xE90000000000006BLL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_17FC68(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x444965726F7473 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444965726F7473, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x707954616964656DLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707954616964656DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4449736569726573 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449736569726573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x73656372756F73 && a2 == 0xE700000000000000)
  {
    v10 = 0xE700000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656372756F73, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x6C616E6F69746172 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E6F69746172, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_17FF00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F7F00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_17FF48()
{
  unint64_t result;

  result = qword_1F7F08;
  if (!qword_1F7F08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.SaleType, &type metadata for Book.SaleType);
    atomic_store(result, (unint64_t *)&qword_1F7F08);
  }
  return result;
}

unint64_t sub_17FF8C()
{
  unint64_t result;

  result = qword_1F7F10;
  if (!qword_1F7F10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.MediaType, &type metadata for Book.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F7F10);
  }
  return result;
}

uint64_t UserEncodingService.userEncodings()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1[3] = v0;
  v2 = type metadata accessor for UUID(0);
  v1[4] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[5] = v3;
  v1[6] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UserEncodingWork(0);
  v1[7] = v4;
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_180058, 0, 0);
}

uint64_t sub_180058(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)v1[3];
  v1[9] = v2[2];
  UUID.init()(a1);
  sub_49F4(v2 + 3, v2[6]);
  v3 = (_QWORD *)swift_task_alloc(dword_1F2454);
  v1[10] = v3;
  *v3 = v1;
  v3[1] = sub_1800C4;
  return sub_71CF4(1);
}

uint64_t sub_1800C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 80);
  *(_QWORD *)(*(_QWORD *)v2 + 88) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    (*(void (**)(_QWORD, _QWORD))(v4[5] + 8))(v4[6], v4[4]);
    v6 = sub_18024C;
  }
  else
  {
    v4[12] = a1;
    v6 = sub_180148;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_180148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 56);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 40) + 32))(v3, *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 32));
  *(_QWORD *)(v3 + *(int *)(v4 + 20)) = v2;
  v5 = sub_5EDC(&qword_1F7F20);
  v6 = sub_18028C();
  WorkService.perform<A, B>(_:)(v3, v4, v5, v6);
  v7 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    sub_1802D4(*(_QWORD *)(v0 + 64));
    v8 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 48);
    sub_1802D4(*(_QWORD *)(v0 + 64));
    v11 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v7);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
  }
}

uint64_t sub_18024C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_18028C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F7C28;
  if (!qword_1F7C28)
  {
    v1 = type metadata accessor for UserEncodingWork(255);
    result = swift_getWitnessTable(&unk_19D2E8, v1);
    atomic_store(result, (unint64_t *)&qword_1F7C28);
  }
  return result;
}

uint64_t sub_1802D4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UserEncodingWork(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_180310()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1F7F1C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_70AB4;
  return UserEncodingService.userEncodings()();
}

uint64_t type metadata accessor for UserEncodingService()
{
  return objc_opt_self(_TtC20BooksPersonalization19UserEncodingService);
}

uint64_t method lookup function for UserEncodingService(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for UserEncodingService);
}

_QWORD *sub_180384(uint64_t a1)
{
  int64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  int64_t v18;
  __int128 v19;
  __int128 v20;

  v2 = *(_QWORD *)(a1 + 16);
  sub_34518(0, v2, 0);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    v3 = (_OWORD *)(a1 + 128);
    do
    {
      v4 = *((_QWORD *)v3 - 12);
      v17 = *((_BYTE *)v3 - 88);
      v16 = *((_QWORD *)v3 - 10);
      v15 = *((_BYTE *)v3 - 72);
      v5 = *((_QWORD *)v3 - 8);
      v6 = *((_BYTE *)v3 - 56);
      v7 = *((_QWORD *)v3 - 6);
      v14 = *((_QWORD *)v3 - 5);
      v8 = *((_QWORD *)v3 - 4);
      v9 = *((_QWORD *)v3 - 3);
      v19 = *(v3 - 1);
      v20 = *v3;
      sub_40554(v5, v6);
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      v18 = v11 + 1;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(*((_QWORD *)&v20 + 1));
      if (v11 >= v10 >> 1)
        sub_34518(v10 > 1, v18, 1);
      _swiftEmptyArrayStorage[2] = v18;
      v12 = &_swiftEmptyArrayStorage[15 * v11];
      v12[4] = v4;
      v12[5] = v4;
      *((_BYTE *)v12 + 48) = v17;
      v12[7] = v16;
      *((_BYTE *)v12 + 64) = v15;
      v12[9] = v5;
      *((_BYTE *)v12 + 80) = v6;
      v12[11] = v7;
      v12[12] = v14;
      v12[13] = v8;
      v12[14] = v9;
      *(_OWORD *)(v12 + 15) = v19;
      v3 += 7;
      *(_OWORD *)(v12 + 17) = v20;
      --v2;
    }
    while (v2);
  }
  else
  {
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void sub_180550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = sub_5EDC(&qword_1F0D90);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v0, (uint64_t)v4);
  v5 = (char *)sub_180624 + 4 * byte_19E450[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

double sub_180624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  long double v4;
  double v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v2, v1);
  v5 = sub_18197C(v4);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return v5;
}

void sub_180678()
{
  uint64_t v0;

  sub_40568(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  JUMPOUT(0x180654);
}

double sub_1806A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F0D98);
  memcpy((void *)(v0 + 8), (const void *)(v1 + *(int *)(v2 + 48)), 0x221uLL);
  sub_6228((_QWORD *)(v0 + 8));
  swift_bridgeObjectRelease();
  return sub_180624();
}

void sub_1806E0()
{
  uint64_t *v0;

  sub_ABCB0(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8]);
  JUMPOUT(0x180654);
}

void CollectionRecommendation.books.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_5EDC(&qword_1F0D90);
  __chkstk_darwin(v4);
  sub_52258(v0, (uint64_t)v3);
  v5 = (char *)sub_1807E8 + 4 * byte_19E45A[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_1807E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v1, v3, v2);
  ((void (*)(uint64_t))NonEmpty.elements.getter)(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  return *(_QWORD *)(v0 + 24);
}

void sub_180840()
{
  _OWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = v1[2];
  v5 = *((_BYTE *)v1 + 24);
  v6 = v1[4];
  v7 = *((_BYTE *)v1 + 40);
  *v0 = *((_OWORD *)v1 + 3);
  v8 = v1[8];
  v9 = v1[9];
  v10 = sub_5EDC(&qword_1F10C8);
  v11 = swift_allocObject(v10, 112, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1875E0;
  *(_QWORD *)(v11 + 32) = v2;
  *(_BYTE *)(v11 + 40) = v3;
  *(_QWORD *)(v11 + 48) = v4;
  *(_BYTE *)(v11 + 56) = v5;
  *(_QWORD *)(v11 + 64) = v6;
  *(_BYTE *)(v11 + 72) = v7;
  *(_OWORD *)(v11 + 80) = *v0;
  *(_QWORD *)(v11 + 96) = v8;
  *(_QWORD *)(v11 + 104) = v9;
  JUMPOUT(0x18081CLL);
}

uint64_t sub_1808B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F0D98);
  memcpy((void *)(v0 + 24), (const void *)(v1 + *(int *)(v2 + 48)), 0x221uLL);
  sub_6228((_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease();
  return sub_1807E8();
}

void sub_1808F4()
{
  uint64_t *v0;

  sub_ABCB0(v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8]);
  JUMPOUT(0x18081CLL);
}

uint64_t sub_18092C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;

  v2 = type metadata accessor for CollectionRecommendation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = 0x202020200A5BLL;
  v28 = 0xE600000000000000;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v26 = _swiftEmptyArrayStorage;
    sub_340F4(0, v6, 0);
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    v7 = v26;
    do
    {
      sub_52258(v8, (uint64_t)v5);
      CollectionRecommendation.clusteringDebugDescription.getter();
      v11 = v10;
      v13 = v12;
      sub_5229C((uint64_t)v5);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_340F4(0, v7[2] + 1, 1);
        v7 = v26;
      }
      v15 = v7[2];
      v14 = v7[3];
      if (v15 >= v14 >> 1)
      {
        sub_340F4(v14 > 1, v15 + 1, 1);
        v7 = v26;
      }
      v7[2] = v15 + 1;
      v16 = &v7[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  v26 = v7;
  v17 = sub_5EDC(&qword_1F03E0);
  v18 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = BidirectionalCollection<>.joined(separator:)(0x202020200ALL, 0xE500000000000000, v17, v18);
  v21 = v20;
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 93;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  return v27;
}

_QWORD *CollectionRecommendation.booksIDs.getter()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  CollectionRecommendation.books.getter();
  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  if (v2)
  {
    sub_340AC(0, v2, 0);
    v3 = _swiftEmptyArrayStorage[2];
    v4 = 32;
    do
    {
      v5 = *(_QWORD *)(v1 + v4);
      v6 = _swiftEmptyArrayStorage[3];
      if (v3 >= v6 >> 1)
        sub_340AC(v6 > 1, v3 + 1, 1);
      _swiftEmptyArrayStorage[2] = v3 + 1;
      _swiftEmptyArrayStorage[v3 + 4] = v5;
      v4 += 80;
      ++v3;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

_QWORD *CollectionRecommendation.genreIDs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload(v3, v1) == 5)
  {
    v4 = *(_QWORD *)&v3[*(int *)(sub_5EDC(&qword_1F3418) + 48)];
    v5 = sub_5EDC(&qword_1F1090);
    v6 = swift_allocObject(v5, 40, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1875E0;
    *(_QWORD *)(v6 + 32) = v4;
    v7 = sub_5EDC(&qword_1F0D90);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v3, v7);
  }
  else
  {
    sub_5229C((uint64_t)v3);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v6;
}

_QWORD *CollectionRecommendation.seedBooks.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v11[545];

  v1 = v0;
  v2 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v2);
  v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_52258(v1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 2)
  {
    v5 = sub_5EDC(&qword_1F0D98);
    memcpy(v11, &v4[*(int *)(v5 + 48)], sizeof(v11));
    swift_bridgeObjectRelease();
    v6 = sub_5EDC(&qword_1F1100);
    v7 = swift_allocObject(v6, 584, 7);
    *(_OWORD *)(v7 + 16) = xmmword_1875E0;
    memcpy((void *)(v7 + 32), v11, 0x221uLL);
    v8 = sub_5EDC(&qword_1F0D90);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v4, v8);
  }
  else
  {
    sub_5229C((uint64_t)v4);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v7;
}

_QWORD *CollectionRecommendation.authorIDs.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload(v3, v1) == 3)
  {
    v4 = *(_QWORD *)&v3[*(int *)(sub_5EDC(&qword_1F3418) + 48)];
    v5 = sub_5EDC(&qword_1F1090);
    v6 = swift_allocObject(v5, 40, 7);
    *(_OWORD *)(v6 + 16) = xmmword_1875E0;
    *(_QWORD *)(v6 + 32) = v4;
    v7 = sub_5EDC(&qword_1F0D90);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v3, v7);
  }
  else
  {
    sub_5229C((uint64_t)v3);
    return _swiftEmptyArrayStorage;
  }
  return (_QWORD *)v6;
}

uint64_t ClusteringOptions.MediaType.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F6F626F69647561;
  if (*v0 != 1)
    v1 = 0x646578696DLL;
  if (*v0)
    return v1;
  else
    return 0x6B6F6F6265;
}

Swift::Int sub_180F74()
{
  char *v0;

  return sub_89600((uint64_t)off_1EA310[*v0]);
}

uint64_t sub_180F88()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_1F7FE0);
  sub_5216C(v0, (uint64_t)qword_1F7FE0);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD000000000000016, 0x80000000001A3A60);
}

BooksPersonalization::ClusteringOptions::MediaType_optional __swiftcall ClusteringOptions.MediaType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::ClusteringOptions::MediaType_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1DAB88, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

_UNKNOWN **static ClusteringOptions.MediaType.allCases.getter()
{
  return &off_1DABF0;
}

BooksPersonalization::ClusteringOptions::MediaType_optional sub_181068(Swift::String *a1)
{
  return ClusteringOptions.MediaType.init(rawValue:)(*a1);
}

void sub_181074(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE90000000000006BLL;
  v5 = 0x6F6F626F69647561;
  if (v2 != 1)
  {
    v5 = 0x646578696DLL;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x6B6F6F6265;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1810D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1840A4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_18112C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1840A4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_181178(_QWORD *a1@<X8>)
{
  *a1 = &off_1DAC18;
}

uint64_t sub_181188(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_79608(*a1, *a2);
}

Swift::Int sub_181194()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE90000000000006BLL;
  v3 = 0x6F6F626F69647561;
  if (v1 != 1)
  {
    v3 = 0x646578696DLL;
    v2 = 0xE500000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x6B6F6F6265;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_181230(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE90000000000006BLL;
  v3 = 0x6F6F626F69647561;
  if (*v1 != 1)
  {
    v3 = 0x646578696DLL;
    v2 = 0xE500000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x6B6F6F6265;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1812A8(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE90000000000006BLL;
  v4 = 0x6F6F626F69647561;
  if (v2 != 1)
  {
    v4 = 0x646578696DLL;
    v3 = 0xE500000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x6B6F6F6265;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE500000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_181340()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_18137C + 4 * byte_19E464[*v0]))(0x736B6F6F426E696DLL, 0xED0000746E756F43);
}

uint64_t sub_18137C()
{
  return 0x736B6F6F4278616DLL;
}

unint64_t sub_181390()
{
  return 0xD000000000000025;
}

unint64_t sub_1813B0()
{
  return 0xD000000000000014;
}

uint64_t sub_1813CC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_183E5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1813F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_181D08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_181418(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_181D08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ClusteringOptions.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v4 = sub_5EDC(&qword_1F7FF8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v19 = v1[2];
  v20 = v8;
  v18 = v1[3];
  v11 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v11);
  v12 = sub_181D08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ClusteringOptions.CodingKeys, &type metadata for ClusteringOptions.CodingKeys, v12, v11, v10);
  v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, &v25, v4);
  if (!v2)
  {
    v13 = v18;
    v14 = v19;
    v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v24, v4);
    v21 = v14;
    v23 = 2;
    v15 = sub_5EDC(&qword_1F4728);
    v16 = sub_E50B8(&qword_1F4730, (void (*)(void))sub_602A0, (void (*)(void))sub_E46C0, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v23, v4, v15, v16);
    v22 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v22, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ClusteringOptions.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v5 = sub_5EDC(&qword_1F8008);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_181D08();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ClusteringOptions.CodingKeys, &type metadata for ClusteringOptions.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v23 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
  v22 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v22, v5);
  v14 = sub_5EDC(&qword_1F4728);
  v21 = 2;
  v15 = sub_E50B8(&qword_1F4770, (void (*)(void))sub_60140, (void (*)(void))sub_E5134, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, v14, &v21, v5, v14, v15);
  v20 = 3;
  v18 = v19;
  swift_bridgeObjectRetain(v19);
  v16 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v18;
  a2[3] = v16;
  sub_62F8(a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_18181C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ClusteringOptions.init(from:)(a1, a2);
}

uint64_t sub_181830(_QWORD *a1)
{
  return ClusteringOptions.encode(to:)(a1);
}

_QWORD *sub_181844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  _BYTE __dst[377];
  _BYTE v14[384];
  _BYTE __src[384];
  _QWORD *v16;

  if (!*(_QWORD *)(a3 + 16))
    return _swiftEmptyArrayStorage;
  sub_3951C(8);
  result = _swiftEmptyArrayStorage;
  if ((v7 & 1) == 0)
    return result;
  v16 = _swiftEmptyArrayStorage;
  v8 = *(_QWORD *)(a5 + 16);
  if (!v8)
    return result;
  swift_bridgeObjectRetain(a5);
  v9 = *(_QWORD *)(a5 + 56);
  sub_8E32C(a5 + 184, (uint64_t)v14);
  sub_8E32C((uint64_t)v14, (uint64_t)__src);
  if (sub_8E6A0((uint64_t)__src) == 1)
  {
LABEL_10:
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  v10 = a5 + 736;
  while (1)
  {
    memcpy(__dst, __src, sizeof(__dst));
    v11 = sub_C1614();
    v12 = &_swiftEmptySetSingleton;
    if ((v11 & 1) != 0)
      swift_bridgeObjectRetain(v9);
    sub_110168((uint64_t)v12);
    if (!--v8)
      break;
    v9 = *(_QWORD *)(v10 - 128);
    sub_8E32C(v10, (uint64_t)v14);
    sub_8E32C((uint64_t)v14, (uint64_t)__src);
    v10 += 552;
    if (sub_8E6A0((uint64_t)__src) == 1)
      goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  return v16;
}

double sub_18197C(long double a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double *v12;
  double v13;
  uint64_t v15;

  v2 = sub_5EDC(&qword_1F0D90);
  NonEmpty.elements.getter(&v15, v2);
  v3 = v15;
  v4 = *(_QWORD *)(v15 + 16);
  if (!v4)
  {
    v6 = 0.0;
    goto LABEL_10;
  }
  if (v4 == 1)
  {
    v5 = 0;
    v6 = 0.0;
LABEL_8:
    v12 = (double *)(v3 + 80 * v5 + 104);
    do
    {
      v13 = *v12;
      v12 += 10;
      v6 = v6 + v13 * pow(a1, (double)v5++);
    }
    while (v4 != v5);
    goto LABEL_10;
  }
  v7 = 0;
  v5 = v4 & 0x7FFFFFFFFFFFFFFELL;
  v8 = (double *)(v15 + 184);
  v6 = 0.0;
  do
  {
    v9 = *(v8 - 10);
    v10 = *v8;
    v8 += 20;
    v11 = pow(a1, (double)v7);
    v6 = v6 + v9 * v11 + v10 * pow(a1, (double)(v7 + 1));
    v7 += 2;
  }
  while (v7 != v5);
  if (v4 != v5)
    goto LABEL_8;
LABEL_10:
  swift_bridgeObjectRelease(v3);
  return v6;
}

void sub_181AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X12 }
}

void sub_181B1C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;

  v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x736B6F6F62, 0xE500000000000000, 0xD000000000000011, v0 | 0x8000000000000000, 0);
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    if (*(_QWORD *)(v2 + 16) && (v9 = sub_3951C(5), (v10 & 1) != 0))
    {
      v11 = *(_QWORD *)(v2 + 56) + 24 * v9;
      v12 = *(_QWORD *)(v11 + 16);
      v6 |= *(_BYTE *)(v11 + 8);
      if ((v6 & 1) != 0)
      {
        v7 = 0;
      }
      else
      {
        v13 = *(_QWORD *)v11;
        v14 = __OFADD__(v13, v7);
        v7 += v13;
        if (v14)
        {
          __break(1u);
          JUMPOUT(0x181CE0);
        }
      }
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v12);
      v5 = sub_1532A8(v5, v12);
    }
    else
    {
      swift_bridgeObjectRetain(v5);
    }
    *v4 = 5;
    *(_QWORD *)v3 = v7;
    *(_BYTE *)(v3 + 8) = v6 & 1;
    *(_QWORD *)(v3 + 16) = v5;
  }
  else
  {
    *v4 = v1;
    *(_QWORD *)v3 = v7;
    *(_BYTE *)(v3 + 8) = v6;
    *(_QWORD *)(v3 + 16) = v5;
    swift_bridgeObjectRetain(v5);
  }
}

unint64_t sub_181D08()
{
  unint64_t result;

  result = qword_1F8000;
  if (!qword_1F8000)
  {
    result = swift_getWitnessTable(&unk_19E760, &type metadata for ClusteringOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F8000);
  }
  return result;
}

uint64_t sub_181D4C()
{
  return sub_3EDBC(&qword_1F8010, &qword_1F8018, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_181D7C()
{
  unint64_t result;

  result = qword_1F8020;
  if (!qword_1F8020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClusteringOptions.MediaType, &type metadata for ClusteringOptions.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F8020);
  }
  return result;
}

uint64_t initializeWithCopy for ClusteringOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for ClusteringOptions(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for ClusteringOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for ClusteringOptions()
{
  return &type metadata for ClusteringOptions;
}

uint64_t storeEnumTagSinglePayload for ClusteringOptions.MediaType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_181EF0 + 4 * byte_19E46D[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_181F24 + 4 * byte_19E468[v4]))();
}

uint64_t sub_181F24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x181F34);
  return result;
}

uint64_t sub_181F40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x181F48);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_181F4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_181F54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringOptions.MediaType()
{
  return &type metadata for ClusteringOptions.MediaType;
}

uint64_t type metadata accessor for DefaultBookClusteringService()
{
  return objc_opt_self(_TtC20BooksPersonalization28DefaultBookClusteringService);
}

uint64_t storeEnumTagSinglePayload for ClusteringOptions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_181FDC + 4 * byte_19E477[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_182010 + 4 * byte_19E472[v4]))();
}

uint64_t sub_182010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_182018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x182020);
  return result;
}

uint64_t sub_18202C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x182034);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_182038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_182040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ClusteringOptions.CodingKeys()
{
  return &type metadata for ClusteringOptions.CodingKeys;
}

unint64_t sub_182060()
{
  unint64_t result;

  result = qword_1F80D0;
  if (!qword_1F80D0)
  {
    result = swift_getWitnessTable(&unk_19E728, &type metadata for ClusteringOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F80D0);
  }
  return result;
}

unint64_t sub_1820A8()
{
  unint64_t result;

  result = qword_1F80D8;
  if (!qword_1F80D8)
  {
    result = swift_getWitnessTable(&unk_19E698, &type metadata for ClusteringOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F80D8);
  }
  return result;
}

unint64_t sub_1820F0()
{
  unint64_t result;

  result = qword_1F80E0;
  if (!qword_1F80E0)
  {
    result = swift_getWitnessTable(&unk_19E6C0, &type metadata for ClusteringOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F80E0);
  }
  return result;
}

_QWORD *sub_182134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = a1;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  v24 = _swiftEmptyArrayStorage;
  v22 = v6;
  do
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v8 = *(_QWORD *)(v4 + v5 + 32);
      v28 = *(_BYTE *)(v4 + v5 + 40);
      v27 = *(_QWORD *)(v4 + v5 + 48);
      v26 = *(_BYTE *)(v4 + v5 + 56);
      v9 = *(_QWORD *)(v4 + v5 + 64);
      v10 = *(_BYTE *)(v4 + v5 + 72);
      v11 = *(_QWORD *)(v4 + v5 + 80);
      v25 = *(_QWORD *)(v4 + v5 + 88);
      v12 = *(_QWORD *)(v4 + v5 + 96);
      v13 = *(_QWORD *)(v4 + v5 + 104);
      v14 = sub_39228(v8);
      if ((v15 & 1) != 0)
      {
        v16 = *(_QWORD *)(a2 + 56) + 112 * v14;
        v29 = *(_OWORD *)(v16 + 96);
        v30 = *(_OWORD *)(v16 + 80);
        sub_40554(v9, v10);
        swift_bridgeObjectRetain(v12);
        swift_bridgeObjectRetain(v30);
        swift_bridgeObjectRetain(*((_QWORD *)&v30 + 1));
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(*((_QWORD *)&v29 + 1));
        swift_bridgeObjectRetain(v11);
        v17 = v24;
        v23 = v9;
        if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
          v17 = sub_2FFF4(0, v24[2] + 1, 1, v24);
        v19 = v17[2];
        v18 = v17[3];
        v20 = v17;
        if (v19 >= v18 >> 1)
          v20 = sub_2FFF4((_QWORD *)(v18 > 1), v19 + 1, 1, v17);
        v24 = v20;
        v20[2] = v19 + 1;
        v7 = &v20[14 * v19];
        v7[4] = v8;
        *((_BYTE *)v7 + 40) = v28;
        v7[6] = v27;
        *((_BYTE *)v7 + 56) = v26;
        v4 = v22;
        v7[8] = v23;
        *((_BYTE *)v7 + 72) = v10;
        v7[10] = v11;
        v7[11] = v25;
        v7[12] = v12;
        v7[13] = v13;
        *((_OWORD *)v7 + 7) = v30;
        *((_OWORD *)v7 + 8) = v29;
      }
    }
    v5 += 80;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v24;
}

void sub_18233C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  int64_t v31;

  v4 = a1 + 64;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(63 - v5) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (v7)
  {
    v16 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v17 = v16 | (v8 << 6);
LABEL_34:
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v17);
    v27 = 1.0;
    if (*(_QWORD *)(a2 + 16))
    {
      v28 = sub_3946C(*(_BYTE *)(*(_QWORD *)(a1 + 56) + v17));
      if ((v29 & 1) != 0)
        v27 = *(double *)(*(_QWORD *)(a2 + 56) + 8 * v28);
    }
    v30 = _swiftEmptyDictionarySingleton[2];
    if (_swiftEmptyDictionarySingleton[3] <= v30)
      sub_15C090(v30 + 1, 1);
    v9 = static Hasher._hash(seed:_:)(_swiftEmptyDictionarySingleton[5], v26);
    v10 = &_swiftEmptyDictionarySingleton[8];
    v11 = -1 << LOBYTE(_swiftEmptyDictionarySingleton[4]);
    v12 = v9 & ~v11;
    v13 = v12 >> 6;
    if (((-1 << v12) & ~_swiftEmptyDictionarySingleton[(v12 >> 6) + 8]) != 0)
    {
      v14 = __clz(__rbit64((-1 << v12) & ~_swiftEmptyDictionarySingleton[(v12 >> 6) + 8])) | v12 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v11) >> 6;
      do
      {
        if (++v13 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v24 = v13 == v23;
        if (v13 == v23)
          v13 = 0;
        v22 |= v24;
        v25 = v10[v13];
      }
      while (v25 == -1);
      v14 = __clz(__rbit64(~v25)) + (v13 << 6);
    }
    *(_QWORD *)((char *)v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = 8 * v14;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v15) = v26;
    *(double *)(_swiftEmptyDictionarySingleton[7] + v15) = v27;
    ++_swiftEmptyDictionarySingleton[2];
  }
  v18 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v18 >= v31)
    goto LABEL_39;
  v19 = *(_QWORD *)(v4 + 8 * v18);
  v20 = v8 + 1;
  if (v19)
    goto LABEL_33;
  v20 = v8 + 2;
  if (v8 + 2 >= v31)
    goto LABEL_39;
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
    goto LABEL_33;
  v20 = v8 + 3;
  if (v8 + 3 >= v31)
    goto LABEL_39;
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
    goto LABEL_33;
  v20 = v8 + 4;
  if (v8 + 4 >= v31)
    goto LABEL_39;
  v19 = *(_QWORD *)(v4 + 8 * v20);
  if (v19)
  {
LABEL_33:
    v7 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v20 << 6);
    v8 = v20;
    goto LABEL_34;
  }
  v21 = v8 + 5;
  if (v8 + 5 >= v31)
  {
LABEL_39:
    sub_5FEC(a1);
    return;
  }
  v19 = *(_QWORD *)(v4 + 8 * v21);
  if (v19)
  {
    v20 = v8 + 5;
    goto LABEL_33;
  }
  while (1)
  {
    v20 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v20 >= v31)
      goto LABEL_39;
    v19 = *(_QWORD *)(v4 + 8 * v20);
    ++v21;
    if (v19)
      goto LABEL_33;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_182614(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v4)
  {
    v5 = a1 + 72;
    do
    {
      v13 = *(_QWORD *)(v5 - 40);
      v46 = *(_QWORD *)(v5 - 32);
      v44 = *(_BYTE *)(v5 - 24);
      v42 = *(_QWORD *)(v5 - 16);
      v40 = *(_BYTE *)(v5 - 8);
      v14 = *(_BYTE *)(v5 + 8);
      v15 = *(_QWORD *)(v5 + 16);
      v16 = *(_QWORD *)(v5 + 32);
      v36 = *(_QWORD *)(v5 + 40);
      v38 = *(_QWORD *)(v5 + 24);
      v53 = *(_OWORD *)(v5 + 64);
      v55 = *(_OWORD *)(v5 + 48);
      v50 = *(_QWORD *)v5;
      sub_40554(*(_QWORD *)v5, v14);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(*((_QWORD *)&v55 + 1));
      swift_bridgeObjectRetain(v53);
      swift_bridgeObjectRetain(*((_QWORD *)&v53 + 1));
      if (!v15)
        break;
      v48 = v14;
      v49 = v16;
      v47 = v4;
      v17 = (_QWORD *)*a3;
      v19 = sub_39228(v13);
      v20 = v17[2];
      v21 = (v18 & 1) == 0;
      v22 = v20 + v21;
      if (__OFADD__(v20, v21))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        __break(1u);
        return result;
      }
      v23 = v18;
      if (v17[3] >= v22)
      {
        if ((a2 & 1) == 0)
          sub_16DD38();
      }
      else
      {
        sub_15FA84(v22, a2 & 1);
        v24 = sub_39228(v13);
        if ((v23 & 1) != (v25 & 1))
          goto LABEL_18;
        v19 = v24;
      }
      v26 = (_QWORD *)*a3;
      if ((v23 & 1) != 0)
      {
        v34 = 112 * v19;
        v6 = v26[7] + 112 * v19;
        v45 = *(_QWORD *)v6;
        v43 = *(_BYTE *)(v6 + 8);
        v41 = *(_QWORD *)(v6 + 16);
        v39 = *(_BYTE *)(v6 + 24);
        v37 = *(_QWORD *)(v6 + 32);
        v54 = *(_QWORD *)(v6 + 48);
        v7 = *(_QWORD *)(v6 + 64);
        v52 = *(_QWORD *)(v6 + 56);
        v8 = *(_QWORD *)(v6 + 72);
        v10 = *(_QWORD *)(v6 + 80);
        v9 = *(_QWORD *)(v6 + 88);
        v11 = *(_QWORD *)(v6 + 96);
        v33 = *(_QWORD *)(v6 + 104);
        v35 = *(_BYTE *)(v6 + 40);
        sub_40554(v37, v35);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v10);
        swift_bridgeObjectRetain(v9);
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v54);
        sub_40568(v50, v48);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v12 = v26[7] + v34;
        sub_40568(*(_QWORD *)(v12 + 32), *(_BYTE *)(v12 + 40));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v12 = v45;
        *(_BYTE *)(v12 + 8) = v43;
        *(_QWORD *)(v12 + 16) = v41;
        *(_BYTE *)(v12 + 24) = v39;
        *(_QWORD *)(v12 + 32) = v37;
        *(_BYTE *)(v12 + 40) = v35;
        *(_QWORD *)(v12 + 48) = v54;
        *(_QWORD *)(v12 + 56) = v52;
        *(_QWORD *)(v12 + 64) = v7;
        *(_QWORD *)(v12 + 72) = v8;
        *(_QWORD *)(v12 + 80) = v10;
        *(_QWORD *)(v12 + 88) = v9;
        *(_QWORD *)(v12 + 96) = v11;
        *(_QWORD *)(v12 + 104) = v33;
      }
      else
      {
        v26[(v19 >> 6) + 8] |= 1 << v19;
        *(_QWORD *)(v26[6] + 8 * v19) = v13;
        v27 = v26[7] + 112 * v19;
        *(_QWORD *)v27 = v46;
        *(_BYTE *)(v27 + 8) = v44;
        *(_QWORD *)(v27 + 16) = v42;
        *(_BYTE *)(v27 + 24) = v40;
        *(_QWORD *)(v27 + 32) = v50;
        *(_BYTE *)(v27 + 40) = v48;
        *(_QWORD *)(v27 + 48) = v15;
        *(_QWORD *)(v27 + 56) = v38;
        *(_QWORD *)(v27 + 64) = v49;
        *(_QWORD *)(v27 + 72) = v36;
        *(_OWORD *)(v27 + 80) = v55;
        *(_OWORD *)(v27 + 96) = v53;
        v28 = v26[2];
        v29 = __OFADD__(v28, 1);
        v30 = v28 + 1;
        if (v29)
          goto LABEL_17;
        v26[2] = v30;
      }
      v5 += 120;
      a2 = 1;
      v4 = v47 - 1;
    }
    while (v47 != 1);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *sub_182A18(uint64_t a1, const void *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _QWORD __dst[46];

  v4 = sub_180384(a1);
  v5 = v4[2];
  if (v5)
  {
    sub_5EDC(&qword_1F7790);
    v6 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v5);
  }
  else
  {
    v6 = _swiftEmptyDictionarySingleton;
  }
  __dst[0] = v6;
  sub_182614((uint64_t)v4, 1, __dst);
  swift_bridgeObjectRelease();
  v7 = __dst[0];
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v22 = __dst[0];
    v23 = a2;
    __dst[0] = _swiftEmptyArrayStorage;
    sub_342E4(0, v8, 0);
    v9 = (_QWORD *)__dst[0];
    v10 = a1 + 56;
    do
    {
      v28 = *(_QWORD *)(v10 - 24);
      v27 = *(_BYTE *)(v10 - 16);
      v26 = *(_QWORD *)(v10 - 8);
      v25 = *(_BYTE *)v10;
      v11 = *(_QWORD *)(v10 + 8);
      v12 = *(_BYTE *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      v24 = *(_QWORD *)(v10 + 32);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = *(_QWORD *)(v10 + 48);
      sub_40554(v11, v12);
      __dst[0] = v9;
      v16 = v9[2];
      v17 = v9[3];
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v14);
      if (v16 >= v17 >> 1)
      {
        sub_342E4(v17 > 1, v16 + 1, 1);
        v9 = (_QWORD *)__dst[0];
      }
      v9[2] = v16 + 1;
      v18 = &v9[10 * v16];
      v18[4] = v28;
      v10 += 112;
      *((_BYTE *)v18 + 40) = v27;
      v18[6] = v26;
      *((_BYTE *)v18 + 56) = v25;
      v18[8] = v11;
      *((_BYTE *)v18 + 72) = v12;
      v18[10] = v13;
      v18[11] = v24;
      v18[12] = v14;
      v18[13] = v15;
      --v8;
    }
    while (v8);
    v7 = v22;
    a2 = v23;
  }
  memcpy(__dst, a2, 0x16BuLL);
  v19 = sub_73BB0(v9, __dst);
  swift_bridgeObjectRelease();
  swift_retain(v7);
  v20 = sub_182134(v19, v7);
  swift_bridgeObjectRelease();
  swift_release_n(v7, 2);
  return v20;
}

_QWORD *sub_182C4C(uint64_t a1, uint64_t a2, double *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  char v91;
  char v92;
  _QWORD *v93;
  char v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  __int128 v111;
  _QWORD *v112;
  _QWORD *v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  char v121;
  uint8_t *v122;
  uint64_t v123;
  os_log_t v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  _QWORD *v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  _QWORD *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int64_t v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char *v159;
  int v160;
  os_log_t v161;
  uint64_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  __int128 v191;
  uint64_t v192;
  char *v193;
  char *v194;
  _QWORD *v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  _QWORD v199[6];
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  _BYTE v205[368];
  _BYTE v206[376];

  v165 = a2;
  v166 = a5;
  v181 = sub_5EDC(&qword_1F0D90);
  v8 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181);
  v193 = (char *)&v159 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = type metadata accessor for CollectionRecommendation(0);
  v162 = *(_QWORD *)(v192 - 8);
  v10 = __chkstk_darwin(v192);
  v198 = (uint64_t)&v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v159 - v12;
  memcpy(v206, a3 + 11, 0x16BuLL);
  v14 = *((_QWORD *)a3 + 65);
  v15 = a3[66];
  v174 = *((_QWORD *)a3 + 67);
  v16 = *((_QWORD *)a3 + 68);
  v167 = *((_QWORD *)a3 + 69);
  v168 = v16;
  v17 = *((_QWORD *)a3 + 71);
  v171 = *((_QWORD *)a3 + 72);
  v172 = v17;
  v18 = a3[73];
  v169 = *((_QWORD *)a3 + 74);
  v19 = a4[1];
  v21 = a4[2];
  v20 = a4[3];
  v178 = *a4;
  v179 = v14;
  v199[2] = v178;
  v199[3] = v19;
  v177 = v19;
  v199[4] = v21;
  v199[5] = v20;
  v175 = v20;
  sub_184060();
  v22 = Dictionary.mapKeysAndValues<A, B>(_:)(sub_184044, v199, v21, &type metadata for CollectionRecommendationType, &type metadata for CollectionRecommendationOptions, &type metadata for CollectionRecommendationType, &type metadata for CollectionRecommendationOptions);
  v164 = 0;
  memcpy(v205, v206, 0x16BuLL);
  sub_605D0((uint64_t)v206);
  v23 = sub_182A18(a1, v205);
  sub_60AF8((uint64_t)v206);
  v24 = *(_QWORD *)(v22 + 16);
  v176 = v22;
  if (!v24)
  {
LABEL_18:
    v173 = 0;
    v174 = 0;
    v179 = 0;
    goto LABEL_24;
  }
  swift_bridgeObjectRetain(v22);
  v25 = sub_3951C(0);
  if ((v26 & 1) != 0)
  {
    v27 = *(_QWORD *)(v22 + 56) + 24 * v25;
    v28 = *(_QWORD *)v27;
    v29 = *(unsigned __int8 *)(v27 + 8);
    swift_bridgeObjectRelease();
    if (v29)
      v28 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = 0;
  }
  v30 = v28 > 0;
  if (*(_QWORD *)(v22 + 16))
  {
    swift_bridgeObjectRetain(v22);
    v31 = sub_3951C(9);
    if ((v32 & 1) != 0)
    {
      v33 = *(_QWORD *)(v22 + 56) + 24 * v31;
      v34 = *(_QWORD *)v33;
      v35 = *(_BYTE *)(v33 + 8);
      swift_bridgeObjectRelease();
      if ((v35 & 1) == 0)
      {
        v37 = v28 < 1 || v34 > 0;
        if (v28 <= 0 && v34 < 1)
          goto LABEL_18;
        goto LABEL_22;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v37 = 0;
  if (v28 > 0)
  {
    v30 = 1;
LABEL_22:
    v173 = __PAIR64__(v30, v37);
    goto LABEL_24;
  }
  v174 = 0;
  v179 = 0;
  v173 = 0;
LABEL_24:
  if (qword_1F01A8 != -1)
    swift_once(&qword_1F01A8, sub_180F88);
  v38 = type metadata accessor for Logger(0);
  v39 = sub_5216C(v38, (uint64_t)qword_1F7FE0);
  swift_bridgeObjectRetain_n(v23, 8);
  swift_bridgeObjectRetain_n(a1, 2);
  v170 = v39;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  v43 = os_log_type_enabled(v41, (os_log_type_t)v42);
  v180 = v8;
  v194 = v13;
  v195 = v23;
  if (v43)
  {
    v160 = v42;
    v161 = v41;
    v44 = swift_slowAlloc(84, -1);
    *(_DWORD *)v44 = 134220032;
    v45 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRelease();
    *(_QWORD *)&v200 = v45;
    v46 = (char *)&v200 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2048;
    v47 = v23[2];
    swift_bridgeObjectRelease();
    *(_QWORD *)&v200 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v44 + 14, v44 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 22) = 1024;
    LODWORD(v200) = HIDWORD(v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 4, v44 + 24, v44 + 28);
    *(_WORD *)(v44 + 28) = 1024;
    LODWORD(v200) = v173;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 4, v44 + 30, v44 + 34);
    *(_WORD *)(v44 + 34) = 2048;
    *(_QWORD *)&v200 = v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v44 + 36, v44 + 44);
    *(_WORD *)(v44 + 44) = 2048;
    *(double *)&v200 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v44 + 46, v44 + 54);
    v163 = (uint8_t *)v44;
    *(_WORD *)(v44 + 54) = 2048;
    v48 = v23[2];
    v182 = v48;
    if (v48)
    {
      v159 = (char *)&v200 + 8;
      swift_bridgeObjectRetain(v23);
      v49 = 0;
      v50 = _swiftEmptyArrayStorage;
      while (1)
      {
        v51 = v23[v49 + 4];
        v52 = LOBYTE(v23[v49 + 5]);
        v185 = v23[v49 + 6];
        v186 = v51;
        v184 = LOBYTE(v23[v49 + 7]);
        v53 = v23[v49 + 8];
        v54 = LOBYTE(v23[v49 + 9]);
        v55 = v23[v49 + 10];
        v183 = v23[v49 + 11];
        v56 = (_QWORD *)v23[v49 + 12];
        v57 = v23[v49 + 13];
        v58 = *(_OWORD *)&v23[v49 + 14];
        v196 = *(_OWORD *)&v23[v49 + 16];
        v197 = v58;
        v59 = *((_QWORD *)&v58 + 1);
        v60 = *((_QWORD *)&v196 + 1);
        v187 = v52;
        v190 = v56;
        *(_QWORD *)&v191 = v55;
        LODWORD(v189) = v54;
        v188 = v53;
        if ((v52 & 1) == 0)
          break;
        v61 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
        v62 = v53;
        v63 = v61;
        sub_40554(v62, v54);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v197);
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v196);
        swift_bridgeObjectRetain(v60);
        swift_bridgeObjectRetain(v55);
        swift_bridgeObjectRelease();
        if ((v63 & 1) != 0)
          goto LABEL_35;
        sub_40568(v188, v189);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = v195;
LABEL_30:
        v49 += 14;
        --v48;
        v13 = v194;
        if (!v48)
        {
          swift_bridgeObjectRelease();
          v46 = v159;
          goto LABEL_43;
        }
      }
      sub_40554(v53, v54);
      swift_bridgeObjectRetain(v56);
      swift_bridgeObjectRetain(v197);
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v196);
      swift_bridgeObjectRetain(v60);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRelease();
LABEL_35:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v50);
      *(_QWORD *)&v200 = v50;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_3432C(0, v50[2] + 1, 1);
        v50 = (_QWORD *)v200;
      }
      v23 = v195;
      v65 = v190;
      v66 = v189;
      v67 = v188;
      v69 = v196;
      v68 = v197;
      v71 = v50[2];
      v70 = v50[3];
      if (v71 >= v70 >> 1)
      {
        sub_3432C(v70 > 1, v71 + 1, 1);
        v69 = v196;
        v68 = v197;
        v50 = (_QWORD *)v200;
      }
      v50[2] = v71 + 1;
      v72 = &v50[14 * v71];
      v72[4] = v186;
      *((_BYTE *)v72 + 40) = v187;
      v72[6] = v185;
      *((_BYTE *)v72 + 56) = v184;
      v72[8] = v67;
      *((_BYTE *)v72 + 72) = v66;
      v73 = v183;
      v72[10] = v191;
      v72[11] = v73;
      v72[12] = v65;
      v72[13] = v57;
      *((_OWORD *)v72 + 7) = v68;
      *((_OWORD *)v72 + 8) = v69;
      goto LABEL_30;
    }
    v50 = _swiftEmptyArrayStorage;
LABEL_43:
    v74 = v163;
    v75 = v50[2];
    swift_bridgeObjectRelease();
    swift_release(v50);
    *(_QWORD *)&v200 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v46, v74 + 56, v74 + 64);
    swift_bridgeObjectRelease();
    *((_WORD *)v74 + 32) = 2048;
    v76 = v182;
    if (v182)
    {
      swift_bridgeObjectRetain(v23);
      v77 = 0;
      v78 = _swiftEmptyArrayStorage;
      while (1)
      {
        v79 = v23[v77 + 4];
        v80 = LOBYTE(v23[v77 + 5]);
        v185 = v23[v77 + 6];
        v186 = v79;
        v184 = LOBYTE(v23[v77 + 7]);
        v81 = v23[v77 + 8];
        v82 = LOBYTE(v23[v77 + 9]);
        v83 = v23[v77 + 10];
        v183 = v23[v77 + 11];
        v84 = (_QWORD *)v23[v77 + 12];
        v85 = v23[v77 + 13];
        v86 = *(_OWORD *)&v23[v77 + 14];
        v196 = *(_OWORD *)&v23[v77 + 16];
        v197 = v86;
        v87 = *((_QWORD *)&v86 + 1);
        v88 = *((_QWORD *)&v196 + 1);
        v187 = v80;
        v190 = v84;
        *(_QWORD *)&v191 = v83;
        LODWORD(v189) = v82;
        v188 = v81;
        if (v80 == 1)
          break;
        v89 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
        v90 = v81;
        v91 = v89;
        sub_40554(v90, v82);
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRetain(v197);
        swift_bridgeObjectRetain(v87);
        swift_bridgeObjectRetain(v196);
        swift_bridgeObjectRetain(v88);
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRelease();
        if ((v91 & 1) != 0)
          goto LABEL_50;
        sub_40568(v188, v189);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = v195;
LABEL_46:
        v77 += 14;
        --v76;
        v13 = v194;
        if (!v76)
        {
          swift_bridgeObjectRelease();
          goto LABEL_57;
        }
      }
      sub_40554(v81, v82);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v197);
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRetain(v196);
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRelease();
LABEL_50:
      v92 = swift_isUniquelyReferenced_nonNull_native(v78);
      *(_QWORD *)&v200 = v78;
      if ((v92 & 1) == 0)
      {
        sub_3432C(0, v78[2] + 1, 1);
        v78 = (_QWORD *)v200;
      }
      v23 = v195;
      v93 = v190;
      v94 = v189;
      v95 = v188;
      v97 = v196;
      v96 = v197;
      v99 = v78[2];
      v98 = v78[3];
      if (v99 >= v98 >> 1)
      {
        sub_3432C(v98 > 1, v99 + 1, 1);
        v97 = v196;
        v96 = v197;
        v78 = (_QWORD *)v200;
      }
      v78[2] = v99 + 1;
      v100 = &v78[14 * v99];
      v100[4] = v186;
      *((_BYTE *)v100 + 40) = v187;
      v100[6] = v185;
      *((_BYTE *)v100 + 56) = v184;
      v100[8] = v95;
      *((_BYTE *)v100 + 72) = v94;
      v101 = v183;
      v100[10] = v191;
      v100[11] = v101;
      v100[12] = v93;
      v100[13] = v85;
      *((_OWORD *)v100 + 7) = v96;
      *((_OWORD *)v100 + 8) = v97;
      goto LABEL_46;
    }
    v78 = _swiftEmptyArrayStorage;
LABEL_57:
    v102 = v163;
    v103 = v78[2];
    swift_bridgeObjectRelease();
    swift_release(v78);
    *(_QWORD *)&v200 = v103;
    v188 = (uint64_t)&v200 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, (char *)&v200 + 8, v102 + 66, v102 + 74);
    swift_bridgeObjectRelease();
    *((_WORD *)v102 + 37) = 2048;
    v104 = v182;
    if (v182)
    {
      swift_bridgeObjectRetain(v23);
      v105 = 0;
      v106 = _swiftEmptyArrayStorage;
      do
      {
        v112 = &v23[v105];
        if ((v23[v105 + 7] & 1) == 0)
        {
          v182 = v104;
          v113 = (_QWORD *)v112[4];
          v114 = *((_BYTE *)v112 + 40);
          v189 = v112[6];
          v190 = v113;
          v115 = v112[8];
          v116 = *((_BYTE *)v112 + 72);
          v117 = v112[10];
          *(_QWORD *)&v191 = v112[11];
          v118 = v112[12];
          v119 = v112[13];
          v120 = *((_OWORD *)v112 + 7);
          v196 = *((_OWORD *)v112 + 8);
          v197 = v120;
          sub_40554(v115, v116);
          swift_bridgeObjectRetain(v118);
          swift_bridgeObjectRetain(v197);
          swift_bridgeObjectRetain(*((_QWORD *)&v197 + 1));
          swift_bridgeObjectRetain(v196);
          swift_bridgeObjectRetain(*((_QWORD *)&v196 + 1));
          swift_bridgeObjectRetain(v117);
          v121 = swift_isUniquelyReferenced_nonNull_native(v106);
          *(_QWORD *)&v200 = v106;
          if ((v121 & 1) == 0)
          {
            sub_3432C(0, v106[2] + 1, 1);
            v106 = (_QWORD *)v200;
          }
          v108 = v106[2];
          v107 = v106[3];
          if (v108 >= v107 >> 1)
          {
            sub_3432C(v107 > 1, v108 + 1, 1);
            v106 = (_QWORD *)v200;
          }
          v106[2] = v108 + 1;
          v109 = &v106[14 * v108];
          v109[4] = v190;
          *((_BYTE *)v109 + 40) = v114;
          v109[6] = v189;
          *((_BYTE *)v109 + 56) = 0;
          v109[8] = v115;
          *((_BYTE *)v109 + 72) = v116;
          v110 = v191;
          v109[10] = v117;
          v109[11] = v110;
          v109[12] = v118;
          v109[13] = v119;
          v111 = v196;
          *((_OWORD *)v109 + 7) = v197;
          *((_OWORD *)v109 + 8) = v111;
          v23 = v195;
          v104 = v182;
        }
        v105 += 14;
        --v104;
      }
      while (v104);
      swift_bridgeObjectRelease();
      v13 = v194;
    }
    else
    {
      v106 = _swiftEmptyArrayStorage;
    }
    v122 = v163;
    v123 = v106[2];
    swift_bridgeObjectRelease();
    swift_release(v106);
    *(_QWORD *)&v200 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, v188, v122 + 76, v122 + 84);
    swift_bridgeObjectRelease();
    v124 = v161;
    _os_log_impl(&dword_0, v161, (os_log_type_t)v160, "Clustering %ld books diversified=%ld allowSingleBooks=%{BOOL}d allowSeriesBooks=%{BOOL}d maxHighScoringSingleBookCollectionCount=%ld thresholdRatio=%f books=%ld audiobooks=%ld seriesBooks=%ld", v122, 0x54u);
    swift_slowDealloc(v122, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease_n(v23, 8);
  }
  v125 = v176;
  v126 = sub_181844(v178, v177, v176, v175, v165);
  v127 = v171;
  swift_bridgeObjectRetain(v171);
  sub_18233C(v166, v127);
  v129 = v128;
  swift_bridgeObjectRelease();
  v131 = v167;
  v130 = v168;
  if (*(_QWORD *)(v125 + 16) && (sub_3951C(5), (v132 & 1) != 0))
  {
    swift_bridgeObjectRetain(v130);
    swift_bridgeObjectRetain_n(v131, 2);
    swift_bridgeObjectRetain(v172);
    swift_bridgeObjectRetain(v171);
    v133 = (_QWORD *)sub_3CD28(v131);
    swift_bridgeObjectRelease();
    v134 = v133[2];
    v135 = v134 != 0;
    if (!v134)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v130);
      v133 = (_QWORD *)sub_3CD28(v136);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v135 = 0;
    v133 = &_swiftEmptySetSingleton;
  }
  v138 = v177;
  v137 = v178;
  *(_QWORD *)&v200 = v178;
  *((_QWORD *)&v200 + 1) = v177;
  v201 = v176;
  v202 = v175;
  v139 = sub_3CD28((uint64_t)v126);
  swift_bridgeObjectRelease();
  v140 = sub_A3674(&v200, v139, (uint64_t)v133, v135, (uint64_t)v195, v137, v138, SHIDWORD(v173), v18, v15, v173, v179, v174, v172, v129, v169);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v203 = _swiftEmptyArrayStorage;
  if (v140[2])
  {
    v141 = (uint64_t)v140
         + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    v142 = *(_QWORD *)(v162 + 72);
    v190 = v140;
    swift_bridgeObjectRetain(v140);
    v191 = xmmword_1875E0;
    v195 = (_QWORD *)v142;
    sub_52258(v141, (uint64_t)v13);
    v143 = v198;
    sub_52258((uint64_t)v13, v198);
    v144 = (char *)&loc_183A58 + 4 * a5Z[swift_getEnumCaseMultiPayload(v143, v192)];
    __asm { BR              X9 }
  }
  v150 = _swiftEmptyArrayStorage[2];
  if (v150)
  {
    *(_QWORD *)&v200 = _swiftEmptyArrayStorage;
    sub_340AC(0, v150, 0);
    v145 = (_QWORD *)v200;
    v146 = *(_QWORD *)(v200 + 16);
    v147 = 4;
    do
    {
      v148 = _swiftEmptyArrayStorage[v147];
      *(_QWORD *)&v200 = v145;
      v149 = v145[3];
      if (v146 >= v149 >> 1)
      {
        sub_340AC(v149 > 1, v146 + 1, 1);
        v145 = (_QWORD *)v200;
      }
      v145[2] = v146 + 1;
      v145[v146 + 4] = v148;
      v147 += 10;
      ++v146;
      --v150;
    }
    while (v150);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v145 = _swiftEmptyArrayStorage;
  }
  sub_3CD28((uint64_t)v145);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n(v140, 2);
  v152 = Logger.logObject.getter(v151);
  v153 = static os_log_type_t.default.getter(v152);
  if (os_log_type_enabled(v152, v153))
  {
    v154 = (uint8_t *)swift_slowAlloc(12, -1);
    v155 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v200 = v155;
    *(_DWORD *)v154 = 136315138;
    v156 = sub_18092C((uint64_t)v140);
    v203 = (_QWORD *)sub_9DA98(v156, v157, (uint64_t *)&v200);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v203, &v204, v154 + 4, v154 + 12);
    swift_bridgeObjectRelease_n(v140, 2);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v152, v153, "Clustered: %s", v154, 0xCu);
    swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v155, -1, -1);
    swift_slowDealloc(v154, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v140, 2);
  }
  return v140;
}

uint64_t sub_183E5C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x736B6F6F426E696DLL && a2 == 0xED0000746E756F43)
  {
    v5 = 0xED0000746E756F43;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736B6F6F426E696DLL, 0xED0000746E756F43, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x736B6F6F4278616DLL && a2 == 0xED0000746E756F43)
  {
    v7 = 0xED0000746E756F43;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736B6F6F4278616DLL, 0xED0000746E756F43, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000025 && a2 == 0x80000000001A2250)
  {
    v8 = 0x80000000001A2250;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000025, 0x80000000001A2250, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000000001A3A40)
  {
    swift_bridgeObjectRelease(0x80000000001A3A40);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001A3A40, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_184044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_181AA4(a1, a2, a3);
}

unint64_t sub_184060()
{
  unint64_t result;

  result = qword_1F80E8;
  if (!qword_1F80E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionRecommendationType, &type metadata for CollectionRecommendationType);
    atomic_store(result, (unint64_t *)&qword_1F80E8);
  }
  return result;
}

unint64_t sub_1840A4()
{
  unint64_t result;

  result = qword_1F80F0;
  if (!qword_1F80F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClusteringOptions.MediaType, &type metadata for ClusteringOptions.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F80F0);
  }
  return result;
}

uint64_t destroy for ClusterableBook(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) != 255)
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
}

uint64_t initializeWithCopy for ClusterableBook(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = (_QWORD *)(a2 + 32);
  v5 = *(unsigned __int8 *)(a2 + 40);
  if (v5 == 255)
  {
    *(_QWORD *)(a1 + 32) = *v4;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  }
  else
  {
    v6 = *v4;
    *(_QWORD *)(a1 + 32) = *v4;
    *(_BYTE *)(a1 + 40) = v5 & 1;
    swift_bridgeObjectRetain(v6);
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v9;
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  v14 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v13;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t assignWithCopy for ClusterableBook(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = a1 + 32;
  v6 = (uint64_t *)(a2 + 32);
  v7 = *(unsigned __int8 *)(a2 + 40);
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (v7 == 255)
    {
      v9 = *v6;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)v5 = v9;
    }
    else
    {
      v11 = *v6;
      *(_QWORD *)(a1 + 32) = *v6;
      *(_BYTE *)(a1 + 40) = v7 & 1;
      swift_bridgeObjectRetain(v11);
    }
  }
  else if (v7 == 255)
  {
    sub_42750((_QWORD *)(a1 + 32));
    v8 = *((_BYTE *)v6 + 8);
    *(_QWORD *)v5 = *v6;
    *(_BYTE *)(v5 + 8) = v8;
  }
  else
  {
    v10 = *v6;
    *(_QWORD *)(a1 + 32) = *v6;
    *(_BYTE *)(a1 + 40) = v7 & 1;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRelease();
  }
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ClusterableBook(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = a1 + 32;
  v5 = a2 + 32;
  if (*(unsigned __int8 *)(a1 + 40) != 255)
  {
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 != 255)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)v5;
      *(_BYTE *)(a1 + 40) = v6 & 1;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_42750((_QWORD *)(a1 + 32));
  }
  *(_QWORD *)v4 = *(_QWORD *)v5;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v5 + 8);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClusterableBook(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClusterableBook(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClusterableBook()
{
  return &type metadata for ClusterableBook;
}

ValueMetadata *type metadata accessor for InternalBookRecommendationResponse()
{
  return &type metadata for InternalBookRecommendationResponse;
}

id CachedPersonalizationBookMetadataAuthor.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

id CachedPersonalizationMetadataBISAC.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CachedPersonalizationMetadataBISAC();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for CachedPersonalizationMetadataBISAC()
{
  return objc_opt_self(CachedPersonalizationMetadataBISAC);
}

id CachedPersonalizationMetadataBISAC.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CachedPersonalizationMetadataBISAC();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id static CachedPersonalizationMetadataBISAC.fetchRequest()()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSFetchRequest);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithEntityName:", v1);

  return v2;
}

void *sub_184730()
{
  return &protocol witness table for ObjectIdentifier;
}

void sub_18473C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "code");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_1847A0(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setCode:");

}

uint64_t sub_1847FC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CachedPersonalizationMetadataBISAC();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

const char *sub_18483C()
{
  return "code";
}

const char *sub_184850()
{
  return "books";
}

id sub_18485C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "books");
  *a2 = result;
  return result;
}

id sub_184894(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setBooks:", *a1);
}

id CachedPersonalizationMetadataBook.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CachedPersonalizationMetadataBook();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for CachedPersonalizationMetadataBook()
{
  return objc_opt_self(CachedPersonalizationMetadataBook);
}

id CachedPersonalizationMetadataBook.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CachedPersonalizationMetadataBook();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id static CachedPersonalizationMetadataBook.fetchRequest()()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSFetchRequest);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithEntityName:", v1);

  return v2;
}

void sub_184A14(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "deduplicationID");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_184A78(uint64_t a1, void **a2)
{
  void *v2;
  NSString v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = String._bridgeToObjectiveC()();
  else
    v3 = 0;
  v4 = v3;
  objc_msgSend(v2, "setDeduplicationID:");

}

uint64_t sub_184AD4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "downloadTimestamp");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_184B58(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_143CD0(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setDownloadTimestamp:", isa);

}

uint64_t sub_184C34@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CachedPersonalizationMetadataBook();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

const char *sub_184C74()
{
  return "assetID";
}

id sub_184C80@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "assetID");
  *a2 = result;
  return result;
}

id sub_184CB0(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAssetID:", *a1);
}

const char *sub_184CC4()
{
  return "deduplicationID";
}

const char *sub_184CD8()
{
  return "downloadTimestamp";
}

const char *sub_184CEC()
{
  return "ulyssesEmbedding";
}

id sub_184CF8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "ulyssesEmbedding");
  *a2 = result;
  return result;
}

id sub_184D30(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setUlyssesEmbedding:", *a1);
}

const char *sub_184D44()
{
  return "bisac";
}

id sub_184D50@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "bisac");
  *a2 = result;
  return result;
}

id sub_184D88(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setBisac:", *a1);
}

id CachedPersonalizationBookMetadata.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CachedPersonalizationBookMetadata();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for CachedPersonalizationBookMetadata()
{
  return objc_opt_self(CachedPersonalizationBookMetadata);
}

id CachedPersonalizationBookMetadata.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CachedPersonalizationBookMetadata();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id static CachedPersonalizationBookMetadata.fetchRequest()()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSFetchRequest);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithEntityName:", v1);

  return v2;
}

uint64_t sub_184F08@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, "lastAccessDate");
  if (v3)
  {
    v4 = v3;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = type metadata accessor for Date(0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_184F8C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  uint64_t v11;

  v4 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_143CD0(a1, (uint64_t)v6);
  v7 = *a2;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, "setLastAccessDate:", isa);

}

uint64_t sub_185068@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CachedPersonalizationBookMetadata();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

id sub_1850A8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "assetID");
  *a2 = result;
  return result;
}

id sub_1850D8(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAssetID:", *a1);
}

const char *sub_1850EC()
{
  return "genresKnown";
}

id sub_1850F8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "genresKnown");
  *a2 = (_BYTE)result;
  return result;
}

id sub_185128(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setGenresKnown:", *a1);
}

const char *sub_18513C()
{
  return "lastAccessDate";
}

const char *sub_185150()
{
  return "mappedAssetID";
}

id sub_18515C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "mappedAssetID");
  *a2 = result;
  return result;
}

id sub_18518C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setMappedAssetID:", *a1);
}

const char *sub_1851A0()
{
  return "mappedSeriesID";
}

id sub_1851AC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "mappedSeriesID");
  *a2 = result;
  return result;
}

id sub_1851DC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setMappedSeriesID:", *a1);
}

const char *sub_1851F0()
{
  return "mediaType";
}

id sub_1851FC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "mediaType");
  *a2 = result;
  return result;
}

id sub_18522C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setMediaType:", *a1);
}

const char *sub_185240()
{
  return "seriesID";
}

id sub_18524C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "seriesID");
  *a2 = result;
  return result;
}

id sub_18527C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setSeriesID:", *a1);
}

const char *sub_185290()
{
  return "authors";
}

id sub_18529C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "authors");
  *a2 = result;
  return result;
}

id sub_1852D4(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAuthors:", *a1);
}

const char *sub_1852E8()
{
  return "leafGenres";
}

id sub_1852F4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "leafGenres");
  *a2 = result;
  return result;
}

id sub_18532C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setLeafGenres:", *a1);
}

id CachedPersonalizationBookMetadataAuthor.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CachedPersonalizationBookMetadataAuthor();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for CachedPersonalizationBookMetadataAuthor()
{
  return objc_opt_self(CachedPersonalizationBookMetadataAuthor);
}

id CachedPersonalizationBookMetadataAuthor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CachedPersonalizationBookMetadataAuthor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id static CachedPersonalizationBookMetadataAuthor.fetchRequest()()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSFetchRequest);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithEntityName:", v1);

  return v2;
}

uint64_t sub_1854AC@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CachedPersonalizationBookMetadataAuthor();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

const char *sub_1854EC()
{
  return "authorID";
}

id sub_1854F8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "authorID");
  *a2 = result;
  return result;
}

id sub_185528(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setAuthorID:", *a1);
}

const char *sub_18553C()
{
  return "metadatas";
}

id sub_185548@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "metadatas");
  *a2 = result;
  return result;
}

id sub_185580(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setMetadatas:", *a1);
}

id CachedPersonalizationBookMetadataGenre.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for CachedPersonalizationBookMetadataGenre();
  v5 = objc_msgSendSuper2(&v7, "initWithEntity:insertIntoManagedObjectContext:", a1, a2);

  return v5;
}

uint64_t type metadata accessor for CachedPersonalizationBookMetadataGenre()
{
  return objc_opt_self(CachedPersonalizationBookMetadataGenre);
}

id CachedPersonalizationBookMetadataGenre.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CachedPersonalizationBookMetadataGenre();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id static CachedPersonalizationBookMetadataGenre.fetchRequest()()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSFetchRequest);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithEntityName:", v1);

  return v2;
}

uint64_t sub_185700@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CachedPersonalizationBookMetadataGenre();
  result = Identifiable<>.id.getter(v4, a1);
  *a2 = result;
  return result;
}

const char *sub_185740()
{
  return "genreID";
}

id sub_18574C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "genreID");
  *a2 = result;
  return result;
}

id sub_18577C(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setGenreID:", *a1);
}

const char *sub_185798()
{
  return "path";
}

id sub_1857A4@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "path");
  *a2 = result;
  return result;
}

id sub_1857DC(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setPath:", *a1);
}

id sub_1857F0@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "metadatas");
  *a2 = result;
  return result;
}

id sub_185828(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setMetadatas:", *a1);
}

