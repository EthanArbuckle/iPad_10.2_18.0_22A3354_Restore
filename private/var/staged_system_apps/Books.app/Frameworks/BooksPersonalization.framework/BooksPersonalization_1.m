uint64_t sub_71F4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  int *v7;

  v1[605] = v0;
  if (v0)
    return swift_task_switch(sub_72990, 0, 0);
  v3 = v1[597];
  v4 = v1[495];
  memcpy(v1 + 359, v1 + 87, 0x440uLL);
  memcpy(v1 + 223, v1 + 87, 0x440uLL);
  v5 = *(int **)(v3 + 8);
  sub_71068((uint64_t)(v1 + 359));
  v7 = (int *)((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v1[606] = v6;
  *v6 = v1;
  v6[1] = sub_72038;
  return ((uint64_t (*)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))v7)(v1[604], v4, v1 + 223, v1[591], v1[597]);
}

uint64_t sub_72038(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 4848);
  *(_QWORD *)(v3 + 4856) = a1;
  *(_QWORD *)(v3 + 4864) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    sub_5B70(v3 + 2872);
    swift_bridgeObjectRelease();
    v5 = sub_72A70;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_5B70(v3 + 2872);
    v5 = sub_720D8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_720D8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = (_QWORD *)v0[567];
  sub_62F8(v0 + 551);
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[609] = v5;
  *v5 = v0;
  v5[1] = sub_72160;
  return v7(v2, v3);
}

uint64_t sub_72160(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 4872);
  *(_QWORD *)(v3 + 4880) = a1;
  *(_QWORD *)(v3 + 4888) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_72B3C;
  else
    v5 = sub_721D0;
  return swift_task_switch(v5, 0, 0);
}

void sub_721D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  char v20;
  uint64_t v21;
  char v22;
  unsigned __int8 v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  unsigned __int8 v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  int *v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  uint64_t v46[3];

  v1 = v0[610];
  swift_bridgeObjectRetain(v0[607]);
  v3 = sub_27D94(v2);
  v45 = v3;
  v4 = *(_QWORD *)(v1 + 16);
  if (!v4)
  {
    v11 = v3;
LABEL_67:
    v38 = (_QWORD *)v0[567];
    v39 = v38[15];
    v40 = v38[16];
    sub_49F4(v38 + 12, v39);
    v41 = sub_37DCC(v11);
    v0[612] = v41;
    swift_bridgeObjectRelease();
    v42 = *(int **)(v40 + 16);
    v44 = (int *)((char *)v42 + *v42);
    v43 = (_QWORD *)swift_task_alloc(v42[1]);
    v0[613] = v43;
    *v43 = v0;
    v43[1] = sub_725F0;
    ((void (*)(_QWORD *, uint64_t, uint64_t))v44)(v41, v39, v40);
    return;
  }
  v5 = v0[610];
  v6 = v0[573];
  v7 = v5 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v8 = *(_QWORD *)(v6 + 72);
  v9 = v0[611];
  swift_bridgeObjectRetain(v5);
  v10 = 0;
  while (1)
  {
    sub_6AB9C(v7 + v10 * v8, v0[579]);
    Event.assetID.getter();
    v14 = v13;
    v15 = HIBYTE(v13) & 0xF;
    v16 = v12 & 0xFFFFFFFFFFFFLL;
    if ((v14 & 0x2000000000000000) != 0 ? v15 : v12 & 0xFFFFFFFFFFFFLL)
      break;
    swift_bridgeObjectRelease();
LABEL_5:
    ++v10;
    sub_6ABE0(v0[579]);
    if (v10 == v4)
    {
      swift_bridgeObjectRelease();
      v11 = v45;
      goto LABEL_67;
    }
  }
  if ((v14 & 0x1000000000000000) != 0)
  {
    v21 = sub_3A9A0(v12, v14, 10);
    v22 = v37;
LABEL_43:
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
      sub_1628D4(v46, v21);
    goto LABEL_5;
  }
  if ((v14 & 0x2000000000000000) == 0)
  {
    if ((v12 & 0x1000000000000000) != 0)
      v18 = (unsigned __int8 *)((v14 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v18 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v12, v14);
    v19 = sub_3A98C(v18, v16, 10);
    if (v9)
      return;
    v21 = (uint64_t)v19;
    v22 = v20 & 1;
    goto LABEL_43;
  }
  v46[0] = v12;
  v46[1] = v14 & 0xFFFFFFFFFFFFFFLL;
  if (v12 == 43)
  {
    if (!v15)
      goto LABEL_70;
    if (v15 == 1 || (BYTE1(v12) - 48) > 9u)
      goto LABEL_39;
    v21 = (BYTE1(v12) - 48);
    if (v15 != 2)
    {
      if ((BYTE2(v12) - 48) > 9u)
        goto LABEL_39;
      v21 = 10 * (BYTE1(v12) - 48) + (BYTE2(v12) - 48);
      v26 = v15 - 3;
      if (v26)
      {
        v27 = (unsigned __int8 *)v46 + 3;
        while (1)
        {
          v28 = *v27 - 48;
          if (v28 > 9)
            goto LABEL_39;
          if (!is_mul_ok(v21, 0xAuLL))
            goto LABEL_39;
          v24 = __CFADD__(10 * v21, v28);
          v21 = 10 * v21 + v28;
          if (v24)
            goto LABEL_39;
          v22 = 0;
          ++v27;
          if (!--v26)
            goto LABEL_43;
        }
      }
    }
LABEL_42:
    v22 = 0;
    goto LABEL_43;
  }
  if (v12 != 45)
  {
    if (!v15 || (v12 - 48) > 9u)
      goto LABEL_39;
    v21 = (v12 - 48);
    if (v15 != 1)
    {
      if ((BYTE1(v12) - 48) > 9u)
        goto LABEL_39;
      v21 = 10 * (v12 - 48) + (BYTE1(v12) - 48);
      v29 = v15 - 2;
      if (v29)
      {
        v30 = (unsigned __int8 *)v46 + 2;
        while (1)
        {
          v31 = *v30 - 48;
          if (v31 > 9)
            goto LABEL_39;
          if (!is_mul_ok(v21, 0xAuLL))
            goto LABEL_39;
          v24 = __CFADD__(10 * v21, v31);
          v21 = 10 * v21 + v31;
          if (v24)
            goto LABEL_39;
          v22 = 0;
          ++v30;
          if (!--v29)
            goto LABEL_43;
        }
      }
    }
    goto LABEL_42;
  }
  if (v15)
  {
    if (v15 != 1)
    {
      v23 = BYTE1(v12) - 48;
      if ((BYTE1(v12) - 48) <= 9u)
      {
        v21 = 0;
        v24 = v23 == 0;
        v25 = -(uint64_t)v23;
        if (!v24)
          goto LABEL_40;
        if (v15 == 2)
        {
          v22 = 0;
          v21 = v25;
          goto LABEL_43;
        }
        v32 = BYTE2(v12) - 48;
        if ((BYTE2(v12) - 48) <= 9u && is_mul_ok(v25, 0xAuLL))
        {
          v33 = 10 * v25;
          v21 = v33 - v32;
          if (v33 >= v32)
          {
            v34 = v15 - 3;
            if (v34)
            {
              v35 = (unsigned __int8 *)v46 + 3;
              while (1)
              {
                v36 = *v35 - 48;
                if (v36 > 9)
                  goto LABEL_39;
                if (!is_mul_ok(v21, 0xAuLL))
                  goto LABEL_39;
                v24 = 10 * v21 >= (unint64_t)v36;
                v21 = 10 * v21 - v36;
                if (!v24)
                  goto LABEL_39;
                v22 = 0;
                ++v35;
                if (!--v34)
                  goto LABEL_43;
              }
            }
            goto LABEL_42;
          }
        }
      }
    }
LABEL_39:
    v21 = 0;
LABEL_40:
    v22 = 1;
    goto LABEL_43;
  }
  __break(1u);
LABEL_70:
  __break(1u);
}

uint64_t sub_725F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 4904);
  *(_QWORD *)(*v2 + 4912) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_72C04;
  }
  else
  {
    swift_release(*(_QWORD *)(v4 + 4896));
    *(_QWORD *)(v4 + 4920) = a1;
    v6 = sub_7266C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_7266C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)();
  uint64_t v20;
  unint64_t v21;
  _OWORD v23[11];
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 4920);
  v2 = *(_QWORD *)(v0 + 4880);
  v3 = *(unsigned __int8 *)(v0 + 4960);
  v4 = sub_38520(*(_QWORD *)(v0 + 4856));
  swift_bridgeObjectRelease();
  v5 = *(_OWORD *)(v0 + 4104);
  v23[8] = *(_OWORD *)(v0 + 4088);
  v23[9] = v5;
  v23[10] = *(_OWORD *)(v0 + 4120);
  v24 = *(_QWORD *)(v0 + 4136);
  v6 = *(_OWORD *)(v0 + 4040);
  v23[4] = *(_OWORD *)(v0 + 4024);
  v23[5] = v6;
  v7 = *(_OWORD *)(v0 + 4072);
  v23[6] = *(_OWORD *)(v0 + 4056);
  v23[7] = v7;
  v8 = *(_OWORD *)(v0 + 3976);
  v23[0] = *(_OWORD *)(v0 + 3960);
  v23[1] = v8;
  v9 = *(_OWORD *)(v0 + 4008);
  v23[2] = *(_OWORD *)(v0 + 3992);
  v23[3] = v9;
  v10 = sub_82D88(v2, (uint64_t)v4, v1, (uint64_t *)v23);
  *(_QWORD *)(v0 + 4928) = v10;
  swift_release(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_73330((_QWORD *)(v0 + 4184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_5DFC);
  if (v3 != 1)
    goto LABEL_5;
  v11 = *(_QWORD *)(v0 + 4912);
  v12 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = JSONEncoder.init()();
  *(_QWORD *)(v0 + 4488) = v10;
  v14 = type metadata accessor for Features(0);
  v15 = sub_7339C();
  v16 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 4488, v14, v15);
  *(_QWORD *)(v0 + 4936) = v11;
  if (!v11)
  {
    v20 = v16;
    v21 = v17;
    Data.write(to:options:)(*(_QWORD *)(v0 + 4536) + OBJC_IVAR____TtC20BooksPersonalization32UserEncodingInputFeaturesService_cachePath, 0, v16, v17);
    *(_QWORD *)(v0 + 4944) = 0;
    sub_3E21C(v20, v21);
    swift_release(v13);
LABEL_5:
    v18 = v0 + 4688;
    v19 = sub_72884;
    return swift_asyncLet_finish(v0 + 16, v0 + 696, v19, v18);
  }
  swift_release(v13);
  swift_release(v10);
  v18 = v0 + 4784;
  v19 = sub_72CEC;
  return swift_asyncLet_finish(v0 + 16, v0 + 696, v19, v18);
}

uint64_t sub_72884()
{
  return swift_task_switch(sub_72898, 0, 0);
}

uint64_t sub_72898()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 4928));
}

uint64_t sub_728E0()
{
  return swift_task_switch(sub_728F4, 0, 0);
}

uint64_t sub_728F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_72938()
{
  return swift_task_switch(sub_7294C, 0, 0);
}

uint64_t sub_7294C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_72990()
{
  uint64_t v0;

  sub_73330((_QWORD *)(v0 + 4184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_5DFC);
  swift_bridgeObjectRelease();
  sub_62F8((_QWORD *)(v0 + 4408));
  return swift_asyncLet_finish(v0 + 16, v0 + 696, sub_72A18, v0 + 4368);
}

uint64_t sub_72A18()
{
  return swift_task_switch(sub_72A2C, 0, 0);
}

uint64_t sub_72A2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_72A70()
{
  uint64_t v0;

  sub_73330((_QWORD *)(v0 + 4184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_5DFC);
  sub_62F8((_QWORD *)(v0 + 4408));
  return swift_asyncLet_finish(v0 + 16, v0 + 696, sub_72AE4, v0 + 4544);
}

uint64_t sub_72AE4()
{
  return swift_task_switch(sub_72AF8, 0, 0);
}

uint64_t sub_72AF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_72B3C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_73330((_QWORD *)(v0 + 4184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_5DFC);
  return swift_asyncLet_finish(v0 + 16, v0 + 696, sub_72BAC, v0 + 4592);
}

uint64_t sub_72BAC()
{
  return swift_task_switch(sub_72BC0, 0, 0);
}

uint64_t sub_72BC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_72C04()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 4896));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_73330((_QWORD *)(v0 + 4184), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_5DFC);
  return swift_asyncLet_finish(v0 + 16, v0 + 696, sub_72C94, v0 + 4640);
}

uint64_t sub_72C94()
{
  return swift_task_switch(sub_72CA8, 0, 0);
}

uint64_t sub_72CA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_72CEC()
{
  return swift_task_switch(sub_72D00, 0, 0);
}

uint64_t sub_72D00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_72D44()
{
  return swift_task_switch(sub_72D58, 0, 0);
}

uint64_t sub_72D58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 4632);
  swift_release_n(*(_QWORD *)(v0 + 4536), 2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_72D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_72DB4, 0, 0);
}

uint64_t sub_72DB4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[3];
  v2 = v1[20];
  v3 = v1[21];
  sub_49F4(v1 + 17, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[4] = v5;
  *v5 = v0;
  v5[1] = sub_72E38;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[2], v2, v3);
}

uint64_t sub_72E38()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_72E80()
{
  NSString v0;
  unsigned int v1;
  NSString v2;
  unsigned int v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  unint64_t v19;

  URL.path(percentEncoded:)(1);
  v16 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend(v16, "fileExistsAtPath:", v0);

  if (v1)
  {
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v18 = 0;
    v3 = objc_msgSend(v16, "removeItemAtPath:error:", v2, &v18);

    v4 = v18;
    if (v3)
    {
      v5 = v18;

    }
    else
    {
      v6 = v18;
      v7 = _convertNSErrorToError(_:)(v4);

      swift_willThrow(v8);
      if (qword_1F0148 != -1)
        swift_once(&qword_1F0148, sub_12F994);
      v9 = (id)qword_1F6220;
      v10 = static os_log_type_t.error.getter();
      v11 = sub_5EDC(&qword_1F14C8);
      v12 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v12 + 16) = xmmword_1875E0;
      v18 = 0;
      v19 = 0xE000000000000000;
      v17 = v7;
      v13 = sub_5EDC(&qword_1F1348);
      _print_unlocked<A, B>(_:_:)(&v17, &v18, v13, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v14 = v18;
      v15 = v19;
      *(_QWORD *)(v12 + 56) = &type metadata for String;
      *(_QWORD *)(v12 + 64) = sub_4AAD8();
      *(_QWORD *)(v12 + 32) = v14;
      *(_QWORD *)(v12 + 40) = v15;
      os_log(_:dso:log:type:_:)("Unable to clear cache: %{public}@", 33, 2, &dword_0, v9, v10, v12);

      swift_bridgeObjectRelease();
      swift_errorRelease(v7);
    }
  }
  else
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_730FC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_62F8(v0 + 2);
  sub_62F8(v0 + 7);
  sub_62F8(v0 + 12);
  sub_62F8(v0 + 17);
  v1 = (char *)v0 + OBJC_IVAR____TtC20BooksPersonalization32UserEncodingInputFeaturesService_cachePath;
  v2 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_7316C()
{
  return type metadata accessor for UserEncodingInputFeaturesService(0);
}

uint64_t type metadata accessor for UserEncodingInputFeaturesService(uint64_t a1)
{
  uint64_t result;

  result = qword_1F23A0;
  if (!qword_1F23A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UserEncodingInputFeaturesService);
  return result;
}

uint64_t sub_731B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = "(";
  v4[3] = "(";
  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_7322C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1F245C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_4814;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_72DB4, 0, 0);
}

uint64_t sub_7328C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F19F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_732D4(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 168);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

unint64_t sub_732EC()
{
  unint64_t result;

  result = qword_1F2468;
  if (!qword_1F2468)
  {
    result = swift_getWitnessTable(&unk_190240, &type metadata for UserEncodingInputFeaturesService.Errors);
    atomic_store(result, (unint64_t *)&qword_1F2468);
  }
  return result;
}

_QWORD *sub_73330(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22]);
  return a1;
}

unint64_t sub_7339C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F2470;
  if (!qword_1F2470)
  {
    v1 = type metadata accessor for Features(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Features, v1);
    atomic_store(result, (unint64_t *)&qword_1F2470);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for UserEncodingInputFeaturesService.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_73424 + 4 * byte_190120[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_73444 + 4 * byte_190125[v4]))();
}

_BYTE *sub_73424(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_73444(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_7344C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_73454(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_7345C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_73464(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UserEncodingInputFeaturesService.Errors()
{
  return &type metadata for UserEncodingInputFeaturesService.Errors;
}

unint64_t sub_73484()
{
  unint64_t result;

  result = qword_1F2478;
  if (!qword_1F2478)
  {
    result = swift_getWitnessTable(&unk_190218, &type metadata for UserEncodingInputFeaturesService.Errors);
    atomic_store(result, (unint64_t *)&qword_1F2478);
  }
  return result;
}

void sub_734C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_23;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_23;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_23;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v12 - 1) & v12;
    v9 = __clz(__rbit64(v12)) + (v7 << 6);
LABEL_5:
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9));
    sub_10F958(v10);
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_23;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_73634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 64);
  if (v1)
  {
    swift_bridgeObjectRetain(v1);
    sub_734C8(v2);
    v4 = v3;
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      sub_340AC(0, v5, 0);
      v6 = _swiftEmptyArrayStorage[2];
      v7 = 32;
      do
      {
        v8 = *(_QWORD *)(v4 + v7);
        v9 = _swiftEmptyArrayStorage[3];
        if (v6 >= v9 >> 1)
          sub_340AC(v9 > 1, v6 + 1, 1);
        _swiftEmptyArrayStorage[2] = v6 + 1;
        _swiftEmptyArrayStorage[v6 + 4] = v8;
        v7 += 552;
        ++v6;
        --v5;
      }
      while (v5);
    }
    swift_bridgeObjectRelease();
  }
  v10 = sub_3CD28((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_7373C(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  int64_t v35;
  _QWORD *v37;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v35 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v8 = v7 | (v6 << 6);
    }
    else
    {
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_44;
      if (v9 >= v35)
        return swift_release(a1);
      v10 = *(_QWORD *)(v34 + 8 * v9);
      ++v6;
      if (!v10)
      {
        v6 = v9 + 1;
        if (v9 + 1 >= v35)
          return swift_release(a1);
        v10 = *(_QWORD *)(v34 + 8 * v6);
        if (!v10)
        {
          v6 = v9 + 2;
          if (v9 + 2 >= v35)
            return swift_release(a1);
          v10 = *(_QWORD *)(v34 + 8 * v6);
          if (!v10)
          {
            v6 = v9 + 3;
            if (v9 + 3 >= v35)
              return swift_release(a1);
            v10 = *(_QWORD *)(v34 + 8 * v6);
            if (!v10)
            {
              v11 = v9 + 4;
              if (v11 >= v35)
                return swift_release(a1);
              v10 = *(_QWORD *)(v34 + 8 * v11);
              if (!v10)
              {
                while (1)
                {
                  v6 = v11 + 1;
                  if (__OFADD__(v11, 1))
                    goto LABEL_45;
                  if (v6 >= v35)
                    return swift_release(a1);
                  v10 = *(_QWORD *)(v34 + 8 * v6);
                  ++v11;
                  if (v10)
                    goto LABEL_23;
                }
              }
              v6 = v11;
            }
          }
        }
      }
LABEL_23:
      v5 = (v10 - 1) & v10;
      v8 = __clz(__rbit64(v10)) + (v6 << 6);
    }
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v8);
    v13 = *a2;
    v14 = *(_QWORD *)(*a2 + 16);
    if (v14)
    {
      v15 = sub_39228(v12);
      if ((v16 & 1) != 0)
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v15);
      else
        v14 = 0;
    }
    v17 = v14 + 1;
    if (v14 == -1)
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    v19 = *a2;
    v37 = (_QWORD *)*a2;
    *a2 = 0x8000000000000000;
    v21 = sub_39228(v12);
    v22 = *(_QWORD *)(v19 + 16);
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
      goto LABEL_42;
    v25 = v20;
    if (*(_QWORD *)(v19 + 24) >= v24)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v28 = v37;
        if ((v20 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_16B724();
        v28 = v37;
        if ((v25 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_15A924(v24, isUniquelyReferenced_nonNull_native);
      v26 = sub_39228(v12);
      if ((v25 & 1) != (v27 & 1))
        goto LABEL_46;
      v21 = v26;
      v28 = v37;
      if ((v25 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(v28[7] + 8 * v21) = v17;
        goto LABEL_5;
      }
    }
    v28[(v21 >> 6) + 8] |= 1 << v21;
    v29 = 8 * v21;
    *(_QWORD *)(v28[6] + v29) = v12;
    *(_QWORD *)(v28[7] + v29) = v17;
    v30 = v28[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_43;
    v28[2] = v32;
LABEL_5:
    *a2 = v28;
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BooksBackendDiversifier()
{
  return objc_opt_self(_TtC20BooksPersonalization23BooksBackendDiversifier);
}

void *sub_73A3C(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_2FEC0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[10 * a1 + 4], v7, &type metadata for ScoredBook);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[10 * a2 + 4];
    if (a1 != a2 || &v4[10 * a1 + 4] >= (_QWORD *)&v16[80 * v15])
      result = memmove(&v4[10 * a1 + 4], v16, 80 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_73BB0(_QWORD *a1, const void *a2)
{
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  BOOL v61;
  char v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  _QWORD *v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char v86;
  _QWORD *v87;
  uint64_t v88;
  char v89;
  _QWORD *v90;
  uint64_t result;
  uint64_t v92;
  char v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  _QWORD *v100;
  char v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  int64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  long double __dst[47];

  memcpy(__dst, a2, 0x16BuLL);
  v131 = a1;
  v130 = _swiftEmptyDictionarySingleton;
  v3 = a1[2];
  v4 = _swiftEmptyArrayStorage;
  if (!v3)
  {
LABEL_77:
    v6 = v4;
LABEL_78:
    swift_bridgeObjectRelease();
    return (uint64_t)v6;
  }
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  while (2)
  {
    v102 = v6;
    v104 = v5;
    sub_605D0((uint64_t)__dst);
    swift_bridgeObjectRetain(a1);
    sub_342E4(0, v3, 0);
    v8 = 0;
    v9 = v130;
    v129 = _swiftEmptyArrayStorage;
    v100 = a1;
    v106 = v3;
    v108 = a1 + 4;
    do
    {
      v10 = v8;
      v11 = &v108[10 * v8];
      v123 = *v11;
      v126 = v10 + 1;
      v12 = *((_BYTE *)v11 + 40);
      v13 = v11[6];
      v4 = (_QWORD *)v11[8];
      v14 = *((double *)v11 + 9);
      v119 = *((_BYTE *)v11 + 8);
      v121 = v11[2];
      v116 = *((_BYTE *)v11 + 24);
      v111 = v11[7];
      v113 = v11[4];
      sub_40554(v113, v12);
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v13);
      v15 = sub_73634();
      v16 = v15;
      v17 = 0;
      v18 = v15 + 56;
      v19 = 1 << *(_BYTE *)(v15 + 32);
      if (v19 < 64)
        v20 = ~(-1 << v19);
      else
        v20 = -1;
      v21 = v20 & *(_QWORD *)(v15 + 56);
      v6 = (_QWORD *)((unint64_t)(v19 + 63) >> 6);
      while (1)
      {
        if (v21)
        {
          v23 = __clz(__rbit64(v21));
          v21 &= v21 - 1;
          v24 = v23 | (v17 << 6);
          if (!v9[2])
            goto LABEL_10;
          goto LABEL_28;
        }
        v25 = __OFADD__(v17++, 1);
        if (v25)
        {
          __break(1u);
          goto LABEL_77;
        }
        if (v17 >= (uint64_t)v6)
          break;
        v26 = *(_QWORD *)(v18 + 8 * v17);
        if (!v26)
        {
          v27 = v17 + 1;
          if (v17 + 1 >= (uint64_t)v6)
            break;
          v26 = *(_QWORD *)(v18 + 8 * v27);
          if (!v26)
          {
            v27 = v17 + 2;
            if (v17 + 2 >= (uint64_t)v6)
              break;
            v26 = *(_QWORD *)(v18 + 8 * v27);
            if (!v26)
            {
              v27 = v17 + 3;
              if (v17 + 3 >= (uint64_t)v6)
                break;
              v26 = *(_QWORD *)(v18 + 8 * v27);
              if (!v26)
              {
                v27 = v17 + 4;
                if (v17 + 4 >= (uint64_t)v6)
                  break;
                v26 = *(_QWORD *)(v18 + 8 * v27);
                if (!v26)
                {
                  while (1)
                  {
                    v17 = v27 + 1;
                    if (__OFADD__(v27, 1))
                      break;
                    if (v17 >= (uint64_t)v6)
                      goto LABEL_34;
                    v26 = *(_QWORD *)(v18 + 8 * v17);
                    ++v27;
                    if (v26)
                      goto LABEL_27;
                  }
                  __break(1u);
LABEL_80:
                  swift_bridgeObjectRelease();
                  goto LABEL_78;
                }
              }
            }
          }
          v17 = v27;
        }
LABEL_27:
        v21 = (v26 - 1) & v26;
        v24 = __clz(__rbit64(v26)) + (v17 << 6);
        if (!v9[2])
        {
LABEL_10:
          v22 = 0;
          goto LABEL_11;
        }
LABEL_28:
        v28 = sub_39228(*(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * v24));
        if ((v29 & 1) == 0)
          goto LABEL_10;
        v22 = *(_QWORD *)(v9[7] + 8 * v28);
LABEL_11:
        v14 = v14 * pow(__dst[34], (double)v22);
      }
LABEL_34:
      swift_release(v16);
      v30 = v129;
      v32 = v129[2];
      v31 = v129[3];
      if (v32 >= v31 >> 1)
      {
        sub_342E4(v31 > 1, v32 + 1, 1);
        v30 = v129;
      }
      v30[2] = v32 + 1;
      v129 = v30;
      v33 = &v30[10 * v32];
      v33[4] = v123;
      *((_BYTE *)v33 + 40) = v119;
      v33[6] = v121;
      *((_BYTE *)v33 + 56) = v116;
      v33[8] = v113;
      *((_BYTE *)v33 + 72) = v12;
      v33[10] = v13;
      v33[11] = v111;
      v33[12] = v4;
      *((double *)v33 + 13) = v14;
      v8 = v126;
    }
    while (v126 != v106);
    sub_60AF8((uint64_t)__dst);
    v34 = v100;
    swift_bridgeObjectRelease();
    v35 = v129[2];
    if (v35)
    {
      v117 = v129[4];
      v36 = *((_BYTE *)v129 + 40);
      v114 = *((_BYTE *)v129 + 56);
      v37 = v129[8];
      v38 = *((_BYTE *)v129 + 72);
      v39 = v129[10];
      v109 = v129[6];
      v112 = v129[11];
      v40 = v129[12];
      v41 = *((double *)v129 + 13);
      v42 = v35 - 1;
      if (v35 == 1)
      {
        sub_40554(v37, v38);
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRelease();
        v6 = v102;
        v43 = v104;
        v44 = v40;
      }
      else
      {
        swift_bridgeObjectRetain(v129);
        v127 = v37;
        v124 = v38;
        sub_40554(v37, v38);
        v120 = v40;
        swift_bridgeObjectRetain(v40);
        v122 = v39;
        swift_bridgeObjectRetain(v39);
        v45 = v129;
        v46 = 0;
        v47 = v117;
        v48 = v109;
        v49 = v112;
        v50 = v114;
        v51 = v36;
        do
        {
          v53 = v45[v46 + 14];
          v54 = v45[v46 + 15];
          v55 = v45[v46 + 17];
          v56 = v45[v46 + 18];
          v57 = v45[v46 + 19];
          v58 = v45[v46 + 20];
          v59 = v45[v46 + 22];
          v60 = *(double *)&v45[v46 + 23];
          if (v41 < v60 || (v60 == v41 ? (v61 = v53 >= v47) : (v61 = 1), !v61))
          {
            v118 = v45[v46 + 21];
            v52 = v45[v46 + 16];
            sub_40554(v45[v46 + 18], v57);
            swift_bridgeObjectRetain(v59);
            swift_bridgeObjectRetain(v58);
            sub_40568(v127, v124);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v45 = v129;
            v47 = v53;
            v51 = v54;
            v48 = v52;
            v50 = v55;
            v127 = v56;
            v124 = v57;
            v120 = v59;
            v122 = v58;
            v49 = v118;
            v41 = v60;
          }
          v46 += 10;
          --v42;
        }
        while (v42);
        v36 = v51;
        v109 = v48;
        v112 = v49;
        v114 = v50;
        v117 = v47;
        swift_bridgeObjectRelease_n(v45, 2);
        v6 = v102;
        v43 = v104;
        v34 = v100;
        v44 = v120;
        v39 = v122;
        v37 = v127;
        v38 = v124;
      }
      v62 = v36 & 1;
      v63 = sub_73634();
      sub_7373C(v63, &v130);
      v105 = v43;
      swift_bridgeObjectRelease();
      v128 = v37;
      v125 = v38;
      sub_40554(v37, v38);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v44);
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_2FEC0(0, v6[2] + 1, 1, v6);
      v65 = v6[2];
      v64 = v6[3];
      v66 = v117;
      v67 = v114;
      v68 = v112;
      if (v65 >= v64 >> 1)
      {
        v90 = sub_2FEC0((_QWORD *)(v64 > 1), v65 + 1, 1, v6);
        v68 = v112;
        v67 = v114;
        v66 = v117;
        v6 = v90;
      }
      v6[2] = v65 + 1;
      v69 = &v6[10 * v65];
      v69[4] = v66;
      *((_BYTE *)v69 + 40) = v62;
      v69[6] = v109;
      *((_BYTE *)v69 + 56) = v67 & 1;
      v69[8] = v37;
      v70 = v38;
      *((_BYTE *)v69 + 72) = v38;
      v69[10] = v39;
      v69[11] = v68;
      v69[12] = v44;
      *((double *)v69 + 13) = v41;
      v71 = v34[2];
      if (!v71)
      {
        v7 = 0;
        goto LABEL_4;
      }
      v7 = 0;
      v72 = 23;
      v73 = 4;
      while (v34[v73] != v66)
      {
        ++v7;
        v73 += 10;
        v72 += 10;
        if (v71 == v7)
        {
          v7 = v34[2];
          v70 = v38;
          goto LABEL_4;
        }
      }
      v74 = v7 + 1;
      if (!__OFADD__(v7, 1))
      {
        if (v74 == v71)
        {
LABEL_62:
          v70 = v125;
          if ((uint64_t)v71 < v7)
            goto LABEL_85;
LABEL_4:
          sub_73A3C(v7, v71);
          sub_40568(v128, v70);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          a1 = v131;
          v3 = v131[2];
          v5 = v105;
          if (v3)
            continue;
          goto LABEL_80;
        }
        v103 = v6;
        while (v74 < v71)
        {
          v75 = v34[v72 - 9];
          if (v75 != v66)
          {
            if (v74 != v7)
            {
              if (v7 >= v71)
                goto LABEL_83;
              v76 = (uint64_t)&v34[10 * v7 + 4];
              v95 = *(_BYTE *)(v76 + 8);
              v94 = *(_QWORD *)(v76 + 16);
              v93 = *(_BYTE *)(v76 + 24);
              v77 = *(_QWORD *)(v76 + 48);
              v96 = *(_QWORD *)v76;
              v97 = *(_QWORD *)(v76 + 56);
              v78 = *(_QWORD *)(v76 + 64);
              v79 = *(_QWORD *)(v76 + 72);
              v110 = v34[v72 - 8];
              v107 = v34[v72 - 7];
              v101 = v34[v72 - 6];
              v80 = v34[v72 - 5];
              v81 = v34[v72 - 4];
              v99 = v34[v72 - 3];
              v82 = v34[v72 - 1];
              v115 = v34[v72 - 2];
              v83 = v34[v72];
              v92 = *(_QWORD *)(v76 + 32);
              v98 = *(_BYTE *)(v76 + 40);
              sub_40554(v92, v98);
              swift_bridgeObjectRetain(v78);
              swift_bridgeObjectRetain(v77);
              sub_40554(v80, v81);
              swift_bridgeObjectRetain(v82);
              swift_bridgeObjectRetain(v99);
              if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
                v34 = sub_6A504(v34);
              v84 = &v34[10 * v7];
              v85 = v84[8];
              v84[4] = v75;
              *((_BYTE *)v84 + 40) = v110;
              v84[6] = v107;
              *((_BYTE *)v84 + 56) = v101;
              v84[8] = v80;
              v86 = *((_BYTE *)v84 + 72);
              *((_BYTE *)v84 + 72) = v81;
              v84[10] = v99;
              v84[11] = v115;
              v84[12] = v82;
              v84[13] = v83;
              sub_40568(v85, v86);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v74 >= v34[2])
                goto LABEL_84;
              v87 = &v34[v72];
              v88 = v34[v72 - 5];
              *(v87 - 9) = v96;
              *((_BYTE *)v87 - 64) = v95;
              *(v87 - 7) = v94;
              *((_BYTE *)v87 - 48) = v93;
              *(v87 - 5) = v92;
              v89 = v34[v72 - 4];
              *((_BYTE *)v87 - 32) = v98;
              *(v87 - 3) = v77;
              *(v87 - 2) = v97;
              *(v87 - 1) = v78;
              *v87 = v79;
              sub_40568(v88, v89);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v131 = v34;
              v66 = v117;
              v6 = v103;
            }
            v25 = __OFADD__(v7++, 1);
            if (v25)
              goto LABEL_82;
            v71 = v34[2];
          }
          ++v74;
          v72 += 10;
          if (v74 == v71)
            goto LABEL_62;
        }
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
      }
      __break(1u);
    }
    break;
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t destroy for BookFeatures(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for BookFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for BookFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t assignWithTake for BookFeatures(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookFeatures(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BookFeatures(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookFeatures()
{
  return &type metadata for BookFeatures;
}

uint64_t sub_746EC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for DelegatingBookScorer, (uint64_t)&off_1E0908, a2);
}

uint64_t sub_74700@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, type metadata accessor for BookHistoryService, (uint64_t)&off_1E30F8, a2);
}

uint64_t sub_74714@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BookHistoryServiceStressTest, (uint64_t)&protocol witness table for BookHistoryServiceStressTest, a2);
}

uint64_t sub_74728@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BooksBackendDiversifier, (uint64_t)&off_1E0180, a2);
}

uint64_t sub_7473C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BooksBackendSeedBasedRecommendationService, (uint64_t)&off_1E7970, a2);
}

uint64_t sub_74750@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2, (uint64_t)&off_1E80B0, a2);
}

_QWORD *sub_74764(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[3];
  uint64_t v38;
  char **v39;
  _QWORD v40[5];
  __int128 v41;
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F25C8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v45, v4, v4, v2, v3);
  if (!v46)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_49F4(a1, v6);
  v8 = sub_5EDC(&qword_1F2648);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v43, v8, v8, v6, v7);
  if (!v44)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_5EDC(&qword_1F0E48);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v41, v11, v11, v9, v10);
  if (v42)
  {
    v12 = sub_3DD18((uint64_t)v45, v46);
    v36[1] = v36;
    __chkstk_darwin(v12);
    v14 = (_QWORD *)((char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v15 + 16))(v14);
    v16 = sub_3DD18((uint64_t)v43, v44);
    v36[0] = v36;
    __chkstk_darwin(v16);
    v18 = (_QWORD *)((char *)v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v19 + 16))(v18);
    v20 = *v14;
    v21 = *v18;
    v22 = type metadata accessor for BooksBackendDiversifier();
    v40[3] = v22;
    v40[4] = &off_1E0180;
    v40[0] = v20;
    v23 = type metadata accessor for SeedBasedRecommendationServiceResolver();
    v39 = &off_1E83D8;
    v38 = v23;
    v37[0] = v21;
    v24 = type metadata accessor for SeedBasedSuggestionsService();
    v25 = (_QWORD *)swift_allocObject(v24, 136, 7);
    v26 = sub_3DD18((uint64_t)v40, v22);
    __chkstk_darwin(v26);
    v28 = (_QWORD *)((char *)v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v29 + 16))(v28);
    v30 = sub_3DD18((uint64_t)v37, v38);
    __chkstk_darwin(v30);
    v32 = (_QWORD *)((char *)v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v33 + 16))(v32);
    v34 = *v28;
    v35 = *v32;
    v25[5] = v22;
    v25[6] = &off_1E0180;
    v25[2] = v34;
    v25[10] = v23;
    v25[11] = &off_1E83D8;
    v25[7] = v35;
    sub_26DB8(&v41, (uint64_t)(v25 + 12));
    sub_62F8(v37);
    sub_62F8(v40);
    sub_62F8(v43);
    sub_62F8(v45);
    return v25;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_74A90@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BookHistorySeedBookService, (uint64_t)&off_1E8610, a2);
}

uint64_t sub_74AA4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BooksPersonalizationMetadataCache, (uint64_t)&protocol witness table for BooksPersonalizationMetadataCache, a2);
}

uint64_t sub_74AB8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BooksPersonalizationMetadataCache, (uint64_t)&protocol witness table for BooksPersonalizationMetadataCache, a2);
}

_QWORD *sub_74ACC(_QWORD *a1)
{
  return sub_751D8(a1, &qword_1F1F30, (uint64_t (*)(_QWORD))type metadata accessor for BookHistorySeedBookService, (void (*)(_QWORD *, uint64_t))sub_26DB8);
}

uint64_t sub_74AE8()
{
  uint64_t v0;

  v0 = type metadata accessor for BooksBackendDiversifier();
  return swift_allocObject(v0, 16, 7);
}

uint64_t sub_74B08()
{
  uint64_t v0;

  v0 = type metadata accessor for BooksBackendPostScorer();
  return swift_allocObject(v0, 16, 7);
}

_QWORD *sub_74B28(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  __int128 v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v34, &type metadata for Environment, &type metadata for Environment, v2, v3);
  v5 = v34;
  if (v34 == 4)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_49F4(a1, v6);
  v8 = sub_5EDC(&qword_1F2600);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v32, v8, v8, v6, v7);
  if (!v33)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_5EDC(&qword_1F25F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v30, v11, v11, v9, v10);
  if (!v31)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = type metadata accessor for BooksBackendPostScorer();
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v14, v14, v12, v13);
  if (result)
  {
    v15 = result;
    v16 = sub_3DD18((uint64_t)v32, v33);
    __chkstk_darwin(v16);
    v18 = (_QWORD *)((char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v19 + 16))(v18);
    v20 = *v18;
    v21 = type metadata accessor for SeedBasedRecommendationRequestMapper();
    v29[3] = v21;
    v29[4] = &off_1E90D8;
    v29[0] = v20;
    v22 = type metadata accessor for BooksBackendSeedBasedRecommendationService();
    v23 = swift_allocObject(v22, 144, 7);
    v24 = sub_3DD18((uint64_t)v29, v21);
    __chkstk_darwin(v24);
    v26 = (_QWORD *)((char *)v29 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v27 + 16))(v26);
    v28 = *v26;
    *(_QWORD *)(v23 + 80) = v21;
    *(_QWORD *)(v23 + 88) = &off_1E90D8;
    *(_QWORD *)(v23 + 56) = v28;
    *(_OWORD *)(v23 + 16) = 0u;
    *(_OWORD *)(v23 + 32) = 0u;
    *(_BYTE *)(v23 + 48) = v5;
    sub_26DB8(&v30, v23 + 96);
    *(_QWORD *)(v23 + 136) = v15;
    sub_62F8(v29);
    sub_62F8(v32);
    return (_QWORD *)v23;
  }
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_74D78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[2];
  unsigned __int8 v25;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v24, &type metadata for EnvironmentType, &type metadata for EnvironmentType, v2, v3);
  v5 = v25;
  if (v25 == 255)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = v24[0];
  v7 = v24[1];
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_5EDC(&qword_1F25F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v22, v10, v10, v8, v9);
  if (!v23)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = type metadata accessor for BooksBackendPostScorer();
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v13, v13, v11, v12);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v14 = result;
  v15 = a1[3];
  v16 = a1[4];
  sub_49F4(a1, v15);
  v17 = sub_5EDC(&qword_1F25E0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v20, v17, v17, v15, v16);
  if (v21)
  {
    v18 = type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2();
    v19 = swift_allocObject(v18, 160, 7);
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_QWORD *)(v19 + 48) = v6;
    *(_QWORD *)(v19 + 56) = v7;
    *(_BYTE *)(v19 + 64) = v5 & 1;
    sub_26DB8(&v22, v19 + 72);
    *(_QWORD *)(v19 + 112) = v14;
    sub_26DB8(&v20, v19 + 120);
    return (_QWORD *)v19;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_74EF8()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DelegatingBookScorer();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = _swiftEmptyDictionarySingleton;
  return result;
}

uint64_t sub_74F28@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for IdentityBookScorer, (uint64_t)&off_1E8F58, a2);
}

uint64_t sub_74F3C@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v7 = a1[3];
  v8 = a1[4];
  sub_49F4(a1, v7);
  v9 = a2(0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v9, v9, v7, v8);
  if (result)
  {
    a4[3] = v9;
    a4[4] = a3;
    *a4 = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_74FB8()
{
  uint64_t v0;

  v0 = type metadata accessor for IdentityBookScorer();
  return swift_allocObject(v0, 16, 7);
}

_QWORD *sub_74FD8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v2 = type metadata accessor for TimeZone(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_49F4(a1, v6);
  v8 = sub_5EDC(&qword_1F2628);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v27, v8, v8, v6, v7);
  if (!v28)
  {
    __break(1u);
    goto LABEL_7;
  }
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_5EDC(&qword_1F2630);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v25, v12, v12, v10, v11);
  if (!v26)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v13 = a1[3];
  v14 = a1[4];
  sub_49F4(a1, v13);
  v15 = sub_5EDC(&qword_1F2638);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v23, v15, v15, v13, v14);
  if (!v24)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v16 = a1[3];
  v17 = a1[4];
  sub_49F4(a1, v16);
  v18 = sub_5EDC(&qword_1F2640);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v21, v18, v18, v16, v17);
  if (v22)
  {
    static TimeZone.current.getter(result);
    v19 = type metadata accessor for BookHistoryService(0);
    v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    sub_26DB8(&v27, v20 + 16);
    sub_26DB8(&v25, v20 + 56);
    sub_26DB8(&v23, v20 + 96);
    sub_26DB8(&v21, v20 + 136);
    (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v20 + OBJC_IVAR____TtC20BooksPersonalization18BookHistoryService_timeZone, v5, v2);
    return (_QWORD *)v20;
  }
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_751BC(_QWORD *a1)
{
  return sub_751D8(a1, &qword_1F2160, (uint64_t (*)(_QWORD))type metadata accessor for BookHistoryServiceStressTest, (void (*)(_QWORD *, uint64_t))sub_26DB8);
}

_QWORD *sub_751D8(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD *, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  __int128 v18;
  uint64_t v19;

  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_5EDC(&qword_1F25B8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v18, v10, v10, v8, v9);
  if (v19)
  {
    v12 = a1[3];
    v13 = a1[4];
    sub_49F4(a1, v12);
    v14 = sub_5EDC(a2);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v17, v14, v14, v12, v13);
    if (v17[3])
    {
      v15 = a3(0);
      v16 = swift_allocObject(v15, 96, 7);
      sub_26DB8(&v18, v16 + 16);
      a4(v17, v16 + 56);
      return (_QWORD *)v16;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_752CC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v3 = a1[3];
  v4 = a1[4];
  sub_49F4(a1, v3);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v8, &type metadata for URLSessionTransport, &type metadata for URLSessionTransport, v3, v4);
  v6 = v8[0];
  if (v8[0])
  {
    v7 = v8[1];
    a2[3] = &type metadata for URLSessionTransport;
    a2[4] = &protocol witness table for URLSessionTransport;
    *a2 = v6;
    a2[1] = v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_75350@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v4 = objc_msgSend((id)objc_opt_self(NSURLSession), "sharedSession");
  v5 = sub_5EDC(&qword_1F2620);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_18FC00;
  v7 = a1[3];
  v8 = a1[4];
  sub_49F4(a1, v7);
  v9 = sub_5EDC(&qword_1F25F8);
  result = dispatch thunk of ResolverType.resolve<A>(_:name:)(&v15, v9, 0x72656E676973, 0xE600000000000000, v9, v7, v8);
  if (v16)
  {
    sub_26DB8(&v15, v6 + 32);
    v11 = a1[3];
    v12 = a1[4];
    sub_49F4(a1, v11);
    result = dispatch thunk of ResolverType.resolve<A>(_:name:)(&v13, v9, 0x656E696C65736162, 0xE800000000000000, v9, v11, v12);
    if (v14)
    {
      result = (_QWORD *)sub_26DB8(&v13, v6 + 72);
      *a2 = v4;
      a2[1] = v6;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_75498@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  uint64_t v22;

  v3 = a1[3];
  v4 = a1[4];
  sub_49F4(a1, v3);
  v5 = sub_5EDC(&qword_1F2608);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v21, v5, v5, v3, v4);
  if (v22)
  {
    v7 = sub_3DD18((uint64_t)v21, v22);
    __chkstk_darwin(v7);
    v9 = (_QWORD *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v10 + 16))(v9);
    v11 = *v9;
    v12 = type metadata accessor for SHA256Base64SigningService();
    v20[3] = v12;
    v20[4] = &off_1DFDE0;
    v20[0] = v11;
    v13 = type metadata accessor for SignerMiddleware();
    v14 = (_QWORD *)swift_allocObject(v13, 56, 7);
    v15 = sub_3DD18((uint64_t)v20, v12);
    __chkstk_darwin(v15);
    v17 = (_QWORD *)((char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v19 = *v17;
    v14[5] = v12;
    v14[6] = &off_1DFDE0;
    v14[2] = v19;
    sub_62F8(v20);
    result = (_QWORD *)sub_62F8(v21);
    a2[3] = v13;
    a2[4] = &off_1E79E0;
    *a2 = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_75620@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_67B10(a1, &qword_1F2618, (uint64_t (*)(_QWORD))type metadata accessor for ExperimentIDsMiddleware, (uint64_t (*)(_QWORD *, uint64_t))sub_26DB8, (uint64_t)&off_1E8F80, a2);
}

_QWORD *sub_75644@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_67B10(a1, &qword_1F1F30, (uint64_t (*)(_QWORD))type metadata accessor for SeedBasedRecommendationRequestMapper, (uint64_t (*)(_QWORD *, uint64_t))sub_26DB8, (uint64_t)&off_1E90D8, a2);
}

_QWORD *sub_75668@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_67B10(a1, &qword_1F2610, (uint64_t (*)(_QWORD))type metadata accessor for SHA256Base64SigningService, (uint64_t (*)(_QWORD *, uint64_t))sub_26DB8, (uint64_t)&off_1DFDE0, a2);
}

_QWORD *sub_7568C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD v20[2];
  unsigned __int8 v21;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v20, &type metadata for EnvironmentType, &type metadata for EnvironmentType, v2, v3);
  v5 = v21;
  if (v21 == 255)
  {
    __break(1u);
    goto LABEL_6;
  }
  v6 = v20[0];
  v7 = v20[1];
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_5EDC(&qword_1F25F0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v18, v10, v10, v8, v9);
  if (!v19)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_5EDC(&qword_1F2160);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v16, v13, v13, v11, v12);
  if (v17)
  {
    v14 = type metadata accessor for BooksBackendPersonalizationMetadataService();
    v15 = swift_allocObject(v14, 152, 7);
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_QWORD *)(v15 + 48) = v6;
    *(_QWORD *)(v15 + 56) = v7;
    *(_BYTE *)(v15 + 64) = v5 & 1;
    sub_26DB8(&v18, v15 + 72);
    sub_26DB8(&v16, v15 + 112);
    return (_QWORD *)v15;
  }
LABEL_7:
  __break(1u);
  return result;
}

_QWORD *sub_757D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];
  _QWORD v11[5];

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = type metadata accessor for BooksBackendPersonalizationMetadataService();
  result = (_QWORD *)dispatch thunk of ResolverType.resolve<A>(_:)(v4, v4, v2, v3);
  if (result)
  {
    v11[3] = v4;
    v11[4] = &off_1E62A8;
    v11[0] = result;
    v6 = a1[3];
    v7 = a1[4];
    sub_49F4(a1, v6);
    v8 = sub_5EDC(&qword_1F2160);
    result = dispatch thunk of ResolverType.resolve<A>(_:)(v10, v8, v8, v6, v7);
    if (v10[3])
    {
      v9 = type metadata accessor for BooksPersonalizationMetadataCache();
      swift_allocObject(v9, 152, 7);
      return BooksPersonalizationMetadataCache.init(fetchService:subfolder:configurationService:)(v11, 0, 0, v10);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_758B4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  _BYTE v32[24];
  __int128 v33;
  uint64_t v34;
  _QWORD v35[5];

  v4 = sub_5EDC(&qword_1F25E8);
  v5 = 0;
  v6 = (_QWORD *)(a1 + 16);
  while (v5 < 3)
  {
    v10 = *((unsigned __int8 *)&off_1D9AC8 + v5++ + 32);
    v11 = a2[3];
    v12 = a2[4];
    sub_49F4(a2, v11);
    v13 = 0x797469746E656469;
    if (v10 != 1)
      v13 = 1768055156;
    v14 = 0xE800000000000000;
    if (v10 != 1)
      v14 = 0xE400000000000000;
    if (v10)
      v15 = v13;
    else
      v15 = 0xD000000000000013;
    if (v10)
      v16 = v14;
    else
      v16 = 0x800000000019EE20;
    dispatch thunk of ResolverType.resolve<A>(_:name:)(&v33, v4, v15, v16, v4, v11, v12);
    swift_bridgeObjectRelease(v16);
    if (!v34)
      goto LABEL_31;
    sub_26DB8(&v33, (uint64_t)v35);
    swift_beginAccess(v6, v32, 33, 0);
    sub_3DD40((uint64_t)v35, (uint64_t)&v33);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    v18 = *v6;
    v31 = (_QWORD *)*v6;
    *v6 = 0x8000000000000000;
    v20 = sub_3960C(v10);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      goto LABEL_29;
    v24 = v19;
    if (*(_QWORD *)(v18 + 24) >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v27 = v31;
        if ((v19 & 1) != 0)
          goto LABEL_2;
      }
      else
      {
        sub_16C5F0();
        v27 = v31;
        if ((v24 & 1) != 0)
          goto LABEL_2;
      }
    }
    else
    {
      sub_15CC20(v23, isUniquelyReferenced_nonNull_native);
      v25 = sub_3960C(v10);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_32;
      v20 = v25;
      v27 = v31;
      if ((v24 & 1) != 0)
      {
LABEL_2:
        v7 = (_QWORD *)(v27[7] + 40 * v20);
        sub_62F8(v7);
        sub_26DB8(&v33, (uint64_t)v7);
        goto LABEL_3;
      }
    }
    v27[(v20 >> 6) + 8] |= 1 << v20;
    *(_BYTE *)(v27[6] + v20) = v10;
    sub_26DB8(&v33, v27[7] + 40 * v20);
    v28 = v27[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_30;
    v27[2] = v30;
LABEL_3:
    v8 = *v6;
    *v6 = v27;
    swift_bridgeObjectRelease(v8);
    swift_endAccess(v32);
    result = sub_62F8(v35);
    if (v5 == 3)
      return result;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Scorer);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ScorerAssembly()
{
  return objc_opt_self(_TtC20BooksPersonalization14ScorerAssembly);
}

uint64_t sub_75B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD v160[3];
  uint64_t v161;
  uint64_t v162;

  v0 = type metadata accessor for CallbackScope(0);
  v158 = *(_QWORD *)(v0 - 8);
  v159 = v0;
  __chkstk_darwin(v0);
  v157 = (char *)&v157 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for Scope(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v157 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = ProxyContainer.public.getter(v4);
  v8 = sub_5EDC(&qword_1F25B0);
  v9 = RegistrationContainer.register<A>(_:name:factory:)(v8, 0, 0, sub_746EC, 0, v8);
  swift_release(v7);
  v10 = enum case for Scope.singleton(_:);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 104);
  v11(v6, enum case for Scope.singleton(_:), v2);
  v12 = Definition.inScope(_:)(v6);
  swift_release(v12);
  swift_release(v9);
  v13 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  v14 = v13(v6, v2);
  v15 = ProxyContainer.public.getter(v14);
  v16 = sub_5EDC(&qword_1F25B8);
  v17 = RegistrationContainer.register<A>(_:name:factory:)(v16, 0, 0, sub_74700, 0, v16);
  swift_release(v15);
  v11(v6, v10, v2);
  v18 = Definition.inScope(_:)(v6);
  swift_release(v18);
  swift_release(v17);
  v19 = v13(v6, v2);
  v20 = ProxyContainer.public.getter(v19);
  v21 = sub_5EDC(&qword_1F25C0);
  v22 = RegistrationContainer.register<A>(_:name:factory:)(v21, 0, 0, sub_74714, 0, v21);
  swift_release(v20);
  v11(v6, v10, v2);
  v23 = Definition.inScope(_:)(v6);
  swift_release(v23);
  swift_release(v22);
  v24 = v13(v6, v2);
  v25 = ProxyContainer.public.getter(v24);
  v26 = sub_5EDC(&qword_1F25C8);
  v27 = RegistrationContainer.register<A>(_:name:factory:)(v26, 0, 0, sub_74728, 0, v26);
  swift_release(v25);
  v11(v6, v10, v2);
  v28 = Definition.inScope(_:)(v6);
  swift_release(v28);
  swift_release(v27);
  v29 = v13(v6, v2);
  v30 = ProxyContainer.public.getter(v29);
  v31 = sub_5EDC(&qword_1F25D0);
  v32 = RegistrationContainer.register<A>(_:name:factory:)(v31, 12662, 0xE200000000000000, sub_7473C, 0, v31);
  swift_release(v30);
  v11(v6, v10, v2);
  v33 = Definition.inScope(_:)(v6);
  swift_release(v33);
  swift_release(v32);
  v34 = v13(v6, v2);
  v35 = ProxyContainer.public.getter(v34);
  v36 = RegistrationContainer.register<A>(_:name:factory:)(v31, 12918, 0xE200000000000000, sub_74750, 0, v31);
  swift_release(v35);
  v11(v6, v10, v2);
  v37 = Definition.inScope(_:)(v6);
  swift_release(v37);
  swift_release(v36);
  v38 = v13(v6, v2);
  v39 = ProxyContainer.public.getter(v38);
  v40 = type metadata accessor for SeedBasedSuggestionsService();
  v41 = RegistrationContainer.register<A>(_:name:factory:)(v40, 0, 0, sub_74764, 0, v40);
  swift_release(v39);
  v11(v6, v10, v2);
  v42 = Definition.inScope(_:)(v6);
  swift_release(v42);
  swift_release(v41);
  v43 = v13(v6, v2);
  v44 = ProxyContainer.public.getter(v43);
  v45 = sub_5EDC(&qword_1F0E48);
  v46 = RegistrationContainer.register<A>(_:name:factory:)(v45, 0, 0, sub_74A90, 0, v45);
  swift_release(v44);
  v11(v6, v10, v2);
  v47 = Definition.inScope(_:)(v6);
  swift_release(v47);
  swift_release(v46);
  v48 = v13(v6, v2);
  v49 = ProxyContainer.public.getter(v48);
  v50 = RegistrationContainer.register<A>(_:name:factory:)(v31, 0, 0, sub_7473C, 0, v31);
  swift_release(v49);
  v11(v6, v10, v2);
  v51 = Definition.inScope(_:)(v6);
  swift_release(v51);
  swift_release(v50);
  v52 = v13(v6, v2);
  v53 = ProxyContainer.public.getter(v52);
  v54 = sub_5EDC(&qword_1F25D8);
  v55 = RegistrationContainer.register<A>(_:name:factory:)(v54, 0, 0, sub_74AA4, 0, v54);
  swift_release(v53);
  v11(v6, v10, v2);
  v56 = Definition.inScope(_:)(v6);
  swift_release(v56);
  swift_release(v55);
  v57 = v13(v6, v2);
  v58 = ProxyContainer.public.getter(v57);
  v59 = sub_5EDC(&qword_1F25E0);
  v60 = RegistrationContainer.register<A>(_:name:factory:)(v59, 0, 0, sub_74AB8, 0, v59);
  swift_release(v58);
  v11(v6, v10, v2);
  v61 = Definition.inScope(_:)(v6);
  swift_release(v61);
  swift_release(v60);
  v62 = v13(v6, v2);
  v63 = ProxyContainer.private.getter(v62);
  v64 = type metadata accessor for BookHistorySeedBookService();
  v65 = RegistrationContainer.register<A>(_:name:factory:)(v64, 0, 0, sub_74ACC, 0, v64);
  swift_release(v63);
  v11(v6, v10, v2);
  v66 = Definition.inScope(_:)(v6);
  swift_release(v66);
  swift_release(v65);
  v67 = v13(v6, v2);
  v68 = ProxyContainer.private.getter(v67);
  v69 = type metadata accessor for BooksBackendDiversifier();
  v70 = RegistrationContainer.register<A>(_:name:factory:)(v69, 0, 0, sub_74AE8, 0, v69);
  swift_release(v68);
  v11(v6, v10, v2);
  v71 = Definition.inScope(_:)(v6);
  swift_release(v71);
  swift_release(v70);
  v72 = v13(v6, v2);
  v73 = ProxyContainer.private.getter(v72);
  v74 = type metadata accessor for BooksBackendPostScorer();
  v75 = RegistrationContainer.register<A>(_:name:factory:)(v74, 0, 0, sub_74B08, 0, v74);
  swift_release(v73);
  v11(v6, v10, v2);
  v76 = Definition.inScope(_:)(v6);
  swift_release(v76);
  swift_release(v75);
  v77 = v13(v6, v2);
  v78 = ProxyContainer.private.getter(v77);
  v79 = type metadata accessor for BooksBackendSeedBasedRecommendationService();
  v80 = RegistrationContainer.register<A>(_:name:factory:)(v79, 0, 0, sub_74B28, 0, v79);
  swift_release(v78);
  v11(v6, v10, v2);
  v81 = Definition.inScope(_:)(v6);
  swift_release(v81);
  swift_release(v80);
  v82 = v13(v6, v2);
  v83 = ProxyContainer.private.getter(v82);
  v84 = type metadata accessor for BooksBackEndSeedBasedRecommendationServiceV2();
  v85 = RegistrationContainer.register<A>(_:name:factory:)(v84, 0, 0, sub_74D78, 0, v84);
  swift_release(v83);
  v11(v6, v10, v2);
  v86 = Definition.inScope(_:)(v6);
  swift_release(v86);
  swift_release(v85);
  v87 = v13(v6, v2);
  v88 = ProxyContainer.private.getter(v87);
  v89 = type metadata accessor for DelegatingBookScorer();
  v90 = RegistrationContainer.register<A>(_:name:factory:)(v89, 0, 0, sub_74EF8, 0, v89);
  swift_release(v88);
  v11(v6, v10, v2);
  v91 = Definition.inScope(_:)(v6);
  swift_release(v91);
  swift_release(v90);
  v92 = v13(v6, v2);
  v93 = ProxyContainer.private.getter(v92);
  v94 = sub_5EDC(&qword_1F25E8);
  v95 = RegistrationContainer.register<A>(_:name:factory:)(v94, 0x797469746E656469, 0xE800000000000000, sub_74F28, 0, v94);
  swift_release(v93);
  v11(v6, v10, v2);
  v96 = Definition.inScope(_:)(v6);
  swift_release(v96);
  swift_release(v95);
  v97 = v13(v6, v2);
  v98 = ProxyContainer.private.getter(v97);
  v99 = type metadata accessor for IdentityBookScorer();
  v100 = RegistrationContainer.register<A>(_:name:factory:)(v99, 0, 0, sub_74FB8, 0, v99);
  swift_release(v98);
  v11(v6, v10, v2);
  v101 = Definition.inScope(_:)(v6);
  swift_release(v101);
  swift_release(v100);
  v102 = v13(v6, v2);
  v103 = ProxyContainer.private.getter(v102);
  v104 = type metadata accessor for BookHistoryService(0);
  v105 = RegistrationContainer.register<A>(_:name:factory:)(v104, 0, 0, sub_74FD8, 0, v104);
  swift_release(v103);
  v11(v6, v10, v2);
  v106 = Definition.inScope(_:)(v6);
  swift_release(v106);
  swift_release(v105);
  v107 = v13(v6, v2);
  v108 = ProxyContainer.private.getter(v107);
  v109 = type metadata accessor for BookHistoryServiceStressTest();
  v110 = RegistrationContainer.register<A>(_:name:factory:)(v109, 0, 0, sub_751BC, 0, v109);
  swift_release(v108);
  v11(v6, v10, v2);
  v111 = Definition.inScope(_:)(v6);
  swift_release(v111);
  swift_release(v110);
  v112 = v13(v6, v2);
  v113 = ProxyContainer.private.getter(v112);
  v114 = sub_5EDC(&qword_1F25F0);
  v115 = RegistrationContainer.register<A>(_:name:factory:)(v114, 0, 0, sub_752CC, 0, v114);
  swift_release(v113);
  v11(v6, v10, v2);
  v116 = Definition.inScope(_:)(v6);
  swift_release(v116);
  swift_release(v115);
  v117 = v13(v6, v2);
  v118 = ProxyContainer.private.getter(v117);
  v119 = RegistrationContainer.register<A>(_:name:factory:)(&type metadata for URLSessionTransport, 0, 0, sub_75350, 0, &type metadata for URLSessionTransport);
  swift_release(v118);
  v11(v6, v10, v2);
  v120 = Definition.inScope(_:)(v6);
  swift_release(v120);
  swift_release(v119);
  v121 = v13(v6, v2);
  v122 = ProxyContainer.private.getter(v121);
  v123 = sub_5EDC(&qword_1F25F8);
  v124 = RegistrationContainer.register<A>(_:name:factory:)(v123, 0x72656E676973, 0xE600000000000000, sub_75498, 0, v123);
  swift_release(v122);
  v11(v6, v10, v2);
  v125 = Definition.inScope(_:)(v6);
  swift_release(v125);
  swift_release(v124);
  v126 = v13(v6, v2);
  v127 = ProxyContainer.private.getter(v126);
  v128 = RegistrationContainer.register<A>(_:name:factory:)(v123, 0x656E696C65736162, 0xE800000000000000, sub_75620, 0, v123);
  swift_release(v127);
  v11(v6, v10, v2);
  v129 = Definition.inScope(_:)(v6);
  swift_release(v129);
  swift_release(v128);
  v130 = v13(v6, v2);
  v131 = ProxyContainer.private.getter(v130);
  v132 = sub_5EDC(&qword_1F2600);
  v133 = RegistrationContainer.register<A>(_:name:factory:)(v132, 0, 0, sub_75644, 0, v132);
  swift_release(v131);
  v11(v6, v10, v2);
  v134 = Definition.inScope(_:)(v6);
  swift_release(v134);
  swift_release(v133);
  v135 = v13(v6, v2);
  v136 = ProxyContainer.private.getter(v135);
  v137 = sub_5EDC(&qword_1F2608);
  v138 = RegistrationContainer.register<A>(_:name:factory:)(v137, 0, 0, sub_75668, 0, v137);
  swift_release(v136);
  v11(v6, v10, v2);
  v139 = Definition.inScope(_:)(v6);
  swift_release(v139);
  swift_release(v138);
  v140 = v13(v6, v2);
  v141 = ProxyContainer.private.getter(v140);
  v142 = type metadata accessor for BooksBackendPersonalizationMetadataService();
  v143 = RegistrationContainer.register<A>(_:name:factory:)(v142, 0, 0, sub_7568C, 0, v142);
  swift_release(v141);
  v11(v6, v10, v2);
  v144 = Definition.inScope(_:)(v6);
  swift_release(v144);
  swift_release(v143);
  v145 = v13(v6, v2);
  v146 = ProxyContainer.private.getter(v145);
  v147 = type metadata accessor for BooksPersonalizationMetadataCache();
  v148 = RegistrationContainer.register<A>(_:name:factory:)(v147, 0, 0, sub_757D0, 0, v147);
  swift_release(v146);
  v11(v6, v10, v2);
  v149 = Definition.inScope(_:)(v6);
  swift_release(v149);
  swift_release(v148);
  v150 = v13(v6, v2);
  ProxyContainer.callback.getter(v160, v150);
  v151 = v161;
  v152 = v162;
  sub_49F4(v160, v161);
  v154 = v157;
  v153 = v158;
  v155 = v159;
  (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v157, enum case for CallbackScope.any(_:), v159);
  dispatch thunk of CallbackRegistrationType.whenResolving<A>(_:scope:callback:)(v89, v154, sub_758B4, 0, v89, v151, v152);
  (*(void (**)(char *, uint64_t))(v153 + 8))(v154, v155);
  return sub_62F8(v160);
}

uint64_t CollectionRecommendationRequest.userInfo.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

BooksPersonalization::ScoredAuthor __swiftcall ScoredAuthor.init(author:score:)(BooksPersonalization::Author author, Swift::Double score)
{
  uint64_t v2;
  BooksPersonalization::ScoredAuthor result;

  *(_OWORD *)v2 = *(_OWORD *)author.storeID;
  *(Swift::Double *)(v2 + 16) = score;
  result.author = author;
  result.score = score;
  return result;
}

uint64_t sub_769DC()
{
  _BYTE *v0;

  if (*v0)
    return 0x65726F6373;
  else
    return 0x726F68747561;
}

uint64_t sub_76A10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_775E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_76A34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_76BC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_76A5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_76BC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ScoredAuthor.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  v3 = sub_5EDC(&qword_1F2650);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = *((_QWORD *)v1 + 1);
  v9 = v1[2];
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_76BC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ScoredAuthor.CodingKeys, &type metadata for ScoredAuthor.CodingKeys, v12, v10, v11);
  *(double *)v18 = v8;
  v18[1] = v7;
  v17 = 0;
  v13 = sub_76C04();
  v14 = v16;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v17, v3, &type metadata for Author, v13);
  if (!v14)
  {
    LOBYTE(v18[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v3, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_76BC0()
{
  unint64_t result;

  result = qword_1F2658;
  if (!qword_1F2658)
  {
    result = swift_getWitnessTable(&unk_190674, &type metadata for ScoredAuthor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2658);
  }
  return result;
}

unint64_t sub_76C04()
{
  unint64_t result;

  result = qword_1F2660;
  if (!qword_1F2660)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Author, &type metadata for Author);
    atomic_store(result, (unint64_t *)&qword_1F2660);
  }
  return result;
}

uint64_t ScoredAuthor.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v5 = sub_5EDC(&qword_1F2668);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_76BC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ScoredAuthor.CodingKeys, &type metadata for ScoredAuthor.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v18 = 0;
  v12 = sub_76DDC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for Author, &v18, v5, &type metadata for Author, v12);
  v14 = v19;
  v13 = v20;
  LOBYTE(v19) = 1;
  swift_bridgeObjectRetain(v20);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v14;
  *((_QWORD *)a2 + 1) = v13;
  a2[2] = v15;
  sub_62F8(a1);
  return swift_bridgeObjectRelease(v13);
}

unint64_t sub_76DDC()
{
  unint64_t result;

  result = qword_1F2670;
  if (!qword_1F2670)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Author, &type metadata for Author);
    atomic_store(result, (unint64_t *)&qword_1F2670);
  }
  return result;
}

uint64_t sub_76E20@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return ScoredAuthor.init(from:)(a1, a2);
}

uint64_t sub_76E34(_QWORD *a1)
{
  return ScoredAuthor.encode(to:)(a1);
}

void AuthorRecommendationServiceError.description.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  __asm { BR              X9 }
}

uint64_t sub_76EC8()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v3;

  v1._countAndFlagsBits = v0 + 11;
  v1._object = (void *)0x80000000001A0B60;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0x80000000001A0B60);
  return v3;
}

uint64_t AuthorRecommendationSource.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9B18, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

_UNKNOWN **static AuthorRecommendationSource.allCases.getter()
{
  return &off_1D9B50;
}

uint64_t sub_76F98@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9B78, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_76FE8(_QWORD *a1@<X8>)
{
  *a1 = &off_1D9BB0;
}

unint64_t sub_76FFC()
{
  unint64_t result;

  result = qword_1F2678;
  if (!qword_1F2678)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AuthorRecommendationSource, &type metadata for AuthorRecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F2678);
  }
  return result;
}

unint64_t sub_77044()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F2680;
  if (!qword_1F2680)
  {
    v1 = sub_5F68(&qword_1F2688);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F2680);
  }
  return result;
}

unint64_t sub_77094()
{
  unint64_t result;

  result = qword_1F2690;
  if (!qword_1F2690)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AuthorRecommendationSource, &type metadata for AuthorRecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F2690);
  }
  return result;
}

_QWORD *sub_770DC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for ScoredAuthor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a1[1];
  v5 = a2[1];
  a1[1] = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v4);
  a1[2] = a2[2];
  return a1;
}

_QWORD *assignWithTake for ScoredAuthor(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[1];
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  swift_bridgeObjectRelease(v4);
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ScoredAuthor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScoredAuthor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScoredAuthor()
{
  return &type metadata for ScoredAuthor;
}

uint64_t storeEnumTagSinglePayload for AuthorRecommendationServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_772AC + 4 * byte_190329[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_772E0 + 4 * byte_190324[v4]))();
}

uint64_t sub_772E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_772E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x772F0);
  return result;
}

uint64_t sub_772FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x77304);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_77308(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_77310(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AuthorRecommendationServiceError()
{
  return &type metadata for AuthorRecommendationServiceError;
}

uint64_t storeEnumTagSinglePayload for AuthorRecommendationSource(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_7736C + 4 * byte_19032E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_7738C + 4 * byte_190333[v4]))();
}

_BYTE *sub_7736C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_7738C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_77394(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_7739C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_773A4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_773AC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AuthorRecommendationSource()
{
  return &type metadata for AuthorRecommendationSource;
}

uint64_t dispatch thunk of GenreCollectionRecommendationServiceType.fetchRecommendedGenreCollections(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_429A0;
  return v10(a1, a2, a3);
}

uint64_t storeEnumTagSinglePayload for ScoredAuthor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_7748C + 4 * byte_19033D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_774C0 + 4 * byte_190338[v4]))();
}

uint64_t sub_774C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_774C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x774D0);
  return result;
}

uint64_t sub_774DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x774E4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_774E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_774F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScoredAuthor.CodingKeys()
{
  return &type metadata for ScoredAuthor.CodingKeys;
}

unint64_t sub_77510()
{
  unint64_t result;

  result = qword_1F26A0;
  if (!qword_1F26A0)
  {
    result = swift_getWitnessTable(&unk_19064C, &type metadata for ScoredAuthor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F26A0);
  }
  return result;
}

unint64_t sub_77558()
{
  unint64_t result;

  result = qword_1F26A8;
  if (!qword_1F26A8)
  {
    result = swift_getWitnessTable(&unk_1905BC, &type metadata for ScoredAuthor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F26A8);
  }
  return result;
}

unint64_t sub_775A0()
{
  unint64_t result;

  result = qword_1F26B0;
  if (!qword_1F26B0)
  {
    result = swift_getWitnessTable(&unk_1905E4, &type metadata for ScoredAuthor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F26B0);
  }
  return result;
}

uint64_t sub_775E4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x726F68747561 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F68747561, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65726F6373, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_776C4(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v8 = 0xEF54534555514552;
  v9 = 0x5F44494C41564E49;
  v10 = 0x5F44494C41564E49;
  v11 = 0xEF54534555514552;
  switch(a2)
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      v10 = 0x485455415F544F4ELL;
      v11 = 0xEE0044455A49524FLL;
      if (a4 > 3)
        goto LABEL_11;
      goto LABEL_7;
    case 2uLL:
      v10 = 0x455F524556524553;
      v11 = 0xEC000000524F5252;
      goto LABEL_7;
    case 3uLL:
      v10 = 0x4E554F465F544F4ELL;
      v11 = 0xE900000000000044;
      if (a4 > 3)
        goto LABEL_11;
      goto LABEL_7;
    default:
      v10 = a1;
      v11 = a2;
      if (a4 <= 3)
      {
LABEL_7:
        switch(a4)
        {
          case 0uLL:
            break;
          case 1uLL:
            v9 = 0x485455415F544F4ELL;
            v8 = 0xEE0044455A49524FLL;
            if (v10 != 0x485455415F544F4ELL)
              goto LABEL_18;
            goto LABEL_15;
          case 2uLL:
            v9 = 0x455F524556524553;
            v8 = 0xEC000000524F5252;
            break;
          case 3uLL:
            v9 = 0x4E554F465F544F4ELL;
            v8 = 0xE900000000000044;
            if (v10 != 0x4E554F465F544F4ELL)
              goto LABEL_18;
            goto LABEL_15;
          default:
            goto LABEL_11;
        }
        if (v10 != v9)
          goto LABEL_18;
      }
      else
      {
LABEL_11:
        v9 = a3;
        v8 = a4;
        if (v10 != a3)
          goto LABEL_18;
      }
LABEL_15:
      if (v11 == v8)
      {
        v12 = 1;
        goto LABEL_19;
      }
LABEL_18:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v9, v8, 0);
LABEL_19:
      sub_205AC(a1, a2);
      sub_205AC(a3, a4);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v8);
      return v12 & 1;
  }
}

void sub_778D4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_77914(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_77970 + 4 * byte_1906DC[a2]))(1701080931);
}

uint64_t sub_77970(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 1701080931 && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1701080931, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_77A10(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x64496B6F6F62;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x7974696E69666661;
    else
      v4 = 0xD000000000000015;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0x800000000019EC40;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x7974696E69666661;
      else
        v2 = 0xD000000000000015;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0x800000000019EC40;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x64496B6F6F62;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v4 != 0x64496B6F6F62)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_77B20(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_77B84(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_77BFC + 4 * byte_1906E4[a2]))(0x716552736B6F6F62);
}

uint64_t sub_77BFC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x716552736B6F6F62 && v1 == 0xEC00000074736575)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x716552736B6F6F62, 0xEC00000074736575, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEC00000074736575);
  return v2 & 1;
}

void sub_77CBC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_77D18(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_77DA8 + 4 * byte_1906ED[a2]))(0xD000000000000014);
}

uint64_t sub_77DA8(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x800000000019EB00;
  if (a1 == 0xD000000000000014 && v1 == 0x800000000019EB00)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000014, 0x800000000019EB00, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_77E84(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000065;
  v3 = 0x707954616964656DLL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000014;
    else
      v5 = 0x65707954656C6173;
    if (v4 == 1)
      v6 = 0x800000000019EB00;
    else
      v6 = 0xE800000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x707954616964656DLL;
  v6 = 0xE900000000000065;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD000000000000014;
    else
      v3 = 0x65707954656C6173;
    if (v7 == 1)
      v2 = 0x800000000019EB00;
    else
      v2 = 0xE800000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void sub_77F9C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_77FE8(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_780BC + 4 * byte_1906FA[a2]))(v2 + 2);
}

uint64_t sub_780BC(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x800000000019ED80;
  if (a1 == v1 + 2 && v2 == 0x800000000019ED80)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 2, 0x800000000019ED80, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_781DC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC0000006449746ELL;
  v3 = 0x6F724665726F7473;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD00000000000001BLL;
    else
      v5 = 0x6E656D7461657274;
    if (v4 == 1)
      v6 = 0x800000000019EB90;
    else
      v6 = 0xEC00000073644974;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6F724665726F7473;
  v6 = 0xEC0000006449746ELL;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD00000000000001BLL;
    else
      v3 = 0x6E656D7461657274;
    if (v7 == 1)
      v2 = 0x800000000019EB90;
    else
      v2 = 0xEC00000073644974;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_7830C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x646F436361736962;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEA00000000007365;
  if ((a2 & 1) != 0)
    v5 = 0x646F436361736962;
  else
    v5 = 0x64496B6F6F62;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000007365;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_783B0(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_783FC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_784B0 + 4 * byte_190708[a2]))(v2 + 7);
}

uint64_t sub_784B0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x800000000019EBE0;
  if (a1 == v1 + 7 && v2 == 0x800000000019EBE0)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 7, 0x800000000019EBE0, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_785B0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x707954616964656DLL;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE900000000000065;
  if ((a2 & 1) != 0)
    v5 = 0x707954616964656DLL;
  else
    v5 = 0x64496B6F6F62;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000065;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_78654(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_786B8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_7872C + 4 * byte_190712[a2]))(0x666F725072657375);
}

uint64_t sub_7872C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x666F725072657375 && v1 == 0xEB00000000656C69)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x666F725072657375, 0xEB00000000656C69, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB00000000656C69);
  return v2 & 1;
}

void sub_787E8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_78830(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_788A8 + 4 * byte_19071A[a2]))(0xD000000000000010);
}

uint64_t sub_788A8(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x800000000019EDF0;
  if (a1 == 0xD000000000000010 && v1 == 0x800000000019EDF0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000010, 0x800000000019EDF0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_78964(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C6F646F6874656DLL;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xED0000736569676FLL;
  if ((a2 & 1) != 0)
    v5 = 0x6C6F646F6874656DLL;
  else
    v5 = 0x64496B6F6F62;
  if ((a2 & 1) != 0)
    v6 = 0xED0000736569676FLL;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_78A10(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_78A60(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_78AF8 + 4 * byte_190724[a2]))(0x64496B6F6F62);
}

uint64_t sub_78AF8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x64496B6F6F62 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x64496B6F6F62, 0xE600000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE600000000000000);
  return v2 & 1;
}

uint64_t sub_78BC4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E69646465626D65;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEA00000000007367;
  if ((a2 & 1) != 0)
    v5 = 0x6E69646465626D65;
  else
    v5 = 0x64496B6F6F62;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000007367;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_78C68(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6B6F6F4264656573;
  else
    v3 = 0x746963696C707865;
  if (v2)
    v4 = 0xEF6465776F6C6C41;
  else
    v4 = 0xE900000000000073;
  if ((a2 & 1) != 0)
    v5 = 0x6B6F6F4264656573;
  else
    v5 = 0x746963696C707865;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000073;
  else
    v6 = 0xEF6465776F6C6C41;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_78D1C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x64496B6F6F62;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x7974696E69666661;
    else
      v4 = 0xD00000000000001ELL;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0x800000000019EAB0;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x7974696E69666661;
      else
        v2 = 0xD00000000000001ELL;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0x800000000019EAB0;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE600000000000000;
    v4 = 0x64496B6F6F62;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v4 != 0x64496B6F6F62)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_78E2C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x696666416B6F6F62;
  else
    v3 = 0x746963696C707865;
  if (v2)
    v4 = 0xEF6465776F6C6C41;
  else
    v4 = 0xEE0073656974696ELL;
  if ((a2 & 1) != 0)
    v5 = 0x696666416B6F6F62;
  else
    v5 = 0x746963696C707865;
  if ((a2 & 1) != 0)
    v6 = 0xEE0073656974696ELL;
  else
    v6 = 0xEF6465776F6C6C41;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_78EE8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73726F68747561;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x73726F68747561;
  else
    v5 = 0x64496B6F6F62;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_78F88(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x7365726E6567;
  else
    v2 = 0x64496B6F6F62;
  if ((a2 & 1) != 0)
    v3 = 0x7365726E6567;
  else
    v3 = 0x64496B6F6F62;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE600000000000000, v3, 0xE600000000000000, 0);
  swift_bridgeObjectRelease_n(0xE600000000000000, 2);
  return v4 & 1;
}

uint64_t sub_78FFC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000013;
  v3 = 0x800000000019ED00;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x796E65446B6F6F62;
    else
      v5 = 0xD000000000000018;
    if (v4 == 1)
      v6 = 0xEC0000007473696CLL;
    else
      v6 = 0x800000000019ED30;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000013;
  v6 = 0x800000000019ED00;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x796E65446B6F6F62;
    else
      v2 = 0xD000000000000018;
    if (v7 == 1)
      v3 = 0xEC0000007473696CLL;
    else
      v3 = 0x800000000019ED30;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_79110(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x63696C7075646564;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xEF64496E6F697461;
  if ((a2 & 1) != 0)
    v5 = 0x63696C7075646564;
  else
    v5 = 0x64496B6F6F62;
  if ((a2 & 1) != 0)
    v6 = 0xEF64496E6F697461;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_791BC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6449736569726573;
  else
    v3 = 0x64496B6F6F62;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6449736569726573;
  else
    v5 = 0x64496B6F6F62;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_79260(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6F6F626F69647561;
  else
    v3 = 0x6B6F6F6265;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE90000000000006BLL;
  if ((a2 & 1) != 0)
    v5 = 0x6F6F626F69647561;
  else
    v5 = 0x6B6F6F6265;
  if ((a2 & 1) != 0)
    v6 = 0xE90000000000006BLL;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_79304(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1684627824;
  else
    v2 = 1701147238;
  if ((a2 & 1) != 0)
    v3 = 1684627824;
  else
    v3 = 1701147238;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE400000000000000, v3, 0xE400000000000000, 0);
  swift_bridgeObjectRelease_n(0xE400000000000000, 2);
  return v4 & 1;
}

void sub_79370(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_793B0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_794B0 + 4 * byte_190734[a2]))(0x736B6F6F62);
}

uint64_t sub_794B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x736B6F6F62 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x736B6F6F62, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE500000000000000);
  return v2 & 1;
}

uint64_t sub_79608(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6B6F6F6265;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6F6F626F69647561;
    else
      v4 = 0x646578696DLL;
    if (v3 == 1)
      v5 = 0xE90000000000006BLL;
    else
      v5 = 0xE500000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6F6F626F69647561;
      else
        v2 = 0x646578696DLL;
      if (v6 == 1)
        v7 = 0xE90000000000006BLL;
      else
        v7 = 0xE500000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE500000000000000;
    v4 = 0x6B6F6F6265;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v4 != 0x6B6F6F6265)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_7971C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_79768(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_797DC + 4 * byte_190743[a2]))(0x747369486B6F6F62);
}

uint64_t sub_797DC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x747369486B6F6F62 && v1 == 0xEB0000000079726FLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x747369486B6F6F62, 0xEB0000000079726FLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return v2 & 1;
}

uint64_t sub_79890(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 0x6565726874;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1920298854;
    else
      v3 = 1702259046;
    v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 1920298854;
      else
        v2 = 1702259046;
      v6 = 0xE400000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6565726874;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE500000000000000;
  if (v3 != 0x6565726874)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_79980(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_799CC(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2;

  return ((uint64_t (*)(uint64_t))((char *)sub_79A88 + 4 * byte_190750[a2]))(v2 + 11);
}

uint64_t sub_79A88(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x800000000019F7F0;
  if (a1 == v1 + 11 && v2 == 0x800000000019F7F0)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, v1 + 11, 0x800000000019F7F0, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_79B74(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  char v7;

  v2 = 0x73657661656CLL;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x656E4F6C6576656CLL;
    else
      v3 = 0x6F77546C6576656CLL;
    v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_6:
      if (v5 == 1)
        v2 = 0x656E4F6C6576656CLL;
      else
        v2 = 0x6F77546C6576656CLL;
      v6 = 0xE800000000000000;
      if (v3 != v2)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x73657661656CLL;
    v5 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE600000000000000;
  if (v3 != 0x73657661656CLL)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v2, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v4 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_79C84(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_79CDC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_79DB4 + 4 * byte_190761[a2]))(0xD000000000000014);
}

uint64_t sub_79DB4(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x800000000019F8B0;
  if (a1 == 0xD000000000000014 && v1 == 0x800000000019F8B0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000014, 0x800000000019F8B0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

void sub_79EC0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_79F0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_79F88 + 4 * byte_19076F[a2]))(0x495041616964656DLL);
}

uint64_t sub_79F88(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x495041616964656DLL && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x495041616964656DLL, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

void sub_7A050(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_7A0A0@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_7A140 + 4 * byte_19077B[a1]))(a2 + 6);
}

uint64_t sub_7A140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x800000000019EF80;
  if (a1 == a2 + 6 && v2 == 0x800000000019EF80)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, a2 + 6, 0x800000000019EF80, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

void sub_7A228(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_7A28C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_7A2F4 + 4 * byte_190786[a2]))(0x746E696F4A6C6C61);
}

uint64_t sub_7A2F4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E696F4A6C6C61 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x746E696F4A6C6C61, 0xE800000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE800000000000000);
  return v2 & 1;
}

uint64_t sub_7A3A4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000013;
  v3 = 0x800000000019EE20;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x797469746E656469;
    else
      v5 = 1768055156;
    if (v4 == 1)
      v6 = 0xE800000000000000;
    else
      v6 = 0xE400000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000013;
  v6 = 0x800000000019EE20;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x797469746E656469;
    else
      v2 = 1768055156;
    if (v7 == 1)
      v3 = 0xE800000000000000;
    else
      v3 = 0xE400000000000000;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
  {
    v8 = 1;
    v3 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  return v8 & 1;
}

uint64_t sub_7A4A4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 12918;
    else
      v3 = 1768055156;
    if (v2 == 1)
      v4 = 0xE200000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 12918;
      else
        v6 = 1768055156;
      if (v5 == 1)
        v7 = 0xE200000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE200000000000000;
    v3 = 12662;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE200000000000000;
  v6 = 12662;
  if (v3 != 12662)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v4;
LABEL_22:
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_7A57C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_7A5C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_7A63C + 4 * byte_19078F[a2]))(0x747369486B6F6F62);
}

uint64_t sub_7A63C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x747369486B6F6F62 && v1 == 0xEB0000000079726FLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x747369486B6F6F62, 0xEB0000000079726FLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return v2 & 1;
}

void sub_7A6F0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_7A73C(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_7A7A8 + 4 * byte_190799[a2]))(a3 + 5);
}

uint64_t sub_7A7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v4 = a3 + 5;
  v5 = 0x800000000019EED0;
  if (a1 == v4 && v3 == 0x800000000019EED0)
  {
    v6 = 1;
    v5 = v3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v4, 0x800000000019EED0, 0);
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

void sub_7A848(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_7A894(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_7A910 + 4 * byte_1907A3[a2]))(0x747369486B6F6F62);
}

uint64_t sub_7A910(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x747369486B6F6F62 && v1 == 0xEB0000000079726FLL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x747369486B6F6F62, 0xEB0000000079726FLL, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEB0000000079726FLL);
  return v2 & 1;
}

void sub_7A9D4(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_7AA24@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_7AAD4 + 4 * byte_1907B0[a1]))(a2 + 6);
}

uint64_t sub_7AAD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  char v4;

  v3 = 0x800000000019EF80;
  if (a1 == a2 + 6 && v2 == 0x800000000019EF80)
  {
    v4 = 1;
    v3 = v2;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v2, a2 + 6, 0x800000000019EF80, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return v4 & 1;
}

uint64_t sub_7ABB8(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x6168637275706F63;
  if (v2)
    v4 = 0xEA00000000006573;
  else
    v4 = 0x800000000019F150;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0x6168637275706F63;
  if ((a2 & 1) != 0)
    v6 = 0x800000000019F150;
  else
    v6 = 0xEA00000000006573;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_7AC64(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_7ACAC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_7AD08 + 4 * byte_1907BC[a2]))(24945);
}

uint64_t sub_7AD08(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 24945 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 24945, 0xE200000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE200000000000000);
  return v2 & 1;
}

uint64_t sub_7ADA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[40];
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = _swiftEmptyArrayStorage;
  v14 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain_n(v1, 2);
    v4 = (uint64_t *)(v1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      v7 = sub_5EDC(&qword_1F1090);
      inited = swift_initStackObject(v7, v13);
      *(_OWORD *)(inited + 16) = xmmword_1875E0;
      *(_QWORD *)(inited + 32) = v5;
      v12 = inited;
      v9 = swift_bridgeObjectRetain(v6);
      sub_10F158(v9);
      sub_10F158(v12);
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n(v1, 2);
    v2 = v14;
  }
  v10 = sub_3CD28((uint64_t)v2);
  swift_bridgeObjectRelease(v2);
  return v10;
}

uint64_t static Book.Metadata.GenreTreeNode.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    return sub_B450(a1[1], a2[1]);
  else
    return 0;
}

uint64_t sub_7AEAC()
{
  _BYTE *v0;

  if (*v0)
    return 1752457584;
  else
    return 0x444965726E6567;
}

uint64_t sub_7AEE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7CA10(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7AF04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7B0B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7AF2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7B0B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Book.Metadata.GenreTreeNode.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v4 = sub_5EDC(&qword_1F26B8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_7B0B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s8MetadataV13GenreTreeNodeV10CodingKeysON, &_s8MetadataV13GenreTreeNodeV10CodingKeysON, v11, v9, v10);
  v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v18, v4);
  if (!v2)
  {
    v16 = v15;
    v17 = 1;
    v12 = sub_5EDC(&qword_1F1660);
    v13 = sub_1F298(&qword_1F1668, &qword_1F1660, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v17, v4, v12, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_7B0B8()
{
  unint64_t result;

  result = qword_1F26C0;
  if (!qword_1F26C0)
  {
    result = swift_getWitnessTable(&unk_190B74, &_s8MetadataV13GenreTreeNodeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F26C0);
  }
  return result;
}

uint64_t Book.Metadata.GenreTreeNode.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v5 = sub_5EDC(&qword_1F26C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_7B0B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s8MetadataV13GenreTreeNodeV10CodingKeysON, &_s8MetadataV13GenreTreeNodeV10CodingKeysON, v11, v9, v10);
  if (!v2)
  {
    v20 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v20, v5);
    v13 = sub_5EDC(&qword_1F1660);
    v19 = 1;
    v14 = sub_1F298(&qword_1F1678, &qword_1F1660, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, v13, &v19, v5, v13, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v18;
    *a2 = v12;
    a2[1] = v15;
  }
  return sub_62F8(a1);
}

uint64_t sub_7B28C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Book.Metadata.GenreTreeNode.init(from:)(a1, a2);
}

uint64_t sub_7B2A0(_QWORD *a1)
{
  return Book.Metadata.GenreTreeNode.encode(to:)(a1);
}

uint64_t Book.Metadata.seriesID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t Book.Metadata.mappedSeriesID.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t Book.Metadata.init(authorIDs:mediaType:leafGenres:mappedAssetID:seriesID:mappedSeriesID:)@<X0>(uint64_t result@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  *(_BYTE *)a9 = *a2;
  *(_QWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = result;
  *(_QWORD *)(a9 + 24) = a4;
  *(_BYTE *)(a9 + 32) = a5 & 1;
  *(_QWORD *)(a9 + 40) = a6;
  *(_BYTE *)(a9 + 48) = a7 & 1;
  *(_QWORD *)(a9 + 56) = a8;
  *(_BYTE *)(a9 + 64) = a10 & 1;
  return result;
}

uint64_t Book.Metadata.copy(for:mappedAssetID:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v4;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t result;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a1;
  v7 = *v4;
  v8 = *((_QWORD *)v4 + 3);
  v30 = *((_QWORD *)v4 + 1);
  v31 = *((_QWORD *)v4 + 2);
  v9 = v4[32];
  v10 = *((_QWORD *)v4 + 5);
  v29 = v4[48];
  v11 = *((_QWORD *)v4 + 7);
  v12 = v4[64];
  v13 = 0x6B6F6F6265;
  if (*a1)
    v14 = 0x6F6F626F69647561;
  else
    v14 = 0x6B6F6F6265;
  if (v6)
    v15 = 0xE90000000000006BLL;
  else
    v15 = 0xE500000000000000;
  if (v7)
  {
    v13 = 0x6F6F626F69647561;
    v16 = 0xE90000000000006BLL;
  }
  else
  {
    v16 = 0xE500000000000000;
  }
  if (v14 == v13 && v15 == v16)
  {
    swift_bridgeObjectRelease_n(v15, 2);
    v19 = v30;
    v21 = v31;
    v20 = v30;
    v24 = v29;
  }
  else
  {
    v27 = a3 & 1;
    v28 = v12;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v13, v16, 0);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
    v19 = v30;
    if ((v18 & 1) != 0)
      v20 = v30;
    else
      v20 = v31;
    if ((v18 & 1) != 0)
      v21 = v31;
    else
      v21 = v30;
    if ((v18 & 1) == 0)
    {
      LOBYTE(v7) = v6;
      v8 = a2;
      v9 = v27;
    }
    v22 = (v18 & 1) == 0;
    v12 = v28;
    if (v22)
      v23 = v11;
    else
      v23 = v10;
    if (v22)
      v24 = v28;
    else
      v24 = v29;
    if (v22)
      v11 = v10;
    if (v22)
      v12 = v29;
    v10 = v23;
  }
  swift_bridgeObjectRetain(v20);
  result = swift_bridgeObjectRetain(v21);
  *(_BYTE *)a4 = v7;
  *(_QWORD *)(a4 + 8) = v19;
  *(_QWORD *)(a4 + 16) = v31;
  *(_QWORD *)(a4 + 24) = v8;
  *(_BYTE *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v10;
  *(_BYTE *)(a4 + 48) = v24;
  *(_QWORD *)(a4 + 56) = v11;
  *(_BYTE *)(a4 + 64) = v12;
  return result;
}

void Book.Metadata.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt64 v6;
  int v7;
  Swift::UInt64 v8;
  int v9;
  Swift::UInt64 v10;
  int v11;
  uint64_t v12;
  unint64_t v13;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(unsigned __int8 *)(v2 + 32);
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(unsigned __int8 *)(v2 + 48);
  v10 = *(_QWORD *)(v2 + 56);
  v11 = *(unsigned __int8 *)(v2 + 64);
  if (*(_BYTE *)v2)
    v12 = 0x6F6F626F69647561;
  else
    v12 = 0x6B6F6F6265;
  if (*(_BYTE *)v2)
    v13 = 0xE90000000000006BLL;
  else
    v13 = 0xE500000000000000;
  String.hash(into:)(a1, v12, v13);
  swift_bridgeObjectRelease(v13);
  sub_1D0EC(a1, v4);
  swift_bridgeObjectRetain(v5);
  sub_7BE84(a1, v5);
  swift_bridgeObjectRelease(v5);
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
    if (!v9)
      goto LABEL_9;
LABEL_12:
    Hasher._combine(_:)(0);
    if (!v11)
      goto LABEL_10;
    goto LABEL_13;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v6);
  if (v9)
    goto LABEL_12;
LABEL_9:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v8);
  if (!v11)
  {
LABEL_10:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v10);
    return;
  }
LABEL_13:
  Hasher._combine(_:)(0);
}

uint64_t sub_7B5B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7B5EC + 4 * byte_1907C0[*v0]))(0x707954616964656DLL, 0xE900000000000065);
}

uint64_t sub_7B5EC()
{
  return 0x726E65476661656CLL;
}

uint64_t sub_7B608()
{
  return 0x4449726F68747561;
}

uint64_t sub_7B620()
{
  return 0x734164657070616DLL;
}

uint64_t sub_7B644()
{
  return 0x4449736569726573;
}

uint64_t sub_7B65C()
{
  return 0x655364657070616DLL;
}

uint64_t sub_7B680@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7CAF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7B6A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7C188();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7B6CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7C188();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Book.Metadata.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char v33;

  v4 = sub_5EDC(&qword_1F26D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v29 = *((_QWORD *)v1 + 2);
  v30 = v9;
  v10 = *((_QWORD *)v1 + 3);
  v32 = v1[32];
  v27 = *((_QWORD *)v1 + 5);
  v28 = v10;
  LODWORD(v10) = v1[48];
  v24 = *((_QWORD *)v1 + 7);
  v25 = v1[64];
  v26 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_7C188();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s8MetadataV10CodingKeysON, &_s8MetadataV10CodingKeysON, v13, v11, v12);
  LOBYTE(v31) = v8;
  v33 = 0;
  v14 = sub_7C1CC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v33, v4, &type metadata for Book.MediaType, v14);
  if (!v2)
  {
    v15 = v28;
    v16 = v29;
    v17 = v32;
    v31 = v30;
    v33 = 1;
    v18 = sub_5EDC(&qword_1F26E8);
    v19 = sub_7C298(&qword_1F26F0, (void (*)(void))sub_7C210, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v33, v4, v18, v19);
    v31 = v16;
    v33 = 2;
    v20 = sub_5EDC(&qword_1F2700);
    v21 = sub_1F298(&qword_1F2708, &qword_1F2700, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v33, v4, v20, v21);
    LOBYTE(v31) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v17, &v31, v4);
    LOBYTE(v31) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v26, &v31, v4);
    LOBYTE(v31) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Book.Metadata.hashValue.getter()
{
  char *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  _QWORD v8[9];
  char v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;

  v1 = *((_QWORD *)v0 + 3);
  v2 = v0[32];
  v3 = *((_QWORD *)v0 + 5);
  v4 = v0[48];
  v5 = *((_QWORD *)v0 + 7);
  v6 = v0[64];
  v9 = *v0;
  v10 = *(_OWORD *)(v0 + 8);
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  Hasher.init(_seed:)(v8, 0);
  Book.Metadata.hash(into:)((uint64_t)v8);
  return Hasher._finalize()();
}

uint64_t Book.Metadata.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  v5 = sub_5EDC(&qword_1F2710);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_7C188();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s8MetadataV10CodingKeysON, &_s8MetadataV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v36 = 0;
  v12 = sub_7C254();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, &type metadata for Book.MediaType, &v36, v5, &type metadata for Book.MediaType, v12);
  v13 = v34;
  v14 = sub_5EDC(&qword_1F26E8);
  v36 = 1;
  v15 = sub_7C298(&qword_1F2720, (void (*)(void))sub_7C300, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, v14, &v36, v5, v14, v15);
  v35 = v13;
  v16 = v34;
  v17 = sub_5EDC(&qword_1F2700);
  v36 = 2;
  v18 = sub_1F298(&qword_1F2730, &qword_1F2700, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  swift_bridgeObjectRetain(v16);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v34, v17, &v36, v5, v17, v18);
  v33 = v16;
  v19 = v34;
  LOBYTE(v34) = 3;
  swift_bridgeObjectRetain(v19);
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
  v31 = v21;
  v32 = v20;
  LOBYTE(v34) = 4;
  v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
  HIDWORD(v29) = v24;
  v30 = v22;
  LOBYTE(v34) = 5;
  v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v5);
  LOBYTE(v17) = v26;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_BYTE *)a2 = v35;
  v27 = v32;
  v28 = v33;
  *(_QWORD *)(a2 + 8) = v33;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v27;
  *(_BYTE *)(a2 + 32) = v31 & 1;
  *(_QWORD *)(a2 + 40) = v30;
  *(_BYTE *)(a2 + 48) = BYTE4(v29) & 1;
  *(_QWORD *)(a2 + 56) = v25;
  *(_BYTE *)(a2 + 64) = v17 & 1;
  sub_62F8(a1);
  swift_bridgeObjectRelease(v19);
  return swift_bridgeObjectRelease(v28);
}

uint64_t sub_7BDDC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Book.Metadata.init(from:)(a1, a2);
}

uint64_t sub_7BDF0(_QWORD *a1)
{
  return Book.Metadata.encode(to:)(a1);
}

Swift::Int sub_7BE08(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD v9[9];
  char v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;

  v2 = *((_QWORD *)v1 + 3);
  v3 = v1[32];
  v4 = *((_QWORD *)v1 + 5);
  v5 = v1[48];
  v6 = *((_QWORD *)v1 + 7);
  v7 = v1[64];
  v10 = *v1;
  v11 = *(_OWORD *)(v1 + 8);
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  Hasher.init(_seed:)(v9, a1);
  Book.Metadata.hash(into:)((uint64_t)v9);
  return Hasher._finalize()();
}

void sub_7BE84(uint64_t a1, uint64_t a2)
{
  Swift::Int v3;
  Swift::UInt v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v14;
  int64_t v15;

  v3 = Hasher._finalize()();
  v4 = 0;
  v5 = 0;
  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v5++, 1))
      goto LABEL_19;
    if (v5 >= v10)
    {
LABEL_17:
      Hasher._combine(_:)(v4);
      return;
    }
    v14 = *(_QWORD *)(v6 + 8 * v5);
    if (!v14)
      break;
LABEL_16:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    v4 ^= static Hasher._hash(seed:_:)(v3, *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v12));
  }
  v15 = v5 + 1;
  if (v5 + 1 >= v10)
    goto LABEL_17;
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    ++v5;
    goto LABEL_16;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      goto LABEL_17;
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

BOOL _s20BooksPersonalization4BookV8MetadataV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  _BOOL8 result;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  char v27;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v26 = *(_QWORD *)(a1 + 24);
  v4 = *(_BYTE *)(a1 + 32);
  v27 = *(_BYTE *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(unsigned __int8 *)(a2 + 32);
  v9 = *(_BYTE *)a1 == 0;
  v22 = *(_QWORD *)(a2 + 40);
  v23 = *(_QWORD *)(a1 + 40);
  v24 = *(_BYTE *)(a1 + 64);
  v25 = *(unsigned __int8 *)(a2 + 48);
  if (*(_BYTE *)a1)
    v10 = 0x6F6F626F69647561;
  else
    v10 = 0x6B6F6F6265;
  v19 = *(_QWORD *)(a2 + 56);
  v21 = *(_BYTE *)(a2 + 64);
  if (v9)
    v11 = 0xE500000000000000;
  else
    v11 = 0xE90000000000006BLL;
  if (*(_BYTE *)a2)
    v12 = 0x6F6F626F69647561;
  else
    v12 = 0x6B6F6F6265;
  if (*(_BYTE *)a2)
    v13 = 0xE90000000000006BLL;
  else
    v13 = 0xE500000000000000;
  if (v10 == v12 && v11 == v13)
  {
    swift_bridgeObjectRelease_n(v11, 2);
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v13);
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  if ((sub_C0D4(v3, v6) & 1) == 0 || (sub_2B148(v2, v5) & 1) == 0)
    return 0;
  if ((v4 & 1) != 0)
  {
    if (!v8)
      return 0;
  }
  else
  {
    if (v26 == v7)
      v16 = v8;
    else
      v16 = 1;
    if ((v16 & 1) != 0)
      return 0;
  }
  if ((v27 & 1) != 0)
  {
    if (!v25)
      return 0;
  }
  else
  {
    v17 = v25;
    if (v23 != v22)
      v17 = 1;
    if ((v17 & 1) != 0)
      return 0;
  }
  if ((v24 & 1) == 0)
  {
    v18 = v21;
    if (v20 != v19)
      v18 = 1;
    return (v18 & 1) == 0;
  }
  return (v21 & 1) != 0;
}

unint64_t sub_7C188()
{
  unint64_t result;

  result = qword_1F26D8;
  if (!qword_1F26D8)
  {
    result = swift_getWitnessTable(&unk_190B24, &_s8MetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F26D8);
  }
  return result;
}

unint64_t sub_7C1CC()
{
  unint64_t result;

  result = qword_1F26E0;
  if (!qword_1F26E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.MediaType, &type metadata for Book.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F26E0);
  }
  return result;
}

unint64_t sub_7C210()
{
  unint64_t result;

  result = qword_1F26F8;
  if (!qword_1F26F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Metadata.GenreTreeNode, &type metadata for Book.Metadata.GenreTreeNode);
    atomic_store(result, (unint64_t *)&qword_1F26F8);
  }
  return result;
}

unint64_t sub_7C254()
{
  unint64_t result;

  result = qword_1F2718;
  if (!qword_1F2718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.MediaType, &type metadata for Book.MediaType);
    atomic_store(result, (unint64_t *)&qword_1F2718);
  }
  return result;
}

uint64_t sub_7C298(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_5F68(&qword_1F26E8);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_7C300()
{
  unint64_t result;

  result = qword_1F2728;
  if (!qword_1F2728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Metadata.GenreTreeNode, &type metadata for Book.Metadata.GenreTreeNode);
    atomic_store(result, (unint64_t *)&qword_1F2728);
  }
  return result;
}

unint64_t sub_7C348()
{
  unint64_t result;

  result = qword_1F2738;
  if (!qword_1F2738)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Metadata.GenreTreeNode, &type metadata for Book.Metadata.GenreTreeNode);
    atomic_store(result, (unint64_t *)&qword_1F2738);
  }
  return result;
}

unint64_t sub_7C390()
{
  unint64_t result;

  result = qword_1F2740;
  if (!qword_1F2740)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.Metadata, &type metadata for Book.Metadata);
    atomic_store(result, (unint64_t *)&qword_1F2740);
  }
  return result;
}

uint64_t _s8MetadataVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s8MetadataVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t _s8MetadataVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v10;
  return a1;
}

__n128 _s8MetadataVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s8MetadataVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t _s8MetadataVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s8MetadataVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Book.Metadata()
{
  return &type metadata for Book.Metadata;
}

ValueMetadata *type metadata accessor for Book.Metadata.GenreTreeNode()
{
  return &type metadata for Book.Metadata.GenreTreeNode;
}

uint64_t dispatch thunk of BookMetadataServiceType.fetchMetadataFor(storeIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 16);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_6F204;
  return v10(a1, a2, a3);
}

uint64_t _s8MetadataV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_7C714 + 4 * byte_1907CB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_7C748 + 4 * byte_1907C6[v4]))();
}

uint64_t sub_7C748(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7C750(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7C758);
  return result;
}

uint64_t sub_7C764(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7C76CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_7C770(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7C778(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8MetadataV10CodingKeysOMa()
{
  return &_s8MetadataV10CodingKeysON;
}

uint64_t _s8MetadataV13GenreTreeNodeV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_7C7E0 + 4 * byte_1907D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_7C814 + 4 * byte_1907D0[v4]))();
}

uint64_t sub_7C814(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7C81C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7C824);
  return result;
}

uint64_t sub_7C830(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7C838);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_7C83C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7C844(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s8MetadataV13GenreTreeNodeV10CodingKeysOMa()
{
  return &_s8MetadataV13GenreTreeNodeV10CodingKeysON;
}

unint64_t sub_7C864()
{
  unint64_t result;

  result = qword_1F2758;
  if (!qword_1F2758)
  {
    result = swift_getWitnessTable(&unk_190A44, &_s8MetadataV13GenreTreeNodeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2758);
  }
  return result;
}

unint64_t sub_7C8AC()
{
  unint64_t result;

  result = qword_1F2760;
  if (!qword_1F2760)
  {
    result = swift_getWitnessTable(&unk_190AFC, &_s8MetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2760);
  }
  return result;
}

unint64_t sub_7C8F4()
{
  unint64_t result;

  result = qword_1F2768;
  if (!qword_1F2768)
  {
    result = swift_getWitnessTable(&unk_190A6C, &_s8MetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2768);
  }
  return result;
}

unint64_t sub_7C93C()
{
  unint64_t result;

  result = qword_1F2770;
  if (!qword_1F2770)
  {
    result = swift_getWitnessTable(&unk_190A94, &_s8MetadataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2770);
  }
  return result;
}

unint64_t sub_7C984()
{
  unint64_t result;

  result = qword_1F2778;
  if (!qword_1F2778)
  {
    result = swift_getWitnessTable(&unk_1909B4, &_s8MetadataV13GenreTreeNodeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2778);
  }
  return result;
}

unint64_t sub_7C9CC()
{
  unint64_t result;

  result = qword_1F2780;
  if (!qword_1F2780)
  {
    result = swift_getWitnessTable(&unk_1909DC, &_s8MetadataV13GenreTreeNodeV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2780);
  }
  return result;
}

uint64_t sub_7CA10(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x444965726E6567 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444965726E6567, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1752457584 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1752457584, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_7CAF0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x707954616964656DLL && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707954616964656DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x726E65476661656CLL && a2 == 0xEA00000000007365)
  {
    v7 = 0xEA00000000007365;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726E65476661656CLL, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4449726F68747561 && a2 == 0xE900000000000073)
  {
    v8 = 0xE900000000000073;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449726F68747561, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x734164657070616DLL && a2 == 0xED00004449746573)
  {
    v9 = 0xED00004449746573;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x734164657070616DLL, 0xED00004449746573, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x4449736569726573 && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449736569726573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x655364657070616DLL && a2 == 0xEE00444973656972)
  {
    swift_bridgeObjectRelease(0xEE00444973656972);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x655364657070616DLL, 0xEE00444973656972, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

_UNKNOWN **static Scorer.allCases.getter()
{
  return &off_1D9AF0;
}

BOOL Scorer.mayScoreSiriContent.getter()
{
  unsigned __int8 *v0;

  return *v0 < 2u;
}

BooksPersonalization::Scorer_optional __swiftcall Scorer.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::Scorer_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9BD8, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 3;
  if (v5 < 3)
    v7 = v5;
  *v4 = v7;
  return result;
}

unint64_t sub_7CE4C()
{
  unint64_t result;

  result = qword_1F2788;
  if (!qword_1F2788)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Scorer, &type metadata for Scorer);
    atomic_store(result, (unint64_t *)&qword_1F2788);
  }
  return result;
}

BooksPersonalization::Scorer_optional sub_7CE90(Swift::String *a1)
{
  return Scorer.init(rawValue:)(*a1);
}

unint64_t sub_7CEA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F2790;
  if (!qword_1F2790)
  {
    v1 = sub_5F68(&qword_1F2798);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F2790);
  }
  return result;
}

void sub_7CEEC(_QWORD *a1@<X8>)
{
  *a1 = &off_1D9C40;
}

unint64_t sub_7CF00()
{
  unint64_t result;

  result = qword_1F27A0;
  if (!qword_1F27A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Scorer, &type metadata for Scorer);
    atomic_store(result, (unint64_t *)&qword_1F27A0);
  }
  return result;
}

uint64_t sub_7CF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_7D424();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_7CFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_7D424();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for Scorer(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_7D038 + 4 * byte_190BD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_7D06C + 4 * byte_190BD0[v4]))();
}

uint64_t sub_7D06C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7D074(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7D07CLL);
  return result;
}

uint64_t sub_7D088(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7D090);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_7D094(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7D09C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Scorer()
{
  return &type metadata for Scorer;
}

uint64_t sub_7D0B8(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 1224) = v3;
  *(_QWORD *)(v4 + 1216) = a2;
  *(_QWORD *)(v4 + 1208) = a1;
  *(_BYTE *)(v4 + 1256) = *a3;
  return swift_task_switch(sub_7D0E0, 0, 0);
}

uint64_t sub_7D0E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  int *v21;

  v1 = *(_QWORD *)(v0 + 1224);
  swift_beginAccess(v1 + 16, v0 + 1184, 32, 0);
  v2 = *(_QWORD *)(v1 + 16);
  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_3960C(*(_BYTE *)(v0 + 1256)), (v4 & 1) == 0))
  {
    v8 = *(_BYTE *)(v0 + 1256);
    swift_endAccess(v0 + 1184);
    v9 = sub_7D3E0();
    v10 = swift_allocError(&type metadata for DelegatingBookScorer.Errors, v9, 0, 0);
    *v11 = v8;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 1208);
  sub_3DD40(*(_QWORD *)(v2 + 56) + 40 * v3, v0 + 1144);
  sub_26DB8((__int128 *)(v0 + 1144), v0 + 1104);
  swift_endAccess(v0 + 1184);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(v0 + 1208) + 80;
    while (!*(_QWORD *)(*(_QWORD *)v7 + 16))
    {
      v7 += 80;
      if (!--v6)
        goto LABEL_12;
    }
    if (*(_BYTE *)(v0 + 1256) == 2)
    {
      v13 = sub_7D3E0();
      v14 = swift_allocError(&type metadata for DelegatingBookScorer.Errors, v13, 0, 0);
      *v15 = 3;
      swift_willThrow(v14);
      sub_62F8((_QWORD *)(v0 + 1104));
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
LABEL_12:
  v16 = *(const void **)(v0 + 1216);
  v17 = *(_QWORD *)(v0 + 1128);
  v18 = *(_QWORD *)(v0 + 1136);
  sub_49F4((_QWORD *)(v0 + 1104), v17);
  memcpy((void *)(v0 + 16), v16, 0x440uLL);
  v19 = *(int **)(v18 + 8);
  v21 = (int *)((char *)v19 + *v19);
  v20 = (_QWORD *)swift_task_alloc(v19[1]);
  *(_QWORD *)(v0 + 1232) = v20;
  *v20 = v0;
  v20[1] = sub_7D2BC;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v21)(*(_QWORD *)(v0 + 1208), v0 + 16, v17, v18);
}

uint64_t sub_7D2BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1232);
  *(_QWORD *)(*v2 + 1240) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_7D368;
  }
  else
  {
    *(_QWORD *)(v4 + 1248) = a1;
    v6 = sub_7D330;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_7D330()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 1104));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 1248));
}

uint64_t sub_7D368()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 1104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AggregateFlattener.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DelegatingBookScorer()
{
  return objc_opt_self(_TtC20BooksPersonalization20DelegatingBookScorer);
}

unint64_t sub_7D3E0()
{
  unint64_t result;

  result = qword_1F2850;
  if (!qword_1F2850)
  {
    result = swift_getWitnessTable(&unk_190DD0, &type metadata for DelegatingBookScorer.Errors);
    atomic_store(result, (unint64_t *)&qword_1F2850);
  }
  return result;
}

unint64_t sub_7D424()
{
  unint64_t result;

  result = qword_1F2858;
  if (!qword_1F2858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Scorer, &type metadata for Scorer);
    atomic_store(result, (unint64_t *)&qword_1F2858);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DelegatingBookScorer.Errors(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
  {
    v6 = *a1;
    v7 = v6 >= 3;
    v8 = v6 - 3;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 3;
    if (a2 + 3 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_7D4B8 + 4 * byte_190BDA[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for DelegatingBookScorer.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 3;
  if (a3 + 3 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFD)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_7D560 + 4 * byte_190BE4[v5]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_7D594 + 4 * byte_190BDF[v5]))();
}

uint64_t sub_7D594(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7D59C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7D5A4);
  return result;
}

uint64_t sub_7D5B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7D5B8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_7D5BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7D5C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7D5D0(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 3)
    return v1 - 2;
  else
    return 0;
}

_BYTE *sub_7D5E4(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 2;
  return result;
}

ValueMetadata *type metadata accessor for DelegatingBookScorer.Errors()
{
  return &type metadata for DelegatingBookScorer.Errors;
}

void __swiftcall ScoredGenre.copyWith(score:)(BooksPersonalization::ScoredGenre *__return_ptr retstr, Swift::Double score)
{
  uint64_t v2;
  BooksPersonalization::Book::MediaType v3;
  void *v4;
  void *v5;

  v3 = *(_BYTE *)(v2 + 8);
  v5 = *(void **)(v2 + 16);
  v4 = *(void **)(v2 + 24);
  retstr->genre.storeID = *(_QWORD *)v2;
  retstr->genre.mediaType = v3;
  retstr->genre.sources._rawValue = v5;
  retstr->genre.rationale.value.seedBooks._rawValue = v4;
  retstr->score = score;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
}

uint64_t sub_7D640()
{
  return 0x6B6F6F4264656573;
}

uint64_t sub_7D65C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6B6F6F4264656573 && a2 == 0xE900000000000073)
  {
    result = swift_bridgeObjectRelease(0xE900000000000073);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F4264656573, 0xE900000000000073, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_7D6FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7DFC8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7D724(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7DFC8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Genre.Rationale.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_5EDC(&qword_1F2860);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_7DFC8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Genre.Rationale.CodingKeys, &type metadata for Genre.Rationale.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_5EDC(&qword_1F2870);
  v12 = sub_201AC(&qword_1F2878, &qword_1F2870, (void (*)(void))sub_7E00C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t Genre.Rationale.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F2888);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_7DFC8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Genre.Rationale.CodingKeys, &type metadata for Genre.Rationale.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_5EDC(&qword_1F2870);
    v13 = sub_201AC(&qword_1F2890, &qword_1F2870, (void (*)(void))sub_7E050, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_62F8(a1);
}

uint64_t sub_7D9BC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Genre.Rationale.init(from:)(a1, a2);
}

uint64_t sub_7D9D0(_QWORD *a1)
{
  return Genre.Rationale.encode(to:)(a1);
}

uint64_t Genre.rationale.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

BooksPersonalization::Genre __swiftcall Genre.init(storeID:mediaType:sources:rationale:)(Swift::UInt64 storeID, BooksPersonalization::Book::MediaType mediaType, Swift::OpaquePointer sources, BooksPersonalization::Genre::Rationale_optional rationale)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  BooksPersonalization::Genre result;

  v5 = *(_BYTE *)mediaType;
  v6 = *(_QWORD *)rationale.value.seedBooks._rawValue;
  *(_QWORD *)v4 = storeID;
  *(_BYTE *)(v4 + 8) = v5;
  *(Swift::OpaquePointer *)(v4 + 16) = sources;
  *(_QWORD *)(v4 + 24) = v6;
  result.rationale = rationale;
  result.sources = sources;
  result.storeID = storeID;
  result.mediaType = mediaType;
  return result;
}

uint64_t sub_7DA08()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_7DA38 + 4 * byte_190E10[*v0]))(0x444965726F7473, 0xE700000000000000);
}

uint64_t sub_7DA38()
{
  return 0x707954616964656DLL;
}

uint64_t sub_7DA7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7F634(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7DAA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7E094();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7DAC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7E094();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Genre.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;

  v4 = sub_5EDC(&qword_1F28A0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v24 = *((unsigned __int8 *)v1 + 8);
  v9 = v1[2];
  v21 = v1[3];
  v22 = v9;
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_7E094();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Genre.CodingKeys, &type metadata for Genre.CodingKeys, v12, v10, v11);
  LOBYTE(v23) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v23, v4);
  if (!v2)
  {
    v14 = v21;
    v13 = v22;
    LOBYTE(v23) = v24;
    v25 = 1;
    v15 = sub_7C1CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v4, &type metadata for Book.MediaType, v15);
    v23 = v13;
    v25 = 2;
    v16 = sub_5EDC(&qword_1F28B0);
    v17 = sub_201AC(&qword_1F28B8, &qword_1F28B0, (void (*)(void))sub_7E0D8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v4, v16, v17);
    v23 = v14;
    v25 = 3;
    v18 = sub_7E11C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v23, &v25, v4, &type metadata for Genre.Rationale, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t Genre.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;

  v5 = sub_5EDC(&qword_1F28D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_7E094();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Genre.CodingKeys, &type metadata for Genre.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  LOBYTE(v21) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
  v23 = 1;
  v13 = sub_7C254();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for Book.MediaType, &v23, v5, &type metadata for Book.MediaType, v13);
  v22 = v21;
  v14 = sub_5EDC(&qword_1F28B0);
  v23 = 2;
  v15 = sub_201AC(&qword_1F28D8, &qword_1F28B0, (void (*)(void))sub_7E160, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, v14, &v23, v5, v14, v15);
  v16 = v21;
  v23 = 3;
  v17 = sub_7E1A4();
  swift_bridgeObjectRetain(v16);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v21, &type metadata for Genre.Rationale, &v23, v5, &type metadata for Genre.Rationale, v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = v21;
  *(_QWORD *)a2 = v12;
  *(_BYTE *)(a2 + 8) = v22;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v18;
  swift_bridgeObjectRetain(v18);
  sub_62F8(a1);
  swift_bridgeObjectRelease(v18);
  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_7DF40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Genre.init(from:)(a1, a2);
}

uint64_t sub_7DF54(_QWORD *a1)
{
  return Genre.encode(to:)(a1);
}

uint64_t ScoredGenre.genre.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v4);
}

double ScoredGenre.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void __swiftcall ScoredGenre.init(genre:score:)(BooksPersonalization::ScoredGenre *__return_ptr retstr, BooksPersonalization::Genre genre, Swift::Double score)
{
  BooksPersonalization::Book::MediaType v3;
  void *v4;
  void *v5;

  v3 = *(_BYTE *)(genre.storeID + 8);
  v4 = *(void **)(genre.storeID + 16);
  v5 = *(void **)(genre.storeID + 24);
  retstr->genre.storeID = *(_QWORD *)genre.storeID;
  retstr->genre.mediaType = v3;
  retstr->genre.sources._rawValue = v4;
  retstr->genre.rationale.value.seedBooks._rawValue = v5;
  retstr->score = score;
}

unint64_t sub_7DFC8()
{
  unint64_t result;

  result = qword_1F2868;
  if (!qword_1F2868)
  {
    result = swift_getWitnessTable(&unk_1914A8, &type metadata for Genre.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2868);
  }
  return result;
}

unint64_t sub_7E00C()
{
  unint64_t result;

  result = qword_1F2880;
  if (!qword_1F2880)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeedBook, &type metadata for SeedBook);
    atomic_store(result, (unint64_t *)&qword_1F2880);
  }
  return result;
}

unint64_t sub_7E050()
{
  unint64_t result;

  result = qword_1F2898;
  if (!qword_1F2898)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SeedBook, &type metadata for SeedBook);
    atomic_store(result, (unint64_t *)&qword_1F2898);
  }
  return result;
}

unint64_t sub_7E094()
{
  unint64_t result;

  result = qword_1F28A8;
  if (!qword_1F28A8)
  {
    result = swift_getWitnessTable(&unk_191458, &type metadata for Genre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F28A8);
  }
  return result;
}

unint64_t sub_7E0D8()
{
  unint64_t result;

  result = qword_1F28C0;
  if (!qword_1F28C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationSource, &type metadata for RecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F28C0);
  }
  return result;
}

unint64_t sub_7E11C()
{
  unint64_t result;

  result = qword_1F28C8;
  if (!qword_1F28C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Genre.Rationale, &type metadata for Genre.Rationale);
    atomic_store(result, (unint64_t *)&qword_1F28C8);
  }
  return result;
}

unint64_t sub_7E160()
{
  unint64_t result;

  result = qword_1F28E0;
  if (!qword_1F28E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationSource, &type metadata for RecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F28E0);
  }
  return result;
}

unint64_t sub_7E1A4()
{
  unint64_t result;

  result = qword_1F28E8;
  if (!qword_1F28E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Genre.Rationale, &type metadata for Genre.Rationale);
    atomic_store(result, (unint64_t *)&qword_1F28E8);
  }
  return result;
}

uint64_t sub_7E1E8()
{
  _BYTE *v0;

  if (*v0)
    return 0x65726F6373;
  else
    return 0x65726E6567;
}

uint64_t sub_7E214@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_7F804(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_7E238(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7E3E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_7E260(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_7E3E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ScoredGenre.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v3 = sub_5EDC(&qword_1F28F0);
  v17 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  v7 = *((_BYTE *)v1 + 8);
  v8 = v1[2];
  v16[0] = v1[3];
  v9 = *((double *)v1 + 4);
  v10 = a1[3];
  v11 = a1[4];
  sub_49F4(a1, v10);
  v12 = sub_7E3E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ScoredGenre.CodingKeys, &type metadata for ScoredGenre.CodingKeys, v12, v10, v11);
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v16[0];
  v18 = 0;
  v13 = sub_7E428();
  v14 = v16[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v3, &type metadata for Genre, v13);
  if (!v14)
  {
    LOBYTE(v19) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v19, v3, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v5, v3);
}

unint64_t sub_7E3E4()
{
  unint64_t result;

  result = qword_1F28F8;
  if (!qword_1F28F8)
  {
    result = swift_getWitnessTable(&unk_191408, &type metadata for ScoredGenre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F28F8);
  }
  return result;
}

unint64_t sub_7E428()
{
  unint64_t result;

  result = qword_1F2900;
  if (!qword_1F2900)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Genre, &type metadata for Genre);
    atomic_store(result, (unint64_t *)&qword_1F2900);
  }
  return result;
}

uint64_t ScoredGenre.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;

  v5 = sub_5EDC(&qword_1F2908);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_7E3E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ScoredGenre.CodingKeys, &type metadata for ScoredGenre.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v20 = 0;
  v12 = sub_7E648();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for Genre, &v20, v5, &type metadata for Genre, v12);
  v19 = v21;
  v18 = v22;
  v13 = v23;
  v14 = v24;
  LOBYTE(v21) = 1;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v19;
  *(_BYTE *)(a2 + 8) = v18;
  *(_QWORD *)(a2 + 16) = v13;
  *(_QWORD *)(a2 + 24) = v14;
  *(double *)(a2 + 32) = v15;
  sub_62F8(a1);
  swift_bridgeObjectRelease(v14);
  return swift_bridgeObjectRelease(v13);
}

unint64_t sub_7E648()
{
  unint64_t result;

  result = qword_1F2910;
  if (!qword_1F2910)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Genre, &type metadata for Genre);
    atomic_store(result, (unint64_t *)&qword_1F2910);
  }
  return result;
}

uint64_t sub_7E68C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ScoredGenre.init(from:)(a1, a2);
}

uint64_t sub_7E6A0(_QWORD *a1)
{
  return ScoredGenre.encode(to:)(a1);
}

void GenreRecommendationServiceError.description.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease(0xE000000000000000);
  __asm { BR              X9 }
}

uint64_t sub_7E734()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v3;

  v1._countAndFlagsBits = v0 + 11;
  v1._object = (void *)0x80000000001A0B60;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(0x80000000001A0B60);
  return v3;
}

BooksPersonalization::GenreRecommendationSource_optional __swiftcall GenreRecommendationSource.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::GenreRecommendationSource_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9C68, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 5;
  if (v5 < 5)
    v7 = v5;
  *v4 = v7;
  return result;
}

_UNKNOWN **static GenreRecommendationSource.allCases.getter()
{
  return &off_1D9D00;
}

uint64_t GenreRecommendationSource.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_7E83C + 4 * byte_190E18[*v0]))(0xD000000000000013, 0x800000000019EE20);
}

uint64_t sub_7E83C()
{
  return 0x747369486B6F6F62;
}

uint64_t sub_7E85C(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_7E884()
{
  return 1768055156;
}

void sub_7E894(char *a1)
{
  sub_7971C(*a1);
}

void sub_7E8A0()
{
  char *v0;

  sub_52C7C(*v0);
}

void sub_7E8A8(uint64_t a1)
{
  char *v1;

  sub_F8AA8(a1, *v1);
}

void sub_7E8B0(uint64_t a1)
{
  char *v1;

  sub_152574(a1, *v1);
}

BooksPersonalization::GenreRecommendationSource_optional sub_7E8B8(Swift::String *a1)
{
  return GenreRecommendationSource.init(rawValue:)(*a1);
}

uint64_t sub_7E8C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = GenreRecommendationSource.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_7E8E8(_QWORD *a1@<X8>)
{
  *a1 = &off_1D9D28;
}

BooksPersonalization::GenreRecommendationRequest __swiftcall GenreRecommendationRequest.init(allowNegativeScores:overrideSource:)(Swift::Bool allowNegativeScores, BooksPersonalization::GenreRecommendationSource_optional overrideSource)
{
  Swift::Bool *v2;
  char v3;
  BooksPersonalization::GenreRecommendationRequest result;

  v3 = *(_BYTE *)overrideSource.value;
  *v2 = allowNegativeScores;
  v2[1] = v3;
  result.allowNegativeScores = allowNegativeScores;
  return result;
}

uint64_t sub_7E908(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v7 = swift_task_alloc(dword_1F291C);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_70AB4;
  *(_BYTE *)(v7 + 32) = *a1;
  *(_BYTE *)(v7 + 33) = a1[1];
  v8 = *(int **)(a3 + 8);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (uint64_t *)swift_task_alloc(v8[1]);
  *(_QWORD *)(v7 + 16) = v9;
  *v9 = v7;
  v9[1] = (uint64_t)sub_7EA44;
  return v11(v7 + 32, a2, a3);
}

uint64_t GenreRecommendationServiceType.fetchRecommendedGenres(request:)(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)(v3 + 32) = *a1;
  *(_BYTE *)(v3 + 33) = a1[1];
  v6 = *(int **)(a3 + 8);
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_7EA44;
  return v9(v3 + 32, a2, a3);
}

uint64_t sub_7EA44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  *(_QWORD *)(v5 + 24) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_7EAB8, 0, 0);
  else
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_7EAB8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_7EAC8()
{
  unint64_t result;

  result = qword_1F2920;
  if (!qword_1F2920)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GenreRecommendationSource, &type metadata for GenreRecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F2920);
  }
  return result;
}

unint64_t sub_7EB10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F2928;
  if (!qword_1F2928)
  {
    v1 = sub_5F68(&qword_1F2930);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F2928);
  }
  return result;
}

unint64_t sub_7EB60()
{
  unint64_t result;

  result = qword_1F2938;
  if (!qword_1F2938)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GenreRecommendationSource, &type metadata for GenreRecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F2938);
  }
  return result;
}

uint64_t initializeWithCopy for Genre(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for Genre(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t assignWithTake for Genre(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Genre(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Genre(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Genre()
{
  return &type metadata for Genre;
}

ValueMetadata *type metadata accessor for Genre.Rationale()
{
  return &type metadata for Genre.Rationale;
}

uint64_t destroy for GenreCollection(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for ScoredGenre(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for ScoredGenre(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ScoredGenre(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScoredGenre(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScoredGenre(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScoredGenre()
{
  return &type metadata for ScoredGenre;
}

ValueMetadata *type metadata accessor for GenreRecommendationServiceError()
{
  return &type metadata for GenreRecommendationServiceError;
}

uint64_t storeEnumTagSinglePayload for GenreRecommendationSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_7EF88 + 4 * byte_190E22[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_7EFBC + 4 * byte_190E1D[v4]))();
}

uint64_t sub_7EFBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7EFC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7EFCCLL);
  return result;
}

uint64_t sub_7EFD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7EFE0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_7EFE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7EFEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenreRecommendationSource()
{
  return &type metadata for GenreRecommendationSource;
}

uint64_t getEnumTagSinglePayload for GenreRecommendationRequest(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for GenreRecommendationRequest(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_7F0F8 + 4 * byte_190E2C[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_7F12C + 4 * byte_190E27[v4]))();
}

uint64_t sub_7F12C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_7F134(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x7F13CLL);
  return result;
}

uint64_t sub_7F148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x7F150);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_7F154(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_7F15C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenreRecommendationRequest()
{
  return &type metadata for GenreRecommendationRequest;
}

uint64_t storeEnumTagSinglePayload for ScoredGenre.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_7F1C4 + 4 * byte_190E36[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_7F1F8 + 4 * byte_190E31[v4]))();
}

uint64_t sub_7F1F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7F200(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7F208);
  return result;
}

uint64_t sub_7F214(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7F21CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_7F220(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7F228(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScoredGenre.CodingKeys()
{
  return &type metadata for ScoredGenre.CodingKeys;
}

uint64_t _s20BooksPersonalization31GenreRecommendationServiceErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_7F290 + 4 * byte_190E40[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_7F2C4 + 4 * byte_190E3B[v4]))();
}

uint64_t sub_7F2C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_7F2CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x7F2D4);
  return result;
}

uint64_t sub_7F2E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x7F2E8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_7F2EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_7F2F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Genre.CodingKeys()
{
  return &type metadata for Genre.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Genre.Rationale.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_7F350 + 4 * byte_190E45[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_7F370 + 4 * byte_190E4A[v4]))();
}

_BYTE *sub_7F350(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_7F370(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_7F378(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_7F380(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_7F388(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_7F390(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Genre.Rationale.CodingKeys()
{
  return &type metadata for Genre.Rationale.CodingKeys;
}

unint64_t sub_7F3B0()
{
  unint64_t result;

  result = qword_1F2958;
  if (!qword_1F2958)
  {
    result = swift_getWitnessTable(&unk_191270, &type metadata for Genre.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2958);
  }
  return result;
}

unint64_t sub_7F3F8()
{
  unint64_t result;

  result = qword_1F2960;
  if (!qword_1F2960)
  {
    result = swift_getWitnessTable(&unk_191328, &type metadata for Genre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2960);
  }
  return result;
}

unint64_t sub_7F440()
{
  unint64_t result;

  result = qword_1F2968;
  if (!qword_1F2968)
  {
    result = swift_getWitnessTable(&unk_1913E0, &type metadata for ScoredGenre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2968);
  }
  return result;
}

unint64_t sub_7F488()
{
  unint64_t result;

  result = qword_1F2970;
  if (!qword_1F2970)
  {
    result = swift_getWitnessTable(&unk_191350, &type metadata for ScoredGenre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2970);
  }
  return result;
}

unint64_t sub_7F4D0()
{
  unint64_t result;

  result = qword_1F2978;
  if (!qword_1F2978)
  {
    result = swift_getWitnessTable(&unk_191378, &type metadata for ScoredGenre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2978);
  }
  return result;
}

unint64_t sub_7F518()
{
  unint64_t result;

  result = qword_1F2980;
  if (!qword_1F2980)
  {
    result = swift_getWitnessTable(&unk_191298, &type metadata for Genre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2980);
  }
  return result;
}

unint64_t sub_7F560()
{
  unint64_t result;

  result = qword_1F2988;
  if (!qword_1F2988)
  {
    result = swift_getWitnessTable(&unk_1912C0, &type metadata for Genre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2988);
  }
  return result;
}

unint64_t sub_7F5A8()
{
  unint64_t result;

  result = qword_1F2990;
  if (!qword_1F2990)
  {
    result = swift_getWitnessTable(&unk_1911E0, &type metadata for Genre.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2990);
  }
  return result;
}

unint64_t sub_7F5F0()
{
  unint64_t result;

  result = qword_1F2998;
  if (!qword_1F2998)
  {
    result = swift_getWitnessTable(&unk_191208, &type metadata for Genre.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2998);
  }
  return result;
}

uint64_t sub_7F634(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x444965726F7473 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444965726F7473, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x707954616964656DLL && a2 == 0xE900000000000065)
  {
    v7 = 0xE900000000000065;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707954616964656DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x73656372756F73 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73656372756F73, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6C616E6F69746172 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E6F69746172, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_7F804(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x65726E6567 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726E6567, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65726F6373 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65726F6373, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_7F8E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[40];
  _OWORD v25[2];
  _OWORD v26[2];
  uint64_t v27;
  _OWORD v28[2];
  _OWORD v29[2];
  uint64_t v30;
  _QWORD *v31;

  v20 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v21 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  v31 = _swiftEmptyArrayStorage;
  if (v4)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v9 = v6 + 1;
    if (!__OFADD__(v6, 1))
    {
      if (v9 < v21)
      {
        v10 = *(_QWORD *)(v20 + 8 * v9);
        ++v6;
        if (v10)
          goto LABEL_23;
        v6 = v9 + 1;
        if (v9 + 1 >= v21)
          goto LABEL_32;
        v10 = *(_QWORD *)(v20 + 8 * v6);
        if (v10)
          goto LABEL_23;
        v6 = v9 + 2;
        if (v9 + 2 >= v21)
          goto LABEL_32;
        v10 = *(_QWORD *)(v20 + 8 * v6);
        if (v10)
          goto LABEL_23;
        v6 = v9 + 3;
        if (v9 + 3 >= v21)
          goto LABEL_32;
        v10 = *(_QWORD *)(v20 + 8 * v6);
        if (v10)
        {
LABEL_23:
          v4 = (v10 - 1) & v10;
          for (i = __clz(__rbit64(v10)) + (v6 << 6); ; i = v7 | (v6 << 6))
          {
            sub_80BBC(*(_QWORD *)(a1 + 48) + 40 * i, (uint64_t)v28);
            sub_41910(*(_QWORD *)(a1 + 56) + 32 * i, (uint64_t)v29 + 8);
            v26[0] = v29[0];
            v26[1] = v29[1];
            v27 = v30;
            v25[0] = v28[0];
            v25[1] = v28[1];
            sub_80BBC((uint64_t)v25, (uint64_t)v24);
            if (!swift_dynamicCast(&v22, v24, &type metadata for AnyHashable, &type metadata for String, 6))goto LABEL_6;
            v12 = v22;
            v13 = v23;
            sub_41910((uint64_t)v26 + 8, (uint64_t)v24);
            if ((swift_dynamicCast(&v22, v24, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
              break;
            v18 = v23;
            v19 = v22;
            sub_80BF8((uint64_t)v25);
            result = swift_isUniquelyReferenced_nonNull_native(v31);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_2FB9C(0, v31[2] + 1, 1, v31);
              v31 = (_QWORD *)result;
            }
            v15 = v31[2];
            v14 = v31[3];
            if (v15 >= v14 >> 1)
            {
              result = (uint64_t)sub_2FB9C((_QWORD *)(v14 > 1), v15 + 1, 1, v31);
              v31 = (_QWORD *)result;
            }
            v16 = v31;
            v31[2] = v15 + 1;
            v17 = &v16[4 * v15];
            v17[4] = v12;
            v17[5] = v13;
            v17[6] = v19;
            v17[7] = v18;
            if (!v4)
              goto LABEL_8;
LABEL_7:
            v7 = __clz(__rbit64(v4));
            v4 &= v4 - 1;
          }
          swift_bridgeObjectRelease(v13);
LABEL_6:
          result = sub_80BF8((uint64_t)v25);
          if (!v4)
            continue;
          goto LABEL_7;
        }
        v11 = v9 + 4;
        if (v11 < v21)
        {
          v10 = *(_QWORD *)(v20 + 8 * v11);
          if (v10)
          {
            v6 = v11;
            goto LABEL_23;
          }
          while (1)
          {
            v6 = v11 + 1;
            if (__OFADD__(v11, 1))
              goto LABEL_34;
            if (v6 >= v21)
              break;
            v10 = *(_QWORD *)(v20 + 8 * v6);
            ++v11;
            if (v10)
              goto LABEL_23;
          }
        }
      }
LABEL_32:
      swift_release(a1);
      return (uint64_t)v31;
    }
    break;
  }
  __break(1u);
LABEL_34:
  __break(1u);
  return result;
}

unint64_t URLSessionTransport.Error.description.getter()
{
  id *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  uint64_t ObjectType;
  unint64_t v7;
  unint64_t v8;

  v1 = *v0;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7 = 0xD000000000000027;
  v8 = 0x80000000001A0C00;
  ObjectType = swift_getObjectType(v1);
  v2 = sub_5EDC(&qword_1F29A0);
  v3._countAndFlagsBits = String.init<A>(describing:)(&ObjectType, v2);
  object = v3._object;
  String.append(_:)(v3);

  swift_bridgeObjectRelease(object);
  return v7;
}

unint64_t URLSessionTransport.Error.errorDescription.getter()
{
  id *v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  uint64_t ObjectType;
  unint64_t v7;
  unint64_t v8;

  v1 = *v0;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7 = 0xD000000000000027;
  v8 = 0x80000000001A0C00;
  ObjectType = swift_getObjectType(v1);
  v2 = sub_5EDC(&qword_1F29A0);
  v3._countAndFlagsBits = String.init<A>(describing:)(&ObjectType, v2);
  object = v3._object;
  String.append(_:)(v3);

  swift_bridgeObjectRelease(object);
  return v7;
}

id URLSessionTransport.session.getter()
{
  id *v0;

  return *v0;
}

void URLSessionTransport.session.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t URLSessionTransport.makeCall(with:operationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v5 + 72) = a3;
  *(_QWORD *)(v5 + 80) = a4;
  *(_QWORD *)(v5 + 56) = a1;
  *(_QWORD *)(v5 + 64) = a2;
  v6 = type metadata accessor for URL(0);
  *(_QWORD *)(v5 + 88) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLRequest(0);
  *(_QWORD *)(v5 + 112) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 120) = v9;
  *(_QWORD *)(v5 + 128) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v5 + 136) = *v4;
  return swift_task_switch(sub_7FE30, 0, 0);
}

uint64_t sub_7FE30()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int *v37;
  int *v38;
  uint64_t (*v39)(_QWORD);

  v1 = *(void **)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = swift_allocObject(&unk_1E1058, 32, 7);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v7 = v4 - 1;
    sub_3DD40(v2 + 40 * (v4 - 1) + 32, v0 + 16);
    v8 = (_QWORD *)swift_allocObject(&unk_1E1080, 88, 7);
    sub_26DB8((__int128 *)(v0 + 16), (uint64_t)(v8 + 2));
    v8[7] = v6;
    v8[8] = v5;
    v8[9] = &unk_1F29B8;
    v8[10] = v3;
    if (v4 != 1)
    {
      v9 = *(_QWORD *)(v0 + 80);
      v10 = *(_QWORD *)(v2 + 16);
      swift_bridgeObjectRetain(v9);
      if (v4 - 2 >= v10)
      {
LABEL_7:
        __break(1u);
      }
      else
      {
        v11 = v2 + 40 * v4 - 48;
        while (1)
        {
          v12 = v8;
          v13 = *(_QWORD *)(v0 + 72);
          sub_3DD40(v11, v0 + 16);
          v8 = (_QWORD *)swift_allocObject(&unk_1E1080, 88, 7);
          sub_26DB8((__int128 *)(v0 + 16), (uint64_t)(v8 + 2));
          v8[7] = v13;
          v8[8] = v9;
          v8[9] = &unk_1F29C8;
          v8[10] = v12;
          if (!--v7)
            break;
          v9 = *(_QWORD *)(v0 + 80);
          v14 = *(_QWORD *)(v2 + 16);
          swift_bridgeObjectRetain(v9);
          v11 -= 40;
          if (v7 > v14)
            goto LABEL_7;
        }
      }
    }
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
    v1 = *(void **)(v0 + 136);
    v2 = *(_QWORD *)(v0 + 144);
    v38 = (int *)&unk_1F29C8;
    v3 = (uint64_t)v8;
  }
  else
  {
    v38 = (int *)&unk_1F29B8;
  }
  *(_QWORD *)(v0 + 152) = v3;
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 16))(v15, v16, *(_QWORD *)(v0 + 88));
  v17 = v1;
  swift_bridgeObjectRetain(v2);
  URLRequest.init(url:cachePolicy:timeoutInterval:)(v15, 0, 60.0);
  v18 = (int *)type metadata accessor for ClientCurrency.Request(0);
  v19 = (uint64_t *)(v16 + v18[5]);
  v20 = *v19;
  v21 = v19[1];
  swift_bridgeObjectRetain(v21);
  URLRequest.httpMethod.setter(v20, v21);
  v22 = *(_QWORD *)(v16 + v18[6]);
  v23 = *(_QWORD *)(v22 + 16);
  if (v23)
  {
    v37 = v18;
    swift_bridgeObjectRetain(v22);
    v24 = (void **)(v22 + 56);
    do
    {
      v25 = (uint64_t)*(v24 - 3);
      v26 = *(v24 - 2);
      v27 = (uint64_t)*(v24 - 1);
      v28 = *v24;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v28);
      v29._countAndFlagsBits = v27;
      v29._object = v28;
      v30._countAndFlagsBits = v25;
      v30._object = v26;
      URLRequest.addValue(_:forHTTPHeaderField:)(v29, v30);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v28);
      v24 += 4;
      --v23;
    }
    while (v23);
    swift_bridgeObjectRelease(v22);
    v18 = v37;
  }
  v31 = *(_QWORD *)(v0 + 64) + v18[7];
  v32 = *(_QWORD *)(v31 + 8);
  if (v32 >> 60 != 15)
  {
    v33 = *(_QWORD *)v31;
    sub_3E1D8(*(_QWORD *)v31, *(_QWORD *)(v31 + 8));
    URLRequest.httpBody.setter(v33, v32);
  }
  v34 = v38[1];
  v39 = (uint64_t (*)(_QWORD))((char *)v38 + *v38);
  v35 = (_QWORD *)swift_task_alloc(v34);
  *(_QWORD *)(v0 + 160) = v35;
  *v35 = v0;
  v35[1] = sub_80118;
  return v39(*(_QWORD *)(v0 + 128));
}

uint64_t sub_80118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 160);
  v5[21] = a1;
  v5[22] = a2;
  v5[23] = a3;
  v5[24] = v3;
  swift_task_dealloc(v6);
  if (v3)
    v7 = sub_80398;
  else
    v7 = sub_80188;
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_80188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  uint64_t (*v16)(void);
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = objc_opt_self(NSHTTPURLResponse);
  v3 = swift_dynamicCastObjCClass(v1, v2);
  v4 = *(_QWORD *)(v0 + 152);
  if (!v3)
  {
    v17 = *(_QWORD *)(v0 + 176);
    v18 = *(void **)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 168);
    v20 = sub_807A4();
    swift_allocError(&type metadata for URLSessionTransport.Error, v20, 0, 0);
    *v21 = v18;
    v22 = v18;
    swift_willThrow(v22);
    sub_3E21C(v19, v17);

    swift_release(v4);
    v23 = *(_QWORD *)(v0 + 128);
    v24 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v23, *(_QWORD *)(v0 + 112));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  v5 = (void *)v3;
  v6 = *(id *)(v0 + 184);
  v7 = objc_msgSend(v5, "allHeaderFields");
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v9 = sub_7F8E4(v8);
  swift_bridgeObjectRelease(v8);
  v10 = (unint64_t)objc_msgSend(v5, "statusCode");

  swift_release(v4);
  if ((v10 & 0x8000000000000000) == 0)
  {
    v12 = *(_QWORD *)(v0 + 168);
    v11 = *(_QWORD *)(v0 + 176);
    v13 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 104);
    v15 = *(unint64_t **)(v0 + 56);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v13, *(_QWORD *)(v0 + 112));
    *v15 = v10;
    v15[1] = v9;
    v15[2] = v12;
    v15[3] = v11;
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
}

uint64_t sub_80398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 152));
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v1, *(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_803F8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_80450;
  return NSURLSession.data(for:delegate:)(a1, 0);
}

uint64_t sub_80450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *v4;
  v10 = swift_task_dealloc(v8);
  if (!v3)
  {
    v10 = a1;
    v11 = a2;
    v12 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v10, v11, v12);
}

uint64_t sub_804BC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_804E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)swift_task_alloc(dword_1F29B4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_80C40;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to NSURLSession.data(for:delegate:)[1]);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_80450;
  return NSURLSession.data(for:delegate:)(a1, 0);
}

uint64_t sub_80568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[6] = a5;
  v6[7] = a6;
  v6[4] = a3;
  v6[5] = a4;
  v6[2] = a1;
  v6[3] = a2;
  return swift_task_switch(sub_80588, 0, 0);
}

uint64_t sub_80588()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[3];
  v2 = v1[3];
  v3 = v1[4];
  sub_49F4(v1, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[8] = v5;
  *v5 = v0;
  v5[1] = sub_80610;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))v7)(v0[2], v0[4], v0[5], v0[6], v0[7], v2, v3);
}

uint64_t sub_80610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *(_QWORD *)(*v4 + 64);
  v9 = *v4;
  v10 = swift_task_dealloc(v8);
  if (!v3)
  {
    v10 = a1;
    v11 = a2;
    v12 = a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v10, v11, v12);
}

uint64_t sub_8067C()
{
  _QWORD *v0;

  sub_62F8(v0 + 2);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_806B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = swift_task_alloc(dword_1F29C4);
  v7 = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_8073C;
  *(_QWORD *)(v6 + 56) = v5;
  *(_OWORD *)(v6 + 40) = v7;
  *(_QWORD *)(v6 + 24) = v1 + 16;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(sub_80588, 0, 0);
}

uint64_t sub_8073C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v8;

  v8 = *v3;
  swift_task_dealloc(*(_QWORD *)(*v3 + 16));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3);
}

unint64_t sub_807A4()
{
  unint64_t result;

  result = qword_1F29D0;
  if (!qword_1F29D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for URLSessionTransport.Error, &type metadata for URLSessionTransport.Error);
    atomic_store(result, (unint64_t *)&qword_1F29D0);
  }
  return result;
}

uint64_t sub_807EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v9;

  v9 = (_QWORD *)swift_task_alloc(dword_1F29AC);
  *(_QWORD *)(v4 + 16) = v9;
  *v9 = v4;
  v9[1] = sub_4814;
  return URLSessionTransport.makeCall(with:operationId:)(a1, a2, a3, a4);
}

_QWORD *initializeBufferWithCopyOfBuffer for URLSessionTransport(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t destroy for URLSessionTransport(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for URLSessionTransport(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for URLSessionTransport(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLSessionTransport(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for URLSessionTransport(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for URLSessionTransport()
{
  return &type metadata for URLSessionTransport;
}

void **initializeBufferWithCopyOfBuffer for URLSessionTransport.Error(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for URLSessionTransport.Error(id *a1)
{

}

void **assignWithCopy for URLSessionTransport.Error(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

void **assignWithTake for URLSessionTransport.Error(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for URLSessionTransport.Error(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for URLSessionTransport.Error(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for URLSessionTransport.Error()
{
  return &type metadata for URLSessionTransport.Error;
}

uint64_t dispatch thunk of URLSessionTransportMiddleware.interceptCall(with:operationId:next:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int *v15;
  _QWORD *v16;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = *(int **)(a7 + 8);
  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v15 + *v15);
  v16 = (_QWORD *)swift_task_alloc(v15[1]);
  *(_QWORD *)(v7 + 16) = v16;
  *v16 = v7;
  v16[1] = sub_80C40;
  return v18(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_80BBC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_80BF8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F29E8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_80C44()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000013;
  if (*v0 != 1)
    v1 = 0x74754F65726F6373;
  if (*v0)
    return v1;
  else
    return 0x74754F65726E6567;
}

uint64_t sub_80CAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_81448(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_80CD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_80E88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_80CF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_80E88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TabiConfiguration.GenreRecommendationConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;

  v3 = sub_5EDC(&qword_1F29F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = v1[1];
  v9 = v1[2];
  v21 = v1[3];
  v22 = v9;
  v10 = v1[4];
  v19 = v1[5];
  v20 = v10;
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_80E88();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s32GenreRecommendationConfigurationV10CodingKeysON, &_s32GenreRecommendationConfigurationV10CodingKeysON, v13, v11, v12);
  v26 = 0;
  v14 = v23;
  KeyedEncodingContainer.encode(_:forKey:)(v7, v8, &v26, v3);
  if (!v14)
  {
    v16 = v19;
    v15 = v20;
    v25 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v21, &v25, v3);
    v24 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v24, v3);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_80E88()
{
  unint64_t result;

  result = qword_1F29F8;
  if (!qword_1F29F8)
  {
    result = swift_getWitnessTable(&unk_191754, &_s32GenreRecommendationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F29F8);
  }
  return result;
}

uint64_t TabiConfiguration.GenreRecommendationConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  char v30;

  v5 = sub_5EDC(&qword_1F2A00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_80E88();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s32GenreRecommendationConfigurationV10CodingKeysON, &_s32GenreRecommendationConfigurationV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v30 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  v14 = v13;
  v27 = v12;
  v29 = 1;
  swift_bridgeObjectRetain(v13);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  v17 = v16;
  v25 = v15;
  v28 = 2;
  swift_bridgeObjectRetain(v16);
  v26 = v17;
  v18 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v20 = v19;
  v21 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v14);
  v22 = v26;
  *a2 = v27;
  a2[1] = v14;
  a2[2] = v25;
  a2[3] = v22;
  a2[4] = v21;
  a2[5] = v20;
  sub_62F8(a1);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v22);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_81108@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TabiConfiguration.GenreRecommendationConfiguration.init(from:)(a1, a2);
}

uint64_t sub_8111C(_QWORD *a1)
{
  return TabiConfiguration.GenreRecommendationConfiguration.encode(to:)(a1);
}

uint64_t _s32GenreRecommendationConfigurationVwxx(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *_s32GenreRecommendationConfigurationVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *_s32GenreRecommendationConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *_s32GenreRecommendationConfigurationVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

ValueMetadata *type metadata accessor for TabiConfiguration.GenreRecommendationConfiguration()
{
  return &type metadata for TabiConfiguration.GenreRecommendationConfiguration;
}

uint64_t _s32GenreRecommendationConfigurationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_812F0 + 4 * byte_191615[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_81324 + 4 * byte_191610[v4]))();
}

uint64_t sub_81324(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8132C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x81334);
  return result;
}

uint64_t sub_81340(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x81348);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_8134C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_81354(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s32GenreRecommendationConfigurationV10CodingKeysOMa()
{
  return &_s32GenreRecommendationConfigurationV10CodingKeysON;
}

unint64_t sub_81374()
{
  unint64_t result;

  result = qword_1F2A08;
  if (!qword_1F2A08)
  {
    result = swift_getWitnessTable(&unk_19172C, &_s32GenreRecommendationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2A08);
  }
  return result;
}

unint64_t sub_813BC()
{
  unint64_t result;

  result = qword_1F2A10;
  if (!qword_1F2A10)
  {
    result = swift_getWitnessTable(&unk_19169C, &_s32GenreRecommendationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2A10);
  }
  return result;
}

unint64_t sub_81404()
{
  unint64_t result;

  result = qword_1F2A18;
  if (!qword_1F2A18)
  {
    result = swift_getWitnessTable(&unk_1916C4, &_s32GenreRecommendationConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F2A18);
  }
  return result;
}

uint64_t sub_81448(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x74754F65726E6567 && a2 == 0xEF656D614E747570)
  {
    v5 = 0xEF656D614E747570;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74754F65726E6567, 0xEF656D614E747570, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013)
  {
    v7 = 0x80000000001A0C30;
    if (a2 == 0x80000000001A0C30)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000001A0C30, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x74754F65726F6373 && a2 == 0xEF656D614E747570)
  {
    swift_bridgeObjectRelease(0xEF656D614E747570);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74754F65726F6373, 0xEF656D614E747570, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_815D4(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_340F4(0, v1, 0);
    v3 = (_QWORD *)(a1 + 40);
    do
    {
      v5 = *(v3 - 1);
      v4 = *v3;
      v7 = _swiftEmptyArrayStorage[2];
      v6 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(*v3);
      if (v7 >= v6 >> 1)
        sub_340F4(v6 > 1, v7 + 1, 1);
      v3 += 9;
      _swiftEmptyArrayStorage[2] = v7 + 1;
      v8 = &_swiftEmptyArrayStorage[2 * v7];
      v8[4] = v5;
      v8[5] = v4;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_816A8(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  int *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_34200(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (int *)(a1 + 48);
    do
    {
      v5 = *v4;
      v8 = result;
      v7 = result[2];
      v6 = result[3];
      if (v7 >= v6 >> 1)
      {
        sub_34200(v6 > 1, v7 + 1, 1);
        result = v8;
      }
      result[2] = v7 + 1;
      *((_DWORD *)result + v7 + 8) = v5;
      v4 += 18;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_81768(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  int *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_34200(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (int *)(a1 + 56);
    do
    {
      v5 = *v4;
      v8 = result;
      v7 = result[2];
      v6 = result[3];
      if (v7 >= v6 >> 1)
      {
        sub_34200(v6 > 1, v7 + 1, 1);
        result = v8;
      }
      result[2] = v7 + 1;
      *((_DWORD *)result + v7 + 8) = v5;
      v4 += 18;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_81828(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  int *v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_34200(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (int *)(a1 + 60);
    do
    {
      v5 = *v4;
      v8 = result;
      v7 = result[2];
      v6 = result[3];
      if (v7 >= v6 >> 1)
      {
        sub_34200(v6 > 1, v7 + 1, 1);
        result = v8;
      }
      result[2] = v7 + 1;
      *((_DWORD *)result + v7 + 8) = v5;
      v4 += 18;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_818E8(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  int *v4;
  int v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_341E4(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (int *)(a1 + 52);
    do
    {
      v6 = *v4;
      v4 += 18;
      v5 = v6;
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_341E4(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      *((_DWORD *)result + v8 + 8) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_819A4(uint64_t a1)
{
  int64_t v1;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  __int128 v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_3421C(0, v1, 0);
    v3 = (_OWORD *)(a1 + 88);
    do
    {
      v5 = *((_QWORD *)v3 - 3);
      v4 = *((_QWORD *)v3 - 2);
      v6 = *((_DWORD *)v3 - 2);
      v11 = *v3;
      v7 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(*((_QWORD *)&v11 + 1));
      if (v7 >= v8 >> 1)
        sub_3421C(v8 > 1, v7 + 1, 1);
      _swiftEmptyArrayStorage[2] = v7 + 1;
      v9 = &_swiftEmptyArrayStorage[5 * v7];
      v9[4] = v5;
      v9[5] = v4;
      *((_DWORD *)v9 + 12) = v6;
      *(_OWORD *)(v9 + 7) = v11;
      v3 = (_OWORD *)((char *)v3 + 72);
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

Swift::Int sub_81AB8(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_6A52C(v2);
  v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  result = sub_81EF8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_81B24(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;

  if (result < 0)
    goto LABEL_31;
  v2 = a2;
  v3 = result;
  if (!result)
    return v2;
  v4 = *(_QWORD *)(a2 + 16);
  if (!v4)
  {
    v8 = _swiftEmptyArrayStorage;
    v9 = _swiftEmptyArrayStorage;
LABEL_26:
    swift_bridgeObjectRelease();
    swift_release(v8);
    return (uint64_t)v9;
  }
  v5 = 0;
  v6 = 0;
  v7 = (int *)(a2 + 48);
  v34 = v4 - 1;
  v8 = _swiftEmptyArrayStorage;
  v9 = _swiftEmptyArrayStorage;
  v35 = result;
  do
  {
    result = *((_QWORD *)v7 - 1);
    v10 = *v7;
    v11 = *((_QWORD *)v7 + 1);
    v12 = *((_QWORD *)v7 + 3);
    v38 = v7[1];
    v39 = v7[8];
    v13 = v8[2];
    v40 = *((_QWORD *)v7 + 2);
    v41 = v6;
    v42 = *(_OWORD *)(v7 + 10);
    v37 = *((_QWORD *)v7 - 2);
    if (v13 < v3)
    {
      v14 = *((_QWORD *)v7 - 1);
      swift_bridgeObjectRetain(result);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v42);
      swift_bridgeObjectRetain(*((_QWORD *)&v42 + 1));
      result = swift_isUniquelyReferenced_nonNull_native(v8);
      if ((result & 1) == 0)
        result = sub_343FC(0, v13 + 1, 1);
      v16 = v8[2];
      v15 = v8[3];
      if (v16 >= v15 >> 1)
        result = sub_343FC(v15 > 1, v16 + 1, 1);
      v8[2] = v16 + 1;
      v17 = &v8[9 * v16];
      v17[4] = v37;
      v17[5] = v14;
      *((_DWORD *)v17 + 12) = v10;
      *((_DWORD *)v17 + 13) = v38;
      v17[7] = v11;
      v6 = v41;
      v17[8] = v40;
      v17[9] = v12;
      *((_DWORD *)v17 + 20) = v39;
      *(_OWORD *)(v17 + 11) = v42;
      v3 = v35;
LABEL_6:
      if (v34 == v5)
        goto LABEL_26;
      goto LABEL_7;
    }
    if (v6 >= v13)
      goto LABEL_29;
    v18 = &v8[9 * v6];
    v19 = v18[4];
    v20 = v18[5];
    v21 = *((_DWORD *)v18 + 12);
    v33 = *((_DWORD *)v18 + 13);
    v22 = v18[7];
    v23 = v18[9];
    v32 = v18[8];
    v31 = *((_DWORD *)v18 + 20);
    v36 = *(_OWORD *)(v18 + 11);
    v30 = *((_QWORD *)v7 - 1);
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(*((_QWORD *)&v42 + 1));
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(*((_QWORD *)&v36 + 1));
    v24 = v9;
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
    {
      sub_343FC(0, v9[2] + 1, 1);
      v24 = v9;
    }
    v26 = v24[2];
    v25 = v24[3];
    if (v26 >= v25 >> 1)
    {
      sub_343FC(v25 > 1, v26 + 1, 1);
      v24 = v9;
    }
    v24[2] = v26 + 1;
    v27 = &v24[9 * v26];
    v27[4] = v19;
    v27[5] = v20;
    *((_DWORD *)v27 + 12) = v21;
    *((_DWORD *)v27 + 13) = v33;
    v27[7] = v22;
    v27[8] = v32;
    v27[9] = v23;
    *((_DWORD *)v27 + 20) = v31;
    *(_OWORD *)(v27 + 11) = v36;
    result = swift_isUniquelyReferenced_nonNull_native(v8);
    if ((result & 1) == 0)
    {
      result = sub_D0AB8((uint64_t)v8);
      v8 = (_QWORD *)result;
    }
    if (v41 >= v8[2])
      goto LABEL_30;
    v28 = &v8[9 * v41];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v35;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v28[4] = v37;
    v28[5] = v30;
    *((_DWORD *)v28 + 12) = v10;
    *((_DWORD *)v28 + 13) = v38;
    v28[7] = v11;
    v28[8] = v40;
    v28[9] = v12;
    *((_DWORD *)v28 + 20) = v39;
    *(_OWORD *)(v28 + 11) = v42;
    if ((uint64_t)(v41 + 1) < v35)
    {
      v6 = v41 + 1;
      v2 = a2;
      v9 = v24;
      goto LABEL_6;
    }
    v2 = a2;
    v9 = v24;
    if (v34 == v5)
      goto LABEL_26;
    v6 = 0;
LABEL_7:
    ++v5;
    v7 += 18;
  }
  while (v5 < *(_QWORD *)(v2 + 16));
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

Swift::Int sub_81EF8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  float v13;
  float v14;
  float *v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  Swift::Int v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  char v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  float v78;
  Swift::Int v79;
  uint64_t v80;
  _OWORD *v81;
  _OWORD *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t i;
  float v98;
  uint64_t v99;
  uint64_t v100;
  _OWORD *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char *v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  Swift::Int v121;
  _QWORD *v122;
  _QWORD *v123;
  Swift::Int v124;
  Swift::Int v125;
  __int128 v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  float *v131;
  char *v132;
  uint64_t v133;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_139;
    if ((unint64_t)v3 >= 2)
    {
      v94 = *v2;
      v95 = *v2 + 128;
      v96 = -1;
      for (i = 1; i != v3; ++i)
      {
        v98 = *(float *)(v94 + 72 * i + 28);
        v99 = v96;
        v100 = v95;
        do
        {
          if (*(float *)(v100 - 100) >= v98)
            break;
          if (!v94)
            goto LABEL_143;
          v101 = (_OWORD *)(v100 - 56);
          v102 = *(_QWORD *)(v100 - 56);
          v103 = *(_QWORD *)(v100 - 48);
          v104 = *(_DWORD *)(v100 - 40);
          result = *(unsigned int *)(v100 - 36);
          v105 = *(_DWORD *)(v100 - 32);
          v106 = *(_QWORD *)(v100 - 24);
          v107 = *(_QWORD *)(v100 - 16);
          v108 = *(_DWORD *)(v100 - 8);
          v109 = *(_OWORD *)v100;
          v110 = *(_OWORD *)(v100 - 80);
          v101[2] = *(_OWORD *)(v100 - 96);
          v101[3] = v110;
          *(_QWORD *)(v100 + 8) = *(_QWORD *)(v100 - 64);
          v111 = *(_OWORD *)(v100 - 112);
          *v101 = *(_OWORD *)(v100 - 128);
          v101[1] = v111;
          *(_OWORD *)(v100 - 72) = v109;
          v100 -= 72;
          *(_QWORD *)(v100 - 56) = v102;
          *(_QWORD *)(v100 - 48) = v103;
          *(_DWORD *)(v100 - 40) = v104;
          *(_DWORD *)(v100 - 36) = result;
          *(_DWORD *)(v100 - 32) = v105;
          *(float *)(v100 - 28) = v98;
          *(_QWORD *)(v100 - 24) = v106;
          *(_QWORD *)(v100 - 16) = v107;
          *(_DWORD *)(v100 - 8) = v108;
        }
        while (!__CFADD__(v99++, 1));
        v95 += 72;
        --v96;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_148;
  v124 = result;
  v133 = v1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    v131 = (float *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v11 = _swiftEmptyArrayStorage[2];
      v113 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      v123 = v8;
      if (v11 >= 2)
      {
        v114 = *v2;
        do
        {
          v115 = v11 - 2;
          if (v11 < 2)
            goto LABEL_134;
          if (!v114)
            goto LABEL_147;
          v116 = v113;
          v117 = *(_QWORD *)&v113[16 * v115 + 32];
          v118 = *(_QWORD *)&v113[16 * v11 + 24];
          sub_826E4((float *)(v114 + 72 * v117), (float *)(v114 + 72 * *(_QWORD *)&v113[16 * v11 + 16]), v114 + 72 * v118, v131);
          if (v133)
            break;
          if (v118 < v117)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v116) & 1) == 0)
            v116 = sub_4ECA8((uint64_t)v116);
          if (v115 >= *((_QWORD *)v116 + 2))
            goto LABEL_136;
          v119 = &v116[16 * v115 + 32];
          *(_QWORD *)v119 = v117;
          *((_QWORD *)v119 + 1) = v118;
          v120 = *((_QWORD *)v116 + 2);
          if (v11 > v120)
            goto LABEL_137;
          memmove(&v116[16 * v11 + 16], &v116[16 * v11 + 32], 16 * (v120 - v11));
          v113 = v116;
          *((_QWORD *)v116 + 2) = v120 - 1;
          v11 = v120 - 1;
        }
        while (v120 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      v123[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v123 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for EventFeatures);
    *(_QWORD *)(v7 + 16) = v6;
    v123 = (_QWORD *)v7;
    v131 = (float *)(v7 + 32);
  }
  v9 = 0;
  v122 = v2;
  v10 = *v2;
  v132 = (char *)_swiftEmptyArrayStorage;
  v125 = v3;
  while (1)
  {
    v12 = v9++;
    if (v9 < v3)
    {
      v13 = *(float *)(v10 + 72 * v9 + 28);
      v14 = *(float *)(v10 + 72 * v12 + 28);
      v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        v15 = (float *)(v10 + 172 + 72 * v12);
        v16 = v13;
        while (1)
        {
          v17 = v16;
          v16 = *v15;
          if (v14 < v13 == v17 >= *v15)
            break;
          ++v9;
          v15 += 18;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v13)
      {
        if (v9 < v12)
          goto LABEL_140;
        if (v12 < v9)
        {
          v18 = 72 * v9;
          v19 = 72 * v12;
          v20 = v9;
          v121 = v12;
          do
          {
            if (v12 != --v20)
            {
              if (!v10)
                goto LABEL_146;
              v21 = v10 + v18;
              v22 = *(_QWORD *)(v10 + v19);
              v23 = *(_QWORD *)(v10 + v19 + 8);
              v24 = *(_DWORD *)(v10 + v19 + 16);
              v129 = *(_QWORD *)(v10 + v19 + 40);
              v130 = *(_QWORD *)(v10 + v19 + 32);
              v127 = *(_DWORD *)(v10 + v19 + 20);
              v128 = *(_DWORD *)(v10 + v19 + 48);
              v25 = *(_QWORD *)(v10 + v19 + 24);
              v126 = *(_OWORD *)(v10 + v19 + 56);
              memmove((void *)(v10 + v19), (const void *)(v10 + v18 - 72), 0x48uLL);
              *(_QWORD *)(v21 - 72) = v22;
              *(_QWORD *)(v21 - 64) = v23;
              *(_DWORD *)(v21 - 56) = v24;
              *(_DWORD *)(v21 - 52) = v127;
              *(_QWORD *)(v21 - 48) = v25;
              *(_QWORD *)(v21 - 40) = v130;
              *(_QWORD *)(v21 - 32) = v129;
              *(_DWORD *)(v21 - 24) = v128;
              *(_OWORD *)(v21 - 16) = v126;
            }
            ++v12;
            v18 -= 72;
            v19 += 72;
          }
          while (v12 < v20);
          v3 = v125;
          v12 = v121;
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_39;
    if (__OFSUB__(v9, v12))
      goto LABEL_138;
    if (v9 - v12 >= v124)
      goto LABEL_39;
    v26 = v12 + v124;
    if (__OFADD__(v12, v124))
      goto LABEL_141;
    if (v26 >= v3)
      v26 = v3;
    if (v26 < v12)
      break;
    if (v9 != v26)
    {
      v77 = v10 + 56 + 72 * v9;
      v27 = v132;
      do
      {
        v78 = *(float *)(v10 + 72 * v9 + 28);
        v79 = v12;
        v80 = v77;
        do
        {
          if (*(float *)(v80 - 100) >= v78)
            break;
          if (!v10)
            goto LABEL_144;
          v81 = (_OWORD *)(v80 - 56);
          v82 = (_OWORD *)(v80 - 128);
          v83 = *(_QWORD *)(v80 - 56);
          v84 = *(_QWORD *)(v80 - 48);
          v85 = *(_DWORD *)(v80 - 40);
          v86 = *(_DWORD *)(v80 - 36);
          v87 = *(_DWORD *)(v80 - 32);
          v88 = *(_QWORD *)(v80 - 24);
          v89 = *(_QWORD *)(v80 - 16);
          v90 = *(_DWORD *)(v80 - 8);
          v91 = *(_OWORD *)v80;
          v92 = *(_OWORD *)(v80 - 80);
          v81[2] = *(_OWORD *)(v80 - 96);
          v81[3] = v92;
          *(_QWORD *)(v80 + 8) = *(_QWORD *)(v80 - 64);
          *(_OWORD *)(v80 - 72) = v91;
          v80 -= 72;
          v93 = v82[1];
          *v81 = *v82;
          v81[1] = v93;
          *(_QWORD *)(v80 - 56) = v83;
          *(_QWORD *)(v80 - 48) = v84;
          *(_DWORD *)(v80 - 40) = v85;
          *(_DWORD *)(v80 - 36) = v86;
          *(_DWORD *)(v80 - 32) = v87;
          *(float *)(v80 - 28) = v78;
          *(_QWORD *)(v80 - 24) = v88;
          *(_QWORD *)(v80 - 16) = v89;
          ++v79;
          *(_DWORD *)(v80 - 8) = v90;
        }
        while (v9 != v79);
        ++v9;
        v77 += 72;
      }
      while (v9 != v26);
      v9 = v26;
      if (v26 < v12)
        goto LABEL_133;
      goto LABEL_40;
    }
LABEL_39:
    v27 = v132;
    if (v9 < v12)
      goto LABEL_133;
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
      v27 = sub_4E4E4(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
    v29 = *((_QWORD *)v27 + 2);
    v28 = *((_QWORD *)v27 + 3);
    v11 = v29 + 1;
    if (v29 >= v28 >> 1)
      v27 = sub_4E4E4((char *)(v28 > 1), v29 + 1, 1, v27);
    *((_QWORD *)v27 + 2) = v11;
    v30 = v27 + 32;
    v31 = &v27[16 * v29 + 32];
    *(_QWORD *)v31 = v12;
    *((_QWORD *)v31 + 1) = v9;
    v132 = v27;
    if (v29)
    {
      while (1)
      {
        v32 = v11 - 1;
        if (v11 >= 4)
        {
          v37 = &v30[16 * v11];
          v38 = *((_QWORD *)v37 - 8);
          v39 = *((_QWORD *)v37 - 7);
          v43 = __OFSUB__(v39, v38);
          v40 = v39 - v38;
          if (v43)
            goto LABEL_122;
          v42 = *((_QWORD *)v37 - 6);
          v41 = *((_QWORD *)v37 - 5);
          v43 = __OFSUB__(v41, v42);
          v35 = v41 - v42;
          v36 = v43;
          if (v43)
            goto LABEL_123;
          v44 = v11 - 2;
          v45 = &v30[16 * v11 - 32];
          v47 = *(_QWORD *)v45;
          v46 = *((_QWORD *)v45 + 1);
          v43 = __OFSUB__(v46, v47);
          v48 = v46 - v47;
          if (v43)
            goto LABEL_125;
          v43 = __OFADD__(v35, v48);
          v49 = v35 + v48;
          if (v43)
            goto LABEL_128;
          if (v49 >= v40)
          {
            v67 = &v30[16 * v32];
            v69 = *(_QWORD *)v67;
            v68 = *((_QWORD *)v67 + 1);
            v43 = __OFSUB__(v68, v69);
            v70 = v68 - v69;
            if (v43)
              goto LABEL_132;
            v60 = v35 < v70;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v61 = *((_QWORD *)v27 + 4);
            v62 = *((_QWORD *)v27 + 5);
            v43 = __OFSUB__(v62, v61);
            v54 = v62 - v61;
            v55 = v43;
            goto LABEL_70;
          }
          v34 = *((_QWORD *)v27 + 4);
          v33 = *((_QWORD *)v27 + 5);
          v43 = __OFSUB__(v33, v34);
          v35 = v33 - v34;
          v36 = v43;
        }
        if ((v36 & 1) != 0)
          goto LABEL_124;
        v44 = v11 - 2;
        v50 = &v30[16 * v11 - 32];
        v52 = *(_QWORD *)v50;
        v51 = *((_QWORD *)v50 + 1);
        v53 = __OFSUB__(v51, v52);
        v54 = v51 - v52;
        v55 = v53;
        if (v53)
          goto LABEL_127;
        v56 = &v30[16 * v32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v43 = __OFSUB__(v57, v58);
        v59 = v57 - v58;
        if (v43)
          goto LABEL_130;
        if (__OFADD__(v54, v59))
          goto LABEL_131;
        if (v54 + v59 >= v35)
        {
          v60 = v35 < v59;
LABEL_76:
          if (v60)
            v32 = v44;
          goto LABEL_78;
        }
LABEL_70:
        if ((v55 & 1) != 0)
          goto LABEL_126;
        v63 = &v30[16 * v32];
        v65 = *(_QWORD *)v63;
        v64 = *((_QWORD *)v63 + 1);
        v43 = __OFSUB__(v64, v65);
        v66 = v64 - v65;
        if (v43)
          goto LABEL_129;
        if (v66 < v54)
          goto LABEL_15;
LABEL_78:
        v71 = v32 - 1;
        if (v32 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10)
          goto LABEL_145;
        v72 = &v30[16 * v71];
        v73 = *(_QWORD *)v72;
        v74 = &v30[16 * v32];
        v75 = *((_QWORD *)v74 + 1);
        sub_826E4((float *)(v10 + 72 * *(_QWORD *)v72), (float *)(v10 + 72 * *(_QWORD *)v74), v10 + 72 * v75, v131);
        if (v133)
          goto LABEL_95;
        if (v75 < v73)
          goto LABEL_119;
        if (v32 > *((_QWORD *)v132 + 2))
          goto LABEL_120;
        *(_QWORD *)v72 = v73;
        *(_QWORD *)&v30[16 * v71 + 8] = v75;
        v76 = *((_QWORD *)v132 + 2);
        if (v32 >= v76)
          goto LABEL_121;
        v27 = v132;
        v11 = v76 - 1;
        memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
        *((_QWORD *)v132 + 2) = v76 - 1;
        if (v76 <= 2)
          goto LABEL_15;
      }
    }
    v11 = 1;
LABEL_15:
    v3 = v125;
    if (v9 >= v125)
    {
      v8 = v123;
      v113 = v132;
      v2 = v122;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_826E4(float *__dst, float *__src, unint64_t a3, float *a4)
{
  float *v4;
  float *v6;
  float *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  uint64_t result;
  char *v21;
  float *v22;
  float *v23;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 72;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 72;
  v23 = __dst;
  v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -71)
    {
      if (a4 != __src || &__src[18 * v11] <= a4)
        memmove(a4, __src, 72 * v11);
      v16 = &v4[18 * v11];
      v21 = (char *)v16;
      v23 = v6;
      if (v7 < v6 && v10 >= 72)
      {
        v17 = (float *)(a3 - 72);
        do
        {
          v18 = v17 + 18;
          if (*(v6 - 11) >= *(v16 - 11))
          {
            v21 = (char *)(v16 - 18);
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              memmove(v17, v16 - 18, 0x48uLL);
            v19 = v6;
            v16 -= 18;
            if (v6 <= v7)
              break;
          }
          else
          {
            v19 = v6 - 18;
            if (v18 != v6 || v17 >= v6)
              memmove(v17, v6 - 18, 0x48uLL);
            v23 = v6 - 18;
            if (v19 <= v7)
              break;
          }
          v17 -= 18;
          v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_4E9CC((void **)&v23, (const void **)&v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -71)
  {
    if (a4 != __dst || &__dst[18 * v9] <= a4)
      memmove(a4, __dst, 72 * v9);
    v12 = &v4[18 * v9];
    v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 72)
    {
      v13 = v4;
      while (1)
      {
        if (v13[7] >= v6[7])
        {
          v4 = v13 + 18;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 18;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 18;
          }
        }
        else
        {
          v14 = v6 + 18;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        memmove(v7, v15, 0x48uLL);
LABEL_18:
        v7 += 18;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v22 = v4;
        v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_829A0(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = swift_stdlib_random(&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_829A0(v6, a2, a3);
  return result;
}

void sub_82A48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v2 = type metadata accessor for Event(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_6AB9C(a1, (uint64_t)v4);
  v5 = (char *)sub_82AD0 + 4 * byte_1917A4[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

BOOL sub_82AD0()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;

  swift_bridgeObjectRelease();
  v2 = v1 + *(int *)(sub_5EDC(&qword_1F1FA0) + 48);
  v3 = *v0;
  v4 = type metadata accessor for Date(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v2, v4);
  if (v3 <= 0.0)
    return 0;
  sub_829A0(v5, 0.0, 1.0);
  return v6 < v3;
}

_QWORD *sub_82D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  id v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  BOOL v46;
  unsigned __int8 *v47;
  int v48;
  _QWORD *v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int EnumCaseMultiPayload;
  uint64_t v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  char *v68;
  double v69;
  int v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t inited;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  int64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v86;
  uint64_t v87;
  _QWORD *result;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  float v138;
  float v139;
  float v140;
  float *v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  id v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  unint64_t v155;
  char v156;
  double v157;
  unsigned __int8 *v158;
  int v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  double v165;
  char v166;
  int v167;
  unint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  int64_t v176;
  uint64_t v177;
  int64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  _QWORD *v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  int v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  char v213;
  int v214;
  _QWORD *v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  char v229;
  uint64_t *v230;
  unint64_t v231;
  unint64_t v232;
  float v233;
  char *v234;
  void *v235;
  uint64_t v236;
  id v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  _QWORD *v241;
  _QWORD *v242;
  _QWORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  void (*v287)(char *, char *, uint64_t);
  _QWORD *v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD v304[2];
  int v305;
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  uint64_t v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  char *v325;
  uint64_t v326;
  uint64_t *v327;
  _QWORD *v328;
  uint64_t *v329;
  uint64_t v330;
  char *v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t v336;
  void (*v337)(char *, char *, uint64_t);
  _QWORD *v338;
  _QWORD *v339;
  __int128 v340;
  __int128 v341;
  void (*v342)(char *, uint64_t);
  uint64_t v343;
  _QWORD *v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  _QWORD v354[6];
  int v355;
  _QWORD *v356;
  _QWORD *v357;
  char v358[40];
  char v359[40];

  v330 = a3;
  v7 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Int32List(0);
  v315 = *(_QWORD *)(v7 - 8);
  v316 = v7;
  v8 = __chkstk_darwin(v7);
  v314 = (char *)v304 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v313 = (char *)v304 - v10;
  v326 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_FloatList(0);
  v312 = *(_QWORD *)(v326 - 8);
  v11 = __chkstk_darwin(v326);
  v325 = (char *)v304 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v317 = (char *)v304 - v13;
  v14 = (_QWORD *)type metadata accessor for Date(0);
  v15 = (uint64_t *)*(v14 - 1);
  v16 = __chkstk_darwin(v14);
  v319 = (char *)v304 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v331 = (char *)v304 - v19;
  __chkstk_darwin(v18);
  v311 = (char *)v304 - v20;
  v310 = type metadata accessor for Event(0);
  v21 = *(_QWORD *)(v310 - 8);
  v22 = __chkstk_darwin(v310);
  v309 = (uint64_t)v304 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v321 = (uint64_t)v304 - v25;
  v26 = __chkstk_darwin(v24);
  v320 = (uint64_t)v304 - v27;
  __chkstk_darwin(v26);
  v334 = (uint64_t)v304 - v28;
  v333 = *a4;
  v29 = a4[2];
  v323 = a4[1];
  v324 = v29;
  v30 = *(_OWORD *)(a4 + 13);
  v31 = *(_OWORD *)(a4 + 17);
  v351 = *(_OWORD *)(a4 + 15);
  v352 = v31;
  v353 = *(_OWORD *)(a4 + 19);
  v32 = *(_OWORD *)(a4 + 5);
  v33 = *(_OWORD *)(a4 + 9);
  v347 = *(_OWORD *)(a4 + 7);
  v348 = v33;
  v349 = *(_OWORD *)(a4 + 11);
  v350 = v30;
  v345 = *(_OWORD *)(a4 + 3);
  v346 = v32;
  v344 = _swiftEmptyArrayStorage;
  if (qword_1F0120 != -1)
    goto LABEL_226;
  while (1)
  {
    v34 = (id)qword_1F61F8;
    v35 = static os_log_type_t.default.getter(v34);
    os_log(_:dso:log:type:_:)("Processing engagement events", 28, 2, &dword_0, v34, v35, _swiftEmptyArrayStorage);

    v36 = *(void (**)(char *, char *, uint64_t))(a1 + 16);
    v327 = v15;
    v328 = v14;
    v37 = v333;
    v337 = v36;
    v318 = a2;
    if (!v36)
      break;
    v336 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v335 = *(_QWORD *)(v21 + 72);
    v304[1] = a1;
    swift_bridgeObjectRetain(a1);
    v332 = 0;
    v38 = 0;
    v340 = xmmword_1875E0;
    v21 = v330;
    v39 = v334;
    while (1)
    {
      *(_QWORD *)&v341 = v38;
      sub_6AB9C(v336 + v335 * v38, v39);
      if (v344[2] >= v37)
      {
        sub_6ABE0(v39);
LABEL_105:
        swift_bridgeObjectRelease();
        v143 = v332;
        goto LABEL_106;
      }
      Event.assetID.getter();
      v42 = sub_B26A4(v40, v41);
      if ((v43 & 1) != 0)
        goto LABEL_5;
      if (*(_QWORD *)(v21 + 16))
      {
        v329 = (uint64_t *)v42;
        v44 = sub_39228(v42);
        if ((v45 & 1) != 0)
          break;
      }
      v39 = v334;
LABEL_5:
      sub_6ABE0(v39);
LABEL_6:
      v38 = v341 + 1;
      if ((void (*)(char *, char *, uint64_t))(v341 + 1) == v337)
        goto LABEL_105;
    }
    v46 = __OFADD__(v332++, 1);
    if (v46)
      goto LABEL_225;
    v47 = (unsigned __int8 *)(*(_QWORD *)(v21 + 56) + 72 * v44);
    v48 = *v47;
    a1 = *((_QWORD *)v47 + 1);
    v49 = (_QWORD *)*((_QWORD *)v47 + 2);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v49);
    v39 = v334;
    sub_82A48(v334);
    if ((v50 & 1) == 0)
    {
      sub_6ABE0(v39);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_102:
      v37 = v333;
      goto LABEL_6;
    }
    v339 = v49;
    v322 = a1;
    Event.eventType.getter();
    v307 = v52;
    v308 = v51;
    v53 = v39;
    v54 = v320;
    sub_6AB9C(v53, v320);
    v55 = v310;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v54, v310);
    if (EnumCaseMultiPayload == 4 || EnumCaseMultiPayload == 1)
    {
      v57 = v320;
      swift_bridgeObjectRelease();
      v58 = sub_5EDC(&qword_1F1F90);
      v59 = *(double *)(v57 + *(int *)(v58 + 80));
      ((void (*)(uint64_t, _QWORD *))v15[1])(v57 + *(int *)(v58 + 48), v14);
    }
    else
    {
      sub_6ABE0(v320);
      v59 = 0.0;
    }
    v60 = v321;
    sub_6AB9C(v334, v321);
    v61 = swift_getEnumCaseMultiPayload(v60, v55);
    if (v61 == 1 || v61 == 4)
    {
      v62 = v321;
      swift_bridgeObjectRelease();
      v63 = sub_5EDC(&qword_1F1F90);
      v64 = v62 + *(int *)(v63 + 48);
      LOBYTE(v62) = *(_BYTE *)(v62 + *(int *)(v63 + 64));
      ((void (*)(uint64_t, _QWORD *))v15[1])(v64, v14);
      if ((v62 & 1) != 0)
      {
        v306 = 1;
        goto LABEL_24;
      }
    }
    else
    {
      sub_6ABE0(v321);
    }
    v306 = 0;
LABEL_24:
    v65 = v309;
    sub_6AB9C(v334, v309);
    if (swift_getEnumCaseMultiPayload(v65, v55) == 10)
    {
      swift_bridgeObjectRelease();
      v66 = sub_5EDC(&qword_1F1F98);
      v67 = *(double *)(v65 + *(int *)(v66 + 64));
      ((void (*)(uint64_t, _QWORD *))v15[1])(v65 + *(int *)(v66 + 48), v14);
    }
    else
    {
      sub_6ABE0(v65);
      v67 = 0.0;
    }
    v68 = v311;
    Event.timestamp.getter();
    v69 = ((double (*)(void))Date.timeIntervalSince1970.getter)();
    ((void (*)(char *, _QWORD *))v15[1])(v68, v14);
    if (v48)
    {
      swift_bridgeObjectRelease();
      v70 = 1;
    }
    else
    {
      v71 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
      swift_bridgeObjectRelease();
      v70 = v71 & 1;
    }
    v305 = v70;
    v15 = &qword_1F1090;
    v72 = v322;
    v21 = *(_QWORD *)(v322 + 16);
    if (!v21)
    {
      v14 = _swiftEmptyArrayStorage;
LABEL_64:
      v92 = v14[2];
      v93 = Set.init(minimumCapacity:)(v92, &type metadata for UInt64, &protocol witness table for UInt64);
      v94 = v93;
      if (v92)
      {
        a2 = 0;
        a1 = (uint64_t)(v14 + 4);
        v95 = v93 + 56;
        while (1)
        {
          v96 = *(_QWORD *)(a1 + 8 * a2++);
          v97 = static Hasher._hash(seed:_:)(*(_QWORD *)(v94 + 40), v96);
          v98 = -1 << *(_BYTE *)(v94 + 32);
          v99 = v97 & ~v98;
          if (((*(_QWORD *)(v95 + ((v99 >> 3) & 0xFFFFFFFFFFFFF8)) >> v99) & 1) == 0)
            goto LABEL_73;
          v100 = *(_QWORD *)(v94 + 48);
          if (*(_QWORD *)(v100 + 8 * v99) == v96)
          {
LABEL_66:
            if (a2 == v92)
              break;
          }
          else
          {
            v101 = ~v98;
            while (1)
            {
              v99 = (v99 + 1) & v101;
              if (((*(_QWORD *)(v95 + ((v99 >> 3) & 0xFFFFFFFFFFFFF8)) >> v99) & 1) == 0)
                break;
              if (*(_QWORD *)(v100 + 8 * v99) == v96)
                goto LABEL_66;
            }
LABEL_73:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v94);
            v354[0] = v94;
            sub_1668AC(v96, v99, isUniquelyReferenced_nonNull_native);
            v94 = v354[0];
            swift_bridgeObjectRelease();
            if (a2 == v92)
              break;
            v95 = v94 + 56;
          }
        }
      }
      swift_bridgeObjectRelease();
      v15 = *(uint64_t **)(v94 + 16);
      if (v15)
      {
        v354[0] = _swiftEmptyArrayStorage;
        sub_340F4(0, (int64_t)v15, 0);
        v103 = (_QWORD *)v354[0];
        v21 = sub_EDD8C(v94);
        v105 = v104;
        v107 = v106 & 1;
        v338 = (_QWORD *)(v94 + 56);
        do
        {
          if (v21 < 0 || v21 >= 1 << *(_BYTE *)(v94 + 32))
            goto LABEL_206;
          if (((*(_QWORD *)((char *)v338 + (((unint64_t)v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
            goto LABEL_207;
          if (*(_DWORD *)(v94 + 36) != (_DWORD)v105)
            goto LABEL_208;
          LODWORD(v342) = v107;
          v343 = *(_QWORD *)(*(_QWORD *)(v94 + 48) + 8 * v21);
          v108 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          v110 = v109;
          v354[0] = v103;
          a1 = v94;
          v112 = v103[2];
          v111 = v103[3];
          v14 = (_QWORD *)(v112 + 1);
          if (v112 >= v111 >> 1)
          {
            sub_340F4(v111 > 1, v112 + 1, 1);
            v103 = (_QWORD *)v354[0];
          }
          v103[2] = v14;
          v113 = &v103[2 * v112];
          v113[4] = v108;
          v113[5] = v110;
          v114 = sub_EDE30(v21, v105, v342 & 1, a1);
          v21 = v114;
          v105 = v115;
          v107 = v116 & 1;
          v15 = (uint64_t *)((char *)v15 - 1);
          a2 = (uint64_t)v339;
          v94 = a1;
        }
        while (v15);
        sub_41814(v114, v115, v107);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v103 = _swiftEmptyArrayStorage;
        a2 = (uint64_t)v339;
      }
      v338 = v103;
      v15 = *(uint64_t **)(a2 + 16);
      if (v15)
      {
        v354[0] = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(a2);
        sub_340F4(0, (int64_t)v15, 0);
        v14 = (_QWORD *)v354[0];
        v117 = sub_EDD8C(a2);
        v21 = v118;
        v120 = v119 & 1;
        v339 = (_QWORD *)(a2 + 56);
        do
        {
          if (v117 < 0 || v117 >= 1 << *(_BYTE *)(a2 + 32))
            goto LABEL_211;
          if (((*(_QWORD *)((char *)v339 + (((unint64_t)v117 >> 3) & 0xFFFFFFFFFFFFF8)) >> v117) & 1) == 0)
            goto LABEL_212;
          if (*(_DWORD *)(a2 + 36) != (_DWORD)v21)
            goto LABEL_213;
          LODWORD(v342) = v120;
          v343 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v117);
          a1 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
          v122 = v121;
          v354[0] = v14;
          v124 = v14[2];
          v123 = v14[3];
          v125 = v14;
          if (v124 >= v123 >> 1)
          {
            sub_340F4(v123 > 1, v124 + 1, 1);
            v125 = (_QWORD *)v354[0];
          }
          v125[2] = v124 + 1;
          v126 = &v125[2 * v124];
          v126[4] = a1;
          v126[5] = v122;
          v127 = sub_EDE30(v117, v21, v342 & 1, a2);
          v117 = v127;
          v21 = v128;
          v120 = v129 & 1;
          v15 = (uint64_t *)((char *)v15 - 1);
          v14 = v125;
        }
        while (v15);
        sub_41814(v127, v128, v120);
        swift_bridgeObjectRelease_n(a2, 2);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 = _swiftEmptyArrayStorage;
      }
      v354[0] = v329;
      v130 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v132 = v131;
      v133 = sub_CFA8C(0, 0xE000000000000000, v323, v338);
      swift_bridgeObjectRelease();
      a1 = (uint64_t)sub_CFA8C(0, 0xE000000000000000, v324, v14);
      swift_bridgeObjectRelease();
      v134 = v344;
      v135 = swift_isUniquelyReferenced_nonNull_native(v344);
      v15 = v327;
      v14 = v328;
      if ((v135 & 1) == 0)
        v134 = sub_30694(0, v134[2] + 1, 1, v134);
      v137 = v134[2];
      v136 = v134[3];
      if (v137 >= v136 >> 1)
        v134 = sub_30694((_QWORD *)(v136 > 1), v137 + 1, 1, v134);
      v138 = v59;
      v134[2] = v137 + 1;
      v139 = v67;
      v140 = v69;
      v141 = (float *)&v134[9 * v137];
      v142 = v307;
      *((_QWORD *)v141 + 4) = v308;
      *((_QWORD *)v141 + 5) = v142;
      v141[12] = v138;
      *((_DWORD *)v141 + 13) = v306;
      v141[14] = v139;
      v141[15] = v140;
      *((_QWORD *)v141 + 8) = v130;
      *((_QWORD *)v141 + 9) = v132;
      *((_DWORD *)v141 + 20) = v305;
      *((_QWORD *)v141 + 11) = v133;
      *((_QWORD *)v141 + 12) = a1;
      v344 = v134;
      v39 = v334;
      sub_6ABE0(v334);
      a2 = v318;
      v21 = v330;
      goto LABEL_102;
    }
    swift_bridgeObjectRetain_n(v322, 2);
    a2 = v72 + 40;
    v14 = _swiftEmptyArrayStorage;
    while (1)
    {
      v74 = *(_QWORD *)(a2 - 8);
      v73 = *(_QWORD *)a2;
      v75 = sub_5EDC(&qword_1F1090);
      inited = swift_initStackObject(v75, v358);
      *(_OWORD *)(inited + 16) = v340;
      a1 = inited + 16;
      *(_QWORD *)(inited + 32) = v74;
      v77 = *(_QWORD *)(v73 + 16);
      swift_bridgeObjectRetain(v73);
      if (v77)
      {
        result = sub_2FA6C((int *)((char *)&dword_0 + 1), v77 + 1, 1, (_QWORD *)inited);
        if (!*(_QWORD *)(v73 + 16))
          goto LABEL_233;
        inited = (uint64_t)result;
        v89 = result[2];
        if ((result[3] >> 1) - v89 < v77)
          goto LABEL_228;
        v90 = &result[v89 + 4];
        if (v73 + 32 < (unint64_t)&v90[v77] && (unint64_t)v90 < v73 + 32 + 8 * v77)
          goto LABEL_232;
        a1 = inited + 16;
        memcpy(v90, (const void *)(v73 + 32), 8 * v77);
        if (__OFADD__(*(_QWORD *)(inited + 16), v77))
          goto LABEL_229;
        *(_QWORD *)a1 = *(_QWORD *)(inited + 16) + v77;
      }
      swift_bridgeObjectRelease();
      v78 = *(_QWORD *)(inited + 16);
      v79 = v14[2];
      v80 = v79 + v78;
      if (__OFADD__(v79, v78))
        break;
      v81 = swift_isUniquelyReferenced_nonNull_native(v14);
      if ((v81 & 1) != 0 && v80 <= v14[3] >> 1)
      {
        if (*(_QWORD *)a1)
          goto LABEL_44;
      }
      else
      {
        if (v79 <= v80)
          v82 = v79 + v78;
        else
          v82 = v79;
        v14 = sub_2FA6C((_QWORD *)v81, v82, 1, v14);
        if (*(_QWORD *)a1)
        {
LABEL_44:
          v83 = v14[2];
          if ((v14[3] >> 1) - v83 < v78)
            goto LABEL_220;
          v84 = &v14[v83 + 4];
          if (inited + 32 < (unint64_t)&v84[v78] && (unint64_t)v84 < inited + 32 + 8 * v78)
          {
LABEL_232:
            result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
            __break(1u);
LABEL_233:
            __break(1u);
LABEL_234:
            __break(1u);
            return result;
          }
          memcpy(v84, (const void *)(inited + 32), 8 * v78);
          if (v78)
          {
            v86 = v14[2];
            v46 = __OFADD__(v86, v78);
            v87 = v86 + v78;
            if (v46)
              goto LABEL_222;
            v14[2] = v87;
          }
          goto LABEL_33;
        }
      }
      if (v78)
        goto LABEL_205;
LABEL_33:
      swift_bridgeObjectRelease();
      a2 += 16;
      if (!--v21)
      {
        swift_bridgeObjectRelease_n(v322, 2);
        goto LABEL_64;
      }
    }
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
LABEL_219:
    __break(1u);
LABEL_220:
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    __break(1u);
LABEL_223:
    __break(1u);
LABEL_224:
    __break(1u);
LABEL_225:
    __break(1u);
LABEL_226:
    swift_once(&qword_1F0120, sub_12F8E0);
  }
  v143 = 0;
LABEL_106:
  v144 = (void *)qword_1F61F8;
  v15 = (uint64_t *)sub_5EDC(&qword_1F14C8);
  v145 = swift_allocObject(v15, 72, 7);
  v341 = xmmword_1875E0;
  *(_OWORD *)(v145 + 16) = xmmword_1875E0;
  *(_QWORD *)(v145 + 56) = &type metadata for Int;
  *(_QWORD *)(v145 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v145 + 32) = v143;
  v146 = v144;
  static os_log_type_t.default.getter(v146);
  os_log(_:dso:log:type:_:)("Processed %ld engagement events", v304[0]);

  swift_bridgeObjectRelease();
  v147 = (id)qword_1F61F8;
  v148 = static os_log_type_t.default.getter(v147);
  os_log(_:dso:log:type:_:)("Processing purchase history", 27, 2, &dword_0, v147, v148, _swiftEmptyArrayStorage);

  Date.init()(v149);
  a1 = *(_QWORD *)(a2 + 16);
  if (a1)
  {
    v150 = a2 + 32;
    swift_bridgeObjectRetain(a2);
    v21 = 0;
    v151 = 0;
    v152 = v330;
    v329 = v15;
    v322 = a1;
    v335 = a2 + 32;
    while (2)
    {
      v153 = v150 + 384 * (_QWORD)v151;
      if ((*(_BYTE *)(v153 + 184) & 1) == 0 && *(_QWORD *)(v152 + 16))
      {
        v154 = *(double *)(v153 + 176);
        v337 = *(void (**)(char *, char *, uint64_t))v153;
        v338 = v151;
        v155 = sub_39228((uint64_t)v337);
        if ((v156 & 1) != 0)
        {
          v46 = __OFADD__(v21++, 1);
          if (v46)
            goto LABEL_224;
          v157 = *(double *)&v347;
          if (*(double *)&v347 > 0.0)
          {
            v158 = (unsigned __int8 *)(*(_QWORD *)(v152 + 56) + 72 * v155);
            v159 = *v158;
            v160 = *((_QWORD *)v158 + 1);
            v161 = *((_QWORD *)v158 + 2);
            swift_bridgeObjectRetain(v160);
            swift_bridgeObjectRetain(v161);
            sub_829A0(v162, 0.0, 1.0);
            if (v163 >= v157)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              *(_QWORD *)&v340 = v161;
              v336 = v160;
              v164 = static Date.- infix(_:_:)(v331, v154);
              v165 = Date.timeIntervalSince1970.getter(v164);
              v334 = v21;
              if (v159)
              {
                swift_bridgeObjectRelease();
                goto LABEL_121;
              }
              v166 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
              swift_bridgeObjectRelease();
              v167 = 0;
              if ((v166 & 1) != 0)
LABEL_121:
                v167 = 1;
              LODWORD(v332) = v167;
              v168 = v336;
              v21 = *(_QWORD *)(v336 + 16);
              if (v21)
              {
                swift_bridgeObjectRetain_n(v336, 2);
                a1 = v168 + 40;
                v169 = _swiftEmptyArrayStorage;
                while (1)
                {
                  v171 = *(_QWORD *)(a1 - 8);
                  v170 = *(_QWORD *)a1;
                  v172 = sub_5EDC(&qword_1F1090);
                  v173 = swift_initStackObject(v172, v359);
                  *(_OWORD *)(v173 + 16) = v341;
                  v174 = (_QWORD *)(v173 + 16);
                  *(_QWORD *)(v173 + 32) = v171;
                  v175 = *(_QWORD *)(v170 + 16);
                  swift_bridgeObjectRetain(v170);
                  if (v175)
                  {
                    result = sub_2FA6C((int *)((char *)&dword_0 + 1), v175 + 1, 1, (_QWORD *)v173);
                    if (!*(_QWORD *)(v170 + 16))
                      goto LABEL_234;
                    v173 = (uint64_t)result;
                    v184 = result[2];
                    if ((result[3] >> 1) - v184 < v175)
                      goto LABEL_230;
                    v185 = &result[v184 + 4];
                    if (v170 + 32 < (unint64_t)&v185[v175] && (unint64_t)v185 < v170 + 32 + 8 * v175)
                      goto LABEL_232;
                    v174 = (_QWORD *)(v173 + 16);
                    memcpy(v185, (const void *)(v170 + 32), 8 * v175);
                    if (__OFADD__(*(_QWORD *)(v173 + 16), v175))
                      goto LABEL_231;
                    *v174 = *(_QWORD *)(v173 + 16) + v175;
                  }
                  swift_bridgeObjectRelease();
                  a2 = *(_QWORD *)(v173 + 16);
                  v176 = v169[2];
                  v14 = (_QWORD *)(v176 + a2);
                  if (__OFADD__(v176, a2))
                    goto LABEL_209;
                  v177 = swift_isUniquelyReferenced_nonNull_native(v169);
                  if ((v177 & 1) != 0 && (uint64_t)v14 <= v169[3] >> 1)
                  {
                    if (*v174)
                      goto LABEL_136;
                  }
                  else
                  {
                    if (v176 <= (uint64_t)v14)
                      v178 = v176 + a2;
                    else
                      v178 = v176;
                    v169 = sub_2FA6C((_QWORD *)v177, v178, 1, v169);
                    if (*v174)
                    {
LABEL_136:
                      v179 = v169[2];
                      if ((v169[3] >> 1) - v179 < a2)
                        goto LABEL_221;
                      v180 = &v169[v179 + 4];
                      if (v173 + 32 < (unint64_t)&v180[a2] && (unint64_t)v180 < v173 + 32 + 8 * a2)
                        goto LABEL_232;
                      memcpy(v180, (const void *)(v173 + 32), 8 * a2);
                      if (a2)
                      {
                        v182 = v169[2];
                        v46 = __OFADD__(v182, a2);
                        v183 = v182 + a2;
                        if (v46)
                          goto LABEL_223;
                        v169[2] = v183;
                      }
                      goto LABEL_125;
                    }
                  }
                  if (a2)
                    goto LABEL_210;
LABEL_125:
                  swift_bridgeObjectRelease();
                  a1 += 16;
                  if (!--v21)
                  {
                    swift_bridgeObjectRelease_n(v336, 2);
                    goto LABEL_156;
                  }
                }
              }
              v169 = _swiftEmptyArrayStorage;
LABEL_156:
              v187 = v169[2];
              v188 = Set.init(minimumCapacity:)(v187, &type metadata for UInt64, &protocol witness table for UInt64);
              v189 = v188;
              if (v187)
              {
                v21 = 0;
                v190 = v188 + 56;
                while (1)
                {
                  a2 = v169[v21++ + 4];
                  v191 = static Hasher._hash(seed:_:)(*(_QWORD *)(v189 + 40), a2);
                  v192 = -1 << *(_BYTE *)(v189 + 32);
                  v193 = v191 & ~v192;
                  if (((*(_QWORD *)(v190 + ((v193 >> 3) & 0xFFFFFFFFFFFFF8)) >> v193) & 1) == 0)
                    goto LABEL_165;
                  v194 = *(_QWORD *)(v189 + 48);
                  if (*(_QWORD *)(v194 + 8 * v193) == a2)
                  {
LABEL_158:
                    if (v21 == v187)
                      break;
                  }
                  else
                  {
                    v195 = ~v192;
                    while (1)
                    {
                      v193 = (v193 + 1) & v195;
                      if (((*(_QWORD *)(v190 + ((v193 >> 3) & 0xFFFFFFFFFFFFF8)) >> v193) & 1) == 0)
                        break;
                      if (*(_QWORD *)(v194 + 8 * v193) == a2)
                        goto LABEL_158;
                    }
LABEL_165:
                    v196 = swift_isUniquelyReferenced_nonNull_native(v189);
                    v354[0] = v189;
                    sub_1668AC(a2, v193, v196);
                    v189 = v354[0];
                    swift_bridgeObjectRelease();
                    if (v21 == v187)
                      break;
                    v190 = v189 + 56;
                  }
                }
              }
              swift_bridgeObjectRelease();
              v15 = *(uint64_t **)(v189 + 16);
              if (v15)
              {
                v354[0] = _swiftEmptyArrayStorage;
                sub_340F4(0, (int64_t)v15, 0);
                v197 = (_QWORD *)v354[0];
                a1 = sub_EDD8C(v189);
                v199 = v198;
                v201 = v200 & 1;
                v339 = (_QWORD *)(v189 + 56);
                do
                {
                  if (a1 < 0 || a1 >= 1 << *(_BYTE *)(v189 + 32))
                    goto LABEL_214;
                  if (((*(_QWORD *)((char *)v339 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) == 0)
                    goto LABEL_215;
                  if (*(_DWORD *)(v189 + 36) != (_DWORD)v199)
                    goto LABEL_216;
                  LODWORD(v342) = v201;
                  v343 = *(_QWORD *)(*(_QWORD *)(v189 + 48) + 8 * a1);
                  v14 = (_QWORD *)dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
                  v21 = v202;
                  v354[0] = v197;
                  a2 = v189;
                  v204 = v197[2];
                  v203 = v197[3];
                  if (v204 >= v203 >> 1)
                  {
                    sub_340F4(v203 > 1, v204 + 1, 1);
                    v197 = (_QWORD *)v354[0];
                  }
                  v197[2] = v204 + 1;
                  v205 = &v197[2 * v204];
                  v205[4] = v14;
                  v205[5] = v21;
                  v206 = sub_EDE30(a1, v199, v342 & 1, a2);
                  a1 = v206;
                  v199 = v207;
                  v201 = v208 & 1;
                  v15 = (uint64_t *)((char *)v15 - 1);
                  v209 = v340;
                  v189 = a2;
                }
                while (v15);
                sub_41814(v206, v207, v201);
                swift_bridgeObjectRelease();
              }
              else
              {
                swift_bridgeObjectRelease();
                v197 = _swiftEmptyArrayStorage;
                v209 = v340;
              }
              v339 = v197;
              v15 = *(uint64_t **)(v209 + 16);
              if (v15)
              {
                v354[0] = _swiftEmptyArrayStorage;
                swift_bridgeObjectRetain(v209);
                sub_340F4(0, (int64_t)v15, 0);
                v210 = (_QWORD *)v354[0];
                a1 = sub_EDD8C(v209);
                v212 = v211;
                v214 = v213 & 1;
                *(_QWORD *)&v340 = v209 + 56;
                do
                {
                  if (a1 < 0 || a1 >= 1 << *(_BYTE *)(v209 + 32))
                    goto LABEL_217;
                  if (((*(_QWORD *)(v340 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8)) >> a1) & 1) == 0)
                    goto LABEL_218;
                  if (*(_DWORD *)(v209 + 36) != (_DWORD)v212)
                    goto LABEL_219;
                  LODWORD(v342) = v214;
                  v343 = *(_QWORD *)(*(_QWORD *)(v209 + 48) + 8 * a1);
                  v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
                  v14 = v215;
                  v354[0] = v210;
                  v217 = v210[2];
                  v216 = v210[3];
                  a2 = v209;
                  if (v217 >= v216 >> 1)
                  {
                    sub_340F4(v216 > 1, v217 + 1, 1);
                    v210 = (_QWORD *)v354[0];
                  }
                  v210[2] = v217 + 1;
                  v218 = &v210[2 * v217];
                  v218[4] = v21;
                  v218[5] = v14;
                  v219 = sub_EDE30(a1, v212, v342 & 1, v209);
                  a1 = v219;
                  v212 = v220;
                  v214 = v221 & 1;
                  v15 = (uint64_t *)((char *)v15 - 1);
                }
                while (v15);
                sub_41814(v219, v220, v214);
                swift_bridgeObjectRelease_n(v209, 2);
                swift_bridgeObjectRelease();
                v222 = v210;
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v222 = _swiftEmptyArrayStorage;
              }
              v354[0] = v337;
              v223 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
              v225 = v224;
              v226 = sub_CFA8C(0, 0xE000000000000000, v323, v339);
              swift_bridgeObjectRelease();
              v227 = sub_CFA8C(0, 0xE000000000000000, v324, v222);
              swift_bridgeObjectRelease();
              v228 = v344;
              v229 = swift_isUniquelyReferenced_nonNull_native(v344);
              v230 = v327;
              v14 = v328;
              if ((v229 & 1) == 0)
                v228 = sub_30694(0, v228[2] + 1, 1, v228);
              v232 = v228[2];
              v231 = v228[3];
              if (v232 >= v231 >> 1)
                v228 = sub_30694((_QWORD *)(v231 > 1), v232 + 1, 1, v228);
              v233 = v165;
              v228[2] = v232 + 1;
              v234 = (char *)&v228[9 * v232];
              strcpy(v234 + 32, "bookPurchased");
              *((_WORD *)v234 + 23) = -4864;
              *((_QWORD *)v234 + 6) = 0;
              *((_DWORD *)v234 + 14) = 0;
              *((float *)v234 + 15) = v233;
              *((_QWORD *)v234 + 8) = v223;
              *((_QWORD *)v234 + 9) = v225;
              *((_DWORD *)v234 + 20) = v332;
              *((_QWORD *)v234 + 11) = v226;
              *((_QWORD *)v234 + 12) = v227;
              v344 = v228;
              ((void (*)(char *, _QWORD *))v230[1])(v319, v14);
              a2 = v318;
              v15 = v329;
              v152 = v330;
              v21 = v334;
              a1 = v322;
            }
            v150 = v335;
          }
        }
        v151 = v338;
      }
      v151 = (_QWORD *)((char *)v151 + 1);
      if (v151 != (_QWORD *)a1)
        continue;
      break;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
  }
  v235 = (void *)qword_1F61F8;
  v236 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v236 + 16) = v341;
  *(_QWORD *)(v236 + 56) = &type metadata for Int;
  *(_QWORD *)(v236 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v236 + 32) = v21;
  v237 = v235;
  static os_log_type_t.default.getter(v237);
  os_log(_:dso:log:type:_:)("Processed %ld purchases", v304[0]);

  swift_bridgeObjectRelease();
  if (v21 >= 1)
    sub_81AB8(&v344);
  v238 = v344;
  v239 = v344[2];
  v240 = v333 - v239;
  if ((uint64_t)v333 >= (uint64_t)v239)
  {
    if (v333 > v239)
    {
      v241 = sub_6A568(0, 0xE000000000000000, v323);
      v242 = sub_6A568(0, 0xE000000000000000, v324);
      v354[0] = 0;
      v354[1] = 0xE000000000000000;
      memset(&v354[2], 0, 24);
      v354[5] = 0xE000000000000000;
      v355 = 0;
      v356 = v241;
      v357 = v242;
      v243 = sub_68A4C((uint64_t)v354, v240);
      sub_10F7FC((uint64_t)v243);
      v238 = v344;
    }
  }
  else
  {
    if (__OFSUB__(v239, v333))
    {
      __break(1u);
LABEL_228:
      __break(1u);
LABEL_229:
      __break(1u);
LABEL_230:
      __break(1u);
LABEL_231:
      __break(1u);
    }
    v238 = (_QWORD *)sub_81B24(v239 - v333, (uint64_t)v344);
    v344 = v238;
  }
  v244 = sub_5EDC(&qword_1F14D8);
  v245 = sub_5EDC(&qword_1F14E0);
  v246 = *(_QWORD *)(v245 - 8);
  v247 = v245;
  v248 = *(_QWORD *)(v246 + 72);
  v249 = *(unsigned __int8 *)(v246 + 80);
  v250 = (v249 + 32) & ~v249;
  v338 = (_QWORD *)(4 * v248);
  v251 = v248;
  *(_QWORD *)&v341 = v248;
  v252 = swift_allocObject(v244, v250 + 5 * v248, v249 | 7);
  v339 = (_QWORD *)v252;
  *(_OWORD *)(v252 + 16) = xmmword_1917C0;
  v253 = (_QWORD *)(v252 + v250);
  v254 = v252 + v250 + *(int *)(v247 + 48);
  *v253 = 0xD00000000000001BLL;
  v253[1] = 0x80000000001A0CD0;
  v255 = v253;
  swift_bridgeObjectRetain(v238);
  v257 = sub_815D4(v256);
  swift_bridgeObjectRelease();
  static Com_Apple_News_Algorithms_Proto_Model_Feature.fromStrings(_:)((uint64_t)v257, v254);
  swift_bridgeObjectRelease();
  v258 = (_QWORD *)((char *)v255 + v251);
  *(_QWORD *)&v340 = v255;
  v336 = v247;
  *v258 = 0xD00000000000001DLL;
  v258[1] = 0x80000000001A0CF0;
  swift_bridgeObjectRetain(v238);
  v260 = sub_816A8(v259);
  v261 = swift_bridgeObjectRelease();
  v262 = v317;
  Com_Apple_News_Algorithms_Proto_Model_FloatList.init()(v261);
  swift_bridgeObjectRetain(v260);
  v264 = Com_Apple_News_Algorithms_Proto_Model_FloatList.values.setter(v263);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v264);
  v265 = v312;
  v337 = *(void (**)(char *, char *, uint64_t))(v312 + 16);
  v266 = v325;
  v267 = v326;
  v337(v325, v262, v326);
  Com_Apple_News_Algorithms_Proto_Model_Feature.floatList.setter(v266);
  v342 = *(void (**)(char *, uint64_t))(v265 + 8);
  v342(v262, v267);
  swift_bridgeObjectRelease();
  v268 = 2 * v341;
  v269 = (_QWORD *)((char *)v255 + 2 * v341);
  *v269 = 0xD00000000000001ALL;
  v269[1] = 0x80000000001A0D10;
  swift_bridgeObjectRetain(v344);
  v271 = sub_818E8(v270);
  v272 = swift_bridgeObjectRelease();
  v273 = v313;
  Com_Apple_News_Algorithms_Proto_Model_Int32List.init()(v272);
  swift_bridgeObjectRetain(v271);
  v275 = Com_Apple_News_Algorithms_Proto_Model_Int32List.values.setter(v274);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v275);
  v276 = v314;
  v277 = v315;
  v278 = v316;
  (*(void (**)(char *, char *, uint64_t))(v315 + 16))(v314, v273, v316);
  Com_Apple_News_Algorithms_Proto_Model_Feature.int32List.setter(v276);
  (*(void (**)(char *, uint64_t))(v277 + 8))(v273, v278);
  swift_bridgeObjectRelease();
  v279 = (_QWORD *)(v340 + v268 + v341);
  *v279 = 0xD000000000000018;
  v279[1] = 0x80000000001A0D30;
  swift_bridgeObjectRetain(v344);
  v281 = sub_81768(v280);
  v282 = swift_bridgeObjectRelease();
  Com_Apple_News_Algorithms_Proto_Model_FloatList.init()(v282);
  swift_bridgeObjectRetain(v281);
  v284 = Com_Apple_News_Algorithms_Proto_Model_FloatList.values.setter(v283);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v284);
  v286 = v325;
  v285 = v326;
  v287 = v337;
  v337(v325, v262, v326);
  Com_Apple_News_Algorithms_Proto_Model_Feature.floatList.setter(v286);
  v342(v262, v285);
  swift_bridgeObjectRelease();
  v288 = (_QWORD *)((char *)v338 + v340);
  *v288 = 0xD00000000000001BLL;
  v288[1] = 0x80000000001A0D50;
  swift_bridgeObjectRetain(v344);
  v290 = sub_81828(v289);
  v291 = swift_bridgeObjectRelease();
  Com_Apple_News_Algorithms_Proto_Model_FloatList.init()(v291);
  swift_bridgeObjectRetain(v290);
  v293 = Com_Apple_News_Algorithms_Proto_Model_FloatList.values.setter(v292);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v293);
  v287(v286, v262, v285);
  Com_Apple_News_Algorithms_Proto_Model_Feature.floatList.setter(v286);
  v342(v262, v285);
  swift_bridgeObjectRelease();
  v294 = sub_52F64((uint64_t)v339);
  v295 = v344;
  swift_bridgeObjectRetain(v344);
  v297 = sub_819A4(v296);
  swift_bridgeObjectRelease_n(v295, 2);
  v298 = sub_12B4CC((uint64_t)v297, 0xD000000000000011, 0x80000000001A0D70);
  swift_bridgeObjectRelease();
  v299 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_Feature(0);
  v300 = + infix<A, B>(_:_:)(v294, v298, &type metadata for String, v299, &protocol witness table for String);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v301 = sub_1791D4(v300);
  v302 = type metadata accessor for Features(0);
  swift_allocObject(v302, *(unsigned int *)(v302 + 48), *(unsigned __int16 *)(v302 + 52));
  v303 = Features.init(featureMap:)(v301);
  swift_bridgeObjectRelease();
  ((void (*)(char *, _QWORD *))v327[1])(v331, v328);
  return (_QWORD *)v303;
}

uint64_t AccessRequirementUnsatisfiedReason.description.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_84A88 + 4 * byte_1917D0[*v0]))(0xD00000000000002FLL, 0x80000000001A0B90);
}

uint64_t sub_84A88@<X0>(uint64_t a1@<X8>)
{
  return a1 + 11;
}

unint64_t sub_84AD0()
{
  unint64_t result;

  result = qword_1F2A20;
  if (!qword_1F2A20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AccessRequirementUnsatisfiedReason, &type metadata for AccessRequirementUnsatisfiedReason);
    atomic_store(result, (unint64_t *)&qword_1F2A20);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessRequirementUnsatisfiedReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_84B64 + 4 * byte_1917D9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_84B98 + 4 * byte_1917D4[v4]))();
}

uint64_t sub_84B98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_84BA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x84BA8);
  return result;
}

uint64_t sub_84BB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x84BBCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_84BC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_84BC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessRequirementUnsatisfiedReason()
{
  return &type metadata for AccessRequirementUnsatisfiedReason;
}

BooksPersonalization::Environment_optional __swiftcall Environment.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  void *object;
  Swift::String v3;
  char *v4;
  unint64_t v5;
  BooksPersonalization::Environment_optional result;
  char v7;

  object = rawValue._object;
  v3._countAndFlagsBits = rawValue._countAndFlagsBits;
  v4 = v1;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9D50, v3);
  result.value = swift_bridgeObjectRelease(object);
  v7 = 4;
  if (v5 < 4)
    v7 = v5;
  *v4 = v7;
  return result;
}

_UNKNOWN **static Environment.allCases.getter()
{
  return &off_1D9DD0;
}

uint64_t Environment.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_84C74 + 4 * byte_1918C0[*v0]))(0x6C65766564, 0xE500000000000000);
}

uint64_t sub_84C74()
{
  return 24945;
}

uint64_t sub_84C80()
{
  return 0x676E6967617473;
}

uint64_t sub_84C98()
{
  return 0x69746375646F7270;
}

void sub_84CB4(char *a1)
{
  sub_7AC64(*a1);
}

unint64_t sub_84CC4()
{
  unint64_t result;

  result = qword_1F2A28;
  if (!qword_1F2A28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Environment, &type metadata for Environment);
    atomic_store(result, (unint64_t *)&qword_1F2A28);
  }
  return result;
}

void sub_84D08()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_84D50()
{
  uint64_t v1;

  String.hash(into:)(&v1, 24945, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_84DB8()
{
  __asm { BR              X10 }
}

uint64_t sub_84DF0(uint64_t a1)
{
  String.hash(into:)(a1, 24945, 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

void sub_84E44(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_84E88()
{
  uint64_t v1;

  String.hash(into:)(&v1, 24945, 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

BooksPersonalization::Environment_optional sub_84EF0(Swift::String *a1)
{
  return Environment.init(rawValue:)(*a1);
}

uint64_t sub_84EFC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_84F28 + 4 * byte_1918D0[*v0]))();
}

void sub_84F28(_QWORD *a1@<X8>)
{
  *a1 = 24945;
  a1[1] = 0xE200000000000000;
}

void sub_84F38(_QWORD *a1@<X8>)
{
  *a1 = 0x676E6967617473;
  a1[1] = 0xE700000000000000;
}

void sub_84F54(_QWORD *a1@<X8>)
{
  *a1 = 0x69746375646F7270;
  a1[1] = 0xEA00000000006E6FLL;
}

unint64_t sub_84F78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F2A30;
  if (!qword_1F2A30)
  {
    v1 = sub_5F68(&qword_1F2A38);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F2A30);
  }
  return result;
}

void sub_84FC4(_QWORD *a1@<X8>)
{
  *a1 = &off_1D9DF8;
}

uint64_t storeEnumTagSinglePayload for Environment(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_85020 + 4 * byte_1918D9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_85054 + 4 * byte_1918D4[v4]))();
}

uint64_t sub_85054(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8505C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x85064);
  return result;
}

uint64_t sub_85070(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x85078);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_8507C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_85084(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

ValueMetadata *type metadata accessor for EnvironmentOverride()
{
  return &type metadata for EnvironmentOverride;
}

ValueMetadata *type metadata accessor for UseV2AndMetadata()
{
  return &type metadata for UseV2AndMetadata;
}

uint64_t sub_850C4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for EnvironmentType(uint64_t a1)
{
  return sub_850E4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_850E4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s20BooksPersonalization15EnvironmentTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_850C4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EnvironmentType(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_850C4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_850E4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for EnvironmentType(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_850E4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentType(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EnvironmentType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_85260(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentType()
{
  return &type metadata for EnvironmentType;
}

BooksPersonalization::GenreCollectionRecommendationRequest __swiftcall GenreCollectionRecommendationRequest.init(preferredSaleType:)(BooksPersonalization::GenreCollectionRecommendationRequest preferredSaleType)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)preferredSaleType.preferredSaleType;
  return preferredSaleType;
}

unint64_t sub_85288()
{
  return 0xD000000000000011;
}

uint64_t sub_852A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_86278(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_852CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_85418();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_852F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_85418();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t GenreCollectionRecommendationRequest.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;

  v3 = sub_5EDC(&qword_1F2A40);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_85418();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for GenreCollectionRecommendationRequest.CodingKeys, &type metadata for GenreCollectionRecommendationRequest.CodingKeys, v10, v8, v9);
  v15 = v7;
  v11 = sub_8545C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, v12, v3, &type metadata for Book.SaleType, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_85418()
{
  unint64_t result;

  result = qword_1F2A48;
  if (!qword_1F2A48)
  {
    result = swift_getWitnessTable(&unk_191C40, &type metadata for GenreCollectionRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2A48);
  }
  return result;
}

unint64_t sub_8545C()
{
  unint64_t result;

  result = qword_1F2A50;
  if (!qword_1F2A50)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.SaleType, &type metadata for Book.SaleType);
    atomic_store(result, (unint64_t *)&qword_1F2A50);
  }
  return result;
}

uint64_t GenreCollectionRecommendationRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_5EDC(&qword_1F2A58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_85418();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for GenreCollectionRecommendationRequest.CodingKeys, &type metadata for GenreCollectionRecommendationRequest.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_855BC();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Book.SaleType, v13, v5, &type metadata for Book.SaleType, v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v16;
  }
  return sub_62F8(a1);
}

unint64_t sub_855BC()
{
  unint64_t result;

  result = qword_1F2A60;
  if (!qword_1F2A60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Book.SaleType, &type metadata for Book.SaleType);
    atomic_store(result, (unint64_t *)&qword_1F2A60);
  }
  return result;
}

uint64_t sub_85600@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return GenreCollectionRecommendationRequest.init(from:)(a1, a2);
}

uint64_t sub_85614(_QWORD *a1)
{
  return GenreCollectionRecommendationRequest.encode(to:)(a1);
}

uint64_t sub_85628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 2200) = v1;
  *(_QWORD *)(v2 + 2192) = a1;
  return swift_task_switch(sub_85644, 0, 0);
}

uint64_t sub_85644()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 2200);
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 2208) = v5;
  *v5 = v0;
  v5[1] = sub_856D4;
  return v7(v0 + 1104, v2, v3);
}

uint64_t sub_856D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2208);
  *(_QWORD *)(*(_QWORD *)v1 + 2216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_858F8;
  else
    v3 = sub_85738;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_85738()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 2200);
  memcpy((void *)(v0 + 16), (const void *)(v0 + 1104), 0x440uLL);
  v2 = v1 + 7;
  v3 = v1[10];
  v4 = v1[11];
  sub_49F4(v2, v3);
  *(_WORD *)(v0 + 2248) = 1280;
  v5 = *(int **)(v4 + 8);
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  *(_QWORD *)(v0 + 2224) = v6;
  *v6 = v0;
  v6[1] = sub_857DC;
  return v8(v0 + 2248, v3, v4);
}

uint64_t sub_857DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 2224);
  *(_QWORD *)(*v2 + 2232) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    sub_5B70(v4 + 16);
    v6 = sub_85904;
  }
  else
  {
    *(_QWORD *)(v4 + 2240) = a1;
    v6 = sub_85858;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_85858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 2240);
  v2 = *(_QWORD *)(v0 + 2192);
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v0 + 16;
  v4 = swift_bridgeObjectRetain(v2);
  v5 = sub_8609C(v4, v1, (void (*)(uint64_t *__return_ptr, _BYTE *, uint64_t *))sub_862FC);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  sub_5B70(v0 + 16);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v5);
}

uint64_t sub_858F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_85904()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_85910@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  Swift::UInt64 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  double result;
  char v14;
  char v15;

  v6 = *a1;
  v7 = *(_QWORD *)a2;
  v8 = *(unsigned __int8 *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  Configuration.mediaType(for:)(*(_QWORD *)a2);
  if (v15 == 2
    || (v14 = v15 & 1,
        v11 = sub_85B2C(&v14),
        v12 = sub_28750(v6, (uint64_t)v11),
        swift_bridgeObjectRelease(v11),
        (v12 & 1) != 0)
    && (*(_BYTE *)(a3 + 24) & 1) != 0)
  {
    *(_BYTE *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)a4 = v7;
    *(_QWORD *)(a4 + 8) = v8;
    *(_QWORD *)(a4 + 16) = v9;
    *(_QWORD *)(a4 + 24) = v10;
    *(_BYTE *)(a4 + 32) = v6;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v9);
  }
  return result;
}

BooksPersonalization::Book::MediaType_optional __swiftcall Configuration.mediaType(for:)(Swift::UInt64 a1)
{
  char *v1;
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = v1;
  v5 = *(_QWORD *)(v2 + 600);
  v6 = *(_QWORD *)(v2 + 616);
  v7 = 0;
  v8 = (_QWORD *)swift_bridgeObjectRetain(v5);
  v9 = v8[2];
  if (!v9)
    goto LABEL_10;
  if (v8[4] != a1)
  {
    if (v9 == 1)
      goto LABEL_10;
    if (v8[5] != a1)
    {
      if (v9 != 2)
      {
        v10 = 6;
        do
        {
          v11 = v10 - 3;
          if (__OFADD__(v10 - 4, 1))
            goto LABEL_23;
          if (v8[v10] == a1)
            goto LABEL_12;
          ++v10;
        }
        while (v11 != v9);
      }
LABEL_10:
      swift_bridgeObjectRelease(v8);
      v7 = 1;
      v8 = (_QWORD *)swift_bridgeObjectRetain(v6);
      v12 = v8[2];
      if (v12)
      {
        if (v8[4] == a1)
          goto LABEL_12;
        if (v12 != 1)
        {
          if (v8[5] == a1)
            goto LABEL_12;
          if (v12 != 2)
          {
            v13 = 6;
            while (1)
            {
              v14 = v13 - 3;
              if (__OFADD__(v13 - 4, 1))
                break;
              if (v8[v13] == a1)
                goto LABEL_12;
              ++v13;
              if (v14 == v12)
                goto LABEL_14;
            }
LABEL_23:
            __break(1u);
            return (BooksPersonalization::Book::MediaType_optional)v8;
          }
        }
      }
LABEL_14:
      LOBYTE(v8) = swift_bridgeObjectRelease(v8);
      v7 = 2;
      goto LABEL_15;
    }
  }
LABEL_12:
  LOBYTE(v8) = swift_bridgeObjectRelease(v8);
LABEL_15:
  *v4 = v7;
  return (BooksPersonalization::Book::MediaType_optional)v8;
}

void *sub_85B2C(_BYTE *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  char *v6;
  char v7;
  char v9;
  char v10;
  void *v11;

  v2 = (unsigned __int8 *)(v1 + 608);
  if (*a1)
    v3 = (uint64_t *)(v1 + 616);
  else
    v3 = (uint64_t *)(v1 + 600);
  v4 = *v3;
  if (*a1)
    v2 = (unsigned __int8 *)(v1 + 624);
  v5 = *v2;
  if (*a1)
    v6 = (char *)(v1 + 625);
  else
    v6 = (char *)(v1 + 609);
  v7 = *v6;
  v11 = &_swiftEmptySetSingleton;
  if (v5 == 1)
  {
    swift_bridgeObjectRetain(v4);
    sub_163198(&v9, 0);
    if ((v7 & 1) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  swift_bridgeObjectRetain(v4);
  if ((v7 & 1) != 0)
LABEL_13:
    sub_163198(&v10, 1);
LABEL_14:
  swift_bridgeObjectRelease(v4);
  return v11;
}

uint64_t BookHistoryServiceStressTest.__deallocating_deinit()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  sub_62F8((_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t sub_85C10(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1F2B3C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  v5[275] = v4;
  v5[274] = a1;
  return swift_task_switch(sub_85644, 0, 0);
}

uint64_t initializeWithCopy for GenreCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for GenreCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithCopy for BookHistory.CollectionAddition(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for GenreCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenreCollection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GenreCollection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GenreCollection()
{
  return &type metadata for GenreCollection;
}

uint64_t storeEnumTagSinglePayload for GenreCollectionRecommendationRequest(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_85E88 + 4 * byte_191A45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_85EBC + 4 * byte_191A40[v4]))();
}

uint64_t sub_85EBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_85EC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x85ECCLL);
  return result;
}

uint64_t sub_85ED8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x85EE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_85EE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_85EEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GenreCollectionRecommendationRequest()
{
  return &type metadata for GenreCollectionRecommendationRequest;
}

uint64_t type metadata accessor for DefaultGenreCollectionRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization43DefaultGenreCollectionRecommendationService);
}

uint64_t storeEnumTagSinglePayload for GenreCollectionRecommendationRequest.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_85F68 + 4 * byte_191A4A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_85F88 + 4 * byte_191A4F[v4]))();
}

_BYTE *sub_85F68(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_85F88(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_85F90(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_85F98(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_85FA0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_85FA8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GenreCollectionRecommendationRequest.CodingKeys()
{
  return &type metadata for GenreCollectionRecommendationRequest.CodingKeys;
}

unint64_t sub_85FC8()
{
  unint64_t result;

  result = qword_1F2B18;
  if (!qword_1F2B18)
  {
    result = swift_getWitnessTable(&unk_191C08, &type metadata for GenreCollectionRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2B18);
  }
  return result;
}

unint64_t sub_86010()
{
  unint64_t result;

  result = qword_1F2B28;
  if (!qword_1F2B28)
  {
    result = swift_getWitnessTable(&unk_191B78, &type metadata for GenreCollectionRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2B28);
  }
  return result;
}

unint64_t sub_86058()
{
  unint64_t result;

  result = qword_1F2B30;
  if (!qword_1F2B30)
  {
    result = swift_getWitnessTable(&unk_191BA0, &type metadata for GenreCollectionRecommendationRequest.CodingKeys);
    atomic_store(result, &qword_1F2B30);
  }
  return result;
}

_QWORD *sub_8609C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, _BYTE *, uint64_t *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _BYTE v32[8];
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v25 = *(_QWORD *)(a1 + 16);
  if (!v25)
    return _swiftEmptyArrayStorage;
  v3 = a2;
  v23 = a1 + 32;
  v24 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v3);
  v4 = 0;
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  v22 = v3;
  do
  {
    if (v24 == v5)
      break;
    v9 = *(_QWORD *)(v3 + v4 + 32);
    v10 = *(_BYTE *)(v3 + v4 + 40);
    v11 = *(_QWORD *)(v3 + v4 + 48);
    v12 = *(_QWORD *)(v3 + v4 + 56);
    v13 = *(_QWORD *)(v3 + v4 + 64);
    v32[0] = *(_BYTE *)(v23 + v5);
    v33 = v9;
    v34 = v10;
    v35 = v11;
    v36 = v12;
    v37 = v13;
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v11);
    a3(&v27, v32, &v33);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
    v14 = v29;
    if (v29)
    {
      v16 = v27;
      v15 = v28;
      v38 = v30;
      v17 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_308E4(0, v6[2] + 1, 1, v6);
      v19 = v6[2];
      v18 = v6[3];
      if (v19 >= v18 >> 1)
        v6 = sub_308E4((_QWORD *)(v18 > 1), v19 + 1, 1, v6);
      v6[2] = v19 + 1;
      v7 = &v6[5 * v19];
      v7[4] = v16;
      *((_BYTE *)v7 + 40) = v15 & 1;
      v8 = v38;
      v7[6] = v14;
      v7[7] = v8;
      *((_BYTE *)v7 + 64) = v17 & 1;
      v3 = v22;
    }
    ++v5;
    v4 += 40;
  }
  while (v25 != v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(a1);
  return v6;
}

uint64_t sub_86278(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000011 && a2 == 0x80000000001A0E00)
  {
    swift_bridgeObjectRelease(0x80000000001A0E00);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000001A0E00, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

double sub_862FC@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_85910(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t TabiSuggestionsService.fetchBooks(with:configuration:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v2 + 24) = v1;
  v4 = type metadata accessor for BookSuggestionsWork(0);
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  *(_QWORD *)(v2 + 48) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 56) = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)a1;
  *(_QWORD *)(v2 + 64) = v7;
  *(_OWORD *)(v2 + 88) = v8;
  *(_BYTE *)(v2 + 128) = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(v2 + 129) = *(_BYTE *)(a1 + 33);
  v9 = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(v2 + 130) = *(_BYTE *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(v2 + 104) = v9;
  *(_QWORD *)(v2 + 112) = v10;
  *(_QWORD *)(v2 + 120) = v11;
  return swift_task_switch(sub_863C0, 0, 0);
}

uint64_t sub_863C0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;

  v33 = *(_QWORD *)(v0 + 120);
  v32 = *(_BYTE *)(v0 + 130);
  v1 = *(_QWORD *)(v0 + 96);
  v30 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v0 + 112);
  v29 = *(_BYTE *)(v0 + 129);
  v2 = *(_BYTE *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 64);
  v27 = *(_QWORD *)(v0 + 72);
  v28 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 40);
  UUID.init()();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, v4, v6);
  v9 = v7 + *(int *)(v8 + 20);
  *(_QWORD *)v9 = v27;
  *(_QWORD *)(v9 + 8) = v3;
  *(_QWORD *)(v9 + 16) = v28;
  *(_QWORD *)(v9 + 24) = v1;
  *(_BYTE *)(v9 + 32) = v2;
  *(_BYTE *)(v9 + 33) = v29;
  *(_QWORD *)(v9 + 40) = v30;
  *(_BYTE *)(v9 + 48) = v32;
  *(_QWORD *)(v9 + 56) = v31;
  *(_QWORD *)(v9 + 64) = v33;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v31);
  v10 = sub_5EDC(&qword_1F2B50);
  v11 = sub_866B4();
  WorkService.perform<A, B>(_:)(v7, v8, v10, v11);
  sub_866FC(*(_QWORD *)(v0 + 40));
  v12 = *(_QWORD *)(v0 + 16);
  v13 = swift_task_alloc(32);
  v14 = v13;
  *(_BYTE *)(v13 + 16) = v2;
  v15 = *(_QWORD *)(v12 + 16);
  if (v15)
  {
    v34 = v13;
    sub_342E4(0, v15, 0);
    v16 = _swiftEmptyArrayStorage[2];
    v17 = 80 * v16 + 56;
    v18 = (uint64_t *)(v12 + 40);
    do
    {
      v19 = *(v18 - 1);
      v20 = *v18;
      v21 = _swiftEmptyArrayStorage[3];
      v22 = v16 + 1;
      if (v16 >= v21 >> 1)
        sub_342E4(v21 > 1, v16 + 1, 1);
      _swiftEmptyArrayStorage[2] = v22;
      v23 = (char *)_swiftEmptyArrayStorage + v17;
      *((_QWORD *)v23 - 3) = v19;
      *(v23 - 16) = v2;
      *((_QWORD *)v23 - 1) = 0;
      *v23 = 1;
      *((_QWORD *)v23 + 1) = 0;
      v23[16] = -1;
      *((_QWORD *)v23 + 4) = 0;
      *((_QWORD *)v23 + 5) = 0;
      v17 += 80;
      *((_QWORD *)v23 + 3) = _swiftEmptyArrayStorage;
      v18 += 2;
      v16 = v22;
      *((_QWORD *)v23 + 6) = v20;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease(v12);
    v14 = v34;
  }
  else
  {
    swift_bridgeObjectRelease(v12);
  }
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(v24, *(_QWORD *)(v0 + 48));
  swift_task_dealloc(v14);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

unint64_t sub_866B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F2B58;
  if (!qword_1F2B58)
  {
    v1 = type metadata accessor for BookSuggestionsWork(255);
    result = swift_getWitnessTable(&unk_19CC34, v1);
    atomic_store(result, (unint64_t *)&qword_1F2B58);
  }
  return result;
}

uint64_t sub_866FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BookSuggestionsWork(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id TabiGenreRecommendationService.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void TabiSuggestionsService.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BooksPersonalization.TabiSuggestionsService", 43, "init()", 6, 0);
  __break(1u);
}

id TabiGenreRecommendationService.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_8681C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1F2B44);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_70AB4;
  return TabiSuggestionsService.fetchBooks(with:configuration:)(a1);
}

uint64_t type metadata accessor for TabiSuggestionsService()
{
  return objc_opt_self(_TtC20BooksPersonalization22TabiSuggestionsService);
}

uint64_t method lookup function for TabiSuggestionsService(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TabiSuggestionsService);
}

uint64_t sub_86898(uint64_t a1, uint64_t (*a2)(uint64_t *, char *), uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = a1;
  v7 = a4 + 56;
  v8 = 1 << *(_BYTE *)(a4 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a4 + 56);
  v11 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain(a4);
  v13 = 0;
  while (v10)
  {
    v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v15 = v14 | (v13 << 6);
LABEL_5:
    v20 = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v15);
    result = a2(&v21, &v20);
    if (v4)
    {
      v19 = v21;
      swift_release(a4);
      return swift_bridgeObjectRelease(v19);
    }
  }
  if (__OFADD__(v13++, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v13 >= v11)
    goto LABEL_25;
  v17 = *(_QWORD *)(v7 + 8 * v13);
  if (v17)
  {
LABEL_19:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v13 << 6);
    goto LABEL_5;
  }
  v18 = v13 + 1;
  if (v13 + 1 >= v11)
    goto LABEL_25;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v13 + 2;
  if (v13 + 2 >= v11)
    goto LABEL_25;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v13 + 3;
  if (v13 + 3 >= v11)
    goto LABEL_25;
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
    goto LABEL_18;
  v18 = v13 + 4;
  if (v13 + 4 >= v11)
  {
LABEL_25:
    swift_release(a4);
    return v21;
  }
  v17 = *(_QWORD *)(v7 + 8 * v18);
  if (v17)
  {
LABEL_18:
    v13 = v18;
    goto LABEL_19;
  }
  while (1)
  {
    v13 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v13 >= v11)
      goto LABEL_25;
    v17 = *(_QWORD *)(v7 + 8 * v13);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_86A34(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _BYTE v17[552];
  _QWORD __src[69];
  _BYTE v19[552];
  _BYTE __dst[560];
  uint64_t v21;

  v21 = a1;
  v5 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a2);
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v9)
      goto LABEL_23;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_23;
      v15 = *(_QWORD *)(v5 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_23;
        v15 = *(_QWORD *)(v5 + 8 * v11);
        if (!v15)
        {
          v11 = v14 + 3;
          if (v14 + 3 >= v9)
            goto LABEL_23;
          v15 = *(_QWORD *)(v5 + 8 * v11);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_5:
    __src[0] = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v13);
    a3(__src);
    sub_892D0(__src, __dst);
    sub_16333C(v17, __dst);
    sub_892D0(v17, v19);
    result = sub_8E15C(v19, sub_8C620);
  }
  v16 = v14 + 4;
  if (v16 >= v9)
  {
LABEL_23:
    swift_release(a2);
    return v21;
  }
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v9)
      goto LABEL_23;
    v15 = *(_QWORD *)(v5 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void ScorableAttributeType.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_86C24()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  Hasher._combine(_:)(2uLL);
  v2 = 0x656E4F6C6576656CLL;
  if (v0 != 1)
    v2 = 0x6F77546C6576656CLL;
  if (v0)
    v3 = v2;
  else
    v3 = 0x73657661656CLL;
  if (v0)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

void sub_86CDC()
{
  Hasher._combine(_:)(6uLL);
}

void sub_86CE4()
{
  Hasher._combine(_:)(1uLL);
}

void sub_86CEC()
{
  Hasher._combine(_:)(4uLL);
}

uint64_t sub_86D10(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_86D40 + 4 * byte_191CD8[a1]))(0x726F68747561, 0xE600000000000000);
}

unint64_t sub_86D40()
{
  return 0xD000000000000012;
}

uint64_t sub_86DDC()
{
  return 0;
}

uint64_t sub_86DE8@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_86E14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_89248();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_86E3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_89248();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_86E64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8928C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_86E8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8928C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_86EB4()
{
  unsigned __int8 *v0;

  return sub_86D10(*v0);
}

uint64_t sub_86EBC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_8A35C(a1, a2);
  *a3 = result;
  return result;
}

void sub_86EE0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_86EEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_890B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_86F14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_890B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_86F3C()
{
  return 12383;
}

uint64_t sub_86F4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_891C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_86F74(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_891C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_86F9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease(0xE200000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(12383, 0xE200000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_87018(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_89204();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_87040(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_89204();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_87068(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8917C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_87090(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8917C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_870B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_890F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_870E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_890F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_87108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_89138();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_87130(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_89138();
  return CodingKey.debugDescription.getter(a1, v2);
}

void ScorableAttributeType.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[19];

  v3 = sub_5EDC(&qword_1F2B98);
  v20[15] = *(_QWORD *)(v3 - 8);
  v20[16] = v3;
  __chkstk_darwin(v3);
  v20[14] = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F2BA0);
  v20[7] = *(_QWORD *)(v5 - 8);
  v20[8] = v5;
  __chkstk_darwin(v5);
  v20[6] = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5EDC(&qword_1F2BA8);
  v20[4] = *(_QWORD *)(v7 - 8);
  v20[5] = v7;
  __chkstk_darwin(v7);
  v20[3] = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5EDC(&qword_1F2BB0);
  v20[12] = *(_QWORD *)(v9 - 8);
  v20[13] = v9;
  __chkstk_darwin(v9);
  v20[11] = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F2BB8);
  v20[9] = *(_QWORD *)(v11 - 8);
  v20[10] = v11;
  __chkstk_darwin(v11);
  v12 = sub_5EDC(&qword_1F2BC0);
  v20[1] = *(_QWORD *)(v12 - 8);
  v20[2] = v12;
  __chkstk_darwin(v12);
  v20[0] = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_5EDC(&qword_1F2BC8);
  __chkstk_darwin(v14);
  v15 = sub_5EDC(&qword_1F2BD0);
  v20[17] = *(_QWORD *)(v15 - 8);
  v20[18] = v15;
  __chkstk_darwin(v15);
  v16 = *v1;
  v18 = a1[3];
  v17 = a1[4];
  sub_49F4(a1, v18);
  v19 = sub_890B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ScorableAttributeType.CodingKeys, &type metadata for ScorableAttributeType.CodingKeys, v19, v18, v17);
  __asm { BR              X10 }
}

uint64_t sub_873D0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v3 - 70) = 2;
  v4 = sub_89204();
  v5 = *(_QWORD *)(v3 - 112);
  ((void (*)(ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t))KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:))(&type metadata for ScorableAttributeType.GenreCodingKeys, v3 - 70, v5, &type metadata for ScorableAttributeType.GenreCodingKeys, v4);
  *(_BYTE *)(v3 - 71) = v2;
  v6 = sub_54C04();
  v7 = *(_QWORD *)(v3 - 176);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3 - 71, v8, v7, &type metadata for Configuration.GenreRecommendationConfiguration.GenreDepth, v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 184) + 8))(v1, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 120) + 8))(v0, v5);
}

Swift::Int ScorableAttributeType.hashValue.getter()
{
  char *v0;
  _QWORD v2[9];
  char v3;

  v3 = *v0;
  Hasher.init(_seed:)(v2, 0);
  ScorableAttributeType.hash(into:)();
  return Hasher._finalize()();
}

uint64_t ScorableAttributeType.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[11];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v39 = a2;
  v37 = sub_5EDC(&qword_1F2C18);
  v32[10] = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v44 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5EDC(&qword_1F2C20);
  v32[6] = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v43 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_5EDC(&qword_1F2C28);
  v32[9] = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v38 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5EDC(&qword_1F2C30);
  v34 = *(_QWORD *)(v6 - 8);
  v35 = v6;
  __chkstk_darwin(v6);
  v42 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F2C38);
  v32[7] = *(_QWORD *)(v8 - 8);
  v32[8] = v8;
  __chkstk_darwin(v8);
  v41 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_5EDC(&qword_1F2C40);
  v32[5] = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5EDC(&qword_1F2C48);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_5EDC(&qword_1F2C50);
  v16 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v18 = (char *)v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v20 = a1[4];
  v46 = a1;
  sub_49F4(a1, v19);
  v21 = sub_890B0();
  v22 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ScorableAttributeType.CodingKeys, &type metadata for ScorableAttributeType.CodingKeys, v21, v19, v20);
  if (!v22)
  {
    v32[3] = v15;
    v32[1] = v13;
    v32[2] = v12;
    v32[4] = v11;
    v47 = v16;
    v23 = KeyedDecodingContainer.allKeys.getter(v45);
    v24 = v23;
    if (*(_QWORD *)(v23 + 16) == 1)
      __asm { BR              X10 }
    v25 = type metadata accessor for DecodingError(0);
    swift_allocError(v25, &protocol witness table for DecodingError, 0, 0);
    v27 = v26;
    sub_5EDC(&qword_1F2C58);
    *v27 = &type metadata for ScorableAttributeType;
    v28 = v45;
    v29 = KeyedDecodingContainer.codingPath.getter(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v29, 0xD00000000000002BLL, 0x80000000001A0EA0, 0);
    v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, enum case for DecodingError.typeMismatch(_:), v25);
    swift_willThrow(v30);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v28);
  }
  return sub_62F8(v46);
}

void sub_87B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v5 - 72) = 1;
  v6 = sub_89248();
  v7 = *(_QWORD *)(v5 - 272);
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ScorableAttributeType.AuthorAndMediaTypeCodingKeys, v5 - 72, v0, &type metadata for ScorableAttributeType.AuthorAndMediaTypeCodingKeys, v6);
  if (!v2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 264) + 8))(v7, v3);
    swift_bridgeObjectRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v4, v0);
    **(_BYTE **)(v5 - 168) = -127;
    JUMPOUT(0x87AE8);
  }
  swift_bridgeObjectRelease(v1);
  JUMPOUT(0x87AE0);
}

void sub_87D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v5 - 66) = 5;
  v6 = sub_89138();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ScorableAttributeType.SeedBookCodingKeys, v5 - 66, v0, &type metadata for ScorableAttributeType.SeedBookCodingKeys, v6);
  if (!v3)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 256) + 8))(v1, *(_QWORD *)(v5 - 192));
    swift_bridgeObjectRelease(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v4, v0);
    **(_BYTE **)(v5 - 168) = -125;
    JUMPOUT(0x87AE8);
  }
  JUMPOUT(0x87AC8);
}

void sub_87DB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v5 - 65) = 6;
  v6 = sub_890F4();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for ScorableAttributeType.SeedBookAcrossMediaTypesCodingKeys, v5 - 65, v0, &type metadata for ScorableAttributeType.SeedBookAcrossMediaTypesCodingKeys, v6);
  if (!v3)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 - 224) + 8))(v1, *(_QWORD *)(v5 - 184));
    swift_bridgeObjectRelease(v2);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v4, v0);
    **(_BYTE **)(v5 - 168) = -64;
    JUMPOUT(0x87AE8);
  }
  JUMPOUT(0x87AC8);
}

Swift::Int sub_87EEC(uint64_t a1)
{
  char *v1;
  _QWORD v3[9];
  char v4;

  v4 = *v1;
  Hasher.init(_seed:)(v3, a1);
  ScorableAttributeType.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_87F30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ScorableAttributeType.init(from:)(a1, a2);
}

void sub_87F44(_QWORD *a1)
{
  ScorableAttributeType.encode(to:)(a1);
}

uint64_t static ScorableAttribute.AuthorAndMediaType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_88AD8(a1, a2) & 1;
}

uint64_t _s20BooksPersonalization17ScorableAttributeO18AuthorAndMediaTypeV4hash4intoys6HasherVz_tF_0(uint64_t a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(unsigned __int8 *)(v1 + 8);
  Hasher._combine(_:)(*(_QWORD *)v1);
  if (v3)
    v4 = 0x6F6F626F69647561;
  else
    v4 = 0x6B6F6F6265;
  if (v3)
    v5 = 0xE90000000000006BLL;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int _s20BooksPersonalization17ScorableAttributeO18AuthorAndMediaTypeV9hashValueSivg_0()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)(v6, 0);
  Hasher._combine(_:)(v1);
  if (v2)
    v3 = 0x6F6F626F69647561;
  else
    v3 = 0x6B6F6F6265;
  if (v2)
    v4 = 0xE90000000000006BLL;
  else
    v4 = 0xE500000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_8808C(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(v2);
  if (v3)
    v4 = 0x6F6F626F69647561;
  else
    v4 = 0x6B6F6F6265;
  if (v3)
    v5 = 0xE90000000000006BLL;
  else
    v5 = 0xE500000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

void ScorableAttribute.hash(into:)()
{
  void *v0;
  char *v1;
  _BYTE __dst[552];
  _BYTE v3[552];

  sub_892D0(v0, __dst);
  sub_892D0(__dst, v3);
  v1 = (char *)sub_8817C + 4 * byte_191CEE[sub_892E4((uint64_t)v3)];
  __asm { BR              X10 }
}

void sub_8817C()
{
  uint64_t v0;
  const void *v1;
  _BYTE v2[545];
  uint64_t v3;

  v1 = (const void *)sub_892F0((uint64_t)&v3);
  Hasher._combine(_:)(0);
  memcpy(v2, v1, sizeof(v2));
  SeedBook.hash(into:)(v0);
}

Swift::Int ScorableAttribute.hashValue.getter()
{
  void *v0;
  _QWORD v2[9];
  _BYTE v3[552];
  _BYTE __dst[552];

  sub_892D0(v0, __dst);
  sub_892D0(__dst, v3);
  Hasher.init(_seed:)(v2, 0);
  ScorableAttribute.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_88304(uint64_t a1)
{
  void *v1;
  _QWORD v4[9];
  _BYTE v5[552];
  _BYTE __dst[552];

  sub_892D0(v1, __dst);
  sub_892D0(__dst, v5);
  Hasher.init(_seed:)(v4, a1);
  ScorableAttribute.hash(into:)();
  return Hasher._finalize()();
}

void sub_88368(unsigned __int8 *a1)
{
  const void *v1;
  int v2;
  _BYTE v3[545];

  v2 = *a1;
  memcpy(v3, v1, sizeof(v3));
  __asm { BR              X10 }
}

uint64_t sub_883C4()
{
  _BYTE *v0;
  _OWORD *v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __int128 v5;
  void *v6;
  uint64_t v7;

  v4 = *(_OWORD *)(v2 + 24);
  v5 = *(_OWORD *)(v2 + 56);
  v1[2] = *(_OWORD *)(v2 + 40);
  v1[3] = v5;
  v0[1744] = v0[1200];
  *v1 = *(_OWORD *)(v2 + 8);
  v1[1] = v4;
  v0[568] = v3;
  v6 = Book.Metadata.genreIDs(at:)(v0 + 568);
  v7 = sub_86A34((uint64_t)&_swiftEmptySetSingleton, (uint64_t)v6, (void (*)(_QWORD *))sub_8E758);
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t AttributeScorerType.score(attributeTypes:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v7)(uint64_t (*)(void *), _QWORD *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v8;
  _QWORD v10[4];

  v10[2] = a1;
  v7 = *(uint64_t (**)(uint64_t (*)(void *), _QWORD *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 8);
  v8 = sub_89364();
  return v7(sub_89300, v10, a2, &type metadata for ScorableAttribute, v8, a3, a4);
}

uint64_t AttributeScorerType.score(attributeType:of:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  uint64_t (*v11)(uint64_t (*)(void *), _BYTE *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v13;
  _BYTE v15[40];
  _BYTE v16[16];
  void *v17;

  v7 = *a1;
  v8 = sub_5EDC(&qword_1F2C68);
  inited = swift_initStackObject(v8, v15);
  *(_OWORD *)(inited + 16) = xmmword_1875E0;
  *(_BYTE *)(inited + 32) = v7;
  v10 = sub_8BC7C(inited);
  swift_setDeallocating(inited);
  v17 = v10;
  v11 = *(uint64_t (**)(uint64_t (*)(void *), _BYTE *, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(a4 + 8);
  v12 = sub_89364();
  v13 = v11(sub_89300, v16, a2, &type metadata for ScorableAttribute, v12, a3, a4);
  swift_bridgeObjectRelease(v10);
  return v13;
}

uint64_t sub_88934(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
    swift_bridgeObjectRetain(v15);
    v17 = sub_390C8(v16);
    if ((v18 & 1) == 0)
    {
      swift_bridgeObjectRelease(v15);
      return 0;
    }
    v19 = sub_BFC0(*(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v17), v15);
    result = swift_bridgeObjectRelease(v15);
    if ((v19 & 1) == 0)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_88AD8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v2 = *(_BYTE *)(a1 + 8) == 0;
    if (*(_BYTE *)(a1 + 8))
      v3 = 0x6F6F626F69647561;
    else
      v3 = 0x6B6F6F6265;
    if (v2)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE90000000000006BLL;
    if (*(_BYTE *)(a2 + 8))
      v5 = 0x6F6F626F69647561;
    else
      v5 = 0x6B6F6F6265;
    if (*(_BYTE *)(a2 + 8))
      v6 = 0xE90000000000006BLL;
    else
      v6 = 0xE500000000000000;
    if (v3 == v5 && v4 == v6)
    {
      v8 = 1;
      v6 = v4;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
    }
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v8 = 0;
  }
  return v8 & 1;
}

void _s20BooksPersonalization17ScorableAttributeO2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  char *v3;
  _BYTE __dst[552];
  _BYTE __src[552];
  _BYTE v6[552];
  uint64_t v7;
  _BYTE v8[552];

  sub_892D0(a1, __dst);
  sub_892D0(a2, __src);
  sub_892D0(__dst, v6);
  sub_892D0(__src, &v7);
  sub_892D0(__dst, v8);
  v3 = (char *)sub_88C24 + 4 * byte_191CFC[sub_892E4((uint64_t)v8)];
  __asm { BR              X10 }
}

BOOL sub_88C24()
{
  const void *v0;
  _QWORD *v1;
  BOOL v2;
  const void *v4;
  uint64_t v5[69];
  uint64_t v6[69];
  _BYTE v7[552];
  _BYTE v8[552];
  _BYTE v9[552];
  _BYTE v10[1104];
  uint64_t v11;

  v0 = (const void *)sub_892F0((uint64_t)&v11);
  sub_892D0(v9, v7);
  if (sub_892E4((uint64_t)v7))
  {
    sub_892D0(v8, v6);
    v1 = (_QWORD *)sub_892F0((uint64_t)v6);
    sub_6100(v1);
    ((void (*)(_BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))sub_8E15C)(v9, sub_8C478);
    sub_8E3A8((uint64_t)v10);
    return 0;
  }
  else
  {
    v4 = (const void *)sub_892F0((uint64_t)v7);
    memcpy(v6, v0, 0x221uLL);
    memcpy(v5, v4, 0x221uLL);
    ((void (*)(_BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))sub_8E15C)(v9, sub_8C478);
    ((void (*)(_BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))sub_8E15C)(v8, sub_8C478);
    ((void (*)(_BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))sub_8E15C)(v8, sub_8C478);
    ((void (*)(_BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))sub_8E15C)(v9, sub_8C478);
    v2 = _s20BooksPersonalization8SeedBookV2eeoiySbAC_ACtFZ_0(v6, v5);
    sub_8E3A8((uint64_t)v10);
    ((void (*)(_BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))sub_8E15C)(v9, sub_8C620);
    ((void (*)(_BYTE *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)))sub_8E15C)(v8, sub_8C620);
  }
  return v2;
}

void _s20BooksPersonalization21ScorableAttributeTypeO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_88F30@<X0>(unsigned int a1@<W8>)
{
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  if (a1 > 0x3F)
    return 0;
  if (v1)
  {
    v2 = 0xE800000000000000;
    if (v1 == 1)
      v3 = 0x656E4F6C6576656CLL;
    else
      v3 = 0x6F77546C6576656CLL;
  }
  else
  {
    v2 = 0xE600000000000000;
    v3 = 0x73657661656CLL;
  }
  v4 = 0x656E4F6C6576656CLL;
  if (a1 != 1)
    v4 = 0x6F77546C6576656CLL;
  if (a1)
    v5 = v4;
  else
    v5 = 0x73657661656CLL;
  if (a1)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v2 == v6)
  {
    swift_bridgeObjectRelease_n(v2, 2);
    return 1;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v2, v5, v6, 0);
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(v6);
    return v8 & 1;
  }
}

unint64_t sub_890B0()
{
  unint64_t result;

  result = qword_1F2BD8;
  if (!qword_1F2BD8)
  {
    result = swift_getWitnessTable(&unk_1926EC, &type metadata for ScorableAttributeType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2BD8);
  }
  return result;
}

unint64_t sub_890F4()
{
  unint64_t result;

  result = qword_1F2BE0;
  if (!qword_1F2BE0)
  {
    result = swift_getWitnessTable(&unk_19269C, &type metadata for ScorableAttributeType.SeedBookAcrossMediaTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2BE0);
  }
  return result;
}

unint64_t sub_89138()
{
  unint64_t result;

  result = qword_1F2BE8;
  if (!qword_1F2BE8)
  {
    result = swift_getWitnessTable(&unk_19264C, &type metadata for ScorableAttributeType.SeedBookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2BE8);
  }
  return result;
}

unint64_t sub_8917C()
{
  unint64_t result;

  result = qword_1F2BF0;
  if (!qword_1F2BF0)
  {
    result = swift_getWitnessTable(&unk_1925FC, &type metadata for ScorableAttributeType.MediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2BF0);
  }
  return result;
}

unint64_t sub_891C0()
{
  unint64_t result;

  result = qword_1F2BF8;
  if (!qword_1F2BF8)
  {
    result = swift_getWitnessTable(&unk_1925AC, &type metadata for ScorableAttributeType.GenreAndMediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2BF8);
  }
  return result;
}

unint64_t sub_89204()
{
  unint64_t result;

  result = qword_1F2C00;
  if (!qword_1F2C00)
  {
    result = swift_getWitnessTable(&unk_19255C, &type metadata for ScorableAttributeType.GenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2C00);
  }
  return result;
}

unint64_t sub_89248()
{
  unint64_t result;

  result = qword_1F2C08;
  if (!qword_1F2C08)
  {
    result = swift_getWitnessTable(&unk_19250C, &type metadata for ScorableAttributeType.AuthorAndMediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2C08);
  }
  return result;
}

unint64_t sub_8928C()
{
  unint64_t result;

  result = qword_1F2C10;
  if (!qword_1F2C10)
  {
    result = swift_getWitnessTable(&unk_1924BC, &type metadata for ScorableAttributeType.AuthorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2C10);
  }
  return result;
}

void *sub_892D0(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x221uLL);
}

uint64_t sub_892E4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 528) >> 61;
}

uint64_t sub_892F0(uint64_t result)
{
  *(_QWORD *)(result + 528) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_89300(void *__src)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[5];
  _BYTE __dst[552];

  v2 = *(_QWORD *)(v1 + 16);
  memcpy(__dst, __src, 0x221uLL);
  v4[2] = __dst;
  return sub_86898((uint64_t)&_swiftEmptySetSingleton, (uint64_t (*)(uint64_t *, char *))sub_8E094, (uint64_t)v4, v2);
}

unint64_t sub_89364()
{
  unint64_t result;

  result = qword_1F2C60;
  if (!qword_1F2C60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScorableAttribute, &type metadata for ScorableAttribute);
    atomic_store(result, (unint64_t *)&qword_1F2C60);
  }
  return result;
}

void *sub_893A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_5EDC(&qword_1F2D48);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_8E054(&qword_1F2D50, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_8E054(&qword_1F2D58, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

Swift::Int sub_89600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F2D40);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v24 = v1;
    v25 = a1 + 32;
    while (1)
    {
      v6 = *(unsigned __int8 *)(v25 + v4);
      Hasher.init(_seed:)(v26, *(_QWORD *)(v3 + 40));
      if (v6)
        v7 = 0x6F6F626F69647561;
      else
        v7 = 0x6B6F6F6265;
      if (v6)
        v8 = 0xE90000000000006BLL;
      else
        v8 = 0xE500000000000000;
      String.hash(into:)(v26, v7, v8);
      swift_bridgeObjectRelease(v8);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v23 = v6;
        v15 = ~v10;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v11))
            v16 = 0x6F6F626F69647561;
          else
            v16 = 0x6B6F6F6265;
          if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v11))
            v17 = 0xE90000000000006BLL;
          else
            v17 = 0xE500000000000000;
          if (v16 == v7 && v17 == v8)
          {
            swift_bridgeObjectRelease_n(v8, 2);
            goto LABEL_4;
          }
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v7, v8, 0);
          swift_bridgeObjectRelease(v17);
          result = swift_bridgeObjectRelease(v8);
          if ((v19 & 1) != 0)
            goto LABEL_4;
          v11 = (v11 + 1) & v15;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
        }
        while ((v13 & (1 << v11)) != 0);
        LOBYTE(v6) = v23;
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v11) = v6;
      v20 = *(_QWORD *)(v3 + 16);
      v21 = __OFADD__(v20, 1);
      v22 = v20 + 1;
      if (v21)
        break;
      *(_QWORD *)(v3 + 16) = v22;
LABEL_4:
      if (++v4 == v24)
        return v3;
    }
    __break(1u);
  }
  else
  {
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return result;
}

Swift::Int sub_897F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F2D78);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

_QWORD *sub_89998(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  char v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t i;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE __src[545];
  _BYTE v61[384];
  _BYTE v62[32];
  __int128 v63;
  __int128 v64;
  char v65;
  _QWORD *v66;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v4 = a1;
    v5 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)v62 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)&v62[16] = v5;
    v6 = *(_OWORD *)(a2 + 7);
    v63 = *(_OWORD *)(a2 + 5);
    v64 = v6;
    v65 = *((_BYTE *)a2 + 72);
    v38 = v62[0];
    if (v62[0])
      v7 = 0x6F6F626F69647561;
    else
      v7 = 0x6B6F6F6265;
    if (v62[0])
      v8 = 0xE90000000000006BLL;
    else
      v8 = 0xE500000000000000;
    v39 = (uint64_t)(a2 + 19);
    v9 = 0;
    v42 = v2 - 1;
    v66 = _swiftEmptyArrayStorage;
    v40 = v7;
    v41 = swift_bridgeObjectRetain(a1);
    for (i = v8; ; v8 = i)
    {
      v10 = *(_BYTE *)(v4 + v9 + 32);
      v11 = v10 ? 0x6F6F626F69647561 : 0x6B6F6F6265;
      v12 = *(_BYTE *)(v4 + v9 + 32) ? 0xE90000000000006BLL : 0xE500000000000000;
      if (v7 == v11 && v8 == v12)
        break;
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v12, 0);
      v15 = v8;
      v16 = v14;
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v12);
      if ((v16 & 1) != 0)
        goto LABEL_24;
      if ((v63 & 1) != 0)
        goto LABEL_30;
      v17 = *(_QWORD *)&v62[24];
      v54 = *a2;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v7, i, 0);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(i);
      v51 = v17;
      if ((v18 & 1) != 0)
      {
        v49 = *((_QWORD *)&v63 + 1);
        v50 = *((_QWORD *)&v64 + 1);
        v47 = v65;
        v48 = v64;
        v53 = *(_OWORD *)&v62[8];
        sub_8E374((uint64_t)v62);
        v10 = v38;
        v54 = v17;
      }
      else
      {
        v53 = *(_OWORD *)&v62[8];
        v49 = *((_QWORD *)&v64 + 1);
        v50 = *((_QWORD *)&v63 + 1);
        v47 = v64;
        v48 = v65;
        swift_bridgeObjectRetain(*(_QWORD *)&v62[16]);
        swift_bridgeObjectRetain(v53);
      }
      v21 = a2[10];
      v20 = a2[11];
      v57 = a2[14];
      v58 = a2[13];
      v32 = a2[16];
      v55 = a2[12];
      v56 = a2[15];
      v33 = a2[17];
      v34 = a2[18];
      sub_8E32C(v39, (uint64_t)__src);
      v19 = a2[67];
      v52 = v32;
      v45 = v34;
      v46 = v33;
      if (v32 >> 1 == 0xFFFFFFFF)
      {
        swift_bridgeObjectRetain(v19);
        sub_8E32C((uint64_t)__src, (uint64_t)v61);
        v22 = 0;
        v44 = 12;
      }
      else
      {
        sub_61A8(v21, v20, v55, v58, v57, v56, v32);
        sub_61A8(v21, v20, v55, v58, v57, v56, v32);
        swift_bridgeObjectRetain(v19);
        sub_F93F4();
        if (v37)
        {
          swift_errorRelease(v37);
          sub_62CC(v21, v20, v55, v58, v57, v56, v32);
          sub_8E32C((uint64_t)__src, (uint64_t)v61);
          v22 = 0;
          v37 = 0;
          v44 = 12;
        }
        else
        {
          v37 = 0;
          sub_62CC(v21, v20, v55, v58, v57, v56, v32);
          v44 = v59;
          sub_8E32C((uint64_t)__src, (uint64_t)v61);
          v22 = 0;
        }
      }
LABEL_25:
      v23 = v21;
      v24 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) != 0)
        v25 = v66;
      else
        v25 = sub_2FA78(0, v66[2] + 1, 1, v66);
      v27 = v25[2];
      v26 = v25[3];
      v29 = v57;
      v28 = v58;
      v30 = v56;
      if (v27 >= v26 >> 1)
      {
        v35 = sub_2FA78((_QWORD *)(v26 > 1), v27 + 1, 1, v25);
        v30 = v56;
        v29 = v57;
        v28 = v58;
        v66 = v35;
      }
      else
      {
        v66 = v25;
      }
      *(_QWORD *)__src = v51;
      __src[8] = v10;
      *(_OWORD *)&__src[16] = v53;
      *(_QWORD *)&__src[32] = v54;
      __src[40] = v22;
      *(_QWORD *)&__src[48] = v49;
      __src[56] = v48;
      *(_QWORD *)&__src[64] = v50;
      __src[72] = v47;
      *(_QWORD *)&__src[80] = v23;
      *(_QWORD *)&__src[88] = v20;
      *(_QWORD *)&__src[96] = v55;
      *(_QWORD *)&__src[104] = v28;
      *(_QWORD *)&__src[112] = v29;
      *(_QWORD *)&__src[120] = v30;
      *(_QWORD *)&__src[128] = v52;
      *(_QWORD *)&__src[136] = v46;
      *(_QWORD *)&__src[144] = v45;
      sub_8E32C((uint64_t)v61, (uint64_t)&__src[152]);
      *(_QWORD *)&__src[536] = v24;
      __src[544] = v44;
      v31 = v66;
      v66[2] = v27 + 1;
      memcpy(&v31[69 * v27 + 4], __src, 0x221uLL);
      v7 = v40;
      v4 = v41;
LABEL_30:
      if (v42 == v9)
      {
        swift_bridgeObjectRelease(v4);
        return v66;
      }
      ++v9;
    }
    swift_bridgeObjectRelease_n(v8, 2);
LABEL_24:
    v44 = *((_BYTE *)a2 + 544);
    v19 = a2[67];
    sub_8E32C(v39, (uint64_t)__src);
    v21 = a2[10];
    v20 = a2[11];
    v57 = a2[14];
    v58 = a2[13];
    v55 = a2[12];
    v56 = a2[15];
    v45 = a2[18];
    v46 = a2[17];
    v51 = *a2;
    v52 = a2[16];
    v49 = *((_QWORD *)&v63 + 1);
    v50 = *((_QWORD *)&v64 + 1);
    v47 = v65;
    v48 = v64;
    v54 = *(_QWORD *)&v62[24];
    v22 = v63;
    v53 = *(_OWORD *)&v62[8];
    sub_6100(a2);
    sub_8E32C((uint64_t)__src, (uint64_t)v61);
    v10 = v38;
    goto LABEL_25;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_89F40(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *__return_ptr, uint64_t *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _QWORD __src[69];
  _BYTE v18[552];
  uint64_t v19;
  _BYTE v20[552];
  _BYTE __dst[560];
  uint64_t v22;

  v22 = a1;
  v5 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a2);
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v9)
      goto LABEL_23;
    v15 = *(_QWORD *)(v5 + 8 * v14);
    ++v11;
    if (!v15)
    {
      v11 = v14 + 1;
      if (v14 + 1 >= v9)
        goto LABEL_23;
      v15 = *(_QWORD *)(v5 + 8 * v11);
      if (!v15)
      {
        v11 = v14 + 2;
        if (v14 + 2 >= v9)
          goto LABEL_23;
        v15 = *(_QWORD *)(v5 + 8 * v11);
        if (!v15)
        {
          v11 = v14 + 3;
          if (v14 + 3 >= v9)
            goto LABEL_23;
          v15 = *(_QWORD *)(v5 + 8 * v11);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_5:
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v13);
    a3(__src, &v19);
    sub_892D0(__src, __dst);
    sub_16333C(v18, __dst);
    sub_892D0(v18, v20);
    result = sub_8E15C(v20, sub_8C620);
  }
  v16 = v14 + 4;
  if (v16 >= v9)
  {
LABEL_23:
    swift_release(a2);
    return v22;
  }
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
    v11 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v9)
      goto LABEL_23;
    v15 = *(_QWORD *)(v5 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_8A104(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F2D30);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    while (1)
    {
      v9 = *(_QWORD *)(v6 + 8 * v4);
      result = static Hasher._hash(seed:_:)(v7, v9);
      v11 = result & v8;
      v12 = (result & (unint64_t)v8) >> 6;
      v13 = *(_QWORD *)(v5 + 8 * v12);
      v14 = 1 << (result & v8);
      v15 = *(_QWORD *)(v3 + 48);
      if ((v14 & v13) != 0)
      {
        while (*(_QWORD *)(v15 + 8 * v11) != v9)
        {
          v11 = (v11 + 1) & v8;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
        *(_QWORD *)(v15 + 8 * v11) = v9;
        v16 = *(_QWORD *)(v3 + 16);
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v18;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

Swift::Int sub_8A21C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F2D38);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19, *(_QWORD *)(v3 + 40));
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_8A35C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x726F68747561 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F68747561, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000000001A0ED0)
  {
    v7 = 0x80000000001A0ED0;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000001A0ED0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x65726E6567 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726E6567, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000011)
  {
    v9 = 0x80000000001A0EF0;
    if (a2 == 0x80000000001A0EF0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000001A0EF0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x707954616964656DLL && a2 == 0xE900000000000065)
  {
    v10 = 0xE900000000000065;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x707954616964656DLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x6B6F6F4264656573 && a2 == 0xE800000000000000)
  {
    v11 = 0xE800000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F4264656573, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000000001A0F10)
  {
    swift_bridgeObjectRelease(0x80000000001A0F10);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000001A0F10, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

void *sub_8A624(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v5;
  _QWORD v6[69];
  _BYTE v7[552];
  _BYTE v8[560];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F2D70);
    v5 = static _SetStorage.allocate(capacity:)(v1);
    sub_892D0((void *)(a1 + 32), v7);
    Hasher.init(_seed:)(v6, *(_QWORD *)(v5 + 40));
    sub_892D0(v7, v8);
    v3 = (char *)&loc_8A744 + *((int *)qword_8BC18 + sub_892E4((uint64_t)v8));
    __asm { BR              X9 }
  }
  return &_swiftEmptySetSingleton;
}

void *sub_8BC7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F2D60);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = *(unsigned __int8 *)(a1 + 32);
    Hasher.init(_seed:)(v6, *(_QWORD *)(v3 + 40));
    __asm { BR              X8 }
  }
  return &_swiftEmptySetSingleton;
}

unint64_t sub_8C180()
{
  unint64_t result;

  result = qword_1F2C70;
  if (!qword_1F2C70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScorableAttributeType, &type metadata for ScorableAttributeType);
    atomic_store(result, (unint64_t *)&qword_1F2C70);
  }
  return result;
}

unint64_t sub_8C1C8()
{
  unint64_t result;

  result = qword_1F2C78;
  if (!qword_1F2C78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScorableAttribute.AuthorAndMediaType, &type metadata for ScorableAttribute.AuthorAndMediaType);
    atomic_store(result, (unint64_t *)&qword_1F2C78);
  }
  return result;
}

unint64_t sub_8C210()
{
  unint64_t result;

  result = qword_1F2C80;
  if (!qword_1F2C80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScorableAttribute.GenreAndMediaType, &type metadata for ScorableAttribute.GenreAndMediaType);
    atomic_store(result, (unint64_t *)&qword_1F2C80);
  }
  return result;
}

unint64_t sub_8C258()
{
  unint64_t result;

  result = qword_1F2C88;
  if (!qword_1F2C88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScorableAttribute, &type metadata for ScorableAttribute);
    atomic_store(result, (unint64_t *)&qword_1F2C88);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScorableAttributeType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x3D)
    goto LABEL_17;
  if (a2 + 195 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 195) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 195;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 195;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 195;
  }
LABEL_17:
  v6 = (*a1 & 0x3C | (*a1 >> 6)) ^ 0x3F;
  if (v6 >= 0x3C)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for ScorableAttributeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 195 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 195) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x3D)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x3C)
    return ((uint64_t (*)(void))((char *)&loc_8C384 + 4 * byte_191D0F[v4]))();
  *a1 = a2 - 61;
  return ((uint64_t (*)(void))((char *)sub_8C3B8 + 4 * byte_191D0A[v4]))();
}

uint64_t sub_8C3B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8C3C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8C3C8);
  return result;
}

uint64_t sub_8C3E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8C3E8);
  *(_BYTE *)result = 4 * (((-a2 >> 2) & 0xF) - 16 * a2);
  return result;
}

uint64_t sub_8C3EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8C3F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8C400(unsigned __int8 *a1)
{
  unsigned int v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *a1;
  v2 = (char)v1;
  v3 = v1 >> 6;
  v4 = (v1 & 3 | (4 * (v1 >> 6))) - 6;
  if (v2 >= 0)
    return v3;
  else
    return v4;
}

_BYTE *sub_8C424(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

_BYTE *sub_8C434(_BYTE *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 3 | ((_BYTE)a2 << 6);
  else
    *result = ((a2 - 2) & 3 | (((a2 - 2) >> 2) << 6)) ^ 0x80;
  return result;
}

ValueMetadata *type metadata accessor for ScorableAttributeType()
{
  return &type metadata for ScorableAttributeType;
}

uint64_t sub_8C478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a67;
  uint64_t a68;
  uint64_t result;

  if (!(a67 >> 61))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    sub_61A8(a11, a12, a13, a14, a15, a16, a17);
    return swift_bridgeObjectRetain(a68);
  }
  return result;
}

uint64_t destroy for ScorableAttribute(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = *(_OWORD *)(a1 + 464);
  v18 = *(_OWORD *)(a1 + 480);
  v15 = *(_OWORD *)(a1 + 432);
  v16 = *(_OWORD *)(a1 + 448);
  v13 = *(_OWORD *)(a1 + 400);
  v14 = *(_OWORD *)(a1 + 416);
  v11 = *(_OWORD *)(a1 + 368);
  v12 = *(_OWORD *)(a1 + 384);
  v9 = *(_OWORD *)(a1 + 336);
  v10 = *(_OWORD *)(a1 + 352);
  v7 = *(_OWORD *)(a1 + 304);
  v8 = *(_OWORD *)(a1 + 320);
  v5 = *(_OWORD *)(a1 + 272);
  v6 = *(_OWORD *)(a1 + 288);
  v3 = *(_OWORD *)(a1 + 240);
  v4 = *(_OWORD *)(a1 + 256);
  v2 = *(_OWORD *)(a1 + 208);
  return sub_8C620(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(_QWORD *)(a1 + 200),
           v2,
           *((uint64_t *)&v2 + 1),
           *(_QWORD *)(a1 + 224),
           *(_QWORD *)(a1 + 232),
           v3,
           *((uint64_t *)&v3 + 1),
           v4,
           *((uint64_t *)&v4 + 1),
           v5,
           *((uint64_t *)&v5 + 1),
           v6,
           *((uint64_t *)&v6 + 1),
           v7,
           *((uint64_t *)&v7 + 1),
           v8,
           *((uint64_t *)&v8 + 1),
           v9,
           *((uint64_t *)&v9 + 1),
           v10,
           *((uint64_t *)&v10 + 1),
           v11,
           *((uint64_t *)&v11 + 1),
           v12,
           *((uint64_t *)&v12 + 1),
           v13,
           *((uint64_t *)&v13 + 1),
           v14,
           *((uint64_t *)&v14 + 1),
           v15,
           *((uint64_t *)&v15 + 1),
           v16,
           *((uint64_t *)&v16 + 1),
           v17,
           *((uint64_t *)&v17 + 1),
           v18,
           *((uint64_t *)&v18 + 1),
           *(_QWORD *)(a1 + 496));
}

uint64_t sub_8C620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t a67;
  uint64_t a68;
  uint64_t result;

  if (!(a67 >> 61))
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    sub_62CC(a11, a12, a13, a14, a15, a16, a17);
    return swift_bridgeObjectRelease(a68);
  }
  return result;
}

uint64_t initializeWithCopy for ScorableAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v71 = *(_QWORD *)(a2 + 80);
  v72 = *(_QWORD *)(a2 + 72);
  v69 = *(_QWORD *)(a2 + 96);
  v70 = *(_QWORD *)(a2 + 88);
  v67 = *(_QWORD *)(a2 + 112);
  v68 = *(_QWORD *)(a2 + 104);
  v65 = *(_QWORD *)(a2 + 128);
  v66 = *(_QWORD *)(a2 + 120);
  v63 = *(_QWORD *)(a2 + 144);
  v64 = *(_QWORD *)(a2 + 136);
  v61 = *(_QWORD *)(a2 + 160);
  v62 = *(_QWORD *)(a2 + 152);
  v59 = *(_QWORD *)(a2 + 176);
  v60 = *(_QWORD *)(a2 + 168);
  v57 = *(_QWORD *)(a2 + 192);
  v58 = *(_QWORD *)(a2 + 184);
  v55 = *(_QWORD *)(a2 + 208);
  v56 = *(_QWORD *)(a2 + 200);
  v53 = *(_QWORD *)(a2 + 224);
  v54 = *(_QWORD *)(a2 + 216);
  v52 = *(_QWORD *)(a2 + 232);
  v51 = *(_QWORD *)(a2 + 240);
  v50 = *(_QWORD *)(a2 + 248);
  v49 = *(_QWORD *)(a2 + 256);
  v48 = *(_QWORD *)(a2 + 264);
  v47 = *(_QWORD *)(a2 + 272);
  v46 = *(_QWORD *)(a2 + 280);
  v45 = *(_QWORD *)(a2 + 288);
  v44 = *(_QWORD *)(a2 + 296);
  v43 = *(_QWORD *)(a2 + 304);
  v42 = *(_QWORD *)(a2 + 312);
  v41 = *(_QWORD *)(a2 + 320);
  v13 = *(_QWORD *)(a2 + 328);
  v14 = *(_QWORD *)(a2 + 336);
  v15 = *(_QWORD *)(a2 + 344);
  v16 = *(_QWORD *)(a2 + 352);
  v17 = *(_QWORD *)(a2 + 360);
  v18 = *(_QWORD *)(a2 + 368);
  v19 = *(_QWORD *)(a2 + 376);
  v20 = *(_QWORD *)(a2 + 384);
  v21 = *(_QWORD *)(a2 + 392);
  v22 = *(_QWORD *)(a2 + 400);
  v23 = *(_QWORD *)(a2 + 408);
  v24 = *(_QWORD *)(a2 + 416);
  v25 = *(_QWORD *)(a2 + 424);
  v26 = *(_QWORD *)(a2 + 432);
  v27 = *(_QWORD *)(a2 + 440);
  v28 = *(_QWORD *)(a2 + 448);
  v29 = *(_QWORD *)(a2 + 456);
  v30 = *(_QWORD *)(a2 + 464);
  v31 = *(_QWORD *)(a2 + 472);
  v32 = *(_QWORD *)(a2 + 480);
  v33 = *(_QWORD *)(a2 + 488);
  v34 = *(_QWORD *)(a2 + 496);
  v35 = *(_QWORD *)(a2 + 504);
  v36 = *(_QWORD *)(a2 + 512);
  v37 = *(_QWORD *)(a2 + 520);
  v38 = *(_QWORD *)(a2 + 528);
  v39 = *(_QWORD *)(a2 + 536);
  v40 = *(_BYTE *)(a2 + 544);
  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_8C478(*(_QWORD *)a2, v5, v6, v7, v8, v9, v10, v11, v3, v72, v71, v70, v69, v68, v67, v66, v65, v64, v63,
    v62,
    v61,
    v60,
    v59,
    v58,
    v57,
    v56,
    v55,
    v54,
    v53,
    v52,
    v51,
    v50,
    v49,
    v48,
    v47,
    v46,
    v45,
    v44,
    v43,
    v42,
    v41,
    v13,
    v14,
    v15,
    v16,
    v17,
    v18,
    v19,
    v20,
    v21,
    v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v72;
  *(_QWORD *)(a1 + 80) = v71;
  *(_QWORD *)(a1 + 88) = v70;
  *(_QWORD *)(a1 + 96) = v69;
  *(_QWORD *)(a1 + 104) = v68;
  *(_QWORD *)(a1 + 112) = v67;
  *(_QWORD *)(a1 + 120) = v66;
  *(_QWORD *)(a1 + 128) = v65;
  *(_QWORD *)(a1 + 136) = v64;
  *(_QWORD *)(a1 + 144) = v63;
  *(_QWORD *)(a1 + 152) = v62;
  *(_QWORD *)(a1 + 160) = v61;
  *(_QWORD *)(a1 + 168) = v60;
  *(_QWORD *)(a1 + 176) = v59;
  *(_QWORD *)(a1 + 184) = v58;
  *(_QWORD *)(a1 + 192) = v57;
  *(_QWORD *)(a1 + 200) = v56;
  *(_QWORD *)(a1 + 208) = v55;
  *(_QWORD *)(a1 + 216) = v54;
  *(_QWORD *)(a1 + 224) = v53;
  *(_QWORD *)(a1 + 232) = v52;
  *(_QWORD *)(a1 + 240) = v51;
  *(_QWORD *)(a1 + 248) = v50;
  *(_QWORD *)(a1 + 256) = v49;
  *(_QWORD *)(a1 + 264) = v48;
  *(_QWORD *)(a1 + 272) = v47;
  *(_QWORD *)(a1 + 280) = v46;
  *(_QWORD *)(a1 + 288) = v45;
  *(_QWORD *)(a1 + 296) = v44;
  *(_QWORD *)(a1 + 304) = v43;
  *(_QWORD *)(a1 + 312) = v42;
  *(_QWORD *)(a1 + 320) = v41;
  *(_QWORD *)(a1 + 328) = v13;
  *(_QWORD *)(a1 + 336) = v14;
  *(_QWORD *)(a1 + 344) = v15;
  *(_QWORD *)(a1 + 352) = v16;
  *(_QWORD *)(a1 + 360) = v17;
  *(_QWORD *)(a1 + 368) = v18;
  *(_QWORD *)(a1 + 376) = v19;
  *(_QWORD *)(a1 + 384) = v20;
  *(_QWORD *)(a1 + 392) = v21;
  *(_QWORD *)(a1 + 400) = v22;
  *(_QWORD *)(a1 + 408) = v23;
  *(_QWORD *)(a1 + 416) = v24;
  *(_QWORD *)(a1 + 424) = v25;
  *(_QWORD *)(a1 + 432) = v26;
  *(_QWORD *)(a1 + 440) = v27;
  *(_QWORD *)(a1 + 448) = v28;
  *(_QWORD *)(a1 + 456) = v29;
  *(_QWORD *)(a1 + 464) = v30;
  *(_QWORD *)(a1 + 472) = v31;
  *(_QWORD *)(a1 + 480) = v32;
  *(_QWORD *)(a1 + 488) = v33;
  *(_QWORD *)(a1 + 496) = v34;
  *(_QWORD *)(a1 + 504) = v35;
  *(_QWORD *)(a1 + 512) = v36;
  *(_QWORD *)(a1 + 520) = v37;
  *(_QWORD *)(a1 + 528) = v38;
  *(_QWORD *)(a1 + 536) = v39;
  *(_BYTE *)(a1 + 544) = v40;
  return a1;
}

uint64_t assignWithCopy for ScorableAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  v106 = *(_QWORD *)a2;
  v107 = *(_QWORD *)(a2 + 8);
  v104 = *(_QWORD *)(a2 + 24);
  v105 = *(_QWORD *)(a2 + 16);
  v102 = *(_QWORD *)(a2 + 40);
  v103 = *(_QWORD *)(a2 + 32);
  v100 = *(_QWORD *)(a2 + 56);
  v101 = *(_QWORD *)(a2 + 48);
  v98 = *(_QWORD *)(a2 + 72);
  v99 = *(_QWORD *)(a2 + 64);
  v96 = *(_QWORD *)(a2 + 88);
  v97 = *(_QWORD *)(a2 + 80);
  v94 = *(_QWORD *)(a2 + 104);
  v95 = *(_QWORD *)(a2 + 96);
  v93 = *(_QWORD *)(a2 + 112);
  v92 = *(_QWORD *)(a2 + 120);
  v91 = *(_QWORD *)(a2 + 128);
  v90 = *(_QWORD *)(a2 + 136);
  v89 = *(_QWORD *)(a2 + 144);
  v88 = *(_QWORD *)(a2 + 152);
  v87 = *(_QWORD *)(a2 + 160);
  v86 = *(_QWORD *)(a2 + 168);
  v85 = *(_QWORD *)(a2 + 176);
  v84 = *(_QWORD *)(a2 + 184);
  v83 = *(_QWORD *)(a2 + 192);
  v82 = *(_QWORD *)(a2 + 200);
  v81 = *(_QWORD *)(a2 + 208);
  v80 = *(_QWORD *)(a2 + 216);
  v79 = *(_QWORD *)(a2 + 224);
  v78 = *(_QWORD *)(a2 + 232);
  v77 = *(_QWORD *)(a2 + 240);
  v76 = *(_QWORD *)(a2 + 248);
  v75 = *(_QWORD *)(a2 + 256);
  v74 = *(_QWORD *)(a2 + 264);
  v73 = *(_QWORD *)(a2 + 272);
  v72 = *(_QWORD *)(a2 + 280);
  v71 = *(_QWORD *)(a2 + 288);
  v70 = *(_QWORD *)(a2 + 296);
  v69 = *(_QWORD *)(a2 + 304);
  v68 = *(_QWORD *)(a2 + 312);
  v67 = *(_QWORD *)(a2 + 320);
  v4 = *(_QWORD *)(a2 + 336);
  v3 = *(_QWORD *)(a2 + 344);
  v6 = *(_QWORD *)(a2 + 352);
  v5 = *(_QWORD *)(a2 + 360);
  v8 = *(_QWORD *)(a2 + 368);
  v7 = *(_QWORD *)(a2 + 376);
  v10 = *(_QWORD *)(a2 + 384);
  v9 = *(_QWORD *)(a2 + 392);
  v11 = *(_QWORD *)(a2 + 400);
  v49 = *(_QWORD *)(a2 + 328);
  v50 = *(_QWORD *)(a2 + 408);
  v51 = *(_QWORD *)(a2 + 416);
  v52 = *(_QWORD *)(a2 + 424);
  v53 = *(_QWORD *)(a2 + 432);
  v54 = *(_QWORD *)(a2 + 440);
  v55 = *(_QWORD *)(a2 + 448);
  v56 = *(_QWORD *)(a2 + 456);
  v57 = *(_QWORD *)(a2 + 464);
  v58 = *(_QWORD *)(a2 + 472);
  v59 = *(_QWORD *)(a2 + 480);
  v60 = *(_QWORD *)(a2 + 488);
  v61 = *(_QWORD *)(a2 + 496);
  v62 = *(_QWORD *)(a2 + 504);
  v63 = *(_OWORD *)(a2 + 512);
  v64 = *(_QWORD *)(a2 + 528);
  v65 = *(_QWORD *)(a2 + 536);
  v66 = *(_BYTE *)(a2 + 544);
  sub_8C478(*(_QWORD *)a2, v107, v105, v104, v103, v102, v101, v100, v99, v98, v97, v96, v95, v94, v93, v92, v91, v90, v89,
    v88,
    v87,
    v86,
    v85,
    v84,
    v83,
    v82,
    v81,
    v80,
    v79,
    v78,
    v77,
    v76,
    v75,
    v74,
    v73,
    v72,
    v71,
    v70,
    v69,
    v68,
    v67,
    v49,
    v4,
    v3,
    v6,
    v5,
    v8,
    v7,
    v10,
    v9,
    v11,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v106;
  *(_QWORD *)(a1 + 8) = v107;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v105;
  *(_QWORD *)(a1 + 24) = v104;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v103;
  *(_QWORD *)(a1 + 40) = v102;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v101;
  *(_QWORD *)(a1 + 56) = v100;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v99;
  *(_QWORD *)(a1 + 72) = v98;
  *(_QWORD *)(a1 + 80) = v97;
  *(_QWORD *)(a1 + 88) = v96;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v95;
  *(_QWORD *)(a1 + 104) = v94;
  *(_QWORD *)(a1 + 112) = v93;
  *(_QWORD *)(a1 + 120) = v92;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v91;
  *(_QWORD *)(a1 + 136) = v90;
  *(_QWORD *)(a1 + 144) = v89;
  *(_QWORD *)(a1 + 152) = v88;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v87;
  *(_QWORD *)(a1 + 168) = v86;
  *(_QWORD *)(a1 + 176) = v85;
  *(_QWORD *)(a1 + 184) = v84;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 192) = v83;
  *(_QWORD *)(a1 + 200) = v82;
  *(_QWORD *)(a1 + 208) = v81;
  *(_QWORD *)(a1 + 216) = v80;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v79;
  *(_QWORD *)(a1 + 232) = v78;
  *(_QWORD *)(a1 + 240) = v77;
  *(_QWORD *)(a1 + 248) = v76;
  v32 = *(_OWORD *)(a1 + 256);
  v33 = *(_OWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 256) = v75;
  *(_QWORD *)(a1 + 264) = v74;
  *(_QWORD *)(a1 + 272) = v73;
  *(_QWORD *)(a1 + 280) = v72;
  v34 = *(_OWORD *)(a1 + 288);
  v35 = *(_OWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 288) = v71;
  *(_QWORD *)(a1 + 296) = v70;
  *(_QWORD *)(a1 + 304) = v69;
  *(_QWORD *)(a1 + 312) = v68;
  v36 = *(_OWORD *)(a1 + 320);
  v37 = *(_OWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 320) = v67;
  *(_QWORD *)(a1 + 328) = v49;
  *(_QWORD *)(a1 + 336) = v4;
  v38 = *(_OWORD *)(a1 + 352);
  v39 = *(_OWORD *)(a1 + 368);
  *(_QWORD *)(a1 + 344) = v3;
  *(_QWORD *)(a1 + 352) = v6;
  *(_QWORD *)(a1 + 360) = v5;
  *(_QWORD *)(a1 + 368) = v8;
  v40 = *(_OWORD *)(a1 + 384);
  v41 = *(_OWORD *)(a1 + 400);
  *(_QWORD *)(a1 + 376) = v7;
  *(_QWORD *)(a1 + 384) = v10;
  *(_QWORD *)(a1 + 392) = v9;
  *(_QWORD *)(a1 + 400) = v11;
  *(_QWORD *)(a1 + 408) = v50;
  v42 = *(_OWORD *)(a1 + 416);
  v43 = *(_OWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 416) = v51;
  *(_QWORD *)(a1 + 424) = v52;
  *(_QWORD *)(a1 + 432) = v53;
  *(_QWORD *)(a1 + 440) = v54;
  v44 = *(_OWORD *)(a1 + 448);
  v45 = *(_OWORD *)(a1 + 464);
  *(_QWORD *)(a1 + 448) = v55;
  *(_QWORD *)(a1 + 456) = v56;
  *(_QWORD *)(a1 + 464) = v57;
  *(_QWORD *)(a1 + 472) = v58;
  v46 = *(_OWORD *)(a1 + 480);
  v47 = *(_OWORD *)(a1 + 496);
  *(_QWORD *)(a1 + 480) = v59;
  *(_QWORD *)(a1 + 488) = v60;
  *(_QWORD *)(a1 + 496) = v61;
  *(_QWORD *)(a1 + 504) = v62;
  *(_OWORD *)(a1 + 512) = v63;
  *(_QWORD *)(a1 + 528) = v64;
  *(_QWORD *)(a1 + 536) = v65;
  *(_BYTE *)(a1 + 544) = v66;
  sub_8C620(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v43,
    *((uint64_t *)&v43 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v47);
  return a1;
}

void *initializeWithTake for SeedBook(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x221uLL);
}

uint64_t assignWithTake for ScorableAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_OWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 80);
  v14 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 112);
  v16 = *(_OWORD *)(a1 + 128);
  v17 = *(_OWORD *)(a1 + 144);
  v18 = *(_OWORD *)(a1 + 160);
  v19 = *(_OWORD *)(a1 + 176);
  v20 = *(_OWORD *)(a1 + 192);
  v21 = *(_OWORD *)(a1 + 208);
  v22 = *(_OWORD *)(a1 + 224);
  v23 = *(_OWORD *)(a1 + 240);
  v24 = *(_OWORD *)(a1 + 256);
  v25 = *(_OWORD *)(a1 + 272);
  v26 = *(_OWORD *)(a1 + 288);
  v27 = *(_OWORD *)(a1 + 304);
  v28 = *(_OWORD *)(a1 + 320);
  v29 = *(_OWORD *)(a1 + 336);
  v30 = *(_OWORD *)(a1 + 352);
  v31 = *(_OWORD *)(a1 + 368);
  v32 = *(_OWORD *)(a1 + 384);
  v33 = *(_OWORD *)(a1 + 400);
  v34 = *(_OWORD *)(a1 + 416);
  v35 = *(_OWORD *)(a1 + 432);
  v36 = *(_OWORD *)(a1 + 448);
  v37 = *(_OWORD *)(a1 + 464);
  v38 = *(_OWORD *)(a1 + 480);
  v39 = *(_OWORD *)(a1 + 496);
  v40 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v40;
  v41 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v41;
  v42 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v42;
  v43 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v43;
  v44 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v44;
  v45 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v45;
  v46 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v46;
  v47 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v47;
  v48 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v48;
  v49 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v49;
  v50 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v50;
  v51 = *(_OWORD *)(a2 + 368);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 368) = v51;
  v52 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(a1 + 400) = v52;
  v53 = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 432) = v53;
  v54 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v54;
  v55 = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_OWORD *)(a1 + 496) = v55;
  v56 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v56;
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  sub_8C620(v4, v5, v6, v7, v8, v9, v10, v11, v12, *((uint64_t *)&v12 + 1), v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v39);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScorableAttribute(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 545))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8) >> 1;
  if (v2 > 0x80000000)
    v3 = ~(_DWORD)v2;
  else
    v3 = -1;
  return (v3 + 1);
}

void storeEnumTagSinglePayload for ScorableAttribute(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(a1 + 536) = 0;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 520) = 0u;
    *(_BYTE *)(a1 + 544) = 0;
    *(_OWORD *)(a1 + 504) = 0u;
    *(_OWORD *)(a1 + 488) = 0u;
    *(_OWORD *)(a1 + 472) = 0u;
    *(_OWORD *)(a1 + 456) = 0u;
    *(_OWORD *)(a1 + 440) = 0u;
    *(_OWORD *)(a1 + 424) = 0u;
    *(_OWORD *)(a1 + 408) = 0u;
    *(_OWORD *)(a1 + 392) = 0u;
    *(_OWORD *)(a1 + 376) = 0u;
    *(_OWORD *)(a1 + 360) = 0u;
    *(_OWORD *)(a1 + 344) = 0u;
    *(_OWORD *)(a1 + 328) = 0u;
    *(_OWORD *)(a1 + 312) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 545) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return;
LABEL_8:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 2 * -a2;
      bzero((void *)(a1 + 16), 0x211uLL);
      return;
    }
    *(_BYTE *)(a1 + 545) = 0;
    if (a2)
      goto LABEL_8;
  }
}

uint64_t sub_8D514(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(result + 40) & 1;
  v3 = *(_QWORD *)(result + 56) & 1;
  v4 = *(_QWORD *)(result + 72) & 1;
  v5 = *(unsigned __int8 *)(result + 528) | (unint64_t)(a2 << 61);
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 56) = v3;
  *(_QWORD *)(result + 72) = v4;
  *(_QWORD *)(result + 528) = v5;
  return result;
}

ValueMetadata *type metadata accessor for ScorableAttribute()
{
  return &type metadata for ScorableAttribute;
}

uint64_t initializeWithTake for Book.Content(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ScorableAttribute.AuthorAndMediaType()
{
  return &type metadata for ScorableAttribute.AuthorAndMediaType;
}

uint64_t _s20BooksPersonalization17ScorableAttributeO18AuthorAndMediaTypeVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s20BooksPersonalization17ScorableAttributeO18AuthorAndMediaTypeVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScorableAttribute.GenreAndMediaType()
{
  return &type metadata for ScorableAttribute.GenreAndMediaType;
}

uint64_t getEnumTagSinglePayload for ScorableAttributeType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ScorableAttributeType.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_8D704 + 4 * byte_191D19[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_8D738 + 4 * byte_191D14[v4]))();
}

uint64_t sub_8D738(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8D740(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8D748);
  return result;
}

uint64_t sub_8D754(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8D75CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_8D760(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8D768(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScorableAttributeType.CodingKeys()
{
  return &type metadata for ScorableAttributeType.CodingKeys;
}

ValueMetadata *type metadata accessor for ScorableAttributeType.AuthorCodingKeys()
{
  return &type metadata for ScorableAttributeType.AuthorCodingKeys;
}

ValueMetadata *type metadata accessor for ScorableAttributeType.AuthorAndMediaTypeCodingKeys()
{
  return &type metadata for ScorableAttributeType.AuthorAndMediaTypeCodingKeys;
}

ValueMetadata *type metadata accessor for ScorableAttributeType.GenreCodingKeys()
{
  return &type metadata for ScorableAttributeType.GenreCodingKeys;
}

uint64_t _s20BooksPersonalization21ScorableAttributeTypeO15GenreCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_8D7F8 + 4 * byte_191D1E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_8D818 + 4 * byte_191D23[v4]))();
}

_BYTE *sub_8D7F8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_8D818(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_8D820(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_8D828(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_8D830(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_8D838(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ScorableAttributeType.GenreAndMediaTypeCodingKeys()
{
  return &type metadata for ScorableAttributeType.GenreAndMediaTypeCodingKeys;
}

ValueMetadata *type metadata accessor for ScorableAttributeType.MediaTypeCodingKeys()
{
  return &type metadata for ScorableAttributeType.MediaTypeCodingKeys;
}

ValueMetadata *type metadata accessor for ScorableAttributeType.SeedBookCodingKeys()
{
  return &type metadata for ScorableAttributeType.SeedBookCodingKeys;
}

ValueMetadata *type metadata accessor for ScorableAttributeType.SeedBookAcrossMediaTypesCodingKeys()
{
  return &type metadata for ScorableAttributeType.SeedBookAcrossMediaTypesCodingKeys;
}

unint64_t sub_8D888()
{
  unint64_t result;

  result = qword_1F2C90;
  if (!qword_1F2C90)
  {
    result = swift_getWitnessTable(&unk_192274, &type metadata for ScorableAttributeType.GenreAndMediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2C90);
  }
  return result;
}

unint64_t sub_8D8D0()
{
  unint64_t result;

  result = qword_1F2C98;
  if (!qword_1F2C98)
  {
    result = swift_getWitnessTable(&unk_19232C, &type metadata for ScorableAttributeType.GenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2C98);
  }
  return result;
}

unint64_t sub_8D918()
{
  unint64_t result;

  result = qword_1F2CA0;
  if (!qword_1F2CA0)
  {
    result = swift_getWitnessTable(&unk_192484, &type metadata for ScorableAttributeType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CA0);
  }
  return result;
}

unint64_t sub_8D960()
{
  unint64_t result;

  result = qword_1F2CA8;
  if (!qword_1F2CA8)
  {
    result = swift_getWitnessTable(&unk_1923A4, &type metadata for ScorableAttributeType.AuthorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CA8);
  }
  return result;
}

unint64_t sub_8D9A8()
{
  unint64_t result;

  result = qword_1F2CB0;
  if (!qword_1F2CB0)
  {
    result = swift_getWitnessTable(&unk_1923CC, &type metadata for ScorableAttributeType.AuthorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CB0);
  }
  return result;
}

unint64_t sub_8D9F0()
{
  unint64_t result;

  result = qword_1F2CB8;
  if (!qword_1F2CB8)
  {
    result = swift_getWitnessTable(&unk_192354, &type metadata for ScorableAttributeType.AuthorAndMediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CB8);
  }
  return result;
}

unint64_t sub_8DA38()
{
  unint64_t result;

  result = qword_1F2CC0;
  if (!qword_1F2CC0)
  {
    result = swift_getWitnessTable(&unk_19237C, &type metadata for ScorableAttributeType.AuthorAndMediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CC0);
  }
  return result;
}

unint64_t sub_8DA80()
{
  unint64_t result;

  result = qword_1F2CC8;
  if (!qword_1F2CC8)
  {
    result = swift_getWitnessTable(&unk_19229C, &type metadata for ScorableAttributeType.GenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CC8);
  }
  return result;
}

unint64_t sub_8DAC8()
{
  unint64_t result;

  result = qword_1F2CD0;
  if (!qword_1F2CD0)
  {
    result = swift_getWitnessTable(&unk_1922C4, &type metadata for ScorableAttributeType.GenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CD0);
  }
  return result;
}

unint64_t sub_8DB10()
{
  unint64_t result;

  result = qword_1F2CD8;
  if (!qword_1F2CD8)
  {
    result = swift_getWitnessTable(&unk_1921E4, &type metadata for ScorableAttributeType.GenreAndMediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CD8);
  }
  return result;
}

unint64_t sub_8DB58()
{
  unint64_t result;

  result = qword_1F2CE0;
  if (!qword_1F2CE0)
  {
    result = swift_getWitnessTable(&unk_19220C, &type metadata for ScorableAttributeType.GenreAndMediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CE0);
  }
  return result;
}

unint64_t sub_8DBA0()
{
  unint64_t result;

  result = qword_1F2CE8;
  if (!qword_1F2CE8)
  {
    result = swift_getWitnessTable(&unk_192194, &type metadata for ScorableAttributeType.MediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CE8);
  }
  return result;
}

unint64_t sub_8DBE8()
{
  unint64_t result;

  result = qword_1F2CF0;
  if (!qword_1F2CF0)
  {
    result = swift_getWitnessTable(&unk_1921BC, &type metadata for ScorableAttributeType.MediaTypeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CF0);
  }
  return result;
}

unint64_t sub_8DC30()
{
  unint64_t result;

  result = qword_1F2CF8;
  if (!qword_1F2CF8)
  {
    result = swift_getWitnessTable(&unk_192144, &type metadata for ScorableAttributeType.SeedBookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2CF8);
  }
  return result;
}

unint64_t sub_8DC78()
{
  unint64_t result;

  result = qword_1F2D00;
  if (!qword_1F2D00)
  {
    result = swift_getWitnessTable(&unk_19216C, &type metadata for ScorableAttributeType.SeedBookCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2D00);
  }
  return result;
}

unint64_t sub_8DCC0()
{
  unint64_t result;

  result = qword_1F2D08;
  if (!qword_1F2D08)
  {
    result = swift_getWitnessTable(&unk_1920F4, &type metadata for ScorableAttributeType.SeedBookAcrossMediaTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2D08);
  }
  return result;
}

unint64_t sub_8DD08()
{
  unint64_t result;

  result = qword_1F2D10;
  if (!qword_1F2D10)
  {
    result = swift_getWitnessTable(&unk_19211C, &type metadata for ScorableAttributeType.SeedBookAcrossMediaTypesCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2D10);
  }
  return result;
}

unint64_t sub_8DD50()
{
  unint64_t result;

  result = qword_1F2D18;
  if (!qword_1F2D18)
  {
    result = swift_getWitnessTable(&unk_1923F4, &type metadata for ScorableAttributeType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2D18);
  }
  return result;
}

unint64_t sub_8DD98()
{
  unint64_t result;

  result = qword_1F2D20;
  if (!qword_1F2D20)
  {
    result = swift_getWitnessTable(&unk_19241C, &type metadata for ScorableAttributeType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2D20);
  }
  return result;
}

Swift::Int sub_8DDDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  Swift::Int result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_5EDC(&qword_1F2D28);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v25 = v1;
    v26 = a1 + 32;
    while (1)
    {
      v6 = *(unsigned __int8 *)(v26 + v4++);
      Hasher.init(_seed:)(v27, *(_QWORD *)(v3 + 40));
      v7 = 0x6F6F626F69647561;
      if (v6 != 1)
        v7 = 0x646578696DLL;
      v8 = 0xE90000000000006BLL;
      if (v6 != 1)
        v8 = 0xE500000000000000;
      if (v6)
        v9 = v7;
      else
        v9 = 0x6B6F6F6265;
      if (v6)
        v10 = v8;
      else
        v10 = 0xE500000000000000;
      String.hash(into:)(v27, v9, v10);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v12 = ~(-1 << *(_BYTE *)(v3 + 32));
      v13 = result & v12;
      v14 = (result & (unint64_t)v12) >> 6;
      v15 = *(_QWORD *)(v5 + 8 * v14);
      v16 = 1 << (result & v12);
      if ((v16 & v15) != 0)
      {
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v13))
          {
            if (*(_BYTE *)(*(_QWORD *)(v3 + 48) + v13) == 1)
            {
              v17 = 0x6F6F626F69647561;
              v18 = 0xE90000000000006BLL;
              if (!v6)
                goto LABEL_30;
            }
            else
            {
              v18 = 0xE500000000000000;
              v17 = 0x646578696DLL;
              if (!v6)
              {
LABEL_30:
                v20 = 0xE500000000000000;
                v19 = 0x6B6F6F6265;
                if (v17 != 0x6B6F6F6265)
                  goto LABEL_32;
                goto LABEL_31;
              }
            }
          }
          else
          {
            v18 = 0xE500000000000000;
            v17 = 0x6B6F6F6265;
            if (!v6)
              goto LABEL_30;
          }
          if (v6 == 1)
            v19 = 0x6F6F626F69647561;
          else
            v19 = 0x646578696DLL;
          if (v6 == 1)
            v20 = 0xE90000000000006BLL;
          else
            v20 = 0xE500000000000000;
          if (v17 != v19)
            goto LABEL_32;
LABEL_31:
          if (v18 == v20)
          {
            swift_bridgeObjectRelease_n(v18, 2);
            goto LABEL_4;
          }
LABEL_32:
          v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0);
          swift_bridgeObjectRelease();
          result = swift_bridgeObjectRelease();
          if ((v21 & 1) != 0)
            goto LABEL_4;
          v13 = (v13 + 1) & v12;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v5 + 8 * (v13 >> 6));
          v16 = 1 << v13;
        }
        while ((v15 & (1 << v13)) != 0);
      }
      *(_QWORD *)(v5 + 8 * v14) = v16 | v15;
      *(_BYTE *)(*(_QWORD *)(v3 + 48) + v13) = v6;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
        break;
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (v4 == v25)
        return v3;
    }
    __break(1u);
  }
  else
  {
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return result;
}

uint64_t sub_8E054(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Calendar.Component(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_8E094(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 v4;

  v4 = *a2;
  sub_88368(&v4);
  return sub_8F458(v2);
}

uint64_t sub_8E0DC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(result + 40) & 1;
  v2 = *(_QWORD *)(result + 56) & 1;
  v3 = *(_QWORD *)(result + 72) & 1;
  v4 = *(unsigned __int8 *)(result + 528) | 0xA000000000000000;
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 56) = v2;
  *(_QWORD *)(result + 72) = v3;
  *(_QWORD *)(result + 528) = v4;
  return result;
}

uint64_t sub_8E120(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(result + 528);
  v2 = *(_QWORD *)(result + 40) & 1;
  v3 = *(_QWORD *)(result + 56) & 1;
  v4 = *(_QWORD *)(result + 72) & 1;
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_QWORD *)(result + 40) = v2;
  *(_QWORD *)(result + 56) = v3;
  *(_QWORD *)(result + 72) = v4;
  *(_QWORD *)(result + 528) = v1;
  return result;
}

#error "8E220: call analysis failed (funcsize=58)"

void *sub_8E244@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_8E25C(a1, (void (*)(uint64_t *))sub_8E2EC, a2);
}

void *sub_8E250@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_8E25C(a1, (void (*)(uint64_t *))sub_8E2AC, a2);
}

void *sub_8E25C@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t *)@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  char v5;
  uint64_t v7;
  char v8;

  v5 = *(_BYTE *)(*(_QWORD *)(v3 + 16) + 8) & 1;
  v7 = *a1;
  v8 = v5;
  a2(&v7);
  return sub_892D0(&v7, a3);
}

uint64_t sub_8E2AC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 40) & 1;
  v2 = *(_QWORD *)(result + 56) & 1;
  v3 = *(_QWORD *)(result + 72) & 1;
  v4 = *(unsigned __int8 *)(result + 528) | 0x6000000000000000;
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 56) = v2;
  *(_QWORD *)(result + 72) = v3;
  *(_QWORD *)(result + 528) = v4;
  return result;
}

uint64_t sub_8E2EC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(result + 40) & 1;
  v2 = *(_QWORD *)(result + 56) & 1;
  v3 = *(_QWORD *)(result + 72) & 1;
  v4 = *(unsigned __int8 *)(result + 528) | 0x8000000000000000;
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 56) = v2;
  *(_QWORD *)(result + 72) = v3;
  *(_QWORD *)(result + 528) = v4;
  return result;
}

uint64_t sub_8E32C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F2D68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_8E374(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_8E3A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v53 = *(_QWORD *)(a1 + 560);
  v54 = *(_QWORD *)(a1 + 552);
  v2 = *(_QWORD *)(a1 + 568);
  v3 = *(_QWORD *)(a1 + 576);
  v4 = *(_QWORD *)(a1 + 584);
  v5 = *(_QWORD *)(a1 + 592);
  v6 = *(_QWORD *)(a1 + 600);
  v7 = *(_QWORD *)(a1 + 608);
  v51 = *(_OWORD *)(a1 + 632);
  v52 = *(_OWORD *)(a1 + 616);
  v49 = *(_OWORD *)(a1 + 664);
  v50 = *(_OWORD *)(a1 + 648);
  v47 = *(_OWORD *)(a1 + 696);
  v48 = *(_OWORD *)(a1 + 680);
  v45 = *(_OWORD *)(a1 + 728);
  v46 = *(_OWORD *)(a1 + 712);
  v43 = *(_OWORD *)(a1 + 760);
  v44 = *(_OWORD *)(a1 + 744);
  v41 = *(_OWORD *)(a1 + 792);
  v42 = *(_OWORD *)(a1 + 776);
  v39 = *(_OWORD *)(a1 + 824);
  v40 = *(_OWORD *)(a1 + 808);
  v37 = *(_OWORD *)(a1 + 856);
  v38 = *(_OWORD *)(a1 + 840);
  v35 = *(_OWORD *)(a1 + 888);
  v36 = *(_OWORD *)(a1 + 872);
  v33 = *(_OWORD *)(a1 + 920);
  v34 = *(_OWORD *)(a1 + 904);
  v31 = *(_OWORD *)(a1 + 952);
  v32 = *(_OWORD *)(a1 + 936);
  v29 = *(_OWORD *)(a1 + 984);
  v30 = *(_OWORD *)(a1 + 968);
  v27 = *(_OWORD *)(a1 + 1016);
  v28 = *(_OWORD *)(a1 + 1000);
  v25 = *(_OWORD *)(a1 + 1048);
  v26 = *(_OWORD *)(a1 + 1032);
  v23 = *(_OWORD *)(a1 + 464);
  v24 = *(_OWORD *)(a1 + 480);
  v21 = *(_OWORD *)(a1 + 432);
  v22 = *(_OWORD *)(a1 + 448);
  v19 = *(_OWORD *)(a1 + 400);
  v20 = *(_OWORD *)(a1 + 416);
  v17 = *(_OWORD *)(a1 + 368);
  v18 = *(_OWORD *)(a1 + 384);
  v15 = *(_OWORD *)(a1 + 336);
  v16 = *(_OWORD *)(a1 + 352);
  v13 = *(_OWORD *)(a1 + 304);
  v14 = *(_OWORD *)(a1 + 320);
  v11 = *(_OWORD *)(a1 + 272);
  v12 = *(_OWORD *)(a1 + 288);
  v9 = *(_OWORD *)(a1 + 240);
  v10 = *(_OWORD *)(a1 + 256);
  sub_8C620(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v9,
    *((uint64_t *)&v9 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    *(_QWORD *)(a1 + 496));
  sub_8C620(v54, v53, v2, v3, v4, v5, v6, v7, v52, *((uint64_t *)&v52 + 1), v51, *((uint64_t *)&v51 + 1), v50, *((uint64_t *)&v50 + 1), v49, *((uint64_t *)&v49 + 1), v48, *((uint64_t *)&v48 + 1), v47,
    *((uint64_t *)&v47 + 1),
    v46,
    *((uint64_t *)&v46 + 1),
    v45,
    *((uint64_t *)&v45 + 1),
    v44,
    *((uint64_t *)&v44 + 1),
    v43,
    *((uint64_t *)&v43 + 1),
    v42,
    *((uint64_t *)&v42 + 1),
    v41,
    *((uint64_t *)&v41 + 1),
    v40,
    *((uint64_t *)&v40 + 1),
    v39,
    *((uint64_t *)&v39 + 1),
    v38,
    *((uint64_t *)&v38 + 1),
    v37,
    *((uint64_t *)&v37 + 1),
    v36,
    *((uint64_t *)&v36 + 1),
    v35,
    *((uint64_t *)&v35 + 1),
    v34,
    *((uint64_t *)&v34 + 1),
    v33,
    *((uint64_t *)&v33 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v25);
  return a1;
}

uint64_t sub_8E6A0(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 80);
  if (v1 <= 1)
    return 0;
  else
    return v1 ^ 0xFF;
}

uint64_t *sub_8E6B4(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a1[10];
  v5 = a1[11];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[14];
  v9 = a1[15];
  v10 = a1[16];
  v11 = a1[17];
  v13 = a1[9];
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  a2(v13, v4, v5, v6, v7, v8, v9, v10, v11);
  return a1;
}

uint64_t sub_8E758(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 40) & 1;
  v2 = *(_QWORD *)(result + 56) & 1;
  v3 = *(_QWORD *)(result + 72) & 1;
  v4 = *(unsigned __int8 *)(result + 528) | 0x4000000000000000;
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 56) = v2;
  *(_QWORD *)(result + 72) = v3;
  *(_QWORD *)(result + 528) = v4;
  return result;
}

uint64_t sub_8E798(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result + 40) & 1;
  v2 = *(_QWORD *)(result + 56) & 1;
  v3 = *(_QWORD *)(result + 72) & 1;
  v4 = *(unsigned __int8 *)(result + 528) | 0x2000000000000000;
  *(_QWORD *)(result + 8) &= 1uLL;
  *(_QWORD *)(result + 40) = v1;
  *(_QWORD *)(result + 56) = v2;
  *(_QWORD *)(result + 72) = v3;
  *(_QWORD *)(result + 528) = v4;
  return result;
}

uint64_t sub_8E7E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8E950();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8E808(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8E950();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Author.Rationale.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_5EDC(&qword_1F2D80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = a1[3];
  v9 = a1[4];
  sub_49F4(a1, v8);
  v10 = sub_8E950();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Author.Rationale.CodingKeys, &type metadata for Author.Rationale.CodingKeys, v10, v8, v9);
  v16 = v7;
  v11 = sub_5EDC(&qword_1F2870);
  v12 = sub_8EAD4(&qword_1F2878, (void (*)(void))sub_7E00C, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v3, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_8E950()
{
  unint64_t result;

  result = qword_1F2D88;
  if (!qword_1F2D88)
  {
    result = swift_getWitnessTable(&unk_1929E4, &type metadata for Author.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2D88);
  }
  return result;
}

uint64_t Author.Rationale.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v5 = sub_5EDC(&qword_1F2D90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_8E950();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Author.Rationale.CodingKeys, &type metadata for Author.Rationale.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v12 = sub_5EDC(&qword_1F2870);
    v13 = sub_8EAD4(&qword_1F2890, (void (*)(void))sub_7E050, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v12, v14, v5, v12, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v17;
  }
  return sub_62F8(a1);
}

uint64_t sub_8EAD4(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_5F68(&qword_1F2870);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_8EB3C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Author.Rationale.init(from:)(a1, a2);
}

uint64_t sub_8EB50(_QWORD *a1)
{
  return Author.Rationale.encode(to:)(a1);
}

uint64_t Author.rationale.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 8);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_8EB70()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C616E6F69746172;
  else
    return 0x444965726F7473;
}

uint64_t sub_8EBB0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_8F35C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_8EBD4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8ED5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_8EBFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_8ED5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Author.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v4 = sub_5EDC(&qword_1F2D98);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v14 = v1[1];
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_8ED5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Author.CodingKeys, &type metadata for Author.CodingKeys, v11, v9, v10);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v8, &v17, v4);
  if (!v2)
  {
    v15 = v14;
    v16 = 1;
    v12 = sub_8EDA0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v15, &v16, v4, &type metadata for Author.Rationale, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_8ED5C()
{
  unint64_t result;

  result = qword_1F2DA0;
  if (!qword_1F2DA0)
  {
    result = swift_getWitnessTable(&unk_192994, &type metadata for Author.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2DA0);
  }
  return result;
}

unint64_t sub_8EDA0()
{
  unint64_t result;

  result = qword_1F2DA8;
  if (!qword_1F2DA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Author.Rationale, &type metadata for Author.Rationale);
    atomic_store(result, (unint64_t *)&qword_1F2DA8);
  }
  return result;
}

uint64_t Author.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  v5 = sub_5EDC(&qword_1F2DB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_8ED5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Author.CodingKeys, &type metadata for Author.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v19 = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v5);
    v18 = 1;
    v13 = sub_8EF48();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v17, &type metadata for Author.Rationale, &v18, v5, &type metadata for Author.Rationale, v13);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v14 = v17;
    *a2 = v12;
    a2[1] = v14;
  }
  return sub_62F8(a1);
}

unint64_t sub_8EF48()
{
  unint64_t result;

  result = qword_1F2DB8;
  if (!qword_1F2DB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Author.Rationale, &type metadata for Author.Rationale);
    atomic_store(result, (unint64_t *)&qword_1F2DB8);
  }
  return result;
}

uint64_t sub_8EF8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Author.init(from:)(a1, a2);
}

uint64_t sub_8EFA0(_QWORD *a1)
{
  return Author.encode(to:)(a1);
}

_QWORD *assignWithCopy for Author(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a1[1];
  v4 = a2[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

_QWORD *assignWithTake for Author(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for Author()
{
  return &type metadata for Author;
}

ValueMetadata *type metadata accessor for Author.Rationale()
{
  return &type metadata for Author.Rationale;
}

uint64_t storeEnumTagSinglePayload for Author.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_8F090 + 4 * byte_192745[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_8F0C4 + 4 * byte_192740[v4]))();
}

uint64_t sub_8F0C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_8F0CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x8F0D4);
  return result;
}

uint64_t sub_8F0E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x8F0E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_8F0EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_8F0F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Author.CodingKeys()
{
  return &type metadata for Author.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Author.Rationale.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_8F150 + 4 * byte_19274A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_8F170 + 4 * byte_19274F[v4]))();
}

_BYTE *sub_8F150(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_8F170(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_8F178(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_8F180(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_8F188(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_8F190(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Author.Rationale.CodingKeys()
{
  return &type metadata for Author.Rationale.CodingKeys;
}

unint64_t sub_8F1B0()
{
  unint64_t result;

  result = qword_1F2DC0;
  if (!qword_1F2DC0)
  {
    result = swift_getWitnessTable(&unk_1928B4, &type metadata for Author.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2DC0);
  }
  return result;
}

unint64_t sub_8F1F8()
{
  unint64_t result;

  result = qword_1F2DC8;
  if (!qword_1F2DC8)
  {
    result = swift_getWitnessTable(&unk_19296C, &type metadata for Author.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2DC8);
  }
  return result;
}

unint64_t sub_8F240()
{
  unint64_t result;

  result = qword_1F2DD0;
  if (!qword_1F2DD0)
  {
    result = swift_getWitnessTable(&unk_1928DC, &type metadata for Author.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2DD0);
  }
  return result;
}

unint64_t sub_8F288()
{
  unint64_t result;

  result = qword_1F2DD8;
  if (!qword_1F2DD8)
  {
    result = swift_getWitnessTable(&unk_192904, &type metadata for Author.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2DD8);
  }
  return result;
}

unint64_t sub_8F2D0()
{
  unint64_t result;

  result = qword_1F2DE0;
  if (!qword_1F2DE0)
  {
    result = swift_getWitnessTable(&unk_192824, &type metadata for Author.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2DE0);
  }
  return result;
}

unint64_t sub_8F318()
{
  unint64_t result;

  result = qword_1F2DE8;
  if (!qword_1F2DE8)
  {
    result = swift_getWitnessTable(&unk_19284C, &type metadata for Author.Rationale.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F2DE8);
  }
  return result;
}

uint64_t sub_8F35C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x444965726F7473 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444965726F7473, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C616E6F69746172 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C616E6F69746172, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_8F458(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  _BYTE __src[552];
  _BYTE v14[552];
  _BYTE __dst[552];

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release(v1);
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release(v1);
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release(v1);
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release(v1);
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    sub_892D0((void *)(*(_QWORD *)(v1 + 48) + 552 * v9), __dst);
    sub_8E15C(__dst, sub_8C478);
    sub_16333C(__src, __dst);
    sub_892D0(__src, v14);
    result = sub_8E15C(v14, sub_8C620);
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release(v1);
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release(v1);
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_8F5F8(_QWORD *result)
{
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  _BYTE __src[552];
  _QWORD v14[69];
  _QWORD __dst[69];

  v1 = result;
  v2 = 0;
  v3 = result + 7;
  v4 = 1 << *((_BYTE *)result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & result[7];
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return (_QWORD *)swift_release(v1);
    v11 = v3[v10];
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return (_QWORD *)swift_release(v1);
      v11 = v3[v2];
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return (_QWORD *)swift_release(v1);
        v11 = v3[v2];
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return (_QWORD *)swift_release(v1);
          v11 = v3[v2];
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    memcpy(__dst, (const void *)(v1[6] + 552 * v9), 0x221uLL);
    sub_6100(__dst);
    sub_1629CC(__src, __dst);
    memcpy(v14, __src, 0x221uLL);
    result = sub_6228(v14);
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return (_QWORD *)swift_release(v1);
  v11 = v3[v12];
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return (_QWORD *)swift_release(v1);
    v11 = v3[v2];
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_8F780(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = 0;
  v3 = result + 64;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release(v1);
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release(v1);
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release(v1);
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release(v1);
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = sub_1628D4(&v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release(v1);
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release(v1);
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_8F8C8(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v10 >= v7)
      return swift_release(v1);
    v11 = *(_QWORD *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      v2 = v10 + 1;
      if (v10 + 1 >= v7)
        return swift_release(v1);
      v11 = *(_QWORD *)(v3 + 8 * v2);
      if (!v11)
      {
        v2 = v10 + 2;
        if (v10 + 2 >= v7)
          return swift_release(v1);
        v11 = *(_QWORD *)(v3 + 8 * v2);
        if (!v11)
        {
          v2 = v10 + 3;
          if (v10 + 3 >= v7)
            return swift_release(v1);
          v11 = *(_QWORD *)(v3 + 8 * v2);
          if (!v11)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    result = sub_1628D4(&v13, *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v9));
  }
  v12 = v10 + 4;
  if (v12 >= v7)
    return swift_release(v1);
  v11 = *(_QWORD *)(v3 + 8 * v12);
  if (v11)
  {
    v2 = v12;
    goto LABEL_22;
  }
  while (1)
  {
    v2 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v2 >= v7)
      return swift_release(v1);
    v11 = *(_QWORD *)(v3 + 8 * v2);
    ++v12;
    if (v11)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for HardcodedMediaTypesRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization40HardcodedMediaTypesRecommendationService);
}

uint64_t sub_8FA30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *v1;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  return swift_task_switch(sub_8FA4C, 0, 0);
}

uint64_t sub_8FA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::Int v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  swift_bridgeObjectRetain(v1);
  v3 = sub_8FC44(v2, v1);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(Swift::Int))(v0 + 8))(v3);
}

uint64_t sub_8FAB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  char v17;
  _QWORD *v18;

  v5 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain(a2);
  v11 = 0;
  while (1)
  {
    while (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v11 << 6);
      if (*(_QWORD *)(a3 + 16))
      {
LABEL_20:
        result = sub_3933C(*(_BYTE *)(*(_QWORD *)(a2 + 48) + v13));
        if ((v17 & 1) != 0)
        {
          v18 = (_QWORD *)swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * result));
          result = (uint64_t)sub_8F5F8(v18);
        }
      }
    }
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v9)
      goto LABEL_26;
    v15 = *(_QWORD *)(v5 + 8 * v11);
    if (!v15)
      break;
LABEL_19:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_20;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_18;
  v16 = v11 + 2;
  if (v11 + 2 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_18;
  v16 = v11 + 3;
  if (v11 + 3 >= v9)
    goto LABEL_26;
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
    goto LABEL_18;
  v16 = v11 + 4;
  if (v11 + 4 >= v9)
  {
LABEL_26:
    swift_release(a2);
    return a1;
  }
  v15 = *(_QWORD *)(v5 + 8 * v16);
  if (v15)
  {
LABEL_18:
    v11 = v16;
    goto LABEL_19;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v9)
      goto LABEL_26;
    v15 = *(_QWORD *)(v5 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_19;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Int sub_8FC44(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD v33[9];
  _QWORD *v34;

  v4 = _swiftEmptyDictionarySingleton;
  v5 = *(_QWORD *)(a1 + 64);
  v31 = a1 + 64;
  v34 = _swiftEmptyDictionarySingleton;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v30 = (unint64_t)(63 - v6) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v32 = 0;
  while (1)
  {
    if (v8)
    {
      v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v18 = v17 | (v32 << 6);
      goto LABEL_29;
    }
    v19 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v19 >= v30)
      goto LABEL_43;
    v20 = *(_QWORD *)(v31 + 8 * v19);
    if (!v20)
      break;
LABEL_28:
    v8 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v19 << 6);
    v32 = v19;
LABEL_29:
    v22 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + v18);
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v18);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(a2);
    v24 = sub_8FAB0((uint64_t)&_swiftEmptySetSingleton, v23, a2);
    swift_bridgeObjectRelease(a2);
    v25 = v4[2];
    if (v4[3] <= v25)
    {
      sub_15A918(v25 + 1, 1);
      v4 = v34;
    }
    Hasher.init(_seed:)(v33, v4[5]);
    if (v22)
      v10 = 0x6F6F626F69647561;
    else
      v10 = 0x6B6F6F6265;
    if (v22)
      v11 = 0xE90000000000006BLL;
    else
      v11 = 0xE500000000000000;
    String.hash(into:)(v33, v10, v11);
    swift_bridgeObjectRelease(v11);
    result = Hasher._finalize()();
    v12 = v4 + 8;
    v13 = -1 << *((_BYTE *)v4 + 32);
    v14 = result & ~v13;
    v15 = v14 >> 6;
    if (((-1 << v14) & ~v4[(v14 >> 6) + 8]) != 0)
    {
      v16 = __clz(__rbit64((-1 << v14) & ~v4[(v14 >> 6) + 8])) | v14 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v13) >> 6;
      do
      {
        if (++v15 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v15 == v27;
        if (v15 == v27)
          v15 = 0;
        v26 |= v28;
        v29 = v12[v15];
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v15 << 6);
    }
    *(_QWORD *)((char *)v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_BYTE *)(v4[6] + v16) = v22;
    *(_QWORD *)(v4[7] + 8 * v16) = v24;
    ++v4[2];
    result = swift_bridgeObjectRelease(v23);
  }
  v21 = v32 + 2;
  if (v32 + 2 >= v30)
    goto LABEL_43;
  v20 = *(_QWORD *)(v31 + 8 * v21);
  if (v20)
    goto LABEL_27;
  v21 = v32 + 3;
  if (v32 + 3 >= v30)
    goto LABEL_43;
  v20 = *(_QWORD *)(v31 + 8 * v21);
  if (v20)
    goto LABEL_27;
  v21 = v32 + 4;
  if (v32 + 4 >= v30)
    goto LABEL_43;
  v20 = *(_QWORD *)(v31 + 8 * v21);
  if (v20)
    goto LABEL_27;
  v21 = v32 + 5;
  if (v32 + 5 >= v30)
  {
LABEL_43:
    sub_5FEC(a1);
    return (Swift::Int)v4;
  }
  v20 = *(_QWORD *)(v31 + 8 * v21);
  if (v20)
  {
LABEL_27:
    v19 = v21;
    goto LABEL_28;
  }
  while (1)
  {
    v19 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v19 >= v30)
      goto LABEL_43;
    v20 = *(_QWORD *)(v31 + 8 * v19);
    ++v21;
    if (v20)
      goto LABEL_28;
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t RecommendationSource.init(rawValue:)@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9E98, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

uint64_t RecommendationSource.rawValue.getter()
{
  return 1769105779;
}

unint64_t sub_90004()
{
  unint64_t result;

  result = qword_1F2E98;
  if (!qword_1F2E98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationSource, &type metadata for RecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F2E98);
  }
  return result;
}

Swift::Int sub_90048()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 1769105779, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_90090(uint64_t a1)
{
  return String.hash(into:)(a1, 1769105779, 0xE400000000000000);
}

Swift::Int sub_900A0(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 1769105779, 0xE400000000000000);
  return Hasher._finalize()();
}

uint64_t sub_900E4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1D9ED0, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_90134(_QWORD *a1@<X8>)
{
  *a1 = 1769105779;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_90148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_9028C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_901A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_9028C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t storeEnumTagSinglePayload for RecommendationSource(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_90230 + 4 * byte_192A90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_90250 + 4 * byte_192A95[v4]))();
}

_BYTE *sub_90230(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_90250(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_90258(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_90260(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_90268(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_90270(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RecommendationSource()
{
  return &type metadata for RecommendationSource;
}

unint64_t sub_9028C()
{
  unint64_t result;

  result = qword_1F2EA0;
  if (!qword_1F2EA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RecommendationSource, &type metadata for RecommendationSource);
    atomic_store(result, (unint64_t *)&qword_1F2EA0);
  }
  return result;
}

uint64_t sub_902D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v30[3];
  _QWORD v31[4];

  v6 = v4;
  v10 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v30[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_418BC(a1, (uint64_t)v12, &qword_1F15F0);
  v13 = type metadata accessor for TaskPriority(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13);
  if ((_DWORD)v15 == 1)
  {
    sub_417D8((uint64_t)v12, &qword_1F15F0);
    v16 = 12544;
    v17 = *(_QWORD *)(a3 + 16);
    if (v17)
    {
LABEL_3:
      v18 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v17);
      swift_unknownObjectRetain(v17);
      v20 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v18);
      v22 = v21;
      swift_unknownObjectRelease(v17);
      goto LABEL_6;
    }
  }
  else
  {
    v23 = TaskPriority.rawValue.getter(v15);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v16 = v23 | 0x3100;
    v17 = *(_QWORD *)(a3 + 16);
    if (v17)
      goto LABEL_3;
  }
  v20 = 0;
  v22 = 0;
LABEL_6:
  v24 = *v6;
  v25 = sub_5EDC(a4);
  v26 = (_QWORD *)(v22 | v20);
  if (v22 | v20)
  {
    v31[0] = 0;
    v31[1] = 0;
    v26 = v31;
    v31[2] = v20;
    v31[3] = v22;
  }
  v30[0] = 1;
  v30[1] = v26;
  v30[2] = v24;
  v27 = swift_task_create(v16, v30, v25, a2, a3);
  return swift_release(v27);
}

Swift::Int sub_9046C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0AE0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_9E854(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_904D4()
{
  uint64_t v0;

  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_904F0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_904FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for RequestListActor.ActorType();
  v1 = swift_allocObject(v0, 112, 15);
  result = swift_defaultActor_initialize();
  qword_1F2EA8 = v1;
  return result;
}

double sub_90560@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double result;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21[4];

  sub_418BC(a1, (uint64_t)v21, &qword_1F0E78);
  if (v21[3])
  {
    v3 = sub_5EDC(&qword_1F3108);
    if ((swift_dynamicCast(&v20, v21, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
    {
      v4 = v20;
      v5 = objc_msgSend(objc_allocWithZone((Class)NSMutableArray), "init");
      v6 = *(_QWORD *)(v4 + 16);
      if (v6)
      {
        swift_bridgeObjectRetain(v4);
        v7 = 0;
        do
        {
          v8 = *(_QWORD *)(v4 + 8 * v7++ + 32);
          v9 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v8);
          objc_msgSend(v5, "addObject:", v9);

        }
        while (v6 != v7);
        swift_bridgeObjectRelease(v4);
      }
      swift_bridgeObjectRelease(v4);
      v10 = (void *)objc_opt_self(NSKeyedArchiver);
      v21[0] = 0;
      v11 = objc_msgSend(v10, "archivedDataWithRootObject:requiringSecureCoding:error:", v5, 1, v21);
      v12 = v21[0];
      if (v11)
      {
        v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v15 = v14;

        *(_QWORD *)(a2 + 24) = &type metadata for Data;
        *(_QWORD *)a2 = v13;
        *(_QWORD *)(a2 + 8) = v15;
        return result;
      }
      v17 = v12;
      v18 = _convertNSErrorToError(_:)(v12);

      swift_willThrow(v19);
      swift_errorRelease(v18);
    }
  }
  else
  {
    sub_417D8((uint64_t)v21, &qword_1F0E78);
  }
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_90760@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  id v35;
  _BYTE v36[32];
  _OWORD v37[2];
  __int128 v38;
  uint64_t v39;
  _QWORD v40[5];

  v4 = type metadata accessor for NSFastEnumerationIterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_418BC(a1, (uint64_t)v40, &qword_1F0E78);
  if (!v40[3])
    goto LABEL_17;
  v8 = sub_A1CD0(0, &qword_1F30D8, NSData_ptr);
  result = swift_dynamicCast(&v38, v40, (char *)&type metadata for Any + 8, v8, 6);
  if ((result & 1) == 0)
  {
LABEL_18:
    *a2 = 0u;
    a2[1] = 0u;
    return result;
  }
  v34 = a2;
  v32 = v5;
  v10 = (void *)v38;
  sub_A1CD0(0, &qword_1F30E0, NSKeyedUnarchiver_ptr);
  v11 = sub_5EDC(&qword_1F30E8);
  v12 = swift_allocObject(v11, 48, 7);
  *(_OWORD *)(v12 + 16) = xmmword_18FC00;
  v13 = sub_A1CD0(0, &qword_1F30F0, NSArray_ptr);
  *(_QWORD *)(v12 + 32) = v13;
  v14 = sub_A1CD0(0, &qword_1F30F8, NSNumber_ptr);
  *(_QWORD *)(v12 + 40) = v14;
  v15 = v10;
  v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v18 = v17;

  static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v40, v12, v16, v18);
  sub_3E21C(v16, v18);
  v33 = v14;
  swift_bridgeObjectRelease(v12);
  sub_418BC((uint64_t)v40, (uint64_t)&v38, &qword_1F0E78);
  if (!v39)
  {

    sub_417D8((uint64_t)&v38, &qword_1F0E78);
LABEL_16:
    a2 = v34;
LABEL_17:
    result = sub_417D8((uint64_t)v40, &qword_1F0E78);
    goto LABEL_18;
  }
  if ((swift_dynamicCast(v37, &v38, (char *)&type metadata for Any + 8, v13, 6) & 1) == 0)
  {

    goto LABEL_16;
  }
  v19 = *(id *)&v37[0];
  NSArray.makeIterator()();
  v31 = v19;

  v20 = sub_41754(&qword_1F3100, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(v4, v20);
  if (v39)
  {
    v21 = _swiftEmptyArrayStorage;
    v22 = v33;
    v23 = v20;
    do
    {
      sub_41900(&v38, v37);
      sub_41910((uint64_t)v37, (uint64_t)v36);
      if (swift_dynamicCast(&v35, v36, (char *)&type metadata for Any + 8, v22, 6))
      {
        v24 = v35;
        v25 = objc_msgSend(v35, "integerValue");
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = sub_30214(0, v21[2] + 1, 1, v21);
        v27 = v21[2];
        v26 = v21[3];
        if (v27 >= v26 >> 1)
          v21 = sub_30214((_QWORD *)(v26 > 1), v27 + 1, 1, v21);
        v21[2] = v27 + 1;
        v21[v27 + 4] = v25;

        v22 = v33;
        v20 = v23;
      }
      sub_62F8(v37);
      dispatch thunk of IteratorProtocol.next()(v4, v20);
    }
    while (v39);
  }
  else
  {
    v21 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v4);

  v28 = sub_5EDC(&qword_1F3108);
  v29 = v34;
  *((_QWORD *)v34 + 3) = v28;

  *v29 = v21;
  return sub_417D8((uint64_t)v40, &qword_1F0E78);
}

id sub_90B74(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, _OWORD *))
{
  id v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _OWORD v17[2];
  _QWORD v18[3];
  uint64_t v19;

  if (a3)
  {
    v7 = a1;
    v8 = swift_unknownObjectRetain(a3);
    _bridgeAnyObjectToAny(_:)(v17, v8);
    swift_unknownObjectRelease(a3);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    v9 = a1;
  }
  a4(v18, v17);

  sub_417D8((uint64_t)v17, &qword_1F0E78);
  v10 = v19;
  if (!v19)
    return 0;
  v11 = sub_49F4(v18, v19);
  v12 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v14);
  v15 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v14, v10);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v10);
  sub_62F8(v18);
  return v15;
}

NSString sub_90C90()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_224588 = (uint64_t)result;
  return result;
}

id sub_90D00()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GenrePathTransformer();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_90D34()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_224590);
  sub_5216C(v0, (uint64_t)qword_224590);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD000000000000022, 0x80000000001A15D0);
}

uint64_t MetadataCache.__allocating_init(bookFetchService:genreFetchService:maxItemCount:subfolder:)(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;

  v11 = swift_allocObject(v5, 184, 7);
  MetadataCache.init(bookFetchService:genreFetchService:maxItemCount:subfolder:)(a1, a2, a3, a4, a5);
  return v11;
}

_QWORD *MetadataCache.init(bookFetchService:genreFetchService:maxItemCount:subfolder:)(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void **v26;
  void **v27;
  id v28;
  void *v29;
  uint64_t ObjCClassFromMetadata;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  NSString v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  NSURL *v41;
  void *v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  char *v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t inited;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  _QWORD v76[9];
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char v87[28];
  uint64_t v88;

  v6 = v5;
  v77 = a4;
  v11 = *v5;
  v80 = type metadata accessor for NSPersistentStore.StoreType(0);
  v78 = *(_QWORD *)(v80 - 8);
  v12 = __chkstk_darwin(v80);
  v76[8] = (char *)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)v76 - v14;
  v86 = type metadata accessor for URL(0);
  v83 = *(_QWORD *)(v86 - 8);
  v16 = __chkstk_darwin(v86);
  v76[6] = (char *)v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v76[7] = (char *)v76 - v19;
  v20 = __chkstk_darwin(v18);
  v85 = (char *)v76 - v21;
  v22 = __chkstk_darwin(v20);
  v84 = (uint64_t)v76 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)v76 - v24;
  *((_OWORD *)v6 + 3) = 0u;
  v26 = (void **)(v6 + 6);
  v6[2] = 25;
  v6[3] = 0;
  v27 = (void **)(v6 + 3);
  v6[4] = 0;
  *((_OWORD *)v6 + 4) = 0u;
  v6[10] = 0x417E133800000000;
  v6[11] = _swiftEmptyDictionarySingleton;
  v6[12] = _swiftEmptyDictionarySingleton;
  v82 = a1;
  sub_3DD40((uint64_t)a1, (uint64_t)(v6 + 13));
  v81 = a2;
  sub_3DD40((uint64_t)a2, (uint64_t)(v6 + 18));
  v6[5] = a3;
  v28 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GenrePathTransformer()), "init");
  v29 = (void *)objc_opt_self(NSValueTransformer);
  if (qword_1F00C0 != -1)
    swift_once(&qword_1F00C0, sub_90C90);
  objc_msgSend(v29, "setValueTransformer:forName:", v28, qword_224588);

  v79 = v11;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v11);
  v31 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v88 = type metadata accessor for CachedPersonalizationBookMetadata();
  v32 = sub_5EDC(&qword_1F2EB0);
  String.init<A>(describing:)(&v88, v32);
  v34 = v33;
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  v36 = String._bridgeToObjectiveC()();
  v37 = objc_msgSend(v31, "pathForResource:ofType:", v35, v36);

  v38 = v86;
  if (v37)
  {
    v39 = objc_msgSend((id)objc_opt_self(NSURL), "fileURLWithPath:isDirectory:", v37, 1);

    static URL._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v40 = objc_allocWithZone((Class)NSManagedObjectModel);
    URL._bridgeToObjectiveC()(v41);
    v43 = v42;
    v44 = objc_msgSend(v40, "initWithContentsOfURL:", v42);

    (*(void (**)(char *, uint64_t))(v83 + 8))(v25, v38);
    v45 = *v27;
    *v27 = v44;

  }
  v46 = *v27;
  v47 = v85;
  if (!v46)
  {
    swift_bridgeObjectRelease(a5);
    v66 = (void *)v6[4];
    if (!v66)
      goto LABEL_9;
LABEL_8:
    v70 = objc_allocWithZone((Class)NSManagedObjectContext);
    v71 = v66;
    v72 = objc_msgSend(v70, "initWithConcurrencyType:", 1);
    objc_msgSend(v72, "setUndoManager:", 0);
    v73 = *v26;
    *v26 = v72;
    v74 = v72;

    objc_msgSend(v74, "setPersistentStoreCoordinator:", v71);
    goto LABEL_9;
  }
  v48 = objc_allocWithZone((Class)NSPersistentStoreCoordinator);
  v49 = v46;
  v50 = objc_msgSend(v48, "initWithManagedObjectModel:", v49);
  v51 = (void *)v6[4];
  v6[4] = v50;
  v52 = v50;

  v53 = v6[8];
  v6[7] = v77;
  v6[8] = a5;
  swift_bridgeObjectRelease(v53);
  v54 = v6[7];
  v55 = v6[8];
  swift_bridgeObjectRetain(v55);
  v56 = v6;
  v57 = v84;
  static MetadataCache.persistentStoreDirectory(subfolder:)(v54, v55, v84);
  swift_bridgeObjectRelease(v55);
  v58 = v56[7];
  v59 = v56[8];
  v77 = v56;
  swift_bridgeObjectRetain(v59);
  static MetadataCache.recreatePersistentStoreDirectory(subfolder:)(v58, v59);
  swift_bridgeObjectRelease(v59);
  URL.appendingPathComponent(_:)(0xD000000000000010);
  v60 = sub_5EDC(&qword_1F2EB8);
  inited = swift_initStackObject(v60, v87);
  *(_OWORD *)(inited + 16) = xmmword_18FC00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSInferMappingModelAutomaticallyOption);
  *(_QWORD *)(inited + 40) = v62;
  *(_BYTE *)(inited + 48) = 1;
  *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSMigratePersistentStoresAutomaticallyOption);
  *(_QWORD *)(inited + 64) = v63;
  *(_BYTE *)(inited + 72) = 1;
  v64 = sub_534C8(inited);
  static NSPersistentStore.StoreType.sqlite.getter(v64);
  v65 = sub_91FCC(v64);
  v67 = (void *)NSPersistentStoreCoordinator.addPersistentStore(type:configuration:at:options:)(v15, 0, 0, v47, v65);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v15, v80);

  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v65);
  v68 = *(void (**)(char *, uint64_t))(v83 + 8);
  v69 = v86;
  v68(v47, v86);
  v68((char *)v57, v69);

  v6 = v77;
  v66 = (void *)v77[4];
  if (v66)
    goto LABEL_8;
LABEL_9:
  sub_62F8(v81);
  sub_62F8(v82);
  return v6;
}

uint64_t type metadata accessor for GenrePathTransformer()
{
  return objc_opt_self(_TtC20BooksPersonalization20GenrePathTransformer);
}

uint64_t static MetadataCache.persistentStoreDirectory(subfolder:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v14 = 1;
  v15 = objc_msgSend(v13, "URLsForDirectory:inDomains:", 13, 1);

  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v6);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, v16+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * (v17 - 1), v6);
    v14 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, v14, 1, v6);
  swift_bridgeObjectRelease(v16);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v19 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    v19(a3, v12, v6);
    v27 = v3;
    v20 = sub_5EDC(&qword_1F2EC8);
    v21 = String.init<A>(describing:)(&v27, v20);
    v23 = v22;
    URL.appendingPathComponent(_:)(v21);
    swift_bridgeObjectRelease(v23);
    v24 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v24(a3, v6);
    v19(a3, v9, v6);
    result = v26;
    if (a2)
    {
      v25 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0)
        v25 = v26 & 0xFFFFFFFFFFFFLL;
      if (v25)
      {
        URL.appendingPathComponent(_:)(v26);
        v24(a3, v6);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v19)(a3, v9, v6);
      }
    }
  }
  return result;
}

unint64_t static MetadataCache.persistentStoreFileName()()
{
  return 0xD000000000000010;
}

uint64_t static MetadataCache.recreatePersistentStoreDirectory(subfolder:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t (*v13)(char *, uint64_t);
  id v14;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MetadataCache.persistentStoreDirectory(subfolder:)(a1, a2, (uint64_t)v7);
  v8 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v9);
  v11 = v10;
  v20 = 0;
  LODWORD(a1) = objc_msgSend(v8, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v10, 1, 0, &v20);

  v12 = v20;
  if ((_DWORD)a1)
  {
    v13 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    v14 = v20;
    return v13(v7, v4);
  }
  else
  {
    v16 = v20;
    v17 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v18);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_errorRelease(v17);
  }
}

uint64_t sub_91FCC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_5EDC(&qword_1F32A8);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13);
    *(_QWORD *)&v39[0] = *v18;
    *((_QWORD *)&v39[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7);
    v30 = v20;
    swift_dynamicCast(v34, &v30, &type metadata for Bool, (char *)&type metadata for Any + 8, 7);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_41900(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_41900(v38, v39);
    sub_41900(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~v7[v22 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~v7[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = v7[v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_41900(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_5FEC(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t MetadataCache.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  if (v1)
  {
    swift_retain(*(_QWORD *)(v0 + 72));
    sub_5EDC(&qword_1F1348);
    Task.cancel()();
    swift_release(v1);
  }

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  sub_62F8((_QWORD *)(v0 + 104));
  sub_62F8((_QWORD *)(v0 + 144));
  return v0;
}

uint64_t MetadataCache.__deallocating_deinit()
{
  uint64_t v0;

  MetadataCache.deinit();
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t MetadataCache.fetchMetadataFor(bookIDs:audiobookIDs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  return swift_task_switch(sub_92458, 0, 0);
}

uint64_t sub_92458()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  int *v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(void **)(v1 + 48);
  *(_QWORD *)(v0 + 88) = v2;
  if (v2)
  {
    v3 = v2;
    v4 = swift_task_alloc(64);
    *(_QWORD *)(v0 + 96) = v4;
    v5 = *(_OWORD *)(v0 + 64);
    *(_QWORD *)(v4 + 16) = v3;
    *(_OWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 40) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v4 + 48) = v1;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 104) = v6;
    v7 = sub_5EDC(&qword_1F2ED8);
    *v6 = v0;
    v6[1] = sub_925B0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 56, 0, 0, 0xD00000000000003BLL, 0x80000000001A0FB0, sub_9E074, v4, v7);
  }
  else
  {
    sub_3DD40(v1 + 104, v0 + 16);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    sub_49F4((_QWORD *)(v0 + 16), v9);
    v11 = *(int **)(v10 + 8);
    v13 = (int *)((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc(v11[1]);
    *(_QWORD *)(v0 + 120) = v12;
    *v12 = v0;
    v12[1] = sub_92690;
    return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v13)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), v9, v10);
  }
}

uint64_t sub_925B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_92658;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 96));
    v4 = sub_9261C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_9261C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_92658()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_92690(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_9273C;
  }
  else
  {
    *(_QWORD *)(v4 + 136) = a1;
    v6 = sub_92704;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_92704()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 136));
}

uint64_t sub_9273C()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MetadataCache.fetchMetadataFor(storeIDs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v1;
  return swift_task_switch(sub_92788, 0, 0);
}

uint64_t sub_92788()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  int *v13;

  v1 = v0[9];
  v2 = *(void **)(v1 + 48);
  v0[10] = v2;
  if (v2)
  {
    v3 = v0[8];
    v4 = v2;
    v5 = (_QWORD *)swift_task_alloc(64);
    v0[11] = v5;
    v5[2] = v4;
    v5[3] = _swiftEmptyArrayStorage;
    v5[4] = _swiftEmptyArrayStorage;
    v5[5] = v3;
    v5[6] = v1;
    v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    v0[12] = v6;
    v7 = sub_5EDC(&qword_1F2ED8);
    *v6 = v0;
    v6[1] = sub_928E4;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD00000000000003BLL, 0x80000000001A0FB0, sub_9E074, v5, v7);
  }
  else
  {
    sub_3DD40(v1 + 104, (uint64_t)(v0 + 2));
    v9 = v0[5];
    v10 = v0[6];
    sub_49F4(v0 + 2, v9);
    v11 = *(int **)(v10 + 16);
    v13 = (int *)((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc(v11[1]);
    v0[14] = v12;
    *v12 = v0;
    v12[1] = sub_929C4;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v13)(v0[8], v9, v10);
  }
}

uint64_t sub_928E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_9298C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v4 = sub_92950;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_92950()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);

  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_9298C()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_929C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_92A70;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_92A38;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_92A38()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t sub_92A70()
{
  uint64_t v0;

  sub_62F8((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t MetadataCache.cacheEntryCount()()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_92AC4, 0, 0);
}

uint64_t sub_92AC4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_92B64;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000011, 0x80000000001A0FF0, sub_9E088, v1, &type metadata for UInt);
}

uint64_t sub_92B64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_92BC0, 0, 0);
}

uint64_t sub_92BC0()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

void sub_92BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  _QWORD aBlock[5];
  uint64_t v19;

  v6 = sub_5EDC(&qword_1F31C0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(void **)(a2 + 48);
  if (v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    v11 = *(unsigned __int8 *)(v7 + 80);
    v12 = (v11 + 24) & ~v11;
    v13 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
    v14 = swift_allocObject(&unk_1E2470, v13 + 8, v11 | 7);
    *(_QWORD *)(v14 + 16) = v10;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v14 + v12, v9, v6);
    *(_QWORD *)(v14 + v13) = a3;
    aBlock[4] = sub_A18E0;
    v19 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_173138;
    aBlock[3] = &unk_1E2488;
    v15 = _Block_copy(aBlock);
    v16 = v19;
    v17 = v10;
    swift_release(v16);
    objc_msgSend(v17, "performBlock:", v15);
    _Block_release(v15);

  }
  else
  {
    aBlock[0] = 0;
    CheckedContinuation.resume(returning:)(aBlock, v6);
  }
}

void sub_92D44()
{
  uint64_t v0;
  objc_class *ObjCClassFromMetadata;
  NSString *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v0 = type metadata accessor for CachedPersonalizationBookMetadata();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v0);
  v2 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v4 = v3;

  v5 = objc_allocWithZone((Class)NSFetchRequest);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v7 = objc_msgSend(v5, "initWithEntityName:", v6);

  v8 = NSManagedObjectContext.count<A>(for:)(v7, v0);
  if (v8 < 0)
  {
    v10 = 2;
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, v10, 3451, 0);
    __break(1u);
  }
  else
  {
    v11 = v8;
    v9 = sub_5EDC(&qword_1F31C0);
    CheckedContinuation.resume(returning:)(&v11, v9);

  }
}

void sub_92F50(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  char *v25;

  v23 = a6;
  v11 = sub_5EDC(&qword_1F31C8);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 56) & ~v15;
  v17 = (char *)swift_allocObject(&unk_1E24C0, v16 + v13, v15 | 7);
  *((_QWORD *)v17 + 2) = a3;
  *((_QWORD *)v17 + 3) = a4;
  *((_QWORD *)v17 + 4) = a5;
  *((_QWORD *)v17 + 5) = a2;
  v18 = v23;
  *((_QWORD *)v17 + 6) = v23;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v17[v16], v14, v11);
  aBlock[4] = sub_A19C0;
  v25 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_173138;
  aBlock[3] = &unk_1E24D8;
  v19 = _Block_copy(aBlock);
  v20 = v25;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a5);
  v21 = a2;
  swift_retain(v18);
  swift_release(v20);
  objc_msgSend(v21, "performBlock:", v19);
  _Block_release(v19);
}

void sub_930D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  objc_class *ObjCClassFromMetadata;
  NSString *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  Class isa;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  int64_t v45;
  uint64_t i;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  void *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  void *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  _QWORD *v90;
  void *v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  id j;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[2];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v104 = a6;
  v105 = a5;
  v10 = sub_5EDC(&qword_1F31C8);
  v98 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v95 = v11;
  v97 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v12);
  v96 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_bridgeObjectRetain(a1);
  v15 = sub_3CD28(v14);
  swift_bridgeObjectRelease(a1);
  v111 = v15;
  swift_bridgeObjectRetain(v15);
  v16 = swift_bridgeObjectRetain(a2);
  v17 = sub_3CD28(v16);
  swift_bridgeObjectRelease(a2);
  v110 = v17;
  swift_bridgeObjectRetain(v17);
  v18 = swift_bridgeObjectRetain(a3);
  v19 = sub_3CD28(v18);
  swift_bridgeObjectRelease(a3);
  v109 = v19;
  swift_bridgeObjectRetain(v19);
  v20 = sub_153150(v17, v15);
  v21 = sub_153150(v19, v20);
  v108 = v21;
  v22 = type metadata accessor for CachedPersonalizationBookMetadata();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v22);
  swift_bridgeObjectRetain(v21);
  v24 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v26 = v25;

  v27 = objc_allocWithZone((Class)NSFetchRequest);
  v28 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v26);
  v29 = (uint64_t)objc_msgSend(v27, "initWithEntityName:", v28);

  v30 = sub_5EDC(&qword_1F3118);
  v31 = swift_allocObject(v30, 96, 7);
  *(_OWORD *)(v31 + 16) = xmmword_18FC00;
  *(_QWORD *)(v31 + 56) = &type metadata for String;
  *(_QWORD *)(v31 + 32) = 0x44497465737361;
  *(_QWORD *)(v31 + 40) = 0xE700000000000000;
  *(_QWORD *)(v31 + 88) = sub_5EDC(&qword_1F2700);
  *(_QWORD *)(v31 + 64) = v21;
  v32 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v31);
  v34 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v32, isa);

  objc_msgSend((id)v29, "setPredicate:", v34);
  v35 = NSManagedObjectContext.fetch<A>(_:)(v29, v22);
  v106 = v10;
  v99 = a4;
  v36 = v35;
  v103 = 0;
  v107[0] = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)v35 >> 62)
  {
    if (v35 < 0)
      v94 = v35;
    else
      v94 = v35 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v35);
    v37 = _CocoaArrayWrapper.endIndex.getter(v94);
    if (v37)
      goto LABEL_3;
LABEL_68:
    swift_bridgeObjectRelease(v36);
    v51 = (uint64_t)_swiftEmptyArrayStorage;
    v45 = (int64_t)_swiftEmptyArrayStorage;
    goto LABEL_21;
  }
  v37 = *(_QWORD *)((char *)&dword_10 + (v35 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v35);
  if (!v37)
    goto LABEL_68;
LABEL_3:
  if (v37 < 1)
  {
    __break(1u);
LABEL_70:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return;
  }
  v38 = 0;
  v39 = v36 & 0xC000000000000001;
  v40 = v36;
  do
  {
    if (v39)
      v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
    else
      v43 = *(id *)(v36 + 8 * v38 + 32);
    v44 = v43;
    if (objc_msgSend(v43, "genresKnown"))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v41 = *(_QWORD *)(v107[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
      v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v44);
      specialized ContiguousArray._endMutation()(v42);
      v36 = v40;
    }
    else
    {

    }
    ++v38;
  }
  while (v37 != v38);
  swift_bridgeObjectRelease(v36);
  v45 = v107[0];
  v107[0] = (uint64_t)_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v36);
  for (i = 0; i != v37; ++i)
  {
    if (v39)
      v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v36);
    else
      v49 = *(id *)(v36 + 8 * i + 32);
    v50 = v49;
    if ((objc_msgSend(v49, "genresKnown") & 1) != 0)
    {

    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v47 = *(_QWORD *)(v107[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v47);
      v48 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v50);
      specialized ContiguousArray._endMutation()(v48);
      v36 = v40;
    }
  }
  swift_bridgeObjectRelease(v36);
  v51 = v107[0];
LABEL_21:
  v101 = v36;
  if ((unint64_t)v45 >> 62)
    goto LABEL_36;
  v52 = *(_QWORD *)((char *)&dword_10 + (v45 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v45);
  for (j = (id)v29; v52; j = (id)v29)
  {
    v53 = _swiftEmptyArrayStorage;
    v29 = 4;
    while (1)
    {
      v54 = (v45 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29 - 4, v45)
          : *(id *)(v45 + 8 * v29);
      v55 = v54;
      v56 = v29 - 3;
      if (__OFADD__(v29 - 4, 1))
        break;
      v57 = (unint64_t)objc_msgSend(v54, "assetID");
      if ((v57 & 0x8000000000000000) != 0)
        goto LABEL_70;
      v58 = v57;

      if ((swift_isUniquelyReferenced_nonNull_native(v53) & 1) == 0)
        v53 = sub_2FA6C(0, v53[2] + 1, 1, v53);
      v60 = v53[2];
      v59 = v53[3];
      if (v60 >= v59 >> 1)
        v53 = sub_2FA6C((_QWORD *)(v59 > 1), v60 + 1, 1, v53);
      v53[2] = v60 + 1;
      v53[v60 + 4] = v58;
      ++v29;
      if (v56 == v52)
        goto LABEL_41;
    }
    __break(1u);
LABEL_36:
    if (v45 < 0)
      v61 = v45;
    else
      v61 = v45 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v45);
    v52 = _CocoaArrayWrapper.endIndex.getter(v61);
  }
  v53 = _swiftEmptyArrayStorage;
LABEL_41:
  swift_bridgeObjectRelease(v45);
  v62 = sub_3CD28((uint64_t)v53);
  swift_bridgeObjectRelease(v53);
  if ((unint64_t)v51 >> 62)
    goto LABEL_57;
  v63 = *(_QWORD *)((char *)&dword_10 + (v51 & 0xFFFFFFFFFFFFF8));
  v100 = v62;
  if (v63)
  {
LABEL_43:
    v64 = 4;
    while (1)
    {
      v62 = v64 - 4;
      if ((v51 & 0xC000000000000001) != 0)
        v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v64 - 4, v51);
      else
        v65 = *(id *)(v51 + 8 * v64);
      v66 = v65;
      v67 = v64 - 3;
      if (__OFADD__(v62, 1))
      {
        __break(1u);
LABEL_57:
        if (v51 < 0)
          v72 = v51;
        else
          v72 = v51 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v51);
        v63 = _CocoaArrayWrapper.endIndex.getter(v72);
        swift_bridgeObjectRelease(v51);
        v100 = v62;
        if (!v63)
          goto LABEL_61;
        goto LABEL_43;
      }
      v68 = (char *)objc_msgSend(v65, "mediaType");
      if (v68 == (_BYTE *)&dword_0 + 1)
        break;
      if (v68 == (_BYTE *)&dword_0 + 2)
      {
        v69 = (uint64_t)objc_msgSend(v66, "assetID");
        if (v69 < 0)
          goto LABEL_70;
        v70 = v69;
LABEL_55:
        sub_1628D4(v107, v70);
        sub_C4454(v70);
      }

      ++v64;
      if (v67 == v63)
        goto LABEL_61;
    }
    v71 = (uint64_t)objc_msgSend(v66, "assetID");
    if (v71 < 0)
      goto LABEL_70;
    v70 = v71;
    goto LABEL_55;
  }
LABEL_61:
  swift_bridgeObjectRelease(v51);
  v73 = v100;
  sub_C4168(v100);
  sub_C4168(v73);
  sub_C4168(v73);
  sub_C4168(v73);
  swift_bridgeObjectRelease(v73);
  v74 = v105;
  swift_retain(v105);
  v75 = sub_9FCA4((uint64_t)_swiftEmptyDictionarySingleton, v45);
  swift_bridgeObjectRelease(v45);
  swift_release(v74);
  v76 = *(_QWORD *)(v108 + 16);
  swift_bridgeObjectRelease(v108);
  if (v76)
  {
    v77 = v111;
    v103 = sub_37DCC(v111);
    swift_bridgeObjectRelease(v77);
    v78 = v110;
    v79 = sub_37DCC(v110);
    swift_bridgeObjectRelease(v78);
    v80 = v109;
    v81 = sub_37DCC(v109);
    swift_bridgeObjectRelease(v80);
    v82 = type metadata accessor for TaskPriority(0);
    v83 = (uint64_t)v96;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 56))(v96, 1, 1, v82);
    v85 = v97;
    v84 = v98;
    v86 = v106;
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v97, v104, v106);
    v87 = *(unsigned __int8 *)(v84 + 80);
    v88 = (v87 + 80) & ~v87;
    v89 = (char *)swift_allocObject(&unk_1E2510, v88 + v95, v87 | 7);
    *((_QWORD *)v89 + 2) = 0;
    *((_QWORD *)v89 + 3) = 0;
    v90 = v103;
    *((_QWORD *)v89 + 4) = v74;
    *((_QWORD *)v89 + 5) = v90;
    *((_QWORD *)v89 + 6) = v79;
    *((_QWORD *)v89 + 7) = v81;
    v91 = v99;
    *((_QWORD *)v89 + 8) = v99;
    *((_QWORD *)v89 + 9) = v75;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v89[v88], v85, v86);
    swift_retain(v74);
    v92 = v91;
    v93 = sub_140F14(v83, (uint64_t)&unk_1F31D8, (uint64_t)v89);
    swift_bridgeObjectRelease(v101);

    swift_release(v93);
  }
  else
  {
    swift_bridgeObjectRelease(v109);
    swift_bridgeObjectRelease(v110);
    swift_bridgeObjectRelease(v111);
    v107[0] = v75;
    CheckedContinuation.resume(returning:)(v107, v106);
    swift_bridgeObjectRelease(v101);

  }
}

uint64_t sub_939FC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  _BOOL8 v39;
  unint64_t v40;
  _BOOL8 v41;
  uint64_t result;
  BOOL v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  id v56;
  _QWORD v57[4];
  _OWORD v58[2];
  __int128 v59;
  uint64_t v60;

  v4 = type metadata accessor for NSFastEnumerationIterator(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)objc_msgSend(a1, "mediaType");
  if (v8 == (_BYTE *)&dword_0 + 2)
  {
    v9 = 1;
  }
  else
  {
    if (v8 != (_BYTE *)&dword_0 + 1)
    {
      v9 = 0;
      v13 = 0;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v41 = 0;
      result = 0;
      v43 = 0;
LABEL_43:
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v13;
      *(_QWORD *)(a2 + 16) = v37;
      *(_QWORD *)(a2 + 24) = v38;
      *(_QWORD *)(a2 + 32) = v39;
      *(_QWORD *)(a2 + 40) = v40;
      *(_QWORD *)(a2 + 48) = v41;
      *(_QWORD *)(a2 + 56) = result;
      *(_BYTE *)(a2 + 64) = v43;
      return result;
    }
    v9 = 0;
  }
  v10 = objc_msgSend(a1, "leafGenres");
  if (!v10)
  {
    v13 = _swiftEmptyArrayStorage;
LABEL_39:
    v44 = (unint64_t)objc_msgSend(a1, "mappedAssetID");
    if ((v44 & 0x8000000000000000) != 0)
      goto LABEL_44;
    v38 = v44;
    v37 = sub_9D71C(a1);
    v45 = (unint64_t)objc_msgSend(a1, "seriesID");
    if ((v45 & 0x8000000000000000) != 0)
      goto LABEL_44;
    v40 = v45;
    result = (uint64_t)objc_msgSend(a1, "mappedSeriesID");
    if (result < 0)
      goto LABEL_44;
    v41 = v40 == 0;
    v39 = v38 == 0;
    v43 = result == 0;
    goto LABEL_43;
  }
  v48 = v5;
  v11 = v10;
  NSSet.makeIterator()();
  v47 = v11;

  v12 = sub_41754(&qword_1F3100, (uint64_t (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator, (uint64_t)&protocol conformance descriptor for NSFastEnumerationIterator);
  dispatch thunk of IteratorProtocol.next()(v4, v12);
  v13 = _swiftEmptyArrayStorage;
  if (!v60)
  {
LABEL_36:
    (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v4);

    goto LABEL_39;
  }
  v14 = (char *)&type metadata for Any + 8;
  v54 = v7;
  v55 = v4;
  v52 = (char *)&type metadata for Any + 8;
  v53 = v12;
  v49 = v9;
  v50 = a2;
  v51 = a1;
  while (1)
  {
    sub_41900(&v59, v58);
    sub_41910((uint64_t)v58, (uint64_t)v57);
    v16 = type metadata accessor for CachedPersonalizationBookMetadataGenre();
    if (!swift_dynamicCast(&v56, v57, v14, v16, 6))
      goto LABEL_9;
    v17 = v56;
    v18 = objc_msgSend(v56, "path");
    if (!v18)
      goto LABEL_21;
    v19 = v18;
    v20 = objc_opt_self(NSArray);
    v21 = swift_dynamicCastObjCClass(v19, v20);
    if (v21)
      break;

LABEL_21:
    v25 = _swiftEmptyArrayStorage;
LABEL_25:
    v29 = (unint64_t)objc_msgSend(v17, "genreID");
    if ((v29 & 0x8000000000000000) != 0)
      goto LABEL_44;
    v30 = v29;
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_30A00(0, v13[2] + 1, 1, v13);
    v32 = v13[2];
    v31 = v13[3];
    if (v32 >= v31 >> 1)
      v13 = sub_30A00((_QWORD *)(v31 > 1), v32 + 1, 1, v13);
    v13[2] = v32 + 1;
    v15 = &v13[2 * v32];
    v15[4] = v30;
    v15[5] = v25;

    v7 = v54;
    v4 = v55;
    v14 = v52;
    v12 = v53;
LABEL_9:
    sub_62F8(v58);
    dispatch thunk of IteratorProtocol.next()(v4, v12);
    if (!v60)
      goto LABEL_36;
  }
  v57[0] = 0;
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v21, v57, &type metadata for Int);

  v22 = v57[0];
  if (!v57[0])
  {
LABEL_23:
    v25 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }
  v23 = *(_QWORD *)(v57[0] + 16);
  if (!v23)
  {
    swift_bridgeObjectRelease(v57[0]);
    goto LABEL_23;
  }
  v57[0] = _swiftEmptyArrayStorage;
  sub_340AC(0, v23, 0);
  v24 = *(_QWORD *)(v22 + 32);
  if (v24 < 0)
    goto LABEL_44;
  v25 = (_QWORD *)v57[0];
  v27 = *(_QWORD *)(v57[0] + 16);
  v26 = *(_QWORD *)(v57[0] + 24);
  if (v27 >= v26 >> 1)
  {
    sub_340AC(v26 > 1, v27 + 1, 1);
    v25 = (_QWORD *)v57[0];
  }
  v25[2] = v27 + 1;
  v25[v27 + 4] = v24;
  v28 = v23 - 1;
  if (!v28)
  {
LABEL_19:
    swift_bridgeObjectRelease(v22);
    v9 = v49;
    a2 = v50;
LABEL_24:
    a1 = v51;
    goto LABEL_25;
  }
  v33 = v27 + 5;
  v34 = (uint64_t *)(v22 + 40);
  while (1)
  {
    v35 = *v34;
    if (*v34 < 0)
      break;
    v57[0] = v25;
    v36 = v25[3];
    if (v33 - 4 >= v36 >> 1)
    {
      sub_340AC(v36 > 1, v33 - 3, 1);
      v25 = (_QWORD *)v57[0];
    }
    v25[2] = v33 - 3;
    v25[v33++] = v35;
    ++v34;
    if (!--v28)
      goto LABEL_19;
  }
LABEL_44:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_93EC8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;

  v8[4] = v16;
  v8[5] = v17;
  v14 = (_QWORD *)swift_task_alloc(dword_1F31E4);
  v8[6] = v14;
  *v14 = v8;
  v14[1] = sub_93F60;
  v14[7] = a8;
  v14[8] = a4;
  v14[5] = a6;
  v14[6] = a7;
  v14[4] = a5;
  v14[9] = *a4;
  return swift_task_switch(sub_940D0, 0, 0);
}

uint64_t sub_93F60(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 48);
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_94058;
  }
  else
  {
    *(_QWORD *)(v4 + 64) = a1;
    v6 = sub_93FD4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_93FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(v2);
  *(_QWORD *)(v0 + 24) = sub_94360(v1, v2, (uint64_t)sub_9FC20, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_9E2F0);
  v3 = sub_5EDC(&qword_1F31C8);
  CheckedContinuation.resume(returning:)(v0 + 24, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_94058()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  v1 = sub_5EDC(&qword_1F31C8);
  CheckedContinuation.resume(throwing:)(v0 + 16, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_940A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v5[9] = *v4;
  return swift_task_switch(sub_940D0, 0, 0);
}

uint64_t sub_940D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = sub_5EDC(&qword_1F31E8);
  v4 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 80) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v1;
  v5 = sub_5EDC(&qword_1F2ED8);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  *(_QWORD *)(v0 + 88) = v6;
  *v6 = v0;
  v6[1] = sub_9419C;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16, v3, v5, 0, 0, &unk_1F31F8, v4, v3);
}

uint64_t sub_9419C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_9432C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 80));
    v4 = sub_94208;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_94208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 104) = v2;
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 112) = v3;
  v4 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = v4;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 120) = v5;
  *v5 = v0;
  v5[1] = sub_942C0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 24, 0, 0, 0xD000000000000015, 0x80000000001A1360, sub_A1BE4, v3, &type metadata for Int);
}

uint64_t sub_942C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_9431C, 0, 0);
}

uint64_t sub_9431C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 104));
}

uint64_t sub_9432C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_94360(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))
{
  uint64_t v4;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v12;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v12 = a2;
  a4(a1, a3, 0, isUniquelyReferenced_nonNull_native, &v12);
  v10 = v12;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v4)
    swift_bridgeObjectRelease(v10);
  return v10;
}

uint64_t MetadataCache.fetchMetadataFor(genreIDs:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = v1;
  return swift_task_switch(sub_94400, 0, 0);
}

uint64_t sub_94400()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  int *v14;

  v1 = v0[9];
  v2 = *(void **)(v1 + 48);
  v0[10] = v2;
  if (v2)
  {
    v3 = v0[8];
    v4 = (_QWORD *)swift_task_alloc(48);
    v0[11] = v4;
    v4[2] = v2;
    v4[3] = v1;
    v4[4] = v3;
    v5 = async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1];
    v6 = v2;
    v7 = (_QWORD *)swift_task_alloc(v5);
    v0[12] = v7;
    v8 = sub_5EDC(&qword_1F2EF8);
    *v7 = v0;
    v7[1] = sub_94550;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD00000000000001BLL, 0x80000000001A1010, sub_9E090, v4, v8);
  }
  else
  {
    sub_3DD40(v1 + 144, (uint64_t)(v0 + 2));
    v10 = v0[5];
    v11 = v0[6];
    sub_49F4(v0 + 2, v10);
    v12 = *(int **)(v11 + 8);
    v14 = (int *)((char *)v12 + *v12);
    v13 = (_QWORD *)swift_task_alloc(v12[1]);
    v0[14] = v13;
    *v13 = v0;
    v13[1] = sub_929C4;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v14)(v0[8], v10, v11);
  }
}

uint64_t sub_94550()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_945F4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v4 = sub_945BC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_945BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 56));
}

uint64_t sub_945F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_94630(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  char *v15;
  id v16;
  _QWORD aBlock[5];
  char *v18;

  v8 = sub_5EDC(&qword_1F3110);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (char *)swift_allocObject(&unk_1E2330, v12 + v10, v11 | 7);
  *((_QWORD *)v13 + 2) = a3;
  *((_QWORD *)v13 + 3) = a2;
  *((_QWORD *)v13 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_9E2A0;
  v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_173138;
  aBlock[3] = &unk_1E2348;
  v14 = _Block_copy(aBlock);
  v15 = v18;
  swift_retain(a3);
  v16 = a2;
  swift_bridgeObjectRetain(a4);
  swift_release(v15);
  objc_msgSend(v16, "performBlock:", v14);
  _Block_release(v14);
}

void sub_94794(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_class *ObjCClassFromMetadata;
  NSString *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  Class isa;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v59 = a4;
  v61 = a1;
  v60 = sub_5EDC(&qword_1F3110);
  v55 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v52 = v6;
  v54 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v7);
  v53 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_A03C8(a2);
  v63 = a3;
  v9 = type metadata accessor for CachedPersonalizationBookMetadataGenre();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v9);
  swift_bridgeObjectRetain_n(a3, 2);
  v11 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v13 = v12;

  v14 = objc_allocWithZone((Class)NSFetchRequest);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v16 = objc_msgSend(v14, "initWithEntityName:", v15);

  v17 = sub_5EDC(&qword_1F3118);
  v18 = swift_allocObject(v17, 96, 7);
  *(_OWORD *)(v18 + 16) = xmmword_18FC00;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  *(_QWORD *)(v18 + 32) = 0x444965726E6567;
  *(_QWORD *)(v18 + 40) = 0xE700000000000000;
  *(_QWORD *)(v18 + 88) = sub_5EDC(&qword_1F2700);
  *(_QWORD *)(v18 + 64) = a3;
  v19 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v18);
  v21 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v19, isa);

  objc_msgSend(v16, "setPredicate:", v21);
  v58 = v16;
  v56 = a2;
  v22 = NSManagedObjectContext.fetch<A>(_:)(v16, v9);
  v33 = v22;
  if ((unint64_t)v22 >> 62)
  {
    if (v22 < 0)
      v34 = v22;
    else
      v34 = v22 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v22);
    v23 = _CocoaArrayWrapper.endIndex.getter(v34);
    v57 = 0;
    if (!v23)
    {
LABEL_20:
      v24 = _swiftEmptyArrayStorage;
LABEL_21:
      swift_bridgeObjectRelease(v33);
      v35 = sub_3CD28((uint64_t)v24);
      swift_bridgeObjectRelease(v24);
      sub_C4168(v35);
      swift_bridgeObjectRelease(v35);
      v36 = v61;
      swift_retain(v61);
      v37 = sub_A0080(_swiftEmptyDictionarySingleton, v33);
      swift_bridgeObjectRelease(v33);
      swift_release(v36);
      v38 = v63;
      if (*(_QWORD *)(v63 + 16))
      {
        v39 = sub_37DCC(v63);
        swift_bridgeObjectRelease(v38);
        v40 = type metadata accessor for TaskPriority(0);
        v41 = (uint64_t)v53;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v53, 1, 1, v40);
        v43 = v54;
        v42 = v55;
        v44 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v59, v60);
        v45 = *(unsigned __int8 *)(v42 + 80);
        v46 = (v45 + 64) & ~v45;
        v47 = (char *)swift_allocObject(&unk_1E2380, v46 + v52, v45 | 7);
        *((_QWORD *)v47 + 2) = 0;
        *((_QWORD *)v47 + 3) = 0;
        *((_QWORD *)v47 + 4) = v36;
        *((_QWORD *)v47 + 5) = v39;
        v48 = v56;
        *((_QWORD *)v47 + 6) = v56;
        *((_QWORD *)v47 + 7) = v37;
        (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v47[v46], v43, v44);
        swift_retain(v36);
        v49 = v48;
        v50 = sub_140F14(v41, (uint64_t)&unk_1F3128, (uint64_t)v47);

        swift_release(v50);
      }
      else
      {
        swift_bridgeObjectRelease(v63);
        v62 = v37;
        CheckedContinuation.resume(returning:)(&v62, v60);

      }
      return;
    }
  }
  else
  {
    v23 = *(_QWORD *)((char *)&dword_10 + (v22 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(v22);
    v57 = 0;
    if (!v23)
      goto LABEL_20;
  }
  v24 = _swiftEmptyArrayStorage;
  v25 = 4;
  while (1)
  {
    v26 = (v33 & 0xC000000000000001) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v33)
        : *(id *)(v33 + 8 * v25);
    v27 = v26;
    v28 = v25 - 3;
    if (__OFADD__(v25 - 4, 1))
      break;
    v29 = (unint64_t)objc_msgSend(v26, "genreID");
    if ((v29 & 0x8000000000000000) != 0)
      goto LABEL_25;
    v30 = v29;

    if ((swift_isUniquelyReferenced_nonNull_native(v24) & 1) == 0)
      v24 = sub_2FA6C(0, v24[2] + 1, 1, v24);
    v32 = v24[2];
    v31 = v24[3];
    if (v32 >= v31 >> 1)
      v24 = sub_2FA6C((_QWORD *)(v31 > 1), v32 + 1, 1, v24);
    v24[2] = v32 + 1;
    v24[v32 + 4] = v30;
    ++v25;
    if (v28 == v23)
      goto LABEL_21;
  }
  __break(1u);
LABEL_25:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
}

uint64_t sub_94D00(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v12;

  v8[4] = a7;
  v8[5] = a8;
  v12 = (_QWORD *)swift_task_alloc(dword_1F3134);
  v8[6] = v12;
  *v12 = v8;
  v12[1] = sub_94D80;
  v12[5] = a6;
  v12[6] = a4;
  v12[4] = a5;
  v12[7] = *a4;
  return swift_task_switch(sub_94EEC, 0, 0);
}

uint64_t sub_94D80(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 48);
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_94E78;
  }
  else
  {
    *(_QWORD *)(v4 + 64) = a1;
    v6 = sub_94DF4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_94DF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(v2);
  *(_QWORD *)(v0 + 24) = sub_94360(v1, v2, (uint64_t)sub_9FC8C, (void (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t *))sub_9E584);
  v3 = sub_5EDC(&qword_1F3110);
  CheckedContinuation.resume(returning:)(v0 + 24, v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_94E78()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  v1 = sub_5EDC(&qword_1F3110);
  CheckedContinuation.resume(throwing:)(v0 + 16, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_94EC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v3[7] = *v2;
  return swift_task_switch(sub_94EEC, 0, 0);
}

uint64_t sub_94EEC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[6];
  v2 = v0[4];
  v3 = sub_5EDC(&qword_1F3138);
  v4 = swift_task_alloc(32);
  v0[8] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = sub_5EDC(&qword_1F2EF8);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[9] = v6;
  *v6 = v0;
  v6[1] = sub_94FB0;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 2, v3, v5, 0, 0, &unk_1F3148, v4, v3);
}

uint64_t sub_94FB0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_95148;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 64));
    v4 = sub_9501C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_9501C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = v0[7];
  v2 = v0[5];
  v3 = v0[2];
  v0[11] = v3;
  v4 = (_QWORD *)swift_task_alloc(48);
  v0[12] = v4;
  v4[2] = v2;
  v4[3] = v3;
  v4[4] = v1;
  v5 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[13] = v5;
  *v5 = v0;
  v5[1] = sub_950DC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD00000000000001ALL, 0x80000000001A1230, sub_A0A0C, v4, &type metadata for Int);
}

uint64_t sub_950DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_95138, 0, 0);
}

uint64_t sub_95138()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 88));
}

uint64_t sub_95148()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9517C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v6[31] = a5;
  v6[32] = a6;
  v6[29] = a3;
  v6[30] = a4;
  v6[27] = a1;
  v6[28] = a2;
  v7 = sub_5EDC(&qword_1F3210);
  v6[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F3218);
  v6[34] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[35] = v9;
  v6[36] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_5EDC(&qword_1F15F0);
  v6[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F3220) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[38] = swift_task_alloc(v11);
  v6[39] = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  v6[40] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[41] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v6[42] = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[43] = swift_task_alloc(v15);
  v6[44] = swift_task_alloc(v15);
  v6[45] = swift_task_alloc(v15);
  v6[46] = swift_task_alloc(v15);
  v6[47] = swift_task_alloc(v15);
  v6[48] = swift_task_alloc(v15);
  v6[49] = swift_task_alloc(v15);
  if (qword_1F00B8 != -1)
    swift_once(&qword_1F00B8, sub_904FC);
  v16 = qword_1F2EA8;
  v6[50] = qword_1F2EA8;
  return swift_task_switch(sub_9530C, v16, 0);
}

uint64_t sub_9530C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  Swift::String v96;
  uint64_t v97;
  Swift::String v98;
  void *object;
  Swift::String v100;
  Swift::String v101;
  void *v102;
  Swift::String v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  Swift::String v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t, uint64_t);
  char v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  Swift::String v133;
  uint64_t v134;
  Swift::String v135;
  void *v136;
  Swift::String v137;
  Swift::String v138;
  void *v139;
  Swift::String v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  Swift::String v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, uint64_t, uint64_t);
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  uint64_t v169;
  int64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  __int128 v204;
  void (*v205)(char *, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  uint64_t v210[3];

  v3 = v1[41];
  v2 = v1[42];
  v4 = v1[31];
  v5 = v1[32];
  v6 = v1[29];
  v7 = v1[30];
  UUID.init()(a1);
  v8 = swift_bridgeObjectRetain(v6);
  v9 = sub_3CD28(v8);
  swift_bridgeObjectRelease(v6);
  v1[21] = v9;
  v172 = v1 + 21;
  v10 = swift_bridgeObjectRetain(v7);
  v11 = sub_3CD28(v10);
  swift_bridgeObjectRelease(v7);
  v1[25] = v11;
  v173 = v1 + 25;
  v12 = swift_bridgeObjectRetain(v4);
  v13 = sub_3CD28(v12);
  swift_bridgeObjectRelease(v4);
  v200 = v1;
  v1[22] = v13;
  v171 = v1 + 22;
  v166 = v1 + 8;
  v167 = v1 + 14;
  v168 = (_QWORD *)(v5 + 88);
  swift_beginAccess(v5 + 88, v1 + 11, 0, 0);
  v14 = *(_QWORD *)(v5 + 88);
  v169 = v14 + 64;
  v15 = -1;
  v16 = -1 << *(_BYTE *)(v14 + 32);
  if (-v16 < 64)
    v15 = ~(-1 << -(char)v16);
  v17 = v15 & *(_QWORD *)(v14 + 64);
  v197 = v2 + 7;
  v170 = (unint64_t)(63 - v16) >> 6;
  v174 = v14;
  result = swift_bridgeObjectRetain(v14);
  v198 = 0;
  v175 = v3;
  while (1)
  {
    if (v17)
    {
      v33 = __clz(__rbit64(v17));
      v34 = (v17 - 1) & v17;
      v35 = v200;
      v36 = v33 | (v198 << 6);
LABEL_8:
      v37 = v35[38];
      (*(void (**)(uint64_t, unint64_t, _QWORD))(v3 + 16))(v37, *(_QWORD *)(v174 + 48) + *(_QWORD *)(v3 + 72) * v36, v35[40]);
      v38 = *(_QWORD *)(v174 + 56);
      v39 = sub_5EDC(&qword_1F3228);
      v204 = *(_OWORD *)(v38 + 16 * v36);
      *(_OWORD *)(v37 + *(int *)(v39 + 48)) = v204;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 0, 1, v39);
      swift_bridgeObjectRetain(v204);
      swift_bridgeObjectRetain(*((_QWORD *)&v204 + 1));
      goto LABEL_27;
    }
    v35 = v200;
    v40 = v198 + 1;
    if (__OFADD__(v198, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v40 < v170)
    {
      v41 = *(_QWORD *)(v169 + 8 * v40);
      if (v41)
        goto LABEL_12;
      v42 = v198 + 2;
      ++v198;
      if (v40 + 1 < v170)
      {
        v41 = *(_QWORD *)(v169 + 8 * v42);
        if (v41)
          goto LABEL_15;
        v198 = v40 + 1;
        if (v40 + 2 < v170)
        {
          v41 = *(_QWORD *)(v169 + 8 * (v40 + 2));
          if (v41)
          {
            v40 += 2;
            goto LABEL_12;
          }
          v42 = v40 + 3;
          v198 = v40 + 2;
          if (v40 + 3 < v170)
          {
            v41 = *(_QWORD *)(v169 + 8 * v42);
            if (v41)
            {
LABEL_15:
              v40 = v42;
LABEL_12:
              v34 = (v41 - 1) & v41;
              v36 = __clz(__rbit64(v41)) + (v40 << 6);
              v198 = v40;
              goto LABEL_8;
            }
            while (1)
            {
              v40 = v42 + 1;
              if (__OFADD__(v42, 1))
                break;
              if (v40 >= v170)
              {
                v198 = v170 - 1;
                goto LABEL_26;
              }
              v41 = *(_QWORD *)(v169 + 8 * v40);
              ++v42;
              if (v41)
                goto LABEL_12;
            }
LABEL_40:
            __break(1u);
            return result;
          }
        }
      }
    }
LABEL_26:
    v43 = v200[38];
    v44 = sub_5EDC(&qword_1F3228);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 1, 1, v44);
    v34 = 0;
LABEL_27:
    v45 = v35[39];
    sub_41300(v35[38], v45, &qword_1F3220);
    v46 = sub_5EDC(&qword_1F3228);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v45, 1, v46) == 1)
      break;
    v202 = v34;
    v47 = (uint64_t *)(v35[39] + *(int *)(v46 + 48));
    v48 = *v47;
    v49 = v47[1];
    v50 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 32);
    ((void (*)(_QWORD))v50)(v35[48]);
    v51 = v35[21];
    swift_bridgeObjectRetain(v48);
    v52 = swift_bridgeObjectRetain(v51);
    v53 = sub_9F410(v52, v48);
    swift_bridgeObjectRelease(v51);
    v54 = v35[25];
    swift_bridgeObjectRetain(v48);
    v55 = swift_bridgeObjectRetain(v54);
    v56 = sub_9F410(v55, v48);
    swift_bridgeObjectRelease(v54);
    swift_retain(v53);
    v57 = swift_retain(v56);
    v58 = sub_153150(v57, v53);
    v205 = v50;
    if (*(_QWORD *)(v58 + 16))
    {
      v194 = v49;
      v59 = v35[47];
      v176 = v35[48];
      v177 = v59;
      v60 = v35[46];
      v178 = v60;
      v180 = v35[49];
      v61 = v35[40];
      v62 = v35[37];
      v181 = v35[42];
      v183 = v62;
      v63 = v53;
      v186 = v58;
      v190 = v53;
      v64 = v35[32];
      sub_C4168(v63);
      sub_C4168(v56);
      v65 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v62, 1, 1, v65);
      v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
      v66(v59, v176, v61);
      v66(v60, v180, v61);
      v67 = *(unsigned __int8 *)(v3 + 80);
      v68 = (v67 + 40) & ~v67;
      v69 = (v181 + v67 + v68) & ~v67;
      v70 = (v69 + v197) & 0xFFFFFFFFFFFFFFF8;
      v71 = (v70 + 15) & 0xFFFFFFFFFFFFFFF8;
      v72 = (v71 + 15) & 0xFFFFFFFFFFFFFFF8;
      v73 = (char *)swift_allocObject(&unk_1E25D8, v72 + 8, v67 | 7);
      *((_QWORD *)v73 + 2) = 0;
      *((_QWORD *)v73 + 3) = 0;
      *((_QWORD *)v73 + 4) = v64;
      v205(&v73[v68], v177, v61);
      v74 = &v73[v69];
      v49 = v194;
      v205(v74, v178, v61);
      *(_QWORD *)&v73[v70] = v186;
      *(_QWORD *)&v73[v71] = v190;
      *(_QWORD *)&v73[v72] = v56;
      v35 = v200;
      swift_retain(v64);
      sub_902D0(v183, (uint64_t)&unk_1F3258, (uint64_t)v73, &qword_1F31E8);
      sub_417D8(v183, &qword_1F15F0);
    }
    else
    {
      swift_release(v53);
      swift_release(v56);
      swift_bridgeObjectRelease(v58);
    }
    v75 = v35[31];
    swift_bridgeObjectRetain(v48);
    v76 = sub_9F148(v75, v48);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v49);
    if (*(_QWORD *)(v76 + 16))
    {
      v19 = v35[48];
      v20 = v35[49];
      v21 = v35[46];
      v22 = v35[47];
      v185 = v21;
      v23 = v35[42];
      v24 = v35;
      v25 = v35[40];
      v26 = v24[37];
      v189 = v24[32];
      sub_C4168(v76);
      v27 = type metadata accessor for TaskPriority(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
      v3 = v175;
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v175 + 16);
      v28(v22, v19, v25);
      v28(v21, v20, v25);
      v29 = *(unsigned __int8 *)(v175 + 80);
      v30 = (v29 + 40) & ~v29;
      v31 = (v23 + v29 + v30) & ~v29;
      v32 = (char *)swift_allocObject(&unk_1E2600, ((v31 + v197) & 0xFFFFFFFFFFFFFFF8) + 8, v29 | 7);
      *((_QWORD *)v32 + 2) = 0;
      *((_QWORD *)v32 + 3) = 0;
      *((_QWORD *)v32 + 4) = v189;
      v205(&v32[v30], v22, v25);
      v205(&v32[v31], v185, v25);
      *(_QWORD *)&v32[(v31 + v197) & 0xFFFFFFFFFFFFFFF8] = v76;
      swift_retain(v189);
      sub_902D0(v26, (uint64_t)&unk_1F3268, (uint64_t)v32, &qword_1F31E8);
      sub_417D8(v26, &qword_1F15F0);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v175 + 8))(v19, v25);
    }
    else
    {
      v3 = v175;
      (*(void (**)(_QWORD, _QWORD))(v175 + 8))(v35[48], v35[40]);
      result = swift_release(v76);
    }
    v17 = v202;
  }
  v77 = swift_release(v174);
  v78 = *v172;
  v79 = *v173;
  if (*(_QWORD *)(*v172 + 16) || *(_QWORD *)(v79 + 16))
  {
    v80 = v35[47];
    v81 = v200[45];
    v82 = v200[40];
    UUID.init()(v77);
    swift_bridgeObjectRetain(v78);
    v83 = swift_bridgeObjectRetain(v79);
    v84 = sub_153150(v83, v78);
    v85 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v85(v80, v81, v82);
    swift_beginAccess(v168, v167, 33, 0);
    swift_bridgeObjectRetain(v84);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v168);
    v208 = (_QWORD *)*v168;
    *v168 = 0x8000000000000000;
    sub_170460(v84, (uint64_t)_swiftEmptyArrayStorage, v80, isUniquelyReferenced_nonNull_native);
    v87 = *v168;
    *v168 = v208;
    swift_bridgeObjectRelease(v87);
    v88 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v88(v80, v82);
    swift_endAccess(v167);
    v89 = v200[21];
    v90 = swift_bridgeObjectRetain(v89);
    v91 = sub_37DCC(v90);
    swift_bridgeObjectRelease(v89);
    v208 = v91;
    swift_retain(v91);
    sub_9046C((uint64_t *)&v208);
    swift_release(v91);
    v92 = (uint64_t)v208;
    v93 = *v173;
    swift_bridgeObjectRetain_n(*v173, 2);
    v94 = sub_37DCC(v93);
    swift_bridgeObjectRelease(v93);
    v208 = v94;
    sub_9046C((uint64_t *)&v208);
    v206 = v92;
    v95 = v200[40];
    swift_bridgeObjectRelease(v93);
    v203 = (uint64_t)v208;
    v208 = 0;
    v209 = 0xE000000000000000;
    _StringGuts.grow(_:)(61);
    v96._object = (void *)0x80000000001A1250;
    v96._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v96);
    v97 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v98._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v95, v97);
    object = v98._object;
    String.append(_:)(v98);
    swift_bridgeObjectRelease(object);
    v100._countAndFlagsBits = 0xD00000000000001ELL;
    v100._object = (void *)0x80000000001A1380;
    String.append(_:)(v100);
    v101._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v95, v97);
    v102 = v101._object;
    String.append(_:)(v101);
    swift_bridgeObjectRelease(v102);
    v103._countAndFlagsBits = 0x73444920726F6620;
    v103._object = (void *)0xE900000000000020;
    String.append(_:)(v103);
    v104 = swift_bridgeObjectRetain(v84);
    v105 = sub_37DCC(v104);
    swift_bridgeObjectRelease(v84);
    v210[0] = (uint64_t)v105;
    sub_9046C(v210);
    v106 = v200[46];
    v179 = v200[47];
    v191 = v200[45];
    v192 = v200[42];
    v182 = v200[40];
    v184 = v200[49];
    v187 = v200[37];
    v195 = v200[32];
    swift_bridgeObjectRelease(v84);
    v107 = v210[0];
    v108._countAndFlagsBits = Array.description.getter(v210[0], &type metadata for UInt64);
    v109 = v108._object;
    String.append(_:)(v108);
    swift_bridgeObjectRelease(v109);
    swift_release(v107);
    swift_bridgeObjectRelease(v209);
    v110 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v110 - 8) + 56))(v187, 1, 1, v110);
    v85(v179, v191, v182);
    v85(v106, v184, v182);
    v111 = *(unsigned __int8 *)(v175 + 80);
    v112 = (v111 + 32) & ~v111;
    v113 = (v112 + v197) & 0xFFFFFFFFFFFFFFF8;
    v114 = (v113 + 15) & 0xFFFFFFFFFFFFFFF8;
    v115 = (v114 + 15) & 0xFFFFFFFFFFFFFFF8;
    v116 = (v111 + v115 + 8) & ~v111;
    v117 = swift_allocObject(&unk_1E2588, v116 + v192, v111 | 7);
    v118 = v117 + v112;
    *(_QWORD *)(v117 + 16) = 0;
    *(_QWORD *)(v117 + 24) = 0;
    v119 = *(void (**)(uint64_t, uint64_t, uint64_t))(v175 + 32);
    v119(v118, v179, v182);
    *(_QWORD *)(v117 + v113) = v195;
    *(_QWORD *)(v117 + v114) = v206;
    *(_QWORD *)(v117 + v115) = v203;
    v119(v117 + v116, v106, v182);
    swift_retain(v195);
    sub_902D0(v187, (uint64_t)&unk_1F3238, v117, &qword_1F31E8);
    sub_417D8(v187, &qword_1F15F0);
    v77 = ((uint64_t (*)(uint64_t, uint64_t))v88)(v191, v182);
    v3 = v175;
    v35 = v200;
  }
  v120 = *v171;
  if (*(_QWORD *)(*v171 + 16))
  {
    v121 = v35[47];
    v122 = v35[44];
    v123 = v35[40];
    UUID.init()(v77);
    v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    v124(v121, v122, v123);
    swift_beginAccess(v168, v166, 33, 0);
    swift_bridgeObjectRetain(v120);
    v125 = swift_isUniquelyReferenced_nonNull_native(*v168);
    v208 = (_QWORD *)*v168;
    *v168 = 0x8000000000000000;
    sub_170460(v120, (uint64_t)_swiftEmptyArrayStorage, v121, v125);
    v126 = *v168;
    *v168 = v208;
    swift_bridgeObjectRelease(v126);
    v127 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v127(v121, v123);
    swift_endAccess(v166);
    v128 = v35[22];
    v129 = swift_bridgeObjectRetain(v128);
    v130 = sub_37DCC(v129);
    swift_bridgeObjectRelease(v128);
    v208 = v130;
    swift_retain(v130);
    sub_9046C((uint64_t *)&v208);
    v131 = v35;
    v132 = v35[40];
    swift_release(v130);
    v207 = (uint64_t)v208;
    v208 = 0;
    v209 = 0xE000000000000000;
    _StringGuts.grow(_:)(63);
    v133._object = (void *)0x80000000001A1250;
    v133._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v133);
    v134 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v135._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v132, v134);
    v136 = v135._object;
    String.append(_:)(v135);
    swift_bridgeObjectRelease(v136);
    v137._countAndFlagsBits = 0xD000000000000020;
    v137._object = (void *)0x80000000001A1270;
    String.append(_:)(v137);
    v138._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v132, v134);
    v139 = v138._object;
    String.append(_:)(v138);
    swift_bridgeObjectRelease(v139);
    v140._countAndFlagsBits = 0x73444920726F6620;
    v140._object = (void *)0xE900000000000020;
    String.append(_:)(v140);
    swift_bridgeObjectRetain_n(v128, 2);
    v141 = sub_37DCC(v128);
    swift_bridgeObjectRelease(v128);
    v210[0] = (uint64_t)v141;
    sub_9046C(v210);
    v142 = v131[46];
    v188 = v131[47];
    v143 = v131[44];
    v193 = v131[49];
    v196 = v143;
    v199 = v131[42];
    v144 = v131[40];
    v145 = v131[37];
    v201 = v131[32];
    swift_bridgeObjectRelease(v128);
    v146 = v210[0];
    v147._countAndFlagsBits = Array.description.getter(v210[0], &type metadata for UInt64);
    v148 = v147._object;
    String.append(_:)(v147);
    swift_bridgeObjectRelease(v148);
    swift_release(v146);
    swift_bridgeObjectRelease(v209);
    v149 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 56))(v145, 1, 1, v149);
    v124(v188, v143, v144);
    v124(v142, v193, v144);
    v150 = *(unsigned __int8 *)(v175 + 80);
    v151 = (v150 + 32) & ~v150;
    v152 = (v151 + v197) & 0xFFFFFFFFFFFFFFF8;
    v153 = (v152 + 15) & 0xFFFFFFFFFFFFFFF8;
    v154 = (v150 + v153 + 8) & ~v150;
    v155 = swift_allocObject(&unk_1E25B0, v154 + v199, v150 | 7);
    v156 = v155 + v151;
    *(_QWORD *)(v155 + 16) = 0;
    *(_QWORD *)(v155 + 24) = 0;
    v157 = *(void (**)(uint64_t, uint64_t, uint64_t))(v175 + 32);
    v157(v156, v188, v144);
    *(_QWORD *)(v155 + v152) = v201;
    *(_QWORD *)(v155 + v153) = v207;
    v157(v155 + v154, v142, v144);
    swift_retain(v201);
    sub_902D0(v145, (uint64_t)&unk_1F3248, v155, &qword_1F31E8);
    sub_417D8(v145, &qword_1F15F0);
    v127(v196, v144);
    v35 = v131;
  }
  v158 = v35 + 26;
  v159 = *(_QWORD *)v35[28];
  v160 = sub_5EDC(&qword_1F31E8);
  v35[51] = v160;
  v161 = sub_5EDC(&qword_1F1348);
  ThrowingTaskGroup.makeAsyncIterator()(v159, v160, v161, &protocol self-conformance witness table for Error);
  v35[52] = _swiftEmptyDictionarySingleton;
  v162 = v35;
  v163 = qword_1F2EA8;
  v164 = sub_41754(&qword_1F3190, (uint64_t (*)(uint64_t))type metadata accessor for RequestListActor.ActorType, (uint64_t)&unk_192CF4);
  v165 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v162[53] = v165;
  *v165 = v162;
  v165[1] = sub_962D8;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v162[33], v163, v164, v162[34], v158);
}

uint64_t sub_962D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[50];
    swift_bridgeObjectRelease(v2[52]);
    swift_bridgeObjectRelease(v2[22]);
    swift_bridgeObjectRelease(v2[21]);
    v5 = sub_96C5C;
    v6 = v4;
  }
  else
  {
    v6 = v2[50];
    v5 = sub_9635C;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_9635C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  void *object;
  Swift::String v19;
  Swift::String v20;
  void *v21;
  Swift::String v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  void *v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t i;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  char v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  char v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 416);
    v5 = *(_QWORD *)(v0 + 384);
    v4 = *(_QWORD *)(v0 + 392);
    v6 = *(_QWORD *)(v0 + 376);
    v101 = *(_QWORD *)(v0 + 368);
    v104 = *(_QWORD *)(v0 + 360);
    v107 = *(_QWORD *)(v0 + 352);
    v109 = *(_QWORD *)(v0 + 344);
    v7 = *(_QWORD *)(v0 + 320);
    v8 = *(_QWORD *)(v0 + 328);
    v111 = *(_QWORD *)(v0 + 312);
    v113 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 288);
    v116 = *(_QWORD *)(v0 + 296);
    v10 = *(_QWORD **)(v0 + 216);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(v9, *(_QWORD *)(v0 + 272));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v7);
    *v10 = v3;
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v116);
    swift_task_dealloc(v9);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v117 = *(_QWORD *)(v0 + 432);
    v12 = *(_QWORD *)(v0 + 320);
    v13 = *(_QWORD *)(v2 + *(int *)(v1 + 48));
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 328) + 32))(*(_QWORD *)(v0 + 344), v2, v12);
    *(_QWORD *)(v0 + 136) = 0;
    *(_QWORD *)(v0 + 144) = 0xE000000000000000;
    _StringGuts.grow(_:)(68);
    v14 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 160) = v14;
    v15._object = (void *)0x80000000001A1250;
    v15._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v15);
    v16 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    object = v17._object;
    String.append(_:)(v17);
    swift_bridgeObjectRelease(object);
    v19._countAndFlagsBits = 0xD000000000000020;
    v19._object = (void *)0x80000000001A12A0;
    String.append(_:)(v19);
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v21 = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v21);
    v22._countAndFlagsBits = 0x74697720726F6620;
    v22._object = (void *)0xEE00207344492068;
    String.append(_:)(v22);
    swift_bridgeObjectRetain_n(v13, 2);
    v23 = sub_37EB0(v13);
    swift_bridgeObjectRelease(v13);
    *(_QWORD *)(v0 + 184) = v23;
    sub_9046C((uint64_t *)(v0 + 184));
    if (v117)
    {
      return swift_release(*(_QWORD *)(v0 + 184));
    }
    else
    {
      v92 = v0 + 16;
      v95 = v0 + 40;
      v108 = (_QWORD *)(v0 + 192);
      v24 = *(_QWORD *)(v0 + 416);
      swift_bridgeObjectRelease(v13);
      v25 = *(_QWORD *)(v0 + 184);
      v26._countAndFlagsBits = Array.description.getter(v25, &type metadata for UInt64);
      v27 = v26._object;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(v27);
      swift_release(v25);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
      swift_bridgeObjectRetain(v13);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
      *(_QWORD *)(v0 + 192) = v24;
      v98 = v13 + 64;
      v29 = -1;
      v30 = -1 << *(_BYTE *)(v13 + 32);
      if (-v30 < 64)
        v29 = ~(-1 << -(char)v30);
      v31 = v29 & *(_QWORD *)(v13 + 64);
      v32 = (unint64_t)(63 - v30) >> 6;
      result = swift_bridgeObjectRetain(v13);
      v33 = 0;
      v96 = (_QWORD *)v0;
      v118 = *(_QWORD **)(v0 + 416);
      v97 = v32;
      v93 = v13 + 112;
      v94 = v32 - 6;
      v99 = v13;
      v114 = isUniquelyReferenced_nonNull_native;
      if (!v31)
        goto LABEL_9;
LABEL_8:
      v112 = (v31 - 1) & v31;
      v34 = __clz(__rbit64(v31)) | (v33 << 6);
      for (i = v33; ; v34 = __clz(__rbit64(v37)) + (i << 6))
      {
        v39 = *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * v34);
        v40 = *(_QWORD *)(v13 + 56) + 72 * v34;
        v41 = *(_BYTE *)v40;
        v42 = *(_QWORD *)(v40 + 8);
        v43 = *(_QWORD *)(v40 + 16);
        v44 = *(_QWORD *)(v40 + 24);
        v45 = *(_BYTE *)(v40 + 32);
        v46 = *(_QWORD *)(v40 + 40);
        v105 = *(_BYTE *)(v40 + 48);
        v102 = *(_QWORD *)(v40 + 56);
        v100 = *(_BYTE *)(v40 + 64);
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        if (!v42)
          break;
        v110 = i;
        v48 = sub_39228(v39);
        v49 = v118[2];
        v50 = (v47 & 1) == 0;
        result = v49 + v50;
        if (__OFADD__(v49, v50))
        {
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return result;
        }
        v51 = v47;
        if (v118[3] >= result)
        {
          if ((v114 & 1) == 0)
            result = (uint64_t)sub_16C7D4();
        }
        else
        {
          sub_15D2D0(result, v114 & 1);
          result = sub_39228(v39);
          if ((v51 & 1) != (v52 & 1))
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
          v48 = result;
        }
        v53 = (_QWORD *)*v108;
        v118 = (_QWORD *)*v108;
        if ((v51 & 1) != 0)
        {
          v54 = 72 * v48;
          v55 = v53[7] + 72 * v48;
          v106 = *(_BYTE *)v55;
          v56 = (_QWORD *)*v108;
          v57 = *(_QWORD *)(v55 + 8);
          v58 = *(_QWORD *)(v55 + 16);
          v59 = *(_QWORD *)(v55 + 24);
          v60 = *(_BYTE *)(v55 + 32);
          v61 = *(_QWORD *)(v55 + 40);
          v62 = *(_BYTE *)(v55 + 48);
          v103 = *(_QWORD *)(v55 + 56);
          v115 = *(_BYTE *)(v55 + 64);
          swift_bridgeObjectRetain(v57);
          swift_bridgeObjectRetain(v58);
          swift_bridgeObjectRelease(v42);
          swift_bridgeObjectRelease(v43);
          v63 = v56[7] + v54;
          v64 = *(_QWORD *)(v63 + 16);
          swift_bridgeObjectRelease(*(_QWORD *)(v63 + 8));
          result = swift_bridgeObjectRelease(v64);
          *(_BYTE *)v63 = v106;
          *(_QWORD *)(v63 + 8) = v57;
          *(_QWORD *)(v63 + 16) = v58;
          *(_QWORD *)(v63 + 24) = v59;
          *(_BYTE *)(v63 + 32) = v60;
          *(_QWORD *)(v63 + 40) = v61;
          *(_BYTE *)(v63 + 48) = v62;
          *(_QWORD *)(v63 + 56) = v103;
          v33 = v110;
          v31 = v112;
          *(_BYTE *)(v63 + 64) = v115;
        }
        else
        {
          v53[(v48 >> 6) + 8] |= 1 << v48;
          *(_QWORD *)(v53[6] + 8 * v48) = v39;
          v65 = v53[7] + 72 * v48;
          *(_BYTE *)v65 = v41;
          *(_QWORD *)(v65 + 8) = v42;
          *(_QWORD *)(v65 + 16) = v43;
          *(_QWORD *)(v65 + 24) = v44;
          *(_BYTE *)(v65 + 32) = v45;
          *(_QWORD *)(v65 + 40) = v46;
          *(_BYTE *)(v65 + 48) = v105;
          *(_QWORD *)(v65 + 56) = v102;
          *(_BYTE *)(v65 + 64) = v100;
          v66 = v53[2];
          v67 = __OFADD__(v66, 1);
          v68 = v66 + 1;
          if (v67)
            goto LABEL_50;
          v53[2] = v68;
          v33 = v110;
          v31 = v112;
        }
        v13 = v99;
        v114 = 1;
        if (v31)
          goto LABEL_8;
LABEL_9:
        v36 = v33 + 1;
        if (__OFADD__(v33, 1))
          goto LABEL_51;
        if (v36 >= v97)
          break;
        v37 = *(_QWORD *)(v98 + 8 * v36);
        i = v33 + 1;
        if (!v37)
        {
          i = v33 + 2;
          if (v33 + 2 >= v97)
            break;
          v37 = *(_QWORD *)(v98 + 8 * i);
          if (!v37)
          {
            i = v33 + 3;
            if (v33 + 3 >= v97)
              break;
            v37 = *(_QWORD *)(v98 + 8 * i);
            if (!v37)
            {
              i = v33 + 4;
              if (v33 + 4 >= v97)
                break;
              v37 = *(_QWORD *)(v98 + 8 * i);
              if (!v37)
              {
                i = v33 + 5;
                if (v33 + 5 >= v97)
                  break;
                v37 = *(_QWORD *)(v98 + 8 * i);
                if (!v37)
                {
                  v38 = v33;
                  while (v94 != v38)
                  {
                    v37 = *(_QWORD *)(v93 + 8 * v38++);
                    if (v37)
                    {
                      i = v38 + 5;
                      goto LABEL_24;
                    }
                  }
                  break;
                }
              }
            }
          }
        }
LABEL_24:
        v112 = (v37 - 1) & v37;
      }
      v69 = v96[32];
      swift_bridgeObjectRelease(v99);
      v70 = v96;
      sub_5FEC(v99);
      swift_bridgeObjectRelease(0x8000000000000000);
      swift_beginAccess(v69 + 88, v95, 32, 0);
      v71 = *(_QWORD *)(v69 + 88);
      if (*(_QWORD *)(v71 + 16) && (v72 = sub_39574(v96[43]), (v73 & 1) != 0))
      {
        v74 = (uint64_t *)(*(_QWORD *)(v71 + 56) + 16 * v72);
        v76 = *v74;
        v75 = v74[1];
        swift_endAccess(v95);
        v77 = *(_QWORD *)(v75 + 16);
        if (v77)
        {
          v78 = *(_QWORD *)(type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord(0) - 8);
          v79 = v75 + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80));
          v80 = *(_QWORD *)(v78 + 72);
          swift_bridgeObjectRetain(v76);
          swift_bridgeObjectRetain(v75);
          do
          {
            sub_A0E10(v79, v99, v96[49], v96[43]);
            v79 += v80;
            --v77;
          }
          while (v77);
          swift_bridgeObjectRelease(v99);
          v81 = v76;
        }
        else
        {
          swift_bridgeObjectRetain(v75);
          v81 = v99;
        }
        swift_bridgeObjectRelease(v81);
        v70 = v96;
        v82 = v96[43];
        v83 = v96[32];
        swift_bridgeObjectRelease(v75);
        swift_beginAccess(v83 + 88, v92, 33, 0);
        v84 = sub_17A4CC(v82);
        v86 = v85;
        swift_endAccess(v92);
        sub_A2094(v84, v86);
      }
      else
      {
        swift_endAccess(v95);
        swift_bridgeObjectRelease(v99);
      }
      v87 = v70 + 26;
      (*(void (**)(_QWORD, _QWORD))(v70[41] + 8))(v70[43], v70[40]);
      v70[52] = v118;
      v88 = v70;
      v89 = qword_1F2EA8;
      v90 = sub_41754(&qword_1F3190, (uint64_t (*)(uint64_t))type metadata accessor for RequestListActor.ActorType, (uint64_t)&unk_192CF4);
      v91 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
      v88[53] = v91;
      *v91 = v88;
      v91[1] = sub_962D8;
      return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v88[33], v89, v90, v88[34], v87);
    }
  }
}

uint64_t sub_96C5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 352);
  v5 = *(_QWORD *)(v0 + 360);
  v8 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(v9, *(_QWORD *)(v0 + 272));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 200));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v9);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_96D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;

  v8[7] = a8;
  v8[8] = v10;
  v8[5] = a6;
  v8[6] = a7;
  v8[3] = a4;
  v8[4] = a5;
  v8[2] = a1;
  return swift_task_switch(sub_96D94, 0, 0);
}

uint64_t sub_96D94()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = (_OWORD *)swift_task_alloc(64);
  *(_QWORD *)(v0 + 72) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  v3 = *(_OWORD *)(v0 + 56);
  v1[1] = *(_OWORD *)(v0 + 24);
  v1[2] = v2;
  v1[3] = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v4;
  v5 = sub_5EDC(&qword_1F31E8);
  *v4 = v0;
  v4[1] = sub_96E44;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000043, 0x80000000001A13A0, sub_A265C, v1, v5);
}

uint64_t sub_96E44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_96EB8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_96EB8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_96EEC(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v58 = a6;
  v59 = a7;
  v56 = a1;
  v57 = a5;
  v54 = a3;
  v55 = a4;
  v8 = sub_5EDC(&qword_1F3270);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v49 = v10;
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  __chkstk_darwin(v15);
  v17 = (char *)&v46 - v16;
  v18 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v18);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for TaskPriority(0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v51 = v20;
  v22(v20, 1, 1, v21);
  v23 = v13;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v50 = v17;
  v24(v17, v54, v12);
  v52 = v12;
  v53 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24(v53, (uint64_t)v55, v12);
  v25 = v9;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v27 = v56;
  v55 = v11;
  v56 = v8;
  v26(v11, v27, v8);
  v28 = qword_1F00B8;
  v54 = a2;
  swift_retain(a2);
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v59);
  if (v28 != -1)
    swift_once(&qword_1F00B8, sub_904FC);
  v29 = qword_1F2EA8;
  v47 = qword_1F2EA8;
  v48 = sub_41754(&qword_1F3190, (uint64_t (*)(uint64_t))type metadata accessor for RequestListActor.ActorType, (uint64_t)&unk_192CF4);
  v30 = *(unsigned __int8 *)(v23 + 80);
  v31 = (v30 + 40) & ~v30;
  v32 = (v14 + v30 + v31) & ~v30;
  v33 = (v14 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = v25;
  v35 = *(unsigned __int8 *)(v25 + 80);
  v36 = (v35 + v33 + 8) & ~v35;
  v37 = (v49 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  v39 = (char *)swift_allocObject(&unk_1E2650, v38 + 8, v30 | v35 | 7);
  v40 = v48;
  *((_QWORD *)v39 + 2) = v29;
  *((_QWORD *)v39 + 3) = v40;
  *((_QWORD *)v39 + 4) = v54;
  v41 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v42 = v52;
  v41(&v39[v31], v50, v52);
  v41(&v39[v32], v53, v42);
  v43 = v56;
  *(_QWORD *)&v39[v33] = v57;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(&v39[v36], v55, v43);
  *(_QWORD *)&v39[v37] = v58;
  *(_QWORD *)&v39[v38] = v59;
  swift_retain(v47);
  v44 = sub_4C62C((uint64_t)v51, (uint64_t)&unk_1F3290, (uint64_t)v39);
  return swift_release(v44);
}

uint64_t sub_971E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v8[18] = v17;
  v8[19] = v18;
  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  v9 = type metadata accessor for UUID(0);
  v8[20] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[21] = v10;
  v8[22] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord(0);
  v8[23] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[24] = v12;
  v8[25] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5EDC(&qword_1F31E8);
  v8[26] = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[27] = swift_task_alloc(v14);
  v8[28] = swift_task_alloc(v14);
  v8[29] = swift_task_alloc(v14);
  v8[30] = swift_task_alloc(v14);
  if (qword_1F00B8 != -1)
    swift_once(&qword_1F00B8, sub_904FC);
  v15 = qword_1F2EA8;
  v8[31] = qword_1F2EA8;
  return swift_task_switch(sub_972F8, v15, 0);
}

uint64_t sub_972F8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  int *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 104) + 88);
  swift_beginAccess(v1, v0 + 56, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16) && (v3 = sub_39574(*(_QWORD *)(v0 + 112)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v0 + 200);
    v6 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 160);
    v8 = *(_QWORD *)(v0 + 168);
    v47 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v11 = *v10;
    v44 = v10[1];
    v45 = *(_QWORD *)(v0 + 128);
    swift_endAccess(v0 + 56);
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v46(v5, v9, v7);
    v12 = v5 + *(int *)(v6 + 24);
    v13 = sub_5EDC(&qword_1F3270);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v47, v13);
    *(_QWORD *)(v5 + *(int *)(v6 + 20)) = v45;
    v48 = v11;
    v14 = v11;
    v15 = v44;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    if ((swift_isUniquelyReferenced_nonNull_native(v44) & 1) == 0)
      v15 = sub_30A14(0, *(_QWORD *)(v44 + 16) + 1, 1, v44);
    v17 = *(_QWORD *)(v15 + 16);
    v16 = *(_QWORD *)(v15 + 24);
    if (v17 >= v16 >> 1)
      v15 = sub_30A14(v16 > 1, v17 + 1, 1, v15);
    v19 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 200);
    v21 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 176);
    v22 = *(_QWORD *)(v0 + 160);
    v23 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v15 + 16) = v17 + 1;
    sub_A2618(v18, v15+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v17, type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord);
    v46(v20, v23, v22);
    swift_beginAccess(v1, v0 + 80, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    v50 = *v1;
    *v1 = 0x8000000000000000;
    sub_170460(v48, v15, v20, isUniquelyReferenced_nonNull_native);
    v25 = *v1;
    *v1 = v50;
    swift_bridgeObjectRelease(v25);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    swift_endAccess(v0 + 80);
    v26 = *(_QWORD *)(v0 + 232);
    v28 = *(_QWORD *)(v0 + 216);
    v27 = *(_QWORD *)(v0 + 224);
    v29 = *(_QWORD *)(v0 + 200);
    v30 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 240));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 144);
    v32 = *(_QWORD *)(v0 + 152);
    v34 = *(_QWORD *)(v0 + 104);
    v35 = swift_endAccess(v0 + 56);
    UUID.init()(v35);
    sub_3DD40(v34 + 104, v0 + 16);
    v36 = *(_QWORD *)(v0 + 40);
    v37 = *(_QWORD *)(v0 + 48);
    sub_49F4((_QWORD *)(v0 + 16), v36);
    v38 = swift_bridgeObjectRetain(v33);
    v39 = sub_37DCC(v38);
    *(_QWORD *)(v0 + 256) = v39;
    swift_bridgeObjectRelease(v33);
    v40 = swift_bridgeObjectRetain(v32);
    v41 = sub_37DCC(v40);
    *(_QWORD *)(v0 + 264) = v41;
    swift_bridgeObjectRelease(v32);
    v42 = *(int **)(v37 + 8);
    v49 = (int *)((char *)v42 + *v42);
    v43 = (_QWORD *)swift_task_alloc(v42[1]);
    *(_QWORD *)(v0 + 272) = v43;
    *v43 = v0;
    v43[1] = sub_97648;
    return ((uint64_t (*)(_QWORD *, _QWORD *, uint64_t, uint64_t))v49)(v39, v41, v36, v37);
  }
}

uint64_t sub_97648(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 272);
  *(_QWORD *)(*v2 + 280) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 248);
    v7 = sub_979C8;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 256);
    v9 = *(_QWORD *)(v4 + 248);
    v10 = *(_QWORD *)(v4 + 208);
    swift_release(*(_QWORD *)(v4 + 264));
    *(_QWORD *)(v4 + 288) = a1;
    *(_DWORD *)(v4 + 296) = *(_DWORD *)(v10 + 48);
    swift_release(v8);
    v7 = sub_976E8;
    v6 = v9;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_976E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v1 = *(int *)(v0 + 296);
  v39 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v2 + v1) = *(_QWORD *)(v0 + 288);
  sub_62F8((_QWORD *)(v0 + 16));
  _StringGuts.grow(_:)(42);
  v7._object = (void *)0x80000000001A1300;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  v8 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0x656E727574657220;
  v14._object = (void *)0xEE00207344492064;
  String.append(_:)(v14);
  v15 = *(int *)(v4 + 48);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v16(v3, v2, v6);
  v17 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v3 + v15) = v17;
  swift_bridgeObjectRetain_n(v17, 2);
  v18 = sub_37EB0(v17);
  swift_bridgeObjectRelease(v17);
  v40 = v18;
  sub_9046C((uint64_t *)&v40);
  if (v39)
    return swift_release(v40);
  v21 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 240);
  v22 = *(_QWORD *)(v0 + 216);
  v23 = *(_QWORD *)(v0 + 224);
  v37 = *(_QWORD *)(v0 + 208);
  v38 = *(int *)(v0 + 296);
  v25 = *(_QWORD *)(v0 + 160);
  v24 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease(v17);
  v26 = (uint64_t)v40;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v25);
  v27._countAndFlagsBits = Array.description.getter(v26, &type metadata for UInt64);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  swift_release(v26);
  swift_bridgeObjectRelease(0xE000000000000000);
  v16(v23, v20, v25);
  v29 = *(_QWORD *)(v20 + v38);
  v30 = *(int *)(v37 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v22, v23, v25);
  *(_QWORD *)(v22 + v30) = v29;
  swift_bridgeObjectRetain(v29);
  v31 = sub_5EDC(&qword_1F3270);
  CheckedContinuation.resume(returning:)(v22, v31);
  sub_417D8(v20, &qword_1F31E8);
  v32 = *(_QWORD *)(v0 + 232);
  v34 = *(_QWORD *)(v0 + 216);
  v33 = *(_QWORD *)(v0 + 224);
  v35 = *(_QWORD *)(v0 + 200);
  v36 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_979C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 176);
  v8 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 264));
  swift_release(v1);
  sub_62F8((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v8);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_97A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_97AA8, 0, 0);
}

uint64_t sub_97AA8()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v3;
  v4 = sub_5EDC(&qword_1F31E8);
  *v3 = v0;
  v3[1] = sub_97B50;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000043, 0x80000000001A13A0, sub_A23E8, v1, v4);
}

uint64_t sub_97B50()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_97BC4, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 56));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_97BC4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_97BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  v9 = type metadata accessor for UUID(0);
  v8[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[19] = v10;
  v8[20] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord(0);
  v8[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[22] = v12;
  v8[23] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5EDC(&qword_1F31E8);
  v8[24] = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[25] = swift_task_alloc(v14);
  v8[26] = swift_task_alloc(v14);
  v8[27] = swift_task_alloc(v14);
  v8[28] = swift_task_alloc(v14);
  if (qword_1F00B8 != -1)
    swift_once(&qword_1F00B8, sub_904FC);
  v15 = qword_1F2EA8;
  v8[29] = qword_1F2EA8;
  return swift_task_switch(sub_97D08, v15, 0);
}

uint64_t sub_97D08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  int *v48;
  uint64_t v49;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 104) + 88);
  swift_beginAccess(v1, v0 + 56, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16) && (v3 = sub_39574(*(_QWORD *)(v0 + 112)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 128);
    v45 = *(_QWORD *)(v0 + 168);
    v46 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v11 = *v10;
    v12 = v10[1];
    swift_endAccess(v0 + 56);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    v14 = v11;
    v47 = v13;
    v13(v5, v9, v7);
    v15 = v5 + *(int *)(v45 + 24);
    v16 = sub_5EDC(&qword_1F3270);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v15, v46, v16);
    *(_QWORD *)(v5 + *(int *)(v45 + 20)) = v8;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v12);
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) != 0)
      v17 = v12;
    else
      v17 = sub_30A14(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
    v19 = *(_QWORD *)(v17 + 16);
    v18 = *(_QWORD *)(v17 + 24);
    if (v19 >= v18 >> 1)
      v17 = sub_30A14(v18 > 1, v19 + 1, 1, v17);
    v21 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 184);
    v23 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 144);
    v25 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v17 + 16) = v19 + 1;
    v26 = v17
        + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))
        + *(_QWORD *)(v21 + 72) * v19;
    v27 = v17;
    sub_A2618(v20, v26, type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord);
    v47(v22, v25, v24);
    swift_beginAccess(v1, v0 + 80, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    v49 = *v1;
    *v1 = 0x8000000000000000;
    sub_170460(v14, v27, v22, isUniquelyReferenced_nonNull_native);
    v29 = *v1;
    *v1 = v49;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    swift_endAccess(v0 + 80);
    v30 = *(_QWORD *)(v0 + 216);
    v32 = *(_QWORD *)(v0 + 200);
    v31 = *(_QWORD *)(v0 + 208);
    v33 = *(_QWORD *)(v0 + 184);
    v34 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v36 = *(_QWORD *)(v0 + 128);
    v37 = *(_QWORD *)(v0 + 104);
    v38 = swift_endAccess(v0 + 56);
    UUID.init()(v38);
    sub_3DD40(v37 + 104, v0 + 16);
    v39 = *(_QWORD *)(v0 + 40);
    v40 = *(_QWORD *)(v0 + 48);
    sub_49F4((_QWORD *)(v0 + 16), v39);
    v41 = swift_bridgeObjectRetain(v36);
    v42 = sub_37DCC(v41);
    *(_QWORD *)(v0 + 240) = v42;
    swift_bridgeObjectRelease(v36);
    v43 = *(int **)(v40 + 16);
    v48 = (int *)((char *)v43 + *v43);
    v44 = (_QWORD *)swift_task_alloc(v43[1]);
    *(_QWORD *)(v0 + 248) = v44;
    *v44 = v0;
    v44[1] = sub_98038;
    return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v48)(v42, v39, v40);
  }
}

uint64_t sub_98038(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 248);
  *(_QWORD *)(*v2 + 256) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 232);
    v7 = sub_983A4;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 232);
    v9 = *(_QWORD *)(v4 + 192);
    swift_release(*(_QWORD *)(v4 + 240));
    *(_QWORD *)(v4 + 264) = a1;
    *(_DWORD *)(v4 + 272) = *(_DWORD *)(v9 + 48);
    v7 = sub_980C4;
    v6 = v8;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_980C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v1 = *(int *)(v0 + 272);
  v39 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v2 + v1) = *(_QWORD *)(v0 + 264);
  sub_62F8((_QWORD *)(v0 + 16));
  _StringGuts.grow(_:)(42);
  v7._object = (void *)0x80000000001A1300;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  v8 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0x656E727574657220;
  v14._object = (void *)0xEE00207344492064;
  String.append(_:)(v14);
  v15 = *(int *)(v4 + 48);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v16(v3, v2, v6);
  v17 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v3 + v15) = v17;
  swift_bridgeObjectRetain_n(v17, 2);
  v18 = sub_37EB0(v17);
  swift_bridgeObjectRelease(v17);
  v40 = v18;
  sub_9046C((uint64_t *)&v40);
  if (v39)
    return swift_release(v40);
  v21 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 208);
  v37 = *(_QWORD *)(v0 + 192);
  v38 = *(int *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRelease(v17);
  v26 = (uint64_t)v40;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v25);
  v27._countAndFlagsBits = Array.description.getter(v26, &type metadata for UInt64);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  swift_release(v26);
  swift_bridgeObjectRelease(0xE000000000000000);
  v16(v23, v20, v25);
  v29 = *(_QWORD *)(v20 + v38);
  v30 = *(int *)(v37 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v22, v23, v25);
  *(_QWORD *)(v22 + v30) = v29;
  swift_bridgeObjectRetain(v29);
  v31 = sub_5EDC(&qword_1F3270);
  CheckedContinuation.resume(returning:)(v22, v31);
  sub_417D8(v20, &qword_1F31E8);
  v32 = *(_QWORD *)(v0 + 216);
  v34 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 208);
  v35 = *(_QWORD *)(v0 + 184);
  v36 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_983A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 240));
  sub_62F8((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_98458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;

  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a1;
  v8[8] = a4;
  v9 = sub_5EDC(&qword_1F31E8);
  v8[13] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[14] = swift_task_alloc(v10);
  v8[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_984D0, 0, 0);
}

uint64_t sub_984D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  int *v12;

  v1 = v0[15];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for UUID(0);
  v0[16] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[17] = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[18] = v6;
  v6(v1, v2, v4);
  sub_3DD40(v3 + 104, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  sub_49F4(v0 + 2, v7);
  v9 = *(int **)(v8 + 8);
  v12 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  v0[19] = v10;
  *v10 = v0;
  v10[1] = sub_98598;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v12)(v0[10], v0[11], v7, v8);
}

uint64_t sub_98598(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(v3 + 160) = a1;
  *(_QWORD *)(v3 + 168) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_98898;
  }
  else
  {
    *(_DWORD *)(v3 + 176) = *(_DWORD *)(*(_QWORD *)(v3 + 104) + 48);
    v5 = sub_98610;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_98610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  _QWORD *v31;

  v1 = *(_QWORD *)(v0 + 160);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
  v29 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v3 + *(int *)(v0 + 176)) = v1;
  swift_bridgeObjectRetain(v1);
  sub_62F8((_QWORD *)(v0 + 16));
  _StringGuts.grow(_:)(45);
  v6._object = (void *)0x80000000001A1250;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v7 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0x7473657571657220;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0x656E727574657220;
  v13._object = (void *)0xEE00207344492064;
  String.append(_:)(v13);
  v14 = *(int *)(v4 + 48);
  v28(v5, v3, v2);
  *(_QWORD *)(v5 + v14) = v1;
  swift_bridgeObjectRetain_n(v1, 2);
  v15 = sub_37EB0(v1);
  swift_bridgeObjectRelease(v1);
  v31 = v15;
  sub_9046C((uint64_t *)&v31);
  if (v29)
    return swift_release(v31);
  v17 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 136);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
  v20 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v0 + 104);
  v21 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease(v17);
  v24 = (uint64_t)v31;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
  v25._countAndFlagsBits = Array.description.getter(v24, &type metadata for UInt64);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  swift_release(v24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v27 = *(int *)(v22 + 48);
  v30(v23, v20, v19);
  *(_QWORD *)(v23 + v27) = v17;
  sub_417D8(v20, &qword_1F31E8);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_98898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  sub_62F8((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_988FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[7] = a1;
  v8 = sub_5EDC(&qword_1F31E8);
  v7[12] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[13] = swift_task_alloc(v9);
  v7[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_98974, 0, 0);
}

uint64_t sub_98974()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  int *v12;

  v1 = v0[14];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for UUID(0);
  v0[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[16] = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[17] = v6;
  v6(v1, v2, v4);
  sub_3DD40(v3 + 104, (uint64_t)(v0 + 2));
  v7 = v0[5];
  v8 = v0[6];
  sub_49F4(v0 + 2, v7);
  v9 = *(int **)(v8 + 16);
  v12 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  v0[18] = v10;
  *v10 = v0;
  v10[1] = sub_98A3C;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v12)(v0[10], v7, v8);
}

uint64_t sub_98A3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(v3 + 152) = a1;
  *(_QWORD *)(v3 + 160) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_98D3C;
  }
  else
  {
    *(_DWORD *)(v3 + 168) = *(_DWORD *)(*(_QWORD *)(v3 + 96) + 48);
    v5 = sub_98AB4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_98AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  _QWORD *v31;

  v1 = *(_QWORD *)(v0 + 152);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  v29 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v3 + *(int *)(v0 + 168)) = v1;
  swift_bridgeObjectRetain(v1);
  sub_62F8((_QWORD *)(v0 + 16));
  _StringGuts.grow(_:)(45);
  v6._object = (void *)0x80000000001A1250;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v7 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0x7473657571657220;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0x656E727574657220;
  v13._object = (void *)0xEE00207344492064;
  String.append(_:)(v13);
  v14 = *(int *)(v4 + 48);
  v28(v5, v3, v2);
  *(_QWORD *)(v5 + v14) = v1;
  swift_bridgeObjectRetain_n(v1, 2);
  v15 = sub_37EB0(v1);
  swift_bridgeObjectRelease(v1);
  v31 = v15;
  sub_9046C((uint64_t *)&v31);
  if (v29)
    return swift_release(v31);
  v17 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 128);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  v20 = *(_QWORD *)(v0 + 112);
  v19 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease(v17);
  v24 = (uint64_t)v31;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
  v25._countAndFlagsBits = Array.description.getter(v24, &type metadata for UInt64);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  swift_release(v24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v27 = *(int *)(v22 + 48);
  v30(v23, v20, v19);
  *(_QWORD *)(v23 + v27) = v17;
  sub_417D8(v20, &qword_1F31E8);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_98D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  sub_62F8((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_98DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4[31] = a3;
  v4[32] = a4;
  v4[29] = a1;
  v4[30] = a2;
  v5 = sub_5EDC(&qword_1F3160);
  v4[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_5EDC(&qword_1F3168);
  v4[34] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[35] = v7;
  v4[36] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F15F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v8);
  v4[38] = swift_task_alloc(v8);
  v4[39] = swift_task_alloc(v8);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F3170) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[40] = swift_task_alloc(v9);
  v4[41] = swift_task_alloc(v9);
  v10 = type metadata accessor for UUID(0);
  v4[42] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[43] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v4[44] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[45] = swift_task_alloc(v13);
  v4[46] = swift_task_alloc(v13);
  v4[47] = swift_task_alloc(v13);
  v4[48] = swift_task_alloc(v13);
  v4[49] = swift_task_alloc(v13);
  v4[50] = swift_task_alloc(v13);
  if (qword_1F00B8 != -1)
    swift_once(&qword_1F00B8, sub_904FC);
  v14 = qword_1F2EA8;
  v4[51] = qword_1F2EA8;
  return swift_task_switch(sub_98F3C, v14, 0);
}

uint64_t sub_98F3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  Swift::String v74;
  _QWORD *v75;
  uint64_t v76;
  Swift::String v77;
  void *object;
  Swift::String v79;
  Swift::String v80;
  void *v81;
  Swift::String v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  int64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  __int128 v129;
  int64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134[3];

  v2 = v0[43];
  v1 = v0[44];
  v3 = v0[31];
  v4 = v0[32];
  ((void (*)(void))UUID.init())();
  v5 = swift_bridgeObjectRetain(v3);
  v6 = sub_3CD28(v5);
  swift_bridgeObjectRelease(v3);
  v0[26] = v6;
  v111 = v0 + 26;
  v105 = (_QWORD *)(v4 + 96);
  v106 = v0 + 9;
  swift_beginAccess(v4 + 96, v0 + 6, 0, 0);
  v7 = *(_QWORD *)(v4 + 96);
  v107 = v7 + 64;
  v8 = -1;
  v9 = -1 << *(_BYTE *)(v7 + 32);
  if (-v9 < 64)
    v8 = ~(-1 << -(char)v9);
  v10 = v8 & *(_QWORD *)(v7 + 64);
  v109 = v1 + 7;
  v108 = (unint64_t)(63 - v9) >> 6;
  v112 = *(_QWORD *)(v4 + 96);
  result = swift_bridgeObjectRetain(v7);
  v12 = 0;
  v110 = v2;
  if (!v10)
    goto LABEL_8;
LABEL_6:
  v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  v14 = v13 | (v12 << 6);
  while (2)
  {
    v15 = v0[40];
    (*(void (**)(uint64_t, unint64_t, _QWORD))(v2 + 16))(v15, *(_QWORD *)(v112 + 48) + *(_QWORD *)(v2 + 72) * v14, v0[42]);
    v16 = *(_QWORD *)(v112 + 56);
    v17 = sub_5EDC(&qword_1F3178);
    v129 = *(_OWORD *)(v16 + 16 * v14);
    *(_OWORD *)(v15 + *(int *)(v17 + 48)) = v129;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
    swift_bridgeObjectRetain(v129);
    swift_bridgeObjectRetain(*((_QWORD *)&v129 + 1));
    while (1)
    {
      v23 = v0[41];
      sub_41300(v0[40], v23, &qword_1F3170);
      v24 = sub_5EDC(&qword_1F3178);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 48))(v23, 1, v24) == 1)
      {
        v61 = swift_release(v112);
        v62 = *v111;
        if (*(_QWORD *)(*v111 + 16))
        {
          v63 = v0[48];
          v64 = v0[46];
          v65 = v0[42];
          UUID.init()(v61);
          v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
          v66(v63, v64, v65);
          swift_beginAccess(v105, v106, 33, 0);
          swift_bridgeObjectRetain(v62);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v105);
          v132 = (_QWORD *)*v105;
          *v105 = 0x8000000000000000;
          sub_17046C(v62, (uint64_t)_swiftEmptyArrayStorage, v63, isUniquelyReferenced_nonNull_native);
          v68 = *v105;
          *v105 = v132;
          swift_bridgeObjectRelease(v68);
          v69 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
          v69(v63, v65);
          swift_endAccess(v106);
          v70 = v0[26];
          v71 = swift_bridgeObjectRetain(v70);
          v72 = sub_37DCC(v71);
          swift_bridgeObjectRelease(v70);
          v132 = v72;
          swift_retain(v72);
          sub_9046C((uint64_t *)&v132);
          v73 = v0[42];
          swift_release(v72);
          v131 = (uint64_t)v132;
          v132 = 0;
          v133 = 0xE000000000000000;
          _StringGuts.grow(_:)(63);
          v74._object = (void *)0x80000000001A1250;
          v75 = v0;
          v74._countAndFlagsBits = 0xD000000000000010;
          String.append(_:)(v74);
          v76 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v77._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v73, v76);
          object = v77._object;
          String.append(_:)(v77);
          swift_bridgeObjectRelease(object);
          v79._countAndFlagsBits = 0xD000000000000020;
          v79._object = (void *)0x80000000001A1270;
          String.append(_:)(v79);
          v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v73, v76);
          v81 = v80._object;
          String.append(_:)(v80);
          swift_bridgeObjectRelease(v81);
          v82._countAndFlagsBits = 0x73444920726F6620;
          v82._object = (void *)0xE900000000000020;
          String.append(_:)(v82);
          swift_bridgeObjectRetain_n(v70, 2);
          v83 = sub_37DCC(v70);
          swift_bridgeObjectRelease(v70);
          v134[0] = (uint64_t)v83;
          sub_9046C(v134);
          v116 = v0[47];
          v118 = v0[48];
          v84 = v0[46];
          v121 = v75[50];
          v122 = v75[46];
          v125 = v75[44];
          v85 = v75[42];
          v86 = v75[37];
          v127 = v75[32];
          swift_bridgeObjectRelease(v70);
          v87 = v134[0];
          v88._countAndFlagsBits = Array.description.getter(v134[0], &type metadata for UInt64);
          v89 = v88._object;
          String.append(_:)(v88);
          swift_bridgeObjectRelease(v89);
          swift_release(v87);
          swift_bridgeObjectRelease(v133);
          v90 = type metadata accessor for TaskPriority(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 56))(v86, 1, 1, v90);
          v66(v118, v84, v85);
          v66(v116, v121, v85);
          v91 = *(unsigned __int8 *)(v110 + 80);
          v92 = (v91 + 32) & ~v91;
          v93 = (v92 + v109) & 0xFFFFFFFFFFFFFFF8;
          v94 = (v93 + 15) & 0xFFFFFFFFFFFFFFF8;
          v95 = (v91 + v94 + 8) & ~v91;
          v96 = swift_allocObject(&unk_1E23F8, v95 + v125, v91 | 7);
          v97 = v96 + v92;
          *(_QWORD *)(v96 + 16) = 0;
          *(_QWORD *)(v96 + 24) = 0;
          v98 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32);
          v98(v97, v118, v85);
          *(_QWORD *)(v96 + v93) = v127;
          *(_QWORD *)(v96 + v94) = v131;
          v98(v96 + v95, v116, v85);
          swift_retain(v127);
          sub_902D0(v86, (uint64_t)&unk_1F3188, v96, &qword_1F3138);
          sub_417D8(v86, &qword_1F15F0);
          v69(v122, v85);
          v0 = v75;
        }
        v99 = *(_QWORD *)v0[30];
        v100 = sub_5EDC(&qword_1F3138);
        v0[52] = v100;
        v101 = sub_5EDC(&qword_1F1348);
        ThrowingTaskGroup.makeAsyncIterator()(v99, v100, v101, &protocol self-conformance witness table for Error);
        v0[53] = _swiftEmptyDictionarySingleton;
        v102 = qword_1F2EA8;
        v103 = sub_41754(&qword_1F3190, (uint64_t (*)(uint64_t))type metadata accessor for RequestListActor.ActorType, (uint64_t)&unk_192CF4);
        v104 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
        v0[54] = v104;
        *v104 = v0;
        v104[1] = sub_999B0;
        return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v0[33], v102, v103, v0[34], v0 + 27);
      }
      v25 = (uint64_t *)(v0[41] + *(int *)(v24 + 48));
      v27 = *v25;
      v26 = v25[1];
      v28 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 32);
      ((void (*)(_QWORD))v28)(v0[49]);
      v29 = v0[26];
      swift_bridgeObjectRetain(v27);
      v30 = swift_bridgeObjectRetain(v29);
      v31 = sub_9F410(v30, v27);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v26);
      swift_bridgeObjectRelease(v29);
      if (*(_QWORD *)(v31 + 16))
      {
        v128 = v10;
        v130 = v12;
        v32 = v0[48];
        v113 = v0[49];
        v114 = v32;
        v33 = v0[47];
        v115 = v33;
        v117 = v0[50];
        v34 = v0[42];
        v35 = v0[39];
        v123 = v0[44];
        v126 = v0[38];
        v120 = v0[32];
        sub_C4168(v31);
        v36 = type metadata accessor for TaskPriority(0);
        v119 = v28;
        v37 = *(_QWORD *)(v36 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v35, 1, 1, v36);
        v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
        v38(v32, v113, v34);
        v38(v33, v117, v34);
        v39 = *(unsigned __int8 *)(v2 + 80);
        v40 = (v39 + 40) & ~v39;
        v41 = (v123 + v39 + v40) & ~v39;
        v42 = (v41 + v109) & 0xFFFFFFFFFFFFFFF8;
        v43 = (_QWORD *)swift_allocObject(&unk_1E2420, v42 + 8, v39 | 7);
        v43[2] = 0;
        v124 = v43 + 2;
        v43[3] = 0;
        v43[4] = v120;
        v119((char *)v43 + v40, v114, v34);
        v119((char *)v43 + v41, v115, v34);
        *(_QWORD *)((char *)v43 + v42) = v31;
        sub_418BC(v35, v126, &qword_1F15F0);
        LODWORD(v41) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v126, 1, v36);
        v44 = swift_retain(v120);
        v45 = v0[38];
        if ((_DWORD)v41 == 1)
        {
          sub_417D8(v0[38], &qword_1F15F0);
          v46 = 0;
        }
        else
        {
          v47 = TaskPriority.rawValue.getter(v44);
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v45, v36);
          v46 = v47;
        }
        v48 = *v124;
        v10 = v128;
        if (*v124)
        {
          v49 = v43[3];
          ObjectType = swift_getObjectType(*v124);
          swift_unknownObjectRetain(v48);
          v51 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v49);
          v53 = v52;
          swift_unknownObjectRelease(v48);
        }
        else
        {
          v51 = 0;
          v53 = 0;
        }
        v54 = *(_QWORD *)v0[30];
        v55 = sub_5EDC(&qword_1F3138);
        v56 = v53 | v51;
        if (v53 | v51)
        {
          v56 = (uint64_t)(v0 + 2);
          v0[2] = 0;
          v0[3] = 0;
          v0[4] = v51;
          v0[5] = v53;
        }
        v57 = v0[49];
        v58 = v0[42];
        v59 = v0[39];
        v0[12] = 1;
        v0[13] = v56;
        v0[14] = v54;
        v60 = swift_task_create(v46 | 0x3100, v0 + 12, v55, &unk_1F31A0, v43);
        swift_release(v60);
        sub_417D8(v59, &qword_1F15F0);
        v2 = v110;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 8))(v57, v58);
        v12 = v130;
        if (v128)
          goto LABEL_6;
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(v2 + 8))(v0[49], v0[42]);
        result = swift_release(v31);
        if (v10)
          goto LABEL_6;
      }
LABEL_8:
      v18 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_42;
      }
      if (v18 < v108)
      {
        v19 = *(_QWORD *)(v107 + 8 * v18);
        if (v19)
          goto LABEL_11;
        v20 = v12 + 2;
        ++v12;
        if (v18 + 1 < v108)
        {
          v19 = *(_QWORD *)(v107 + 8 * v20);
          if (v19)
            goto LABEL_14;
          v12 = v18 + 1;
          if (v18 + 2 < v108)
          {
            v19 = *(_QWORD *)(v107 + 8 * (v18 + 2));
            if (v19)
            {
              v18 += 2;
              goto LABEL_11;
            }
            v20 = v18 + 3;
            v12 = v18 + 2;
            if (v18 + 3 < v108)
              break;
          }
        }
      }
LABEL_25:
      v21 = v0[40];
      v22 = sub_5EDC(&qword_1F3178);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
      v10 = 0;
    }
    v19 = *(_QWORD *)(v107 + 8 * v20);
    if (v19)
    {
LABEL_14:
      v18 = v20;
LABEL_11:
      v10 = (v19 - 1) & v19;
      v14 = __clz(__rbit64(v19)) + (v18 << 6);
      v12 = v18;
      continue;
    }
    break;
  }
  while (1)
  {
    v18 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v18 >= v108)
    {
      v12 = v108 - 1;
      goto LABEL_25;
    }
    v19 = *(_QWORD *)(v107 + 8 * v18);
    ++v20;
    if (v19)
      goto LABEL_11;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_999B0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  *(_QWORD *)(*(_QWORD *)v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[51];
    swift_bridgeObjectRelease(v2[53]);
    swift_bridgeObjectRelease(v2[26]);
    v5 = sub_9A22C;
    v6 = v4;
  }
  else
  {
    v6 = v2[51];
    v5 = sub_99A2C;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_99A2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  uint64_t v21;
  Swift::String v22;
  void *v23;
  Swift::String v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  void *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  char v56;
  char v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 48))(v2, 1, v1);
  v4 = *(_QWORD *)(v0 + 400);
  if (v3 == 1)
  {
    v5 = *(_QWORD *)(v0 + 424);
    v7 = *(_QWORD *)(v0 + 384);
    v6 = *(_QWORD *)(v0 + 392);
    v86 = *(_QWORD *)(v0 + 376);
    v88 = *(_QWORD *)(v0 + 368);
    v8 = *(_QWORD *)(v0 + 336);
    v9 = *(_QWORD *)(v0 + 344);
    v89 = *(_QWORD *)(v0 + 360);
    v91 = *(_QWORD *)(v0 + 328);
    v93 = *(_QWORD *)(v0 + 320);
    v95 = *(_QWORD *)(v0 + 312);
    v10 = *(_QWORD *)(v0 + 288);
    v97 = *(_QWORD *)(v0 + 304);
    v99 = *(_QWORD *)(v0 + 296);
    v11 = *(_QWORD **)(v0 + 232);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(v10, *(_QWORD *)(v0 + 272));
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 208));
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v4, v8);
    *v11 = v5;
    swift_task_dealloc(v4);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v10);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v100 = *(_QWORD *)(v0 + 440);
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v2 + *(int *)(v1 + 48));
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 344) + 32))(*(_QWORD *)(v0 + 360), v2, v13);
  *(_QWORD *)(v0 + 168) = 0;
  *(_QWORD *)(v0 + 176) = 0xE000000000000000;
  _StringGuts.grow(_:)(68);
  v15 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 192) = v15;
  v16._object = (void *)0x80000000001A1250;
  v16._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v16);
  v17 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
  object = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(object);
  v20._countAndFlagsBits = 0xD000000000000020;
  v20._object = (void *)0x80000000001A12A0;
  String.append(_:)(v20);
  v21 = v14;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
  v23 = v22._object;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v23);
  v24._countAndFlagsBits = 0x74697720726F6620;
  v24._object = (void *)0xEE00207344492068;
  String.append(_:)(v24);
  swift_bridgeObjectRetain_n(v14, 2);
  v25 = sub_37EB0(v14);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(v0 + 224) = v25;
  sub_9046C((uint64_t *)(v0 + 224));
  if (v100)
    return swift_release(*(_QWORD *)(v0 + 224));
  v90 = v0 + 120;
  v84 = v0 + 144;
  v98 = (_QWORD *)(v0 + 200);
  v26 = *(_QWORD *)(v0 + 424);
  swift_bridgeObjectRelease(v14);
  v27 = *(_QWORD *)(v0 + 224);
  v28._countAndFlagsBits = Array.description.getter(v27, &type metadata for UInt64);
  v29 = v28._object;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v29);
  swift_release(v27);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  swift_bridgeObjectRetain(v14);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
  *(_QWORD *)(v0 + 200) = v26;
  v96 = v14 + 64;
  v31 = -1;
  v32 = -1 << *(_BYTE *)(v14 + 32);
  if (-v32 < 64)
    v31 = ~(-1 << -(char)v32);
  v33 = v31 & *(_QWORD *)(v14 + 64);
  v34 = (unint64_t)(63 - v32) >> 6;
  result = swift_bridgeObjectRetain(v21);
  v35 = 0;
  v92 = (_QWORD *)v0;
  v94 = v34;
  v101 = *(_QWORD **)(v0 + 424);
  v85 = v21 + 112;
  v87 = v34 - 6;
  while (1)
  {
    if (v33)
    {
      v41 = (v33 - 1) & v33;
      v42 = __clz(__rbit64(v33)) | (v35 << 6);
      v43 = v35;
      goto LABEL_28;
    }
    v44 = v35 + 1;
    if (__OFADD__(v35, 1))
      goto LABEL_52;
    if (v44 >= v94)
      goto LABEL_38;
    v45 = *(_QWORD *)(v96 + 8 * v44);
    v43 = v35 + 1;
    if (!v45)
    {
      v43 = v35 + 2;
      if (v35 + 2 >= v94)
        goto LABEL_38;
      v45 = *(_QWORD *)(v96 + 8 * v43);
      if (!v45)
      {
        v43 = v35 + 3;
        if (v35 + 3 >= v94)
          goto LABEL_38;
        v45 = *(_QWORD *)(v96 + 8 * v43);
        if (!v45)
        {
          v43 = v35 + 4;
          if (v35 + 4 >= v94)
            goto LABEL_38;
          v45 = *(_QWORD *)(v96 + 8 * v43);
          if (!v45)
          {
            v43 = v35 + 5;
            if (v35 + 5 >= v94)
              goto LABEL_38;
            v45 = *(_QWORD *)(v96 + 8 * v43);
            if (!v45)
              break;
          }
        }
      }
    }
LABEL_27:
    v41 = (v45 - 1) & v45;
    v42 = __clz(__rbit64(v45)) + (v43 << 6);
LABEL_28:
    v47 = v21;
    v48 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * v42);
    v49 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 16 * v42);
    v51 = *v49;
    v50 = v49[1];
    swift_bridgeObjectRetain(v50);
    if (!v50)
      goto LABEL_39;
    v53 = sub_39228(v48);
    v54 = v101[2];
    v55 = (v52 & 1) == 0;
    result = v54 + v55;
    if (__OFADD__(v54, v55))
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
      return result;
    }
    v56 = v52;
    if (v101[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        result = (uint64_t)sub_16C9C4();
    }
    else
    {
      sub_15D600(result, isUniquelyReferenced_nonNull_native & 1);
      result = sub_39228(v48);
      if ((v56 & 1) != (v57 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v53 = result;
    }
    v58 = (_QWORD *)*v98;
    v101 = (_QWORD *)*v98;
    if ((v56 & 1) != 0)
    {
      v36 = 16 * v53;
      v37 = (uint64_t *)(v58[7] + 16 * v53);
      v39 = *v37;
      v38 = v37[1];
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRelease(v50);
      v40 = (_QWORD *)(v58[7] + v36);
      result = swift_bridgeObjectRelease(v40[1]);
      *v40 = v39;
      v40[1] = v38;
    }
    else
    {
      v58[(v53 >> 6) + 8] |= 1 << v53;
      *(_QWORD *)(v58[6] + 8 * v53) = v48;
      v59 = (_QWORD *)(v58[7] + 16 * v53);
      *v59 = v51;
      v59[1] = v50;
      v60 = v58[2];
      v61 = __OFADD__(v60, 1);
      v62 = v60 + 1;
      if (v61)
        goto LABEL_51;
      v58[2] = v62;
    }
    isUniquelyReferenced_nonNull_native = 1;
    v35 = v43;
    v33 = v41;
    v21 = v47;
  }
  v46 = v35;
  while (v87 != v46)
  {
    v45 = *(_QWORD *)(v85 + 8 * v46++);
    if (v45)
    {
      v43 = v46 + 5;
      goto LABEL_27;
    }
  }
LABEL_38:
  v47 = v21;
LABEL_39:
  v63 = v92[32];
  v64 = v47;
  swift_bridgeObjectRelease(v47);
  sub_5FEC(v47);
  swift_bridgeObjectRelease(0x8000000000000000);
  swift_beginAccess(v63 + 96, v90, 32, 0);
  v65 = *(_QWORD *)(v63 + 96);
  if (*(_QWORD *)(v65 + 16) && (v66 = sub_39574(v92[45]), (v67 & 1) != 0))
  {
    v68 = (uint64_t *)(*(_QWORD *)(v65 + 56) + 16 * v66);
    v70 = *v68;
    v69 = v68[1];
    swift_endAccess(v90);
    v71 = *(_QWORD *)(v69 + 16);
    if (v71)
    {
      v72 = *(_QWORD *)(type metadata accessor for MetadataCache.GenreMetadataRequest.ContinuationRecord(0) - 8);
      v73 = v69 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
      v74 = *(_QWORD *)(v72 + 72);
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v69);
      do
      {
        sub_A13E0(v73, v64, v92[50], v92[45]);
        v73 += v74;
        --v71;
      }
      while (v71);
      swift_bridgeObjectRelease(v64);
      v75 = v70;
    }
    else
    {
      swift_bridgeObjectRetain(v69);
      v75 = v64;
    }
    swift_bridgeObjectRelease(v75);
    v76 = v92[45];
    v77 = v92[32];
    swift_bridgeObjectRelease(v69);
    swift_beginAccess(v77 + 96, v84, 33, 0);
    v78 = sub_17A4E0(v76);
    v80 = v79;
    swift_endAccess(v84);
    sub_A2094(v78, v80);
  }
  else
  {
    swift_endAccess(v90);
    swift_bridgeObjectRelease(v47);
  }
  (*(void (**)(_QWORD, _QWORD))(v92[43] + 8))(v92[45], v92[42]);
  v92[53] = v101;
  v81 = qword_1F2EA8;
  v82 = sub_41754(&qword_1F3190, (uint64_t (*)(uint64_t))type metadata accessor for RequestListActor.ActorType, (uint64_t)&unk_192CF4);
  v83 = (_QWORD *)swift_task_alloc(_sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKFTu[1]);
  v92[54] = v83;
  *v83 = v92;
  v83[1] = sub_999B0;
  return _sScg8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v92[33], v81, v82, v92[34], v92 + 27);
}

uint64_t sub_9A22C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 344);
  v11 = *(_QWORD *)(v0 + 328);
  v12 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 312);
  v14 = *(_QWORD *)(v0 + 304);
  v9 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 280) + 8))(v9, *(_QWORD *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v9);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9A340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_9A360, 0, 0);
}

uint64_t sub_9A360()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 64) = v3;
  v4 = sub_5EDC(&qword_1F3138);
  *v3 = v0;
  v3[1] = sub_9A408;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 16), 0, 0, 0xD000000000000027, 0x80000000001A12D0, sub_A1720, v1, v4);
}

uint64_t sub_9A408()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 64);
  v3 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_A2FF0, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 56));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_9A47C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v49 = a8;
  v50 = a5;
  v45 = a7;
  v46 = a3;
  v47 = a4;
  v48 = a1;
  v9 = sub_5EDC(a6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v44 = v11;
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  __chkstk_darwin(v16);
  v18 = (char *)&v41 - v17;
  v19 = sub_5EDC(&qword_1F15F0);
  __chkstk_darwin(v19);
  v21 = (char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for TaskPriority(0);
  v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v42 = v21;
  v23(v21, 1, 1, v22);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v41 = v18;
  v24(v18, v46, v13);
  v43 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24(v43, (uint64_t)v47, v13);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v26 = v48;
  v47 = v12;
  v48 = v9;
  v25(v12, v26, v9);
  v27 = qword_1F00B8;
  v46 = a2;
  swift_retain(a2);
  swift_bridgeObjectRetain(v50);
  if (v27 != -1)
    swift_once(&qword_1F00B8, sub_904FC);
  v28 = qword_1F2EA8;
  v29 = sub_41754(&qword_1F3190, (uint64_t (*)(uint64_t))type metadata accessor for RequestListActor.ActorType, (uint64_t)&unk_192CF4);
  v30 = *(unsigned __int8 *)(v14 + 80);
  v31 = (v30 + 40) & ~v30;
  v32 = (v15 + v30 + v31) & ~v30;
  v33 = (v15 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(unsigned __int8 *)(v10 + 80);
  v35 = v10;
  v36 = (v34 + v33 + 8) & ~v34;
  v37 = (char *)swift_allocObject(v45, v36 + v44, v30 | v34 | 7);
  *((_QWORD *)v37 + 2) = v28;
  *((_QWORD *)v37 + 3) = v29;
  *((_QWORD *)v37 + 4) = v46;
  v38 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v38(&v37[v31], v41, v13);
  v38(&v37[v32], v43, v13);
  *(_QWORD *)&v37[v33] = v50;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v37[v36], v47, v48);
  swift_retain(v28);
  v39 = sub_4C62C((uint64_t)v42, v49, (uint64_t)v37);
  return swift_release(v39);
}

uint64_t sub_9A718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  v9 = type metadata accessor for UUID(0);
  v8[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[19] = v10;
  v8[20] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MetadataCache.GenreMetadataRequest.ContinuationRecord(0);
  v8[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[22] = v12;
  v8[23] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5EDC(&qword_1F3138);
  v8[24] = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[25] = swift_task_alloc(v14);
  v8[26] = swift_task_alloc(v14);
  v8[27] = swift_task_alloc(v14);
  v8[28] = swift_task_alloc(v14);
  if (qword_1F00B8 != -1)
    swift_once(&qword_1F00B8, sub_904FC);
  v15 = qword_1F2EA8;
  v8[29] = qword_1F2EA8;
  return swift_task_switch(sub_9A828, v15, 0);
}

uint64_t sub_9A828()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;

  v1 = (_QWORD *)(*(_QWORD *)(v0 + 104) + 96);
  swift_beginAccess(v1, v0 + 56, 32, 0);
  v2 = *v1;
  if (*(_QWORD *)(*v1 + 16) && (v3 = sub_39574(*(_QWORD *)(v0 + 112)), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 168);
    v7 = *(_QWORD *)(v0 + 144);
    v8 = *(_QWORD *)(v0 + 152);
    v41 = *(_QWORD *)(v0 + 136);
    v9 = *(_QWORD *)(v0 + 120);
    v10 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v11 = *v10;
    v38 = v10[1];
    v39 = *(_QWORD *)(v0 + 128);
    swift_endAccess(v0 + 56);
    v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v40(v5, v9, v7);
    v12 = v5 + *(int *)(v6 + 24);
    v13 = sub_5EDC(&qword_1F31A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v12, v41, v13);
    *(_QWORD *)(v5 + *(int *)(v6 + 20)) = v39;
    v42 = v11;
    v14 = v11;
    v15 = v38;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
      v15 = sub_30C34(0, *(_QWORD *)(v38 + 16) + 1, 1, v38);
    v17 = *(_QWORD *)(v15 + 16);
    v16 = *(_QWORD *)(v15 + 24);
    if (v17 >= v16 >> 1)
      v15 = sub_30C34(v16 > 1, v17 + 1, 1, v15);
    v19 = *(_QWORD *)(v0 + 176);
    v18 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 160);
    v22 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 112);
    *(_QWORD *)(v15 + 16) = v17 + 1;
    sub_A2618(v18, v15+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v17, type metadata accessor for MetadataCache.GenreMetadataRequest.ContinuationRecord);
    v40(v20, v23, v22);
    swift_beginAccess(v1, v0 + 80, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
    v44 = *v1;
    *v1 = 0x8000000000000000;
    sub_17046C(v42, v15, v20, isUniquelyReferenced_nonNull_native);
    v25 = *v1;
    *v1 = v44;
    swift_bridgeObjectRelease(v25);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    swift_endAccess(v0 + 80);
    v26 = *(_QWORD *)(v0 + 216);
    v28 = *(_QWORD *)(v0 + 200);
    v27 = *(_QWORD *)(v0 + 208);
    v29 = *(_QWORD *)(v0 + 184);
    v30 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 104);
    v33 = swift_endAccess(v0 + 56);
    UUID.init()(v33);
    sub_3DD40(v32 + 144, v0 + 16);
    v34 = *(_QWORD *)(v0 + 40);
    v35 = *(_QWORD *)(v0 + 48);
    sub_49F4((_QWORD *)(v0 + 16), v34);
    v36 = *(int **)(v35 + 8);
    v43 = (int *)((char *)v36 + *v36);
    v37 = (_QWORD *)swift_task_alloc(v36[1]);
    *(_QWORD *)(v0 + 240) = v37;
    *v37 = v0;
    v37[1] = sub_9AB3C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v43)(*(_QWORD *)(v0 + 128), v34, v35);
  }
}

uint64_t sub_9AB3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 240);
  *(_QWORD *)(*v2 + 248) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 232);
  if (v1)
  {
    v7 = sub_9AE9C;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 192);
    *(_QWORD *)(v4 + 256) = a1;
    *(_DWORD *)(v4 + 264) = *(_DWORD *)(v8 + 48);
    v7 = sub_9ABBC;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_9ABBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  v1 = *(int *)(v0 + 264);
  v39 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v2 + v1) = *(_QWORD *)(v0 + 256);
  sub_62F8((_QWORD *)(v0 + 16));
  _StringGuts.grow(_:)(42);
  v7._object = (void *)0x80000000001A1300;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  v8 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v6, v8);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = 0x656E727574657220;
  v14._object = (void *)0xEE00207344492064;
  String.append(_:)(v14);
  v15 = *(int *)(v4 + 48);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v16(v3, v2, v6);
  v17 = *(_QWORD *)(v2 + v1);
  *(_QWORD *)(v3 + v15) = v17;
  swift_bridgeObjectRetain_n(v17, 2);
  v18 = sub_37EB0(v17);
  swift_bridgeObjectRelease(v17);
  v40 = v18;
  sub_9046C((uint64_t *)&v40);
  if (v39)
    return swift_release(v40);
  v21 = *(_QWORD *)(v0 + 216);
  v20 = *(_QWORD *)(v0 + 224);
  v22 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 208);
  v37 = *(_QWORD *)(v0 + 192);
  v38 = *(int *)(v0 + 264);
  v25 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRelease(v17);
  v26 = (uint64_t)v40;
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v21, v25);
  v27._countAndFlagsBits = Array.description.getter(v26, &type metadata for UInt64);
  v28 = v27._object;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  swift_release(v26);
  swift_bridgeObjectRelease(0xE000000000000000);
  v16(v23, v20, v25);
  v29 = *(_QWORD *)(v20 + v38);
  v30 = *(int *)(v37 + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v22, v23, v25);
  *(_QWORD *)(v22 + v30) = v29;
  swift_bridgeObjectRetain(v29);
  v31 = sub_5EDC(&qword_1F31A8);
  CheckedContinuation.resume(returning:)(v22, v31);
  sub_417D8(v20, &qword_1F3138);
  v32 = *(_QWORD *)(v0 + 216);
  v34 = *(_QWORD *)(v0 + 200);
  v33 = *(_QWORD *)(v0 + 208);
  v35 = *(_QWORD *)(v0 + 184);
  v36 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 224));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9AE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 144);
  sub_62F8((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v2, v8);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9AF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v7[7] = a1;
  v8 = sub_5EDC(&qword_1F3138);
  v7[12] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[13] = swift_task_alloc(v9);
  v7[14] = swift_task_alloc(v9);
  return swift_task_switch(sub_9AFB4, 0, 0);
}

uint64_t sub_9AFB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);

  v1 = v0[14];
  v3 = v0[9];
  v2 = v0[10];
  v4 = v0[8];
  v5 = type metadata accessor for UUID(0);
  v0[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[16] = v6;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v0[17] = v7;
  v7(v1, v4, v5);
  sub_3DD40(v3 + 144, (uint64_t)(v0 + 2));
  v8 = v0[5];
  v9 = v0[6];
  sub_49F4(v0 + 2, v8);
  v10 = swift_bridgeObjectRetain(v2);
  v11 = sub_3CD28(v10);
  v0[18] = v11;
  swift_bridgeObjectRelease(v2);
  v12 = *(int **)(v9 + 8);
  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc(v12[1]);
  v0[19] = v13;
  *v13 = v0;
  v13[1] = sub_9B09C;
  return v15(v11, v8, v9);
}

uint64_t sub_9B09C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 152);
  *(_QWORD *)(v3 + 160) = a1;
  *(_QWORD *)(v3 + 168) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_9B3A4;
  }
  else
  {
    v6 = *(_QWORD *)(v3 + 96);
    swift_bridgeObjectRelease(*(_QWORD *)(v3 + 144));
    *(_DWORD *)(v3 + 176) = *(_DWORD *)(v6 + 48);
    v5 = sub_9B11C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_9B11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  void *v12;
  Swift::String v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  _QWORD *v31;

  v1 = *(_QWORD *)(v0 + 160);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  v29 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v3 + *(int *)(v0 + 176)) = v1;
  swift_bridgeObjectRetain(v1);
  sub_62F8((_QWORD *)(v0 + 16));
  _StringGuts.grow(_:)(45);
  v6._object = (void *)0x80000000001A1250;
  v6._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v6);
  v7 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0x7473657571657220;
  v10._object = (void *)0xE900000000000020;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v7);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0x656E727574657220;
  v13._object = (void *)0xEE00207344492064;
  String.append(_:)(v13);
  v14 = *(int *)(v4 + 48);
  v28(v5, v3, v2);
  *(_QWORD *)(v5 + v14) = v1;
  swift_bridgeObjectRetain_n(v1, 2);
  v15 = sub_37EB0(v1);
  swift_bridgeObjectRelease(v1);
  v31 = v15;
  sub_9046C((uint64_t *)&v31);
  if (v29)
    return swift_release(v31);
  v17 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 128);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 136);
  v20 = *(_QWORD *)(v0 + 112);
  v19 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 96);
  v21 = *(_QWORD *)(v0 + 104);
  v23 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease(v17);
  v24 = (uint64_t)v31;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v19);
  v25._countAndFlagsBits = Array.description.getter(v24, &type metadata for UInt64);
  v26 = v25._object;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v26);
  swift_release(v24);
  swift_bridgeObjectRelease(0xE000000000000000);
  v27 = *(int *)(v22 + 48);
  v30(v23, v20, v19);
  *(_QWORD *)(v23 + v27) = v17;
  sub_417D8(v20, &qword_1F3138);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_9B3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  sub_62F8((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_9B41C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  id v20;
  _QWORD aBlock[5];
  char *v22;

  v10 = sub_5EDC(&qword_1F3150);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v14 = *(unsigned __int8 *)(v11 + 80);
  v15 = (v14 + 40) & ~v14;
  v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (char *)swift_allocObject(&unk_1E2538, v16 + 8, v14 | 7);
  *((_QWORD *)v17 + 2) = a2;
  *((_QWORD *)v17 + 3) = a3;
  *((_QWORD *)v17 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v15], v13, v10);
  *(_QWORD *)&v17[v16] = a5;
  aBlock[4] = sub_A1C84;
  v22 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_173138;
  aBlock[3] = &unk_1E2550;
  v18 = _Block_copy(aBlock);
  v19 = v22;
  v20 = a2;
  swift_bridgeObjectRetain(a3);
  swift_retain(a4);
  swift_release(v19);
  objc_msgSend(v20, "performBlock:", v18);
  _Block_release(v18);
}

void sub_9B594(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  NSString *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  int64_t v75;
  unint64_t i;
  int64_t v77;
  unint64_t v78;
  int64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  void *v87;
  int v88;
  uint64_t v89;
  objc_class *v90;
  NSString *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  id v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  id v107;
  char *v108;
  Class isa;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int64_t v115;
  id v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int64_t v121;
  uint64_t v122;
  unint64_t v123;
  char v124;
  id v125;
  NSString *v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  void *v130;
  id v131;
  _QWORD *v132;
  char v133;
  unint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  char v138;
  unint64_t v139;
  char v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  id v153;
  NSString *v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  void *v158;
  Class v159;
  char *v160;
  uint64_t v161;
  Class v162;
  id v163;
  _QWORD *v164;
  char v165;
  unint64_t v166;
  uint64_t v167;
  _BOOL8 v168;
  uint64_t v169;
  char v170;
  unint64_t v171;
  char v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unsigned int v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint8_t *v184;
  unint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  os_log_type_t v200;
  uint8_t *v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  id v208;
  id v209;
  void (*v210)(char *, uint64_t);
  Class ObjCClassFromMetadata;
  uint64_t v212;
  id v213;
  char *v214;
  uint64_t v215;
  Class v216;
  uint64_t v217;
  unint64_t v218;
  int64_t v219;
  unint64_t v220;
  int64_t v221;
  id v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int64_t v226;
  uint64_t v227;
  _QWORD *v228;
  unint64_t v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t v232;

  v206 = a4;
  v205 = a3;
  v223 = a2;
  v215 = type metadata accessor for Date(0);
  v207 = *(_QWORD *)(v215 - 8);
  __chkstk_darwin(v215);
  v214 = (char *)&v203 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for CachedPersonalizationBookMetadataGenre();
  ObjCClassFromMetadata = (Class)swift_getObjCClassFromMetadata(v6);
  v7 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = objc_allocWithZone((Class)NSFetchRequest);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v12 = objc_msgSend(v10, "initWithEntityName:", v11);

  v209 = v12;
  v212 = v6;
  v13 = NSManagedObjectContext.fetch<A>(_:)(v12, v6);
  if (!v13)
    v13 = (uint64_t)_swiftEmptyArrayStorage;
  v229 = 0;
  v224 = a1;
  if ((unint64_t)v13 >> 62)
    goto LABEL_25;
  v14 = *(_QWORD *)((char *)&dword_10 + (v13 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v13);
  while (v14)
  {
    v230 = (_QWORD *)(v13 & 0xC000000000000001);
    v228 = _swiftEmptyDictionarySingleton;
    v15 = 4;
    while (1)
    {
      v17 = v230
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v13)
          : *(id *)(v13 + 8 * v15);
      v18 = v17;
      v19 = v15 - 3;
      if (__OFADD__(v15 - 4, 1))
        break;
      v20 = v13;
      v21 = (uint64_t)objc_msgSend(v17, "genreID");
      if (v21 < 0)
      {
LABEL_203:
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
        __break(1u);
LABEL_204:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        __break(1u);
        return;
      }
      v13 = v21;
      v22 = v228;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v228);
      v231 = v22;
      v25 = sub_39228(v13);
      v26 = v22[2];
      v27 = (v24 & 1) == 0;
      v28 = v26 + v27;
      if (__OFADD__(v26, v27))
        goto LABEL_23;
      v29 = v24;
      if (v22[3] >= v28)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_16CDD0();
      }
      else
      {
        sub_15DC5C(v28, isUniquelyReferenced_nonNull_native);
        v30 = sub_39228(v13);
        if ((v29 & 1) != (v31 & 1))
          goto LABEL_204;
        v25 = v30;
      }
      v32 = v231;
      v228 = v231;
      if ((v29 & 1) != 0)
      {
        v16 = v231[7];

        *(_QWORD *)(v16 + 8 * v25) = v18;
      }
      else
      {
        v231[(v25 >> 6) + 8] |= 1 << v25;
        *(_QWORD *)(v32[6] + 8 * v25) = v13;
        *(_QWORD *)(v32[7] + 8 * v25) = v18;
        v33 = v32[2];
        v34 = __OFADD__(v33, 1);
        v35 = v33 + 1;
        if (v34)
          goto LABEL_24;
        v32[2] = v35;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
      ++v15;
      v13 = v20;
      if (v19 == v14)
        goto LABEL_30;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    if (v13 < 0)
      v36 = v13;
    else
      v36 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v13, 2);
    v14 = _CocoaArrayWrapper.endIndex.getter(v36);
    swift_bridgeObjectRelease(v13);
  }
  v228 = _swiftEmptyDictionarySingleton;
LABEL_30:
  swift_bridgeObjectRelease_n(v13, 2);
  v37 = type metadata accessor for CachedPersonalizationBookMetadataAuthor();
  v216 = (Class)swift_getObjCClassFromMetadata(v37);
  v38 = NSStringFromClass(v216);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
  v40 = v39;

  v41 = objc_allocWithZone((Class)NSFetchRequest);
  v42 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v40);
  v43 = objc_msgSend(v41, "initWithEntityName:", v42);

  v208 = v43;
  v217 = v37;
  v44 = v37;
  v45 = v224;
  v46 = v229;
  v47 = NSManagedObjectContext.fetch<A>(_:)(v43, v44);
  if (v46)
  {
    swift_errorRelease(v46);
    v203 = 0;
  }
  else
  {
    v48 = v47;
    v203 = 0;
    if (v47)
      goto LABEL_34;
  }
  v48 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_34:
  if ((unint64_t)v48 >> 62)
    goto LABEL_56;
  v49 = *(_QWORD *)((char *)&dword_10 + (v48 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(v48);
  while (v49)
  {
    v229 = v48 & 0xC000000000000001;
    v230 = _swiftEmptyDictionarySingleton;
    v50 = 4;
    while (1)
    {
      v52 = v229
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50 - 4, v48)
          : *(id *)(v48 + 8 * v50);
      v45 = (uint64_t)v52;
      v53 = v50 - 3;
      if (__OFADD__(v50 - 4, 1))
        break;
      v54 = (uint64_t)objc_msgSend(v52, "authorID", v203);
      if (v54 < 0)
        goto LABEL_203;
      v55 = v54;
      v56 = v230;
      v57 = swift_isUniquelyReferenced_nonNull_native(v230);
      v231 = v56;
      v59 = sub_39228(v55);
      v60 = v56[2];
      v61 = (v58 & 1) == 0;
      v62 = v60 + v61;
      if (__OFADD__(v60, v61))
        goto LABEL_54;
      v63 = v58;
      if (v56[3] >= v62)
      {
        if ((v57 & 1) == 0)
          sub_16CDDC();
      }
      else
      {
        sub_15DC68(v62, v57);
        v64 = sub_39228(v55);
        if ((v63 & 1) != (v65 & 1))
          goto LABEL_204;
        v59 = v64;
      }
      v66 = v231;
      v230 = v231;
      if ((v63 & 1) != 0)
      {
        v51 = v231[7];

        *(_QWORD *)(v51 + 8 * v59) = v45;
      }
      else
      {
        v231[(v59 >> 6) + 8] |= 1 << v59;
        v67 = 8 * v59;
        *(_QWORD *)(v66[6] + v67) = v55;
        *(_QWORD *)(v66[7] + v67) = v45;
        v68 = v66[2];
        v34 = __OFADD__(v68, 1);
        v69 = v68 + 1;
        if (v34)
          goto LABEL_55;
        v66[2] = v69;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
      ++v50;
      v45 = v224;
      if (v53 == v49)
        goto LABEL_61;
    }
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    if (v48 < 0)
      v70 = v48;
    else
      v70 = v48 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v48, 2);
    v49 = _CocoaArrayWrapper.endIndex.getter(v70);
    swift_bridgeObjectRelease(v48);
  }
  v230 = _swiftEmptyDictionarySingleton;
LABEL_61:
  swift_bridgeObjectRelease_n(v48, 2);
  v71 = *(_QWORD *)(v223 + 64);
  v218 = v223 + 64;
  v72 = 1 << *(_BYTE *)(v223 + 32);
  if (v72 < 64)
    v73 = ~(-1 << v72);
  else
    v73 = -1;
  v74 = v73 & v71;
  v219 = (unint64_t)(v72 + 63) >> 6;
  swift_bridgeObjectRetain(v223);
  v75 = 0;
  if (!v74)
    goto LABEL_66;
LABEL_65:
  v225 = (v74 - 1) & v74;
  v226 = v75;
  for (i = __clz(__rbit64(v74)) | (v75 << 6); ; i = __clz(__rbit64(v78)) + (v77 << 6))
  {
    v80 = *(_QWORD *)(*(_QWORD *)(v223 + 48) + 8 * i);
    v81 = (unsigned __int8 *)(*(_QWORD *)(v223 + 56) + 72 * i);
    v82 = *v81;
    v83 = *((_QWORD *)v81 + 1);
    v84 = *((_QWORD *)v81 + 2);
    v85 = *((_QWORD *)v81 + 3);
    v86 = v81[32];
    v87 = (void *)*((_QWORD *)v81 + 5);
    v88 = v81[48];
    v221 = *((_QWORD *)v81 + 7);
    v222 = v87;
    LODWORD(v220) = v81[64];
    v89 = type metadata accessor for CachedPersonalizationBookMetadata();
    v90 = (objc_class *)swift_getObjCClassFromMetadata(v89);
    v227 = v83;
    swift_bridgeObjectRetain(v83);
    v229 = v84;
    swift_bridgeObjectRetain(v84);
    v91 = NSStringFromClass(v90);
    if (!v91)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v93 = v92;
      v91 = (NSString *)String._bridgeToObjectiveC()();
      v94 = v93;
      v45 = v224;
      swift_bridgeObjectRelease(v94);
    }
    v95 = (void *)objc_opt_self(NSEntityDescription);
    v96 = v45;
    v45 = (uint64_t)objc_msgSend(v95, "insertNewObjectForEntityForName:inManagedObjectContext:", v91, v45);

    v97 = (void *)swift_dynamicCastClass(v45, v89);
    if (v97)
      break;
    swift_bridgeObjectRelease(v229);
    swift_bridgeObjectRelease(v227);

    if (qword_1F00C8 != -1)
      swift_once(&qword_1F00C8, sub_90D34);
    v98 = type metadata accessor for Logger(0);
    v99 = sub_5216C(v98, (uint64_t)qword_224590);
    v100 = Logger.logObject.getter(v99);
    v101 = static os_log_type_t.error.getter();
    v45 = v96;
    if (os_log_type_enabled(v100, v101))
    {
      v102 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v102 = 0;
      _os_log_impl(&dword_0, v100, v101, "Failed to create metadata", v102, 2u);
      swift_slowDealloc(v102, -1, -1);
    }

LABEL_85:
    v74 = v225;
    v75 = v226;
    if (v225)
      goto LABEL_65;
LABEL_66:
    v34 = __OFADD__(v75, 1);
    v77 = v75 + 1;
    if (v34)
      goto LABEL_190;
    if (v77 >= v219)
    {
LABEL_169:
      swift_release(v223);
      sub_9C9D8((void *)v45);
      if ((objc_msgSend((id)v45, "hasChanges") & 1) != 0)
      {
        v231 = 0;
        v177 = objc_msgSend((id)v45, "save:", &v231);
        v178 = v231;
        if (v177)
        {
          v179 = v231;
        }
        else
        {
          v186 = v231;
          v187 = _convertNSErrorToError(_:)(v178);

          swift_willThrow(v188);
          if (qword_1F00C8 != -1)
            swift_once(&qword_1F00C8, sub_90D34);
          v189 = type metadata accessor for Logger(0);
          sub_5216C(v189, (uint64_t)qword_224590);
          swift_errorRetain(v187);
          v190 = swift_errorRetain(v187);
          v191 = Logger.logObject.getter(v190);
          v192 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v191, v192))
          {
            v193 = (uint8_t *)swift_slowAlloc(12, -1);
            v194 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v193 = 138412290;
            swift_errorRetain(v187);
            v195 = (_QWORD *)_swift_stdlib_bridgeErrorToNSError(v187);
            v231 = v195;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v231, &v232, v193 + 4, v193 + 12);
            *v194 = v195;
            swift_errorRelease(v187);
            swift_errorRelease(v187);
            _os_log_impl(&dword_0, v191, v192, "Failed to save cache insertions %@", v193, 0xCu);
            v196 = sub_5EDC(&qword_1F3158);
            swift_arrayDestroy(v194, 1, v196);
            swift_slowDealloc(v194, -1, -1);
            swift_slowDealloc(v193, -1, -1);

            swift_errorRelease(v187);
          }
          else
          {
            swift_errorRelease(v187);
            swift_errorRelease(v187);
            swift_errorRelease(v187);

          }
        }
      }
      v231 = 0;
      v202 = sub_5EDC(&qword_1F3150);
      CheckedContinuation.resume(returning:)(&v231, v202);

      swift_bridgeObjectRelease(v228);
      swift_bridgeObjectRelease(v230);
      return;
    }
    v78 = *(_QWORD *)(v218 + 8 * v77);
    if (!v78)
    {
      v79 = v77 + 1;
      if (v77 + 1 >= v219)
        goto LABEL_169;
      v78 = *(_QWORD *)(v218 + 8 * v79);
      if (!v78)
      {
        v79 = v77 + 2;
        if (v77 + 2 >= v219)
          goto LABEL_169;
        v78 = *(_QWORD *)(v218 + 8 * v79);
        if (!v78)
        {
          v79 = v77 + 3;
          if (v77 + 3 >= v219)
            goto LABEL_169;
          v78 = *(_QWORD *)(v218 + 8 * v79);
          if (!v78)
          {
            while (1)
            {
              v77 = v79 + 1;
              if (__OFADD__(v79, 1))
                goto LABEL_195;
              if (v77 >= v219)
                goto LABEL_169;
              v78 = *(_QWORD *)(v218 + 8 * v77);
              ++v79;
              if (v78)
                goto LABEL_76;
            }
          }
        }
      }
      v77 = v79;
    }
LABEL_76:
    v225 = (v78 - 1) & v78;
    v226 = v77;
  }
  v213 = v95;
  v204 = (id)v45;
  if (v80 < 0)
    goto LABEL_198;
  v103 = v97;
  objc_msgSend(v97, "setAssetID:", v80);
  if (v86)
    v104 = 0;
  else
    v104 = v85;
  if (v104 < 0)
  {
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    swift_once(&qword_1F00C8, sub_90D34);
LABEL_173:
    v180 = type metadata accessor for Logger(0);
    v181 = sub_5216C(v180, (uint64_t)qword_224590);
    v182 = Logger.logObject.getter(v181);
    v183 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v182, v183))
    {
      v184 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v184 = 0;
      _os_log_impl(&dword_0, v182, v183, "Failed to insert author object into database", v184, 2u);
      swift_slowDealloc(v184, -1, -1);
    }

    swift_bridgeObjectRelease(v228);
    swift_bridgeObjectRelease(v230);
    swift_release(v223);
    v185 = v229;
    goto LABEL_185;
  }
  objc_msgSend(v103, "setMappedAssetID:");
  if (v88)
    v105 = 0;
  else
    v105 = (unint64_t)v222;
  if ((v105 & 0x8000000000000000) != 0)
    goto LABEL_200;
  objc_msgSend(v103, "setSeriesID:");
  if ((_DWORD)v220)
    v106 = 0;
  else
    v106 = v221;
  if (v106 < 0)
    goto LABEL_201;
  v107 = objc_msgSend(v103, "setMappedSeriesID:");
  v108 = v214;
  Date.init()(v107);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v210 = *(void (**)(char *, uint64_t))(v207 + 8);
  v210(v108, v215);
  objc_msgSend(v103, "setLastAccessDate:", isa);

  if (v82)
    v110 = 2;
  else
    v110 = 1;
  objc_msgSend(v103, "setMediaType:", v110, v203);
  v111 = *(_QWORD *)(v229 + 56);
  v220 = v229 + 56;
  v112 = 1 << *(_BYTE *)(v229 + 32);
  if (v112 < 64)
    v113 = ~(-1 << v112);
  else
    v113 = -1;
  v114 = v113 & v111;
  v221 = (unint64_t)(v112 + 63) >> 6;
  swift_bridgeObjectRetain(v229);
  v115 = 0;
  v45 = v96;
  v116 = v213;
  v222 = v103;
  while (1)
  {
    if (v114)
    {
      v118 = __clz(__rbit64(v114));
      v114 &= v114 - 1;
      v119 = v118 | (v115 << 6);
      goto LABEL_127;
    }
    v34 = __OFADD__(v115++, 1);
    if (v34)
      goto LABEL_191;
    if (v115 >= v221)
      break;
    v120 = *(_QWORD *)(v220 + 8 * v115);
    if (!v120)
    {
      v121 = v115 + 1;
      if (v115 + 1 >= v221)
        break;
      v120 = *(_QWORD *)(v220 + 8 * v121);
      if (!v120)
      {
        v121 = v115 + 2;
        if (v115 + 2 >= v221)
          break;
        v120 = *(_QWORD *)(v220 + 8 * v121);
        if (!v120)
        {
          v121 = v115 + 3;
          if (v115 + 3 >= v221)
            break;
          v120 = *(_QWORD *)(v220 + 8 * v121);
          if (!v120)
          {
            while (1)
            {
              v115 = v121 + 1;
              if (__OFADD__(v121, 1))
                break;
              if (v115 >= v221)
                goto LABEL_147;
              v120 = *(_QWORD *)(v220 + 8 * v115);
              ++v121;
              if (v120)
                goto LABEL_126;
            }
LABEL_196:
            __break(1u);
LABEL_197:
            __break(1u);
LABEL_198:
            __break(1u);
            goto LABEL_199;
          }
        }
      }
      v115 = v121;
    }
LABEL_126:
    v114 = (v120 - 1) & v120;
    v119 = __clz(__rbit64(v120)) + (v115 << 6);
LABEL_127:
    v122 = *(_QWORD *)(*(_QWORD *)(v229 + 48) + 8 * v119);
    if (v230[2] && (v123 = sub_39228(v122), (v124 & 1) != 0))
    {
      v125 = *(id *)(v230[7] + 8 * v123);
    }
    else
    {
      v126 = NSStringFromClass(v216);
      if (!v126)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(0);
        v128 = v127;
        v126 = (NSString *)String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v128);
      }
      v129 = objc_msgSend(v116, "insertNewObjectForEntityForName:inManagedObjectContext:", v126, v45);

      v130 = (void *)swift_dynamicCastClass(v129, v217);
      if (!v130)
      {
        swift_bridgeObjectRelease(v229);
        swift_bridgeObjectRelease(v227);

        v45 = (uint64_t)v204;
        if (qword_1F00C8 != -1)
          goto LABEL_202;
        goto LABEL_173;
      }
      if (v122 < 0)
      {
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
        goto LABEL_196;
      }
      v125 = v130;
      objc_msgSend(v130, "setAuthorID:", v122);
      v131 = v129;
      v132 = v230;
      v45 = swift_isUniquelyReferenced_nonNull_native(v230);
      v231 = v132;
      v134 = sub_39228(v122);
      v135 = v132[2];
      v136 = (v133 & 1) == 0;
      v137 = v135 + v136;
      if (__OFADD__(v135, v136))
        goto LABEL_189;
      v138 = v133;
      if (v132[3] >= v137)
      {
        if ((v45 & 1) == 0)
          sub_16CDDC();
      }
      else
      {
        sub_15DC68(v137, v45);
        v139 = sub_39228(v122);
        if ((v138 & 1) != (v140 & 1))
          goto LABEL_204;
        v134 = v139;
      }
      v45 = v224;
      v141 = v231;
      v230 = v231;
      if ((v138 & 1) != 0)
      {
        v117 = v231[7];

        *(_QWORD *)(v117 + 8 * v134) = v125;
      }
      else
      {
        v231[(v134 >> 6) + 8] |= 1 << v134;
        v142 = 8 * v134;
        *(_QWORD *)(v141[6] + v142) = v122;
        *(_QWORD *)(v141[7] + v142) = v125;
        v143 = v141[2];
        v34 = __OFADD__(v143, 1);
        v144 = v143 + 1;
        if (v34)
          goto LABEL_192;
        v141[2] = v144;
      }
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    v103 = v222;
    objc_msgSend(v222, "addAuthorsObject:", v125);

  }
LABEL_147:
  v145 = v229;
  swift_release(v229);
  swift_bridgeObjectRelease(v145);
  v146 = *(_QWORD *)(v227 + 16);
  if (!v146)
  {
LABEL_168:
    swift_bridgeObjectRelease(v227);
    objc_msgSend(v103, "setGenresKnown:", 1);

    goto LABEL_85;
  }
  v147 = (uint64_t *)(v227 + 40);
  while (2)
  {
    v150 = *(v147 - 1);
    v149 = *v147;
    if (v228[2])
    {
      v151 = sub_39228(*(v147 - 1));
      if ((v152 & 1) != 0)
      {
        v153 = *(id *)(v228[7] + 8 * v151);
LABEL_151:
        objc_msgSend(v103, "addLeafGenresObject:", v153);

        v147 += 2;
        if (!--v146)
          goto LABEL_168;
        continue;
      }
    }
    break;
  }
  swift_bridgeObjectRetain(v149);
  v154 = NSStringFromClass(ObjCClassFromMetadata);
  if (!v154)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v156 = v155;
    v154 = (NSString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v156);
  }
  v157 = objc_msgSend(v213, "insertNewObjectForEntityForName:inManagedObjectContext:", v154, v45);

  v158 = (void *)swift_dynamicCastClass(v157, v212);
  if (v158)
  {
    if (v150 < 0)
      goto LABEL_193;
    v153 = v158;
    objc_msgSend(v158, "setGenreID:", v150);
    v159 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v149);
    objc_msgSend(v153, "setPath:", v159);

    v160 = v214;
    Date.init()(v161);
    v162 = Date._bridgeToObjectiveC()().super.isa;
    v210(v160, v215);
    objc_msgSend(v153, "setLastAccessDate:", v162);

    v163 = v157;
    v164 = v228;
    v45 = swift_isUniquelyReferenced_nonNull_native(v228);
    v231 = v164;
    v166 = sub_39228(v150);
    v167 = v164[2];
    v168 = (v165 & 1) == 0;
    v169 = v167 + v168;
    if (__OFADD__(v167, v168))
      goto LABEL_194;
    v170 = v165;
    if (v164[3] >= v169)
    {
      if ((v45 & 1) == 0)
        sub_16CDD0();
    }
    else
    {
      sub_15DC5C(v169, v45);
      v171 = sub_39228(v150);
      if ((v170 & 1) != (v172 & 1))
        goto LABEL_204;
      v166 = v171;
    }
    v45 = v224;
    v173 = v231;
    v228 = v231;
    if ((v170 & 1) != 0)
    {
      v148 = v231[7];

      *(_QWORD *)(v148 + 8 * v166) = v153;
    }
    else
    {
      v231[(v166 >> 6) + 8] |= 1 << v166;
      v174 = 8 * v166;
      *(_QWORD *)(v173[6] + v174) = v150;
      *(_QWORD *)(v173[7] + v174) = v153;
      v175 = v173[2];
      v34 = __OFADD__(v175, 1);
      v176 = v175 + 1;
      if (v34)
        goto LABEL_197;
      v173[2] = v176;
    }
    swift_bridgeObjectRelease(0x8000000000000000);
    v103 = v222;
    goto LABEL_151;
  }
  swift_bridgeObjectRelease(v227);

  swift_bridgeObjectRelease(v149);
  v197 = v204;
  if (qword_1F00C8 != -1)
    swift_once(&qword_1F00C8, sub_90D34);
  v198 = type metadata accessor for Logger(0);
  v199 = sub_5216C(v198, (uint64_t)qword_224590);
  v182 = Logger.logObject.getter(v199);
  v200 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v182, v200))
  {
    v201 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v201 = 0;
    _os_log_impl(&dword_0, v182, v200, "Failed to insert genre object into database", v201, 2u);
    swift_slowDealloc(v201, -1, -1);
  }

  swift_bridgeObjectRelease(v228);
  swift_bridgeObjectRelease(v230);
  v185 = v223;
LABEL_185:
  swift_release(v185);

}

void sub_9C9D8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  objc_class *ObjCClassFromMetadata;
  NSString *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;

  v2 = v1;
  v4 = type metadata accessor for CachedPersonalizationBookMetadata();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v4);
  v6 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

  v9 = objc_allocWithZone((Class)NSFetchRequest);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  v33 = objc_msgSend(v9, "initWithEntityName:", v10);

  v11 = NSManagedObjectContext.count<A>(for:)(v33, v4);
  v12 = *(_QWORD *)(v2 + 40);
  if (v12 < 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v13 = v11 - v12;
  if (__OFSUB__(v11, v12))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v13 < 0 || !v13)
    goto LABEL_19;
  v14 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v16 = v15;

  v17 = objc_allocWithZone((Class)NSFetchRequest);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v19 = objc_msgSend(v17, "initWithEntityName:", v18);

  v20 = sub_5EDC(&qword_1F3200);
  v21 = swift_allocObject(v20, 40, 7);
  *(_OWORD *)(v21 + 16) = xmmword_192BB0;
  v22 = objc_allocWithZone((Class)NSSortDescriptor);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v22, "initWithKey:ascending:", v23, 1);

  *(_QWORD *)(v21 + 32) = v24;
  specialized Array._endMutation()();
  sub_A1CD0(0, &qword_1F3208, NSSortDescriptor_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  objc_msgSend(v19, "setSortDescriptors:", isa);

  objc_msgSend(v19, "setFetchLimit:", v13);
  v26 = NSManagedObjectContext.fetch<A>(_:)(v19, v4);
  v31 = v26;
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0)
      v32 = v26;
    else
      v32 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v27 = _CocoaArrayWrapper.endIndex.getter(v32);
    swift_bridgeObjectRelease(v31);
    if (!v27)
      goto LABEL_18;
  }
  else
  {
    v27 = *(_QWORD *)((char *)&dword_10 + (v26 & 0xFFFFFFFFFFFFF8));
    if (!v27)
    {
LABEL_18:

      swift_bridgeObjectRelease(v31);
LABEL_19:

      return;
    }
  }
  if (v27 >= 1)
  {
    for (i = 0; i != v27; ++i)
    {
      if ((v31 & 0xC000000000000001) != 0)
        v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v31);
      else
        v29 = *(id *)(v31 + 8 * i + 32);
      v30 = v29;
      objc_msgSend(a1, "deleteObject:", v29, v33);

    }
    goto LABEL_18;
  }
LABEL_22:
  __break(1u);
}

void sub_9CEB8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v8 = sub_5EDC(&qword_1F3150);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = (v10 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_1E23A8, v14 + 8, v12 | 7);
  *(_QWORD *)(v15 + 16) = a3;
  *(_QWORD *)(v15 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v15 + v13, v11, v8);
  *(_QWORD *)(v15 + v14) = a4;
  aBlock[4] = sub_A0AA4;
  v20 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_173138;
  aBlock[3] = &unk_1E23C0;
  v16 = _Block_copy(aBlock);
  v17 = v20;
  swift_bridgeObjectRetain(a3);
  v18 = a2;
  swift_release(v17);
  objc_msgSend(v18, "performBlock:", v16);
  _Block_release(v16);
}

uint64_t sub_9D020(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  void *v13;
  Class isa;
  uint64_t v15;
  NSDate v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  objc_class *ObjCClassFromMetadata;
  NSString *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  unsigned int v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  id v56;
  uint64_t v57;

  v51 = a3;
  v5 = type metadata accessor for Date(0);
  v52 = *(_QWORD *)(v5 - 8);
  v53 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 64);
  v54 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v55 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v12 = 0;
  if (v11)
    goto LABEL_8;
LABEL_9:
  while (2)
  {
    v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      swift_once(&qword_1F00C8, sub_90D34);
      goto LABEL_35;
    }
    if (v19 < v55)
    {
      v20 = *(_QWORD *)(v54 + 8 * v19);
      ++v12;
      if (v20)
        goto LABEL_22;
      v12 = v19 + 1;
      if (v19 + 1 >= v55)
        break;
      v20 = *(_QWORD *)(v54 + 8 * v12);
      if (v20)
        goto LABEL_22;
      v12 = v19 + 2;
      if (v19 + 2 >= v55)
        break;
      v20 = *(_QWORD *)(v54 + 8 * v12);
      if (v20)
      {
LABEL_22:
        v11 = (v20 - 1) & v20;
        for (i = __clz(__rbit64(v20)) + (v12 << 6); ; i = v17 | (v12 << 6))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
          v23 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
          v24 = type metadata accessor for CachedPersonalizationBookMetadataGenre();
          ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v24);
          swift_bridgeObjectRetain(v23);
          v26 = NSStringFromClass(ObjCClassFromMetadata);
          if (!v26)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(0);
            v28 = v27;
            v26 = (NSString *)String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v28);
          }
          v29 = (void *)objc_opt_self(NSEntityDescription);
          v30 = objc_msgSend(v29, "insertNewObjectForEntityForName:inManagedObjectContext:", v26, a2, v51);

          v31 = (void *)swift_dynamicCastClass(v30, v24);
          if (v31)
            break;
          swift_bridgeObjectRelease(v23);

          if (qword_1F00C8 != -1)
            swift_once(&qword_1F00C8, sub_90D34);
          v32 = type metadata accessor for Logger(0);
          v33 = sub_5216C(v32, (uint64_t)qword_224590);
          v16.super.isa = (Class)Logger.logObject.getter(v33);
          v34 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled((os_log_t)v16.super.isa, v34))
            goto LABEL_7;
          v35 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v35 = 0;
          _os_log_impl(&dword_0, (os_log_t)v16.super.isa, v34, "Failed to create genre metadata", v35, 2u);
          swift_slowDealloc(v35, -1, -1);

          if (!v11)
            goto LABEL_9;
LABEL_8:
          v17 = __clz(__rbit64(v11));
          v11 &= v11 - 1;
        }
        if (v22 < 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v13 = v31;
        objc_msgSend(v31, "setGenreID:", v22);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v23);
        objc_msgSend(v13, "setPath:", isa);

        Date.init()(v15);
        v16.super.isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v52 + 8))(v7, v53);
        objc_msgSend(v13, "setLastAccessDate:", v16.super.isa);

LABEL_7:
        if (!v11)
          continue;
        goto LABEL_8;
      }
      v21 = v19 + 3;
      if (v21 < v55)
      {
        v20 = *(_QWORD *)(v54 + 8 * v21);
        if (v20)
        {
          v12 = v21;
          goto LABEL_22;
        }
        while (1)
        {
          v12 = v21 + 1;
          if (__OFADD__(v21, 1))
            goto LABEL_41;
          if (v12 >= v55)
            goto LABEL_31;
          v20 = *(_QWORD *)(v54 + 8 * v12);
          ++v21;
          if (v20)
            goto LABEL_22;
        }
      }
    }
    break;
  }
LABEL_31:
  swift_release(a1);
  if ((objc_msgSend(a2, "hasChanges", v51) & 1) == 0)
    goto LABEL_38;
  v56 = 0;
  v36 = objc_msgSend(a2, "save:", &v56);
  v37 = v56;
  if (v36)
  {
    v38 = v56;
    goto LABEL_38;
  }
  v39 = v56;
  a1 = _convertNSErrorToError(_:)(v37);

  swift_willThrow(v40);
  if (qword_1F00C8 != -1)
    goto LABEL_42;
LABEL_35:
  v41 = type metadata accessor for Logger(0);
  sub_5216C(v41, (uint64_t)qword_224590);
  swift_errorRetain(a1);
  v42 = swift_errorRetain(a1);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v45 = 138412290;
    swift_errorRetain(a1);
    v47 = (void *)_swift_stdlib_bridgeErrorToNSError(a1);
    v56 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v45 + 4, v45 + 12);
    *v46 = v47;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl(&dword_0, v43, v44, "Failed to save cache insertions %@", v45, 0xCu);
    v48 = sub_5EDC(&qword_1F3158);
    swift_arrayDestroy(v46, 1, v48);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    swift_errorRelease(a1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
LABEL_38:
  v56 = 0;
  v49 = sub_5EDC(&qword_1F3150);
  return CheckedContinuation.resume(returning:)(&v56, v49);
}

uint64_t sub_9D5E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1F2ED4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_70AB4;
  v7[9] = a2;
  v7[10] = v6;
  v7[8] = a1;
  return swift_task_switch(sub_92458, 0, 0);
}

uint64_t sub_9D654(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1F2EE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_A3008;
  v5[8] = a1;
  v5[9] = v4;
  return swift_task_switch(sub_92788, 0, 0);
}

uint64_t sub_9D6B8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1F2EF4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_A3008;
  v5[8] = a1;
  v5[9] = v4;
  return swift_task_switch(sub_94400, 0, 0);
}

void *sub_9D71C(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  void (*v35)(_QWORD *, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  _QWORD *v45;

  v1 = objc_msgSend(a1, "authors");
  if (!v1)
    return &_swiftEmptySetSingleton;
  v2 = v1;
  v41[0] = 0;
  v3 = type metadata accessor for CachedPersonalizationBookMetadataAuthor();
  v4 = sub_41754(&qword_1F3298, (uint64_t (*)(uint64_t))type metadata accessor for CachedPersonalizationBookMetadataAuthor, (uint64_t)&protocol conformance descriptor for NSObject);
  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v2, v41, v3, v4);

  v5 = v41[0];
  result = &_swiftEmptySetSingleton;
  if (!v41[0])
    return result;
  v7 = v41[0] & 0xC000000000000001;
  if ((v41[0] & 0xC000000000000001) == 0)
  {
    v9 = *(_QWORD *)(v41[0] + 16);
    if (v9)
      goto LABEL_8;
    goto LABEL_14;
  }
  if (v41[0] >= 0)
    v8 = v41[0] & 0xFFFFFFFFFFFFFF8;
  else
    v8 = v41[0];
  v9 = __CocoaSet.count.getter(v8);
  if (!v9)
  {
LABEL_14:
    swift_bridgeObjectRelease(v5);
    v14 = _swiftEmptyArrayStorage;
LABEL_33:
    v41[0] = &_swiftEmptySetSingleton;
    v37 = v14[2];
    if (v37)
    {
      swift_bridgeObjectRetain(v14);
      for (i = 0; i != v37; ++i)
      {
        v39 = v14[i + 4];
        sub_1628D4(&v42, v39);
      }
      swift_bridgeObjectRelease_n(v14, 2);
      return (void *)v41[0];
    }
    swift_bridgeObjectRelease(v14);
    return &_swiftEmptySetSingleton;
  }
LABEL_8:
  v45 = _swiftEmptyArrayStorage;
  sub_340AC(0, v9 & ~(v9 >> 63), 0);
  if (v7)
  {
    if (v5 >= 0)
      v10 = v5 & 0xFFFFFFFFFFFFFF8;
    else
      v10 = v5;
    v11 = __CocoaSet.startIndex.getter(v10);
    v13 = 1;
  }
  else
  {
    v11 = sub_9FB98(v5);
    v13 = v15 & 1;
  }
  v42 = v11;
  v43 = v12;
  v44 = v13;
  if (v9 < 0)
  {
    __break(1u);
LABEL_41:
    __break(1u);
  }
  else
  {
    v16 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v5 < 0)
      v16 = v5;
    v40 = v16;
    while (1)
    {
      v23 = v42;
      v22 = v43;
      v24 = v44;
      sub_9F950(v42, v43, v44, v5);
      v26 = v25;
      v27 = (unint64_t)objc_msgSend(v25, "authorID");
      if ((v27 & 0x8000000000000000) != 0)
        break;
      v28 = v27;

      v29 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
      {
        sub_340AC(0, v29[2] + 1, 1);
        v29 = v45;
      }
      v31 = v29[2];
      v30 = v29[3];
      if (v31 >= v30 >> 1)
      {
        sub_340AC(v30 > 1, v31 + 1, 1);
        v29 = v45;
      }
      v29[2] = v31 + 1;
      v29[v31 + 4] = v28;
      if (v7)
      {
        if ((v24 & 1) == 0)
          goto LABEL_41;
        v32 = __CocoaSet.Index.handleBitPattern.getter(v23, v22);
        if (v32)
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
        else
          isUniquelyReferenced_nonNull_native = 1;
        v34 = sub_5EDC(&qword_1F32A0);
        v35 = (void (*)(_QWORD *, _QWORD))Set.Index._asCocoa.modify(v41, v34);
        __CocoaSet.formIndex(after:isUnique:)(v36, isUniquelyReferenced_nonNull_native, v40);
        v35(v41, 0);
        if (!--v9)
        {
LABEL_32:
          sub_41814(v42, v43, v44);
          swift_bridgeObjectRelease(v5);
          v14 = v45;
          goto LABEL_33;
        }
      }
      else
      {
        v17 = sub_EDE30(v23, v22, v24, v5);
        v19 = v18;
        v21 = v20;
        sub_41814(v23, v22, v24);
        v42 = v17;
        v43 = v19;
        v44 = v21 & 1;
        if (!--v9)
          goto LABEL_32;
      }
    }
  }
  result = (void *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_9DA98(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_9DB68(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_41910((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_41910((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_62F8(v12);
  return v7;
}

uint64_t sub_9DB68(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_9DD20(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_9DD20(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_9DDB4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_9DF28(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_9DF28(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_9DDB4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_31C10(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_9DF28(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_5EDC(&qword_1F1050);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_9E078(uint64_t a1)
{
  uint64_t v1;

  sub_92F50(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

void sub_9E088(uint64_t a1)
{
  uint64_t v1;

  sub_92BC8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_9E090(uint64_t a1)
{
  uint64_t v1;

  sub_94630(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t type metadata accessor for RequestListActor.ActorType()
{
  return objc_opt_self(_TtCV20BooksPersonalizationP33_1AAFF5B261F7B0D1EAF2F499792F7D6816RequestListActor9ActorType);
}

uint64_t type metadata accessor for MetadataCache()
{
  return objc_opt_self(_TtC20BooksPersonalization13MetadataCache);
}

uint64_t method lookup function for MetadataCache(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for MetadataCache);
}

uint64_t dispatch thunk of MetadataCache.__allocating_init(bookFetchService:genreFetchService:maxItemCount:subfolder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t destroy for MetadataCache.GenreMetadataRequest(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

ValueMetadata *type metadata accessor for MetadataCache.GenreMetadataRequest()
{
  return &type metadata for MetadataCache.GenreMetadataRequest;
}

uint64_t *_s20BooksPersonalization13MetadataCacheC15MetadataRequestVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *_s20BooksPersonalization13MetadataCacheC15MetadataRequestVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *_s20BooksPersonalization13MetadataCacheC15MetadataRequestVwta_0(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for MetadataCache.MetadataRequest()
{
  return &type metadata for MetadataCache.MetadataRequest;
}

uint64_t sub_9E218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_5EDC(&qword_1F3110);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_9E2A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F3110) - 8) + 80);
  sub_94794(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_9E2D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_9E2E8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_9E2F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v56 = a5;
  v7 = -1 << *(_BYTE *)(a1 + 32);
  v8 = ~v7;
  v9 = *(_QWORD *)(a1 + 64);
  v10 = -v7;
  v49 = a1;
  v50 = a1 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v51 = v8;
  v52 = 0;
  v53 = v11 & v9;
  v54 = a2;
  v55 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_4EF40(&v40);
  v12 = v41;
  if (v41)
  {
    while (1)
    {
      v16 = v40;
      v17 = BYTE8(v40);
      v18 = v42;
      v19 = v43;
      v35 = v44;
      v36 = v45;
      v37 = v46;
      v38 = v47;
      v39 = v48;
      v20 = (_QWORD *)*v56;
      v22 = sub_39228(v40);
      v23 = v20[2];
      v24 = (v21 & 1) == 0;
      v25 = v23 + v24;
      if (__OFADD__(v23, v24))
        break;
      v26 = v21;
      if (v20[3] >= v25)
      {
        if ((a4 & 1) == 0)
          sub_16C7D4();
      }
      else
      {
        sub_15D2D0(v25, a4 & 1);
        v27 = sub_39228(v16);
        if ((v26 & 1) != (v28 & 1))
          goto LABEL_19;
        v22 = v27;
      }
      v29 = (_QWORD *)*v56;
      if ((v26 & 1) != 0)
      {
        v14 = v29[7] + 72 * v22;
        v15 = *(_QWORD *)(v14 + 8);
        swift_bridgeObjectRelease(*(_QWORD *)(v14 + 16));
        swift_bridgeObjectRelease(v15);
        *(_BYTE *)v14 = v17;
        *(_QWORD *)(v14 + 8) = v12;
        *(_QWORD *)(v14 + 16) = v18;
        *(_QWORD *)(v14 + 24) = v19;
        *(_BYTE *)(v14 + 32) = v35;
        *(_QWORD *)(v14 + 40) = v36;
        *(_BYTE *)(v14 + 48) = v37;
        *(_QWORD *)(v14 + 56) = v38;
        *(_BYTE *)(v14 + 64) = v39;
      }
      else
      {
        v29[(v22 >> 6) + 8] |= 1 << v22;
        *(_QWORD *)(v29[6] + 8 * v22) = v16;
        v30 = v29[7] + 72 * v22;
        *(_BYTE *)v30 = v17;
        *(_QWORD *)(v30 + 8) = v12;
        *(_QWORD *)(v30 + 16) = v18;
        *(_QWORD *)(v30 + 24) = v19;
        *(_BYTE *)(v30 + 32) = v35;
        *(_QWORD *)(v30 + 40) = v36;
        *(_BYTE *)(v30 + 48) = v37;
        *(_QWORD *)(v30 + 56) = v38;
        *(_BYTE *)(v30 + 64) = v39;
        v31 = v29[2];
        v32 = __OFADD__(v31, 1);
        v33 = v31 + 1;
        if (v32)
          goto LABEL_18;
        v29[2] = v33;
      }
      sub_4EF40(&v40);
      v12 = v41;
      a4 = 1;
      if (!v41)
        goto LABEL_5;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_5FEC(v49);
    return swift_release(a3);
  }
  return result;
}

uint64_t sub_9E584(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t i;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  char v41;
  char v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v9 = -1 << *(_BYTE *)(a1 + 32);
  v10 = ~v9;
  v11 = *(_QWORD *)(a1 + 64);
  v12 = -v9;
  v52 = a1;
  v53 = a1 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v54 = v10;
  v55 = 0;
  v56 = v13 & v11;
  v57 = a2;
  v58 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_4F124(&v49);
  v14 = v51;
  if (!v51)
    goto LABEL_26;
  v15 = v49;
  v48 = v50;
  v16 = (_QWORD *)*a5;
  v18 = sub_39228(v49);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      v25 = (_QWORD *)*a5;
      if ((v17 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_16C9C4();
      v25 = (_QWORD *)*a5;
      if ((v22 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v25[(v18 >> 6) + 8] |= 1 << v18;
    *(_QWORD *)(v25[6] + 8 * v18) = v15;
    v27 = (_QWORD *)(v25[7] + 16 * v18);
    *v27 = v48;
    v27[1] = v14;
    v28 = v25[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
    {
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    v25[2] = v30;
LABEL_16:
    sub_4F124(&v49);
    for (i = v51; v51; i = v51)
    {
      v33 = v49;
      v34 = v50;
      v35 = (_QWORD *)*a5;
      v36 = sub_39228(v49);
      v38 = v35[2];
      v39 = (v37 & 1) == 0;
      v29 = __OFADD__(v38, v39);
      v40 = v38 + v39;
      if (v29)
        goto LABEL_27;
      v41 = v37;
      if (v35[3] < v40)
      {
        sub_15D600(v40, 1);
        v36 = sub_39228(v33);
        if ((v41 & 1) != (v42 & 1))
          goto LABEL_29;
      }
      v43 = (_QWORD *)*a5;
      if ((v41 & 1) != 0)
      {
        v32 = (_QWORD *)(v43[7] + 16 * v36);
        swift_bridgeObjectRelease(v32[1]);
        *v32 = v34;
        v32[1] = i;
      }
      else
      {
        v43[(v36 >> 6) + 8] |= 1 << v36;
        *(_QWORD *)(v43[6] + 8 * v36) = v33;
        v44 = (_QWORD *)(v43[7] + 16 * v36);
        *v44 = v34;
        v44[1] = i;
        v45 = v43[2];
        v29 = __OFADD__(v45, 1);
        v46 = v45 + 1;
        if (v29)
          goto LABEL_28;
        v43[2] = v46;
      }
      sub_4F124(&v49);
    }
LABEL_26:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_5FEC(v52);
    return swift_release(a3);
  }
  sub_15D600(v21, a4 & 1);
  v23 = sub_39228(v15);
  if ((v22 & 1) == (v24 & 1))
  {
    v18 = v23;
    v25 = (_QWORD *)*a5;
    if ((v22 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    v26 = (_QWORD *)(v25[7] + 16 * v18);
    swift_bridgeObjectRelease(v26[1]);
    *v26 = v48;
    v26[1] = v14;
    goto LABEL_16;
  }
LABEL_29:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

Swift::Int sub_9E854(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::Int v18;
  Swift::Int v19;
  uint64_t v20;
  Swift::Int v21;
  unint64_t *v22;
  unint64_t v23;
  Swift::Int v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  Swift::Int v96;
  Swift::Int v97;
  uint64_t v98;
  char *__dst;

  v2 = a1;
  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v80 = 0;
      v81 = *v2;
      v82 = 1;
      while (1)
      {
        v83 = *(_QWORD *)(v81 + 8 * v82);
        v84 = v80;
        do
        {
          v85 = *(_QWORD *)(v81 + v84);
          if (v83 >= v85)
            break;
          if (!v81)
            goto LABEL_143;
          *(_QWORD *)(v81 + v84 + 8) = v85;
          *(_QWORD *)(v81 + v84) = v83;
          v84 -= 8;
        }
        while (v84 != -8);
        ++v82;
        v80 += 8;
        if (v82 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v96 = result;
  v97 = v3;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v95 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for UInt64);
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v97;
    v95 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v93 = v2;
  v94 = *v2 - 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v98 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(_QWORD *)(v10 + 8 * v9);
      v15 = *(_QWORD *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = *(_QWORD *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16)
            break;
          ++v9;
          v16 = v17;
          if (v3 == v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_140;
        if (v13 < v9)
        {
          v18 = v9 - 1;
          v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10)
                goto LABEL_146;
              v20 = *(_QWORD *)(v10 + 8 * v19);
              *(_QWORD *)(v10 + 8 * v19) = *(_QWORD *)(v10 + 8 * v18);
              *(_QWORD *)(v10 + 8 * v18) = v20;
            }
            v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_138;
      if (v9 - v13 < v96)
      {
        v21 = v13 + v96;
        if (__OFADD__(v13, v96))
          goto LABEL_141;
        if (v21 >= v3)
          v21 = v3;
        if (v21 < v13)
          goto LABEL_142;
        if (v9 != v21)
        {
          v22 = (unint64_t *)(v94 + 8 * v9);
          do
          {
            v23 = *(_QWORD *)(v10 + 8 * v9);
            v24 = v13;
            v25 = v22;
            do
            {
              v26 = *v25;
              if (v23 >= *v25)
                break;
              if (!v10)
                goto LABEL_144;
              *v25 = v23;
              v25[1] = v26;
              --v25;
              ++v24;
            }
            while (v9 != v24);
            ++v9;
            ++v22;
          }
          while (v9 != v21);
          v9 = v21;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_4E4E4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v28 = *((_QWORD *)v11 + 2);
    v27 = *((_QWORD *)v11 + 3);
    v12 = v28 + 1;
    v10 = v98;
    if (v28 >= v27 >> 1)
    {
      v77 = sub_4E4E4((char *)(v27 > 1), v28 + 1, 1, v11);
      v10 = v98;
      v11 = v77;
    }
    *((_QWORD *)v11 + 2) = v12;
    v29 = v11 + 32;
    v30 = &v11[16 * v28 + 32];
    *(_QWORD *)v30 = v13;
    *((_QWORD *)v30 + 1) = v9;
    if (v28)
      break;
    v12 = 1;
LABEL_15:
    v3 = v97;
    if (v9 >= v97)
    {
      v8 = v95;
      v2 = v93;
LABEL_104:
      v95 = v8;
      if (v12 < 2)
      {
LABEL_115:
        v79 = v11;
        goto LABEL_116;
      }
      v86 = *v2;
      while (1)
      {
        v87 = v12 - 2;
        if (v12 < 2)
          break;
        if (!v86)
          goto LABEL_147;
        v78 = v11;
        v88 = v11 + 32;
        v89 = *(_QWORD *)&v11[16 * v87 + 32];
        v90 = *(_QWORD *)&v11[16 * v12 + 24];
        sub_9EEDC((char *)(v86 + 8 * v89), (char *)(v86 + 8 * *(_QWORD *)&v88[16 * v12 - 16]), v86 + 8 * v90, __dst);
        if (v1)
          goto LABEL_95;
        if (v90 < v89)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
          v78 = sub_4ECA8((uint64_t)v78);
        if (v87 >= *((_QWORD *)v78 + 2))
          goto LABEL_136;
        v91 = &v78[16 * v87 + 32];
        *(_QWORD *)v91 = v89;
        *((_QWORD *)v91 + 1) = v90;
        v92 = *((_QWORD *)v78 + 2);
        if (v12 > v92)
          goto LABEL_137;
        memmove(&v78[16 * v12 + 16], &v78[16 * v12 + 32], 16 * (v92 - v12));
        v11 = v78;
        *((_QWORD *)v78 + 2) = v92 - 1;
        v12 = v92 - 1;
        if (v92 <= 2)
          goto LABEL_115;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v31 = v12 - 1;
    if (v12 >= 4)
    {
      v36 = &v29[16 * v12];
      v37 = *((_QWORD *)v36 - 8);
      v38 = *((_QWORD *)v36 - 7);
      v42 = __OFSUB__(v38, v37);
      v39 = v38 - v37;
      if (v42)
        goto LABEL_122;
      v41 = *((_QWORD *)v36 - 6);
      v40 = *((_QWORD *)v36 - 5);
      v42 = __OFSUB__(v40, v41);
      v34 = v40 - v41;
      v35 = v42;
      if (v42)
        goto LABEL_123;
      v43 = v12 - 2;
      v44 = &v29[16 * v12 - 32];
      v46 = *(_QWORD *)v44;
      v45 = *((_QWORD *)v44 + 1);
      v42 = __OFSUB__(v45, v46);
      v47 = v45 - v46;
      if (v42)
        goto LABEL_125;
      v42 = __OFADD__(v34, v47);
      v48 = v34 + v47;
      if (v42)
        goto LABEL_128;
      if (v48 >= v39)
      {
        v66 = &v29[16 * v31];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v42 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v42)
          goto LABEL_132;
        v59 = v34 < v69;
        goto LABEL_84;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v60 = *((_QWORD *)v11 + 4);
        v61 = *((_QWORD *)v11 + 5);
        v42 = __OFSUB__(v61, v60);
        v53 = v61 - v60;
        v54 = v42;
        goto LABEL_78;
      }
      v33 = *((_QWORD *)v11 + 4);
      v32 = *((_QWORD *)v11 + 5);
      v42 = __OFSUB__(v32, v33);
      v34 = v32 - v33;
      v35 = v42;
    }
    if ((v35 & 1) != 0)
      goto LABEL_124;
    v43 = v12 - 2;
    v49 = &v29[16 * v12 - 32];
    v51 = *(_QWORD *)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = __OFSUB__(v50, v51);
    v53 = v50 - v51;
    v54 = v52;
    if (v52)
      goto LABEL_127;
    v55 = &v29[16 * v31];
    v57 = *(_QWORD *)v55;
    v56 = *((_QWORD *)v55 + 1);
    v42 = __OFSUB__(v56, v57);
    v58 = v56 - v57;
    if (v42)
      goto LABEL_130;
    if (__OFADD__(v53, v58))
      goto LABEL_131;
    if (v53 + v58 >= v34)
    {
      v59 = v34 < v58;
LABEL_84:
      if (v59)
        v31 = v43;
      goto LABEL_86;
    }
LABEL_78:
    if ((v54 & 1) != 0)
      goto LABEL_126;
    v62 = &v29[16 * v31];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v42 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v42)
      goto LABEL_129;
    if (v65 < v53)
      goto LABEL_15;
LABEL_86:
    v70 = v31 - 1;
    if (v31 - 1 >= v12)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v10)
      goto LABEL_145;
    v71 = &v29[16 * v70];
    v72 = *(_QWORD *)v71;
    v73 = v29;
    v74 = &v29[16 * v31];
    v75 = *((_QWORD *)v74 + 1);
    sub_9EEDC((char *)(v10 + 8 * *(_QWORD *)v71), (char *)(v10 + 8 * *(_QWORD *)v74), v10 + 8 * v75, __dst);
    if (v1)
      break;
    if (v75 < v72)
      goto LABEL_119;
    if (v31 > *((_QWORD *)v11 + 2))
      goto LABEL_120;
    *(_QWORD *)v71 = v72;
    *(_QWORD *)&v73[16 * v70 + 8] = v75;
    v76 = *((_QWORD *)v11 + 2);
    if (v31 >= v76)
      goto LABEL_121;
    v12 = v76 - 1;
    memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
    v29 = v73;
    *((_QWORD *)v11 + 2) = v76 - 1;
    v10 = v98;
    if (v76 <= 2)
      goto LABEL_15;
  }
  v78 = v11;
LABEL_95:
  v79 = v78;
LABEL_116:
  swift_bridgeObjectRelease(v79);
  v95[2] = 0;
  return swift_bridgeObjectRelease(v95);
}

uint64_t sub_9EEDC(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t result;
  char *v22;
  char *v23;
  char *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[8 * v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          v18 = (char *)(v17 + 1);
          v19 = v6 - 8;
          v20 = *((_QWORD *)v6 - 1);
          if (*((_QWORD *)v16 - 1) >= v20)
          {
            v22 = v16 - 8;
            if (v18 < v16 || v17 >= (unint64_t *)v16 || v18 != v16)
              *v17 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= (unint64_t *)v6)
              *v17 = v20;
            v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[8 * v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_QWORD *)v6 >= *(_QWORD *)v4)
        {
          if (v7 != v4)
            *(_QWORD *)v7 = *(_QWORD *)v4;
          v4 += 8;
          v23 = v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *(_QWORD *)v7 = *(_QWORD *)v6;
        }
        v7 += 8;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_4EB44((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_9F148(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_9F2C8((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, v3, a2);
    swift_release(a2);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v9 = sub_9F2C8((unint64_t *)v10, v7, v3, a2);
    swift_release(a2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v9;
}

uint64_t sub_9F2C8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = 0;
  if (v5)
  {
    v7 = 0;
    v8 = a4 + 56;
    v9 = a3 + 32;
    v10 = *(_QWORD *)(a4 + 40);
    v11 = ~(-1 << *(_BYTE *)(a4 + 32));
    do
    {
      v16 = *(_QWORD *)(v9 + 8 * v7);
      v17 = static Hasher._hash(seed:_:)(v10, v16);
      v18 = v17 & v11;
      v12 = (v17 & (unint64_t)v11) >> 6;
      v13 = 1 << (v17 & v11);
      if ((v13 & *(_QWORD *)(v8 + 8 * v12)) != 0)
      {
        v19 = *(_QWORD *)(a4 + 48);
        if (*(_QWORD *)(v19 + 8 * v18) == v16)
        {
LABEL_4:
          v14 = v12;
          v15 = a1[v12];
          a1[v14] = v13 | v15;
          if ((v13 & v15) == 0 && __OFADD__(v6++, 1))
          {
            __break(1u);
            break;
          }
        }
        else
        {
          for (i = v18 + 1; ; i = v21 + 1)
          {
            v21 = i & v11;
            if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
              break;
            if (*(_QWORD *)(v19 + 8 * v21) == v16)
            {
              v12 = v21 >> 6;
              v13 = 1 << v21;
              goto LABEL_4;
            }
          }
        }
      }
      ++v7;
    }
    while (v7 != v5);
  }
  swift_retain(a4);
  return sub_C3D90(a1, a2, v6, a4);
}

uint64_t sub_9F410(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_9F590((uint64_t)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v3);
    swift_release(a2);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v9 = sub_9F590((uint64_t)v10, v7, a2, v3);
    swift_release(a2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v9;
}

uint64_t sub_9F590(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v26;
  BOOL v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v45;
  int64_t v46;

  v45 = (unint64_t *)result;
  v6 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v7 = 0;
    v8 = a4 + 56;
    v9 = 1 << *(_BYTE *)(a4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(a4 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v15 = v14 | (v7 << 6);
      }
      else
      {
        v16 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v16 >= v12)
          goto LABEL_60;
        v17 = *(_QWORD *)(v8 + 8 * v16);
        ++v7;
        if (!v17)
        {
          v7 = v16 + 1;
          if (v16 + 1 >= v12)
            goto LABEL_60;
          v17 = *(_QWORD *)(v8 + 8 * v7);
          if (!v17)
          {
            v7 = v16 + 2;
            if (v16 + 2 >= v12)
              goto LABEL_60;
            v17 = *(_QWORD *)(v8 + 8 * v7);
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v12)
              {
LABEL_60:
                swift_retain(a3);
                return sub_C3D90(v45, a2, v6, a3);
              }
              v17 = *(_QWORD *)(v8 + 8 * v18);
              if (!v17)
              {
                while (1)
                {
                  v7 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    break;
                  if (v7 >= v12)
                    goto LABEL_60;
                  v17 = *(_QWORD *)(v8 + 8 * v7);
                  ++v18;
                  if (v17)
                    goto LABEL_21;
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              v7 = v18;
            }
          }
        }
LABEL_21:
        v11 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v7 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(a4 + 48) + 8 * v15);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(a3 + 40), v19);
      v20 = -1 << *(_BYTE *)(a3 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      v23 = 1 << v21;
      if (((1 << v21) & *(_QWORD *)(v13 + 8 * (v21 >> 6))) != 0)
      {
        v24 = *(_QWORD *)(a3 + 48);
        if (*(_QWORD *)(v24 + 8 * v21) != v19)
        {
          for (i = v21 + 1; ; i = v26 + 1)
          {
            v26 = i & ~v20;
            if (((*(_QWORD *)(v13 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
              goto LABEL_6;
            if (*(_QWORD *)(v24 + 8 * v26) == v19)
              break;
          }
          v22 = v26 >> 6;
          v23 = 1 << v26;
        }
        v45[v22] |= v23;
        v27 = __OFADD__(v6++, 1);
        if (v27)
          break;
      }
    }
    __break(1u);
  }
  v28 = 0;
  v29 = a3 + 56;
  v30 = 1 << *(_BYTE *)(a3 + 32);
  if (v30 < 64)
    v31 = ~(-1 << v30);
  else
    v31 = -1;
  v32 = v31 & *(_QWORD *)(a3 + 56);
  v46 = (unint64_t)(v30 + 63) >> 6;
  v33 = a4 + 56;
  while (v32)
  {
    v34 = __clz(__rbit64(v32));
    v32 &= v32 - 1;
    v35 = v34 | (v28 << 6);
LABEL_52:
    v39 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v35);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(a4 + 40), v39);
    v40 = -1 << *(_BYTE *)(a4 + 32);
    v41 = result & ~v40;
    if (((*(_QWORD *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
    {
      v42 = *(_QWORD *)(a4 + 48);
      if (*(_QWORD *)(v42 + 8 * v41) == v39)
      {
LABEL_57:
        *(unint64_t *)((char *)v45 + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v35;
        v27 = __OFADD__(v6++, 1);
        if (v27)
        {
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        v43 = ~v40;
        while (1)
        {
          v41 = (v41 + 1) & v43;
          if (((*(_QWORD *)(v33 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
            break;
          if (*(_QWORD *)(v42 + 8 * v41) == v39)
            goto LABEL_57;
        }
      }
    }
  }
  v36 = v28 + 1;
  if (__OFADD__(v28, 1))
    goto LABEL_62;
  if (v36 >= v46)
    goto LABEL_60;
  v37 = *(_QWORD *)(v29 + 8 * v36);
  ++v28;
  if (v37)
    goto LABEL_51;
  v28 = v36 + 1;
  if (v36 + 1 >= v46)
    goto LABEL_60;
  v37 = *(_QWORD *)(v29 + 8 * v28);
  if (v37)
    goto LABEL_51;
  v28 = v36 + 2;
  if (v36 + 2 >= v46)
    goto LABEL_60;
  v37 = *(_QWORD *)(v29 + 8 * v28);
  if (v37)
  {
LABEL_51:
    v32 = (v37 - 1) & v37;
    v35 = __clz(__rbit64(v37)) + (v28 << 6);
    goto LABEL_52;
  }
  v38 = v36 + 3;
  if (v38 >= v46)
    goto LABEL_60;
  v37 = *(_QWORD *)(v29 + 8 * v38);
  if (v37)
  {
    v28 = v38;
    goto LABEL_51;
  }
  while (1)
  {
    v28 = v38 + 1;
    if (__OFADD__(v38, 1))
      break;
    if (v28 >= v46)
      goto LABEL_60;
    v37 = *(_QWORD *)(v29 + 8 * v28);
    ++v38;
    if (v37)
      goto LABEL_51;
  }
LABEL_64:
  __break(1u);
  return result;
}

void sub_9F950(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = type metadata accessor for CachedPersonalizationBookMetadataAuthor();
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = type metadata accessor for CachedPersonalizationBookMetadataAuthor();
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_9FB98(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_9FC20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = *((_BYTE *)a1 + 40);
  v7 = a1[6];
  v8 = *((_BYTE *)a1 + 56);
  v9 = a1[8];
  v10 = *((_BYTE *)a1 + 72);
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  *(_BYTE *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 48) = v7;
  *(_BYTE *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 64) = v9;
  *(_BYTE *)(a2 + 72) = v10;
  *(_QWORD *)a2 = v2;
  swift_bridgeObjectRetain(v3);
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_9FC8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 16) = v2;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_9FCA4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  _QWORD *v58;

  v2 = a2;
  if (!(a2 >> 62))
  {
    v3 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
    swift_bridgeObjectRetain(a2);
    if (v3)
      goto LABEL_3;
LABEL_34:
    swift_bridgeObjectRelease(v2);
    return a1;
  }
LABEL_30:
  if (v2 < 0)
    v35 = v2;
  else
    v35 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v3 = _CocoaArrayWrapper.endIndex.getter(v35);
  if (!v3)
    goto LABEL_34;
LABEL_3:
  v38 = v2;
  v39 = v2 & 0xC000000000000001;
  v4 = 4;
  v37 = v3;
  while (1)
  {
    if (v39)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v2);
    else
      v7 = *(id *)(v2 + 8 * v4);
    v8 = v7;
    v9 = v4 - 3;
    if (__OFADD__(v4 - 4, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v10 = (uint64_t)objc_msgSend(v7, "assetID");
    if (v10 < 0)
      break;
    v11 = v10;
    sub_939FC(v8, (uint64_t)&v49);
    if (v50)
    {
      v42 = v50;
      v2 = v49;
      v40 = v51;
      v41 = v52;
      v43 = v53;
      v44 = v54;
      v45 = v55;
      v46 = v56;
      v47 = v57;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
      v58 = (_QWORD *)a1;
      v14 = sub_39228(v11);
      v15 = *(_QWORD *)(a1 + 16);
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        goto LABEL_28;
      v18 = v13;
      if (*(_QWORD *)(a1 + 24) >= v17)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_16C7D4();
      }
      else
      {
        sub_15D2D0(v17, isUniquelyReferenced_nonNull_native);
        v19 = sub_39228(v11);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_36;
        v14 = v19;
      }
      v9 = v4 - 3;
      v29 = v58;
      v30 = v2 & 1;
      a1 = (uint64_t)v58;
      if ((v18 & 1) != 0)
      {
        v5 = v58[7] + 72 * v14;
        v6 = *(_QWORD *)(v5 + 8);
        swift_bridgeObjectRelease(*(_QWORD *)(v5 + 16));
        swift_bridgeObjectRelease(v6);
        *(_BYTE *)v5 = v30;
        *(_QWORD *)(v5 + 8) = v42;
        *(_QWORD *)(v5 + 16) = v40;
        *(_QWORD *)(v5 + 24) = v41;
        *(_BYTE *)(v5 + 32) = v43 & 1;
        *(_QWORD *)(v5 + 40) = v44;
        *(_BYTE *)(v5 + 48) = v45 & 1;
        *(_QWORD *)(v5 + 56) = v46;
        *(_BYTE *)(v5 + 64) = v47 & 1;
      }
      else
      {
        v58[(v14 >> 6) + 8] |= 1 << v14;
        *(_QWORD *)(v29[6] + 8 * v14) = v11;
        v31 = v29[7] + 72 * v14;
        *(_BYTE *)v31 = v30;
        *(_QWORD *)(v31 + 8) = v42;
        *(_QWORD *)(v31 + 16) = v40;
        *(_QWORD *)(v31 + 24) = v41;
        *(_BYTE *)(v31 + 32) = v43 & 1;
        *(_QWORD *)(v31 + 40) = v44;
        *(_BYTE *)(v31 + 48) = v45 & 1;
        *(_QWORD *)(v31 + 56) = v46;
        *(_BYTE *)(v31 + 64) = v47 & 1;
        v32 = v29[2];
        v33 = __OFADD__(v32, 1);
        v34 = v32 + 1;
        if (v33)
          goto LABEL_29;
        v29[2] = v34;
      }

      swift_bridgeObjectRelease(0x8000000000000000);
      v3 = v37;
      v2 = v38;
    }
    else
    {
      v21 = sub_39228(v11);
      if ((v22 & 1) != 0)
      {
        v23 = v21;
        v24 = swift_isUniquelyReferenced_nonNull_native(a1);
        v58 = (_QWORD *)a1;
        v25 = a1;
        if ((v24 & 1) == 0)
        {
          sub_16C7D4();
          v25 = (uint64_t)v58;
        }
        v26 = *(_QWORD *)(v25 + 56) + 72 * v23;
        v27 = *(_QWORD *)(v26 + 8);
        v28 = *(_QWORD *)(v26 + 16);
        a1 = v25;
        sub_16F434(v23, v25);

        swift_bridgeObjectRelease(v28);
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(0x8000000000000000);
        v9 = v4 - 3;
      }
      else
      {

      }
    }
    ++v4;
    if (v9 == v3)
      goto LABEL_34;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_36:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_A0080(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char **p_name;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;

  v2 = a2;
  if (a2 >> 62)
  {
LABEL_34:
    if (v2 < 0)
      v36 = v2;
    else
      v36 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v36);
    if (v4)
      goto LABEL_3;
LABEL_38:
    swift_bridgeObjectRelease(v2);
    return (uint64_t)a1;
  }
  v4 = *(_QWORD *)((char *)&dword_10 + (a2 & 0xFFFFFFFFFFFFF8));
  swift_bridgeObjectRetain(a2);
  if (!v4)
    goto LABEL_38;
LABEL_3:
  v41 = v2 & 0xC000000000000001;
  v5 = 4;
  p_name = &BooksBackendPostScorer.name;
  v38 = v4;
  v39 = v2;
  while (1)
  {
    if (v41)
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v2);
    else
      v7 = *(id *)(v2 + 8 * v5);
    v8 = v7;
    v9 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    v10 = (uint64_t)objc_msgSend(v7, p_name[225]);
    if (v10 < 0)
      break;
    v11 = v10;
    v12 = objc_msgSend(v8, "path");
    if (!v12)
      goto LABEL_20;
    v13 = v12;
    v14 = objc_opt_self(NSArray);
    v15 = swift_dynamicCastObjCClass(v13, v14);
    if (!v15)
    {

LABEL_20:
      v26 = sub_39228(v11);
      if ((v27 & 1) != 0)
      {
        v28 = v26;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
        v42 = a1;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_16C9C4();
          a1 = v42;
        }
        v30 = *(_QWORD *)(a1[7] + 16 * v28 + 8);
        sub_16F5E0(v28, (uint64_t)a1);

        swift_bridgeObjectRelease(v30);
        swift_bridgeObjectRelease(0x8000000000000000);
        p_name = (char **)(&BooksBackendPostScorer + 24);
      }
      else
      {

      }
      goto LABEL_5;
    }
    v42 = 0;
    static Array._conditionallyBridgeFromObjectiveC(_:result:)(v15, &v42, &type metadata for UInt64);

    if (!v42)
      goto LABEL_20;
    v40 = v42;
    v16 = (uint64_t)objc_msgSend(v8, p_name[225]);
    if (v16 < 0)
      break;
    v2 = v16;
    v17 = swift_isUniquelyReferenced_nonNull_native(a1);
    v42 = a1;
    v19 = sub_39228(v11);
    v20 = a1[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      goto LABEL_32;
    v23 = v18;
    if (a1[3] >= v22)
    {
      if ((v17 & 1) == 0)
        sub_16C9C4();
    }
    else
    {
      sub_15D600(v22, v17);
      v24 = sub_39228(v11);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_40;
      v19 = v24;
    }
    p_name = (char **)(&BooksBackendPostScorer + 24);
    a1 = v42;
    if ((v23 & 1) != 0)
    {
      v31 = (uint64_t *)(v42[7] + 16 * v19);
      swift_bridgeObjectRelease(v31[1]);
      *v31 = v2;
      v31[1] = (uint64_t)v40;
    }
    else
    {
      v42[(v19 >> 6) + 8] |= 1 << v19;
      *(_QWORD *)(a1[6] + 8 * v19) = v11;
      v32 = (uint64_t *)(a1[7] + 16 * v19);
      *v32 = v2;
      v32[1] = (uint64_t)v40;
      v33 = a1[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        goto LABEL_33;
      a1[2] = v35;
    }

    swift_bridgeObjectRelease(0x8000000000000000);
    v4 = v38;
    v2 = v39;
LABEL_5:
    ++v5;
    if (v9 == v4)
      goto LABEL_38;
  }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_A03C8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  objc_class *ObjCClassFromMetadata;
  NSString *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  NSString v18;
  Class isa;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t i;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init(timeIntervalSinceNow:)(v4, -31536000.0);
  v7 = type metadata accessor for CachedPersonalizationBookMetadataGenre();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v7);
  v9 = NSStringFromClass(ObjCClassFromMetadata);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v11 = v10;

  v12 = objc_allocWithZone((Class)NSFetchRequest);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v14 = objc_msgSend(v12, "initWithEntityName:", v13);

  v15 = sub_5EDC(&qword_1F3118);
  v16 = swift_allocObject(v15, 128, 7);
  *(_OWORD *)(v16 + 16) = xmmword_18CBA0;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  strcpy((char *)(v16 + 32), "lastAccessDate");
  *(_BYTE *)(v16 + 47) = -18;
  *(_QWORD *)(v16 + 88) = v2;
  v17 = sub_3DD84((_QWORD *)(v16 + 64));
  (*(void (**)(_QWORD *, char *, uint64_t))(v3 + 16))(v17, v6, v2);
  *(_QWORD *)(v16 + 120) = &type metadata for String;
  strcpy((char *)(v16 + 96), "lastAccessDate");
  *(_BYTE *)(v16 + 111) = -18;
  v18 = String._bridgeToObjectiveC()();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  v20 = objc_msgSend((id)objc_opt_self(NSPredicate), "predicateWithFormat:argumentArray:", v18, isa);

  objc_msgSend(v14, "setPredicate:", v20);
  v21 = NSManagedObjectContext.fetch<A>(_:)(v14, v7);
  v22 = v21;
  v29 = v3;
  if (!((unint64_t)v21 >> 62))
  {
    v23 = *(_QWORD *)((char *)&dword_10 + (v21 & 0xFFFFFFFFFFFFF8));
    result = swift_bridgeObjectRetain(v21);
    if (v23)
      goto LABEL_3;
LABEL_13:

    swift_bridgeObjectRelease(v22);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v2);
    return swift_bridgeObjectRelease(v22);
  }
  if (v21 < 0)
    v28 = v21;
  else
    v28 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v21);
  result = _CocoaArrayWrapper.endIndex.getter(v28);
  v23 = result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v23 >= 1)
  {
    for (i = 0; i != v23; ++i)
    {
      if ((v22 & 0xC000000000000001) != 0)
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v22);
      else
        v26 = *(id *)(v22 + 8 * i + 32);
      v27 = v26;
      objc_msgSend(a1, "deleteObject:", v26, v29);

    }
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_A0858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_5EDC(&qword_1F3110);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_A08F0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F3110) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = (_QWORD *)v1[4];
  v8 = v1[5];
  v9 = v1[6];
  v10 = v1[7];
  v11 = (uint64_t)v1 + ((v4 + 64) & ~v4);
  v12 = (_QWORD *)swift_task_alloc(dword_1F3124);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_6AA68;
  return sub_94D00(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_A09A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1F3144);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_6AA68;
  return sub_98DA0(a1, a2, v7, v6);
}

void sub_A0A0C(uint64_t a1)
{
  uint64_t v1;

  sub_9CEB8(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_A0A18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_5EDC(&qword_1F3150);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_A0AA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F3150) - 8) + 80);
  return sub_9D020(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_A0AF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = *(_QWORD *)(v1 + v7);
  v12 = v1 + v6;
  v13 = *(_QWORD *)(v1 + v8);
  v14 = v1 + ((v5 + v8 + 8) & ~v5);
  v15 = (_QWORD *)swift_task_alloc(dword_1F3184);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_6AA68;
  return sub_9AF3C(a1, v9, v10, v12, v11, v13, v14);
}

uint64_t type metadata accessor for MetadataCache.GenreMetadataRequest.ContinuationRecord(uint64_t a1)
{
  return sub_A2060(a1, (uint64_t *)&unk_1F3308, (uint64_t)&nominal type descriptor for MetadataCache.GenreMetadataRequest.ContinuationRecord);
}

uint64_t sub_A0BD4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _BYTE *))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[8];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  int64_t v40;

  v28 = (unint64_t *)result;
  v29 = 0;
  v6 = 0;
  v30 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v40 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }
    v23 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v23 >= v40)
      return sub_DED90(v28, a2, v29, a3);
    v24 = *(_QWORD *)(v30 + 8 * v23);
    ++v6;
    if (!v24)
    {
      v6 = v23 + 1;
      if (v23 + 1 >= v40)
        return sub_DED90(v28, a2, v29, a3);
      v24 = *(_QWORD *)(v30 + 8 * v6);
      if (!v24)
      {
        v6 = v23 + 2;
        if (v23 + 2 >= v40)
          return sub_DED90(v28, a2, v29, a3);
        v24 = *(_QWORD *)(v30 + 8 * v6);
        if (!v24)
          break;
      }
    }
LABEL_20:
    v9 = (v24 - 1) & v24;
    v11 = __clz(__rbit64(v24)) + (v6 << 6);
LABEL_5:
    v12 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v11);
    v13 = *(_QWORD *)(a3 + 56) + 72 * v11;
    v14 = *(_BYTE *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_QWORD *)(v13 + 16);
    v17 = *(_QWORD *)(v13 + 24);
    v18 = *(_BYTE *)(v13 + 32);
    v19 = *(_QWORD *)(v13 + 40);
    v20 = *(_BYTE *)(v13 + 48);
    v21 = *(_QWORD *)(v13 + 56);
    LOBYTE(v13) = *(_BYTE *)(v13 + 64);
    v31[0] = v14;
    v32 = v15;
    v33 = v16;
    v34 = v17;
    v35 = v18;
    v36 = v19;
    v37 = v20;
    v38 = v21;
    v39 = v13;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    v22 = a4(v12, v31);
    swift_bridgeObjectRelease(v16);
    result = swift_bridgeObjectRelease(v15);
    if ((v22 & 1) != 0)
    {
      *(unint64_t *)((char *)v28 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      if (__OFADD__(v29++, 1))
      {
        __break(1u);
        return sub_DED90(v28, a2, v29, a3);
      }
    }
  }
  v25 = v23 + 3;
  if (v25 >= v40)
    return sub_DED90(v28, a2, v29, a3);
  v24 = *(_QWORD *)(v30 + 8 * v25);
  if (v24)
  {
    v6 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v6 >= v40)
      return sub_DED90(v28, a2, v29, a3);
    v24 = *(_QWORD *)(v30 + 8 * v6);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_A0E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::String v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;

  v30 = a4;
  v29 = sub_5EDC(&qword_1F31E8);
  __chkstk_darwin(v29);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  v9 = swift_bridgeObjectRetain(a2);
  v10 = sub_A1264(v9, (uint64_t)sub_A28A8, (uint64_t)v31, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_A0BD4);
  swift_bridgeObjectRelease(a2);
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v11._object = (void *)0x80000000001A1250;
  v11._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v11);
  v12 = type metadata accessor for UUID(0);
  v13 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 0x69796C7070757320;
  v16._object = (void *)0xEF2073444920676ELL;
  String.append(_:)(v16);
  v17 = swift_retain(v10);
  v18 = swift_bridgeObjectRetain(v17);
  v19 = sub_37EB0(v18);
  swift_release(v10);
  v35 = v19;
  sub_9046C((uint64_t *)&v35);
  if (v4)
  {
    result = swift_release(v35);
    __break(1u);
  }
  else
  {
    swift_release(v10);
    v20 = (uint64_t)v35;
    v21._countAndFlagsBits = Array.description.getter(v35, &type metadata for UInt64);
    v22 = v21._object;
    String.append(_:)(v21);
    swift_release(v20);
    swift_bridgeObjectRelease(v22);
    v23._countAndFlagsBits = 0xD000000000000016;
    v23._object = (void *)0x80000000001A1320;
    String.append(_:)(v23);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    v25 = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v34);
    type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord(0);
    v26 = *(int *)(v29 + 48);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v30, v12);
    *(_QWORD *)&v8[v26] = v10;
    v27 = sub_5EDC(&qword_1F3270);
    return CheckedContinuation.resume(returning:)(v8, v27);
  }
  return result;
}

uint64_t sub_A1090(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, _QWORD *))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t *v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;

  v22 = (unint64_t *)result;
  v23 = 0;
  v6 = 0;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    v17 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v17 >= v10)
      return sub_DF080(v22, a2, v23, a3);
    v18 = *(_QWORD *)(v25 + 8 * v17);
    ++v6;
    if (!v18)
    {
      v6 = v17 + 1;
      if (v17 + 1 >= v10)
        return sub_DF080(v22, a2, v23, a3);
      v18 = *(_QWORD *)(v25 + 8 * v6);
      if (!v18)
      {
        v6 = v17 + 2;
        if (v17 + 2 >= v10)
          return sub_DF080(v22, a2, v23, a3);
        v18 = *(_QWORD *)(v25 + 8 * v6);
        if (!v18)
          break;
      }
    }
LABEL_20:
    v9 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v6 << 6);
LABEL_5:
    v13 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v12);
    v14 = (_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v12);
    v15 = v14[1];
    v24[0] = *v14;
    v24[1] = v15;
    swift_bridgeObjectRetain(v15);
    v16 = a4(v13, v24);
    result = swift_bridgeObjectRelease(v15);
    if ((v16 & 1) != 0)
    {
      *(unint64_t *)((char *)v22 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v23++, 1))
      {
        __break(1u);
        return sub_DF080(v22, a2, v23, a3);
      }
    }
  }
  v19 = v17 + 3;
  if (v19 >= v10)
    return sub_DF080(v22, a2, v23, a3);
  v18 = *(_QWORD *)(v25 + 8 * v19);
  if (v18)
  {
    v6 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v6 >= v10)
      return sub_DF080(v22, a2, v23, a3);
    v18 = *(_QWORD *)(v25 + 8 * v6);
    ++v19;
    if (v18)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_A1264(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v9;
  char v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  v6 = v4;
  v9 = isStackAllocationSafe;
  v10 = *(_BYTE *)(isStackAllocationSafe + 32);
  v11 = v10 & 0x3F;
  v12 = (1 << v10) + 63;
  v13 = v12 >> 6;
  v14 = 8 * (v12 >> 6);
  if (v11 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v12 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v18 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0), v14);
    v15 = a4((char *)&v18 - ((v14 + 15) & 0x3FFFFFFFFFFFFFF0), v13, v9, a2, a3);
    if (v4)
      swift_willThrow(v15);
    else
      return v15;
  }
  else
  {
    v16 = (void *)swift_slowAlloc(v14, -1);
    bzero(v16, v14);
    v6 = a4((char *)v16, v13, v9, a2, a3);
    swift_slowDealloc(v16, -1, -1);
  }
  return v6;
}

uint64_t sub_A13E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  Swift::String v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[16];
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;

  v30 = a4;
  v29 = sub_5EDC(&qword_1F3138);
  __chkstk_darwin(v29);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  v9 = swift_bridgeObjectRetain(a2);
  v10 = sub_A1264(v9, (uint64_t)sub_A1850, (uint64_t)v31, (uint64_t (*)(char *, unint64_t, uint64_t, uint64_t, uint64_t))sub_A1090);
  swift_bridgeObjectRelease(a2);
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  v11._object = (void *)0x80000000001A1250;
  v11._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v11);
  v12 = type metadata accessor for UUID(0);
  v13 = sub_41754((unint64_t *)&qword_1F1490, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 0x69796C7070757320;
  v16._object = (void *)0xEF2073444920676ELL;
  String.append(_:)(v16);
  v17 = swift_retain(v10);
  v18 = swift_bridgeObjectRetain(v17);
  v19 = sub_37EB0(v18);
  swift_release(v10);
  v35 = v19;
  sub_9046C((uint64_t *)&v35);
  if (v4)
  {
    result = swift_release(v35);
    __break(1u);
  }
  else
  {
    swift_release(v10);
    v20 = (uint64_t)v35;
    v21._countAndFlagsBits = Array.description.getter(v35, &type metadata for UInt64);
    v22 = v21._object;
    String.append(_:)(v21);
    swift_release(v20);
    swift_bridgeObjectRelease(v22);
    v23._countAndFlagsBits = 0xD000000000000016;
    v23._object = (void *)0x80000000001A1320;
    String.append(_:)(v23);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    v25 = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v34);
    type metadata accessor for MetadataCache.GenreMetadataRequest.ContinuationRecord(0);
    v26 = *(int *)(v29 + 48);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v8, v30, v12);
    *(_QWORD *)&v8[v26] = v10;
    v27 = sub_5EDC(&qword_1F31A8);
    return CheckedContinuation.resume(returning:)(v8, v27);
  }
  return result;
}

uint64_t sub_A1664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (v7 + v5 + v6) & ~v5;
  v9 = *(_QWORD *)(v1 + 32);
  v10 = v1 + v6;
  v11 = v1 + v8;
  v12 = *(_QWORD *)(v1 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_1F319C);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_6AA68;
  v13[5] = v11;
  v13[6] = v12;
  v13[3] = v9;
  v13[4] = v10;
  v13[2] = a1;
  return swift_task_switch(sub_9A360, 0, 0);
}

uint64_t sub_A1720(uint64_t a1)
{
  uint64_t v1;

  return sub_9A47C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), &qword_1F31A8, (uint64_t)&unk_1E2448, (uint64_t)&unk_1F31B8);
}

uint64_t sub_A1754()
{
  return sub_A2428(&qword_1F31A8);
}

uint64_t sub_A1760(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (v7 + v5 + v6) & ~v5;
  v9 = (v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F31A8) - 8) + 80);
  v11 = v10 + v9 + 8;
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = (uint64_t)v1 + v6;
  v16 = (uint64_t)v1 + v8;
  v17 = *(_QWORD *)((char *)v1 + v9);
  v18 = (uint64_t)v1 + (v11 & ~v10);
  v19 = (_QWORD *)swift_task_alloc(dword_1F31B4);
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = sub_6AA68;
  return sub_9A718(a1, v12, v13, v14, v15, v16, v17, v18);
}

BOOL sub_A1850(uint64_t a1, uint64_t a2)
{
  return sub_A28B4(a1, a2, type metadata accessor for MetadataCache.GenreMetadataRequest.ContinuationRecord);
}

uint64_t sub_A185C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_5EDC(&qword_1F31C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_A18E0()
{
  sub_5EDC(&qword_1F31C0);
  sub_92D44();
}

uint64_t sub_A1928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_5EDC(&qword_1F31C8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_A19C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F31C8) - 8) + 80);
  sub_930D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), v0 + ((v1 + 56) & ~v1));
}

uint64_t sub_A19FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_5EDC(&qword_1F31C8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_A1AA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  sub_5EDC(&qword_1F31C8);
  v3 = v1[2];
  v4 = v1[3];
  v5 = (_QWORD *)v1[4];
  v6 = v1[5];
  v7 = v1[6];
  v8 = v1[7];
  v9 = v1[8];
  v10 = (_QWORD *)swift_task_alloc(dword_1F31D4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_4814;
  return sub_93EC8(a1, v3, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_A1B64(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_1F31F4);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_6AA68;
  return sub_9517C(a1, a2, v6, v7, v9, v8);
}

void sub_A1BE4(uint64_t a1)
{
  uint64_t v1;

  sub_9B41C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_A1BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_5EDC(&qword_1F3150);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_A1C84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F3150) - 8) + 80);
  sub_9B594(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_A1CD0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_A1D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v3 + v9 + 8) & ~v3;
  v11 = v10 + v5;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9));
  v12(v0 + v10, v1);
  return swift_deallocObject(v0, v11, v6);
}

uint64_t sub_A1DD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(_QWORD *)(v1 + 16);
  v11 = *(_QWORD *)(v1 + 24);
  v12 = *(_QWORD *)(v1 + v7);
  v13 = *(_QWORD *)(v1 + v8);
  v14 = v1 + v6;
  v15 = *(_QWORD *)(v1 + v9);
  v16 = v1 + ((v5 + v9 + 8) & ~v5);
  v17 = (_QWORD *)swift_task_alloc(dword_1F3234);
  *(_QWORD *)(v2 + 16) = v17;
  *v17 = v2;
  v17[1] = sub_6AA68;
  return sub_98458(a1, v10, v11, v14, v12, v13, v15, v16);
}

uint64_t sub_A1EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v3 + v8 + 8) & ~v3;
  v10 = v9 + v5;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v7));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  v11(v0 + v9, v1);
  return swift_deallocObject(v0, v10, v6);
}

uint64_t sub_A1F7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = *(_QWORD *)(v1 + v7);
  v12 = v1 + v6;
  v13 = *(_QWORD *)(v1 + v8);
  v14 = v1 + ((v5 + v8 + 8) & ~v5);
  v15 = (_QWORD *)swift_task_alloc(dword_1F3244);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_6AA68;
  return sub_988FC(a1, v9, v10, v12, v11, v13, v14);
}

uint64_t type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord(uint64_t a1)
{
  return sub_A2060(a1, (uint64_t *)&unk_1F33A8, (uint64_t)&nominal type descriptor for MetadataCache.MetadataRequest.ContinuationRecord);
}

uint64_t sub_A2060(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_A2094(uint64_t result, uint64_t a2)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_A20C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);
  v11(v0 + v7, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v10));
  return swift_deallocObject(v0, v10 + 8, v6);
}

uint64_t sub_A2198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (v7 + v5 + v6) & ~v5;
  v9 = (v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v1 + 32);
  v12 = v1 + v6;
  v13 = v1 + v8;
  v14 = *(_QWORD *)(v1 + v9);
  v15 = *(_QWORD *)(v1 + v10);
  v16 = *(_QWORD *)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFF8));
  v17 = (_QWORD *)swift_task_alloc(dword_1F3254);
  *(_QWORD *)(v2 + 16) = v17;
  *v17 = v2;
  v17[1] = sub_6AA68;
  v17[7] = v15;
  v17[8] = v16;
  v17[5] = v13;
  v17[6] = v14;
  v17[3] = v11;
  v17[4] = v12;
  v17[2] = a1;
  return swift_task_switch(sub_96D94, 0, 0);
}

uint64_t sub_A227C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_A232C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (v7 + v5 + v6) & ~v5;
  v9 = *(_QWORD *)(v1 + 32);
  v10 = v1 + v6;
  v11 = v1 + v8;
  v12 = *(_QWORD *)(v1 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v13 = (_QWORD *)swift_task_alloc(dword_1F3264);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_4814;
  v13[5] = v11;
  v13[6] = v12;
  v13[3] = v9;
  v13[4] = v10;
  v13[2] = a1;
  return swift_task_switch(sub_97AA8, 0, 0);
}

uint64_t sub_A23E8(uint64_t a1)
{
  uint64_t v1;

  return sub_9A47C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), &qword_1F3270, (uint64_t)&unk_1E2628, (uint64_t)&unk_1F3280);
}

uint64_t sub_A241C()
{
  return sub_A2428(&qword_1F3270);
}

uint64_t sub_A2428(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v17;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (v7 + v5 + v6) & ~v5;
  v9 = (v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = sub_5EDC(a1);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + v9 + 8) & ~v12;
  v17 = v13 + *(_QWORD *)(v11 + 64);
  v14 = v5 | v12 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  v15 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v15(v1 + v6, v3);
  v15(v1 + v8, v3);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v9));
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1 + v13, v10);
  return swift_deallocObject(v1, v17, v14);
}

uint64_t sub_A2528(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (v7 + v5 + v6) & ~v5;
  v9 = (v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_5EDC(&qword_1F3270) - 8) + 80);
  v11 = v10 + v9 + 8;
  v12 = v1[2];
  v13 = v1[3];
  v14 = v1[4];
  v15 = (uint64_t)v1 + v6;
  v16 = (uint64_t)v1 + v8;
  v17 = *(_QWORD *)((char *)v1 + v9);
  v18 = (uint64_t)v1 + (v11 & ~v10);
  v19 = (_QWORD *)swift_task_alloc(dword_1F327C);
  *(_QWORD *)(v2 + 16) = v19;
  *v19 = v2;
  v19[1] = sub_6AA68;
  return sub_97BF8(a1, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_A2618(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_A265C(uint64_t a1)
{
  uint64_t v1;

  return sub_96EEC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_A266C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = sub_5EDC(&qword_1F3270);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v10 + v7 + 8) & ~v10;
  v17 = v3 | v10 | 7;
  v12 = (*(_QWORD *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v16 = v8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v14(v0 + v4, v1);
  v14(v0 + v6, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v11, v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v12));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v13 + 8, v17);
}

uint64_t sub_A278C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 40) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (v6 + v4 + v5) & ~v4;
  v8 = (v6 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_QWORD *)(sub_5EDC(&qword_1F3270) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + v8 + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v1[2];
  v12 = v1[3];
  v13 = v1[4];
  v14 = *(_QWORD *)((char *)v1 + v8);
  v15 = (uint64_t)v1 + v10;
  v16 = (_QWORD *)swift_task_alloc(dword_1F328C);
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_6AA68;
  return sub_971E0(a1, v11, v12, v13, (uint64_t)v1 + v5, (uint64_t)v1 + v7, v14, v15);
}

BOOL sub_A28A8(uint64_t a1, uint64_t a2)
{
  return sub_A28B4(a1, a2, type metadata accessor for MetadataCache.MetadataRequest.ContinuationRecord);
}

BOOL sub_A28B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v5 + *(int *)(a3(0) + 20));
  return sub_28554(a1, v6);
}

uint64_t *sub_A28E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_A2980(a1, a2, a3, &qword_1F31A8);
}

uint64_t sub_A28F4(uint64_t a1, uint64_t a2)
{
  return sub_A2A44(a1, a2, &qword_1F31A8);
}

uint64_t sub_A2900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2AC4(a1, a2, a3, &qword_1F31A8);
}

uint64_t sub_A290C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2B5C(a1, a2, a3, &qword_1F31A8);
}

uint64_t sub_A2918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2C0C(a1, a2, a3, &qword_1F31A8);
}

uint64_t sub_A2924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2CA0(a1, a2, a3, &qword_1F31A8);
}

uint64_t sub_A2930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A293C);
}

uint64_t sub_A293C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2D4C(a1, a2, a3, &qword_1F31A8);
}

uint64_t sub_A2948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A2954);
}

uint64_t sub_A2954(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_A2E10(a1, a2, a3, a4, &qword_1F31A8);
}

void sub_A2960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_A2ED8(a1, a2, a3, (unint64_t *)&unk_1F3318, &qword_1F3138);
}

uint64_t *sub_A2974(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_A2980(a1, a2, a3, &qword_1F3270);
}

uint64_t *sub_A2980(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v6 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v16);
  }
  else
  {
    v9 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = *(int *)(a3 + 20);
    v11 = *(int *)(a3 + 24);
    v12 = *(uint64_t *)((char *)a2 + v10);
    *(uint64_t *)((char *)a1 + v10) = v12;
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    swift_bridgeObjectRetain(v12);
    v15 = sub_5EDC(a4);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_A2A38(uint64_t a1, uint64_t a2)
{
  return sub_A2A44(a1, a2, &qword_1F3270);
}

uint64_t sub_A2A44(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
  v7 = a1 + *(int *)(a2 + 24);
  v8 = sub_5EDC(a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
}

uint64_t sub_A2AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2AC4(a1, a2, a3, &qword_1F3270);
}

uint64_t sub_A2AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)(a2 + v9);
  *(_QWORD *)(a1 + v9) = v11;
  v12 = a1 + v10;
  v13 = a2 + v10;
  swift_bridgeObjectRetain(v11);
  v14 = sub_5EDC(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_A2B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2B5C(a1, a2, a3, &qword_1F3270);
}

uint64_t sub_A2B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(a1, a2, v8);
  v9 = *(int *)(a3 + 20);
  v10 = *(_QWORD *)(a2 + v9);
  v11 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_5EDC(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_A2C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2C0C(a1, a2, a3, &qword_1F3270);
}

uint64_t sub_A2C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_5EDC(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v10, v11, v12);
  return a1;
}

uint64_t sub_A2C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2CA0(a1, a2, a3, &qword_1F3270);
}

uint64_t sub_A2CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(a1, a2, v8);
  v9 = *(int *)(a3 + 20);
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_5EDC(a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_A2D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_A2D40);
}

uint64_t sub_A2D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_A2D4C(a1, a2, a3, &qword_1F3270);
}

uint64_t sub_A2D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v12 = a1;
    return v11(v12, a2, v10);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v10 = sub_5EDC(a4);
    v12 = a1 + *(int *)(a3 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
    return v11(v12, a2, v10);
  }
  v13 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v13 >= 0xFFFFFFFF)
    LODWORD(v13) = -1;
  return (v13 + 1);
}

uint64_t sub_A2DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_A2E04);
}

uint64_t sub_A2E04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_A2E10(a1, a2, a3, a4, &qword_1F3270);
}

uint64_t sub_A2E10(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  result = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v11 + 84) == a3)
  {
    v12 = result;
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v14 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v12 = sub_5EDC(a5);
    v14 = a1 + *(int *)(a4 + 24);
    v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  }
  return v13(v14, a2, a2, v12);
}

void sub_A2EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_A2ED8(a1, a2, a3, (unint64_t *)&unk_1F33B8, &qword_1F31E8);
}

void sub_A2ED8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[3];

  v8 = type metadata accessor for UUID(319);
  if (v9 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v8 - 8) + 64;
    v12[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_A2F80(319, a4, a5);
    if (v11 <= 0x3F)
    {
      v12[2] = *(_QWORD *)(v10 - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v12, a1 + 16);
    }
  }
}

void sub_A2F80(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v5 = sub_5F68(a3);
    v6 = sub_5F68(&qword_1F1348);
    v7 = type metadata accessor for CheckedContinuation(a1, v5, v6, &protocol self-conformance witness table for Error);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void *sub_A301C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  void *result;
  char v14;
  __int128 v15;

  v5 = (_QWORD *)*v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_6A540(v5);
  v6 = v5[2];
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = &v5[6 * a1];
      v10 = *((_OWORD *)v9 + 2);
      v9 += 4;
      v11 = *((_BYTE *)v9 + 40);
      v12 = v9[4];
      v15 = *((_OWORD *)v9 + 1);
      result = memmove(v9, v9 + 6, 48 * v8);
      v5[2] = v7;
      *v2 = v5;
      *(_OWORD *)a2 = v10;
      *(_OWORD *)(a2 + 16) = v15;
      *(_QWORD *)(a2 + 32) = v12;
      *(_BYTE *)(a2 + 40) = v11;
      return result;
    }
  }
  v14 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v14, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_A3120@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_6A554(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = sub_5EDC(&qword_1F1260);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = sub_41300(v11, a2, &qword_1F1260);
  v13 = v7 - a1;
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * v13)
  {
    result = swift_arrayInitWithTakeFrontToBack(v11, v11 + v10, v13, v8);
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront(v11);
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

unint64_t sub_A3268(unint64_t result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;

  if (result != a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD **)v3;
      v11 = *(_QWORD *)(*(_QWORD *)v3 + 16);
      if (v11 > result)
      {
        v4 = a2;
        if (v11 > a2)
        {
          v34 = (_QWORD *)v3;
          v9 = 6 * result;
          v12 = (uint64_t)&v2[6 * result + 4];
          v27 = 6 * a2;
          v28 = *(_QWORD *)(v12 + 32);
          v13 = (uint64_t)&v2[6 * a2 + 4];
          v10 = *(_QWORD *)v13;
          v5 = *(_QWORD *)(v13 + 8);
          v3 = *(_QWORD *)(v13 + 16);
          v6 = *(_QWORD *)(v13 + 24);
          v7 = *(_QWORD *)(v13 + 32);
          v8 = *(_BYTE *)(v13 + 40);
          v31 = *(_QWORD *)(v12 + 8);
          v32 = *(_QWORD *)v12;
          v29 = *(_QWORD *)(v12 + 24);
          v30 = *(_QWORD *)(v12 + 16);
          v33 = *(_BYTE *)(v12 + 40);
          sub_ABD64(*(_QWORD *)v12, v31, v30, v29, v28);
          sub_ABD64(v10, v5, v3, v6, v7);
          if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) != 0)
            goto LABEL_6;
          goto LABEL_12;
        }
LABEL_11:
        __break(1u);
LABEL_12:
        v2 = sub_6A540(v2);
LABEL_6:
        v14 = v2 + 4;
        v15 = &v2[v9 + 4];
        v16 = *v15;
        v17 = v15[1];
        v18 = v15[2];
        v19 = v15[3];
        v20 = v15[4];
        *v15 = v10;
        v15[1] = v5;
        v15[2] = v3;
        v15[3] = v6;
        v15[4] = v7;
        *((_BYTE *)v15 + 40) = v8;
        result = sub_B0458(v16, v17, v18, v19, v20);
        if (v2[2] <= v4)
        {
          __break(1u);
        }
        else
        {
          v21 = &v14[v27];
          v22 = v14[v27];
          v23 = v14[v27 + 1];
          v24 = v14[v27 + 2];
          v25 = v14[v27 + 3];
          v26 = v14[v27 + 4];
          *v21 = v32;
          v21[1] = v31;
          v21[2] = v30;
          v21[3] = v29;
          v21[4] = v28;
          *((_BYTE *)v21 + 40) = v33;
          result = sub_B0458(v22, v23, v24, v25, v26);
          *v34 = v2;
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_A33F0(unint64_t a1, unint64_t a2)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;

  v9 = sub_5EDC(&qword_1F1260);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v10);
  v16 = (char *)&v17 - v15;
  if (a1 != a2)
  {
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v3 = *v2;
      v5 = *(_QWORD *)(*v2 + 16);
      if (v5 > a1)
      {
        v18 = v2;
        v4 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
        v6 = *(unint64_t **)(v14 + 72);
        v2 = (unint64_t *)((_QWORD)v6 * a1);
        sub_B06B8(v3 + v4 + (_QWORD)v6 * a1, (uint64_t)&v17 - v15);
        if (v5 > a2)
        {
          v5 = (_QWORD)v6 * a2;
          sub_B06B8(v3 + v4 + (_QWORD)v6 * a2, (uint64_t)v12);
          result = swift_isUniquelyReferenced_nonNull_native(v3);
          v6 = v18;
          *v18 = v3;
          if ((result & 1) != 0)
            goto LABEL_6;
          goto LABEL_13;
        }
LABEL_12:
        __break(1u);
LABEL_13:
        result = sub_6A554(v3);
        v3 = result;
        *v6 = result;
LABEL_6:
        if (*(_QWORD *)(v3 + 16) <= a1)
        {
          __break(1u);
        }
        else
        {
          result = sub_B0888((uint64_t)v12, (uint64_t)v2 + v3 + v4);
          if (*(_QWORD *)(*v6 + 16) > a2)
            return sub_B0888((uint64_t)v16, *v6 + v4 + v5);
        }
        __break(1u);
        return result;
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

Swift::Int sub_A3560(uint64_t (*a1)(uint64_t *, uint64_t *, __n128))
{
  uint64_t *v1;
  uint64_t v3;
  Swift::Int result;

  v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_D0AA4(v3);
  result = sub_ABDA4(a1);
  *v1 = v3;
  return result;
}

uint64_t sub_A35E0()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_1F33F0);
  sub_5216C(v0, (uint64_t)qword_1F33F0);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD000000000000039, 0x80000000001A1630);
}

BOOL sub_A3660(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 72) < *(double *)(a1 + 72);
}

_QWORD *sub_A3674(__int128 *a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, double a9, double a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t (*v47)(uint64_t);
  double v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _UNKNOWN **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _BYTE *v68;
  _QWORD *v69;
  double *v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  _QWORD *v104;
  double *v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char *v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  int64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  int64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v158;
  _QWORD v159[2];
  _QWORD *v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t);
  double v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  double v173;
  _QWORD *v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  _QWORD *v187;
  __int128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  _QWORD *v205;
  _QWORD v206[2];
  _QWORD *v207;
  uint64_t v208;
  _UNKNOWN **v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  uint64_t v224;
  _BYTE v225[48];
  _QWORD v226[6];
  uint64_t v227;
  uint64_t v228;
  _QWORD v229[5];
  char v230;
  _QWORD v231[5];
  char v232;
  _QWORD *v233;
  uint64_t v234;
  double v235;
  uint64_t v236;
  uint64_t v237;
  char v238;

  LODWORD(v193) = a8;
  v191 = a7;
  v190 = a6;
  v187 = (_QWORD *)a3;
  v183 = a2;
  v178 = sub_5EDC(&qword_1F0D90);
  v180 = *(_QWORD *)(v178 - 8);
  __chkstk_darwin(v178);
  v170 = (char *)v159 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = type metadata accessor for CollectionRecommendation(0);
  v167 = *(_QWORD *)(v184 - 8);
  v22 = __chkstk_darwin(v184);
  v172 = (uint64_t)v159 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v168 = (uint64_t)v159 - v25;
  v26 = __chkstk_darwin(v24);
  v164 = (char *)v159 - v27;
  v28 = __chkstk_darwin(v26);
  v30 = (char *)v159 - v29;
  __chkstk_darwin(v28);
  v189 = (uint64_t)v159 - v31;
  v182 = type metadata accessor for ScoredCollectionRecommendation(0);
  v169 = *(_QWORD *)(v182 - 8);
  v32 = __chkstk_darwin(v182);
  v166 = (uint64_t)v159 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  *(_QWORD *)&v188 = (char *)v159 - v35;
  __chkstk_darwin(v34);
  v186 = (char *)v159 - v36;
  v38 = *((_QWORD *)a1 + 2);
  v37 = *((_QWORD *)a1 + 3);
  v222 = *a1;
  v223 = v38;
  v224 = v37;
  v221 = a5;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRetain(a5);
  sub_A3560((uint64_t (*)(uint64_t *, uint64_t *, __n128))sub_A3660);
  v192 = a13;
  LODWORD(v181) = a4 & 1;
  v179 = (char *)v221;
  v39 = (uint64_t)v187;
  swift_bridgeObjectRetain(v187);
  v40 = v183;
  swift_bridgeObjectRetain(v183);
  swift_bridgeObjectRetain(a14);
  swift_bridgeObjectRetain(a15);
  v158 = v192;
  v41 = v193 & 1;
  v185 = a16;
  v192 = a15;
  v193 = a14;
  sub_A4EA0((uint64_t *)&v222, v40, v39, v181, (uint64_t)v179, v190, v191, v41, (uint64_t)&v210, a9, a10, a11 & 1, a12, v158, a14, a15, a16);
  v209 = &off_1D9F08;
  if (*(_QWORD *)(v38 + 16)
    && ((v42 = sub_3951C(0), (v43 & 1) != 0) || *(_QWORD *)(v38 + 16) && (v42 = sub_3951C(9), (v44 & 1) != 0)))
  {
    v45 = *(_QWORD *)(v38 + 56) + 24 * v42;
    v46 = *(unsigned __int8 *)(v45 + 8);
    v47 = *(uint64_t (**)(uint64_t))v45;
    v48 = *(double *)(v45 + 16);
    swift_bridgeObjectRetain(*(_QWORD *)&v48);
  }
  else
  {
    v47 = 0;
    v46 = 0;
    v48 = 0.0;
  }
  v202 = v218;
  v203 = v219;
  v204 = v220;
  v198 = v214;
  v199 = v215;
  v200 = v216;
  v201 = v217;
  v194 = v210;
  v195 = v211;
  v196 = v212;
  v197 = v213;
  v233 = v47;
  v234 = v46;
  v161 = v46;
  v235 = v48;
  v49 = sub_A5984((uint64_t *)&v233);
  v171 = v50;
  if (qword_1F00D0 != -1)
    goto LABEL_91;
LABEL_8:
  v51 = type metadata accessor for Logger(0);
  v52 = sub_5216C(v51, (uint64_t)qword_1F33F0);
  swift_bridgeObjectRetain_n(v49, 2);
  v159[1] = v52;
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.default.getter(v54);
  v56 = os_log_type_enabled(v54, v55);
  v162 = v47;
  v163 = v48;
  if (v56)
  {
    v57 = (uint8_t *)swift_slowAlloc(12, -1);
    v58 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v194 = v58;
    *(_DWORD *)v57 = 136315138;
    v59 = sub_A6310((uint64_t)v49);
    v233 = (_QWORD *)sub_9DA98(v59, v60, (uint64_t *)&v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, &v234, v57 + 4, v57 + 12);
    swift_bridgeObjectRelease_n(v49, 2);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v54, v55, "highScoringSingleBookScoredCollectionRecommendations=%s", v57, 0xCu);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v57, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v49, 2);
  }
  v61 = (uint64_t)v186;
  v233 = v49;
  v234 = 0;
  v235 = a9;
  v62 = v192;
  v236 = v193;
  v237 = v192;
  v238 = 0;
  swift_bridgeObjectRetain(v193);
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRetain(v49);
  sub_A6518((uint64_t)&v233);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v160 = v49;
  swift_bridgeObjectRelease();
  v63 = v209;
  v47 = type metadata accessor for CollectionRecommendation;
  v179 = v30;
  while (1)
  {
    v66 = swift_allocObject(&unk_1E2698, 24, 7);
    v165 = v66;
    *(_QWORD *)(v66 + 16) = &off_1D9F58;
    v187 = (_QWORD *)(v66 + 16);
    v67 = (char *)v63[2];
    if (v67)
    {
      swift_bridgeObjectRetain_n(v63, 3);
      v68 = v63 + 9;
      v69 = _swiftEmptyArrayStorage;
      do
      {
        v71 = *((_QWORD *)v68 - 5);
        if (v71)
        {
          v72 = *v68;
          v74 = *((_QWORD *)v68 - 2);
          v73 = *((_QWORD *)v68 - 1);
          v75 = *((_QWORD *)v68 - 4);
          a9 = *((double *)v68 - 3);
          swift_bridgeObjectRetain(*((_QWORD *)v68 - 5));
          swift_bridgeObjectRetain(v74);
          swift_bridgeObjectRetain(v73);
          if ((swift_isUniquelyReferenced_nonNull_native(v69) & 1) == 0)
            v69 = sub_30C70(0, v69[2] + 1, 1, v69);
          v77 = v69[2];
          v76 = v69[3];
          v78 = v69;
          if (v77 >= v76 >> 1)
            v78 = sub_30C70((_QWORD *)(v76 > 1), v77 + 1, 1, v69);
          v78[2] = v77 + 1;
          v69 = v78;
          v70 = (double *)&v78[6 * v77];
          *((_QWORD *)v70 + 4) = v71;
          *((_QWORD *)v70 + 5) = v75;
          v70[6] = a9;
          *((_QWORD *)v70 + 7) = v74;
          *((_QWORD *)v70 + 8) = v73;
          *((_BYTE *)v70 + 72) = v72 & 1;
          v30 = v179;
          v61 = (uint64_t)v186;
          v47 = type metadata accessor for CollectionRecommendation;
        }
        v68 += 48;
        --v67;
      }
      while (v67);
      swift_bridgeObjectRelease_n(v63, 3);
    }
    else
    {
      v69 = _swiftEmptyArrayStorage;
    }
    v49 = (_QWORD *)v184;
    v79 = (uint64_t)v187;
    v175 = v69[2];
    if (v175)
    {
      v48 = 0.0;
      v176 = v69;
      v174 = v69 + 4;
      do
      {
        if (*(_QWORD *)&v48 >= v176[2])
        {
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          swift_once(&qword_1F00D0, sub_A35E0);
          goto LABEL_8;
        }
        v80 = &v174[6 * *(_QWORD *)&v48];
        v81 = *v80;
        v82 = *((double *)v80 + 1);
        a9 = *((double *)v80 + 2);
        v83 = v80[3];
        v84 = v80[4];
        LOBYTE(v80) = *((_BYTE *)v80 + 40);
        v229[0] = v81;
        *(double *)&v229[1] = v82;
        *(double *)&v229[2] = a9;
        v229[3] = v83;
        v229[4] = v84;
        v230 = (char)v80;
        v192 = v84;
        v193 = v83;
        v181 = v81;
        if ((v80 & 1) == 0)
        {
          v202 = v218;
          v203 = v219;
          v204 = v220;
          v198 = v214;
          v199 = v215;
          v200 = v216;
          v201 = v217;
          v194 = v210;
          v195 = v211;
          v196 = v212;
          v197 = v213;
          swift_bridgeObjectRetain_n(v81, 2);
          swift_bridgeObjectRetain_n(v83, 2);
          swift_bridgeObjectRetain_n(v84, 2);
          v177 = sub_A6F40(v81, v171);
          v93 = *(_QWORD *)(v177 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v191 = v93;
          if (v93)
          {
            v173 = v48;
            v183 = (*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80);
            v190 = *(_QWORD *)(v169 + 72);
            sub_26A5C(v177 + v183, v61, type metadata accessor for ScoredCollectionRecommendation);
            v94 = v189;
            sub_26A5C(v61, v189, type metadata accessor for CollectionRecommendation);
            v95 = (char *)&loc_A404C + *((int *)qword_A4E50 + swift_getEnumCaseMultiPayload(v94, v49));
            __asm { BR              X9 }
          }
          swift_bridgeObjectRelease();
          v79 = (uint64_t)v187;
          swift_beginAccess(v187, &v194, 33, 0);
          v231[0] = v81;
          *(double *)&v231[1] = v82;
          *(double *)&v231[2] = a9;
          v231[3] = v193;
          v231[4] = v84;
          v232 = 1;
          v96 = *(_QWORD *)v79;
          v97 = *(_QWORD *)(*(_QWORD *)v79 + 16);
          if (v97 <= v185)
          {
LABEL_46:
            sub_A6518((uint64_t)v231);
            v79 = (uint64_t)v187;
          }
          else
          {
            if (!v97)
              goto LABEL_90;
            if (v97 == 1)
              goto LABEL_94;
            if (!*(_QWORD *)(v96 + 80))
              goto LABEL_93;
            if (*(double *)(v96 + 88) < v82)
            {
              sub_AB428();
              goto LABEL_46;
            }
          }
          swift_endAccess(&v194);
          swift_bridgeObjectRelease();
          goto LABEL_26;
        }
        swift_beginAccess(v79, &v194, 33, 0);
        v85 = *(_QWORD *)v79;
        v86 = *(_QWORD *)(*(_QWORD *)v79 + 16);
        if (v86 <= v185)
        {
          swift_bridgeObjectRetain(v181);
          swift_bridgeObjectRetain(v193);
          swift_bridgeObjectRetain(v192);
        }
        else
        {
          if (!v86)
            goto LABEL_89;
          if (v86 == 1)
            goto LABEL_94;
          v87 = *(_QWORD *)(v85 + 80);
          if (!v87)
          {
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7974706D65, 0xE500000000000000, "BooksPersonalization/PriorityQueue.swift", 40, 2, 29, 0);
            __break(1u);
            swift_release(v221);
            __break(1u);
            JUMPOUT(0xA4E50);
          }
          v88 = v48;
          v90 = *(_QWORD *)(v85 + 104);
          v89 = *(_QWORD *)(v85 + 112);
          v92 = *(double *)(v85 + 88);
          v91 = *(_QWORD *)(v85 + 96);
          a9 = v92;
          swift_bridgeObjectRetain(v181);
          swift_bridgeObjectRetain(v193);
          swift_bridgeObjectRetain(v192);
          sub_ABD64(v87, *(uint64_t *)&v92, v91, v90, v89);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v49 = (_QWORD *)v184;
          v61 = (uint64_t)v186;
          v47 = type metadata accessor for CollectionRecommendation;
          v48 = v88;
          if (v82 <= v92)
            goto LABEL_39;
          sub_AB428();
        }
        sub_A6518((uint64_t)v229);
LABEL_39:
        swift_endAccess(&v194);
        swift_bridgeObjectRelease();
        v79 = (uint64_t)v187;
LABEL_26:
        ++*(_QWORD *)&v48;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      while (*(_QWORD *)&v48 != v175);
    }
    swift_bridgeObjectRelease();
    v98 = sub_5EDC(&qword_1F3408);
    v99 = swift_allocObject(v98, 32, 7);
    v193 = v99;
    v100 = v165;
    *(_QWORD *)(v99 + 16) = sub_ABD9C;
    *(_QWORD *)(v99 + 24) = v100;
    swift_beginAccess(v187, &v208, 0, 0);
    v101 = *(_QWORD *)(v100 + 16);
    v102 = *(_QWORD *)(v101 + 16);
    if (v102)
    {
      swift_bridgeObjectRetain_n(*(_QWORD *)(v100 + 16), 3);
      swift_retain_n(v100, 2);
      v192 = v101;
      v103 = (_BYTE *)(v101 + 72);
      v104 = _swiftEmptyArrayStorage;
      do
      {
        v106 = *((_QWORD *)v103 - 5);
        if (v106)
        {
          v107 = *v103;
          v109 = *((_QWORD *)v103 - 2);
          v108 = *((_QWORD *)v103 - 1);
          v110 = *((_QWORD *)v103 - 4);
          a9 = *((double *)v103 - 3);
          swift_bridgeObjectRetain(*((_QWORD *)v103 - 5));
          swift_bridgeObjectRetain(v109);
          swift_bridgeObjectRetain(v108);
          if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
            v104 = sub_30C70(0, v104[2] + 1, 1, v104);
          v112 = v104[2];
          v111 = v104[3];
          if (v112 >= v111 >> 1)
            v104 = sub_30C70((_QWORD *)(v111 > 1), v112 + 1, 1, v104);
          v104[2] = v112 + 1;
          v105 = (double *)&v104[6 * v112];
          *((_QWORD *)v105 + 4) = v106;
          *((_QWORD *)v105 + 5) = v110;
          v105[6] = a9;
          *((_QWORD *)v105 + 7) = v109;
          *((_QWORD *)v105 + 8) = v108;
          *((_BYTE *)v105 + 72) = v107 & 1;
          v47 = type metadata accessor for CollectionRecommendation;
        }
        v103 += 48;
        --v102;
      }
      while (v102);
      swift_release(v165);
      swift_bridgeObjectRelease_n(v192, 3);
      v30 = v179;
      v61 = (uint64_t)v186;
    }
    else
    {
      swift_retain(v100);
      v104 = _swiftEmptyArrayStorage;
    }
    v113 = sub_5EDC(&qword_1F3410);
    v114 = swift_allocObject(v113, 32, 7);
    *(_QWORD *)(v114 + 16) = v104;
    *(_QWORD *)(v114 + 24) = 0;
    v115 = v104[2];
    if (!v115)
      goto LABEL_65;
    v116 = *((unsigned __int8 *)v104 + 72);
    *(_QWORD *)(v114 + 24) = 1;
    if (v116 == 1)
      break;
LABEL_12:
    swift_release(v114);
    v64 = v193;
    swift_setDeallocating(v193);
    swift_release(*(_QWORD *)(v64 + 24));
    swift_deallocClassInstance(v64, 32, 7);
    swift_bridgeObjectRelease();
    v65 = v165;
    v63 = *(_UNKNOWN ***)(v165 + 16);
    swift_bridgeObjectRetain(v63);
    swift_release(v65);
    v209 = v63;
  }
  v117 = (char *)(v104 + 15);
  v118 = 1;
  while (v115 != v118)
  {
    ++v118;
    v119 = *v117;
    v117 += 48;
    *(_QWORD *)(v114 + 24) = v118;
    if ((v119 & 1) == 0)
      goto LABEL_12;
  }
LABEL_65:
  swift_release(v114);
  v120 = v193;
  swift_setDeallocating(v193);
  swift_release(*(_QWORD *)(v120 + 24));
  swift_deallocClassInstance(v120, 32, 7);
  swift_release(v165);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v209);
  v122 = sub_A6DFC(v121);
  v124 = v123;
  swift_bridgeObjectRelease();
  sub_AD6E8((uint64_t)v122, v124);
  v126 = v125;
  swift_bridgeObjectRelease();
  sub_A7E10(v126, (uint64_t)v225);
  swift_release(v126);
  sub_41300((uint64_t)v225, (uint64_t)v226, &qword_1F1230);
  v127 = (_QWORD *)v226[0];
  if (v226[0])
  {
    v128 = v226[4];
    v227 = v226[3];
    sub_B03FC(&v227);
    v228 = v128;
    sub_B03FC(&v228);
  }
  else
  {
    v127 = _swiftEmptyArrayStorage;
  }
  v129 = v127[2];
  v130 = _swiftEmptyArrayStorage;
  v187 = v127;
  if (v129)
  {
    *(_QWORD *)&v194 = _swiftEmptyArrayStorage;
    sub_34300(0, v129, 0);
    v131 = (uint64_t)v127
         + ((*(unsigned __int8 *)(v169 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
    v132 = *(_QWORD *)(v169 + 72);
    v133 = (uint64_t)v164;
    do
    {
      v134 = v166;
      sub_26A5C(v131, v166, type metadata accessor for ScoredCollectionRecommendation);
      sub_26A5C(v134, v133, type metadata accessor for CollectionRecommendation);
      sub_26AA0(v134, type metadata accessor for ScoredCollectionRecommendation);
      v135 = (_QWORD *)v194;
      if ((swift_isUniquelyReferenced_nonNull_native(v194) & 1) == 0)
      {
        sub_34300(0, v135[2] + 1, 1);
        v133 = (uint64_t)v164;
        v135 = (_QWORD *)v194;
      }
      v137 = v135[2];
      v136 = v135[3];
      if (v137 >= v136 >> 1)
      {
        sub_34300(v136 > 1, v137 + 1, 1);
        v133 = (uint64_t)v164;
        v135 = (_QWORD *)v194;
      }
      v135[2] = v137 + 1;
      sub_A2618(v133, (uint64_t)v135+ ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80))+ *(_QWORD *)(v167 + 72) * v137, type metadata accessor for CollectionRecommendation);
      v131 += v132;
      --v129;
    }
    while (v129);
    v130 = _swiftEmptyArrayStorage;
  }
  else
  {
    v135 = _swiftEmptyArrayStorage;
  }
  v207 = v135;
  v205 = _swiftEmptyArrayStorage;
  if (v135[2])
  {
    v138 = (uint64_t)v135
         + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
    v193 = *(_QWORD *)(v167 + 72);
    swift_bridgeObjectRetain_n(v135, 3);
    v188 = xmmword_1875E0;
    v139 = v168;
    sub_26A5C(v138, v168, type metadata accessor for CollectionRecommendation);
    v140 = v172;
    sub_26A5C(v139, v172, type metadata accessor for CollectionRecommendation);
    v141 = (char *)&loc_A4994 + *((int *)qword_A4E78 + swift_getEnumCaseMultiPayload(v140, v184));
    __asm { BR              X9 }
  }
  swift_bridgeObjectRetain(v135);
  v142 = _swiftEmptyArrayStorage[2];
  if (v142)
  {
    *(_QWORD *)&v194 = _swiftEmptyArrayStorage;
    sub_340AC(0, v142, 0);
    v130 = (_QWORD *)v194;
    v143 = *(_QWORD *)(v194 + 16);
    v144 = 4;
    do
    {
      v145 = _swiftEmptyArrayStorage[v144];
      *(_QWORD *)&v194 = v130;
      v146 = v130[3];
      if (v143 >= v146 >> 1)
      {
        sub_340AC(v146 > 1, v143 + 1, 1);
        v130 = (_QWORD *)v194;
      }
      v130[2] = v143 + 1;
      v130[v143 + 4] = v145;
      v144 += 10;
      ++v143;
      --v142;
    }
    while (v142);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v147 = sub_3CD28((uint64_t)v130);
  swift_bridgeObjectRelease();
  v202 = v218;
  v203 = v219;
  v204 = v220;
  v198 = v214;
  v199 = v215;
  v200 = v216;
  v201 = v217;
  v194 = v210;
  v195 = v211;
  v196 = v212;
  v197 = v213;
  v205 = v162;
  v206[0] = v161;
  *(double *)&v206[1] = v163;
  v148 = sub_AF3FC((uint64_t)&v205, (uint64_t)v160, (uint64_t)v187, v147);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_B0358(&v210);
  sub_10F544((uint64_t)v148);
  v149 = (uint64_t)v207;
  swift_bridgeObjectRetain_n(v207, 2);
  v151 = Logger.logObject.getter(v150);
  v152 = static os_log_type_t.default.getter(v151);
  if (os_log_type_enabled(v151, v152))
  {
    v153 = (uint8_t *)swift_slowAlloc(12, -1);
    v154 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v194 = v154;
    *(_DWORD *)v153 = 136315138;
    v155 = sub_18092C(v149);
    v205 = (_QWORD *)sub_9DA98(v155, v156, (uint64_t *)&v194);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v205, v206, v153 + 4, v153 + 12);
    swift_bridgeObjectRelease_n(v149, 2);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_0, v151, v152, "collectionRecommendations=%s", v153, 0xCu);
    swift_arrayDestroy(v154, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v154, -1, -1);
    swift_slowDealloc(v153, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v149, 2);
  }
  swift_beginAccess(&v207, &v194, 0, 0);
  return v207;
}

uint64_t sub_A4EA0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v24;
  uint64_t v25;
  void (*v26)(_QWORD *@<X8>);
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v59;
  unint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  _QWORD *v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  _OWORD *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  _OWORD *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  unint64_t v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  _QWORD *v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  _OWORD *v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t result;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  int64_t v140;
  void (*v141)(_QWORD *@<X8>);
  char v142;
  _QWORD *v143;
  void (*v144)(_QWORD *@<X8>);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int64_t v148;
  char v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  uint64_t v168;
  _BYTE v169[16];
  char v170[8];
  uint64_t v171;

  v129 = a1[1];
  v130 = *a1;
  v127 = a1[3];
  v128 = a1[2];
  v143 = (_QWORD *)sub_658EC(_swiftEmptyArrayStorage);
  v24 = (_QWORD *)sub_658EC(_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a5);
  v154 = sub_535D8((uint64_t)_swiftEmptyArrayStorage);
  v153 = sub_535E4((uint64_t)_swiftEmptyArrayStorage);
  v152 = a3;
  v135 = *(_QWORD *)(a5 + 16);
  if (!v135)
  {
    v151 = a8 & 1;
    v149 = a12 & 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = 0;
    v26 = 0;
    v138 = _swiftEmptyArrayStorage;
LABEL_110:
    swift_bridgeObjectRelease();
    sub_3EB0C(v25, 0);
    result = sub_3EB0C((uint64_t)v26, 0);
    *(_QWORD *)a9 = v130;
    *(_QWORD *)(a9 + 8) = v129;
    *(_QWORD *)(a9 + 16) = v128;
    *(_QWORD *)(a9 + 24) = v127;
    *(_QWORD *)(a9 + 32) = a2;
    *(_QWORD *)(a9 + 40) = v143;
    *(_QWORD *)(a9 + 48) = v24;
    *(_QWORD *)(a9 + 56) = v154;
    *(_QWORD *)(a9 + 64) = v153;
    *(_QWORD *)(a9 + 72) = v138;
    *(_QWORD *)(a9 + 80) = a5;
    *(double *)(a9 + 88) = a11;
    *(_QWORD *)(a9 + 96) = a6;
    *(_QWORD *)(a9 + 104) = a7;
    *(double *)(a9 + 112) = a10;
    *(_BYTE *)(a9 + 120) = v151;
    *(_BYTE *)(a9 + 121) = v149;
    *(_QWORD *)(a9 + 128) = a13;
    *(_QWORD *)(a9 + 136) = a14;
    *(_QWORD *)(a9 + 144) = a15;
    *(_QWORD *)(a9 + 152) = a16;
    *(_QWORD *)(a9 + 160) = a17;
    return result;
  }
  v137 = a2;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v136 = a5 + 32;
  v134 = a5;
  v138 = _swiftEmptyArrayStorage;
  v142 = a4;
  v150 = a3 + 56;
LABEL_5:
  if (v27 >= *(_QWORD *)(a5 + 16))
    goto LABEL_119;
  v144 = (void (*)(_QWORD *@<X8>))v25;
  v28 = (__int128 *)(v136 + 112 * v27);
  v29 = v28[6];
  v30 = v28[4];
  v161 = v28[5];
  v162 = v29;
  v31 = v28[2];
  v159 = v28[3];
  v160 = v30;
  v32 = v28[1];
  v156 = *v28;
  v157 = v32;
  v158 = v31;
  v33 = *((_QWORD *)&v161 + 1);
  v163 = *((_QWORD *)&v161 + 1);
  v139 = v27 + 1;
  v34 = *((_QWORD *)&v161 + 1) + 56;
  v35 = 1 << *(_BYTE *)(*((_QWORD *)&v161 + 1) + 32);
  if (v35 < 64)
    v36 = ~(-1 << v35);
  else
    v36 = -1;
  v37 = v36 & *(_QWORD *)(*((_QWORD *)&v161 + 1) + 56);
  sub_522D8((uint64_t)&v156);
  sub_B08D0(&v163);
  v38 = v152;
  v39 = 0;
  v40 = (unint64_t)(v35 + 63) >> 6;
  v140 = v40;
  v141 = v26;
  v145 = v33 + 56;
  v147 = v33;
LABEL_10:
  while (v37)
  {
    v41 = __clz(__rbit64(v37));
    v37 &= v37 - 1;
    v42 = v41 | (v39 << 6);
LABEL_23:
    v46 = *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * v42);
    v47 = *(_QWORD *)(v38 + 16);
    if ((a4 & 1) != 0)
    {
      if (!v47)
        goto LABEL_38;
      v53 = static Hasher._hash(seed:_:)(*(_QWORD *)(v38 + 40), v46);
      v38 = v152;
      v54 = -1 << *(_BYTE *)(v152 + 32);
      v55 = v53 & ~v54;
      if (((*(_QWORD *)(v150 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
        goto LABEL_38;
      v56 = *(_QWORD *)(v152 + 48);
      if (*(_QWORD *)(v56 + 8 * v55) != v46)
      {
        v57 = ~v54;
        while (1)
        {
          v55 = (v55 + 1) & v57;
          if (((*(_QWORD *)(v150 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
            break;
          if (*(_QWORD *)(v56 + 8 * v55) == v46)
            goto LABEL_10;
        }
LABEL_38:
        sub_522D8((uint64_t)&v156);
        sub_3EB0C((uint64_t)v144, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v143);
        v60 = sub_39228(v46);
        v61 = v143[2];
        v62 = (v59 & 1) == 0;
        v63 = v61 + v62;
        if (__OFADD__(v61, v62))
          goto LABEL_115;
        v64 = v59;
        if (v143[3] >= v63)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_16CF80();
        }
        else
        {
          sub_15DF20(v63, isUniquelyReferenced_nonNull_native);
          v65 = sub_39228(v46);
          if ((v64 & 1) != (v66 & 1))
            goto LABEL_120;
          v60 = v65;
        }
        swift_bridgeObjectRelease();
        if ((v64 & 1) != 0)
        {
          swift_bridgeObjectRetain(v143);
        }
        else
        {
          v143[(v60 >> 6) + 8] |= 1 << v60;
          *(_QWORD *)(v143[6] + 8 * v60) = v46;
          *(_QWORD *)(v143[7] + 8 * v60) = _swiftEmptyArrayStorage;
          v67 = v143[2];
          v68 = v67 + 1;
          v69 = __OFADD__(v67, 1);
          swift_bridgeObjectRetain(v143);
          if (v69)
            goto LABEL_118;
          v143[2] = v68;
        }
        v70 = v143[7];
        swift_bridgeObjectRelease();
        v71 = *(_QWORD **)(v70 + 8 * v60);
        v72 = swift_isUniquelyReferenced_nonNull_native(v71);
        *(_QWORD *)(v70 + 8 * v60) = v71;
        a4 = v142;
        if ((v72 & 1) == 0)
        {
          v71 = sub_2FFF4(0, v71[2] + 1, 1, v71);
          *(_QWORD *)(v70 + 8 * v60) = v71;
        }
        v74 = v71[2];
        v73 = v71[3];
        v38 = v152;
        if (v74 >= v73 >> 1)
        {
          v81 = sub_2FFF4((_QWORD *)(v73 > 1), v74 + 1, 1, v71);
          v38 = v152;
          v71 = v81;
          *(_QWORD *)(v70 + 8 * v60) = v81;
        }
        v33 = v147;
        v71[2] = v74 + 1;
        v75 = &v71[14 * v74];
        v76 = v156;
        v77 = v158;
        v75[3] = v157;
        v75[4] = v77;
        v75[2] = v76;
        v78 = v159;
        v79 = v160;
        v80 = v162;
        v75[7] = v161;
        v75[8] = v80;
        v75[5] = v78;
        v75[6] = v79;
        v144 = sub_A7FBC;
        v40 = v140;
        v26 = v141;
        v34 = v145;
      }
    }
    else if (v47)
    {
      v48 = static Hasher._hash(seed:_:)(*(_QWORD *)(v38 + 40), v46);
      v38 = v152;
      v49 = -1 << *(_BYTE *)(v152 + 32);
      v50 = v48 & ~v49;
      if (((*(_QWORD *)(v150 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) != 0)
      {
        v51 = *(_QWORD *)(v152 + 48);
        if (*(_QWORD *)(v51 + 8 * v50) == v46)
          goto LABEL_38;
        v52 = ~v49;
        while (1)
        {
          v50 = (v50 + 1) & v52;
          if (((*(_QWORD *)(v150 + ((v50 >> 3) & 0xFFFFFFFFFFFFF8)) >> v50) & 1) == 0)
            break;
          if (*(_QWORD *)(v51 + 8 * v50) == v46)
            goto LABEL_38;
        }
      }
    }
  }
  v43 = __OFADD__(v39++, 1);
  if (v43)
  {
LABEL_113:
    __break(1u);
LABEL_114:
    __break(1u);
LABEL_115:
    __break(1u);
    goto LABEL_116;
  }
  if (v39 >= v40)
    goto LABEL_60;
  v44 = *(_QWORD *)(v34 + 8 * v39);
  if (v44)
    goto LABEL_22;
  v45 = v39 + 1;
  if (v39 + 1 >= v40)
    goto LABEL_60;
  v44 = *(_QWORD *)(v34 + 8 * v45);
  if (v44)
    goto LABEL_21;
  v45 = v39 + 2;
  if (v39 + 2 >= v40)
    goto LABEL_60;
  v44 = *(_QWORD *)(v34 + 8 * v45);
  if (v44)
  {
LABEL_21:
    v39 = v45;
LABEL_22:
    v37 = (v44 - 1) & v44;
    v42 = __clz(__rbit64(v44)) + (v39 << 6);
    goto LABEL_23;
  }
  v45 = v39 + 3;
  if (v39 + 3 >= v40)
  {
LABEL_60:
    swift_release(v33);
    v82 = v161;
    if ((sub_A7FCC(v161, v137) & 1) == 0)
    {
      sub_522D8((uint64_t)&v156);
      if ((swift_isUniquelyReferenced_nonNull_native(v138) & 1) != 0)
        v83 = v138;
      else
        v83 = sub_2FFF4(0, v138[2] + 1, 1, v138);
      v85 = v83[2];
      v84 = v83[3];
      if (v85 >= v84 >> 1)
        v83 = sub_2FFF4((_QWORD *)(v84 > 1), v85 + 1, 1, v83);
      v83[2] = v85 + 1;
      v138 = v83;
      v86 = &v83[14 * v85];
      v87 = v156;
      v88 = v158;
      v86[3] = v157;
      v86[4] = v88;
      v86[2] = v87;
      v89 = v159;
      v90 = v160;
      v91 = v162;
      v86[7] = v161;
      v86[8] = v91;
      v86[5] = v89;
      v86[6] = v90;
    }
    v146 = v82 + 56;
    v92 = 1 << *(_BYTE *)(v82 + 32);
    if (v92 < 64)
      v93 = ~(-1 << v92);
    else
      v93 = -1;
    v94 = v93 & *(_QWORD *)(v82 + 56);
    v148 = (unint64_t)(v92 + 63) >> 6;
    swift_bridgeObjectRetain(v82);
    v95 = 0;
    if (v94)
    {
LABEL_70:
      v96 = __clz(__rbit64(v94));
      v94 &= v94 - 1;
      v97 = v96 | (v95 << 6);
      goto LABEL_82;
    }
    while (1)
    {
      v43 = __OFADD__(v95++, 1);
      if (v43)
        goto LABEL_114;
      if (v95 >= v148)
        goto LABEL_105;
      v98 = *(_QWORD *)(v146 + 8 * v95);
      if (!v98)
      {
        v99 = v95 + 1;
        if (v95 + 1 >= v148)
          goto LABEL_105;
        v98 = *(_QWORD *)(v146 + 8 * v99);
        if (!v98)
        {
          v99 = v95 + 2;
          if (v95 + 2 >= v148)
            goto LABEL_105;
          v98 = *(_QWORD *)(v146 + 8 * v99);
          if (!v98)
          {
            v99 = v95 + 3;
            if (v95 + 3 >= v148)
            {
LABEL_105:
              a5 = v134;
              swift_release(v82);
              v166 = v158;
              v167 = v159;
              v168 = v160;
              v164 = v156;
              v165 = v157;
              sub_41300((uint64_t)&v167 + 8, (uint64_t)v169, &qword_1F3428);
              v124 = sub_41300((uint64_t)v169, (uint64_t)v170, &qword_1F3428);
              v125 = v171;
              if (v171)
              {
                __chkstk_darwin(v124);
                sub_B0904((uint64_t)v169);
                sub_AEF18(v125, (void (*)(_BYTE *, uint64_t))sub_B08F8);
                sub_B0490((uint64_t)&v156);
                sub_B092C((uint64_t)v169);
              }
              else
              {
                sub_B0490((uint64_t)&v156);
              }
              v25 = (uint64_t)v144;
              a4 = v142;
              v27 = v139;
              if (v139 == v135)
              {
                a2 = v137;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v151 = a8;
                v149 = a12;
                goto LABEL_110;
              }
              goto LABEL_5;
            }
            v98 = *(_QWORD *)(v146 + 8 * v99);
            if (!v98)
            {
              while (1)
              {
                v95 = v99 + 1;
                if (__OFADD__(v99, 1))
                  goto LABEL_117;
                if (v95 >= v148)
                  goto LABEL_105;
                v98 = *(_QWORD *)(v146 + 8 * v95);
                ++v99;
                if (v98)
                  goto LABEL_81;
              }
            }
          }
        }
        v95 = v99;
      }
LABEL_81:
      v94 = (v98 - 1) & v98;
      v97 = __clz(__rbit64(v98)) + (v95 << 6);
LABEL_82:
      v100 = *(_QWORD *)(*(_QWORD *)(v82 + 48) + 8 * v97);
      sub_522D8((uint64_t)&v156);
      sub_3EB0C((uint64_t)v26, 0);
      v101 = swift_isUniquelyReferenced_nonNull_native(v24);
      v103 = sub_39228(v100);
      v104 = v24[2];
      v105 = (v102 & 1) == 0;
      v106 = v104 + v105;
      if (__OFADD__(v104, v105))
      {
        __break(1u);
LABEL_112:
        __break(1u);
        goto LABEL_113;
      }
      v107 = v102;
      if (v24[3] >= v106)
      {
        if ((v101 & 1) == 0)
          sub_16CF80();
      }
      else
      {
        sub_15DF20(v106, v101);
        v108 = sub_39228(v100);
        if ((v107 & 1) != (v109 & 1))
          goto LABEL_120;
        v103 = v108;
      }
      swift_bridgeObjectRelease();
      if ((v107 & 1) != 0)
      {
        swift_bridgeObjectRetain(v24);
      }
      else
      {
        v24[(v103 >> 6) + 8] |= 1 << v103;
        *(_QWORD *)(v24[6] + 8 * v103) = v100;
        *(_QWORD *)(v24[7] + 8 * v103) = _swiftEmptyArrayStorage;
        v110 = v24[2];
        v111 = v110 + 1;
        v112 = __OFADD__(v110, 1);
        swift_bridgeObjectRetain(v24);
        if (v112)
          goto LABEL_112;
        v24[2] = v111;
      }
      v113 = v24[7];
      swift_bridgeObjectRelease();
      v114 = *(_QWORD **)(v113 + 8 * v103);
      v115 = swift_isUniquelyReferenced_nonNull_native(v114);
      *(_QWORD *)(v113 + 8 * v103) = v114;
      if ((v115 & 1) == 0)
      {
        v114 = sub_2FFF4(0, v114[2] + 1, 1, v114);
        *(_QWORD *)(v113 + 8 * v103) = v114;
      }
      v117 = v114[2];
      v116 = v114[3];
      if (v117 >= v116 >> 1)
      {
        v114 = sub_2FFF4((_QWORD *)(v116 > 1), v117 + 1, 1, v114);
        *(_QWORD *)(v113 + 8 * v103) = v114;
      }
      v114[2] = v117 + 1;
      v118 = &v114[14 * v117];
      v119 = v156;
      v120 = v158;
      v118[3] = v157;
      v118[4] = v120;
      v118[2] = v119;
      v121 = v159;
      v122 = v160;
      v123 = v162;
      v118[7] = v161;
      v118[8] = v123;
      v118[5] = v121;
      v118[6] = v122;
      v26 = sub_A7FBC;
      if (v94)
        goto LABEL_70;
    }
  }
  v44 = *(_QWORD *)(v34 + 8 * v45);
  if (v44)
    goto LABEL_21;
  while (1)
  {
    v39 = v45 + 1;
    if (__OFADD__(v45, 1))
      break;
    if (v39 >= v40)
      goto LABEL_60;
    v44 = *(_QWORD *)(v34 + 8 * v39);
    ++v45;
    if (v44)
      goto LABEL_22;
  }
LABEL_116:
  __break(1u);
LABEL_117:
  __break(1u);
LABEL_118:
  __break(1u);
LABEL_119:
  __break(1u);
LABEL_120:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_A5984(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  int v46;
  char v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v74;
  unint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  char v79;
  char v80;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  void (*v92)(_QWORD *@<X8>);
  _QWORD *v93;
  _QWORD *result;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(_QWORD *@<X8>);
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _OWORD v126[10];
  uint64_t v127;
  void *v128;
  _OWORD v129[8];
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v98 = type metadata accessor for CollectionRecommendation(0);
  v3 = __chkstk_darwin(v98);
  v108 = (uint64_t *)((char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  v101 = (uint64_t)&v95 - v5;
  v6 = type metadata accessor for ScoredCollectionRecommendation(0);
  v99 = *(_QWORD *)(v6 - 8);
  v100 = v6;
  __chkstk_darwin(v6);
  v109 = (uint64_t)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[1];
  v123 = *a1;
  v9 = a1[2];
  v10 = *(_OWORD *)(v1 + 144);
  v130 = *(_OWORD *)(v1 + 128);
  v131 = v10;
  v132 = *(_QWORD *)(v1 + 160);
  v11 = *(_OWORD *)(v1 + 80);
  v129[4] = *(_OWORD *)(v1 + 64);
  v129[5] = v11;
  v12 = *(_OWORD *)(v1 + 112);
  v129[6] = *(_OWORD *)(v1 + 96);
  v129[7] = v12;
  v13 = *(_OWORD *)(v1 + 16);
  v129[0] = *(_OWORD *)v1;
  v129[1] = v13;
  v14 = *(_OWORD *)(v1 + 48);
  v129[2] = *(_OWORD *)(v1 + 32);
  v129[3] = v14;
  v128 = &_swiftEmptySetSingleton;
  v102 = v9;
  if (!v9)
    return _swiftEmptyArrayStorage;
  v97 = v130;
  if ((uint64_t)v130 < 1)
    return _swiftEmptyArrayStorage;
  v15 = (_QWORD *)sub_53738((uint64_t)_swiftEmptyArrayStorage);
  v16 = *(_OWORD *)(v1 + 144);
  v126[8] = *(_OWORD *)(v1 + 128);
  v126[9] = v16;
  v127 = *(_QWORD *)(v1 + 160);
  v17 = *(_OWORD *)(v1 + 80);
  v126[4] = *(_OWORD *)(v1 + 64);
  v126[5] = v17;
  v18 = *(_OWORD *)(v1 + 112);
  v126[6] = *(_OWORD *)(v1 + 96);
  v126[7] = v18;
  v19 = *(_OWORD *)(v1 + 16);
  v126[0] = *(_OWORD *)v1;
  v126[1] = v19;
  v20 = *(_OWORD *)(v1 + 48);
  v126[2] = *(_OWORD *)(v1 + 32);
  v126[3] = v20;
  v21 = sub_A85B8();
  sub_B05C4(v129);
  v22 = sub_ADC54((uint64_t)v21, (uint64_t)v129);
  sub_B0358(v129);
  swift_bridgeObjectRelease();
  v105 = *(_QWORD *)(v22 + 16);
  if (!v105)
  {
    swift_bridgeObjectRelease();
    v92 = 0;
    v93 = _swiftEmptyArrayStorage;
    goto LABEL_70;
  }
  v107 = 0;
  v23 = 0;
  v24 = v102;
  v125 = v102 + 56;
  v104 = v22 + 32;
  v113 = _swiftEmptyArrayStorage;
  v103 = v22;
  while (2)
  {
    if (v23 >= *(_QWORD *)(v22 + 16))
    {
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ClusteringOptions.MediaType);
      __break(1u);
      return result;
    }
    v25 = v104 + 112 * v23;
    v115 = *(_QWORD *)v25;
    v122 = *(unsigned __int8 *)(v25 + 8);
    v26 = *(_QWORD *)(v25 + 16);
    v112 = *(unsigned __int8 *)(v25 + 24);
    v27 = *(_QWORD *)(v25 + 32);
    v28 = *(unsigned __int8 *)(v25 + 40);
    v29 = *(_QWORD *)(v25 + 48);
    v110 = *(_QWORD *)(v25 + 56);
    v111 = v26;
    v30 = *(_QWORD *)(v25 + 64);
    v31 = *(_QWORD *)(v25 + 72);
    v32 = *(_QWORD *)(v25 + 80);
    v119 = *(_QWORD *)(v25 + 88);
    v120 = v32;
    v33 = *(_QWORD *)(v25 + 96);
    v117 = *(_QWORD *)(v25 + 104);
    v118 = v33;
    v114 = v23 + 1;
    v34 = 1 << *(_BYTE *)(v24 + 32);
    if (v34 < 64)
      v35 = ~(-1 << v34);
    else
      v35 = -1;
    v36 = v35 & *(_QWORD *)(v24 + 56);
    v124 = v27;
    sub_40554(v27, v28);
    v37 = (unint64_t)(v34 + 63) >> 6;
    v116 = v29;
    swift_bridgeObjectRetain(v29);
    v121 = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v120);
    swift_bridgeObjectRetain(v119);
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v24);
    v38 = 0;
    while (1)
    {
      while (v36)
      {
        v39 = __clz(__rbit64(v36));
        v36 &= v36 - 1;
        v40 = v39 | (v38 << 6);
        if ((v8 & 1) == 0)
        {
LABEL_29:
          v45 = *(_QWORD *)(v24 + 48);
          v46 = *(unsigned __int8 *)(v45 + v40);
          if (*(_BYTE *)(v45 + v40))
          {
            if (v46 != 1)
              goto LABEL_38;
            if ((v122 & 1) != 0)
            {
LABEL_37:
              swift_bridgeObjectRelease();
              goto LABEL_38;
            }
            v47 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
          }
          else
          {
            if ((v122 & 1) == 0)
              goto LABEL_37;
            v47 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
          }
          swift_bridgeObjectRelease();
          if ((v47 & 1) != 0)
          {
LABEL_38:
            if (v15[2] && (v48 = sub_39814(v46), (v49 & 1) != 0))
            {
              if (*(_QWORD *)(v15[7] + 8 * v48) < v123)
                goto LABEL_41;
            }
            else if (v123 > 0)
            {
LABEL_41:
              v106 = v28;
              if ((v112 & 1) != 0)
              {
                v50 = v108;
                v51 = v116;
                *v108 = v115;
                *((_BYTE *)v50 + 8) = v122;
                v50[2] = v111;
                *((_BYTE *)v50 + 24) = 1;
                v52 = v124;
                v50[4] = v124;
                *((_BYTE *)v50 + 40) = v28;
                v53 = v110;
                v50[6] = v51;
                v50[7] = v53;
                v50[8] = v121;
                v50[9] = v31;
                swift_storeEnumTagMultiPayload(v50, v98, 0);
                sub_40554(v52, v28);
                swift_bridgeObjectRetain(v51);
                swift_bridgeObjectRetain(v121);
              }
              else
              {
                v54 = v124;
                sub_40554(v124, v28);
                v55 = v116;
                swift_bridgeObjectRetain(v116);
                if (v121)
                {
                  swift_bridgeObjectRetain(v121);
                  sub_40554(v54, v28);
                  swift_bridgeObjectRetain(v55);
                  swift_bridgeObjectRetain(v121);
                  v56 = v121;
                  v96 = v121;
                }
                else
                {
                  swift_bridgeObjectRetain(0);
                  sub_40554(v54, v28);
                  swift_bridgeObjectRetain(v55);
                  swift_bridgeObjectRetain(v121);
                  v57 = sub_53104((uint64_t)_swiftEmptyArrayStorage);
                  v56 = v121;
                  v96 = v57;
                }
                v58 = v54;
                v59 = v56;
                swift_bridgeObjectRetain(v56);
                sub_40568(v58, v28);
                swift_bridgeObjectRelease();
                v60 = v116;
                swift_bridgeObjectRelease();
                v61 = v108;
                v62 = v111;
                *v108 = v111;
                v63 = v122;
                *((_BYTE *)v61 + 8) = v122;
                v61[2] = v115;
                v61[3] = v63;
                v61[4] = v62;
                v61[5] = 0;
                v61[6] = v124;
                v61[7] = v28;
                v64 = v110;
                v61[8] = v60;
                v61[9] = v64;
                v61[10] = v59;
                v61[11] = v31;
                v61[12] = v96;
                v61[13] = v31;
                swift_storeEnumTagMultiPayload(v61, v98, 9);
              }
              v65 = v101;
              sub_A2618((uint64_t)v108, v101, type metadata accessor for CollectionRecommendation);
              v66 = v65;
              v67 = v109;
              sub_A2618(v66, v109, type metadata accessor for CollectionRecommendation);
              v68 = v100;
              *(_BYTE *)(v67 + *(int *)(v100 + 20)) = v46;
              *(_QWORD *)(v67 + *(int *)(v68 + 24)) = 0;
              v69 = (unint64_t)v113;
              if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0)
                v69 = sub_30C48(0, *(_QWORD *)(v69 + 16) + 1, 1, v69);
              v71 = *(_QWORD *)(v69 + 16);
              v70 = *(_QWORD *)(v69 + 24);
              if (v71 >= v70 >> 1)
                v69 = sub_30C48(v70 > 1, v71 + 1, 1, v69);
              *(_QWORD *)(v69 + 16) = v71 + 1;
              v72 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
              v113 = (_QWORD *)v69;
              sub_A2618(v109, v69 + v72 + *(_QWORD *)(v99 + 72) * v71, type metadata accessor for ScoredCollectionRecommendation);
              sub_1628D4((uint64_t *)v126, v115);
              sub_3EB0C((uint64_t)v107, 0);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
              *(_QWORD *)&v126[0] = v15;
              v75 = sub_39814(v46);
              v76 = v15[2];
              v77 = (v74 & 1) == 0;
              v78 = v76 + v77;
              if (__OFADD__(v76, v77))
                goto LABEL_75;
              v79 = v74;
              if (v15[3] >= v78)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  v91 = v74;
                  sub_16CF8C();
                  v79 = v91;
                }
              }
              else
              {
                v80 = v74;
                sub_15DF2C(v78, isUniquelyReferenced_nonNull_native);
                v81 = sub_39814(v46);
                v79 = v80;
                if ((v80 & 1) != (v82 & 1))
                  goto LABEL_78;
                v75 = v81;
              }
              v28 = v106;
              v15 = *(_QWORD **)&v126[0];
              swift_bridgeObjectRelease();
              if ((v79 & 1) != 0)
              {
                swift_bridgeObjectRetain(v15);
              }
              else
              {
                v15[(v75 >> 6) + 8] |= 1 << v75;
                *(_BYTE *)(v15[6] + v75) = v46;
                *(_QWORD *)(v15[7] + 8 * v75) = 0;
                v83 = v15[2];
                v84 = v83 + 1;
                v85 = __OFADD__(v83, 1);
                swift_bridgeObjectRetain(v15);
                if (v85)
                  goto LABEL_77;
                v15[2] = v84;
              }
              v86 = v15[7];
              swift_bridgeObjectRelease();
              v87 = *(_QWORD *)(v86 + 8 * v75);
              v88 = __OFADD__(v87, 1);
              v89 = v87 + 1;
              if (v88)
                goto LABEL_76;
              *(_QWORD *)(v86 + 8 * v75) = v89;
              v90 = v113[2];
              v107 = sub_A8BE0;
              v24 = v102;
              if (v90 == v97)
              {
                sub_40568(v124, v28);
                swift_bridgeObjectRelease();
                swift_release(v24);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                return v113;
              }
            }
          }
        }
      }
      v41 = v38 + 1;
      if (__OFADD__(v38, 1))
      {
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      v42 = v124;
      if (v41 >= v37)
        goto LABEL_5;
      v43 = *(_QWORD *)(v125 + 8 * v41);
      ++v38;
      if (!v43)
      {
        v38 = v41 + 1;
        if (v41 + 1 >= v37)
          goto LABEL_5;
        v43 = *(_QWORD *)(v125 + 8 * v38);
        if (!v43)
        {
          v38 = v41 + 2;
          if (v41 + 2 >= v37)
            goto LABEL_5;
          v43 = *(_QWORD *)(v125 + 8 * v38);
          if (!v43)
            break;
        }
      }
LABEL_28:
      v36 = (v43 - 1) & v43;
      v40 = __clz(__rbit64(v43)) + (v38 << 6);
      if ((v8 & 1) == 0)
        goto LABEL_29;
    }
    v44 = v41 + 3;
    if (v44 < v37)
    {
      v43 = *(_QWORD *)(v125 + 8 * v44);
      if (!v43)
      {
        while (1)
        {
          v38 = v44 + 1;
          if (__OFADD__(v44, 1))
            goto LABEL_73;
          if (v38 >= v37)
            goto LABEL_5;
          v43 = *(_QWORD *)(v125 + 8 * v38);
          ++v44;
          if (v43)
            goto LABEL_28;
        }
      }
      v38 = v44;
      goto LABEL_28;
    }
LABEL_5:
    swift_release(v24);
    sub_40568(v42, v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v23 = v114;
    v22 = v103;
    if (v114 != v105)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v93 = v113;
  v92 = v107;
LABEL_70:
  swift_bridgeObjectRelease();
  sub_3EB0C((uint64_t)v92, 0);
  return v93;
}

uint64_t sub_A6310(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;

  v2 = type metadata accessor for ScoredCollectionRecommendation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = 0x202020200A5BLL;
  v27 = 0xE600000000000000;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v25 = _swiftEmptyArrayStorage;
    sub_340F4(0, v6, 0);
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v24 = *(_QWORD *)(v3 + 72);
    v7 = v25;
    do
    {
      sub_26A5C(v8, (uint64_t)v5, type metadata accessor for ScoredCollectionRecommendation);
      sub_AAB38();
      v10 = v9;
      v12 = v11;
      sub_26AA0((uint64_t)v5, type metadata accessor for ScoredCollectionRecommendation);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_340F4(0, v7[2] + 1, 1);
        v7 = v25;
      }
      v14 = v7[2];
      v13 = v7[3];
      if (v14 >= v13 >> 1)
      {
        sub_340F4(v13 > 1, v14 + 1, 1);
        v7 = v25;
      }
      v7[2] = v14 + 1;
      v15 = &v7[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v8 += v24;
      --v6;
    }
    while (v6);
  }
  v25 = v7;
  v16 = sub_5EDC(&qword_1F03E0);
  v17 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
  v18 = BidirectionalCollection<>.joined(separator:)(0x202020200A2CLL, 0xE600000000000000, v16, v17);
  v20 = v19;
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 93;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  return v26;
}

uint64_t sub_A6518(uint64_t a1)
{
  _QWORD **v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  LOBYTE(v7) = *(_BYTE *)(a1 + 40) & 1;
  v43 = v5;
  v44 = v2;
  v42 = v6;
  v8 = *v1;
  sub_B08D0(&v44);
  sub_B08D0(&v43);
  sub_B08D0(&v42);
  result = swift_isUniquelyReferenced_nonNull_native(v8);
  if ((result & 1) == 0)
  {
LABEL_21:
    result = (uint64_t)sub_30C5C(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)sub_30C5C((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
  }
  v8[2] = v11 + 1;
  v39 = v8 + 4;
  v12 = (uint64_t)&v8[6 * v11 + 4];
  *(_QWORD *)v12 = v2;
  *(_QWORD *)(v12 + 8) = v3;
  *(_QWORD *)(v12 + 16) = v4;
  *(_QWORD *)(v12 + 24) = v5;
  *(_QWORD *)(v12 + 32) = v6;
  *(_BYTE *)(v12 + 40) = v7;
  *v33 = v8;
  if (v11 >= 2)
  {
    v37 = v8;
    while (1)
    {
      v13 = v8[2];
      if (v11 >> 1 >= v13)
      {
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      v14 = &v39[6 * (v11 >> 1)];
      if (!*v14)
        break;
      if (v11 >= v13)
        goto LABEL_18;
      v40 = v11 >> 1;
      v41 = v11;
      v4 = &v39[6 * v11];
      v6 = *v4;
      if (!*v4)
        goto LABEL_23;
      v3 = v14[3];
      v5 = v4[3];
      v7 = v4[4];
      v16 = v4[1];
      v15 = v4[2];
      v17 = v14[1];
      sub_ABD64(*v14, v17, v14[2], v3, v14[4]);
      sub_ABD64(v6, v16, v15, v5, v7);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v8 = v37;
      v18 = v41;
      if (*(double *)&v16 >= *(double *)&v17)
        return result;
      v2 = v40;
      if (v41 != v40)
      {
        if (v41 >= v37[2])
          goto LABEL_19;
        v7 = v4[3];
        v5 = v4[4];
        v19 = *v14;
        v20 = v14[1];
        v21 = v14[2];
        v3 = v14[3];
        v22 = v14[4];
        v6 = *((unsigned __int8 *)v14 + 40);
        v35 = v4[1];
        v36 = *v4;
        v34 = v4[2];
        v38 = *((_BYTE *)v4 + 40);
        sub_ABD64(*v4, v35, v34, v7, v5);
        sub_ABD64(v19, v20, v21, v3, v22);
        v23 = *v4;
        v24 = v4[1];
        v25 = v4[2];
        v26 = v4[3];
        v27 = v4[4];
        *v4 = v19;
        v4[1] = v20;
        v2 = v40;
        v8 = v37;
        v4[2] = v21;
        v4[3] = v3;
        v4[4] = v22;
        *((_BYTE *)v4 + 40) = v6;
        sub_B0458(v23, v24, v25, v26, v27);
        if (v40 >= v37[2])
          goto LABEL_20;
        v28 = *v14;
        v29 = v14[1];
        v30 = v14[2];
        v31 = v14[3];
        v32 = v14[4];
        *v14 = v36;
        v14[1] = v35;
        v14[2] = v34;
        v14[3] = v7;
        v14[4] = v5;
        *((_BYTE *)v14 + 40) = v38;
        result = sub_B0458(v28, v29, v30, v31, v32);
        *v33 = v37;
        v18 = v41;
      }
      v11 = v2;
      if (v18 <= 3)
        return result;
    }
    __break(1u);
LABEL_23:
    __break(1u);
  }
  return result;
}

uint64_t sub_A6810(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  unint64_t v23;
  uint64_t v24;
  unint64_t i;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  int64_t v35;
  unint64_t *v36;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = sub_5EDC(&qword_1F1260);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v39 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v40 = (uint64_t)&v38 - v8;
  v9 = __chkstk_darwin(v7);
  v41 = (uint64_t)&v38 - v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v38 - v12;
  __chkstk_darwin(v11);
  v15 = (uint64_t)&v38 - v14;
  v16 = a1;
  v17 = v1;
  sub_26A5C(v16, (uint64_t)&v38 - v14, type metadata accessor for ScoredCollectionRecommendation);
  v38 = type metadata accessor for ScoredCollectionRecommendation(0);
  v42 = *(_QWORD *)(v38 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v38);
  v18 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
LABEL_29:
    v18 = sub_30DAC(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    v18 = sub_30DAC(v19 > 1, v20 + 1, 1, v18);
  *(_QWORD *)(v18 + 16) = v20 + 1;
  v21 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v43 = *(_QWORD *)(v4 + 72);
  result = sub_41300(v15, v18 + v21 + v43 * v20, &qword_1F1260);
  *v17 = v18;
  v23 = *(_QWORD *)(v18 + 16);
  v24 = v38;
  if (v23 >= 3)
  {
    for (i = v23 - 1; ; i >>= 1)
    {
      v27 = i >> 1;
      v4 = *v17;
      if (i >> 1 >= *(_QWORD *)(*v17 + 16))
      {
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      v28 = v21;
      v29 = v4 + v21;
      v15 = v27 * v43;
      sub_B06B8(v29 + v27 * v43, (uint64_t)v13);
      v18 = *(_QWORD *)(v42 + 48);
      result = ((uint64_t (*)(char *, uint64_t, uint64_t))v18)(v13, 1, v24);
      if ((_DWORD)result == 1)
        break;
      if ((int64_t)i >= *(_QWORD *)(v4 + 16))
        goto LABEL_24;
      v4 = i * v43;
      v30 = v29 + i * v43;
      v31 = v41;
      sub_B06B8(v30, v41);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v31, 1, v24);
      if ((_DWORD)result == 1)
        goto LABEL_31;
      v32 = *(int *)(v24 + 24);
      v33 = *(double *)&v13[v32];
      v34 = *(double *)(v31 + v32);
      sub_26AA0(v31, type metadata accessor for ScoredCollectionRecommendation);
      result = sub_26AA0((uint64_t)v13, type metadata accessor for ScoredCollectionRecommendation);
      if (v34 >= v33)
        return result;
      v21 = v28;
      if (i != v27)
      {
        v18 = *v17;
        v35 = *(_QWORD *)(*v17 + 16);
        if ((uint64_t)i >= v35)
          goto LABEL_25;
        v36 = v17;
        v17 = (unint64_t *)(v18 + v28);
        sub_B06B8(v18 + v28 + v4, v40);
        if (v27 >= v35)
          goto LABEL_26;
        sub_B06B8((uint64_t)v17 + v15, v39);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
        v17 = v36;
        *v36 = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v18 = sub_6A554(v18);
          *v36 = v18;
        }
        v24 = v38;
        v21 = v28;
        if ((int64_t)i >= *(_QWORD *)(v18 + 16))
          goto LABEL_27;
        sub_B0888(v39, v18 + v28 + v4);
        if (v27 >= *(_QWORD *)(*v17 + 16))
          goto LABEL_28;
        result = sub_B0888(v40, *v17 + v28 + v15);
      }
      if (i <= 3)
        return result;
    }
    __break(1u);
LABEL_31:
    __break(1u);
  }
  return result;
}

_QWORD *sub_A6BA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for ScoredCollectionRecommendation(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v24 = (uint64_t)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)v22 - v6;
  v8 = sub_5EDC(&qword_1F1260);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v14 = (char *)v22 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
    return _swiftEmptyArrayStorage;
  v16 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v17 = *(_QWORD *)(v12 + 72);
  v22[1] = a1;
  swift_bridgeObjectRetain(a1);
  v18 = _swiftEmptyArrayStorage;
  v23 = v2;
  do
  {
    sub_B06B8(v16, (uint64_t)v14);
    sub_41300((uint64_t)v14, (uint64_t)v11, &qword_1F1260);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
    {
      sub_417D8((uint64_t)v11, &qword_1F1260);
    }
    else
    {
      sub_A2618((uint64_t)v11, (uint64_t)v7, type metadata accessor for ScoredCollectionRecommendation);
      sub_A2618((uint64_t)v7, v24, type metadata accessor for ScoredCollectionRecommendation);
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
        v18 = (_QWORD *)sub_30C48(0, v18[2] + 1, 1, (unint64_t)v18);
      v20 = v18[2];
      v19 = v18[3];
      if (v20 >= v19 >> 1)
        v18 = (_QWORD *)sub_30C48(v19 > 1, v20 + 1, 1, (unint64_t)v18);
      v18[2] = v20 + 1;
      sub_A2618(v24, (uint64_t)v18+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v20, type metadata accessor for ScoredCollectionRecommendation);
      v2 = v23;
    }
    v16 += v17;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v18;
}

_QWORD *sub_A6DFC(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  __int128 v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n(a1, 2);
  v13 = a1;
  v3 = (_BYTE *)(a1 + 72);
  v4 = _swiftEmptyArrayStorage;
  do
  {
    v6 = *((_QWORD *)v3 - 5);
    if (v6)
    {
      v14 = *((_OWORD *)v3 - 2);
      v7 = *v3;
      v9 = *((_QWORD *)v3 - 2);
      v8 = *((_QWORD *)v3 - 1);
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v8);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_30C70(0, v4[2] + 1, 1, v4);
      v11 = v4[2];
      v10 = v4[3];
      if (v11 >= v10 >> 1)
        v4 = sub_30C70((_QWORD *)(v10 > 1), v11 + 1, 1, v4);
      v4[2] = v11 + 1;
      v5 = &v4[6 * v11];
      v5[4] = v6;
      *(_OWORD *)(v5 + 5) = v14;
      v5[7] = v9;
      v5[8] = v8;
      *((_BYTE *)v5 + 72) = v7 & 1;
    }
    v3 += 48;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease_n(v13, 2);
  return v4;
}

uint64_t sub_A6F40(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unint64_t (*v19)@<X0>(unint64_t *@<X8>);
  void (*v20)(_QWORD *@<X8>);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  int EnumCaseMultiPayload;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t i;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  unsigned __int8 v79;
  _QWORD *v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  unint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  unint64_t v99;
  uint64_t v100;
  _BOOL8 v101;
  uint64_t v102;
  char v103;
  unint64_t v104;
  char v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(_QWORD *@<X8>);
  unint64_t (*v116)@<X0>(unint64_t *@<X8>);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t result;
  _QWORD v140[2];
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  __int128 v149;
  char *v150;
  uint64_t v151;
  void (*v152)(_QWORD *@<X8>);
  unint64_t (*v153)@<X0>(unint64_t *@<X8>);
  char *v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE v157[552];
  _BYTE v158[545];
  unint64_t v159;
  char *v160;
  void *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  uint64_t v174;
  _QWORD v175[70];

  v155 = type metadata accessor for CollectionRecommendation(0);
  v5 = __chkstk_darwin(v155);
  v7 = (char *)v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v150 = (char *)v140 - v9;
  __chkstk_darwin(v8);
  v146 = (uint64_t)v140 - v10;
  v147 = type metadata accessor for ScoredCollectionRecommendation(0);
  v11 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v13 = (char *)v140 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v2[9];
  v172 = v2[8];
  v173 = v14;
  v174 = *((_QWORD *)v2 + 20);
  v15 = v2[5];
  v168 = v2[4];
  v169 = v15;
  v16 = v2[6];
  v171 = v2[7];
  v170 = v16;
  v17 = v2[1];
  v164 = *v2;
  v165 = v17;
  v18 = v2[2];
  v167 = v2[3];
  v166 = v18;
  v163 = a2;
  v162 = (char *)&_swiftEmptySetSingleton;
  v161 = &_swiftEmptySetSingleton;
  v160 = (char *)&_swiftEmptySetSingleton;
  swift_bridgeObjectRetain(a2);
  v159 = sub_53830((uint64_t)_swiftEmptyArrayStorage);
  v145 = *(_QWORD *)(a1 + 16);
  v141 = v11;
  if (v145)
  {
    v143 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v142 = *(_QWORD *)(v11 + 72);
    v140[1] = a1;
    swift_bridgeObjectRetain(a1);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v149 = xmmword_1875E0;
    v154 = v13;
    v144 = v7;
    while (1)
    {
      v152 = v20;
      v153 = v19;
      v151 = v21;
      sub_26A5C(v143 + v142 * v21, (uint64_t)v13, type metadata accessor for ScoredCollectionRecommendation);
      v23 = CollectionRecommendation.booksIDs.getter();
      v24 = v23[2];
      if (v24)
      {
        v156 = v22;
        v25 = 0;
        v26 = a2 + 56;
        while (1)
        {
          v27 = v23[v25++ + 4];
          v28 = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), v27);
          v29 = -1 << *(_BYTE *)(a2 + 32);
          v30 = v28 & ~v29;
          if (((*(_QWORD *)(v26 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
            goto LABEL_12;
          v31 = *(_QWORD *)(a2 + 48);
          if (*(_QWORD *)(v31 + 8 * v30) == v27)
          {
LABEL_5:
            if (v25 == v24)
              goto LABEL_14;
          }
          else
          {
            v32 = ~v29;
            while (1)
            {
              v30 = (v30 + 1) & v32;
              if (((*(_QWORD *)(v26 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8)) >> v30) & 1) == 0)
                break;
              if (*(_QWORD *)(v31 + 8 * v30) == v27)
                goto LABEL_5;
            }
LABEL_12:
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
            *(_QWORD *)v158 = v163;
            sub_1668AC(v27, v30, isUniquelyReferenced_nonNull_native);
            a2 = *(_QWORD *)v158;
            v163 = *(_QWORD *)v158;
            swift_bridgeObjectRelease();
            if (v25 == v24)
            {
LABEL_14:
              swift_bridgeObjectRelease();
              v22 = v156;
              v13 = v154;
              goto LABEL_16;
            }
            v26 = a2 + 56;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_16:
      v34 = v146;
      sub_26A5C((uint64_t)v13, v146, type metadata accessor for CollectionRecommendation);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v34, v155);
      v36 = (uint64_t)v150;
      if (EnumCaseMultiPayload != 5)
        break;
      v37 = *(_QWORD *)(v34 + *(int *)(sub_5EDC(&qword_1F3418) + 48));
      v38 = sub_5EDC(&qword_1F1090);
      v39 = swift_allocObject(v38, 40, 7);
      *(_OWORD *)(v39 + 16) = v149;
      *(_QWORD *)(v39 + 32) = v37;
      v40 = (_QWORD *)v39;
      v41 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v34, v41);
      v42 = v40[2];
      if (v42)
        goto LABEL_18;
LABEL_30:
      swift_bridgeObjectRelease();
LABEL_31:
      sub_26A5C((uint64_t)v13, v36, type metadata accessor for CollectionRecommendation);
      if (swift_getEnumCaseMultiPayload(v36, v155) == 2)
      {
        v54 = sub_5EDC(&qword_1F0D98);
        memcpy(v158, (const void *)(v36 + *(int *)(v54 + 48)), sizeof(v158));
        swift_bridgeObjectRelease();
        v55 = sub_5EDC(&qword_1F1100);
        v56 = (_QWORD *)swift_allocObject(v55, 584, 7);
        *((_OWORD *)v56 + 1) = v149;
        memcpy(v56 + 4, v158, 0x221uLL);
        v57 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 8))(v36, v57);
        v58 = v56[2];
        if (v58)
          goto LABEL_33;
      }
      else
      {
        sub_26AA0(v36, type metadata accessor for CollectionRecommendation);
        v56 = _swiftEmptyArrayStorage;
        v58 = _swiftEmptyArrayStorage[2];
        if (v58)
        {
LABEL_33:
          v59 = v58 - 1;
          for (i = 4; ; i += 69)
          {
            memcpy(v175, &v56[i], 0x221uLL);
            sub_6100(v175);
            sub_1629CC(v157, v175);
            memcpy(v158, v157, sizeof(v158));
            sub_6228(v158);
            if (!v59)
              break;
            --v59;
          }
        }
      }
      swift_bridgeObjectRelease();
      v61 = (uint64_t)v144;
      sub_26A5C((uint64_t)v13, (uint64_t)v144, type metadata accessor for CollectionRecommendation);
      if (swift_getEnumCaseMultiPayload(v61, v155) == 3)
      {
        v62 = *(_QWORD *)(v61 + *(int *)(sub_5EDC(&qword_1F3418) + 48));
        v63 = sub_5EDC(&qword_1F1090);
        v64 = (_QWORD *)swift_allocObject(v63, 40, 7);
        *((_OWORD *)v64 + 1) = v149;
        v64[4] = v62;
        v65 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 8))(v61, v65);
      }
      else
      {
        sub_26AA0(v61, type metadata accessor for CollectionRecommendation);
        v64 = _swiftEmptyArrayStorage;
      }
      v156 = v22;
      v66 = v64[2];
      if (v66)
      {
        v67 = 0;
        v148 = v64;
        v68 = v64 + 4;
        v69 = v160;
        v70 = v160 + 56;
        while (1)
        {
          v71 = v68[v67++];
          v72 = static Hasher._hash(seed:_:)(*((_QWORD *)v69 + 5), v71);
          v73 = -1 << v69[32];
          v74 = v72 & ~v73;
          if (((*(_QWORD *)&v70[(v74 >> 3) & 0xFFFFFFFFFFFFF8] >> v74) & 1) == 0)
            goto LABEL_50;
          v75 = *((_QWORD *)v69 + 6);
          if (*(_QWORD *)(v75 + 8 * v74) == v71)
          {
LABEL_43:
            if (v67 == v66)
              goto LABEL_52;
          }
          else
          {
            v76 = ~v73;
            while (1)
            {
              v74 = (v74 + 1) & v76;
              if (((*(_QWORD *)&v70[(v74 >> 3) & 0xFFFFFFFFFFFFF8] >> v74) & 1) == 0)
                break;
              if (*(_QWORD *)(v75 + 8 * v74) == v71)
                goto LABEL_43;
            }
LABEL_50:
            v77 = swift_isUniquelyReferenced_nonNull_native(v69);
            *(_QWORD *)v158 = v160;
            sub_1668AC(v71, v74, v77);
            v69 = *(char **)v158;
            v160 = *(char **)v158;
            swift_bridgeObjectRelease();
            if (v67 == v66)
            {
LABEL_52:
              swift_bridgeObjectRelease();
              v13 = v154;
              goto LABEL_54;
            }
            v70 = v69 + 56;
          }
        }
      }
      swift_bridgeObjectRelease();
LABEL_54:
      CollectionRecommendation.collectionRecommendationType.getter();
      sub_3EB0C((uint64_t)v153, 0);
      v78 = v158[0];
      v79 = v13[*(int *)(v147 + 20)];
      v80 = (_QWORD *)v159;
      v81 = swift_isUniquelyReferenced_nonNull_native(v159);
      *(_QWORD *)v158 = v80;
      v83 = sub_3951C(v78);
      v84 = v80[2];
      v85 = (v82 & 1) == 0;
      v86 = v84 + v85;
      if (__OFADD__(v84, v85))
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for CollectionRecommendationType);
        __break(1u);
LABEL_87:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ClusteringOptions.MediaType);
        __break(1u);
        return result;
      }
      v87 = v82;
      if (v80[3] >= v86)
      {
        if ((v81 & 1) == 0)
        {
          sub_16D118();
          v80 = *(_QWORD **)v158;
        }
      }
      else
      {
        sub_15E25C(v86, v81);
        v80 = *(_QWORD **)v158;
        v88 = sub_3951C(v78);
        if ((v87 & 1) != (v89 & 1))
          goto LABEL_86;
        v83 = v88;
      }
      v159 = (unint64_t)v80;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain(v80);
      if ((v87 & 1) == 0)
      {
        v90 = sub_53738((uint64_t)_swiftEmptyArrayStorage);
        v80[(v83 >> 6) + 8] |= 1 << v83;
        *(_BYTE *)(v80[6] + v83) = v78;
        *(_QWORD *)(v80[7] + 8 * v83) = v90;
        v91 = v80[2];
        v92 = __OFADD__(v91, 1);
        v93 = v91 + 1;
        if (v92)
          goto LABEL_84;
        v80[2] = v93;
      }
      v94 = v80[7];
      swift_bridgeObjectRelease();
      v95 = 8 * v83;
      sub_3EB0C((uint64_t)v152, 0);
      v96 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v94 + 8 * v83));
      *(_QWORD *)v158 = *(_QWORD *)(v94 + v95);
      v97 = *(_QWORD *)v158;
      *(_QWORD *)(v94 + v95) = 0x8000000000000000;
      v99 = sub_39814(v79);
      v100 = *(_QWORD *)(v97 + 16);
      v101 = (v98 & 1) == 0;
      v102 = v100 + v101;
      if (__OFADD__(v100, v101))
        goto LABEL_82;
      v103 = v98;
      if (*(_QWORD *)(v97 + 24) >= v102)
      {
        if ((v96 & 1) == 0)
        {
          sub_16CF8C();
          v97 = *(_QWORD *)v158;
        }
      }
      else
      {
        sub_15DF2C(v102, v96);
        v97 = *(_QWORD *)v158;
        v104 = sub_39814(v79);
        if ((v103 & 1) != (v105 & 1))
          goto LABEL_87;
        v99 = v104;
      }
      *(_QWORD *)(v94 + v95) = v97;
      swift_bridgeObjectRelease();
      v106 = *(_QWORD **)(v94 + v95);
      if ((v103 & 1) != 0)
      {
        swift_bridgeObjectRetain(v106);
        v22 = v156;
        v13 = v154;
        v108 = v151;
      }
      else
      {
        v106[(v99 >> 6) + 8] |= 1 << v99;
        *(_BYTE *)(v106[6] + v99) = v79;
        *(_QWORD *)(v106[7] + 8 * v99) = 0;
        v109 = v106[2];
        v110 = v109 + 1;
        v111 = __OFADD__(v109, 1);
        swift_bridgeObjectRetain(v106);
        v22 = v156;
        v13 = v154;
        v108 = v151;
        if (v111)
          goto LABEL_85;
        *(_QWORD *)(v107 + 16) = v110;
      }
      v112 = *(_QWORD *)(v107 + 56);
      swift_bridgeObjectRelease();
      v113 = *(_QWORD *)(v112 + 8 * v99);
      v92 = __OFADD__(v113, 1);
      v114 = v113 + 1;
      if (v92)
        goto LABEL_83;
      v21 = v108 + 1;
      *(_QWORD *)(v112 + 8 * v99) = v114;
      sub_26AA0((uint64_t)v13, type metadata accessor for ScoredCollectionRecommendation);
      v19 = sub_A8BE8;
      v20 = sub_A8BE0;
      if (v21 == v145)
      {
        swift_bridgeObjectRelease();
        v115 = sub_A8BE0;
        v116 = sub_A8BE8;
        goto LABEL_80;
      }
    }
    sub_26AA0(v34, type metadata accessor for CollectionRecommendation);
    v40 = _swiftEmptyArrayStorage;
    v42 = _swiftEmptyArrayStorage[2];
    if (!v42)
      goto LABEL_30;
LABEL_18:
    v156 = v22;
    v43 = 0;
    v148 = v40;
    v44 = v40 + 4;
    v45 = v162;
    v46 = v162 + 56;
    while (1)
    {
      v47 = v44[v43++];
      v48 = static Hasher._hash(seed:_:)(*((_QWORD *)v45 + 5), v47);
      v49 = -1 << v45[32];
      v50 = v48 & ~v49;
      if (((*(_QWORD *)&v46[(v50 >> 3) & 0xFFFFFFFFFFFFF8] >> v50) & 1) == 0)
        goto LABEL_26;
      v51 = *((_QWORD *)v45 + 6);
      if (*(_QWORD *)(v51 + 8 * v50) == v47)
      {
LABEL_19:
        if (v43 == v42)
          goto LABEL_28;
      }
      else
      {
        v52 = ~v49;
        while (1)
        {
          v50 = (v50 + 1) & v52;
          if (((*(_QWORD *)&v46[(v50 >> 3) & 0xFFFFFFFFFFFFF8] >> v50) & 1) == 0)
            break;
          if (*(_QWORD *)(v51 + 8 * v50) == v47)
            goto LABEL_19;
        }
LABEL_26:
        v53 = swift_isUniquelyReferenced_nonNull_native(v45);
        *(_QWORD *)v158 = v162;
        sub_1668AC(v47, v50, v53);
        v45 = *(char **)v158;
        v162 = *(char **)v158;
        swift_bridgeObjectRelease();
        if (v43 == v42)
        {
LABEL_28:
          swift_bridgeObjectRelease();
          v22 = v156;
          v36 = (uint64_t)v150;
          v13 = v154;
          goto LABEL_31;
        }
        v46 = v45 + 56;
      }
    }
  }
  v116 = 0;
  v115 = 0;
LABEL_80:
  v117 = swift_allocObject(&unk_1E26C0, 24, 7);
  v118 = sub_5EDC(&qword_1F1258);
  v119 = *(_QWORD *)(sub_5EDC(&qword_1F1260) - 8);
  v120 = *(_QWORD *)(v119 + 72);
  v121 = *(unsigned __int8 *)(v119 + 80);
  v122 = (v121 + 32) & ~v121;
  v123 = swift_allocObject(v118, v122 + v120, v121 | 7);
  *(_OWORD *)(v123 + 16) = xmmword_1875E0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v141 + 56))(v123 + v122, 1, 1, v147);
  *(_QWORD *)(v117 + 16) = v123;
  v124 = swift_allocObject(&unk_1E26E8, 192, 7);
  v125 = v170;
  *(_OWORD *)(v124 + 136) = v171;
  v126 = v173;
  *(_OWORD *)(v124 + 152) = v172;
  *(_OWORD *)(v124 + 168) = v126;
  v127 = v166;
  *(_OWORD *)(v124 + 72) = v167;
  v128 = v169;
  *(_OWORD *)(v124 + 88) = v168;
  *(_OWORD *)(v124 + 104) = v128;
  *(_OWORD *)(v124 + 120) = v125;
  v129 = v164;
  *(_OWORD *)(v124 + 24) = v164;
  v130 = v165;
  *(_OWORD *)(v124 + 40) = v165;
  *(_OWORD *)(v124 + 56) = v127;
  *(_QWORD *)(v124 + 16) = v117;
  *(_QWORD *)(v124 + 184) = v174;
  *(_OWORD *)v158 = v129;
  *(_OWORD *)&v158[16] = v130;
  v131 = v130;
  v132 = __chkstk_darwin(v124);
  v140[-8] = &v159;
  v140[-7] = &v164;
  v140[-6] = &v163;
  v140[-5] = &v161;
  v140[-4] = &v162;
  v140[-3] = &v160;
  v140[-2] = sub_B0588;
  v140[-1] = v132;
  swift_retain(v117);
  sub_B05C4(&v164);
  sub_B0668((uint64_t)v158);
  sub_F19F4(v131, (void (*)(_BYTE *, uint64_t *))sub_B0594);
  sub_B0690((uint64_t)v158);
  swift_beginAccess(v117 + 16, v157, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(v117 + 16));
  v134 = sub_A6BA0(v133);
  v136 = v135;
  swift_bridgeObjectRelease();
  sub_AD48C((uint64_t)v134, v136);
  v138 = v137;
  swift_release(v117);
  swift_release(v124);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_3EB0C((uint64_t)v116, 0);
  sub_3EB0C((uint64_t)v115, 0);
  return v138;
}

uint64_t sub_A7BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  uint64_t result;
  uint64_t v18;

  v5 = sub_5EDC(&qword_1F1260);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ScoredCollectionRecommendation(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v13 <= a2)
    return sub_A6810(a1);
  if (!v13)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v13 == 1)
  {
LABEL_11:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7974706D65, 0xE500000000000000, "BooksPersonalization/PriorityQueue.swift", 40, 2, 29, 0);
    __break(1u);
    return result;
  }
  sub_B06B8(*(_QWORD *)v2+ *(_QWORD *)(v6 + 72)+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_A2618((uint64_t)v8, (uint64_t)v12, type metadata accessor for ScoredCollectionRecommendation);
  v14 = *(int *)(v9 + 24);
  v15 = *(double *)(a1 + v14);
  v16 = *(double *)&v12[v14];
  result = sub_26AA0((uint64_t)v12, type metadata accessor for ScoredCollectionRecommendation);
  if (v16 < v15)
  {
    sub_AB81C();
    return sub_A6810(a1);
  }
  return result;
}

uint64_t sub_A7DA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[24];

  swift_beginAccess(a1 + 16, v9, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  v5 = sub_A6DFC(v4);
  v7 = v6;
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  a2[1] = v7;
  return result;
}

uint64_t sub_A7E10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;

  v3 = *(_QWORD *)(result + 16);
  if (v3)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    v18 = *(_OWORD *)(result + 40);
    v6 = *(_QWORD *)(result + 56);
    v7 = *(_QWORD *)(result + 64);
    v8 = *(_BYTE *)(result + 72);
    v9 = v3 - 1;
    if (v3 == 1)
    {
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v6);
      result = swift_bridgeObjectRetain(v7);
    }
    else
    {
      v17 = a2;
      swift_bridgeObjectRetain(result);
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      v11 = (_BYTE *)(v4 + 120);
      v12 = v18;
      do
      {
        *(_QWORD *)&v13 = *((_QWORD *)v11 - 4);
        if (*(double *)&v12 < *(double *)&v13)
        {
          v8 = *v11;
          v15 = *((_QWORD *)v11 - 2);
          v14 = *((_QWORD *)v11 - 1);
          v16 = *((_QWORD *)v11 - 5);
          *((_QWORD *)&v13 + 1) = *((_QWORD *)v11 - 3);
          v19 = v13;
          swift_bridgeObjectRetain(v16);
          swift_bridgeObjectRetain(v15);
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRelease(v7);
          swift_bridgeObjectRelease(v6);
          swift_bridgeObjectRelease(v5);
          v7 = v14;
          v6 = v15;
          v5 = v16;
          v12 = v19;
        }
        v11 += 48;
        --v9;
      }
      while (v9);
      v18 = v12;
      result = swift_bridgeObjectRelease(v4);
      a2 = v17;
    }
    LOBYTE(v3) = v8 & 1;
    v10 = v18;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v10 = 0uLL;
  }
  *(_QWORD *)a2 = v5;
  *(_OWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 40) = v3;
  return result;
}

uint64_t sub_A7F78(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v5 < v2)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

void sub_A7FBC(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_A7FCC(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return 1;
  v4 = 0;
  if (v2 >= v3)
    v5 = result;
  else
    v5 = a2;
  if (v2 >= v3)
    v6 = a2;
  else
    v6 = result;
  v7 = v5 + 56;
  v8 = -1 << *(_BYTE *)(v5 + 32);
  if (-v8 < 64)
    v9 = ~(-1 << -(char)v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 56);
  v11 = (unint64_t)(63 - v8) >> 6;
  v12 = v6 + 56;
  while (1)
  {
    while (1)
    {
      v13 = v4;
      if (!v10)
        break;
      v14 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v15 = v14 | (v4 << 6);
      if (*(_QWORD *)(v6 + 16))
      {
LABEL_29:
        v19 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v15);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v19);
        v20 = -1 << *(_BYTE *)(v6 + 32);
        v21 = result & ~v20;
        if (((*(_QWORD *)(v12 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        {
          v22 = *(_QWORD *)(v6 + 48);
          if (*(_QWORD *)(v22 + 8 * v21) == v19)
          {
LABEL_34:
            swift_bridgeObjectRetain(v5);
            v24 = 0;
LABEL_35:
            sub_5FEC(v5);
            return v24;
          }
          v23 = ~v20;
          while (1)
          {
            v21 = (v21 + 1) & v23;
            if (((*(_QWORD *)(v12 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
              break;
            if (*(_QWORD *)(v22 + 8 * v21) == v19)
              goto LABEL_34;
          }
        }
      }
    }
    v16 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v11)
      goto LABEL_38;
    v17 = *(_QWORD *)(v7 + 8 * v16);
    ++v4;
    if (!v17)
    {
      v4 = v13 + 2;
      if (v13 + 2 >= v11)
        goto LABEL_38;
      v17 = *(_QWORD *)(v7 + 8 * v4);
      if (!v17)
      {
        v4 = v13 + 3;
        if (v13 + 3 >= v11)
          goto LABEL_38;
        v17 = *(_QWORD *)(v7 + 8 * v4);
        if (!v17)
        {
          v18 = v13 + 4;
          if (v13 + 4 >= v11)
          {
LABEL_38:
            swift_bridgeObjectRetain(v5);
            v24 = 1;
            goto LABEL_35;
          }
          v17 = *(_QWORD *)(v7 + 8 * v18);
          v4 = v13 + 4;
          if (!v17)
            break;
        }
      }
    }
LABEL_28:
    v10 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v4 << 6);
    if (*(_QWORD *)(v6 + 16))
      goto LABEL_29;
  }
  while (1)
  {
    v4 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v4 >= v11)
      goto LABEL_38;
    v17 = *(_QWORD *)(v7 + 8 * v4);
    ++v18;
    if (v17)
      goto LABEL_28;
  }
LABEL_40:
  __break(1u);
  return result;
}

char *sub_A81F0(char *result, uint64_t a2, uint64_t a3, __int128 *a4, _QWORD *a5)
{
  uint64_t v5;
  char v10;
  const void *v11;
  uint64_t v12;
  uint64_t i;
  _BYTE __src[552];
  _QWORD __dst[69];

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v10 = *result;
    v11 = (const void *)(a2 + 32);
    swift_bridgeObjectRetain(a2);
    memcpy(__dst, v11, 0x221uLL);
    v12 = v5 - 1;
    for (i = 584; ; i += 552)
    {
      memcpy(__src, __dst, 0x221uLL);
      sub_6100(__dst);
      sub_A82D4(__src, a3, a4, a5, v10);
      sub_6228(__dst);
      if (!v12)
        break;
      memcpy(__dst, (const void *)(a2 + i), 0x221uLL);
      --v12;
    }
    return (char *)swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_A82D4(void *__src, uint64_t a2, __int128 *a3, _QWORD *a4, char a5)
{
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  _QWORD *result;
  _QWORD v38[70];
  _QWORD *v39;

  memcpy(v38, __src, 0x221uLL);
  sub_6100(v38);
  sub_522D8((uint64_t)a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)a2);
  v39 = *(_QWORD **)a2;
  v11 = v39;
  *(_QWORD *)a2 = 0x8000000000000000;
  v13 = sub_397A8(v38);
  v14 = v11[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_21;
  }
  LOBYTE(v5) = v12;
  if (v11[3] >= v16)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_23;
  }
  else
  {
    sub_15E6BC(v16, isUniquelyReferenced_nonNull_native);
    v11 = v39;
    v17 = sub_397A8(v38);
    if ((v5 & 1) != (v18 & 1))
      goto LABEL_24;
    v13 = v17;
  }
  while (1)
  {
    *(_QWORD *)a2 = v11;
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)a2;
    if ((v5 & 1) == 0)
    {
      sub_170E78(v13, v38, _swiftEmptyArrayStorage, *(_QWORD *)a2);
      sub_6100(v38);
    }
    v5 = *(_QWORD *)(v19 + 56);
    v11 = *(_QWORD **)(v5 + 8 * v13);
    v20 = swift_isUniquelyReferenced_nonNull_native(v11);
    *(_QWORD *)(v5 + 8 * v13) = v11;
    if ((v20 & 1) == 0)
    {
LABEL_21:
      v11 = sub_2FFF4(0, v11[2] + 1, 1, v11);
      *(_QWORD *)(v5 + 8 * v13) = v11;
    }
    v22 = v11[2];
    v21 = v11[3];
    if (v22 >= v21 >> 1)
    {
      v11 = sub_2FFF4((_QWORD *)(v21 > 1), v22 + 1, 1, v11);
      *(_QWORD *)(v5 + 8 * v13) = v11;
    }
    v11[2] = v22 + 1;
    v23 = &v11[14 * v22];
    v24 = *a3;
    v25 = a3[2];
    v23[3] = a3[1];
    v23[4] = v25;
    v23[2] = v24;
    v26 = a3[3];
    v27 = a3[4];
    v28 = a3[6];
    v23[7] = a3[5];
    v23[8] = v28;
    v23[5] = v26;
    v23[6] = v27;
    sub_6228(v38);
    sub_6100(v38);
    a2 = swift_isUniquelyReferenced_nonNull_native(*a4);
    v39 = (_QWORD *)*a4;
    v29 = v39;
    *a4 = 0x8000000000000000;
    a3 = (__int128 *)sub_397A8(v38);
    v31 = v29[2];
    v32 = (v30 & 1) == 0;
    v33 = v31 + v32;
    if (!__OFADD__(v31, v32))
      break;
    __break(1u);
LABEL_23:
    sub_16D2C4();
    v11 = v39;
  }
  v34 = v30;
  if (v29[3] >= v33)
  {
    if ((a2 & 1) == 0)
    {
      sub_16D2B8();
      v29 = v39;
    }
    goto LABEL_17;
  }
  sub_15E6B0(v33, a2);
  v29 = v39;
  v35 = sub_397A8(v38);
  if ((v34 & 1) != (v36 & 1))
  {
LABEL_24:
    result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for SeedBook);
    __break(1u);
    return result;
  }
  a3 = (__int128 *)v35;
LABEL_17:
  *a4 = v29;
  swift_bridgeObjectRelease();
  if ((v34 & 1) == 0)
  {
    sub_170E78(a3, v38, &_swiftEmptySetSingleton, *a4);
    sub_6100(v38);
  }
  sub_162F78(&v39, a5 & 1);
  return sub_6228(v38);
}

_QWORD *sub_A85B8()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(double *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
  v6 = (double *)sub_38AB4(v5);
  swift_bridgeObjectRelease();
  if (qword_1F00D0 != -1)
    goto LABEL_20;
  while (1)
  {
    v7 = type metadata accessor for Logger(0);
    sub_5216C(v7, (uint64_t)qword_1F33F0);
    v8 = swift_retain_n(v6, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v31 = v2;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v33 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = sub_A8974((uint64_t)v6);
      v32 = sub_9DA98(v13, v14, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v11 + 4, v11 + 12);
      swift_release_n(v6, 2);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_0, v9, v10, "selectCandidateSingleBooks clusterableBooksAscendingByScore=%s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      v15 = v11;
      v2 = v31;
      swift_slowDealloc(v15, -1, -1);

      if (!v4)
        goto LABEL_8;
    }
    else
    {

      swift_release_n(v6, 2);
      if (!v4)
        goto LABEL_8;
    }
    v16 = *((_QWORD *)v6 + 2);
    if (v16)
      break;
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once(&qword_1F00D0, sub_A35E0);
  }
  if (v4 != 1)
  {
    v19 = v6[13] + 0.0;
    v20 = -1;
    v21 = 1;
    v22 = 27;
    while (v16 != v21)
    {
      v23 = v6[v22];
      if (v21 >= v3 && v2 >= v4 + v20 && v1 * (v19 / (double)v21) <= v23)
      {
        v17 = sub_389A8(v6, (uint64_t)(v6 + 4), v21, (2 * v16) | 1);
        swift_release(v6);
        v24 = swift_retain_n(v17, 2);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.default.getter(v25);
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc(12, -1);
          v28 = swift_slowAlloc(32, -1);
          v33 = v28;
          *(_DWORD *)v27 = 136315138;
          v29 = sub_A8974((uint64_t)v17);
          v32 = sub_9DA98(v29, v30, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v27 + 4, v27 + 12);
          swift_release_n(v17, 2);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_0, v25, v26, "selectCandidateSingleBooks candidates=%s", v27, 0xCu);
          swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v28, -1, -1);
          swift_slowDealloc(v27, -1, -1);

        }
        else
        {

          swift_release_n(v17, 2);
        }
        return v17;
      }
      ++v21;
      v19 = v19 + v23;
      --v20;
      v22 += 14;
      if (v4 == v21)
        goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_8:
  swift_release(v6);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_A8974(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;

  v31 = 0x202020200A5BLL;
  v32 = 0xE600000000000000;
  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v30 = _swiftEmptyArrayStorage;
    sub_340F4(0, v1, 0);
    v2 = _swiftEmptyArrayStorage;
    v4 = (_QWORD *)(a1 + 104);
    do
    {
      v5 = *(v4 - 9);
      v6 = *((_BYTE *)v4 - 64);
      v7 = *v4;
      v28 = 0;
      v29 = 0xE000000000000000;
      v27 = v5;
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 58;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      LOBYTE(v27) = v6;
      _print_unlocked<A, B>(_:_:)(&v27, &v28, &type metadata for Book.MediaType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v10._countAndFlagsBits = 58;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11 = sub_5EDC(&qword_1F14C8);
      v12 = swift_allocObject(v11, 72, 7);
      *(_OWORD *)(v12 + 16) = xmmword_1875E0;
      *(_QWORD *)(v12 + 56) = &type metadata for Double;
      *(_QWORD *)(v12 + 64) = &protocol witness table for Double;
      *(_QWORD *)(v12 + 32) = v7;
      v13._countAndFlagsBits = String.init(format:_:)(1714630181, 0xE400000000000000, v12);
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14 = v28;
      v15 = v29;
      v30 = v2;
      v17 = v2[2];
      v16 = v2[3];
      if (v17 >= v16 >> 1)
      {
        sub_340F4(v16 > 1, v17 + 1, 1);
        v2 = v30;
      }
      v4 += 14;
      v2[2] = v17 + 1;
      v18 = &v2[2 * v17];
      v18[4] = v14;
      v18[5] = v15;
      --v1;
    }
    while (v1);
  }
  v28 = v2;
  v19 = sub_5EDC(&qword_1F03E0);
  v20 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = BidirectionalCollection<>.joined(separator:)(0x202020200A2CLL, 0xE600000000000000, v19, v20);
  v23 = v22;
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 93;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  return v31;
}

void sub_A8BE0(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_A8BE8@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result;

  result = sub_53738((uint64_t)_swiftEmptyArrayStorage);
  *a1 = result;
  return result;
}

uint64_t sub_A8C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE v6[24];

  v4 = *(_QWORD *)(a3 + 160);
  swift_beginAccess(a2 + 16, v6, 33, 0);
  sub_A7BE0(a1, v4);
  return swift_endAccess(v6);
}

uint64_t sub_A8C70(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, __int128 *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, void (*a9)(_QWORD), uint64_t a10)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v27;
  int64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v61;
  uint64_t *v62;
  void (*v63)(_QWORD);
  uint64_t v64;
  __int128 *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned __int8 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v69 = a8;
  v68 = a7;
  v67 = a6;
  v66 = a5;
  v65 = a4;
  v64 = a10;
  v63 = a9;
  v74 = *a1;
  v11 = *(_QWORD *)a2;
  v12 = *(unsigned __int8 *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(_QWORD *)(v13 + 56);
  v70 = v13 + 56;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v71 = (unint64_t)(v15 + 63) >> 6;
  if (v12)
    v11 = 1;
  v72 = v11;
  v73 = v13;
  swift_bridgeObjectRetain(v13);
  v18 = 0;
  v62 = a3;
  while (v17)
  {
    v24 = __clz(__rbit64(v17));
    v17 &= v17 - 1;
    v25 = v24 | (v18 << 6);
LABEL_21:
    v29 = *(_BYTE *)(*(_QWORD *)(v73 + 48) + v25);
    v30 = *a3;
    if (*(_QWORD *)(*a3 + 16))
    {
      v31 = sub_3951C(v74);
      v32 = _swiftEmptyDictionarySingleton;
      if ((v33 & 1) != 0)
      {
        v32 = *(_QWORD **)(*(_QWORD *)(v30 + 56) + 8 * v31);
        swift_bridgeObjectRetain(v32);
      }
      if (!v32[2])
        goto LABEL_30;
LABEL_27:
      v34 = sub_39814(v29);
      if ((v35 & 1) == 0)
        goto LABEL_30;
      v36 = *(_QWORD *)(v32[7] + 8 * v34);
      v37 = swift_bridgeObjectRelease();
      if (v36 < v72)
        goto LABEL_31;
    }
    else
    {
      v32 = _swiftEmptyDictionarySingleton;
      if (_swiftEmptyDictionarySingleton[2])
        goto LABEL_27;
LABEL_30:
      v37 = swift_bridgeObjectRelease();
      if (v72 > 0)
      {
LABEL_31:
        v38 = *v66;
        v39 = *v67;
        v40 = *v68;
        v41 = *v69;
        switch(v74)
        {
          case 1u:
            v19 = v65[9];
            v84 = v65[8];
            v85 = v19;
            v86 = *((_QWORD *)v65 + 20);
            v20 = v65[5];
            v80 = v65[4];
            v81 = v20;
            v21 = v65[7];
            v82 = v65[6];
            v83 = v21;
            v22 = v65[1];
            v76 = *v65;
            v77 = v22;
            v23 = v65[3];
            v78 = v65[2];
            v79 = v23;
            v75 = v29;
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v39);
            swift_bridgeObjectRetain(v40);
            swift_bridgeObjectRetain(v41);
            sub_A92F0(&v75, v38, v63, v64);
            goto LABEL_7;
          case 2u:
            v61 = (uint64_t)&v61;
            v42 = __chkstk_darwin(v37);
            v43 = v65;
            *(&v61 - 2) = (uint64_t)v65;
            v44 = *((_QWORD *)v43 + 7);
            __chkstk_darwin(v42);
            *(&v61 - 8) = v39;
            *(&v61 - 7) = v38;
            *((_BYTE *)&v61 - 48) = v29;
            *(&v61 - 5) = v45;
            *(&v61 - 4) = (uint64_t)sub_B073C;
            v46 = v63;
            *(&v61 - 3) = v47;
            *(&v61 - 2) = (uint64_t)v46;
            *(&v61 - 1) = v64;
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v39);
            swift_bridgeObjectRetain(v40);
            swift_bridgeObjectRetain(v41);
            a3 = v62;
            sub_AF0A8(v44, (void (*)(_BYTE *, uint64_t, __n128))sub_B0744);
            goto LABEL_7;
          case 3u:
            v61 = (uint64_t)&v61;
            v48 = *((_QWORD *)v65 + 6);
            __chkstk_darwin(v37);
            *(&v61 - 8) = v41;
            *(&v61 - 7) = v38;
            *((_BYTE *)&v61 - 48) = v29;
            *(&v61 - 5) = v49;
            *(&v61 - 4) = (uint64_t)sub_A9DF8;
            v50 = v63;
            *(&v61 - 3) = 0;
            *(&v61 - 2) = (uint64_t)v50;
            *(&v61 - 1) = v64;
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v39);
            swift_bridgeObjectRetain(v40);
            swift_bridgeObjectRetain(v41);
            v51 = v48;
            goto LABEL_39;
          case 5u:
            v61 = (uint64_t)&v61;
            v52 = *((_QWORD *)v65 + 5);
            __chkstk_darwin(v37);
            *(&v61 - 8) = v40;
            *(&v61 - 7) = v38;
            *((_BYTE *)&v61 - 48) = v29;
            *(&v61 - 5) = v53;
            *(&v61 - 4) = (uint64_t)sub_A9E00;
            v54 = v63;
            *(&v61 - 3) = 0;
            *(&v61 - 2) = (uint64_t)v54;
            *(&v61 - 1) = v64;
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v39);
            swift_bridgeObjectRetain(v40);
            swift_bridgeObjectRetain(v41);
            v51 = v52;
LABEL_39:
            a3 = v62;
            sub_AF274(v51, (void (*)(uint64_t *, uint64_t))sub_B0700);
            goto LABEL_7;
          case 8u:
            v55 = v65[9];
            v84 = v65[8];
            v85 = v55;
            v86 = *((_QWORD *)v65 + 20);
            v56 = v65[5];
            v80 = v65[4];
            v81 = v56;
            v57 = v65[7];
            v82 = v65[6];
            v83 = v57;
            v58 = v65[1];
            v76 = *v65;
            v77 = v58;
            v59 = v65[3];
            v78 = v65[2];
            v79 = v59;
            v75 = v29;
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v39);
            swift_bridgeObjectRetain(v40);
            swift_bridgeObjectRetain(v41);
            sub_A9800(&v75, v38, v63, v64);
LABEL_7:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            break;
          default:
            continue;
        }
      }
    }
  }
  if (__OFADD__(v18++, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  if (v18 >= v71)
    return swift_release(v73);
  v27 = *(_QWORD *)(v70 + 8 * v18);
  if (v27)
  {
LABEL_20:
    v17 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v18 << 6);
    goto LABEL_21;
  }
  v28 = v18 + 1;
  if (v18 + 1 >= v71)
    return swift_release(v73);
  v27 = *(_QWORD *)(v70 + 8 * v28);
  if (v27)
    goto LABEL_19;
  v28 = v18 + 2;
  if (v18 + 2 >= v71)
    return swift_release(v73);
  v27 = *(_QWORD *)(v70 + 8 * v28);
  if (v27)
  {
LABEL_19:
    v18 = v28;
    goto LABEL_20;
  }
  v28 = v18 + 3;
  if (v18 + 3 < v71)
  {
    v27 = *(_QWORD *)(v70 + 8 * v28);
    if (!v27)
    {
      while (1)
      {
        v18 = v28 + 1;
        if (__OFADD__(v28, 1))
          break;
        if (v18 >= v71)
          return swift_release(v73);
        v27 = *(_QWORD *)(v70 + 8 * v18);
        ++v28;
        if (v27)
          goto LABEL_20;
      }
LABEL_44:
      __break(1u);
      JUMPOUT(0xA92D0);
    }
    goto LABEL_19;
  }
  return swift_release(v73);
}

uint64_t sub_A92F0(unsigned __int8 *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(_QWORD);
  int v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;

  v9 = type metadata accessor for ScoredCollectionRecommendation(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v65);
  v66 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5EDC(&qword_1F15E0);
  __chkstk_darwin(v13);
  v70 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_5EDC(&qword_1F0D90);
  v67 = *(_QWORD *)(v15 - 8);
  v68 = v15;
  __chkstk_darwin(v15);
  v64 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v18 = v4[10];
  v19 = v4[13];
  v69 = v4[12];
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v18);
  v63 = v17;
  v21 = sub_AEA34(v20, a2, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = sub_2CCAC(v19, v21);
  v24 = v23;
  v26 = v25;
  v28 = v27;
  if ((v27 & 1) == 0)
    goto LABEL_2;
  v30 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v31 = swift_unknownObjectRetain_n(v22, 2);
  v32 = (_QWORD *)swift_dynamicCastClass(v31, v30);
  if (!v32)
  {
    swift_unknownObjectRelease(v22);
    v32 = _swiftEmptyArrayStorage;
  }
  v33 = v32[2];
  v34 = swift_release(v32);
  if (__OFSUB__(v28 >> 1, v26))
  {
    __break(1u);
    goto LABEL_22;
  }
  v34 = v22;
  if (v33 != (v28 >> 1) - v26)
  {
LABEL_22:
    swift_unknownObjectRelease(v34);
LABEL_2:
    v29 = sub_38B84(v22, v24, v26, v28);
    goto LABEL_9;
  }
  v29 = (_QWORD *)swift_dynamicCastClass(v22, v30);
  if (!v29)
  {
    swift_unknownObjectRelease(v22);
    v29 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease(v22);
  v35 = v29[2];
  if (v35)
  {
    v59 = v11;
    v60 = v9;
    v61 = a4;
    v62 = a3;
    v77 = _swiftEmptyArrayStorage;
    sub_342E4(0, v35, 0);
    v36 = 0;
    v37 = v77;
    v71 = v29;
    do
    {
      v38 = &v29[v36];
      v76 = v29[v36 + 4];
      v75 = LOBYTE(v29[v36 + 5]);
      v74 = v29[v36 + 6];
      v73 = LOBYTE(v29[v36 + 7]);
      v39 = v29[v36 + 8];
      v40 = v29[v36 + 9];
      v41 = v38[10];
      v72 = v38[11];
      v42 = v38[12];
      v43 = v38[13];
      sub_40554(v39, v40);
      v77 = v37;
      v44 = v37[2];
      v45 = v37[3];
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v42);
      if (v44 >= v45 >> 1)
      {
        sub_342E4(v45 > 1, v44 + 1, 1);
        v37 = v77;
      }
      v37[2] = v44 + 1;
      v46 = &v37[10 * v44];
      v46[4] = v76;
      *((_BYTE *)v46 + 40) = v75;
      v46[6] = v74;
      *((_BYTE *)v46 + 56) = v73;
      v46[8] = v39;
      *((_BYTE *)v46 + 72) = v40;
      v29 = v71;
      v47 = v72;
      v46[10] = v41;
      v46[11] = v47;
      v46[12] = v42;
      v46[13] = v43;
      v36 += 14;
      --v35;
    }
    while (v35);
    swift_release(v29);
    a3 = v62;
    v9 = v60;
    v11 = v59;
  }
  else
  {
    swift_release(v29);
    v37 = _swiftEmptyArrayStorage;
  }
  v48 = (uint64_t)v70;
  if (v37[2] < v69)
    return swift_bridgeObjectRelease();
  v77 = v37;
  v50 = sub_5EDC(&qword_1F1378);
  v51 = sub_3EDBC(&qword_1F1608, &qword_1F1378, (uint64_t)&protocol conformance descriptor for [A]);
  NonEmpty.init(_:)(&v77, v50, v51);
  v52 = v67;
  v53 = v68;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v48, 1, v68) == 1)
    return sub_417D8(v48, &qword_1F15E0);
  v54 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v64, v48, v53);
  v55 = (uint64_t)v66;
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v66, v54, v53);
  swift_storeEnumTagMultiPayload(v55, v65, 1);
  sub_180550();
  v57 = v56;
  sub_26A5C(v55, (uint64_t)v11, type metadata accessor for CollectionRecommendation);
  v11[*(int *)(v9 + 20)] = v63;
  *(_QWORD *)&v11[*(int *)(v9 + 24)] = v57;
  a3(v11);
  sub_26AA0((uint64_t)v11, type metadata accessor for ScoredCollectionRecommendation);
  sub_26AA0(v55, type metadata accessor for CollectionRecommendation);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v54, v53);
}

uint64_t sub_A9800(unsigned __int8 *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD);
  int v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  _OWORD v82[5];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v9 = type metadata accessor for ScoredCollectionRecommendation(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v70);
  v71 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5EDC(&qword_1F15E0);
  __chkstk_darwin(v13);
  v74 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_5EDC(&qword_1F0D90);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v69 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = *(_OWORD *)(v4 + 144);
  v86 = *(_OWORD *)(v4 + 128);
  v87 = v17;
  v88 = *(_QWORD *)(v4 + 160);
  v18 = *(_OWORD *)(v4 + 80);
  v82[4] = *(_OWORD *)(v4 + 64);
  v83 = v18;
  v19 = *(_OWORD *)(v4 + 112);
  v84 = *(_OWORD *)(v4 + 96);
  v85 = v19;
  v20 = *(_OWORD *)(v4 + 16);
  v82[0] = *(_OWORD *)v4;
  v21 = *(_OWORD *)(v4 + 32);
  v82[3] = *(_OWORD *)(v4 + 48);
  v82[1] = v20;
  v82[2] = v21;
  v22 = v83;
  sub_B05C4(v82);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v22);
  v68 = v16;
  v24 = sub_AE628(v23, (uint64_t)v82, a2, v16);
  swift_bridgeObjectRelease();
  sub_B0358(v82);
  swift_bridgeObjectRelease();
  v25 = sub_2CCAC(*((_QWORD *)&v84 + 1), v24);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  if ((v30 & 1) == 0)
    goto LABEL_2;
  v33 = type metadata accessor for __ContiguousArrayStorageBase(0);
  v34 = swift_unknownObjectRetain_n(v25, 2);
  v35 = (_QWORD *)swift_dynamicCastClass(v34, v33);
  if (!v35)
  {
    swift_unknownObjectRelease(v25);
    v35 = _swiftEmptyArrayStorage;
  }
  v36 = v35[2];
  v37 = swift_release(v35);
  if (__OFSUB__(v31 >> 1, v29))
  {
    __break(1u);
    goto LABEL_23;
  }
  v37 = v25;
  if (v36 != (v31 >> 1) - v29)
  {
LABEL_23:
    swift_unknownObjectRelease(v37);
LABEL_2:
    v32 = sub_38B84(v25, v27, v29, v31);
    goto LABEL_9;
  }
  v32 = (_QWORD *)swift_dynamicCastClass(v25, v33);
  if (!v32)
  {
    swift_unknownObjectRelease(v25);
    v32 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease(v25);
  v38 = v32[2];
  if (v38)
  {
    v64 = v11;
    v65 = v9;
    v66 = a4;
    v67 = a3;
    v81 = _swiftEmptyArrayStorage;
    sub_342E4(0, v38, 0);
    v39 = 0;
    v40 = v81;
    v75 = v32;
    do
    {
      v41 = &v32[v39];
      v80 = v32[v39 + 4];
      v79 = LOBYTE(v32[v39 + 5]);
      v78 = v32[v39 + 6];
      v77 = LOBYTE(v32[v39 + 7]);
      v42 = v32[v39 + 8];
      v43 = v32[v39 + 9];
      v44 = v41[10];
      v76 = v41[11];
      v45 = v41[12];
      v46 = v41[13];
      sub_40554(v42, v43);
      v81 = v40;
      v47 = v40[2];
      v48 = v40[3];
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v45);
      if (v47 >= v48 >> 1)
      {
        sub_342E4(v48 > 1, v47 + 1, 1);
        v40 = v81;
      }
      v40[2] = v47 + 1;
      v49 = &v40[10 * v47];
      v49[4] = v80;
      *((_BYTE *)v49 + 40) = v79;
      v49[6] = v78;
      *((_BYTE *)v49 + 56) = v77;
      v49[8] = v42;
      *((_BYTE *)v49 + 72) = v43;
      v50 = v76;
      v49[10] = v44;
      v49[11] = v50;
      v49[12] = v45;
      v49[13] = v46;
      v39 += 14;
      --v38;
      v32 = v75;
    }
    while (v38);
    swift_release(v75);
    a3 = v67;
    v9 = v65;
    v11 = v64;
  }
  else
  {
    swift_release(v32);
    v40 = _swiftEmptyArrayStorage;
  }
  v51 = (uint64_t)v74;
  if (v40[2] < (uint64_t)v84)
    return swift_bridgeObjectRelease();
  v81 = v40;
  v53 = sub_5EDC(&qword_1F1378);
  v54 = sub_3EDBC(&qword_1F1608, &qword_1F1378, (uint64_t)&protocol conformance descriptor for [A]);
  NonEmpty.init(_:)(&v81, v53, v54);
  v55 = v72;
  v56 = v73;
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v51, 1, v73);
  if (v57 == 1)
    return sub_417D8(v51, &qword_1F15E0);
  v58 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v69, v51, v56);
  v59 = *(int *)(sub_5EDC(&qword_1F3420) + 48);
  v60 = (uint64_t)v71;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v71, v58, v56);
  *(_BYTE *)(v60 + v59) = 2;
  swift_storeEnumTagMultiPayload(v60, v70, 8);
  sub_180550();
  v62 = v61;
  sub_26A5C(v60, (uint64_t)v11, type metadata accessor for CollectionRecommendation);
  v11[*(int *)(v9 + 20)] = v68;
  *(_QWORD *)&v11[*(int *)(v9 + 24)] = v62;
  a3(v11);
  sub_26AA0((uint64_t)v11, type metadata accessor for ScoredCollectionRecommendation);
  sub_26AA0(v60, type metadata accessor for CollectionRecommendation);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v58, v56);
}

uint64_t sub_A9DF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_A9E08(a1, a2, 3, a3);
}

uint64_t sub_A9E00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_A9E08(a1, a2, 5, a3);
}

uint64_t sub_A9E08@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = sub_5EDC(&qword_1F3418);
  v9 = *(int *)(v8 + 48);
  v10 = *(int *)(v8 + 64);
  v11 = sub_5EDC(&qword_1F0D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a4, a1, v11);
  *(_QWORD *)(a4 + v9) = v7;
  *(_BYTE *)(a4 + v10) = 2;
  v12 = type metadata accessor for CollectionRecommendation(0);
  return swift_storeEnumTagMultiPayload(a4, v12, a3);
}

_QWORD *sub_A9E98@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  char v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD __dst[69];

  memcpy(__dst, a2, 0x221uLL);
  v8 = *(_QWORD *)(a3 + 64);
  if (!*(_QWORD *)(v8 + 16))
  {
    v15 = (void *)(a4 + *(int *)(sub_5EDC(&qword_1F0D98) + 48));
    v16 = sub_5EDC(&qword_1F0D90);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(a4, a1, v16);
    v17 = v15;
    v18 = a2;
LABEL_6:
    memcpy(v17, v18, 0x221uLL);
    v12 = sub_5EDC(&qword_1F0D98);
    v11 = &_swiftEmptySetSingleton;
    goto LABEL_7;
  }
  sub_6100(__dst);
  v9 = sub_397A8(__dst);
  if ((v10 & 1) == 0)
  {
    sub_6228(__dst);
    v19 = (void *)(a4 + *(int *)(sub_5EDC(&qword_1F0D98) + 48));
    v20 = sub_5EDC(&qword_1F0D90);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(a4, a1, v20);
    v18 = __dst;
    v17 = v19;
    goto LABEL_6;
  }
  v11 = *(void **)(*(_QWORD *)(v8 + 56) + 8 * v9);
  swift_bridgeObjectRetain(v11);
  sub_6228(__dst);
  v12 = sub_5EDC(&qword_1F0D98);
  v13 = (void *)(a4 + *(int *)(v12 + 48));
  v14 = sub_5EDC(&qword_1F0D90);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a4, a1, v14);
  memcpy(v13, __dst, 0x221uLL);
LABEL_7:
  *(_QWORD *)(a4 + *(int *)(v12 + 64)) = v11;
  v21 = type metadata accessor for CollectionRecommendation(0);
  swift_storeEnumTagMultiPayload(a4, v21, 2);
  return sub_6100(__dst);
}

uint64_t sub_AA040(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, void (*a7)(_QWORD, _QWORD), uint64_t a8, void (*a9)(char *), uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  int v68;
  void (*v69)(_QWORD, _QWORD);
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int64_t v85;
  _QWORD *v86;
  _BYTE v87[560];

  v73 = a8;
  v75 = a10;
  v74 = a9;
  v17 = type metadata accessor for ScoredCollectionRecommendation(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v20);
  v72 = (char *)&v66 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_5EDC(&qword_1F15E0);
  __chkstk_darwin(v22);
  v78 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5EDC(&qword_1F0D90);
  v76 = *(_QWORD *)(v24 - 8);
  v77 = v24;
  __chkstk_darwin(v24);
  v71 = (char *)&v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v87, a1, 0x221uLL);
  result = sub_28884(a1, a3);
  if ((result & 1) != 0)
    return result;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  v28 = sub_AEA34(v27, a4, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v29 = sub_2CCAC(*(_QWORD *)(a6 + 104), v28);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v69 = a7;
  v70 = a6;
  if ((v34 & 1) != 0)
  {
    v37 = v19;
    v38 = v17;
    v39 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v40 = swift_unknownObjectRetain_n(v29, 2);
    v41 = (_QWORD *)swift_dynamicCastClass(v40, v39);
    if (!v41)
    {
      swift_unknownObjectRelease(v29);
      v41 = _swiftEmptyArrayStorage;
    }
    v42 = v41[2];
    v43 = swift_release(v41);
    if (__OFSUB__(v35 >> 1, v33))
    {
      __break(1u);
    }
    else
    {
      v43 = v29;
      if (v42 == (v35 >> 1) - v33)
      {
        v36 = (_QWORD *)swift_dynamicCastClass(v29, v39);
        v17 = v38;
        v19 = v37;
        a7 = v69;
        a6 = v70;
        if (!v36)
        {
          swift_unknownObjectRelease(v29);
          v36 = _swiftEmptyArrayStorage;
        }
        goto LABEL_10;
      }
    }
    swift_unknownObjectRelease(v43);
    v17 = v38;
    v19 = v37;
    a7 = v69;
    a6 = v70;
  }
  v36 = sub_38B84(v29, v31, v33, v35);
LABEL_10:
  swift_unknownObjectRelease(v29);
  v44 = v36[2];
  if (v44)
  {
    v66 = v19;
    v67 = v17;
    v68 = a5;
    v86 = _swiftEmptyArrayStorage;
    sub_342E4(0, v44, 0);
    v45 = 0;
    v46 = v86;
    v79 = v36;
    do
    {
      v84 = v36[v45 + 4];
      v83 = LOBYTE(v36[v45 + 5]);
      v82 = v36[v45 + 6];
      v81 = LOBYTE(v36[v45 + 7]);
      v47 = v36[v45 + 8];
      v48 = v36[v45 + 9];
      v49 = v36[v45 + 10];
      v80 = v36[v45 + 11];
      v50 = v36[v45 + 12];
      v51 = v36[v45 + 13];
      sub_40554(v47, v48);
      v52 = v46[2];
      v53 = v46[3];
      v85 = v52 + 1;
      v86 = v46;
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      if (v52 >= v53 >> 1)
      {
        sub_342E4(v53 > 1, v85, 1);
        v46 = v86;
      }
      v54 = v84;
      v46[2] = v85;
      v55 = &v46[10 * v52];
      v55[4] = v54;
      *((_BYTE *)v55 + 40) = v83;
      v55[6] = v82;
      *((_BYTE *)v55 + 56) = v81;
      v55[8] = v47;
      *((_BYTE *)v55 + 72) = v48;
      v36 = v79;
      v56 = v80;
      v55[10] = v49;
      v55[11] = v56;
      v55[12] = v50;
      v55[13] = v51;
      v45 += 14;
      --v44;
    }
    while (v44);
    swift_release(v36);
    LOBYTE(a5) = v68;
    v19 = v66;
    v17 = v67;
    a7 = v69;
    a6 = v70;
  }
  else
  {
    swift_release(v36);
    v46 = _swiftEmptyArrayStorage;
  }
  v57 = (uint64_t)v78;
  if (v46[2] < *(_QWORD *)(a6 + 96))
    return swift_bridgeObjectRelease();
  v86 = v46;
  v58 = sub_5EDC(&qword_1F1378);
  v59 = sub_3EDBC(&qword_1F1608, &qword_1F1378, (uint64_t)&protocol conformance descriptor for [A]);
  NonEmpty.init(_:)(&v86, v58, v59);
  v61 = v76;
  v60 = v77;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v57, 1, v77) == 1)
    return sub_417D8(v57, &qword_1F15E0);
  v62 = v71;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v71, v57, v60);
  v63 = (uint64_t)v72;
  a7(v62, v87);
  sub_180550();
  v65 = v64;
  sub_26A5C(v63, (uint64_t)v19, type metadata accessor for CollectionRecommendation);
  v19[*(int *)(v17 + 20)] = a5;
  *(_QWORD *)&v19[*(int *)(v17 + 24)] = v65;
  v74(v19);
  sub_26AA0((uint64_t)v19, type metadata accessor for ScoredCollectionRecommendation);
  sub_26AA0(v63, type metadata accessor for CollectionRecommendation);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v62, v77);
}

uint64_t sub_AA580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, void (*a7)(_QWORD, _QWORD), uint64_t a8, void (*a9)(char *), uint64_t a10)
{
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  void (*v73)(_QWORD, _QWORD);
  char *v74;
  char *v75;
  void (*v76)(char *);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;

  v76 = a9;
  v77 = a10;
  v18 = type metadata accessor for ScoredCollectionRecommendation(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v21);
  v75 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_5EDC(&qword_1F15E0);
  __chkstk_darwin(v23);
  v80 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_5EDC(&qword_1F0D90);
  v26 = *(_QWORD *)(v25 - 8);
  v78 = v25;
  v79 = v26;
  __chkstk_darwin(v25);
  v74 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = a1;
  result = sub_28554(a1, a3);
  if ((result & 1) != 0)
    return result;
  swift_bridgeObjectRetain(a4);
  v29 = swift_bridgeObjectRetain(a2);
  v30 = sub_AEA34(v29, a4, a5);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a4);
  v31 = sub_2CCAC(*(_QWORD *)(a6 + 104), v30);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v72 = a8;
  v73 = a7;
  if ((v36 & 1) != 0)
  {
    v39 = a6;
    v40 = v20;
    v41 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v42 = swift_unknownObjectRetain_n(v31, 2);
    v43 = (_QWORD *)swift_dynamicCastClass(v42, v41);
    if (!v43)
    {
      swift_unknownObjectRelease(v31);
      v43 = _swiftEmptyArrayStorage;
    }
    v44 = v43[2];
    v45 = swift_release(v43);
    if (__OFSUB__(v37 >> 1, v35))
    {
      __break(1u);
    }
    else
    {
      v45 = v31;
      if (v44 == (v37 >> 1) - v35)
      {
        v38 = (_QWORD *)swift_dynamicCastClass(v31, v41);
        v20 = v40;
        a6 = v39;
        a7 = v73;
        if (!v38)
        {
          swift_unknownObjectRelease(v31);
          v38 = _swiftEmptyArrayStorage;
        }
        goto LABEL_10;
      }
    }
    swift_unknownObjectRelease(v45);
    v20 = v40;
    a6 = v39;
    a7 = v73;
  }
  v38 = sub_38B84(v31, v33, v35, v37);
LABEL_10:
  swift_unknownObjectRelease(v31);
  v46 = v38[2];
  if (v46)
  {
    v68 = a6;
    v69 = v20;
    v70 = v18;
    v71 = a5;
    v87 = _swiftEmptyArrayStorage;
    sub_342E4(0, v46, 0);
    v47 = 0;
    v48 = v87;
    v81 = v38;
    do
    {
      v86 = v38[v47 + 4];
      v85 = LOBYTE(v38[v47 + 5]);
      v84 = v38[v47 + 6];
      v83 = LOBYTE(v38[v47 + 7]);
      v49 = v38[v47 + 8];
      v50 = v38[v47 + 9];
      v51 = v38[v47 + 10];
      v82 = v38[v47 + 11];
      v52 = v38[v47 + 12];
      v53 = v38[v47 + 13];
      sub_40554(v49, v50);
      v87 = v48;
      v54 = v48[2];
      v55 = v48[3];
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v52);
      if (v54 >= v55 >> 1)
      {
        sub_342E4(v55 > 1, v54 + 1, 1);
        v48 = v87;
      }
      v48[2] = v54 + 1;
      v56 = &v48[10 * v54];
      v56[4] = v86;
      *((_BYTE *)v56 + 40) = v85;
      v56[6] = v84;
      *((_BYTE *)v56 + 56) = v83;
      v56[8] = v49;
      *((_BYTE *)v56 + 72) = v50;
      v38 = v81;
      v57 = v82;
      v56[10] = v51;
      v56[11] = v57;
      v56[12] = v52;
      v56[13] = v53;
      v47 += 14;
      --v46;
    }
    while (v46);
    swift_release(v38);
    LOBYTE(a5) = v71;
    v18 = v70;
    v20 = v69;
    a6 = v68;
    a7 = v73;
  }
  else
  {
    swift_release(v38);
    v48 = _swiftEmptyArrayStorage;
  }
  v58 = (uint64_t)v80;
  if (v48[2] < *(_QWORD *)(a6 + 96))
    return swift_bridgeObjectRelease(v48);
  v87 = v48;
  v59 = sub_5EDC(&qword_1F1378);
  v60 = sub_3EDBC(&qword_1F1608, &qword_1F1378, (uint64_t)&protocol conformance descriptor for [A]);
  NonEmpty.init(_:)(&v87, v59, v60);
  v61 = v78;
  v62 = v79;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v58, 1, v78) == 1)
    return sub_417D8(v58, &qword_1F15E0);
  v63 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v74, v58, v61);
  v64 = (uint64_t)v75;
  a7(v63, &v88);
  sub_180550();
  v66 = v65;
  sub_26A5C(v64, (uint64_t)v20, type metadata accessor for CollectionRecommendation);
  v20[*(int *)(v18 + 20)] = a5;
  *(_QWORD *)&v20[*(int *)(v18 + 24)] = v66;
  v76(v20);
  sub_26AA0((uint64_t)v20, type metadata accessor for ScoredCollectionRecommendation);
  sub_26AA0(v64, type metadata accessor for CollectionRecommendation);
  return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v63, v61);
}

BOOL sub_AAADC(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 8) < *(double *)(a1 + 8);
}

BOOL sub_AAAF0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) >= *(double *)(a2 + 8);
}

BOOL sub_AAB04(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 8) >= *(double *)(a1 + 8);
}

BOOL sub_AAB18(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 8) < *(double *)(a2 + 8);
}

uint64_t sub_AAB2C(uint64_t *a1, uint64_t *a2)
{
  return sub_B4C0(*a1, *a2);
}

void sub_AAB38()
{
  Swift::String v0;

  _StringGuts.grow(_:)(29);
  v0._countAndFlagsBits = 123;
  v0._object = (void *)0xE100000000000000;
  String.append(_:)(v0);
  CollectionRecommendation.collectionRecommendationType.getter();
  __asm { BR              X10 }
}

uint64_t sub_AABB0()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v12;

  v1._countAndFlagsBits = 0x736B6F6F62;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 0x7954616964656D20;
  v2._object = (void *)0xEB000000003D6570;
  String.append(_:)(v2);
  v3 = type metadata accessor for ScoredCollectionRecommendation(0);
  if (*(_BYTE *)(v0 + *(int *)(v3 + 20)))
  {
    if (*(_BYTE *)(v0 + *(int *)(v3 + 20)) == 1)
    {
      v4 = 0xE90000000000006BLL;
      v5 = 0x6F6F626F69647561;
    }
    else
    {
      v4 = 0xE500000000000000;
      v5 = 0x646578696DLL;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v5 = 0x6B6F6F6265;
  }
  v6 = v4;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3D65726F637320;
  v7._object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  Double.write<A>(to:)(&v12, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, *(double *)(v0 + *(int *)(v3 + 24)));
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  CollectionRecommendation.clusteringDebugDescription.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 125;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v12;
}

void CollectionRecommendation.clusteringDebugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;

  v1 = v0;
  v2 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_26A5C(v1, (uint64_t)v4, v5);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 9)
  {
    v6 = *(_QWORD **)v4;
    v7 = *((_QWORD *)v4 + 2);
    v8 = *((_QWORD *)v4 + 3);
    v54 = v1;
    *(_QWORD *)&v55 = v7;
    v9 = *((_QWORD *)v4 + 4);
    v10 = *((_QWORD *)v4 + 5);
    v11 = *((_QWORD *)v4 + 6);
    v12 = *((_QWORD *)v4 + 7);
    v13 = *((_QWORD *)v4 + 8);
    v53 = *((_OWORD *)v4 + 5);
    v14 = *((_QWORD *)v4 + 13);
    v57 = 0x3D736569726573;
    v58 = 0xE700000000000000;
    v59 = v6;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 58;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17 = sub_5EDC(&qword_1F14C8);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_1875E0;
    *(_QWORD *)(v18 + 56) = &type metadata for Double;
    *(_QWORD *)(v18 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v18 + 32) = v14;
    sub_ABCB0(v55, v8, v9, v10, v11, v12, v13);
    v19 = String.init(format:_:)(1714630181, 0xE400000000000000, v18);
  }
  else
  {
    sub_26AA0((uint64_t)v4, type metadata accessor for CollectionRecommendation);
    CollectionRecommendation.books.getter();
    v22 = v21;
    if (*(_QWORD *)(v21 + 16) >= 3uLL)
      v23 = 3;
    else
      v23 = *(_QWORD *)(v21 + 16);
    if (v23)
    {
      v54 = v1;
      v59 = _swiftEmptyArrayStorage;
      sub_340F4(0, v23, 0);
      v24 = 0;
      v25 = v59;
      v55 = xmmword_1875E0;
      do
      {
        v26 = *(_QWORD *)(v22 + v24 + 32);
        v27 = *(_BYTE *)(v22 + v24 + 40);
        v28 = *(_QWORD *)(v22 + v24 + 104);
        v57 = 0;
        v58 = 0xE000000000000000;
        v56 = v26;
        v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v29);
        swift_bridgeObjectRelease();
        v30._countAndFlagsBits = 58;
        v30._object = (void *)0xE100000000000000;
        String.append(_:)(v30);
        LOBYTE(v56) = v27;
        _print_unlocked<A, B>(_:_:)(&v56, &v57, &type metadata for Book.MediaType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v31._countAndFlagsBits = 58;
        v31._object = (void *)0xE100000000000000;
        String.append(_:)(v31);
        v32 = sub_5EDC(&qword_1F14C8);
        v33 = swift_allocObject(v32, 72, 7);
        *(_OWORD *)(v33 + 16) = v55;
        *(_QWORD *)(v33 + 56) = &type metadata for Double;
        *(_QWORD *)(v33 + 64) = &protocol witness table for Double;
        *(_QWORD *)(v33 + 32) = v28;
        v34._countAndFlagsBits = String.init(format:_:)(1714630181, 0xE400000000000000, v33);
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35 = v57;
        v36 = v58;
        v59 = v25;
        v38 = v25[2];
        v37 = v25[3];
        if (v38 >= v37 >> 1)
        {
          sub_340F4(v37 > 1, v38 + 1, 1);
          v25 = v59;
        }
        v25[2] = v38 + 1;
        v39 = &v25[2 * v38];
        v39[4] = v35;
        v39[5] = v36;
        v24 += 80;
      }
      while (80 * v23 != v24);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v25 = _swiftEmptyArrayStorage;
    }
    v57 = (uint64_t)v25;
    v40 = sub_5EDC(&qword_1F03E0);
    v41 = sub_3EDBC((unint64_t *)&qword_1F0E60, &qword_1F03E0, (uint64_t)&protocol conformance descriptor for [A]);
    v42 = BidirectionalCollection<>.joined(separator:)(44, 0xE100000000000000, v40, v41);
    v44 = v43;
    swift_bridgeObjectRelease();
    v57 = 0x28736B6F6F62;
    v58 = 0xE600000000000000;
    CollectionRecommendation.books.getter();
    v46 = *(_QWORD **)(v45 + 16);
    swift_bridgeObjectRelease();
    v59 = v46;
    v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 15657;
    v48._object = (void *)0xE200000000000000;
    String.append(_:)(v48);
    v49._countAndFlagsBits = v42;
    v49._object = v44;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    CollectionRecommendation.books.getter();
    v51 = *(_QWORD *)(v50 + 16);
    swift_bridgeObjectRelease();
    if (v51 <= 3)
      v19 = 0;
    else
      v19 = 10911970;
    if (v51 <= 3)
      v52 = 0xE000000000000000;
    else
      v52 = 0xA300000000000000;
    v20 = v52;
  }
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  v57 = 123;
  v58 = 0xE100000000000000;
  CollectionRecommendation.collectionRecommendationType.getter();
  __asm { BR              X10 }
}

uint64_t sub_AB27C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;

  v3._countAndFlagsBits = 0x736B6F6F62;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(0xE500000000000000);
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = v0;
  v5._object = v1;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v1);
  v6._countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return *(_QWORD *)(v2 - 120);
}

BOOL sub_AB3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + *(int *)(a3 + 24)) < *(double *)(a1 + *(int *)(a3 + 24));
}

BOOL sub_AB3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a1 + *(int *)(a3 + 24)) >= *(double *)(a2 + *(int *)(a3 + 24));
}

BOOL sub_AB3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a2 + *(int *)(a3 + 24)) >= *(double *)(a1 + *(int *)(a3 + 24));
}

BOOL sub_AB40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(double *)(a1 + *(int *)(a3 + 24)) < *(double *)(a2 + *(int *)(a3 + 24));
}

uint64_t sub_AB428()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64[7];

  v1 = *(_QWORD *)(*v0 + 16);
  if (v1 == 1)
  {
LABEL_41:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7974706D65, 0xE500000000000000, "BooksPersonalization/PriorityQueue.swift", 40, 2, 62, 0);
    __break(1u);
    return result;
  }
  sub_A3268(1uLL, v1 - 1);
  sub_A301C(*(_QWORD *)(*v0 + 16) - 1, (uint64_t)v64);
  result = (uint64_t)sub_B0424(v64);
  v54 = v0;
  v3 = (_QWORD *)*v0;
  v4 = *(_QWORD *)(*v0 + 16);
  if (v4 >= 3)
  {
    v5 = 2;
    v6 = 1;
    while (1)
    {
      if ((uint64_t)v5 < (uint64_t)(v4 - 1))
      {
        v7 = v3[2];
        if (v5 >= v7)
          goto LABEL_32;
        v8 = (uint64_t)&v3[6 * v5 + 4];
        if (!*(_QWORD *)v8)
          goto LABEL_39;
        v9 = v5 | 1;
        if ((v5 | 1) >= v7)
          goto LABEL_33;
        v62 = v6;
        v10 = (uint64_t)&v3[6 * v9 + 4];
        v11 = *(_QWORD *)v10;
        if (!*(_QWORD *)v10)
          goto LABEL_40;
        v12 = v5;
        v13 = v3;
        v15 = *(_QWORD *)(v10 + 24);
        v14 = *(_QWORD *)(v10 + 32);
        v17 = *(uint64_t *)(v10 + 8);
        v16 = *(_QWORD *)(v10 + 16);
        v18 = *(uint64_t *)(v8 + 8);
        sub_ABD64(*(_QWORD *)v8, v18, *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32));
        sub_ABD64(v11, v17, v16, v15, v14);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(double *)&v17 >= *(double *)&v18)
          v5 = v12;
        else
          v5 = v9;
        v3 = v13;
        v4 = v13[2];
        v6 = v62;
      }
      if (v6 >= v4)
        break;
      v19 = (uint64_t)&v3[6 * v6 + 4];
      if (!*(_QWORD *)v19)
        goto LABEL_37;
      if (v5 >= v4)
        goto LABEL_30;
      v61 = v5;
      v63 = v3;
      v57 = 6 * v5;
      v58 = 6 * v6;
      v20 = (uint64_t)&v3[6 * v5 + 4];
      v21 = *(_QWORD *)v20;
      if (!*(_QWORD *)v20)
        goto LABEL_38;
      v23 = *(_QWORD *)(v20 + 24);
      v22 = *(_QWORD *)(v20 + 32);
      v25 = *(uint64_t *)(v20 + 8);
      v24 = *(_QWORD *)(v20 + 16);
      v26 = *(uint64_t *)(v19 + 8);
      sub_ABD64(*(_QWORD *)v19, v26, *(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24), *(_QWORD *)(v19 + 32));
      sub_ABD64(v21, v25, v24, v23, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v27 = v61;
      v3 = v63;
      if (*(double *)&v25 >= *(double *)&v26)
        return result;
      if (v6 != v61)
      {
        v28 = v63[2];
        if (v6 >= v28)
          goto LABEL_34;
        if (v61 >= v28)
          goto LABEL_35;
        v29 = *(_QWORD *)v19;
        v30 = *(_QWORD *)(v19 + 8);
        v31 = *(_QWORD *)(v19 + 16);
        v32 = *(_QWORD *)(v19 + 24);
        v33 = *(_QWORD *)(v19 + 32);
        v34 = *(_BYTE *)(v19 + 40);
        v36 = *(_QWORD *)v20;
        v35 = *(_QWORD *)(v20 + 8);
        v37 = *(_QWORD *)(v20 + 16);
        v38 = *(_QWORD *)(v20 + 24);
        v39 = *(_QWORD *)(v20 + 32);
        v40 = *(_BYTE *)(v20 + 40);
        v59 = v29;
        v55 = v31;
        v56 = v30;
        v60 = v34;
        sub_ABD64(v29, v30, v31, v32, v33);
        sub_ABD64(v36, v35, v37, v38, v39);
        if ((swift_isUniquelyReferenced_nonNull_native(v63) & 1) == 0)
          v63 = sub_6A540(v63);
        v3 = v63;
        v41 = v63 + 4;
        v42 = &v63[v58 + 4];
        v43 = *v42;
        v44 = v42[1];
        v45 = v42[2];
        v46 = v42[3];
        v47 = v42[4];
        *v42 = v36;
        v42[1] = v35;
        v42[2] = v37;
        v42[3] = v38;
        v42[4] = v39;
        *((_BYTE *)v42 + 40) = v40;
        sub_B0458(v43, v44, v45, v46, v47);
        v27 = v61;
        if (v61 >= v63[2])
          goto LABEL_36;
        v48 = &v41[v57];
        v49 = v41[v57];
        v50 = v41[v57 + 1];
        v51 = v41[v57 + 2];
        v52 = v41[v57 + 3];
        v53 = v41[v57 + 4];
        *v48 = v59;
        v48[1] = v56;
        v48[2] = v55;
        v48[3] = v32;
        v48[4] = v33;
        *((_BYTE *)v48 + 40) = v60;
        result = sub_B0458(v49, v50, v51, v52, v53);
        *v54 = v63;
      }
      if ((uint64_t)(v27 + 0x4000000000000000) < 0)
        goto LABEL_31;
      v6 = v27;
      v4 = v3[2];
      v5 = 2 * v27;
      if (v4 <= 2 * v27)
        return result;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  return result;
}

uint64_t sub_AB81C()
{
  unint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  unint64_t v47;
  unint64_t v48;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;

  v1 = sub_5EDC(&qword_1F1260);
  v55 = *(_QWORD *)(v1 - 8);
  v2 = __chkstk_darwin(v1);
  v52 = (uint64_t)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __chkstk_darwin(v2);
  v53 = (uint64_t)&v50 - v5;
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v50 - v7;
  v9 = __chkstk_darwin(v6);
  v56 = (uint64_t)&v50 - v10;
  v11 = __chkstk_darwin(v9);
  v50 = (uint64_t)&v50 - v12;
  v13 = __chkstk_darwin(v11);
  v54 = (uint64_t)&v50 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v50 - v15;
  v17 = *(_QWORD *)(*v0 + 16);
  if (v17 == 1)
  {
LABEL_42:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7974706D65, 0xE500000000000000, "BooksPersonalization/PriorityQueue.swift", 40, 2, 62, 0);
    __break(1u);
    return result;
  }
  sub_A33F0(1uLL, v17 - 1);
  sub_A3120(*(_QWORD *)(*v0 + 16) - 1, (uint64_t)v16);
  result = sub_417D8((uint64_t)v16, &qword_1F1260);
  v19 = *v0;
  v20 = *(_QWORD *)(*v0 + 16);
  if (v20 >= 3)
  {
    v21 = 2;
    v22 = 1;
    v51 = v8;
    while (1)
    {
      if ((uint64_t)v21 < (uint64_t)(v20 - 1))
      {
        if (v21 >= v20)
          goto LABEL_32;
        v23 = v54;
        v24 = v19 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
        v25 = *(_QWORD *)(v55 + 72);
        sub_B06B8(v24 + v25 * v21, v54);
        v26 = type metadata accessor for ScoredCollectionRecommendation(0);
        v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48);
        if (v27(v23, 1, v26) == 1)
          goto LABEL_40;
        if ((v21 | 1) >= *(_QWORD *)(v19 + 16))
          goto LABEL_33;
        v28 = v50;
        sub_B06B8(v24 + v25 * (v21 | 1), v50);
        if (v27(v28, 1, v26) == 1)
          goto LABEL_41;
        v29 = *(int *)(v26 + 24);
        v30 = v54;
        v31 = *(double *)(v54 + v29);
        v32 = *(double *)(v28 + v29);
        sub_26AA0(v28, type metadata accessor for ScoredCollectionRecommendation);
        sub_26AA0(v30, type metadata accessor for ScoredCollectionRecommendation);
        if (v32 < v31)
          v21 |= 1uLL;
        v19 = *v0;
        v20 = *(_QWORD *)(*v0 + 16);
      }
      if (v22 >= v20)
        break;
      v33 = v56;
      v34 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
      v35 = v19 + v34;
      v36 = *(_QWORD *)(v55 + 72);
      v57 = v22;
      v37 = v36 * v22;
      sub_B06B8(v19 + v34 + v36 * v22, v56);
      v38 = type metadata accessor for ScoredCollectionRecommendation(0);
      v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 48);
      if (v39(v33, 1, v38) == 1)
        goto LABEL_38;
      if (v21 >= *(_QWORD *)(v19 + 16))
        goto LABEL_30;
      v40 = v36 * v21;
      v41 = v35 + v36 * v21;
      v42 = (uint64_t)v51;
      sub_B06B8(v41, (uint64_t)v51);
      if (v39(v42, 1, v38) == 1)
        goto LABEL_39;
      v43 = *(int *)(v38 + 24);
      v44 = v56;
      v45 = *(double *)(v56 + v43);
      v46 = *(double *)(v42 + v43);
      sub_26AA0(v42, type metadata accessor for ScoredCollectionRecommendation);
      result = sub_26AA0(v44, type metadata accessor for ScoredCollectionRecommendation);
      if (v46 >= v45)
        return result;
      if (v57 != v21)
      {
        v47 = *v0;
        v48 = *(_QWORD *)(*v0 + 16);
        if (v57 >= v48)
          goto LABEL_34;
        sub_B06B8(v47 + v34 + v37, v53);
        if (v21 >= v48)
          goto LABEL_35;
        sub_B06B8(v47 + v34 + v40, v52);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v47);
        *v0 = v47;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v47 = sub_6A554(v47);
          *v0 = v47;
        }
        if (v57 >= *(_QWORD *)(v47 + 16))
          goto LABEL_36;
        sub_B0888(v52, v47 + v34 + v37);
        if (v21 >= *(_QWORD *)(*v0 + 16))
          goto LABEL_37;
        result = sub_B0888(v53, *v0 + v34 + v40);
      }
      if ((uint64_t)(v21 + 0x4000000000000000) < 0)
        goto LABEL_31;
      v22 = v21;
      v19 = *v0;
      v20 = *(_QWORD *)(*v0 + 16);
      v21 *= 2;
      if (v20 <= v21)
        return result;
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  return result;
}

uint64_t sub_ABCB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t result;

  if (a7)
  {
    sub_40568(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for ScoredCollectionRecommendation(uint64_t a1)
{
  uint64_t result;

  result = qword_1F3488;
  if (!qword_1F3488)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ScoredCollectionRecommendation);
  return result;
}

uint64_t sub_ABD40()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_ABD64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t sub_ABD9C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_A7DA8(v1, a1);
}

Swift::Int sub_ABDA4(uint64_t (*a1)(uint64_t *, uint64_t *, __n128))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::Int v10;
  uint64_t v11;
  Swift::Int v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  Swift::Int v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  uint64_t v98;
  char v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  uint64_t *v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __n128 v145;
  char v146;
  char v147;
  Swift::Int v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  unint64_t v158;
  Swift::Int v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  Swift::Int v164;
  _QWORD *v165;
  Swift::Int v166;
  char *v167;
  Swift::Int v168;
  Swift::Int v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  char v181;
  uint64_t v182;
  char v183;
  uint64_t v184;
  __int128 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *__dst;
  uint64_t v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  Swift::Int v202;
  Swift::Int v203;
  Swift::Int v204;
  Swift::Int v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v211;
  char v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226;
  uint64_t v227;
  char v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;

  v3 = v2;
  v4 = v1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_139;
    if (v4)
      return sub_4DEC4(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 <= -2)
    goto LABEL_148;
  v168 = v4;
  v164 = result;
  v162 = v1;
  if (v4 < 2)
  {
    v9 = (char *)_swiftEmptyArrayStorage;
    __dst = &_swiftEmptyArrayStorage[4];
    v165 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      v73 = _swiftEmptyArrayStorage[2];
      goto LABEL_103;
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6 >> 1, &type metadata for ClusterableBook);
    *(_QWORD *)(v8 + 16) = v7;
    v165 = (_QWORD *)v8;
    __dst = (uint64_t *)(v8 + 32);
  }
  v10 = 0;
  v11 = *v1;
  v163 = *v1 + 168;
  v161 = *v1 + 104;
  v9 = (char *)_swiftEmptyArrayStorage;
  v12 = v168;
  v206 = *v1;
  while (1)
  {
    v13 = v10;
    v14 = v10 + 1;
    v166 = v10;
    v167 = v9;
    if (v10 + 1 < v12)
    {
      v15 = (uint64_t *)(v11 + 112 * v14);
      v16 = *((_BYTE *)v15 + 8);
      v17 = v15[2];
      v18 = *((_BYTE *)v15 + 24);
      v19 = v15[4];
      v20 = *((_BYTE *)v15 + 40);
      v21 = v15[7];
      v201 = v15[6];
      v22 = v15[8];
      v23 = v15[9];
      v24 = v15[11];
      v25 = v15[12];
      v193 = v15[13];
      v197 = v15[10];
      v225 = *v15;
      v226 = v16;
      v227 = v17;
      v228 = v18;
      v229 = v19;
      v230 = v20;
      v231 = v201;
      v232 = v21;
      v233 = v22;
      v234 = v23;
      v235 = v197;
      v236 = v24;
      v237 = v25;
      v238 = v193;
      v26 = (uint64_t *)(v11 + 112 * v13);
      v27 = *((_BYTE *)v26 + 8);
      v28 = v26[2];
      v29 = *((_BYTE *)v26 + 24);
      v207 = v3;
      v30 = v26[4];
      v31 = *((_BYTE *)v26 + 40);
      v32 = v26[7];
      v33 = v26[8];
      v34 = v26[9];
      v35 = v26[11];
      v177 = v26[10];
      v179 = v26[6];
      v37 = v26[12];
      v36 = v26[13];
      v211 = *v26;
      v212 = v27;
      v213 = v28;
      v214 = v29;
      v215 = v30;
      v216 = v31;
      v217 = v179;
      v218 = v32;
      v219 = v33;
      v220 = v34;
      v221 = v177;
      v222 = v35;
      v223 = v37;
      v224 = v36;
      v184 = v19;
      v181 = v20;
      sub_40554(v19, v20);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v197);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v193);
      swift_bridgeObjectRetain(v201);
      sub_40554(v30, v31);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v177);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v36);
      v38 = swift_bridgeObjectRetain(v179);
      v173 = a1(&v225, &v211, v38);
      if (v207)
      {
        sub_40568(v30, v31);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_40568(v184, v181);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_116:
        swift_bridgeObjectRelease();
        v165[2] = 0;
        return swift_bridgeObjectRelease();
      }
      sub_40568(v30, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_40568(v184, v181);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v166;
      v14 = v166 + 2;
      v12 = v168;
      if (v166 + 2 < v168)
      {
        v39 = v163 + 112 * v166;
        while (1)
        {
          v202 = v14;
          v40 = *(_BYTE *)(v39 + 64);
          v41 = *(_QWORD *)(v39 + 72);
          v42 = *(_BYTE *)(v39 + 80);
          v43 = *(_QWORD *)(v39 + 88);
          v44 = *(_BYTE *)(v39 + 96);
          v45 = *(_QWORD *)(v39 + 112);
          v46 = *(_QWORD *)(v39 + 120);
          v47 = *(_QWORD *)(v39 + 128);
          v48 = *(_QWORD *)(v39 + 136);
          v194 = *(_QWORD *)(v39 + 152);
          v198 = *(_QWORD *)(v39 + 104);
          v189 = *(_QWORD *)(v39 + 160);
          v191 = *(_QWORD *)(v39 + 144);
          v225 = *(_QWORD *)(v39 + 56);
          v226 = v40;
          v227 = v41;
          v228 = v42;
          v229 = v43;
          v230 = v44;
          v231 = v198;
          v232 = v45;
          v233 = v46;
          v234 = v47;
          v235 = v48;
          v236 = v191;
          v237 = v194;
          v238 = v189;
          v49 = *(_BYTE *)(v39 - 48);
          v50 = *(_QWORD *)(v39 - 40);
          v51 = *(_BYTE *)(v39 - 32);
          v52 = *(_QWORD *)(v39 - 24);
          v53 = *(_BYTE *)(v39 - 16);
          v54 = *(_QWORD *)v39;
          v55 = *(_QWORD *)(v39 + 8);
          v56 = *(_QWORD *)(v39 + 16);
          v57 = *(_QWORD *)(v39 + 32);
          v175 = *(_QWORD *)(v39 + 24);
          v178 = *(_QWORD *)(v39 - 8);
          v59 = *(_QWORD *)(v39 + 40);
          v58 = *(_QWORD *)(v39 + 48);
          v211 = *(_QWORD *)(v39 - 56);
          v212 = v49;
          v213 = v50;
          v214 = v51;
          v215 = v52;
          v216 = v53;
          v217 = v178;
          v218 = v54;
          v219 = v55;
          v220 = v56;
          v221 = v175;
          v222 = v57;
          v223 = v59;
          v224 = v58;
          v182 = v43;
          v180 = v44;
          sub_40554(v43, v44);
          swift_bridgeObjectRetain(v46);
          swift_bridgeObjectRetain(v48);
          swift_bridgeObjectRetain(v191);
          swift_bridgeObjectRetain(v194);
          swift_bridgeObjectRetain(v189);
          swift_bridgeObjectRetain(v198);
          sub_40554(v52, v53);
          swift_bridgeObjectRetain(v55);
          swift_bridgeObjectRetain(v175);
          swift_bridgeObjectRetain(v57);
          swift_bridgeObjectRetain(v59);
          swift_bridgeObjectRetain(v58);
          v60 = swift_bridgeObjectRetain(v178);
          LODWORD(v46) = a1(&v225, &v211, v60);
          sub_40568(v52, v53);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_40568(v182, v180);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (((v173 ^ v46) & 1) != 0)
            break;
          v14 = v202 + 1;
          v39 += 112;
          v12 = v168;
          if (v168 == v202 + 1)
          {
            v14 = v168;
            goto LABEL_21;
          }
        }
        v12 = v168;
        v14 = v202;
LABEL_21:
        v13 = v166;
      }
      v11 = v206;
      v3 = 0;
      v9 = v167;
      if ((v173 & 1) != 0)
      {
        if (v14 < v13)
          goto LABEL_143;
        if (v13 < v14)
        {
          v61 = 112 * v14;
          v203 = v14;
          v62 = v14;
          v63 = v13;
          v64 = 112 * v13;
          do
          {
            if (v63 != --v62)
            {
              if (!v11)
                goto LABEL_146;
              v65 = *(_QWORD *)(v11 + v64);
              v66 = v11 + v61;
              v67 = *(_BYTE *)(v11 + v64 + 8);
              v68 = *(_BYTE *)(v11 + v64 + 24);
              v192 = *(_QWORD *)(v11 + v64 + 32);
              v195 = *(_QWORD *)(v11 + v64 + 16);
              v190 = *(_BYTE *)(v11 + v64 + 40);
              v187 = *(_QWORD *)(v11 + v64 + 48);
              v69 = *(_QWORD *)(v11 + v64 + 72);
              v208 = *(_OWORD *)(v11 + v64 + 80);
              v199 = *(_OWORD *)(v11 + v64 + 96);
              v185 = *(_OWORD *)(v11 + v64 + 56);
              memmove((void *)(v11 + v64), (const void *)(v11 + v61 - 112), 0x70uLL);
              v11 = v206;
              *(_QWORD *)(v66 - 112) = v65;
              *(_BYTE *)(v66 - 104) = v67;
              *(_QWORD *)(v66 - 96) = v195;
              *(_BYTE *)(v66 - 88) = v68;
              *(_QWORD *)(v66 - 80) = v192;
              *(_BYTE *)(v66 - 72) = v190;
              *(_QWORD *)(v66 - 64) = v187;
              *(_OWORD *)(v66 - 56) = v185;
              *(_QWORD *)(v66 - 40) = v69;
              *(_OWORD *)(v66 - 32) = v208;
              *(_OWORD *)(v66 - 16) = v199;
              v9 = v167;
            }
            ++v63;
            v61 -= 112;
            v64 += 112;
          }
          while (v63 < v62);
          v12 = v168;
          v14 = v203;
          v13 = v166;
        }
      }
    }
    if (v14 >= v12)
      goto LABEL_41;
    if (__OFSUB__(v14, v13))
      goto LABEL_140;
    if (v14 - v13 >= v164)
    {
LABEL_41:
      if (v14 < v13)
        goto LABEL_138;
      goto LABEL_42;
    }
    if (__OFADD__(v13, v164))
      goto LABEL_141;
    v70 = v13 + v164 >= v12 ? v12 : v13 + v164;
    if (v70 < v13)
      break;
    if (v14 == v70)
      goto LABEL_41;
    v209 = v3;
    v121 = (_QWORD *)(v161 + 112 * v14);
    v159 = v70;
    do
    {
      v122 = (uint64_t *)(v11 + 112 * v14);
      v123 = *v122;
      v124 = *((_BYTE *)v122 + 8);
      v125 = v122[2];
      v126 = *((_BYTE *)v122 + 24);
      v127 = v122[4];
      v128 = *((_BYTE *)v122 + 40);
      v130 = v122[6];
      v129 = v122[7];
      v131 = v122[8];
      v132 = v122[9];
      v134 = v122[10];
      v133 = v122[11];
      v160 = v121;
      v136 = v122[12];
      v135 = v122[13];
      v205 = v14;
      while (1)
      {
        v169 = v13;
        v137 = *(v121 - 27);
        v225 = v123;
        v226 = v124 & 1;
        v227 = v125;
        v228 = v126 & 1;
        v229 = v127;
        v230 = v128;
        v231 = v130;
        v232 = v129;
        v233 = v131;
        v234 = v132;
        v235 = v134;
        v236 = v133;
        v237 = v136;
        v238 = v135;
        v138 = *((_BYTE *)v121 - 208);
        v139 = *(v121 - 25);
        v140 = *((_BYTE *)v121 - 192);
        v171 = *((_BYTE *)v121 - 176);
        v141 = *(v121 - 20);
        v170 = *(v121 - 19);
        v142 = *(v121 - 18);
        v196 = *(v121 - 17);
        v200 = *(v121 - 21);
        v172 = *(v121 - 23);
        v174 = *(v121 - 16);
        v143 = *(v121 - 14);
        v176 = *(v121 - 15);
        v211 = v137;
        v212 = v138;
        v213 = v139;
        v214 = v140;
        v215 = v172;
        v216 = v171;
        v217 = v200;
        v218 = v141;
        v219 = v170;
        v220 = v142;
        v221 = v196;
        v222 = v174;
        v223 = v176;
        v224 = v143;
        v186 = v127;
        v183 = v128;
        v144 = v135;
        sub_40554(v127, v128);
        swift_bridgeObjectRetain(v131);
        swift_bridgeObjectRetain(v134);
        swift_bridgeObjectRetain(v133);
        swift_bridgeObjectRetain(v136);
        swift_bridgeObjectRetain(v144);
        swift_bridgeObjectRetain(v130);
        sub_40554(v172, v171);
        swift_bridgeObjectRetain(v170);
        swift_bridgeObjectRetain(v196);
        swift_bridgeObjectRetain(v174);
        swift_bridgeObjectRetain(v176);
        swift_bridgeObjectRetain(v143);
        v145 = swift_bridgeObjectRetain(v200);
        v146 = a1(&v225, &v211, v145);
        if (v209)
        {
          sub_40568(v172, v171);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_40568(v186, v183);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_116;
        }
        v147 = v146;
        sub_40568(v172, v171);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_40568(v186, v183);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v147 & 1) == 0)
          break;
        v148 = v205;
        v11 = v206;
        if (!v206)
          goto LABEL_145;
        v123 = *(v121 - 13);
        v124 = *((_BYTE *)v121 - 96);
        v125 = *(v121 - 11);
        v126 = *((_BYTE *)v121 - 80);
        v127 = *(v121 - 9);
        v128 = *((_BYTE *)v121 - 64);
        v130 = *(v121 - 7);
        v129 = *(v121 - 6);
        v131 = *(v121 - 5);
        v132 = *(v121 - 4);
        v134 = *(v121 - 3);
        v133 = *(v121 - 2);
        v136 = *(v121 - 1);
        v135 = *v121;
        v149 = *(_OWORD *)(v121 - 17);
        *(_OWORD *)(v121 - 5) = *(_OWORD *)(v121 - 19);
        *(_OWORD *)(v121 - 3) = v149;
        *(_OWORD *)(v121 - 1) = *(_OWORD *)(v121 - 15);
        v150 = *(_OWORD *)(v121 - 25);
        *(_OWORD *)(v121 - 13) = *(_OWORD *)(v121 - 27);
        *(_OWORD *)(v121 - 11) = v150;
        v151 = *(_OWORD *)(v121 - 21);
        *(_OWORD *)(v121 - 9) = *(_OWORD *)(v121 - 23);
        *(_OWORD *)(v121 - 7) = v151;
        *(v121 - 14) = v135;
        v121 -= 14;
        *(v121 - 13) = v123;
        *((_BYTE *)v121 - 96) = v124;
        *(v121 - 11) = v125;
        *((_BYTE *)v121 - 80) = v126;
        *(v121 - 9) = v127;
        *((_BYTE *)v121 - 64) = v128;
        *(v121 - 7) = v130;
        *(v121 - 6) = v129;
        *(v121 - 5) = v131;
        *(v121 - 4) = v132;
        *(v121 - 3) = v134;
        *(v121 - 2) = v133;
        v13 = v169 + 1;
        *(v121 - 1) = v136;
        if (v205 == v169 + 1)
          goto LABEL_99;
      }
      v148 = v205;
      v11 = v206;
LABEL_99:
      v14 = v148 + 1;
      v121 = v160 + 14;
      v13 = v166;
    }
    while (v14 != v159);
    v14 = v159;
    v3 = 0;
    v9 = v167;
    if (v159 < v166)
      goto LABEL_138;
LABEL_42:
    if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
      v9 = sub_4E4E4(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    v72 = *((_QWORD *)v9 + 2);
    v71 = *((_QWORD *)v9 + 3);
    v73 = v72 + 1;
    v11 = v206;
    if (v72 >= v71 >> 1)
    {
      v152 = sub_4E4E4((char *)(v71 > 1), v72 + 1, 1, v9);
      v11 = v206;
      v9 = v152;
    }
    *((_QWORD *)v9 + 2) = v73;
    v74 = v9 + 32;
    v75 = &v9[16 * v72 + 32];
    *(_QWORD *)v75 = v166;
    *((_QWORD *)v75 + 1) = v14;
    v204 = v14;
    if (v72)
    {
LABEL_47:
      v76 = v73 - 1;
      if (v73 >= 4)
      {
        v81 = &v74[16 * v73];
        v82 = *((_QWORD *)v81 - 8);
        v83 = *((_QWORD *)v81 - 7);
        v87 = __OFSUB__(v83, v82);
        v84 = v83 - v82;
        if (v87)
          goto LABEL_123;
        v86 = *((_QWORD *)v81 - 6);
        v85 = *((_QWORD *)v81 - 5);
        v87 = __OFSUB__(v85, v86);
        v79 = v85 - v86;
        v80 = v87;
        if (v87)
          goto LABEL_124;
        v88 = v73 - 2;
        v89 = &v74[16 * v73 - 32];
        v91 = *(_QWORD *)v89;
        v90 = *((_QWORD *)v89 + 1);
        v87 = __OFSUB__(v90, v91);
        v92 = v90 - v91;
        if (v87)
          goto LABEL_126;
        v87 = __OFADD__(v79, v92);
        v93 = v79 + v92;
        if (v87)
          goto LABEL_129;
        if (v93 >= v84)
        {
          v111 = &v74[16 * v76];
          v113 = *(_QWORD *)v111;
          v112 = *((_QWORD *)v111 + 1);
          v87 = __OFSUB__(v112, v113);
          v114 = v112 - v113;
          if (v87)
            goto LABEL_133;
          v104 = v79 < v114;
        }
        else
        {
LABEL_60:
          if ((v80 & 1) != 0)
            goto LABEL_125;
          v88 = v73 - 2;
          v94 = &v74[16 * v73 - 32];
          v96 = *(_QWORD *)v94;
          v95 = *((_QWORD *)v94 + 1);
          v97 = __OFSUB__(v95, v96);
          v98 = v95 - v96;
          v99 = v97;
          if (v97)
            goto LABEL_128;
          v100 = &v74[16 * v76];
          v102 = *(_QWORD *)v100;
          v101 = *((_QWORD *)v100 + 1);
          v87 = __OFSUB__(v101, v102);
          v103 = v101 - v102;
          if (v87)
            goto LABEL_131;
          if (__OFADD__(v98, v103))
            goto LABEL_132;
          if (v98 + v103 < v79)
            goto LABEL_72;
          v104 = v79 < v103;
        }
        if (v104)
          v76 = v88;
      }
      else
      {
        if (v73 == 3)
        {
          v78 = *((_QWORD *)v9 + 4);
          v77 = *((_QWORD *)v9 + 5);
          v87 = __OFSUB__(v77, v78);
          v79 = v77 - v78;
          v80 = v87;
          goto LABEL_60;
        }
        v105 = *((_QWORD *)v9 + 4);
        v106 = *((_QWORD *)v9 + 5);
        v87 = __OFSUB__(v106, v105);
        v98 = v106 - v105;
        v99 = v87;
LABEL_72:
        if ((v99 & 1) != 0)
          goto LABEL_127;
        v107 = &v74[16 * v76];
        v109 = *(_QWORD *)v107;
        v108 = *((_QWORD *)v107 + 1);
        v87 = __OFSUB__(v108, v109);
        v110 = v108 - v109;
        if (v87)
          goto LABEL_130;
        if (v110 < v98)
          goto LABEL_89;
      }
      v115 = v76 - 1;
      if (v76 - 1 >= v73)
      {
        __break(1u);
LABEL_120:
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        __break(1u);
LABEL_136:
        __break(1u);
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
        break;
      }
      if (!v11)
        goto LABEL_144;
      v116 = &v74[16 * v115];
      v117 = *(_QWORD *)v116;
      v118 = &v74[16 * v76];
      v119 = *((_QWORD *)v118 + 1);
      sub_ACCC8((uint64_t *)(v11 + 112 * *(_QWORD *)v116), (uint64_t *)(v11 + 112 * *(_QWORD *)v118), v11 + 112 * v119, __dst, a1);
      if (v3)
        goto LABEL_116;
      if (v119 < v117)
        goto LABEL_120;
      if (v76 > *((_QWORD *)v9 + 2))
        goto LABEL_121;
      *(_QWORD *)v116 = v117;
      *(_QWORD *)&v74[16 * v115 + 8] = v119;
      v120 = *((_QWORD *)v9 + 2);
      if (v76 >= v120)
        goto LABEL_122;
      v73 = v120 - 1;
      memmove(&v74[16 * v76], v118 + 16, 16 * (v120 - 1 - v76));
      *((_QWORD *)v9 + 2) = v120 - 1;
      v11 = v206;
      if (v120 <= 2)
        goto LABEL_89;
      goto LABEL_47;
    }
    v73 = 1;
LABEL_89:
    v12 = v168;
    v10 = v204;
    if (v204 >= v168)
    {
LABEL_103:
      if (v73 >= 2)
      {
        v153 = *v162;
        while (1)
        {
          v154 = v73 - 2;
          if (v73 < 2)
            goto LABEL_134;
          if (!v153)
            goto LABEL_147;
          v155 = *(_QWORD *)&v9[16 * v154 + 32];
          v156 = *(_QWORD *)&v9[16 * v73 + 24];
          sub_ACCC8((uint64_t *)(v153 + 112 * v155), (uint64_t *)(v153 + 112 * *(_QWORD *)&v9[16 * v73 + 16]), v153 + 112 * v156, __dst, a1);
          if (v3)
            goto LABEL_116;
          if (v156 < v155)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
            v9 = sub_4ECA8((uint64_t)v9);
          if (v154 >= *((_QWORD *)v9 + 2))
            goto LABEL_136;
          v157 = &v9[16 * v154 + 32];
          *(_QWORD *)v157 = v155;
          *((_QWORD *)v157 + 1) = v156;
          v158 = *((_QWORD *)v9 + 2);
          if (v73 > v158)
            goto LABEL_137;
          memmove(&v9[16 * v73 + 16], &v9[16 * v73 + 32], 16 * (v158 - v73));
          *((_QWORD *)v9 + 2) = v158 - 1;
          v73 = v158 - 1;
          if (v158 <= 2)
            goto LABEL_116;
        }
      }
      goto LABEL_116;
    }
  }
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_ACCC8(uint64_t *__src, uint64_t *a2, unint64_t a3, uint64_t *__dst, uint64_t (*a5)(uint64_t *, uint64_t *, __n128))
{
  char *v5;
  uint64_t *v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  char v33;
  char v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  char v62;
  char v63;
  char *v64;
  char *v65;
  uint64_t result;
  char *v67;
  char *v68;
  char *v69;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v78;
  char *__dsta;
  char *__dstb;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  char *__srca;
  char *__srcb;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t *v125;
  char *v126;

  v5 = (char *)a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = ((char *)a2 - (char *)__src) / 112;
  v9 = a3 - (_QWORD)a2;
  v10 = (uint64_t)(a3 - (_QWORD)a2) / 112;
  v126 = (char *)__src;
  v125 = __dst;
  v91 = __dst;
  if (v8 >= v10)
  {
    if (v9 > -112)
    {
      if (__dst != a2 || &a2[14 * v10] <= __dst)
      {
        memmove(__dst, a2, 112 * v10);
        __dst = v91;
      }
      v37 = (char *)&__dst[14 * v10];
      v124 = v37;
      v126 = v5;
      if (v6 >= (uint64_t *)v5 || v9 < 112)
        goto LABEL_45;
      v38 = (char *)(a3 - 112);
      v39 = v5;
      __dstb = (char *)v6;
      while (1)
      {
        v78 = v38;
        __srcb = v5;
        v68 = v37;
        v40 = *((_QWORD *)v37 - 14);
        v37 -= 112;
        v41 = v37[8];
        v42 = *((_QWORD *)v37 + 2);
        v43 = v37[24];
        v44 = *((_QWORD *)v37 + 4);
        v45 = v37[40];
        v47 = *((_QWORD *)v37 + 6);
        v46 = *((_QWORD *)v37 + 7);
        v48 = *((_QWORD *)v37 + 9);
        v88 = *((_QWORD *)v37 + 10);
        v90 = *((_QWORD *)v37 + 8);
        v82 = *((_QWORD *)v37 + 12);
        v84 = *((_QWORD *)v37 + 13);
        v86 = *((_QWORD *)v37 + 11);
        v110 = v40;
        v111 = v41;
        v112 = v42;
        v113 = v43;
        v114 = v44;
        v115 = v45;
        v116 = v47;
        v117 = v46;
        v118 = v90;
        v119 = v48;
        v120 = v88;
        v121 = v86;
        v122 = v82;
        v123 = v84;
        v49 = *((_QWORD *)v39 - 14);
        v39 -= 112;
        v50 = v39[8];
        v51 = *((_QWORD *)v39 + 2);
        v52 = v39[24];
        v53 = *((_QWORD *)v39 + 4);
        v54 = v39[40];
        v55 = *((_QWORD *)v39 + 7);
        v56 = *((_QWORD *)v39 + 8);
        v57 = *((_QWORD *)v39 + 9);
        v58 = *((_QWORD *)v39 + 10);
        v59 = *((_QWORD *)v39 + 11);
        v60 = *((_QWORD *)v39 + 13);
        v75 = *((_QWORD *)v39 + 12);
        v76 = *((_QWORD *)v39 + 6);
        v96 = v49;
        v97 = v50;
        v98 = v51;
        v99 = v52;
        v100 = v53;
        v101 = v54;
        v102 = v76;
        v103 = v55;
        v104 = v56;
        v105 = v57;
        v106 = v58;
        v107 = v59;
        v108 = v75;
        v109 = v60;
        v73 = v44;
        v71 = v45;
        sub_40554(v44, v45);
        swift_bridgeObjectRetain(v90);
        swift_bridgeObjectRetain(v88);
        swift_bridgeObjectRetain(v86);
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRetain(v47);
        sub_40554(v53, v54);
        swift_bridgeObjectRetain(v56);
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v75);
        swift_bridgeObjectRetain(v60);
        v61 = swift_bridgeObjectRetain(v76);
        v62 = a5(&v110, &v96, v61);
        if (v95)
          break;
        v63 = v62;
        v67 = v78 + 112;
        sub_40568(v53, v54);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_40568(v73, v71);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v63 & 1) != 0)
        {
          v64 = v78;
          v65 = __dstb;
          if (v67 != __srcb || v78 >= __srcb)
            memmove(v78, v39, 0x70uLL);
          v126 = v39;
          v37 = v68;
        }
        else
        {
          v124 = v37;
          v64 = v78;
          v65 = __dstb;
          v39 = __srcb;
          if (v67 < v68 || v78 >= v68 || v67 != v68)
            memmove(v78, v37, 0x70uLL);
        }
        if (v37 > (char *)v91)
        {
          v38 = v64 - 112;
          v5 = v39;
          if (v39 > v65)
            continue;
        }
        goto LABEL_45;
      }
      sub_40568(v53, v54);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_40568(v73, v71);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
  }
  else if (v7 > -112)
  {
    if (__dst != __src || &__src[14 * v8] <= __dst)
    {
      memmove(__dst, __src, 112 * v8);
      __dst = v91;
    }
    v69 = (char *)&__dst[14 * v8];
    v124 = v69;
    if ((unint64_t)v5 >= a3 || v7 < 112)
      goto LABEL_45;
    while (1)
    {
      __dsta = (char *)v6;
      v11 = v5[8];
      v12 = *((_QWORD *)v5 + 2);
      v13 = v5[24];
      v14 = *((_QWORD *)v5 + 4);
      v15 = v5[40];
      v16 = *((_QWORD *)v5 + 7);
      v17 = *((_QWORD *)v5 + 8);
      v18 = *((_QWORD *)v5 + 9);
      v19 = *((_QWORD *)v5 + 10);
      v20 = *((_QWORD *)v5 + 11);
      v85 = *((_QWORD *)v5 + 12);
      __srca = v5;
      v87 = *((_QWORD *)v5 + 13);
      v89 = *((_QWORD *)v5 + 6);
      v110 = *(_QWORD *)v5;
      v111 = v11;
      v112 = v12;
      v113 = v13;
      v114 = v14;
      v115 = v15;
      v116 = v89;
      v117 = v16;
      v118 = v17;
      v119 = v18;
      v120 = v19;
      v121 = v20;
      v122 = v85;
      v123 = v87;
      v21 = *((_BYTE *)__dst + 8);
      v22 = __dst[2];
      v23 = *((_BYTE *)__dst + 24);
      v24 = __dst[4];
      v25 = *((_BYTE *)__dst + 40);
      v26 = __dst[7];
      v27 = __dst[8];
      v28 = __dst[9];
      v29 = __dst[11];
      v81 = __dst[6];
      v83 = __dst[10];
      v31 = __dst[12];
      v30 = __dst[13];
      v92 = __dst;
      v96 = *__dst;
      v97 = v21;
      v98 = v22;
      v99 = v23;
      v100 = v24;
      v101 = v25;
      v102 = v81;
      v103 = v26;
      v104 = v27;
      v105 = v28;
      v106 = v83;
      v107 = v29;
      v108 = v31;
      v109 = v30;
      v74 = v14;
      v72 = v15;
      sub_40554(v14, v15);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v87);
      swift_bridgeObjectRetain(v89);
      sub_40554(v24, v25);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v30);
      v32 = swift_bridgeObjectRetain(v81);
      v33 = a5(&v110, &v96, v32);
      if (v95)
        break;
      v34 = v33;
      sub_40568(v24, v25);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_40568(v74, v72);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v34 & 1) != 0)
      {
        v35 = __srca + 112;
        v36 = __dsta;
        if (__dsta < __srca || __dsta >= v35 || __dsta != __srca)
          memmove(__dsta, __srca, 0x70uLL);
        __dst = v92;
      }
      else
      {
        v35 = __srca;
        v36 = __dsta;
        if (__dsta != (char *)v92 || __dsta >= (char *)v92 + 112)
          memmove(__dsta, v92, 0x70uLL);
        v125 = v92 + 14;
        __dst = v92 + 14;
      }
      v6 = (uint64_t *)(v36 + 112);
      v126 = (char *)v6;
      if (__dst < (uint64_t *)v69)
      {
        v5 = v35;
        if ((unint64_t)v35 < a3)
          continue;
      }
      goto LABEL_45;
    }
    sub_40568(v24, v25);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_40568(v74, v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_44:
    swift_bridgeObjectRelease();
LABEL_45:
    sub_4E90C((void **)&v126, (const void **)&v125, &v124);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_AD48C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  int64_t v28;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v37 = type metadata accessor for ScoredCollectionRecommendation(0);
  __chkstk_darwin(v37);
  v39 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = v5;
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v8 = _swiftEmptyArrayStorage;
  v36[1] = a1;
  v9 = 0;
  if (v7 != a2)
  {
    v14 = (v6 + 32) & ~v6;
    v15 = (char *)_swiftEmptyArrayStorage + v14;
    v41 = v14;
    v16 = a1 + v14;
    v38 = v6 | 7;
    if (v7 <= a2)
      v17 = a2;
    else
      v17 = v7;
    v42 = v17;
    v18 = _swiftEmptyArrayStorage;
    v20 = (uint64_t)v39;
    v19 = v40;
    while (v42 != a2)
    {
      v21 = *(_QWORD *)(v19 + 72);
      sub_26A5C(v16 + v21 * a2, v20, type metadata accessor for ScoredCollectionRecommendation);
      if (v9)
      {
        v8 = v18;
        v12 = __OFSUB__(v9--, 1);
        if (v12)
          goto LABEL_35;
      }
      else
      {
        v22 = v18[3];
        if ((uint64_t)((v22 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_37;
        v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
        if (v23 <= 1)
          v24 = 1;
        else
          v24 = v23;
        v25 = sub_5EDC(&qword_1F1250);
        v26 = v41;
        v8 = (_QWORD *)swift_allocObject(v25, v41 + v24 * v21, v38);
        v27 = j__malloc_size(v8);
        if (!v21)
          goto LABEL_38;
        v28 = v27 - v26;
        if (v27 - v26 == 0x8000000000000000 && v21 == -1)
          goto LABEL_39;
        v30 = v28 / v21;
        v8[2] = v24;
        v8[3] = 2 * (v28 / v21);
        v31 = (char *)v8 + v26;
        v32 = v18[3] >> 1;
        v33 = v32 * v21;
        if (v18[2])
        {
          if (v8 < v18 || v31 >= (char *)v18 + v41 + v33)
          {
            swift_arrayInitWithTakeFrontToBack(v31, (char *)v18 + v41, v32, v37);
          }
          else if (v8 != v18)
          {
            swift_arrayInitWithTakeBackToFront(v31);
          }
          v18[2] = 0;
        }
        v15 = &v31[v33];
        v35 = (v30 & 0x7FFFFFFFFFFFFFFFLL) - v32;
        swift_release(v18);
        v20 = (uint64_t)v39;
        v19 = v40;
        v12 = __OFSUB__(v35, 1);
        v9 = v35 - 1;
        if (v12)
        {
LABEL_35:
          __break(1u);
          break;
        }
      }
      ++a2;
      sub_A2618(v20, (uint64_t)v15, type metadata accessor for ScoredCollectionRecommendation);
      v15 += v21;
      v18 = v8;
      if (v7 == a2)
        goto LABEL_2;
    }
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_2:
  swift_bridgeObjectRelease();
  v10 = v8[3];
  if (v10 < 2)
    return;
  v11 = v10 >> 1;
  v12 = __OFSUB__(v11, v9);
  v13 = v11 - v9;
  if (v12)
  {
LABEL_40:
    __break(1u);
    return;
  }
  v8[2] = v13;
}

void sub_AD6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = _swiftEmptyArrayStorage;
  v4 = v2 - a2;
  if (v2 != a2)
  {
    if (v2 <= a2)
      goto LABEL_33;
    if (a2 < 0)
    {
LABEL_34:
      __break(1u);
    }
    else if (v2)
    {
      v7 = a1;
      swift_bridgeObjectRetain(a1);
      v5 = 0;
      v8 = &_swiftEmptyArrayStorage[4];
      v9 = 48 * a2;
      v30 = v10;
      while (1)
      {
        v11 = *(_QWORD *)(v7 + v9 + 32);
        v31 = *(_OWORD *)(v7 + v9 + 40);
        v12 = *(_QWORD *)(v7 + v9 + 56);
        v13 = *(_QWORD *)(v7 + v9 + 64);
        v14 = *(_BYTE *)(v7 + v9 + 72);
        if (v5)
        {
          swift_bridgeObjectRetain(v11);
          swift_bridgeObjectRetain(v12);
          swift_bridgeObjectRetain(v13);
          v15 = __OFSUB__(v5--, 1);
          if (v15)
            goto LABEL_31;
        }
        else
        {
          v16 = v3[3];
          if ((uint64_t)((v16 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_32;
          v17 = v16 & 0xFFFFFFFFFFFFFFFELL;
          if (v17 <= 1)
            v18 = 1;
          else
            v18 = v17;
          v19 = sub_5EDC(&qword_1F1238);
          v20 = (_QWORD *)swift_allocObject(v19, 48 * v18 + 32, 7);
          v21 = (uint64_t)(j__malloc_size(v20) - 32) / 48;
          v20[2] = v18;
          v20[3] = 2 * v21;
          v22 = v20 + 4;
          v23 = v3[3] >> 1;
          v24 = 6 * v23;
          v25 = (v21 & 0x7FFFFFFFFFFFFFFFLL) - v23;
          v8 = &v20[6 * v23 + 4];
          if (v3[2])
          {
            if (v20 != v3 || v22 >= &v3[v24 + 4])
              memmove(v22, v3 + 4, v24 * 8);
            swift_bridgeObjectRetain(v11);
            swift_bridgeObjectRetain(v12);
            swift_bridgeObjectRetain(v13);
            v3[2] = 0;
          }
          else
          {
            swift_bridgeObjectRetain(v11);
            swift_bridgeObjectRetain(v12);
            swift_bridgeObjectRetain(v13);
          }
          swift_release(v3);
          v3 = v20;
          v7 = v30;
          v15 = __OFSUB__(v25, 1);
          v5 = v25 - 1;
          if (v15)
          {
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
        }
        *v8 = v11;
        *(_OWORD *)(v8 + 1) = v31;
        v8[3] = v12;
        v8[4] = v13;
        *((_BYTE *)v8 + 40) = v14;
        v8 += 6;
        v9 += 48;
        if (!--v4)
        {
          swift_bridgeObjectRelease();
          goto LABEL_27;
        }
      }
    }
    __break(1u);
    goto LABEL_36;
  }
  v5 = 0;
LABEL_27:
  v27 = v3[3];
  if (v27 >= 2)
  {
    v28 = v27 >> 1;
    v15 = __OFSUB__(v28, v5);
    v29 = v28 - v5;
    if (!v15)
    {
      v3[2] = v29;
      return;
    }
LABEL_36:
    __break(1u);
  }
}

BOOL sub_AD90C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  double v27;
  double v28;
  _BYTE v30[16];

  v4 = type metadata accessor for ScoredCollectionRecommendation(0);
  v5 = __chkstk_darwin(v4);
  v7 = &v30[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __chkstk_darwin(v5);
  v10 = &v30[-v9];
  v11 = __chkstk_darwin(v8);
  v13 = &v30[-v12];
  __chkstk_darwin(v11);
  v15 = &v30[-v14];
  CollectionRecommendation.collectionRecommendationType.getter();
  v16 = v30[15];
  CollectionRecommendation.collectionRecommendationType.getter();
  sub_79370(v16);
  v18 = v17;
  sub_26A5C(a1, (uint64_t)v15, type metadata accessor for ScoredCollectionRecommendation);
  sub_26A5C(a2, (uint64_t)v13, type metadata accessor for ScoredCollectionRecommendation);
  if ((v18 & 1) == 0)
  {
    sub_26AA0((uint64_t)v13, type metadata accessor for ScoredCollectionRecommendation);
    sub_26AA0((uint64_t)v15, type metadata accessor for ScoredCollectionRecommendation);
    sub_26A5C(a1, (uint64_t)v10, type metadata accessor for ScoredCollectionRecommendation);
    sub_26A5C(a2, (uint64_t)v7, type metadata accessor for ScoredCollectionRecommendation);
    goto LABEL_19;
  }
  v19 = 0x6B6F6F6265;
  v20 = *(int *)(v4 + 20);
  v21 = v15[v20];
  v22 = v13[v20];
  if (!v21)
  {
    v24 = 0xE500000000000000;
    v23 = 0x6B6F6F6265;
    if (!v22)
      goto LABEL_12;
    goto LABEL_8;
  }
  if (v21 != 1)
  {
    v24 = 0xE500000000000000;
    v23 = 0x646578696DLL;
    if (!v22)
      goto LABEL_12;
LABEL_8:
    if (v22 == 1)
    {
      v19 = 0x6F6F626F69647561;
      v25 = 0xE90000000000006BLL;
      if (v23 != 0x6F6F626F69647561)
        goto LABEL_17;
    }
    else
    {
      v25 = 0xE500000000000000;
      v19 = 0x646578696DLL;
      if (v23 != 0x646578696DLL)
        goto LABEL_17;
    }
LABEL_15:
    if (v24 == v25)
    {
      swift_bridgeObjectRelease_n(v24, 2);
      sub_26AA0((uint64_t)v13, type metadata accessor for ScoredCollectionRecommendation);
      sub_26AA0((uint64_t)v15, type metadata accessor for ScoredCollectionRecommendation);
      sub_26A5C(a1, (uint64_t)v10, type metadata accessor for ScoredCollectionRecommendation);
      sub_26A5C(a2, (uint64_t)v7, type metadata accessor for ScoredCollectionRecommendation);
LABEL_18:
      v27 = *(double *)&v10[*(int *)(v4 + 24)];
      sub_26AA0((uint64_t)v10, type metadata accessor for ScoredCollectionRecommendation);
      v28 = *(double *)&v7[*(int *)(v4 + 24)];
      sub_26AA0((uint64_t)v7, type metadata accessor for ScoredCollectionRecommendation);
      return v27 == v28;
    }
    goto LABEL_17;
  }
  v23 = 0x6F6F626F69647561;
  v24 = 0xE90000000000006BLL;
  if (v22)
    goto LABEL_8;
LABEL_12:
  v25 = 0xE500000000000000;
  if (v23 == 0x6B6F6F6265)
    goto LABEL_15;
LABEL_17:
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v19, v25, 0);
  swift_bridgeObjectRelease(v24);
  swift_bridgeObjectRelease(v25);
  sub_26AA0((uint64_t)v13, type metadata accessor for ScoredCollectionRecommendation);
  sub_26AA0((uint64_t)v15, type metadata accessor for ScoredCollectionRecommendation);
  sub_26A5C(a1, (uint64_t)v10, type metadata accessor for ScoredCollectionRecommendation);
  sub_26A5C(a2, (uint64_t)v7, type metadata accessor for ScoredCollectionRecommendation);
  if ((v26 & 1) != 0)
    goto LABEL_18;
LABEL_19:
  sub_26AA0((uint64_t)v7, type metadata accessor for ScoredCollectionRecommendation);
  sub_26AA0((uint64_t)v10, type metadata accessor for ScoredCollectionRecommendation);
  return 0;
}

uint64_t sub_ADC54(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  __int128 v33;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return (uint64_t)_swiftEmptyArrayStorage;
  v3 = 0;
  v22 = *(_BYTE *)(a2 + 121);
  v4 = result + 64;
  v19 = v2 - 1;
  v5 = _swiftEmptyArrayStorage;
  v29 = *(_QWORD *)(result + 16);
  v30 = a2;
  v20 = result + 64;
  do
  {
    v21 = v5;
    if (v3 <= v2)
      v6 = v2;
    else
      v6 = v3;
    v7 = v4 + 112 * v3;
    v8 = v3;
    v23 = v6;
    while (1)
    {
      if (v6 == v8)
      {
        __break(1u);
        return result;
      }
      v9 = *(_QWORD *)v7;
      v10 = *(_BYTE *)(v7 + 8);
      v11 = *(_QWORD *)(v7 + 16);
      v12 = *(_QWORD *)(v7 + 32);
      v13 = *(_QWORD *)(v7 + 40);
      if ((*(_BYTE *)(v7 - 8) & 1) != 0)
        break;
      v24 = *(_QWORD *)(v7 + 24);
      v25 = *(_BYTE *)(v7 - 8);
      v26 = *(_QWORD *)(v7 - 16);
      v27 = *(_BYTE *)(v7 - 24);
      v28 = *(_QWORD *)(v7 - 32);
      v33 = *(_OWORD *)(v7 + 48);
      v32 = *(_OWORD *)(v7 + 64);
      sub_40554(v9, v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(*((_QWORD *)&v33 + 1));
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(*((_QWORD *)&v32 + 1));
      sub_40554(v9, v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain_n(v12, 2);
      v31 = v10;
      sub_40568(v9, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v22 & 1) != 0)
        goto LABEL_14;
      sub_40568(v9, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v2 = v29;
      a2 = v30;
      v6 = v23;
LABEL_8:
      ++v8;
      v7 += 112;
      if (v2 == v8)
        return (uint64_t)v21;
    }
    if ((*(_BYTE *)(a2 + 120) & 1) == 0)
      goto LABEL_8;
    v24 = *(_QWORD *)(v7 + 24);
    v25 = *(_BYTE *)(v7 - 8);
    v26 = *(_QWORD *)(v7 - 16);
    v27 = *(_BYTE *)(v7 - 24);
    v28 = *(_QWORD *)(v7 - 32);
    v31 = *(_BYTE *)(v7 + 8);
    v33 = *(_OWORD *)(v7 + 48);
    v32 = *(_OWORD *)(v7 + 64);
    sub_40554(v9, v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(*((_QWORD *)&v33 + 1));
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(*((_QWORD *)&v32 + 1));
    swift_bridgeObjectRetain(v11);
LABEL_14:
    result = swift_isUniquelyReferenced_nonNull_native(v21);
    v5 = v21;
    if ((result & 1) == 0)
    {
      result = sub_3432C(0, v21[2] + 1, 1);
      v5 = v21;
    }
    v14 = v33;
    v15 = v32;
    v17 = v5[2];
    v16 = v5[3];
    if (v17 >= v16 >> 1)
    {
      result = sub_3432C(v16 > 1, v17 + 1, 1);
      v15 = v32;
      v14 = v33;
      v5 = v21;
    }
    v5[2] = v17 + 1;
    v18 = &v5[14 * v17];
    v18[4] = v28;
    v3 = v8 + 1;
    *((_BYTE *)v18 + 40) = v27;
    v18[6] = v26;
    *((_BYTE *)v18 + 56) = v25;
    v18[8] = v9;
    *((_BYTE *)v18 + 72) = v31;
    v18[10] = v11;
    v18[11] = v24;
    v18[12] = v12;
    v18[13] = v13;
    *((_OWORD *)v18 + 7) = v14;
    *((_OWORD *)v18 + 8) = v15;
    v4 = v20;
    v2 = v29;
    a2 = v30;
  }
  while (v19 != v8);
  return (uint64_t)v5;
}

uint64_t sub_ADFC4(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return (uint64_t)_swiftEmptyArrayStorage;
  v3 = a2;
  v4 = 0;
  v24 = result + 32;
  v5 = a2 + 56;
  v6 = _swiftEmptyArrayStorage;
  do
  {
    v23 = v6;
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    while (1)
    {
      if (v4 == v7)
      {
        __break(1u);
        return result;
      }
      v8 = v24 + 112 * v4;
      v9 = *(_QWORD *)v8;
      v28 = *(_BYTE *)(v8 + 8);
      v27 = *(_QWORD *)(v8 + 16);
      v26 = *(_BYTE *)(v8 + 24);
      v29 = *(_QWORD *)(v8 + 32);
      v10 = *(_BYTE *)(v8 + 40);
      v11 = *(_QWORD *)(v8 + 48);
      v25 = *(_QWORD *)(v8 + 56);
      v12 = *(_QWORD *)(v8 + 64);
      v13 = *(_QWORD *)(v8 + 72);
      v30 = *(_OWORD *)(v8 + 96);
      v31 = *(_OWORD *)(v8 + 80);
      ++v4;
      if (!*(_QWORD *)(v3 + 16))
        break;
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), v9);
      v14 = -1 << *(_BYTE *)(v3 + 32);
      v15 = result & ~v14;
      if (((*(_QWORD *)(v5 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
        break;
      v16 = *(_QWORD *)(v3 + 48);
      if (*(_QWORD *)(v16 + 8 * v15) != v9)
      {
        v17 = ~v14;
        do
        {
          v15 = (v15 + 1) & v17;
          if (((*(_QWORD *)(v5 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            goto LABEL_15;
        }
        while (*(_QWORD *)(v16 + 8 * v15) != v9);
      }
      if (v4 == v2)
        return (uint64_t)v23;
    }
LABEL_15:
    sub_40554(v29, v10);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(*((_QWORD *)&v31 + 1));
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(*((_QWORD *)&v30 + 1));
    swift_bridgeObjectRetain(v11);
    v6 = v23;
    result = swift_isUniquelyReferenced_nonNull_native(v23);
    if ((result & 1) == 0)
    {
      result = sub_3432C(0, v23[2] + 1, 1);
      v6 = v23;
    }
    v19 = v6[2];
    v18 = v6[3];
    v20 = v19 + 1;
    if (v19 >= v18 >> 1)
    {
      result = sub_3432C(v18 > 1, v19 + 1, 1);
      v20 = v19 + 1;
      v6 = v23;
    }
    v6[2] = v20;
    v21 = &v6[14 * v19];
    v21[4] = v9;
    *((_BYTE *)v21 + 40) = v28;
    v21[6] = v27;
    *((_BYTE *)v21 + 56) = v26;
    v21[8] = v29;
    *((_BYTE *)v21 + 72) = v10;
    v21[10] = v11;
    v21[11] = v25;
    v21[12] = v12;
    v21[13] = v13;
    *((_OWORD *)v21 + 7) = v31;
    *((_OWORD *)v21 + 8) = v30;
    v3 = a2;
  }
  while (v4 != v2);
  return (uint64_t)v6;
}

uint64_t sub_AE254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t i;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;

  v4 = a1 + 56;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  i = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (i << 6);
      goto LABEL_22;
    }
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    if (v13 >= v8)
      goto LABEL_29;
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++i;
    if (!v14)
    {
      i = v13 + 1;
      if (v13 + 1 >= v8)
        goto LABEL_29;
      v14 = *(_QWORD *)(v4 + 8 * i);
      if (!v14)
      {
        i = v13 + 2;
        if (v13 + 2 >= v8)
          goto LABEL_29;
        v14 = *(_QWORD *)(v4 + 8 * i);
        if (!v14)
        {
          i = v13 + 3;
          if (v13 + 3 >= v8)
            goto LABEL_29;
          v14 = *(_QWORD *)(v4 + 8 * i);
          if (!v14)
          {
            v15 = v13 + 4;
            if (v15 >= v8)
            {
LABEL_29:
              swift_release(a1);
              return 0;
            }
            v14 = *(_QWORD *)(v4 + 8 * v15);
            for (i = v15; !v14; ++v15)
            {
              i = v15 + 1;
              if (__OFADD__(v15, 1))
                goto LABEL_35;
              if (i >= v8)
                goto LABEL_29;
              v14 = *(_QWORD *)(v4 + 8 * i);
            }
          }
        }
      }
    }
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (i << 6);
LABEL_22:
    if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + v12))
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 48) + v12) != 1)
      {
LABEL_28:
        swift_release(a1);
        return 1;
      }
      if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      {
        swift_release(a1);
        v18 = 0xE90000000000006BLL;
        goto LABEL_32;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
      v17 = 0xE500000000000000;
    }
    else
    {
      if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      {
        swift_release(a1);
        v18 = 0xE500000000000000;
LABEL_32:
        swift_bridgeObjectRelease(v18);
        return 1;
      }
      v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
      v17 = 0xE90000000000006BLL;
    }
    result = swift_bridgeObjectRelease(v17);
    if ((v16 & 1) != 0)
      goto LABEL_28;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t sub_AE47C(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t i;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;

  v2 = *(_QWORD *)(result + 16);
  if (!v2)
    return (uint64_t)_swiftEmptyArrayStorage;
  v4 = 0;
  v5 = result + 32;
  v6 = _swiftEmptyArrayStorage;
  v22 = result + 32;
  do
  {
    if (v4 <= v2)
      v7 = v2;
    else
      v7 = v4;
    v8 = (__int128 *)(v5 + 112 * v4);
    for (i = v4; ; ++i)
    {
      if (v7 == i)
      {
        __break(1u);
        return result;
      }
      v10 = v8[5];
      v27 = v8[4];
      v28 = v10;
      v29 = v8[6];
      v11 = v8[1];
      v23 = *v8;
      v24 = v11;
      v12 = v8[3];
      v4 = i + 1;
      v25 = v8[2];
      v26 = v12;
      sub_522D8((uint64_t)&v23);
      sub_522D8((uint64_t)&v23);
      v13 = sub_AE254(a2, (uint64_t)&v23);
      sub_B0490((uint64_t)&v23);
      if ((v13 & 1) == 0)
        break;
      result = sub_B0490((uint64_t)&v23);
      v8 += 7;
      if (v2 == v4)
        return (uint64_t)v6;
    }
    result = swift_isUniquelyReferenced_nonNull_native(v6);
    v30 = v6;
    if ((result & 1) == 0)
    {
      result = sub_3432C(0, v6[2] + 1, 1);
      v6 = v30;
    }
    v15 = v6[2];
    v14 = v6[3];
    if (v15 >= v14 >> 1)
    {
      result = sub_3432C(v14 > 1, v15 + 1, 1);
      v6 = v30;
    }
    v6[2] = v15 + 1;
    v16 = &v6[14 * v15];
    v17 = v23;
    v18 = v25;
    v16[3] = v24;
    v16[4] = v18;
    v16[2] = v17;
    v19 = v26;
    v20 = v27;
    v21 = v29;
    v16[7] = v28;
    v16[8] = v21;
    v16[5] = v19;
    v16[6] = v20;
    v5 = v22;
  }
  while (v2 - 1 != i);
  return (uint64_t)v6;
}

uint64_t sub_AE628(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;

  v4 = *(_QWORD *)(result + 16);
  if (!v4)
    return (uint64_t)_swiftEmptyArrayStorage;
  v5 = 0;
  v31 = result + 32;
  v35 = a3 + 56;
  v6 = _swiftEmptyArrayStorage;
  v30 = *(_QWORD *)(result + 16);
  do
  {
    v25 = v6;
    if (v5 <= v4)
      v7 = v4;
    else
      v7 = v5;
    v34 = v7;
    while (1)
    {
      if (v5 == v34)
      {
        __break(1u);
        return result;
      }
      v8 = v31 + 112 * v5;
      v9 = *(_QWORD *)v8;
      v36 = *(unsigned __int8 *)(v8 + 8);
      v29 = *(_BYTE *)(v8 + 24);
      v10 = *(_BYTE *)(v8 + 40);
      v11 = *(_QWORD *)(v8 + 48);
      v27 = *(_QWORD *)(v8 + 16);
      v28 = *(_QWORD *)(v8 + 56);
      v12 = *(_QWORD *)(v8 + 64);
      v13 = *(_QWORD *)(v8 + 72);
      v40 = *(_OWORD *)(v8 + 80);
      v39 = *(_OWORD *)(v8 + 96);
      ++v5;
      v14 = *(_QWORD *)(a2 + 32);
      v37 = *(_QWORD *)(v8 + 32);
      sub_40554(v37, v10);
      v38 = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(*((_QWORD *)&v40 + 1));
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(*((_QWORD *)&v39 + 1));
      swift_bridgeObjectRetain(v11);
      if ((sub_A7FCC(v40, v14) & 1) != 0)
        goto LABEL_7;
      if (*(_QWORD *)(a3 + 16))
      {
        v15 = static Hasher._hash(seed:_:)(*(_QWORD *)(a3 + 40), v9);
        v16 = -1 << *(_BYTE *)(a3 + 32);
        v17 = v15 & ~v16;
        if (((*(_QWORD *)(v35 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        {
          v18 = *(_QWORD *)(a3 + 48);
          if (*(_QWORD *)(v18 + 8 * v17) == v9)
            goto LABEL_7;
          v19 = ~v16;
          while (1)
          {
            v17 = (v17 + 1) & v19;
            if (((*(_QWORD *)(v35 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
              break;
            if (*(_QWORD *)(v18 + 8 * v17) == v9)
              goto LABEL_7;
          }
        }
      }
      if (!a4)
        break;
      if (a4 != 1)
        goto LABEL_28;
      if ((v36 & 1) != 0)
      {
        LOBYTE(v36) = 1;
LABEL_27:
        v6 = v25;
        swift_bridgeObjectRelease();
        v4 = v30;
        goto LABEL_29;
      }
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        LOBYTE(v36) = 0;
        goto LABEL_28;
      }
LABEL_7:
      sub_40568(v37, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v5 == v30)
        return (uint64_t)v25;
    }
    if (!v36)
    {
      LOBYTE(v36) = 0;
      goto LABEL_27;
    }
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
      goto LABEL_7;
    LOBYTE(v36) = 1;
LABEL_28:
    v4 = v30;
    v6 = v25;
LABEL_29:
    result = swift_isUniquelyReferenced_nonNull_native(v6);
    if ((result & 1) == 0)
      result = sub_3432C(0, v6[2] + 1, 1);
    v23 = v6[2];
    v22 = v6[3];
    if (v23 >= v22 >> 1)
      result = sub_3432C(v22 > 1, v23 + 1, 1);
    v6[2] = v23 + 1;
    v24 = &v6[14 * v23];
    v24[4] = v9;
    *((_BYTE *)v24 + 40) = v36;
    v24[6] = v27;
    *((_BYTE *)v24 + 56) = v29;
    v24[8] = v37;
    *((_BYTE *)v24 + 72) = v10;
    v24[10] = v11;
    v24[11] = v28;
    v24[12] = v38;
    v24[13] = v13;
    *((_OWORD *)v24 + 7) = v40;
    *((_OWORD *)v24 + 8) = v39;
  }
  while (v5 != v4);
  return (uint64_t)v6;
}

uint64_t sub_AEA34(uint64_t result, uint64_t a2, char a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _QWORD *v40;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return (uint64_t)_swiftEmptyArrayStorage;
  v4 = 0;
  v32 = result + 32;
  v5 = a2 + 56;
  v6 = _swiftEmptyArrayStorage;
  v37 = a2;
  v33 = *(_QWORD *)(result + 16);
  do
  {
    v29 = v6;
    if (v4 <= v3)
      v7 = v3;
    else
      v7 = v4;
    while (1)
    {
      if (v4 == v7)
      {
        __break(1u);
        return result;
      }
      v8 = v32 + 112 * v4;
      v9 = *(_QWORD *)v8;
      v10 = *(_BYTE *)(v8 + 8);
      v36 = *(_QWORD *)(v8 + 16);
      v35 = *(_BYTE *)(v8 + 24);
      v11 = *(_QWORD *)(v8 + 32);
      v12 = *(_BYTE *)(v8 + 40);
      v13 = *(_QWORD *)(v8 + 48);
      v34 = *(_QWORD *)(v8 + 56);
      v14 = *(_QWORD *)(v8 + 64);
      v15 = *(_QWORD *)(v8 + 72);
      ++v4;
      v38 = *(_OWORD *)(v8 + 96);
      v39 = *(_OWORD *)(v8 + 80);
      if (*(_QWORD *)(a2 + 16))
      {
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), v9);
        a2 = v37;
        v16 = -1 << *(_BYTE *)(v37 + 32);
        v17 = result & ~v16;
        if (((*(_QWORD *)(v5 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        {
          v18 = *(_QWORD *)(v37 + 48);
          if (*(_QWORD *)(v18 + 8 * v17) == v9)
            goto LABEL_7;
          v19 = ~v16;
          while (1)
          {
            v17 = (v17 + 1) & v19;
            if (((*(_QWORD *)(v5 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
              break;
            if (*(_QWORD *)(v18 + 8 * v17) == v9)
              goto LABEL_7;
          }
        }
      }
      if (a3)
      {
        if (a3 != 1)
        {
          sub_40554(v11, v12);
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRetain(v39);
          swift_bridgeObjectRetain(*((_QWORD *)&v39 + 1));
          swift_bridgeObjectRetain(v38);
          swift_bridgeObjectRetain(*((_QWORD *)&v38 + 1));
          swift_bridgeObjectRetain(v13);
          goto LABEL_29;
        }
        if ((v10 & 1) != 0)
        {
          sub_40554(v11, v12);
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRetain(v39);
          swift_bridgeObjectRetain(*((_QWORD *)&v39 + 1));
          swift_bridgeObjectRetain(v38);
          swift_bridgeObjectRetain(*((_QWORD *)&v38 + 1));
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRelease(0xE90000000000006BLL);
LABEL_26:
          v10 = 1;
          goto LABEL_29;
        }
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
        sub_40554(v11, v12);
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(*((_QWORD *)&v39 + 1));
        swift_bridgeObjectRetain(v38);
        swift_bridgeObjectRetain(*((_QWORD *)&v38 + 1));
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRelease(0xE500000000000000);
        if ((v20 & 1) != 0)
          goto LABEL_28;
        goto LABEL_6;
      }
      if ((v10 & 1) == 0)
        break;
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
      sub_40554(v11, v12);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(*((_QWORD *)&v39 + 1));
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(*((_QWORD *)&v38 + 1));
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(0xE90000000000006BLL);
      if ((v21 & 1) != 0)
        goto LABEL_26;
LABEL_6:
      sub_40568(v11, v12);
      swift_bridgeObjectRelease(*((_QWORD *)&v38 + 1));
      swift_bridgeObjectRelease(v38);
      swift_bridgeObjectRelease(*((_QWORD *)&v39 + 1));
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(v14);
      result = swift_bridgeObjectRelease(v13);
      a2 = v37;
LABEL_7:
      if (v4 == v33)
        return (uint64_t)v29;
    }
    sub_40554(v11, v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(*((_QWORD *)&v39 + 1));
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(*((_QWORD *)&v38 + 1));
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(0xE500000000000000);
LABEL_28:
    v10 = 0;
LABEL_29:
    v6 = v29;
    result = swift_isUniquelyReferenced_nonNull_native(v29);
    v40 = v29;
    if ((result & 1) == 0)
    {
      result = sub_3432C(0, v29[2] + 1, 1);
      v6 = v29;
    }
    a2 = v37;
    v23 = v38;
    v22 = v39;
    v25 = v6[2];
    v24 = v6[3];
    v26 = v25 + 1;
    if (v25 >= v24 >> 1)
    {
      v30 = v6[2];
      v28 = v25 + 1;
      result = sub_3432C(v24 > 1, v25 + 1, 1);
      v26 = v28;
      v25 = v30;
      v23 = v38;
      v22 = v39;
      a2 = v37;
      v6 = v40;
    }
    v6[2] = v26;
    v27 = &v6[14 * v25];
    v27[4] = v9;
    *((_BYTE *)v27 + 40) = v10;
    v27[6] = v36;
    *((_BYTE *)v27 + 56) = v35;
    v27[8] = v11;
    *((_BYTE *)v27 + 72) = v12;
    v27[10] = v13;
    v27[11] = v34;
    v27[12] = v14;
    v27[13] = v15;
    *((_OWORD *)v27 + 7) = v22;
    *((_OWORD *)v27 + 8) = v23;
    v3 = v33;
  }
  while (v4 != v33);
  return (uint64_t)v6;
}

uint64_t sub_AEF18(uint64_t a1, void (*a2)(_BYTE *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  _BYTE v17[8];
  uint64_t v18;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      return swift_release(a1);
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v8)
        return swift_release(a1);
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v8)
          return swift_release(a1);
        v15 = *(_QWORD *)(v4 + 8 * v10);
        if (!v15)
        {
          v10 = v14 + 3;
          if (v14 + 3 >= v8)
            return swift_release(a1);
          v15 = *(_QWORD *)(v4 + 8 * v10);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    v17[0] = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v12);
    v18 = v13;
    swift_bridgeObjectRetain(v13);
    a2(v17, v13);
    result = swift_bridgeObjectRelease(v13);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
    return swift_release(a1);
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v15 = *(_QWORD *)(v4 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_AF0A8(uint64_t a1, void (*a2)(_BYTE *, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  __n128 v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  _BYTE v18[560];
  _QWORD __dst[69];
  _QWORD __src[71];

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v9 = 0;
  while (1)
  {
    if (v7)
    {
      v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    v15 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v8)
      goto LABEL_23;
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v9;
    if (!v16)
    {
      v9 = v15 + 1;
      if (v15 + 1 >= v8)
        goto LABEL_23;
      v16 = *(_QWORD *)(v4 + 8 * v9);
      if (!v16)
      {
        v9 = v15 + 2;
        if (v15 + 2 >= v8)
          goto LABEL_23;
        v16 = *(_QWORD *)(v4 + 8 * v9);
        if (!v16)
        {
          v9 = v15 + 3;
          if (v15 + 3 >= v8)
            goto LABEL_23;
          v16 = *(_QWORD *)(v4 + 8 * v9);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v16 - 1) & v16;
    v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    v12 = (const void *)(*(_QWORD *)(a1 + 48) + 552 * v11);
    memcpy(__dst, v12, 0x221uLL);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    memmove(__src, v12, 0x221uLL);
    __src[69] = v13;
    memcpy(v18, __src, sizeof(v18));
    sub_6100(__dst);
    v14 = swift_bridgeObjectRetain(v13);
    a2(v18, v13, v14);
    sub_B07D4(__src);
  }
  v17 = v15 + 4;
  if (v17 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
    v9 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v9 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v9 >= v8)
      goto LABEL_23;
    v16 = *(_QWORD *)(v4 + 8 * v9);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_AF274(uint64_t a1, void (*a2)(uint64_t *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v15 >= v8)
      return swift_release(a1);
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        return swift_release(a1);
      v16 = *(_QWORD *)(v4 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          return swift_release(a1);
        v16 = *(_QWORD *)(v4 + 8 * v10);
        if (!v16)
        {
          v10 = v15 + 3;
          if (v15 + 3 >= v8)
            return swift_release(a1);
          v16 = *(_QWORD *)(v4 + 8 * v10);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v16 - 1) & v16;
    v12 = __clz(__rbit64(v16)) + (v10 << 6);
LABEL_5:
    v13 = 8 * v12;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + v13);
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v13);
    swift_bridgeObjectRetain(v14);
    a2(&v18, v14);
    result = swift_bridgeObjectRelease(v14);
  }
  v17 = v15 + 4;
  if (v17 >= v8)
    return swift_release(a1);
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v16 = *(_QWORD *)(v4 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_AF3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  _QWORD *v30;
  unsigned __int8 v31;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64_t v79;
  _QWORD *v80;
  int64_t v81;
  unint64_t v82;
  unint64_t v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  int v89;
  char v90;
  unint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  char v107;
  unint64_t v108;
  uint64_t v109;
  _BOOL8 v110;
  uint64_t v111;
  char v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  const char *v140;
  const char *v141;
  char *v142;
  const char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;

  v147 = type metadata accessor for CollectionRecommendation(0);
  v130 = *(_QWORD *)(v147 - 8);
  v9 = __chkstk_darwin(v147);
  v129 = (uint64_t *)((char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v9);
  v139 = (uint64_t)&v124 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v124 - v13;
  v150 = type metadata accessor for ScoredCollectionRecommendation(0);
  v15 = *(_QWORD *)(v150 - 8);
  v16 = __chkstk_darwin(v150);
  v148 = (uint64_t)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v145 = (char *)&v124 - v19;
  v20 = __chkstk_darwin(v18);
  v151 = (uint64_t)&v124 - v21;
  __chkstk_darwin(v20);
  v149 = (uint64_t *)((char *)&v124 - v22);
  v137 = *(_QWORD *)(a1 + 16);
  if (v137 && (*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v144 = v14;
    v23 = *(_QWORD *)a1;
    v133 = *(_QWORD *)(v4 + 80);
    v134 = a4;
    v128 = *(_QWORD *)(v4 + 136);
    v24 = _swiftEmptyArrayStorage;
    v25 = (_QWORD *)sub_53738((uint64_t)_swiftEmptyArrayStorage);
    v26 = (char *)a2;
    v27 = *(_QWORD *)(a2 + 16);
    v146 = v23;
    v135 = v15;
    v136 = a3;
    if (v27)
    {
      v28 = (uint64_t)&v26[(*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)];
      v29 = *(const char **)(v15 + 72);
      v142 = v26;
      v143 = v29;
      swift_bridgeObjectRetain(v26);
      v30 = v149;
      do
      {
        sub_26A5C(v28, (uint64_t)v30, type metadata accessor for ScoredCollectionRecommendation);
        v31 = *((_BYTE *)v30 + *(int *)(v150 + 20));
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
        v152 = v25;
        v34 = sub_39814(v31);
        v35 = v25[2];
        v36 = (v33 & 1) == 0;
        v37 = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_97;
        v38 = v33;
        if (v25[3] >= v37)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_16CF8C();
            v25 = v152;
          }
        }
        else
        {
          sub_15DF2C(v37, isUniquelyReferenced_nonNull_native);
          v25 = v152;
          v39 = sub_39814(v31);
          if ((v38 & 1) != (v40 & 1))
            goto LABEL_104;
          v34 = v39;
        }
        swift_bridgeObjectRelease();
        if ((v38 & 1) == 0)
        {
          v25[(v34 >> 6) + 8] |= 1 << v34;
          *(_BYTE *)(v25[6] + v34) = v31;
          *(_QWORD *)(v25[7] + 8 * v34) = 0;
          v41 = v25[2];
          v42 = __OFADD__(v41, 1);
          v43 = v41 + 1;
          if (v42)
            goto LABEL_99;
          v25[2] = v43;
        }
        v44 = v25[7];
        v45 = *(_QWORD *)(v44 + 8 * v34);
        v42 = __OFADD__(v45, 1);
        v46 = v45 + 1;
        if (v42)
          goto LABEL_98;
        *(_QWORD *)(v44 + 8 * v34) = v46;
        v30 = v149;
        sub_26AA0((uint64_t)v149, type metadata accessor for ScoredCollectionRecommendation);
        v28 += (uint64_t)v143;
        --v27;
      }
      while (v27);
      swift_bridgeObjectRelease();
      v23 = v146;
      v15 = v135;
      a3 = v136;
      v24 = _swiftEmptyArrayStorage;
    }
    v153 = _swiftEmptyArrayStorage;
    v47 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain(a3);
    if (v47)
    {
      v149 = (_QWORD *)((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
      v142 = "ry";
      v143 = "http://localhost:18060";
      v140 = "booksBySuggestedAuthors";
      v141 = "booksYouMightLike";
      v138 = "mangaYouMightLike";
      v48 = v151;
      sub_26A5C((uint64_t)v149 + a3, v151, type metadata accessor for ScoredCollectionRecommendation);
      v49 = (uint64_t)v144;
      sub_26A5C(v48, (uint64_t)v144, type metadata accessor for CollectionRecommendation);
      v50 = (char *)&loc_AF81C + *((int *)qword_B0330 + swift_getEnumCaseMultiPayload(v49, v147));
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    v51 = _swiftEmptyArrayStorage[2];
    if (v51)
    {
      v152 = _swiftEmptyArrayStorage;
      sub_3447C(0, v51, 0);
      v52 = *(unsigned __int8 *)(v15 + 80);
      v151 = (uint64_t)_swiftEmptyArrayStorage;
      v53 = (char *)_swiftEmptyArrayStorage + ((v52 + 32) & ~v52);
      v54 = *(_QWORD *)(v15 + 72);
      do
      {
        v55 = v148;
        sub_26A5C((uint64_t)v53, v148, type metadata accessor for ScoredCollectionRecommendation);
        v56 = *(_BYTE *)(v55 + *(int *)(v150 + 20));
        sub_26AA0(v55, type metadata accessor for ScoredCollectionRecommendation);
        v24 = v152;
        if ((swift_isUniquelyReferenced_nonNull_native(v152) & 1) == 0)
        {
          sub_3447C(0, v24[2] + 1, 1);
          v24 = v152;
        }
        v58 = v24[2];
        v57 = v24[3];
        if (v58 >= v57 >> 1)
        {
          sub_3447C(v57 > 1, v58 + 1, 1);
          v24 = v152;
        }
        v24[2] = v58 + 1;
        *((_BYTE *)v24 + v58 + 32) = v56;
        v53 += v54;
        --v51;
      }
      while (v51);
      swift_release(v151);
      v23 = v146;
    }
    else
    {
      swift_release(_swiftEmptyArrayStorage);
    }
    v59 = sub_3D8E8((uint64_t)v24);
    swift_bridgeObjectRelease();
    v60 = v134;
    swift_bridgeObjectRetain(v134);
    swift_bridgeObjectRetain(v133);
    v62 = sub_ADFC4(v61, v60);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v63 = sub_AE47C(v62, v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v125 = *(_QWORD *)(v63 + 16);
    if (!v125)
    {
      swift_bridgeObjectRelease();
      v122 = 0;
      v149 = _swiftEmptyArrayStorage;
LABEL_93:
      swift_bridgeObjectRelease();
      sub_3EB0C((uint64_t)v122, 0);
      return v149;
    }
    v138 = 0;
    v64 = 0;
    v65 = v137;
    v66 = v137 + 56;
    v126 = v63 + 32;
    v149 = _swiftEmptyArrayStorage;
    v127 = v137 + 56;
    v124 = v63;
LABEL_32:
    if (v64 >= *(_QWORD *)(v63 + 16))
      goto LABEL_102;
    v67 = v126 + 112 * v64;
    v68 = *(_QWORD *)v67;
    v151 = *(unsigned __int8 *)(v67 + 8);
    v135 = *(_QWORD *)(v67 + 16);
    v136 = v68;
    LODWORD(v134) = *(unsigned __int8 *)(v67 + 24);
    v69 = *(_QWORD *)(v67 + 32);
    v70 = *(unsigned __int8 *)(v67 + 40);
    v72 = *(_QWORD *)(v67 + 48);
    v71 = *(_QWORD *)(v67 + 56);
    v73 = *(_QWORD **)(v67 + 64);
    v74 = *(_QWORD *)(v67 + 72);
    v143 = *(const char **)(v67 + 80);
    v144 = (char *)v70;
    v142 = *(char **)(v67 + 88);
    v75 = *(const char **)(v67 + 96);
    v140 = *(const char **)(v67 + 104);
    v141 = v75;
    v132 = v64 + 1;
    v133 = v71;
    v76 = 1 << *(_BYTE *)(v65 + 32);
    if (v76 < 64)
      v77 = ~(-1 << v76);
    else
      v77 = -1;
    v78 = v77 & *(_QWORD *)(v65 + 56);
    v150 = v69;
    sub_40554(v69, v70);
    v79 = (unint64_t)(v76 + 63) >> 6;
    v80 = _swiftEmptyDictionarySingleton;
    if (v73)
      v80 = v73;
    v131 = v80;
    v148 = v72;
    swift_bridgeObjectRetain(v72);
    v145 = (char *)v73;
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v143);
    swift_bridgeObjectRetain(v142);
    swift_bridgeObjectRetain(v141);
    swift_bridgeObjectRetain(v140);
    swift_bridgeObjectRetain(v65);
    v81 = 0;
    while (1)
    {
      if (v78)
      {
        v82 = __clz(__rbit64(v78));
        v78 &= v78 - 1;
        v83 = v82 | (v81 << 6);
      }
      else
      {
        v84 = v81 + 1;
        if (__OFADD__(v81, 1))
        {
          __break(1u);
          goto LABEL_96;
        }
        v85 = v150;
        if (v84 >= v79)
          goto LABEL_31;
        v86 = *(_QWORD *)(v66 + 8 * v84);
        ++v81;
        if (!v86)
        {
          v81 = v84 + 1;
          if (v84 + 1 >= v79)
            goto LABEL_31;
          v86 = *(_QWORD *)(v66 + 8 * v81);
          if (!v86)
          {
            v81 = v84 + 2;
            if (v84 + 2 >= v79)
              goto LABEL_31;
            v86 = *(_QWORD *)(v66 + 8 * v81);
            if (!v86)
            {
              v87 = v84 + 3;
              if (v87 >= v79)
              {
LABEL_31:
                swift_release(v65);
                sub_40568(v85, (char)v144);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v63 = v124;
                v64 = v132;
                if (v132 == v125)
                {
                  swift_bridgeObjectRelease();
                  v122 = v138;
                  goto LABEL_93;
                }
                goto LABEL_32;
              }
              v86 = *(_QWORD *)(v66 + 8 * v87);
              if (!v86)
              {
                while (1)
                {
                  v81 = v87 + 1;
                  if (__OFADD__(v87, 1))
                    break;
                  if (v81 >= v79)
                    goto LABEL_31;
                  v86 = *(_QWORD *)(v66 + 8 * v81);
                  ++v87;
                  if (v86)
                    goto LABEL_55;
                }
LABEL_96:
                __break(1u);
LABEL_97:
                __break(1u);
LABEL_98:
                __break(1u);
LABEL_99:
                __break(1u);
LABEL_100:
                __break(1u);
LABEL_101:
                __break(1u);
LABEL_102:
                __break(1u);
LABEL_103:
                __break(1u);
LABEL_104:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for ClusteringOptions.MediaType);
                __break(1u);
                JUMPOUT(0xB0330);
              }
              v81 = v87;
            }
          }
        }
LABEL_55:
        v78 = (v86 - 1) & v86;
        v83 = __clz(__rbit64(v86)) + (v81 << 6);
      }
      v88 = *(_QWORD *)(v65 + 48);
      v89 = *(unsigned __int8 *)(v88 + v83);
      if (*(_BYTE *)(v88 + v83))
      {
        if (v89 != 1)
          goto LABEL_65;
        if ((v151 & 1) != 0)
        {
LABEL_64:
          swift_bridgeObjectRelease();
          goto LABEL_65;
        }
        v90 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
      }
      else
      {
        if ((v151 & 1) == 0)
          goto LABEL_64;
        v90 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F6F626F69647561, 0xE90000000000006BLL, 0x6B6F6F6265, 0xE500000000000000, 0);
      }
      swift_bridgeObjectRelease();
      if ((v90 & 1) != 0)
      {
LABEL_65:
        if (v25[2] && (v91 = sub_39814(v89), (v92 & 1) != 0))
        {
          if (*(_QWORD *)(v25[7] + 8 * v91) < v23)
            goto LABEL_68;
        }
        else if (v23 > 0)
        {
LABEL_68:
          v93 = (uint64_t)v129;
          if ((v134 & 1) != 0)
          {
            *v129 = v136;
            *(_BYTE *)(v93 + 8) = v151;
            *(_QWORD *)(v93 + 16) = v135;
            *(_BYTE *)(v93 + 24) = 1;
            *(_QWORD *)(v93 + 32) = v150;
            LOBYTE(v94) = (_BYTE)v144;
            v95 = v145;
            *(_BYTE *)(v93 + 40) = (_BYTE)v144;
            v96 = v147;
            v97 = v133;
            *(_QWORD *)(v93 + 48) = v148;
            *(_QWORD *)(v93 + 56) = v97;
            *(_QWORD *)(v93 + 64) = v95;
            *(_QWORD *)(v93 + 72) = v74;
            swift_storeEnumTagMultiPayload(v93, v96, 0);
          }
          else
          {
            v99 = v135;
            v98 = v136;
            *v129 = v135;
            v100 = v151;
            *(_BYTE *)(v93 + 8) = v151;
            *(_QWORD *)(v93 + 16) = v98;
            *(_QWORD *)(v93 + 24) = v100;
            *(_QWORD *)(v93 + 32) = v99;
            *(_QWORD *)(v93 + 40) = 0;
            v94 = (uint64_t)v144;
            v95 = v145;
            *(_QWORD *)(v93 + 48) = v150;
            *(_QWORD *)(v93 + 56) = v94;
            v101 = v147;
            v102 = v133;
            *(_QWORD *)(v93 + 64) = v148;
            *(_QWORD *)(v93 + 72) = v102;
            *(_QWORD *)(v93 + 80) = v95;
            *(_QWORD *)(v93 + 88) = v74;
            *(_QWORD *)(v93 + 96) = v131;
            *(_QWORD *)(v93 + 104) = v74;
            swift_storeEnumTagMultiPayload(v93, v101, 9);
            swift_bridgeObjectRetain(v95);
          }
          sub_A2618(v93, v139, type metadata accessor for CollectionRecommendation);
          sub_40554(v150, v94);
          swift_bridgeObjectRetain(v148);
          swift_bridgeObjectRetain(v95);
          if ((swift_isUniquelyReferenced_nonNull_native(v149) & 1) == 0)
            v149 = (_QWORD *)sub_2FFE0(0, v149[2] + 1, 1, (unint64_t)v149);
          v104 = v149[2];
          v103 = v149[3];
          if (v104 >= v103 >> 1)
            v149 = (_QWORD *)sub_2FFE0(v103 > 1, v104 + 1, 1, (unint64_t)v149);
          v105 = v149;
          v149[2] = v104 + 1;
          sub_A2618(v139, (uint64_t)v105+ ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80))+ *(_QWORD *)(v130 + 72) * v104, type metadata accessor for CollectionRecommendation);
          sub_3EB0C((uint64_t)v138, 0);
          v106 = swift_isUniquelyReferenced_nonNull_native(v25);
          v152 = v25;
          v108 = sub_39814(v89);
          v109 = v25[2];
          v110 = (v107 & 1) == 0;
          v111 = v109 + v110;
          if (__OFADD__(v109, v110))
            goto LABEL_100;
          v112 = v107;
          if (v25[3] >= v111)
          {
            if ((v106 & 1) == 0)
              sub_16CF8C();
          }
          else
          {
            sub_15DF2C(v111, v106);
            v113 = sub_39814(v89);
            if ((v112 & 1) != (v114 & 1))
              goto LABEL_104;
            v108 = v113;
          }
          v65 = v137;
          v25 = v152;
          swift_bridgeObjectRelease();
          if ((v112 & 1) != 0)
          {
            swift_bridgeObjectRetain(v25);
          }
          else
          {
            v25[(v108 >> 6) + 8] |= 1 << v108;
            *(_BYTE *)(v25[6] + v108) = v89;
            *(_QWORD *)(v25[7] + 8 * v108) = 0;
            v115 = v25[2];
            v116 = v115 + 1;
            v117 = __OFADD__(v115, 1);
            swift_bridgeObjectRetain(v25);
            if (v117)
              goto LABEL_103;
            v25[2] = v116;
            v65 = v137;
          }
          v118 = v25[7];
          swift_bridgeObjectRelease();
          v119 = *(_QWORD *)(v118 + 8 * v108);
          v42 = __OFADD__(v119, 1);
          v120 = v119 + 1;
          v23 = v146;
          if (v42)
            goto LABEL_101;
          *(_QWORD *)(v118 + 8 * v108) = v120;
          v121 = v149[2];
          v138 = (const char *)sub_A8BE0;
          v66 = v127;
          if (v121 == v128)
          {
            sub_40568(v150, (char)v144);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release(v65);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v149;
          }
        }
      }
    }
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_B0358(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[18];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

_QWORD *sub_B03FC(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t *sub_B0424(uint64_t *a1)
{
  sub_B0458(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t sub_B0458(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

uint64_t sub_B0490(uint64_t a1)
{
  sub_40568(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_B0514()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[10]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[21]);
  swift_bridgeObjectRelease(v0[22]);
  return swift_deallocObject(v0, 192, 7);
}

uint64_t sub_B0588(uint64_t a1)
{
  uint64_t v1;

  return sub_A8C14(a1, *(_QWORD *)(v1 + 16), v1 + 24);
}

uint64_t sub_B0594(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_A8C70(a1, a2, *(uint64_t **)(v2 + 16), *(__int128 **)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40), *(uint64_t **)(v2 + 48), *(uint64_t **)(v2 + 56), *(void (**)(_QWORD))(v2 + 64), *(_QWORD *)(v2 + 72));
}

_QWORD *sub_B05C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a1[4];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[18];
  v10 = a1[19];
  swift_bridgeObjectRetain(a1[2]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_B0668(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_B0690(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return a1;
}

uint64_t sub_B06B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F1260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_B0704(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_AA580(*a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(_QWORD *)(v2 + 40), *(void (**)(_QWORD, _QWORD))(v2 + 48), *(_QWORD *)(v2 + 56), *(void (**)(char *))(v2 + 64), *(_QWORD *)(v2 + 72));
}

_QWORD *sub_B073C@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_A9E98(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

uint64_t sub_B0744(void *__src, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, _QWORD);
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v10;
  int v11;
  _BYTE __dst[552];

  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 40);
  v7 = *(void (**)(_QWORD, _QWORD))(v2 + 48);
  v8 = *(_QWORD *)(v2 + 56);
  v9 = *(void (**)(char *))(v2 + 64);
  v10 = *(_QWORD *)(v2 + 72);
  v11 = *(unsigned __int8 *)(v2 + 32);
  memcpy(__dst, __src, 0x221uLL);
  return sub_AA040(__dst, a2, v4, v5, v11, v6, v7, v8, v9, v10);
}

_QWORD *sub_B07D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v2 = a1[11];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[14];
  v6 = a1[15];
  v7 = a1[16];
  v9 = a1[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_62CC(v9, v2, v3, v4, v5, v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_B0888(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F1260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

_QWORD *sub_B08D0(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

char *sub_B08F8(char *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_A81F0(a1, a2, *(_QWORD *)(v2 + 16), *(__int128 **)(v2 + 24), *(_QWORD **)(v2 + 32));
}

uint64_t sub_B0904(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_B092C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t destroy for ScoredCollectionRecommendationSet(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for ScoredCollectionRecommendationSet(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v4 = a2[3];
  v5 = a2[4];
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for ScoredCollectionRecommendationSet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t *assignWithTake for ScoredCollectionRecommendationSet(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  swift_bridgeObjectRelease(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScoredCollectionRecommendationSet(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScoredCollectionRecommendationSet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScoredCollectionRecommendationSet()
{
  return &type metadata for ScoredCollectionRecommendationSet;
}

uint64_t sub_B0B6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    v6 = type metadata accessor for CollectionRecommendation(0);
    v7 = (char *)&loc_B0BD8 + 4 * byte_192D54[swift_getEnumCaseMultiPayload(a2, v6)];
    __asm { BR              X10 }
  }
  v8 = *a2;
  *a1 = *a2;
  v9 = v8 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain(v8);
  return v9;
}

uint64_t sub_B1120(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v2 = type metadata accessor for CollectionRecommendation(0);
  result = swift_getEnumCaseMultiPayload(a1, v2);
  switch((int)result)
  {
    case 0:
      if (*(unsigned __int8 *)(a1 + 40) != 255)
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
      result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
      break;
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      v4 = sub_5EDC(&qword_1F0D90);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      break;
    case 2:
      v5 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
      v6 = sub_5EDC(&qword_1F0D98);
      v7 = (_QWORD *)(a1 + *(int *)(v6 + 48));
      swift_bridgeObjectRelease(v7[2]);
      swift_bridgeObjectRelease(v7[3]);
      v8 = v7[16];
      if (v8 >> 1 != 0xFFFFFFFF)
        sub_62E8(v7[10], v7[11], v7[12], v7[13], v7[14], v7[15], v8);
      swift_bridgeObjectRelease(v7[67]);
      result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v6 + 64)));
      break;
    case 9:
      result = *(_QWORD *)(a1 + 64);
      if (result)
      {
        if (*(unsigned __int8 *)(a1 + 56) != 255)
        {
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
          result = *(_QWORD *)(a1 + 64);
        }
        swift_bridgeObjectRelease(result);
        swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
        result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_B12A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;

  v3 = type metadata accessor for CollectionRecommendation(0);
  v4 = (char *)sub_B1300 + 4 * byte_192D68[swift_getEnumCaseMultiPayload(a2, v3)];
  __asm { BR              X10 }
}

uint64_t sub_B1300()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)v0 = *(_QWORD *)v1;
  *(_BYTE *)(v0 + 8) = *(_BYTE *)(v1 + 8);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(v0 + 24) = *(_BYTE *)(v1 + 24);
  v4 = (_QWORD *)(v1 + 32);
  v5 = *(unsigned __int8 *)(v1 + 40);
  if (v5 == 255)
  {
    *(_QWORD *)(v0 + 32) = *v4;
    *(_BYTE *)(v0 + 40) = *(_BYTE *)(v1 + 40);
  }
  else
  {
    v6 = *v4;
    *(_QWORD *)(v0 + 32) = *v4;
    *(_BYTE *)(v0 + 40) = v5 & 1;
    swift_bridgeObjectRetain(v6);
  }
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v0 + 48) = v7;
  *(_QWORD *)(v0 + 56) = v8;
  v10 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v0 + 64) = v10;
  *(_QWORD *)(v0 + 72) = v9;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  swift_storeEnumTagMultiPayload(v0, v3, 0);
  v11 = *(int *)(v2 + 24);
  *(_BYTE *)(v0 + *(int *)(v2 + 20)) = *(_BYTE *)(v1 + *(int *)(v2 + 20));
  *(_QWORD *)(v0 + v11) = *(_QWORD *)(v1 + v11);
  return v0;
}

double sub_B1828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double result;

  if (a1 != a2)
  {
    sub_26AA0(a1, type metadata accessor for CollectionRecommendation);
    v4 = type metadata accessor for CollectionRecommendation(0);
    v5 = (char *)&loc_B18A0 + 4 * byte_192D72[swift_getEnumCaseMultiPayload(a2, v4)];
    __asm { BR              X10 }
  }
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  v6 = *(int *)(a3 + 24);
  result = *(double *)(a2 + v6);
  *(double *)(a1 + v6) = result;
  return result;
}

_BYTE *sub_B1DFC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for CollectionRecommendation(0);
  switch(swift_getEnumCaseMultiPayload(a2, v6))
  {
    case 1u:
      v7 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = v6;
      v10 = 1;
      goto LABEL_11;
    case 2u:
      v11 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = sub_5EDC(&qword_1F0D98);
      memcpy(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], 0x221uLL);
      *(_QWORD *)&a1[*(int *)(v12 + 64)] = *(_QWORD *)&a2[*(int *)(v12 + 64)];
      v8 = a1;
      v9 = v6;
      v10 = 2;
      goto LABEL_11;
    case 3u:
      v13 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
      v14 = sub_5EDC(&qword_1F3418);
      *(_QWORD *)&a1[*(int *)(v14 + 48)] = *(_QWORD *)&a2[*(int *)(v14 + 48)];
      a1[*(int *)(v14 + 64)] = a2[*(int *)(v14 + 64)];
      v8 = a1;
      v9 = v6;
      v10 = 3;
      goto LABEL_11;
    case 4u:
      v15 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
      v16 = sub_5EDC(&qword_1F3420);
      a1[*(int *)(v16 + 48)] = a2[*(int *)(v16 + 48)];
      v8 = a1;
      v9 = v6;
      v10 = 4;
      goto LABEL_11;
    case 5u:
      v17 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
      v18 = sub_5EDC(&qword_1F3418);
      *(_QWORD *)&a1[*(int *)(v18 + 48)] = *(_QWORD *)&a2[*(int *)(v18 + 48)];
      a1[*(int *)(v18 + 64)] = a2[*(int *)(v18 + 64)];
      v8 = a1;
      v9 = v6;
      v10 = 5;
      goto LABEL_11;
    case 6u:
      v19 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
      v20 = sub_5EDC(&qword_1F3420);
      a1[*(int *)(v20 + 48)] = a2[*(int *)(v20 + 48)];
      v8 = a1;
      v9 = v6;
      v10 = 6;
      goto LABEL_11;
    case 7u:
      v21 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
      v22 = sub_5EDC(&qword_1F3420);
      a1[*(int *)(v22 + 48)] = a2[*(int *)(v22 + 48)];
      v8 = a1;
      v9 = v6;
      v10 = 7;
      goto LABEL_11;
    case 8u:
      v23 = sub_5EDC(&qword_1F0D90);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a1, a2, v23);
      v24 = sub_5EDC(&qword_1F3420);
      a1[*(int *)(v24 + 48)] = a2[*(int *)(v24 + 48)];
      v8 = a1;
      v9 = v6;
      v10 = 8;
LABEL_11:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
      break;
  }
  v25 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  return a1;
}

_BYTE *sub_B2114(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_26AA0((uint64_t)a1, type metadata accessor for CollectionRecommendation);
    v6 = type metadata accessor for CollectionRecommendation(0);
    switch(swift_getEnumCaseMultiPayload(a2, v6))
    {
      case 1u:
        v7 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
        v8 = a1;
        v9 = v6;
        v10 = 1;
        goto LABEL_12;
      case 2u:
        v11 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
        v12 = sub_5EDC(&qword_1F0D98);
        memcpy(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], 0x221uLL);
        *(_QWORD *)&a1[*(int *)(v12 + 64)] = *(_QWORD *)&a2[*(int *)(v12 + 64)];
        v8 = a1;
        v9 = v6;
        v10 = 2;
        goto LABEL_12;
      case 3u:
        v13 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(a1, a2, v13);
        v14 = sub_5EDC(&qword_1F3418);
        *(_QWORD *)&a1[*(int *)(v14 + 48)] = *(_QWORD *)&a2[*(int *)(v14 + 48)];
        a1[*(int *)(v14 + 64)] = a2[*(int *)(v14 + 64)];
        v8 = a1;
        v9 = v6;
        v10 = 3;
        goto LABEL_12;
      case 4u:
        v15 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(a1, a2, v15);
        v16 = sub_5EDC(&qword_1F3420);
        a1[*(int *)(v16 + 48)] = a2[*(int *)(v16 + 48)];
        v8 = a1;
        v9 = v6;
        v10 = 4;
        goto LABEL_12;
      case 5u:
        v17 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(a1, a2, v17);
        v18 = sub_5EDC(&qword_1F3418);
        *(_QWORD *)&a1[*(int *)(v18 + 48)] = *(_QWORD *)&a2[*(int *)(v18 + 48)];
        a1[*(int *)(v18 + 64)] = a2[*(int *)(v18 + 64)];
        v8 = a1;
        v9 = v6;
        v10 = 5;
        goto LABEL_12;
      case 6u:
        v19 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(a1, a2, v19);
        v20 = sub_5EDC(&qword_1F3420);
        a1[*(int *)(v20 + 48)] = a2[*(int *)(v20 + 48)];
        v8 = a1;
        v9 = v6;
        v10 = 6;
        goto LABEL_12;
      case 7u:
        v21 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a1, a2, v21);
        v22 = sub_5EDC(&qword_1F3420);
        a1[*(int *)(v22 + 48)] = a2[*(int *)(v22 + 48)];
        v8 = a1;
        v9 = v6;
        v10 = 7;
        goto LABEL_12;
      case 8u:
        v23 = sub_5EDC(&qword_1F0D90);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a1, a2, v23);
        v24 = sub_5EDC(&qword_1F3420);
        a1[*(int *)(v24 + 48)] = a2[*(int *)(v24 + 48)];
        v8 = a1;
        v9 = v6;
        v10 = 8;
LABEL_12:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
        break;
    }
  }
  v25 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  return a1;
}

uint64_t sub_B2444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_B2450);
}

uint64_t sub_B2450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for CollectionRecommendation(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t sub_B24C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_B24D4);
}

uint64_t sub_B24D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for CollectionRecommendation(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t sub_B254C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for CollectionRecommendation(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_192DE0;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_B25D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F34C8;
  if (!qword_1F34C8)
  {
    v1 = type metadata accessor for ScoredCollectionRecommendation(255);
    result = swift_getWitnessTable(&unk_192E24, v1);
    atomic_store(result, (unint64_t *)&qword_1F34C8);
  }
  return result;
}

unint64_t sub_B261C()
{
  unint64_t result;

  result = qword_1F34D0;
  if (!qword_1F34D0)
  {
    result = swift_getWitnessTable(&unk_192E94, &type metadata for ScoredCollectionRecommendationSet);
    atomic_store(result, (unint64_t *)&qword_1F34D0);
  }
  return result;
}

uint64_t sub_B2664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;

  if (*(_QWORD *)(a3 + 16) && (v4 = sub_39064(a1, a2), (v5 & 1) != 0))
    return swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v4));
  else
    return 0;
}

unint64_t sub_B26A4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  _QWORD v23[3];

  v4 = HIBYTE(a2) & 0xF;
  v5 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v6 = v4;
  else
    v6 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v6)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) != 0)
  {
    v8 = sub_3A9A0(a1, a2, 10);
    v10 = v22;
    goto LABEL_39;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v7 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(a1, a2);
    v8 = (unint64_t)sub_3A98C(v7, v5, 10);
    v10 = v9 & 1;
    goto LABEL_39;
  }
  v23[0] = a1;
  v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a1 == 43)
  {
    if (!v4)
      goto LABEL_52;
    if (v4 == 1 || (BYTE1(a1) - 48) > 9u)
      goto LABEL_36;
    v8 = (BYTE1(a1) - 48);
    v15 = v4 - 2;
    if (v15)
    {
      v16 = (unsigned __int8 *)v23 + 2;
      while (1)
      {
        v17 = *v16 - 48;
        if (v17 > 9)
          goto LABEL_36;
        if (!is_mul_ok(v8, 0xAuLL))
          goto LABEL_36;
        v14 = __CFADD__(10 * v8, v17);
        v8 = 10 * v8 + v17;
        if (v14)
          goto LABEL_36;
        v10 = 0;
        ++v16;
        if (!--v15)
          goto LABEL_39;
      }
    }
LABEL_38:
    v10 = 0;
    goto LABEL_39;
  }
  if (a1 != 45)
  {
    if (!v4 || (a1 - 48) > 9u)
      goto LABEL_36;
    v8 = (a1 - 48);
    v18 = v4 - 1;
    if (v18)
    {
      v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        v21 = *v20 - 48;
        if (v21 > 9)
          goto LABEL_36;
        if (!is_mul_ok(v8, 0xAuLL))
          goto LABEL_36;
        v14 = __CFADD__(10 * v8, v21);
        v8 = 10 * v8 + v21;
        if (v14)
          goto LABEL_36;
        v10 = 0;
        ++v20;
        if (!--v18)
          goto LABEL_39;
      }
    }
    goto LABEL_38;
  }
  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      v2 = 0;
      v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        v11 = v4 - 2;
        if (v11)
        {
          v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            v13 = *v12 - 48;
            if (v13 > 9)
              goto LABEL_36;
            if (!is_mul_ok(v8, 0xAuLL))
              goto LABEL_36;
            v14 = 10 * v8 >= v13;
            v8 = 10 * v8 - v13;
            if (!v14)
              goto LABEL_36;
            v10 = 0;
            ++v12;
            if (!--v11)
              goto LABEL_39;
          }
        }
        goto LABEL_38;
      }
      goto LABEL_53;
    }
LABEL_36:
    v8 = 0;
    v10 = 1;
    goto LABEL_39;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  v10 = 1;
  v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0)
    return 0;
  else
    return v8;
}

Swift::Int sub_B2900(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0A2C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_C16BC(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_B2968(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0A40(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_C1D9C(v5);
  *a1 = v2;
  return result;
}

uint64_t Dictionary<>.mostRecentBookHistories(limit:scorerConfig:)(int64_t a1, const void *a2, uint64_t a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD *v18;
  _BYTE __dst[368];

  memcpy(__dst, a2, 0x16BuLL);
  if (*(_QWORD *)(a3 + 16) <= a1)
  {
    swift_bridgeObjectRetain(a3);
    return a3;
  }
  sub_605D0((uint64_t)__dst);
  sub_C53C8(a3, __dst);
  v6 = v5;
  sub_60AF8((uint64_t)__dst);
  v18 = v6;
  swift_bridgeObjectRetain(v6);
  sub_B2900((uint64_t *)&v18);
  swift_bridgeObjectRelease(v6);
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v7 = v18;
    if (v18[2] >= (unint64_t)a1)
    {
      v8 = _swiftEmptyArrayStorage;
      if (a1)
      {
        v18 = _swiftEmptyArrayStorage;
        v9 = v7 + 4;
        sub_340AC(0, a1, 0);
        v8 = v18;
        v10 = v18[2];
        do
        {
          v12 = *v9;
          v9 += 2;
          v11 = v12;
          v18 = v8;
          v13 = v8[3];
          if (v10 >= v13 >> 1)
          {
            sub_340AC(v13 > 1, v10 + 1, 1);
            v8 = v18;
          }
          v8[2] = v10 + 1;
          v8[v10++ + 4] = v11;
          --a1;
        }
        while (a1);
      }
      v14 = sub_3CD28((uint64_t)v8);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRetain(v14);
      v15 = swift_bridgeObjectRetain(a3);
      v16 = sub_C48A4(v15, v14);
      swift_release(v7);
      swift_bridgeObjectRelease(v14);
      swift_bridgeObjectRelease(a3);
      return v16;
    }
  }
  __break(1u);
  result = swift_release(v18);
  __break(1u);
  return result;
}

uint64_t BookHistory.CollectionAddition.debugDescription.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  uint64_t v8;
  Swift::String v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *v0;
  if ((v0[4] & 1) != 0)
  {
    v2 = v0[1];
    v3 = sub_5EDC(&qword_1F14C8);
    v4 = swift_allocObject(v3, 72, 7);
    *(_OWORD *)(v4 + 16) = xmmword_1875E0;
    *(_QWORD *)(v4 + 56) = &type metadata for Double;
    *(_QWORD *)(v4 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v4 + 32) = v1;
    v5._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v4);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v7._countAndFlagsBits = 0x20646E6120;
    v7._object = (void *)0xE500000000000000;
    String.append(_:)(v7);
    v8 = swift_allocObject(v3, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_1875E0;
    *(_QWORD *)(v8 + 56) = &type metadata for Double;
    *(_QWORD *)(v8 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v8 + 32) = v2;
    v9._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v8);
    v10 = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v10);
    return 538996329;
  }
  else
  {
    v12 = sub_5EDC(&qword_1F14C8);
    v13 = swift_allocObject(v12, 72, 7);
    *(_OWORD *)(v13 + 16) = xmmword_1875E0;
    *(_QWORD *)(v13 + 56) = &type metadata for Double;
    *(_QWORD *)(v13 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v13 + 32) = v1;
    return String.init(format:_:)(1714564645, 0xE400000000000000, v13);
  }
}

void BookHistory.CollectionAddition.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt64 v4;
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  v1 = *(_QWORD *)v0;
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
  {
    v3 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 8);
    Hasher._combine(_:)(1uLL);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v5 = v1;
    else
      v5 = 0;
    Hasher._combine(_:)(v5);
    if ((v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = v4;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v3);
    Hasher._combine(_:)(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = v1;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
  }
}

uint64_t sub_B2D8C()
{
  return 0x5373646E6F636573;
}

uint64_t sub_B2DAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x5373646E6F636573 && a2 == 0xEC00000065636E69)
  {
    result = swift_bridgeObjectRelease(0xEC00000065636E69);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x5373646E6F636573, 0xEC00000065636E69, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_B2E58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C56E8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B2E80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C56E8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B2EA8()
{
  _BYTE *v0;

  if (*v0)
    return 1868983913;
  else
    return 0x6C61767265746E69;
}

uint64_t sub_B2EDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C7CA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B2F00(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5660();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B2F28(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5660();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B2F50()
{
  _BYTE *v0;

  if (*v0)
    return 0x6E496465646461;
  else
    return 0x74416465646461;
}

uint64_t sub_B2F84@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C7D88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B2FA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C561C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B2FD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C561C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BookHistory.CollectionAddition.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  double v40;
  uint64_t v41;

  v3 = sub_5EDC(&qword_1F34D8);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  __chkstk_darwin(v3);
  v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F34E0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_5EDC(&qword_1F34E8);
  v8 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = *(double *)v1;
  v11 = *(_QWORD *)(v1 + 8);
  v12 = *(double *)(v1 + 16);
  v30 = *(_QWORD *)(v1 + 24);
  v31 = v12;
  v13 = *(_BYTE *)(v1 + 32);
  v15 = a1[3];
  v14 = a1[4];
  sub_49F4(a1, v15);
  v16 = sub_C561C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BookHistory.CollectionAddition.CodingKeys, &type metadata for BookHistory.CollectionAddition.CodingKeys, v16, v15, v14);
  if ((v13 & 1) != 0)
  {
    LOBYTE(v40) = 1;
    v17 = sub_C5660();
    v18 = v33;
    v19 = v38;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.CollectionAddition.AddedInCodingKeys, &v40, v38, &type metadata for BookHistory.CollectionAddition.AddedInCodingKeys, v17);
    v40 = v36;
    v41 = v11;
    v39 = 0;
    v20 = sub_5EDC(&qword_1F3500);
    v21 = sub_C572C(&qword_1F3508, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    v22 = v35;
    v23 = v37;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v40, &v39, v35, v20, v21);
    if (!v23)
    {
      v40 = v31;
      v41 = v30;
      v39 = 1;
      v24 = sub_C56A4();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v40, &v39, v22, &type metadata for CollectionMembershipInfo, v24);
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v19);
  }
  else
  {
    v26 = v36;
    LOBYTE(v40) = 0;
    v27 = sub_C56E8();
    v28 = v38;
    v29 = KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys, &v40, v38, &type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys, v27);
    KeyedEncodingContainer.encode(_:forKey:)(v29, v5, v26);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v28);
  }
}

Swift::Int BookHistory.CollectionAddition.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt v3;
  Swift::UInt v4;
  char v5;
  Swift::UInt64 v6;
  _QWORD v8[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v5 = *(_BYTE *)(v0 + 32);
  Hasher.init(_seed:)(v8, 0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v1 = 0;
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = v2;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t BookHistory.CollectionAddition.init(from:)@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  double v36;
  _BYTE *v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  double *v41;
  _BYTE v42[12];
  int v43;
  uint64_t v44;
  double *v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char v51;
  __int128 v52;
  _QWORD v53[2];

  v45 = a2;
  v48 = sub_5EDC(&qword_1F3520);
  v46 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v47 = &v42[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_5EDC(&qword_1F3528);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_5EDC(&qword_1F3530);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = a1[3];
  v13 = a1[4];
  v49 = a1;
  sub_49F4(a1, v12);
  v14 = sub_C561C();
  v15 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BookHistory.CollectionAddition.CodingKeys, &type metadata for BookHistory.CollectionAddition.CodingKeys, v14, v12, v13);
  if (v15)
    goto LABEL_6;
  v50 = v5;
  v16 = v4;
  v17 = v47;
  v18 = v48;
  v44 = v9;
  v19 = KeyedDecodingContainer.allKeys.getter(v8);
  if (*(_QWORD *)(v19 + 16) != 1)
  {
    v25 = v19;
    v26 = type metadata accessor for DecodingError(0);
    swift_allocError(v26, &protocol witness table for DecodingError, 0, 0);
    v28 = v27;
    sub_5EDC(&qword_1F2C58);
    *v28 = &type metadata for BookHistory.CollectionAddition;
    v29 = KeyedDecodingContainer.codingPath.getter(v8);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v29, 0xD00000000000002BLL, 0x80000000001A0EA0, 0);
    v30 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for DecodingError.typeMismatch(_:), v26);
    swift_willThrow(v30);
    swift_bridgeObjectRelease(v25);
    (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v11, v8);
LABEL_6:
    v31 = v49;
    return sub_62F8(v31);
  }
  v20 = *(unsigned __int8 *)(v19 + 32);
  if ((v20 & 1) != 0)
  {
    v21 = v44;
    v50 = v19;
    LOBYTE(v53[0]) = 1;
    v22 = sub_C5660();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.CollectionAddition.AddedInCodingKeys, v53, v8, &type metadata for BookHistory.CollectionAddition.AddedInCodingKeys, v22);
    v43 = v20;
    v23 = sub_5EDC(&qword_1F3500);
    LOBYTE(v52) = 0;
    v24 = sub_C572C(&qword_1F3538, (uint64_t)&protocol witness table for Double, (uint64_t)&protocol conformance descriptor for <> ClosedRange<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v53, v23, &v52, v18, v23, v24);
    v36 = *(double *)v53;
    v37 = v17;
    v38 = v53[1];
    v51 = 1;
    v39 = sub_C578C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, &type metadata for CollectionMembershipInfo, &v51, v18, &type metadata for CollectionMembershipInfo, v39);
    (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v37, v18);
    swift_bridgeObjectRelease(v50);
    (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v11, v8);
    v40 = v52;
  }
  else
  {
    v43 = *(unsigned __int8 *)(v19 + 32);
    v33 = v19;
    LOBYTE(v53[0]) = 0;
    v34 = sub_C56E8();
    v35 = KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys, v53, v8, &type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys, v34);
    v36 = KeyedDecodingContainer.decode(_:forKey:)(v35, v16);
    (*(void (**)(_BYTE *, uint64_t))(v50 + 8))(v7, v16);
    swift_bridgeObjectRelease(v33);
    (*(void (**)(_BYTE *, uint64_t))(v44 + 8))(v11, v8);
    v38 = 0;
    v40 = 0uLL;
  }
  v31 = v49;
  v41 = v45;
  *v45 = v36;
  *((_QWORD *)v41 + 1) = v38;
  *((_OWORD *)v41 + 1) = v40;
  *((_BYTE *)v41 + 32) = v43;
  return sub_62F8(v31);
}

Swift::Int sub_B37FC(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  Swift::UInt v4;
  Swift::UInt v5;
  char v6;
  Swift::UInt64 v7;
  _QWORD v9[9];

  v2 = *(double *)v1;
  v3 = *(double *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = *(_BYTE *)(v1 + 32);
  Hasher.init(_seed:)(v9, a1);
  if ((v6 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    sub_C4A20(v2, v3);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v7 = *(_QWORD *)&v2;
    else
      v7 = 0;
    Hasher._combine(_:)(v7);
  }
  return Hasher._finalize()();
}

uint64_t sub_B38A8@<X0>(_QWORD *a1@<X0>, double *a2@<X8>)
{
  return BookHistory.CollectionAddition.init(from:)(a1, a2);
}

uint64_t sub_B38BC(_QWORD *a1)
{
  return BookHistory.CollectionAddition.encode(to:)(a1);
}

uint64_t sub_B38D0(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  char v33;

  v30 = a2;
  v3 = sub_5EDC(&qword_1F3A58);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin(v3);
  v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F3A60);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F3A68);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_5EDC(&qword_1F3A70);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  sub_49F4(a1, v16);
  v17 = sub_C84C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys, v17, v16, v15);
  if ((_BYTE)v30)
  {
    if (v30 == 1)
    {
      v32 = 1;
      v18 = sub_C8548();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys, &v32, v12, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys, v18);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
    }
    else
    {
      v33 = 2;
      v20 = sub_C8504();
      v21 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys, &v33, v12, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys, v20);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
    }
  }
  else
  {
    v31 = 0;
    v19 = sub_C858C();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys, &v31, v12, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys, v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v12);
}

uint64_t sub_B3B34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C8548();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B3B5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C8548();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B3B84()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6974616D6F747561;
  if (*v0 != 1)
    v1 = 0x6E776F6E6B6E75;
  if (*v0)
    return v1;
  else
    return 0x796C6C61756E616DLL;
}

uint64_t sub_B3BEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C7E78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B3C10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C84C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B3C38(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C84C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B3C60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C858C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B3C88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C858C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B3CB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C8504();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B3CD8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C8504();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_B3D00@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_C7FF0(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_B3D28(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_B38D0(a1, *v1);
}

void BookHistory.MarkedFinishedInfo.hash(into:)()
{
  unsigned __int8 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt v3;
  Swift::UInt v4;
  unsigned __int8 v5;
  Swift::UInt64 v6;

  v1 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  v4 = *((_QWORD *)v0 + 3);
  v3 = *((_QWORD *)v0 + 4);
  v5 = v0[40];
  Hasher._combine(_:)(*v0);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) == 0)
    v1 = 0;
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = v2;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

uint64_t sub_B3DD4()
{
  _BYTE *v0;

  if (*v0)
    return 0xD00000000000001ALL;
  else
    return 0x73696E616863656DLL;
}

uint64_t sub_B3E18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C83C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_B3E3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C57D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B3E64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C57D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BookHistory.MarkedFinishedInfo.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  char v23;
  int v24;
  char v25;

  v4 = sub_5EDC(&qword_1F3548);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v9 = *((_QWORD *)v1 + 1);
  v20 = *((_QWORD *)v1 + 2);
  v21 = v9;
  v10 = *((_QWORD *)v1 + 3);
  v18 = *((_QWORD *)v1 + 4);
  v19 = v10;
  v24 = v1[40];
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_C57D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BookHistory.MarkedFinishedInfo.CodingKeys, &type metadata for BookHistory.MarkedFinishedInfo.CodingKeys, v13, v11, v12);
  LOBYTE(v22[0]) = v8;
  v25 = 0;
  v14 = sub_C5814();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v25, v4, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism, v14);
  if (!v2)
  {
    v22[0] = v21;
    v22[1] = v20;
    v22[2] = v19;
    v22[3] = v18;
    v23 = v24;
    v25 = 1;
    v15 = sub_C5858();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v25, v4, &type metadata for BookHistory.CollectionAddition, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int BookHistory.MarkedFinishedInfo.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  Swift::UInt v4;
  Swift::UInt v5;
  unsigned __int8 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  _QWORD v10[9];

  v1 = *v0;
  v3 = *((_QWORD *)v0 + 1);
  v2 = *((_QWORD *)v0 + 2);
  v5 = *((_QWORD *)v0 + 3);
  v4 = *((_QWORD *)v0 + 4);
  v6 = v0[40];
  Hasher.init(_seed:)(v10, 0);
  Hasher._combine(_:)(v1);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v3;
  else
    v7 = 0;
  if ((v6 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v7);
    if ((v2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = v2;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v7);
  }
  return Hasher._finalize()();
}

uint64_t BookHistory.MarkedFinishedInfo.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  char v15;
  __int128 v16;
  __int128 v17;
  _OWORD v19[2];
  char v20;
  char v21;

  v5 = sub_5EDC(&qword_1F3568);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_C57D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BookHistory.MarkedFinishedInfo.CodingKeys, &type metadata for BookHistory.MarkedFinishedInfo.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    v21 = 0;
    v12 = sub_C589C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism, &v21, v5, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism, v12);
    v13 = v19[0];
    v21 = 1;
    v14 = sub_C58E0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, &type metadata for BookHistory.CollectionAddition, &v21, v5, &type metadata for BookHistory.CollectionAddition, v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v15 = v20;
    v16 = v19[0];
    v17 = v19[1];
    *(_BYTE *)a2 = v13;
    *(_OWORD *)(a2 + 8) = v16;
    *(_OWORD *)(a2 + 24) = v17;
    *(_BYTE *)(a2 + 40) = v15;
  }
  return sub_62F8(a1);
}

void sub_B4268()
{
  unsigned __int8 *v0;
  double v1;
  double v2;
  Swift::UInt v3;
  Swift::UInt v4;
  unsigned __int8 v5;
  Swift::UInt64 v6;

  v1 = *((double *)v0 + 1);
  v2 = *((double *)v0 + 2);
  v4 = *((_QWORD *)v0 + 3);
  v3 = *((_QWORD *)v0 + 4);
  v5 = v0[40];
  Hasher._combine(_:)(*v0);
  if ((v5 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    sub_C4A20(v1, v2);
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((*(_QWORD *)&v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v6 = *(_QWORD *)&v1;
    else
      v6 = 0;
    Hasher._combine(_:)(v6);
  }
}

Swift::Int sub_B4300(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  double v3;
  double v4;
  Swift::UInt v5;
  Swift::UInt v6;
  unsigned __int8 v7;
  Swift::UInt64 v8;
  _QWORD v10[9];

  v2 = *v1;
  v3 = *((double *)v1 + 1);
  v4 = *((double *)v1 + 2);
  v6 = *((_QWORD *)v1 + 3);
  v5 = *((_QWORD *)v1 + 4);
  v7 = v1[40];
  Hasher.init(_seed:)(v10, a1);
  Hasher._combine(_:)(v2);
  if ((v7 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    sub_C4A20(v3, v4);
    Hasher._combine(_:)(v6);
    Hasher._combine(_:)(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
    if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = *(_QWORD *)&v3;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
  }
  return Hasher._finalize()();
}

uint64_t sub_B43C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BookHistory.MarkedFinishedInfo.init(from:)(a1, a2);
}

uint64_t sub_B43D8(_QWORD *a1)
{
  return BookHistory.MarkedFinishedInfo.encode(to:)(a1);
}

uint64_t sub_B43EC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_B4428 + 4 * byte_192F10[a1]))(0xD000000000000019, 0x800000000019F7D0);
}

uint64_t sub_B4428()
{
  uint64_t v0;

  return v0 - 2;
}

uint64_t sub_B4554()
{
  unsigned __int8 *v0;

  return sub_B43EC(*v0);
}

uint64_t sub_B455C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C85D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_B4580(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_B458C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5924();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B45B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5924();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B45DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C59AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4604(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C59AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B462C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5968();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4654(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5968();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B467C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C59F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B46A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C59F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B46CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5DA8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B46F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5DA8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B471C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5DEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4744(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5DEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B476C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5D20();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4794(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5D20();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B47BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5D64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B47E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5D64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B480C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5B44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4834(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5B44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B485C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5C54();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4884(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5C54();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B48AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5B88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B48D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5B88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B48FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5A34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4924(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5A34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B494C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5C10();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4974(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5C10();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B499C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5C98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B49C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5C98();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B49EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5CDC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4A14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5CDC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B4A3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5A78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4A64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5A78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B4A8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5BCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4AB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5BCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B4ADC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5B00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4B04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5B00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_B4B2C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5ABC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B4B54(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5ABC();
  return CodingKey.debugDescription.getter(a1, v2);
}

_UNKNOWN **static BookHistory.Feature.allCases.getter()
{
  return &off_1D5F10;
}

void BookHistory.Feature.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;

  v3 = sub_5EDC(&qword_1F3580);
  v81 = *(_QWORD *)(v3 - 8);
  v82 = v3;
  __chkstk_darwin(v3);
  v80 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_5EDC(&qword_1F3588);
  v78 = *(_QWORD *)(v5 - 8);
  v79 = v5;
  __chkstk_darwin(v5);
  v77 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5EDC(&qword_1F3590);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7);
  v74 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_5EDC(&qword_1F3598);
  v72 = *(_QWORD *)(v9 - 8);
  v73 = v9;
  __chkstk_darwin(v9);
  v71 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F35A0);
  v69 = *(_QWORD *)(v11 - 8);
  v70 = v11;
  __chkstk_darwin(v11);
  v68 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_5EDC(&qword_1F35A8);
  v66 = *(_QWORD *)(v13 - 8);
  v67 = v13;
  __chkstk_darwin(v13);
  v65 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_5EDC(&qword_1F35B0);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5EDC(&qword_1F35B8);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v59 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_5EDC(&qword_1F35C0);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v56 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_5EDC(&qword_1F35C8);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v53 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_5EDC(&qword_1F35D0);
  v51 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v50 = (char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5EDC(&qword_1F35D8);
  v48 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v47 = (char *)v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_5EDC(&qword_1F35E0);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46);
  v44 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_5EDC(&qword_1F35E8);
  v42 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v41 = (char *)v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_5EDC(&qword_1F35F0);
  v39 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v38 = (char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_5EDC(&qword_1F35F8);
  v36 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v35 = (char *)v33 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_5EDC(&qword_1F3600);
  v33[1] = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v25 = sub_5EDC(&qword_1F3608);
  __chkstk_darwin(v25);
  v85 = sub_5EDC(&qword_1F3610);
  v83 = *(_QWORD *)(v85 - 8);
  __chkstk_darwin(v85);
  v27 = (char *)v33 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *v1;
  v29 = a1;
  v30 = a1[3];
  v31 = v29[4];
  sub_49F4(v29, v30);
  v32 = sub_C5924();
  v84 = v27;
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BookHistory.Feature.CodingKeys, &type metadata for BookHistory.Feature.CodingKeys, v32, v30, v31);
  __asm { BR              X9 }
}

uint64_t sub_B5174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 65) = 0;
  v4 = sub_C5DEC();
  v5 = *(_QWORD *)(v3 - 104);
  v6 = *(_QWORD *)(v3 - 96);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.Feature.ReadFractionHighWaterMarkCodingKeys, v3 - 65, v6, &type metadata for BookHistory.Feature.ReadFractionHighWaterMarkCodingKeys, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 112) + 8))(v5, v6);
}

uint64_t BookHistory.Feature.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v42[4];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;

  v95 = a2;
  v77 = sub_5EDC(&qword_1F36B0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77);
  v91 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_5EDC(&qword_1F36B8);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75);
  v90 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_5EDC(&qword_1F36C0);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v89 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_5EDC(&qword_1F36C8);
  v70 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v88 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_5EDC(&qword_1F36D0);
  v68 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v87 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_5EDC(&qword_1F36D8);
  v66 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v86 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_5EDC(&qword_1F36E0);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65);
  v85 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_5EDC(&qword_1F36E8);
  v62 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v84 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_5EDC(&qword_1F36F0);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v94 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_5EDC(&qword_1F36F8);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v83 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_5EDC(&qword_1F3700);
  v52 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v82 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_5EDC(&qword_1F3708);
  v56 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57);
  v80 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_5EDC(&qword_1F3710);
  v53 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v93 = (char *)v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_5EDC(&qword_1F3718);
  v50 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v81 = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_5EDC(&qword_1F3720);
  v48 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v92 = (char *)v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_5EDC(&qword_1F3728);
  v46 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v79 = (char *)v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_5EDC(&qword_1F3730);
  v44 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v78 = (char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_5EDC(&qword_1F3738);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_5EDC(&qword_1F3740);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (char *)v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a1[3];
  v29 = a1[4];
  v96 = a1;
  sub_49F4(a1, v28);
  v30 = sub_C5924();
  v31 = v97;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BookHistory.Feature.CodingKeys, &type metadata for BookHistory.Feature.CodingKeys, v30, v28, v29);
  if (!v31)
  {
    v42[3] = v23;
    v42[1] = v21;
    v42[2] = v20;
    v97 = v25;
    v43 = v24;
    v32 = v27;
    v33 = KeyedDecodingContainer.allKeys.getter(v24);
    v34 = v33;
    if (*(_QWORD *)(v33 + 16) == 1)
      __asm { BR              X9 }
    v35 = type metadata accessor for DecodingError(0);
    swift_allocError(v35, &protocol witness table for DecodingError, 0, 0);
    v37 = v36;
    sub_5EDC(&qword_1F2C58);
    *v37 = &type metadata for BookHistory.Feature;
    v38 = v43;
    v39 = KeyedDecodingContainer.codingPath.getter(v43);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v39, 0xD00000000000002BLL, 0x80000000001A0EA0, 0);
    v40 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, enum case for DecodingError.typeMismatch(_:), v35);
    swift_willThrow(v40);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v32, v38);
  }
  return sub_62F8(v96);
}

void sub_B65C4(_QWORD *a1@<X8>)
{
  *a1 = &off_1D5F10;
}

uint64_t sub_B65D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BookHistory.Feature.init(from:)(a1, a2);
}

void sub_B65E8(_QWORD *a1)
{
  BookHistory.Feature.encode(to:)(a1);
}

__n128 BookHistory.markedFinishedInfo.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 72);
  v3 = *(_BYTE *)(v1 + 80);
  result = *(__n128 *)(v1 + 40);
  v5 = *(_OWORD *)(v1 + 56);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

__n128 BookHistory.reviewInfo.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  unsigned __int8 v2;
  __n128 result;

  v2 = *(_BYTE *)(v1 + 104);
  result = *(__n128 *)(v1 + 88);
  *a1 = result;
  a1[1].n128_u8[0] = v2;
  return result;
}

uint64_t CollectionRecommendationRequest.overrideBookCandidateLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t CollectionRecommendationRequest.overrideBookCandidateLimitPerSeedBook.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 128);
}

uint64_t BookHistory.secondsSinceExplicitDecline.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 144);
}

uint64_t BookHistory.secondsSinceLastRead.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 160);
}

uint64_t BookHistory.secondsSincePurchased.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 176);
}

uint64_t BookHistory.secondsSinceFirstDownloadedViaFamilySharing.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

__n128 BookHistory.addedToWantToRead.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 240);
  result = *(__n128 *)(v1 + 208);
  v4 = *(_OWORD *)(v1 + 224);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t BookHistory.secondsSinceRemovedFromWantToRead.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 248);
}

__n128 BookHistory.sampled.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 296);
  result = *(__n128 *)(v1 + 264);
  v4 = *(_OWORD *)(v1 + 280);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t BookHistory.secondsSinceProductPageViewed.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 304);
}

uint64_t BookHistory.secondsSinceFirstRecommended.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 320);
}

uint64_t BookHistory.daysRecommendedCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 336);
}

uint64_t BookHistory.consecutiveDaysNotRecommendedCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 352);
}

uint64_t BookHistory.daysRecommendationPassedOverCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 368);
}

uint64_t BookHistory.init(storeID:readFractionHighWaterMark:sampleReadFractionHighWaterMark:markedFinishedInfo:reviewInfo:secondsSinceMoreLikeThis:secondsSinceLessLikeThis:secondsSinceExplicitDecline:secondsSinceLastRead:secondsSincePurchased:secondsSinceFirstDownloadedViaFamilySharing:addedToWantToRead:secondsSinceRemovedFromWantToRead:sampled:secondsSinceProductPageViewed:secondsSinceFirstRecommended:daysRecommendedCount:consecutiveDaysNotRecommendedCount:daysRecommendationPassedOverCount:)@<X0>(uint64_t a1@<X0>, double a2@<X1>, char a3@<W2>, double a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, __int128 *a7@<X6>, double a8@<X7>, uint64_t a9@<X8>, char a10, double a11, char a12, double a13, char a14, double a15, char a16, double a17, char a18, double a19, char a20,__int128 *a21,double a22,char a23,__int128 *a24,double a25,char a26,double a27,char a28,double a29,char a30,double a31,char a32,double a33,char a34)
{
  double v34;
  double v36;
  __int128 v37;
  __int128 v38;
  int v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  int v44;
  __int128 v45;
  __int128 v46;
  int v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;

  v34 = a8;
  v36 = *(double *)a6;
  v37 = *(_OWORD *)(a6 + 1);
  v38 = *(_OWORD *)(a6 + 3);
  v39 = *((unsigned __int8 *)a6 + 40);
  v40 = *a7;
  v41 = *((_BYTE *)a7 + 16);
  v42 = *a21;
  v43 = a21[1];
  v44 = *((unsigned __int8 *)a21 + 32);
  v45 = *a24;
  v46 = a24[1];
  v47 = *((unsigned __int8 *)a24 + 32);
  if ((a3 & 1) == 0)
  {
    v48 = 0;
    if (a2 < 0.0 || a2 > 1.0)
    {
      v34 = a2;
      goto LABEL_54;
    }
  }
  if ((a5 & 1) == 0)
  {
    v48 = 1;
    if (a4 < 0.0 || a4 > 1.0)
    {
      v34 = a4;
      goto LABEL_54;
    }
  }
  if (v39 != 255 && *(double *)&v37 < 0.0)
  {
    v34 = *((double *)a6 + 1);
    v48 = 2;
LABEL_54:
    v49 = sub_C5E30();
    v50 = swift_allocError(&type metadata for BookHistory.Errors, v49, 0, 0);
    *(_QWORD *)v51 = a1;
    *(double *)(v51 + 8) = v34;
    *(_BYTE *)(v51 + 16) = v48;
    return swift_willThrow(v50);
  }
  if ((a10 & 1) == 0 && a8 < 0.0)
  {
    v48 = 4;
    goto LABEL_54;
  }
  if ((a12 & 1) == 0 && a11 < 0.0)
  {
    v48 = 5;
    v34 = a11;
    goto LABEL_54;
  }
  if ((a14 & 1) == 0 && a13 < 0.0)
  {
    v48 = 6;
    v34 = a13;
    goto LABEL_54;
  }
  if ((a16 & 1) == 0 && a15 < 0.0)
  {
    v48 = 7;
    v34 = a15;
    goto LABEL_54;
  }
  if ((a18 & 1) == 0 && a17 < 0.0)
  {
    v48 = 8;
    v34 = a17;
    goto LABEL_54;
  }
  if ((a20 & 1) == 0 && a19 < 0.0)
  {
    v48 = 9;
    v34 = a19;
    goto LABEL_54;
  }
  if (v44 != 255 && *(double *)&v42 < 0.0)
  {
    v34 = *(double *)a21;
    v48 = 10;
    goto LABEL_54;
  }
  if ((a23 & 1) == 0 && a22 < 0.0)
  {
    v48 = 11;
    v34 = a22;
    goto LABEL_54;
  }
  if (v47 != 255 && *(double *)&v45 < 0.0)
  {
    v34 = *(double *)a24;
    v48 = 12;
    goto LABEL_54;
  }
  if ((a26 & 1) == 0 && a25 < 0.0)
  {
    v48 = 13;
    v34 = a25;
    goto LABEL_54;
  }
  if ((a28 & 1) == 0 && a27 < 0.0)
  {
    v48 = 13;
    v34 = a27;
    goto LABEL_54;
  }
  if ((a30 & 1) == 0 && (*(_QWORD *)&a29 & 0x8000000000000000) != 0)
  {
    v48 = 15;
    v34 = a29;
    goto LABEL_54;
  }
  if ((a32 & 1) == 0 && (*(_QWORD *)&a31 & 0x8000000000000000) != 0)
  {
    v48 = 16;
    v34 = a31;
    goto LABEL_54;
  }
  if ((a34 & 1) == 0 && (*(_QWORD *)&a33 & 0x8000000000000000) != 0)
  {
    v48 = 17;
    v34 = a33;
    goto LABEL_54;
  }
  *(_QWORD *)a9 = a1;
  *(double *)(a9 + 8) = a2;
  *(double *)(a9 + 24) = a4;
  result = a34 & 1;
  *(_BYTE *)(a9 + 16) = a3 & 1;
  *(_BYTE *)(a9 + 32) = a5 & 1;
  *(double *)(a9 + 40) = v36;
  *(_OWORD *)(a9 + 48) = v37;
  *(_OWORD *)(a9 + 64) = v38;
  *(_BYTE *)(a9 + 80) = v39;
  *(_OWORD *)(a9 + 88) = v40;
  *(_BYTE *)(a9 + 104) = v41;
  *(double *)(a9 + 112) = a8;
  *(_BYTE *)(a9 + 120) = a10 & 1;
  *(double *)(a9 + 128) = a11;
  *(_BYTE *)(a9 + 136) = a12 & 1;
  *(double *)(a9 + 144) = a13;
  *(_BYTE *)(a9 + 152) = a14 & 1;
  *(double *)(a9 + 160) = a15;
  *(_BYTE *)(a9 + 168) = a16 & 1;
  *(double *)(a9 + 176) = a17;
  *(_BYTE *)(a9 + 184) = a18 & 1;
  *(double *)(a9 + 192) = a19;
  *(_BYTE *)(a9 + 200) = a20 & 1;
  *(_OWORD *)(a9 + 208) = v42;
  *(_OWORD *)(a9 + 224) = v43;
  *(_BYTE *)(a9 + 240) = v44;
  *(double *)(a9 + 248) = a22;
  *(_BYTE *)(a9 + 256) = a23 & 1;
  *(_OWORD *)(a9 + 264) = v45;
  *(_OWORD *)(a9 + 280) = v46;
  *(_BYTE *)(a9 + 296) = v47;
  *(double *)(a9 + 304) = a25;
  *(_BYTE *)(a9 + 312) = a26 & 1;
  *(double *)(a9 + 320) = a27;
  *(_BYTE *)(a9 + 328) = a28 & 1;
  *(double *)(a9 + 336) = a29;
  *(_BYTE *)(a9 + 344) = a30 & 1;
  *(double *)(a9 + 352) = a31;
  *(_BYTE *)(a9 + 360) = a32 & 1;
  *(double *)(a9 + 368) = a33;
  *(_BYTE *)(a9 + 376) = a34 & 1;
  return result;
}

unint64_t BookHistory.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  Swift::String v12;
  void *object;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29;
  void *v30;
  void *v31;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  void *v44;
  void *v45;
  Swift::String v46;
  void *v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  uint64_t v51;
  Swift::String v52;
  void *v53;
  Swift::String v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  void *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  Swift::String v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  void *v79;
  void *v80;
  Swift::String v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  Swift::String v86;
  void *v87;
  void *v88;
  Swift::String v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  Swift::String v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  char v123;
  int v124;
  char v125;
  char v126;
  char v127;
  char v128;
  char v129;
  char v130;
  Swift::String v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  Swift::String v135;
  unint64_t v136;
  unint64_t v137;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_BYTE *)(v0 + 32);
  v100 = *(void **)(v0 + 56);
  v101 = *(_QWORD *)(v0 + 48);
  v99 = *(_QWORD *)(v0 + 64);
  v97 = *(_QWORD *)(v0 + 40);
  v98 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(double *)(v0 + 96);
  v117 = *(unsigned __int8 *)(v0 + 80);
  v118 = *(_BYTE *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 128);
  v119 = *(_BYTE *)(v0 + 120);
  v120 = *(_BYTE *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 176);
  v121 = *(_BYTE *)(v0 + 152);
  v122 = *(_BYTE *)(v0 + 184);
  v102 = *(_QWORD *)(v0 + 192);
  v105 = *(void **)(v0 + 216);
  v106 = *(_QWORD *)(v0 + 208);
  v103 = *(_QWORD *)(v0 + 232);
  v104 = *(_QWORD *)(v0 + 224);
  v123 = *(_BYTE *)(v0 + 200);
  v124 = *(unsigned __int8 *)(v0 + 240);
  v107 = *(_QWORD *)(v0 + 248);
  v110 = *(void **)(v0 + 272);
  v111 = *(_QWORD *)(v0 + 264);
  v108 = *(_QWORD *)(v0 + 288);
  v109 = *(_QWORD *)(v0 + 280);
  v11 = *(unsigned __int8 *)(v0 + 296);
  v125 = *(_BYTE *)(v0 + 256);
  v126 = *(_BYTE *)(v0 + 312);
  v112 = *(_QWORD *)(v0 + 304);
  v113 = *(_QWORD *)(v0 + 320);
  v114 = *(_QWORD *)(v0 + 336);
  v115 = *(_QWORD *)(v0 + 352);
  v116 = *(_QWORD *)(v0 + 368);
  v127 = *(_BYTE *)(v0 + 328);
  v128 = *(_BYTE *)(v0 + 344);
  v129 = *(_BYTE *)(v0 + 360);
  v130 = *(_BYTE *)(v0 + 376);
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0xE000000000000000);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  v136 = 0xD000000000000014;
  v137 = 0x80000000001A1670;
  if ((v2 & 1) == 0)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease(0xE000000000000000);
    v131._countAndFlagsBits = 0xD00000000000001BLL;
    v131._object = (void *)0x80000000001A18E0;
    v14 = sub_5EDC(&qword_1F14C8);
    v15 = swift_allocObject(v14, 72, 7);
    *(_OWORD *)(v15 + 16) = xmmword_1875E0;
    *(_QWORD *)(v15 + 56) = &type metadata for Double;
    *(_QWORD *)(v15 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v15 + 32) = v1;
    v16._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v15);
    v17 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v17);
    String.append(_:)(v131);
    swift_bridgeObjectRelease(v131._object);
  }
  if ((v4 & 1) == 0)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease(0xE000000000000000);
    v131._countAndFlagsBits = 0xD000000000000021;
    v131._object = (void *)0x80000000001A18B0;
    v18 = sub_5EDC(&qword_1F14C8);
    v19 = swift_allocObject(v18, 72, 7);
    *(_OWORD *)(v19 + 16) = xmmword_1875E0;
    *(_QWORD *)(v19 + 56) = &type metadata for Double;
    *(_QWORD *)(v19 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v19 + 32) = v3;
    v20._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v19);
    v21 = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(v21);
    String.append(_:)(v131);
    swift_bridgeObjectRelease(v131._object);
  }
  if (v117 == 255)
  {
    if ((v118 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v33._countAndFlagsBits = 0xD000000000000010;
    v33._object = (void *)0x80000000001A1870;
    String.append(_:)(v33);
    if ((_BYTE)v97)
    {
      if (v97 == 1)
      {
        v34 = 0x6974616D6F747561;
        v35 = 0xED0000796C6C6163;
      }
      else
      {
        v34 = 0x6E776F6E6B6E75;
        v35 = 0xE700000000000000;
      }
    }
    else
    {
      v34 = 0x796C6C61756E616DLL;
      v35 = 0xE800000000000000;
    }
    String.append(_:)(*(Swift::String *)&v34);
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease(0xE000000000000000);
    v135._countAndFlagsBits = 0xD00000000000001DLL;
    v135._object = (void *)0x80000000001A1890;
    v131._countAndFlagsBits = v101;
    v131._object = v100;
    v132 = v99;
    v133 = v98;
    v134 = v117 & 1;
    v46._countAndFlagsBits = BookHistory.CollectionAddition.debugDescription.getter();
    v47 = v46._object;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(v47);
    v48._countAndFlagsBits = 0xD00000000000001DLL;
    v48._object = (void *)0x80000000001A1890;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(0x80000000001A1890);
    if ((v118 & 1) != 0)
    {
LABEL_7:
      if ((v119 & 1) != 0)
        goto LABEL_8;
      goto LABEL_33;
    }
  }
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(17);
  v49._countAndFlagsBits = 0x4977656976657220;
  v49._object = (void *)0xEC0000003D6F666ELL;
  String.append(_:)(v49);
  v50 = sub_5EDC(&qword_1F14C8);
  v51 = swift_allocObject(v50, 72, 7);
  *(_OWORD *)(v51 + 16) = xmmword_1875E0;
  *(_QWORD *)(v51 + 56) = &type metadata for Double;
  *(_QWORD *)(v51 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v51 + 32) = v6;
  v52._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v51);
  v53 = v52._object;
  String.append(_:)(v52);
  swift_bridgeObjectRelease(v53);
  v54._countAndFlagsBits = 44;
  v54._object = (void *)0xE100000000000000;
  String.append(_:)(v54);
  Double.write<A>(to:)(&v131, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v5);
  v55 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v55);
  if ((v119 & 1) != 0)
  {
LABEL_8:
    if ((v120 & 1) != 0)
      goto LABEL_9;
    goto LABEL_34;
  }
LABEL_33:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(v131._object);
  v131._countAndFlagsBits = 0xD00000000000001ALL;
  v131._object = (void *)0x80000000001A1850;
  v56 = sub_5EDC(&qword_1F14C8);
  v57 = swift_allocObject(v56, 72, 7);
  *(_OWORD *)(v57 + 16) = xmmword_1875E0;
  *(_QWORD *)(v57 + 56) = &type metadata for Double;
  *(_QWORD *)(v57 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v57 + 32) = v7;
  v58._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v57);
  v59 = v58._object;
  String.append(_:)(v58);
  swift_bridgeObjectRelease(v59);
  v60 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v60);
  if ((v120 & 1) != 0)
  {
LABEL_9:
    if ((v121 & 1) != 0)
      goto LABEL_10;
    goto LABEL_35;
  }
LABEL_34:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease(v131._object);
  v131._countAndFlagsBits = 0xD00000000000001ALL;
  v131._object = (void *)0x80000000001A1830;
  v61 = sub_5EDC(&qword_1F14C8);
  v62 = swift_allocObject(v61, 72, 7);
  *(_OWORD *)(v62 + 16) = xmmword_1875E0;
  *(_QWORD *)(v62 + 56) = &type metadata for Double;
  *(_QWORD *)(v62 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v62 + 32) = v8;
  v63._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v62);
  v64 = v63._object;
  String.append(_:)(v63);
  swift_bridgeObjectRelease(v64);
  v65 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v65);
  if ((v121 & 1) != 0)
  {
LABEL_10:
    if ((v122 & 1) != 0)
      goto LABEL_11;
    goto LABEL_36;
  }
LABEL_35:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease(v131._object);
  v131._countAndFlagsBits = 0xD00000000000001DLL;
  v131._object = (void *)0x80000000001A1810;
  v66 = sub_5EDC(&qword_1F14C8);
  v67 = swift_allocObject(v66, 72, 7);
  *(_OWORD *)(v67 + 16) = xmmword_1875E0;
  *(_QWORD *)(v67 + 56) = &type metadata for Double;
  *(_QWORD *)(v67 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v67 + 32) = v9;
  v68._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v67);
  v69 = v68._object;
  String.append(_:)(v68);
  swift_bridgeObjectRelease(v69);
  v70 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v70);
  if ((v122 & 1) != 0)
  {
LABEL_11:
    if ((v123 & 1) != 0)
      goto LABEL_12;
    goto LABEL_37;
  }
LABEL_36:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(v131._object);
  v131._countAndFlagsBits = 0xD000000000000017;
  v131._object = (void *)0x80000000001A17F0;
  v71 = sub_5EDC(&qword_1F14C8);
  v72 = swift_allocObject(v71, 72, 7);
  *(_OWORD *)(v72 + 16) = xmmword_1875E0;
  *(_QWORD *)(v72 + 56) = &type metadata for Double;
  *(_QWORD *)(v72 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v72 + 32) = v10;
  v73._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v72);
  v74 = v73._object;
  String.append(_:)(v73);
  swift_bridgeObjectRelease(v74);
  v75 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v75);
  if ((v123 & 1) != 0)
  {
LABEL_12:
    if (v124 == 255)
      goto LABEL_13;
    goto LABEL_38;
  }
LABEL_37:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(v131._object);
  v131._countAndFlagsBits = 0xD00000000000002DLL;
  v131._object = (void *)0x80000000001A17C0;
  v76 = sub_5EDC(&qword_1F14C8);
  v77 = swift_allocObject(v76, 72, 7);
  *(_OWORD *)(v77 + 16) = xmmword_1875E0;
  *(_QWORD *)(v77 + 56) = &type metadata for Double;
  *(_QWORD *)(v77 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v77 + 32) = v102;
  v78._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v77);
  v79 = v78._object;
  String.append(_:)(v78);
  swift_bridgeObjectRelease(v79);
  v80 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v80);
  if (v124 == 255)
  {
LABEL_13:
    if ((v125 & 1) != 0)
      goto LABEL_14;
    goto LABEL_39;
  }
LABEL_38:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v131._object);
  v135._countAndFlagsBits = 0xD00000000000001FLL;
  v135._object = (void *)0x80000000001A1690;
  v131._countAndFlagsBits = v106;
  v131._object = v105;
  v132 = v104;
  v133 = v103;
  v134 = v124 & 1;
  v81._countAndFlagsBits = BookHistory.CollectionAddition.debugDescription.getter();
  v82 = v81._object;
  String.append(_:)(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v135._object;
  String.append(_:)(v135);
  swift_bridgeObjectRelease(v83);
  if ((v125 & 1) != 0)
  {
LABEL_14:
    if (v11 == 255)
      goto LABEL_15;
    goto LABEL_40;
  }
LABEL_39:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease(v131._object);
  v131._countAndFlagsBits = 0xD000000000000023;
  v131._object = (void *)0x80000000001A1790;
  v84 = sub_5EDC(&qword_1F14C8);
  v85 = swift_allocObject(v84, 72, 7);
  *(_OWORD *)(v85 + 16) = xmmword_1875E0;
  *(_QWORD *)(v85 + 56) = &type metadata for Double;
  *(_QWORD *)(v85 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v85 + 32) = v107;
  v86._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v85);
  v87 = v86._object;
  String.append(_:)(v86);
  swift_bridgeObjectRelease(v87);
  v88 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v88);
  if (v11 == 255)
  {
LABEL_15:
    if ((v126 & 1) != 0)
      goto LABEL_16;
    goto LABEL_41;
  }
LABEL_40:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(v131._object);
  v135._countAndFlagsBits = 0xD000000000000015;
  v135._object = (void *)0x80000000001A16B0;
  v131._countAndFlagsBits = v111;
  v131._object = v110;
  v132 = v109;
  v133 = v108;
  v134 = v11 & 1;
  v89._countAndFlagsBits = BookHistory.CollectionAddition.debugDescription.getter();
  v90 = v89._object;
  String.append(_:)(v89);
  swift_bridgeObjectRelease(v90);
  v91 = v135._object;
  String.append(_:)(v135);
  swift_bridgeObjectRelease(v91);
  if ((v126 & 1) != 0)
  {
LABEL_16:
    if ((v127 & 1) != 0)
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_41:
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease(v131._object);
  v131._countAndFlagsBits = 0xD00000000000001FLL;
  v131._object = (void *)0x80000000001A1770;
  v92 = sub_5EDC(&qword_1F14C8);
  v93 = swift_allocObject(v92, 72, 7);
  *(_OWORD *)(v93 + 16) = xmmword_1875E0;
  *(_QWORD *)(v93 + 56) = &type metadata for Double;
  *(_QWORD *)(v93 + 64) = &protocol witness table for Double;
  *(_QWORD *)(v93 + 32) = v112;
  v94._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v93);
  v95 = v94._object;
  String.append(_:)(v94);
  swift_bridgeObjectRelease(v95);
  v96 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v96);
  if ((v127 & 1) == 0)
  {
LABEL_17:
    v131._countAndFlagsBits = 0;
    v131._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease(v131._object);
    v131._countAndFlagsBits = 0xD00000000000001ELL;
    v131._object = (void *)0x80000000001A1750;
    v22 = sub_5EDC(&qword_1F14C8);
    v23 = swift_allocObject(v22, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_1875E0;
    *(_QWORD *)(v23 + 56) = &type metadata for Double;
    *(_QWORD *)(v23 + 64) = &protocol witness table for Double;
    *(_QWORD *)(v23 + 32) = v113;
    v24._countAndFlagsBits = String.init(format:_:)(1714564645, 0xE400000000000000, v23);
    v25 = v24._object;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v25);
    v26 = v131._object;
    String.append(_:)(v131);
    swift_bridgeObjectRelease(v26);
  }
LABEL_18:
  if ((v128 & 1) != 0)
  {
    if ((v129 & 1) != 0)
      goto LABEL_20;
LABEL_27:
    v131._countAndFlagsBits = 0;
    v131._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease(v131._object);
    v131._countAndFlagsBits = 0xD000000000000024;
    v131._object = (void *)0x80000000001A1700;
    v41 = sub_5EDC(&qword_1F14C8);
    v42 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v42 + 16) = xmmword_1875E0;
    *(_QWORD *)(v42 + 56) = &type metadata for Int;
    *(_QWORD *)(v42 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v42 + 32) = v115;
    v43._countAndFlagsBits = String.init(format:_:)(25637, 0xE200000000000000, v42);
    v44 = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(v44);
    v45 = v131._object;
    String.append(_:)(v131);
    swift_bridgeObjectRelease(v45);
    if ((v130 & 1) != 0)
      return v136;
    goto LABEL_21;
  }
  v131._countAndFlagsBits = 0;
  v131._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease(v131._object);
  v131._countAndFlagsBits = 0xD000000000000016;
  v131._object = (void *)0x80000000001A1730;
  v36 = sub_5EDC(&qword_1F14C8);
  v37 = swift_allocObject(v36, 72, 7);
  *(_OWORD *)(v37 + 16) = xmmword_1875E0;
  *(_QWORD *)(v37 + 56) = &type metadata for Int;
  *(_QWORD *)(v37 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v37 + 32) = v114;
  v38._countAndFlagsBits = String.init(format:_:)(25637, 0xE200000000000000, v37);
  v39 = v38._object;
  String.append(_:)(v38);
  swift_bridgeObjectRelease(v39);
  v40 = v131._object;
  String.append(_:)(v131);
  swift_bridgeObjectRelease(v40);
  if ((v129 & 1) == 0)
    goto LABEL_27;
LABEL_20:
  if ((v130 & 1) == 0)
  {
LABEL_21:
    v131._countAndFlagsBits = 0;
    v131._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(v131._object);
    v131._countAndFlagsBits = 0xD000000000000023;
    v131._object = (void *)0x80000000001A16D0;
    v27 = sub_5EDC(&qword_1F14C8);
    v28 = swift_allocObject(v27, 72, 7);
    *(_OWORD *)(v28 + 16) = xmmword_1875E0;
    *(_QWORD *)(v28 + 56) = &type metadata for Int;
    *(_QWORD *)(v28 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v28 + 32) = v116;
    v29._countAndFlagsBits = String.init(format:_:)(25637, 0xE200000000000000, v28);
    v30 = v29._object;
    String.append(_:)(v29);
    swift_bridgeObjectRelease(v30);
    v31 = v131._object;
    String.append(_:)(v131);
    swift_bridgeObjectRelease(v31);
  }
  return v136;
}

void BookHistory.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  Swift::UInt64 v3;
  int v4;
  Swift::UInt v5;
  Swift::UInt64 v6;
  int v7;
  int v8;
  int v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  Swift::UInt64 v18;
  Swift::UInt64 v19;
  Swift::UInt64 v20;
  Swift::UInt64 v21;
  Swift::UInt64 v22;
  Swift::UInt64 v23;
  Swift::UInt64 v24;
  Swift::UInt64 v25;
  Swift::UInt64 v26;
  Swift::UInt64 v27;
  Swift::UInt64 v28;
  Swift::UInt64 v29;
  Swift::UInt v30;
  Swift::UInt v31;
  Swift::UInt64 v32;
  Swift::UInt v33;
  Swift::UInt v34;
  Swift::UInt64 v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt64 v38;
  Swift::UInt64 v39;
  Swift::UInt64 v40;
  Swift::UInt64 v41;
  Swift::UInt64 v42;
  Swift::UInt64 v43;
  Swift::UInt64 v44;
  Swift::UInt64 v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  Swift::UInt64 v50;
  Swift::UInt v51;
  Swift::UInt v52;
  Swift::UInt v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(unsigned __int8 *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(unsigned __int8 *)(v0 + 32);
  v5 = *(unsigned __int8 *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v29 = *(_QWORD *)(v0 + 56);
  v30 = *(_QWORD *)(v0 + 64);
  v31 = *(_QWORD *)(v0 + 72);
  v7 = *(unsigned __int8 *)(v0 + 80);
  v38 = *(_QWORD *)(v0 + 88);
  v39 = *(_QWORD *)(v0 + 96);
  v54 = *(unsigned __int8 *)(v0 + 104);
  v40 = *(_QWORD *)(v0 + 112);
  v55 = *(unsigned __int8 *)(v0 + 120);
  v41 = *(_QWORD *)(v0 + 128);
  v56 = *(unsigned __int8 *)(v0 + 136);
  v42 = *(_QWORD *)(v0 + 144);
  v57 = *(unsigned __int8 *)(v0 + 152);
  v43 = *(_QWORD *)(v0 + 160);
  v58 = *(unsigned __int8 *)(v0 + 168);
  v44 = *(_QWORD *)(v0 + 176);
  v59 = *(unsigned __int8 *)(v0 + 184);
  v45 = *(_QWORD *)(v0 + 192);
  v60 = *(unsigned __int8 *)(v0 + 200);
  v32 = *(_QWORD *)(v0 + 216);
  v33 = *(_QWORD *)(v0 + 224);
  v34 = *(_QWORD *)(v0 + 232);
  v8 = *(unsigned __int8 *)(v0 + 240);
  v46 = *(_QWORD *)(v0 + 208);
  v47 = *(_QWORD *)(v0 + 248);
  v61 = *(unsigned __int8 *)(v0 + 256);
  v35 = *(_QWORD *)(v0 + 272);
  v36 = *(_QWORD *)(v0 + 280);
  v37 = *(_QWORD *)(v0 + 288);
  v9 = *(unsigned __int8 *)(v0 + 296);
  v48 = *(_QWORD *)(v0 + 264);
  v49 = *(_QWORD *)(v0 + 304);
  v50 = *(_QWORD *)(v0 + 320);
  v51 = *(_QWORD *)(v0 + 336);
  v52 = *(_QWORD *)(v0 + 352);
  v53 = *(_QWORD *)(v0 + 368);
  v62 = *(unsigned __int8 *)(v0 + 312);
  v63 = *(unsigned __int8 *)(v0 + 328);
  v64 = *(unsigned __int8 *)(v0 + 344);
  v65 = *(unsigned __int8 *)(v0 + 360);
  v66 = *(unsigned __int8 *)(v0 + 376);
  Hasher._combine(_:)(*(_QWORD *)v0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if (!v4)
      goto LABEL_3;
LABEL_17:
    Hasher._combine(_:)(0);
    if (v7 != 255)
      goto LABEL_7;
LABEL_18:
    Hasher._combine(_:)(0);
    if (!v54)
      goto LABEL_54;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v12 = v1;
  else
    v12 = 0;
  Hasher._combine(_:)(v12);
  if (v4)
    goto LABEL_17;
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = v3;
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  if (v7 == 255)
    goto LABEL_18;
LABEL_7:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v5);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = v6;
  else
    v11 = 0;
  if ((v7 & 1) == 0)
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v11);
    if (!v54)
      goto LABEL_54;
LABEL_19:
    Hasher._combine(_:)(0);
    if (v55)
      goto LABEL_61;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v11);
  if ((v29 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v20 = v29;
  else
    v20 = 0;
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v30);
  Hasher._combine(_:)(v31);
  if (v54)
    goto LABEL_19;
LABEL_54:
  Hasher._combine(_:)(1u);
  if ((v38 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v21 = v38;
  else
    v21 = 0;
  Hasher._combine(_:)(v21);
  if ((v39 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v22 = v39;
  else
    v22 = 0;
  Hasher._combine(_:)(v22);
  if (v55)
  {
LABEL_61:
    Hasher._combine(_:)(0);
    if (v56)
      goto LABEL_62;
    goto LABEL_24;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  if ((v40 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v13 = v40;
  else
    v13 = 0;
  Hasher._combine(_:)(v13);
  if (v56)
  {
LABEL_62:
    Hasher._combine(_:)(0);
    if (v57)
      goto LABEL_63;
    goto LABEL_28;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  if ((v41 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = v41;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  if (v57)
  {
LABEL_63:
    Hasher._combine(_:)(0);
    if (v58)
      goto LABEL_64;
    goto LABEL_32;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  if ((v42 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v15 = v42;
  else
    v15 = 0;
  Hasher._combine(_:)(v15);
  if (v58)
  {
LABEL_64:
    Hasher._combine(_:)(0);
    if (v59)
      goto LABEL_65;
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  if ((v43 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v16 = v43;
  else
    v16 = 0;
  Hasher._combine(_:)(v16);
  if (v59)
  {
LABEL_65:
    Hasher._combine(_:)(0);
    if (v60)
      goto LABEL_66;
    goto LABEL_40;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  if ((v44 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v17 = v44;
  else
    v17 = 0;
  Hasher._combine(_:)(v17);
  if (v60)
  {
LABEL_66:
    Hasher._combine(_:)(0);
    if (v8 == 255)
      goto LABEL_67;
    goto LABEL_44;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  if ((v45 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v18 = v45;
  else
    v18 = 0;
  Hasher._combine(_:)(v18);
  if (v8 == 255)
  {
LABEL_67:
    Hasher._combine(_:)(0);
    if (v61)
      goto LABEL_68;
    goto LABEL_79;
  }
LABEL_44:
  Hasher._combine(_:)(1u);
  if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v19 = v46;
  else
    v19 = 0;
  if ((v8 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v19);
    if ((v32 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v24 = v32;
    else
      v24 = 0;
    Hasher._combine(_:)(v24);
    Hasher._combine(_:)(v33);
    Hasher._combine(_:)(v34);
    if (v61)
    {
LABEL_68:
      Hasher._combine(_:)(0);
      if (v9 != 255)
        goto LABEL_69;
LABEL_83:
      Hasher._combine(_:)(0);
      if (!v62)
        goto LABEL_96;
      goto LABEL_84;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v19);
    if (v61)
      goto LABEL_68;
  }
LABEL_79:
  Hasher._combine(_:)(1u);
  if ((v47 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v25 = v47;
  else
    v25 = 0;
  Hasher._combine(_:)(v25);
  if (v9 == 255)
    goto LABEL_83;
LABEL_69:
  Hasher._combine(_:)(1u);
  if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v23 = v48;
  else
    v23 = 0;
  if ((v9 & 1) == 0)
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v23);
    if (!v62)
      goto LABEL_96;
LABEL_84:
    Hasher._combine(_:)(0);
    if (v63)
      goto LABEL_100;
    goto LABEL_85;
  }
  Hasher._combine(_:)(1uLL);
  Hasher._combine(_:)(v23);
  if ((v35 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v27 = v35;
  else
    v27 = 0;
  Hasher._combine(_:)(v27);
  Hasher._combine(_:)(v36);
  Hasher._combine(_:)(v37);
  if (v62)
    goto LABEL_84;
LABEL_96:
  Hasher._combine(_:)(1u);
  if ((v49 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v28 = v49;
  else
    v28 = 0;
  Hasher._combine(_:)(v28);
  if (v63)
  {
LABEL_100:
    Hasher._combine(_:)(0);
    if (v64)
      goto LABEL_101;
LABEL_89:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
    if (v65)
      goto LABEL_102;
    goto LABEL_90;
  }
LABEL_85:
  Hasher._combine(_:)(1u);
  if ((v50 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v26 = v50;
  else
    v26 = 0;
  Hasher._combine(_:)(v26);
  if (!v64)
    goto LABEL_89;
LABEL_101:
  Hasher._combine(_:)(0);
  if (v65)
  {
LABEL_102:
    Hasher._combine(_:)(0);
    if (v66)
      goto LABEL_103;
LABEL_91:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v53);
    return;
  }
LABEL_90:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v52);
  if (!v66)
    goto LABEL_91;
LABEL_103:
  Hasher._combine(_:)(0);
}

uint64_t sub_B7F00(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_B7F34 + 4 * byte_192F6A[a1]))(0x444965726F7473, 0xE700000000000000);
}

unint64_t sub_B7F34()
{
  return 0xD000000000000019;
}

uint64_t sub_B80EC()
{
  unsigned __int8 *v0;

  return sub_B7F00(*v0);
}

uint64_t sub_B80F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_C8C3C(a1, a2);
  *a3 = result;
  return result;
}

void sub_B8118(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_B8124(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5E74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_B814C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_C5E74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t BookHistory.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  char v85;

  v3 = sub_5EDC(&qword_1F3750);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v75 = v1[1];
  v76 = v7;
  v84 = *((unsigned __int8 *)v1 + 16);
  v74 = v1[3];
  v73 = *((unsigned __int8 *)v1 + 32);
  v8 = v1[6];
  v65 = v1[5];
  v66 = v8;
  v9 = v1[7];
  v69 = v1[8];
  v70 = v9;
  v68 = v1[9];
  v67 = *((unsigned __int8 *)v1 + 80);
  v62 = v1[11];
  v63 = v1[12];
  v64 = *((unsigned __int8 *)v1 + 104);
  v61 = v1[14];
  v60 = *((unsigned __int8 *)v1 + 120);
  v59 = v1[16];
  v58 = *((unsigned __int8 *)v1 + 136);
  v57 = v1[18];
  v56 = *((unsigned __int8 *)v1 + 152);
  v55 = v1[20];
  v54 = *((unsigned __int8 *)v1 + 168);
  v53 = v1[22];
  v52 = *((unsigned __int8 *)v1 + 184);
  v51 = v1[24];
  v50 = *((unsigned __int8 *)v1 + 200);
  v45 = v1[26];
  v46 = v1[27];
  v49 = v1[28];
  v48 = v1[29];
  v47 = *((unsigned __int8 *)v1 + 240);
  v43 = v1[31];
  v44 = *((unsigned __int8 *)v1 + 256);
  v38 = v1[33];
  v42 = v1[34];
  v41 = v1[35];
  v40 = v1[36];
  v39 = *((unsigned __int8 *)v1 + 296);
  v36 = v1[38];
  v34 = v1[40];
  v10 = v1[42];
  v71 = v1[44];
  v72 = v10;
  v33 = v1[46];
  v37 = *((unsigned __int8 *)v1 + 312);
  v35 = *((unsigned __int8 *)v1 + 328);
  v11 = *((unsigned __int8 *)v1 + 344);
  v12 = *((unsigned __int8 *)v1 + 360);
  v13 = *((unsigned __int8 *)v1 + 376);
  v15 = a1[3];
  v14 = a1[4];
  v16 = a1;
  v18 = v17;
  sub_49F4(v16, v15);
  v19 = sub_C5E74();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BookHistory.CodingKeys, &type metadata for BookHistory.CodingKeys, v19, v15, v14);
  LOBYTE(v78) = 0;
  v20 = v77;
  v21 = v6;
  KeyedEncodingContainer.encode(_:forKey:)(v76, &v78, v18);
  if (v20)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v18);
  v22 = v73;
  v23 = v74;
  LODWORD(v77) = v11;
  LODWORD(v76) = v12;
  v24 = v71;
  v25 = v72;
  v32 = v13;
  LOBYTE(v78) = 1;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v75, v84, &v78, v18);
  LOBYTE(v78) = 2;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v22, &v78, v18);
  v78 = v65;
  v79 = v66;
  v80 = v70;
  v81 = v69;
  v82 = v68;
  v83 = v67;
  v85 = 3;
  v26 = sub_C5EB8();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v78, &v85, v18, &type metadata for BookHistory.MarkedFinishedInfo, v26);
  v78 = v62;
  v79 = v63;
  LOBYTE(v80) = v64;
  v85 = 4;
  v27 = sub_C5EFC();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v78, &v85, v18, &type metadata for ReviewInfo, v27);
  LOBYTE(v78) = 5;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v61, v60, &v78, v18);
  LOBYTE(v78) = 6;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v59, v58, &v78, v18);
  LOBYTE(v78) = 7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v57, v56, &v78, v18);
  LOBYTE(v78) = 8;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v55, v54, &v78, v18);
  LOBYTE(v78) = 9;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v53, v52, &v78, v18);
  LOBYTE(v78) = 10;
  v75 = v18;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v51, v50, &v78, v18);
  v78 = v45;
  v79 = v46;
  v80 = v49;
  v81 = v48;
  LOBYTE(v82) = v47;
  v85 = 11;
  v28 = sub_C5858();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v78, &v85, v75, &type metadata for BookHistory.CollectionAddition, v28);
  LOBYTE(v78) = 12;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v43, v44, &v78, v75);
  v78 = v38;
  v79 = v42;
  v80 = v41;
  v81 = v40;
  LOBYTE(v82) = v39;
  v85 = 13;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v78, &v85, v75, &type metadata for BookHistory.CollectionAddition, v28);
  LOBYTE(v78) = 14;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v78, v75);
  LOBYTE(v78) = 15;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v78, v75);
  LOBYTE(v78) = 16;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v77, &v78, v75);
  LOBYTE(v78) = 17;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v76, &v78, v75);
  LOBYTE(v78) = 18;
  v29 = v75;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v33, v32, &v78, v75);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v21, v29);
}

Swift::Int BookHistory.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  BookHistory.hash(into:)();
  return Hasher._finalize()();
}

uint64_t BookHistory.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  char v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned __int8 v103;
  _BYTE v104[4];
  int v105;

  v5 = sub_5EDC(&qword_1F3770);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_C5E74();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BookHistory.CodingKeys, &type metadata for BookHistory.CodingKeys, v11, v9, v10);
  if (!v2)
  {
    LOBYTE(v98) = 0;
    v12 = KeyedDecodingContainer.decode(_:forKey:)(&v98, v5);
    LOBYTE(v98) = 1;
    v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v105 = v14;
    LOBYTE(v98) = 2;
    v82 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v83 = v15;
    v104[0] = 3;
    v16 = sub_C5F40();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v98, &type metadata for BookHistory.MarkedFinishedInfo, v104, v5, &type metadata for BookHistory.MarkedFinishedInfo, v16);
    v81 = v98;
    v80 = v99;
    v79 = v100;
    v78 = v101;
    v77 = v102;
    v76 = v103;
    v104[0] = 4;
    v17 = sub_C5F84();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v98, &type metadata for ReviewInfo, v104, v5, &type metadata for ReviewInfo, v17);
    v75 = v98;
    v74 = v99;
    v73 = v100;
    LOBYTE(v98) = 5;
    v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v72 = v18;
    LOBYTE(v98) = 6;
    v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v70 = v19;
    LOBYTE(v98) = 7;
    v67 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v68 = v20;
    LOBYTE(v98) = 8;
    v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v66 = v21;
    LOBYTE(v98) = 9;
    v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v64 = v22;
    LOBYTE(v98) = 10;
    v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v62 = v23;
    v104[0] = 11;
    v60 = sub_C58E0();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v98, &type metadata for BookHistory.CollectionAddition, v104, v5, &type metadata for BookHistory.CollectionAddition, v60);
    v59 = v98;
    v58 = v99;
    v57 = v100;
    v56 = v101;
    v55 = v102;
    LOBYTE(v98) = 12;
    v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v53 = v24;
    v104[0] = 13;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v98, &type metadata for BookHistory.CollectionAddition, v104, v5, &type metadata for BookHistory.CollectionAddition, v60);
    v60 = v98;
    v52 = v99;
    v51 = v100;
    v50 = v101;
    v49 = v102;
    LOBYTE(v98) = 14;
    v48 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v47 = v25;
    LOBYTE(v98) = 15;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v45 = v26;
    LOBYTE(v98) = 16;
    v44 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v43 = v27;
    LOBYTE(v98) = 17;
    v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v41 = v28;
    LOBYTE(v98) = 18;
    v40 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v98, v5);
    v31 = v30;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v96 = v73;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 24) = v82;
    v32 = v80;
    *(_QWORD *)(a2 + 40) = v81;
    *(_QWORD *)(a2 + 48) = v32;
    v33 = v78;
    *(_QWORD *)(a2 + 56) = v79;
    *(_QWORD *)(a2 + 64) = v33;
    *(_QWORD *)(a2 + 72) = v77;
    *(_BYTE *)(a2 + 80) = v76;
    v34 = v74;
    *(_QWORD *)(a2 + 88) = v75;
    *(_QWORD *)(a2 + 96) = v34;
    *(_QWORD *)(a2 + 112) = v71;
    *(_QWORD *)(a2 + 128) = v69;
    *(_QWORD *)(a2 + 144) = v67;
    *(_QWORD *)(a2 + 160) = v65;
    *(_QWORD *)(a2 + 176) = v63;
    *(_QWORD *)(a2 + 192) = v61;
    v104[0] = v105 & 1;
    v35 = v83 & 1;
    v97 = v83 & 1;
    v95 = v72 & 1;
    v94 = v70 & 1;
    v93 = v68 & 1;
    v92 = v66 & 1;
    v91 = v64 & 1;
    v90 = v62 & 1;
    v89 = v53 & 1;
    v88 = v47 & 1;
    v87 = v45 & 1;
    v86 = v43 & 1;
    v85 = v41 & 1;
    v84 = v31 & 1;
    *(_BYTE *)(a2 + 16) = v105 & 1;
    *(_BYTE *)(a2 + 32) = v35;
    *(_BYTE *)(a2 + 104) = v96;
    *(_BYTE *)(a2 + 120) = v95;
    *(_BYTE *)(a2 + 136) = v94;
    *(_BYTE *)(a2 + 152) = v93;
    *(_BYTE *)(a2 + 168) = v92;
    *(_BYTE *)(a2 + 184) = v91;
    *(_BYTE *)(a2 + 200) = v90;
    v36 = v58;
    *(_QWORD *)(a2 + 208) = v59;
    *(_QWORD *)(a2 + 216) = v36;
    v37 = v56;
    *(_QWORD *)(a2 + 224) = v57;
    *(_QWORD *)(a2 + 232) = v37;
    *(_BYTE *)(a2 + 240) = v55;
    *(_QWORD *)(a2 + 248) = v54;
    *(_BYTE *)(a2 + 256) = v89;
    v38 = v52;
    *(_QWORD *)(a2 + 264) = v60;
    *(_QWORD *)(a2 + 272) = v38;
    v39 = v50;
    *(_QWORD *)(a2 + 280) = v51;
    *(_QWORD *)(a2 + 288) = v39;
    *(_BYTE *)(a2 + 296) = v49;
    *(_QWORD *)(a2 + 304) = v48;
    *(_BYTE *)(a2 + 312) = v88;
    *(_QWORD *)(a2 + 320) = v46;
    *(_BYTE *)(a2 + 328) = v87;
    *(_QWORD *)(a2 + 336) = v44;
    *(_BYTE *)(a2 + 344) = v86;
    *(_QWORD *)(a2 + 352) = v42;
    *(_BYTE *)(a2 + 360) = v85;
    *(_QWORD *)(a2 + 368) = v40;
    *(_BYTE *)(a2 + 376) = v84;
  }
  return sub_62F8(a1);
}

uint64_t sub_B9158@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return BookHistory.init(from:)(a1, a2);
}

uint64_t sub_B916C(_QWORD *a1)
{
  return BookHistory.encode(to:)(a1);
}

Swift::Int sub_B9184(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  BookHistory.hash(into:)();
  return Hasher._finalize()();
}

void sub_B91BC(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_UNKNOWN **sub_B91C8()
{
  char *v0;

  return off_1E31F8[*v0];
}

uint64_t sub_B91DC()
{
  uint64_t result;

  sub_6789C();
  result = OS_os_log.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD00000000000001DLL, 0x80000000001A1BF0);
  qword_2245A8 = result;
  return result;
}

uint64_t sub_B9244()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_2245B0);
  sub_5216C(v0, (uint64_t)qword_2245B0);
  if (qword_1F00D8 != -1)
    swift_once(&qword_1F00D8, sub_B91DC);
  return Logger.init(_:)((id)qword_2245A8);
}

uint64_t sub_B92C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4[162] = v3;
  v4[161] = a2;
  v4[160] = a1;
  v6 = type metadata accessor for StoreBookRating(0);
  v4[163] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[164] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[165] = swift_task_alloc(v8);
  v4[166] = swift_task_alloc(v8);
  v9 = sub_5EDC(&qword_1F3AC0);
  v4[167] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for StoreBook.Origin(0);
  v4[168] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[169] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[170] = swift_task_alloc(v12);
  v4[171] = swift_task_alloc(v12);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F3AC8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[172] = swift_task_alloc(v13);
  v4[173] = swift_task_alloc(v13);
  v4[174] = swift_task_alloc(v13);
  v4[175] = swift_task_alloc(v13);
  v4[176] = swift_task_alloc(v13);
  v4[177] = swift_task_alloc(v13);
  v4[178] = swift_task_alloc(v13);
  v4[179] = swift_task_alloc(v13);
  v14 = type metadata accessor for Date(0);
  v4[180] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[181] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[182] = swift_task_alloc(v16);
  v4[183] = swift_task_alloc(v16);
  v4[184] = swift_task_alloc(v16);
  v4[185] = swift_task_alloc(v16);
  v4[186] = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_5EDC(&qword_1F1310) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[187] = swift_task_alloc(v17);
  v4[188] = swift_task_alloc(v17);
  v4[189] = swift_task_alloc(v17);
  v4[190] = swift_task_alloc(v17);
  v4[191] = swift_task_alloc(v17);
  v4[192] = swift_task_alloc(v17);
  v4[193] = swift_task_alloc(v17);
  v4[194] = swift_task_alloc(v17);
  v4[195] = swift_task_alloc(v17);
  v4[196] = swift_task_alloc(v17);
  v4[197] = swift_task_alloc(v17);
  v4[198] = swift_task_alloc(v17);
  v4[199] = swift_task_alloc(v17);
  v4[200] = swift_task_alloc(v17);
  v4[201] = swift_task_alloc(v17);
  v4[202] = swift_task_alloc(v17);
  v4[203] = swift_task_alloc(v17);
  v18 = type metadata accessor for StoreBook(0);
  v4[204] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v4[205] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[206] = swift_task_alloc(v20);
  v4[207] = swift_task_alloc(v20);
  v4[208] = swift_task_alloc(v20);
  v21 = type metadata accessor for Logger(0);
  v4[209] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v4[210] = v22;
  v4[211] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v4 + 98, (const void *)(a3 + 88), 0x16BuLL);
  return swift_task_switch(sub_B95E4, 0, 0);
}

uint64_t sub_B95E4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  int *v11;

  v1 = (_QWORD *)v0[162];
  v2 = v1[10];
  v3 = v1[11];
  sub_49F4(v1 + 7, v2);
  v4 = sub_5EDC(&qword_1F3AD0);
  v5 = swift_allocObject(v4, 64, 7);
  *(_OWORD *)(v5 + 32) = xmmword_1875E0;
  if (qword_1F0108 != -1)
    swift_once(&qword_1F0108, sub_1099A0);
  v6 = qword_1F5788;
  *(_QWORD *)(v5 + 48) = qword_1F5788;
  *(_QWORD *)(v5 + 56) = 16;
  v7 = v6 | 0x13;
  swift_setDeallocating(v5);
  swift_deallocClassInstance(v5, 32, 7);
  v0[158] = v7;
  v8 = *(int **)(v3 + 8);
  v11 = (int *)((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[212] = v9;
  *v9 = v0;
  v9[1] = sub_B96F8;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v11)(v0 + 158, v2, v3);
}

uint64_t sub_B96F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1696);
  *(_QWORD *)(v3 + 1704) = a1;
  *(_QWORD *)(v3 + 1712) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_BC8EC;
  else
    v5 = sub_B9768;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_B9768()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 1296);
  v2 = v1[10];
  v3 = v1[11];
  sub_49F4(v1 + 7, v2);
  v4 = *(int **)(v3 + 32);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  *(_QWORD *)(v0 + 1720) = v5;
  *v5 = v0;
  v5[1] = sub_B97E4;
  return v7(v2, v3);
}

uint64_t sub_B97E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1720);
  *(_QWORD *)(v3 + 1728) = a1;
  *(_QWORD *)(v3 + 1736) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_BCB4C;
  else
    v5 = sub_B9854;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_B9854()
{
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  _BOOL8 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  _QWORD *v80;

  v1 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1728);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v71 = (_QWORD *)(isUniquelyReferenced_nonNull_native + 1248);
    v80 = _swiftEmptyArrayStorage;
    sub_340F4(0, v2, 0);
    v3 = _swiftEmptyArrayStorage;
    v4 = sub_EDD8C(v1);
    v6 = v5;
    v8 = v7 & 1;
    v73 = v1;
    v75 = v1 + 56;
    do
    {
      if (v4 < 0 || v4 >= 1 << *(_BYTE *)(v1 + 32))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      if (((*(_QWORD *)(v75 + (((unint64_t)v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) == 0)
        goto LABEL_37;
      if (*(_DWORD *)(v1 + 36) != (_DWORD)v6)
        goto LABEL_38;
      *v71 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 8 * v4);
      v9 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v11 = v10;
      v80 = v3;
      v13 = v3[2];
      v12 = v3[3];
      isUniquelyReferenced_nonNull_native = v13 + 1;
      if (v13 >= v12 >> 1)
      {
        sub_340F4(v12 > 1, v13 + 1, 1);
        v3 = v80;
      }
      v14 = v77[216];
      v3[2] = isUniquelyReferenced_nonNull_native;
      v15 = &v3[2 * v13];
      v15[4] = v9;
      v15[5] = v11;
      v16 = sub_EDE30(v4, v6, v8 & 1, v14);
      v4 = v16;
      v6 = v17;
      v8 = v18 & 1;
      --v2;
      v1 = v73;
    }
    while (v2);
    isUniquelyReferenced_nonNull_native = (uint64_t)v77;
    v19 = v77[216];
    sub_41814(v16, v17, v18 & 1);
    swift_bridgeObjectRelease(v19);
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(isUniquelyReferenced_nonNull_native + 1728));
    v3 = _swiftEmptyArrayStorage;
  }
  v1 = sub_3CBC8((uint64_t)v3);
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1744) = v1;
  swift_bridgeObjectRelease(v3);
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_19;
  if (qword_1F00E0 != -1)
    goto LABEL_41;
  while (1)
  {
    v20 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1688);
    v21 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1680);
    v22 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1672);
    v23 = sub_5216C(v22, (uint64_t)qword_2245B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v23, v22);
    v24 = swift_bridgeObjectRetain_n(v1, 2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1736);
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      v30 = swift_slowAlloc(32, -1);
      v79 = v30;
      *(_DWORD *)v28 = 136315138;
      v31 = swift_bridgeObjectRetain(v1);
      v32 = sub_37C78(v31);
      swift_bridgeObjectRelease(v1);
      v80 = v32;
      swift_retain(v32);
      sub_B2968((uint64_t *)&v80);
      if (v27)
      {
        swift_bridgeObjectRelease(v1);
        return swift_release(v80);
      }
      v72 = v29[210];
      v74 = v29[209];
      v76 = v29[211];
      swift_release(v32);
      v37 = v80;
      v38 = Array.description.getter(v80, &type metadata for String);
      v40 = v39;
      swift_release(v37);
      v29[157] = sub_9DA98(v38, v40, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v29 + 157, v29 + 158, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease(v40);
      swift_bridgeObjectRelease_n(v1, 2);
      _os_log_impl(&dword_0, v25, v26, "Excluding hidden purchases from book history %s", v28, 0xCu);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v76, v74);
      isUniquelyReferenced_nonNull_native = (uint64_t)v29;
    }
    else
    {
      v34 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1688);
      v35 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1680);
      v36 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1672);
      swift_bridgeObjectRelease_n(v1, 2);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    }
LABEL_19:
    v41 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1704);
    v42 = *(_QWORD *)(v41 + 16);
    if (!v42)
      break;
    v43 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1640);
    v44 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1632);
    v1 = v41 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
    v45 = *(_QWORD *)(v43 + 72);
    swift_bridgeObjectRetain(v41);
    v46 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v48 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1664);
      v49 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1656);
      sub_26A5C(v1, v48, type metadata accessor for StoreBook);
      v50 = *(_QWORD *)(v48 + *(int *)(v44 + 20));
      sub_26A5C(v48, v49, type metadata accessor for StoreBook);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
      v80 = v46;
      v52 = sub_39228(v50);
      v53 = v46[2];
      v54 = (v51 & 1) == 0;
      v55 = v53 + v54;
      if (__OFADD__(v53, v54))
        break;
      v56 = v51;
      if (v46[3] >= v55)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_16B4F8();
          v46 = v80;
        }
      }
      else
      {
        sub_15A11C(v55, isUniquelyReferenced_nonNull_native);
        v46 = v80;
        v57 = sub_39228(v50);
        if ((v56 & 1) != (v58 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        v52 = v57;
      }
      v59 = v77[207];
      if ((v56 & 1) != 0)
      {
        sub_C939C(v59, v46[7] + v52 * v45);
      }
      else
      {
        v46[(v52 >> 6) + 8] |= 1 << v52;
        *(_QWORD *)(v46[6] + 8 * v52) = v50;
        sub_A2618(v59, v46[7] + v52 * v45, type metadata accessor for StoreBook);
        v60 = v46[2];
        v61 = __OFADD__(v60, 1);
        v62 = v60 + 1;
        if (v61)
          goto LABEL_40;
        v46[2] = v62;
      }
      isUniquelyReferenced_nonNull_native = (uint64_t)v77;
      v47 = v77[208];
      swift_bridgeObjectRelease(0x8000000000000000);
      sub_26AA0(v47, type metadata accessor for StoreBook);
      v1 += v45;
      if (!--v42)
      {
        swift_bridgeObjectRelease(v77[213]);
        goto LABEL_34;
      }
    }
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    swift_once(&qword_1F00E0, sub_B9244);
  }
  v46 = _swiftEmptyDictionarySingleton;
LABEL_34:
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1752) = v46;
  v63 = *(_QWORD **)(isUniquelyReferenced_nonNull_native + 1296);
  v64 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1280);
  *(_OWORD *)(isUniquelyReferenced_nonNull_native + 1760) = *(_OWORD *)(isUniquelyReferenced_nonNull_native + 976);
  v65 = sub_C4A68(v64);
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1776) = v65;
  v66 = v63 + 2;
  v67 = v63[5];
  v68 = v63[6];
  sub_49F4(v66, v67);
  v69 = *(int **)(v68 + 8);
  v78 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v69 + *v69);
  v70 = (uint64_t *)swift_task_alloc(v69[1]);
  *(_QWORD *)(isUniquelyReferenced_nonNull_native + 1784) = v70;
  *v70 = isUniquelyReferenced_nonNull_native;
  v70[1] = (uint64_t)sub_B9EA0;
  return v78(v65, v67, v68);
}

uint64_t sub_B9EA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1784);
  *(_QWORD *)(v3 + 1792) = a1;
  *(_QWORD *)(v3 + 1800) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_BCDB4;
  else
    v5 = sub_B9F10;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_B9F10()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, char *, uint64_t, uint64_t);

  v1 = (_QWORD *)v0[162];
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = sub_3CC5C((uint64_t)&off_1D61B8);
  v0[226] = v4;
  v5 = OBJC_IVAR____TtC20BooksPersonalization18BookHistoryService_timeZone;
  v0[227] = OBJC_IVAR____TtC20BooksPersonalization18BookHistoryService_timeZone;
  v6 = (char *)v1 + v5;
  v7 = *(int **)(v3 + 40);
  v10 = (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  v0[228] = v8;
  *v8 = v0;
  v8[1] = sub_B9FC0;
  return v10(v4, v6, v2, v3);
}

uint64_t sub_B9FC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1824);
  v3[229] = a1;
  v3[230] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_BD040;
  }
  else
  {
    swift_bridgeObjectRelease(v3[226]);
    v5 = sub_BA038;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_BA038()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, char *, uint64_t, uint64_t);

  v1 = v0[227];
  v2 = (char *)v0[162];
  v3 = *((_QWORD *)v2 + 5);
  v4 = *((_QWORD *)v2 + 6);
  sub_49F4((_QWORD *)v2 + 2, v3);
  v5 = sub_3CC5C((uint64_t)&off_1D61E0);
  v0[231] = v5;
  v6 = *(int **)(v4 + 40);
  v9 = (uint64_t (*)(uint64_t, char *, uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc(v6[1]);
  v0[232] = v7;
  *v7 = v0;
  v7[1] = sub_BA0E0;
  return v9(v5, &v2[v1], v3, v4);
}

uint64_t sub_BA0E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1856);
  v3[233] = a1;
  v3[234] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_BD2E4;
  }
  else
  {
    swift_bridgeObjectRelease(v3[231]);
    v5 = sub_BA158;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_BA158()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  _QWORD *v29;
  uint64_t v30;
  int *v31;
  _QWORD *v32;

  v1 = v0[213];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[205];
    v30 = v0[204];
    v32 = _swiftEmptyArrayStorage;
    sub_340F4(0, v2, 0);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      v6 = v0[206];
      sub_26A5C(v4, v6, type metadata accessor for StoreBook);
      v0[159] = *(_QWORD *)(v6 + *(int *)(v30 + 20));
      v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v9 = v8;
      sub_26AA0(v6, type metadata accessor for StoreBook);
      v10 = v32;
      if ((swift_isUniquelyReferenced_nonNull_native(v32) & 1) == 0)
      {
        sub_340F4(0, v32[2] + 1, 1);
        v10 = v32;
      }
      v12 = v10[2];
      v11 = v10[3];
      if (v12 >= v11 >> 1)
      {
        sub_340F4(v11 > 1, v12 + 1, 1);
        v10 = v32;
      }
      v10[2] = v12 + 1;
      v13 = &v10[2 * v12];
      v13[4] = v7;
      v13[5] = v9;
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v0[213]);
  }
  else
  {
    swift_bridgeObjectRelease(v0[213]);
    v10 = _swiftEmptyArrayStorage;
  }
  v14 = v0[224];
  v15 = v0[218];
  v16 = sub_3CBC8((uint64_t)v10);
  swift_bridgeObjectRelease(v10);
  v17 = sub_152FD4(v16, v14);
  v18 = v0[218];
  if (*(_QWORD *)(v15 + 16) <= *(_QWORD *)(v17 + 16) >> 3)
  {
    v32 = (_QWORD *)v17;
    sub_C3FD4(v18);
    swift_bridgeObjectRelease(v18);
    v19 = v32;
  }
  else
  {
    v19 = sub_C270C(v0[218], v17);
    swift_bridgeObjectRelease(v18);
  }
  v20 = v0[234];
  v21 = swift_bridgeObjectRetain(v19);
  v22 = sub_37C78(v21);
  swift_bridgeObjectRelease(v19);
  v32 = v22;
  sub_B2968((uint64_t *)&v32);
  if (v20)
    return swift_release(v32);
  v24 = (_QWORD *)v0[162];
  swift_bridgeObjectRelease(v19);
  v25 = v24 + 2;
  v0[235] = v32;
  v26 = v24[5];
  v27 = v24[6];
  sub_49F4(v25, v26);
  v28 = *(int **)(v27 + 48);
  v31 = (int *)((char *)v28 + *v28);
  v29 = (_QWORD *)swift_task_alloc(v28[1]);
  v0[236] = v29;
  *v29 = v0;
  v29[1] = sub_BA400;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v31)(v0[203], v26, v27);
}

uint64_t sub_BA400()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1888);
  *(_QWORD *)(*(_QWORD *)v1 + 1896) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[235];
    v5 = v2[233];
    v6 = v2[229];
    v7 = v2[222];
    swift_bridgeObjectRelease(v2[219]);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    swift_release(v4);
    v8 = sub_BD594;
  }
  else
  {
    v8 = sub_BA4AC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_BA4AC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[162];
  v2 = v1[10];
  v3 = v1[11];
  sub_49F4(v1 + 7, v2);
  v4 = *(int **)(v3 + 16);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[238] = v5;
  *v5 = v0;
  v5[1] = sub_BA530;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v7)(v0[202], v2, v3);
}

uint64_t sub_BA530()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1904);
  *(_QWORD *)(*(_QWORD *)v1 + 1912) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[235];
    v5 = v2[233];
    v6 = v2[229];
    v7 = v2[222];
    swift_bridgeObjectRelease(v2[219]);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    swift_release(v4);
    v8 = sub_BD7F4;
  }
  else
  {
    v8 = sub_BA5DC;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_BA5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t i;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  int64_t v49;
  unint64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  _BYTE __dst[376];

  v1 = *(_QWORD *)(v0 + 1624);
  v2 = *(_QWORD *)(v0 + 1608);
  v3 = *(_QWORD *)(v0 + 1600);
  v4 = *(_QWORD *)(v0 + 1592);
  v5 = *(_QWORD *)(v0 + 1448);
  v6 = *(_QWORD *)(v0 + 1440);
  sub_418BC(*(_QWORD *)(v0 + 1616), v2, &qword_1F1310);
  sub_418BC(v2, v3, &qword_1F1310);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  *(_QWORD *)(v0 + 1920) = v7;
  LODWORD(v2) = v7(v3, 1, v6);
  sub_417D8(v3, &qword_1F1310);
  sub_418BC(v1, v4, &qword_1F1310);
  if ((_DWORD)v2 == 1)
  {
    sub_417D8(*(_QWORD *)(v0 + 1592), &qword_1F1310);
LABEL_3:
    sub_C9354(*(_QWORD *)(v0 + 1624), *(_QWORD *)(v0 + 1608));
    goto LABEL_10;
  }
  v8 = *(_QWORD *)(v0 + 1608);
  v9 = *(_QWORD *)(v0 + 1440);
  v10 = v7(v8, 1, v9);
  v11 = *(_QWORD *)(v0 + 1592);
  if (v10)
  {
    sub_417D8(*(_QWORD *)(v0 + 1592), &qword_1F1310);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 1584);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1448) + 16))(*(_QWORD *)(v0 + 1488), v8, v9);
    sub_418BC(v11, v12, &qword_1F1310);
    v13 = v7(v12, 1, v9);
    v14 = *(_QWORD *)(v0 + 1584);
    if (v13 == 1)
    {
      static Date.distantPast.getter();
      sub_417D8(v14, &qword_1F1310);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1448) + 32))(*(_QWORD *)(v0 + 1480), *(_QWORD *)(v0 + 1584), *(_QWORD *)(v0 + 1440));
    }
    v15 = *(_QWORD *)(v0 + 1592);
    v16 = *(_QWORD *)(v0 + 1488);
    v17 = *(_QWORD *)(v0 + 1480);
    v18 = *(_QWORD *)(v0 + 1448);
    v19 = *(_QWORD *)(v0 + 1440);
    v20 = Date.compare(_:)(v17);
    v21 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v21(v17, v19);
    v21(v16, v19);
    sub_417D8(v15, &qword_1F1310);
    if (v20 == 1)
      goto LABEL_3;
  }
LABEL_10:
  v22 = *(_QWORD *)(v0 + 1576);
  v23 = *(_QWORD *)(v0 + 1440);
  sub_418BC(*(_QWORD *)(v0 + 1608), v22, &qword_1F1310);
  v24 = v7(v22, 1, v23);
  v25 = *(_QWORD *)(v0 + 1576);
  v26 = *(_QWORD *)(v0 + 1472);
  if (v24 == 1)
  {
    Date.init()(v26);
    sub_417D8(v25, &qword_1F1310);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1448) + 32))(v26, *(_QWORD *)(v0 + 1576), *(_QWORD *)(v0 + 1440));
  }
  v27 = *(_QWORD *)(v0 + 1280);
  v28 = *(_QWORD *)(*(_QWORD *)(v0 + 1880) + 16);
  *(_QWORD *)(v0 + 1928) = v28;
  v29 = lround(ceil((double)v28 / 1000.0));
  *(_QWORD *)(v0 + 1936) = v29;
  v30 = swift_bridgeObjectRetain(v27);
  result = Date.init()(v30);
  if (v29 < 0)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (!v29)
  {
    v63 = *(_QWORD *)(v0 + 1880);
    v64 = *(_QWORD *)(v0 + 1864);
    v65 = *(_QWORD *)(v0 + 1776);
    v66 = *(_QWORD *)(v0 + 1752);
    v78 = *(_QWORD *)(v0 + 1688);
    v79 = *(_QWORD *)(v0 + 1664);
    v80 = *(_QWORD *)(v0 + 1656);
    v81 = *(_QWORD *)(v0 + 1648);
    v75 = *(_QWORD *)(v0 + 1616);
    v76 = *(_QWORD *)(v0 + 1624);
    v77 = *(_QWORD *)(v0 + 1608);
    v82 = *(_QWORD *)(v0 + 1600);
    v83 = *(_QWORD *)(v0 + 1592);
    v84 = *(_QWORD *)(v0 + 1584);
    v85 = *(_QWORD *)(v0 + 1576);
    v86 = *(_QWORD *)(v0 + 1568);
    v87 = *(_QWORD *)(v0 + 1560);
    v88 = *(_QWORD *)(v0 + 1552);
    v89 = *(_QWORD *)(v0 + 1544);
    v90 = *(_QWORD *)(v0 + 1536);
    v91 = *(_QWORD *)(v0 + 1528);
    v92 = *(_QWORD *)(v0 + 1520);
    v93 = *(_QWORD *)(v0 + 1512);
    v94 = *(_QWORD *)(v0 + 1504);
    v95 = *(_QWORD *)(v0 + 1496);
    v96 = *(_QWORD *)(v0 + 1488);
    v97 = *(_QWORD *)(v0 + 1480);
    v73 = *(_QWORD *)(v0 + 1464);
    v74 = *(_QWORD *)(v0 + 1472);
    v67 = *(_QWORD *)(v0 + 1448);
    v68 = *(_QWORD *)(v0 + 1440);
    v98 = *(_QWORD *)(v0 + 1456);
    v99 = *(_QWORD *)(v0 + 1432);
    v100 = *(_QWORD *)(v0 + 1424);
    v101 = *(_QWORD *)(v0 + 1416);
    v102 = *(_QWORD *)(v0 + 1408);
    v103 = *(_QWORD *)(v0 + 1400);
    v104 = *(_QWORD *)(v0 + 1392);
    v105 = *(_QWORD *)(v0 + 1384);
    v106 = *(_QWORD *)(v0 + 1376);
    v107 = *(_QWORD *)(v0 + 1368);
    v108 = *(_QWORD *)(v0 + 1360);
    v109 = *(_QWORD *)(v0 + 1336);
    v110 = *(_QWORD *)(v0 + 1328);
    v112 = *(_QWORD *)(v0 + 1320);
    v69 = *(_QWORD *)(v0 + 1288);
    v70 = *(_QWORD *)(v0 + 1280);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1832));
    swift_bridgeObjectRelease(v64);
    swift_release(v63);
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v65);
    memcpy(__dst, (const void *)(v0 + 784), 0x16BuLL);
    sub_605D0(v0 + 784);
    v71 = Dictionary<>.mostRecentBookHistories(limit:scorerConfig:)(v69, __dst, (uint64_t)_swiftEmptyDictionarySingleton);
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    sub_60AF8(v0 + 784);
    v72 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v72(v73, v68);
    v72(v74, v68);
    sub_417D8(v75, &qword_1F1310);
    sub_417D8(v76, &qword_1F1310);
    sub_417D8(v77, &qword_1F1310);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v76);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v74);
    swift_task_dealloc(v73);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v71);
  }
  v32 = *(_QWORD *)(v0 + 1880);
  *(_QWORD *)(v0 + 1952) = 0;
  *(_QWORD *)(v0 + 1944) = _swiftEmptyDictionarySingleton;
  if (!*(_QWORD *)(v0 + 1936))
    goto LABEL_54;
  v33 = *(_QWORD *)(v0 + 1928);
  if (v33 >= 1000)
    v33 = 1000;
  if (v33 < 1)
    goto LABEL_55;
  if (*(_QWORD *)(v32 + 16) < (unint64_t)v33)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v34 = sub_3CC78(v32 + 32, 0, (2 * v33) | 1);
  v35 = v34;
  *(_QWORD *)(v0 + 1960) = v34;
  v36 = v34 + 56;
  v37 = -1;
  v38 = -1 << *(_BYTE *)(v34 + 32);
  if (-v38 < 64)
    v37 = ~(-1 << -(char)v38);
  v39 = v37 & *(_QWORD *)(v34 + 56);
  v40 = (unint64_t)(63 - v38) >> 6;
  result = swift_bridgeObjectRetain(v34);
  v41 = 0;
  v42 = _swiftEmptyArrayStorage;
  if (!v39)
    goto LABEL_26;
LABEL_23:
  v43 = __clz(__rbit64(v39));
  v39 &= v39 - 1;
  for (i = v43 | (v41 << 6); ; i = __clz(__rbit64(v50)) + (v41 << 6))
  {
    v45 = (uint64_t *)(*(_QWORD *)(v35 + 48) + 16 * i);
    v46 = *v45;
    v47 = v45[1];
    swift_bridgeObjectRetain(v47);
    result = sub_B26A4(v46, v47);
    if ((v48 & 1) != 0)
    {
      if (v39)
        goto LABEL_23;
    }
    else
    {
      v52 = result;
      result = swift_isUniquelyReferenced_nonNull_native(v42);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_2FA6C(0, v42[2] + 1, 1, v42);
        v42 = (_QWORD *)result;
      }
      v54 = v42[2];
      v53 = v42[3];
      if (v54 >= v53 >> 1)
      {
        result = (uint64_t)sub_2FA6C((_QWORD *)(v53 > 1), v54 + 1, 1, v42);
        v42 = (_QWORD *)result;
      }
      v42[2] = v54 + 1;
      v42[v54 + 4] = v52;
      if (v39)
        goto LABEL_23;
    }
LABEL_26:
    v49 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
      __break(1u);
      goto LABEL_53;
    }
    if (v49 >= v40)
      goto LABEL_50;
    v50 = *(_QWORD *)(v36 + 8 * v49);
    ++v41;
    if (!v50)
    {
      v41 = v49 + 1;
      if (v49 + 1 >= v40)
        goto LABEL_50;
      v50 = *(_QWORD *)(v36 + 8 * v41);
      if (!v50)
      {
        v41 = v49 + 2;
        if (v49 + 2 >= v40)
          goto LABEL_50;
        v50 = *(_QWORD *)(v36 + 8 * v41);
        if (!v50)
        {
          v41 = v49 + 3;
          if (v49 + 3 >= v40)
            goto LABEL_50;
          v50 = *(_QWORD *)(v36 + 8 * v41);
          if (!v50)
          {
            v41 = v49 + 4;
            if (v49 + 4 >= v40)
              goto LABEL_50;
            v50 = *(_QWORD *)(v36 + 8 * v41);
            if (!v50)
              break;
          }
        }
      }
    }
LABEL_49:
    v39 = (v50 - 1) & v50;
  }
  v51 = v49 + 5;
  if (v51 >= v40)
  {
LABEL_50:
    v55 = *(_QWORD **)(v0 + 1296);
    swift_release(v35);
    v56 = v55 + 12;
    v57 = sub_3CD28((uint64_t)v42);
    *(_QWORD *)(v0 + 1968) = v57;
    swift_bridgeObjectRelease(v42);
    v58 = v55[15];
    v59 = v55[16];
    sub_49F4(v56, v58);
    v60 = *(int **)(v59 + 8);
    v61 = v60[1];
    v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v60 + *v60);
    swift_bridgeObjectRetain(v57);
    v62 = (_QWORD *)swift_task_alloc(v61);
    *(_QWORD *)(v0 + 1976) = v62;
    *v62 = v0;
    v62[1] = sub_BAE88;
    return v111(v57, v58, v59);
  }
  v50 = *(_QWORD *)(v36 + 8 * v51);
  if (v50)
  {
    v41 = v51;
    goto LABEL_49;
  }
  while (1)
  {
    v41 = v51 + 1;
    if (__OFADD__(v51, 1))
      break;
    if (v41 >= v40)
      goto LABEL_50;
    v50 = *(_QWORD *)(v36 + 8 * v41);
    ++v51;
    if (v50)
      goto LABEL_49;
  }
LABEL_57:
  __break(1u);
  return result;
}

uint64_t sub_BAE88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1976);
  v3[248] = a1;
  v3[249] = v1;
  swift_task_dealloc(v4);
  v5 = v3[246];
  if (v1)
  {
    v6 = v3[245];
    v7 = v3[243];
    v8 = v3[235];
    v9 = v3[233];
    v10 = v3[229];
    v11 = v3[222];
    v12 = v3[219];
    v13 = v3[160];
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v5, 2);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v9);
    swift_release(v8);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v6);
    v14 = sub_BDA64;
  }
  else
  {
    swift_bridgeObjectRelease(v3[246]);
    v14 = sub_BAF84;
  }
  return swift_task_switch(v14, 0, 0);
}

uint64_t sub_BAF84()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v1 = v0[246];
  v2 = (_QWORD *)v0[162];
  v3 = v2[20];
  v4 = v2[21];
  sub_49F4(v2 + 17, v3);
  v5 = *(int **)(v4 + 8);
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
  v6 = (_QWORD *)swift_task_alloc(v5[1]);
  v0[250] = v6;
  *v6 = v0;
  v6[1] = sub_BB010;
  return v8(v1, v3, v4);
}

uint64_t sub_BB010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2000);
  v3[251] = a1;
  v3[252] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[248];
    v6 = v3[246];
    v7 = v3[245];
    v8 = v3[243];
    v9 = v3[235];
    v10 = v3[233];
    v11 = v3[229];
    v12 = v3[222];
    v13 = v3[219];
    v14 = v3[160];
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
    swift_release(v9);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v5);
    v15 = sub_BDD24;
  }
  else
  {
    swift_bridgeObjectRelease(v3[246]);
    v15 = sub_BB11C;
  }
  return swift_task_switch(v15, 0, 0);
}

uint64_t sub_BB11C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[162];
  v2 = v1[5];
  v3 = v1[6];
  sub_49F4(v1 + 2, v2);
  v4 = *(int **)(v3 + 32);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[253] = v5;
  *v5 = v0;
  v5[1] = sub_BB1A4;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))v7)(v0[245], v0[222], v2, v3);
}

uint64_t sub_BB1A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2024);
  v3[254] = a1;
  v3[255] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[251];
    v6 = v3[248];
    v7 = v3[245];
    v8 = v3[243];
    v9 = v3[235];
    v10 = v3[233];
    v11 = v3[229];
    v12 = v3[222];
    v13 = v3[219];
    v14 = v3[160];
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
    swift_release(v9);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v5);
    v15 = sub_BDFE4;
  }
  else
  {
    v15 = sub_BB2A8;
  }
  return swift_task_switch(v15, 0, 0);
}

void sub_BB2A8()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  int v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  char v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  double v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unsigned __int8 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  double v141;
  _BOOL4 v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int64_t v172;
  uint64_t v173;
  uint64_t v174;
  void (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  int64_t v188;
  int64_t v189;
  _QWORD *v190;
  unint64_t v191;
  unint64_t i;
  uint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  char v197;
  unint64_t v198;
  int64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  _QWORD *v203;
  _QWORD *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int *v208;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void *__dst;
  void *__dsta;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  void *__src;
  void *__srca;
  int64_t v236;
  uint64_t v237;
  char v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  unsigned __int8 v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  __int128 v262;
  __int128 v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t (*v278)(uint64_t, uint64_t, uint64_t);
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void (*v283)(uint64_t, uint64_t, uint64_t);
  _QWORD v284[50];

  v1 = 0;
  __src = (void *)(v0 + 400);
  v267 = *(_QWORD *)(v0 + 1984);
  v269 = *(_QWORD *)(v0 + 2008);
  v2 = *(_QWORD *)(v0 + 1960);
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = *(_QWORD *)(v2 + 56);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v6 = v3 & v5;
  v7 = (unint64_t)(63 - v4) >> 6;
  v8 = *(_QWORD *)(v0 + 2040);
  v228 = *(_QWORD *)(v0 + 1944);
  __dst = (void *)(v0 + 16);
  v236 = v7;
  while (v6)
  {
    v9 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v10 = v9 | (v1 << 6);
    v11 = *(_QWORD *)(v0 + 1960);
LABEL_5:
    v12 = (uint64_t *)(*(_QWORD *)(v11 + 48) + 16 * v10);
    v13 = *v12;
    v14 = v12[1];
    swift_bridgeObjectRetain_n(v14, 2);
    v15 = sub_B26A4(v13, v14);
    if ((v16 & 1) != 0)
    {
      swift_bridgeObjectRelease(v14);
    }
    else
    {
      v21 = v15;
      v254 = v8;
      if (*(_QWORD *)(*(_QWORD *)(v0 + 1752) + 16) && (v22 = sub_39228(v15), (v23 & 1) != 0))
      {
        sub_26A5C(*(_QWORD *)(*(_QWORD *)(v0 + 1752) + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 1640) + 72) * v22, *(_QWORD *)(v0 + 1432), type metadata accessor for StoreBook);
        v24 = 0;
      }
      else
      {
        v24 = 1;
      }
      v277 = *(_QWORD *)(v0 + 1640);
      v256 = *(_QWORD *)(v0 + 1568);
      v260 = *(_QWORD *)(v0 + 1632);
      v271 = *(_QWORD *)(v0 + 1560);
      v25 = *(_QWORD *)(v0 + 1448);
      v26 = *(_QWORD *)(v0 + 1440);
      v27 = *(_QWORD *)(v0 + 1432);
      v28 = *(_QWORD *)(v0 + 1424);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v277 + 56))(v27, v24, 1);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
      v29(v256, 1, 1, v26);
      v30 = v271;
      v272 = v29;
      v29(v30, 1, 1, v26);
      sub_418BC(v27, v28, &qword_1F3AC8);
      v278 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v277 + 48);
      v31 = v278(v28, 1, v260);
      v32 = *(_QWORD *)(v0 + 1424);
      v33 = *(_QWORD *)(v0 + 1352);
      v34 = *(_QWORD *)(v0 + 1344);
      v35 = *(_QWORD *)(v0 + 1336);
      if (v31 == 1)
      {
        sub_417D8(*(_QWORD *)(v0 + 1424), &qword_1F3AC8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 56))(v35, 1, 1, v34);
LABEL_30:
        sub_417D8(*(_QWORD *)(v0 + 1336), &qword_1F3AC0);
        goto LABEL_31;
      }
      sub_418BC(*(_QWORD *)(v0 + 1424), *(_QWORD *)(v0 + 1336), &qword_1F3AC0);
      sub_26AA0(v32, type metadata accessor for StoreBook);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v35, 1, v34) == 1)
        goto LABEL_30;
      v41 = *(_QWORD *)(v0 + 1368);
      v42 = *(_QWORD *)(v0 + 1360);
      v43 = *(_QWORD *)(v0 + 1344);
      sub_A2618(*(_QWORD *)(v0 + 1336), v41, type metadata accessor for StoreBook.Origin);
      sub_A2618(v41, v42, type metadata accessor for StoreBook.Origin);
      if (swift_getEnumCaseMultiPayload(v42, v43) == 1)
      {
        v44 = *(_QWORD *)(v0 + 1560);
        v45 = *(_QWORD *)(v0 + 1360);
        sub_417D8(v44, &qword_1F1310);
        sub_41300(v45, v44, &qword_1F1310);
      }
      else
      {
        v136 = *(_QWORD *)(v0 + 1568);
        v137 = *(_QWORD *)(v0 + 1448);
        v138 = *(_QWORD *)(v0 + 1440);
        v139 = *(_QWORD *)(v0 + 1360);
        sub_417D8(v136, &qword_1F1310);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 32))(v136, v139, v138);
        v272(v136, 0, 1, v138);
      }
LABEL_31:
      v36 = 0.0;
      if (!*(_QWORD *)(v267 + 16))
        goto LABEL_39;
      v37 = sub_39228(v21);
      if ((v38 & 1) == 0)
        goto LABEL_39;
      v39 = *(_QWORD *)(v0 + 1328);
      v40 = *(_QWORD *)(v0 + 1320);
      sub_26A5C(*(_QWORD *)(v267 + 56) + *(_QWORD *)(*(_QWORD *)(v0 + 1312) + 72) * v37, v40, type metadata accessor for StoreBookRating);
      sub_A2618(v40, v39, type metadata accessor for StoreBookRating);
      if ((*(_BYTE *)(v39 + 16) & 1) != 0)
      {
        sub_26AA0(*(_QWORD *)(v0 + 1328), type metadata accessor for StoreBookRating);
LABEL_39:
        v238 = 1;
        v53 = 0.0;
        goto LABEL_40;
      }
      v46 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1920);
      v47 = *(_QWORD *)(v0 + 1552);
      v48 = *(_QWORD *)(v0 + 1440);
      v49 = *(_QWORD *)(v0 + 1328);
      v50 = *(double *)(v49 + 8);
      sub_418BC(v49 + *(int *)(*(_QWORD *)(v0 + 1304) + 24), v47, &qword_1F1310);
      v51 = v46(v47, 1, v48);
      v52 = *(_QWORD *)(v0 + 1552);
      if (v51 == 1)
      {
        sub_26AA0(*(_QWORD *)(v0 + 1328), type metadata accessor for StoreBookRating);
        sub_417D8(v52, &qword_1F1310);
        goto LABEL_39;
      }
      v140 = *(_QWORD *)(v0 + 1456);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 1448) + 32))(v140, *(_QWORD *)(v0 + 1552), *(_QWORD *)(v0 + 1440));
      v36 = v50 + v50 + -1.0;
      v141 = Date.timeIntervalSince(_:)(v140);
      v142 = v36 <= 1.0 && v36 >= -1.0;
      if (!v142)
      {
        v146 = sub_C9310();
        v144 = swift_allocError(&type metadata for ReviewInfo.Errors, v146, 0, 0);
        v128 = v144;
        *(double *)v145 = v36;
        goto LABEL_92;
      }
      v53 = v141;
      if (v141 >= 0.0)
      {
        v161 = *(_QWORD *)(v0 + 1328);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1448) + 8))(*(_QWORD *)(v0 + 1456), *(_QWORD *)(v0 + 1440));
        sub_26AA0(v161, type metadata accessor for StoreBookRating);
        v238 = 0;
LABEL_40:
        v54 = *(_QWORD *)(v0 + 1632);
        v55 = *(_QWORD *)(v0 + 1432);
        v56 = *(_QWORD *)(v0 + 1416);
        v272(*(_QWORD *)(v0 + 1544), 1, 1, *(_QWORD *)(v0 + 1440));
        sub_418BC(v55, v56, &qword_1F3AC8);
        if (v278(v56, 1, v54) == 1)
        {
          sub_417D8(*(_QWORD *)(v0 + 1416), &qword_1F3AC8);
        }
        else
        {
          v57 = *(_QWORD *)(v0 + 1416);
          v58 = *(double *)(v57 + *(int *)(*(_QWORD *)(v0 + 1632) + 32));
          v59 = sub_26AA0(v57, type metadata accessor for StoreBook);
          if (v58 != -1.0)
          {
            v60 = *(_QWORD *)(v0 + 1544);
            v61 = *(_QWORD *)(v0 + 1536);
            v62 = *(_QWORD *)(v0 + 1440);
            Date.init(timeIntervalSinceReferenceDate:)(v59, v58);
            sub_417D8(v60, &qword_1F1310);
            v272(v61, 0, 1, v62);
            sub_41300(v61, v60, &qword_1F1310);
          }
        }
        v272(*(_QWORD *)(v0 + 1528), 1, 1, *(_QWORD *)(v0 + 1440));
        if (v21 == 0x18067B1ECLL)
        {
          if (qword_1F0180 != -1)
            swift_once(&qword_1F0180, sub_17184C);
          v63 = sub_5216C(*(_QWORD *)(v0 + 1672), (uint64_t)qword_224630);
          v64 = Logger.logObject.getter(v63);
          v65 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v64, v65))
          {
            v66 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v66 = 0;
            _os_log_impl(&dword_0, v64, v65, "6449246700 about to calculate finishedIntervalSinceReferenceDate", v66, 2u);
            swift_slowDealloc(v66, -1, -1);
          }

        }
        v67 = *(_QWORD *)(v0 + 1632);
        v68 = *(_QWORD *)(v0 + 1408);
        sub_418BC(*(_QWORD *)(v0 + 1432), v68, &qword_1F3AC8);
        if (v278(v68, 1, v67) == 1)
        {
          sub_417D8(*(_QWORD *)(v0 + 1408), &qword_1F3AC8);
        }
        else
        {
          v69 = *(_QWORD *)(v0 + 1408);
          v70 = *(double *)(v69 + *(int *)(*(_QWORD *)(v0 + 1632) + 36));
          v71 = sub_26AA0(v69, type metadata accessor for StoreBook);
          if (v70 != -1.0)
          {
            v72 = *(_QWORD *)(v0 + 1536);
            v73 = *(_QWORD *)(v0 + 1528);
            v74 = *(_QWORD *)(v0 + 1440);
            Date.init(timeIntervalSinceReferenceDate:)(v71, v70);
            sub_417D8(v73, &qword_1F1310);
            v272(v72, 0, 1, v74);
            sub_41300(v72, v73, &qword_1F1310);
          }
        }
        if (*(_QWORD *)(v269 + 16))
        {
          v75 = sub_39228(v21);
          if ((v76 & 1) != 0)
            v77 = *(_BYTE *)(*(_QWORD *)(v269 + 56) + 2 * v75);
          else
            v77 = 3;
          v240 = v77;
          v78 = sub_39228(v21);
          if ((v79 & 1) != 0)
            v242 = *(_BYTE *)(*(_QWORD *)(v269 + 56) + 2 * v78 + 1);
          else
            v242 = 0;
        }
        else
        {
          v242 = 0;
          v240 = 3;
        }
        v80 = *(_QWORD *)(v0 + 1568);
        v257 = *(_QWORD *)(v0 + 1560);
        v261 = *(_QWORD *)(v0 + 1632);
        v81 = *(_QWORD *)(v0 + 1520);
        v82 = *(_QWORD *)(v0 + 1512);
        v244 = *(_QWORD *)(v0 + 1544);
        v246 = *(_QWORD *)(v0 + 1504);
        v248 = *(_QWORD *)(v0 + 1528);
        v250 = *(_QWORD *)(v0 + 1496);
        v252 = *(_QWORD *)(v0 + 1432);
        v83 = *(_QWORD *)(v0 + 1400);
        v84 = sub_B2664(v13, v14, *(_QWORD *)(v0 + 2032));
        swift_bridgeObjectRelease(v14);
        v85 = _swiftEmptyArrayStorage;
        if (v84)
          v85 = (_QWORD *)v84;
        v273 = (uint64_t)v85;
        sub_418BC(v80, v81, &qword_1F1310);
        sub_418BC(v244, v82, &qword_1F1310);
        sub_418BC(v248, v246, &qword_1F1310);
        sub_418BC(v257, v250, &qword_1F1310);
        sub_418BC(v252, v83, &qword_1F3AC8);
        if (v278(v83, 1, v261) == 1)
        {
          sub_417D8(*(_QWORD *)(v0 + 1400), &qword_1F3AC8);
          v86 = 0.0;
          v87 = 1;
        }
        else
        {
          v88 = *(_QWORD *)(v0 + 1400);
          v89 = v88 + *(int *)(*(_QWORD *)(v0 + 1632) + 24);
          v86 = *(double *)v89;
          v87 = *(_BYTE *)(v89 + 8);
          sub_26AA0(v88, type metadata accessor for StoreBook);
        }
        v90 = *(_QWORD *)(v0 + 1632);
        v91 = *(_QWORD *)(v0 + 1392);
        sub_418BC(*(_QWORD *)(v0 + 1432), v91, &qword_1F3AC8);
        if (v278(v91, 1, v90) == 1)
        {
          sub_417D8(*(_QWORD *)(v0 + 1392), &qword_1F3AC8);
          v92 = 0uLL;
          v93 = 1;
        }
        else
        {
          v94 = *(_QWORD *)(v0 + 1392);
          v95 = v94 + *(int *)(*(_QWORD *)(v0 + 1632) + 28);
          v262 = *(_OWORD *)v95;
          v93 = *(_BYTE *)(v95 + 16);
          sub_26AA0(v94, type metadata accessor for StoreBook);
          v92 = v262;
        }
        v96 = *(_QWORD *)(v0 + 1632);
        v97 = *(_QWORD *)(v0 + 1432);
        v98 = *(_QWORD *)(v0 + 1384);
        *(_OWORD *)(v0 + 1152) = v92;
        *(_BYTE *)(v0 + 1168) = v93;
        *(double *)(v0 + 1224) = v36;
        *(double *)(v0 + 1232) = v53;
        *(_BYTE *)(v0 + 1240) = v238;
        *(_BYTE *)(v0 + 393) = v240;
        sub_418BC(v97, v98, &qword_1F3AC8);
        if (v278(v98, 1, v96) == 1)
        {
          sub_417D8(*(_QWORD *)(v0 + 1384), &qword_1F3AC8);
          v99 = 0uLL;
          v100 = 1;
        }
        else
        {
          v101 = *(_QWORD *)(v0 + 1384);
          v102 = v101 + *(int *)(*(_QWORD *)(v0 + 1632) + 40);
          v263 = *(_OWORD *)v102;
          v100 = *(_BYTE *)(v102 + 16);
          sub_26AA0(v101, type metadata accessor for StoreBook);
          v99 = v263;
        }
        v103 = *(_QWORD *)(v0 + 1632);
        v104 = *(_QWORD *)(v0 + 1432);
        v105 = *(_QWORD *)(v0 + 1376);
        *(_OWORD *)(v0 + 1200) = v99;
        *(_BYTE *)(v0 + 1216) = v100;
        sub_418BC(v104, v105, &qword_1F3AC8);
        if (v278(v105, 1, v103) == 1)
        {
          sub_417D8(*(_QWORD *)(v0 + 1376), &qword_1F3AC8);
          v106 = 0uLL;
          v107 = 1;
        }
        else
        {
          v108 = *(_QWORD *)(v0 + 1376);
          v109 = v108 + *(int *)(*(_QWORD *)(v0 + 1632) + 44);
          v279 = *(_OWORD *)v109;
          v107 = *(_BYTE *)(v109 + 16);
          sub_26AA0(v108, type metadata accessor for StoreBook);
          v106 = v279;
        }
        v110 = *(_QWORD *)(v0 + 1864);
        v111 = *(_QWORD *)(v0 + 1832);
        v112 = *(double *)(v0 + 1768);
        v113 = *(double *)(v0 + 1760);
        v114 = *(_QWORD *)(v0 + 1624);
        v115 = *(_QWORD *)(v0 + 1520);
        v116 = *(_QWORD *)(v0 + 1512);
        v117 = *(_QWORD *)(v0 + 1504);
        v118 = *(_QWORD *)(v0 + 1496);
        v119 = *(_QWORD *)(v0 + 1472);
        v120 = *(unsigned __int8 **)(v0 + 1464);
        v121 = *(_QWORD *)(v0 + 1280);
        *(_OWORD *)(v0 + 1176) = v106;
        *(_BYTE *)(v0 + 1192) = v107;
        sub_BE2A4(v121, v21, v273, v120, v114, v119, v115, v116, __src, v113, v112, v117, v118, v86, v87, (uint64_t *)(v0 + 1152), (uint64_t *)(v0 + 1224), (unsigned __int8 *)(v0 + 393), v242,
          (uint64_t (*)(uint64_t, uint64_t, uint64_t))(v0 + 1200),
          v0 + 1176,
          v111,
          v110);
        if (v254)
        {
          v280 = *(_QWORD *)(v0 + 1568);
          v122 = *(_QWORD *)(v0 + 1544);
          v123 = *(_QWORD *)(v0 + 1528);
          v124 = *(_QWORD *)(v0 + 1520);
          v125 = *(_QWORD *)(v0 + 1512);
          v126 = *(_QWORD *)(v0 + 1504);
          v127 = *(_QWORD *)(v0 + 1496);
          v258 = *(_QWORD *)(v0 + 1560);
          v264 = *(_QWORD *)(v0 + 1432);
          swift_bridgeObjectRelease(v273);
          sub_417D8(v127, &qword_1F1310);
          sub_417D8(v126, &qword_1F1310);
          sub_417D8(v125, &qword_1F1310);
          sub_417D8(v124, &qword_1F1310);
          sub_417D8(v123, &qword_1F1310);
          sub_417D8(v122, &qword_1F1310);
          sub_417D8(v258, &qword_1F1310);
          sub_417D8(v280, &qword_1F1310);
          sub_417D8(v264, &qword_1F3AC8);
          v128 = v254;
          goto LABEL_78;
        }
        v151 = *(_QWORD *)(v0 + 1520);
        v152 = *(_QWORD *)(v0 + 1512);
        v153 = *(_QWORD *)(v0 + 1504);
        v154 = *(_QWORD *)(v0 + 1496);
        swift_bridgeObjectRelease(v273);
        sub_417D8(v154, &qword_1F1310);
        sub_417D8(v153, &qword_1F1310);
        sub_417D8(v152, &qword_1F1310);
        sub_417D8(v151, &qword_1F1310);
        memcpy(__dst, __src, 0x179uLL);
        memcpy(v284, __dst, 0x179uLL);
        BookHistory.isEmpty.getter();
        if ((v155 & 1) == 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v228);
          v284[0] = v228;
          sub_16FF1C(__dst, v21, isUniquelyReferenced_nonNull_native);
          v228 = v284[0];
          swift_bridgeObjectRelease(0x8000000000000000);
        }
        v7 = v236;
        v157 = *(_QWORD *)(v0 + 1568);
        v158 = *(_QWORD *)(v0 + 1560);
        v159 = *(_QWORD *)(v0 + 1544);
        v160 = *(_QWORD *)(v0 + 1432);
        sub_417D8(*(_QWORD *)(v0 + 1528), &qword_1F1310);
        sub_417D8(v159, &qword_1F1310);
        sub_417D8(v158, &qword_1F1310);
        sub_417D8(v157, &qword_1F1310);
        sub_417D8(v160, &qword_1F3AC8);
        v8 = 0;
      }
      else
      {
        v143 = sub_C9310();
        v144 = swift_allocError(&type metadata for ReviewInfo.Errors, v143, 0, 0);
        v128 = v144;
        *(double *)v145 = v53;
LABEL_92:
        v281 = *(_QWORD *)(v0 + 1568);
        v265 = *(_QWORD *)(v0 + 1560);
        v147 = *(_QWORD *)(v0 + 1456);
        v148 = *(_QWORD *)(v0 + 1448);
        v149 = *(_QWORD *)(v0 + 1440);
        v274 = *(_QWORD *)(v0 + 1432);
        v150 = *(_QWORD *)(v0 + 1328);
        *(_BYTE *)(v145 + 8) = v142;
        swift_willThrow(v144);
        swift_bridgeObjectRelease(v14);
        (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v147, v149);
        sub_26AA0(v150, type metadata accessor for StoreBookRating);
        sub_417D8(v265, &qword_1F1310);
        sub_417D8(v281, &qword_1F1310);
        sub_417D8(v274, &qword_1F3AC8);
LABEL_78:
        if (qword_1F00E0 != -1)
          swift_once(&qword_1F00E0, sub_B9244);
        sub_5216C(*(_QWORD *)(v0 + 1672), (uint64_t)qword_2245B0);
        swift_errorRetain(v128);
        v129 = swift_errorRetain(v128);
        v130 = Logger.logObject.getter(v129);
        v131 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v130, v131))
        {
          v132 = swift_slowAlloc(12, -1);
          v133 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v132 = 138412290;
          swift_errorRetain(v128);
          v134 = _swift_stdlib_bridgeErrorToNSError(v128);
          *(_QWORD *)(v132 + 4) = v134;
          *v133 = v134;
          swift_errorRelease(v128);
          swift_errorRelease(v128);
          _os_log_impl(&dword_0, v130, v131, "Error creating book history: %@", (uint8_t *)v132, 0xCu);
          v135 = sub_5EDC(&qword_1F3158);
          swift_arrayDestroy(v133, 1, v135);
          swift_slowDealloc(v133, -1, -1);
          swift_slowDealloc(v132, -1, -1);

          swift_errorRelease(v128);
        }
        else
        {
          swift_errorRelease(v128);
          swift_errorRelease(v128);
          swift_errorRelease(v128);

        }
        v8 = 0;
        v7 = v236;
      }
    }
  }
  v17 = __OFADD__(v1++, 1);
  if (v17)
  {
    __break(1u);
LABEL_141:
    __break(1u);
    goto LABEL_142;
  }
  v11 = *(_QWORD *)(v0 + 1960);
  if (v1 >= v7)
    goto LABEL_97;
  v18 = v11 + 56;
  v19 = *(_QWORD *)(v11 + 56 + 8 * v1);
  if (v19)
  {
LABEL_18:
    v6 = (v19 - 1) & v19;
    v10 = __clz(__rbit64(v19)) + (v1 << 6);
    goto LABEL_5;
  }
  v20 = v1 + 1;
  if (v1 + 1 >= v7)
    goto LABEL_97;
  v19 = *(_QWORD *)(v18 + 8 * v20);
  if (v19)
    goto LABEL_17;
  v20 = v1 + 2;
  if (v1 + 2 >= v7)
    goto LABEL_97;
  v19 = *(_QWORD *)(v18 + 8 * v20);
  if (v19)
  {
LABEL_17:
    v1 = v20;
    goto LABEL_18;
  }
  v20 = v1 + 3;
  if (v1 + 3 < v7)
  {
    v19 = *(_QWORD *)(v18 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        v1 = v20 + 1;
        if (__OFADD__(v20, 1))
          break;
        if (v1 >= v7)
          goto LABEL_97;
        v19 = *(_QWORD *)(v18 + 8 * v1);
        ++v20;
        if (v19)
          goto LABEL_18;
      }
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
      goto LABEL_144;
    }
    goto LABEL_17;
  }
LABEL_97:
  v162 = *(_QWORD *)(v0 + 2032);
  v163 = *(_QWORD *)(v0 + 1984);
  v164 = *(_QWORD *)(v0 + 1952);
  v165 = *(_QWORD *)(v0 + 1936);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2008));
  swift_bridgeObjectRelease(v162);
  swift_release(v11);
  swift_bridgeObjectRelease(v163);
  if (v164 + 1 == v165)
  {
    v166 = *(_QWORD *)(v0 + 1880);
    v167 = *(_QWORD *)(v0 + 1864);
    v168 = *(_QWORD *)(v0 + 1776);
    v169 = *(_QWORD *)(v0 + 1752);
    v216 = *(_QWORD *)(v0 + 1688);
    v217 = *(_QWORD *)(v0 + 1664);
    v218 = *(_QWORD *)(v0 + 1656);
    v219 = *(_QWORD *)(v0 + 1648);
    v213 = *(_QWORD *)(v0 + 1616);
    v214 = *(_QWORD *)(v0 + 1624);
    v215 = *(_QWORD *)(v0 + 1608);
    v220 = *(_QWORD *)(v0 + 1600);
    v221 = *(_QWORD *)(v0 + 1592);
    v222 = *(_QWORD *)(v0 + 1584);
    v223 = *(_QWORD *)(v0 + 1576);
    v224 = *(_QWORD *)(v0 + 1568);
    __dsta = *(void **)(v0 + 1560);
    v227 = *(_QWORD *)(v0 + 1552);
    v229 = *(_QWORD *)(v0 + 1544);
    v230 = *(_QWORD *)(v0 + 1536);
    v231 = *(_QWORD *)(v0 + 1528);
    v232 = *(_QWORD *)(v0 + 1520);
    v233 = *(_QWORD *)(v0 + 1512);
    __srca = *(void **)(v0 + 1504);
    v237 = *(_QWORD *)(v0 + 1496);
    v239 = *(_QWORD *)(v0 + 1488);
    v211 = *(_QWORD *)(v0 + 1464);
    v212 = *(_QWORD *)(v0 + 1472);
    v241 = *(_QWORD *)(v0 + 1480);
    v243 = *(_QWORD *)(v0 + 1456);
    v170 = *(_QWORD *)(v0 + 1448);
    v171 = *(_QWORD *)(v0 + 1440);
    v245 = *(_QWORD *)(v0 + 1432);
    v247 = *(_QWORD *)(v0 + 1424);
    v249 = *(_QWORD *)(v0 + 1416);
    v251 = *(_QWORD *)(v0 + 1408);
    v253 = *(_QWORD *)(v0 + 1400);
    v255 = *(_QWORD *)(v0 + 1392);
    v259 = *(_QWORD *)(v0 + 1384);
    v266 = *(_QWORD *)(v0 + 1376);
    v268 = *(_QWORD *)(v0 + 1368);
    v270 = *(_QWORD *)(v0 + 1360);
    v275 = *(_QWORD *)(v0 + 1336);
    v276 = *(_QWORD *)(v0 + 1328);
    v282 = *(_QWORD *)(v0 + 1320);
    v172 = *(_QWORD *)(v0 + 1288);
    v173 = *(_QWORD *)(v0 + 1280);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1832));
    swift_bridgeObjectRelease(v167);
    swift_release(v166);
    swift_bridgeObjectRelease(v173);
    swift_bridgeObjectRelease(v169);
    swift_bridgeObjectRelease(v168);
    memcpy(v284, (const void *)(v0 + 784), 0x16BuLL);
    sub_605D0(v0 + 784);
    v174 = Dictionary<>.mostRecentBookHistories(limit:scorerConfig:)(v172, v284, v228);
    swift_bridgeObjectRelease(v228);
    sub_60AF8(v0 + 784);
    v175 = *(void (**)(uint64_t, uint64_t))(v170 + 8);
    v175(v211, v171);
    v175(v212, v171);
    sub_417D8(v213, &qword_1F1310);
    sub_417D8(v214, &qword_1F1310);
    sub_417D8(v215, &qword_1F1310);
    swift_task_dealloc(v216);
    swift_task_dealloc(v217);
    swift_task_dealloc(v218);
    swift_task_dealloc(v219);
    swift_task_dealloc(v214);
    swift_task_dealloc(v213);
    swift_task_dealloc(v215);
    swift_task_dealloc(v220);
    swift_task_dealloc(v221);
    swift_task_dealloc(v222);
    swift_task_dealloc(v223);
    swift_task_dealloc(v224);
    swift_task_dealloc(__dsta);
    swift_task_dealloc(v227);
    swift_task_dealloc(v229);
    swift_task_dealloc(v230);
    swift_task_dealloc(v231);
    swift_task_dealloc(v232);
    swift_task_dealloc(v233);
    swift_task_dealloc(__srca);
    swift_task_dealloc(v237);
    swift_task_dealloc(v239);
    swift_task_dealloc(v241);
    swift_task_dealloc(v212);
    swift_task_dealloc(v211);
    swift_task_dealloc(v243);
    swift_task_dealloc(v245);
    swift_task_dealloc(v247);
    swift_task_dealloc(v249);
    swift_task_dealloc(v251);
    swift_task_dealloc(v253);
    swift_task_dealloc(v255);
    swift_task_dealloc(v259);
    swift_task_dealloc(v266);
    swift_task_dealloc(v268);
    swift_task_dealloc(v270);
    swift_task_dealloc(v275);
    swift_task_dealloc(v276);
    swift_task_dealloc(v282);
    (*(void (**)(uint64_t))(v0 + 8))(v174);
    return;
  }
  v176 = *(_QWORD *)(v0 + 1952);
  *(_QWORD *)(v0 + 1952) = v176 + 1;
  *(_QWORD *)(v0 + 1944) = v228;
  if (v176 + 1 == *(_QWORD *)(v0 + 1936))
    goto LABEL_143;
  if (v176 == 0x20C49BA5E353F6)
  {
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
    goto LABEL_147;
  }
  v177 = 1000 * (v176 + 1);
  v178 = 1000 * v176 + 1999;
  if (v178 >= *(_QWORD *)(v0 + 1928) - 1)
    v178 = *(_QWORD *)(v0 + 1928) - 1;
  if (v178 < v177)
    goto LABEL_145;
  v179 = *(_QWORD *)(v0 + 1880);
  v180 = *(_QWORD *)(v179 + 16);
  if (v180 < (unint64_t)v177 || v180 <= v178)
    goto LABEL_146;
  v182 = sub_3CC78(v179 + 32, v177, 2 * v178 + 3);
  v183 = v182;
  *(_QWORD *)(v0 + 1960) = v182;
  v184 = v182 + 56;
  v185 = -1;
  v186 = -1 << *(_BYTE *)(v182 + 32);
  if (-v186 < 64)
    v185 = ~(-1 << -(char)v186);
  v187 = v185 & *(_QWORD *)(v182 + 56);
  v188 = (unint64_t)(63 - v186) >> 6;
  swift_bridgeObjectRetain(v182);
  v189 = 0;
  v190 = _swiftEmptyArrayStorage;
  if (!v187)
    goto LABEL_114;
LABEL_111:
  v191 = __clz(__rbit64(v187));
  v187 &= v187 - 1;
  for (i = v191 | (v189 << 6); ; i = __clz(__rbit64(v198)) + (v189 << 6))
  {
    v193 = (uint64_t *)(*(_QWORD *)(v183 + 48) + 16 * i);
    v194 = *v193;
    v195 = v193[1];
    swift_bridgeObjectRetain(v195);
    v196 = sub_B26A4(v194, v195);
    if ((v197 & 1) != 0)
    {
      if (v187)
        goto LABEL_111;
    }
    else
    {
      v200 = v196;
      if ((swift_isUniquelyReferenced_nonNull_native(v190) & 1) == 0)
        v190 = sub_2FA6C(0, v190[2] + 1, 1, v190);
      v202 = v190[2];
      v201 = v190[3];
      if (v202 >= v201 >> 1)
        v190 = sub_2FA6C((_QWORD *)(v201 > 1), v202 + 1, 1, v190);
      v190[2] = v202 + 1;
      v190[v202 + 4] = v200;
      if (v187)
        goto LABEL_111;
    }
LABEL_114:
    v17 = __OFADD__(v189++, 1);
    if (v17)
      goto LABEL_141;
    if (v189 >= v188)
    {
LABEL_139:
      v203 = *(_QWORD **)(v0 + 1296);
      swift_release(v183);
      v204 = v203 + 12;
      v205 = sub_3CD28((uint64_t)v190);
      *(_QWORD *)(v0 + 1968) = v205;
      swift_bridgeObjectRelease(v190);
      v206 = v203[15];
      v207 = v203[16];
      sub_49F4(v204, v206);
      v208 = *(int **)(v207 + 8);
      v209 = v208[1];
      v283 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)v208 + *v208);
      swift_bridgeObjectRetain(v205);
      v210 = (_QWORD *)swift_task_alloc(v209);
      *(_QWORD *)(v0 + 1976) = v210;
      *v210 = v0;
      v210[1] = sub_BAE88;
      v283(v205, v206, v207);
      return;
    }
    v198 = *(_QWORD *)(v184 + 8 * v189);
    if (!v198)
      break;
LABEL_128:
    v187 = (v198 - 1) & v198;
  }
  v199 = v189 + 1;
  if (v189 + 1 >= v188)
    goto LABEL_139;
  v198 = *(_QWORD *)(v184 + 8 * v199);
  if (v198)
    goto LABEL_127;
  v199 = v189 + 2;
  if (v189 + 2 >= v188)
    goto LABEL_139;
  v198 = *(_QWORD *)(v184 + 8 * v199);
  if (v198)
    goto LABEL_127;
  v199 = v189 + 3;
  if (v189 + 3 >= v188)
    goto LABEL_139;
  v198 = *(_QWORD *)(v184 + 8 * v199);
  if (v198)
    goto LABEL_127;
  v199 = v189 + 4;
  if (v189 + 4 >= v188)
    goto LABEL_139;
  v198 = *(_QWORD *)(v184 + 8 * v199);
  if (v198)
    goto LABEL_127;
  v199 = v189 + 5;
  if (v189 + 5 >= v188)
    goto LABEL_139;
  v198 = *(_QWORD *)(v184 + 8 * v199);
  if (v198)
  {
LABEL_127:
    v189 = v199;
    goto LABEL_128;
  }
  while (1)
  {
    v189 = v199 + 1;
    if (__OFADD__(v199, 1))
      break;
    if (v189 >= v188)
      goto LABEL_139;
    v198 = *(_QWORD *)(v184 + 8 * v189);
    ++v199;
    if (v198)
      goto LABEL_128;
  }
LABEL_147:
  __break(1u);
}

uint64_t sub_BC8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 1664);
  v2 = *(_QWORD *)(v0 + 1656);
  v3 = *(_QWORD *)(v0 + 1648);
  v4 = *(_QWORD *)(v0 + 1624);
  v5 = *(_QWORD *)(v0 + 1616);
  v6 = *(_QWORD *)(v0 + 1608);
  v7 = *(_QWORD *)(v0 + 1600);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1584);
  v11 = *(_QWORD *)(v0 + 1576);
  v12 = *(_QWORD *)(v0 + 1568);
  v13 = *(_QWORD *)(v0 + 1560);
  v14 = *(_QWORD *)(v0 + 1552);
  v15 = *(_QWORD *)(v0 + 1544);
  v16 = *(_QWORD *)(v0 + 1536);
  v17 = *(_QWORD *)(v0 + 1528);
  v18 = *(_QWORD *)(v0 + 1520);
  v19 = *(_QWORD *)(v0 + 1512);
  v20 = *(_QWORD *)(v0 + 1504);
  v21 = *(_QWORD *)(v0 + 1496);
  v22 = *(_QWORD *)(v0 + 1488);
  v23 = *(_QWORD *)(v0 + 1480);
  v24 = *(_QWORD *)(v0 + 1472);
  v25 = *(_QWORD *)(v0 + 1464);
  v26 = *(_QWORD *)(v0 + 1456);
  v27 = *(_QWORD *)(v0 + 1432);
  v28 = *(_QWORD *)(v0 + 1424);
  v29 = *(_QWORD *)(v0 + 1416);
  v30 = *(_QWORD *)(v0 + 1408);
  v31 = *(_QWORD *)(v0 + 1400);
  v32 = *(_QWORD *)(v0 + 1392);
  v33 = *(_QWORD *)(v0 + 1384);
  v34 = *(_QWORD *)(v0 + 1376);
  v35 = *(_QWORD *)(v0 + 1368);
  v36 = *(_QWORD *)(v0 + 1360);
  v37 = *(_QWORD *)(v0 + 1336);
  v38 = *(_QWORD *)(v0 + 1328);
  v39 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BCB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1704));
  v1 = *(_QWORD *)(v0 + 1664);
  v2 = *(_QWORD *)(v0 + 1656);
  v3 = *(_QWORD *)(v0 + 1648);
  v4 = *(_QWORD *)(v0 + 1624);
  v5 = *(_QWORD *)(v0 + 1616);
  v6 = *(_QWORD *)(v0 + 1608);
  v7 = *(_QWORD *)(v0 + 1600);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1584);
  v11 = *(_QWORD *)(v0 + 1576);
  v12 = *(_QWORD *)(v0 + 1568);
  v13 = *(_QWORD *)(v0 + 1560);
  v14 = *(_QWORD *)(v0 + 1552);
  v15 = *(_QWORD *)(v0 + 1544);
  v16 = *(_QWORD *)(v0 + 1536);
  v17 = *(_QWORD *)(v0 + 1528);
  v18 = *(_QWORD *)(v0 + 1520);
  v19 = *(_QWORD *)(v0 + 1512);
  v20 = *(_QWORD *)(v0 + 1504);
  v21 = *(_QWORD *)(v0 + 1496);
  v22 = *(_QWORD *)(v0 + 1488);
  v23 = *(_QWORD *)(v0 + 1480);
  v24 = *(_QWORD *)(v0 + 1472);
  v25 = *(_QWORD *)(v0 + 1464);
  v26 = *(_QWORD *)(v0 + 1456);
  v27 = *(_QWORD *)(v0 + 1432);
  v28 = *(_QWORD *)(v0 + 1424);
  v29 = *(_QWORD *)(v0 + 1416);
  v30 = *(_QWORD *)(v0 + 1408);
  v31 = *(_QWORD *)(v0 + 1400);
  v32 = *(_QWORD *)(v0 + 1392);
  v33 = *(_QWORD *)(v0 + 1384);
  v34 = *(_QWORD *)(v0 + 1376);
  v35 = *(_QWORD *)(v0 + 1368);
  v36 = *(_QWORD *)(v0 + 1360);
  v37 = *(_QWORD *)(v0 + 1336);
  v38 = *(_QWORD *)(v0 + 1328);
  v39 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BCDB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = *(_QWORD *)(v0 + 1752);
  v2 = *(_QWORD *)(v0 + 1744);
  v3 = *(_QWORD *)(v0 + 1704);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1776));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  v4 = *(_QWORD *)(v0 + 1664);
  v5 = *(_QWORD *)(v0 + 1656);
  v6 = *(_QWORD *)(v0 + 1648);
  v7 = *(_QWORD *)(v0 + 1624);
  v8 = *(_QWORD *)(v0 + 1616);
  v9 = *(_QWORD *)(v0 + 1608);
  v10 = *(_QWORD *)(v0 + 1600);
  v11 = *(_QWORD *)(v0 + 1592);
  v12 = *(_QWORD *)(v0 + 1584);
  v14 = *(_QWORD *)(v0 + 1576);
  v15 = *(_QWORD *)(v0 + 1568);
  v16 = *(_QWORD *)(v0 + 1560);
  v17 = *(_QWORD *)(v0 + 1552);
  v18 = *(_QWORD *)(v0 + 1544);
  v19 = *(_QWORD *)(v0 + 1536);
  v20 = *(_QWORD *)(v0 + 1528);
  v21 = *(_QWORD *)(v0 + 1520);
  v22 = *(_QWORD *)(v0 + 1512);
  v23 = *(_QWORD *)(v0 + 1504);
  v24 = *(_QWORD *)(v0 + 1496);
  v25 = *(_QWORD *)(v0 + 1488);
  v26 = *(_QWORD *)(v0 + 1480);
  v27 = *(_QWORD *)(v0 + 1472);
  v28 = *(_QWORD *)(v0 + 1464);
  v29 = *(_QWORD *)(v0 + 1456);
  v30 = *(_QWORD *)(v0 + 1432);
  v31 = *(_QWORD *)(v0 + 1424);
  v32 = *(_QWORD *)(v0 + 1416);
  v33 = *(_QWORD *)(v0 + 1408);
  v34 = *(_QWORD *)(v0 + 1400);
  v35 = *(_QWORD *)(v0 + 1392);
  v36 = *(_QWORD *)(v0 + 1384);
  v37 = *(_QWORD *)(v0 + 1376);
  v38 = *(_QWORD *)(v0 + 1368);
  v39 = *(_QWORD *)(v0 + 1360);
  v40 = *(_QWORD *)(v0 + 1336);
  v41 = *(_QWORD *)(v0 + 1328);
  v42 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BD040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 1792);
  v2 = *(_QWORD *)(v0 + 1776);
  v3 = *(_QWORD *)(v0 + 1752);
  v4 = *(_QWORD *)(v0 + 1744);
  v5 = *(_QWORD *)(v0 + 1704);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1808));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(v0 + 1664);
  v7 = *(_QWORD *)(v0 + 1656);
  v8 = *(_QWORD *)(v0 + 1648);
  v9 = *(_QWORD *)(v0 + 1624);
  v10 = *(_QWORD *)(v0 + 1616);
  v11 = *(_QWORD *)(v0 + 1608);
  v12 = *(_QWORD *)(v0 + 1600);
  v13 = *(_QWORD *)(v0 + 1592);
  v14 = *(_QWORD *)(v0 + 1584);
  v16 = *(_QWORD *)(v0 + 1576);
  v17 = *(_QWORD *)(v0 + 1568);
  v18 = *(_QWORD *)(v0 + 1560);
  v19 = *(_QWORD *)(v0 + 1552);
  v20 = *(_QWORD *)(v0 + 1544);
  v21 = *(_QWORD *)(v0 + 1536);
  v22 = *(_QWORD *)(v0 + 1528);
  v23 = *(_QWORD *)(v0 + 1520);
  v24 = *(_QWORD *)(v0 + 1512);
  v25 = *(_QWORD *)(v0 + 1504);
  v26 = *(_QWORD *)(v0 + 1496);
  v27 = *(_QWORD *)(v0 + 1488);
  v28 = *(_QWORD *)(v0 + 1480);
  v29 = *(_QWORD *)(v0 + 1472);
  v30 = *(_QWORD *)(v0 + 1464);
  v31 = *(_QWORD *)(v0 + 1456);
  v32 = *(_QWORD *)(v0 + 1432);
  v33 = *(_QWORD *)(v0 + 1424);
  v34 = *(_QWORD *)(v0 + 1416);
  v35 = *(_QWORD *)(v0 + 1408);
  v36 = *(_QWORD *)(v0 + 1400);
  v37 = *(_QWORD *)(v0 + 1392);
  v38 = *(_QWORD *)(v0 + 1384);
  v39 = *(_QWORD *)(v0 + 1376);
  v40 = *(_QWORD *)(v0 + 1368);
  v41 = *(_QWORD *)(v0 + 1360);
  v42 = *(_QWORD *)(v0 + 1336);
  v43 = *(_QWORD *)(v0 + 1328);
  v44 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BD2E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 1832);
  v2 = *(_QWORD *)(v0 + 1792);
  v3 = *(_QWORD *)(v0 + 1776);
  v4 = *(_QWORD *)(v0 + 1752);
  v5 = *(_QWORD *)(v0 + 1744);
  v6 = *(_QWORD *)(v0 + 1704);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1848));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(v0 + 1664);
  v8 = *(_QWORD *)(v0 + 1656);
  v9 = *(_QWORD *)(v0 + 1648);
  v10 = *(_QWORD *)(v0 + 1624);
  v11 = *(_QWORD *)(v0 + 1616);
  v12 = *(_QWORD *)(v0 + 1608);
  v13 = *(_QWORD *)(v0 + 1600);
  v14 = *(_QWORD *)(v0 + 1592);
  v15 = *(_QWORD *)(v0 + 1584);
  v17 = *(_QWORD *)(v0 + 1576);
  v18 = *(_QWORD *)(v0 + 1568);
  v19 = *(_QWORD *)(v0 + 1560);
  v20 = *(_QWORD *)(v0 + 1552);
  v21 = *(_QWORD *)(v0 + 1544);
  v22 = *(_QWORD *)(v0 + 1536);
  v23 = *(_QWORD *)(v0 + 1528);
  v24 = *(_QWORD *)(v0 + 1520);
  v25 = *(_QWORD *)(v0 + 1512);
  v26 = *(_QWORD *)(v0 + 1504);
  v27 = *(_QWORD *)(v0 + 1496);
  v28 = *(_QWORD *)(v0 + 1488);
  v29 = *(_QWORD *)(v0 + 1480);
  v30 = *(_QWORD *)(v0 + 1472);
  v31 = *(_QWORD *)(v0 + 1464);
  v32 = *(_QWORD *)(v0 + 1456);
  v33 = *(_QWORD *)(v0 + 1432);
  v34 = *(_QWORD *)(v0 + 1424);
  v35 = *(_QWORD *)(v0 + 1416);
  v36 = *(_QWORD *)(v0 + 1408);
  v37 = *(_QWORD *)(v0 + 1400);
  v38 = *(_QWORD *)(v0 + 1392);
  v39 = *(_QWORD *)(v0 + 1384);
  v40 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1368);
  v42 = *(_QWORD *)(v0 + 1360);
  v43 = *(_QWORD *)(v0 + 1336);
  v44 = *(_QWORD *)(v0 + 1328);
  v45 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BD594()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 1664);
  v2 = *(_QWORD *)(v0 + 1656);
  v3 = *(_QWORD *)(v0 + 1648);
  v4 = *(_QWORD *)(v0 + 1624);
  v5 = *(_QWORD *)(v0 + 1616);
  v6 = *(_QWORD *)(v0 + 1608);
  v7 = *(_QWORD *)(v0 + 1600);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1584);
  v11 = *(_QWORD *)(v0 + 1576);
  v12 = *(_QWORD *)(v0 + 1568);
  v13 = *(_QWORD *)(v0 + 1560);
  v14 = *(_QWORD *)(v0 + 1552);
  v15 = *(_QWORD *)(v0 + 1544);
  v16 = *(_QWORD *)(v0 + 1536);
  v17 = *(_QWORD *)(v0 + 1528);
  v18 = *(_QWORD *)(v0 + 1520);
  v19 = *(_QWORD *)(v0 + 1512);
  v20 = *(_QWORD *)(v0 + 1504);
  v21 = *(_QWORD *)(v0 + 1496);
  v22 = *(_QWORD *)(v0 + 1488);
  v23 = *(_QWORD *)(v0 + 1480);
  v24 = *(_QWORD *)(v0 + 1472);
  v25 = *(_QWORD *)(v0 + 1464);
  v26 = *(_QWORD *)(v0 + 1456);
  v27 = *(_QWORD *)(v0 + 1432);
  v28 = *(_QWORD *)(v0 + 1424);
  v29 = *(_QWORD *)(v0 + 1416);
  v30 = *(_QWORD *)(v0 + 1408);
  v31 = *(_QWORD *)(v0 + 1400);
  v32 = *(_QWORD *)(v0 + 1392);
  v33 = *(_QWORD *)(v0 + 1384);
  v34 = *(_QWORD *)(v0 + 1376);
  v35 = *(_QWORD *)(v0 + 1368);
  v36 = *(_QWORD *)(v0 + 1360);
  v37 = *(_QWORD *)(v0 + 1336);
  v38 = *(_QWORD *)(v0 + 1328);
  v39 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BD7F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_417D8(*(_QWORD *)(v0 + 1624), &qword_1F1310);
  v1 = *(_QWORD *)(v0 + 1664);
  v2 = *(_QWORD *)(v0 + 1656);
  v3 = *(_QWORD *)(v0 + 1648);
  v4 = *(_QWORD *)(v0 + 1624);
  v5 = *(_QWORD *)(v0 + 1616);
  v6 = *(_QWORD *)(v0 + 1608);
  v7 = *(_QWORD *)(v0 + 1600);
  v8 = *(_QWORD *)(v0 + 1592);
  v9 = *(_QWORD *)(v0 + 1584);
  v11 = *(_QWORD *)(v0 + 1576);
  v12 = *(_QWORD *)(v0 + 1568);
  v13 = *(_QWORD *)(v0 + 1560);
  v14 = *(_QWORD *)(v0 + 1552);
  v15 = *(_QWORD *)(v0 + 1544);
  v16 = *(_QWORD *)(v0 + 1536);
  v17 = *(_QWORD *)(v0 + 1528);
  v18 = *(_QWORD *)(v0 + 1520);
  v19 = *(_QWORD *)(v0 + 1512);
  v20 = *(_QWORD *)(v0 + 1504);
  v21 = *(_QWORD *)(v0 + 1496);
  v22 = *(_QWORD *)(v0 + 1488);
  v23 = *(_QWORD *)(v0 + 1480);
  v24 = *(_QWORD *)(v0 + 1472);
  v25 = *(_QWORD *)(v0 + 1464);
  v26 = *(_QWORD *)(v0 + 1456);
  v27 = *(_QWORD *)(v0 + 1432);
  v28 = *(_QWORD *)(v0 + 1424);
  v29 = *(_QWORD *)(v0 + 1416);
  v30 = *(_QWORD *)(v0 + 1408);
  v31 = *(_QWORD *)(v0 + 1400);
  v32 = *(_QWORD *)(v0 + 1392);
  v33 = *(_QWORD *)(v0 + 1384);
  v34 = *(_QWORD *)(v0 + 1376);
  v35 = *(_QWORD *)(v0 + 1368);
  v36 = *(_QWORD *)(v0 + 1360);
  v37 = *(_QWORD *)(v0 + 1336);
  v38 = *(_QWORD *)(v0 + 1328);
  v39 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BDA64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 1624);
  v2 = *(_QWORD *)(v0 + 1616);
  v3 = *(_QWORD *)(v0 + 1608);
  v4 = *(_QWORD *)(v0 + 1472);
  v5 = *(_QWORD *)(v0 + 1440);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1448) + 8);
  v6(*(_QWORD *)(v0 + 1464), v5);
  v6(v4, v5);
  sub_417D8(v2, &qword_1F1310);
  sub_417D8(v1, &qword_1F1310);
  sub_417D8(v3, &qword_1F1310);
  v7 = *(_QWORD *)(v0 + 1664);
  v8 = *(_QWORD *)(v0 + 1656);
  v9 = *(_QWORD *)(v0 + 1648);
  v10 = *(_QWORD *)(v0 + 1624);
  v11 = *(_QWORD *)(v0 + 1616);
  v12 = *(_QWORD *)(v0 + 1608);
  v13 = *(_QWORD *)(v0 + 1600);
  v14 = *(_QWORD *)(v0 + 1592);
  v15 = *(_QWORD *)(v0 + 1584);
  v17 = *(_QWORD *)(v0 + 1576);
  v18 = *(_QWORD *)(v0 + 1568);
  v19 = *(_QWORD *)(v0 + 1560);
  v20 = *(_QWORD *)(v0 + 1552);
  v21 = *(_QWORD *)(v0 + 1544);
  v22 = *(_QWORD *)(v0 + 1536);
  v23 = *(_QWORD *)(v0 + 1528);
  v24 = *(_QWORD *)(v0 + 1520);
  v25 = *(_QWORD *)(v0 + 1512);
  v26 = *(_QWORD *)(v0 + 1504);
  v27 = *(_QWORD *)(v0 + 1496);
  v28 = *(_QWORD *)(v0 + 1488);
  v29 = *(_QWORD *)(v0 + 1480);
  v30 = *(_QWORD *)(v0 + 1472);
  v31 = *(_QWORD *)(v0 + 1464);
  v32 = *(_QWORD *)(v0 + 1456);
  v33 = *(_QWORD *)(v0 + 1432);
  v34 = *(_QWORD *)(v0 + 1424);
  v35 = *(_QWORD *)(v0 + 1416);
  v36 = *(_QWORD *)(v0 + 1408);
  v37 = *(_QWORD *)(v0 + 1400);
  v38 = *(_QWORD *)(v0 + 1392);
  v39 = *(_QWORD *)(v0 + 1384);
  v40 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1368);
  v42 = *(_QWORD *)(v0 + 1360);
  v43 = *(_QWORD *)(v0 + 1336);
  v44 = *(_QWORD *)(v0 + 1328);
  v45 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BDD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 1624);
  v2 = *(_QWORD *)(v0 + 1616);
  v3 = *(_QWORD *)(v0 + 1608);
  v4 = *(_QWORD *)(v0 + 1472);
  v5 = *(_QWORD *)(v0 + 1440);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1448) + 8);
  v6(*(_QWORD *)(v0 + 1464), v5);
  v6(v4, v5);
  sub_417D8(v2, &qword_1F1310);
  sub_417D8(v1, &qword_1F1310);
  sub_417D8(v3, &qword_1F1310);
  v7 = *(_QWORD *)(v0 + 1664);
  v8 = *(_QWORD *)(v0 + 1656);
  v9 = *(_QWORD *)(v0 + 1648);
  v10 = *(_QWORD *)(v0 + 1624);
  v11 = *(_QWORD *)(v0 + 1616);
  v12 = *(_QWORD *)(v0 + 1608);
  v13 = *(_QWORD *)(v0 + 1600);
  v14 = *(_QWORD *)(v0 + 1592);
  v15 = *(_QWORD *)(v0 + 1584);
  v17 = *(_QWORD *)(v0 + 1576);
  v18 = *(_QWORD *)(v0 + 1568);
  v19 = *(_QWORD *)(v0 + 1560);
  v20 = *(_QWORD *)(v0 + 1552);
  v21 = *(_QWORD *)(v0 + 1544);
  v22 = *(_QWORD *)(v0 + 1536);
  v23 = *(_QWORD *)(v0 + 1528);
  v24 = *(_QWORD *)(v0 + 1520);
  v25 = *(_QWORD *)(v0 + 1512);
  v26 = *(_QWORD *)(v0 + 1504);
  v27 = *(_QWORD *)(v0 + 1496);
  v28 = *(_QWORD *)(v0 + 1488);
  v29 = *(_QWORD *)(v0 + 1480);
  v30 = *(_QWORD *)(v0 + 1472);
  v31 = *(_QWORD *)(v0 + 1464);
  v32 = *(_QWORD *)(v0 + 1456);
  v33 = *(_QWORD *)(v0 + 1432);
  v34 = *(_QWORD *)(v0 + 1424);
  v35 = *(_QWORD *)(v0 + 1416);
  v36 = *(_QWORD *)(v0 + 1408);
  v37 = *(_QWORD *)(v0 + 1400);
  v38 = *(_QWORD *)(v0 + 1392);
  v39 = *(_QWORD *)(v0 + 1384);
  v40 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1368);
  v42 = *(_QWORD *)(v0 + 1360);
  v43 = *(_QWORD *)(v0 + 1336);
  v44 = *(_QWORD *)(v0 + 1328);
  v45 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_BDFE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 1624);
  v2 = *(_QWORD *)(v0 + 1616);
  v3 = *(_QWORD *)(v0 + 1608);
  v4 = *(_QWORD *)(v0 + 1472);
  v5 = *(_QWORD *)(v0 + 1440);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1448) + 8);
  v6(*(_QWORD *)(v0 + 1464), v5);
  v6(v4, v5);
  sub_417D8(v2, &qword_1F1310);
  sub_417D8(v1, &qword_1F1310);
  sub_417D8(v3, &qword_1F1310);
  v7 = *(_QWORD *)(v0 + 1664);
  v8 = *(_QWORD *)(v0 + 1656);
  v9 = *(_QWORD *)(v0 + 1648);
  v10 = *(_QWORD *)(v0 + 1624);
  v11 = *(_QWORD *)(v0 + 1616);
  v12 = *(_QWORD *)(v0 + 1608);
  v13 = *(_QWORD *)(v0 + 1600);
  v14 = *(_QWORD *)(v0 + 1592);
  v15 = *(_QWORD *)(v0 + 1584);
  v17 = *(_QWORD *)(v0 + 1576);
  v18 = *(_QWORD *)(v0 + 1568);
  v19 = *(_QWORD *)(v0 + 1560);
  v20 = *(_QWORD *)(v0 + 1552);
  v21 = *(_QWORD *)(v0 + 1544);
  v22 = *(_QWORD *)(v0 + 1536);
  v23 = *(_QWORD *)(v0 + 1528);
  v24 = *(_QWORD *)(v0 + 1520);
  v25 = *(_QWORD *)(v0 + 1512);
  v26 = *(_QWORD *)(v0 + 1504);
  v27 = *(_QWORD *)(v0 + 1496);
  v28 = *(_QWORD *)(v0 + 1488);
  v29 = *(_QWORD *)(v0 + 1480);
  v30 = *(_QWORD *)(v0 + 1472);
  v31 = *(_QWORD *)(v0 + 1464);
  v32 = *(_QWORD *)(v0 + 1456);
  v33 = *(_QWORD *)(v0 + 1432);
  v34 = *(_QWORD *)(v0 + 1424);
  v35 = *(_QWORD *)(v0 + 1416);
  v36 = *(_QWORD *)(v0 + 1408);
  v37 = *(_QWORD *)(v0 + 1400);
  v38 = *(_QWORD *)(v0 + 1392);
  v39 = *(_QWORD *)(v0 + 1384);
  v40 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1368);
  v42 = *(_QWORD *)(v0 + 1360);
  v43 = *(_QWORD *)(v0 + 1336);
  v44 = *(_QWORD *)(v0 + 1328);
  v45 = *(_QWORD *)(v0 + 1320);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_BE2A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, double a10@<D0>, double a11@<D1>, uint64_t a12, uint64_t a13, double a14, unsigned __int8 a15, uint64_t *a16, uint64_t *a17, unsigned __int8 *a18, unsigned __int8 a19, uint64_t (*a20)(uint64_t, uint64_t, uint64_t),uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  void (*v114)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  int v120;
  uint8_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v129;
  _BOOL4 v130;
  _BOOL4 v131;
  _BOOL4 v132;
  _BOOL4 v133;
  double v134;
  _BOOL4 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char *v140;
  double v141;
  double v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  double v146;
  void (*v147)(char *, uint64_t, uint64_t, uint64_t);
  char *v148;
  double v149;
  double v150;
  uint64_t v151;
  int v152;
  char *v153;
  char *v154;
  double v155;
  double v156;
  unsigned int (*v157)(uint64_t, uint64_t, uint64_t);
  uint64_t v158;
  double v159;
  double v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t (*v164)(char *, uint64_t, uint64_t);
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char v171;
  double v173;
  double v174;
  double v175;
  double v176;
  char v177;
  char v178;
  char v179;
  char v180;
  uint64_t v181;
  char v182;
  void (*v183)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *result;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  char *v188;
  char *v189;
  int v190;
  int v191;
  char *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  _BOOL4 v211;
  _BOOL4 v212;
  _BOOL4 v213;
  _BOOL4 v214;
  char *v215;
  _BOOL4 v216;
  _BOOL4 v217;
  _BOOL4 v218;
  _BOOL4 v219;
  _BOOL4 v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  int v233;
  int v234;
  double v235;
  double v236;
  double v237;
  double v238;
  double v239;
  double v240;
  int v241;
  double v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  double v246;
  double v247;
  _BOOL4 v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  _BOOL4 v254;
  int v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  char *v263;
  int v264;
  char *v265;
  char *v266;
  char *v267;
  uint64_t v268;
  unsigned int v269;
  char *v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  char *v274;
  char *v275;
  unsigned __int8 *v276;
  char *v277;
  uint64_t v278;
  char *v279;
  uint64_t (*v280)(uint64_t, uint64_t, uint64_t);
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  double v287;
  char *v288;
  uint64_t v289;
  int v290;
  void (*v291)(uint64_t, uint64_t, uint64_t, uint64_t);
  double v292;
  uint64_t v293;
  double v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  unsigned __int8 *v299;
  unsigned __int8 *v300;
  __int128 v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  __int128 v305;
  uint64_t v306;
  uint64_t v307;
  char v308;
  __int128 v309;
  char v310;
  _OWORD v311[2];
  uint64_t v312;
  char v313;
  _BYTE v314[377];
  unsigned __int8 v315;

  v293 = a8;
  v250 = a7;
  v251 = a1;
  v203 = a6;
  v289 = a5;
  v243 = a3;
  v268 = a2;
  v187 = a9;
  v290 = a15;
  v287 = a14;
  v284 = a21;
  v280 = a20;
  v276 = a18;
  v298 = type metadata accessor for Event(0);
  v271 = *(_QWORD *)(v298 - 8);
  v27 = __chkstk_darwin(v298);
  v279 = (char *)&v185 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v27);
  *(_QWORD *)&v294 = (char *)&v185 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v185 - v32;
  __chkstk_darwin(v31);
  v295 = (uint64_t)&v185 - v34;
  v35 = type metadata accessor for Date(0);
  v296 = *(_QWORD *)(v35 - 8);
  v36 = __chkstk_darwin(v35);
  v272 = (char *)&v185 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v36);
  v274 = (char *)&v185 - v39;
  v40 = __chkstk_darwin(v38);
  v275 = (char *)&v185 - v41;
  v42 = __chkstk_darwin(v40);
  v192 = (char *)&v185 - v43;
  v44 = __chkstk_darwin(v42);
  v210 = (char *)&v185 - v45;
  v46 = __chkstk_darwin(v44);
  v208 = (char *)&v185 - v47;
  v48 = __chkstk_darwin(v46);
  v188 = (char *)&v185 - v49;
  v50 = __chkstk_darwin(v48);
  v256 = (char *)&v185 - v51;
  v52 = __chkstk_darwin(v50);
  v277 = (char *)&v185 - v53;
  v54 = __chkstk_darwin(v52);
  v267 = (char *)&v185 - v55;
  v56 = __chkstk_darwin(v54);
  v226 = (char *)&v185 - v57;
  v58 = __chkstk_darwin(v56);
  v225 = (char *)&v185 - v59;
  v60 = __chkstk_darwin(v58);
  v224 = (char *)&v185 - v61;
  v62 = __chkstk_darwin(v60);
  v223 = (char *)&v185 - v63;
  v64 = __chkstk_darwin(v62);
  v288 = (char *)&v185 - v65;
  v66 = __chkstk_darwin(v64);
  v222 = (char *)&v185 - v67;
  v68 = __chkstk_darwin(v66);
  v259 = (char *)&v185 - v69;
  v70 = __chkstk_darwin(v68);
  v265 = (char *)&v185 - v71;
  v72 = __chkstk_darwin(v70);
  v263 = (char *)&v185 - v73;
  v74 = __chkstk_darwin(v72);
  v258 = (char *)&v185 - v75;
  v76 = __chkstk_darwin(v74);
  v221 = (char *)&v185 - v77;
  __chkstk_darwin(v76);
  v270 = (char *)&v185 - v78;
  v79 = sub_5EDC(&qword_1F1310);
  v80 = __chkstk_darwin(v79);
  v209 = (char *)&v185 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = __chkstk_darwin(v80);
  v207 = (uint64_t)&v185 - v83;
  v84 = __chkstk_darwin(v82);
  v206 = (uint64_t)&v185 - v85;
  v86 = __chkstk_darwin(v84);
  v189 = (char *)&v185 - v87;
  v88 = __chkstk_darwin(v86);
  v257 = (char *)&v185 - v89;
  v90 = __chkstk_darwin(v88);
  v266 = (char *)&v185 - v91;
  v92 = __chkstk_darwin(v90);
  v215 = (char *)&v185 - v93;
  v94 = __chkstk_darwin(v92);
  v297 = (char *)&v185 - v95;
  v96 = __chkstk_darwin(v94);
  *(_QWORD *)&v292 = (char *)&v185 - v97;
  v98 = __chkstk_darwin(v96);
  v278 = (uint64_t)&v185 - v99;
  v100 = __chkstk_darwin(v98);
  v273 = (uint64_t)&v185 - v101;
  v102 = __chkstk_darwin(v100);
  v282 = (uint64_t)&v185 - v103;
  v104 = __chkstk_darwin(v102);
  v283 = (uint64_t)&v185 - v105;
  v106 = __chkstk_darwin(v104);
  v108 = (uint64_t)&v185 - v107;
  __chkstk_darwin(v106);
  v110 = (uint64_t)&v185 - v109;
  v111 = *a16;
  v199 = a16[1];
  v200 = v111;
  v198 = *((unsigned __int8 *)a16 + 16);
  v285 = *a17;
  v281 = a17[1];
  LODWORD(v286) = *((unsigned __int8 *)a17 + 16);
  v255 = *v276;
  v112 = *(_QWORD *)v280;
  v244 = *((_QWORD *)v280 + 1);
  v245 = v112;
  LODWORD(v112) = *((unsigned __int8 *)v280 + 16);
  v202 = *(_QWORD *)v284;
  v186 = *(_QWORD *)(v284 + 8);
  v113 = *(unsigned __int8 *)(v284 + 16);
  v190 = v112;
  v191 = v113;
  v300 = a4;
  v114 = v291;
  *(double *)&v205 = COERCE_DOUBLE(sub_C0668((void (*)(uint64_t *__return_ptr, char *))sub_C97A0));
  v204 = v115;
  v276 = a4;
  v299 = a4;
  v197 = sub_C0668((void (*)(uint64_t *__return_ptr, char *))sub_C93E0);
  v196 = v116;
  v201 = v114;
  v315 = 2;
  if (v268 != 0x18067B1ECLL)
    goto LABEL_10;
  if (qword_1F0180 != -1)
    goto LABEL_70;
  while (1)
  {
    v117 = type metadata accessor for Logger(0);
    sub_5216C(v117, (uint64_t)qword_224630);
    v118 = sub_418BC(a12, v110, &qword_1F1310);
    v119 = Logger.logObject.getter(v118);
    v120 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v119, (os_log_type_t)v120))
    {
      LODWORD(v291) = v120;
      v121 = (uint8_t *)swift_slowAlloc(12, -1);
      v289 = swift_slowAlloc(32, -1);
      *(_QWORD *)v314 = v289;
      *(_DWORD *)v121 = 136315138;
      sub_418BC(v110, v108, &qword_1F1310);
      v122 = v296;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v296 + 48))(v108, 1, v35) == 1)
      {
        sub_417D8(v108, &qword_1F1310);
        v123 = 0xE500000000000000;
        v124 = 0x3E6C696E3CLL;
      }
      else
      {
        v284 = Date.description.getter();
        v123 = v125;
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v108, v35);
        v124 = v284;
      }
      *(_QWORD *)&v311[0] = sub_9DA98(v124, v123, (uint64_t *)v314);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v311, (char *)v311 + 8, v121 + 4, v121 + 12);
      swift_bridgeObjectRelease(v123);
      sub_417D8(v110, &qword_1F1310);
      _os_log_impl(&dword_0, v119, (os_log_type_t)v291, "6449246700 finishedDate=%s", v121, 0xCu);
      v126 = v289;
      swift_arrayDestroy(v289, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v126, -1, -1);
      swift_slowDealloc(v121, -1, -1);
    }
    else
    {
      sub_417D8(v110, &qword_1F1310);
    }

LABEL_10:
    v127 = v296;
    v128 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v296 + 56);
    v128(v283, 1, 1, v35);
    v128(v282, 1, 1, v35);
    v291 = v128;
    v128(v273, 1, 1, v35);
    v129 = v251;
    LODWORD(v289) = sub_28468(0xFu, v251);
    v248 = sub_28468(0x10u, v129);
    v130 = sub_28468(0x11u, v129);
    v131 = sub_28468(0, v129);
    v220 = sub_28468(3u, v129);
    v213 = sub_28468(2u, v129);
    v254 = sub_28468(1u, v129);
    v219 = sub_28468(0xAu, v129);
    v132 = sub_28468(7u, v129);
    v218 = sub_28468(0xDu, v129);
    v217 = sub_28468(0xBu, v129);
    v216 = sub_28468(0xCu, v129);
    v212 = sub_28468(0xEu, v129);
    v133 = sub_28468(0, v129);
    v134 = v287;
    if (!v133)
      v134 = 0.0;
    v247 = v134;
    v253 = !v133 | v290;
    v135 = sub_28468(3u, v129);
    v136 = v285;
    if (!v135)
      v136 = 0;
    v262 = v136;
    v137 = v281;
    if (!v135)
      v137 = 0;
    v260 = v137;
    v261 = !v135 | v286;
    v138 = v278;
    sub_418BC(v293, v278, &qword_1F1310);
    v280 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
    v139 = v280(v138, 1, v35);
    v214 = v131;
    v211 = v132;
    if (v139 == 1)
    {
      sub_417D8(v138, &qword_1F1310);
      v242 = 0.0;
      v241 = 1;
    }
    else
    {
      v140 = v270;
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 32))(v270, v138, v35);
      if (v132 || v131)
      {
        v141 = Date.timeIntervalSince(_:)(v140);
        v127 = v296;
        v142 = v141;
        (*(void (**)(char *, uint64_t))(v296 + 8))(v140, v35);
        v241 = 0;
        v242 = v142;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v127 + 8))(v140, v35);
        v242 = 0.0;
        v241 = 1;
      }
    }
    v110 = v248;
    v287 = *(double *)(v243 + 16);
    LODWORD(v284) = v130;
    if (v287 != 0.0)
    {
      v227 = a23;
      v194 = a19;
      v193 = v195 + OBJC_IVAR____TtC20BooksPersonalization18BookHistoryService_timeZone;
      v286 = v243 + ((*(unsigned __int8 *)(v271 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v271 + 80));
      v249 = v289 | v130;
      v285 = *(_QWORD *)(v271 + 72);
      swift_bridgeObjectRetain(v243);
      v246 = 0.0;
      v235 = 0.0;
      v236 = 0.0;
      v237 = 0.0;
      v238 = 0.0;
      v239 = 0.0;
      v240 = 0.0;
      *(double *)&v270 = 0.0;
      v278 = 0;
      v252 = 1;
      v264 = 1;
      v234 = 1;
      v233 = 1;
      v232 = 1;
      v231 = 1;
      v230 = 1;
      v269 = 1;
      LODWORD(v281) = 1;
      v229 = 1;
      v228 = 1;
      v143 = v292;
      v271 = v35;
      v144 = (uint64_t)v33;
      v145 = v295;
      sub_26A5C(v286, v295, type metadata accessor for Event);
      v146 = v143;
      v147 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v291;
      v291(*(_QWORD *)&v146, 1, 1, v35);
      v147(v297, 1, 1, v35);
      sub_26A5C(v145, v144, type metadata accessor for Event);
      v148 = (char *)&loc_BEF30 + dword_C0624[swift_getEnumCaseMultiPayload(v144, v298)];
      __asm { BR              X9 }
    }
    v246 = 0.0;
    v235 = 0.0;
    v236 = 0.0;
    v237 = 0.0;
    v238 = 0.0;
    v239 = 0.0;
    v240 = 0.0;
    *(double *)&v270 = 0.0;
    v278 = 0;
    v149 = 0.0;
    v252 = 1;
    v264 = 1;
    v234 = 1;
    v233 = 1;
    v232 = 1;
    v231 = 1;
    v230 = 1;
    v269 = 1;
    LODWORD(v281) = 1;
    v229 = 1;
    v150 = 0.0;
    v228 = 1;
    v298 = a13;
    v151 = v206;
    sub_418BC(v250, v206, &qword_1F1310);
    v152 = v280(v151, 1, v35);
    a12 = (uint64_t)v209;
    v153 = v210;
    v154 = v208;
    if (v152 == 1)
    {
      sub_417D8(v151, &qword_1F1310);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 32))(v208, v151, v35);
      if (sub_28468(8u, v251))
      {
        v155 = Date.timeIntervalSince(_:)(v154);
        v127 = v296;
        v156 = v155;
        (*(void (**)(char *, uint64_t))(v296 + 8))(v154, v35);
        LODWORD(v293) = 0;
        v294 = v156;
        goto LABEL_29;
      }
      (*(void (**)(char *, uint64_t))(v127 + 8))(v154, v35);
    }
    v294 = 0.0;
    LODWORD(v293) = 1;
LABEL_29:
    v157 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v280;
    v158 = v207;
    sub_418BC(v298, v207, &qword_1F1310);
    if (v157(v158, 1, v35) == 1)
    {
      sub_417D8(v158, &qword_1F1310);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 32))(v153, v158, v35);
      if (sub_28468(9u, v251))
      {
        v159 = Date.timeIntervalSince(_:)(v153);
        v127 = v296;
        v160 = v159;
        (*(void (**)(char *, uint64_t))(v296 + 8))(v153, v35);
        LODWORD(v291) = 0;
        v292 = v160;
        goto LABEL_35;
      }
      (*(void (**)(char *, uint64_t))(v127 + 8))(v153, v35);
    }
    v292 = 0.0;
    LODWORD(v291) = 1;
LABEL_35:
    v108 = v284;
    v161 = v278;
    if ((v289 & v281 & 1) != 0)
      v161 = 0;
    v295 = v161;
    if ((v110 & 1) == 0)
      goto LABEL_40;
    sub_418BC(v282, a12, &qword_1F1310);
    if (v157(a12, 1, v35) == 1)
    {
      sub_417D8(a12, &qword_1F1310);
LABEL_40:
      v297 = 0;
      v163 = v202;
      v162 = v203;
      goto LABEL_49;
    }
    v164 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v127 + 32);
    v165 = v164(v192, a12, v35);
    Date.init()(v165);
    a12 = v195 + OBJC_IVAR____TtC20BooksPersonalization18BookHistoryService_timeZone;
    v166 = v274;
    v167 = Date.beginningOfDay(timeZone:)(v195 + OBJC_IVAR____TtC20BooksPersonalization18BookHistoryService_timeZone, (uint64_t)v274);
    v297 = 0;
    v168 = v272;
    v169 = (uint64_t)v277;
    while (1)
    {
      Date.addingTimeInterval(_:)(v167, 90000.0);
      Date.beginningOfDay(timeZone:)(a12, v169);
      v170 = v166;
      v166 = *(char **)(v296 + 8);
      ((void (*)(char *, uint64_t))v166)(v168, v35);
      ((void (*)(char *, uint64_t))v166)(v170, v35);
      v164(v170, v169, v35);
      v167 = Date.compare(_:)(v275);
      if (v167 == 1)
        break;
      v166 = v274;
      if (*(_QWORD *)(a22 + 16))
      {
        v167 = sub_39190((uint64_t)v274);
        if ((v171 & 1) != 0 && __OFADD__(v297++, 1))
        {
          __break(1u);
          break;
        }
      }
    }
    ((void (*)(char *, uint64_t))v166)(v274, v35);
    ((void (*)(char *, uint64_t))v166)(v275, v35);
    ((void (*)(char *, uint64_t))v166)(v192, v35);
    v163 = v202;
    v162 = v203;
    v110 = v248;
    v108 = v284;
LABEL_49:
    v33 = (char *)v269;
    if ((v108 & v269 & 1) != 0)
      v173 = 0.0;
    else
      v173 = *(double *)&v270;
    v174 = Date.timeIntervalSince(_:)(v162);
    v175 = *(double *)&v205;
    v176 = 0.0;
    if ((v204 & 1) != 0)
      v175 = 0.0;
    if (v175 <= v174)
      break;
    __break(1u);
LABEL_70:
    swift_once(&qword_1F0180, sub_17184C);
  }
  if ((v228 & 1) != 0)
  {
    if (v190)
    {
      v244 = 0;
      v245 = 0;
      v177 = -1;
      v150 = 0.0;
    }
    else
    {
      v177 = 1;
      v150 = v175;
      v176 = v174;
    }
  }
  else
  {
    v244 = 0;
    v245 = 0;
    v177 = 0;
  }
  v178 = (v289 ^ 1) & v281;
  v179 = v110 ^ 1;
  v180 = (v108 ^ 1) & v33;
  if ((v229 & 1) != 0)
  {
    if (v191)
    {
      v163 = 0;
      v181 = 0;
      v182 = -1;
      v149 = 0.0;
      goto LABEL_64;
    }
    v182 = 1;
    v149 = v175;
    v181 = v186;
  }
  else
  {
    v163 = 0;
    v181 = 0;
    v182 = 0;
LABEL_64:
    v174 = 0.0;
  }
  sub_C07C8(*(double *)&v197, v196 & 1, v198, v250, (uint64_t)v276, v298, (uint64_t)v314, a11, a10, &v315);
  v311[0] = *(_OWORD *)v314;
  v311[1] = *(_OWORD *)&v314[16];
  v312 = *(_QWORD *)&v314[32];
  v313 = v314[40];
  *(_QWORD *)&v309 = v262;
  *((_QWORD *)&v309 + 1) = v260;
  v310 = v261 & 1;
  *(double *)&v305 = v150;
  *((double *)&v305 + 1) = v176;
  v306 = v245;
  v307 = v244;
  v308 = v177;
  *(double *)&v301 = v149;
  *((double *)&v301 + 1) = v174;
  v302 = v163;
  v303 = v181;
  v304 = v182;
  v183 = v201;
  BookHistory.init(storeID:readFractionHighWaterMark:sampleReadFractionHighWaterMark:markedFinishedInfo:reviewInfo:secondsSinceMoreLikeThis:secondsSinceLessLikeThis:secondsSinceExplicitDecline:secondsSinceLastRead:secondsSincePurchased:secondsSinceFirstDownloadedViaFamilySharing:addedToWantToRead:secondsSinceRemovedFromWantToRead:sampled:secondsSinceProductPageViewed:secondsSinceFirstRecommended:daysRecommendedCount:consecutiveDaysNotRecommendedCount:daysRecommendationPassedOverCount:)(v268, v247, v253 & 1, v246, v252 & 1, (uint64_t *)v311, &v309, v240, (uint64_t)v314, v230 & 1, v239, v231 & 1, v238, v232 & 1, v242, v241 & 1, v294, v293, v292,
    (char)v291,
    &v305,
    v237,
    v233 & 1,
    &v301,
    v236,
    v234 & 1,
    v235,
    v264 & 1,
    *(double *)&v295,
    v178 & 1,
    *(double *)&v297,
    v179 & 1,
    v173,
    v180 & 1);
  sub_417D8(v273, &qword_1F1310);
  sub_417D8(v282, &qword_1F1310);
  result = (void *)sub_417D8(v283, &qword_1F1310);
  if (!v183)
    return memcpy(v187, v314, 0x179uLL);
  return result;
}

uint64_t sub_C0668(void (*a1)(uint64_t *__return_ptr, char *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F1310);
  __chkstk_darwin(v8);
  v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_418BC(v1, (uint64_t)v10, &qword_1F1310);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
    return 0;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  a1(&v12, v7);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v12;
}

uint64_t sub_C07C8@<X0>(double a1@<X0>, char a2@<W1>, int a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, unsigned __int8 *a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  double v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  uint64_t v42;
  _QWORD v43[2];
  int v44;
  uint64_t v45;

  v45 = a6;
  v43[1] = a5;
  v44 = a3;
  v16 = sub_5EDC(&qword_1F1310);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)v43 - v20;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)v43 - v28;
  result = __chkstk_darwin(v27);
  v33 = (char *)v43 - v32;
  if ((a2 & 1) == 0)
    goto LABEL_14;
  v34 = v45;
  if ((v44 & 1) != 0)
  {
    *(_QWORD *)(a7 + 32) = 0;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    *(_BYTE *)(a7 + 40) = -1;
    return result;
  }
  v35 = a4;
  v36 = v31;
  sub_418BC(v35, (uint64_t)v21, &qword_1F1310);
  v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v37(v21, 1, v36) != 1)
  {
    v38 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v33, v21, v36);
    Date.addingTimeInterval(_:)(v38, a8);
    v39 = Date.timeIntervalSince(_:)(v26);
    v40 = *(void (**)(char *, uint64_t))(v23 + 8);
    v40(v26, v36);
    if (v39 < 0.0)
      v39 = 0.0;
    v41 = v33;
    goto LABEL_13;
  }
  sub_417D8((uint64_t)v21, &qword_1F1310);
  sub_418BC(v34, (uint64_t)v19, &qword_1F1310);
  if (v37(v19, 1, v36) != 1)
  {
    v42 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v29, v19, v36);
    Date.addingTimeInterval(_:)(v42, a8);
    v39 = Date.timeIntervalSince(_:)(v26);
    v40 = *(void (**)(char *, uint64_t))(v23 + 8);
    v40(v26, v36);
    if (v39 < 0.0)
      v39 = 0.0;
    v41 = v29;
LABEL_13:
    result = ((uint64_t (*)(char *, uint64_t))v40)(v41, v36);
    a1 = v39;
    goto LABEL_14;
  }
  result = sub_417D8((uint64_t)v19, &qword_1F1310);
  a1 = a9;
LABEL_14:
  *(_QWORD *)a7 = *a10;
  *(double *)(a7 + 8) = a1;
  *(_QWORD *)(a7 + 24) = 0;
  *(_QWORD *)(a7 + 32) = 0;
  *(_QWORD *)(a7 + 16) = 0;
  *(_BYTE *)(a7 + 40) = 0;
  return result;
}

uint64_t sub_C0A78()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_62F8(v0 + 2);
  sub_62F8(v0 + 7);
  sub_62F8(v0 + 12);
  sub_62F8(v0 + 17);
  v1 = (char *)v0 + OBJC_IVAR____TtC20BooksPersonalization18BookHistoryService_timeZone;
  v2 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_C0AE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1F3ABC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_70AB4;
  return sub_B92C4(a1, a2, a3);
}

void BookHistory.isEligibleForRecommendation(with:)(void *__src)
{
  uint64_t v1;
  char v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE __dst[312];
  _DWORD v15[2];
  _DWORD v16[2];
  _DWORD v17[2];
  char v18;
  _DWORD v19[2];
  char v20;
  _DWORD v21[2];
  _DWORD v22[2];
  char v23;
  _DWORD v24[2];
  _DWORD v25[2];
  _DWORD v26[2];
  _DWORD v27[2];
  _DWORD v28[2];
  _DWORD v29[2];
  _DWORD v30[2];
  char v31;
  _DWORD v32[2];
  char v33;
  _DWORD v34[2];
  _DWORD v35[2];
  char v36;
  _DWORD v37[2];
  char v38;

  memcpy(__dst, __src, sizeof(__dst));
  v2 = *(_BYTE *)(v1 + 16);
  v37[0] = *(_DWORD *)(v1 + 17);
  *(_DWORD *)((char *)v37 + 3) = *(_DWORD *)(v1 + 20);
  v3 = *(_BYTE *)(v1 + 32);
  v4 = *(_DWORD *)(v1 + 33);
  *(_DWORD *)((char *)v35 + 3) = *(_DWORD *)(v1 + 36);
  v35[0] = v4;
  v5 = *(_DWORD *)(v1 + 81);
  *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)(v1 + 84);
  v34[0] = v5;
  LOBYTE(v5) = *(_BYTE *)(v1 + 104);
  v6 = *(_DWORD *)(v1 + 105);
  *(_DWORD *)((char *)v32 + 3) = *(_DWORD *)(v1 + 108);
  v32[0] = v6;
  LOBYTE(v6) = *(_BYTE *)(v1 + 120);
  v7 = *(_DWORD *)(v1 + 121);
  *(_DWORD *)((char *)v30 + 3) = *(_DWORD *)(v1 + 124);
  v30[0] = v7;
  v8 = *(_DWORD *)(v1 + 137);
  *(_DWORD *)((char *)v29 + 3) = *(_DWORD *)(v1 + 140);
  v29[0] = v8;
  v9 = *(_DWORD *)(v1 + 153);
  *(_DWORD *)((char *)v28 + 3) = *(_DWORD *)(v1 + 156);
  v10 = *(_DWORD *)(v1 + 169);
  v28[0] = v9;
  *(_DWORD *)((char *)v27 + 3) = *(_DWORD *)(v1 + 172);
  v11 = *(_DWORD *)(v1 + 185);
  v27[0] = v10;
  *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)(v1 + 188);
  v26[0] = v11;
  *(_DWORD *)((char *)v25 + 3) = *(_DWORD *)(v1 + 204);
  v25[0] = *(_DWORD *)(v1 + 201);
  v13 = *(_DWORD *)(v1 + 241);
  v12 = v1 + 241;
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)(v12 + 3);
  v24[0] = v13;
  *(_DWORD *)((char *)v22 + 3) = *(_DWORD *)(v12 + 19);
  v22[0] = *(_DWORD *)(v12 + 16);
  *(_DWORD *)((char *)v21 + 3) = *(_DWORD *)(v12 + 59);
  v21[0] = *(_DWORD *)(v12 + 56);
  *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)(v12 + 75);
  v19[0] = *(_DWORD *)(v12 + 72);
  *(_DWORD *)((char *)v17 + 3) = *(_DWORD *)(v12 + 91);
  v17[0] = *(_DWORD *)(v12 + 88);
  *(_DWORD *)((char *)v16 + 3) = *(_DWORD *)(v12 + 107);
  v16[0] = *(_DWORD *)(v12 + 104);
  *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)(v12 + 123);
  v15[0] = *(_DWORD *)(v12 + 120);
  v38 = v2;
  v36 = v3;
  v33 = v5;
  v31 = v6;
  v23 = *(_BYTE *)(v12 + 15);
  v20 = *(_BYTE *)(v12 + 71);
  v18 = *(_BYTE *)(v12 + 87);
  __asm { BR              X22 }
}

uint64_t sub_C1614()
{
  uint64_t v0;

  return ((uint64_t (*)(_QWORD))((char *)&loc_C1654 + 4 * unk_192F8F))(*(unsigned __int8 *)(v0 + 80));
}

Swift::Int sub_C16BC(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  double *v29;
  double v30;
  Swift::Int v31;
  double *v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v87 = *a1;
      v88 = *a1 + 8;
      v89 = -1;
      v90 = 1;
      while (1)
      {
        v91 = *(double *)(v87 + 16 * v90 + 8);
        v92 = v89;
        v93 = v88;
        do
        {
          if (v91 >= *(double *)v93)
            break;
          if (!v87)
            goto LABEL_143;
          v94 = *(_QWORD *)(v93 + 8);
          *(_OWORD *)(v93 + 8) = *(_OWORD *)(v93 - 8);
          *(_QWORD *)(v93 - 8) = v94;
          *(double *)v93 = v91;
          v93 -= 16;
        }
        while (!__CFADD__(v92++, 1));
        ++v90;
        v88 += 16;
        --v89;
        if (v90 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_105;
    }
    v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_5EDC(&qword_1F3AE8);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v104 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v103 = *a1 + 40;
  v13 = (char *)_swiftEmptyArrayStorage;
  v105 = v6;
  v106 = v3;
  v107 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(double *)(v12 + 16 * v11 + 8);
      v17 = *(double *)(v12 + 16 * v15 + 8);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (double *)(v103 + 16 * v15);
        v19 = v16;
        while (1)
        {
          v20 = v19;
          v19 = *v18;
          if (v16 < v17 == *v18 >= v20)
            break;
          ++v11;
          v18 += 2;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v16 < v17)
      {
        if (v11 < v15)
          goto LABEL_140;
        if (v15 < v11)
        {
          v21 = 16 * v11;
          v22 = 16 * v15;
          v23 = v11;
          v24 = v15;
          do
          {
            if (v24 != --v23)
            {
              if (!v12)
                goto LABEL_146;
              v25 = v12 + v21;
              v26 = *(_QWORD *)(v12 + v22);
              v27 = *(_QWORD *)(v12 + v22 + 8);
              *(_OWORD *)(v12 + v22) = *(_OWORD *)(v12 + v21 - 16);
              *(_QWORD *)(v25 - 16) = v26;
              *(_QWORD *)(v25 - 8) = v27;
            }
            ++v24;
            v21 -= 16;
            v22 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_138;
      if (v11 - v15 < v6)
      {
        v28 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_141;
        if (v28 >= v3)
          v28 = v3;
        if (v28 < v15)
          goto LABEL_142;
        if (v11 != v28)
        {
          v29 = (double *)(v12 + 16 * v11);
          do
          {
            v30 = *(double *)(v12 + 16 * v11 + 8);
            v31 = v15;
            v32 = v29;
            do
            {
              if (v30 >= *(v32 - 1))
                break;
              if (!v12)
                goto LABEL_144;
              v33 = *v32;
              *(_OWORD *)v32 = *((_OWORD *)v32 - 1);
              *(v32 - 1) = v30;
              *(v32 - 2) = v33;
              v32 -= 2;
              ++v31;
            }
            while (v11 != v31);
            ++v11;
            v29 += 2;
          }
          while (v11 != v28);
          v11 = v28;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_4E4E4(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v35 = *((_QWORD *)v13 + 2);
    v34 = *((_QWORD *)v13 + 3);
    v14 = v35 + 1;
    v12 = v107;
    if (v35 >= v34 >> 1)
    {
      v84 = sub_4E4E4((char *)(v34 > 1), v35 + 1, 1, v13);
      v12 = v107;
      v13 = v84;
    }
    *((_QWORD *)v13 + 2) = v14;
    v36 = v13 + 32;
    v37 = &v13[16 * v35 + 32];
    *(_QWORD *)v37 = v15;
    *((_QWORD *)v37 + 1) = v11;
    if (v35)
      break;
    v14 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v11 >= v106)
    {
      v10 = v104;
LABEL_105:
      v86 = v13;
      v104 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v96 = *v102;
      while (1)
      {
        v97 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v96)
          goto LABEL_147;
        v85 = v86;
        v98 = *(_QWORD *)&v86[16 * v97 + 32];
        v99 = *(_QWORD *)&v86[16 * v14 + 24];
        sub_C2484((char *)(v96 + 16 * v98), (char *)(v96 + 16 * *(_QWORD *)&v86[16 * v14 + 16]), v96 + 16 * v99, __dst);
        if (v1)
          goto LABEL_94;
        if (v99 < v98)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
          v85 = sub_4ECA8((uint64_t)v85);
        if (v97 >= *((_QWORD *)v85 + 2))
          goto LABEL_136;
        v100 = &v85[16 * v97 + 32];
        *(_QWORD *)v100 = v98;
        *((_QWORD *)v100 + 1) = v99;
        v101 = *((_QWORD *)v85 + 2);
        if (v14 > v101)
          goto LABEL_137;
        memmove(&v85[16 * v14 + 16], &v85[16 * v14 + 32], 16 * (v101 - v14));
        v86 = v85;
        *((_QWORD *)v85 + 2) = v101 - 1;
        v14 = v101 - 1;
        if (v101 <= 2)
          goto LABEL_95;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v38 = v14 - 1;
    if (v14 >= 4)
    {
      v43 = &v36[16 * v14];
      v44 = *((_QWORD *)v43 - 8);
      v45 = *((_QWORD *)v43 - 7);
      v49 = __OFSUB__(v45, v44);
      v46 = v45 - v44;
      if (v49)
        goto LABEL_122;
      v48 = *((_QWORD *)v43 - 6);
      v47 = *((_QWORD *)v43 - 5);
      v49 = __OFSUB__(v47, v48);
      v41 = v47 - v48;
      v42 = v49;
      if (v49)
        goto LABEL_123;
      v50 = v14 - 2;
      v51 = &v36[16 * v14 - 32];
      v53 = *(_QWORD *)v51;
      v52 = *((_QWORD *)v51 + 1);
      v49 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      if (v49)
        goto LABEL_125;
      v49 = __OFADD__(v41, v54);
      v55 = v41 + v54;
      if (v49)
        goto LABEL_128;
      if (v55 >= v46)
      {
        v73 = &v36[16 * v38];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v49 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v49)
          goto LABEL_132;
        v66 = v41 < v76;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v67 = *((_QWORD *)v13 + 4);
        v68 = *((_QWORD *)v13 + 5);
        v49 = __OFSUB__(v68, v67);
        v60 = v68 - v67;
        v61 = v49;
        goto LABEL_77;
      }
      v40 = *((_QWORD *)v13 + 4);
      v39 = *((_QWORD *)v13 + 5);
      v49 = __OFSUB__(v39, v40);
      v41 = v39 - v40;
      v42 = v49;
    }
    if ((v42 & 1) != 0)
      goto LABEL_124;
    v50 = v14 - 2;
    v56 = &v36[16 * v14 - 32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v59 = __OFSUB__(v57, v58);
    v60 = v57 - v58;
    v61 = v59;
    if (v59)
      goto LABEL_127;
    v62 = &v36[16 * v38];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v49 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v49)
      goto LABEL_130;
    if (__OFADD__(v60, v65))
      goto LABEL_131;
    if (v60 + v65 >= v41)
    {
      v66 = v41 < v65;
LABEL_83:
      if (v66)
        v38 = v50;
      goto LABEL_85;
    }
LABEL_77:
    if ((v61 & 1) != 0)
      goto LABEL_126;
    v69 = &v36[16 * v38];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v49 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v49)
      goto LABEL_129;
    if (v72 < v60)
      goto LABEL_15;
LABEL_85:
    v77 = v38 - 1;
    if (v38 - 1 >= v14)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v12)
      goto LABEL_145;
    v78 = v13;
    v79 = &v36[16 * v77];
    v80 = *(_QWORD *)v79;
    v81 = &v36[16 * v38];
    v82 = *((_QWORD *)v81 + 1);
    sub_C2484((char *)(v12 + 16 * *(_QWORD *)v79), (char *)(v12 + 16 * *(_QWORD *)v81), v12 + 16 * v82, __dst);
    if (v1)
      break;
    if (v82 < v80)
      goto LABEL_119;
    if (v38 > *((_QWORD *)v78 + 2))
      goto LABEL_120;
    *(_QWORD *)v79 = v80;
    *(_QWORD *)&v36[16 * v77 + 8] = v82;
    v83 = *((_QWORD *)v78 + 2);
    if (v38 >= v83)
      goto LABEL_121;
    v13 = v78;
    v14 = v83 - 1;
    memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
    *((_QWORD *)v78 + 2) = v83 - 1;
    v12 = v107;
    if (v83 <= 2)
      goto LABEL_15;
  }
  v85 = v78;
LABEL_94:
  v86 = v85;
LABEL_95:
  swift_bridgeObjectRelease(v86);
  v104[2] = 0;
  return swift_bridgeObjectRelease(v104);
}

Swift::Int sub_C1D9C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_3A628(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v111 = result;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v11;
      v110 = v8;
      if (v12 < 2)
        goto LABEL_117;
      v102 = *v108;
      while (1)
      {
        v103 = v12 - 2;
        if (v12 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v12 + 24];
        sub_3A6F4((char *)(v102 + 16 * v104), (char *)(v102 + 16 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 16 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_4ECA8((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v12 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v12 + 16], &v100[16 * v12 + 32], 16 * (v107 - v12));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v12 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_157;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_160;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_153;
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111))
          goto LABEL_155;
        if (v13 + v111 >= v3)
          v36 = v3;
        else
          v36 = v13 + v111;
        if (v36 < v13)
          goto LABEL_156;
        if (v9 != v36)
        {
          v37 = (_QWORD *)(v10 + 16 * v9);
          do
          {
            v38 = (uint64_t *)(v10 + 16 * v9);
            v39 = *v38;
            v40 = v38[1];
            v41 = v13;
            v42 = v37;
            do
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
                break;
              if (!v10)
                goto LABEL_158;
              v39 = *v42;
              v40 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }
            while (v9 != v41);
            ++v9;
            v37 += 2;
          }
          while (v9 != v36);
          v9 = v36;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_4E4E4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_4E4E4((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
      break;
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_120;
    }
  }
  v113 = v9;
  while (1)
  {
    v50 = v12 - 1;
    if (v12 >= 4)
    {
      v55 = &v48[16 * v12];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_137;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_138;
      v62 = v12 - 2;
      v63 = &v48[16 * v12 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_140;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_143;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_147;
        v78 = v53 < v88;
        goto LABEL_105;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v79 = *((_QWORD *)v11 + 4);
        v80 = *((_QWORD *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_99;
      }
      v52 = *((_QWORD *)v11 + 4);
      v51 = *((_QWORD *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_139;
    v62 = v12 - 2;
    v68 = &v48[16 * v12 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_142;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_145;
    if (__OFADD__(v72, v77))
      goto LABEL_146;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_105:
      if (v78)
        v50 = v62;
      goto LABEL_107;
    }
LABEL_99:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_144;
    if (v84 < v72)
      goto LABEL_15;
LABEL_107:
    v89 = v50 - 1;
    if (v50 - 1 >= v12)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_159;
    v91 = v11;
    v92 = &v48[16 * v89];
    v93 = *(_QWORD *)v92;
    v94 = v48;
    v95 = v50;
    v96 = &v48[16 * v50];
    v97 = *((_QWORD *)v96 + 1);
    v98 = v90;
    sub_3A6F4((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
    if (v1)
      break;
    if (v97 < v93)
      goto LABEL_134;
    if (v95 > *((_QWORD *)v91 + 2))
      goto LABEL_135;
    *(_QWORD *)v92 = v93;
    *(_QWORD *)&v94[16 * v89 + 8] = v97;
    v99 = *((_QWORD *)v91 + 2);
    if (v95 >= v99)
      goto LABEL_136;
    v11 = v91;
    v12 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
    v48 = v94;
    *((_QWORD *)v91 + 2) = v99 - 1;
    v10 = v98;
    v9 = v113;
    if (v99 <= 2)
      goto LABEL_15;
  }
  v100 = v91;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v110[2] = 0;
  return swift_bridgeObjectRelease(v110);
}

uint64_t sub_C2484(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t result;
  char *v23;
  char *v24;
  char *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[16 * v13];
      v23 = v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (char *)(a3 - 16);
        do
        {
          v20 = v19 + 16;
          if (*((double *)v18 - 1) >= *((double *)v6 - 1))
          {
            v23 = v18 - 16;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 16;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 16;
            if (v21 <= v7)
              break;
          }
          v19 -= 16;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      sub_4E5DC(&v25, &v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v23 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (*((double *)v6 + 1) >= *((double *)v15 + 1))
        {
          v4 = v15 + 16;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 16;
          }
        }
        else
        {
          v16 = v6 + 16;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 16;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unint64_t *sub_C270C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t isStackAllocationSafe;
  char v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t *v36;
  void *v37;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  _QWORD v42[9];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  unint64_t v47;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v4 = *(_QWORD *)(a1 + 56);
    v41 = a1 + 56;
    v5 = -1 << *(_BYTE *)(a1 + 32);
    v39 = ~v5;
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & v4;
    v40 = (unint64_t)(63 - v5) >> 6;
    v8 = a2 + 56;
    swift_bridgeObjectRetain(a1);
    v9 = 0;
    while (1)
    {
      if (v7)
      {
        v10 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v11 = v10 | (v9 << 6);
      }
      else
      {
        v12 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_49;
        }
        if (v12 >= v40)
          goto LABEL_47;
        v13 = *(_QWORD *)(v41 + 8 * v12);
        v14 = v9 + 1;
        if (!v13)
        {
          v14 = v9 + 2;
          if (v9 + 2 >= v40)
            goto LABEL_47;
          v13 = *(_QWORD *)(v41 + 8 * v14);
          if (!v13)
          {
            v14 = v9 + 3;
            if (v9 + 3 >= v40)
              goto LABEL_47;
            v13 = *(_QWORD *)(v41 + 8 * v14);
            if (!v13)
            {
              v14 = v9 + 4;
              if (v9 + 4 >= v40)
                goto LABEL_47;
              v13 = *(_QWORD *)(v41 + 8 * v14);
              if (!v13)
              {
                v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_47:
                  sub_41960(a1);
                  return (unint64_t *)v2;
                }
                v13 = *(_QWORD *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    v14 = v15 + 1;
                    if (__OFADD__(v15, 1))
                      break;
                    if (v14 >= v40)
                      goto LABEL_47;
                    v13 = *(_QWORD *)(v41 + 8 * v14);
                    ++v15;
                    if (v13)
                      goto LABEL_24;
                  }
LABEL_49:
                  __break(1u);
                }
                v14 = v9 + 5;
              }
            }
          }
        }
LABEL_24:
        v7 = (v13 - 1) & v13;
        v11 = __clz(__rbit64(v13)) + (v14 << 6);
        v9 = v14;
      }
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
      v18 = *v16;
      v17 = v16[1];
      Hasher.init(_seed:)(v42, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v17);
      String.hash(into:)(v42, v18, v17);
      v19 = Hasher._finalize()();
      v20 = -1 << *(_BYTE *)(v2 + 32);
      v21 = v19 & ~v20;
      if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        break;
LABEL_6:
      swift_bridgeObjectRelease(v17);
    }
    v22 = *(_QWORD *)(v2 + 48);
    v23 = (_QWORD *)(v22 + 16 * v21);
    v24 = v23[1];
    v25 = *v23 == v18 && v24 == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v18, v17, 0) & 1) != 0)
    {
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
    }
    else
    {
      v26 = ~v20;
      do
      {
        v21 = (v21 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
          goto LABEL_6;
        v27 = (_QWORD *)(v22 + 16 * v21);
        v28 = v27[1];
        v29 = *v27 == v18 && v28 == v17;
      }
      while (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v27, v28, v18, v17, 0) & 1) == 0);
      v43 = a1;
      v44 = v41;
      v45 = v39;
      v46 = v9;
      v47 = v7;
      isStackAllocationSafe = swift_bridgeObjectRelease(v17);
    }
    v31 = *(_BYTE *)(v2 + 32);
    v32 = v31 & 0x3F;
    v33 = (1 << v31) + 63;
    v34 = v33 >> 6;
    v35 = 8 * (v33 >> 6);
    if (v32 < 0xE
      || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v33 >> 6), 8), (_DWORD)isStackAllocationSafe))
    {
      __chkstk_darwin(isStackAllocationSafe);
      memcpy((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v35);
      v36 = sub_C2E80((unint64_t *)((char *)&v39 - ((v35 + 15) & 0x3FFFFFFFFFFFFFF0)), v34, v2, v21, &v43);
      swift_release(v2);
      sub_41960(v43);
    }
    else
    {
      v37 = (void *)swift_slowAlloc(v35, -1);
      memcpy(v37, (const void *)(v2 + 56), v35);
      v36 = sub_C2E80((unint64_t *)v37, v34, v2, v21, &v43);
      swift_release(v2);
      sub_41960(v43);
      swift_slowDealloc(v37, -1, -1);
    }
    return v36;
  }
  else
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_C2B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t isStackAllocationSafe;
  char v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  unint64_t *v27;
  void *v28;
  _QWORD v30[2];
  _QWORD v31[9];
  uint64_t v32;
  uint64_t v33;

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
  v32 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a2 + 56;
    v30[0] = a1 + 32;
    swift_bridgeObjectRetain(a1);
    v6 = 0;
    while (1)
    {
      v7 = (uint64_t *)(v30[0] + 16 * v6);
      v9 = *v7;
      v8 = v7[1];
      ++v6;
      Hasher.init(_seed:)(v31, *(_QWORD *)(v2 + 40));
      swift_bridgeObjectRetain(v8);
      String.hash(into:)(v31, v9, v8);
      v10 = Hasher._finalize()();
      v11 = -1 << *(_BYTE *)(v2 + 32);
      v12 = v10 & ~v11;
      if (((*(_QWORD *)(v5 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        v13 = *(_QWORD *)(v2 + 48);
        v14 = (_QWORD *)(v13 + 16 * v12);
        v15 = v14[1];
        v16 = *v14 == v9 && v15 == v8;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, v9, v8, 0) & 1) != 0)
        {
          isStackAllocationSafe = swift_bridgeObjectRelease(v8);
          v33 = v6;
LABEL_19:
          v22 = *(_BYTE *)(v2 + 32);
          v23 = v22 & 0x3F;
          v24 = (1 << v22) + 63;
          v25 = v24 >> 6;
          v26 = 8 * (v24 >> 6);
          if (v23 < 0xE
            || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v24 >> 6), 8),
                (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)v30 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v26);
            v27 = sub_C3174((_QWORD *)((char *)v30 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0)), v25, v2, v12, &v32);
            swift_release(v2);
            swift_bridgeObjectRelease(v32);
          }
          else
          {
            v28 = (void *)swift_slowAlloc(v26, -1);
            memcpy(v28, (const void *)(v2 + 56), v26);
            v27 = sub_C3174((unint64_t *)v28, v25, v2, v12, &v32);
            swift_release(v2);
            swift_bridgeObjectRelease(v32);
            swift_slowDealloc(v28, -1, -1);
          }
          return v27;
        }
        v17 = ~v11;
        while (1)
        {
          v12 = (v12 + 1) & v17;
          if (((*(_QWORD *)(v5 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
            break;
          v18 = (_QWORD *)(v13 + 16 * v12);
          v19 = v18[1];
          v20 = *v18 == v9 && v19 == v8;
          if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, v9, v8, 0) & 1) != 0)
          {
            v33 = v6;
            isStackAllocationSafe = swift_bridgeObjectRelease(v8);
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease(v8);
      if (v6 == v4)
      {
        swift_bridgeObjectRelease(a1);
        return (unint64_t *)v2;
      }
    }
  }
  return (unint64_t *)v2;
}

unint64_t *sub_C2E80(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t i;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  int64_t v38;
  uint64_t v40;
  unint64_t *v41;
  _QWORD v42[9];
  uint64_t v43;

  v7 = *(_QWORD *)(a3 + 16);
  v41 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v43 = a3 + 56;
  while (2)
  {
    v40 = v8;
    do
    {
      while (1)
      {
        v9 = a5[3];
        v10 = a5[4];
        if (v10)
        {
          v11 = (v10 - 1) & v10;
          v12 = __clz(__rbit64(v10)) | (v9 << 6);
          goto LABEL_16;
        }
        v13 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          goto LABEL_47;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        v15 = a5[3];
        if (v13 >= v14)
          goto LABEL_45;
        v16 = a5[1];
        v17 = *(_QWORD *)(v16 + 8 * v13);
        if (!v17)
        {
          v18 = v9 + 2;
          v15 = v9 + 1;
          if (v9 + 2 >= v14)
            goto LABEL_45;
          v17 = *(_QWORD *)(v16 + 8 * v18);
          if (!v17)
          {
            v15 = v9 + 2;
            if (v9 + 3 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * (v9 + 3));
            if (v17)
            {
              v13 = v9 + 3;
              goto LABEL_15;
            }
            v18 = v9 + 4;
            v15 = v9 + 3;
            if (v9 + 4 >= v14)
              goto LABEL_45;
            v17 = *(_QWORD *)(v16 + 8 * v18);
            if (!v17)
            {
              v13 = v9 + 5;
              v15 = v9 + 4;
              if (v9 + 5 >= v14)
                goto LABEL_45;
              v17 = *(_QWORD *)(v16 + 8 * v13);
              if (!v17)
              {
                v15 = v14 - 1;
                v38 = v9 + 6;
                while (v14 != v38)
                {
                  v17 = *(_QWORD *)(v16 + 8 * v38++);
                  if (v17)
                  {
                    v13 = v38 - 1;
                    goto LABEL_15;
                  }
                }
LABEL_45:
                a5[3] = v15;
                a5[4] = 0;
                swift_retain(a3);
                return (unint64_t *)sub_C339C(v41, a2, v40, a3);
              }
              goto LABEL_15;
            }
          }
          v13 = v18;
        }
LABEL_15:
        v11 = (v17 - 1) & v17;
        v12 = __clz(__rbit64(v17)) + (v13 << 6);
        v9 = v13;
LABEL_16:
        v19 = (uint64_t *)(*(_QWORD *)(*a5 + 48) + 16 * v12);
        v21 = *v19;
        v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)(v42, *(_QWORD *)(a3 + 40));
        swift_bridgeObjectRetain(v20);
        String.hash(into:)(v42, v21, v20);
        v22 = Hasher._finalize()();
        v23 = -1 << *(_BYTE *)(a3 + 32);
        v24 = v22 & ~v23;
        v25 = v24 >> 6;
        v26 = 1 << v24;
        if (((1 << v24) & *(_QWORD *)(v43 + 8 * (v24 >> 6))) == 0)
          goto LABEL_3;
        v27 = *(_QWORD *)(a3 + 48);
        v28 = (_QWORD *)(v27 + 16 * v24);
        v29 = v28[1];
        v30 = *v28 == v21 && v29 == v20;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v21, v20, 0) & 1) != 0)
          break;
        v32 = ~v23;
        for (i = v24 + 1; ; i = v34 + 1)
        {
          v34 = i & v32;
          if (((*(_QWORD *)(v43 + (((i & v32) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v32)) & 1) == 0)
            break;
          v35 = (_QWORD *)(v27 + 16 * v34);
          v36 = v35[1];
          v37 = *v35 == v21 && v36 == v20;
          if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v35, v36, v21, v20, 0) & 1) != 0)
          {
            result = (unint64_t *)swift_bridgeObjectRelease(v20);
            v25 = v34 >> 6;
            v26 = 1 << v34;
            goto LABEL_23;
          }
        }
LABEL_3:
        result = (unint64_t *)swift_bridgeObjectRelease(v20);
      }
      result = (unint64_t *)swift_bridgeObjectRelease(v20);
LABEL_23:
      v31 = v41[v25];
      v41[v25] = v31 & ~v26;
    }
    while ((v26 & v31) == 0);
    v8 = v40 - 1;
    if (__OFSUB__(v40, 1))
    {
LABEL_47:
      __break(1u);
      return result;
    }
    if (v40 != 1)
      continue;
    return (unint64_t *)&_swiftEmptySetSingleton;
  }
}

unint64_t *sub_C3174(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t i;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  unint64_t *v32;
  uint64_t v33;
  _QWORD v34[9];
  uint64_t v35;

  v6 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v32 = result;
  v33 = v6 - 1;
  v8 = *a5;
  v7 = a5[1];
  v9 = *(_QWORD *)(*a5 + 16);
  if (v7 == v9)
  {
LABEL_2:
    swift_retain(a3);
    return (unint64_t *)sub_C3630(v32, a2, v33, a3);
  }
  v35 = a3 + 56;
  while ((v7 & 0x8000000000000000) == 0)
  {
    if (v7 >= v9)
      goto LABEL_29;
    v11 = v8 + 16 * v7;
    v13 = *(_QWORD *)(v11 + 32);
    v12 = *(_QWORD *)(v11 + 40);
    a5[1] = v7 + 1;
    Hasher.init(_seed:)(v34, *(_QWORD *)(a3 + 40));
    swift_bridgeObjectRetain(v12);
    String.hash(into:)(v34, v13, v12);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    v18 = 1 << v16;
    if (((1 << v16) & *(_QWORD *)(v35 + 8 * (v16 >> 6))) == 0)
      goto LABEL_4;
    v19 = *(_QWORD *)(a3 + 48);
    v20 = (_QWORD *)(v19 + 16 * v16);
    v21 = v20[1];
    v22 = *v20 == v13 && v21 == v12;
    if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v13, v12, 0) & 1) == 0)
    {
      v25 = ~v15;
      for (i = v16 + 1; ; i = v27 + 1)
      {
        v27 = i & v25;
        if (((*(_QWORD *)(v35 + (((i & v25) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v25)) & 1) == 0)
          break;
        v28 = (_QWORD *)(v19 + 16 * v27);
        v29 = v28[1];
        v30 = *v28 == v13 && v29 == v12;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, v13, v12, 0) & 1) != 0)
        {
          result = (unint64_t *)swift_bridgeObjectRelease(v12);
          v17 = v27 >> 6;
          v18 = 1 << v27;
          goto LABEL_15;
        }
      }
LABEL_4:
      result = (unint64_t *)swift_bridgeObjectRelease(v12);
      goto LABEL_5;
    }
    result = (unint64_t *)swift_bridgeObjectRelease(v12);
LABEL_15:
    v23 = v32[v17];
    v32[v17] = v23 & ~v18;
    if ((v18 & v23) != 0)
    {
      v24 = v33 - 1;
      if (__OFSUB__(v33, 1))
        goto LABEL_30;
      --v33;
      if (!v24)
        return (unint64_t *)&_swiftEmptySetSingleton;
    }
LABEL_5:
    v8 = *a5;
    v7 = a5[1];
    v9 = *(_QWORD *)(*a5 + 16);
    if (v7 == v9)
      goto LABEL_2;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_C339C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_5EDC(&qword_1F2D78);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_C3630(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_5EDC(&qword_1F3AF0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_QWORD *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32, v8[5]);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << *((_BYTE *)v8 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(v8[6] + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++v8[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_C38C4(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[377];
  _BYTE __src[384];
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[9];
  _OWORD __dst[35];

  v4 = a4;
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_5EDC(&qword_1F3AE0);
  result = static _SetStorage.allocate(capacity:)(a3);
  v6 = result;
  if (a2 < 1)
    v8 = 0;
  else
    v8 = *a1;
  v9 = 0;
  v36 = v4;
  v10 = result + 56;
  v37 = result;
  v49 = a3;
  if (!v8)
    goto LABEL_10;
LABEL_9:
  v46 = (v8 - 1) & v8;
  v47 = v9;
  for (i = __clz(__rbit64(v8)) | (v9 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    memcpy(__dst, (const void *)(*(_QWORD *)(v4 + 48) + 552 * i), 0x221uLL);
    Hasher.init(_seed:)(v60, *(_QWORD *)(v6 + 40));
    v16 = BYTE8(__dst[0]);
    v17 = *(_QWORD *)&__dst[2];
    v18 = BYTE8(__dst[2]);
    v19 = *(_QWORD *)&__dst[3];
    v20 = BYTE8(__dst[3]);
    v21 = *(_QWORD *)&__dst[4];
    v22 = BYTE8(__dst[4]);
    v44 = *((_QWORD *)&__dst[5] + 1);
    v45 = *(_QWORD *)&__dst[5];
    v42 = *((_QWORD *)&__dst[6] + 1);
    v43 = *(_QWORD *)&__dst[6];
    v40 = *((_QWORD *)&__dst[7] + 1);
    v41 = *(_QWORD *)&__dst[7];
    v23 = *(_QWORD *)&__dst[8];
    v38 = *(_QWORD *)&__dst[9];
    v39 = *((_QWORD *)&__dst[8] + 1);
    v48 = __dst[1];
    Hasher._combine(_:)(*(Swift::UInt64 *)&__dst[0]);
    LOBYTE(v52) = v16;
    v53 = v48;
    v54 = v17;
    LOBYTE(v55) = v18;
    v56 = v19;
    LOBYTE(v57) = v20;
    v58 = v21;
    LOBYTE(v59) = v22;
    sub_6100(__dst);
    Book.Metadata.hash(into:)((uint64_t)v60);
    if (v23 >> 1 == 0xFFFFFFFF)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v52 = v45;
      *(_QWORD *)&v53 = v44;
      *((_QWORD *)&v53 + 1) = v43;
      v54 = v42;
      v55 = v41;
      v56 = v40;
      v57 = v23;
      v58 = v39;
      v59 = v38;
      Hasher._combine(_:)(1u);
      InternalAffinitySource.hash(into:)();
    }
    sub_41300((uint64_t)&__dst[9] + 8, (uint64_t)&v52, &qword_1F2D68);
    v4 = v36;
    if (sub_8E6A0((uint64_t)&v52) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      sub_41300((uint64_t)&__dst[9] + 8, (uint64_t)__src, &qword_1F2D68);
      memcpy(v50, __src, sizeof(v50));
      Hasher._combine(_:)(1u);
      BookHistory.hash(into:)();
    }
    v24 = *((_QWORD *)&__dst[33] + 1);
    v25 = LOBYTE(__dst[34]);
    swift_bridgeObjectRetain(*((_QWORD *)&__dst[33] + 1));
    sub_FDDF0((uint64_t)v60, v24);
    swift_bridgeObjectRelease(v24);
    if (v25 == 12)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      __src[0] = v25;
      Hasher._combine(_:)(1u);
      PositiveAffinitySource.hash(into:)((uint64_t)v60);
    }
    result = Hasher._finalize()();
    v6 = v37;
    v26 = -1 << *(_BYTE *)(v37 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v10 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_49;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v10 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v10 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v37 + 48) + 552 * v29), __dst, 0x221uLL);
    ++*(_QWORD *)(v37 + 16);
    if (__OFSUB__(v49, 1))
    {
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
    if (v49 == 1)
    {
LABEL_47:
      swift_release(v4);
      return v6;
    }
    v8 = v46;
    v9 = v47;
    --v49;
    if (v46)
      goto LABEL_9;
LABEL_10:
    v12 = v9 + 1;
    if (__OFADD__(v9, 1))
      goto LABEL_50;
    if (v12 >= a2)
      goto LABEL_47;
    v13 = a1[v12];
    v14 = v9 + 1;
    if (!v13)
    {
      v14 = v9 + 2;
      if (v9 + 2 >= a2)
        goto LABEL_47;
      v13 = a1[v14];
      if (!v13)
      {
        v14 = v9 + 3;
        if (v9 + 3 >= a2)
          goto LABEL_47;
        v13 = a1[v14];
        if (!v13)
          break;
      }
    }
LABEL_23:
    v46 = (v13 - 1) & v13;
    v47 = v14;
  }
  v15 = v9 + 4;
  if (v9 + 4 >= a2)
    goto LABEL_47;
  v13 = a1[v15];
  if (v13)
  {
    v14 = v9 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= a2)
      goto LABEL_47;
    v13 = a1[v14];
    ++v15;
    if (v13)
      goto LABEL_23;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_C3D90(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (uint64_t)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_5EDC(&qword_1F2D30);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = a1[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = a1[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = a1[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = static Hasher._hash(seed:_:)(v9[5], v18);
    v19 = -1 << *((_BYTE *)v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(v9[6] + 8 * v22) = v18;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = a1[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = a1[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_C3FD4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(result);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v16 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v16 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      v8 = v16 + 1;
      if (v16 + 1 >= v7)
        return swift_release(v2);
      v17 = *(_QWORD *)(v3 + 8 * v8);
      if (!v17)
      {
        v8 = v16 + 2;
        if (v16 + 2 >= v7)
          return swift_release(v2);
        v17 = *(_QWORD *)(v3 + 8 * v8);
        if (!v17)
        {
          v8 = v16 + 3;
          if (v16 + 3 >= v7)
            return swift_release(v2);
          v17 = *(_QWORD *)(v3 + 8 * v8);
          if (!v17)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v17 - 1) & v17;
    v10 = __clz(__rbit64(v17)) + (v8 << 6);
LABEL_6:
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_C42C8(v12, v13);
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    result = swift_bridgeObjectRelease(v15);
  }
  v18 = v16 + 4;
  if (v18 >= v7)
    return swift_release(v2);
  v17 = *(_QWORD *)(v3 + 8 * v18);
  if (v17)
  {
    v8 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v8 >= v7)
      return swift_release(v2);
    v17 = *(_QWORD *)(v3 + 8 * v8);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_C4168(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain(result);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release(v2);
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release(v2);
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release(v2);
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release(v2);
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    result = sub_C4454(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release(v2);
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release(v2);
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_C42C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_167E80();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_C455C(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_C4454(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = *v2;
  v5 = static Hasher._hash(seed:_:)(*(_QWORD *)(*v2 + 40), a1);
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v8 + 8 * v7) != a1)
  {
    v9 = ~v6;
    do
    {
      v7 = (v7 + 1) & v9;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v8 + 8 * v7) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v11 = *v2;
  v15 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_168030();
    v11 = v15;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v11 + 48) + 8 * v7);
  sub_C4720(v7);
  v13 = *v2;
  *v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

unint64_t sub_C455C(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_C4720(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_C48A4(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  v4 = isStackAllocationSafe;
  v5 = *(_BYTE *)(isStackAllocationSafe + 32);
  v6 = v5 & 0x3F;
  v7 = (1 << v5) + 63;
  v8 = v7 >> 6;
  v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = sub_C7AA0((uint64_t)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v4, a2);
    if (v2)
      swift_willThrow(v10);
    else
      v4 = v10;
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v9, -1);
    bzero(v11, v9);
    v4 = sub_C7AA0((uint64_t)v11, v8, v4, a2);
    swift_slowDealloc(v11, -1, -1);
    swift_bridgeObjectRelease(a2);
  }
  return v4;
}

void sub_C4A20(double a1, double a2)
{
  Swift::UInt64 v3;
  Swift::UInt64 v4;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = *(_QWORD *)&a1;
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v4 = *(_QWORD *)&a2;
  else
    v4 = 0;
  Hasher._combine(_:)(v4);
}

uint64_t sub_C4A68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  _UNKNOWN **v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  char *v15;
  Swift::UInt v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  int64_t v24;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;

  v23 = a1 + 56;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  if (v1 < 64)
    v2 = ~(-1 << v1);
  else
    v2 = -1;
  v3 = v2 & *(_QWORD *)(a1 + 56);
  v24 = (unint64_t)(v1 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v5 = 0;
  v6 = &_swiftEmptySetSingleton;
  while (1)
  {
    if (v3)
    {
      v7 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      v8 = v7 | (v5 << 6);
      goto LABEL_27;
    }
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v9 >= v24)
      goto LABEL_38;
    v10 = *(_QWORD *)(v23 + 8 * v9);
    ++v5;
    if (!v10)
    {
      v5 = v9 + 1;
      if (v9 + 1 >= v24)
        goto LABEL_38;
      v10 = *(_QWORD *)(v23 + 8 * v5);
      if (!v10)
      {
        v5 = v9 + 2;
        if (v9 + 2 >= v24)
          goto LABEL_38;
        v10 = *(_QWORD *)(v23 + 8 * v5);
        if (!v10)
        {
          v5 = v9 + 3;
          if (v9 + 3 >= v24)
            goto LABEL_38;
          v10 = *(_QWORD *)(v23 + 8 * v5);
          if (!v10)
          {
            v5 = v9 + 4;
            if (v9 + 4 >= v24)
              goto LABEL_38;
            v10 = *(_QWORD *)(v23 + 8 * v5);
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_26:
    v3 = (v10 - 1) & v10;
    v8 = __clz(__rbit64(v10)) + (v5 << 6);
LABEL_27:
    LOBYTE(v28) = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v8);
    v12 = sub_B91C8();
    v13 = (unsigned __int8 *)v12[2];
    if (v13)
    {
      v26 = v3;
      swift_bridgeObjectRetain(v6);
      v14 = 0;
      v27 = v6;
      v15 = (char *)(v6 + 7);
      while (1)
      {
        v16 = (v14++)[(_QWORD)(v12 + 4)];
        Hasher.init(_seed:)(&v28, v6[5]);
        Hasher._combine(_:)(v16);
        v17 = Hasher._finalize()();
        v18 = -1 << *((_BYTE *)v6 + 32);
        v19 = v17 & ~v18;
        if (((*(_QWORD *)&v15[(v19 >> 3) & 0xFFFFFFFFFFFFF8] >> v19) & 1) == 0)
          goto LABEL_36;
        v20 = v6[6];
        if (*(unsigned __int8 *)(v20 + v19) == (_DWORD)v16)
        {
LABEL_29:
          if (v14 == v13)
            goto LABEL_5;
        }
        else
        {
          v21 = ~v18;
          while (1)
          {
            v19 = (v19 + 1) & v21;
            if (((*(_QWORD *)&v15[(v19 >> 3) & 0xFFFFFFFFFFFFF8] >> v19) & 1) == 0)
              break;
            if (*(unsigned __int8 *)(v20 + v19) == (_DWORD)v16)
              goto LABEL_29;
          }
LABEL_36:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
          v28 = v6;
          sub_166740(v16, v19, isUniquelyReferenced_nonNull_native);
          v6 = v28;
          swift_bridgeObjectRelease(0x8000000000000000);
          if (v14 == v13)
          {
LABEL_5:
            swift_bridgeObjectRelease(v27);
            v3 = v26;
            break;
          }
          v15 = (char *)(v6 + 7);
        }
      }
    }
    result = swift_bridgeObjectRelease(v12);
  }
  v11 = v9 + 5;
  if (v11 >= v24)
  {
LABEL_38:
    swift_release(a1);
    return (uint64_t)v6;
  }
  v10 = *(_QWORD *)(v23 + 8 * v11);
  if (v10)
  {
    v5 = v11;
    goto LABEL_26;
  }
  while (1)
  {
    v5 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v5 >= v24)
      goto LABEL_38;
    v10 = *(_QWORD *)(v23 + 8 * v5);
    ++v11;
    if (v10)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

BOOL _s20BooksPersonalization11BookHistoryV18CollectionAdditionO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    return (*(_BYTE *)(a2 + 32) & 1) == 0 && v2 == v3;
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
    return 0;
  if (v2 != v3 || *(double *)(a1 + 8) != *(double *)(a2 + 8))
    return 0;
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
}

uint64_t _s20BooksPersonalization11BookHistoryV18MarkedFinishedInfoV2eeoiySbAE_AEtFZ_0(double *a1, double *a2)
{
  double v2;
  double v3;
  BOOL v4;
  BOOL v5;

  if (*(unsigned __int8 *)a1 == *(unsigned __int8 *)a2)
  {
    v2 = a1[1];
    v3 = a2[1];
    if (((_BYTE)a1[5] & 1) != 0)
    {
      if (((_BYTE)a2[5] & 1) != 0)
      {
        v4 = v2 == v3 && a1[2] == a2[2];
        v5 = v4 && *((_QWORD *)a1 + 3) == *((_QWORD *)a2 + 3);
        if (v5 && *((_QWORD *)a1 + 4) == *((_QWORD *)a2 + 4))
          return 1;
      }
    }
    else if (((_BYTE)a2[5] & 1) == 0 && v2 == v3)
    {
      return 1;
    }
  }
  return 0;
}

BOOL _s20BooksPersonalization11BookHistoryV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  double v8;
  char v9;
  double v10;
  char v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  char v22;
  char v23;
  double v24;
  int v25;
  double v26;
  int v27;
  _BOOL8 result;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  double v49;
  double v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  double v55;
  int v56;
  int v57;
  char v58;
  int v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(double *)(a1 + 48);
  v3 = *(double *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v6 = *(unsigned __int8 *)(a1 + 80);
  v8 = *(double *)(a1 + 88);
  v7 = *(double *)(a1 + 96);
  v9 = *(_BYTE *)(a1 + 104);
  v10 = *(double *)(a1 + 112);
  v11 = *(_BYTE *)(a1 + 120);
  v12 = *(double *)(a1 + 128);
  v13 = *(double *)(a1 + 144);
  v63 = *(_BYTE *)(a1 + 152);
  v64 = *(_BYTE *)(a1 + 136);
  v14 = *(double *)(a1 + 160);
  v15 = *(double *)(a1 + 176);
  v61 = *(_BYTE *)(a1 + 184);
  v62 = *(_BYTE *)(a1 + 168);
  v16 = *(double *)(a1 + 192);
  v55 = *(double *)(a1 + 208);
  v17 = *(double *)(a1 + 216);
  v54 = *(_QWORD *)(a1 + 224);
  v52 = *(_QWORD *)(a1 + 232);
  v59 = *(unsigned __int8 *)(a1 + 240);
  v60 = *(_BYTE *)(a1 + 200);
  v18 = *(double *)(a1 + 248);
  v58 = *(_BYTE *)(a1 + 256);
  v50 = *(double *)(a1 + 264);
  v19 = *(double *)(a1 + 272);
  v47 = *(_QWORD *)(a1 + 280);
  v46 = *(_QWORD *)(a1 + 288);
  v20 = *(double *)(a1 + 304);
  v53 = *(_BYTE *)(a1 + 312);
  v21 = *(double *)(a1 + 320);
  v51 = *(_BYTE *)(a1 + 328);
  v48 = *(_BYTE *)(a1 + 344);
  v45 = *(_BYTE *)(a1 + 360);
  v43 = *(_BYTE *)(a1 + 376);
  v57 = *(unsigned __int8 *)(a1 + 296);
  v44 = *(_QWORD *)(a1 + 336);
  v42 = *(_QWORD *)(a1 + 352);
  v41 = *(_QWORD *)(a1 + 368);
  v22 = *(_BYTE *)(a2 + 16);
  v23 = *(_BYTE *)(a2 + 32);
  v24 = *(double *)(a2 + 48);
  v25 = *(unsigned __int8 *)(a2 + 80);
  v26 = *(double *)(a2 + 208);
  v27 = *(unsigned __int8 *)(a2 + 240);
  v49 = *(double *)(a2 + 264);
  v56 = *(unsigned __int8 *)(a2 + 296);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v22 = 1;
    if ((v22 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 32))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 24) != *(double *)(a2 + 24))
      v23 = 1;
    if ((v23 & 1) != 0)
      return 0;
  }
  if (v6 == 255)
  {
    if (v25 != 255)
      return 0;
  }
  else
  {
    if (v25 == 255 || *(_QWORD *)(a2 + 40) != *(_QWORD *)(a1 + 40))
      return 0;
    if ((v6 & 1) != 0)
    {
      if ((v25 & 1) == 0)
        return 0;
      result = 0;
      if (v2 != v24 || v3 != *(double *)(a2 + 56) || v5 != *(_QWORD *)(a2 + 64) || v4 != *(_QWORD *)(a2 + 72))
        return result;
    }
    else if ((v25 & 1) != 0 || v2 != v24)
    {
      return 0;
    }
  }
  if ((v9 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 104))
      return 0;
  }
  else
  {
    result = 0;
    if ((*(_BYTE *)(a2 + 104) & 1) != 0 || v8 != *(double *)(a2 + 88) || v7 != *(double *)(a2 + 96))
      return result;
  }
  if ((v11 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 120))
      return 0;
  }
  else
  {
    if (v10 == *(double *)(a2 + 112))
      v29 = *(_BYTE *)(a2 + 120);
    else
      v29 = 1;
    if ((v29 & 1) != 0)
      return 0;
  }
  if ((v64 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 136))
      return 0;
  }
  else
  {
    if (v12 == *(double *)(a2 + 128))
      v30 = *(_BYTE *)(a2 + 136);
    else
      v30 = 1;
    if ((v30 & 1) != 0)
      return 0;
  }
  if ((v63 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 152))
      return 0;
  }
  else
  {
    if (v13 == *(double *)(a2 + 144))
      v31 = *(_BYTE *)(a2 + 152);
    else
      v31 = 1;
    if ((v31 & 1) != 0)
      return 0;
  }
  if ((v62 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 168))
      return 0;
  }
  else
  {
    if (v14 == *(double *)(a2 + 160))
      v32 = *(_BYTE *)(a2 + 168);
    else
      v32 = 1;
    if ((v32 & 1) != 0)
      return 0;
  }
  if ((v61 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 184))
      return 0;
  }
  else
  {
    if (v15 == *(double *)(a2 + 176))
      v33 = *(_BYTE *)(a2 + 184);
    else
      v33 = 1;
    if ((v33 & 1) != 0)
      return 0;
  }
  if ((v60 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 200))
      return 0;
  }
  else
  {
    if (v16 == *(double *)(a2 + 192))
      v34 = *(_BYTE *)(a2 + 200);
    else
      v34 = 1;
    if ((v34 & 1) != 0)
      return 0;
  }
  if (v59 == 255)
  {
    if (v27 != 255)
      return 0;
  }
  else
  {
    if (v27 == 255)
      return 0;
    if ((v59 & 1) != 0)
    {
      if ((v27 & 1) == 0)
        return 0;
      result = 0;
      if (v55 != v26 || v17 != *(double *)(a2 + 216) || v54 != *(_QWORD *)(a2 + 224) || v52 != *(_QWORD *)(a2 + 232))
        return result;
    }
    else if ((v27 & 1) != 0 || v55 != v26)
    {
      return 0;
    }
  }
  if ((v58 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 256))
      return 0;
  }
  else
  {
    v35 = *(_BYTE *)(a2 + 256);
    if (v18 != *(double *)(a2 + 248))
      v35 = 1;
    if ((v35 & 1) != 0)
      return 0;
  }
  if (v57 == 255)
  {
    if (v56 != 255)
      return 0;
    goto LABEL_93;
  }
  if (v56 == 255)
    return 0;
  if ((v57 & 1) == 0)
  {
    if ((v56 & 1) != 0 || v50 != v49)
      return 0;
LABEL_93:
    if ((v53 & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 312))
        return 0;
    }
    else
    {
      v36 = *(_BYTE *)(a2 + 312);
      if (v20 != *(double *)(a2 + 304))
        v36 = 1;
      if ((v36 & 1) != 0)
        return 0;
    }
    if ((v51 & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 328))
        return 0;
    }
    else
    {
      v37 = *(_BYTE *)(a2 + 328);
      if (v21 != *(double *)(a2 + 320))
        v37 = 1;
      if ((v37 & 1) != 0)
        return 0;
    }
    if ((v48 & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 344))
        return 0;
    }
    else
    {
      v38 = *(_BYTE *)(a2 + 344);
      if (v44 != *(_QWORD *)(a2 + 336))
        v38 = 1;
      if ((v38 & 1) != 0)
        return 0;
    }
    if ((v45 & 1) != 0)
    {
      if (!*(_BYTE *)(a2 + 360))
        return 0;
    }
    else
    {
      v39 = *(_BYTE *)(a2 + 360);
      if (v42 != *(_QWORD *)(a2 + 352))
        v39 = 1;
      if ((v39 & 1) != 0)
        return 0;
    }
    if ((v43 & 1) == 0)
    {
      v40 = *(_BYTE *)(a2 + 376);
      if (v41 != *(_QWORD *)(a2 + 368))
        v40 = 1;
      return (v40 & 1) == 0;
    }
    return (*(_BYTE *)(a2 + 376) & 1) != 0;
  }
  if ((v56 & 1) == 0)
    return 0;
  result = 0;
  if (v50 == v49 && v19 == *(double *)(a2 + 272) && v47 == *(_QWORD *)(a2 + 280) && v46 == *(_QWORD *)(a2 + 288))
    goto LABEL_93;
  return result;
}

void sub_C53C8(uint64_t a1, const void *a2)
{
  int64_t v2;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  double v16;
  unint64_t v17;
  unint64_t v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  int v26;
  uint64_t v27;
  _BYTE v29[363];
  _BYTE __dst[377];
  _QWORD *v31;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v31 = _swiftEmptyArrayStorage;
    sub_340D0(0, v2, 0);
    v4 = _swiftEmptyArrayStorage;
    v6 = sub_DF71C(a1);
    v7 = 0;
    v8 = a1 + 64;
    v9 = *(_BYTE *)(a1 + 32);
    v25 = v2;
    v26 = v5;
    v27 = a1 + 64;
    while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
    {
      v12 = (unint64_t)v6 >> 6;
      if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
        goto LABEL_26;
      if (*(_DWORD *)(a1 + 36) != v5)
        goto LABEL_27;
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v6);
      memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 56) + 384 * v6), sizeof(__dst));
      memcpy(v29, a2, sizeof(v29));
      sub_11A778();
      if ((v15 & 1) != 0)
        v16 = INFINITY;
      else
        v16 = v14;
      v31 = v4;
      v17 = v4[2];
      v18 = v4[3];
      if (v17 >= v18 >> 1)
      {
        sub_340D0(v18 > 1, v17 + 1, 1);
        v4 = v31;
      }
      v4[2] = v17 + 1;
      v19 = (double *)&v4[2 * v17];
      *((_QWORD *)v19 + 4) = v13;
      v19[5] = v16;
      v9 = *(_BYTE *)(a1 + 32);
      v10 = 1 << v9;
      if (v6 >= 1 << v9)
        goto LABEL_28;
      v8 = a1 + 64;
      v20 = *(_QWORD *)(v27 + 8 * v12);
      if ((v20 & (1 << v6)) == 0)
        goto LABEL_29;
      v5 = v26;
      if (*(_DWORD *)(a1 + 36) != v26)
        goto LABEL_30;
      v21 = v20 & (-2 << (v6 & 0x3F));
      if (v21)
      {
        v10 = __clz(__rbit64(v21)) | v6 & 0xFFFFFFFFFFFFFFC0;
        v11 = v25;
      }
      else
      {
        v22 = v12 + 1;
        v23 = (v10 + 63) >> 6;
        v11 = v25;
        if (v12 + 1 < v23)
        {
          v24 = *(_QWORD *)(v27 + 8 * v22);
          if (v24)
          {
LABEL_23:
            v10 = __clz(__rbit64(v24)) + (v22 << 6);
          }
          else
          {
            while (v23 - 2 != v12)
            {
              v24 = *(_QWORD *)(a1 + 80 + 8 * v12++);
              if (v24)
              {
                v22 = v12 + 1;
                goto LABEL_23;
              }
            }
          }
        }
      }
      ++v7;
      v6 = v10;
      if (v7 == v11)
        return;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
  }
}

unint64_t sub_C561C()
{
  unint64_t result;

  result = qword_1F34F0;
  if (!qword_1F34F0)
  {
    result = swift_getWitnessTable(&unk_194A3C, &type metadata for BookHistory.CollectionAddition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F34F0);
  }
  return result;
}

unint64_t sub_C5660()
{
  unint64_t result;

  result = qword_1F34F8;
  if (!qword_1F34F8)
  {
    result = swift_getWitnessTable(&unk_1949EC, &type metadata for BookHistory.CollectionAddition.AddedInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F34F8);
  }
  return result;
}

unint64_t sub_C56A4()
{
  unint64_t result;

  result = qword_1F3510;
  if (!qword_1F3510)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionMembershipInfo, &type metadata for CollectionMembershipInfo);
    atomic_store(result, (unint64_t *)&qword_1F3510);
  }
  return result;
}

unint64_t sub_C56E8()
{
  unint64_t result;

  result = qword_1F3518;
  if (!qword_1F3518)
  {
    result = swift_getWitnessTable(&unk_19499C, &type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3518);
  }
  return result;
}

uint64_t sub_C572C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_5F68(&qword_1F3500);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_C578C()
{
  unint64_t result;

  result = qword_1F3540;
  if (!qword_1F3540)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionMembershipInfo, &type metadata for CollectionMembershipInfo);
    atomic_store(result, (unint64_t *)&qword_1F3540);
  }
  return result;
}

unint64_t sub_C57D0()
{
  unint64_t result;

  result = qword_1F3550;
  if (!qword_1F3550)
  {
    result = swift_getWitnessTable(&unk_19494C, &type metadata for BookHistory.MarkedFinishedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3550);
  }
  return result;
}

unint64_t sub_C5814()
{
  unint64_t result;

  result = qword_1F3558;
  if (!qword_1F3558)
  {
    result = swift_getWitnessTable(&unk_194924, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism);
    atomic_store(result, (unint64_t *)&qword_1F3558);
  }
  return result;
}

unint64_t sub_C5858()
{
  unint64_t result;

  result = qword_1F3560;
  if (!qword_1F3560)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory.CollectionAddition, &type metadata for BookHistory.CollectionAddition);
    atomic_store(result, (unint64_t *)&qword_1F3560);
  }
  return result;
}

unint64_t sub_C589C()
{
  unint64_t result;

  result = qword_1F3570;
  if (!qword_1F3570)
  {
    result = swift_getWitnessTable(&unk_1948FC, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism);
    atomic_store(result, (unint64_t *)&qword_1F3570);
  }
  return result;
}

unint64_t sub_C58E0()
{
  unint64_t result;

  result = qword_1F3578;
  if (!qword_1F3578)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory.CollectionAddition, &type metadata for BookHistory.CollectionAddition);
    atomic_store(result, (unint64_t *)&qword_1F3578);
  }
  return result;
}

unint64_t sub_C5924()
{
  unint64_t result;

  result = qword_1F3618;
  if (!qword_1F3618)
  {
    result = swift_getWitnessTable(&unk_1948AC, &type metadata for BookHistory.Feature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3618);
  }
  return result;
}

unint64_t sub_C5968()
{
  unint64_t result;

  result = qword_1F3620;
  if (!qword_1F3620)
  {
    result = swift_getWitnessTable(&unk_19485C, &type metadata for BookHistory.Feature.DaysRecommendationPassedOverCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3620);
  }
  return result;
}

unint64_t sub_C59AC()
{
  unint64_t result;

  result = qword_1F3628;
  if (!qword_1F3628)
  {
    result = swift_getWitnessTable(&unk_19480C, &type metadata for BookHistory.Feature.ConsecutiveDaysNotRecommendedCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3628);
  }
  return result;
}

unint64_t sub_C59F0()
{
  unint64_t result;

  result = qword_1F3630;
  if (!qword_1F3630)
  {
    result = swift_getWitnessTable(&unk_1947BC, &type metadata for BookHistory.Feature.DaysRecommendedCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3630);
  }
  return result;
}

unint64_t sub_C5A34()
{
  unint64_t result;

  result = qword_1F3638;
  if (!qword_1F3638)
  {
    result = swift_getWitnessTable(&unk_19476C, &type metadata for BookHistory.Feature.SecondsSinceFirstRecommendedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3638);
  }
  return result;
}

unint64_t sub_C5A78()
{
  unint64_t result;

  result = qword_1F3640;
  if (!qword_1F3640)
  {
    result = swift_getWitnessTable(&unk_19471C, &type metadata for BookHistory.Feature.SecondsSinceProductPageViewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3640);
  }
  return result;
}

unint64_t sub_C5ABC()
{
  unint64_t result;

  result = qword_1F3648;
  if (!qword_1F3648)
  {
    result = swift_getWitnessTable(&unk_1946CC, &type metadata for BookHistory.Feature.SecondsSinceSampledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3648);
  }
  return result;
}

unint64_t sub_C5B00()
{
  unint64_t result;

  result = qword_1F3650;
  if (!qword_1F3650)
  {
    result = swift_getWitnessTable(&unk_19467C, &type metadata for BookHistory.Feature.SecondsSinceRemovedFromWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3650);
  }
  return result;
}

unint64_t sub_C5B44()
{
  unint64_t result;

  result = qword_1F3658;
  if (!qword_1F3658)
  {
    result = swift_getWitnessTable(&unk_19462C, &type metadata for BookHistory.Feature.SecondsSinceAddedToWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3658);
  }
  return result;
}

unint64_t sub_C5B88()
{
  unint64_t result;

  result = qword_1F3660;
  if (!qword_1F3660)
  {
    result = swift_getWitnessTable(&unk_1945DC, &type metadata for BookHistory.Feature.SecondsSinceFirstDownloadedViaFamilySharingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3660);
  }
  return result;
}

unint64_t sub_C5BCC()
{
  unint64_t result;

  result = qword_1F3668;
  if (!qword_1F3668)
  {
    result = swift_getWitnessTable(&unk_19458C, &type metadata for BookHistory.Feature.SecondsSincePurchasedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3668);
  }
  return result;
}

unint64_t sub_C5C10()
{
  unint64_t result;

  result = qword_1F3670;
  if (!qword_1F3670)
  {
    result = swift_getWitnessTable(&unk_19453C, &type metadata for BookHistory.Feature.SecondsSinceLastReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3670);
  }
  return result;
}

unint64_t sub_C5C54()
{
  unint64_t result;

  result = qword_1F3678;
  if (!qword_1F3678)
  {
    result = swift_getWitnessTable(&unk_1944EC, &type metadata for BookHistory.Feature.SecondsSinceExplicitDeclineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3678);
  }
  return result;
}

unint64_t sub_C5C98()
{
  unint64_t result;

  result = qword_1F3680;
  if (!qword_1F3680)
  {
    result = swift_getWitnessTable(&unk_19449C, &type metadata for BookHistory.Feature.SecondsSinceLessLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3680);
  }
  return result;
}

unint64_t sub_C5CDC()
{
  unint64_t result;

  result = qword_1F3688;
  if (!qword_1F3688)
  {
    result = swift_getWitnessTable(&unk_19444C, &type metadata for BookHistory.Feature.SecondsSinceMoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3688);
  }
  return result;
}

unint64_t sub_C5D20()
{
  unint64_t result;

  result = qword_1F3690;
  if (!qword_1F3690)
  {
    result = swift_getWitnessTable(&unk_1943FC, &type metadata for BookHistory.Feature.ReviewInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3690);
  }
  return result;
}

unint64_t sub_C5D64()
{
  unint64_t result;

  result = qword_1F3698;
  if (!qword_1F3698)
  {
    result = swift_getWitnessTable(&unk_1943AC, &type metadata for BookHistory.Feature.SampleReadFractionHighWaterMarkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3698);
  }
  return result;
}

unint64_t sub_C5DA8()
{
  unint64_t result;

  result = qword_1F36A0;
  if (!qword_1F36A0)
  {
    result = swift_getWitnessTable(&unk_19435C, &type metadata for BookHistory.Feature.MarkedFinishedInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F36A0);
  }
  return result;
}

unint64_t sub_C5DEC()
{
  unint64_t result;

  result = qword_1F36A8;
  if (!qword_1F36A8)
  {
    result = swift_getWitnessTable(&unk_19430C, &type metadata for BookHistory.Feature.ReadFractionHighWaterMarkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F36A8);
  }
  return result;
}

unint64_t sub_C5E30()
{
  unint64_t result;

  result = qword_1F3748;
  if (!qword_1F3748)
  {
    result = swift_getWitnessTable(&unk_1942CC, &type metadata for BookHistory.Errors);
    atomic_store(result, (unint64_t *)&qword_1F3748);
  }
  return result;
}

unint64_t sub_C5E74()
{
  unint64_t result;

  result = qword_1F3758;
  if (!qword_1F3758)
  {
    result = swift_getWitnessTable(&unk_19427C, &type metadata for BookHistory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3758);
  }
  return result;
}

unint64_t sub_C5EB8()
{
  unint64_t result;

  result = qword_1F3760;
  if (!qword_1F3760)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory.MarkedFinishedInfo, &type metadata for BookHistory.MarkedFinishedInfo);
    atomic_store(result, (unint64_t *)&qword_1F3760);
  }
  return result;
}

unint64_t sub_C5EFC()
{
  unint64_t result;

  result = qword_1F3768;
  if (!qword_1F3768)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReviewInfo, &type metadata for ReviewInfo);
    atomic_store(result, (unint64_t *)&qword_1F3768);
  }
  return result;
}

unint64_t sub_C5F40()
{
  unint64_t result;

  result = qword_1F3778;
  if (!qword_1F3778)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory.MarkedFinishedInfo, &type metadata for BookHistory.MarkedFinishedInfo);
    atomic_store(result, (unint64_t *)&qword_1F3778);
  }
  return result;
}

unint64_t sub_C5F84()
{
  unint64_t result;

  result = qword_1F3780;
  if (!qword_1F3780)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReviewInfo, &type metadata for ReviewInfo);
    atomic_store(result, (unint64_t *)&qword_1F3780);
  }
  return result;
}

unint64_t sub_C5FCC()
{
  unint64_t result;

  result = qword_1F3788;
  if (!qword_1F3788)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory.CollectionAddition, &type metadata for BookHistory.CollectionAddition);
    atomic_store(result, (unint64_t *)&qword_1F3788);
  }
  return result;
}

unint64_t sub_C6014()
{
  unint64_t result;

  result = qword_1F3790;
  if (!qword_1F3790)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory.MarkedFinishedInfo, &type metadata for BookHistory.MarkedFinishedInfo);
    atomic_store(result, (unint64_t *)&qword_1F3790);
  }
  return result;
}

unint64_t sub_C605C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F3798;
  if (!qword_1F3798)
  {
    v1 = sub_5F68(&qword_1F37A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F3798);
  }
  return result;
}

unint64_t sub_C60AC()
{
  unint64_t result;

  result = qword_1F37A8;
  if (!qword_1F37A8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory.Feature, &type metadata for BookHistory.Feature);
    atomic_store(result, (unint64_t *)&qword_1F37A8);
  }
  return result;
}

unint64_t sub_C60F4()
{
  unint64_t result;

  result = qword_1F37B0;
  if (!qword_1F37B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for BookHistory, &type metadata for BookHistory);
    atomic_store(result, (unint64_t *)&qword_1F37B0);
  }
  return result;
}

void *sub_C6138()
{
  return &protocol witness table for UInt64;
}

void *initializeWithCopy for BookHistory(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x179uLL);
}

uint64_t getEnumTagSinglePayload for BookHistory(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 377))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 80);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BookHistory(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 376) = 0;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 377) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 377) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookHistory()
{
  return &type metadata for BookHistory;
}

uint64_t getEnumTagSinglePayload for BookHistory.CollectionAddition(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BookHistory.CollectionAddition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_C62E0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_C62E8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for BookHistory.CollectionAddition()
{
  return &type metadata for BookHistory.CollectionAddition;
}

uint64_t getEnumTagSinglePayload for BookHistory.MarkedFinishedInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BookHistory.MarkedFinishedInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookHistory.MarkedFinishedInfo()
{
  return &type metadata for BookHistory.MarkedFinishedInfo;
}

ValueMetadata *type metadata accessor for BookHistory.Feature()
{
  return &type metadata for BookHistory.Feature;
}

uint64_t dispatch thunk of BookRecommendationPostHydrationFilteringServiceType.storeIDsOfDuplicateAssets(fromCandidates:collectionType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int *v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v11 = *(int **)(a5 + 8);
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  v12 = (_QWORD *)swift_task_alloc(v11[1]);
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = sub_429A0;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t sub_C6454()
{
  return type metadata accessor for BookHistoryService(0);
}

uint64_t type metadata accessor for BookHistoryService(uint64_t a1)
{
  uint64_t result;

  result = qword_1F37F0;
  if (!qword_1F37F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookHistoryService);
  return result;
}

uint64_t sub_C6498(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = "(";
  v4[3] = "(";
  result = type metadata accessor for TimeZone(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BookHistory.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BookHistory.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_C65F0 + 4 * byte_192FA6[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_C6624 + 4 * byte_192FA1[v4]))();
}

uint64_t sub_C6624(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C662C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC6634);
  return result;
}

uint64_t sub_C6640(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC6648);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_C664C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C6654(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BookHistory.CodingKeys()
{
  return &type metadata for BookHistory.CodingKeys;
}

uint64_t getEnumTagSinglePayload for BookHistory.Errors(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xEF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 239);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 0x11)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BookHistory.Errors(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xEE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 239;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xEF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xEF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookHistory.Errors()
{
  return &type metadata for BookHistory.Errors;
}

uint64_t _s29EventAggregationConfigurationV15EventConditionsV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s20BooksPersonalization11BookHistoryV7FeatureOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_C67E8 + 4 * byte_192FB0[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_C681C + 4 * byte_192FAB[v4]))();
}

uint64_t sub_C681C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C6824(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC682CLL);
  return result;
}

uint64_t sub_C6838(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC6840);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_C6844(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C684C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.CodingKeys()
{
  return &type metadata for BookHistory.Feature.CodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.ReadFractionHighWaterMarkCodingKeys()
{
  return &type metadata for BookHistory.Feature.ReadFractionHighWaterMarkCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.MarkedFinishedInfoCodingKeys()
{
  return &type metadata for BookHistory.Feature.MarkedFinishedInfoCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SampleReadFractionHighWaterMarkCodingKeys()
{
  return &type metadata for BookHistory.Feature.SampleReadFractionHighWaterMarkCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.ReviewInfoCodingKeys()
{
  return &type metadata for BookHistory.Feature.ReviewInfoCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceMoreLikeThisCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceMoreLikeThisCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceLessLikeThisCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceLessLikeThisCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceExplicitDeclineCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceExplicitDeclineCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceLastReadCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceLastReadCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSincePurchasedCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSincePurchasedCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceFirstDownloadedViaFamilySharingCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceFirstDownloadedViaFamilySharingCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceAddedToWantToReadCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceAddedToWantToReadCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceRemovedFromWantToReadCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceRemovedFromWantToReadCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceSampledCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceSampledCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceProductPageViewedCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceProductPageViewedCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.SecondsSinceFirstRecommendedCodingKeys()
{
  return &type metadata for BookHistory.Feature.SecondsSinceFirstRecommendedCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.DaysRecommendedCountCodingKeys()
{
  return &type metadata for BookHistory.Feature.DaysRecommendedCountCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.ConsecutiveDaysNotRecommendedCountCodingKeys()
{
  return &type metadata for BookHistory.Feature.ConsecutiveDaysNotRecommendedCountCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.Feature.DaysRecommendationPassedOverCountCodingKeys()
{
  return &type metadata for BookHistory.Feature.DaysRecommendationPassedOverCountCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.MarkedFinishedInfo.Mechanism()
{
  return &type metadata for BookHistory.MarkedFinishedInfo.Mechanism;
}

ValueMetadata *type metadata accessor for BookHistory.MarkedFinishedInfo.CodingKeys()
{
  return &type metadata for BookHistory.MarkedFinishedInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.CollectionAddition.CodingKeys()
{
  return &type metadata for BookHistory.CollectionAddition.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BookHistory.CollectionAddition.AddedAtCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_C6A00 + 4 * byte_192FB5[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_C6A20 + 4 * byte_192FBA[v4]))();
}

_BYTE *sub_C6A00(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_C6A20(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_C6A28(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_C6A30(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_C6A38(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_C6A40(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BookHistory.CollectionAddition.AddedAtCodingKeys()
{
  return &type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys;
}

uint64_t _s20BooksPersonalization11BookHistoryV18MarkedFinishedInfoV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_C6AA8 + 4 * byte_192FC4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_C6ADC + 4 * byte_192FBF[v4]))();
}

uint64_t sub_C6ADC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C6AE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC6AECLL);
  return result;
}

uint64_t sub_C6AF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC6B00);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_C6B04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C6B0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BookHistory.CollectionAddition.AddedInCodingKeys()
{
  return &type metadata for BookHistory.CollectionAddition.AddedInCodingKeys;
}

unint64_t sub_C6B2C()
{
  unint64_t result;

  result = qword_1F3898;
  if (!qword_1F3898)
  {
    result = swift_getWitnessTable(&unk_1938A4, &type metadata for BookHistory.CollectionAddition.AddedInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3898);
  }
  return result;
}

unint64_t sub_C6B74()
{
  unint64_t result;

  result = qword_1F38A0;
  if (!qword_1F38A0)
  {
    result = swift_getWitnessTable(&unk_19395C, &type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38A0);
  }
  return result;
}

unint64_t sub_C6BBC()
{
  unint64_t result;

  result = qword_1F38A8;
  if (!qword_1F38A8)
  {
    result = swift_getWitnessTable(&unk_193A14, &type metadata for BookHistory.CollectionAddition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38A8);
  }
  return result;
}

unint64_t sub_C6C04()
{
  unint64_t result;

  result = qword_1F38B0;
  if (!qword_1F38B0)
  {
    result = swift_getWitnessTable(&unk_193ACC, &type metadata for BookHistory.MarkedFinishedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38B0);
  }
  return result;
}

unint64_t sub_C6C4C()
{
  unint64_t result;

  result = qword_1F38B8;
  if (!qword_1F38B8)
  {
    result = swift_getWitnessTable(&unk_193B34, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism);
    atomic_store(result, (unint64_t *)&qword_1F38B8);
  }
  return result;
}

unint64_t sub_C6C94()
{
  unint64_t result;

  result = qword_1F38C0;
  if (!qword_1F38C0)
  {
    result = swift_getWitnessTable(&unk_19418C, &type metadata for BookHistory.Feature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38C0);
  }
  return result;
}

unint64_t sub_C6CDC()
{
  unint64_t result;

  result = qword_1F38C8;
  if (!qword_1F38C8)
  {
    result = swift_getWitnessTable(&unk_194244, &type metadata for BookHistory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38C8);
  }
  return result;
}

unint64_t sub_C6D24()
{
  unint64_t result;

  result = qword_1F38D8;
  if (!qword_1F38D8)
  {
    result = swift_getWitnessTable(&unk_1941B4, &type metadata for BookHistory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38D8);
  }
  return result;
}

unint64_t sub_C6D6C()
{
  unint64_t result;

  result = qword_1F38E0;
  if (!qword_1F38E0)
  {
    result = swift_getWitnessTable(&unk_1941DC, &type metadata for BookHistory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38E0);
  }
  return result;
}

unint64_t sub_C6DB4()
{
  unint64_t result;

  result = qword_1F38E8;
  if (!qword_1F38E8)
  {
    result = swift_getWitnessTable(&unk_1940AC, &type metadata for BookHistory.Feature.ReadFractionHighWaterMarkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38E8);
  }
  return result;
}

unint64_t sub_C6DFC()
{
  unint64_t result;

  result = qword_1F38F0;
  if (!qword_1F38F0)
  {
    result = swift_getWitnessTable(&unk_1940D4, &type metadata for BookHistory.Feature.ReadFractionHighWaterMarkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38F0);
  }
  return result;
}

unint64_t sub_C6E44()
{
  unint64_t result;

  result = qword_1F38F8;
  if (!qword_1F38F8)
  {
    result = swift_getWitnessTable(&unk_19405C, &type metadata for BookHistory.Feature.MarkedFinishedInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F38F8);
  }
  return result;
}

unint64_t sub_C6E8C()
{
  unint64_t result;

  result = qword_1F3900;
  if (!qword_1F3900)
  {
    result = swift_getWitnessTable(&unk_194084, &type metadata for BookHistory.Feature.MarkedFinishedInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3900);
  }
  return result;
}

unint64_t sub_C6ED4()
{
  unint64_t result;

  result = qword_1F3908;
  if (!qword_1F3908)
  {
    result = swift_getWitnessTable(&unk_19400C, &type metadata for BookHistory.Feature.SampleReadFractionHighWaterMarkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3908);
  }
  return result;
}

unint64_t sub_C6F1C()
{
  unint64_t result;

  result = qword_1F3910;
  if (!qword_1F3910)
  {
    result = swift_getWitnessTable(&unk_194034, &type metadata for BookHistory.Feature.SampleReadFractionHighWaterMarkCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3910);
  }
  return result;
}

unint64_t sub_C6F64()
{
  unint64_t result;

  result = qword_1F3918;
  if (!qword_1F3918)
  {
    result = swift_getWitnessTable(&unk_193FBC, &type metadata for BookHistory.Feature.ReviewInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3918);
  }
  return result;
}

unint64_t sub_C6FAC()
{
  unint64_t result;

  result = qword_1F3920;
  if (!qword_1F3920)
  {
    result = swift_getWitnessTable(&unk_193FE4, &type metadata for BookHistory.Feature.ReviewInfoCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3920);
  }
  return result;
}

unint64_t sub_C6FF4()
{
  unint64_t result;

  result = qword_1F3928;
  if (!qword_1F3928)
  {
    result = swift_getWitnessTable(&unk_193F6C, &type metadata for BookHistory.Feature.SecondsSinceMoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3928);
  }
  return result;
}

unint64_t sub_C703C()
{
  unint64_t result;

  result = qword_1F3930;
  if (!qword_1F3930)
  {
    result = swift_getWitnessTable(&unk_193F94, &type metadata for BookHistory.Feature.SecondsSinceMoreLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3930);
  }
  return result;
}

unint64_t sub_C7084()
{
  unint64_t result;

  result = qword_1F3938;
  if (!qword_1F3938)
  {
    result = swift_getWitnessTable(&unk_193F1C, &type metadata for BookHistory.Feature.SecondsSinceLessLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3938);
  }
  return result;
}

unint64_t sub_C70CC()
{
  unint64_t result;

  result = qword_1F3940;
  if (!qword_1F3940)
  {
    result = swift_getWitnessTable(&unk_193F44, &type metadata for BookHistory.Feature.SecondsSinceLessLikeThisCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3940);
  }
  return result;
}

unint64_t sub_C7114()
{
  unint64_t result;

  result = qword_1F3948;
  if (!qword_1F3948)
  {
    result = swift_getWitnessTable(&unk_193ECC, &type metadata for BookHistory.Feature.SecondsSinceExplicitDeclineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3948);
  }
  return result;
}

unint64_t sub_C715C()
{
  unint64_t result;

  result = qword_1F3950;
  if (!qword_1F3950)
  {
    result = swift_getWitnessTable(&unk_193EF4, &type metadata for BookHistory.Feature.SecondsSinceExplicitDeclineCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3950);
  }
  return result;
}

unint64_t sub_C71A4()
{
  unint64_t result;

  result = qword_1F3958;
  if (!qword_1F3958)
  {
    result = swift_getWitnessTable(&unk_193E7C, &type metadata for BookHistory.Feature.SecondsSinceLastReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3958);
  }
  return result;
}

unint64_t sub_C71EC()
{
  unint64_t result;

  result = qword_1F3960;
  if (!qword_1F3960)
  {
    result = swift_getWitnessTable(&unk_193EA4, &type metadata for BookHistory.Feature.SecondsSinceLastReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3960);
  }
  return result;
}

unint64_t sub_C7234()
{
  unint64_t result;

  result = qword_1F3968;
  if (!qword_1F3968)
  {
    result = swift_getWitnessTable(&unk_193E2C, &type metadata for BookHistory.Feature.SecondsSincePurchasedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3968);
  }
  return result;
}

unint64_t sub_C727C()
{
  unint64_t result;

  result = qword_1F3970;
  if (!qword_1F3970)
  {
    result = swift_getWitnessTable(&unk_193E54, &type metadata for BookHistory.Feature.SecondsSincePurchasedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3970);
  }
  return result;
}

unint64_t sub_C72C4()
{
  unint64_t result;

  result = qword_1F3978;
  if (!qword_1F3978)
  {
    result = swift_getWitnessTable(&unk_193DDC, &type metadata for BookHistory.Feature.SecondsSinceFirstDownloadedViaFamilySharingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3978);
  }
  return result;
}

unint64_t sub_C730C()
{
  unint64_t result;

  result = qword_1F3980;
  if (!qword_1F3980)
  {
    result = swift_getWitnessTable(&unk_193E04, &type metadata for BookHistory.Feature.SecondsSinceFirstDownloadedViaFamilySharingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3980);
  }
  return result;
}

unint64_t sub_C7354()
{
  unint64_t result;

  result = qword_1F3988;
  if (!qword_1F3988)
  {
    result = swift_getWitnessTable(&unk_193D8C, &type metadata for BookHistory.Feature.SecondsSinceAddedToWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3988);
  }
  return result;
}

unint64_t sub_C739C()
{
  unint64_t result;

  result = qword_1F3990;
  if (!qword_1F3990)
  {
    result = swift_getWitnessTable(&unk_193DB4, &type metadata for BookHistory.Feature.SecondsSinceAddedToWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3990);
  }
  return result;
}

unint64_t sub_C73E4()
{
  unint64_t result;

  result = qword_1F3998;
  if (!qword_1F3998)
  {
    result = swift_getWitnessTable(&unk_193D3C, &type metadata for BookHistory.Feature.SecondsSinceRemovedFromWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3998);
  }
  return result;
}

unint64_t sub_C742C()
{
  unint64_t result;

  result = qword_1F39A0;
  if (!qword_1F39A0)
  {
    result = swift_getWitnessTable(&unk_193D64, &type metadata for BookHistory.Feature.SecondsSinceRemovedFromWantToReadCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39A0);
  }
  return result;
}

unint64_t sub_C7474()
{
  unint64_t result;

  result = qword_1F39A8;
  if (!qword_1F39A8)
  {
    result = swift_getWitnessTable(&unk_193CEC, &type metadata for BookHistory.Feature.SecondsSinceSampledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39A8);
  }
  return result;
}

unint64_t sub_C74BC()
{
  unint64_t result;

  result = qword_1F39B0;
  if (!qword_1F39B0)
  {
    result = swift_getWitnessTable(&unk_193D14, &type metadata for BookHistory.Feature.SecondsSinceSampledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39B0);
  }
  return result;
}

unint64_t sub_C7504()
{
  unint64_t result;

  result = qword_1F39B8;
  if (!qword_1F39B8)
  {
    result = swift_getWitnessTable(&unk_193C9C, &type metadata for BookHistory.Feature.SecondsSinceProductPageViewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39B8);
  }
  return result;
}

unint64_t sub_C754C()
{
  unint64_t result;

  result = qword_1F39C0;
  if (!qword_1F39C0)
  {
    result = swift_getWitnessTable(&unk_193CC4, &type metadata for BookHistory.Feature.SecondsSinceProductPageViewedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39C0);
  }
  return result;
}

unint64_t sub_C7594()
{
  unint64_t result;

  result = qword_1F39C8;
  if (!qword_1F39C8)
  {
    result = swift_getWitnessTable(&unk_193C4C, &type metadata for BookHistory.Feature.SecondsSinceFirstRecommendedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39C8);
  }
  return result;
}

unint64_t sub_C75DC()
{
  unint64_t result;

  result = qword_1F39D0;
  if (!qword_1F39D0)
  {
    result = swift_getWitnessTable(&unk_193C74, &type metadata for BookHistory.Feature.SecondsSinceFirstRecommendedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39D0);
  }
  return result;
}

unint64_t sub_C7624()
{
  unint64_t result;

  result = qword_1F39D8;
  if (!qword_1F39D8)
  {
    result = swift_getWitnessTable(&unk_193BFC, &type metadata for BookHistory.Feature.DaysRecommendedCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39D8);
  }
  return result;
}

unint64_t sub_C766C()
{
  unint64_t result;

  result = qword_1F39E0;
  if (!qword_1F39E0)
  {
    result = swift_getWitnessTable(&unk_193C24, &type metadata for BookHistory.Feature.DaysRecommendedCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39E0);
  }
  return result;
}

unint64_t sub_C76B4()
{
  unint64_t result;

  result = qword_1F39E8;
  if (!qword_1F39E8)
  {
    result = swift_getWitnessTable(&unk_193BAC, &type metadata for BookHistory.Feature.ConsecutiveDaysNotRecommendedCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39E8);
  }
  return result;
}

unint64_t sub_C76FC()
{
  unint64_t result;

  result = qword_1F39F0;
  if (!qword_1F39F0)
  {
    result = swift_getWitnessTable(&unk_193BD4, &type metadata for BookHistory.Feature.ConsecutiveDaysNotRecommendedCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39F0);
  }
  return result;
}

unint64_t sub_C7744()
{
  unint64_t result;

  result = qword_1F39F8;
  if (!qword_1F39F8)
  {
    result = swift_getWitnessTable(&unk_193B5C, &type metadata for BookHistory.Feature.DaysRecommendationPassedOverCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F39F8);
  }
  return result;
}

unint64_t sub_C778C()
{
  unint64_t result;

  result = qword_1F3A00;
  if (!qword_1F3A00)
  {
    result = swift_getWitnessTable(&unk_193B84, &type metadata for BookHistory.Feature.DaysRecommendationPassedOverCountCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A00);
  }
  return result;
}

unint64_t sub_C77D4()
{
  unint64_t result;

  result = qword_1F3A08;
  if (!qword_1F3A08)
  {
    result = swift_getWitnessTable(&unk_1940FC, &type metadata for BookHistory.Feature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A08);
  }
  return result;
}

unint64_t sub_C781C()
{
  unint64_t result;

  result = qword_1F3A10;
  if (!qword_1F3A10)
  {
    result = swift_getWitnessTable(&unk_194124, &type metadata for BookHistory.Feature.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A10);
  }
  return result;
}

unint64_t sub_C7864()
{
  unint64_t result;

  result = qword_1F3A18;
  if (!qword_1F3A18)
  {
    result = swift_getWitnessTable(&unk_193A3C, &type metadata for BookHistory.MarkedFinishedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A18);
  }
  return result;
}

unint64_t sub_C78AC()
{
  unint64_t result;

  result = qword_1F3A20;
  if (!qword_1F3A20)
  {
    result = swift_getWitnessTable(&unk_193A64, &type metadata for BookHistory.MarkedFinishedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A20);
  }
  return result;
}

unint64_t sub_C78F4()
{
  unint64_t result;

  result = qword_1F3A28;
  if (!qword_1F3A28)
  {
    result = swift_getWitnessTable(&unk_1938CC, &type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A28);
  }
  return result;
}

unint64_t sub_C793C()
{
  unint64_t result;

  result = qword_1F3A30;
  if (!qword_1F3A30)
  {
    result = swift_getWitnessTable(&unk_1938F4, &type metadata for BookHistory.CollectionAddition.AddedAtCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A30);
  }
  return result;
}

unint64_t sub_C7984()
{
  unint64_t result;

  result = qword_1F3A38;
  if (!qword_1F3A38)
  {
    result = swift_getWitnessTable(&unk_193814, &type metadata for BookHistory.CollectionAddition.AddedInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A38);
  }
  return result;
}

unint64_t sub_C79CC()
{
  unint64_t result;

  result = qword_1F3A40;
  if (!qword_1F3A40)
  {
    result = swift_getWitnessTable(&unk_19383C, &type metadata for BookHistory.CollectionAddition.AddedInCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A40);
  }
  return result;
}

unint64_t sub_C7A14()
{
  unint64_t result;

  result = qword_1F3A48;
  if (!qword_1F3A48)
  {
    result = swift_getWitnessTable(&unk_193984, &type metadata for BookHistory.CollectionAddition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A48);
  }
  return result;
}

unint64_t sub_C7A5C()
{
  unint64_t result;

  result = qword_1F3A50;
  if (!qword_1F3A50)
  {
    result = swift_getWitnessTable(&unk_1939AC, &type metadata for BookHistory.CollectionAddition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A50);
  }
  return result;
}

uint64_t sub_C7AA0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v24;

  v24 = (unint64_t *)result;
  v5 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = a4 + 56;
  while (1)
  {
    while (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v6 << 6);
      if (*(_QWORD *)(a4 + 16))
      {
LABEL_19:
        v18 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * v14);
        result = static Hasher._hash(seed:_:)(*(_QWORD *)(a4 + 40), v18);
        v19 = -1 << *(_BYTE *)(a4 + 32);
        v20 = result & ~v19;
        if (((*(_QWORD *)(v12 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          v21 = *(_QWORD *)(a4 + 48);
          if (*(_QWORD *)(v21 + 8 * v20) == v18)
          {
LABEL_24:
            *(unint64_t *)((char *)v24 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
            v15 = __OFADD__(v5++, 1);
            if (v15)
              goto LABEL_33;
          }
          else
          {
            v22 = ~v19;
            while (1)
            {
              v20 = (v20 + 1) & v22;
              if (((*(_QWORD *)(v12 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                break;
              if (*(_QWORD *)(v21 + 8 * v20) == v18)
                goto LABEL_24;
            }
          }
        }
      }
    }
    v15 = __OFADD__(v6++, 1);
    if (v15)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    if (v6 >= v11)
      return sub_DE830(v24, a2, v5, a3);
    v16 = *(_QWORD *)(v7 + 8 * v6);
    if (!v16)
      break;
LABEL_18:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v6 << 6);
    if (*(_QWORD *)(a4 + 16))
      goto LABEL_19;
  }
  v17 = v6 + 1;
  if (v6 + 1 >= v11)
    return sub_DE830(v24, a2, v5, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v6 + 2;
  if (v6 + 2 >= v11)
    return sub_DE830(v24, a2, v5, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v6 + 3;
  if (v6 + 3 >= v11)
    return sub_DE830(v24, a2, v5, a3);
  v16 = *(_QWORD *)(v7 + 8 * v17);
  if (v16)
  {
LABEL_17:
    v6 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v6 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v6 >= v11)
      return sub_DE830(v24, a2, v5, a3);
    v16 = *(_QWORD *)(v7 + 8 * v6);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_C7CA8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6C61767265746E69 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61767265746E69, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1868983913 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1868983913, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_C7D88(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x74416465646461 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74416465646461, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E496465646461 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E496465646461, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_C7E78(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x796C6C61756E616DLL && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x796C6C61756E616DLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6974616D6F747561 && a2 == 0xED0000796C6C6163)
  {
    v7 = 0xED0000796C6C6163;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974616D6F747561, 0xED0000796C6C6163, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E776F6E6B6E75 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E776F6E6B6E75, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_C7FF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  char v41;
  char v42;
  char v43;

  v37 = sub_5EDC(&qword_1F3A98);
  v35 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v39 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_5EDC(&qword_1F3AA0);
  v33 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v38 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_5EDC(&qword_1F3AA8);
  v4 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_5EDC(&qword_1F3AB0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_C84C0();
  v14 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys, v13, v11, v12);
  if (v14)
    goto LABEL_7;
  v31 = v4;
  v32 = v8;
  v15 = v39;
  v40 = a1;
  v16 = v10;
  v17 = KeyedDecodingContainer.allKeys.getter(v7);
  v18 = v17;
  v19 = v7;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = v17;
    v24 = type metadata accessor for DecodingError(0);
    swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
    v10 = v25;
    sub_5EDC(&qword_1F2C58);
    *v10 = &type metadata for BookHistory.MarkedFinishedInfo.Mechanism;
    v26 = KeyedDecodingContainer.codingPath.getter(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000000001A0EA0, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v10, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow(v27);
    swift_bridgeObjectRelease(v23);
    (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v16, v19);
    a1 = v40;
LABEL_7:
    sub_62F8(a1);
    return v10;
  }
  v10 = (_QWORD *)*(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if ((_DWORD)v10 == 1)
    {
      v42 = 1;
      v20 = sub_C8548();
      v21 = v38;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys, &v42, v7, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys, v20);
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v36);
    }
    else
    {
      v43 = 2;
      v30 = sub_C8504();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys, &v43, v7, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys, v30);
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v37);
    }
    swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v16, v19);
  }
  else
  {
    v41 = 0;
    v29 = sub_C858C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys, &v41, v7, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys, v29);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v6, v34);
    swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t))(v32 + 8))(v16, v7);
  }
  sub_62F8(v40);
  return v10;
}

uint64_t sub_C83C8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x73696E616863656DLL && a2 == 0xE90000000000006DLL)
  {
    v5 = 0xE90000000000006DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73696E616863656DLL, 0xE90000000000006DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000000001A1990)
  {
    swift_bridgeObjectRelease(0x80000000001A1990);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000000001A1990, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_C84C0()
{
  unint64_t result;

  result = qword_1F3A78;
  if (!qword_1F3A78)
  {
    result = swift_getWitnessTable(&unk_194D7C, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A78);
  }
  return result;
}

unint64_t sub_C8504()
{
  unint64_t result;

  result = qword_1F3A80;
  if (!qword_1F3A80)
  {
    result = swift_getWitnessTable(&unk_194D2C, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A80);
  }
  return result;
}

unint64_t sub_C8548()
{
  unint64_t result;

  result = qword_1F3A88;
  if (!qword_1F3A88)
  {
    result = swift_getWitnessTable(&unk_194CDC, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A88);
  }
  return result;
}

unint64_t sub_C858C()
{
  unint64_t result;

  result = qword_1F3A90;
  if (!qword_1F3A90)
  {
    result = swift_getWitnessTable(&unk_194C8C, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3A90);
  }
  return result;
}

uint64_t sub_C85D0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  if (a1 == 0xD000000000000019 && a2 == 0x800000000019F7D0)
  {
    v4 = 0x800000000019F7D0;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000019F7D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
    goto LABEL_6;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000000001A19B0)
  {
    v6 = 0x80000000001A19B0;
LABEL_12:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000001A19B0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_12;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x800000000019F7F0)
  {
    v7 = 0x800000000019F7F0;
LABEL_18:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000000019F7F0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_18;
  }
  if (a1 == 0x6E49776569766572 && a2 == 0xEA00000000006F66)
  {
    v8 = 0xEA00000000006F66;
LABEL_24:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E49776569766572, 0xEA00000000006F66, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_24;
  }
  if (a1 == 0xD000000000000018)
  {
    v9 = 0x80000000001A19D0;
    if (a2 == 0x80000000001A19D0)
      goto LABEL_29;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000001A19D0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if (a1 == 0xD000000000000018)
  {
    v10 = 0x80000000001A19F0;
    if (a2 == 0x80000000001A19F0)
      goto LABEL_34;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000001A19F0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000000001A1A10)
  {
    v11 = 0x80000000001A1A10;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000000001A1A10, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0xD000000000000014)
  {
    v12 = 0x80000000001A1A30;
    if (a2 == 0x80000000001A1A30)
      goto LABEL_45;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001A1A30, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_45:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000000001A1A50)
  {
    v13 = 0x80000000001A1A50;
LABEL_51:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000001A1A50, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_51;
  }
  if (a1 == 0xD00000000000002BLL && a2 == 0x80000000001A1A70)
  {
    v14 = 0x80000000001A1A70;
LABEL_57:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x80000000001A1A70, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_57;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v15 = 0x80000000001A1AA0;
    if (a2 == 0x80000000001A1AA0)
      goto LABEL_62;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000000001A1AA0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_62:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if (a1 == 0xD000000000000021)
  {
    v16 = 0x80000000001A1AC0;
    if (a2 == 0x80000000001A1AC0)
      goto LABEL_67;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x80000000001A1AC0, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x80000000001A1AF0)
  {
    v17 = 0x80000000001A1AF0;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000000001A1AF0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    v18 = 0x80000000001A1B10;
    if (a2 == 0x80000000001A1B10)
      goto LABEL_78;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000000001A1B10, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_78:
    swift_bridgeObjectRelease(v18);
    return 13;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000000001A1B30)
  {
    v19 = 0x80000000001A1B30;
LABEL_84:
    swift_bridgeObjectRelease(v19);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000000001A1B30, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_84;
  }
  if (a1 == 0xD000000000000014)
  {
    v20 = 0x80000000001A1B50;
    if (a2 == 0x80000000001A1B50)
      goto LABEL_89;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001A1B50, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 15;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x80000000001A1B70)
  {
    v21 = 0x80000000001A1B70;
LABEL_95:
    swift_bridgeObjectRelease(v21);
    return 16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x80000000001A1B70, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_95;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x80000000001A1BA0)
  {
    swift_bridgeObjectRelease(0x80000000001A1BA0);
    return 17;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x80000000001A1BA0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v22 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

uint64_t sub_C8C3C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;

  if (a1 == 0x444965726F7473 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444965726F7473, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x800000000019F7D0)
  {
    v7 = 0x800000000019F7D0;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000000019F7D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD00000000000001FLL && a2 == 0x800000000019F7F0)
  {
    v8 = 0x800000000019F7F0;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000000019F7F0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x80000000001A19B0)
  {
    v9 = 0x80000000001A19B0;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000000001A19B0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6E49776569766572 && a2 == 0xEA00000000006F66)
  {
    v10 = 0xEA00000000006F66;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E49776569766572, 0xEA00000000006F66, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000018)
  {
    v11 = 0x80000000001A19D0;
    if (a2 == 0x80000000001A19D0)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000001A19D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000018)
  {
    v12 = 0x80000000001A19F0;
    if (a2 == 0x80000000001A19F0)
      goto LABEL_42;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x80000000001A19F0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x80000000001A1A10)
  {
    v13 = 0x80000000001A1A10;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x80000000001A1A10, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0xD000000000000014)
  {
    v14 = 0x80000000001A1A30;
    if (a2 == 0x80000000001A1A30)
      goto LABEL_53;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001A1A30, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
LABEL_53:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x80000000001A1A50)
  {
    v15 = 0x80000000001A1A50;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x80000000001A1A50, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_59;
  }
  if (a1 == 0xD00000000000002BLL && a2 == 0x80000000001A1A70)
  {
    v16 = 0x80000000001A1A70;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000002BLL, 0x80000000001A1A70, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_65;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000000001A1BD0)
  {
    v17 = 0x80000000001A1BD0;
LABEL_71:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000000001A1BD0, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_71;
  }
  if (a1 == 0xD000000000000021)
  {
    v18 = 0x80000000001A1AC0;
    if (a2 == 0x80000000001A1AC0)
      goto LABEL_76;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x80000000001A1AC0, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_76:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if (a1 == 0x64656C706D6173 && a2 == 0xE700000000000000)
  {
    v19 = 0xE700000000000000;
LABEL_82:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656C706D6173, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_82;
  }
  if (a1 == 0xD00000000000001DLL && a2 == 0x80000000001A1B10)
  {
    v20 = 0x80000000001A1B10;
LABEL_88:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001DLL, 0x80000000001A1B10, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_88;
  }
  if (a1 == 0xD00000000000001CLL && a2 == 0x80000000001A1B30)
  {
    v21 = 0x80000000001A1B30;
LABEL_94:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001CLL, 0x80000000001A1B30, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_94;
  }
  if (a1 == 0xD000000000000014)
  {
    v22 = 0x80000000001A1B50;
    if (a2 == 0x80000000001A1B50)
      goto LABEL_99;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x80000000001A1B50, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_99:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x80000000001A1B70)
  {
    v23 = 0x80000000001A1B70;
LABEL_105:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x80000000001A1B70, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_105;
  }
  if (a1 == 0xD000000000000021 && a2 == 0x80000000001A1BA0)
  {
    swift_bridgeObjectRelease(0x80000000001A1BA0);
    return 18;
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x80000000001A1BA0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v24 & 1) != 0)
      return 18;
    else
      return 19;
  }
}

unint64_t sub_C9310()
{
  unint64_t result;

  result = qword_1F3AD8;
  if (!qword_1F3AD8)
  {
    result = swift_getWitnessTable(&unk_1995DC, &type metadata for ReviewInfo.Errors);
    atomic_store(result, (unint64_t *)&qword_1F3AD8);
  }
  return result;
}

uint64_t sub_C9354(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F1310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_C939C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StoreBook(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_C93E0(uint64_t a1@<X8>)
{
  *(double *)a1 = Date.timeIntervalSince(_:)();
  *(_BYTE *)(a1 + 8) = 0;
}

uint64_t _s20BooksPersonalization11BookHistoryV18MarkedFinishedInfoV9MechanismOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_C9468 + 4 * byte_192FCE[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_C949C + 4 * byte_192FC9[v4]))();
}

uint64_t sub_C949C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_C94A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xC94ACLL);
  return result;
}

uint64_t sub_C94B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xC94C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_C94C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_C94CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys()
{
  return &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys()
{
  return &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys()
{
  return &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys;
}

ValueMetadata *type metadata accessor for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys()
{
  return &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys;
}

unint64_t sub_C951C()
{
  unint64_t result;

  result = qword_1F3AF8;
  if (!qword_1F3AF8)
  {
    result = swift_getWitnessTable(&unk_194C64, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3AF8);
  }
  return result;
}

unint64_t sub_C9564()
{
  unint64_t result;

  result = qword_1F3B00;
  if (!qword_1F3B00)
  {
    result = swift_getWitnessTable(&unk_194B84, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3B00);
  }
  return result;
}

unint64_t sub_C95AC()
{
  unint64_t result;

  result = qword_1F3B08;
  if (!qword_1F3B08)
  {
    result = swift_getWitnessTable(&unk_194BAC, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.ManuallyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3B08);
  }
  return result;
}

unint64_t sub_C95F4()
{
  unint64_t result;

  result = qword_1F3B10;
  if (!qword_1F3B10)
  {
    result = swift_getWitnessTable(&unk_194B34, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3B10);
  }
  return result;
}

unint64_t sub_C963C()
{
  unint64_t result;

  result = qword_1F3B18;
  if (!qword_1F3B18)
  {
    result = swift_getWitnessTable(&unk_194B5C, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.AutomaticallyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3B18);
  }
  return result;
}

unint64_t sub_C9684()
{
  unint64_t result;

  result = qword_1F3B20;
  if (!qword_1F3B20)
  {
    result = swift_getWitnessTable(&unk_194AE4, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3B20);
  }
  return result;
}

unint64_t sub_C96CC()
{
  unint64_t result;

  result = qword_1F3B28;
  if (!qword_1F3B28)
  {
    result = swift_getWitnessTable(&unk_194B0C, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.UnknownCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3B28);
  }
  return result;
}

unint64_t sub_C9714()
{
  unint64_t result;

  result = qword_1F3B30;
  if (!qword_1F3B30)
  {
    result = swift_getWitnessTable(&unk_194BD4, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3B30);
  }
  return result;
}

unint64_t sub_C975C()
{
  unint64_t result;

  result = qword_1F3B38;
  if (!qword_1F3B38)
  {
    result = swift_getWitnessTable(&unk_194BFC, &type metadata for BookHistory.MarkedFinishedInfo.Mechanism.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F3B38);
  }
  return result;
}

void sub_C97A0(uint64_t a1@<X8>)
{
  sub_C93E0(a1);
}

uint64_t sub_C97B4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_5235C(v0, qword_1F3B40);
  sub_5216C(v0, (uint64_t)qword_1F3B40);
  return Logger.init(subsystem:category:)(0xD000000000000010, 0x80000000001A0280, 0xD00000000000002FLL, 0x80000000001A1C50);
}

uint64_t sub_C9830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_C9848, 0, 0);
}

uint64_t sub_C9848()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  uint64_t v12;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (uint64_t *)(v1 + 32);
    swift_bridgeObjectRetain(v1);
    do
    {
      v4 = *v3;
      v3 += 10;
      sub_1628D4(&v12, v4);
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v0[2]);
  }
  v0[4] = &_swiftEmptySetSingleton;
  v5 = (_QWORD *)v0[3];
  v6 = v5[5];
  v7 = v5[6];
  sub_49F4(v5 + 2, v6);
  v8 = *(int **)(v7 + 40);
  v11 = (uint64_t (*)(void *, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  v0[5] = v9;
  *v9 = v0;
  v9[1] = sub_C991C;
  return v11(&_swiftEmptySetSingleton, v6, v7);
}

uint64_t sub_C991C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  v3[6] = a1;
  v3[7] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_CA1C4;
  }
  else
  {
    swift_bridgeObjectRelease(v3[4]);
    v5 = sub_C9990;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_C9990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)(void *, uint64_t, uint64_t);
  _QWORD *v40;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    v5 = _swiftEmptyDictionarySingleton;
    v31 = v37;
LABEL_32:
    v31[9] = v4;
    v31[10] = v5;
    v31[8] = &_swiftEmptySetSingleton;
    v32 = (_QWORD *)v31[3];
    swift_bridgeObjectRelease(v1);
    v33 = v32[5];
    v34 = v32[6];
    sub_49F4(v32 + 2, v33);
    v35 = *(int **)(v34 + 48);
    v39 = (uint64_t (*)(void *, uint64_t, uint64_t))((char *)v35 + *v35);
    v36 = (_QWORD *)swift_task_alloc(v35[1]);
    v31[11] = v36;
    *v36 = v31;
    v36[1] = sub_C9CE4;
    return v39(&_swiftEmptySetSingleton, v33, v34);
  }
  v3 = (_BYTE *)(swift_bridgeObjectRetain(v1) + 64);
  v4 = _swiftEmptyDictionarySingleton;
  v5 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if ((*v3 & 1) != 0 || (*(v3 - 16) & 1) != 0)
      goto LABEL_5;
    v6 = *((_QWORD *)v3 - 4);
    v7 = *((_QWORD *)v3 - 3);
    v38 = *((_QWORD *)v3 - 1);
    sub_1628D4((uint64_t *)&v40, v7);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v40 = v5;
    v10 = sub_39228(v6);
    v11 = v5[2];
    v12 = (v9 & 1) == 0;
    result = v11 + v12;
    if (__OFADD__(v11, v12))
      break;
    v14 = v9;
    if (v5[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v9 & 1) != 0)
          goto LABEL_15;
      }
      else
      {
        result = (uint64_t)sub_16B724();
        v5 = v40;
        if ((v14 & 1) != 0)
          goto LABEL_15;
      }
    }
    else
    {
      sub_15A924(result, isUniquelyReferenced_nonNull_native);
      v5 = v40;
      result = sub_39228(v6);
      if ((v14 & 1) != (v15 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v10 = result;
      if ((v14 & 1) != 0)
      {
LABEL_15:
        *(_QWORD *)(v5[7] + 8 * v10) = v7;
        goto LABEL_19;
      }
    }
    v5[(v10 >> 6) + 8] |= 1 << v10;
    v16 = 8 * v10;
    *(_QWORD *)(v5[6] + v16) = v6;
    *(_QWORD *)(v5[7] + v16) = v7;
    v17 = v5[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_36;
    v5[2] = v19;
LABEL_19:
    swift_bridgeObjectRelease(0x8000000000000000);
    v20 = swift_isUniquelyReferenced_nonNull_native(v4);
    v40 = v4;
    v22 = sub_39228(v6);
    v23 = v4[2];
    v24 = (v21 & 1) == 0;
    result = v23 + v24;
    if (__OFADD__(v23, v24))
      goto LABEL_35;
    v25 = v21;
    if (v4[3] >= result)
    {
      if ((v20 & 1) != 0)
      {
        v27 = v38;
        if ((v21 & 1) == 0)
          goto LABEL_26;
      }
      else
      {
        result = (uint64_t)sub_16D4C0();
        v4 = v40;
        v27 = v38;
        if ((v25 & 1) == 0)
          goto LABEL_26;
      }
    }
    else
    {
      sub_15EBD0(result, v20);
      v4 = v40;
      result = sub_39228(v6);
      if ((v25 & 1) != (v26 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v22 = result;
      v27 = v38;
      if ((v25 & 1) == 0)
      {
LABEL_26:
        v4[(v22 >> 6) + 8] |= 1 << v22;
        v28 = 8 * v22;
        *(_QWORD *)(v4[6] + v28) = v6;
        *(_QWORD *)(v4[7] + v28) = v27;
        v29 = v4[2];
        v18 = __OFADD__(v29, 1);
        v30 = v29 + 1;
        if (v18)
          goto LABEL_37;
        v4[2] = v30;
        goto LABEL_4;
      }
    }
    *(_QWORD *)(v4[7] + 8 * v22) = v27;
LABEL_4:
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_5:
    v3 += 40;
    if (!--v2)
    {
      v31 = v37;
      swift_bridgeObjectRelease(v37[6]);
      v1 = v37[6];
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_C9CE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_CA1F8;
  }
  else
  {
    swift_bridgeObjectRelease(v3[8]);
    v5 = sub_C9D58;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_C9D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t result;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    v23 = _swiftEmptyDictionarySingleton;
    goto LABEL_56;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
  v3 = (_BYTE *)(v1 + 65);
  v4 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if ((*(v3 - 1) & 1) != 0 || (*(v3 - 17) & 1) != 0 || !*v3)
      goto LABEL_5;
    v5 = *(_QWORD *)(v3 - 25);
    v6 = *(_QWORD *)(v3 - 9);
    if (v4[2] && (v7 = sub_39228(*(_QWORD *)(v3 - 25)), (v8 & 1) != 0))
    {
      if (*(_QWORD *)(v4[7] + 8 * v7) >= v6)
        goto LABEL_5;
    }
    else if (v6 < 0)
    {
      goto LABEL_5;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    v48 = v4;
    v11 = sub_39228(v5);
    v12 = v4[2];
    v13 = (v10 & 1) == 0;
    result = v12 + v13;
    if (__OFADD__(v12, v13))
      break;
    v15 = v10;
    if (v4[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v10 & 1) == 0)
          goto LABEL_21;
      }
      else
      {
        result = (uint64_t)sub_16D4C0();
        v4 = v48;
        if ((v15 & 1) == 0)
          goto LABEL_21;
      }
    }
    else
    {
      sub_15EBD0(result, isUniquelyReferenced_nonNull_native);
      v4 = v48;
      result = sub_39228(v5);
      if ((v15 & 1) != (v16 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v11 = result;
      if ((v15 & 1) == 0)
      {
LABEL_21:
        v4[(v11 >> 6) + 8] |= 1 << v11;
        v17 = 8 * v11;
        *(_QWORD *)(v4[6] + v17) = v5;
        *(_QWORD *)(v4[7] + v17) = v6;
        v18 = v4[2];
        v19 = __OFADD__(v18, 1);
        v20 = v18 + 1;
        if (v19)
          goto LABEL_59;
        v4[2] = v20;
        goto LABEL_4;
      }
    }
    *(_QWORD *)(v4[7] + 8 * v11) = v6;
LABEL_4:
    swift_bridgeObjectRelease(0x8000000000000000);
LABEL_5:
    v3 += 40;
    if (!--v2)
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v47 + 96));
      v21 = *(_QWORD *)(v1 + 16);
      if (!v21)
      {
        v23 = _swiftEmptyDictionarySingleton;
        v1 = *(_QWORD *)(v47 + 96);
        v0 = v47;
LABEL_56:
        v43 = *(_QWORD *)(v0 + 72);
        v42 = *(_QWORD *)(v0 + 80);
        v44 = *(_QWORD *)(v0 + 16);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v1);
        v48 = &_swiftEmptySetSingleton;
        swift_bridgeObjectRetain(v42);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v23);
        v45 = sub_CA7F4(v44, v42, v43, (uint64_t)v23, (uint64_t *)&v48);
        swift_bridgeObjectRelease_n(v23, 2);
        swift_bridgeObjectRelease_n(v43, 2);
        swift_bridgeObjectRelease_n(v42, 2);
        swift_bridgeObjectRelease(v48);
        return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v45);
      }
      swift_bridgeObjectRetain(*(_QWORD *)(v47 + 96));
      v22 = (_BYTE *)(v1 + 64);
      v23 = _swiftEmptyDictionarySingleton;
      while (1)
      {
        if ((*v22 & 1) != 0 || (*(v22 - 16) & 1) != 0)
          goto LABEL_29;
        v26 = *((_QWORD *)v22 - 4);
        v25 = *((_QWORD *)v22 - 3);
        v27 = *((_QWORD *)v22 - 1);
        if (v4[2] && (v28 = sub_39228(*((_QWORD *)v22 - 3)), (v29 & 1) != 0))
        {
          if (*(_QWORD *)(v4[7] + 8 * v28) >= v27)
            goto LABEL_29;
        }
        else if (v27 < 0)
        {
          goto LABEL_29;
        }
        if (v23[2] && (v30 = sub_39228(v25), (v31 & 1) != 0))
        {
          if (v27 >= *(_QWORD *)(v23[7] + 16 * v30))
            goto LABEL_29;
        }
        else if (v27 == 0x7FFFFFFFFFFFFFFFLL)
        {
          goto LABEL_29;
        }
        v46 = v26;
        v32 = swift_isUniquelyReferenced_nonNull_native(v23);
        v48 = v23;
        v34 = sub_39228(v25);
        v35 = v23[2];
        v36 = (v33 & 1) == 0;
        result = v35 + v36;
        if (__OFADD__(v35, v36))
          goto LABEL_60;
        v37 = v33;
        if (v23[3] >= result)
        {
          if ((v32 & 1) != 0)
          {
            if ((v33 & 1) == 0)
              goto LABEL_49;
          }
          else
          {
            result = (uint64_t)sub_16D650();
            v23 = v48;
            if ((v37 & 1) == 0)
              goto LABEL_49;
          }
        }
        else
        {
          sub_15EE7C(result, v32);
          v23 = v48;
          result = sub_39228(v25);
          if ((v37 & 1) != (v38 & 1))
            return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
          v34 = result;
          if ((v37 & 1) == 0)
          {
LABEL_49:
            v23[(v34 >> 6) + 8] |= 1 << v34;
            *(_QWORD *)(v23[6] + 8 * v34) = v25;
            v39 = (_QWORD *)(v23[7] + 16 * v34);
            *v39 = v27;
            v39[1] = v46;
            v40 = v23[2];
            v19 = __OFADD__(v40, 1);
            v41 = v40 + 1;
            if (v19)
              goto LABEL_61;
            v23[2] = v41;
            goto LABEL_28;
          }
        }
        v24 = (_QWORD *)(v23[7] + 16 * v34);
        *v24 = v27;
        v24[1] = v46;
LABEL_28:
        swift_bridgeObjectRelease(0x8000000000000000);
LABEL_29:
        v22 += 40;
        if (!--v21)
        {
          v0 = v47;
          swift_bridgeObjectRelease(*(_QWORD *)(v47 + 96));
          v1 = *(_QWORD *)(v47 + 96);
          goto LABEL_56;
        }
      }
    }
  }
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
  return result;
}

uint64_t sub_CA1C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CA1F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_CA240(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v8 = *(_QWORD *)a1;
  v51 = *(unsigned __int8 *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(unsigned __int8 *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(unsigned __int8 *)(a1 + 40);
  v54 = *(_QWORD *)(a1 + 48);
  v52 = *(_QWORD *)(a1 + 56);
  v53 = *(_QWORD *)(a1 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_14;
  v50 = *(_QWORD *)a1;
  v17 = sub_39228(v8);
  v8 = v50;
  if ((v18 & 1) == 0
    || !*(_QWORD *)(a3 + 16)
    || (v49 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v17), v19 = sub_39228(v50), v8 = v50, (v20 & 1) == 0)
    || !*(_QWORD *)(a4 + 16)
    || (v21 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8 * v19), v22 = sub_39228(v49), v8 = v50, (v23 & 1) == 0)
    || (v24 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 16 * v22), *v24 >= v21))
  {
LABEL_14:
    v35 = v8;
    sub_1628D4(&v56, v8);
    *a6 = v35;
    a6[1] = v51;
    a6[2] = v9;
    a6[3] = v10;
    a6[4] = v11;
    a6[5] = v12;
    a6[6] = v54;
    a6[7] = v52;
    a6[8] = v53;
    a6[9] = v13;
    sub_40554(v11, v12);
    swift_bridgeObjectRetain(v53);
    v36 = v54;
LABEL_15:
    swift_bridgeObjectRetain(v36);
    return;
  }
  v25 = v24[1];
  if (!sub_28554(v25, *a5))
  {
    sub_1628D4(&v56, v25);
    if (qword_1F00E8 != -1)
      swift_once(&qword_1F00E8, sub_C97B4);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_5216C(v37, (uint64_t)qword_1F3B40);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = swift_slowAlloc(42, -1);
      v42 = swift_slowAlloc(64, -1);
      *(_DWORD *)v41 = 141558787;
      v55 = 1752392040;
      v56 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 4, v41 + 12);
      *(_WORD *)(v41 + 12) = 2081;
      v55 = v25;
      v43 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v45 = v44;
      v55 = sub_9DA98(v43, v44, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease(v45);
      *(_WORD *)(v41 + 22) = 2160;
      v55 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 24, v41 + 32);
      *(_WORD *)(v41 + 32) = 2081;
      v55 = v50;
      v46 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v48 = v47;
      v55 = sub_9DA98(v46, v47, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v41 + 34, v41 + 42);
      swift_bridgeObjectRelease(v48);
      _os_log_impl(&dword_0, v39, v40, "Substituting storeID %{private,mask.hash}s for storeID %{private,mask.hash}s because it is earlier in the series and unpurchased", (uint8_t *)v41, 0x2Au);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }

    *a6 = v25;
    a6[1] = v51;
    a6[2] = v49;
    a6[3] = 0;
    a6[4] = 0;
    a6[5] = 255;
    a6[6] = v54;
    a6[7] = v52;
    a6[8] = v53;
    a6[9] = v13;
    swift_bridgeObjectRetain(v53);
    v36 = v54;
    goto LABEL_15;
  }
  if (qword_1F00E8 != -1)
    swift_once(&qword_1F00E8, sub_C97B4);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_5216C(v26, (uint64_t)qword_1F3B40);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(32, -1);
    *(_DWORD *)v30 = 141558275;
    v55 = 1752392040;
    v56 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2081;
    v55 = v50;
    v32 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v34 = v33;
    v55 = sub_9DA98(v32, v33, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease(v34);
    _os_log_impl(&dword_0, v28, v29, "Already included series storeID %{private,mask.hash}s, won't include again", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }

  *((_OWORD *)a6 + 3) = 0u;
  *((_OWORD *)a6 + 4) = 0u;
  *((_OWORD *)a6 + 1) = 0u;
  *((_OWORD *)a6 + 2) = 0u;
  *(_OWORD *)a6 = 0u;
}

uint64_t type metadata accessor for NextInSeriesProcessorService()
{
  return objc_opt_self(_TtC20BooksPersonalization28NextInSeriesProcessorService);
}

uint64_t sub_CA790(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1F3C0C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_C9848, 0, 0);
}

_QWORD *sub_CA7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    return _swiftEmptyArrayStorage;
  v7 = a1;
  v8 = 0;
  v9 = _swiftEmptyArrayStorage;
  v27 = swift_bridgeObjectRetain(a1);
  do
  {
    v11 = *(_QWORD *)(v7 + v8 + 64);
    v12 = *(_BYTE *)(v7 + v8 + 72);
    v13 = *(_QWORD *)(v7 + v8 + 104);
    v14 = *(_QWORD *)(v7 + v8 + 88);
    v15 = *(_QWORD *)(v7 + v8 + 96);
    v16 = *(_QWORD *)(v7 + v8 + 80);
    v17 = *(_BYTE *)(v7 + v8 + 56);
    v18 = *(_QWORD *)(v7 + v8 + 48);
    v19 = *(_BYTE *)(v7 + v8 + 40);
    v46 = *(_QWORD *)(v7 + v8 + 32);
    v47 = v19;
    v48 = v18;
    v49 = v17;
    v50 = v11;
    v51 = v12;
    v52 = v16;
    v53 = v14;
    v54 = v15;
    v55 = v13;
    sub_40554(v11, v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    sub_CA240((uint64_t)&v46, a2, a3, a4, a5, &v37);
    if (v5)
    {
      sub_40568(v11, v12);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v16);
      return v9;
    }
    sub_40568(v11, v12);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v16);
    v20 = v43;
    if (v43)
    {
      v21 = v37;
      v22 = v38;
      v32 = v39;
      v33 = v40;
      v34 = v41;
      v35 = v42;
      v36 = v44;
      v23 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_2FEC0(0, v9[2] + 1, 1, v9);
      v25 = v9[2];
      v24 = v9[3];
      if (v25 >= v24 >> 1)
        v9 = sub_2FEC0((_QWORD *)(v24 > 1), v25 + 1, 1, v9);
      v9[2] = v25 + 1;
      v10 = &v9[10 * v25];
      v10[4] = v21;
      *((_BYTE *)v10 + 40) = v22 & 1;
      v10[6] = v32;
      *((_BYTE *)v10 + 56) = v33 & 1;
      v10[8] = v34;
      *((_BYTE *)v10 + 72) = v35;
      v10[10] = v20;
      *(_OWORD *)(v10 + 11) = v36;
      v10[13] = v23;
      v7 = v27;
    }
    v8 += 80;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease(v7);
  return v9;
}

uint64_t TabiGenreRecommendationService.fetchRecommendedGenres(with:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1[3] = v0;
  v2 = type metadata accessor for GenreRecommendationWork(0);
  v1[4] = v2;
  v1[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_CAA98, 0, 0);
}

uint64_t sub_CAA98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 32);
  v2 = *(_QWORD *)(v1 + 40);
  UUID.init()(a1);
  v4 = sub_5EDC(&qword_1F3C20);
  v5 = sub_CAB6C();
  WorkService.perform<A, B>(_:)(v2, v3, v4, v5);
  v6 = *(_QWORD *)(v1 + 40);
  sub_CABB4(v6);
  v7 = *(_QWORD *)(v1 + 16);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v7);
}

unint64_t sub_CAB6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F3C28;
  if (!qword_1F3C28)
  {
    v1 = type metadata accessor for GenreRecommendationWork(255);
    result = swift_getWitnessTable(&unk_19B28C, v1);
    atomic_store(result, (unint64_t *)&qword_1F3C28);
  }
  return result;
}

uint64_t sub_CABB4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GenreRecommendationWork(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void TabiGenreRecommendationService.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("BooksPersonalization.TabiGenreRecommendationService", 51, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_CAC58()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for GenreRecommendationWork(0);
  v1[3] = v2;
  v3 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = *v0;
  v1[4] = v3;
  v1[5] = v4;
  return swift_task_switch(sub_CACB4, 0, 0);
}

uint64_t sub_CACB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 24);
  UUID.init()(a1);
  v4 = sub_5EDC(&qword_1F3C20);
  v5 = sub_CAB6C();
  WorkService.perform<A, B>(_:)(v2, v3, v4, v5);
  v6 = *(_QWORD *)(v1 + 32);
  sub_CABB4(v6);
  v7 = *(_QWORD *)(v1 + 16);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v7);
}

uint64_t type metadata accessor for TabiGenreRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization30TabiGenreRecommendationService);
}

uint64_t method lookup function for TabiGenreRecommendationService(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TabiGenreRecommendationService);
}

uint64_t PersonalizationMetadataRequest.bookIDs.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for PersonalizationMetadataRequest(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 20)));
}

uint64_t type metadata accessor for PersonalizationMetadataRequest(uint64_t a1)
{
  uint64_t result;

  result = qword_1F3CB8;
  if (!qword_1F3CB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PersonalizationMetadataRequest);
  return result;
}

uint64_t PersonalizationMetadataRequest.init(uuid:bookIDs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for PersonalizationMetadataRequest(0);
  *(_QWORD *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Book.PersonalizationMetadata()
{
  return &type metadata for Book.PersonalizationMetadata;
}

uint64_t *initializeBufferWithCopyOfBuffer for PersonalizationMetadataRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_bridgeObjectRetain(v9);
  }
  return a1;
}

uint64_t destroy for PersonalizationMetadataRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t initializeWithCopy for PersonalizationMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for PersonalizationMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t initializeWithTake for PersonalizationMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PersonalizationMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PersonalizationMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CB0E4);
}

uint64_t sub_CB0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PersonalizationMetadataRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_CB16C);
}

uint64_t sub_CB16C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_CB1E4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_CB258(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  v9 = _swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_7;
LABEL_4:
  v10 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v10 | (v8 << 6); ; i = __clz(__rbit64(v14)) + (v8 << 6))
  {
    v12 = *(_QWORD *)(a1 + 56) + 552 * i;
    if ((*(_BYTE *)(v12 + 40) & 1) != 0)
    {
      if (v5)
        goto LABEL_4;
    }
    else
    {
      v18 = *(_QWORD *)(v12 + 32);
      result = swift_isUniquelyReferenced_nonNull_native(v9);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_2FA6C(0, v9[2] + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v17 = v9[2];
      v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        result = (uint64_t)sub_2FA6C((_QWORD *)(v16 > 1), v17 + 1, 1, v9);
        v9 = (_QWORD *)result;
      }
      v9[2] = v17 + 1;
      v9[v17 + 4] = v18;
      if (v5)
        goto LABEL_4;
    }
LABEL_7:
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v13 >= v6)
      goto LABEL_29;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v6)
        goto LABEL_29;
      v14 = *(_QWORD *)(v2 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v6)
          goto LABEL_29;
        v14 = *(_QWORD *)(v2 + 8 * v8);
        if (!v14)
        {
          v8 = v13 + 3;
          if (v13 + 3 >= v6)
            goto LABEL_29;
          v14 = *(_QWORD *)(v2 + 8 * v8);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v14 - 1) & v14;
  }
  v15 = v13 + 4;
  if (v15 >= v6)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v9;
  }
  v14 = *(_QWORD *)(v2 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v6)
      goto LABEL_29;
    v14 = *(_QWORD *)(v2 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

_QWORD *sub_CB444(uint64_t a1)
{
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *result;
  int64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int64_t v29;
  _BYTE __src[545];
  _QWORD __dst[70];
  _QWORD *v32;

  v2 = *(_QWORD *)(a1 + 16);
  v32 = _swiftEmptyArrayStorage;
  sub_344C4(0, v2, 0);
  v3 = _swiftEmptyArrayStorage;
  v28 = a1 + 56;
  v4 = -1;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(a1 + 56);
  v29 = (unint64_t)(63 - v5) >> 6;
  if (!v2)
  {
    result = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
LABEL_28:
    if (!v6)
      goto LABEL_30;
LABEL_29:
    v19 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    for (i = v19 | (v8 << 6); ; i = __clz(__rbit64(v22)) + (v8 << 6))
    {
      memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 48) + 552 * i), 0x221uLL);
      sub_6100(__dst);
      v32 = v3;
      v25 = v3[2];
      v24 = v3[3];
      if (v25 >= v24 >> 1)
      {
        sub_344C4(v24 > 1, v25 + 1, 1);
        v3 = v32;
      }
      v26 = __dst[0];
      memcpy(__src, __dst, sizeof(__src));
      v3[2] = v25 + 1;
      v27 = &v3[70 * v25];
      v27[4] = v26;
      result = memcpy(v27 + 5, __src, 0x221uLL);
      if (v6)
        goto LABEL_29;
LABEL_30:
      v21 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
        goto LABEL_52;
      }
      if (v21 >= v29)
        goto LABEL_50;
      v22 = *(_QWORD *)(v28 + 8 * v21);
      ++v8;
      if (!v22)
      {
        v8 = v21 + 1;
        if (v21 + 1 >= v29)
          goto LABEL_50;
        v22 = *(_QWORD *)(v28 + 8 * v8);
        if (!v22)
        {
          v8 = v21 + 2;
          if (v21 + 2 >= v29)
            goto LABEL_50;
          v22 = *(_QWORD *)(v28 + 8 * v8);
          if (!v22)
          {
            v8 = v21 + 3;
            if (v21 + 3 >= v29)
              goto LABEL_50;
            v22 = *(_QWORD *)(v28 + 8 * v8);
            if (!v22)
            {
              v23 = v21 + 4;
              if (v23 >= v29)
              {
LABEL_50:
                swift_release(a1);
                return v3;
              }
              v22 = *(_QWORD *)(v28 + 8 * v23);
              if (!v22)
              {
                while (1)
                {
                  v8 = v23 + 1;
                  if (__OFADD__(v23, 1))
                    break;
                  if (v8 >= v29)
                    goto LABEL_50;
                  v22 = *(_QWORD *)(v28 + 8 * v8);
                  ++v23;
                  if (v22)
                    goto LABEL_45;
                }
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
                goto LABEL_57;
              }
              v8 = v23;
            }
          }
        }
      }
LABEL_45:
      v6 = (v22 - 1) & v22;
    }
  }
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  v9 = 0;
  while (v6)
  {
    v10 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v11 = v10 | (v8 << 6);
LABEL_23:
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 48) + 552 * v11), 0x221uLL);
    sub_6100(__dst);
    v32 = v3;
    v16 = v3[2];
    v15 = v3[3];
    if (v16 >= v15 >> 1)
    {
      sub_344C4(v15 > 1, v16 + 1, 1);
      v3 = v32;
    }
    ++v9;
    v17 = __dst[0];
    memcpy(__src, __dst, sizeof(__src));
    v3[2] = v16 + 1;
    v18 = &v3[70 * v16];
    v18[4] = v17;
    result = memcpy(v18 + 5, __src, 0x221uLL);
    if (v9 == v2)
      goto LABEL_28;
  }
  v12 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v12 >= v29)
    goto LABEL_53;
  v13 = *(_QWORD *)(v28 + 8 * v12);
  ++v8;
  if (v13)
    goto LABEL_22;
  v8 = v12 + 1;
  if (v12 + 1 >= v29)
    goto LABEL_54;
  v13 = *(_QWORD *)(v28 + 8 * v8);
  if (v13)
    goto LABEL_22;
  v8 = v12 + 2;
  if (v12 + 2 >= v29)
    goto LABEL_58;
  v13 = *(_QWORD *)(v28 + 8 * v8);
  if (v13)
    goto LABEL_22;
  v8 = v12 + 3;
  if (v12 + 3 >= v29)
    goto LABEL_59;
  v13 = *(_QWORD *)(v28 + 8 * v8);
  if (v13)
  {
LABEL_22:
    v6 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v8 << 6);
    goto LABEL_23;
  }
  v14 = v12 + 4;
  if (v14 >= v29)
    goto LABEL_60;
  v13 = *(_QWORD *)(v28 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      goto LABEL_56;
    if (v8 >= v29)
      break;
    v13 = *(_QWORD *)(v28 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

Swift::Int sub_CB84C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0AF4(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_CC99C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_CB8B4(uint64_t a1, const void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_QWORD *)(v3 + 1120) = v2;
  v6 = sub_5EDC(&qword_1F3DB8);
  *(_QWORD *)(v3 + 1128) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 1136) = v7;
  *(_QWORD *)(v3 + 1144) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)(v3 + 1249) = *(_BYTE *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(v3 + 1152) = *(_QWORD *)(a1 + 16);
  memcpy((void *)(v3 + 16), a2, 0x440uLL);
  v9 = *(_QWORD *)(v3 + 440);
  v10 = (_QWORD *)swift_task_alloc(dword_1F3DC4);
  *(_QWORD *)(v3 + 1160) = v10;
  *v10 = v3;
  v10[1] = sub_CB98C;
  v10[142] = v9;
  v10[141] = v3 + 16;
  v10[140] = v2;
  v10[139] = v8;
  return swift_task_switch(sub_CC478, 0, 0);
}

uint64_t sub_CB98C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 1160);
  v4 = *v2;
  *(_QWORD *)(v4 + 1168) = a1;
  *(_QWORD *)(v4 + 1176) = v1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_CBA0C, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v4 + 1144));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_CBA0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  int64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  _QWORD *v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v38;

  v1 = *(_QWORD *)(v0 + 1176);
  v2 = *(_QWORD *)(v0 + 1168);
  v3 = *(_QWORD **)(v0 + 1120);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = v3[5];
  v6 = v3[6];
  sub_49F4(v3 + 2, v5);
  v7 = swift_bridgeObjectRetain(v2);
  v8 = sub_38614(v7);
  swift_bridgeObjectRelease(v2);
  v9 = (*(uint64_t (**)(void *(*)(uint64_t), _QWORD, _QWORD *, void *, void *, uint64_t, uint64_t))(v6 + 8))(sub_CC644, 0, v8, &type metadata for UInt64, &protocol witness table for UInt64, v5, v6);
  swift_release(v8);
  v10 = sub_CC760(v9);
  swift_bridgeObjectRelease(v9);
  v11 = swift_bridgeObjectRetain(v10);
  v12 = sub_38D14(v11);
  swift_release(v10);
  v38 = v12;
  sub_CB84C((uint64_t *)&v38);
  if (v1)
    return swift_release(v38);
  swift_release(v10);
  v14 = v38;
  v15 = v38[2];
  if (v15)
  {
    v38 = _swiftEmptyArrayStorage;
    sub_340AC(0, v15, 0);
    v16 = v38;
    v17 = v38[2];
    v18 = 4;
    do
    {
      v19 = v14[v18];
      v38 = v16;
      v20 = v16[3];
      if (v17 >= v20 >> 1)
      {
        sub_340AC(v20 > 1, v17 + 1, 1);
        v16 = v38;
      }
      v16[2] = v17 + 1;
      v16[v17 + 4] = v19;
      v18 += 2;
      ++v17;
      --v15;
    }
    while (v15);
    swift_release(v14);
  }
  else
  {
    swift_release(v38);
    v16 = _swiftEmptyArrayStorage;
  }
  v21 = *(_BYTE *)(v0 + 1249);
  v22 = *(_QWORD **)(v0 + 1120);
  sub_71068(v0 + 16);
  v23 = sub_CD304((uint64_t)v16, v0 + 16);
  sub_5B70(v0 + 16);
  swift_bridgeObjectRelease(v16);
  v24 = sub_2CCAC(v4, v23);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  *(_QWORD *)(v0 + 1184) = v24;
  *(_QWORD *)(v0 + 1192) = v25;
  *(_QWORD *)(v0 + 1200) = v27;
  *(_QWORD *)(v0 + 1208) = v29;
  v31 = v22 + 7;
  v32 = v22[10];
  v33 = v22[11];
  sub_49F4(v31, v32);
  v34 = sub_3D978(v26, v28, v30);
  *(_QWORD *)(v0 + 1216) = v34;
  *(_BYTE *)(v0 + 1248) = v21;
  v35 = *(int **)(v33 + 8);
  v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v35 + *v35);
  v36 = (_QWORD *)swift_task_alloc(v35[1]);
  *(_QWORD *)(v0 + 1224) = v36;
  *v36 = v0;
  v36[1] = sub_CBCB8;
  return v37(v34, v0 + 1248, v32, v33);
}

uint64_t sub_CBCB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1224);
  v3[154] = a1;
  v3[155] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[146];
    swift_bridgeObjectRelease(v3[152]);
    swift_bridgeObjectRelease(v5);
    v6 = sub_CC418;
  }
  else
  {
    swift_bridgeObjectRelease(v3[152]);
    v6 = sub_CBD44;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_CBD44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  int64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  double v52;
  uint64_t v53;
  char v54;
  char v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  double v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  int64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101[2];

  v1 = *(_QWORD *)(v0 + 1168);
  v2 = *(_QWORD *)(v0 + 1152);
  v100 = v2;
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  sub_8F780(v1);
  v3 = sub_CB258(v1);
  swift_bridgeObjectRelease(v1);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 32);
    do
    {
      v6 = *v5++;
      sub_1628D4(v101, v6);
      --v4;
    }
    while (v4);
  }
  v7 = *(_QWORD *)(v0 + 1208);
  v8 = *(_QWORD *)(v0 + 1200);
  result = swift_bridgeObjectRelease(v3);
  v10 = v7 >> 1;
  v11 = *(_QWORD *)(v0 + 1232);
  v12 = _swiftEmptyArrayStorage;
  v78 = v0;
  if (v8 == v7 >> 1)
    goto LABEL_31;
  v13 = *(_QWORD *)(v0 + 1200);
  if (v13 < v10)
  {
    v73 = *(_QWORD *)(v0 + 1136);
    v74 = (_QWORD *)(v0 + 1112);
    swift_unknownObjectRetain(*(_QWORD *)(v0 + 1184));
    v75 = v7 >> 1;
    v76 = v11;
    do
    {
      if (*(_QWORD *)(v11 + 16))
      {
        v14 = sub_39228(*(_QWORD *)(*(_QWORD *)(v0 + 1192) + 8 * v13));
        v15 = _swiftEmptyArrayStorage;
        if ((v16 & 1) != 0)
        {
          v17 = *(_QWORD *)(v0 + 1144);
          v18 = *(_QWORD *)(v0 + 1128);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v73 + 16))(v17, *(_QWORD *)(v11 + 56) + *(_QWORD *)(v73 + 72) * v14, v18);
          NonEmpty.elements.getter(v74, v18);
          v15 = *(_QWORD **)(v0 + 1112);
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v17, v18);
        }
      }
      else
      {
        v15 = _swiftEmptyArrayStorage;
      }
      v85 = v15[2];
      if (v85)
      {
        v80 = v12;
        v82 = v13;
        v19 = 0;
        v79 = v15;
        v94 = *(_QWORD *)(v100 + 16);
        v97 = v15 + 4;
        v20 = v100 + 56;
        while (1)
        {
          v21 = &v97[9 * v19];
          v22 = *v21;
          v91 = *((_BYTE *)v21 + 8);
          v23 = v21[2];
          v88 = *((_BYTE *)v21 + 24);
          v24 = v21[4];
          v25 = *((_BYTE *)v21 + 40);
          v27 = v21[6];
          v26 = v21[7];
          v28 = v21[8];
          if (!v94)
            break;
          v29 = static Hasher._hash(seed:_:)(*(_QWORD *)(v100 + 40), v22);
          v30 = -1 << *(_BYTE *)(v100 + 32);
          v31 = v29 & ~v30;
          if (((*(_QWORD *)(v20 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
            break;
          v32 = *(_QWORD *)(v100 + 48);
          if (*(_QWORD *)(v32 + 8 * v31) != v22)
          {
            v33 = ~v30;
            do
            {
              v31 = (v31 + 1) & v33;
              if (((*(_QWORD *)(v20 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) == 0)
                goto LABEL_23;
            }
            while (*(_QWORD *)(v32 + 8 * v31) != v22);
          }
          if (++v19 == v85)
          {
            swift_bridgeObjectRelease(v79);
            v0 = v78;
            v12 = v80;
            goto LABEL_28;
          }
        }
LABEL_23:
        sub_40554(v24, v25);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v27);
        swift_bridgeObjectRelease(v79);
        sub_1628D4(v101, v22);
        v12 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0)
          v12 = sub_307BC(0, v80[2] + 1, 1, v80);
        v35 = v12[2];
        v34 = v12[3];
        if (v35 >= v34 >> 1)
          v12 = sub_307BC((_QWORD *)(v34 > 1), v35 + 1, 1, v12);
        v12[2] = v35 + 1;
        v36 = &v12[9 * v35];
        v36[4] = v22;
        *((_BYTE *)v36 + 40) = v91;
        v36[6] = v23;
        *((_BYTE *)v36 + 56) = v88;
        v36[8] = v24;
        *((_BYTE *)v36 + 72) = v25;
        v36[10] = v27;
        v36[11] = v26;
        v36[12] = v28;
        v0 = v78;
LABEL_28:
        v10 = v75;
        v11 = v76;
        v13 = v82;
      }
      else
      {
        swift_bridgeObjectRelease(v15);
      }
      ++v13;
    }
    while (v13 != v10);
    v11 = *(_QWORD *)(v0 + 1232);
    swift_unknownObjectRelease(*(_QWORD *)(v0 + 1184));
LABEL_31:
    swift_bridgeObjectRelease(v11);
    v37 = v12[2];
    if (!v37)
    {
      v59 = *(_QWORD *)(v0 + 1184);
LABEL_44:
      swift_unknownObjectRelease(v59);
      swift_bridgeObjectRelease(v12);
      v60 = _swiftEmptyArrayStorage;
LABEL_45:
      v61 = *(_QWORD *)(v0 + 1144);
      swift_bridgeObjectRelease(v100);
      swift_task_dealloc(v61);
      return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v60);
    }
    v38 = v37 - 1;
    v77 = swift_task_alloc(32);
    *(_QWORD *)(v77 + 16) = v38;
    v101[0] = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v12);
    sub_342E4(0, 0, 0);
    v39 = v101[0];
    v40 = v12;
    v41 = v12[2];
    v42 = swift_bridgeObjectRetain(v40);
    v81 = (_QWORD *)v42;
    if (v41)
    {
      v43 = v42 + 48;
      do
      {
        v95 = *(_QWORD *)(v43 - 16);
        v92 = *(_BYTE *)(v43 - 8);
        v89 = *(_QWORD *)v43;
        v86 = *(_BYTE *)(v43 + 8);
        v44 = *(_QWORD *)(v43 + 16);
        v45 = *(_BYTE *)(v43 + 24);
        v46 = *(_QWORD *)(v43 + 32);
        v83 = *(_QWORD *)(v43 + 40);
        v47 = *(_QWORD *)(v43 + 48);
        sub_40554(v44, v45);
        v101[0] = v39;
        v49 = *(_QWORD *)(v39 + 16);
        v48 = *(_QWORD *)(v39 + 24);
        v98 = v49 + 1;
        swift_bridgeObjectRetain(v46);
        swift_bridgeObjectRetain(v47);
        if (v49 >= v48 >> 1)
        {
          sub_342E4(v48 > 1, v98, 1);
          v39 = v101[0];
        }
        *(_QWORD *)(v39 + 16) = v98;
        v50 = v39 + 80 * v49;
        *(_QWORD *)(v50 + 32) = v95;
        *(_BYTE *)(v50 + 40) = v92;
        *(_QWORD *)(v50 + 48) = v89;
        *(_BYTE *)(v50 + 56) = v86;
        *(_QWORD *)(v50 + 64) = v44;
        *(_BYTE *)(v50 + 72) = v45;
        *(_QWORD *)(v50 + 80) = v46;
        *(_QWORD *)(v50 + 88) = v83;
        *(_QWORD *)(v50 + 96) = v47;
        *(double *)(v50 + 104) = (double)v38--;
        v43 += 72;
        --v41;
      }
      while (v41);
    }
    v12 = v81;
    swift_bridgeObjectRelease_n(v81, 2);
    swift_task_dealloc(v77);
    v51 = sub_27798((void (*)(uint64_t *__return_ptr, uint64_t *))sub_12B32C, 0, v39);
    v52 = COERCE_DOUBLE(sub_12AFB4((uint64_t)v51));
    v53 = v39;
    v55 = v54;
    swift_bridgeObjectRelease(v51);
    if ((v55 & 1) != 0)
    {
      v0 = v78;
    }
    else
    {
      v84 = v53;
      v56 = v52;
      v0 = v78;
      if (v52 == 0.0)
      {
        v57 = *(_QWORD *)(v78 + 1184);
        v58 = v53;
LABEL_43:
        swift_release(v58);
        v59 = v57;
        goto LABEL_44;
      }
      v62 = *(_QWORD *)(v53 + 16);
      if (v62)
      {
        v101[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_342E4(0, v62, 0);
        v63 = 0;
        v60 = (_QWORD *)v101[0];
        do
        {
          v99 = *(_QWORD *)(v53 + v63 + 32);
          v96 = *(_BYTE *)(v53 + v63 + 40);
          v93 = *(_QWORD *)(v53 + v63 + 48);
          v90 = *(_BYTE *)(v53 + v63 + 56);
          v64 = *(_QWORD *)(v53 + v63 + 64);
          v65 = *(_BYTE *)(v53 + v63 + 72);
          v66 = *(_QWORD *)(v53 + v63 + 80);
          v87 = *(_QWORD *)(v53 + v63 + 88);
          v67 = *(_QWORD *)(v53 + v63 + 96);
          v68 = *(double *)(v53 + v63 + 104);
          sub_40554(v64, v65);
          v101[0] = (uint64_t)v60;
          v70 = v60[2];
          v69 = v60[3];
          swift_bridgeObjectRetain(v66);
          swift_bridgeObjectRetain(v67);
          if (v70 >= v69 >> 1)
          {
            sub_342E4(v69 > 1, v70 + 1, 1);
            v60 = (_QWORD *)v101[0];
          }
          v60[2] = v70 + 1;
          v71 = &v60[10 * v70];
          v71[4] = v99;
          *((_BYTE *)v71 + 40) = v96;
          v71[6] = v93;
          *((_BYTE *)v71 + 56) = v90;
          v71[8] = v64;
          *((_BYTE *)v71 + 72) = v65;
          v53 = v84;
          v71[10] = v66;
          v71[11] = v87;
          v71[12] = v67;
          *((double *)v71 + 13) = v68 / v56;
          v63 += 80;
          --v62;
        }
        while (v62);
        v0 = v78;
        v72 = *(_QWORD *)(v78 + 1184);
        swift_release(v84);
        swift_unknownObjectRelease(v72);
        swift_bridgeObjectRelease(v81);
        goto LABEL_45;
      }
    }
    v57 = *(_QWORD *)(v0 + 1184);
    v58 = v53;
    goto LABEL_43;
  }
  __break(1u);
  return result;
}

uint64_t sub_CC418()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 1184));
  swift_task_dealloc(*(_QWORD *)(v0 + 1144));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CC454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[142] = a7;
  v7[141] = a6;
  v7[140] = a5;
  v7[139] = a2;
  return swift_task_switch(sub_CC478, 0, 0);
}

uint64_t sub_CC478()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  const void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  int *v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 1112);
  if (v1)
  {
    v2 = sub_CB444(v1);
    v3 = v2[2];
    if (v3)
    {
      sub_5EDC(&qword_1F3DD0);
      v4 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v3);
    }
    else
    {
      v4 = _swiftEmptyDictionarySingleton;
    }
    v13 = v4;
    sub_CD490((uint64_t)v2, 1, (uint64_t *)&v13);
    swift_bridgeObjectRelease(v2);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v13);
  }
  else
  {
    v5 = *(const void **)(v0 + 1128);
    v6 = *(_QWORD **)(v0 + 1120);
    v7 = v6[15];
    v8 = v6[16];
    sub_49F4(v6 + 12, v7);
    memcpy((void *)(v0 + 16), v5, 0x440uLL);
    v9 = *(int **)(v8 + 8);
    v12 = (int *)((char *)v9 + *v9);
    v10 = (_QWORD *)swift_task_alloc(v9[1]);
    *(_QWORD *)(v0 + 1144) = v10;
    *v10 = v0;
    v10[1] = sub_CC5C4;
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v12)(v0 + 16, *(_QWORD *)(v0 + 1136), v7, v8);
  }
}

uint64_t sub_CC5C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(*v2 + 1144);
  v5 = *v2;
  *(_QWORD *)(v5 + 1152) = v1;
  swift_task_dealloc(v4);
  if (v1)
    return swift_task_switch(sub_CC638, 0, 0);
  else
    return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_CC638()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_CC644(uint64_t a1)
{
  uint64_t v1;
  void *result;
  _BYTE v3[377];
  _BYTE v4[384];
  _BYTE __src[384];

  v1 = *(_QWORD *)(a1 + 24);
  sub_41300(a1 + 152, (uint64_t)v4, &qword_1F2D68);
  sub_41300((uint64_t)v4, (uint64_t)__src, &qword_1F2D68);
  result = (void *)sub_8E6A0((uint64_t)__src);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    memcpy(v3, __src, sizeof(v3));
    if ((sub_C1614() & 1) == 0)
      return &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain(v1);
    return (void *)v1;
  }
  return result;
}

uint64_t type metadata accessor for SeedBasedMoreFromYourAuthorsService()
{
  return objc_opt_self(_TtC20BooksPersonalization35SeedBasedMoreFromYourAuthorsService);
}

uint64_t sub_CC700(uint64_t a1, const void *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1F3DB4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_70AB4;
  return sub_CB8B4(a1, a2);
}

uint64_t sub_CC760(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t result;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;

  v2 = type metadata accessor for AttributeAffinityResult(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_5EDC(&qword_1F1D08);
  result = static _DictionaryStorage.copy(original:)(a1);
  v6 = (_QWORD *)result;
  v7 = 0;
  v8 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v25 = (unint64_t)(v9 + 63) >> 6;
  v12 = result + 64;
  if ((v10 & v8) == 0)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (i = v13 | (v7 << 6); ; i = __clz(__rbit64(v16)) + (v7 << 6))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i);
    sub_412BC(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v26 + 72) * i, (uint64_t)v4);
    v19 = *v4;
    result = sub_CD454((uint64_t)v4);
    *(_QWORD *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    *(_QWORD *)(v6[6] + 8 * i) = v18;
    *(_QWORD *)(v6[7] + 8 * i) = v19;
    v20 = v6[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v6[2] = v22;
    if (v11)
      goto LABEL_4;
LABEL_5:
    v15 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_24;
    if (v15 >= v25)
      return (uint64_t)v6;
    v16 = *(_QWORD *)(v24 + 8 * v15);
    ++v7;
    if (!v16)
    {
      v7 = v15 + 1;
      if (v15 + 1 >= v25)
        return (uint64_t)v6;
      v16 = *(_QWORD *)(v24 + 8 * v7);
      if (!v16)
      {
        v7 = v15 + 2;
        if (v15 + 2 >= v25)
          return (uint64_t)v6;
        v16 = *(_QWORD *)(v24 + 8 * v7);
        if (!v16)
          break;
      }
    }
LABEL_18:
    v11 = (v16 - 1) & v16;
  }
  v17 = v15 + 3;
  if (v17 >= v25)
    return (uint64_t)v6;
  v16 = *(_QWORD *)(v24 + 8 * v17);
  if (v16)
  {
    v7 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v25)
      return (uint64_t)v6;
    v16 = *(_QWORD *)(v24 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_25:
  __break(1u);
  return result;
}

Swift::Int sub_CC99C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  Swift::Int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  Swift::Int v15;
  double v16;
  double v17;
  double *v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  double *v29;
  double v30;
  Swift::Int v31;
  double *v32;
  double v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  Swift::Int v105;
  Swift::Int v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v87 = *a1;
      v88 = *a1 + 8;
      v89 = -1;
      v90 = 1;
      while (1)
      {
        v91 = *(double *)(v87 + 16 * v90 + 8);
        v92 = v89;
        v93 = v88;
        do
        {
          if (*(double *)v93 >= v91)
            break;
          if (!v87)
            goto LABEL_143;
          v94 = *(_QWORD *)(v93 + 8);
          *(_OWORD *)(v93 + 8) = *(_OWORD *)(v93 - 8);
          *(_QWORD *)(v93 - 8) = v94;
          *(double *)v93 = v91;
          v93 -= 16;
        }
        while (!__CFADD__(v92++, 1));
        ++v90;
        v88 += 16;
        --v89;
        if (v90 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v14 = _swiftEmptyArrayStorage[2];
      v13 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_105;
    }
    v104 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_5EDC(&qword_1F3DC8);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v104 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v12 = *a1;
  v103 = *a1 + 40;
  v13 = (char *)_swiftEmptyArrayStorage;
  v105 = v6;
  v106 = v3;
  v107 = v12;
  while (1)
  {
    v15 = v11++;
    if (v11 < v3)
    {
      v16 = *(double *)(v12 + 16 * v11 + 8);
      v17 = *(double *)(v12 + 16 * v15 + 8);
      v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        v18 = (double *)(v103 + 16 * v15);
        v19 = v16;
        while (1)
        {
          v20 = v19;
          v19 = *v18;
          if (v17 < v16 == v20 >= *v18)
            break;
          ++v11;
          v18 += 2;
          if (v3 == v11)
          {
            v11 = v3;
            break;
          }
        }
      }
      if (v17 < v16)
      {
        if (v11 < v15)
          goto LABEL_140;
        if (v15 < v11)
        {
          v21 = 16 * v11;
          v22 = 16 * v15;
          v23 = v11;
          v24 = v15;
          do
          {
            if (v24 != --v23)
            {
              if (!v12)
                goto LABEL_146;
              v25 = v12 + v21;
              v26 = *(_QWORD *)(v12 + v22);
              v27 = *(_QWORD *)(v12 + v22 + 8);
              *(_OWORD *)(v12 + v22) = *(_OWORD *)(v12 + v21 - 16);
              *(_QWORD *)(v25 - 16) = v26;
              *(_QWORD *)(v25 - 8) = v27;
            }
            ++v24;
            v21 -= 16;
            v22 += 16;
          }
          while (v24 < v23);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v15))
        goto LABEL_138;
      if (v11 - v15 < v6)
      {
        v28 = v15 + v6;
        if (__OFADD__(v15, v6))
          goto LABEL_141;
        if (v28 >= v3)
          v28 = v3;
        if (v28 < v15)
          goto LABEL_142;
        if (v11 != v28)
        {
          v29 = (double *)(v12 + 16 * v11);
          do
          {
            v30 = *(double *)(v12 + 16 * v11 + 8);
            v31 = v15;
            v32 = v29;
            do
            {
              if (*(v32 - 1) >= v30)
                break;
              if (!v12)
                goto LABEL_144;
              v33 = *v32;
              *(_OWORD *)v32 = *((_OWORD *)v32 - 1);
              *(v32 - 1) = v30;
              *(v32 - 2) = v33;
              v32 -= 2;
              ++v31;
            }
            while (v11 != v31);
            ++v11;
            v29 += 2;
          }
          while (v11 != v28);
          v11 = v28;
        }
      }
    }
    if (v11 < v15)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
      v13 = sub_4E4E4(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v35 = *((_QWORD *)v13 + 2);
    v34 = *((_QWORD *)v13 + 3);
    v14 = v35 + 1;
    v12 = v107;
    if (v35 >= v34 >> 1)
    {
      v84 = sub_4E4E4((char *)(v34 > 1), v35 + 1, 1, v13);
      v12 = v107;
      v13 = v84;
    }
    *((_QWORD *)v13 + 2) = v14;
    v36 = v13 + 32;
    v37 = &v13[16 * v35 + 32];
    *(_QWORD *)v37 = v15;
    *((_QWORD *)v37 + 1) = v11;
    if (v35)
      break;
    v14 = 1;
LABEL_15:
    v6 = v105;
    v3 = v106;
    if (v11 >= v106)
    {
      v10 = v104;
LABEL_105:
      v86 = v13;
      v104 = v10;
      if (v14 < 2)
        goto LABEL_95;
      v96 = *v102;
      while (1)
      {
        v97 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v96)
          goto LABEL_147;
        v85 = v86;
        v98 = *(_QWORD *)&v86[16 * v97 + 32];
        v99 = *(_QWORD *)&v86[16 * v14 + 24];
        sub_CD07C((char *)(v96 + 16 * v98), (char *)(v96 + 16 * *(_QWORD *)&v86[16 * v14 + 16]), v96 + 16 * v99, __dst);
        if (v1)
          goto LABEL_94;
        if (v99 < v98)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
          v85 = sub_4ECA8((uint64_t)v85);
        if (v97 >= *((_QWORD *)v85 + 2))
          goto LABEL_136;
        v100 = &v85[16 * v97 + 32];
        *(_QWORD *)v100 = v98;
        *((_QWORD *)v100 + 1) = v99;
        v101 = *((_QWORD *)v85 + 2);
        if (v14 > v101)
          goto LABEL_137;
        memmove(&v85[16 * v14 + 16], &v85[16 * v14 + 32], 16 * (v101 - v14));
        v86 = v85;
        *((_QWORD *)v85 + 2) = v101 - 1;
        v14 = v101 - 1;
        if (v101 <= 2)
          goto LABEL_95;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v38 = v14 - 1;
    if (v14 >= 4)
    {
      v43 = &v36[16 * v14];
      v44 = *((_QWORD *)v43 - 8);
      v45 = *((_QWORD *)v43 - 7);
      v49 = __OFSUB__(v45, v44);
      v46 = v45 - v44;
      if (v49)
        goto LABEL_122;
      v48 = *((_QWORD *)v43 - 6);
      v47 = *((_QWORD *)v43 - 5);
      v49 = __OFSUB__(v47, v48);
      v41 = v47 - v48;
      v42 = v49;
      if (v49)
        goto LABEL_123;
      v50 = v14 - 2;
      v51 = &v36[16 * v14 - 32];
      v53 = *(_QWORD *)v51;
      v52 = *((_QWORD *)v51 + 1);
      v49 = __OFSUB__(v52, v53);
      v54 = v52 - v53;
      if (v49)
        goto LABEL_125;
      v49 = __OFADD__(v41, v54);
      v55 = v41 + v54;
      if (v49)
        goto LABEL_128;
      if (v55 >= v46)
      {
        v73 = &v36[16 * v38];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v49 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v49)
          goto LABEL_132;
        v66 = v41 < v76;
        goto LABEL_83;
      }
    }
    else
    {
      if (v14 != 3)
      {
        v67 = *((_QWORD *)v13 + 4);
        v68 = *((_QWORD *)v13 + 5);
        v49 = __OFSUB__(v68, v67);
        v60 = v68 - v67;
        v61 = v49;
        goto LABEL_77;
      }
      v40 = *((_QWORD *)v13 + 4);
      v39 = *((_QWORD *)v13 + 5);
      v49 = __OFSUB__(v39, v40);
      v41 = v39 - v40;
      v42 = v49;
    }
    if ((v42 & 1) != 0)
      goto LABEL_124;
    v50 = v14 - 2;
    v56 = &v36[16 * v14 - 32];
    v58 = *(_QWORD *)v56;
    v57 = *((_QWORD *)v56 + 1);
    v59 = __OFSUB__(v57, v58);
    v60 = v57 - v58;
    v61 = v59;
    if (v59)
      goto LABEL_127;
    v62 = &v36[16 * v38];
    v64 = *(_QWORD *)v62;
    v63 = *((_QWORD *)v62 + 1);
    v49 = __OFSUB__(v63, v64);
    v65 = v63 - v64;
    if (v49)
      goto LABEL_130;
    if (__OFADD__(v60, v65))
      goto LABEL_131;
    if (v60 + v65 >= v41)
    {
      v66 = v41 < v65;
LABEL_83:
      if (v66)
        v38 = v50;
      goto LABEL_85;
    }
LABEL_77:
    if ((v61 & 1) != 0)
      goto LABEL_126;
    v69 = &v36[16 * v38];
    v71 = *(_QWORD *)v69;
    v70 = *((_QWORD *)v69 + 1);
    v49 = __OFSUB__(v70, v71);
    v72 = v70 - v71;
    if (v49)
      goto LABEL_129;
    if (v72 < v60)
      goto LABEL_15;
LABEL_85:
    v77 = v38 - 1;
    if (v38 - 1 >= v14)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v12)
      goto LABEL_145;
    v78 = v13;
    v79 = &v36[16 * v77];
    v80 = *(_QWORD *)v79;
    v81 = &v36[16 * v38];
    v82 = *((_QWORD *)v81 + 1);
    sub_CD07C((char *)(v12 + 16 * *(_QWORD *)v79), (char *)(v12 + 16 * *(_QWORD *)v81), v12 + 16 * v82, __dst);
    if (v1)
      break;
    if (v82 < v80)
      goto LABEL_119;
    if (v38 > *((_QWORD *)v78 + 2))
      goto LABEL_120;
    *(_QWORD *)v79 = v80;
    *(_QWORD *)&v36[16 * v77 + 8] = v82;
    v83 = *((_QWORD *)v78 + 2);
    if (v38 >= v83)
      goto LABEL_121;
    v13 = v78;
    v14 = v83 - 1;
    memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
    *((_QWORD *)v78 + 2) = v83 - 1;
    v12 = v107;
    if (v83 <= 2)
      goto LABEL_15;
  }
  v85 = v78;
LABEL_94:
  v86 = v85;
LABEL_95:
  swift_bridgeObjectRelease(v86);
  v104[2] = 0;
  return swift_bridgeObjectRelease(v104);
}

uint64_t sub_CD07C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t result;
  char *v23;
  char *v24;
  char *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[16 * v13];
      v23 = v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (char *)(a3 - 16);
        do
        {
          v20 = v19 + 16;
          if (*((double *)v6 - 1) >= *((double *)v18 - 1))
          {
            v23 = v18 - 16;
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 16;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 16;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 16;
            if (v21 <= v7)
              break;
          }
          v19 -= 16;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      sub_4E5DC(&v25, &v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v23 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (*((double *)v15 + 1) >= *((double *)v6 + 1))
        {
          v4 = v15 + 16;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 16;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 16;
          }
        }
        else
        {
          v16 = v6 + 16;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 16;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_CD304(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v5 = result + 32;
    do
    {
      if (v4 <= v2)
        v6 = v2;
      else
        v6 = v4;
      while (1)
      {
        if (v4 == v6)
          goto LABEL_22;
        v7 = *(_QWORD *)(v5 + 8 * v4++);
        v8 = *(_QWORD *)(a2 + 472);
        v9 = *(_QWORD *)(v8 + 16);
        if (!v9)
          goto LABEL_15;
        if (*(_QWORD *)(v8 + 32) != v7)
          break;
LABEL_6:
        if (v4 == v2)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
      if (v9 != 1)
      {
        v10 = 5;
        while (1)
        {
          v11 = v10 - 3;
          if (__OFADD__(v10 - 4, 1))
            break;
          if (*(_QWORD *)(v8 + 8 * v10) == v7)
            goto LABEL_6;
          ++v10;
          if (v11 == v9)
            goto LABEL_15;
        }
        __break(1u);
LABEL_22:
        __break(1u);
        return result;
      }
LABEL_15:
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_340AC(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1)
        result = sub_340AC(v12 > 1, v13 + 1, 1);
      _swiftEmptyArrayStorage[2] = v13 + 1;
      _swiftEmptyArrayStorage[v13 + 4] = v7;
    }
    while (v4 != v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_CD454(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AttributeAffinityResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_CD490(uint64_t a1, char a2, uint64_t *a3)
{
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v26;
  _QWORD __src[69];
  _QWORD v28[69];
  _QWORD v29[69];
  _BYTE v30[560];
  _QWORD __dst[70];
  uint64_t v32[71];
  uint64_t *v33;

  v5 = *(_QWORD *)(a1 + 16);
  v26 = a1 + 32;
  v33 = &v32[1];
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = v5 == 0;
  if (!v5)
    goto LABEL_7;
LABEL_2:
  if (!v7)
  {
    memcpy(__dst, (const void *)(v26 + 560 * v6), 0x229uLL);
    memcpy(v32, (const void *)(v26 + 560 * v6++), 0x229uLL);
    AuthorRecommendationSource.id.getter(v32);
    sub_CD718(__dst);
    while (1)
    {
      sub_41300((uint64_t)v32, (uint64_t)v30, &qword_1F3DD8);
      sub_41300((uint64_t)v30, (uint64_t)__dst, &qword_1F3DD8);
      if (sub_CD7C0((uint64_t)__dst) == 1)
        return swift_bridgeObjectRelease(a1);
      v10 = v32[0];
      memcpy(v29, v33, 0x221uLL);
      v11 = *a3;
      v13 = sub_39228(v32[0]);
      v14 = *(_QWORD *)(v11 + 16);
      v15 = (v12 & 1) == 0;
      v16 = v14 + v15;
      if (__OFADD__(v14, v15))
      {
        __break(1u);
        break;
      }
      v17 = v12;
      if (*(_QWORD *)(v11 + 24) >= v16)
      {
        if ((a2 & 1) != 0)
        {
          if ((v12 & 1) != 0)
            goto LABEL_5;
        }
        else
        {
          sub_16D7E0();
          if ((v17 & 1) != 0)
            goto LABEL_5;
        }
      }
      else
      {
        sub_15A44C(v16, a2 & 1);
        v18 = sub_39228(v10);
        if ((v17 & 1) != (v19 & 1))
          goto LABEL_22;
        v13 = v18;
        if ((v17 & 1) != 0)
        {
LABEL_5:
          v8 = *a3;
          memcpy(__src, (const void *)(*(_QWORD *)(*a3 + 56) + 552 * v13), 0x221uLL);
          sub_6100(__src);
          sub_6228(v29);
          v9 = (void *)(*(_QWORD *)(v8 + 56) + 552 * v13);
          memcpy(v28, v9, 0x221uLL);
          sub_6228(v28);
          memcpy(v9, __src, 0x221uLL);
          goto LABEL_6;
        }
      }
      v20 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
      *(_QWORD *)(v20[6] + 8 * v13) = v10;
      memcpy((void *)(v20[7] + 552 * v13), v29, 0x221uLL);
      v21 = v20[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_21;
      v20[2] = v23;
LABEL_6:
      a2 = 1;
      v7 = v6 >= v5;
      if (v6 != v5)
        goto LABEL_2;
LABEL_7:
      sub_CD7D8(__dst);
      sub_41300((uint64_t)__dst, (uint64_t)v32, &qword_1F3DD8);
      v6 = v5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_CD718(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[4];
  v3 = a1[12];
  v4 = a1[13];
  v5 = a1[14];
  v6 = a1[15];
  v7 = a1[16];
  v8 = a1[17];
  v10 = a1[11];
  v11 = a1[68];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v2);
  sub_61A8(v10, v3, v4, v5, v6, v7, v8);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t sub_CD7C0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

void sub_CD7D8(void *a1)
{
  bzero(a1, 0x229uLL);
}

_QWORD *sub_CD7E0(char a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  double v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if ((a1 & 1) != 0)
  {
    v3 = swift_bridgeObjectRetain(a2);
    v4 = sub_387FC(v3);
    v5 = a2;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (!v6)
      return _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a2);
    v17 = a2;
    v7 = a2 + 40 * v6 + 8;
    v4 = _swiftEmptyArrayStorage;
    do
    {
      v11 = *(double *)(v7 + 16);
      if (v11 >= 0.0)
      {
        v12 = *(_QWORD *)(v7 - 16);
        v13 = *(_BYTE *)(v7 - 8);
        v14 = *(_QWORD *)v7;
        v15 = *(_QWORD *)(v7 + 8);
        swift_bridgeObjectRetain(v15);
        swift_bridgeObjectRetain(v14);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_34434(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v9 = _swiftEmptyArrayStorage[2];
        v8 = _swiftEmptyArrayStorage[3];
        if (v9 >= v8 >> 1)
          sub_34434(v8 > 1, v9 + 1, 1);
        _swiftEmptyArrayStorage[2] = v9 + 1;
        v10 = &_swiftEmptyArrayStorage[5 * v9];
        v10[4] = v12;
        *((_BYTE *)v10 + 40) = v13;
        v10[6] = v14;
        v10[7] = v15;
        *((double *)v10 + 8) = v11;
      }
      v7 -= 40;
      --v6;
    }
    while (v6);
    v5 = v17;
  }
  swift_bridgeObjectRelease(v5);
  return v4;
}

Swift::Int sub_CD938(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_D0ACC(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_CE4C0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_CD9A0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_62F8(v0 + 3);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for DelegatingGenreRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization36DelegatingGenreRecommendationService);
}

uint64_t sub_CD9F4(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 3328) = v2;
  *(_QWORD *)(v3 + 3320) = a1;
  *(_BYTE *)(v3 + 3393) = *a2;
  *(_BYTE *)(v3 + 3394) = a2[1];
  return swift_task_switch(sub_CDA20, 0, 0);
}

uint64_t sub_CDA20()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  v3 = (uint64_t (*)(uint64_t))((char *)&dword_1F3EA8 + dword_1F3EA8);
  v1 = (_QWORD *)swift_task_alloc(unk_1F3EAC);
  *(_QWORD *)(v0 + 3336) = v1;
  *v1 = v0;
  v1[1] = sub_CDA90;
  return v3(v0 + 3392);
}

uint64_t sub_CDA90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 3336);
  *(_QWORD *)(*(_QWORD *)v1 + 3344) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_CDEC8;
  else
    v3 = sub_CDAF4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_CDAF4()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v1 = *(unsigned __int8 *)(v0 + 3392);
  if (v1 == 4)
  {
    v2 = *(_QWORD **)(v0 + 3328);
    v3 = v2[6];
    v4 = v2[7];
    sub_49F4(v2 + 3, v3);
    v5 = *(int **)(v4 + 16);
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v5 + *v5);
    v6 = (_QWORD *)swift_task_alloc(v5[1]);
    *(_QWORD *)(v0 + 3352) = v6;
    *v6 = v0;
    v6[1] = sub_CDBDC;
    return v11(v0 + 1104, v3, v4);
  }
  else
  {
    v8 = sub_CE47C();
    v9 = swift_allocError(&type metadata for GenreRecommendationServiceError, v8, 0, 0);
    *v10 = v1;
    swift_willThrow(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_CDBDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 3352);
  *(_QWORD *)(*(_QWORD *)v1 + 3360) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_CDED4;
  else
    v3 = sub_CDC40;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_CDC40()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  char v9[9];

  LODWORD(v1) = *(unsigned __int8 *)(v0 + 3394);
  memcpy((void *)(v0 + 16), (const void *)(v0 + 1104), 0x440uLL);
  if ((_DWORD)v1 == 5)
    v1 = 0x402030100uLL >> (8 * *(_BYTE *)(v0 + 25));
  v2 = *(_QWORD *)(v0 + 3360);
  v9[0] = v1;
  sub_CE1E4(v9, v0 + 3280);
  if (v2)
  {
    sub_5B70(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 3304);
    v5 = *(_QWORD *)(v0 + 3312);
    sub_49F4((_QWORD *)(v0 + 3280), v4);
    memcpy((void *)(v0 + 2192), (const void *)(v0 + 16), 0x440uLL);
    v6 = *(int **)(v5 + 8);
    v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v6 + *v6);
    v7 = (_QWORD *)swift_task_alloc(v6[1]);
    *(_QWORD *)(v0 + 3368) = v7;
    *v7 = v0;
    v7[1] = sub_CDD60;
    return v8(v0 + 2192, v4, v5);
  }
}

uint64_t sub_CDD60(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 3368);
  *(_QWORD *)(v3 + 3376) = a1;
  *(_QWORD *)(v3 + 3384) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_CDEE0;
  else
    v5 = sub_CDDD0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_CDDD0()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 3384);
  v8 = *(_QWORD *)(v0 + 3376);
  swift_bridgeObjectRetain(v8);
  sub_CD938(&v8);
  if (v1)
    return swift_release(v8);
  v3 = *(_BYTE *)(v0 + 3393);
  v4 = *(uint64_t **)(v0 + 3320);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 3376));
  v5 = v8;
  v6 = sub_CD7E0(v3, v8);
  swift_release(v5);
  sub_71068(v0 + 16);
  v7 = sub_CEEC8((uint64_t)v6, v0 + 16);
  sub_5B70(v0 + 16);
  swift_bridgeObjectRelease(v6);
  *v4 = v7;
  memcpy(v4 + 1, (const void *)(v0 + 16), 0x440uLL);
  sub_62F8((_QWORD *)(v0 + 3280));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CDEC8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CDED4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CDEE0()
{
  uint64_t v0;

  sub_5B70(v0 + 16);
  sub_62F8((_QWORD *)(v0 + 3280));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CDF20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 88) = a1;
  *(_QWORD *)(v2 + 96) = v1;
  return swift_task_switch(sub_CDF38, 0, 0);
}

uint64_t sub_CDF38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 96);
  swift_beginAccess(v1 + 16, v0 + 64, 0, 0);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 104) = v2;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 112) = v3;
  if (v3)
  {
    *(_QWORD *)(v0 + 120) = 0;
    v4 = v2 + 32;
    swift_bridgeObjectRetain(v2);
    sub_CF0BC(v4, v0 + 16);
    v5 = *(_QWORD *)(v0 + 40);
    v6 = *(_QWORD *)(v0 + 48);
    sub_49F4((_QWORD *)(v0 + 16), v5);
    v7 = *(int **)(v6 + 8);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v7 + *v7);
    v8 = (_QWORD *)swift_task_alloc(v7[1]);
    *(_QWORD *)(v0 + 128) = v8;
    *v8 = v0;
    v8[1] = sub_CE020;
    return v10(v5, v6);
  }
  else
  {
    **(_BYTE **)(v0 + 88) = 4;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_CE020(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 104));
    v6 = sub_CE1B0;
  }
  else
  {
    *(_BYTE *)(v4 + 57) = a1 & 1;
    v6 = sub_CE0A0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_CE0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  if ((*(_BYTE *)(v0 + 57) & 1) == 0)
  {
    v3 = *(_BYTE **)(v0 + 88);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    *v3 = *(_BYTE *)(v0 + 56);
    sub_CF104(v0 + 16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120) + 1;
  sub_CF104(v0 + 16);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    **(_BYTE **)(v0 + 88) = 4;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = *(_QWORD *)(v0 + 120) + 1;
  *(_QWORD *)(v0 + 120) = v5;
  sub_CF0BC(*(_QWORD *)(v0 + 104) + 48 * v5 + 32, v0 + 16);
  v6 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 48);
  sub_49F4((_QWORD *)(v0 + 16), v6);
  v8 = *(int **)(v7 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc(v8[1]);
  *(_QWORD *)(v0 + 128) = v9;
  *v9 = v0;
  v9[1] = sub_CE020;
  return v10(v6, v7);
}

uint64_t sub_CE1B0()
{
  uint64_t v0;

  sub_CF104(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_CE1E4@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  __int128 v12[2];
  _BYTE v13[24];

  v4 = *a1;
  swift_beginAccess(v2 + 64, v13, 32, 0);
  v5 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v5 + 16) && (sub_396BC(v4), (v7 & 1) != 0))
  {
    sub_3DD40(*(_QWORD *)(v5 + 56) + 40 * v6, (uint64_t)v12);
    sub_26DB8(v12, a2);
    return swift_endAccess(v13);
  }
  else
  {
    swift_endAccess(v13);
    v9 = sub_CF078();
    v10 = swift_allocError(&type metadata for DelegatingGenreRecommendationService.Errors, v9, 0, 0);
    *v11 = v4;
    return swift_willThrow(v10);
  }
}

uint64_t sub_CE2A8(uint64_t a1, _BYTE *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = *v2;
  v7 = swift_task_alloc(dword_1F3EA4);
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)v7 = v3;
  *(_QWORD *)(v7 + 8) = sub_4814;
  *(_QWORD *)(v7 + 3328) = v6;
  *(_QWORD *)(v7 + 3320) = a1;
  *(_BYTE *)(v7 + 3393) = *a2;
  *(_BYTE *)(v7 + 3394) = a2[1];
  return swift_task_switch(sub_CDA20, 0, 0);
}

uint64_t sub_CE32C(_BYTE *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *v1;
  v4 = a1[1];
  *(_BYTE *)(v2 + 2224) = *a1;
  *(_BYTE *)(v2 + 2225) = v4;
  v5 = swift_task_alloc(dword_1F3EA4);
  *(_QWORD *)(v2 + 2208) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_CE3B4;
  *(_QWORD *)(v5 + 3328) = v3;
  *(_QWORD *)(v5 + 3320) = v2 + 16;
  *(_BYTE *)(v5 + 3393) = *(_BYTE *)(v2 + 2224);
  *(_BYTE *)(v5 + 3394) = *(_BYTE *)(v2 + 2225);
  return swift_task_switch(sub_CDA20, 0, 0);
}

uint64_t sub_CE3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2208);
  *(_QWORD *)(*(_QWORD *)v1 + 2216) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_CE470;
  else
    v3 = sub_CE418;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_CE418()
{
  uint64_t *v0;
  uint64_t (*v1)(_QWORD);

  memcpy(v0 + 139, v0 + 2, 0x448uLL);
  v1 = (uint64_t (*)(_QWORD))v0[139];
  swift_bridgeObjectRetain(v1);
  sub_CF144(v0 + 139);
  return ((uint64_t (*)(_QWORD))v0[1])(v1);
}

uint64_t sub_CE470()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_CE47C()
{
  unint64_t result;

  result = qword_1F3EB0;
  if (!qword_1F3EB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for GenreRecommendationServiceError, &type metadata for GenreRecommendationServiceError);
    atomic_store(result, (unint64_t *)&qword_1F3EB0);
  }
  return result;
}

Swift::Int sub_CE4C0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  Swift::Int v33;
  uint64_t v34;
  double v35;
  Swift::Int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  double v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  __int128 v109;
  double v110;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  double *__dst;
  uint64_t v126;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v98 = *a1;
      v99 = *a1 + 32;
      v100 = -1;
      v101 = 1;
      while (1)
      {
        v102 = *(double *)(v98 + 40 * v101 + 32);
        v103 = v100;
        v104 = v99;
        do
        {
          if (v102 >= *(double *)v104)
            break;
          if (!v98)
            goto LABEL_143;
          v105 = v104 + 8;
          v106 = *(_QWORD *)(v104 + 8);
          v107 = *(_BYTE *)(v104 + 16);
          result = *(_QWORD *)(v104 + 24);
          v108 = *(_QWORD *)(v104 + 32);
          v109 = *(_OWORD *)(v104 - 16);
          *(_OWORD *)(v104 + 8) = *(_OWORD *)(v104 - 32);
          *(_OWORD *)(v104 + 24) = v109;
          v110 = *(double *)v104;
          *(_QWORD *)(v104 - 32) = v106;
          *(_BYTE *)(v104 - 24) = v107;
          *(_QWORD *)(v104 - 16) = result;
          *(_QWORD *)(v104 - 8) = v108;
          *(double *)v104 = v102;
          v104 -= 40;
          *(double *)(v105 + 32) = v110;
        }
        while (!__CFADD__(v103++, 1));
        ++v101;
        v99 += 40;
        --v100;
        if (v101 == v3)
          return result;
      }
    }
    goto LABEL_139;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_148:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v126 = v1;
  v119 = a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_105;
    }
    v121 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for ScoredGenre);
    *(_QWORD *)(v8 + 16) = v7;
    v121 = (_QWORD *)v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v120 = *a1 + 112;
  v118 = *a1 - 8;
  v12 = (char *)_swiftEmptyArrayStorage;
  v122 = v6;
  v123 = v3;
  v124 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 40 * v10 + 32);
      v16 = *(double *)(v11 + 40 * v14 + 32);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v120 + 40 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 5;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_140;
        if (v14 < v10)
        {
          v20 = 40 * v10;
          v21 = 40 * v14;
          v22 = v10;
          v23 = v14;
          do
          {
            if (v23 != --v22)
            {
              if (!v11)
                goto LABEL_146;
              v24 = v11 + v21;
              v25 = *(_QWORD *)(v11 + v21);
              v26 = v11 + v20;
              v27 = *(_BYTE *)(v11 + v21 + 8);
              v28 = *(_QWORD *)(v11 + v21 + 16);
              v29 = *(_QWORD *)(v11 + v21 + 24);
              v30 = *(_QWORD *)(v11 + v21 + 32);
              v31 = *(_QWORD *)(v11 + v20 - 8);
              v32 = *(_OWORD *)(v11 + v20 - 24);
              *(_OWORD *)v24 = *(_OWORD *)(v11 + v20 - 40);
              *(_OWORD *)(v24 + 16) = v32;
              *(_QWORD *)(v24 + 32) = v31;
              *(_QWORD *)(v26 - 40) = v25;
              *(_BYTE *)(v26 - 32) = v27;
              *(_QWORD *)(v26 - 24) = v28;
              *(_QWORD *)(v26 - 16) = v29;
              *(_QWORD *)(v26 - 8) = v30;
            }
            ++v23;
            v20 -= 40;
            v21 += 40;
          }
          while (v23 < v22);
        }
      }
    }
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_138;
      if (v10 - v14 < v6)
      {
        v33 = v14 + v6;
        if (__OFADD__(v14, v6))
          goto LABEL_141;
        if (v33 >= v3)
          v33 = v3;
        if (v33 < v14)
          goto LABEL_142;
        if (v10 != v33)
        {
          v34 = v118 + 40 * v10;
          do
          {
            v35 = *(double *)(v11 + 40 * v10 + 32);
            v36 = v14;
            v37 = v34;
            do
            {
              if (v35 >= *(double *)v37)
                break;
              if (!v11)
                goto LABEL_144;
              v38 = v37 + 8;
              v39 = *(_QWORD *)(v37 + 8);
              v40 = *(_BYTE *)(v37 + 16);
              v41 = *(_QWORD *)(v37 + 24);
              v42 = *(_QWORD *)(v37 + 32);
              v43 = *(_OWORD *)(v37 - 16);
              *(_OWORD *)(v37 + 8) = *(_OWORD *)(v37 - 32);
              *(_OWORD *)(v37 + 24) = v43;
              v44 = *(double *)v37;
              *(_QWORD *)(v37 - 32) = v39;
              *(_BYTE *)(v37 - 24) = v40;
              *(_QWORD *)(v37 - 16) = v41;
              *(_QWORD *)(v37 - 8) = v42;
              *(double *)v37 = v35;
              v37 -= 40;
              ++v36;
              *(double *)(v38 + 32) = v44;
            }
            while (v10 != v36);
            ++v10;
            v34 += 40;
          }
          while (v10 != v33);
          v10 = v33;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_133:
      __break(1u);
      goto LABEL_134;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_4E4E4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v46 = *((_QWORD *)v12 + 2);
    v45 = *((_QWORD *)v12 + 3);
    v13 = v46 + 1;
    v11 = v124;
    if (v46 >= v45 >> 1)
    {
      v95 = sub_4E4E4((char *)(v45 > 1), v46 + 1, 1, v12);
      v11 = v124;
      v12 = v95;
    }
    *((_QWORD *)v12 + 2) = v13;
    v47 = v12 + 32;
    v48 = &v12[16 * v46 + 32];
    *(_QWORD *)v48 = v14;
    *((_QWORD *)v48 + 1) = v10;
    if (v46)
      break;
    v13 = 1;
LABEL_15:
    v6 = v122;
    v3 = v123;
    if (v10 >= v123)
    {
      v9 = v121;
LABEL_105:
      v97 = v12;
      v121 = v9;
      if (v13 < 2)
        goto LABEL_95;
      v112 = *v119;
      while (1)
      {
        v113 = v13 - 2;
        if (v13 < 2)
          break;
        if (!v112)
          goto LABEL_147;
        v96 = v97;
        v114 = *(_QWORD *)&v97[16 * v113 + 32];
        v115 = *(_QWORD *)&v97[16 * v13 + 24];
        sub_CEC10((double *)(v112 + 40 * v114), (double *)(v112 + 40 * *(_QWORD *)&v97[16 * v13 + 16]), v112 + 40 * v115, __dst);
        if (v126)
          goto LABEL_94;
        if (v115 < v114)
          goto LABEL_135;
        if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
          v96 = sub_4ECA8((uint64_t)v96);
        if (v113 >= *((_QWORD *)v96 + 2))
          goto LABEL_136;
        v116 = &v96[16 * v113 + 32];
        *(_QWORD *)v116 = v114;
        *((_QWORD *)v116 + 1) = v115;
        v117 = *((_QWORD *)v96 + 2);
        if (v13 > v117)
          goto LABEL_137;
        memmove(&v96[16 * v13 + 16], &v96[16 * v13 + 32], 16 * (v117 - v13));
        v97 = v96;
        *((_QWORD *)v96 + 2) = v117 - 1;
        v13 = v117 - 1;
        if (v117 <= 2)
          goto LABEL_95;
      }
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
  }
  while (1)
  {
    v49 = v13 - 1;
    if (v13 >= 4)
    {
      v54 = &v47[16 * v13];
      v55 = *((_QWORD *)v54 - 8);
      v56 = *((_QWORD *)v54 - 7);
      v60 = __OFSUB__(v56, v55);
      v57 = v56 - v55;
      if (v60)
        goto LABEL_122;
      v59 = *((_QWORD *)v54 - 6);
      v58 = *((_QWORD *)v54 - 5);
      v60 = __OFSUB__(v58, v59);
      v52 = v58 - v59;
      v53 = v60;
      if (v60)
        goto LABEL_123;
      v61 = v13 - 2;
      v62 = &v47[16 * v13 - 32];
      v64 = *(_QWORD *)v62;
      v63 = *((_QWORD *)v62 + 1);
      v60 = __OFSUB__(v63, v64);
      v65 = v63 - v64;
      if (v60)
        goto LABEL_125;
      v60 = __OFADD__(v52, v65);
      v66 = v52 + v65;
      if (v60)
        goto LABEL_128;
      if (v66 >= v57)
      {
        v84 = &v47[16 * v49];
        v86 = *(_QWORD *)v84;
        v85 = *((_QWORD *)v84 + 1);
        v60 = __OFSUB__(v85, v86);
        v87 = v85 - v86;
        if (v60)
          goto LABEL_132;
        v77 = v52 < v87;
        goto LABEL_83;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v78 = *((_QWORD *)v12 + 4);
        v79 = *((_QWORD *)v12 + 5);
        v60 = __OFSUB__(v79, v78);
        v71 = v79 - v78;
        v72 = v60;
        goto LABEL_77;
      }
      v51 = *((_QWORD *)v12 + 4);
      v50 = *((_QWORD *)v12 + 5);
      v60 = __OFSUB__(v50, v51);
      v52 = v50 - v51;
      v53 = v60;
    }
    if ((v53 & 1) != 0)
      goto LABEL_124;
    v61 = v13 - 2;
    v67 = &v47[16 * v13 - 32];
    v69 = *(_QWORD *)v67;
    v68 = *((_QWORD *)v67 + 1);
    v70 = __OFSUB__(v68, v69);
    v71 = v68 - v69;
    v72 = v70;
    if (v70)
      goto LABEL_127;
    v73 = &v47[16 * v49];
    v75 = *(_QWORD *)v73;
    v74 = *((_QWORD *)v73 + 1);
    v60 = __OFSUB__(v74, v75);
    v76 = v74 - v75;
    if (v60)
      goto LABEL_130;
    if (__OFADD__(v71, v76))
      goto LABEL_131;
    if (v71 + v76 >= v52)
    {
      v77 = v52 < v76;
LABEL_83:
      if (v77)
        v49 = v61;
      goto LABEL_85;
    }
LABEL_77:
    if ((v72 & 1) != 0)
      goto LABEL_126;
    v80 = &v47[16 * v49];
    v82 = *(_QWORD *)v80;
    v81 = *((_QWORD *)v80 + 1);
    v60 = __OFSUB__(v81, v82);
    v83 = v81 - v82;
    if (v60)
      goto LABEL_129;
    if (v83 < v71)
      goto LABEL_15;
LABEL_85:
    v88 = v49 - 1;
    if (v49 - 1 >= v13)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if (!v11)
      goto LABEL_145;
    v89 = v12;
    v90 = &v47[16 * v88];
    v91 = *(_QWORD *)v90;
    v92 = &v47[16 * v49];
    v93 = *((_QWORD *)v92 + 1);
    sub_CEC10((double *)(v11 + 40 * *(_QWORD *)v90), (double *)(v11 + 40 * *(_QWORD *)v92), v11 + 40 * v93, __dst);
    if (v126)
      break;
    if (v93 < v91)
      goto LABEL_119;
    if (v49 > *((_QWORD *)v89 + 2))
      goto LABEL_120;
    *(_QWORD *)v90 = v91;
    *(_QWORD *)&v47[16 * v88 + 8] = v93;
    v94 = *((_QWORD *)v89 + 2);
    if (v49 >= v94)
      goto LABEL_121;
    v12 = v89;
    v13 = v94 - 1;
    memmove(&v47[16 * v49], v92 + 16, 16 * (v94 - 1 - v49));
    *((_QWORD *)v89 + 2) = v94 - 1;
    v11 = v124;
    if (v94 <= 2)
      goto LABEL_15;
  }
  v96 = v89;
LABEL_94:
  v97 = v96;
LABEL_95:
  swift_bridgeObjectRelease(v97);
  v121[2] = 0;
  return swift_bridgeObjectRelease(v121);
}

uint64_t sub_CEC10(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  double *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t result;
  char *v27;
  double *v28;
  double *v29;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v29 = __src;
  v28 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[5 * v11] <= __dst)
        memmove(__dst, a2, 40 * v11);
      v18 = &v4[5 * v11];
      v27 = (char *)v18;
      v29 = v6;
      if (v7 < v6 && v10 >= 40)
      {
        v19 = a3 - 40;
        do
        {
          v20 = (double *)(v19 + 40);
          if (*(v18 - 1) >= *(v6 - 1))
          {
            v27 = (char *)(v18 - 5);
            if (v20 < v18 || v19 >= (unint64_t)v18 || v20 != v18)
            {
              v24 = *(_OWORD *)(v18 - 5);
              v25 = *(_OWORD *)(v18 - 3);
              *(double *)(v19 + 32) = *(v18 - 1);
              *(_OWORD *)v19 = v24;
              *(_OWORD *)(v19 + 16) = v25;
            }
            v21 = v6;
            v18 -= 5;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 5;
            if (v20 != v6 || v19 >= (unint64_t)v6)
            {
              v22 = *(_OWORD *)v21;
              v23 = *(_OWORD *)(v6 - 3);
              *(double *)(v19 + 32) = *(v6 - 1);
              *(_OWORD *)v19 = v22;
              *(_OWORD *)(v19 + 16) = v23;
            }
            v29 = v6 - 5;
            if (v21 <= v7)
              break;
          }
          v19 -= 40;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_40:
      sub_4EA8C((void **)&v29, (const void **)&v28, &v27);
      return 1;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[5 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = &v4[5 * v9];
    v27 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      v13 = v4;
      while (1)
      {
        if (v6[4] >= v13[4])
        {
          v4 = v13 + 5;
          v15 = v13;
          v14 = v6;
          if (v7 == v13)
          {
            v13 += 5;
            if (v7 < v4)
              goto LABEL_18;
          }
          else
          {
            v13 += 5;
          }
        }
        else
        {
          v14 = v6 + 5;
          v15 = v6;
          if (v7 == v6 && v7 < v14)
            goto LABEL_18;
        }
        v16 = *(_OWORD *)v15;
        v17 = *((_OWORD *)v15 + 1);
        v7[4] = v15[4];
        *(_OWORD *)v7 = v16;
        *((_OWORD *)v7 + 1) = v17;
LABEL_18:
        v7 += 5;
        if (v13 < v12)
        {
          v6 = v14;
          if ((unint64_t)v14 < a3)
            continue;
        }
        v28 = v4;
        v29 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_CEEC8(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = 0;
    v4 = result + 32;
    v19 = a2;
    do
    {
      if (v3 <= v2)
        v5 = v2;
      else
        v5 = v3;
      for (i = v3; ; ++i)
      {
        if (i == v5)
          goto LABEL_23;
        v7 = v4 + 40 * i;
        v8 = *(_QWORD *)v7;
        v3 = i + 1;
        v9 = *(_QWORD *)(a2 + 456);
        v10 = *(_QWORD *)(v9 + 16);
        if (!v10)
          goto LABEL_16;
        if (*(_QWORD *)(v9 + 32) != v8)
          break;
LABEL_7:
        if (v3 == v2)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
      if (v10 != 1)
      {
        v11 = 5;
        while (1)
        {
          v12 = v11 - 3;
          if (__OFADD__(v11 - 4, 1))
            break;
          if (*(_QWORD *)(v9 + 8 * v11) == v8)
            goto LABEL_7;
          ++v11;
          if (v12 == v10)
            goto LABEL_16;
        }
        __break(1u);
LABEL_23:
        __break(1u);
        return result;
      }
LABEL_16:
      v13 = *(_QWORD *)(v4 + 40 * i + 32);
      v15 = *(_QWORD *)(v7 + 16);
      v14 = *(_QWORD *)(v7 + 24);
      v20 = *(_BYTE *)(v7 + 8);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRetain(v15);
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_34434(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
        result = sub_34434(v16 > 1, v17 + 1, 1);
      _swiftEmptyArrayStorage[2] = v17 + 1;
      v18 = &_swiftEmptyArrayStorage[5 * v17];
      v18[4] = v8;
      *((_BYTE *)v18 + 40) = v20;
      v18[6] = v15;
      v18[7] = v14;
      v18[8] = v13;
      a2 = v19;
    }
    while (v3 != v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

unint64_t sub_CF078()
{
  unint64_t result;

  result = qword_1F3EB8;
  if (!qword_1F3EB8)
  {
    result = swift_getWitnessTable(&unk_194FF0, &type metadata for DelegatingGenreRecommendationService.Errors);
    atomic_store(result, (unint64_t *)&qword_1F3EB8);
  }
  return result;
}

uint64_t sub_CF0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F3EC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_CF104(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F3EC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_CF144(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v46 = *a1;
  v36 = a1[11];
  v23 = a1[53];
  v20 = a1[58];
  v17 = a1[59];
  v13 = a1[60];
  v2 = a1[65];
  v3 = a1[69];
  v4 = a1[70];
  v5 = a1[72];
  v6 = a1[73];
  v7 = a1[76];
  v8 = a1[78];
  v9 = a1[84];
  v10 = a1[86];
  v43 = a1[90];
  v44 = a1[89];
  v41 = a1[92];
  v42 = a1[91];
  v39 = a1[94];
  v40 = a1[93];
  v37 = a1[96];
  v38 = a1[95];
  v21 = *(_OWORD *)(a1 + 99);
  v22 = *(_OWORD *)(a1 + 97);
  v18 = *(_OWORD *)(a1 + 103);
  v19 = *(_OWORD *)(a1 + 101);
  v15 = *(_OWORD *)(a1 + 107);
  v16 = *(_OWORD *)(a1 + 105);
  v14 = *(_OWORD *)(a1 + 109);
  v12 = a1[111];
  v28 = a1[113];
  v29 = a1[112];
  v26 = a1[115];
  v27 = a1[114];
  v24 = a1[117];
  v25 = a1[116];
  v34 = a1[119];
  v35 = a1[118];
  v32 = a1[121];
  v33 = a1[120];
  v30 = a1[123];
  v31 = a1[122];
  v45 = a1[127];
  v53 = a1[129];
  v54 = a1[128];
  v51 = a1[131];
  v52 = a1[130];
  v49 = a1[133];
  v50 = a1[132];
  v47 = a1[135];
  v48 = a1[134];
  swift_bridgeObjectRelease(a1[87]);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v17);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v46);
  sub_5DFC(v44, v43, v42, v41, v40, v39, v38, v37, v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v16, *((uint64_t *)&v16 + 1), v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v12);
  sub_5E34(v29, v28, v27, v26, v25, v24);
  sub_5E70(v35, v34, v33, v32, v31, v30);
  swift_bridgeObjectRelease(v45);
  sub_5EA0(v54, v53, v52, v51, v50, v49, v48, v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for DelegatingGenreRecommendationService.Errors(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x1F)
    goto LABEL_17;
  if (a2 + 225 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 225) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 225;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 225;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 225;
  }
LABEL_17:
  v6 = ((*a1 >> 2) & 0x1E | (*a1 >> 7)) ^ 0x1F;
  if (v6 >= 0x1E)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for DelegatingGenreRecommendationService.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 225 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 225) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x1F)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x1E)
    return ((uint64_t (*)(void))((char *)&loc_CF4C8 + 4 * byte_194F75[v4]))();
  *a1 = a2 - 31;
  return ((uint64_t (*)(void))((char *)sub_CF4FC + 4 * byte_194F70[v4]))();
}

uint64_t sub_CF4FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_CF504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xCF50CLL);
  return result;
}

uint64_t sub_CF524(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xCF52CLL);
  *(_BYTE *)result = 8 * (((-a2 >> 1) & 0xF) - 16 * a2);
  return result;
}

uint64_t sub_CF530(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CF538(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_CF544(unsigned __int8 *a1)
{
  return *a1 >> 7;
}

_BYTE *sub_CF550(_BYTE *result)
{
  *result &= ~0x80u;
  return result;
}

_BYTE *sub_CF560(_BYTE *result, char a2)
{
  *result = *result & 7 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for DelegatingGenreRecommendationService.Errors()
{
  return &type metadata for DelegatingGenreRecommendationService.Errors;
}

uint64_t dispatch thunk of SignerType.signature(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t *sub_CF59C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = v10;
    v11 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v11;
    v12 = a3[7];
    v13 = *(uint64_t *)((char *)a2 + v12);
    *(uint64_t *)((char *)a1 + v12) = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_CF64C(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5]));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7]));
}

uint64_t sub_CF6A8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v10;
  v11 = a3[7];
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_CF72C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a3[6];
  v11 = *(_QWORD *)(a2 + v10);
  v12 = *(_QWORD *)(a1 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = *(_QWORD *)(a2 + v13);
  v15 = *(_QWORD *)(a1 + v13);
  *(_QWORD *)(a1 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_CF7D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_CF840(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_bridgeObjectRelease(v8);
  v9 = a3[6];
  v10 = *(_QWORD *)(a1 + v9);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  swift_bridgeObjectRelease(v10);
  v11 = a3[7];
  v12 = *(_QWORD *)(a1 + v11);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_CF8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_CF8D8);
}

uint64_t sub_CF8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_CF954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_CF960);
}

uint64_t sub_CF960(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BookScoringWork(uint64_t a1)
{
  uint64_t result;

  result = qword_1F3F20;
  if (!qword_1F3F20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BookScoringWork);
  return result;
}

uint64_t sub_CFA14(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_CFA8C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v6 = a4;
  if (a4[2] <= a3)
  {
    v14 = swift_bridgeObjectRetain(a4);
    goto LABEL_11;
  }
  swift_bridgeObjectRetain(a4);
  sub_D08A4();
  v10 = sub_2CCAC(a3, a4);
  v6 = v11;
  v4 = v12;
  v5 = v13;
  if ((v13 & 1) != 0)
  {
    v15 = type metadata accessor for __ContiguousArrayStorageBase(0);
    v16 = swift_unknownObjectRetain_n(v10, 2);
    v17 = (_QWORD *)swift_dynamicCastClass(v16, v15);
    if (!v17)
    {
      swift_unknownObjectRelease(v10);
      v17 = _swiftEmptyArrayStorage;
    }
    v18 = v17[2];
    v14 = swift_release(v17);
    if (__OFSUB__(v5 >> 1, v4))
      goto LABEL_16;
    v14 = v10;
    if (v18 != (v5 >> 1) - v4)
      goto LABEL_17;
    v6 = (_QWORD *)swift_dynamicCastClass(v10, v15);
    v14 = swift_unknownObjectRelease(v10);
    if (!v6)
    {
      v14 = swift_unknownObjectRelease(v10);
      v6 = _swiftEmptyArrayStorage;
    }
    goto LABEL_11;
  }
  while (1)
  {
    v6 = sub_38138(v10, (uint64_t)v6, v4, v5);
    v14 = swift_unknownObjectRelease(v10);
LABEL_11:
    v19 = v6[2];
    if (v19 == a3)
      break;
    v10 = a3 - v19;
    if (!__OFSUB__(a3, v19))
    {
      swift_bridgeObjectRetain(a2);
      v20 = sub_6A568(a1, a2, v10);
      swift_bridgeObjectRelease(a2);
      sub_10F29C((uint64_t)v20);
      return v6;
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    swift_unknownObjectRelease(v14);
  }
  return v6;
}

uint64_t sub_CFC28(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v26[6];
  __int128 v27;
  uint64_t v28;

  v2 = a1[44];
  if (v2)
  {
    v3 = v1;
    v5 = a1[41];
    v4 = a1[42];
    v28 = a1[43];
    v6 = qword_1F0140;
    swift_bridgeObjectRetain(v2);
    if (v6 != -1)
      swift_once(&qword_1F0140, sub_12F970);
    v7 = (void *)qword_1F6218;
    v8 = sub_5EDC(&qword_1F14C8);
    v9 = swift_allocObject(v8, 72, 7);
    v27 = xmmword_1875E0;
    *(_OWORD *)(v9 + 16) = xmmword_1875E0;
    v10 = type metadata accessor for BookScoringWork(0);
    v11 = *(_QWORD *)(v1 + *(int *)(v10 + 24));
    v12 = *(_QWORD *)(v11 + 16);
    *(_QWORD *)(v9 + 56) = &type metadata for Int;
    *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v9 + 32) = v12;
    v13 = v7;
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)("Attempting to score %d items", (_DWORD)v27);

    v14 = swift_bridgeObjectRelease(v9);
    __chkstk_darwin(v14);
    v26[2] = v3;
    v26[3] = v5;
    v26[4] = v4;
    swift_bridgeObjectRetain(v11);
    v15 = sub_2793C((void (*)(_QWORD *__return_ptr, uint64_t *))sub_D0D30, (uint64_t)v26, v11);
    swift_bridgeObjectRelease(v11);
    v16 = sub_12B4CC((uint64_t)v15, 0x726F63536B6F6F62, 0xEB00000000676E69);
    swift_bridgeObjectRelease(v15);
    v17 = sub_1791D4(v16);
    v18 = type metadata accessor for Features(0);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    v19 = Features.init(featureMap:)(v17);
    swift_bridgeObjectRelease(v16);
    v20 = sub_5EDC(&qword_1F1078);
    v21 = swift_allocObject(v20, 48, 7);
    *(_OWORD *)(v21 + 16) = v27;
    *(_QWORD *)(v21 + 32) = v28;
    *(_QWORD *)(v21 + 40) = v2;
    v22 = type metadata accessor for Request(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    swift_bridgeObjectRetain(v2);
    v23 = Request.init(features:outputs:)(v19, v21);
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + *(int *)(v10 + 20)));
  }
  else
  {
    v24 = sub_D0CEC();
    v23 = swift_allocError(&type metadata for BookScoringWork.Errors, v24, 0, 0);
    swift_willThrow(v23);
  }
  return v23;
}

uint64_t sub_CFEDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  int v14;
  int64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  int64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v55;
  char v56;
  char v57;
  uint64_t v58;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned __int8 *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for BookScoringWork(0) + 28));
  if (*(_QWORD *)(v7 + 16) && (v8 = sub_39228(v5), (v9 & 1) != 0))
  {
    v10 = *(_QWORD *)(v7 + 56) + 72 * v8;
    v11 = *(_QWORD **)(v10 + 16);
    v58 = *(_QWORD *)(v10 + 8);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v11);
    v12 = (_QWORD *)sub_7ADA8();
    swift_bridgeObjectRelease(v58);
    if (!v6)
    {
LABEL_4:
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F6F6265, 0xE500000000000000, 0x6F6F626F69647561, 0xE90000000000006BLL, 0);
      swift_bridgeObjectRelease(0xE500000000000000);
      v14 = v13 & 1;
      goto LABEL_7;
    }
  }
  else
  {
    v11 = &_swiftEmptySetSingleton;
    v12 = &_swiftEmptySetSingleton;
    if (!v6)
      goto LABEL_4;
  }
  swift_bridgeObjectRelease(0xE90000000000006BLL);
  v14 = 1;
LABEL_7:
  v51 = v14;
  v15 = v12[2];
  if (v15)
  {
    sub_340F4(0, v15, 0);
    result = sub_EDD8C(v12);
    v17 = result;
    v19 = v18;
    v21 = v20 & 1;
    v55 = v11;
    while ((v17 & 0x8000000000000000) == 0 && v17 < 1 << *((_BYTE *)v12 + 32))
    {
      if (((*(_QWORD *)((char *)v12 + (((unint64_t)v17 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v17) & 1) == 0)
        goto LABEL_31;
      if (*((_DWORD *)v12 + 9) != (_DWORD)v19)
        goto LABEL_32;
      v56 = v21;
      v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v24 = v23;
      v26 = _swiftEmptyArrayStorage[2];
      v25 = _swiftEmptyArrayStorage[3];
      if (v26 >= v25 >> 1)
        sub_340F4(v25 > 1, v26 + 1, 1);
      _swiftEmptyArrayStorage[2] = v26 + 1;
      v27 = &_swiftEmptyArrayStorage[2 * v26];
      v27[4] = v22;
      v27[5] = v24;
      result = sub_EDE30(v17, v19, v56 & 1, v12);
      v17 = result;
      v19 = v28;
      v21 = v29 & 1;
      --v15;
      v11 = v55;
      if (!v15)
      {
        sub_41814(result, v28, v21);
        swift_bridgeObjectRelease(v12);
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRelease(v12);
LABEL_18:
  v30 = v11[2];
  if (v30)
  {
    sub_340F4(0, v30, 0);
    v31 = _swiftEmptyArrayStorage;
    result = sub_EDD8C(v11);
    v32 = result;
    v34 = v33;
    v36 = v35 & 1;
    while ((v32 & 0x8000000000000000) == 0 && v32 < 1 << *((_BYTE *)v11 + 32))
    {
      if (((*(_QWORD *)((char *)v11 + (((unint64_t)v32 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v32) & 1) == 0)
        goto LABEL_34;
      if (*((_DWORD *)v11 + 9) != (_DWORD)v34)
        goto LABEL_35;
      v57 = v36;
      v37 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      v39 = v38;
      v41 = v31[2];
      v40 = v31[3];
      v42 = v31;
      if (v41 >= v40 >> 1)
      {
        sub_340F4(v40 > 1, v41 + 1, 1);
        v42 = v31;
      }
      v42[2] = v41 + 1;
      v43 = &v42[2 * v41];
      v43[4] = v37;
      v43[5] = v39;
      result = sub_EDE30(v32, v34, v57 & 1, v11);
      v32 = result;
      v34 = v44;
      v36 = v45 & 1;
      --v30;
      v31 = v42;
      if (!v30)
      {
        sub_41814(result, v44, v36);
        swift_bridgeObjectRelease(v11);
        goto LABEL_29;
      }
    }
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease(v11);
  v31 = _swiftEmptyArrayStorage;
LABEL_29:
  v46 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v48 = v47;
  v49 = sub_CFA8C(0, 0xE000000000000000, a3, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  v50 = sub_CFA8C(0, 0xE000000000000000, a4, v31);
  result = swift_bridgeObjectRelease(v31);
  *(_QWORD *)a5 = v46;
  *(_QWORD *)(a5 + 8) = v48;
  *(_DWORD *)(a5 + 16) = v51;
  *(_QWORD *)(a5 + 24) = v49;
  *(_QWORD *)(a5 + 32) = v50;
  return result;
}

uint64_t sub_D0384()
{
  return 0x6F6373206B6F6F62;
}

uint64_t sub_D03A4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_CFC28(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_D03D0@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_D0B1C(a1[1], a1[2], a1[3]);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_D0408(uint64_t a1)
{
  uint64_t result;

  result = sub_41754((unint64_t *)&qword_1F3F60, type metadata accessor for BookScoringWork, (uint64_t)&unk_1950BC);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_D0444()
{
  return sub_41754(&qword_1F3F68, type metadata accessor for BookScoringWork, (uint64_t)&unk_195068);
}

unint64_t sub_D0474()
{
  unint64_t result;

  result = qword_1F3F70;
  if (!qword_1F3F70)
  {
    result = swift_getWitnessTable(&unk_19513C, &type metadata for BookScoringWork.Context);
    atomic_store(result, (unint64_t *)&qword_1F3F70);
  }
  return result;
}

uint64_t sub_D04B8(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  char v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    goto LABEL_7;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a1);
  }
  v10 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  v11 = *(_QWORD *)(a2 + 32);
  v50 = v10;
  v12 = (_QWORD *)*a4;
  v13 = sub_39228(v10);
  v15 = v12[2];
  v16 = (v14 & 1) == 0;
  v17 = __OFADD__(v15, v16);
  v18 = v15 + v16;
  if (v17)
    goto LABEL_28;
  v19 = v14;
  if (v12[3] < v18)
  {
    sub_15C090(v18, a3 & 1);
    v13 = sub_39228(v10);
    if ((v19 & 1) != (v20 & 1))
    {
LABEL_6:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
LABEL_7:
      swift_bridgeObjectRelease(a2);
      return swift_bridgeObjectRelease(a1);
    }
LABEL_10:
    if ((v19 & 1) != 0)
      goto LABEL_11;
    goto LABEL_14;
  }
  if ((a3 & 1) != 0)
    goto LABEL_10;
  v24 = v13;
  sub_16C0DC();
  v13 = v24;
  if ((v19 & 1) != 0)
  {
LABEL_11:
    v22 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v22);
    v49 = v22;
    swift_errorRetain(v22);
    v23 = sub_5EDC(&qword_1F1348);
    if ((swift_dynamicCast(v23, &v49, v23, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease_n(a1, 2);
      return swift_errorRelease(v49);
    }
    goto LABEL_31;
  }
LABEL_14:
  v25 = (_QWORD *)*a4;
  *(_QWORD *)(*a4 + 8 * (v13 >> 6) + 64) |= 1 << v13;
  v26 = 8 * v13;
  *(_QWORD *)(v25[6] + v26) = v10;
  *(_QWORD *)(v25[7] + v26) = v11;
  v27 = v25[2];
  v17 = __OFADD__(v27, 1);
  v28 = v27 + 1;
  if (v17)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v25[2] = v28;
  if (v6 == 1)
    goto LABEL_27;
  if (*(_QWORD *)(a1 + 16) >= 2uLL)
  {
    if (v7 != 1)
    {
      v29 = 0;
      v30 = v6 - 2;
      while (1)
      {
        v31 = *(_QWORD *)(a1 + 40 + 8 * v29);
        v32 = *(_QWORD *)(a2 + 40 + 8 * v29);
        v50 = v31;
        v33 = (_QWORD *)*a4;
        v34 = sub_39228(v31);
        v36 = v33[2];
        v37 = (v35 & 1) == 0;
        v17 = __OFADD__(v36, v37);
        v38 = v36 + v37;
        if (v17)
          break;
        v39 = v35;
        if (v33[3] < v38)
        {
          sub_15C090(v38, 1);
          v34 = sub_39228(v31);
          if ((v39 & 1) != (v40 & 1))
            goto LABEL_6;
        }
        if ((v39 & 1) != 0)
          goto LABEL_11;
        v41 = (_QWORD *)*a4;
        *(_QWORD *)(*a4 + 8 * (v34 >> 6) + 64) |= 1 << v34;
        v42 = 8 * v34;
        *(_QWORD *)(v41[6] + v42) = v31;
        *(_QWORD *)(v41[7] + v42) = v32;
        v43 = v41[2];
        v17 = __OFADD__(v43, 1);
        v44 = v43 + 1;
        if (v17)
          goto LABEL_29;
        v41[2] = v44;
        if (v30 == v29)
          goto LABEL_27;
        if ((unint64_t)(v29 + 2) >= *(_QWORD *)(a1 + 16))
          goto LABEL_30;
        if (v7 - 1 == ++v29)
          goto LABEL_27;
      }
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
LABEL_27:
    swift_bridgeObjectRelease_n(a2, 2);
    return swift_bridgeObjectRelease_n(a1, 2);
  }
LABEL_30:
  __break(1u);
LABEL_31:
  v47 = 0;
  v48 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v45._object = (void *)0x800000000019FEB0;
  v45._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v45);
  _print_unlocked<A, B>(_:_:)(&v50, &v47, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v47, v48, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

void sub_D08A4()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = v2 - 2;
  if (v2 >= 2)
  {
    v4 = 0;
    while (1)
    {
      v21 = 0;
      swift_stdlib_random(&v21, 8);
      v6 = (v21 * (unsigned __int128)v2) >> 64;
      if (v2 > v21 * v2)
      {
        v7 = -(uint64_t)v2 % v2;
        if (v7 > v21 * v2)
        {
          do
          {
            v21 = 0;
            swift_stdlib_random(&v21, 8);
          }
          while (v7 > v21 * v2);
          v6 = (v21 * (unsigned __int128)v2) >> 64;
        }
      }
      v8 = v4 + v6;
      if (__OFADD__(v4, v6))
        break;
      if (v4 != v8)
      {
        v9 = *(_QWORD *)(v1 + 16);
        if (v4 >= v9)
          goto LABEL_19;
        if (v8 >= v9)
          goto LABEL_20;
        v10 = (uint64_t *)(v1 + 32 + 16 * v4);
        v12 = *v10;
        v11 = v10[1];
        v13 = (uint64_t *)(v1 + 32 + 16 * v8);
        v15 = *v13;
        v14 = v13[1];
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
          v1 = sub_D0A40(v1);
        if (v4 >= *(_QWORD *)(v1 + 16))
          goto LABEL_21;
        v16 = (_QWORD *)(v1 + 32 + 16 * v4);
        v17 = v16[1];
        *v16 = v15;
        v16[1] = v14;
        swift_bridgeObjectRelease(v17);
        if (v8 >= *(_QWORD *)(v1 + 16))
          goto LABEL_22;
        v18 = (_QWORD *)(v1 + 32 + 16 * v8);
        v19 = v18[1];
        *v18 = v12;
        v18[1] = v11;
        swift_bridgeObjectRelease(v19);
        *v20 = v1;
      }
      --v2;
      if (v4++ == v3)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

uint64_t sub_D0A2C(uint64_t a1)
{
  return sub_34608(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0A40(uint64_t a1)
{
  return sub_34614(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0A54(_QWORD *a1)
{
  return sub_3477C(0, a1[2], 0, a1);
}

uint64_t sub_D0A68(uint64_t a1)
{
  return sub_34C2C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0A7C(uint64_t a1)
{
  return sub_34790(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0A90(uint64_t a1)
{
  return sub_35638(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0AA4(uint64_t a1)
{
  return sub_35AB8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0AB8(uint64_t a1)
{
  return sub_36288(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0ACC(uint64_t a1)
{
  return sub_36598(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0AE0(uint64_t a1)
{
  return sub_345FC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0AF4(uint64_t a1)
{
  return sub_36B80(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_D0B08(uint64_t a1)
{
  return sub_375EC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

unint64_t sub_D0B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  _QWORD *v13;

  v5 = sub_178C18(a1, a2);
  if (!v5)
  {
    if (qword_1F0140 != -1)
      swift_once(&qword_1F0140, sub_12F970);
    v9 = (id)qword_1F6218;
    v10 = static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)("Unable to extract book scores from output", 41, 2, &dword_0, v9, v10, _swiftEmptyArrayStorage);
    goto LABEL_11;
  }
  v6 = (uint64_t)v5;
  v7 = v5[2];
  if (v7 != *(_QWORD *)(a3 + 16))
  {
    swift_bridgeObjectRelease(v5);
    if (qword_1F0140 != -1)
      swift_once(&qword_1F0140, sub_12F970);
    v9 = (id)qword_1F6218;
    v11 = static os_log_type_t.error.getter();
    os_log(_:dso:log:type:_:)("Mismatch on book count and scores", 33, 2, &dword_0, v9, v11, _swiftEmptyArrayStorage);
LABEL_11:

    return sub_65708((uint64_t)_swiftEmptyArrayStorage);
  }
  if (v7)
  {
    sub_5EDC(&qword_1F1D08);
    v8 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v7);
  }
  else
  {
    v8 = _swiftEmptyDictionarySingleton;
  }
  v13 = v8;
  swift_bridgeObjectRetain_n(a3, 2);
  swift_bridgeObjectRetain(v6);
  sub_D04B8(a3, v6, 1, &v13);
  if (v3)
  {
    result = swift_unexpectedError(v3, "Swift/Dictionary.swift", 22, 1, 489);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(a3);
    return (unint64_t)v13;
  }
  return result;
}

unint64_t sub_D0CEC()
{
  unint64_t result;

  result = qword_1F3F78;
  if (!qword_1F3F78)
  {
    result = swift_getWitnessTable(&unk_1951DC, &type metadata for BookScoringWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F3F78);
  }
  return result;
}

uint64_t sub_D0D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_CFEDC(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t storeEnumTagSinglePayload for BookScoringWork.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_D0D90 + 4 * byte_195040[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_D0DB0 + 4 * byte_195045[v4]))();
}

_BYTE *sub_D0D90(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_D0DB0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_D0DB8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_D0DC0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_D0DC8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_D0DD0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BookScoringWork.Errors()
{
  return &type metadata for BookScoringWork.Errors;
}

uint64_t destroy for BookScoringWork.Context(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for BookScoringWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for BookScoringWork.Context(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for BookScoringWork.Context(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_release(v4);
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for BookScoringWork.Context(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BookScoringWork.Context(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BookScoringWork.Context()
{
  return &type metadata for BookScoringWork.Context;
}

unint64_t sub_D0FD4()
{
  unint64_t result;

  result = qword_1F3F80;
  if (!qword_1F3F80)
  {
    result = swift_getWitnessTable(&unk_1951B4, &type metadata for BookScoringWork.Errors);
    atomic_store(result, (unint64_t *)&qword_1F3F80);
  }
  return result;
}

uint64_t sub_D1018()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_D1050 + 4 * byte_195250[*v0]))(0x65726E654778616DLL, 0xEB00000000734449);
}

uint64_t sub_D1050()
{
  return 0x6F6874754178616DLL;
}

unint64_t sub_D1070()
{
  return 0xD00000000000001FLL;
}

unint64_t sub_D1094()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_D10B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_D17E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_D10D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D12BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_D10FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_D12BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t TabiConfiguration.BookSuggestionsConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;

  v4 = sub_5EDC(&qword_1F3F90);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v23 = v1[2];
  v24 = v8;
  v10 = v1[3];
  v21 = v1[4];
  v22 = v10;
  v20 = v1[5];
  v11 = a1[3];
  v12 = a1[4];
  sub_49F4(a1, v11);
  v13 = sub_D12BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s28BookSuggestionsConfigurationV10CodingKeysON, &_s28BookSuggestionsConfigurationV10CodingKeysON, v13, v11, v12);
  v28 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v9, &v28, v4);
  if (!v2)
  {
    v15 = v22;
    v14 = v23;
    v17 = v20;
    v16 = v21;
    v27 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24, &v27, v4);
    v26 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v26, v4);
    v25 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v25, v4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_D12BC()
{
  unint64_t result;

  result = qword_1F3F98;
  if (!qword_1F3F98)
  {
    result = swift_getWitnessTable(&unk_195390, &_s28BookSuggestionsConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F3F98);
  }
  return result;
}

uint64_t TabiConfiguration.BookSuggestionsConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;

  v5 = sub_5EDC(&qword_1F3FA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_D12BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s28BookSuggestionsConfigurationV10CodingKeysON, &_s28BookSuggestionsConfigurationV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_62F8(a1);
  v27 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v26 = 1;
  v13 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  v25 = 2;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v23 = v14;
  v24 = 3;
  swift_bridgeObjectRetain(v14);
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v15;
  v18(v8, v5);
  *a2 = v12;
  a2[1] = v13;
  v20 = v23;
  a2[2] = v22;
  a2[3] = v20;
  a2[4] = v19;
  a2[5] = v17;
  swift_bridgeObjectRetain(v17);
  sub_62F8(a1);
  swift_bridgeObjectRelease(v17);
  return swift_bridgeObjectRelease(v20);
}

uint64_t sub_D1500@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TabiConfiguration.BookSuggestionsConfiguration.init(from:)(a1, a2);
}

uint64_t sub_D1514(_QWORD *a1)
{
  return TabiConfiguration.BookSuggestionsConfiguration.encode(to:)(a1);
}

uint64_t _s28BookSuggestionsConfigurationVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *_s28BookSuggestionsConfigurationVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = a2[3];
  v5 = a1[3];
  a1[3] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[4] = a2[4];
  v6 = a2[5];
  v7 = a1[5];
  a1[5] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t _s28BookSuggestionsConfigurationVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for TabiConfiguration.BookSuggestionsConfiguration()
{
  return &type metadata for TabiConfiguration.BookSuggestionsConfiguration;
}

uint64_t _s28BookSuggestionsConfigurationV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_D1690 + 4 * byte_195259[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_D16C4 + 4 * byte_195254[v4]))();
}

uint64_t sub_D16C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_D16CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0xD16D4);
  return result;
}

uint64_t sub_D16E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0xD16E8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_D16EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_D16F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s28BookSuggestionsConfigurationV10CodingKeysOMa()
{
  return &_s28BookSuggestionsConfigurationV10CodingKeysON;
}

unint64_t sub_D1714()
{
  unint64_t result;

  result = qword_1F3FA8;
  if (!qword_1F3FA8)
  {
    result = swift_getWitnessTable(&unk_195368, &_s28BookSuggestionsConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F3FA8);
  }
  return result;
}

unint64_t sub_D175C()
{
  unint64_t result;

  result = qword_1F3FB0;
  if (!qword_1F3FB0)
  {
    result = swift_getWitnessTable(&unk_1952D8, &_s28BookSuggestionsConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F3FB0);
  }
  return result;
}

unint64_t sub_D17A4()
{
  unint64_t result;

  result = qword_1F3FB8;
  if (!qword_1F3FB8)
  {
    result = swift_getWitnessTable(&unk_195300, &_s28BookSuggestionsConfigurationV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1F3FB8);
  }
  return result;
}

uint64_t sub_D17E8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x65726E654778616DLL && a2 == 0xEB00000000734449)
  {
    v5 = 0xEB00000000734449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65726E654778616DLL, 0xEB00000000734449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F6874754178616DLL && a2 == 0xEC00000073444972)
  {
    v7 = 0xEC00000073444972;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6874754178616DLL, 0xEC00000073444972, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD00000000000001FLL)
  {
    v8 = 0x80000000001A1E00;
    if (a2 == 0x80000000001A1E00)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x80000000001A1E00, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000000001A1E20)
  {
    swift_bridgeObjectRelease(0x80000000001A1E20);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000000001A1E20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_D19C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD v24[2];

  v24[1] = a3;
  v5 = type metadata accessor for String.Encoding(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_BytesList(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v24 - v15;
  Com_Apple_News_Algorithms_Proto_Model_BytesList.init()(v14);
  v17 = sub_5EDC(&qword_1F1308);
  v18 = swift_allocObject(v17, 48, 7);
  *(_OWORD *)(v18 + 16) = xmmword_1875E0;
  static String.Encoding.utf8.getter(v18);
  v19 = String.data(using:allowLossyConversion:)(v8, 0, a1, a2);
  v21 = v20;
  result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v21 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v18 + 32) = v19;
    *(_QWORD *)(v18 + 40) = v21;
    v23 = Com_Apple_News_Algorithms_Proto_Model_BytesList.values.setter(v18);
    Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v23);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v9);
    Com_Apple_News_Algorithms_Proto_Model_Feature.bytesList.setter(v13);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  }
  return result;
}

uint64_t static Com_Apple_News_Algorithms_Proto_Model_Feature.fromStrings(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;

  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_BytesList(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v34 = (char *)&v30 - v14;
  Com_Apple_News_Algorithms_Proto_Model_BytesList.init()(v13);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = _swiftEmptyArrayStorage;
  if (v15)
  {
    v30 = v12;
    v31 = v9;
    v32 = v8;
    v33 = a2;
    v35 = _swiftEmptyArrayStorage;
    sub_341C8(0, v15, 0);
    v17 = (_QWORD *)(a1 + 40);
    while (1)
    {
      v18 = *(v17 - 1);
      v19 = *v17;
      v20 = swift_bridgeObjectRetain(*v17);
      static String.Encoding.utf8.getter(v20);
      v21 = String.data(using:allowLossyConversion:)(v7, 0, v18, v19);
      v23 = v22;
      result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (v23 >> 60 == 15)
        break;
      swift_bridgeObjectRelease(v19);
      v16 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
      {
        sub_341C8(0, v16[2] + 1, 1);
        v16 = v35;
      }
      v26 = v16[2];
      v25 = v16[3];
      if (v26 >= v25 >> 1)
      {
        sub_341C8(v25 > 1, v26 + 1, 1);
        v16 = v35;
      }
      v17 += 2;
      v16[2] = v26 + 1;
      v27 = &v16[2 * v26];
      v27[4] = v21;
      v27[5] = v23;
      if (!--v15)
      {
        v8 = v32;
        v12 = v30;
        v9 = v31;
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_10:
    v28 = v34;
    v29 = Com_Apple_News_Algorithms_Proto_Model_BytesList.values.setter(v16);
    Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v29);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v28, v8);
    Com_Apple_News_Algorithms_Proto_Model_Feature.bytesList.setter(v12);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v28, v8);
  }
  return result;
}

uint64_t static Com_Apple_News_Algorithms_Proto_Model_Feature.fromFloats(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for Com_Apple_News_Algorithms_Proto_Model_FloatList(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v13 - v8;
  Com_Apple_News_Algorithms_Proto_Model_FloatList.init()(v7);
  v10 = swift_bridgeObjectRetain(a1);
  v11 = Com_Apple_News_Algorithms_Proto_Model_FloatList.values.setter(v10);
  Com_Apple_News_Algorithms_Proto_Model_Feature.init()(v11);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v9, v2);
  Com_Apple_News_Algorithms_Proto_Model_Feature.floatList.setter(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v9, v2);
}

unint64_t static Transport.Info.title.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t static Transport.Info.version.getter()
{
  return 3157554;
}

void static Transport.Server.server1.getter(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000000019F760;
}

void sub_D1EB8()
{
  qword_1F3FC0 = (uint64_t)&off_1D9FA8;
}

uint64_t static Transport.Server.all.getter()
{
  if (qword_1F00F0 != -1)
    swift_once(&qword_1F00F0, sub_D1EB8);
  return swift_bridgeObjectRetain(qword_1F3FC0);
}

uint64_t Transport.Server.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

unint64_t sub_D1F54()
{
  unint64_t result;

  result = qword_1F3FC8;
  if (!qword_1F3FC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Server, &type metadata for Transport.Server);
    atomic_store(result, (unint64_t *)&qword_1F3FC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport()
{
  return &type metadata for Transport;
}

ValueMetadata *type metadata accessor for Transport.Info()
{
  return &type metadata for Transport.Info;
}

ValueMetadata *type metadata accessor for Transport.Server()
{
  return &type metadata for Transport.Server;
}

_QWORD *sub_D1FC8(uint64_t a1)
{
  int64_t v1;
  uint64_t *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_34418(0, v1, 0);
    v3 = (uint64_t *)(a1 + 48);
    do
    {
      v16 = *(v3 - 2);
      v15 = *((_BYTE *)v3 - 8);
      v14 = *v3;
      v13 = *((_BYTE *)v3 + 8);
      v4 = v3[2];
      v5 = *((_BYTE *)v3 + 24);
      v6 = v3[4];
      v12 = v3[5];
      v7 = v3[6];
      sub_40554(v4, v5);
      v8 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v7);
      if (v8 >= v9 >> 1)
        sub_34418(v9 > 1, v8 + 1, 1);
      _swiftEmptyArrayStorage[2] = v8 + 1;
      v10 = &_swiftEmptyArrayStorage[9 * v8];
      v10[4] = v16;
      *((_BYTE *)v10 + 40) = v15;
      v10[6] = v14;
      *((_BYTE *)v10 + 56) = v13;
      v10[8] = v4;
      *((_BYTE *)v10 + 72) = v5;
      v10[10] = v6;
      v10[11] = v12;
      v10[12] = v7;
      v3 += 10;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_D211C(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_340AC(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 9;
      v5 = v6;
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_340AC(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      result[v8 + 4] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_D21D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  _QWORD *v48;

  v2 = _swiftEmptyDictionarySingleton;
  v4 = a1 + 64;
  v3 = *(_QWORD *)(a1 + 64);
  v48 = _swiftEmptyDictionarySingleton;
  v5 = -1 << *(_BYTE *)(a1 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & v3;
  v8 = (unint64_t)(63 - v5) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_6;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v17 >= v8)
      goto LABEL_38;
    v18 = *(_QWORD *)(v4 + 8 * v17);
    v19 = v10 + 1;
    if (!v18)
    {
      v19 = v10 + 2;
      if (v10 + 2 >= v8)
        goto LABEL_38;
      v18 = *(_QWORD *)(v4 + 8 * v19);
      if (!v18)
      {
        v19 = v10 + 3;
        if (v10 + 3 >= v8)
          goto LABEL_38;
        v18 = *(_QWORD *)(v4 + 8 * v19);
        if (!v18)
        {
          v19 = v10 + 4;
          if (v10 + 4 >= v8)
            goto LABEL_38;
          v18 = *(_QWORD *)(v4 + 8 * v19);
          if (!v18)
            break;
        }
      }
    }
LABEL_24:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v19 << 6);
    v10 = v19;
LABEL_6:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v12);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    KeyPath = swift_getKeyPath(&unk_1954B8);
    v39 = v14;
    swift_bridgeObjectRetain(v14);
    swift_getAtKeyPath(&v40, &v39, KeyPath);
    swift_release(KeyPath);
    v16 = v46;
    if (!v46)
      goto LABEL_7;
    v32 = v40;
    v33 = v41;
    v34 = v42;
    v35 = v43;
    v36 = v44;
    v37 = v45;
    v38 = v47;
    v21 = v2[2];
    if (v2[3] <= v21)
    {
      sub_15CF88(v21 + 1, 1);
      v2 = v48;
    }
    result = static Hasher._hash(seed:_:)(v2[5], v13);
    v22 = v2 + 8;
    v23 = -1 << *((_BYTE *)v2 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~v2[(v24 >> 6) + 8]) == 0)
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      while (++v25 != v28 || (v27 & 1) == 0)
      {
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = v22[v25];
        if (v30 != -1)
        {
          v26 = __clz(__rbit64(~v30)) + (v25 << 6);
          goto LABEL_37;
        }
      }
      goto LABEL_40;
    }
    v26 = __clz(__rbit64((-1 << v24) & ~v2[(v24 >> 6) + 8])) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
    *(_QWORD *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    *(_QWORD *)(v2[6] + 8 * v26) = v13;
    v31 = v2[7] + 72 * v26;
    *(_QWORD *)v31 = v32;
    *(_BYTE *)(v31 + 8) = v33 & 1;
    *(_QWORD *)(v31 + 16) = v34;
    *(_BYTE *)(v31 + 24) = v35 & 1;
    *(_QWORD *)(v31 + 32) = v36;
    *(_BYTE *)(v31 + 40) = v37;
    *(_QWORD *)(v31 + 48) = v16;
    *(_OWORD *)(v31 + 56) = v38;
    ++v2[2];
LABEL_7:
    result = swift_bridgeObjectRelease(v14);
  }
  v20 = v10 + 5;
  if (v10 + 5 >= v8)
  {
LABEL_38:
    sub_5FEC(a1);
    return (uint64_t)v2;
  }
  v18 = *(_QWORD *)(v4 + 8 * v20);
  if (v18)
  {
    v19 = v10 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v8)
      goto LABEL_38;
    v18 = *(_QWORD *)(v4 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_24;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t TabiBookScorer.score(_:configuration:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for BookScoringWork(0);
  v2[7] = v3;
  v2[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[10] = v5;
  v2[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_D25A8, 0, 0);
}

uint64_t sub_D25A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _QWORD *v11;
  int *v13;

  v2 = v1[5];
  v3 = (_QWORD *)v1[6];
  UUID.init()(a1);
  v4 = sub_D1FC8(v2);
  v1[12] = v4;
  v5 = swift_bridgeObjectRetain(v4);
  v6 = sub_D2DC0(v5);
  swift_bridgeObjectRelease(v4);
  v1[13] = sub_D21D8(v6);
  swift_bridgeObjectRelease(v6);
  v7 = sub_D211C((uint64_t)v4);
  v1[14] = v7;
  v8 = v3[6];
  v9 = v3[7];
  sub_49F4(v3 + 3, v8);
  v10 = *(int **)(v9 + 16);
  v13 = (int *)((char *)v10 + *v10);
  v11 = (_QWORD *)swift_task_alloc(v10[1]);
  v1[15] = v11;
  *v11 = v1;
  v11[1] = sub_D2698;
  return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v13)(v7, v8, v9);
}

uint64_t sub_D2698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 120);
  *(_QWORD *)(*(_QWORD *)v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[13];
    v7 = v4[14];
    swift_bridgeObjectRelease(v4[12]);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    v8 = sub_D28C0;
  }
  else
  {
    v4[17] = a1;
    v8 = sub_D2728;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_D2728()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(int **)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 16))(v5, *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  *(_QWORD *)(v5 + v6[5]) = v3;
  *(_QWORD *)(v5 + v6[6]) = v4;
  *(_QWORD *)(v5 + v6[7]) = v2;
  v7 = sub_5EDC(&qword_1F3FD8);
  v8 = sub_D30B8();
  WorkService.perform<A, B>(_:)(v5, v6, v7, v8);
  v9 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 64);
  v13 = *(_QWORD *)(v0 + 72);
  if (v1)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    sub_D3100(v12);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v13);
    v14 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_D3100(*(_QWORD *)(v0 + 64));
    v16 = *(_QWORD *)(v0 + 32);
    v17 = swift_task_alloc(32);
    *(_QWORD *)(v17 + 16) = v9;
    v18 = sub_D2B30(v16, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD, double))sub_D313C);
    swift_bridgeObjectRelease(v16);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v13);
    swift_bridgeObjectRelease(v9);
    swift_task_dealloc(v17);
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v18);
  }
}

uint64_t sub_D28C0()
{
  uint64_t v0;
  uint64_t v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D2910@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    v4 = *(_QWORD *)(v3 + 32);
    v5 = *(unsigned __int8 *)(v3 + 40);
    v6 = *(_QWORD *)(v3 + 48);
    v7 = *(unsigned __int8 *)(v3 + 56);
    v8 = *(_QWORD *)(v3 + 64);
    v9 = *(_QWORD *)(v3 + 80);
    v10 = *(_QWORD *)(v3 + 88);
    v11 = *(_QWORD *)(v3 + 96);
    v12 = *(unsigned __int8 *)(v3 + 72);
    sub_40554(v8, *(_BYTE *)(v3 + 72));
    swift_bridgeObjectRetain(v11);
    result = swift_bridgeObjectRetain(v9);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v12 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v12;
  a2[6] = v9;
  a2[7] = v10;
  a2[8] = v11;
  return result;
}

double sub_D29D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  double result;

  if (*(_QWORD *)(a2 + 16) && (v7 = sub_39228(a1), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(a2 + 56) + 72 * v7;
    v10 = *(unsigned __int8 *)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
    v12 = *(unsigned __int8 *)(v9 + 24);
    v13 = *(_QWORD *)(v9 + 32);
    v15 = *(_QWORD *)(v9 + 48);
    v14 = *(_QWORD *)(v9 + 56);
    v16 = *(_QWORD *)(v9 + 64);
    v17 = *(_BYTE *)(v9 + 40);
    *(_QWORD *)a3 = *(_QWORD *)v9;
    *(_QWORD *)(a3 + 8) = v10;
    *(_QWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 24) = v12;
    *(_QWORD *)(a3 + 32) = v13;
    *(_QWORD *)(a3 + 40) = v17;
    *(_QWORD *)(a3 + 48) = v15;
    *(_QWORD *)(a3 + 56) = v14;
    *(_QWORD *)(a3 + 64) = v16;
    *(double *)(a3 + 72) = a4;
    sub_40554(v13, v17);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v15);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
  }
  return result;
}

uint64_t UserEncodingService.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_62F8((_QWORD *)(v0 + 24));
  return v0;
}

uint64_t UserEncodingService.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_62F8((_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_D2AE0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1F3FD4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_70AB4;
  return TabiBookScorer.score(_:configuration:)(a1);
}

uint64_t sub_D2B30(uint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr, _QWORD, double))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t i;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  if (!v7)
    goto LABEL_7;
LABEL_4:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (i = v12 | (v10 << 6); ; i = __clz(__rbit64(v16)) + (v10 << 6))
  {
    result = (uint64_t)a2(&v32, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * i), *(double *)(*(_QWORD *)(a1 + 56) + 8 * i));
    v14 = v38;
    if (v38)
    {
      v25 = v32;
      v26 = v33;
      v27 = v34;
      v28 = v35;
      v29 = v36;
      v30 = v37;
      v31 = v39;
      v18 = v40;
      result = swift_isUniquelyReferenced_nonNull_native(v11);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_2FEC0(0, v11[2] + 1, 1, v11);
        v11 = (_QWORD *)result;
      }
      v19 = v11;
      v20 = v11[2];
      v21 = v19;
      v22 = v19[3];
      v23 = v20 + 1;
      if (v20 >= v22 >> 1)
      {
        result = (uint64_t)sub_2FEC0((_QWORD *)(v22 > 1), v20 + 1, 1, v21);
        v23 = v20 + 1;
        v21 = (_QWORD *)result;
      }
      v21[2] = v23;
      v24 = &v21[10 * v20];
      v11 = v21;
      v24[4] = v25;
      *((_BYTE *)v24 + 40) = v26 & 1;
      v24[6] = v27;
      *((_BYTE *)v24 + 56) = v28 & 1;
      v24[8] = v29;
      *((_BYTE *)v24 + 72) = v30;
      v24[10] = v14;
      *(_OWORD *)(v24 + 11) = v31;
      v24[13] = v18;
      if (v7)
        goto LABEL_4;
    }
    else if (v7)
    {
      goto LABEL_4;
    }
LABEL_7:
    v15 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v15 >= v8)
      goto LABEL_29;
    v16 = *(_QWORD *)(v4 + 8 * v15);
    ++v10;
    if (!v16)
    {
      v10 = v15 + 1;
      if (v15 + 1 >= v8)
        goto LABEL_29;
      v16 = *(_QWORD *)(v4 + 8 * v10);
      if (!v16)
      {
        v10 = v15 + 2;
        if (v15 + 2 >= v8)
          goto LABEL_29;
        v16 = *(_QWORD *)(v4 + 8 * v10);
        if (!v16)
        {
          v10 = v15 + 3;
          if (v15 + 3 >= v8)
            goto LABEL_29;
          v16 = *(_QWORD *)(v4 + 8 * v10);
          if (!v16)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v16 - 1) & v16;
  }
  v17 = v15 + 4;
  if (v17 >= v8)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v11;
  }
  v16 = *(_QWORD *)(v4 + 8 * v17);
  if (v16)
  {
    v10 = v17;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v10 >= v8)
      goto LABEL_29;
    v16 = *(_QWORD *)(v4 + 8 * v10);
    ++v17;
    if (v16)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_D2DC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t result;
  char v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD *v49;

  v1 = _swiftEmptyDictionarySingleton;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (uint64_t)v1;
  v3 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v49 = v1;
    v45 = *((_BYTE *)v3 - 8);
    v46 = *v3;
    v47 = *((_BYTE *)v3 + 8);
    v5 = v3[2];
    v6 = *((_BYTE *)v3 + 24);
    v7 = v3[4];
    v48 = v3[5];
    v43 = v3;
    v8 = v3[6];
    v9 = *(v3 - 2);
    v10 = sub_39228(v9);
    v12 = v1;
    v13 = v1[2];
    v14 = (v11 & 1) == 0;
    v15 = v13 + v14;
    if (__OFADD__(v13, v14))
      break;
    v16 = v10;
    v17 = v11;
    v42 = v2;
    v18 = v12[3];
    v41 = v6;
    sub_40554(v5, v6);
    v44 = v8;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v7);
    v19 = v9;
    if (v18 < v15)
    {
      sub_15D2C4(v15, 1);
      v49 = _swiftEmptyDictionarySingleton;
      v20 = sub_39228(v9);
      if ((v17 & 1) != (v21 & 1))
        goto LABEL_20;
      v16 = v20;
    }
    v22 = 8 * v16;
    if ((v17 & 1) != 0)
    {
      v23 = v49[7];
      v24 = *(_QWORD **)(v23 + 8 * v16);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
      *(_QWORD *)(v23 + 8 * v16) = v24;
      v26 = v42;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v27 = v16;
      }
      else
      {
        v24 = sub_307BC(0, v24[2] + 1, 1, v24);
        v27 = v16;
        *(_QWORD *)(v23 + 8 * v16) = v24;
      }
      v29 = v24[2];
      v28 = v24[3];
      v30 = v29 + 1;
      v31 = v44;
      v1 = v49;
      if (v29 >= v28 >> 1)
      {
        v32 = sub_307BC((_QWORD *)(v28 > 1), v29 + 1, 1, v24);
        v30 = v29 + 1;
        v1 = v49;
        v24 = v32;
        v31 = v44;
        *(_QWORD *)(v23 + 8 * v27) = v32;
      }
      v24[2] = v30;
      v4 = &v24[9 * v29];
      v4[4] = v19;
      *((_BYTE *)v4 + 40) = v45;
      v4[6] = v46;
      *((_BYTE *)v4 + 56) = v47;
      v4[8] = v5;
      *((_BYTE *)v4 + 72) = v41;
      v4[10] = v7;
      v4[11] = v48;
      v4[12] = v31;
    }
    else
    {
      v33 = sub_5EDC(&qword_1F10F0);
      v34 = swift_allocObject(v33, 104, 7);
      *(_OWORD *)(v34 + 16) = xmmword_1875E0;
      *(_QWORD *)(v34 + 32) = v9;
      *(_BYTE *)(v34 + 40) = v45;
      *(_QWORD *)(v34 + 48) = v46;
      *(_BYTE *)(v34 + 56) = v47;
      *(_QWORD *)(v34 + 64) = v5;
      *(_BYTE *)(v34 + 72) = v6;
      *(_QWORD *)(v34 + 80) = v7;
      *(_QWORD *)(v34 + 88) = v48;
      *(_QWORD *)(v34 + 96) = v44;
      v35 = v16 >> 6;
      v36 = v16;
      v1 = v49;
      v49[v35 + 8] |= 1 << v36;
      *(_QWORD *)(v49[6] + v22) = v9;
      *(_QWORD *)(v49[7] + v22) = v34;
      v37 = v49[2];
      v38 = __OFADD__(v37, 1);
      v39 = v37 + 1;
      v26 = v42;
      if (v38)
        goto LABEL_19;
      v49[2] = v39;
    }
    v3 = v43 + 9;
    v2 = v26 - 1;
    if (!v2)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

unint64_t sub_D30B8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F3F60;
  if (!qword_1F3F60)
  {
    v1 = type metadata accessor for BookScoringWork(255);
    result = swift_getWitnessTable(&unk_1950BC, v1);
    atomic_store(result, (unint64_t *)&qword_1F3F60);
  }
  return result;
}

uint64_t sub_D3100(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BookScoringWork(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_D313C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v3;

  return sub_D29D0(a1, *(_QWORD *)(v3 + 16), a2, a3);
}

uint64_t type metadata accessor for TabiBookScorer()
{
  return objc_opt_self(_TtC20BooksPersonalization14TabiBookScorer);
}

uint64_t method lookup function for TabiBookScorer(uint64_t a1, uint64_t a2)
{
  return swift_lookUpClassMethod(a1, a2, &nominal type descriptor for TabiBookScorer);
}

unint64_t sub_D3174()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F4090;
  if (!qword_1F4090)
  {
    v1 = sub_5F68(&qword_1F4098);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1F4090);
  }
  return result;
}

uint64_t sub_D31C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BookRecommendationService, (uint64_t)&off_1E9E70, a2);
}

uint64_t sub_D31D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for NextInSeriesProcessorService, (uint64_t)&off_1E33A0, a2);
}

uint64_t sub_D31EC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BookRecommendationPostHydrationFilteringService, (uint64_t)&protocol witness table for BookRecommendationPostHydrationFilteringService, a2);
}

uint64_t sub_D3200@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_74F3C(a1, (uint64_t (*)(_QWORD))type metadata accessor for BookRecommendationService, (uint64_t)&off_1E9E80, a2);
}

uint64_t sub_D3214()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_5EDC(&qword_1F4158);
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = _swiftEmptyArrayStorage;
  return result;
}

_QWORD *sub_D3248(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F2160);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v30, v4, v4, v2, v3);
  if (!v31)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_49F4(a1, v6);
  v8 = sub_5EDC(&qword_1F4178);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v28, v8, v8, v6, v7);
  if (!v29)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v9 = a1[3];
  v10 = a1[4];
  sub_49F4(a1, v9);
  v11 = sub_5EDC(&qword_1F25B0);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(v26, v11, v11, v9, v10);
  if (!v27)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = sub_5EDC(&qword_1F4140);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v24, v14, v14, v12, v13);
  if (v25)
  {
    v15 = sub_3DD18((uint64_t)v28, v29);
    __chkstk_darwin(v15);
    v17 = (uint64_t *)((char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v18 + 16))(v17);
    v19 = sub_3DD18((uint64_t)v26, v27);
    __chkstk_darwin(v19);
    v21 = (uint64_t *)((char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v22 + 16))(v21);
    v23 = sub_D37F8(&v30, *v17, *v21, &v24);
    sub_62F8(v26);
    sub_62F8(v28);
    return v23;
  }
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_D3454(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v1 = a1[3];
  v2 = a1[4];
  sub_49F4(a1, v1);
  v3 = sub_5EDC(&qword_1F2630);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v7, v3, v3, v1, v2);
  if (v8)
  {
    v5 = type metadata accessor for NextInSeriesProcessorService();
    v6 = swift_allocObject(v5, 56, 7);
    sub_26DB8(&v7, v6 + 16);
    return (_QWORD *)v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_D34E0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _UNKNOWN **v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  _UNKNOWN **v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  _UNKNOWN **v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v2 = a1[3];
  v3 = a1[4];
  sub_49F4(a1, v2);
  v4 = sub_5EDC(&qword_1F2160);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v45, v4, v4, v2, v3);
  if (!v46)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = a1[3];
  v7 = a1[4];
  sub_49F4(a1, v6);
  v8 = sub_5EDC(&qword_1F2630);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v43, v8, v8, v6, v7);
  if (!v44)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v9 = type metadata accessor for StringOperationFlattener();
  v10 = swift_allocObject(v9, 16, 7);
  v11 = sub_5EDC(&qword_1F4160);
  v12 = swift_allocObject(v11, 112, 7);
  *(_OWORD *)(v12 + 16) = xmmword_18FC00;
  v13 = a1[3];
  v14 = a1[4];
  sub_49F4(a1, v13);
  v15 = sub_5EDC(&qword_1F4168);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v40, v15, v15, v13, v14);
  v16 = v41;
  if (!v41)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v17 = v42;
  v18 = sub_49F4(&v40, v41);
  *(_QWORD *)(v12 + 56) = v16;
  *(_QWORD *)(v12 + 64) = v17[1];
  v19 = sub_3DD84((_QWORD *)(v12 + 32));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v19, v18, v16);
  v20 = swift_allocObject(v9, 16, 7);
  *(_QWORD *)(v12 + 96) = v9;
  *(_QWORD *)(v12 + 104) = &protocol witness table for StringOperationFlattener;
  *(_QWORD *)(v12 + 72) = v20;
  sub_62F8(&v40);
  v21 = type metadata accessor for AggregateFlattener();
  v22 = swift_allocObject(v21, 24, 7);
  *(_QWORD *)(v22 + 16) = v12;
  v41 = v21;
  v42 = &protocol witness table for AggregateFlattener;
  *(_QWORD *)&v40 = v22;
  v23 = a1[3];
  v24 = a1[4];
  sub_49F4(a1, v23);
  v25 = sub_5EDC(&qword_1F25D8);
  result = dispatch thunk of ResolverType.resolve<A>(_:)(&v38, v25, v25, v23, v24);
  if (v39)
  {
    v26 = a1[3];
    v27 = a1[4];
    sub_49F4(a1, v26);
    *(_QWORD *)&v35 = &type metadata for UseV2AndMetadata;
    v28 = sub_5EDC(&qword_1F4170);
    v29 = String.init<A>(describing:)(&v35, v28);
    v31 = v30;
    dispatch thunk of ResolverType.resolve<A>(_:name:)(&v35, &type metadata for Bool, v29, v30, &type metadata for Bool, v26, v27);
    swift_bridgeObjectRelease(v31);
    v32 = v35 & 1;
    v36 = v9;
    v37 = &protocol witness table for StringOperationFlattener;
    *(_QWORD *)&v35 = v10;
    v33 = type metadata accessor for BookRecommendationPostHydrationFilteringService();
    v34 = swift_allocObject(v33, 232, 7);
    *(_QWORD *)(v34 + 224) = 0;
    sub_26DB8(&v45, v34 + 16);
    sub_26DB8(&v43, v34 + 56);
    sub_26DB8(&v35, v34 + 136);
    sub_26DB8(&v40, v34 + 96);
    sub_26DB8(&v38, v34 + 176);
    *(_BYTE *)(v34 + 216) = v32;
    return (_QWORD *)v34;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for Assembly()
{
  return objc_opt_self(_TtC20BooksPersonalization8Assembly);
}

_QWORD *sub_D37F8(__int128 *a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[5];

  v8 = type metadata accessor for DelegatingCollectionService();
  v26[3] = v8;
  v26[4] = &off_1E7E40;
  v26[0] = a2;
  v9 = type metadata accessor for DelegatingBookScorer();
  v24 = v9;
  v25 = &off_1E0908;
  v23[0] = a3;
  v10 = type metadata accessor for BookRecommendationService();
  v11 = (_QWORD *)swift_allocObject(v10, 176, 7);
  v12 = sub_3DD18((uint64_t)v26, v8);
  __chkstk_darwin(v12);
  v14 = (_QWORD *)((char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_3DD18((uint64_t)v23, v24);
  __chkstk_darwin(v16);
  v18 = (_QWORD *)((char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = *v14;
  v21 = *v18;
  v11[10] = v8;
  v11[11] = &off_1E7E40;
  v11[7] = v20;
  v11[15] = v9;
  v11[16] = &off_1E0908;
  v11[12] = v21;
  sub_26DB8(a1, (uint64_t)(v11 + 2));
  sub_26DB8(a4, (uint64_t)(v11 + 17));
  sub_62F8(v23);
  sub_62F8(v26);
  return v11;
}

uint64_t sub_D3978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;

  v0 = type metadata accessor for Scope(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = ProxyContainer.public.getter(v2);
  v6 = sub_5EDC(&qword_1F4138);
  v7 = RegistrationContainer.register<A>(_:name:factory:)(v6, 0, 0, sub_D31C4, 0, v6);
  swift_release(v5);
  v8 = enum case for Scope.singleton(_:);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 104);
  v9(v4, enum case for Scope.singleton(_:), v0);
  v10 = Definition.inScope(_:)(v4);
  swift_release(v10);
  swift_release(v7);
  v11 = *(uint64_t (**)(char *, uint64_t))(v1 + 8);
  v12 = v11(v4, v0);
  v13 = ProxyContainer.public.getter(v12);
  v14 = sub_5EDC(&qword_1F4140);
  v15 = RegistrationContainer.register<A>(_:name:factory:)(v14, 0, 0, sub_D31D8, 0, v14);
  swift_release(v13);
  v9(v4, v8, v0);
  v16 = Definition.inScope(_:)(v4);
  swift_release(v16);
  swift_release(v15);
  v17 = v11(v4, v0);
  v18 = ProxyContainer.public.getter(v17);
  v19 = sub_5EDC(&qword_1F4148);
  v20 = RegistrationContainer.register<A>(_:name:factory:)(v19, 0, 0, sub_D31EC, 0, v19);
  swift_release(v18);
  v9(v4, v8, v0);
  v21 = Definition.inScope(_:)(v4);
  swift_release(v21);
  swift_release(v20);
  v22 = v11(v4, v0);
  v23 = ProxyContainer.public.getter(v22);
  v24 = sub_5EDC(&qword_1F4150);
  v25 = RegistrationContainer.register<A>(_:name:factory:)(v24, 0, 0, sub_D3200, 0, v24);
  swift_release(v23);
  v9(v4, v8, v0);
  v26 = Definition.inScope(_:)(v4);
  swift_release(v26);
  swift_release(v25);
  v27 = v11(v4, v0);
  v28 = ProxyContainer.public.getter(v27);
  v29 = sub_5EDC(&qword_1F4158);
  v30 = RegistrationContainer.register<A>(_:name:factory:)(v29, 0, 0, sub_D3214, 0, v29);
  swift_release(v28);
  v9(v4, v8, v0);
  v31 = Definition.inScope(_:)(v4);
  swift_release(v31);
  swift_release(v30);
  v32 = v11(v4, v0);
  v33 = ProxyContainer.private.getter(v32);
  v34 = type metadata accessor for BookRecommendationService();
  v35 = RegistrationContainer.register<A>(_:name:factory:)(v34, 0, 0, sub_D3248, 0, v34);
  swift_release(v33);
  v9(v4, v8, v0);
  v36 = Definition.inScope(_:)(v4);
  swift_release(v36);
  swift_release(v35);
  v37 = v11(v4, v0);
  v38 = ProxyContainer.private.getter(v37);
  v39 = type metadata accessor for NextInSeriesProcessorService();
  v40 = RegistrationContainer.register<A>(_:name:factory:)(v39, 0, 0, sub_D3454, 0, v39);
  swift_release(v38);
  v9(v4, v8, v0);
  v41 = Definition.inScope(_:)(v4);
  swift_release(v41);
  swift_release(v40);
  v42 = v11(v4, v0);
  v43 = ProxyContainer.private.getter(v42);
  v44 = type metadata accessor for BookRecommendationPostHydrationFilteringService();
  v45 = RegistrationContainer.register<A>(_:name:factory:)(v44, 0, 0, sub_D34E0, 0, v44);
  swift_release(v43);
  v9(v4, v8, v0);
  v46 = Definition.inScope(_:)(v4);
  swift_release(v46);
  swift_release(v45);
  return v11(v4, v0);
}

uint64_t sub_D3D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int64_t v4;
  uint64_t result;
  double *v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    result = sub_344E0(0, v4, 0);
    v7 = (double *)(a1 + 104);
    while (1)
    {
      v8 = *((_QWORD *)v7 - 9);
      if (v8 < 0)
        break;
      v9 = *v7;
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        result = sub_344E0(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = (float *)&_swiftEmptyArrayStorage[3 * v11];
      *((_QWORD *)v12 + 4) = v8;
      v13 = v9;
      v12[10] = v13;
      *((_BYTE *)v12 + 44) = 0;
      *((_QWORD *)v12 + 6) = 0;
      v7 += 10;
      if (!--v4)
        goto LABEL_7;
    }
    __break(1u);
  }
  else
  {
LABEL_7:
    result = type metadata accessor for SeedBasedRecommendationRequest(0);
    *(_BYTE *)a2 = *(_BYTE *)(v2 + *(int *)(result + 44));
    *(_QWORD *)(a2 + 8) = _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_D3EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _UNKNOWN **v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_D3F98(a1);
  result = type metadata accessor for SeedBasedRecommendationRequest(0);
  v8 = *(unsigned __int8 *)(v3 + *(int *)(result + 32));
  v9 = *(_QWORD *)(v3 + *(int *)(result + 40)) & 2;
  if ((*(_QWORD *)(v3 + *(int *)(result + 40)) & 1) == 0)
  {
    if (!v9)
    {
      v10 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
      v11 = sub_D4778();
      swift_allocError(v10, v11, 0, 0);
      v13 = swift_storeEnumTagMultiPayload(v12, v10, 8);
      swift_willThrow(v13);
      swift_bridgeObjectRelease();
      return sub_26A48(0, v8);
    }
    v9 = 1;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v6;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = v9;
    *(_DWORD *)(a3 + 40) = a2;
    *(_BYTE *)(a3 + 44) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    return result;
  }
  __break(1u);
  return result;
}

_UNKNOWN **sub_D3F98(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  _UNKNOWN **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_34348(0, v1, 0);
    v3 = _swiftEmptyArrayStorage;
    result = (_UNKNOWN **)sub_EDD8C(a1);
    v5 = (uint64_t)result;
    v7 = v6;
    v9 = v8 & 1;
    while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
    {
      if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
        goto LABEL_15;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v7)
        goto LABEL_16;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v5);
      if (v10 < 0)
        goto LABEL_17;
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_34348(v11 > 1, v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      _swiftEmptyArrayStorage[v12 + 4] = v10;
      result = (_UNKNOWN **)sub_EDE30(v5, v7, v9 & 1, a1);
      v5 = (uint64_t)result;
      v7 = v13;
      v9 = v14 & 1;
      if (!--v1)
      {
        sub_41814((uint64_t)result, v13, v14 & 1);
        return (_UNKNOWN **)v3;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {
    return &off_1D9FD8;
  }
  return result;
}

void sub_D4100()
{
  __asm { BR              X11 }
}

uint64_t sub_D4134@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = v2[4];
  v3 = v2[5];
  v6 = v2[2];
  v5 = v2[3];
  v7 = v2[1];
  *a1 = v1;
  a1[1] = v7;
  a1[2] = v6;
  a1[3] = v5;
  a1[4] = v4;
  a1[5] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  return swift_bridgeObjectRetain(v4);
}

_QWORD *sub_D4298()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *result;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _BYTE v52[56];

  v1 = *v0;
  if (!*v0)
  {
    v47 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
    v48 = sub_D4778();
    swift_allocError(v47, v48, 0, 0);
    v50 = swift_storeEnumTagMultiPayload(v49, v47, 9);
    return (_QWORD *)swift_willThrow(v50);
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v3 = (_QWORD *)(swift_bridgeObjectRetain(v1) + 48);
  v51 = _swiftEmptyArrayStorage;
  while (1)
  {
    v4 = *(v3 - 2);
    if (v4 < 0)
      break;
    v5 = *v3;
    if ((*((_BYTE *)v3 - 4) & 1) != 0)
    {
      v6 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
      v7 = sub_D4778();
      v8 = swift_allocError(v6, v7, 0, 0);
      v10 = v9;
      *v9 = v4;
      v11 = v6;
      v12 = 4;
LABEL_21:
      v37 = swift_storeEnumTagMultiPayload(v10, v11, v12);
      swift_willThrow(v37);
      if (qword_1F0180 != -1)
        swift_once(&qword_1F0180, sub_17184C);
      v38 = type metadata accessor for Logger(0);
      sub_5216C(v38, (uint64_t)qword_224630);
      swift_errorRetain(v8);
      swift_errorRetain(v8);
      v39 = swift_bridgeObjectRetain(v5);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v40, v41))
      {
        v42 = swift_slowAlloc(22, -1);
        v43 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v42 = 134218242;
        *(_QWORD *)(v42 + 4) = v4;
        swift_bridgeObjectRelease();
        *(_WORD *)(v42 + 12) = 2112;
        swift_errorRetain(v8);
        v44 = _swift_stdlib_bridgeErrorToNSError(v8);
        *(_QWORD *)(v42 + 14) = v44;
        *v43 = v44;
        swift_errorRelease(v8);
        swift_errorRelease(v8);
        _os_log_impl(&dword_0, v40, v41, "failed to create recommended book for %lld with error %@", (uint8_t *)v42, 0x16u);
        v45 = sub_5EDC(&qword_1F3158);
        swift_arrayDestroy(v43, 1, v45);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

        swift_errorRelease(v8);
      }
      else
      {
        swift_errorRelease(v8);
        swift_bridgeObjectRelease();
        swift_errorRelease(v8);
        swift_errorRelease(v8);

      }
      goto LABEL_5;
    }
    if (!v5)
    {
      v31 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
      v32 = sub_D4778();
      v8 = swift_allocError(v31, v32, 0, 0);
      v10 = v33;
      *v33 = v4;
      v11 = v31;
      v12 = 5;
      goto LABEL_21;
    }
    if (!*(_QWORD *)(v5 + 16))
    {
      v34 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
      v35 = sub_D4778();
      v8 = swift_allocError(v34, v35, 0, 0);
      v10 = v36;
      *v36 = v4;
      v11 = v34;
      v12 = 6;
      goto LABEL_21;
    }
    v13 = *((float *)v3 - 2);
    v14 = *(_QWORD *)(v5 + 32);
    v15 = sub_5EDC(&qword_1F4188);
    inited = swift_initStackObject(v15, v52);
    *(_OWORD *)(inited + 16) = xmmword_1875E0;
    *(_QWORD *)(inited + 32) = 0;
    *(_QWORD *)(inited + 40) = 0;
    *(double *)(inited + 48) = v13;
    sub_5EDC(&qword_1F4190);
    v17 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(1);
    swift_retain(v17);
    v18 = *(_QWORD *)(inited + 32);
    v19 = *(_QWORD *)(inited + 40);
    v20 = *(_QWORD *)(inited + 48);
    sub_1F6D4(v18, v19);
    v21 = sub_398C4(v18, v19);
    if ((v22 & 1) != 0)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      break;
    }
    v17[(v21 >> 6) + 8] |= 1 << v21;
    v23 = (uint64_t *)(v17[6] + 16 * v21);
    *v23 = v18;
    v23[1] = v19;
    *(_QWORD *)(v17[7] + 8 * v21) = v20;
    v24 = v17[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
      goto LABEL_30;
    v17[2] = v26;
    swift_release(v17);
    swift_bridgeObjectRelease();
    if (v14 < 0)
      break;
    if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) != 0)
      v27 = v51;
    else
      v27 = sub_3055C(0, v51[2] + 1, 1, v51);
    v29 = v27[2];
    v28 = v27[3];
    if (v29 >= v28 >> 1)
      v27 = sub_3055C((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
    v27[2] = v29 + 1;
    v51 = v27;
    v30 = &v27[3 * v29];
    v30[4] = v4;
    v30[5] = v17;
    v30[6] = v14;
LABEL_5:
    v3 += 3;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return v51;
    }
  }
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

unint64_t sub_D4778()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F4180;
  if (!qword_1F4180)
  {
    v1 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(255);
    result = swift_getWitnessTable(&unk_19B4A4, v1);
    atomic_store(result, (unint64_t *)&qword_1F4180);
  }
  return result;
}

_QWORD *sub_D47C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *i;
  uint64_t v4;
  uint64_t v5;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *result;

  v1 = *(_QWORD *)(v0 + 16);
  if (!v1)
    return (_QWORD *)sub_5FF40((uint64_t)_swiftEmptyArrayStorage);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
  for (i = (_BYTE *)(v1 + 56); ; i += 32)
  {
    if ((*(i - 16) & 1) != 0 || (*i & 1) != 0)
      goto LABEL_6;
    v4 = *((_QWORD *)i - 3);
    if (v4 < 0)
      goto LABEL_27;
    v5 = *((_QWORD *)i - 1);
    if (v5 < 0)
      goto LABEL_27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v8 = sub_39228(v4);
    v9 = _swiftEmptyDictionarySingleton[2];
    v10 = (v7 & 1) == 0;
    v11 = v9 + v10;
    if (__OFADD__(v9, v10))
      break;
    v12 = v7;
    if (_swiftEmptyDictionarySingleton[3] >= v11)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v7 & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        sub_16B724();
        if ((v12 & 1) == 0)
          goto LABEL_18;
      }
    }
    else
    {
      sub_15A924(v11, isUniquelyReferenced_nonNull_native);
      v13 = sub_39228(v4);
      if ((v12 & 1) != (v14 & 1))
        goto LABEL_28;
      v8 = v13;
      if ((v12 & 1) == 0)
      {
LABEL_18:
        _swiftEmptyDictionarySingleton[(v8 >> 6) + 8] |= 1 << v8;
        v15 = 8 * v8;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v15) = v4;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v15) = v5;
        v16 = _swiftEmptyDictionarySingleton[2];
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
          goto LABEL_26;
        _swiftEmptyDictionarySingleton[2] = v18;
        goto LABEL_5;
      }
    }
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v8) = v5;
LABEL_5:
    swift_bridgeObjectRelease();
LABEL_6:
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_28:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_D49E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 24);
  if (!v1)
    return (_QWORD *)sub_5FF34(_swiftEmptyArrayStorage);
  v31 = *(_QWORD *)(v1 + 16);
  if (!v31)
    return _swiftEmptyDictionarySingleton;
  v30 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v2 = 0;
  while (1)
  {
    v4 = (uint64_t *)(v30 + 16 * v2);
    v5 = *v4;
    if (*v4 < 0)
      break;
    v6 = v4[1];
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain_n(v6, 2);
      sub_340AC(0, v7, 0);
      v32 = v6;
      v8 = *(_QWORD *)(v6 + 32);
      if (v8 < 0)
        break;
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_340AC(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v8;
      v11 = v7 - 1;
      if (v7 != 1)
      {
        v25 = v10 + 5;
        v26 = (uint64_t *)(v32 + 40);
        while (v11)
        {
          v27 = *v26;
          if (*v26 < 0)
            goto LABEL_38;
          v28 = _swiftEmptyArrayStorage[3];
          if (v25 - 4 >= v28 >> 1)
            sub_340AC(v28 > 1, v25 - 3, 1);
          _swiftEmptyArrayStorage[2] = v25 - 3;
          _swiftEmptyArrayStorage[v25++] = v27;
          ++v26;
          if (!--v11)
            goto LABEL_12;
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        break;
      }
LABEL_12:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain(v4[1]);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v14 = sub_39228(v5);
    v15 = _swiftEmptyDictionarySingleton[2];
    v16 = (v13 & 1) == 0;
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      goto LABEL_36;
    v18 = v13;
    if (_swiftEmptyDictionarySingleton[3] >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v13 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_16B8D4();
        if ((v18 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_15AC54(v17, isUniquelyReferenced_nonNull_native);
      v19 = sub_39228(v5);
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_39;
      v14 = v19;
      if ((v18 & 1) != 0)
      {
LABEL_4:
        v3 = _swiftEmptyDictionarySingleton[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v3 + 8 * v14) = _swiftEmptyArrayStorage;
        goto LABEL_5;
      }
    }
    _swiftEmptyDictionarySingleton[(v14 >> 6) + 8] |= 1 << v14;
    v21 = 8 * v14;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v21) = v5;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v21) = _swiftEmptyArrayStorage;
    v22 = _swiftEmptyDictionarySingleton[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_37;
    _swiftEmptyDictionarySingleton[2] = v24;
LABEL_5:
    ++v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v2 == v31)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
LABEL_38:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_39:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

_QWORD *sub_D4D30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 40);
  if (!v1)
    return (_QWORD *)sub_5FF34(_swiftEmptyArrayStorage);
  v31 = *(_QWORD *)(v1 + 16);
  if (!v31)
    return _swiftEmptyDictionarySingleton;
  v30 = v1 + 32;
  swift_bridgeObjectRetain(v1);
  v2 = 0;
  while (1)
  {
    v4 = (uint64_t *)(v30 + 16 * v2);
    v5 = *v4;
    if (*v4 < 0)
      break;
    v6 = v4[1];
    v7 = *(_QWORD *)(v6 + 16);
    if (v7)
    {
      swift_bridgeObjectRetain_n(v6, 2);
      sub_340AC(0, v7, 0);
      v32 = v6;
      v8 = *(_QWORD *)(v6 + 32);
      if (v8 < 0)
        break;
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_340AC(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      _swiftEmptyArrayStorage[v10 + 4] = v8;
      v11 = v7 - 1;
      if (v7 != 1)
      {
        v25 = v10 + 5;
        v26 = (uint64_t *)(v32 + 40);
        while (v11)
        {
          v27 = *v26;
          if (*v26 < 0)
            goto LABEL_38;
          v28 = _swiftEmptyArrayStorage[3];
          if (v25 - 4 >= v28 >> 1)
            sub_340AC(v28 > 1, v25 - 3, 1);
          _swiftEmptyArrayStorage[2] = v25 - 3;
          _swiftEmptyArrayStorage[v25++] = v27;
          ++v26;
          if (!--v11)
            goto LABEL_12;
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        break;
      }
LABEL_12:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain(v4[1]);
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v14 = sub_39228(v5);
    v15 = _swiftEmptyDictionarySingleton[2];
    v16 = (v13 & 1) == 0;
    v17 = v15 + v16;
    if (__OFADD__(v15, v16))
      goto LABEL_36;
    v18 = v13;
    if (_swiftEmptyDictionarySingleton[3] >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v13 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_16B8D4();
        if ((v18 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_15AC54(v17, isUniquelyReferenced_nonNull_native);
      v19 = sub_39228(v5);
      if ((v18 & 1) != (v20 & 1))
        goto LABEL_39;
      v14 = v19;
      if ((v18 & 1) != 0)
      {
LABEL_4:
        v3 = _swiftEmptyDictionarySingleton[7];
        swift_bridgeObjectRelease();
        *(_QWORD *)(v3 + 8 * v14) = _swiftEmptyArrayStorage;
        goto LABEL_5;
      }
    }
    _swiftEmptyDictionarySingleton[(v14 >> 6) + 8] |= 1 << v14;
    v21 = 8 * v14;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v21) = v5;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v21) = _swiftEmptyArrayStorage;
    v22 = _swiftEmptyDictionarySingleton[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_37;
    _swiftEmptyDictionarySingleton[2] = v24;
LABEL_5:
    ++v2;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v2 == v31)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyDictionarySingleton;
    }
  }
LABEL_38:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_39:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_D5080@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t result;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;

  v4 = *a1;
  v5 = (_QWORD *)a1[1];
  v7 = (_QWORD *)a1[2];
  v6 = (_QWORD *)a1[3];
  v8 = (_QWORD *)a1[5];
  v9 = *a2;
  v10 = (_QWORD *)a2[1];
  v11 = (_QWORD *)a2[2];
  v45 = a2[4];
  v49 = (_QWORD *)a2[3];
  v50 = (_QWORD *)a2[5];
  if (*(_QWORD *)(*a1 + 16))
  {
    v12 = *(_QWORD **)(v4 + 32);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v13 = a1[4];
    v46 = *a2;
    v14 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
    v15 = sub_D4778();
    v47 = v11;
    v16 = swift_allocError(v14, v15, 0, 0);
    swift_storeEnumTagMultiPayload(v17, v14, 10);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v13);
    v18 = swift_bridgeObjectRetain(v8);
    swift_willThrow(v18);
    v19 = v16;
    v9 = v46;
    v11 = v47;
    swift_errorRelease(v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = 0;
  }
  v48 = v6;
  if (!*(_QWORD *)(v9 + 16))
  {
    v22 = v9;
    v23 = type metadata accessor for BooksBackendSeedBasedRecommendationService.Errors(0);
    v24 = sub_D4778();
    v44 = v5;
    v25 = v11;
    v26 = swift_allocError(v23, v24, 0, 0);
    swift_storeEnumTagMultiPayload(v27, v23, 10);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v45);
    v28 = swift_bridgeObjectRetain(v50);
    swift_willThrow(v28);
    v29 = v26;
    v11 = v25;
    v5 = v44;
    swift_errorRelease(v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12)
      v20 = v12;
    else
      v20 = _swiftEmptyArrayStorage;
LABEL_13:
    v21 = _swiftEmptyArrayStorage;
    goto LABEL_14;
  }
  if (v12)
    v20 = v12;
  else
    v20 = _swiftEmptyArrayStorage;
  v21 = (_QWORD *)swift_bridgeObjectRetain(*(_QWORD *)(v9 + 32));
  if (!v21)
    goto LABEL_13;
LABEL_14:
  sub_10FAB0((uint64_t)v21);
  v30 = sub_5EDC(&qword_1F11C8);
  v31 = swift_allocObject(v30, 40, 7);
  *(_OWORD *)(v31 + 16) = xmmword_1875E0;
  *(_QWORD *)(v31 + 32) = v20;
  if (v5)
    v32 = v5;
  else
    v32 = _swiftEmptyArrayStorage;
  if (v10)
    v33 = v10;
  else
    v33 = _swiftEmptyArrayStorage;
  v51 = v32;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v10);
  sub_10FED0((uint64_t)v33);
  v34 = v51;
  if (v7)
    v35 = v7;
  else
    v35 = _swiftEmptyArrayStorage;
  if (v11)
    v36 = v11;
  else
    v36 = _swiftEmptyArrayStorage;
  v52 = v35;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v11);
  sub_10FD8C((uint64_t)v36);
  v37 = v52;
  if (v48)
    v38 = v48;
  else
    v38 = _swiftEmptyArrayStorage;
  if (v49)
    v39 = v49;
  else
    v39 = _swiftEmptyArrayStorage;
  v53 = v38;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  sub_10FC1C((uint64_t)v39);
  v40 = v53;
  if (v8)
    v41 = v8;
  else
    v41 = _swiftEmptyArrayStorage;
  if (v50)
    v42 = v50;
  else
    v42 = _swiftEmptyArrayStorage;
  v54 = v41;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v50);
  result = sub_10FC08((uint64_t)v42);
  *a3 = v31;
  a3[1] = (uint64_t)v34;
  a3[2] = (uint64_t)v37;
  a3[3] = (uint64_t)v40;
  a3[4] = 0;
  a3[5] = (uint64_t)v54;
  return result;
}

_QWORD *_s15RecommendedBookVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

_QWORD *_s15RecommendedBookVwta(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  return a1;
}

ValueMetadata *_s15RecommendedBookVMa()
{
  return &_s15RecommendedBookVN;
}

uint64_t static Transport.Recommend.id.getter()
{
  return 0x6E656D6D6F636572;
}

uint64_t Transport.Recommend.Input.body.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  v6 = v1[8];
  v7 = v1[9];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  return sub_D54C8(v2, v3, v4, v5, v6, v7);
}

uint64_t sub_D54C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

__n128 Transport.Recommend.Input.body.setter(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;
  __int128 v6;

  v5 = (__n128)a1[1];
  v6 = *a1;
  v2 = *((_QWORD *)a1 + 4);
  v3 = *((_QWORD *)a1 + 5);
  sub_D5570(v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
  result = v5;
  *((_OWORD *)v1 + 2) = v6;
  *((__n128 *)v1 + 3) = v5;
  v1[8] = v2;
  v1[9] = v3;
  return result;
}

uint64_t sub_D5570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a4);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

__n128 Transport.Recommend.Input.init(xAppleRequestUUID:xAppleUserExperimentIds:body:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 v6;
  __n128 result;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  v6 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 48) = v6;
  result = *(__n128 *)(a5 + 32);
  *(__n128 *)(a6 + 64) = result;
  return result;
}

uint64_t static Transport.RecommendV2.id.getter()
{
  return 0x6E656D6D6F636572;
}

uint64_t Transport.RecommendV2.Input.body.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[4];
  v3 = v1[5];
  v4 = v1[6];
  v5 = v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return sub_D5610(v2, v3, v4, v5);
}

uint64_t sub_D5610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

__n128 Transport.RecommendV2.Input.body.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  sub_D5698(v1[4], v1[5], v1[6], v1[7]);
  result = v5;
  *((__n128 *)v1 + 2) = v5;
  v1[6] = v2;
  v1[7] = v3;
  return result;
}

uint64_t sub_D5698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

__n128 Transport.RecommendV2.Input.init(xAppleRequestUUID:xAppleUserExperimentIds:body:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __n128 result;
  __int128 v7;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = a4;
  result = *(__n128 *)a5;
  v7 = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a6 + 32) = *(_OWORD *)a5;
  *(_OWORD *)(a6 + 48) = v7;
  return result;
}

unint64_t static Transport.PersonalizationMetadata.id.getter()
{
  return 0xD000000000000017;
}

uint64_t Transport.PersonalizationMetadata.Input.body.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t Transport.PersonalizationMetadata.Input.body.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
  *(_QWORD *)(v1 + 16) = v2;
  return result;
}

uint64_t Transport.PersonalizationMetadata.Input.init(xAppleRequestUUID:body:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  v4 = *a3;
  *a4 = result;
  a4[1] = a2;
  a4[2] = v4;
  return result;
}

ValueMetadata *type metadata accessor for Transport.Recommend()
{
  return &type metadata for Transport.Recommend;
}

uint64_t _s9RecommendO5InputVwxx(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = a1[5];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[7]);
    swift_bridgeObjectRelease(a1[8]);
    return swift_bridgeObjectRelease(a1[9]);
  }
  return result;
}

uint64_t _s9RecommendO5InputVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v6;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v7 = *(_QWORD *)(a2 + 56);
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v8;
    v9 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v9;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v10;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  return a1;
}

uint64_t _s9RecommendO5InputVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (_OWORD *)(a1 + 32);
  v9 = (_OWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a2 + 40);
  if (v10)
  {
    if (v11)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v12 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v10);
      *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v13);
      v15 = *(_QWORD *)(a2 + 64);
      v16 = *(_QWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = v15;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRelease(v16);
      v17 = *(_QWORD *)(a1 + 72);
      v18 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 72) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      sub_D59E0((_QWORD *)(a1 + 32));
      v24 = *(_OWORD *)(a2 + 48);
      v23 = *(_OWORD *)(a2 + 64);
      *v8 = *v9;
      *(_OWORD *)(a1 + 48) = v24;
      *(_OWORD *)(a1 + 64) = v23;
    }
  }
  else if (v11)
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v19 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v19;
    *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
    v20 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 56) = v20;
    v21 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 64) = v21;
    v22 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 72) = v22;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
  }
  else
  {
    v25 = *v9;
    v26 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v26;
    *v8 = v25;
  }
  return a1;
}

_QWORD *sub_D59E0(_QWORD *a1)
{
  _s21RecommendationRequestVwxx(a1);
  return a1;
}

uint64_t _s9RecommendO5InputVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
    goto LABEL_5;
  v9 = *(_QWORD *)(a2 + 40);
  if (!v9)
  {
    sub_D59E0((_QWORD *)(a1 + 32));
LABEL_5:
    v13 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v13;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    return a1;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v9;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t _s9RecommendO5InputVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s9RecommendO5InputVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.Recommend.Input()
{
  return &type metadata for Transport.Recommend.Input;
}

uint64_t sub_D5BAC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  uint64_t v7;

  v7 = result;
  if (a7 - 1 < 3)
    return swift_bridgeObjectRetain(result);
  if (!a7)
  {
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t _s9RecommendO6OutputOwxx(uint64_t a1)
{
  return sub_D5C5C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t sub_D5C5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 - 1 < 3)
    return swift_bridgeObjectRelease(result);
  if (!a7)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a6);
  }
  return result;
}

uint64_t _s9RecommendO6OutputOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_D5BAC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t _s9RecommendO6OutputOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_D5BAC(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_D5C5C(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 initializeWithTake for FeatureAffinityInfo(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9RecommendO6OutputOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int8 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_D5C5C(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t _s9RecommendO6OutputOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s9RecommendO6OutputOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_D5F00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_D5F08(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Transport.Recommend.Output()
{
  return &type metadata for Transport.Recommend.Output;
}

ValueMetadata *type metadata accessor for Transport.RecommendV2()
{
  return &type metadata for Transport.RecommendV2;
}

uint64_t _s11RecommendV2O5InputVwxx(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  result = a1[5];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[6]);
    return swift_bridgeObjectRelease(a1[7]);
  }
  return result;
}

_QWORD *_s11RecommendV2O5InputVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    a1[4] = a2[4];
    a1[5] = v6;
    v8 = a2[6];
    v7 = a2[7];
    a1[6] = v8;
    a1[7] = v7;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v7);
  }
  else
  {
    v9 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v9;
  }
  return a1;
}

_QWORD *_s11RecommendV2O5InputVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a1 + 4;
  v9 = a2 + 4;
  v10 = a1[5];
  v11 = a2[5];
  if (v10)
  {
    if (v11)
    {
      a1[4] = a2[4];
      v12 = a2[5];
      a1[5] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v10);
      v13 = a2[6];
      v14 = a1[6];
      a1[6] = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v14);
      v15 = a1[7];
      v16 = a2[7];
      a1[7] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      sub_D6140(a1 + 4);
      v20 = *((_OWORD *)a2 + 3);
      *v8 = *v9;
      *((_OWORD *)a1 + 3) = v20;
    }
  }
  else if (v11)
  {
    a1[4] = a2[4];
    v17 = a2[5];
    a1[5] = v17;
    v18 = a2[6];
    a1[6] = v18;
    v19 = a2[7];
    a1[7] = v19;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  else
  {
    v21 = *((_OWORD *)a2 + 3);
    *v8 = *v9;
    *((_OWORD *)a1 + 3) = v21;
  }
  return a1;
}

_QWORD *sub_D6140(_QWORD *a1)
{
  _s23RecommendationRequestV2Vwxx(a1);
  return a1;
}

_QWORD *_s11RecommendV2O5InputVwta(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a1[5];
  if (!v8)
    goto LABEL_5;
  v9 = *(_QWORD *)(a2 + 40);
  if (!v9)
  {
    sub_D6140(a1 + 4);
LABEL_5:
    v12 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)a1 + 3) = v12;
    return a1;
  }
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v9;
  swift_bridgeObjectRelease(v8);
  v10 = a1[6];
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v10);
  v11 = a1[7];
  a1[7] = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t _s11RecommendV2O5InputVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s11RecommendV2O5InputVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendV2.Input()
{
  return &type metadata for Transport.RecommendV2.Input;
}

uint64_t sub_D62E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v9;

  v9 = result;
  if (a9 - 1 < 3)
    return swift_bridgeObjectRetain(result);
  if (!a9)
  {
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t _s11RecommendV2O6OutputOwxx(uint64_t a1)
{
  return sub_D63DC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
}

uint64_t sub_D63DC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 - 1 < 3)
    return swift_bridgeObjectRelease(result);
  if (!a9)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

uint64_t _s11RecommendV2O6OutputOwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_D62E8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  return a1;
}

uint64_t _s11RecommendV2O6OutputOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_BYTE *)(a2 + 64);
  sub_D62E8(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9, v10, v11);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(_BYTE *)(a1 + 64);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v11;
  sub_D63DC(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  return a1;
}

uint64_t _s11RecommendV2O6OutputOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int128 v13;
  __int128 v14;

  v3 = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(_BYTE *)(a1 + 64) = v3;
  sub_D63DC(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s11RecommendV2O6OutputOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s11RecommendV2O6OutputOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_D66E4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_D66EC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Transport.RecommendV2.Output()
{
  return &type metadata for Transport.RecommendV2.Output;
}

ValueMetadata *type metadata accessor for Transport.PersonalizationMetadata()
{
  return &type metadata for Transport.PersonalizationMetadata;
}

_QWORD *sub_D6718(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *_s23PersonalizationMetadataO5InputVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

_QWORD *_s23PersonalizationMetadataO5InputVwta(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for Transport.PersonalizationMetadata.Input()
{
  return &type metadata for Transport.PersonalizationMetadata.Input;
}

uint64_t _s23PersonalizationMetadataO6OutputOwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_D6850(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_D6850(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 3u)
    return swift_bridgeObjectRetain(result);
  return result;
}

uint64_t _s23PersonalizationMetadataO6OutputOwxx(uint64_t a1)
{
  return sub_D6874(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t sub_D6874(uint64_t result, unsigned __int8 a2)
{
  if (a2 <= 3u)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s23PersonalizationMetadataO6OutputOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_D6850(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v3;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_D6874(v5, v6);
  return a1;
}

uint64_t _s23PersonalizationMetadataO6OutputOwta(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v3;
  sub_D6874(v4, v5);
  return a1;
}

uint64_t _s23PersonalizationMetadataO6OutputOwet(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s23PersonalizationMetadataO6OutputOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_D69A0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_D69A8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for Transport.PersonalizationMetadata.Output()
{
  return &type metadata for Transport.PersonalizationMetadata.Output;
}

uint64_t sub_D69C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 3264) = v1;
  *(_QWORD *)(v2 + 3256) = a1;
  *(_QWORD *)(v2 + 3272) = *(_QWORD *)a1;
  *(_BYTE *)(v2 + 3255) = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(v2 + 3334) = *(_BYTE *)(a1 + 9);
  *(_DWORD *)(v2 + 3328) = *(_DWORD *)(a1 + 10);
  *(_WORD *)(v2 + 3332) = *(_WORD *)(a1 + 14);
  *(_QWORD *)(v2 + 3280) = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 3335) = *(_BYTE *)(a1 + 24);
  memcpy((void *)(v2 + 2192), (const void *)(a1 + 25), 0x427uLL);
  return swift_task_switch(sub_D6A4C, 0, 0);
}

uint64_t sub_D6A4C()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);

  v1 = *(_BYTE *)(v0 + 3335);
  v2 = *(_QWORD *)(v0 + 3280);
  v3 = *(_BYTE *)(v0 + 3334);
  v4 = *(_BYTE *)(v0 + 3255);
  v5 = *(_QWORD *)(v0 + 3272);
  v6 = *(_QWORD **)(v0 + 3264);
  v7 = *(_QWORD *)(v0 + 3256);
  v8 = v6[10];
  v9 = v6[11];
  sub_49F4(v6 + 7, v8);
  *(_QWORD *)(v0 + 16) = v5;
  *(_BYTE *)(v0 + 24) = v4;
  *(_BYTE *)(v0 + 25) = v3;
  v10 = *(_WORD *)(v7 + 14);
  *(_DWORD *)(v0 + 26) = *(_DWORD *)(v7 + 10);
  *(_WORD *)(v0 + 30) = v10;
  *(_QWORD *)(v0 + 32) = v2;
  *(_BYTE *)(v0 + 40) = v1;
  memcpy((void *)(v0 + 41), (const void *)(v7 + 25), 0x427uLL);
  v11 = *(int **)(v9 + 8);
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  v12 = (_QWORD *)swift_task_alloc(v11[1]);
  *(_QWORD *)(v0 + 3288) = v12;
  *v12 = v0;
  v12[1] = sub_D6B40;
  return v14(v0 + 16, v8, v9);
}

uint64_t sub_D6B40(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 3288));
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_D6CB8;
  }
  else
  {
    *(_QWORD *)(v4 + 3296) = a1;
    v5 = sub_D6BB8;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_D6BB8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v0 + 3304) = *(_QWORD *)(v0 + 3296);
  v1 = *(_BYTE *)(v0 + 3335);
  v2 = *(_QWORD *)(v0 + 3280);
  v3 = *(_BYTE *)(v0 + 3334);
  v4 = *(_BYTE *)(v0 + 3255);
  v5 = *(_QWORD *)(v0 + 3272);
  v6 = *(_QWORD **)(v0 + 3264);
  v7 = v6[5];
  v8 = v6[6];
  sub_49F4(v6 + 2, v7);
  *(_QWORD *)(v0 + 1104) = v5;
  *(_BYTE *)(v0 + 1112) = v4;
  *(_BYTE *)(v0 + 1113) = v3;
  *(_DWORD *)(v0 + 1114) = *(_DWORD *)(v0 + 3328);
  *(_WORD *)(v0 + 1118) = *(_WORD *)(v0 + 3332);
  *(_QWORD *)(v0 + 1120) = v2;
  *(_BYTE *)(v0 + 1128) = v1;
  memcpy((void *)(v0 + 1129), (const void *)(v0 + 2192), 0x427uLL);
  v9 = *(int **)(v8 + 8);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v0 + 3312) = v10;
  *v10 = v0;
  v10[1] = sub_D6DBC;
  return v12(v0 + 1104, v7, v8);
}

uint64_t sub_D6CB8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v0 + 3304) = _swiftEmptyArrayStorage;
  v1 = *(_BYTE *)(v0 + 3335);
  v2 = *(_QWORD *)(v0 + 3280);
  v3 = *(_BYTE *)(v0 + 3334);
  v4 = *(_BYTE *)(v0 + 3255);
  v5 = *(_QWORD *)(v0 + 3272);
  v6 = *(_QWORD **)(v0 + 3264);
  v7 = v6[5];
  v8 = v6[6];
  sub_49F4(v6 + 2, v7);
  *(_QWORD *)(v0 + 1104) = v5;
  *(_BYTE *)(v0 + 1112) = v4;
  *(_BYTE *)(v0 + 1113) = v3;
  *(_DWORD *)(v0 + 1114) = *(_DWORD *)(v0 + 3328);
  *(_WORD *)(v0 + 1118) = *(_WORD *)(v0 + 3332);
  *(_QWORD *)(v0 + 1120) = v2;
  *(_BYTE *)(v0 + 1128) = v1;
  memcpy((void *)(v0 + 1129), (const void *)(v0 + 2192), 0x427uLL);
  v9 = *(int **)(v8 + 8);
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v0 + 3312) = v10;
  *v10 = v0;
  v10[1] = sub_D6DBC;
  return v12(v0 + 1104, v7, v8);
}

uint64_t sub_D6DBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 3312));
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_D7400;
  }
  else
  {
    *(_QWORD *)(v4 + 3320) = a1;
    v5 = sub_D6E34;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_D6E34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  double v10;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t result;
  char v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  char v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  uint64_t v55;
  _BOOL8 v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 3320);
  v2 = *(_QWORD *)(v0 + 3304);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    v24 = *(_QWORD *)(v1 + 16);
    if (!v24)
      goto LABEL_49;
    goto LABEL_19;
  }
  v4 = (double *)(swift_bridgeObjectRetain(v2) + 64);
  while (1)
  {
    v70 = v3;
    v6 = *(double *)(v69 + 3280);
    v7 = *((_QWORD *)v4 - 4);
    v8 = *((_BYTE *)v4 - 24);
    v9 = *((_QWORD *)v4 - 2);
    v10 = *v4;
    swift_bridgeObjectRetain(*((_QWORD *)v4 - 1));
    swift_bridgeObjectRetain(v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v13 = sub_39228(v7);
    v14 = _swiftEmptyDictionarySingleton[2];
    v15 = (v12 & 1) == 0;
    result = v14 + v15;
    if (__OFADD__(v14, v15))
      break;
    v17 = v12;
    if (_swiftEmptyDictionarySingleton[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v19 = v6 * v10;
        if ((v12 & 1) == 0)
          goto LABEL_12;
      }
      else
      {
        result = (uint64_t)sub_16D9DC();
        v19 = v6 * v10;
        if ((v17 & 1) == 0)
          goto LABEL_12;
      }
    }
    else
    {
      sub_15F4F4(result, isUniquelyReferenced_nonNull_native);
      result = sub_39228(v7);
      if ((v17 & 1) != (v18 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v13 = result;
      v19 = v6 * v10;
      if ((v17 & 1) == 0)
      {
LABEL_12:
        _swiftEmptyDictionarySingleton[(v13 >> 6) + 8] |= 1 << v13;
        *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v13) = v7;
        v20 = _swiftEmptyDictionarySingleton[7] + 40 * v13;
        *(_QWORD *)v20 = v7;
        *(_BYTE *)(v20 + 8) = v8;
        *(_QWORD *)(v20 + 16) = _swiftEmptyArrayStorage;
        *(_QWORD *)(v20 + 24) = 0;
        *(double *)(v20 + 32) = v19;
        v21 = _swiftEmptyDictionarySingleton[2];
        v22 = __OFADD__(v21, 1);
        v23 = v21 + 1;
        if (v22)
          goto LABEL_52;
        _swiftEmptyDictionarySingleton[2] = v23;
        goto LABEL_4;
      }
    }
    v5 = _swiftEmptyDictionarySingleton[7] + 40 * v13;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)v5 = v7;
    *(_BYTE *)(v5 + 8) = v8;
    *(_QWORD *)(v5 + 16) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v5 + 24) = 0;
    *(double *)(v5 + 32) = v19;
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 += 5;
    --v3;
    if (v70 == 1)
    {
      swift_bridgeObjectRelease();
      v1 = v68;
      v24 = *(_QWORD *)(v68 + 16);
      if (!v24)
      {
LABEL_49:
        v66 = swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
        v67 = sub_3870C(v66);
        swift_bridgeObjectRelease_n(_swiftEmptyDictionarySingleton, 2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(_QWORD *))(v69 + 8))(v67);
      }
LABEL_19:
      v25 = 1.0 - *(double *)(v69 + 3280);
      swift_bridgeObjectRetain(v1);
      v26 = (double *)(v1 + 64);
      while (2)
      {
        v28 = *((_QWORD *)v26 - 4);
        v29 = *((_BYTE *)v26 - 24);
        v31 = *((_QWORD *)v26 - 2);
        v30 = *((_QWORD *)v26 - 1);
        v32 = v25 * (*v26 * 0.5 + 0.5);
        if (_swiftEmptyDictionarySingleton[2])
        {
          v33 = sub_39228(*((_QWORD *)v26 - 4));
          if ((v34 & 1) != 0)
          {
            v35 = _swiftEmptyDictionarySingleton[7] + 40 * v33;
            v36 = v28;
            v37 = *(_BYTE *)(v35 + 8);
            v38 = *(double *)(v35 + 32);
            v72 = *(_QWORD *)(v35 + 16);
            swift_bridgeObjectRetain(v72);
            v39 = swift_bridgeObjectRetain(v31);
            sub_110020(v39);
            v40 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
            v41 = v36;
            v43 = sub_39228(v36);
            v44 = _swiftEmptyDictionarySingleton[2];
            v45 = (v42 & 1) == 0;
            result = v44 + v45;
            if (__OFADD__(v44, v45))
              goto LABEL_54;
            v46 = v42;
            if (_swiftEmptyDictionarySingleton[3] >= result)
            {
              if ((v40 & 1) != 0)
              {
                v48 = v32 + v38;
                if ((v42 & 1) == 0)
                  goto LABEL_45;
              }
              else
              {
                result = (uint64_t)sub_16D9DC();
                v48 = v32 + v38;
                if ((v46 & 1) == 0)
                  goto LABEL_45;
              }
            }
            else
            {
              sub_15F4F4(result, v40);
              result = sub_39228(v41);
              if ((v46 & 1) != (v47 & 1))
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
              v43 = result;
              v48 = v32 + v38;
              if ((v46 & 1) == 0)
              {
LABEL_45:
                _swiftEmptyDictionarySingleton[(v43 >> 6) + 8] |= 1 << v43;
                *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v43) = v41;
                v63 = _swiftEmptyDictionarySingleton[7] + 40 * v43;
                *(_QWORD *)v63 = v41;
                *(_BYTE *)(v63 + 8) = v37;
                *(_QWORD *)(v63 + 16) = v72;
                *(_QWORD *)(v63 + 24) = 0;
                *(double *)(v63 + 32) = v48;
                v64 = _swiftEmptyDictionarySingleton[2];
                v22 = __OFADD__(v64, 1);
                v65 = v64 + 1;
                if (v22)
                  goto LABEL_55;
                _swiftEmptyDictionarySingleton[2] = v65;
LABEL_22:
                swift_bridgeObjectRelease();
                v26 += 5;
                if (!--v24)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_49;
                }
                continue;
              }
            }
            v62 = _swiftEmptyDictionarySingleton[7] + 40 * v43;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(_QWORD *)v62 = v41;
            *(_BYTE *)(v62 + 8) = v37;
            *(_QWORD *)(v62 + 16) = v72;
            *(_QWORD *)(v62 + 24) = 0;
            *(double *)(v62 + 32) = v48;
            goto LABEL_22;
          }
        }
        break;
      }
      v71 = v24;
      v49 = v30;
      swift_bridgeObjectRetain(v30);
      v50 = v31;
      swift_bridgeObjectRetain(v31);
      v51 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v52 = v28;
      v54 = sub_39228(v28);
      v55 = _swiftEmptyDictionarySingleton[2];
      v56 = (v53 & 1) == 0;
      result = v55 + v56;
      if (__OFADD__(v55, v56))
        goto LABEL_51;
      v57 = v53;
      if (_swiftEmptyDictionarySingleton[3] >= result)
      {
        if ((v51 & 1) != 0)
        {
          if ((v53 & 1) == 0)
            goto LABEL_37;
        }
        else
        {
          result = (uint64_t)sub_16D9DC();
          if ((v57 & 1) == 0)
            goto LABEL_37;
        }
      }
      else
      {
        sub_15F4F4(result, v51);
        result = sub_39228(v52);
        if ((v57 & 1) != (v58 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        v54 = result;
        if ((v57 & 1) == 0)
        {
LABEL_37:
          _swiftEmptyDictionarySingleton[(v54 >> 6) + 8] |= 1 << v54;
          *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v54) = v52;
          v59 = _swiftEmptyDictionarySingleton[7] + 40 * v54;
          *(_QWORD *)v59 = v52;
          *(_BYTE *)(v59 + 8) = v29;
          *(_QWORD *)(v59 + 16) = v50;
          *(_QWORD *)(v59 + 24) = v49;
          *(double *)(v59 + 32) = v32;
          v60 = _swiftEmptyDictionarySingleton[2];
          v22 = __OFADD__(v60, 1);
          v61 = v60 + 1;
          if (v22)
            goto LABEL_53;
          _swiftEmptyDictionarySingleton[2] = v61;
          goto LABEL_21;
        }
      }
      v27 = _swiftEmptyDictionarySingleton[7] + 40 * v54;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)v27 = v52;
      *(_BYTE *)(v27 + 8) = v29;
      *(_QWORD *)(v27 + 16) = v50;
      *(_QWORD *)(v27 + 24) = v49;
      *(double *)(v27 + 32) = v32;
LABEL_21:
      v24 = v71;
      goto LABEL_22;
    }
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_D7400()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  double *v4;
  uint64_t v5;
  _QWORD *v6;
  double v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  double v11;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  char v47;
  char v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  _BOOL8 v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 3304);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
  {
    v25 = _swiftEmptyArrayStorage[2];
    if (!v25)
      goto LABEL_47;
    goto LABEL_17;
  }
  v4 = (double *)(swift_bridgeObjectRetain(v1) + 64);
  while (1)
  {
    v6 = v3;
    v7 = *(double *)(v69 + 3280);
    v8 = *((_QWORD *)v4 - 4);
    v9 = *((_BYTE *)v4 - 24);
    v10 = *((_QWORD *)v4 - 2);
    v11 = *v4;
    v70 = v2;
    swift_bridgeObjectRetain(*((_QWORD *)v4 - 1));
    swift_bridgeObjectRetain(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v14 = sub_39228(v8);
    v15 = _swiftEmptyDictionarySingleton[2];
    v16 = (v13 & 1) == 0;
    result = v15 + v16;
    if (__OFADD__(v15, v16))
      break;
    v18 = v13;
    if (_swiftEmptyDictionarySingleton[3] >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        result = (uint64_t)sub_16D9DC();
    }
    else
    {
      sub_15F4F4(result, isUniquelyReferenced_nonNull_native);
      result = sub_39228(v8);
      if ((v18 & 1) != (v19 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      v14 = result;
    }
    v3 = v6;
    v20 = v7 * v11;
    if ((v18 & 1) != 0)
    {
      v5 = _swiftEmptyDictionarySingleton[7] + 40 * v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)v5 = v8;
      *(_BYTE *)(v5 + 8) = v9;
      *(_QWORD *)(v5 + 16) = v6;
      *(_QWORD *)(v5 + 24) = 0;
      *(double *)(v5 + 32) = v20;
    }
    else
    {
      _swiftEmptyDictionarySingleton[(v14 >> 6) + 8] |= 1 << v14;
      *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v14) = v8;
      v21 = _swiftEmptyDictionarySingleton[7] + 40 * v14;
      *(_QWORD *)v21 = v8;
      *(_BYTE *)(v21 + 8) = v9;
      *(_QWORD *)(v21 + 16) = v6;
      *(_QWORD *)(v21 + 24) = 0;
      *(double *)(v21 + 32) = v20;
      v22 = _swiftEmptyDictionarySingleton[2];
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
        goto LABEL_50;
      _swiftEmptyDictionarySingleton[2] = v24;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 += 5;
    --v2;
    if (v70 == 1)
    {
      swift_bridgeObjectRelease();
      v25 = v6[2];
      if (!v25)
      {
LABEL_47:
        v67 = swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
        v68 = sub_3870C(v67);
        swift_bridgeObjectRelease_n(_swiftEmptyDictionarySingleton, 2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(_QWORD *))(v69 + 8))(v68);
      }
LABEL_17:
      v26 = 1.0 - *(double *)(v69 + 3280);
      swift_bridgeObjectRetain(v3);
      v27 = (double *)(v3 + 8);
      while (2)
      {
        v29 = *((_QWORD *)v27 - 4);
        v30 = *((_BYTE *)v27 - 24);
        v32 = *((_QWORD *)v27 - 2);
        v31 = *((_QWORD *)v27 - 1);
        v33 = v26 * (*v27 * 0.5 + 0.5);
        if (_swiftEmptyDictionarySingleton[2])
        {
          v34 = sub_39228(*((_QWORD *)v27 - 4));
          if ((v35 & 1) != 0)
          {
            v36 = _swiftEmptyDictionarySingleton[7] + 40 * v34;
            v37 = v29;
            v38 = *(_BYTE *)(v36 + 8);
            v39 = *(double *)(v36 + 32);
            v72 = *(_QWORD *)(v36 + 16);
            swift_bridgeObjectRetain(v72);
            v40 = swift_bridgeObjectRetain(v32);
            sub_110020(v40);
            v41 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
            v42 = v37;
            v44 = sub_39228(v37);
            v45 = _swiftEmptyDictionarySingleton[2];
            v46 = (v43 & 1) == 0;
            result = v45 + v46;
            if (__OFADD__(v45, v46))
              goto LABEL_52;
            v47 = v43;
            if (_swiftEmptyDictionarySingleton[3] >= result)
            {
              if ((v41 & 1) != 0)
              {
                v49 = v33 + v39;
                if ((v43 & 1) == 0)
                  goto LABEL_43;
              }
              else
              {
                result = (uint64_t)sub_16D9DC();
                v49 = v33 + v39;
                if ((v47 & 1) == 0)
                  goto LABEL_43;
              }
            }
            else
            {
              sub_15F4F4(result, v41);
              result = sub_39228(v42);
              if ((v47 & 1) != (v48 & 1))
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
              v44 = result;
              v49 = v33 + v39;
              if ((v47 & 1) == 0)
              {
LABEL_43:
                _swiftEmptyDictionarySingleton[(v44 >> 6) + 8] |= 1 << v44;
                *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v44) = v42;
                v64 = _swiftEmptyDictionarySingleton[7] + 40 * v44;
                *(_QWORD *)v64 = v42;
                *(_BYTE *)(v64 + 8) = v38;
                *(_QWORD *)(v64 + 16) = v72;
                *(_QWORD *)(v64 + 24) = 0;
                *(double *)(v64 + 32) = v49;
                v65 = _swiftEmptyDictionarySingleton[2];
                v23 = __OFADD__(v65, 1);
                v66 = v65 + 1;
                if (v23)
                  goto LABEL_53;
                _swiftEmptyDictionarySingleton[2] = v66;
LABEL_20:
                swift_bridgeObjectRelease();
                v27 += 5;
                if (!--v25)
                {
                  swift_bridgeObjectRelease();
                  goto LABEL_47;
                }
                continue;
              }
            }
            v63 = _swiftEmptyDictionarySingleton[7] + 40 * v44;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(_QWORD *)v63 = v42;
            *(_BYTE *)(v63 + 8) = v38;
            *(_QWORD *)(v63 + 16) = v72;
            *(_QWORD *)(v63 + 24) = 0;
            *(double *)(v63 + 32) = v49;
            goto LABEL_20;
          }
        }
        break;
      }
      v71 = v25;
      v50 = v31;
      swift_bridgeObjectRetain(v31);
      v51 = v32;
      swift_bridgeObjectRetain(v32);
      v52 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
      v53 = v29;
      v55 = sub_39228(v29);
      v56 = _swiftEmptyDictionarySingleton[2];
      v57 = (v54 & 1) == 0;
      result = v56 + v57;
      if (__OFADD__(v56, v57))
        goto LABEL_49;
      v58 = v54;
      if (_swiftEmptyDictionarySingleton[3] >= result)
      {
        if ((v52 & 1) != 0)
        {
          if ((v54 & 1) == 0)
            goto LABEL_35;
        }
        else
        {
          result = (uint64_t)sub_16D9DC();
          if ((v58 & 1) == 0)
            goto LABEL_35;
        }
      }
      else
      {
        sub_15F4F4(result, v52);
        result = sub_39228(v53);
        if ((v58 & 1) != (v59 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
        v55 = result;
        if ((v58 & 1) == 0)
        {
LABEL_35:
          _swiftEmptyDictionarySingleton[(v55 >> 6) + 8] |= 1 << v55;
          *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + 8 * v55) = v53;
          v60 = _swiftEmptyDictionarySingleton[7] + 40 * v55;
          *(_QWORD *)v60 = v53;
          *(_BYTE *)(v60 + 8) = v30;
          *(_QWORD *)(v60 + 16) = v51;
          *(_QWORD *)(v60 + 24) = v50;
          *(double *)(v60 + 32) = v33;
          v61 = _swiftEmptyDictionarySingleton[2];
          v23 = __OFADD__(v61, 1);
          v62 = v61 + 1;
          if (v23)
            goto LABEL_51;
          _swiftEmptyDictionarySingleton[2] = v62;
          goto LABEL_19;
        }
      }
      v28 = _swiftEmptyDictionarySingleton[7] + 40 * v55;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)v28 = v53;
      *(_BYTE *)(v28 + 8) = v30;
      *(_QWORD *)(v28 + 16) = v51;
      *(_QWORD *)(v28 + 24) = v50;
      *(double *)(v28 + 32) = v33;
LABEL_19:
      v25 = v71;
      goto LABEL_20;
    }
  }
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for CombinedGenreRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization34CombinedGenreRecommendationService);
}

uint64_t sub_D79D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1F42AC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_70AB4;
  return sub_D69C4(a1);
}

uint64_t Transport.Client.server.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 160);
  *a1 = *(_QWORD *)(v1 + 152);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t Transport.Client.server.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 160));
  *(_QWORD *)(v1 + 152) = v2;
  *(_QWORD *)(v1 + 160) = v3;
  return result;
}

uint64_t (*Transport.Client.server.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.Client.configuration.getter@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v1[21];
  v3 = v1[22];
  v4 = v1[23];
  v5 = v1[24];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  sub_3EAFC(v2, v3);
  return sub_3EAFC(v4, v5);
}

__n128 Transport.Client.configuration.setter(__n128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  v7 = *a1;
  v2 = a1[1].n128_i64[0];
  v3 = a1[1].n128_i64[1];
  v4 = v1[23];
  v5 = v1[24];
  sub_3EB0C(v1[21], v1[22]);
  sub_3EB0C(v4, v5);
  result = v7;
  *(__n128 *)(v1 + 21) = v7;
  v1[23] = v2;
  v1[24] = v3;
  return result;
}

uint64_t (*Transport.Client.configuration.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

uint64_t Transport.Client.transport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_3DD40(v1 + 200, a1);
}

uint64_t Transport.Client.transport.setter(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + 200);
  sub_62F8(v3);
  return sub_26DB8(a1, (uint64_t)v3);
}

uint64_t (*Transport.Client.transport.modify())()
{
  return AuthorRecommendationSource.id.getter;
}

double Transport.Client.init(server:configuration:transport:)@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  uint64_t v16[4];
  _OWORD v17[9];
  uint64_t v18;

  v6 = a1[1];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  *(_QWORD *)(a4 + 152) = *a1;
  *(_QWORD *)(a4 + 160) = v6;
  *(_QWORD *)(a4 + 168) = v7;
  *(_QWORD *)(a4 + 176) = v8;
  *(_QWORD *)(a4 + 184) = v9;
  *(_QWORD *)(a4 + 192) = v10;
  sub_3DD40((uint64_t)a3, a4 + 200);
  v16[0] = v7;
  v16[1] = v8;
  v16[2] = v9;
  v16[3] = v10;
  sub_3EAFC(v7, v8);
  sub_3EAFC(v9, v10);
  ClientConverter.init(configuration:)(v16, (uint64_t *)v17);
  sub_62F8(a3);
  v11 = v17[7];
  *(_OWORD *)(a4 + 96) = v17[6];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v17[8];
  *(_QWORD *)(a4 + 144) = v18;
  v12 = v17[3];
  *(_OWORD *)(a4 + 32) = v17[2];
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v17[5];
  *(_OWORD *)(a4 + 64) = v17[4];
  *(_OWORD *)(a4 + 80) = v13;
  result = *(double *)v17;
  v15 = v17[1];
  *(_OWORD *)a4 = v17[0];
  *(_OWORD *)(a4 + 16) = v15;
  return result;
}

uint64_t Transport.Client.recommend(input:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v2;
  v4 = a2[3];
  *(_OWORD *)(v3 + 48) = a2[2];
  *(_OWORD *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 80) = a2[4];
  v5 = a2[1];
  *(_OWORD *)(v3 + 16) = *a2;
  *(_OWORD *)(v3 + 32) = v5;
  return swift_task_switch(sub_D7C68, 0, 0);
}

uint64_t sub_D7C68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 104);
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 112) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 16;
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 120) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 128) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  v7 = (uint64_t (*)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1F42C8 + dword_1F42C8);
  v5 = (_QWORD *)swift_task_alloc(unk_1F42CC);
  *(_QWORD *)(v0 + 136) = v5;
  *v5 = v0;
  v5[1] = sub_D7D44;
  return v7(*(_QWORD *)(v0 + 96), (_OWORD *)(v0 + 16), (uint64_t)sub_D84D4, v2, (uint64_t)&unk_1F42C0, v3, (uint64_t)sub_D8990, v4);
}

uint64_t sub_D7D44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 128);
  v3 = *(_QWORD *)(*v0 + 112);
  v2 = *(_QWORD *)(*v0 + 120);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_D7DB0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void (*v24)(_OWORD *, _QWORD);
  Swift::String v25;
  uint64_t (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, char *, _QWORD *);
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  _BYTE v83[48];
  _OWORD v84[9];
  uint64_t v85;
  _QWORD v86[7];
  char *v87;

  v79 = a2;
  v81 = a3;
  v4 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v4);
  v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = (_QWORD *)type metadata accessor for URL(0);
  v80 = *(v82 - 1);
  __chkstk_darwin(v82);
  v77 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F4360);
  __chkstk_darwin(v8);
  v10 = (char *)&v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URLComponents(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v87 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v75 - v15;
  v17 = *(_QWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 160);
  URLComponents.init(string:)(v17, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_417D8((uint64_t)v10, &qword_1F4360);
    v19 = type metadata accessor for ClientErrorPayload(0);
    v20 = sub_DD40C();
    swift_allocError(v19, v20, 0, 0);
    *v21 = v17;
    v21[1] = v18;
    swift_storeEnumTagMultiPayload(v21, v19, 0);
    v22 = swift_bridgeObjectRetain(v18);
    return swift_willThrow(v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v10, v11);
    v24 = (void (*)(_OWORD *, _QWORD))URLComponents.path.modify(v84);
    v25._countAndFlagsBits = 0xD000000000000013;
    v25._object = (void *)0x80000000001A1FF0;
    String.append(_:)(v25);
    v24(v84, 0);
    v26 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 16);
    v27 = v26(v87, v16, v11);
    URLComponents.url.getter(v27);
    v28 = v80;
    if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v80 + 48))(v6, 1, v82) == 1)
    {
      sub_417D8((uint64_t)v6, &qword_1F2448);
      v29 = type metadata accessor for ClientErrorPayload(0);
      v30 = sub_DD40C();
      swift_allocError(v29, v30, 0, 0);
      v32 = v31;
      v33 = v87;
      v26((char *)v31, v87, v11);
      v34 = swift_storeEnumTagMultiPayload((char *)v32, v29, 1);
      swift_willThrow(v34);
      v35 = *(void (**)(char *, uint64_t))(v12 + 8);
      v35(v33, v11);
      return ((uint64_t (*)(char *, uint64_t))v35)(v16, v11);
    }
    else
    {
      v75 = v16;
      v36 = *(void (**)(char *, char *, _QWORD *))(v28 + 32);
      v37 = v77;
      v38 = v82;
      v36(v77, v6, v82);
      v39 = v81;
      v36((char *)v81, v37, v38);
      v40 = (int *)type metadata accessor for ClientCurrency.Request(0);
      v41 = v39 + v40[7];
      v42 = (_QWORD *)(v39 + v40[5]);
      *v42 = 1414745936;
      v42[1] = 0xE400000000000000;
      v43 = (char *)v40[6];
      *(_QWORD *)&v43[v39] = _swiftEmptyArrayStorage;
      *(_OWORD *)v41 = xmmword_195670;
      v82 = *(_QWORD **)(v12 + 8);
      ((void (*)(char *, uint64_t))v82)(v87, v11);
      v44 = *(_OWORD *)(a1 + 112);
      v84[6] = *(_OWORD *)(a1 + 96);
      v84[7] = v44;
      v84[8] = *(_OWORD *)(a1 + 128);
      v85 = *(_QWORD *)(a1 + 144);
      v45 = *(_OWORD *)(a1 + 48);
      v84[2] = *(_OWORD *)(a1 + 32);
      v84[3] = v45;
      v46 = *(_OWORD *)(a1 + 80);
      v84[4] = *(_OWORD *)(a1 + 64);
      v84[5] = v46;
      v47 = *(_OWORD *)(a1 + 16);
      v84[0] = *(_OWORD *)a1;
      v84[1] = v47;
      v87 = v43;
      v48 = *(_QWORD **)&v43[v39];
      sub_DD454((uint64_t *)v84);
      if ((swift_isUniquelyReferenced_nonNull_native(v48) & 1) == 0)
        v48 = sub_2FB9C(0, v48[2] + 1, 1, v48);
      v50 = v48[2];
      v49 = v48[3];
      v76 = v11;
      if (v50 >= v49 >> 1)
        v48 = sub_2FB9C((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
      v48[2] = v50 + 1;
      v51 = (char *)&v48[4 * v50];
      strcpy(v51 + 32, "content-type");
      v51[45] = 0;
      *((_WORD *)v51 + 23) = -5120;
      *((_QWORD *)v51 + 6) = 0xD000000000000010;
      *((_QWORD *)v51 + 7) = 0x80000000001A1F40;
      sub_DD540((uint64_t *)v84);
      v52 = v81;
      *(_QWORD *)&v87[v81] = v48;
      v53 = v79;
      sub_41300((uint64_t)(v79 + 4), (uint64_t)v86, &qword_1F43E0);
      sub_41300((uint64_t)v86, (uint64_t)v83, &qword_1F43E0);
      sub_DD9AC(v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_D54C8);
      v54 = sub_5EDC(&qword_1F43E0);
      v55 = sub_201AC(&qword_1F43E8, &qword_1F43E0, (void (*)(void))sub_DD968, (uint64_t)&protocol conformance descriptor for <A> A?);
      v56 = v78;
      v57 = dispatch thunk of JSONEncoder.encode<A>(_:)(v83, v54, v55);
      if (v56)
      {
        sub_DD9AC(v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_D5570);
        ((void (*)(char *, uint64_t))v82)(v75, v76);
        return sub_DD208(v52);
      }
      else
      {
        v59 = v57;
        v60 = v58;
        sub_DD9AC(v86, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_D5570);
        sub_DD668(*(_QWORD *)v41, *(_QWORD *)(v41 + 8));
        *(_QWORD *)v41 = v59;
        *(_QWORD *)(v41 + 8) = v60;
        sub_DD454((uint64_t *)v84);
        v62 = v48[2];
        v61 = v48[3];
        if (v62 >= v61 >> 1)
          v48 = sub_2FB9C((_QWORD *)(v61 > 1), v62 + 1, 1, v48);
        v63 = v75;
        v48[2] = v62 + 1;
        v64 = &v48[4 * v62];
        v64[4] = 0x747065636361;
        v64[5] = 0xE600000000000000;
        v64[6] = 0xD000000000000010;
        v64[7] = 0x80000000001A1F40;
        sub_DD540((uint64_t *)v84);
        *(_QWORD *)&v87[v81] = v48;
        v65 = v53[1];
        if (v65)
        {
          v66 = *v53;
          swift_bridgeObjectRetain(v53[1]);
          sub_DD454((uint64_t *)v84);
          v68 = v48[2];
          v67 = v48[3];
          swift_bridgeObjectRetain(v65);
          if (v68 >= v67 >> 1)
            v48 = sub_2FB9C((_QWORD *)(v67 > 1), v68 + 1, 1, v48);
          v48[2] = v68 + 1;
          v69 = &v48[4 * v68];
          v69[4] = 0xD000000000000014;
          v69[5] = 0x80000000001A1F90;
          v69[6] = v66;
          v69[7] = v65;
          swift_bridgeObjectRelease();
          sub_DD540((uint64_t *)v84);
          *(_QWORD *)&v87[v81] = v48;
        }
        v70 = v53[3];
        if (v70)
        {
          v71 = v53[2];
          swift_bridgeObjectRetain(v53[3]);
          sub_DD454((uint64_t *)v84);
          v73 = v48[2];
          v72 = v48[3];
          swift_bridgeObjectRetain(v70);
          if (v73 >= v72 >> 1)
            v48 = sub_2FB9C((_QWORD *)(v72 > 1), v73 + 1, 1, v48);
          v48[2] = v73 + 1;
          v74 = &v48[4 * v73];
          v74[4] = 0xD00000000000001BLL;
          v74[5] = 0x80000000001A1FD0;
          v74[6] = v71;
          v74[7] = v70;
          swift_bridgeObjectRelease();
          sub_DD540((uint64_t *)v84);
          *(_QWORD *)&v87[v81] = v48;
        }
        return ((uint64_t (*)(char *, uint64_t))v82)(v63, v76);
      }
    }
  }
}

uint64_t sub_D84D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_D7DB0(*(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), a1);
}

uint64_t sub_D84EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_D8508, 0, 0);
}

uint64_t sub_D8508()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[4];
  v2 = v1[28];
  v3 = v1[29];
  sub_49F4(v1 + 25, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[5] = v5;
  *v5 = v0;
  v5[1] = sub_DD9E4;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))v7)(v0[2], v0[3], 0x6E656D6D6F636572, 0xE900000000000064, v2, v3);
}

uint64_t sub_D85A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1F42BC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_6AA68;
  v7[3] = a2;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_D8508, 0, 0);
}

uint64_t *sub_D8618@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = *result;
  v5 = result[1];
  v6 = result[2];
  v7 = result[3];
  if (*result > 400)
  {
    if (v4 == 401)
    {
      v19 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v19);
      result = (uint64_t *)swift_bridgeObjectRelease();
      if (v2)
        return result;
      v15 = sub_5EDC(&qword_1F4340);
      v16 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v19, v15, v6, v7, v15, v16);
      *(_QWORD *)a2 = v19;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_QWORD *)(a2 + 40) = 0;
      v10 = 2;
      goto LABEL_15;
    }
    if (v4 == 500)
    {
      v19 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v19);
      if (v2)
        return (uint64_t *)swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = sub_5EDC(&qword_1F4340);
      v18 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v19, v17, v6, v7, v17, v18);
      *(_QWORD *)a2 = v19;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_QWORD *)(a2 + 40) = 0;
      v10 = 3;
      goto LABEL_15;
    }
LABEL_14:
    *(_QWORD *)a2 = v4;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_QWORD *)(a2 + 40) = 0;
    v10 = 4;
LABEL_15:
    *(_BYTE *)(a2 + 48) = v10;
    return result;
  }
  if (v4 != 200)
  {
    if (v4 == 400)
    {
      v19 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v19);
      result = (uint64_t *)swift_bridgeObjectRelease();
      if (v2)
        return result;
      v8 = sub_5EDC(&qword_1F4340);
      v9 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v19, v8, v6, v7, v8, v9);
      *(_QWORD *)a2 = v19;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_QWORD *)(a2 + 40) = 0;
      v10 = 1;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v19 = result[1];
  swift_bridgeObjectRetain(v5);
  sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v19);
  result = (uint64_t *)swift_bridgeObjectRelease();
  if (!v2)
  {
    v11 = sub_DD924();
    result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v19, &type metadata for Transport.RecommendationResponse, v6, v7, &type metadata for Transport.RecommendationResponse, v11);
    v12 = v22;
    v13 = v20;
    v14 = v21;
    *(_QWORD *)a2 = v19;
    *(_OWORD *)(a2 + 8) = v13;
    *(_OWORD *)(a2 + 24) = v14;
    *(_QWORD *)(a2 + 40) = v12;
    *(_BYTE *)(a2 + 48) = 0;
  }
  return result;
}

uint64_t *sub_D8990@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_D8618(a1, a2);
}

uint64_t sub_D89A8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v8 + 152) = a7;
  *(_QWORD *)(v8 + 160) = a8;
  *(_QWORD *)(v8 + 136) = a5;
  *(_QWORD *)(v8 + 144) = a6;
  *(_QWORD *)(v8 + 120) = a3;
  *(_QWORD *)(v8 + 128) = a4;
  *(_QWORD *)(v8 + 112) = a1;
  v10 = type metadata accessor for ClientCurrency.Request(0);
  *(_QWORD *)(v8 + 168) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[1];
  *(_OWORD *)(v8 + 16) = *a2;
  *(_OWORD *)(v8 + 32) = v11;
  v12 = a2[3];
  *(_OWORD *)(v8 + 48) = a2[2];
  *(_OWORD *)(v8 + 64) = v12;
  return swift_task_switch(sub_D8A20, 0, 0);
}

uint64_t sub_D8A20()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = swift_task_alloc(32);
  v0[22] = v1;
  *(_QWORD *)(v1 + 16) = v0 + 2;
  v4 = (char *)&dword_1F5AC0 + dword_1F5AC0;
  v2 = (_QWORD *)swift_task_alloc(unk_1F5AC4);
  v0[23] = v2;
  *v2 = v0;
  v2[1] = sub_D8AAC;
  return ((uint64_t (*)(_QWORD, uint64_t (*)@<X0>(uint64_t@<X0>, _QWORD *@<X8>), uint64_t, _QWORD, _QWORD))v4)(v0[21], sub_DD67C, v1, v0[15], v0[16]);
}

uint64_t sub_D8AAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_D8C5C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 176));
    v4 = sub_D8B18;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_D8B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, int *, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 168);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 200) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 136);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 208) = v3;
  *(_QWORD *)(v3 + 16) = v0 + 16;
  *(_QWORD *)(v3 + 24) = v1;
  v6 = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&dword_1F5AD0 + dword_1F5AD0);
  v4 = (_QWORD *)swift_task_alloc(unk_1F5AD4);
  *(_QWORD *)(v0 + 216) = v4;
  *v4 = v0;
  v4[1] = sub_D8BDC;
  return v6(v0 + 80, (int *)&unk_1F4388, v2, (uint64_t)sub_DD6F0, v3);
}

uint64_t sub_D8BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_D8DE4;
  else
    v5 = sub_D8C98;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_D8C5C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_D8C98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  v1 = v0[21];
  v3 = v0[10];
  v2 = v0[11];
  v4 = v0[12];
  v5 = v0[13];
  v0[29] = v2;
  v0[30] = v4;
  v0[31] = v5;
  v6 = (_QWORD *)swift_task_alloc(64);
  v0[32] = v6;
  v6[2] = v0 + 2;
  v6[3] = v1;
  v6[4] = v3;
  v6[5] = v2;
  v6[6] = v4;
  v6[7] = v5;
  swift_bridgeObjectRetain(v2);
  sub_3E1D8(v4, v5);
  v8 = (char *)&dword_1F5C50 + dword_1F5C50;
  v7 = (_QWORD *)swift_task_alloc(unk_1F5C54);
  v0[33] = v7;
  *v7 = v0;
  v7[1] = sub_D8D78;
  __asm { BR              X8 }
}

uint64_t sub_D8D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  *(_QWORD *)(*(_QWORD *)v1 + 272) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_D8E80;
  else
    v4 = sub_D8E20;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_D8DE4()
{
  uint64_t v0;

  sub_DD208(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D8E20()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease();
  sub_3E21C(v1, v2);
  sub_DD208(v3);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D8E80()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease();
  sub_3E21C(v1, v2);
  sub_DD208(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D8EE0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  *(_QWORD *)(v8 + 168) = a7;
  *(_QWORD *)(v8 + 176) = a8;
  *(_QWORD *)(v8 + 152) = a5;
  *(_QWORD *)(v8 + 160) = a6;
  *(_QWORD *)(v8 + 136) = a3;
  *(_QWORD *)(v8 + 144) = a4;
  *(_QWORD *)(v8 + 128) = a1;
  v10 = type metadata accessor for ClientCurrency.Request(0);
  *(_QWORD *)(v8 + 184) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[3];
  *(_OWORD *)(v8 + 48) = a2[2];
  *(_OWORD *)(v8 + 64) = v11;
  *(_OWORD *)(v8 + 80) = a2[4];
  v12 = a2[1];
  *(_OWORD *)(v8 + 16) = *a2;
  *(_OWORD *)(v8 + 32) = v12;
  return swift_task_switch(sub_D8F60, 0, 0);
}

uint64_t sub_D8F60()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = swift_task_alloc(32);
  v0[24] = v1;
  *(_QWORD *)(v1 + 16) = v0 + 2;
  v4 = (char *)&dword_1F5AC0 + dword_1F5AC0;
  v2 = (_QWORD *)swift_task_alloc(unk_1F5AC4);
  v0[25] = v2;
  *v2 = v0;
  v2[1] = sub_D8FEC;
  return ((uint64_t (*)(_QWORD, uint64_t (*)@<X0>(uint64_t@<X0>, _QWORD *@<X8>), uint64_t, _QWORD, _QWORD))v4)(v0[23], sub_DD850, v1, v0[17], v0[18]);
}

uint64_t sub_D8FEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_D919C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 192));
    v4 = sub_D9058;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_D9058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, int *, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 184);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 216) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 152);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 224) = v3;
  *(_QWORD *)(v3 + 16) = v0 + 16;
  *(_QWORD *)(v3 + 24) = v1;
  v6 = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&dword_1F5AD0 + dword_1F5AD0);
  v4 = (_QWORD *)swift_task_alloc(unk_1F5AD4);
  *(_QWORD *)(v0 + 232) = v4;
  *v4 = v0;
  v4[1] = sub_D911C;
  return v6(v0 + 96, (int *)&unk_1F43C0, v2, (uint64_t)sub_DD858, v3);
}

uint64_t sub_D911C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_D9324;
  else
    v5 = sub_D91D8;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_D919C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_D91D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  v1 = v0[23];
  v3 = v0[12];
  v2 = v0[13];
  v4 = v0[14];
  v5 = v0[15];
  v0[31] = v2;
  v0[32] = v4;
  v0[33] = v5;
  v6 = (_QWORD *)swift_task_alloc(64);
  v0[34] = v6;
  v6[2] = v0 + 2;
  v6[3] = v1;
  v6[4] = v3;
  v6[5] = v2;
  v6[6] = v4;
  v6[7] = v5;
  swift_bridgeObjectRetain(v2);
  sub_3E1D8(v4, v5);
  v8 = (char *)&dword_1F5C58 + dword_1F5C58;
  v7 = (_QWORD *)swift_task_alloc(unk_1F5C5C);
  v0[35] = v7;
  *v7 = v0;
  v7[1] = sub_D92B8;
  __asm { BR              X8 }
}

uint64_t sub_D92B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_D93C0;
  else
    v4 = sub_D9360;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_D9324()
{
  uint64_t v0;

  sub_DD208(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D9360()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRelease();
  sub_3E21C(v1, v2);
  sub_DD208(v3);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D93C0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRelease();
  sub_3E21C(v1, v2);
  sub_DD208(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D9420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v8[14] = v14;
  v8[15] = v15;
  v8[12] = a7;
  v8[13] = a8;
  v8[10] = a5;
  v8[11] = a6;
  v8[9] = a1;
  v12 = type metadata accessor for ClientCurrency.Request(0);
  v8[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[6] = a2;
  v8[7] = a3;
  v8[8] = a4;
  return swift_task_switch(sub_D94A4, 0, 0);
}

uint64_t sub_D94A4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  char *v4;

  v1 = swift_task_alloc(32);
  v0[17] = v1;
  *(_QWORD *)(v1 + 16) = v0 + 6;
  v4 = (char *)&dword_1F5AC0 + dword_1F5AC0;
  v2 = (_QWORD *)swift_task_alloc(unk_1F5AC4);
  v0[18] = v2;
  *v2 = v0;
  v2[1] = sub_D9530;
  return ((uint64_t (*)(_QWORD, uint64_t (*)@<X0>(uint64_t@<X0>, _QWORD *@<X8>), uint64_t, _QWORD, _QWORD))v4)(v0[16], sub_DD184, v1, v0[10], v0[11]);
}

uint64_t sub_D9530()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 144);
  *(_QWORD *)(*v1 + 152) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_D96E0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 136));
    v4 = sub_D959C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_D959C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, int *, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 160) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 96);
  *(_QWORD *)(v2 + 32) = v1;
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 168) = v3;
  *(_QWORD *)(v3 + 16) = v0 + 48;
  *(_QWORD *)(v3 + 24) = v1;
  v6 = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&dword_1F5AD0 + dword_1F5AD0);
  v4 = (_QWORD *)swift_task_alloc(unk_1F5AD4);
  *(_QWORD *)(v0 + 176) = v4;
  *v4 = v0;
  v4[1] = sub_D9660;
  return v6(v0 + 16, (int *)&unk_1F4310, v2, (uint64_t)sub_DD1F8, v3);
}

uint64_t sub_D9660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_D9868;
  else
    v5 = sub_D971C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_D96E0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 136));
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_D971C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;

  v1 = v0[16];
  v3 = v0[2];
  v2 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v0[24] = v2;
  v0[25] = v4;
  v0[26] = v5;
  v6 = (_QWORD *)swift_task_alloc(64);
  v0[27] = v6;
  v6[2] = v0 + 6;
  v6[3] = v1;
  v6[4] = v3;
  v6[5] = v2;
  v6[6] = v4;
  v6[7] = v5;
  swift_bridgeObjectRetain(v2);
  sub_3E1D8(v4, v5);
  v8 = (char *)&dword_1F5C48 + dword_1F5C48;
  v7 = (_QWORD *)swift_task_alloc(unk_1F5C4C);
  v0[28] = v7;
  *v7 = v0;
  v7[1] = sub_D97FC;
  __asm { BR              X8 }
}

uint64_t sub_D97FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_D9904;
  else
    v4 = sub_D98A4;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_D9868()
{
  uint64_t v0;

  sub_DD208(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D98A4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease();
  sub_3E21C(v1, v2);
  sub_DD208(v3);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_D9904()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease();
  sub_3E21C(v1, v2);
  sub_DD208(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t Transport.Client.recommendV2(input:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)(v3 + 80) = a1;
  *(_QWORD *)(v3 + 88) = v2;
  v4 = a2[1];
  *(_OWORD *)(v3 + 16) = *a2;
  *(_OWORD *)(v3 + 32) = v4;
  v5 = a2[3];
  *(_OWORD *)(v3 + 48) = a2[2];
  *(_OWORD *)(v3 + 64) = v5;
  return swift_task_switch(sub_D998C, 0, 0);
}

uint64_t sub_D998C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 96) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = v0 + 16;
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 104) = v3;
  *(_QWORD *)(v3 + 16) = v1;
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 112) = v4;
  *(_QWORD *)(v4 + 16) = v1;
  v7 = (uint64_t (*)(uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1F42E8 + dword_1F42E8);
  v5 = (_QWORD *)swift_task_alloc(unk_1F42EC);
  *(_QWORD *)(v0 + 120) = v5;
  *v5 = v0;
  v5[1] = sub_D9A68;
  return v7(*(_QWORD *)(v0 + 80), (_OWORD *)(v0 + 16), (uint64_t)sub_DA21C, v2, (uint64_t)&unk_1F42E0, v3, (uint64_t)sub_DA73C, v4);
}

uint64_t sub_D9A68()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 112);
  v3 = *(_QWORD *)(*v0 + 96);
  v2 = *(_QWORD *)(*v0 + 104);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_D9AD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v25)(_OWORD *, _QWORD);
  Swift::String v26;
  uint64_t (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _BYTE v84[32];
  _OWORD v85[9];
  uint64_t v86;
  uint64_t v87[2];
  uint64_t v88;

  v82 = a2;
  v81 = a3;
  v4 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v4);
  v6 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for URL(0);
  v83 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88);
  v79 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_5EDC(&qword_1F4360);
  __chkstk_darwin(v8);
  v10 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URLComponents(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v76 - v16;
  v19 = *(_QWORD *)(a1 + 152);
  v18 = *(_QWORD *)(a1 + 160);
  URLComponents.init(string:)(v19, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_417D8((uint64_t)v10, &qword_1F4360);
    v20 = type metadata accessor for ClientErrorPayload(0);
    v21 = sub_DD40C();
    swift_allocError(v20, v21, 0, 0);
    *v22 = v19;
    v22[1] = v18;
    swift_storeEnumTagMultiPayload(v22, v20, 0);
    v23 = swift_bridgeObjectRetain(v18);
    return swift_willThrow(v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    v25 = (void (*)(_OWORD *, _QWORD))URLComponents.path.modify(v85);
    v26._countAndFlagsBits = 0xD000000000000013;
    v26._object = (void *)0x80000000001A1FB0;
    String.append(_:)(v26);
    v25(v85, 0);
    v27 = *(uint64_t (**)(char *, char *, uint64_t))(v12 + 16);
    v28 = v27(v15, v17, v11);
    URLComponents.url.getter(v28);
    v29 = v83;
    v30 = v88;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v6, 1, v88) == 1)
    {
      sub_417D8((uint64_t)v6, &qword_1F2448);
      v31 = type metadata accessor for ClientErrorPayload(0);
      v32 = sub_DD40C();
      swift_allocError(v31, v32, 0, 0);
      v33 = v11;
      v35 = v34;
      v27(v34, v15, v33);
      v36 = swift_storeEnumTagMultiPayload(v35, v31, 1);
      swift_willThrow(v36);
      v37 = *(void (**)(char *, uint64_t))(v12 + 8);
      v37(v15, v33);
      return ((uint64_t (*)(char *, uint64_t))v37)(v17, v33);
    }
    else
    {
      v77 = v17;
      v38 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
      v39 = v79;
      v38(v79, v6, v30);
      v40 = v81;
      v38((char *)v81, v39, v30);
      v41 = (int *)type metadata accessor for ClientCurrency.Request(0);
      v42 = v40 + v41[7];
      v43 = (_QWORD *)(v40 + v41[5]);
      *v43 = 1414745936;
      v43[1] = 0xE400000000000000;
      v44 = v41[6];
      *(_QWORD *)(v40 + v44) = _swiftEmptyArrayStorage;
      *(_OWORD *)v42 = xmmword_195670;
      v45 = *(void (**)(char *, uint64_t))(v12 + 8);
      v45(v15, v11);
      v46 = *(_OWORD *)(a1 + 112);
      v85[6] = *(_OWORD *)(a1 + 96);
      v85[7] = v46;
      v85[8] = *(_OWORD *)(a1 + 128);
      v86 = *(_QWORD *)(a1 + 144);
      v47 = *(_OWORD *)(a1 + 48);
      v85[2] = *(_OWORD *)(a1 + 32);
      v85[3] = v47;
      v48 = *(_OWORD *)(a1 + 80);
      v85[4] = *(_OWORD *)(a1 + 64);
      v85[5] = v48;
      v49 = *(_OWORD *)(a1 + 16);
      v85[0] = *(_OWORD *)a1;
      v85[1] = v49;
      v50 = *(_QWORD **)(v40 + v44);
      sub_DD454((uint64_t *)v85);
      if ((swift_isUniquelyReferenced_nonNull_native(v50) & 1) == 0)
        v50 = sub_2FB9C(0, v50[2] + 1, 1, v50);
      v52 = v50[2];
      v51 = v50[3];
      v78 = v11;
      if (v52 >= v51 >> 1)
        v50 = sub_2FB9C((_QWORD *)(v51 > 1), v52 + 1, 1, v50);
      v50[2] = v52 + 1;
      v53 = (char *)&v50[4 * v52];
      strcpy(v53 + 32, "content-type");
      v53[45] = 0;
      *((_WORD *)v53 + 23) = -5120;
      *((_QWORD *)v53 + 6) = 0xD000000000000010;
      *((_QWORD *)v53 + 7) = 0x80000000001A1F40;
      sub_DD540((uint64_t *)v85);
      *(_QWORD *)(v40 + v44) = v50;
      sub_41300((uint64_t)(v82 + 4), (uint64_t)v87, &qword_1F43A8);
      sub_41300((uint64_t)v87, (uint64_t)v84, &qword_1F43A8);
      sub_DD7AC(v87);
      v54 = sub_5EDC(&qword_1F43A8);
      v55 = sub_201AC(&qword_1F43B0, &qword_1F43A8, (void (*)(void))sub_DD7DC, (uint64_t)&protocol conformance descriptor for <A> A?);
      v56 = v80;
      v57 = dispatch thunk of JSONEncoder.encode<A>(_:)(v84, v54, v55);
      if (v56)
      {
        sub_DD820(v87);
        v45(v77, v78);
        return sub_DD208(v40);
      }
      else
      {
        v59 = v57;
        v60 = v58;
        sub_DD820(v87);
        sub_DD668(*(_QWORD *)v42, *(_QWORD *)(v42 + 8));
        *(_QWORD *)v42 = v59;
        *(_QWORD *)(v42 + 8) = v60;
        sub_DD454((uint64_t *)v85);
        v62 = v50[2];
        v61 = v50[3];
        if (v62 >= v61 >> 1)
          v50 = sub_2FB9C((_QWORD *)(v61 > 1), v62 + 1, 1, v50);
        v50[2] = v62 + 1;
        v63 = &v50[4 * v62];
        v63[4] = 0x747065636361;
        v63[5] = 0xE600000000000000;
        v63[6] = 0xD000000000000010;
        v63[7] = 0x80000000001A1F40;
        sub_DD540((uint64_t *)v85);
        *(_QWORD *)(v40 + v44) = v50;
        v64 = v82;
        v65 = v82[1];
        v66 = v77;
        if (v65)
        {
          v67 = *v82;
          swift_bridgeObjectRetain(v82[1]);
          sub_DD454((uint64_t *)v85);
          v69 = v50[2];
          v68 = v50[3];
          swift_bridgeObjectRetain(v65);
          if (v69 >= v68 >> 1)
            v50 = sub_2FB9C((_QWORD *)(v68 > 1), v69 + 1, 1, v50);
          v50[2] = v69 + 1;
          v70 = &v50[4 * v69];
          v70[4] = 0xD000000000000014;
          v70[5] = 0x80000000001A1F90;
          v70[6] = v67;
          v70[7] = v65;
          swift_bridgeObjectRelease();
          sub_DD540((uint64_t *)v85);
          *(_QWORD *)(v81 + v44) = v50;
          v64 = v82;
        }
        v71 = v64[3];
        if (v71)
        {
          v72 = v64[2];
          swift_bridgeObjectRetain(v64[3]);
          sub_DD454((uint64_t *)v85);
          v74 = v50[2];
          v73 = v50[3];
          swift_bridgeObjectRetain(v71);
          if (v74 >= v73 >> 1)
            v50 = sub_2FB9C((_QWORD *)(v73 > 1), v74 + 1, 1, v50);
          v50[2] = v74 + 1;
          v75 = &v50[4 * v74];
          v75[4] = 0xD00000000000001BLL;
          v75[5] = 0x80000000001A1FD0;
          v75[6] = v72;
          v75[7] = v71;
          swift_bridgeObjectRelease();
          sub_DD540((uint64_t *)v85);
          *(_QWORD *)(v81 + v44) = v50;
        }
        return ((uint64_t (*)(char *, uint64_t))v45)(v66, v78);
      }
    }
  }
}

uint64_t sub_DA21C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_D9AD4(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_DA234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_DA250, 0, 0);
}

uint64_t sub_DA250()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[4];
  v2 = v1[28];
  v3 = v1[29];
  sub_49F4(v1 + 25, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[5] = v5;
  *v5 = v0;
  v5[1] = sub_DA2F0;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t))v7)(v0[2], v0[3], 0x6E656D6D6F636572, 0xEB00000000325664, v2, v3);
}

uint64_t sub_DA2F0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_DA338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1F42DC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_6AA68;
  v7[3] = a2;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_DA250, 0, 0);
}

uint64_t *sub_DA3AC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v4 = *result;
  v5 = result[1];
  v6 = result[2];
  v7 = result[3];
  if (*result > 400)
  {
    if (v4 == 401)
    {
      v20 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v20);
      result = (uint64_t *)swift_bridgeObjectRelease();
      if (v2)
        return result;
      v16 = sub_5EDC(&qword_1F4340);
      v17 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v20, v16, v6, v7, v16, v17);
      *(_QWORD *)a2 = v20;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      v10 = 2;
      goto LABEL_15;
    }
    if (v4 == 500)
    {
      v20 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v20);
      if (v2)
        return (uint64_t *)swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = sub_5EDC(&qword_1F4340);
      v19 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v20, v18, v6, v7, v18, v19);
      *(_QWORD *)a2 = v20;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      v10 = 3;
      goto LABEL_15;
    }
LABEL_14:
    *(_QWORD *)a2 = v4;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_QWORD *)(a2 + 56) = 0;
    v10 = 4;
LABEL_15:
    *(_BYTE *)(a2 + 64) = v10;
    return result;
  }
  if (v4 != 200)
  {
    if (v4 == 400)
    {
      v20 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v20);
      result = (uint64_t *)swift_bridgeObjectRelease();
      if (v2)
        return result;
      v8 = sub_5EDC(&qword_1F4340);
      v9 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v20, v8, v6, v7, v8, v9);
      *(_QWORD *)a2 = v20;
      *(_OWORD *)(a2 + 8) = 0u;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_QWORD *)(a2 + 56) = 0;
      v10 = 1;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v20 = result[1];
  swift_bridgeObjectRetain(v5);
  sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v20);
  result = (uint64_t *)swift_bridgeObjectRelease();
  if (!v2)
  {
    v11 = sub_DD768();
    result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v20, &type metadata for Transport.RecommendationResponseV2, v6, v7, &type metadata for Transport.RecommendationResponseV2, v11);
    v12 = v24;
    v13 = v21;
    v14 = v22;
    v15 = v23;
    *(_QWORD *)a2 = v20;
    *(_OWORD *)(a2 + 8) = v13;
    *(_OWORD *)(a2 + 24) = v14;
    *(_OWORD *)(a2 + 40) = v15;
    *(_QWORD *)(a2 + 56) = v12;
    *(_BYTE *)(a2 + 64) = 0;
  }
  return result;
}

uint64_t *sub_DA73C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_DA3AC(a1, a2);
}

uint64_t Transport.Client.personalizationMetadata(input:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = *(_OWORD *)a2;
  *(_QWORD *)(v3 + 48) = *(_QWORD *)(a2 + 16);
  return swift_task_switch(sub_DA77C, 0, 0);
}

void sub_DA77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 48);
  v7 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v7;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 64) = v4;
  *(_QWORD *)(v4 + 16) = v2;
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 72) = v5;
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)&v7 = (char *)&dword_1F4308 + dword_1F4308;
  v6 = (_QWORD *)swift_task_alloc(unk_1F430C);
  *(_QWORD *)(v0 + 80) = v6;
  *v6 = v0;
  v6[1] = sub_DA870;
  __asm { BR              X8; sub_D9420 }
}

uint64_t sub_DA870()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = *(_QWORD *)(*v0 + 72);
  v3 = *(_QWORD *)(*v0 + 56);
  v2 = *(_QWORD *)(*v0 + 64);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 80));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_DA8DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void (*v28)(_OWORD *, _QWORD);
  Swift::String v29;
  uint64_t (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  void (*v39)(char *, char *, void (*)(_QWORD, _QWORD));
  char *v40;
  char *v41;
  void (*v42)(_QWORD, _QWORD);
  uint64_t v43;
  int *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(_QWORD, _QWORD);
  _OWORD v82[9];
  uint64_t v83;
  uint64_t v84;

  v78 = a4;
  v75 = a3;
  v74 = a2;
  v79 = a5;
  v6 = sub_5EDC(&qword_1F2448);
  __chkstk_darwin(v6);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v9 - 8);
  v81 = (void (*)(_QWORD, _QWORD))v9;
  __chkstk_darwin(v9);
  v76 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_5EDC(&qword_1F4360);
  __chkstk_darwin(v11);
  v13 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URLComponents(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v72 - v19;
  v22 = *(_QWORD *)(a1 + 152);
  v21 = *(_QWORD *)(a1 + 160);
  URLComponents.init(string:)(v22, v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_417D8((uint64_t)v13, &qword_1F4360);
    v23 = type metadata accessor for ClientErrorPayload(0);
    v24 = sub_DD40C();
    swift_allocError(v23, v24, 0, 0);
    *v25 = v22;
    v25[1] = v21;
    swift_storeEnumTagMultiPayload(v25, v23, 0);
    v26 = swift_bridgeObjectRetain(v21);
    return swift_willThrow(v26);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    v28 = (void (*)(_OWORD *, _QWORD))URLComponents.path.modify(v82);
    v29._countAndFlagsBits = 0xD000000000000022;
    v29._object = (void *)0x80000000001A1F60;
    String.append(_:)(v29);
    v28(v82, 0);
    v30 = *(uint64_t (**)(char *, char *, uint64_t))(v15 + 16);
    v31 = v30(v18, v20, v14);
    URLComponents.url.getter(v31);
    v32 = v80;
    if ((*(unsigned int (**)(char *, uint64_t, void (*)(_QWORD, _QWORD)))(v80 + 48))(v8, 1, v81) == 1)
    {
      sub_417D8((uint64_t)v8, &qword_1F2448);
      v33 = type metadata accessor for ClientErrorPayload(0);
      v34 = sub_DD40C();
      swift_allocError(v33, v34, 0, 0);
      v36 = v35;
      v30(v35, v18, v14);
      v37 = swift_storeEnumTagMultiPayload(v36, v33, 1);
      swift_willThrow(v37);
      v38 = *(void (**)(char *, uint64_t))(v15 + 8);
      v38(v18, v14);
      return ((uint64_t (*)(char *, uint64_t))v38)(v20, v14);
    }
    else
    {
      v73 = v20;
      v39 = *(void (**)(char *, char *, void (*)(_QWORD, _QWORD)))(v32 + 32);
      v40 = v76;
      v41 = v8;
      v42 = v81;
      v39(v76, v41, v81);
      v43 = v79;
      v39((char *)v79, v40, v42);
      v44 = (int *)type metadata accessor for ClientCurrency.Request(0);
      v45 = v43 + v44[7];
      v46 = (_QWORD *)(v43 + v44[5]);
      *v46 = 1414745936;
      v46[1] = 0xE400000000000000;
      v47 = v44[6];
      *(_QWORD *)(v43 + v47) = _swiftEmptyArrayStorage;
      *(_OWORD *)v45 = xmmword_195670;
      v81 = *(void (**)(_QWORD, _QWORD))(v15 + 8);
      v81(v18, v14);
      v48 = *(_OWORD *)(a1 + 112);
      v82[6] = *(_OWORD *)(a1 + 96);
      v82[7] = v48;
      v82[8] = *(_OWORD *)(a1 + 128);
      v83 = *(_QWORD *)(a1 + 144);
      v49 = *(_OWORD *)(a1 + 48);
      v82[2] = *(_OWORD *)(a1 + 32);
      v82[3] = v49;
      v50 = *(_OWORD *)(a1 + 80);
      v82[4] = *(_OWORD *)(a1 + 64);
      v82[5] = v50;
      v51 = *(_OWORD *)(a1 + 16);
      v82[0] = *(_OWORD *)a1;
      v82[1] = v51;
      v52 = *(_QWORD **)(v43 + v47);
      sub_DD454((uint64_t *)v82);
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
        v52 = sub_2FB9C(0, v52[2] + 1, 1, v52);
      v53 = v78;
      v55 = v52[2];
      v54 = v52[3];
      v72 = v14;
      if (v55 >= v54 >> 1)
        v52 = sub_2FB9C((_QWORD *)(v54 > 1), v55 + 1, 1, v52);
      v52[2] = v55 + 1;
      v56 = (char *)&v52[4 * v55];
      strcpy(v56 + 32, "content-type");
      v56[45] = 0;
      *((_WORD *)v56 + 23) = -5120;
      *((_QWORD *)v56 + 6) = 0xD000000000000010;
      *((_QWORD *)v56 + 7) = 0x80000000001A1F40;
      sub_DD540((uint64_t *)v82);
      *(_QWORD *)(v43 + v47) = v52;
      v84 = v53;
      swift_bridgeObjectRetain(v53);
      v57 = sub_5EDC(&qword_1F4370);
      v58 = sub_201AC(&qword_1F4378, &qword_1F4370, (void (*)(void))sub_DD624, (uint64_t)&protocol conformance descriptor for <A> A?);
      v59 = v77;
      v60 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v84, v57, v58);
      if (v59)
      {
        swift_bridgeObjectRelease();
        v81(v73, v72);
        return sub_DD208(v43);
      }
      else
      {
        v62 = v60;
        v63 = v61;
        swift_bridgeObjectRelease();
        sub_DD668(*(_QWORD *)v45, *(_QWORD *)(v45 + 8));
        *(_QWORD *)v45 = v62;
        *(_QWORD *)(v45 + 8) = v63;
        sub_DD454((uint64_t *)v82);
        v65 = v52[2];
        v64 = v52[3];
        if (v65 >= v64 >> 1)
          v52 = sub_2FB9C((_QWORD *)(v64 > 1), v65 + 1, 1, v52);
        v52[2] = v65 + 1;
        v66 = &v52[4 * v65];
        v66[4] = 0x747065636361;
        v66[5] = 0xE600000000000000;
        v66[6] = 0xD000000000000010;
        v66[7] = 0x80000000001A1F40;
        sub_DD540((uint64_t *)v82);
        *(_QWORD *)(v43 + v47) = v52;
        v67 = v75;
        v68 = v73;
        if (v75)
        {
          swift_bridgeObjectRetain(v75);
          sub_DD454((uint64_t *)v82);
          v70 = v52[2];
          v69 = v52[3];
          swift_bridgeObjectRetain(v67);
          if (v70 >= v69 >> 1)
            v52 = sub_2FB9C((_QWORD *)(v69 > 1), v70 + 1, 1, v52);
          v52[2] = v70 + 1;
          v71 = &v52[4 * v70];
          v71[4] = 0xD000000000000014;
          v71[5] = 0x80000000001A1F90;
          v71[6] = v74;
          v71[7] = v67;
          swift_bridgeObjectRelease();
          sub_DD540((uint64_t *)v82);
          *(_QWORD *)(v43 + v47) = v52;
        }
        return ((uint64_t (*)(char *, uint64_t))v81)(v68, v72);
      }
    }
  }
}

uint64_t sub_DAF58@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_DA8DC(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_DAF74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_DAF90, 0, 0);
}

uint64_t sub_DAF90()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  int *v7;

  v1 = (_QWORD *)v0[4];
  v2 = v1[28];
  v3 = v1[29];
  sub_49F4(v1 + 25, v2);
  v4 = *(int **)(v3 + 8);
  v7 = (int *)((char *)v4 + *v4);
  v5 = (_QWORD *)swift_task_alloc(v4[1]);
  v0[5] = v5;
  *v5 = v0;
  v5[1] = sub_DD9E4;
  return ((uint64_t (*)(_QWORD, _QWORD, unint64_t, unint64_t, uint64_t, uint64_t))v7)(v0[2], v0[3], 0xD000000000000017, 0x80000000001A1EC0, v2, v3);
}

uint64_t sub_DB02C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1F42FC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_6AA68;
  v7[3] = a2;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_DAF90, 0, 0);
}

uint64_t *sub_DB0A0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *result;
  v5 = result[1];
  v6 = result[2];
  v7 = result[3];
  if (*result > 400)
  {
    if (v4 == 401)
    {
      v16 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v16);
      result = (uint64_t *)swift_bridgeObjectRelease();
      if (v2)
        return result;
      v12 = sub_5EDC(&qword_1F4340);
      v13 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v16, v12, v6, v7, v12, v13);
      *(_QWORD *)a2 = v16;
      v10 = 2;
      goto LABEL_15;
    }
    if (v4 == 500)
    {
      v16 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v16);
      if (v2)
        return (uint64_t *)swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = sub_5EDC(&qword_1F4340);
      v15 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v16, v14, v6, v7, v14, v15);
      *(_QWORD *)a2 = v16;
      v10 = 3;
      goto LABEL_15;
    }
LABEL_14:
    *(_QWORD *)a2 = v4;
    v10 = 4;
LABEL_15:
    *(_BYTE *)(a2 + 8) = v10;
    return result;
  }
  if (v4 != 200)
  {
    if (v4 == 400)
    {
      v16 = result[1];
      swift_bridgeObjectRetain(v5);
      sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v16);
      result = (uint64_t *)swift_bridgeObjectRelease();
      if (v2)
        return result;
      v8 = sub_5EDC(&qword_1F4340);
      v9 = sub_201AC(&qword_1F4348, &qword_1F4340, (void (*)(void))sub_DD384, (uint64_t)&protocol conformance descriptor for <A> [A]);
      result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v16, v8, v6, v7, v8, v9);
      *(_QWORD *)a2 = v16;
      v10 = 1;
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  v16 = result[1];
  swift_bridgeObjectRetain(v5);
  sub_3E938((_QWORD *)0xD000000000000010, 0x80000000001A1F40, &v16);
  result = (uint64_t *)swift_bridgeObjectRelease();
  if (!v2)
  {
    v11 = sub_DD3C8();
    result = dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v16, &type metadata for Transport.MetadataResponse, v6, v7, &type metadata for Transport.MetadataResponse, v11);
    *(_QWORD *)a2 = v16;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t *sub_DB3B8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_DB0A0(a1, a2);
}

uint64_t _s6ClientVwxx(_QWORD *a1)
{
  if (*a1)
    swift_release(a1[1]);
  if (a1[2])
    swift_release(a1[3]);
  if (a1[4])
    swift_release(a1[5]);
  if (a1[6])
    swift_release(a1[7]);
  if (a1[8])
    swift_release(a1[9]);
  if (a1[10])
    swift_release(a1[11]);
  swift_release(a1[13]);
  swift_release(a1[15]);
  swift_release(a1[16]);
  swift_release(a1[17]);
  swift_release(a1[18]);
  swift_bridgeObjectRelease();
  if (a1[21])
    swift_release(a1[22]);
  if (a1[23])
    swift_release(a1[24]);
  return sub_62F8(a1 + 25);
}

uint64_t _s6ClientVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  if (*(_QWORD *)a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_retain(v4);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_retain(v6);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  v7 = *(_QWORD *)(a2 + 32);
  if (v7)
  {
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (v9)
  {
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_retain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  v11 = *(_QWORD *)(a2 + 64);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 64) = v11;
    *(_QWORD *)(a1 + 72) = v12;
    swift_retain(v12);
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  }
  v13 = *(_QWORD *)(a2 + 80);
  if (v13)
  {
    v14 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v14;
    swift_retain(v14);
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  v15 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v16 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v16;
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 128) = v18;
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = v20;
  v21 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v21;
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v20);
  swift_bridgeObjectRetain(v21);
  if (v15)
  {
    v22 = *(_QWORD *)(a2 + 176);
    *(_QWORD *)(a1 + 168) = v15;
    *(_QWORD *)(a1 + 176) = v22;
    swift_retain(v22);
  }
  else
  {
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  }
  v23 = *(_QWORD *)(a2 + 184);
  if (v23)
  {
    v24 = *(_QWORD *)(a2 + 192);
    *(_QWORD *)(a1 + 184) = v23;
    *(_QWORD *)(a1 + 192) = v24;
    swift_retain(v24);
  }
  else
  {
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  }
  v25 = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 224) = v25;
  (**(void (***)(uint64_t, uint64_t))(v25 - 8))(a1 + 200, a2 + 200);
  return a1;
}

_QWORD *_s6ClientVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = a1[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain(v5);
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(a1[1]);
  }
  else if (v4)
  {
    v7 = a2[1];
    *a1 = v4;
    a1[1] = v7;
    swift_retain(v7);
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (a1[2])
  {
    if (v8)
    {
      v9 = a2[3];
      v10 = a1[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_retain(v9);
      swift_release(v10);
      goto LABEL_15;
    }
    swift_release(a1[3]);
  }
  else if (v8)
  {
    v11 = a2[3];
    a1[2] = v8;
    a1[3] = v11;
    swift_retain(v11);
    goto LABEL_15;
  }
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
LABEL_15:
  v12 = a2[4];
  if (a1[4])
  {
    if (v12)
    {
      v13 = a2[5];
      v14 = a1[5];
      a1[4] = v12;
      a1[5] = v13;
      swift_retain(v13);
      swift_release(v14);
      goto LABEL_22;
    }
    swift_release(a1[5]);
  }
  else if (v12)
  {
    v15 = a2[5];
    a1[4] = v12;
    a1[5] = v15;
    swift_retain(v15);
    goto LABEL_22;
  }
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
LABEL_22:
  v16 = a2[6];
  if (a1[6])
  {
    if (v16)
    {
      v17 = a2[7];
      v18 = a1[7];
      a1[6] = v16;
      a1[7] = v17;
      swift_retain(v17);
      swift_release(v18);
      goto LABEL_29;
    }
    swift_release(a1[7]);
  }
  else if (v16)
  {
    v19 = a2[7];
    a1[6] = v16;
    a1[7] = v19;
    swift_retain(v19);
    goto LABEL_29;
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
LABEL_29:
  v20 = a2[8];
  if (a1[8])
  {
    if (v20)
    {
      v21 = a2[9];
      v22 = a1[9];
      a1[8] = v20;
      a1[9] = v21;
      swift_retain(v21);
      swift_release(v22);
      goto LABEL_36;
    }
    swift_release(a1[9]);
  }
  else if (v20)
  {
    v23 = a2[9];
    a1[8] = v20;
    a1[9] = v23;
    swift_retain(v23);
    goto LABEL_36;
  }
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
LABEL_36:
  v24 = a2[10];
  if (a1[10])
  {
    if (v24)
    {
      v25 = a2[11];
      v26 = a1[11];
      a1[10] = v24;
      a1[11] = v25;
      swift_retain(v25);
      swift_release(v26);
      goto LABEL_43;
    }
    swift_release(a1[11]);
  }
  else if (v24)
  {
    v27 = a2[11];
    a1[10] = v24;
    a1[11] = v27;
    swift_retain(v27);
    goto LABEL_43;
  }
  *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
LABEL_43:
  v28 = a2[13];
  v29 = a1[13];
  a1[12] = a2[12];
  a1[13] = v28;
  swift_retain(v28);
  swift_release(v29);
  v30 = a2[15];
  v31 = a1[15];
  a1[14] = a2[14];
  a1[15] = v30;
  swift_retain(v30);
  swift_release(v31);
  v32 = a2[16];
  v33 = a1[16];
  a1[16] = v32;
  swift_retain(v32);
  swift_release(v33);
  v34 = a2[17];
  v35 = a1[17];
  a1[17] = v34;
  swift_retain(v34);
  swift_release(v35);
  v36 = a2[18];
  v37 = a1[18];
  a1[18] = v36;
  swift_retain(v36);
  swift_release(v37);
  a1[19] = a2[19];
  v38 = a2[20];
  a1[20] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  v39 = a2[21];
  if (a1[21])
  {
    if (v39)
    {
      v40 = a2[22];
      v41 = a1[22];
      a1[21] = v39;
      a1[22] = v40;
      swift_retain(v40);
      swift_release(v41);
      goto LABEL_50;
    }
    swift_release(a1[22]);
  }
  else if (v39)
  {
    v42 = a2[22];
    a1[21] = v39;
    a1[22] = v42;
    swift_retain(v42);
    goto LABEL_50;
  }
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
LABEL_50:
  v43 = a2[23];
  if (!a1[23])
  {
    if (v43)
    {
      v46 = a2[24];
      a1[23] = v43;
      a1[24] = v46;
      swift_retain(v46);
      goto LABEL_57;
    }
LABEL_56:
    *(_OWORD *)(a1 + 23) = *(_OWORD *)(a2 + 23);
    goto LABEL_57;
  }
  if (!v43)
  {
    swift_release(a1[24]);
    goto LABEL_56;
  }
  v44 = a2[24];
  v45 = a1[24];
  a1[23] = v43;
  a1[24] = v44;
  swift_retain(v44);
  swift_release(v45);
LABEL_57:
  sub_3F20C(a1 + 25, a2 + 25);
  return a1;
}

__n128 _s6ClientVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

uint64_t _s6ClientVwta(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *a2;
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      v5 = a2[1];
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v5;
      swift_release(v6);
      goto LABEL_8;
    }
    swift_release(*(_QWORD *)(a1 + 8));
  }
  else if (v4)
  {
    v7 = a2[1];
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  v8 = a2[2];
  if (*(_QWORD *)(a1 + 16))
  {
    if (v8)
    {
      v9 = a2[3];
      v10 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v8;
      *(_QWORD *)(a1 + 24) = v9;
      swift_release(v10);
      goto LABEL_15;
    }
    swift_release(*(_QWORD *)(a1 + 24));
  }
  else if (v8)
  {
    v11 = a2[3];
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v11;
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
LABEL_15:
  v12 = a2[4];
  if (*(_QWORD *)(a1 + 32))
  {
    if (v12)
    {
      v13 = a2[5];
      v14 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a1 + 40) = v13;
      swift_release(v14);
      goto LABEL_22;
    }
    swift_release(*(_QWORD *)(a1 + 40));
  }
  else if (v12)
  {
    v15 = a2[5];
    *(_QWORD *)(a1 + 32) = v12;
    *(_QWORD *)(a1 + 40) = v15;
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
LABEL_22:
  v16 = a2[6];
  if (*(_QWORD *)(a1 + 48))
  {
    if (v16)
    {
      v17 = a2[7];
      v18 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = v16;
      *(_QWORD *)(a1 + 56) = v17;
      swift_release(v18);
      goto LABEL_29;
    }
    swift_release(*(_QWORD *)(a1 + 56));
  }
  else if (v16)
  {
    v19 = a2[7];
    *(_QWORD *)(a1 + 48) = v16;
    *(_QWORD *)(a1 + 56) = v19;
    goto LABEL_29;
  }
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
LABEL_29:
  v20 = a2[8];
  if (*(_QWORD *)(a1 + 64))
  {
    if (v20)
    {
      v21 = a2[9];
      v22 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v20;
      *(_QWORD *)(a1 + 72) = v21;
      swift_release(v22);
      goto LABEL_36;
    }
    swift_release(*(_QWORD *)(a1 + 72));
  }
  else if (v20)
  {
    v23 = a2[9];
    *(_QWORD *)(a1 + 64) = v20;
    *(_QWORD *)(a1 + 72) = v23;
    goto LABEL_36;
  }
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
LABEL_36:
  v24 = a2[10];
  if (*(_QWORD *)(a1 + 80))
  {
    if (v24)
    {
      v25 = a2[11];
      v26 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = v24;
      *(_QWORD *)(a1 + 88) = v25;
      swift_release(v26);
      goto LABEL_43;
    }
    swift_release(*(_QWORD *)(a1 + 88));
  }
  else if (v24)
  {
    v27 = a2[11];
    *(_QWORD *)(a1 + 80) = v24;
    *(_QWORD *)(a1 + 88) = v27;
    goto LABEL_43;
  }
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
LABEL_43:
  v28 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  swift_release(v28);
  v29 = *(_QWORD *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *((_OWORD *)a2 + 7);
  swift_release(v29);
  v30 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = a2[16];
  swift_release(v30);
  v31 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = a2[17];
  swift_release(v31);
  v32 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = a2[18];
  swift_release(v32);
  v33 = a2[20];
  *(_QWORD *)(a1 + 152) = a2[19];
  *(_QWORD *)(a1 + 160) = v33;
  swift_bridgeObjectRelease();
  v34 = a2[21];
  if (*(_QWORD *)(a1 + 168))
  {
    if (v34)
    {
      v35 = a2[22];
      v36 = *(_QWORD *)(a1 + 176);
      *(_QWORD *)(a1 + 168) = v34;
      *(_QWORD *)(a1 + 176) = v35;
      swift_release(v36);
      goto LABEL_50;
    }
    swift_release(*(_QWORD *)(a1 + 176));
  }
  else if (v34)
  {
    v37 = a2[22];
    *(_QWORD *)(a1 + 168) = v34;
    *(_QWORD *)(a1 + 176) = v37;
    goto LABEL_50;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
LABEL_50:
  v38 = a2[23];
  if (!*(_QWORD *)(a1 + 184))
  {
    if (v38)
    {
      v41 = a2[24];
      *(_QWORD *)(a1 + 184) = v38;
      *(_QWORD *)(a1 + 192) = v41;
      goto LABEL_57;
    }
LABEL_56:
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 23);
    goto LABEL_57;
  }
  if (!v38)
  {
    swift_release(*(_QWORD *)(a1 + 192));
    goto LABEL_56;
  }
  v39 = a2[24];
  v40 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 184) = v38;
  *(_QWORD *)(a1 + 192) = v39;
  swift_release(v40);
LABEL_57:
  sub_62F8((_QWORD *)(a1 + 200));
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(_QWORD *)(a1 + 232) = a2[29];
  return a1;
}

uint64_t _s6ClientVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 240))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 96);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s6ClientVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 240) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 96) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 240) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Transport.Client()
{
  return &type metadata for Transport.Client;
}

uint64_t sub_DBE38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  __int128 v31[2];
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  v16 = (int *)sub_5EDC(&qword_1F4390);
  v17 = a9 + v16[10];
  v18 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = a9 + v16[11];
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  v20 = a3[1];
  *(_OWORD *)(a9 + 16) = *a3;
  *(_OWORD *)(a9 + 32) = v20;
  v21 = a3[3];
  *(_OWORD *)(a9 + 48) = a3[2];
  *(_OWORD *)(a9 + 64) = v21;
  sub_DD304(a4, v17);
  sub_DD34C(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24));
  *(_QWORD *)v19 = a5;
  *(_QWORD *)(v19 + 8) = a6;
  *(_QWORD *)(v19 + 16) = a7;
  *(_QWORD *)(v19 + 24) = a8;
  v33 = a10;
  swift_errorRetain(a10);
  v22 = sub_5EDC(&qword_1F1348);
  v23 = sub_5EDC(&qword_1F4330);
  if (swift_dynamicCast(v31, &v33, v22, v23, 6))
  {
    sub_26DB8(v31, (uint64_t)v34);
    v24 = v35;
    v25 = v36;
    sub_49F4(v34, v35);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 48))(v24, v25);
    swift_errorRelease(a10);
    sub_417D8(a4, &qword_1F4318);
    *(_QWORD *)(a9 + v16[12]) = v26;
    return sub_62F8(v34);
  }
  else
  {
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    sub_417D8(a4, &qword_1F4318);
    result = sub_417D8((uint64_t)v31, &qword_1F4338);
    *(_QWORD *)(a9 + v16[12]) = a10;
  }
  return result;
}

uint64_t sub_DC000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  __int128 v31[2];
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  v16 = (int *)sub_5EDC(&qword_1F43C8);
  v17 = a9 + v16[10];
  v18 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = a9 + v16[11];
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  v20 = a3[3];
  *(_OWORD *)(a9 + 48) = a3[2];
  *(_OWORD *)(a9 + 64) = v20;
  *(_OWORD *)(a9 + 80) = a3[4];
  v21 = a3[1];
  *(_OWORD *)(a9 + 16) = *a3;
  *(_OWORD *)(a9 + 32) = v21;
  sub_DD304(a4, v17);
  sub_DD34C(*(_QWORD *)v19, *(_QWORD *)(v19 + 8), *(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24));
  *(_QWORD *)v19 = a5;
  *(_QWORD *)(v19 + 8) = a6;
  *(_QWORD *)(v19 + 16) = a7;
  *(_QWORD *)(v19 + 24) = a8;
  v33 = a10;
  swift_errorRetain(a10);
  v22 = sub_5EDC(&qword_1F1348);
  v23 = sub_5EDC(&qword_1F4330);
  if (swift_dynamicCast(v31, &v33, v22, v23, 6))
  {
    sub_26DB8(v31, (uint64_t)v34);
    v24 = v35;
    v25 = v36;
    sub_49F4(v34, v35);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 48))(v24, v25);
    swift_errorRelease(a10);
    sub_417D8(a4, &qword_1F4318);
    *(_QWORD *)(a9 + v16[12]) = v26;
    return sub_62F8(v34);
  }
  else
  {
    v32 = 0;
    memset(v31, 0, sizeof(v31));
    sub_417D8(a4, &qword_1F4318);
    result = sub_417D8((uint64_t)v31, &qword_1F4338);
    *(_QWORD *)(a9 + v16[12]) = a10;
  }
  return result;
}

uint64_t sub_DC1D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  __int128 v32[2];
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v19 = (int *)sub_5EDC(&qword_1F4320);
  v20 = (uint64_t)a9 + v19[10];
  v21 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  v22 = (char *)a9 + v19[11];
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  v23 = a6;
  sub_DD304(a6, v20);
  sub_DD34C(*(_QWORD *)v22, *((_QWORD *)v22 + 1), *((_QWORD *)v22 + 2), *((_QWORD *)v22 + 3));
  *(_QWORD *)v22 = a7;
  *((_QWORD *)v22 + 1) = a8;
  *((_QWORD *)v22 + 2) = a10;
  *((_QWORD *)v22 + 3) = a11;
  v34 = a12;
  swift_errorRetain(a12);
  v24 = sub_5EDC(&qword_1F1348);
  v25 = sub_5EDC(&qword_1F4330);
  if (swift_dynamicCast(v32, &v34, v24, v25, 6))
  {
    sub_26DB8(v32, (uint64_t)v35);
    v26 = v36;
    v27 = v37;
    sub_49F4(v35, v36);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 48))(v26, v27);
    swift_errorRelease(a12);
    sub_417D8(v23, &qword_1F4318);
    *(_QWORD *)((char *)a9 + v19[12]) = v28;
    return sub_62F8(v35);
  }
  else
  {
    v33 = 0;
    memset(v32, 0, sizeof(v32));
    sub_417D8(a6, &qword_1F4318);
    result = sub_417D8((uint64_t)v32, &qword_1F4338);
    *(_QWORD *)((char *)a9 + v19[12]) = a12;
  }
  return result;
}

uint64_t sub_DC3B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;

  v12 = sub_5EDC(&qword_1F4318);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v21 - v16;
  sub_DD278(a5, (uint64_t)&v21 - v16);
  v18 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 0, 1, v18);
  a6[3] = sub_5EDC(&qword_1F4320);
  a6[4] = sub_DD870(&qword_1F4328, &qword_1F4320);
  v19 = sub_3DD84(a6);
  sub_DD2BC((uint64_t)v17, (uint64_t)v15);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(a1);
  sub_DC1D0(0xD000000000000017, 0x80000000001A1EC0, a2, a3, a4, (uint64_t)v15, 0, 0, v19, 0, 0, a1);
  return sub_417D8((uint64_t)v17, &qword_1F4318);
}

uint64_t sub_DC534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, unint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v27 = a6;
  v17 = sub_5EDC(&qword_1F4318);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v26 - v21;
  sub_DD278(a5, (uint64_t)&v26 - v21);
  v23 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 0, 1, v23);
  a9[3] = sub_5EDC(&qword_1F4320);
  a9[4] = sub_DD870(&qword_1F4328, &qword_1F4320);
  v24 = sub_3DD84(a9);
  sub_DD2BC((uint64_t)v22, (uint64_t)v20);
  swift_bridgeObjectRetain(a7);
  sub_3E1D8(a8, a10);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(a1);
  sub_DC1D0(0xD000000000000017, 0x80000000001A1EC0, v26, a3, a4, (uint64_t)v20, v27, a7, v24, a8, a10, a1);
  return sub_417D8((uint64_t)v22, &qword_1F4318);
}

uint64_t sub_DC6DC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD v17[4];

  v6 = sub_5EDC(&qword_1F4318);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v17 - v10;
  v12 = a2[1];
  v17[0] = *a2;
  v17[1] = v12;
  v13 = a2[3];
  v17[2] = a2[2];
  v17[3] = v13;
  v14 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  a3[3] = sub_5EDC(&qword_1F4390);
  a3[4] = sub_DD870(&qword_1F4398, &qword_1F4390);
  v15 = sub_3DD84(a3);
  sub_DD2BC((uint64_t)v11, (uint64_t)v9);
  sub_DD708(v17);
  swift_errorRetain(a1);
  sub_DBE38(0x6E656D6D6F636572, 0xEB00000000325664, v17, (uint64_t)v9, 0, 0, 0, 0, (uint64_t)v15, a1);
  return sub_417D8((uint64_t)v11, &qword_1F4318);
}

uint64_t sub_DC844@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD v19[4];

  v8 = sub_5EDC(&qword_1F4318);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v19 - v12;
  v14 = a2[1];
  v19[0] = *a2;
  v19[1] = v14;
  v15 = a2[3];
  v19[2] = a2[2];
  v19[3] = v15;
  sub_DD278(a3, (uint64_t)v19 - v12);
  v16 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 0, 1, v16);
  a4[3] = sub_5EDC(&qword_1F4390);
  a4[4] = sub_DD870(&qword_1F4398, &qword_1F4390);
  v17 = sub_3DD84(a4);
  sub_DD2BC((uint64_t)v13, (uint64_t)v11);
  sub_DD708(v19);
  swift_errorRetain(a1);
  sub_DBE38(0x6E656D6D6F636572, 0xEB00000000325664, v19, (uint64_t)v11, 0, 0, 0, 0, (uint64_t)v17, a1);
  return sub_417D8((uint64_t)v13, &qword_1F4318);
}

uint64_t sub_DC9C4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  _OWORD v27[4];

  v16 = sub_5EDC(&qword_1F4318);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)v27 - v20;
  v22 = a2[1];
  v27[0] = *a2;
  v27[1] = v22;
  v23 = a2[3];
  v27[2] = a2[2];
  v27[3] = v23;
  sub_DD278(a3, (uint64_t)v27 - v20);
  v24 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v21, 0, 1, v24);
  a8[3] = sub_5EDC(&qword_1F4390);
  a8[4] = sub_DD870(&qword_1F4398, &qword_1F4390);
  v25 = sub_3DD84(a8);
  sub_DD2BC((uint64_t)v21, (uint64_t)v19);
  swift_bridgeObjectRetain(a5);
  sub_3E1D8(a6, a7);
  sub_DD708(v27);
  swift_errorRetain(a1);
  sub_DBE38(0x6E656D6D6F636572, 0xEB00000000325664, v27, (uint64_t)v19, a4, a5, a6, a7, (uint64_t)v25, a1);
  return sub_417D8((uint64_t)v21, &qword_1F4318);
}

uint64_t sub_DCB70@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD v17[5];

  v6 = sub_5EDC(&qword_1F4318);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v17 - v10;
  v12 = a2[3];
  v17[2] = a2[2];
  v17[3] = v12;
  v17[4] = a2[4];
  v13 = a2[1];
  v17[0] = *a2;
  v17[1] = v13;
  v14 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v11, 1, 1, v14);
  a3[3] = sub_5EDC(&qword_1F43C8);
  a3[4] = sub_DD870(&qword_1F43D0, &qword_1F43C8);
  v15 = sub_3DD84(a3);
  sub_DD2BC((uint64_t)v11, (uint64_t)v9);
  sub_DD8B0(v17);
  swift_errorRetain(a1);
  sub_DC000(0x6E656D6D6F636572, 0xE900000000000064, v17, (uint64_t)v9, 0, 0, 0, 0, (uint64_t)v15, a1);
  return sub_417D8((uint64_t)v11, &qword_1F4318);
}

uint64_t sub_DCCDC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD *v17;
  _OWORD v19[5];

  v8 = sub_5EDC(&qword_1F4318);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v19 - v12;
  v14 = a2[3];
  v19[2] = a2[2];
  v19[3] = v14;
  v19[4] = a2[4];
  v15 = a2[1];
  v19[0] = *a2;
  v19[1] = v15;
  sub_DD278(a3, (uint64_t)v19 - v12);
  v16 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 0, 1, v16);
  a4[3] = sub_5EDC(&qword_1F43C8);
  a4[4] = sub_DD870(&qword_1F43D0, &qword_1F43C8);
  v17 = sub_3DD84(a4);
  sub_DD2BC((uint64_t)v13, (uint64_t)v11);
  sub_DD8B0(v19);
  swift_errorRetain(a1);
  sub_DC000(0x6E656D6D6F636572, 0xE900000000000064, v19, (uint64_t)v11, 0, 0, 0, 0, (uint64_t)v17, a1);
  return sub_417D8((uint64_t)v13, &qword_1F4318);
}

uint64_t sub_DCE60@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  _OWORD v27[5];

  v16 = sub_5EDC(&qword_1F4318);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)v27 - v20;
  v22 = a2[3];
  v27[2] = a2[2];
  v27[3] = v22;
  v27[4] = a2[4];
  v23 = a2[1];
  v27[0] = *a2;
  v27[1] = v23;
  sub_DD278(a3, (uint64_t)v27 - v20);
  v24 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v21, 0, 1, v24);
  a8[3] = sub_5EDC(&qword_1F43C8);
  a8[4] = sub_DD870(&qword_1F43D0, &qword_1F43C8);
  v25 = sub_3DD84(a8);
  sub_DD2BC((uint64_t)v21, (uint64_t)v19);
  swift_bridgeObjectRetain(a5);
  sub_3E1D8(a6, a7);
  sub_DD8B0(v27);
  swift_errorRetain(a1);
  sub_DC000(0x6E656D6D6F636572, 0xE900000000000064, v27, (uint64_t)v19, a4, a5, a6, a7, (uint64_t)v25, a1);
  return sub_417D8((uint64_t)v21, &qword_1F4318);
}

uint64_t sub_DD010@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v6 = sub_5EDC(&qword_1F4318);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v18 - v10;
  v12 = *a2;
  v13 = a2[1];
  v14 = a2[2];
  v15 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v11, 1, 1, v15);
  a3[3] = sub_5EDC(&qword_1F4320);
  a3[4] = sub_DD870(&qword_1F4328, &qword_1F4320);
  v16 = sub_3DD84(a3);
  sub_DD2BC((uint64_t)v11, (uint64_t)v9);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v13);
  swift_errorRetain(a1);
  sub_DC1D0(0xD000000000000017, 0x80000000001A1EC0, v12, v13, v14, (uint64_t)v9, 0, 0, v16, 0, 0, a1);
  return sub_417D8((uint64_t)v11, &qword_1F4318);
}

uint64_t sub_DD184@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DD010(a1, *(uint64_t **)(v2 + 16), a2);
}

uint64_t sub_DD18C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = (int *)v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1F5ACC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_6AA68;
  return sub_113D78(a1, v4, v5, v6);
}

uint64_t sub_DD1F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DC3B0(a1, **(_QWORD **)(v2 + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_DD208(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_DD244@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DC534(a1, **(_QWORD **)(v2 + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), a2, *(_QWORD *)(v2 + 56));
}

uint64_t sub_DD278(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ClientCurrency.Request(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_DD2BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F4318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_DD304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F4318);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_DD34C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return sub_3E21C(a3, a4);
  }
  return result;
}

unint64_t sub_DD384()
{
  unint64_t result;

  result = qword_1F4350;
  if (!qword_1F4350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.Diagnosis, &type metadata for Transport.Diagnosis);
    atomic_store(result, (unint64_t *)&qword_1F4350);
  }
  return result;
}

unint64_t sub_DD3C8()
{
  unint64_t result;

  result = qword_1F4358;
  if (!qword_1F4358)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataResponse, &type metadata for Transport.MetadataResponse);
    atomic_store(result, (unint64_t *)&qword_1F4358);
  }
  return result;
}

unint64_t sub_DD40C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1F4368;
  if (!qword_1F4368)
  {
    v1 = type metadata accessor for ClientErrorPayload(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for ClientErrorPayload, v1);
    atomic_store(result, (unint64_t *)&qword_1F4368);
  }
  return result;
}

uint64_t *sub_DD454(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v12 = a1[11];
  v13 = a1[13];
  v14 = a1[15];
  v15 = a1[16];
  v16 = a1[17];
  v17 = a1[18];
  sub_3EAFC(*a1, a1[1]);
  sub_3EAFC(v2, v3);
  sub_3EAFC(v4, v5);
  sub_3EAFC(v6, v7);
  sub_3EAFC(v8, v9);
  sub_3EAFC(v10, v12);
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  swift_retain(v17);
  return a1;
}

uint64_t *sub_DD540(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[9];
  v12 = a1[11];
  v13 = a1[10];
  v16 = a1[15];
  v17 = a1[13];
  v10 = a1[18];
  v14 = a1[17];
  v15 = a1[16];
  sub_3EB0C(*a1, a1[1]);
  sub_3EB0C(v2, v3);
  sub_3EB0C(v4, v5);
  sub_3EB0C(v6, v7);
  sub_3EB0C(v8, v9);
  sub_3EB0C(v13, v12);
  swift_release(v10);
  swift_release(v14);
  swift_release(v15);
  swift_release(v16);
  swift_release(v17);
  return a1;
}

unint64_t sub_DD624()
{
  unint64_t result;

  result = qword_1F4380;
  if (!qword_1F4380)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.MetadataRequest, &type metadata for Transport.MetadataRequest);
    atomic_store(result, (unint64_t *)&qword_1F4380);
  }
  return result;
}

uint64_t sub_DD668(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_3E21C(result, a2);
  return result;
}

uint64_t sub_DD67C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DC6DC(a1, *(_OWORD **)(v2 + 16), a2);
}

uint64_t sub_DD684(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = (int *)v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1F5ACC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_4814;
  return sub_113D78(a1, v4, v5, v6);
}

uint64_t sub_DD6F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DC844(a1, *(_OWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_DD6F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DC9C4(a1, *(_OWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

_QWORD *sub_DD708(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v2);
  sub_D5610(v3, v4, v5, v6);
  return a1;
}

unint64_t sub_DD768()
{
  unint64_t result;

  result = qword_1F43A0;
  if (!qword_1F43A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponseV2, &type metadata for Transport.RecommendationResponseV2);
    atomic_store(result, (unint64_t *)&qword_1F43A0);
  }
  return result;
}

uint64_t *sub_DD7AC(uint64_t *a1)
{
  sub_D5610(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

unint64_t sub_DD7DC()
{
  unint64_t result;

  result = qword_1F43B8;
  if (!qword_1F43B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequestV2, &type metadata for Transport.RecommendationRequestV2);
    atomic_store(result, (unint64_t *)&qword_1F43B8);
  }
  return result;
}

uint64_t *sub_DD820(uint64_t *a1)
{
  sub_D5698(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t sub_DD850@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DCB70(a1, *(_OWORD **)(v2 + 16), a2);
}

uint64_t sub_DD858@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DCCDC(a1, *(_OWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_DD860@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_DCE60(a1, *(_OWORD **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t sub_DD870(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_5F68(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for GeneralClientError<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_DD8B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v2);
  sub_D54C8(v3, v4, v5, v6, v7, v8);
  return a1;
}

unint64_t sub_DD924()
{
  unint64_t result;

  result = qword_1F43D8;
  if (!qword_1F43D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationResponse, &type metadata for Transport.RecommendationResponse);
    atomic_store(result, (unint64_t *)&qword_1F43D8);
  }
  return result;
}

unint64_t sub_DD968()
{
  unint64_t result;

  result = qword_1F43F0;
  if (!qword_1F43F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Transport.RecommendationRequest, &type metadata for Transport.RecommendationRequest);
    atomic_store(result, (unint64_t *)&qword_1F43F0);
  }
  return result;
}

_QWORD *sub_DD9AC(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t dispatch thunk of BookHistoryServiceStressTestType.fetchBookHistoryForStressTesting()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ConfigurationServiceType.fetchConfiguration()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v7 = *(int **)(a3 + 16);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v7 + *v7);
  v8 = (_QWORD *)swift_task_alloc(v7[1]);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_4814;
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of ConfigurationServiceType.onChangeOfConfiguration(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t sub_DDA74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  _QWORD v54[69];
  _QWORD v55[69];
  _QWORD *v56;

  v49 = sub_5EDC(&qword_1F44B8);
  v3 = __chkstk_darwin(v49);
  v48 = (uint64_t *)((char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __chkstk_darwin(v3);
  v47 = (uint64_t *)((char *)&v40 - v6);
  __chkstk_darwin(v5);
  v46 = (char *)&v40 - v7;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = _swiftEmptyArrayStorage;
  if (!v8)
    return (uint64_t)v9;
  v40 = v1;
  v56 = _swiftEmptyArrayStorage;
  sub_34434(0, v8, 0);
  result = sub_DF720(a1);
  if (result < 0)
    goto LABEL_33;
  v12 = result;
  if (result >= 1 << *(_BYTE *)(a1 + 32))
    goto LABEL_33;
  v13 = a1 + 64;
  v41 = a1 + 80;
  v42 = v8;
  v14 = 1;
  v44 = a1 + 64;
  v45 = a1;
  v43 = v11;
  while (1)
  {
    v15 = v12 >> 6;
    if ((*(_QWORD *)(v13 + 8 * (v12 >> 6)) & (1 << v12)) == 0)
      break;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v11)
      goto LABEL_29;
    v50 = v14;
    v51 = 1 << v12;
    v16 = v49;
    v17 = v46;
    v18 = (uint64_t)&v46[*(int *)(v49 + 48)];
    v19 = *(_QWORD *)(a1 + 48);
    v20 = *(_QWORD *)(a1 + 56);
    v21 = *(_QWORD *)(v19 + 8 * v12);
    v22 = type metadata accessor for AttributeAffinityResult(0);
    sub_412BC(v20 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v12, v18);
    *v17 = v21;
    v23 = (uint64_t)v47;
    *v47 = v21;
    sub_412BC(v18, v23 + *(int *)(v16 + 48));
    v24 = v48;
    sub_DF7D0(v23, (uint64_t)v48);
    sub_DF818((uint64_t)v17);
    v25 = *v24;
    v26 = (uint64_t *)((char *)v24 + *(int *)(v16 + 48));
    v27 = sub_5EDC(&qword_1F44C0);
    NonEmpty.first.getter(v54);
    memcpy(v55, v54, 0x221uLL);
    sub_6228(v55);
    v52 = LOBYTE(v55[1]);
    NonEmpty.elements.getter(&v53, v27);
    v28 = v53;
    v29 = *v26;
    sub_DF818((uint64_t)v24);
    v9 = v56;
    result = swift_isUniquelyReferenced_nonNull_native(v56);
    if ((result & 1) == 0)
    {
      result = sub_34434(0, v9[2] + 1, 1);
      v9 = v56;
    }
    v31 = v9[2];
    v30 = v9[3];
    if (v31 >= v30 >> 1)
    {
      result = sub_34434(v30 > 1, v31 + 1, 1);
      v9 = v56;
    }
    v9[2] = v31 + 1;
    v32 = &v9[5 * v31];
    v32[4] = v25;
    *((_BYTE *)v32 + 40) = v52;
    v32[6] = _swiftEmptyArrayStorage;
    v32[7] = v28;
    v32[8] = v29;
    a1 = v45;
    v33 = *(_BYTE *)(v45 + 32);
    if ((uint64_t)v12 >= 1 << v33)
      goto LABEL_30;
    v13 = v44;
    v34 = *(_QWORD *)(v44 + 8 * v15);
    if ((v34 & v51) == 0)
      goto LABEL_31;
    LODWORD(v11) = v43;
    if (*(_DWORD *)(v45 + 36) != (_DWORD)v43)
      goto LABEL_32;
    v35 = v34 & (-2 << (v12 & 0x3F));
    if (v35)
    {
      v12 = __clz(__rbit64(v35)) | v12 & 0xFFFFFFFFFFFFFFC0;
      v36 = v42;
    }
    else
    {
      v37 = v15 + 1;
      v38 = (unint64_t)((1 << v33) + 63) >> 6;
      v36 = v42;
      if (v15 + 1 >= v38)
        goto LABEL_22;
      v39 = *(_QWORD *)(v44 + 8 * v37);
      if (!v39)
      {
        while (v38 - 2 != v15)
        {
          v39 = *(_QWORD *)(v41 + 8 * v15++);
          if (v39)
          {
            v37 = v15 + 1;
            goto LABEL_21;
          }
        }
LABEL_22:
        v12 = 1 << v33;
        goto LABEL_23;
      }
LABEL_21:
      v12 = __clz(__rbit64(v39)) + (v37 << 6);
    }
LABEL_23:
    if (v50 == v36)
      return (uint64_t)v9;
    if ((v12 & 0x8000000000000000) == 0)
    {
      v14 = v50 + 1;
      if ((uint64_t)v12 < 1 << v33)
        continue;
    }
    goto LABEL_33;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

void *Book.Metadata.genreIDs(at:)(_BYTE *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 8);
  if (*a1)
  {
    if (*a1 == 1)
      v3 = 1;
    else
      v3 = 2;
    return sub_DE35C(v3);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain(v2);
      sub_340AC(0, v4, 0);
      v5 = _swiftEmptyArrayStorage[2];
      v6 = 32;
      do
      {
        v7 = *(_QWORD *)(v2 + v6);
        v8 = _swiftEmptyArrayStorage[3];
        if (v5 >= v8 >> 1)
          sub_340AC(v8 > 1, v5 + 1, 1);
        _swiftEmptyArrayStorage[2] = v5 + 1;
        _swiftEmptyArrayStorage[v5 + 4] = v7;
        v6 += 16;
        ++v5;
        --v4;
      }
      while (v4);
      swift_bridgeObjectRelease(v2);
    }
    v10 = sub_3CD28((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return (void *)v10;
  }
}

uint64_t sub_DDFAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)(v2 + 1112) = v1;
  *(_QWORD *)(v2 + 1120) = *(_QWORD *)a1;
  *(_WORD *)(v2 + 1168) = *(_WORD *)(a1 + 8);
  *(_DWORD *)(v2 + 26) = *(_DWORD *)(a1 + 10);
  *(_WORD *)(v2 + 30) = *(_WORD *)(a1 + 14);
  v4 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(v2 + 1170) = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(v2 + 1128) = v4;
  memcpy((void *)(v2 + 41), (const void *)(a1 + 25), 0x18FuLL);
  *(_QWORD *)(v2 + 1136) = *(_QWORD *)(a1 + 424);
  memcpy((void *)(v2 + 448), (const void *)(a1 + 432), 0x290uLL);
  return swift_task_switch(sub_DE040, 0, 0);
}

uint64_t sub_DE040()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  _QWORD *v10;
  int *v12;

  v1 = *(_QWORD *)(v0 + 1136);
  v2 = *(_BYTE *)(v0 + 1170);
  v3 = *(_QWORD *)(v0 + 1128);
  v4 = *(_WORD *)(v0 + 1168);
  v5 = *(_QWORD *)(v0 + 1120);
  v6 = *(_QWORD **)(v0 + 1112);
  v7 = v6[10];
  v8 = v6[11];
  sub_49F4(v6 + 7, v7);
  *(_QWORD *)(v0 + 16) = v5;
  *(_WORD *)(v0 + 24) = v4;
  *(_QWORD *)(v0 + 32) = v3;
  *(_BYTE *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 440) = v1;
  v9 = *(int **)(v8 + 8);
  v12 = (int *)((char *)v9 + *v9);
  v10 = (_QWORD *)swift_task_alloc(v9[1]);
  *(_QWORD *)(v0 + 1144) = v10;
  *v10 = v0;
  v10[1] = sub_DE104;
  return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v12)(v0 + 16, *(_QWORD *)(v0 + 1136), v7, v8);
}

uint64_t sub_DE104(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1144);
  *(_QWORD *)(*v2 + 1152) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_CC638;
  }
  else
  {
    *(_QWORD *)(v4 + 1160) = a1;
    v6 = sub_DE178;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_DE178()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 1160);
  v2 = *(_BYTE *)(v0 + 1168);
  v3 = *(_QWORD **)(v0 + 1112);
  v4 = v3[5];
  v5 = v3[6];
  sub_49F4(v3 + 2, v4);
  v6 = swift_task_alloc(32);
  *(_BYTE *)(v6 + 16) = v2;
  v7 = sub_38614(v1);
  swift_bridgeObjectRelease();
  v8 = (*(uint64_t (**)(_BYTE *(*)(_BYTE *), uint64_t, _QWORD *, void *, void *, uint64_t, uint64_t))(v5 + 8))(sub_DF7C8, v6, v7, &type metadata for UInt64, &protocol witness table for UInt64, v4, v5);
  swift_release(v7);
  swift_task_dealloc(v6);
  v9 = sub_DE428(v8);
  swift_bridgeObjectRelease();
  v10 = sub_DDA74(v9);
  swift_release(v9);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

_BYTE *sub_DE288(_BYTE *result, char a2)
{
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _BYTE v8[9];
  __int128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  if (*((_QWORD *)result + 16) >> 1 == 0xFFFFFFFFLL)
  {
    __break(1u);
  }
  else
  {
    v2 = result[72];
    v3 = *((_QWORD *)result + 8);
    v4 = result[56];
    v5 = *((_QWORD *)result + 6);
    v6 = result[40];
    v7 = *((_QWORD *)result + 4);
    v8[1] = result[8];
    v9 = *((_OWORD *)result + 1);
    v10 = v7;
    v11 = v6;
    v12 = v5;
    v13 = v4;
    v14 = v3;
    v15 = v2;
    v8[0] = a2;
    return Book.Metadata.genreIDs(at:)(v8);
  }
  return result;
}

uint64_t sub_DE30C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc(dword_1F44B4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_70AB4;
  return sub_DDFAC(a1);
}

void *sub_DE35C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *result;
  uint64_t v5;
  uint64_t i;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v3 = *(_QWORD *)(v1 + 8);
  result = &_swiftEmptySetSingleton;
  v13 = &_swiftEmptySetSingleton;
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
    return result;
  result = (void *)swift_bridgeObjectRetain(v3);
  for (i = v3 + 40; ; i += 16)
  {
    v7 = *(_QWORD *)(*(_QWORD *)i + 16);
    v8 = v7 - a1;
    if (__OFSUB__(v7, a1))
      break;
    v9 = __OFSUB__(v8, 1);
    v10 = v8 - 1;
    if (v9)
      goto LABEL_15;
    if ((v10 & 0x8000000000000000) != 0)
    {
      if (v10 != -1)
        goto LABEL_4;
      v11 = *(_QWORD *)(i - 8);
    }
    else
    {
      if (v10 >= v7)
        goto LABEL_16;
      v11 = *(_QWORD *)(*(_QWORD *)i + 8 * v10 + 32);
    }
    result = (void *)sub_1628D4(&v12, v11);
LABEL_4:
    if (!--v5)
    {
      swift_bridgeObjectRelease(v3);
      return v13;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_DE428(uint64_t isStackAllocationSafe)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  v2 = isStackAllocationSafe;
  v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  v4 = v3 & 0x3F;
  v5 = (1 << v3) + 63;
  v6 = v5 >> 6;
  v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    v8 = sub_DE578((unint64_t *)((char *)&v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v2);
    if (v1)
      swift_willThrow(v8);
    else
      return v8;
  }
  else
  {
    v9 = (void *)swift_slowAlloc(v7, -1);
    bzero(v9, v7);
    v2 = sub_DE578((unint64_t *)v9, v6, v2);
    swift_slowDealloc(v9, -1, -1);
  }
  return v2;
}

uint64_t sub_DE578(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double *v23;
  double v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v30 = a2;
  v31 = a1;
  v36 = sub_5EDC(&qword_1F44B8);
  v4 = __chkstk_darwin(v36);
  v6 = (uint64_t *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v29 - v7);
  v9 = type metadata accessor for AttributeAffinityResult(0);
  v35 = *(_QWORD *)(v9 - 8);
  result = __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 0;
  v37 = (_QWORD *)a3;
  v14 = *(_QWORD *)(a3 + 64);
  v32 = 0;
  v33 = a3 + 64;
  v15 = 1 << *(_BYTE *)(a3 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v34 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_5;
    }
    v25 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v25 >= v34)
      return sub_DEAB0(v31, v30, v32, v37);
    v26 = *(_QWORD *)(v33 + 8 * v25);
    ++v13;
    if (!v26)
    {
      v13 = v25 + 1;
      if (v25 + 1 >= v34)
        return sub_DEAB0(v31, v30, v32, v37);
      v26 = *(_QWORD *)(v33 + 8 * v13);
      if (!v26)
      {
        v13 = v25 + 2;
        if (v25 + 2 >= v34)
          return sub_DEAB0(v31, v30, v32, v37);
        v26 = *(_QWORD *)(v33 + 8 * v13);
        if (!v26)
          break;
      }
    }
LABEL_20:
    v17 = (v26 - 1) & v26;
    v19 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_5:
    v20 = *(_QWORD *)(v37[6] + 8 * v19);
    sub_412BC(v37[7] + *(_QWORD *)(v35 + 72) * v19, (uint64_t)v12);
    v21 = v36;
    v22 = (uint64_t)v8 + *(int *)(v36 + 48);
    *v8 = v20;
    sub_412BC((uint64_t)v12, v22);
    v23 = (double *)((char *)v6 + *(int *)(v21 + 48));
    *v6 = v20;
    sub_DF858(v22, (uint64_t)v23);
    v24 = *v23;
    sub_CD454((uint64_t)v23);
    result = sub_CD454((uint64_t)v12);
    if (v24 > 0.0)
    {
      *(unint64_t *)((char *)v31 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (__OFADD__(v32++, 1))
      {
        __break(1u);
        return sub_DEAB0(v31, v30, v32, v37);
      }
    }
  }
  v27 = v25 + 3;
  if (v27 >= v34)
    return sub_DEAB0(v31, v30, v32, v37);
  v26 = *(_QWORD *)(v33 + 8 * v27);
  if (v26)
  {
    v13 = v27;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v13 >= v34)
      return sub_DEAB0(v31, v30, v32, v37);
    v26 = *(_QWORD *)(v33 + 8 * v13);
    ++v27;
    if (v26)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_DE830(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  _BYTE __dst[377];

  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_5EDC(&qword_1F44D8);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= a2)
        return v9;
      v16 = v28[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= a2)
          return v9;
        v16 = v28[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= a2)
            return v9;
          v16 = v28[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= a2)
              return v9;
            v16 = v28[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= a2)
                  return v9;
                v16 = v28[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    memcpy(__dst, (const void *)(*(_QWORD *)(v4 + 56) + 384 * v14), sizeof(__dst));
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v18);
    v19 = -1 << *(_BYTE *)(v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v22) = v18;
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(v9 + 56) + 384 * v22), __dst, 0x179uLL);
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_DEAB0(unint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v8 = type metadata accessor for AttributeAffinityResult(0);
  v38 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v35 - v12;
  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (uint64_t)a4;
  }
  sub_5EDC(&qword_1F44C8);
  result = static _DictionaryStorage.allocate(capacity:)(a3);
  v15 = result;
  v36 = a1;
  v37 = a2;
  if (a2 < 1)
    v16 = 0;
  else
    v16 = *a1;
  v17 = 0;
  v18 = result + 64;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v17 << 6);
    }
    else
    {
      v21 = v17 + 1;
      if (__OFADD__(v17, 1))
        goto LABEL_40;
      if (v21 >= v37)
        return v15;
      v22 = v36[v21];
      ++v17;
      if (!v22)
      {
        v17 = v21 + 1;
        if (v21 + 1 >= v37)
          return v15;
        v22 = v36[v17];
        if (!v22)
        {
          v17 = v21 + 2;
          if (v21 + 2 >= v37)
            return v15;
          v22 = v36[v17];
          if (!v22)
          {
            v23 = v21 + 3;
            if (v23 >= v37)
              return v15;
            v22 = v36[v23];
            if (!v22)
            {
              while (1)
              {
                v17 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_41;
                if (v17 >= v37)
                  return v15;
                v22 = v36[v17];
                ++v23;
                if (v22)
                  goto LABEL_24;
              }
            }
            v17 = v23;
          }
        }
      }
LABEL_24:
      v16 = (v22 - 1) & v22;
      v20 = __clz(__rbit64(v22)) + (v17 << 6);
    }
    v24 = *(_QWORD *)(a4[6] + 8 * v20);
    v25 = *(_QWORD *)(v38 + 72);
    sub_412BC(a4[7] + v25 * v20, (uint64_t)v13);
    sub_DF858((uint64_t)v13, (uint64_t)v11);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v15 + 40), v24);
    v26 = -1 << *(_BYTE *)(v15 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v18 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v18 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v18 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v18 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * v29) = v24;
    result = sub_DF858((uint64_t)v11, *(_QWORD *)(v15 + 56) + v29 * v25);
    ++*(_QWORD *)(v15 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    if (!a3)
      return v15;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_DED90(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_5EDC(&qword_1F44E8);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v36 = a1;
  v37 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  v38 = v4;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v39 = v11;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v37)
        return v9;
      v16 = v36[v15];
      v17 = v11 + 1;
      if (!v16)
      {
        v17 = v11 + 2;
        if (v11 + 2 >= v37)
          return v9;
        v16 = v36[v17];
        if (!v16)
        {
          v17 = v11 + 3;
          if (v11 + 3 >= v37)
            return v9;
          v16 = v36[v17];
          if (!v16)
          {
            v18 = v11 + 4;
            if (v11 + 4 >= v37)
              return v9;
            v16 = v36[v18];
            if (!v16)
            {
              while (1)
              {
                v17 = v18 + 1;
                if (__OFADD__(v18, 1))
                  goto LABEL_41;
                if (v17 >= v37)
                  return v9;
                v16 = v36[v17];
                ++v18;
                if (v16)
                  goto LABEL_24;
              }
            }
            v17 = v11 + 4;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v39 = v17;
      v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    v19 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v20 = *(_QWORD *)(v4 + 56) + 72 * v14;
    v21 = *(_BYTE *)v20;
    v23 = *(_QWORD *)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    v25 = *(_BYTE *)(v20 + 32);
    v43 = *(_QWORD *)(v20 + 40);
    v42 = *(_BYTE *)(v20 + 48);
    v41 = *(_QWORD *)(v20 + 56);
    v40 = *(_BYTE *)(v20 + 64);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v19);
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v29) = v19;
    v34 = *(_QWORD *)(v9 + 56) + 72 * v29;
    *(_BYTE *)v34 = v21;
    *(_QWORD *)(v34 + 8) = v23;
    *(_QWORD *)(v34 + 16) = v22;
    *(_QWORD *)(v34 + 24) = v24;
    *(_BYTE *)(v34 + 32) = v25;
    *(_QWORD *)(v34 + 40) = v43;
    *(_BYTE *)(v34 + 48) = v42;
    *(_QWORD *)(v34 + 56) = v41;
    *(_BYTE *)(v34 + 64) = v40;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    swift_bridgeObjectRetain(v23);
    result = swift_bridgeObjectRetain(v22);
    v4 = v38;
    v11 = v39;
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_DF080(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t *v32;
  uint64_t v33;

  if (!a3)
    return (uint64_t)_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_5EDC(&qword_1F44E0);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = result;
  v32 = a1;
  v33 = a2;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v15 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_40;
      if (v15 >= v33)
        return v9;
      v16 = v32[v15];
      ++v11;
      if (!v16)
      {
        v11 = v15 + 1;
        if (v15 + 1 >= v33)
          return v9;
        v16 = v32[v11];
        if (!v16)
        {
          v11 = v15 + 2;
          if (v15 + 2 >= v33)
            return v9;
          v16 = v32[v11];
          if (!v16)
          {
            v17 = v15 + 3;
            if (v17 >= v33)
              return v9;
            v16 = v32[v17];
            if (!v16)
            {
              while (1)
              {
                v11 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v11 >= v33)
                  return v9;
                v16 = v32[v11];
                ++v17;
                if (v16)
                  goto LABEL_24;
              }
            }
            v11 = v17;
          }
        }
      }
LABEL_24:
      v10 = (v16 - 1) & v16;
      v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    v18 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    v19 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v14);
    v20 = *v19;
    v21 = v19[1];
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v9 + 40), v18);
    v22 = -1 << *(_BYTE *)(v9 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6))) != 0)
    {
      v25 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v24 == v27;
        if (v24 == v27)
          v24 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v24);
      }
      while (v29 == -1);
      v25 = __clz(__rbit64(~v29)) + (v24 << 6);
    }
    *(_QWORD *)(v12 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v25) = v18;
    v30 = (_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v25);
    *v30 = v20;
    v30[1] = v21;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    result = swift_bridgeObjectRetain(v21);
    if (!v5)
      return v9;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

_QWORD *sub_DF2F8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[9];

  if (!a3)
    return _swiftEmptyDictionarySingleton;
  v4 = a4;
  if (*(_QWORD *)(a4 + 16) != a3)
  {
    sub_5EDC(&qword_1F44D0);
    v8 = static _DictionaryStorage.allocate(capacity:)(a3);
    v16 = a2;
    if (a2 < 1)
      v9 = 0;
    else
      v9 = *a1;
    if (v9)
    {
      v10 = __clz(__rbit64(v9));
      goto LABEL_23;
    }
    if (a2 > 1)
    {
      v11 = a1[1];
      v12 = 1;
      if (v11)
        goto LABEL_22;
      v12 = 2;
      if (v16 <= 2)
        return (_QWORD *)v8;
      v11 = a1[2];
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v16 <= 3)
        return (_QWORD *)v8;
      v11 = a1[3];
      if (v11)
      {
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v10);
        Hasher.init(_seed:)(v17, *(_QWORD *)(v8 + 40));
        __asm { BR              X8 }
      }
      v13 = 4;
      if (v16 > 4)
      {
        v11 = a1[4];
        if (v11)
        {
          v12 = 4;
          goto LABEL_22;
        }
        while (1)
        {
          v12 = v13 + 1;
          if (__OFADD__(v13, 1))
          {
            __break(1u);
            JUMPOUT(0xDF6F4);
          }
          if (v12 >= v16)
            break;
          v11 = a1[v12];
          ++v13;
          if (v11)
            goto LABEL_22;
        }
      }
    }
    return (_QWORD *)v8;
  }
  swift_retain(a4);
  return (_QWORD *)v4;
}

uint64_t sub_DF720(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t type metadata accessor for SeedBookGenreRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization34SeedBookGenreRecommendationService);
}

_BYTE *sub_DF7C8(_BYTE *a1)
{
  uint64_t v1;

  return sub_DE288(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_DF7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_5EDC(&qword_1F44B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_DF818(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_5EDC(&qword_1F44B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_DF858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AttributeAffinityResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_DF89C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      v8 = v12 + 1;
      if (v12 + 1 >= v6)
        goto LABEL_23;
      v13 = *(_QWORD *)(v2 + 8 * v8);
      if (!v13)
      {
        v8 = v12 + 2;
        if (v12 + 2 >= v6)
          goto LABEL_23;
        v13 = *(_QWORD *)(v2 + 8 * v8);
        if (!v13)
        {
          v8 = v12 + 3;
          if (v12 + 3 >= v6)
            goto LABEL_23;
          v13 = *(_QWORD *)(v2 + 8 * v8);
          if (!v13)
            break;
        }
      }
    }
LABEL_22:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    v11 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v10));
    result = (_QWORD *)sub_10EC18(v11);
  }
  v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release(a1);
    return _swiftEmptyArrayStorage;
  }
  v13 = *(_QWORD *)(v2 + 8 * v14);
  if (v13)
  {
    v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    v8 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v8 >= v6)
      goto LABEL_23;
    v13 = *(_QWORD *)(v2 + 8 * v8);
    ++v14;
    if (v13)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_DFA08@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = result + 64;
  v3 = *(_BYTE *)(result + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(result + 64);
  if (!v6)
  {
    LODWORD(v7) = v3 & 0x3F;
    if (v7 > 6)
    {
      v10 = (unint64_t)(v4 + 63) >> 6;
      v21 = *(_QWORD *)(result + 72);
      if (v21)
      {
        v7 = 1;
LABEL_32:
        v9 = (v21 - 1) & v21;
        v8 = __clz(__rbit64(v21)) + (v7 << 6);
        goto LABEL_5;
      }
      if (v7 >= 8)
      {
        v21 = *(_QWORD *)(result + 80);
        if (v21)
        {
          v7 = 2;
          goto LABEL_32;
        }
        v21 = *(_QWORD *)(result + 88);
        if (v21)
        {
          v7 = 3;
          goto LABEL_32;
        }
LABEL_39:
        if (v7 >= 9)
        {
          v21 = *(_QWORD *)(result + 96);
          if (v21)
          {
            v7 = 4;
          }
          else
          {
            v21 = *(_QWORD *)(result + 104);
            if (!v21)
              goto LABEL_46;
            v7 = 5;
          }
          goto LABEL_32;
        }
      }
    }
    *a2 = 2;
    a2[1] = 0;
    return result;
  }
  v7 = 0;
  v8 = __clz(__rbit64(v6));
  v9 = (v6 - 1) & v6;
  v10 = (unint64_t)(v4 + 63) >> 6;
LABEL_5:
  v11 = *(_QWORD *)(result + 48);
  v12 = *(_QWORD *)(result + 56);
  v13 = *(_BYTE *)(v11 + v8);
  v14 = *(_QWORD *)(v12 + 8 * v8);
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_7;
    }
    v18 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v18 >= v10)
      goto LABEL_28;
    v19 = *(_QWORD *)(v2 + 8 * v18);
    ++v7;
    if (!v19)
    {
      v7 = v18 + 1;
      if (v18 + 1 >= v10)
        goto LABEL_28;
      v19 = *(_QWORD *)(v2 + 8 * v7);
      if (!v19)
      {
        v7 = v18 + 2;
        if (v18 + 2 >= v10)
          goto LABEL_28;
        v19 = *(_QWORD *)(v2 + 8 * v7);
        if (!v19)
        {
          v7 = v18 + 3;
          if (v18 + 3 >= v10)
            goto LABEL_28;
          v19 = *(_QWORD *)(v2 + 8 * v7);
          if (!v19)
            break;
        }
      }
    }
LABEL_27:
    v9 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v7 << 6);
LABEL_7:
    result = *(unsigned __int8 *)(v11 + v16);
    v17 = *(_QWORD *)(v12 + 8 * v16);
    if (v14 < v17)
      v13 = result;
    if (v14 <= v17)
      v14 = v17;
  }
  v20 = v18 + 4;
  if (v20 >= v10)
  {
LABEL_28:
    *a2 = v13 & 1;
    a2[1] = v14;
    return result;
  }
  v19 = *(_QWORD *)(v2 + 8 * v20);
  if (v19)
  {
    v7 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v7 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v7 >= v10)
      goto LABEL_28;
    v19 = *(_QWORD *)(v2 + 8 * v7);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
  __break(1u);
LABEL_46:
  v22 = 0;
  v23 = 6;
  if (v10 > 6)
    v23 = v10;
  while (v23 - 6 != v22)
  {
    v21 = *(_QWORD *)(result + 112 + 8 * v22++);
    if (v21)
    {
      v7 = v22 + 5;
      goto LABEL_32;
    }
  }
  *a2 = 2;
  a2[1] = 0;
  return result;
}

uint64_t sub_DFC28(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  int64_t v31;
  char v32;
  _QWORD __dst[70];
  _QWORD *v34;

  v32 = a3 & 1;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v8 << 6);
    }
    else
    {
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
        goto LABEL_38;
      if (v11 >= v31)
        return swift_release(a1);
      v12 = *(_QWORD *)(v30 + 8 * v11);
      ++v8;
      if (!v12)
      {
        v8 = v11 + 1;
        if (v11 + 1 >= v31)
          return swift_release(a1);
        v12 = *(_QWORD *)(v30 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 2;
          if (v11 + 2 >= v31)
            return swift_release(a1);
          v12 = *(_QWORD *)(v30 + 8 * v8);
          if (!v12)
          {
            v8 = v11 + 3;
            if (v11 + 3 >= v31)
              return swift_release(a1);
            v12 = *(_QWORD *)(v30 + 8 * v8);
            if (!v12)
            {
              v13 = v11 + 4;
              if (v13 >= v31)
                return swift_release(a1);
              v12 = *(_QWORD *)(v30 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v8 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_39;
                  if (v8 >= v31)
                    return swift_release(a1);
                  v12 = *(_QWORD *)(v30 + 8 * v8);
                  ++v13;
                  if (v12)
                    goto LABEL_23;
                }
              }
              v8 = v13;
            }
          }
        }
      }
LABEL_23:
      v7 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v8 << 6);
    }
    memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 48) + 552 * v10), 0x221uLL);
    v14 = __dst[0];
    sub_6100(__dst);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    v34 = (_QWORD *)*a2;
    v16 = v34;
    *a2 = 0x8000000000000000;
    v18 = sub_39228(v14);
    v19 = v16[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v16[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v25 = v34;
        if ((v17 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_16BF38();
        v25 = v34;
        if ((v22 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_15BDDC(v21, isUniquelyReferenced_nonNull_native);
      v23 = sub_39228(v14);
      if ((v22 & 1) != (v24 & 1))
        goto LABEL_40;
      v18 = v23;
      v25 = v34;
      if ((v22 & 1) != 0)
      {
LABEL_4:
        *(_BYTE *)(v25[7] + v18) = v32;
        goto LABEL_5;
      }
    }
    v25[(v18 >> 6) + 8] |= 1 << v18;
    *(_QWORD *)(v25[6] + 8 * v18) = v14;
    *(_BYTE *)(v25[7] + v18) = v32;
    v26 = v25[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_37;
    v25[2] = v28;
LABEL_5:
    *a2 = v25;
    swift_bridgeObjectRelease();
    sub_6228(__dst);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_DFF04(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v3[274] = v2;
  v3[273] = a1;
  memcpy(v3 + 211, a2, 0x1E8uLL);
  v5 = a2[62];
  v3[275] = a2[61];
  v3[276] = v5;
  v3[277] = a2[63];
  v3[278] = a2[64];
  memcpy(v3 + 2, a2 + 65, 0x238uLL);
  return swift_task_switch(sub_DFF8C, 0, 0);
}

uint64_t sub_DFF8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int *v22;
  _QWORD *v23;
  int *v24;

  v1 = v0[273];
  v0[272] = sub_5FE60((uint64_t)_swiftEmptyArrayStorage);
  v2 = v1 + 64;
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v1 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v1 + 64);
  v6 = (unint64_t)(63 - v4) >> 6;
  result = swift_bridgeObjectRetain(v1);
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v13 >= v6)
      goto LABEL_21;
    v14 = *(_QWORD *)(v2 + 8 * v13);
    ++v8;
    if (!v14)
    {
      v8 = v13 + 1;
      if (v13 + 1 >= v6)
        goto LABEL_21;
      v14 = *(_QWORD *)(v2 + 8 * v8);
      if (!v14)
      {
        v8 = v13 + 2;
        if (v13 + 2 >= v6)
          goto LABEL_21;
        v14 = *(_QWORD *)(v2 + 8 * v8);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v5 = (v14 - 1) & v14;
    v10 = __clz(__rbit64(v14)) + (v8 << 6);
LABEL_5:
    v11 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + v10);
    v12 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v1 + 56) + 8 * v10));
    sub_DFC28(v12, v0 + 272, v11);
    result = swift_bridgeObjectRelease();
  }
  v15 = v13 + 3;
  if (v15 >= v6)
  {
LABEL_21:
    v16 = (_QWORD *)v0[274];
    swift_release(v0[273]);
    v0[279] = sub_5FF34(_swiftEmptyArrayStorage);
    v17 = v16[5];
    v18 = v16[6];
    sub_49F4(v16 + 2, v17);
    v19 = v0[272];
    v0[280] = v19;
    v20 = swift_bridgeObjectRetain(v19);
    v21 = sub_37EB0(v20);
    v0[281] = v21;
    swift_bridgeObjectRelease();
    v22 = *(int **)(v18 + 16);
    v24 = (int *)((char *)v22 + *v22);
    v23 = (_QWORD *)swift_task_alloc(v22[1]);
    v0[282] = v23;
    *v23 = v0;
    v23[1] = sub_E019C;
    return ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v24)(v21, v17, v18);
  }
  v14 = *(_QWORD *)(v2 + 8 * v15);
  if (v14)
  {
    v8 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v8 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v8 >= v6)
      goto LABEL_21;
    v14 = *(_QWORD *)(v2 + 8 * v8);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_E019C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 2256);
  v5 = *(_QWORD *)(*v2 + 2248);
  *(_QWORD *)(v3 + 2264) = a1;
  *(_QWORD *)(v3 + 2272) = v1;
  swift_task_dealloc(v4);
  swift_release(v5);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v6 = sub_E1184;
  }
  else
  {
    v6 = sub_E0228;
  }
  return swift_task_switch(v6, 0, 0);
}

void sub_E0228()
{
  _QWORD *v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  _BOOL8 v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  int64_t v62;
  void (*v63)(_QWORD *@<X8>);
  int64_t v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  _QWORD *v89;
  _QWORD *v90;
  char v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t j;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  _QWORD *v107;
  char v108;
  char v109;
  char v110;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v112;
  _QWORD *v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  int64_t v132;
  char v133;
  unint64_t v134;
  char v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t i;
  uint64_t v144;
  uint64_t v145;
  char v146;
  unint64_t v147;
  uint64_t v148;
  _BOOL8 v149;
  uint64_t v150;
  char v151;
  unint64_t v152;
  char v153;
  uint64_t v154;
  BOOL v155;
  uint64_t v156;
  ValueMetadata *v157;
  _QWORD *v158;
  uint64_t v159;
  int64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(_QWORD *@<X8>);
  char v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  int64_t v176;
  void *__src;
  void *__srca;
  void *v179;
  char v180;
  _QWORD *v181;
  _QWORD *v182;
  uint64_t v183;
  _BYTE __dst[1088];
  uint64_t v185;

  v1 = 0;
  v158 = v0 + 73;
  v175 = v0 + 142;
  v2 = v0[283];
  v3 = *(_QWORD *)(v2 + 64);
  v159 = v2 + 64;
  __src = v0 + 211;
  v179 = v0 + 2;
  v162 = v2;
  v163 = 0;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & v3;
  v160 = (unint64_t)(63 - v4) >> 6;
  v174 = v0[279];
  v7 = v0 + 275;
  v157 = (ValueMetadata *)&type metadata for UInt64;
  while (2)
  {
    if (v6)
    {
      v167 = (v6 - 1) & v6;
      v169 = v1;
      v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_22;
    }
    v9 = v1 + 1;
    if (__OFADD__(v1, 1))
      goto LABEL_176;
    if (v9 >= v160)
      goto LABEL_60;
    v10 = *(_QWORD *)(v159 + 8 * v9);
    v11 = v1 + 1;
    if (!v10)
    {
      v11 = v1 + 2;
      if (v1 + 2 >= v160)
        goto LABEL_60;
      v10 = *(_QWORD *)(v159 + 8 * v11);
      if (!v10)
      {
        v11 = v1 + 3;
        if (v1 + 3 >= v160)
          goto LABEL_60;
        v10 = *(_QWORD *)(v159 + 8 * v11);
        if (!v10)
        {
          v12 = v1 + 4;
          if (v1 + 4 < v160)
          {
            v10 = *(_QWORD *)(v159 + 8 * v12);
            if (v10)
            {
              v11 = v1 + 4;
              goto LABEL_21;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
                goto LABEL_180;
              if (v11 >= v160)
                break;
              v10 = *(_QWORD *)(v159 + 8 * v11);
              ++v12;
              if (v10)
                goto LABEL_21;
            }
          }
LABEL_60:
          swift_release(v0[283]);
          v56 = v0[280];
          v173 = (_QWORD *)sub_52F50((uint64_t)_swiftEmptyArrayStorage);
          v57 = swift_bridgeObjectRetain(v56);
          v170 = sub_27D94(v57);
          v58 = v174 + 64;
          v59 = -1 << *(_BYTE *)(v174 + 32);
          if (-v59 < 64)
            v60 = ~(-1 << -(char)v59);
          else
            v60 = -1;
          v61 = v60 & *(_QWORD *)(v174 + 64);
          v62 = (unint64_t)(63 - v59) >> 6;
          swift_bridgeObjectRetain(v174);
          v63 = 0;
          v64 = 0;
          v157 = &type metadata for Book.MediaType;
          while (1)
          {
            if (v61)
            {
              v65 = __clz(__rbit64(v61));
              v61 &= v61 - 1;
              v66 = v65 | (v64 << 6);
            }
            else
            {
              v67 = v64 + 1;
              if (__OFADD__(v64, 1))
                goto LABEL_177;
              if (v67 >= v62)
                goto LABEL_115;
              v68 = *(_QWORD *)(v58 + 8 * v67);
              ++v64;
              if (!v68)
              {
                v64 = v67 + 1;
                if (v67 + 1 >= v62)
                  goto LABEL_115;
                v68 = *(_QWORD *)(v58 + 8 * v64);
                if (!v68)
                {
                  v64 = v67 + 2;
                  if (v67 + 2 >= v62)
                    goto LABEL_115;
                  v68 = *(_QWORD *)(v58 + 8 * v64);
                  if (!v68)
                  {
                    v69 = v67 + 3;
                    if (v69 >= v62)
                      goto LABEL_115;
                    v68 = *(_QWORD *)(v58 + 8 * v69);
                    if (!v68)
                    {
                      while (1)
                      {
                        v64 = v69 + 1;
                        if (__OFADD__(v69, 1))
                          goto LABEL_181;
                        if (v64 >= v62)
                          break;
                        v68 = *(_QWORD *)(v58 + 8 * v64);
                        ++v69;
                        if (v68)
                          goto LABEL_79;
                      }
LABEL_115:
                      swift_release(v174);
                      v168 = (uint64_t)v63;
                      v103 = (uint64_t)v173;
                      if (*(_QWORD *)(v170 + 16))
                      {
                        v104 = v0[280];
                        v105 = *((double *)v0 + 277);
                        swift_bridgeObjectRetain(v104);
                        v106 = swift_bridgeObjectRetain(v170);
                        v107 = sub_37DCC(v106);
                        swift_bridgeObjectRelease();
                        sub_E155C(v104, (uint64_t)v107, __dst, v105);
                        swift_release(v107);
                        swift_bridgeObjectRelease();
                        if (__dst[0] != 2)
                        {
                          v108 = __dst[0] & 1;
                          if (!v173[2]
                            || (swift_bridgeObjectRetain(v173),
                                sub_3933C(v108),
                                v110 = v109,
                                swift_bridgeObjectRelease(),
                                (v110 & 1) == 0))
                          {
                            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v173);
                            *(_QWORD *)__dst = v173;
                            sub_1701BC((uint64_t)&off_1D6258, v108, isUniquelyReferenced_nonNull_native);
                            v103 = *(_QWORD *)__dst;
                            swift_bridgeObjectRelease();
                            v112 = swift_bridgeObjectRetain(v170);
                            v113 = sub_37DCC(v112);
                            swift_bridgeObjectRelease();
                            v114 = swift_isUniquelyReferenced_nonNull_native(v174);
                            *(_QWORD *)__dst = v174;
                            sub_170074((uint64_t)v113, 0, v114);
                            v174 = *(_QWORD *)__dst;
                            swift_bridgeObjectRelease();
                          }
                        }
                        v0 = (_QWORD *)v183;
                      }
                      v115 = v0[280];
                      v116 = v0[275];
                      v117 = v0[273];
                      swift_bridgeObjectRetain(v103);
                      swift_bridgeObjectRetain(v174);
                      swift_bridgeObjectRetain(v115);
                      v118 = sub_E1870(v103, v174, v115, v116);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v119 = (_QWORD *)sub_52E44((uint64_t)_swiftEmptyArrayStorage);
                      v120 = swift_bridgeObjectRetain(v117);
                      v182 = sub_DF89C(v120);
                      swift_bridgeObjectRelease();
                      v121 = -1;
                      v122 = -1 << *(_BYTE *)(v117 + 32);
                      if (-v122 < 64)
                        v121 = ~(-1 << -(char)v122);
                      v123 = v121 & *(_QWORD *)(v117 + 64);
                      v176 = (unint64_t)(63 - v122) >> 6;
                      swift_bridgeObjectRetain(v117);
                      v124 = 0;
                      v157 = &type metadata for Book.MediaType;
                      __srca = (void *)v118;
                      while (2)
                      {
                        if (v123)
                        {
                          v126 = __clz(__rbit64(v123));
                          v123 &= v123 - 1;
                          v127 = v126 | (v124 << 6);
                          v128 = *(_QWORD *)(v183 + 2184);
                        }
                        else
                        {
                          v129 = v124 + 1;
                          if (__OFADD__(v124, 1))
                            goto LABEL_179;
                          v128 = *(_QWORD *)(v183 + 2184);
                          if (v129 >= v176)
                            goto LABEL_171;
                          v130 = v128 + 64;
                          v131 = *(_QWORD *)(v128 + 64 + 8 * v129);
                          ++v124;
                          if (!v131)
                          {
                            v124 = v129 + 1;
                            if (v129 + 1 >= v176)
                              goto LABEL_171;
                            v131 = *(_QWORD *)(v130 + 8 * v124);
                            if (!v131)
                            {
                              v124 = v129 + 2;
                              if (v129 + 2 >= v176)
                                goto LABEL_171;
                              v131 = *(_QWORD *)(v130 + 8 * v124);
                              if (!v131)
                              {
                                v124 = v129 + 3;
                                if (v129 + 3 >= v176)
                                  goto LABEL_171;
                                v131 = *(_QWORD *)(v130 + 8 * v124);
                                if (!v131)
                                {
                                  v124 = v129 + 4;
                                  if (v129 + 4 >= v176)
                                    goto LABEL_171;
                                  v131 = *(_QWORD *)(v130 + 8 * v124);
                                  if (!v131)
                                  {
                                    v132 = v129 + 5;
                                    if (v132 >= v176)
                                      goto LABEL_171;
                                    v131 = *(_QWORD *)(v130 + 8 * v132);
                                    if (!v131)
                                    {
                                      while (1)
                                      {
                                        v124 = v132 + 1;
                                        if (__OFADD__(v132, 1))
                                          goto LABEL_183;
                                        if (v124 >= v176)
                                          break;
                                        v131 = *(_QWORD *)(v130 + 8 * v124);
                                        ++v132;
                                        if (v131)
                                          goto LABEL_145;
                                      }
LABEL_171:
                                      swift_release(v128);
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      swift_bridgeObjectRelease();
                                      sub_3EB0C((uint64_t)v163, 0);
                                      sub_3EB0C(v168, 0);
                                      (*(void (**)(_QWORD *))(v183 + 8))(v119);
                                      return;
                                    }
                                    v124 = v132;
                                  }
                                }
                              }
                            }
                          }
LABEL_145:
                          v123 = (v131 - 1) & v131;
                          v127 = __clz(__rbit64(v131)) + (v124 << 6);
                        }
                        v133 = *(_BYTE *)(*(_QWORD *)(v128 + 48) + v127);
                        if (v118 && *(_QWORD *)(v118 + 16))
                        {
                          swift_bridgeObjectRetain(v118);
                          v134 = sub_3933C(v133);
                          if ((v135 & 1) != 0)
                          {
                            v136 = *(_QWORD *)(*(_QWORD *)(v118 + 56) + 8 * v134);
                            swift_bridgeObjectRetain(v136);
                          }
                          else
                          {
                            v136 = 0;
                          }
                          swift_bridgeObjectRelease();
                        }
                        else
                        {
                          v136 = 0;
                        }
                        v137 = (_QWORD *)swift_bridgeObjectRetain(v182);
                        v138 = sub_E1F00(v137, v136);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        v139 = v138[2];
                        v140 = sub_41234();
                        v141 = Set.init(minimumCapacity:)(v139, &type metadata for SeedBook, v140);
                        v185 = v141;
                        if (v139)
                        {
                          v142 = v139 - 1;
                          for (i = 4; ; i += 69)
                          {
                            memcpy(v158, &v138[i], 0x221uLL);
                            sub_6100(v158);
                            sub_1629CC(__dst, v158);
                            memcpy(v175, __dst, 0x221uLL);
                            sub_6228(v175);
                            if (!v142)
                              break;
                            --v142;
                          }
                          swift_bridgeObjectRelease();
                          v144 = v185;
                        }
                        else
                        {
                          v144 = v141;
                          swift_bridgeObjectRelease();
                        }
                        v145 = swift_isUniquelyReferenced_nonNull_native(v119);
                        *(_QWORD *)__dst = v119;
                        v147 = sub_3933C(v133);
                        v148 = v119[2];
                        v149 = (v146 & 1) == 0;
                        v150 = v148 + v149;
                        if (__OFADD__(v148, v149))
                          goto LABEL_175;
                        v151 = v146;
                        if (v119[3] >= v150)
                        {
                          if ((v145 & 1) != 0)
                          {
                            if ((v146 & 1) == 0)
                              goto LABEL_166;
                          }
                          else
                          {
                            sub_16B8C8();
                            v119 = *(_QWORD **)__dst;
                            if ((v151 & 1) == 0)
                              goto LABEL_166;
                          }
                        }
                        else
                        {
                          sub_15A918(v150, v145);
                          v119 = *(_QWORD **)__dst;
                          v152 = sub_3933C(v133);
                          if ((v151 & 1) != (v153 & 1))
                            goto LABEL_170;
                          v147 = v152;
                          if ((v151 & 1) == 0)
                          {
LABEL_166:
                            v119[(v147 >> 6) + 8] |= 1 << v147;
                            *(_BYTE *)(v119[6] + v147) = v133;
                            *(_QWORD *)(v119[7] + 8 * v147) = v144;
                            v154 = v119[2];
                            v155 = __OFADD__(v154, 1);
                            v156 = v154 + 1;
                            if (v155)
                              goto LABEL_178;
                            v119[2] = v156;
                            goto LABEL_125;
                          }
                        }
                        v125 = v119[7];
                        swift_bridgeObjectRelease();
                        *(_QWORD *)(v125 + 8 * v147) = v144;
LABEL_125:
                        swift_bridgeObjectRelease();
                        v118 = (uint64_t)__srca;
                        continue;
                      }
                    }
                    v64 = v69;
                  }
                }
              }
LABEL_79:
              v61 = (v68 - 1) & v68;
              v66 = __clz(__rbit64(v68)) + (v64 << 6);
            }
            v70 = *(_QWORD *)(*(_QWORD *)(v174 + 56) + 8 * v66);
            if (*(_QWORD *)(v70 + 16) >= v0[276])
            {
              v71 = v0[280];
              v72 = *((double *)v0 + 277);
              v73 = *(_QWORD *)(*(_QWORD *)(v174 + 48) + 8 * v66);
              swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v174 + 56) + 8 * v66));
              v74 = swift_bridgeObjectRetain(v71);
              sub_E155C(v74, v70, __dst, v72);
              swift_bridgeObjectRelease();
              if (__dst[0] == 2)
              {
                swift_bridgeObjectRelease();
                v0 = (_QWORD *)v183;
              }
              else
              {
                v75 = __dst[0] & 1;
                sub_3EB0C((uint64_t)v63, 0);
                v76 = swift_isUniquelyReferenced_nonNull_native(v173);
                *(_QWORD *)__dst = v173;
                v180 = v75;
                v78 = sub_3933C(v75);
                v79 = v173[2];
                v80 = (v77 & 1) == 0;
                v81 = v79 + v80;
                if (__OFADD__(v79, v80))
                  goto LABEL_182;
                v82 = v77;
                if (v173[3] >= v81)
                {
                  if (!(_DWORD)v76)
                  {
                    sub_16B8BC();
                    v173 = *(_QWORD **)__dst;
                  }
                }
                else
                {
                  sub_15AC48(v81, v76);
                  v173 = *(_QWORD **)__dst;
                  v83 = sub_3933C(v180);
                  if ((v82 & 1) != (v84 & 1))
                  {
LABEL_170:
                    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v157);
                    return;
                  }
                  v78 = v83;
                }
                swift_bridgeObjectRelease();
                if ((v82 & 1) != 0)
                {
                  v85 = swift_bridgeObjectRetain(v173);
                }
                else
                {
                  v173[(v78 >> 6) + 8] |= 1 << v78;
                  *(_BYTE *)(v173[6] + v78) = v180;
                  *(_QWORD *)(v173[7] + 8 * v78) = _swiftEmptyArrayStorage;
                  v86 = v173[2];
                  v87 = v86 + 1;
                  v88 = __OFADD__(v86, 1);
                  v85 = swift_bridgeObjectRetain(v173);
                  if (v88)
                    goto LABEL_184;
                  *(_QWORD *)(v85 + 16) = v87;
                }
                v89 = *(_QWORD **)(v85 + 56);
                swift_bridgeObjectRelease();
                v90 = (_QWORD *)v89[v78];
                v91 = swift_isUniquelyReferenced_nonNull_native(v90);
                v89[v78] = v90;
                v181 = v89;
                if ((v91 & 1) == 0)
                {
                  v90 = sub_2FA6C(0, v90[2] + 1, 1, v90);
                  v89[v78] = v90;
                }
                v93 = v90[2];
                v92 = v90[3];
                if (v93 >= v92 >> 1)
                {
                  v90 = sub_2FA6C((_QWORD *)(v92 > 1), v93 + 1, 1, v90);
                  v181[v78] = v90;
                }
                v90[2] = v93 + 1;
                v90[v93 + 4] = v73;
                v94 = *(_QWORD *)(v70 + 16);
                if (v94)
                {
                  swift_bridgeObjectRetain(v70);
                  for (j = 0; j != v94; ++j)
                  {
                    v97 = *(_QWORD *)(v70 + 32 + 8 * j);
                    v98 = static Hasher._hash(seed:_:)(*(_QWORD *)(v170 + 40), v97);
                    v99 = -1 << *(_BYTE *)(v170 + 32);
                    v100 = v98 & ~v99;
                    if (((*(_QWORD *)(v170 + 56 + ((v100 >> 3) & 0xFFFFFFFFFFFFF8)) >> v100) & 1) != 0)
                    {
                      v101 = *(_QWORD *)(v170 + 48);
                      if (*(_QWORD *)(v101 + 8 * v100) == v97)
                      {
LABEL_104:
                        v96 = swift_isUniquelyReferenced_nonNull_native(v170);
                        *(_QWORD *)__dst = v170;
                        if ((v96 & 1) == 0)
                          sub_168030();
                        sub_C4720(v100);
                        v170 = *(_QWORD *)__dst;
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        v102 = ~v99;
                        while (1)
                        {
                          v100 = (v100 + 1) & v102;
                          if (((*(_QWORD *)(v170 + 56 + ((v100 >> 3) & 0xFFFFFFFFFFFFF8)) >> v100) & 1) == 0)
                            break;
                          if (*(_QWORD *)(v101 + 8 * v100) == v97)
                            goto LABEL_104;
                        }
                      }
                    }
                  }
                  swift_bridgeObjectRelease_n(v70, 2);
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
                v63 = sub_A7FBC;
                v0 = (_QWORD *)v183;
              }
            }
          }
        }
      }
    }
LABEL_21:
    v167 = (v10 - 1) & v10;
    v169 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_22:
    v166 = *(_QWORD *)(*(_QWORD *)(v162 + 48) + 8 * v8);
    v13 = *(_QWORD *)(v162 + 56) + 72 * v8;
    v14 = *(_QWORD *)(v13 + 24);
    v15 = *(_BYTE *)(v13 + 32);
    v16 = *(_QWORD *)(v13 + 40);
    v17 = *(_BYTE *)(v13 + 48);
    v18 = *(_QWORD *)(v13 + 56);
    v19 = *(_BYTE *)(v13 + 64);
    __dst[0] = *(_BYTE *)v13;
    *(_OWORD *)&__dst[8] = *(_OWORD *)(v13 + 8);
    *(_QWORD *)&__dst[24] = v14;
    __dst[32] = v15;
    *(_QWORD *)&__dst[40] = v16;
    __dst[48] = v17;
    *(_QWORD *)&__dst[56] = v18;
    __dst[64] = v19;
    v20 = sub_7ADA8();
    v21 = v20;
    v22 = 0;
    v23 = v20 + 56;
    v24 = -1 << *(_BYTE *)(v20 + 32);
    if (-v24 < 64)
      v25 = ~(-1 << -(char)v24);
    else
      v25 = -1;
    v26 = v25 & *(_QWORD *)(v20 + 56);
    v27 = (unint64_t)(63 - v24) >> 6;
    if (v26)
    {
LABEL_26:
      v28 = __clz(__rbit64(v26));
      v26 &= v26 - 1;
      v29 = v28 | (v22 << 6);
      goto LABEL_41;
    }
    while (1)
    {
      v30 = v22 + 1;
      if (__OFADD__(v22, 1))
      {
        __break(1u);
        goto LABEL_173;
      }
      if (v30 >= v27)
        goto LABEL_5;
      v31 = *(_QWORD *)(v23 + 8 * v30);
      ++v22;
      if (!v31)
      {
        v22 = v30 + 1;
        if (v30 + 1 >= v27)
          goto LABEL_5;
        v31 = *(_QWORD *)(v23 + 8 * v22);
        if (!v31)
        {
          v22 = v30 + 2;
          if (v30 + 2 >= v27)
            goto LABEL_5;
          v31 = *(_QWORD *)(v23 + 8 * v22);
          if (!v31)
            break;
        }
      }
LABEL_40:
      v26 = (v31 - 1) & v31;
      v29 = __clz(__rbit64(v31)) + (v22 << 6);
LABEL_41:
      v33 = v0[278];
      v34 = v0[277];
      v35 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * v29);
      memcpy(__dst, __src, 0x1E8uLL);
      *(_OWORD *)&__dst[488] = *v7;
      *(_QWORD *)&__dst[504] = v34;
      *(_QWORD *)&__dst[512] = v33;
      memcpy(&__dst[520], v179, 0x238uLL);
      v36 = sub_E11B8();
      if (v36[2] && (v37 = sub_39228(v35), (v38 & 1) != 0))
      {
        v171 = *(_QWORD *)(v36[7] + 8 * v37);
        swift_bridgeObjectRelease();
        sub_3EB0C((uint64_t)v163, 0);
        v39 = (_QWORD *)v174;
        v40 = swift_isUniquelyReferenced_nonNull_native(v174);
        *(_QWORD *)__dst = v174;
        v41 = sub_39228(v171);
        v42 = *(_QWORD *)(v174 + 16);
        v164 = v43;
        v44 = (v43 & 1) == 0;
        v45 = v42 + v44;
        if (__OFADD__(v42, v44))
          goto LABEL_174;
        if (*(_QWORD *)(v174 + 24) >= v45)
        {
          if ((v40 & 1) == 0)
          {
            sub_16B8D4();
            v39 = *(_QWORD **)__dst;
          }
          v48 = v164;
        }
        else
        {
          sub_15AC54(v45, v40);
          v39 = *(_QWORD **)__dst;
          v46 = sub_39228(v171);
          v48 = v164;
          if ((v164 & 1) != (v47 & 1))
            goto LABEL_170;
          v41 = v46;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain(v39);
        if ((v48 & 1) == 0)
          sub_170D44(v41, v171, (uint64_t)_swiftEmptyArrayStorage, v39);
        v49 = v39[7];
        swift_bridgeObjectRelease();
        v165 = v41;
        v172 = 8 * v41;
        v50 = *(_QWORD **)(v49 + 8 * v41);
        v51 = swift_isUniquelyReferenced_nonNull_native(v50);
        v161 = v49;
        *(_QWORD *)(v49 + v172) = v50;
        if ((v51 & 1) == 0)
        {
          v50 = sub_2FA6C(0, v50[2] + 1, 1, v50);
          *(_QWORD *)(v49 + 8 * v165) = v50;
        }
        v53 = v50[2];
        v52 = v50[3];
        v54 = v53 + 1;
        v174 = (uint64_t)v39;
        if (v53 >= v52 >> 1)
        {
          v55 = sub_2FA6C((_QWORD *)(v52 > 1), v53 + 1, 1, v50);
          v54 = v53 + 1;
          v50 = v55;
          *(_QWORD *)(v161 + 8 * v165) = v55;
        }
        v50[2] = v54;
        v50[v53 + 4] = v166;
        v163 = sub_A7FBC;
        v0 = (_QWORD *)v183;
        if (v26)
          goto LABEL_26;
      }
      else
      {
        swift_bridgeObjectRelease();
        v0 = (_QWORD *)v183;
        if (v26)
          goto LABEL_26;
      }
    }
    v32 = v30 + 3;
    if (v32 >= v27)
    {
LABEL_5:
      swift_release(v21);
      v6 = v167;
      v1 = v169;
      continue;
    }
    break;
  }
  v31 = *(_QWORD *)(v23 + 8 * v32);
  if (v31)
  {
    v22 = v32;
    goto LABEL_40;
  }
  while (1)
  {
    v22 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v22 >= v27)
      goto LABEL_5;
    v31 = *(_QWORD *)(v23 + 8 * v22);
    ++v32;
    if (v31)
      goto LABEL_40;
  }
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  __break(1u);
LABEL_183:
  __break(1u);
LABEL_184:
  __break(1u);
}

uint64_t sub_E1184()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2240));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_E11B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *result;
  int64_t v41;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = v1 + 64;
  v3 = 1 << *(_BYTE *)(v1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(v1 + 64);
  v41 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain_n(v1, 2);
  v6 = 0;
  while (1)
  {
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v8 = v7 | (v6 << 6);
    }
    else
    {
      v9 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_53;
      if (v9 >= v41)
      {
LABEL_48:
        swift_release(v1);
        swift_bridgeObjectRelease();
        return _swiftEmptyDictionarySingleton;
      }
      v10 = *(_QWORD *)(v2 + 8 * v9);
      ++v6;
      if (!v10)
      {
        v6 = v9 + 1;
        if (v9 + 1 >= v41)
          goto LABEL_48;
        v10 = *(_QWORD *)(v2 + 8 * v6);
        if (!v10)
        {
          v6 = v9 + 2;
          if (v9 + 2 >= v41)
            goto LABEL_48;
          v10 = *(_QWORD *)(v2 + 8 * v6);
          if (!v10)
          {
            v6 = v9 + 3;
            if (v9 + 3 >= v41)
              goto LABEL_48;
            v10 = *(_QWORD *)(v2 + 8 * v6);
            if (!v10)
            {
              v6 = v9 + 4;
              if (v9 + 4 >= v41)
                goto LABEL_48;
              v10 = *(_QWORD *)(v2 + 8 * v6);
              if (!v10)
              {
                v11 = v9 + 5;
                if (v11 >= v41)
                  goto LABEL_48;
                v10 = *(_QWORD *)(v2 + 8 * v11);
                if (!v10)
                {
                  while (1)
                  {
                    v6 = v11 + 1;
                    if (__OFADD__(v11, 1))
                      goto LABEL_54;
                    if (v6 >= v41)
                      goto LABEL_48;
                    v10 = *(_QWORD *)(v2 + 8 * v6);
                    ++v11;
                    if (v10)
                      goto LABEL_25;
                  }
                }
                v6 = v11;
              }
            }
          }
        }
      }
LABEL_25:
      v5 = (v10 - 1) & v10;
      v8 = __clz(__rbit64(v10)) + (v6 << 6);
    }
    v12 = 8 * v8;
    v13 = *(_QWORD *)(*(_QWORD *)(v1 + 48) + v12);
    v14 = *(_QWORD *)(*(_QWORD *)(v1 + 56) + v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v17 = sub_39228(v13);
    v18 = _swiftEmptyDictionarySingleton[2];
    v19 = (v16 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
      break;
    v21 = v16;
    if (_swiftEmptyDictionarySingleton[3] >= v20)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v16 & 1) != 0)
          goto LABEL_33;
      }
      else
      {
        sub_16B724();
        if ((v21 & 1) != 0)
          goto LABEL_33;
      }
    }
    else
    {
      sub_15A924(v20, isUniquelyReferenced_nonNull_native);
      v22 = sub_39228(v13);
      if ((v21 & 1) != (v23 & 1))
        goto LABEL_55;
      v17 = v22;
      if ((v21 & 1) != 0)
      {
LABEL_33:
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v17) = v14;
        goto LABEL_37;
      }
    }
    _swiftEmptyDictionarySingleton[(v17 >> 6) + 8] |= 1 << v17;
    v24 = 8 * v17;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v24) = v13;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v24) = v14;
    v25 = _swiftEmptyDictionarySingleton[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_51;
    _swiftEmptyDictionarySingleton[2] = v27;
LABEL_37:
    swift_bridgeObjectRelease();
    v28 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v30 = sub_39228(v14);
    v31 = _swiftEmptyDictionarySingleton[2];
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      goto LABEL_50;
    v34 = v29;
    if (_swiftEmptyDictionarySingleton[3] >= v33)
    {
      if ((v28 & 1) != 0)
      {
        if ((v29 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_16B724();
        if ((v34 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_15A924(v33, v28);
      v35 = sub_39228(v14);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_55;
      v30 = v35;
      if ((v34 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + 8 * v30) = v14;
        goto LABEL_5;
      }
    }
    _swiftEmptyDictionarySingleton[(v30 >> 6) + 8] |= 1 << v30;
    v37 = 8 * v30;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v37) = v14;
    *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v37) = v14;
    v38 = _swiftEmptyDictionarySingleton[2];
    v26 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v26)
      goto LABEL_52;
    _swiftEmptyDictionarySingleton[2] = v39;
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_E155C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>, double a4@<D0>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t result;
  char *v33;
  _QWORD v34[2];

  v8 = (_QWORD *)sub_52E58((uint64_t)_swiftEmptyArrayStorage);
  v9 = *(_QWORD *)(a2 + 16);
  if (v9)
  {
    v33 = a3;
    swift_bridgeObjectRetain(a2);
    v10 = 0;
    while (*(_QWORD *)(a1 + 16))
    {
      v11 = sub_39228(*(_QWORD *)(a2 + 8 * v10 + 32));
      if ((v12 & 1) == 0)
        goto LABEL_27;
      v13 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v11);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
      v34[0] = v8;
      v16 = sub_3933C(v13);
      v17 = v8[2];
      v18 = (v15 & 1) == 0;
      v19 = v17 + v18;
      if (__OFADD__(v17, v18))
        goto LABEL_28;
      v20 = v15;
      if (v8[3] >= v19)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_16B730();
          v8 = (_QWORD *)v34[0];
        }
      }
      else
      {
        sub_15A930(v19, isUniquelyReferenced_nonNull_native);
        v8 = (_QWORD *)v34[0];
        v21 = sub_3933C(v13);
        if ((v20 & 1) != (v22 & 1))
          goto LABEL_31;
        v16 = v21;
      }
      swift_bridgeObjectRelease();
      if ((v20 & 1) != 0)
      {
        swift_bridgeObjectRetain(v8);
      }
      else
      {
        v8[(v16 >> 6) + 8] |= 1 << v16;
        *(_BYTE *)(v8[6] + v16) = v13;
        *(_QWORD *)(v8[7] + 8 * v16) = 0;
        v23 = v8[2];
        v24 = v23 + 1;
        v25 = __OFADD__(v23, 1);
        swift_bridgeObjectRetain(v8);
        if (v25)
          goto LABEL_30;
        v8[2] = v24;
      }
      v26 = v8[7];
      swift_bridgeObjectRelease();
      v27 = *(_QWORD *)(v26 + 8 * v16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        goto LABEL_29;
      ++v10;
      *(_QWORD *)(v26 + 8 * v16) = v29;
      if (v9 == v10)
      {
        swift_bridgeObjectRelease();
        a3 = v33;
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Book.MediaType);
    __break(1u);
  }
  else
  {
LABEL_21:
    v30 = swift_bridgeObjectRetain(v8);
    sub_DFA08(v30, v34);
    swift_bridgeObjectRelease();
    v31 = v34[0];
    if (LOBYTE(v34[0]) != 2)
    {
      if ((double)v34[1] / (double)v9 >= a4)
        v31 = v34[0] & 1;
      else
        v31 = 2;
    }
    *a3 = v31;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for InterestBasedMediaTypesRecommendationService()
{
  return objc_opt_self(_TtC20BooksPersonalization44InterestBasedMediaTypesRecommendationService);
}

uint64_t sub_E17BC(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = *v2;
  v7 = (_QWORD *)swift_task_alloc(dword_1F459C);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_70AB4;
  v7[274] = v6;
  v7[273] = a1;
  memcpy(v7 + 211, a2, 0x1E8uLL);
  v8 = a2[62];
  v7[275] = a2[61];
  v7[276] = v8;
  v7[277] = a2[63];
  v7[278] = a2[64];
  memcpy(v7 + 2, a2 + 65, 0x238uLL);
  return swift_task_switch(sub_DFF8C, 0, 0);
}

uint64_t sub_E1870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  uint64_t result;
  int64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;

  v7 = sub_52F50((uint64_t)_swiftEmptyArrayStorage);
  v83 = &_swiftEmptySetSingleton;
  v70 = a1 + 64;
  v71 = a1;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v72 = v9 & *(_QWORD *)(a1 + 64);
  v69 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v11 = 0;
  v78 = a3;
  v73 = a2;
LABEL_5:
  v12 = v72;
  do
  {
    if (v12)
    {
      v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v14 = v13 | (v11 << 6);
    }
    else
    {
      v17 = v11 + 1;
      if (__OFADD__(v11, 1))
        goto LABEL_98;
      if (v17 >= v69)
      {
        swift_release(v71);
        v19 = v7;
        if (!*(_QWORD *)(v7 + 16))
          goto LABEL_91;
        goto LABEL_86;
      }
      v18 = *(_QWORD *)(v70 + 8 * v17);
      ++v11;
      if (!v18)
      {
        v19 = v7;
        v11 = v17 + 1;
        if (v17 + 1 >= v69)
          goto LABEL_85;
        v18 = *(_QWORD *)(v70 + 8 * v11);
        if (!v18)
        {
          v11 = v17 + 2;
          if (v17 + 2 >= v69)
            goto LABEL_85;
          v18 = *(_QWORD *)(v70 + 8 * v11);
          if (!v18)
          {
            v20 = v17 + 3;
            if (v20 >= v69)
            {
LABEL_85:
              swift_release(v71);
              if (!*(_QWORD *)(v7 + 16))
              {
LABEL_91:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_3EB0C(v10, 0);
                return 0;
              }
LABEL_86:
              v62 = sub_3933C(0);
              if ((v63 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v62) + 16) >= a4)
              {
                if (*(_QWORD *)(v19 + 16))
                {
                  v64 = sub_3933C(1);
                  if ((v65 & 1) != 0 && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v64) + 16) >= a4)
                    goto LABEL_96;
                }
              }
              goto LABEL_91;
            }
            v18 = *(_QWORD *)(v70 + 8 * v20);
            if (!v18)
            {
              while (1)
              {
                v11 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_99;
                if (v11 >= v69)
                  goto LABEL_85;
                v18 = *(_QWORD *)(v70 + 8 * v11);
                ++v20;
                if (v18)
                  goto LABEL_22;
              }
            }
            v11 = v20;
          }
        }
      }
LABEL_22:
      v12 = (v18 - 1) & v18;
      v14 = __clz(__rbit64(v18)) + (v11 << 6);
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v71 + 56) + 8 * v14);
    v16 = *(_QWORD *)(v15 + 16);
  }
  while (!v16);
  v72 = v12;
  v68 = v11;
  v76 = v15 + 32;
  v80 = *(unsigned __int8 *)(*(_QWORD *)(v71 + 48) + v14);
  if (*(_BYTE *)(*(_QWORD *)(v71 + 48) + v14))
    v21 = 0x6F6F626F69647561;
  else
    v21 = 0x6B6F6F6265;
  v22 = 0xE90000000000006BLL;
  if (!v80)
    v22 = 0xE500000000000000;
  v79 = v22;
  swift_bridgeObjectRetain(v15);
  v23 = 0;
  v74 = v16;
  v75 = v15;
  while (1)
  {
    if (v23 >= *(_QWORD *)(v15 + 16))
    {
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Book.MediaType);
      __break(1u);
      return result;
    }
    if (!*(_QWORD *)(a2 + 16))
    {
      v25 = _swiftEmptyArrayStorage;
      v27 = _swiftEmptyArrayStorage[2];
      if (v27)
        break;
      goto LABEL_81;
    }
    v24 = sub_39228(*(_QWORD *)(v76 + 8 * v23));
    v25 = _swiftEmptyArrayStorage;
    if ((v26 & 1) != 0)
    {
      v25 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8 * v24);
      swift_bridgeObjectRetain(v25);
    }
    v27 = v25[2];
    if (v27)
      break;
LABEL_81:
    swift_bridgeObjectRelease();
LABEL_30:
    if (++v23 == v16)
    {
      swift_bridgeObjectRelease();
      v11 = v68;
      goto LABEL_5;
    }
  }
  v77 = v23;
  v28 = 0;
  v19 = v7;
  v29 = v79;
  v81 = v27;
  while (v28 < v25[2])
  {
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_39;
    v30 = v25[v28 + 4];
    v31 = sub_39228(v30);
    if ((v32 & 1) == 0)
      goto LABEL_39;
    if (*(_BYTE *)(*(_QWORD *)(a3 + 56) + v31))
      v33 = 0x6F6F626F69647561;
    else
      v33 = 0x6B6F6F6265;
    if (*(_BYTE *)(*(_QWORD *)(a3 + 56) + v31))
      v34 = 0xE90000000000006BLL;
    else
      v34 = 0xE500000000000000;
    if (v21 == v33 && v29 == v34)
    {
      swift_bridgeObjectRelease_n(v29, 2);
    }
    else
    {
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v29, v33, v34, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
        goto LABEL_38;
    }
    v37 = v83;
    v27 = v81;
    if (v83[2])
    {
      v38 = static Hasher._hash(seed:_:)(v83[5], v30);
      v39 = -1 << *((_BYTE *)v37 + 32);
      v40 = v38 & ~v39;
      if (((*(_QWORD *)((char *)v37 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v40) & 1) != 0)
      {
        v41 = v37[6];
        if (*(_QWORD *)(v41 + 8 * v40) == v30)
          goto LABEL_39;
        v42 = ~v39;
        while (1)
        {
          v40 = (v40 + 1) & v42;
          if (((*(_QWORD *)((char *)v37 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v40) & 1) == 0)
            break;
          if (*(_QWORD *)(v41 + 8 * v40) == v30)
            goto LABEL_39;
        }
      }
    }
    v43 = v21;
    sub_3EB0C(v10, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v82 = v19;
    v10 = sub_3933C(v80);
    v46 = *(_QWORD *)(v19 + 16);
    v47 = (v45 & 1) == 0;
    v48 = v46 + v47;
    if (__OFADD__(v46, v47))
      goto LABEL_94;
    v49 = v45;
    if (*(_QWORD *)(v19 + 24) >= v48)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_16B8BC();
        v19 = v82;
      }
    }
    else
    {
      sub_15AC48(v48, isUniquelyReferenced_nonNull_native);
      v19 = v82;
      v50 = sub_3933C(v80);
      if ((v49 & 1) != (v51 & 1))
        goto LABEL_100;
      v10 = v50;
    }
    swift_bridgeObjectRelease();
    if ((v49 & 1) != 0)
    {
      swift_bridgeObjectRetain(v19);
    }
    else
    {
      *(_QWORD *)(v19 + 8 * (v10 >> 6) + 64) |= 1 << v10;
      *(_BYTE *)(*(_QWORD *)(v19 + 48) + v10) = v80;
      *(_QWORD *)(*(_QWORD *)(v19 + 56) + 8 * v10) = _swiftEmptyArrayStorage;
      v52 = *(_QWORD *)(v19 + 16);
      v53 = v52 + 1;
      v54 = v19;
      v19 = __OFADD__(v52, 1);
      v55 = swift_bridgeObjectRetain(v54);
      if ((v19 & 1) != 0)
        goto LABEL_95;
      *(_QWORD *)(v55 + 16) = v53;
      v19 = v55;
    }
    v56 = *(_QWORD *)(v19 + 56);
    v57 = v19;
    swift_bridgeObjectRelease();
    v58 = *(_QWORD **)(v56 + 8 * v10);
    v59 = swift_isUniquelyReferenced_nonNull_native(v58);
    *(_QWORD *)(v56 + 8 * v10) = v58;
    if ((v59 & 1) == 0)
    {
      v58 = sub_2FA6C(0, v58[2] + 1, 1, v58);
      *(_QWORD *)(v56 + 8 * v10) = v58;
    }
    v61 = v58[2];
    v60 = v58[3];
    if (v61 >= v60 >> 1)
    {
      v58 = sub_2FA6C((_QWORD *)(v60 > 1), v61 + 1, 1, v58);
      *(_QWORD *)(v56 + 8 * v10) = v58;
    }
    v21 = v43;
    v58[2] = v61 + 1;
    v58[v61 + 4] = v30;
    sub_1628D4(&v82, v30);
    v10 = (unint64_t)sub_A7FBC;
    v19 = v57;
    a3 = v78;
    v29 = v79;
LABEL_38:
    v27 = v81;
LABEL_39:
    if (++v28 == v27)
    {
      v7 = v19;
      swift_bridgeObjectRelease();
      a2 = v73;
      v16 = v74;
      v15 = v75;
      v23 = v77;
      goto LABEL_30;
    }
  }
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  swift_bridgeObjectRelease();
  sub_3EB0C(v10, 0);
  return v19;
}

_QWORD *sub_E1F00(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[70];
  _QWORD *v15;

  v2 = result[2];
  if (v2)
  {
    v4 = 0;
    v5 = result + 4;
    v6 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v4 <= v2)
        v7 = v2;
      else
        v7 = v4;
      while (1)
      {
        if (v4 == v7)
          goto LABEL_26;
        result = memcpy(v14, &v5[69 * v4++], 0x221uLL);
        if (!a2)
          break;
        v8 = *(_QWORD *)(a2 + 16);
        if (!v8)
          goto LABEL_6;
        if (*(_QWORD *)(a2 + 32) == v14[0])
          break;
        if (v8 != 1)
        {
          v9 = 5;
          while (1)
          {
            v10 = v9 - 3;
            if (__OFADD__(v9 - 4, 1))
              break;
            if (*(_QWORD *)(a2 + 8 * v9) == v14[0])
              goto LABEL_17;
            ++v9;
            if (v10 == v8)
              goto LABEL_6;
          }
          __break(1u);
LABEL_26:
          __break(1u);
          return result;
        }
LABEL_6:
        if (v4 == v2)
          return v6;
      }
LABEL_17:
      sub_6100(v14);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
      v15 = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_34110(0, v6[2] + 1, 1);
        v6 = v15;
      }
      v13 = v6[2];
      v12 = v6[3];
      if (v13 >= v12 >> 1)
      {
        sub_34110(v12 > 1, v13 + 1, 1);
        v6 = v15;
      }
      v6[2] = v13 + 1;
      result = memcpy(&v6[69 * v13 + 4], v14, 0x221uLL);
      if (v4 == v2)
        return v6;
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_E2084(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  Swift::Int v22;
  char *v23;
  uint64_t result;
  char *v25;
  char *v26;
  void (*v27)(_BYTE *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BYTE v43[32];
  uint64_t v44;

  v32 = a5;
  v33 = a8;
  v38 = a1;
  v39 = a2;
  v31 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v40 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v12 + 8));
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v15 = __chkstk_darwin(AssociatedTypeWitness);
  v36 = (char *)&v29 - v16;
  v41 = a4;
  __chkstk_darwin(v15);
  v35 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_getAssociatedTypeWitness(0, a6);
  v34 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v20 = (char *)&v29 - v19;
  v21 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v21)
    return static Array._allocateUninitialized(_:)(0, v41);
  v22 = v21;
  v30 = v18;
  v23 = v41;
  v44 = ContiguousArray.init()(v41);
  v37 = type metadata accessor for ContiguousArray(0, v23);
  ContiguousArray.reserveCapacity(_:)(v22);
  v41 = v20;
  result = dispatch thunk of Collection.startIndex.getter(a3);
  if (v22 < 0)
  {
    __break(1u);
  }
  else
  {
    v26 = v35;
    v25 = v36;
    while (1)
    {
      v27 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v43, v41, a3, a6);
      (*(void (**)(char *))(v14 + 16))(v25);
      v27(v43, 0);
      v28 = v42;
      v38(v25, v40);
      if (v28)
        break;
      v42 = 0;
      (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
      ContiguousArray.append(_:)(v26, v37);
      dispatch thunk of Collection.formIndex(after:)(v41, a3, a6);
      if (!--v22)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
        return v44;
      }
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v25, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v41, v30);
    swift_release(v44);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v40, v32);
  }
  return result;
}

double Book.Rationale.conditionalScore.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t AttributeAffinityResult.inferredFromSeedBooks.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AttributeAffinityResult(0) + 20);
  v4 = sub_5EDC(&qword_1F44C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AttributeAffinityResult(uint64_t a1)
{
  uint64_t result;

  result = qword_1F45F8;
  if (!qword_1F45F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AttributeAffinityResult);
  return result;
}

uint64_t AttributeAffinityResult.init(affinity:inferredFromSeedBooks:)@<X0>(uint64_t a1@<X0>, double *a2@<X8>, double a3@<D0>)
{
  char *v4;
  uint64_t v5;

  *a2 = a3;
  v4 = (char *)a2 + *(int *)(type metadata accessor for AttributeAffinityResult(0) + 20);
  v5 = sub_5EDC(&qword_1F44C0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a1, v5);
}

uint64_t AttributeScorerType.score<A>(attribute:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[8];

  v8[2] = a4;
  v8[3] = a5;
  v8[5] = a7;
  v8[6] = a1;
  v8[7] = a2;
  return (*(uint64_t (**)(void *(*)(void *), _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 8))(sub_E2574, v8, a3, a5, a7, a4, a6);
}

void *sub_E2490(void *__src, void (*a2)(_BYTE *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BYTE __dst[552];

  memcpy(__dst, __src, 0x221uLL);
  v10 = sub_E2D0C(a5, a5);
  v11 = swift_allocObject(v10, ((*(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80) + (unint64_t)*(unsigned int *)(v10 + 48)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(a5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(a5 - 8) + 80) | (unint64_t)*(unsigned __int16 *)(v10 + 52));
  v12 = static Array._adoptStorage(_:count:)(v11, 1);
  a2(__dst);
  v13 = sub_682F8(v12);
  if (Array._getCount()())
    v14 = (void *)sub_E3020(v13, a5, a7);
  else
    v14 = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  return v14;
}

void *sub_E2574(void *a1)
{
  uint64_t v1;

  return sub_E2490(a1, *(void (**)(_BYTE *))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t *initializeBufferWithCopyOfBuffer for AttributeAffinityResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *a1 = *a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = sub_5EDC(&qword_1F44C0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AttributeAffinityResult(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = sub_5EDC(&qword_1F44C0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_QWORD *initializeWithCopy for AttributeAffinityResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_5EDC(&qword_1F44C0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for AttributeAffinityResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_5EDC(&qword_1F44C0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_QWORD *initializeWithTake for AttributeAffinityResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_5EDC(&qword_1F44C0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for AttributeAffinityResult(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_5EDC(&qword_1F44C0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AttributeAffinityResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_E27D8);
}

uint64_t sub_E27D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 20);
  v5 = sub_5EDC(&qword_1F44C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for AttributeAffinityResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_E2828);
}

uint64_t sub_E2828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 20);
  v6 = sub_5EDC(&qword_1F44C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

void sub_E2870(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_E28E8(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_E28E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_1F4608)
  {
    v2 = sub_5F68(&qword_1F2870);
    v3 = sub_3EDBC((unint64_t *)&unk_1F4610, &qword_1F2870, (uint64_t)&protocol conformance descriptor for [A]);
    v4 = type metadata accessor for NonEmpty(a1, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1F4608);
  }
}

uint64_t dispatch thunk of AttributeScorerType.score<A>(attributes:of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t sub_E2974@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  double *v20;
  uint64_t v21;
  double *v22;
  uint64_t v23;
  unint64_t v24;

  v22 = a2;
  v3 = sub_5EDC(&qword_1F46E0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v21 - v8;
  v10 = sub_5EDC(&qword_1F44C0);
  NonEmpty.map<A>(_:)(sub_E2B34, 0, v10, &type metadata for Double);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
  sub_3EDBC(&qword_1F46E8, &qword_1F46E0, (uint64_t)&protocol conformance descriptor for NonEmpty<A>);
  dispatch thunk of Sequence.makeIterator()(v3);
  result = v23;
  v12 = *(_QWORD *)(v23 + 16);
  v13 = 0.0;
  if (v12 == v24)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    v19 = type metadata accessor for AttributeAffinityResult(0);
    v20 = v22;
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))((char *)v22 + *(int *)(v19 + 20), a1, v10);
    *v20 = v13;
  }
  else
  {
    if ((uint64_t)v12 > (uint64_t)v24)
    {
      v14 = v12 - v24;
      if (v12 >= v24)
        v15 = v12 - v24;
      else
        v15 = 0;
      v16 = v12 + ~v24;
      v17 = (double *)(v23 + 8 * v24 + 32);
      while (v15 > v16)
      {
        v18 = *v17++;
        v13 = v13 + v18;
        if (!--v14)
          goto LABEL_9;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

void sub_E2B34(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1 >> 1 != 0xFFFFFFFF)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0xE2CC8);
}

double sub_E2CD8@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double result;

  result = fabs(*a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for AttributeScorer()
{
  return objc_opt_self(_TtC20BooksPersonalization15AttributeScorer);
}

uint64_t sub_E2D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (swift_isClassType(a2))
    v3 = a2;
  else
    v3 = 0;
  if (v3)
    return sub_5EDC(&qword_1F3200);
  else
    return type metadata accessor for _ContiguousArrayStorage(0, a2);
}

uint64_t sub_E2D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double *v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[6];

  v9 = sub_5EDC(&qword_1F2870);
  v10 = sub_3EDBC(&qword_1F46D8, &qword_1F2870, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = Sequence.grouped<A>(by:)(a1, a2, v9, a4, v10, a5);
  v12 = sub_5EDC(&qword_1F44C0);
  v13 = type metadata accessor for AttributeAffinityResult(0);
  v14 = Dictionary.mapValues<A>(_:)(sub_E2974, 0, v11, a4, v12, v13, a5);
  swift_bridgeObjectRelease();
  v30[5] = v14;
  v15 = type metadata accessor for Dictionary.Values(0, a4, v13, a5);
  swift_bridgeObjectRetain(v14);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A : B].Values, v15);
  v18 = sub_E2084((void (*)(char *, char *))sub_E2CD8, 0, v15, (char *)&type metadata for Double, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v17);
  swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v18 + 16);
  if (!v19)
  {
    swift_bridgeObjectRelease();
    return v14;
  }
  if (v19 == 1)
  {
    v20 = 0;
    v21 = 0.0;
LABEL_8:
    v24 = v19 - v20;
    v25 = (double *)(v18 + 8 * v20 + 32);
    do
    {
      v26 = *v25++;
      v21 = v21 + v26;
      --v24;
    }
    while (v24);
    goto LABEL_10;
  }
  v20 = v19 & 0x7FFFFFFFFFFFFFFELL;
  v22 = (double *)(v18 + 40);
  v21 = 0.0;
  v23 = v19 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    v21 = v21 + *(v22 - 1) + *v22;
    v22 += 2;
    v23 -= 2;
  }
  while (v23);
  if (v19 != v20)
    goto LABEL_8;
LABEL_10:
  v27 = swift_bridgeObjectRelease();
  if (v21 != 0.0)
  {
    __chkstk_darwin(v27);
    *(double *)&v30[2] = v21;
    v28 = Dictionary.mapValues<A>(_:)(sub_E2FA0, v30, v14, a4, v13, v13, a5);
    swift_bridgeObjectRelease();
    return v28;
  }
  return v14;
}

uint64_t sub_E2FA0@<X0>(double *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  v5 = *a1 / *(double *)(v2 + 16);
  v6 = *(int *)(type metadata accessor for AttributeAffinityResult(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_5EDC(&qword_1F44C0);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, v7, v9);
  *a2 = v5;
  return result;
}

uint64_t sub_E3020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  Swift::Bool IsNativeType;
  void (*v21)(char *, unint64_t, uint64_t);
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  Swift::Int v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;

  v5 = a1;
  v49 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v48 = (char *)&v41 - v10;
  v41 = v11;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v41 - v13;
  v16 = Array.count.getter(v12, v15);
  if (v16)
  {
    v17 = v16;
    type metadata accessor for _SetStorage(0, a2, a3);
    v18 = (_QWORD *)static _SetStorage.allocate(capacity:)(v17);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  v44 = Array._getCount()();
  if (!v44)
    return (uint64_t)v18;
  v19 = 0;
  v47 = (char *)(v18 + 7);
  v42 = v14;
  v43 = v5;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v19, IsNativeType, v5, a2);
    if (IsNativeType)
    {
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
      v21(v14, v5+ ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80))+ *(_QWORD *)(v49 + 72) * v19, a2);
      v22 = __OFADD__(v19, 1);
      v23 = v19 + 1;
      if (v22)
        goto LABEL_20;
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)(v19, v5, a2);
      if (v41 != 8)
        goto LABEL_23;
      v40 = result;
      v50 = result;
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
      v21(v14, (unint64_t)&v50, a2);
      swift_unknownObjectRelease(v40);
      v22 = __OFADD__(v19, 1);
      v23 = v19 + 1;
      if (v22)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v18;
      }
    }
    v24 = v49;
    v45 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    v46 = v23;
    v45(v48, v14, a2);
    v25 = dispatch thunk of Hashable._rawHashValue(seed:)(v18[5], a2, a3);
    v26 = -1 << *((_BYTE *)v18 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    v29 = *(_QWORD *)&v47[8 * (v27 >> 6)];
    v30 = 1 << v27;
    v31 = *(_QWORD *)(v24 + 72);
    if (((1 << v27) & v29) != 0)
    {
      v32 = ~v26;
      do
      {
        v21(v8, v18[6] + v31 * v27, a2);
        v33 = a3;
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v48, a2, *(_QWORD *)(a3 + 8));
        v35 = *(void (**)(char *, uint64_t))(v49 + 8);
        v35(v8, a2);
        if ((v34 & 1) != 0)
        {
          v35(v48, a2);
          a3 = v33;
          v14 = v42;
          v5 = v43;
          goto LABEL_7;
        }
        v27 = (v27 + 1) & v32;
        v28 = v27 >> 6;
        v29 = *(_QWORD *)&v47[8 * (v27 >> 6)];
        v30 = 1 << v27;
        a3 = v33;
      }
      while ((v29 & (1 << v27)) != 0);
      v14 = v42;
      v5 = v43;
    }
    v36 = v48;
    *(_QWORD *)&v47[8 * v28] = v30 | v29;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v45)(v18[6] + v31 * v27, v36, a2);
    v38 = v18[2];
    v22 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v22)
      break;
    v18[2] = v39;
LABEL_7:
    v19 = v46;
    if (v46 == v44)
      return (uint64_t)v18;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

void *sub_E3328(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  void *result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = (void *)swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v10);
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v10);
        if (!v15)
        {
          v10 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v10);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_5:
    v13 = swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v12));
    result = (void *)a2(v13);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return &_swiftEmptyArrayStorage;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v10 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

_QWORD *sub_E34A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  _QWORD *result;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v18;
  int64_t v19;
  _QWORD v20[4];
  __int128 v21;
  _BYTE v22[552];
  _QWORD v23[70];
  uint64_t v24;

  v24 = a1;
  v3 = a2 + 64;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = (_QWORD *)swift_bridgeObjectRetain(a2);
  v9 = 0;
  v21 = xmmword_1875E0;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v7)
      goto LABEL_24;
    v18 = *(_QWORD *)(v3 + 8 * v9);
    if (!v18)
      break;
LABEL_19:
    v6 = (v18 - 1) & v18;
    v11 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    memcpy(v23, (const void *)(*(_QWORD *)(a2 + 56) + 552 * v11), 0x221uLL);
    v12 = v23[1];
    memcpy(v22, v23, 0x221uLL);
    v13 = sub_5EDC(&qword_1F02B8);
    v14 = swift_allocObject(v13, 33, 7);
    *(_OWORD *)(v14 + 16) = v21;
    *(_BYTE *)(v14 + 32) = v12;
    sub_6100(v23);
    v15 = sub_89600(v14);
    swift_setDeallocating(v14);
    v16 = swift_deallocClassInstance(v14, 32, 7);
    __chkstk_darwin(v16);
    v20[2] = &v24;
    v20[3] = v22;
    sub_4C64((uint64_t (*)(char *))sub_F2AEC, (uint64_t)v20, v15);
    swift_bridgeObjectRelease();
    result = sub_6228(v23);
  }
  v19 = v9 + 1;
  if (v9 + 1 >= v7)
    goto LABEL_24;
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v9 + 2;
  if (v9 + 2 >= v7)
    goto LABEL_24;
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v9 + 3;
  if (v9 + 3 >= v7)
    goto LABEL_24;
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
    goto LABEL_18;
  v19 = v9 + 4;
  if (v9 + 4 >= v7)
  {
LABEL_24:
    swift_release(a2);
    return (_QWORD *)v24;
  }
  v18 = *(_QWORD *)(v3 + 8 * v19);
  if (v18)
  {
LABEL_18:
    v9 = v19;
    goto LABEL_19;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v7)
      goto LABEL_24;
    v18 = *(_QWORD *)(v3 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_E36EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v4 = sub_5EDC(&qword_1F0D90);
  __chkstk_darwin(v4);
  v16 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v4);
  sub_3EDBC(&qword_1F4A58, &qword_1F0D90, (uint64_t)&protocol conformance descriptor for NonEmpty<A>);
  result = dispatch thunk of Sequence.makeIterator()(v4);
  v8 = v14;
  v9 = v15;
  v10 = *(_QWORD *)(v14 + 16);
  if (v15 == v10)
  {
    swift_bridgeObjectRelease();
    return a1;
  }
  else
  {
    v11 = 80 * v15 + 40;
    while (v9 < v10)
    {
      v12 = v9 + 1;
      if (__OFADD__(v9, 1))
        goto LABEL_10;
      result = sub_162BC4((_BYTE *)&v13 + 7, *(_BYTE *)(v8 + v11));
      v10 = *(_QWORD *)(v8 + 16);
      v11 += 80;
      ++v9;
      if (v12 == v10)
      {
        swift_bridgeObjectRelease();
        return v16;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  return result;
}

void CollectionRecommendation.collectionRecommendationType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;

  v1 = v0;
  v2 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v1, (uint64_t)v4);
  v5 = (char *)sub_E38B4 + 4 * byte_195800[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_E38B4()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  result = sub_5229C(v0);
  *v1 = 0;
  return result;
}

void sub_E3980()
{
  uint64_t v0;
  _BYTE *v1;

  sub_5229C(v0);
  *v1 = 9;
  JUMPOUT(0xE3968);
}

uint64_t type metadata accessor for CollectionRecommendation(uint64_t a1)
{
  return sub_A2060(a1, (uint64_t *)&unk_1F4840, (uint64_t)&nominal type descriptor for CollectionRecommendation);
}

uint64_t sub_E39A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(63 - v3) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v8 = 0;
  if (!v5)
    goto LABEL_8;
LABEL_5:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v11 = *(_QWORD *)(a1 + 56) + 72 * v10;
    if ((*(_BYTE *)(v11 + 32) & 1) != 0)
    {
      if (v5)
        goto LABEL_5;
    }
    else
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
      v17 = *(_QWORD *)(v11 + 8);
      v18 = *(_QWORD *)(v11 + 16);
      v19 = *(_QWORD *)(v11 + 24);
      v20 = _swiftEmptyDictionarySingleton[2];
      v32 = v19;
      if (_swiftEmptyDictionarySingleton[3] <= v20)
      {
        v21 = v20 + 1;
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
        sub_15A924(v21, 1);
      }
      else
      {
        swift_bridgeObjectRetain(v17);
        swift_bridgeObjectRetain(v18);
      }
      result = static Hasher._hash(seed:_:)(_swiftEmptyDictionarySingleton[5], v16);
      v22 = &_swiftEmptyDictionarySingleton[8];
      v23 = -1 << LOBYTE(_swiftEmptyDictionarySingleton[4]);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~_swiftEmptyDictionarySingleton[(v24 >> 6) + 8]) == 0)
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v23) >> 6;
        while (++v25 != v28 || (v27 & 1) == 0)
        {
          v29 = v25 == v28;
          if (v25 == v28)
            v25 = 0;
          v27 |= v29;
          v30 = v22[v25];
          if (v30 != -1)
          {
            v26 = __clz(__rbit64(~v30)) + (v25 << 6);
            goto LABEL_37;
          }
        }
        goto LABEL_41;
      }
      v26 = __clz(__rbit64((-1 << v24) & ~_swiftEmptyDictionarySingleton[(v24 >> 6) + 8])) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_37:
      *(_QWORD *)((char *)v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
      v31 = 8 * v26;
      *(_QWORD *)(_swiftEmptyDictionarySingleton[6] + v31) = v16;
      *(_QWORD *)(_swiftEmptyDictionarySingleton[7] + v31) = v32;
      ++_swiftEmptyDictionarySingleton[2];
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if (v5)
        goto LABEL_5;
    }
LABEL_8:
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v6)
      goto LABEL_39;
    v13 = *(_QWORD *)(v2 + 8 * v12);
    v14 = v8 + 1;
    if (!v13)
    {
      v14 = v8 + 2;
      if (v8 + 2 >= v6)
        goto LABEL_39;
      v13 = *(_QWORD *)(v2 + 8 * v14);
      if (!v13)
      {
        v14 = v8 + 3;
        if (v8 + 3 >= v6)
          goto LABEL_39;
        v13 = *(_QWORD *)(v2 + 8 * v14);
        if (!v13)
        {
          v14 = v8 + 4;
          if (v8 + 4 >= v6)
            goto LABEL_39;
          v13 = *(_QWORD *)(v2 + 8 * v14);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v5 = (v13 - 1) & v13;
    v10 = __clz(__rbit64(v13)) + (v14 << 6);
    v8 = v14;
  }
  v15 = v8 + 5;
  if (v8 + 5 >= v6)
  {
LABEL_39:
    sub_5FEC(a1);
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  v13 = *(_QWORD *)(v2 + 8 * v15);
  if (v13)
  {
    v14 = v8 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v6)
      goto LABEL_39;
    v13 = *(_QWORD *)(v2 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_23;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t CollectionRecommendation.targetGenreID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = type metadata accessor for CollectionRecommendation(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_52258(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload(v3, v1) == 5)
  {
    v4 = *(_QWORD *)&v3[*(int *)(sub_5EDC(&qword_1F3418) + 48)];
    v5 = sub_5EDC(&qword_1F0D90);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v3, v5);
  }
  else
  {
    sub_5229C((uint64_t)v3);
    return 0;
  }
  return v4;
}

uint64_t CollectionRecommendationType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_E3D88 + 4 * byte_19580A[*v0]))(1802465122, 0xE400000000000000);
}

uint64_t sub_E3D88()
{
  return 0x736B6F6F62;
}

unint64_t sub_E3D9C()
{
  return 0xD000000000000010;
}

uint64_t sub_E3E58()
{
  return 0x736569726573;
}

uint64_t CollectionRecommendationRequest.storeInfo.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t CollectionRecommendationRequest.allGenresAllowed.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

void CollectionRecommendationRequest.allowedSales.getter(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 40);
}

uint64_t PostHydrationFilteringCandidateMetadata.isPreorder.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t CollectionRecommendationRequest.clusteringOptions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 64);
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = v3;
  return swift_bridgeObjectRetain(v2);
}

uint64_t CollectionRecommendationRequest.optionsByCollectionRecommendationType.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 96));
}

void CollectionRecommendationRequest.overrideMediaTypeMethod.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 104);
}

void CollectionRecommendationRequest.overrideSeedBasedRecommendationSource.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 137);
}

__n128 CollectionRecommendationRequest.init(userInfo:storeInfo:allGenresAllowed:allowedSales:explicitAllowed:excludedStoreIDs:clusteringOptions:optionsByCollectionRecommendationType:overrideMediaTypeMethod:overrideBookCandidateLimit:overrideBookCandidateLimitPerSeedBook:overrideSeedBasedRecommendationSource:)@<Q0>(_OWORD *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, __n128 *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, uint64_t a11, char a12, uint64_t a13, char a14, char *a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  __n128 result;

  v15 = *a2;
  v16 = a2[1];
  v17 = *a4;
  v18 = a7[1].n128_u64[0];
  v19 = a7[1].n128_u64[1];
  v20 = *a10;
  v21 = *a15;
  *(_OWORD *)a9 = *a1;
  *(_QWORD *)(a9 + 16) = v15;
  *(_QWORD *)(a9 + 24) = v16;
  *(_BYTE *)(a9 + 32) = a3;
  *(_QWORD *)(a9 + 40) = v17;
  *(_BYTE *)(a9 + 48) = a5;
  *(_QWORD *)(a9 + 56) = a6;
  result = *a7;
  *(__n128 *)(a9 + 64) = *a7;
  *(_QWORD *)(a9 + 80) = v18;
  *(_QWORD *)(a9 + 88) = v19;
  *(_QWORD *)(a9 + 96) = a8;
  *(_BYTE *)(a9 + 104) = v20;
  *(_QWORD *)(a9 + 112) = a11;
  *(_BYTE *)(a9 + 120) = a12 & 1;
  *(_QWORD *)(a9 + 128) = a13;
  *(_BYTE *)(a9 + 136) = a14 & 1;
  *(_BYTE *)(a9 + 137) = v21;
  return result;
}

uint64_t sub_E3F50(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_E3F84 + 4 * byte_195814[a1]))(0x6F666E4972657375, 0xE800000000000000);
}

uint64_t sub_E3F84()
{
  return 0x666E4965726F7473;
}

unint64_t sub_E3FA0()
{
  return 0xD000000000000010;
}

unint64_t sub_E4070()
{
  return 0xD000000000000025;
}

uint64_t sub_E4098()
{
  unsigned __int8 *v0;

  return sub_E3F50(*v0);
}

uint64_t sub_E40A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_F1B9C(a1, a2);
  *a3 = result;
  return result;
}

void sub_E40C4(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_E40D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E456C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_E40F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_E456C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollectionRecommendationRequest.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  char v56;

  v3 = sub_5EDC(&qword_1F46F8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v7 = v1[1];
  v9 = v1[2];
  v48 = v1[3];
  v49 = v9;
  v55 = *((unsigned __int8 *)v1 + 32);
  v47 = v1[5];
  v46 = *((unsigned __int8 *)v1 + 48);
  v10 = v1[7];
  v44 = v1[8];
  v45 = v10;
  v11 = v1[10];
  v41 = v1[9];
  v42 = v11;
  v43 = v1[11];
  v40 = v1[12];
  LODWORD(v10) = *((unsigned __int8 *)v1 + 104);
  v37 = v1[14];
  v38 = *((unsigned __int8 *)v1 + 120);
  v39 = v10;
  v35 = v1[16];
  v36 = *((unsigned __int8 *)v1 + 136);
  v34 = *((unsigned __int8 *)v1 + 137);
  v12 = a1[3];
  v13 = a1[4];
  sub_49F4(a1, v12);
  v14 = sub_E456C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CollectionRecommendationRequest.CodingKeys, &type metadata for CollectionRecommendationRequest.CodingKeys, v14, v12, v13);
  v51 = v8;
  v52 = v7;
  v15 = v6;
  v56 = 0;
  v16 = sub_E45B0();
  v17 = v50;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v56, v3, &type metadata for UserInfo, v16);
  if (v17)
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v18 = v55;
  v19 = v46;
  v21 = v44;
  v20 = v45;
  v22 = v47;
  v51 = v49;
  v52 = v48;
  v56 = 1;
  v23 = sub_E45F4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v56, v3, &type metadata for StoreInfo, v23);
  LOBYTE(v51) = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v18, &v51, v3);
  v50 = v4;
  v51 = v22;
  v56 = 3;
  v24 = sub_E4638();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v56, v3, &type metadata for SaleOptions, v24);
  LOBYTE(v51) = 4;
  KeyedEncodingContainer.encode(_:forKey:)(v19, &v51, v3);
  v51 = v20;
  v56 = 5;
  v25 = sub_5EDC(&qword_1F2700);
  v26 = sub_E5014(&qword_1F2708, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v56, v3, v25, v26);
  v51 = v21;
  v52 = v41;
  v53 = v42;
  v54 = v43;
  v56 = 6;
  v27 = sub_E467C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v56, v3, &type metadata for ClusteringOptions, v27);
  v51 = v40;
  v56 = 7;
  v28 = sub_5EDC(&qword_1F4728);
  v29 = sub_E50B8(&qword_1F4730, (void (*)(void))sub_602A0, (void (*)(void))sub_E46C0, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v56, v3, v28, v29);
  LOBYTE(v51) = v39;
  v56 = 8;
  v30 = sub_E4704();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v56, v3, &type metadata for MediaTypeMethod, v30);
  LOBYTE(v51) = 9;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v37, v38, &v51, v3);
  LOBYTE(v51) = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v51, v3);
  LOBYTE(v51) = v34;
  v56 = 11;
  v31 = sub_5518C();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v56, v3, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v15, v3);
}

unint64_t sub_E456C()
{
  unint64_t result;

  result = qword_1F4700;
  if (!qword_1F4700)
  {
    result = swift_getWitnessTable(&unk_195EB4, &type metadata for CollectionRecommendationRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1F4700);
  }
  return result;
}

unint64_t sub_E45B0()
{
  unint64_t result;

  result = qword_1F4708;
  if (!qword_1F4708)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UserInfo, &type metadata for UserInfo);
    atomic_store(result, (unint64_t *)&qword_1F4708);
  }
  return result;
}

unint64_t sub_E45F4()
{
  unint64_t result;

  result = qword_1F4710;
  if (!qword_1F4710)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for StoreInfo, &type metadata for StoreInfo);
    atomic_store(result, (unint64_t *)&qword_1F4710);
  }
  return result;
}

unint64_t sub_E4638()
{
  unint64_t result;

  result = qword_1F4718;
  if (!qword_1F4718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SaleOptions, &type metadata for SaleOptions);
    atomic_store(result, (unint64_t *)&qword_1F4718);
  }
  return result;
}

unint64_t sub_E467C()
{
  unint64_t result;

  result = qword_1F4720;
  if (!qword_1F4720)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ClusteringOptions, &type metadata for ClusteringOptions);
    atomic_store(result, (unint64_t *)&qword_1F4720);
  }
  return result;
}

unint64_t sub_E46C0()
{
  unint64_t result;

  result = qword_1F4738;
  if (!qword_1F4738)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollectionRecommendationOptions, &type metadata for CollectionRecommendationOptions);
    atomic_store(result, (unint64_t *)&qword_1F4738);
  }
  return result;
}

unint64_t sub_E4704()
{
  unint64_t result;

  result = qword_1F4740;
  if (!qword_1F4740)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MediaTypeMethod, &type metadata for MediaTypeMethod);
    atomic_store(result, (unint64_t *)&qword_1F4740);
  }
  return result;
}

_QWORD *CollectionRecommendationRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _BYTE v72[7];
  uint64_t v73;
  char v74;
  _BYTE v75[7];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  _BYTE v83[7];
  uint64_t v84;
  char v85;
  _BYTE v86[7];
  uint64_t v87;
  char v88;
  char v89;
  char v90;
  unsigned __int8 v91;
  char v92;
  _BYTE v93[7];
  char v94;
  _BYTE v95[7];
  _BYTE v96[7];
  _DWORD v97[3];
  _QWORD *v98;

  v5 = sub_5EDC(&qword_1F4748);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  v98 = a1;
  sub_49F4(a1, v9);
  v11 = sub_E456C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CollectionRecommendationRequest.CodingKeys, &type metadata for CollectionRecommendationRequest.CodingKeys, v11, v9, v10);
  if (v2)
    return (_QWORD *)sub_62F8(v98);
  v12 = v6;
  LOBYTE(v59) = 0;
  v13 = sub_E4F48();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, &type metadata for UserInfo, &v59, v5, &type metadata for UserInfo, v13);
  v14 = v67;
  v15 = v68;
  LOBYTE(v59) = 1;
  v16 = sub_E4F8C();
  swift_bridgeObjectRetain(v15);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, &type metadata for StoreInfo, &v59, v5, &type metadata for StoreInfo, v16);
  *(_QWORD *)&v58 = v14;
  *((_QWORD *)&v58 + 1) = v15;
  v17 = v67;
  v18 = v68;
  LOBYTE(v67) = 2;
  swift_bridgeObjectRetain(v68);
  v56 = KeyedDecodingContainer.decode(_:forKey:)(&v67, v5);
  v57 = v17;
  LOBYTE(v59) = 3;
  v19 = sub_E4FD0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, &type metadata for SaleOptions, &v59, v5, &type metadata for SaleOptions, v19);
  v20 = v67;
  LOBYTE(v67) = 4;
  v55 = KeyedDecodingContainer.decode(_:forKey:)(&v67, v5);
  v21 = sub_5EDC(&qword_1F2700);
  LOBYTE(v59) = 5;
  v22 = sub_E5014(&qword_1F2730, (uint64_t)&protocol witness table for UInt64, (uint64_t)&protocol conformance descriptor for <> Set<A>);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, v21, &v59, v5, v21, v22);
  v23 = v67;
  LOBYTE(v59) = 6;
  v24 = sub_E5074();
  v54 = v23;
  swift_bridgeObjectRetain(v23);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, &type metadata for ClusteringOptions, &v59, v5, &type metadata for ClusteringOptions, v24);
  v25 = v69;
  v50 = v68;
  v51 = v67;
  v49 = v70;
  v53 = sub_5EDC(&qword_1F4728);
  LOBYTE(v59) = 7;
  v26 = sub_E50B8(&qword_1F4770, (void (*)(void))sub_60140, (void (*)(void))sub_E5134, (uint64_t)&protocol conformance descriptor for <> [A : B]);
  v52 = v25;
  swift_bridgeObjectRetain(v25);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v67, v53, &v59, v5, v53, v26);
  v53 = v20;
  v27 = v67;
  LOBYTE(v59) = 8;
  v28 = sub_E5178();
  swift_bridgeObjectRetain(v27);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v67, &type metadata for MediaTypeMethod, &v59, v5, &type metadata for MediaTypeMethod, v28);
  v47 = v67;
  LOBYTE(v67) = 9;
  v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v67, v5);
  v48 = v29;
  v94 = v29 & 1;
  LOBYTE(v67) = 10;
  v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v67, v5);
  v44 = v30 & 1;
  v92 = v30 & 1;
  v90 = 11;
  v31 = sub_552EC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v91, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source, &v90, v5, &type metadata for Configuration.SeedBasedRecommendationConfiguration.Source, v31);
  v56 &= 1u;
  LOBYTE(v25) = v55 & 1;
  v43 = v55 & 1;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v5);
  v55 = v91;
  v32 = *((_QWORD *)&v58 + 1);
  v59 = v58;
  *(_QWORD *)&v60 = v57;
  *((_QWORD *)&v60 + 1) = v18;
  v33 = v18;
  LOBYTE(v61) = v56;
  v34 = v54;
  *((_QWORD *)&v61 + 1) = v53;
  LOBYTE(v62) = v25;
  v35 = v52;
  *((_QWORD *)&v62 + 1) = v54;
  *(_QWORD *)&v63 = v51;
  *((_QWORD *)&v63 + 1) = v50;
  *(_QWORD *)&v64 = v52;
  *((_QWORD *)&v64 + 1) = v49;
  *(_QWORD *)&v65 = v27;
  BYTE8(v65) = v47;
  v36 = v45;
  *(_QWORD *)&v66[0] = v46;
  BYTE8(v66[0]) = v48 & 1;
  *(_QWORD *)&v66[1] = v45;
  BYTE8(v66[1]) = v44;
  BYTE9(v66[1]) = v91;
  sub_E51BC(&v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37 = v66[0];
  a2[6] = v65;
  a2[7] = v37;
  *(_OWORD *)((char *)a2 + 122) = *(_OWORD *)((char *)v66 + 10);
  v38 = v62;
  a2[2] = v61;
  a2[3] = v38;
  v39 = v64;
  a2[4] = v63;
  a2[5] = v39;
  v40 = v60;
  *a2 = v59;
  a2[1] = v40;
  sub_62F8(v98);
  v67 = v58;
  v68 = v32;
  v69 = v57;
  v70 = v33;
  v71 = v56;
  *(_DWORD *)v72 = v97[0];
  *(_DWORD *)&v72[3] = *(_DWORD *)((char *)v97 + 3);
  v73 = v53;
  v74 = v43;
  *(_DWORD *)v75 = *(_DWORD *)v96;
  *(_DWORD *)&v75[3] = *(_DWORD *)&v96[3];
  v76 = v34;
  v77 = v51;
  v78 = v50;
  v79 = v35;
  v80 = v49;
  v81 = v27;
  v82 = v47;
  *(_DWORD *)v83 = *(_DWORD *)v95;
  *(_DWORD *)&v83[3] = *(_DWORD *)&v95[3];
  v84 = v46;
  v85 = v94;
  *(_DWORD *)v86 = *(_DWORD *)v93;
  *(_DWORD *)&v86[3] = *(_DWORD *)&v93[3];
  v87 = v36;
  v88 = v92;
  v89 = v55;
  return sub_E5224(&v67);
}

